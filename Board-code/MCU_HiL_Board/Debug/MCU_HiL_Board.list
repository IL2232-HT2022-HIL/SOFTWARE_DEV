
MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017d50  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003308  08017f50  08017f50  00027f50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b258  0801b258  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801b258  0801b258  0002b258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b260  0801b260  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b260  0801b260  0002b260  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b264  0801b264  0002b264  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0801b268  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000098  0801b300  00030098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000138  0801b3a0  00030138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000f22c  200001d8  0801b440  000301d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000f404  0801b440  0003f404  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003bf0c  00000000  00000000  00030206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000800b  00000000  00000000  0006c112  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002ad8  00000000  00000000  00074120  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002938  00000000  00000000  00076bf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000121b9  00000000  00000000  00079530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003f7a1  00000000  00000000  0008b6e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00128718  00000000  00000000  000cae8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001f35a2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000bd54  00000000  00000000  001f35f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	08017f38 	.word	0x08017f38

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	08017f38 	.word	0x08017f38

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e8:	f3bf 8f4f 	dsb	sy
}
 80005ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ee:	f3bf 8f6f 	isb	sy
}
 80005f2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <SCB_EnableICache+0x48>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <SCB_EnableICache+0x48>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <SCB_EnableICache+0x48>)
 800060e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000612:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000614:	f3bf 8f4f 	dsb	sy
}
 8000618:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800061a:	f3bf 8f6f 	isb	sy
}
 800061e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000638:	2200      	movs	r2, #0
 800063a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800063e:	f3bf 8f4f 	dsb	sy
}
 8000642:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800064a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	0b5b      	lsrs	r3, r3, #13
 8000650:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000654:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	08db      	lsrs	r3, r3, #3
 800065a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800065e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	015a      	lsls	r2, r3, #5
 8000664:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000668:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800066e:	4911      	ldr	r1, [pc, #68]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000670:	4313      	orrs	r3, r2
 8000672:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	1e5a      	subs	r2, r3, #1
 800067a:	60ba      	str	r2, [r7, #8]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1ef      	bne.n	8000660 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	1e5a      	subs	r2, r3, #1
 8000684:	60fa      	str	r2, [r7, #12]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1e5      	bne.n	8000656 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800068a:	f3bf 8f4f 	dsb	sy
}
 800068e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800069a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800069c:	f3bf 8f4f 	dsb	sy
}
 80006a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a2:	f3bf 8f6f 	isb	sy
}
 80006a6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006bc:	f000 fa08 	bl	8000ad0 <MPU_Config>

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006c0:	f7ff ff90 	bl	80005e4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006c4:	f7ff ffb4 	bl	8000630 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c8:	f000 ff28 	bl	800151c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006cc:	f000 f82c 	bl	8000728 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006d0:	f000 f978 	bl	80009c4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006d4:	f000 f90c 	bl	80008f0 <MX_SPI1_Init>
  MX_CAN1_Init();
 80006d8:	f000 f896 	bl	8000808 <MX_CAN1_Init>
  MX_I2C1_Init();
 80006dc:	f000 f8c8 	bl	8000870 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80006e0:	f000 f940 	bl	8000964 <MX_USART1_UART_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006e4:	f005 fe30 	bl	8006348 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006e8:	4a09      	ldr	r2, [pc, #36]	; (8000710 <main+0x58>)
 80006ea:	2100      	movs	r1, #0
 80006ec:	4809      	ldr	r0, [pc, #36]	; (8000714 <main+0x5c>)
 80006ee:	f005 febd 	bl	800646c <osThreadNew>
 80006f2:	4603      	mov	r3, r0
 80006f4:	4a08      	ldr	r2, [pc, #32]	; (8000718 <main+0x60>)
 80006f6:	6013      	str	r3, [r2, #0]

  /* creation of StartThread */
  StartThreadHandle = osThreadNew(StartTaskStartThread, NULL, &StartThread_attributes);
 80006f8:	4a08      	ldr	r2, [pc, #32]	; (800071c <main+0x64>)
 80006fa:	2100      	movs	r1, #0
 80006fc:	4808      	ldr	r0, [pc, #32]	; (8000720 <main+0x68>)
 80006fe:	f005 feb5 	bl	800646c <osThreadNew>
 8000702:	4603      	mov	r3, r0
 8000704:	4a07      	ldr	r2, [pc, #28]	; (8000724 <main+0x6c>)
 8000706:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000708:	f005 fe52 	bl	80063b0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800070c:	e7fe      	b.n	800070c <main+0x54>
 800070e:	bf00      	nop
 8000710:	0801af6c 	.word	0x0801af6c
 8000714:	08000aa5 	.word	0x08000aa5
 8000718:	2000035c 	.word	0x2000035c
 800071c:	0801af90 	.word	0x0801af90
 8000720:	08000ac1 	.word	0x08000ac1
 8000724:	20000360 	.word	0x20000360

08000728 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b094      	sub	sp, #80	; 0x50
 800072c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072e:	f107 031c 	add.w	r3, r7, #28
 8000732:	2234      	movs	r2, #52	; 0x34
 8000734:	2100      	movs	r1, #0
 8000736:	4618      	mov	r0, r3
 8000738:	f016 fc35 	bl	8016fa6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800073c:	f107 0308 	add.w	r3, r7, #8
 8000740:	2200      	movs	r2, #0
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	605a      	str	r2, [r3, #4]
 8000746:	609a      	str	r2, [r3, #8]
 8000748:	60da      	str	r2, [r3, #12]
 800074a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800074c:	4b2c      	ldr	r3, [pc, #176]	; (8000800 <SystemClock_Config+0xd8>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000750:	4a2b      	ldr	r2, [pc, #172]	; (8000800 <SystemClock_Config+0xd8>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	; 0x40
 8000758:	4b29      	ldr	r3, [pc, #164]	; (8000800 <SystemClock_Config+0xd8>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000760:	607b      	str	r3, [r7, #4]
 8000762:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <SystemClock_Config+0xdc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800076c:	4a25      	ldr	r2, [pc, #148]	; (8000804 <SystemClock_Config+0xdc>)
 800076e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000772:	6013      	str	r3, [r2, #0]
 8000774:	4b23      	ldr	r3, [pc, #140]	; (8000804 <SystemClock_Config+0xdc>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800077c:	603b      	str	r3, [r7, #0]
 800077e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000780:	2301      	movs	r3, #1
 8000782:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000784:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000788:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078a:	2302      	movs	r3, #2
 800078c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800078e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000792:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000794:	2304      	movs	r3, #4
 8000796:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000798:	2360      	movs	r3, #96	; 0x60
 800079a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800079c:	2302      	movs	r3, #2
 800079e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007a0:	2304      	movs	r3, #4
 80007a2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80007a4:	2302      	movs	r3, #2
 80007a6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 031c 	add.w	r3, r7, #28
 80007ac:	4618      	mov	r0, r3
 80007ae:	f002 ff55 	bl	800365c <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007b8:	f000 f9f0 	bl	8000b9c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80007bc:	f002 fefe 	bl	80035bc <HAL_PWREx_EnableOverDrive>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007c6:	f000 f9e9 	bl	8000b9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007ca:	230f      	movs	r3, #15
 80007cc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ce:	2302      	movs	r3, #2
 80007d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007e0:	f107 0308 	add.w	r3, r7, #8
 80007e4:	2103      	movs	r1, #3
 80007e6:	4618      	mov	r0, r3
 80007e8:	f003 f9e6 	bl	8003bb8 <HAL_RCC_ClockConfig>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007f2:	f000 f9d3 	bl	8000b9c <Error_Handler>
  }
}
 80007f6:	bf00      	nop
 80007f8:	3750      	adds	r7, #80	; 0x50
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40007000 	.word	0x40007000

08000808 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800080c:	4b16      	ldr	r3, [pc, #88]	; (8000868 <MX_CAN1_Init+0x60>)
 800080e:	4a17      	ldr	r2, [pc, #92]	; (800086c <MX_CAN1_Init+0x64>)
 8000810:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 8000812:	4b15      	ldr	r3, [pc, #84]	; (8000868 <MX_CAN1_Init+0x60>)
 8000814:	2210      	movs	r2, #16
 8000816:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000818:	4b13      	ldr	r3, [pc, #76]	; (8000868 <MX_CAN1_Init+0x60>)
 800081a:	2200      	movs	r2, #0
 800081c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800081e:	4b12      	ldr	r3, [pc, #72]	; (8000868 <MX_CAN1_Init+0x60>)
 8000820:	2200      	movs	r2, #0
 8000822:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000824:	4b10      	ldr	r3, [pc, #64]	; (8000868 <MX_CAN1_Init+0x60>)
 8000826:	2200      	movs	r2, #0
 8000828:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800082a:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <MX_CAN1_Init+0x60>)
 800082c:	2200      	movs	r2, #0
 800082e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000830:	4b0d      	ldr	r3, [pc, #52]	; (8000868 <MX_CAN1_Init+0x60>)
 8000832:	2200      	movs	r2, #0
 8000834:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000836:	4b0c      	ldr	r3, [pc, #48]	; (8000868 <MX_CAN1_Init+0x60>)
 8000838:	2200      	movs	r2, #0
 800083a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800083c:	4b0a      	ldr	r3, [pc, #40]	; (8000868 <MX_CAN1_Init+0x60>)
 800083e:	2200      	movs	r2, #0
 8000840:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000842:	4b09      	ldr	r3, [pc, #36]	; (8000868 <MX_CAN1_Init+0x60>)
 8000844:	2200      	movs	r2, #0
 8000846:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	; (8000868 <MX_CAN1_Init+0x60>)
 800084a:	2200      	movs	r2, #0
 800084c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800084e:	4b06      	ldr	r3, [pc, #24]	; (8000868 <MX_CAN1_Init+0x60>)
 8000850:	2200      	movs	r2, #0
 8000852:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	; (8000868 <MX_CAN1_Init+0x60>)
 8000856:	f000 febb 	bl	80015d0 <HAL_CAN_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000860:	f000 f99c 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200001f4 	.word	0x200001f4
 800086c:	40006400 	.word	0x40006400

08000870 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000874:	4b1b      	ldr	r3, [pc, #108]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000876:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <MX_I2C1_Init+0x78>)
 8000878:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <MX_I2C1_Init+0x74>)
 800087c:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <MX_I2C1_Init+0x7c>)
 800087e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000880:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000882:	2200      	movs	r2, #0
 8000884:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000886:	4b17      	ldr	r3, [pc, #92]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000888:	2201      	movs	r2, #1
 800088a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800088c:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <MX_I2C1_Init+0x74>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000892:	4b14      	ldr	r3, [pc, #80]	; (80008e4 <MX_I2C1_Init+0x74>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000898:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_I2C1_Init+0x74>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800089e:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008a4:	4b0f      	ldr	r3, [pc, #60]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008aa:	480e      	ldr	r0, [pc, #56]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008ac:	f002 fd5e 	bl	800336c <HAL_I2C_Init>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d001      	beq.n	80008ba <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008b6:	f000 f971 	bl	8000b9c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008ba:	2100      	movs	r1, #0
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008be:	f002 fde5 	bl	800348c <HAL_I2CEx_ConfigAnalogFilter>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d001      	beq.n	80008cc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008c8:	f000 f968 	bl	8000b9c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008cc:	2100      	movs	r1, #0
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_I2C1_Init+0x74>)
 80008d0:	f002 fe27 	bl	8003522 <HAL_I2CEx_ConfigDigitalFilter>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008da:	f000 f95f 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	2000021c 	.word	0x2000021c
 80008e8:	40005400 	.word	0x40005400
 80008ec:	20303e5d 	.word	0x20303e5d

080008f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_SPI1_Init+0x6c>)
 80008f6:	4a1a      	ldr	r2, [pc, #104]	; (8000960 <MX_SPI1_Init+0x70>)
 80008f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_SPI1_Init+0x6c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_SPI1_Init+0x6c>)
 8000902:	2200      	movs	r2, #0
 8000904:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_SPI1_Init+0x6c>)
 8000908:	f44f 7240 	mov.w	r2, #768	; 0x300
 800090c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800090e:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_SPI1_Init+0x6c>)
 8000910:	2200      	movs	r2, #0
 8000912:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_SPI1_Init+0x6c>)
 8000916:	2200      	movs	r2, #0
 8000918:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800091a:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_SPI1_Init+0x6c>)
 800091c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000920:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000922:	4b0e      	ldr	r3, [pc, #56]	; (800095c <MX_SPI1_Init+0x6c>)
 8000924:	2200      	movs	r2, #0
 8000926:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_SPI1_Init+0x6c>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800092e:	4b0b      	ldr	r3, [pc, #44]	; (800095c <MX_SPI1_Init+0x6c>)
 8000930:	2200      	movs	r2, #0
 8000932:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000934:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_SPI1_Init+0x6c>)
 8000936:	2207      	movs	r2, #7
 8000938:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800093a:	4b08      	ldr	r3, [pc, #32]	; (800095c <MX_SPI1_Init+0x6c>)
 800093c:	2200      	movs	r2, #0
 800093e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_SPI1_Init+0x6c>)
 8000942:	2200      	movs	r2, #0
 8000944:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000946:	4805      	ldr	r0, [pc, #20]	; (800095c <MX_SPI1_Init+0x6c>)
 8000948:	f003 ffb6 	bl	80048b8 <HAL_SPI_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000952:	f000 f923 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000270 	.word	0x20000270
 8000960:	40013000 	.word	0x40013000

08000964 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000968:	4b14      	ldr	r3, [pc, #80]	; (80009bc <MX_USART1_UART_Init+0x58>)
 800096a:	4a15      	ldr	r2, [pc, #84]	; (80009c0 <MX_USART1_UART_Init+0x5c>)
 800096c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800096e:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_USART1_UART_Init+0x58>)
 8000970:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000974:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000976:	4b11      	ldr	r3, [pc, #68]	; (80009bc <MX_USART1_UART_Init+0x58>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800097c:	4b0f      	ldr	r3, [pc, #60]	; (80009bc <MX_USART1_UART_Init+0x58>)
 800097e:	2200      	movs	r2, #0
 8000980:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000982:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_USART1_UART_Init+0x58>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000988:	4b0c      	ldr	r3, [pc, #48]	; (80009bc <MX_USART1_UART_Init+0x58>)
 800098a:	220c      	movs	r2, #12
 800098c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_USART1_UART_Init+0x58>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_USART1_UART_Init+0x58>)
 8000996:	2200      	movs	r2, #0
 8000998:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_USART1_UART_Init+0x58>)
 800099c:	2200      	movs	r2, #0
 800099e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_USART1_UART_Init+0x58>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_USART1_UART_Init+0x58>)
 80009a8:	f004 fb10 	bl	8004fcc <HAL_UART_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80009b2:	f000 f8f3 	bl	8000b9c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	200002d4 	.word	0x200002d4
 80009c0:	40011000 	.word	0x40011000

080009c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	b08c      	sub	sp, #48	; 0x30
 80009c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ca:	f107 031c 	add.w	r3, r7, #28
 80009ce:	2200      	movs	r2, #0
 80009d0:	601a      	str	r2, [r3, #0]
 80009d2:	605a      	str	r2, [r3, #4]
 80009d4:	609a      	str	r2, [r3, #8]
 80009d6:	60da      	str	r2, [r3, #12]
 80009d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009da:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <MX_GPIO_Init+0xd8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a2f      	ldr	r2, [pc, #188]	; (8000a9c <MX_GPIO_Init+0xd8>)
 80009e0:	f043 0304 	orr.w	r3, r3, #4
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <MX_GPIO_Init+0xd8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0304 	and.w	r3, r3, #4
 80009ee:	61bb      	str	r3, [r7, #24]
 80009f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009f2:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <MX_GPIO_Init+0xd8>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	4a29      	ldr	r2, [pc, #164]	; (8000a9c <MX_GPIO_Init+0xd8>)
 80009f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009fc:	6313      	str	r3, [r2, #48]	; 0x30
 80009fe:	4b27      	ldr	r3, [pc, #156]	; (8000a9c <MX_GPIO_Init+0xd8>)
 8000a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a06:	617b      	str	r3, [r7, #20]
 8000a08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a0a:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <MX_GPIO_Init+0xd8>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a23      	ldr	r2, [pc, #140]	; (8000a9c <MX_GPIO_Init+0xd8>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <MX_GPIO_Init+0xd8>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	613b      	str	r3, [r7, #16]
 8000a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	4b1e      	ldr	r3, [pc, #120]	; (8000a9c <MX_GPIO_Init+0xd8>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	4a1d      	ldr	r2, [pc, #116]	; (8000a9c <MX_GPIO_Init+0xd8>)
 8000a28:	f043 0302 	orr.w	r3, r3, #2
 8000a2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a2e:	4b1b      	ldr	r3, [pc, #108]	; (8000a9c <MX_GPIO_Init+0xd8>)
 8000a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a32:	f003 0302 	and.w	r3, r3, #2
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3a:	4b18      	ldr	r3, [pc, #96]	; (8000a9c <MX_GPIO_Init+0xd8>)
 8000a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a3e:	4a17      	ldr	r2, [pc, #92]	; (8000a9c <MX_GPIO_Init+0xd8>)
 8000a40:	f043 0308 	orr.w	r3, r3, #8
 8000a44:	6313      	str	r3, [r2, #48]	; 0x30
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <MX_GPIO_Init+0xd8>)
 8000a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4a:	f003 0308 	and.w	r3, r3, #8
 8000a4e:	60bb      	str	r3, [r7, #8]
 8000a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a52:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <MX_GPIO_Init+0xd8>)
 8000a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a56:	4a11      	ldr	r2, [pc, #68]	; (8000a9c <MX_GPIO_Init+0xd8>)
 8000a58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <MX_GPIO_Init+0xd8>)
 8000a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a66:	607b      	str	r3, [r7, #4]
 8000a68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000a70:	480b      	ldr	r0, [pc, #44]	; (8000aa0 <MX_GPIO_Init+0xdc>)
 8000a72:	f002 fc61 	bl	8003338 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000a76:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000a7a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a80:	2300      	movs	r3, #0
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a84:	2300      	movs	r3, #0
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a88:	f107 031c 	add.w	r3, r7, #28
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	4804      	ldr	r0, [pc, #16]	; (8000aa0 <MX_GPIO_Init+0xdc>)
 8000a90:	f002 faa6 	bl	8002fe0 <HAL_GPIO_Init>

}
 8000a94:	bf00      	nop
 8000a96:	3730      	adds	r7, #48	; 0x30
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bd80      	pop	{r7, pc}
 8000a9c:	40023800 	.word	0x40023800
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000aac:	f004 fef6 	bl	800589c <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  tcpip_init(NULL, NULL);
 8000ab0:	2100      	movs	r1, #0
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	f009 fe12 	bl	800a6dc <tcpip_init>
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f005 fdbd 	bl	8006638 <osDelay>
 8000abe:	e7fb      	b.n	8000ab8 <StartDefaultTask+0x14>

08000ac0 <StartTaskStartThread>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskStartThread */
void StartTaskStartThread(void *argument)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {
	  //osDelay(1);
	  osThreadTerminate(NULL);
 8000ac8:	2000      	movs	r0, #0
 8000aca:	f005 fd75 	bl	80065b8 <osThreadTerminate>
 8000ace:	e7fb      	b.n	8000ac8 <StartTaskStartThread+0x8>

08000ad0 <MPU_Config>:
}

/* MPU Configuration */

void MPU_Config(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b084      	sub	sp, #16
 8000ad4:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ad6:	463b      	mov	r3, r7
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000ae2:	f000 ff53 	bl	800198c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x00;
 8000aee:	2300      	movs	r3, #0
 8000af0:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000af2:	231f      	movs	r3, #31
 8000af4:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000af6:	2387      	movs	r3, #135	; 0x87
 8000af8:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000afe:	2300      	movs	r3, #0
 8000b00:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b02:	2301      	movs	r3, #1
 8000b04:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b06:	2301      	movs	r3, #1
 8000b08:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b12:	463b      	mov	r3, r7
 8000b14:	4618      	mov	r0, r3
 8000b16:	f000 ff71 	bl	80019fc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x20078000;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <MPU_Config+0xa0>)
 8000b20:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_16KB;
 8000b22:	230d      	movs	r3, #13
 8000b24:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x00;
 8000b26:	2300      	movs	r3, #0
 8000b28:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b32:	2300      	movs	r3, #0
 8000b34:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b3a:	463b      	mov	r3, r7
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f000 ff5d 	bl	80019fc <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000b42:	2302      	movs	r3, #2
 8000b44:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x2007C000;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MPU_Config+0xa4>)
 8000b48:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_1KB;
 8000b4a:	2309      	movs	r3, #9
 8000b4c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b52:	2301      	movs	r3, #1
 8000b54:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 8000b56:	2301      	movs	r3, #1
 8000b58:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b5a:	463b      	mov	r3, r7
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f000 ff4d 	bl	80019fc <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b62:	2004      	movs	r0, #4
 8000b64:	f000 ff2a 	bl	80019bc <HAL_MPU_Enable>

}
 8000b68:	bf00      	nop
 8000b6a:	3710      	adds	r7, #16
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20078000 	.word	0x20078000
 8000b74:	2007c000 	.word	0x2007c000

08000b78 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a04      	ldr	r2, [pc, #16]	; (8000b98 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d101      	bne.n	8000b8e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b8a:	f000 fcdd 	bl	8001548 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	3708      	adds	r7, #8
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40001000 	.word	0x40001000

08000b9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <Error_Handler+0x8>
	...

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a10      	ldr	r2, [pc, #64]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	210f      	movs	r1, #15
 8000be2:	f06f 0001 	mvn.w	r0, #1
 8000be6:	f000 fea7 	bl	8001938 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40023800 	.word	0x40023800

08000bf8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08a      	sub	sp, #40	; 0x28
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	2200      	movs	r2, #0
 8000c06:	601a      	str	r2, [r3, #0]
 8000c08:	605a      	str	r2, [r3, #4]
 8000c0a:	609a      	str	r2, [r3, #8]
 8000c0c:	60da      	str	r2, [r3, #12]
 8000c0e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a17      	ldr	r2, [pc, #92]	; (8000c74 <HAL_CAN_MspInit+0x7c>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d128      	bne.n	8000c6c <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c1a:	4b17      	ldr	r3, [pc, #92]	; (8000c78 <HAL_CAN_MspInit+0x80>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a16      	ldr	r2, [pc, #88]	; (8000c78 <HAL_CAN_MspInit+0x80>)
 8000c20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <HAL_CAN_MspInit+0x80>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c2e:	613b      	str	r3, [r7, #16]
 8000c30:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <HAL_CAN_MspInit+0x80>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a10      	ldr	r2, [pc, #64]	; (8000c78 <HAL_CAN_MspInit+0x80>)
 8000c38:	f043 0301 	orr.w	r3, r3, #1
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <HAL_CAN_MspInit+0x80>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0301 	and.w	r3, r3, #1
 8000c46:	60fb      	str	r3, [r7, #12]
 8000c48:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000c4a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000c4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c50:	2302      	movs	r3, #2
 8000c52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c58:	2303      	movs	r3, #3
 8000c5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c5c:	2309      	movs	r3, #9
 8000c5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c60:	f107 0314 	add.w	r3, r7, #20
 8000c64:	4619      	mov	r1, r3
 8000c66:	4805      	ldr	r0, [pc, #20]	; (8000c7c <HAL_CAN_MspInit+0x84>)
 8000c68:	f002 f9ba 	bl	8002fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000c6c:	bf00      	nop
 8000c6e:	3728      	adds	r7, #40	; 0x28
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40006400 	.word	0x40006400
 8000c78:	40023800 	.word	0x40023800
 8000c7c:	40020000 	.word	0x40020000

08000c80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b0ae      	sub	sp, #184	; 0xb8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	601a      	str	r2, [r3, #0]
 8000c90:	605a      	str	r2, [r3, #4]
 8000c92:	609a      	str	r2, [r3, #8]
 8000c94:	60da      	str	r2, [r3, #12]
 8000c96:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c98:	f107 0314 	add.w	r3, r7, #20
 8000c9c:	2290      	movs	r2, #144	; 0x90
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f016 f980 	bl	8016fa6 <memset>
  if(hi2c->Instance==I2C1)
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a22      	ldr	r2, [pc, #136]	; (8000d34 <HAL_I2C_MspInit+0xb4>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d13c      	bne.n	8000d2a <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cb0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000cb4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f003 f9d2 	bl	8004068 <HAL_RCCEx_PeriphCLKConfig>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000cca:	f7ff ff67 	bl	8000b9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b1a      	ldr	r3, [pc, #104]	; (8000d38 <HAL_I2C_MspInit+0xb8>)
 8000cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cd2:	4a19      	ldr	r2, [pc, #100]	; (8000d38 <HAL_I2C_MspInit+0xb8>)
 8000cd4:	f043 0302 	orr.w	r3, r3, #2
 8000cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cda:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <HAL_I2C_MspInit+0xb8>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000ce6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000cee:	2312      	movs	r3, #18
 8000cf0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfa:	2303      	movs	r3, #3
 8000cfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d00:	2304      	movs	r3, #4
 8000d02:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d06:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	480b      	ldr	r0, [pc, #44]	; (8000d3c <HAL_I2C_MspInit+0xbc>)
 8000d0e:	f002 f967 	bl	8002fe0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d12:	4b09      	ldr	r3, [pc, #36]	; (8000d38 <HAL_I2C_MspInit+0xb8>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	4a08      	ldr	r2, [pc, #32]	; (8000d38 <HAL_I2C_MspInit+0xb8>)
 8000d18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d1e:	4b06      	ldr	r3, [pc, #24]	; (8000d38 <HAL_I2C_MspInit+0xb8>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000d2a:	bf00      	nop
 8000d2c:	37b8      	adds	r7, #184	; 0xb8
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	40005400 	.word	0x40005400
 8000d38:	40023800 	.word	0x40023800
 8000d3c:	40020400 	.word	0x40020400

08000d40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	; 0x28
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	605a      	str	r2, [r3, #4]
 8000d52:	609a      	str	r2, [r3, #8]
 8000d54:	60da      	str	r2, [r3, #12]
 8000d56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4a25      	ldr	r2, [pc, #148]	; (8000df4 <HAL_SPI_MspInit+0xb4>)
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	d143      	bne.n	8000dea <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d62:	4b25      	ldr	r3, [pc, #148]	; (8000df8 <HAL_SPI_MspInit+0xb8>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d66:	4a24      	ldr	r2, [pc, #144]	; (8000df8 <HAL_SPI_MspInit+0xb8>)
 8000d68:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6e:	4b22      	ldr	r3, [pc, #136]	; (8000df8 <HAL_SPI_MspInit+0xb8>)
 8000d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7a:	4b1f      	ldr	r3, [pc, #124]	; (8000df8 <HAL_SPI_MspInit+0xb8>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	4a1e      	ldr	r2, [pc, #120]	; (8000df8 <HAL_SPI_MspInit+0xb8>)
 8000d80:	f043 0301 	orr.w	r3, r3, #1
 8000d84:	6313      	str	r3, [r2, #48]	; 0x30
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <HAL_SPI_MspInit+0xb8>)
 8000d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8a:	f003 0301 	and.w	r3, r3, #1
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_SPI_MspInit+0xb8>)
 8000d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d96:	4a18      	ldr	r2, [pc, #96]	; (8000df8 <HAL_SPI_MspInit+0xb8>)
 8000d98:	f043 0308 	orr.w	r3, r3, #8
 8000d9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d9e:	4b16      	ldr	r3, [pc, #88]	; (8000df8 <HAL_SPI_MspInit+0xb8>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da2:	f003 0308 	and.w	r3, r3, #8
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000daa:	2360      	movs	r3, #96	; 0x60
 8000dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dae:	2302      	movs	r3, #2
 8000db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	2300      	movs	r3, #0
 8000db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db6:	2303      	movs	r3, #3
 8000db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dba:	2305      	movs	r3, #5
 8000dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	480d      	ldr	r0, [pc, #52]	; (8000dfc <HAL_SPI_MspInit+0xbc>)
 8000dc6:	f002 f90b 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000dca:	2380      	movs	r3, #128	; 0x80
 8000dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000dda:	2305      	movs	r3, #5
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000dde:	f107 0314 	add.w	r3, r7, #20
 8000de2:	4619      	mov	r1, r3
 8000de4:	4806      	ldr	r0, [pc, #24]	; (8000e00 <HAL_SPI_MspInit+0xc0>)
 8000de6:	f002 f8fb 	bl	8002fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000dea:	bf00      	nop
 8000dec:	3728      	adds	r7, #40	; 0x28
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	40013000 	.word	0x40013000
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020c00 	.word	0x40020c00

08000e04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b0ae      	sub	sp, #184	; 0xb8
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e1c:	f107 0314 	add.w	r3, r7, #20
 8000e20:	2290      	movs	r2, #144	; 0x90
 8000e22:	2100      	movs	r1, #0
 8000e24:	4618      	mov	r0, r3
 8000e26:	f016 f8be 	bl	8016fa6 <memset>
  if(huart->Instance==USART1)
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a32      	ldr	r2, [pc, #200]	; (8000ef8 <HAL_UART_MspInit+0xf4>)
 8000e30:	4293      	cmp	r3, r2
 8000e32:	d15d      	bne.n	8000ef0 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000e34:	2340      	movs	r3, #64	; 0x40
 8000e36:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4618      	mov	r0, r3
 8000e42:	f003 f911 	bl	8004068 <HAL_RCCEx_PeriphCLKConfig>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e4c:	f7ff fea6 	bl	8000b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e50:	4b2a      	ldr	r3, [pc, #168]	; (8000efc <HAL_UART_MspInit+0xf8>)
 8000e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e54:	4a29      	ldr	r2, [pc, #164]	; (8000efc <HAL_UART_MspInit+0xf8>)
 8000e56:	f043 0310 	orr.w	r3, r3, #16
 8000e5a:	6453      	str	r3, [r2, #68]	; 0x44
 8000e5c:	4b27      	ldr	r3, [pc, #156]	; (8000efc <HAL_UART_MspInit+0xf8>)
 8000e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e60:	f003 0310 	and.w	r3, r3, #16
 8000e64:	613b      	str	r3, [r7, #16]
 8000e66:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e68:	4b24      	ldr	r3, [pc, #144]	; (8000efc <HAL_UART_MspInit+0xf8>)
 8000e6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6c:	4a23      	ldr	r2, [pc, #140]	; (8000efc <HAL_UART_MspInit+0xf8>)
 8000e6e:	f043 0302 	orr.w	r3, r3, #2
 8000e72:	6313      	str	r3, [r2, #48]	; 0x30
 8000e74:	4b21      	ldr	r3, [pc, #132]	; (8000efc <HAL_UART_MspInit+0xf8>)
 8000e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e78:	f003 0302 	and.w	r3, r3, #2
 8000e7c:	60fb      	str	r3, [r7, #12]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e80:	4b1e      	ldr	r3, [pc, #120]	; (8000efc <HAL_UART_MspInit+0xf8>)
 8000e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e84:	4a1d      	ldr	r2, [pc, #116]	; (8000efc <HAL_UART_MspInit+0xf8>)
 8000e86:	f043 0301 	orr.w	r3, r3, #1
 8000e8a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e8c:	4b1b      	ldr	r3, [pc, #108]	; (8000efc <HAL_UART_MspInit+0xf8>)
 8000e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	60bb      	str	r3, [r7, #8]
 8000e96:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000e98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e9c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ea0:	2302      	movs	r3, #2
 8000ea2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eac:	2303      	movs	r3, #3
 8000eae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4810      	ldr	r0, [pc, #64]	; (8000f00 <HAL_UART_MspInit+0xfc>)
 8000ec0:	f002 f88e 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ec4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ec8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ede:	2307      	movs	r3, #7
 8000ee0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <HAL_UART_MspInit+0x100>)
 8000eec:	f002 f878 	bl	8002fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000ef0:	bf00      	nop
 8000ef2:	37b8      	adds	r7, #184	; 0xb8
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	bd80      	pop	{r7, pc}
 8000ef8:	40011000 	.word	0x40011000
 8000efc:	40023800 	.word	0x40023800
 8000f00:	40020400 	.word	0x40020400
 8000f04:	40020000 	.word	0x40020000

08000f08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08e      	sub	sp, #56	; 0x38
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f18:	4b33      	ldr	r3, [pc, #204]	; (8000fe8 <HAL_InitTick+0xe0>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	4a32      	ldr	r2, [pc, #200]	; (8000fe8 <HAL_InitTick+0xe0>)
 8000f1e:	f043 0310 	orr.w	r3, r3, #16
 8000f22:	6413      	str	r3, [r2, #64]	; 0x40
 8000f24:	4b30      	ldr	r3, [pc, #192]	; (8000fe8 <HAL_InitTick+0xe0>)
 8000f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f28:	f003 0310 	and.w	r3, r3, #16
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f30:	f107 0210 	add.w	r2, r7, #16
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4611      	mov	r1, r2
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f003 f862 	bl	8004004 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f40:	6a3b      	ldr	r3, [r7, #32]
 8000f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d103      	bne.n	8000f52 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f4a:	f003 f833 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8000f4e:	6378      	str	r0, [r7, #52]	; 0x34
 8000f50:	e004      	b.n	8000f5c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f52:	f003 f82f 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 8000f56:	4603      	mov	r3, r0
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f5e:	4a23      	ldr	r2, [pc, #140]	; (8000fec <HAL_InitTick+0xe4>)
 8000f60:	fba2 2303 	umull	r2, r3, r2, r3
 8000f64:	0c9b      	lsrs	r3, r3, #18
 8000f66:	3b01      	subs	r3, #1
 8000f68:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f6a:	4b21      	ldr	r3, [pc, #132]	; (8000ff0 <HAL_InitTick+0xe8>)
 8000f6c:	4a21      	ldr	r2, [pc, #132]	; (8000ff4 <HAL_InitTick+0xec>)
 8000f6e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f70:	4b1f      	ldr	r3, [pc, #124]	; (8000ff0 <HAL_InitTick+0xe8>)
 8000f72:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f76:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f78:	4a1d      	ldr	r2, [pc, #116]	; (8000ff0 <HAL_InitTick+0xe8>)
 8000f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f7c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f7e:	4b1c      	ldr	r3, [pc, #112]	; (8000ff0 <HAL_InitTick+0xe8>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f84:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <HAL_InitTick+0xe8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f8a:	4b19      	ldr	r3, [pc, #100]	; (8000ff0 <HAL_InitTick+0xe8>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000f90:	4817      	ldr	r0, [pc, #92]	; (8000ff0 <HAL_InitTick+0xe8>)
 8000f92:	f003 fd3c 	bl	8004a0e <HAL_TIM_Base_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d11b      	bne.n	8000fdc <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000fa4:	4812      	ldr	r0, [pc, #72]	; (8000ff0 <HAL_InitTick+0xe8>)
 8000fa6:	f003 fd93 	bl	8004ad0 <HAL_TIM_Base_Start_IT>
 8000faa:	4603      	mov	r3, r0
 8000fac:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000fb0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d111      	bne.n	8000fdc <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000fb8:	2036      	movs	r0, #54	; 0x36
 8000fba:	f000 fcd9 	bl	8001970 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2b0f      	cmp	r3, #15
 8000fc2:	d808      	bhi.n	8000fd6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	6879      	ldr	r1, [r7, #4]
 8000fc8:	2036      	movs	r0, #54	; 0x36
 8000fca:	f000 fcb5 	bl	8001938 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fce:	4a0a      	ldr	r2, [pc, #40]	; (8000ff8 <HAL_InitTick+0xf0>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6013      	str	r3, [r2, #0]
 8000fd4:	e002      	b.n	8000fdc <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fdc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3738      	adds	r7, #56	; 0x38
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	40023800 	.word	0x40023800
 8000fec:	431bde83 	.word	0x431bde83
 8000ff0:	20000364 	.word	0x20000364
 8000ff4:	40001000 	.word	0x40001000
 8000ff8:	20000004 	.word	0x20000004

08000ffc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <NMI_Handler+0x4>

08001002 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <HardFault_Handler+0x4>

08001008 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <MemManage_Handler+0x4>

0800100e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001012:	e7fe      	b.n	8001012 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	e7fe      	b.n	8001018 <UsageFault_Handler+0x4>

0800101a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101a:	b480      	push	{r7}
 800101c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800101e:	bf00      	nop
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800102c:	4802      	ldr	r0, [pc, #8]	; (8001038 <TIM6_DAC_IRQHandler+0x10>)
 800102e:	f003 fdc7 	bl	8004bc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	20000364 	.word	0x20000364

0800103c <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001040:	4802      	ldr	r0, [pc, #8]	; (800104c <ETH_IRQHandler+0x10>)
 8001042:	f001 f8f9 	bl	8002238 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20004dc0 	.word	0x20004dc0

08001050 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
	return 1;
 8001054:	2301      	movs	r3, #1
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_kill>:

int _kill(int pid, int sig)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
 8001068:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800106a:	4b05      	ldr	r3, [pc, #20]	; (8001080 <_kill+0x20>)
 800106c:	2216      	movs	r2, #22
 800106e:	601a      	str	r2, [r3, #0]
	return -1;
 8001070:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr
 8001080:	2000f400 	.word	0x2000f400

08001084 <_exit>:

void _exit (int status)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ffe5 	bl	8001060 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001096:	e7fe      	b.n	8001096 <_exit+0x12>

08001098 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b086      	sub	sp, #24
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010a4:	2300      	movs	r3, #0
 80010a6:	617b      	str	r3, [r7, #20]
 80010a8:	e00a      	b.n	80010c0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80010aa:	f3af 8000 	nop.w
 80010ae:	4601      	mov	r1, r0
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	1c5a      	adds	r2, r3, #1
 80010b4:	60ba      	str	r2, [r7, #8]
 80010b6:	b2ca      	uxtb	r2, r1
 80010b8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	697a      	ldr	r2, [r7, #20]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	dbf0      	blt.n	80010aa <_read+0x12>
	}

return len;
 80010c8:	687b      	ldr	r3, [r7, #4]
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b086      	sub	sp, #24
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	60f8      	str	r0, [r7, #12]
 80010da:	60b9      	str	r1, [r7, #8]
 80010dc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010de:	2300      	movs	r3, #0
 80010e0:	617b      	str	r3, [r7, #20]
 80010e2:	e009      	b.n	80010f8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	1c5a      	adds	r2, r3, #1
 80010e8:	60ba      	str	r2, [r7, #8]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010f2:	697b      	ldr	r3, [r7, #20]
 80010f4:	3301      	adds	r3, #1
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	697a      	ldr	r2, [r7, #20]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	dbf1      	blt.n	80010e4 <_write+0x12>
	}
	return len;
 8001100:	687b      	ldr	r3, [r7, #4]
}
 8001102:	4618      	mov	r0, r3
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}

0800110a <_close>:

int _close(int file)
{
 800110a:	b480      	push	{r7}
 800110c:	b083      	sub	sp, #12
 800110e:	af00      	add	r7, sp, #0
 8001110:	6078      	str	r0, [r7, #4]
	return -1;
 8001112:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001116:	4618      	mov	r0, r3
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr

08001122 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001122:	b480      	push	{r7}
 8001124:	b083      	sub	sp, #12
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
 800112a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001132:	605a      	str	r2, [r3, #4]
	return 0;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_isatty>:

int _isatty(int file)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
	return 1;
 800114a:	2301      	movs	r3, #1
}
 800114c:	4618      	mov	r0, r3
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr

08001158 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	60f8      	str	r0, [r7, #12]
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
	return 0;
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3714      	adds	r7, #20
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
	...

08001174 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001174:	b480      	push	{r7}
 8001176:	b087      	sub	sp, #28
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800117c:	4a14      	ldr	r2, [pc, #80]	; (80011d0 <_sbrk+0x5c>)
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <_sbrk+0x60>)
 8001180:	1ad3      	subs	r3, r2, r3
 8001182:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001188:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d102      	bne.n	8001196 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <_sbrk+0x64>)
 8001192:	4a12      	ldr	r2, [pc, #72]	; (80011dc <_sbrk+0x68>)
 8001194:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <_sbrk+0x64>)
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	4413      	add	r3, r2
 800119e:	693a      	ldr	r2, [r7, #16]
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d205      	bcs.n	80011b0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80011a4:	4b0e      	ldr	r3, [pc, #56]	; (80011e0 <_sbrk+0x6c>)
 80011a6:	220c      	movs	r2, #12
 80011a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295
 80011ae:	e009      	b.n	80011c4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <_sbrk+0x64>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	4a06      	ldr	r2, [pc, #24]	; (80011d8 <_sbrk+0x64>)
 80011c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011c2:	68fb      	ldr	r3, [r7, #12]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	371c      	adds	r7, #28
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	20080000 	.word	0x20080000
 80011d4:	00000400 	.word	0x00000400
 80011d8:	200003b0 	.word	0x200003b0
 80011dc:	2000f408 	.word	0x2000f408
 80011e0:	2000f400 	.word	0x2000f400

080011e4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011e8:	4b06      	ldr	r3, [pc, #24]	; (8001204 <SystemInit+0x20>)
 80011ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011ee:	4a05      	ldr	r2, [pc, #20]	; (8001204 <SystemInit+0x20>)
 80011f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011f8:	bf00      	nop
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	e000ed00 	.word	0xe000ed00

08001208 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001240 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800120c:	480d      	ldr	r0, [pc, #52]	; (8001244 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800120e:	490e      	ldr	r1, [pc, #56]	; (8001248 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001210:	4a0e      	ldr	r2, [pc, #56]	; (800124c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001212:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001214:	e002      	b.n	800121c <LoopCopyDataInit>

08001216 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001216:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001218:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121a:	3304      	adds	r3, #4

0800121c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800121c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800121e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001220:	d3f9      	bcc.n	8001216 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001222:	4a0b      	ldr	r2, [pc, #44]	; (8001250 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001224:	4c0b      	ldr	r4, [pc, #44]	; (8001254 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001226:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001228:	e001      	b.n	800122e <LoopFillZerobss>

0800122a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800122c:	3204      	adds	r2, #4

0800122e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800122e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001230:	d3fb      	bcc.n	800122a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001232:	f7ff ffd7 	bl	80011e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001236:	f015 fe71 	bl	8016f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800123a:	f7ff fa3d 	bl	80006b8 <main>
  bx  lr    
 800123e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001240:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800124c:	0801b268 	.word	0x0801b268
  ldr r2, =_sbss
 8001250:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001254:	2000f404 	.word	0x2000f404

08001258 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC_IRQHandler>

0800125a <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d00b      	beq.n	8001282 <LAN8742_RegisterBusIO+0x28>
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	68db      	ldr	r3, [r3, #12]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d007      	beq.n	8001282 <LAN8742_RegisterBusIO+0x28>
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	689b      	ldr	r3, [r3, #8]
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <LAN8742_RegisterBusIO+0x28>
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	691b      	ldr	r3, [r3, #16]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d102      	bne.n	8001288 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295
 8001286:	e014      	b.n	80012b2 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	68da      	ldr	r2, [r3, #12]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	689a      	ldr	r2, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	691a      	ldr	r2, [r3, #16]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr

080012be <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80012be:	b580      	push	{r7, lr}
 80012c0:	b086      	sub	sp, #24
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	2300      	movs	r3, #0
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	2300      	movs	r3, #0
 80012d0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80012d2:	2300      	movs	r3, #0
 80012d4:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d17c      	bne.n	80013d8 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d002      	beq.n	80012ec <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2220      	movs	r2, #32
 80012f0:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80012f2:	2300      	movs	r3, #0
 80012f4:	617b      	str	r3, [r7, #20]
 80012f6:	e01c      	b.n	8001332 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	f107 0208 	add.w	r2, r7, #8
 8001300:	2112      	movs	r1, #18
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	4798      	blx	r3
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	da03      	bge.n	8001314 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800130c:	f06f 0304 	mvn.w	r3, #4
 8001310:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8001312:	e00b      	b.n	800132c <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	f003 031f 	and.w	r3, r3, #31
 800131a:	697a      	ldr	r2, [r7, #20]
 800131c:	429a      	cmp	r2, r3
 800131e:	d105      	bne.n	800132c <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	697a      	ldr	r2, [r7, #20]
 8001324:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
         break;
 800132a:	e005      	b.n	8001338 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	3301      	adds	r3, #1
 8001330:	617b      	str	r3, [r7, #20]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2b1f      	cmp	r3, #31
 8001336:	d9df      	bls.n	80012f8 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	2b1f      	cmp	r3, #31
 800133e:	d902      	bls.n	8001346 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001340:	f06f 0302 	mvn.w	r3, #2
 8001344:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d145      	bne.n	80013d8 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	691b      	ldr	r3, [r3, #16]
 8001350:	687a      	ldr	r2, [r7, #4]
 8001352:	6810      	ldr	r0, [r2, #0]
 8001354:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001358:	2100      	movs	r1, #0
 800135a:	4798      	blx	r3
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	db37      	blt.n	80013d2 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	6810      	ldr	r0, [r2, #0]
 800136a:	f107 0208 	add.w	r2, r7, #8
 800136e:	2100      	movs	r1, #0
 8001370:	4798      	blx	r3
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	db28      	blt.n	80013ca <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	699b      	ldr	r3, [r3, #24]
 800137c:	4798      	blx	r3
 800137e:	4603      	mov	r3, r0
 8001380:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8001382:	e01c      	b.n	80013be <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	699b      	ldr	r3, [r3, #24]
 8001388:	4798      	blx	r3
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001396:	d80e      	bhi.n	80013b6 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	695b      	ldr	r3, [r3, #20]
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	6810      	ldr	r0, [r2, #0]
 80013a0:	f107 0208 	add.w	r2, r7, #8
 80013a4:	2100      	movs	r1, #0
 80013a6:	4798      	blx	r3
 80013a8:	4603      	mov	r3, r0
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	da07      	bge.n	80013be <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80013ae:	f06f 0304 	mvn.w	r3, #4
 80013b2:	613b      	str	r3, [r7, #16]
                 break;
 80013b4:	e010      	b.n	80013d8 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80013b6:	f06f 0301 	mvn.w	r3, #1
 80013ba:	613b      	str	r3, [r7, #16]
               break;
 80013bc:	e00c      	b.n	80013d8 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d1dd      	bne.n	8001384 <LAN8742_Init+0xc6>
 80013c8:	e006      	b.n	80013d8 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80013ca:	f06f 0304 	mvn.w	r3, #4
 80013ce:	613b      	str	r3, [r7, #16]
 80013d0:	e002      	b.n	80013d8 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80013d2:	f06f 0303 	mvn.w	r3, #3
 80013d6:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d112      	bne.n	8001404 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	699b      	ldr	r3, [r3, #24]
 80013e2:	4798      	blx	r3
 80013e4:	4603      	mov	r3, r0
 80013e6:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80013e8:	bf00      	nop
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	699b      	ldr	r3, [r3, #24]
 80013ee:	4798      	blx	r3
 80013f0:	4603      	mov	r3, r0
 80013f2:	461a      	mov	r2, r3
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	1ad3      	subs	r3, r2, r3
 80013f8:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80013fc:	d9f5      	bls.n	80013ea <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2201      	movs	r2, #1
 8001402:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001404:	693b      	ldr	r3, [r7, #16]
 }
 8001406:	4618      	mov	r0, r3
 8001408:	3718      	adds	r7, #24
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001416:	2300      	movs	r3, #0
 8001418:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	695b      	ldr	r3, [r3, #20]
 800141e:	687a      	ldr	r2, [r7, #4]
 8001420:	6810      	ldr	r0, [r2, #0]
 8001422:	f107 020c 	add.w	r2, r7, #12
 8001426:	2101      	movs	r1, #1
 8001428:	4798      	blx	r3
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	da02      	bge.n	8001436 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001430:	f06f 0304 	mvn.w	r3, #4
 8001434:	e06e      	b.n	8001514 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	687a      	ldr	r2, [r7, #4]
 800143c:	6810      	ldr	r0, [r2, #0]
 800143e:	f107 020c 	add.w	r2, r7, #12
 8001442:	2101      	movs	r1, #1
 8001444:	4798      	blx	r3
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	da02      	bge.n	8001452 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800144c:	f06f 0304 	mvn.w	r3, #4
 8001450:	e060      	b.n	8001514 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f003 0304 	and.w	r3, r3, #4
 8001458:	2b00      	cmp	r3, #0
 800145a:	d101      	bne.n	8001460 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800145c:	2301      	movs	r3, #1
 800145e:	e059      	b.n	8001514 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	687a      	ldr	r2, [r7, #4]
 8001466:	6810      	ldr	r0, [r2, #0]
 8001468:	f107 020c 	add.w	r2, r7, #12
 800146c:	2100      	movs	r1, #0
 800146e:	4798      	blx	r3
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	da02      	bge.n	800147c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001476:	f06f 0304 	mvn.w	r3, #4
 800147a:	e04b      	b.n	8001514 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001482:	2b00      	cmp	r3, #0
 8001484:	d11b      	bne.n	80014be <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <LAN8742_GetLinkState+0x90>
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800149a:	2302      	movs	r3, #2
 800149c:	e03a      	b.n	8001514 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80014a8:	2303      	movs	r3, #3
 80014aa:	e033      	b.n	8001514 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80014b6:	2304      	movs	r3, #4
 80014b8:	e02c      	b.n	8001514 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80014ba:	2305      	movs	r3, #5
 80014bc:	e02a      	b.n	8001514 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	6810      	ldr	r0, [r2, #0]
 80014c6:	f107 020c 	add.w	r2, r7, #12
 80014ca:	211f      	movs	r1, #31
 80014cc:	4798      	blx	r3
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	da02      	bge.n	80014da <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80014d4:	f06f 0304 	mvn.w	r3, #4
 80014d8:	e01c      	b.n	8001514 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d101      	bne.n	80014e8 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80014e4:	2306      	movs	r3, #6
 80014e6:	e015      	b.n	8001514 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f003 031c 	and.w	r3, r3, #28
 80014ee:	2b18      	cmp	r3, #24
 80014f0:	d101      	bne.n	80014f6 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80014f2:	2302      	movs	r3, #2
 80014f4:	e00e      	b.n	8001514 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f003 031c 	and.w	r3, r3, #28
 80014fc:	2b08      	cmp	r3, #8
 80014fe:	d101      	bne.n	8001504 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001500:	2303      	movs	r3, #3
 8001502:	e007      	b.n	8001514 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 031c 	and.w	r3, r3, #28
 800150a:	2b14      	cmp	r3, #20
 800150c:	d101      	bne.n	8001512 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800150e:	2304      	movs	r3, #4
 8001510:	e000      	b.n	8001514 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8001512:	2305      	movs	r3, #5
    }				
  }
}
 8001514:	4618      	mov	r0, r3
 8001516:	3710      	adds	r7, #16
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001520:	4b08      	ldr	r3, [pc, #32]	; (8001544 <HAL_Init+0x28>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a07      	ldr	r2, [pc, #28]	; (8001544 <HAL_Init+0x28>)
 8001526:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800152a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800152c:	2003      	movs	r0, #3
 800152e:	f000 f9f8 	bl	8001922 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001532:	200f      	movs	r0, #15
 8001534:	f7ff fce8 	bl	8000f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001538:	f7ff fb36 	bl	8000ba8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800153c:	2300      	movs	r3, #0
}
 800153e:	4618      	mov	r0, r3
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40023c00 	.word	0x40023c00

08001548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_IncTick+0x20>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_IncTick+0x24>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <HAL_IncTick+0x24>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	20000008 	.word	0x20000008
 800156c:	200003b4 	.word	0x200003b4

08001570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_GetTick+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	200003b4 	.word	0x200003b4

08001588 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b084      	sub	sp, #16
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001590:	f7ff ffee 	bl	8001570 <HAL_GetTick>
 8001594:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015a0:	d005      	beq.n	80015ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015a2:	4b0a      	ldr	r3, [pc, #40]	; (80015cc <HAL_Delay+0x44>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	4413      	add	r3, r2
 80015ac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015ae:	bf00      	nop
 80015b0:	f7ff ffde 	bl	8001570 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	68bb      	ldr	r3, [r7, #8]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	429a      	cmp	r2, r3
 80015be:	d8f7      	bhi.n	80015b0 <HAL_Delay+0x28>
  {
  }
}
 80015c0:	bf00      	nop
 80015c2:	bf00      	nop
 80015c4:	3710      	adds	r7, #16
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	20000008 	.word	0x20000008

080015d0 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d101      	bne.n	80015e2 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e0ed      	b.n	80017be <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d102      	bne.n	80015f4 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fb02 	bl	8000bf8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f042 0201 	orr.w	r2, r2, #1
 8001602:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001604:	f7ff ffb4 	bl	8001570 <HAL_GetTick>
 8001608:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800160a:	e012      	b.n	8001632 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800160c:	f7ff ffb0 	bl	8001570 <HAL_GetTick>
 8001610:	4602      	mov	r2, r0
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	1ad3      	subs	r3, r2, r3
 8001616:	2b0a      	cmp	r3, #10
 8001618:	d90b      	bls.n	8001632 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800161e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2205      	movs	r2, #5
 800162a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e0c5      	b.n	80017be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0e5      	beq.n	800160c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f022 0202 	bic.w	r2, r2, #2
 800164e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001650:	f7ff ff8e 	bl	8001570 <HAL_GetTick>
 8001654:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001656:	e012      	b.n	800167e <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001658:	f7ff ff8a 	bl	8001570 <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b0a      	cmp	r3, #10
 8001664:	d90b      	bls.n	800167e <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800166a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	2205      	movs	r2, #5
 8001676:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e09f      	b.n	80017be <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f003 0302 	and.w	r3, r3, #2
 8001688:	2b00      	cmp	r3, #0
 800168a:	d1e5      	bne.n	8001658 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	7e1b      	ldrb	r3, [r3, #24]
 8001690:	2b01      	cmp	r3, #1
 8001692:	d108      	bne.n	80016a6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80016a2:	601a      	str	r2, [r3, #0]
 80016a4:	e007      	b.n	80016b6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016b4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7e5b      	ldrb	r3, [r3, #25]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d108      	bne.n	80016d0 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681a      	ldr	r2, [r3, #0]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80016cc:	601a      	str	r2, [r3, #0]
 80016ce:	e007      	b.n	80016e0 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80016de:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	7e9b      	ldrb	r3, [r3, #26]
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d108      	bne.n	80016fa <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0220 	orr.w	r2, r2, #32
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	e007      	b.n	800170a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f022 0220 	bic.w	r2, r2, #32
 8001708:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	7edb      	ldrb	r3, [r3, #27]
 800170e:	2b01      	cmp	r3, #1
 8001710:	d108      	bne.n	8001724 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	681a      	ldr	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f022 0210 	bic.w	r2, r2, #16
 8001720:	601a      	str	r2, [r3, #0]
 8001722:	e007      	b.n	8001734 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f042 0210 	orr.w	r2, r2, #16
 8001732:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	7f1b      	ldrb	r3, [r3, #28]
 8001738:	2b01      	cmp	r3, #1
 800173a:	d108      	bne.n	800174e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f042 0208 	orr.w	r2, r2, #8
 800174a:	601a      	str	r2, [r3, #0]
 800174c:	e007      	b.n	800175e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	681a      	ldr	r2, [r3, #0]
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f022 0208 	bic.w	r2, r2, #8
 800175c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	7f5b      	ldrb	r3, [r3, #29]
 8001762:	2b01      	cmp	r3, #1
 8001764:	d108      	bne.n	8001778 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f042 0204 	orr.w	r2, r2, #4
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	e007      	b.n	8001788 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681a      	ldr	r2, [r3, #0]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f022 0204 	bic.w	r2, r2, #4
 8001786:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	431a      	orrs	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	691b      	ldr	r3, [r3, #16]
 8001796:	431a      	orrs	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	ea42 0103 	orr.w	r1, r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	1e5a      	subs	r2, r3, #1
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	430a      	orrs	r2, r1
 80017ac:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2201      	movs	r2, #1
 80017b8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <__NVIC_SetPriorityGrouping>:
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d8:	4b0b      	ldr	r3, [pc, #44]	; (8001808 <__NVIC_SetPriorityGrouping+0x40>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017de:	68ba      	ldr	r2, [r7, #8]
 80017e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017e4:	4013      	ands	r3, r2
 80017e6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017ec:	68bb      	ldr	r3, [r7, #8]
 80017ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017f0:	4b06      	ldr	r3, [pc, #24]	; (800180c <__NVIC_SetPriorityGrouping+0x44>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f6:	4a04      	ldr	r2, [pc, #16]	; (8001808 <__NVIC_SetPriorityGrouping+0x40>)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	60d3      	str	r3, [r2, #12]
}
 80017fc:	bf00      	nop
 80017fe:	3714      	adds	r7, #20
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr
 8001808:	e000ed00 	.word	0xe000ed00
 800180c:	05fa0000 	.word	0x05fa0000

08001810 <__NVIC_GetPriorityGrouping>:
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001814:	4b04      	ldr	r3, [pc, #16]	; (8001828 <__NVIC_GetPriorityGrouping+0x18>)
 8001816:	68db      	ldr	r3, [r3, #12]
 8001818:	0a1b      	lsrs	r3, r3, #8
 800181a:	f003 0307 	and.w	r3, r3, #7
}
 800181e:	4618      	mov	r0, r3
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <__NVIC_EnableIRQ>:
{
 800182c:	b480      	push	{r7}
 800182e:	b083      	sub	sp, #12
 8001830:	af00      	add	r7, sp, #0
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183a:	2b00      	cmp	r3, #0
 800183c:	db0b      	blt.n	8001856 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800183e:	79fb      	ldrb	r3, [r7, #7]
 8001840:	f003 021f 	and.w	r2, r3, #31
 8001844:	4907      	ldr	r1, [pc, #28]	; (8001864 <__NVIC_EnableIRQ+0x38>)
 8001846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800184a:	095b      	lsrs	r3, r3, #5
 800184c:	2001      	movs	r0, #1
 800184e:	fa00 f202 	lsl.w	r2, r0, r2
 8001852:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001856:	bf00      	nop
 8001858:	370c      	adds	r7, #12
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000e100 	.word	0xe000e100

08001868 <__NVIC_SetPriority>:
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4603      	mov	r3, r0
 8001870:	6039      	str	r1, [r7, #0]
 8001872:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001874:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001878:	2b00      	cmp	r3, #0
 800187a:	db0a      	blt.n	8001892 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	b2da      	uxtb	r2, r3
 8001880:	490c      	ldr	r1, [pc, #48]	; (80018b4 <__NVIC_SetPriority+0x4c>)
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	0112      	lsls	r2, r2, #4
 8001888:	b2d2      	uxtb	r2, r2
 800188a:	440b      	add	r3, r1
 800188c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001890:	e00a      	b.n	80018a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	b2da      	uxtb	r2, r3
 8001896:	4908      	ldr	r1, [pc, #32]	; (80018b8 <__NVIC_SetPriority+0x50>)
 8001898:	79fb      	ldrb	r3, [r7, #7]
 800189a:	f003 030f 	and.w	r3, r3, #15
 800189e:	3b04      	subs	r3, #4
 80018a0:	0112      	lsls	r2, r2, #4
 80018a2:	b2d2      	uxtb	r2, r2
 80018a4:	440b      	add	r3, r1
 80018a6:	761a      	strb	r2, [r3, #24]
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr
 80018b4:	e000e100 	.word	0xe000e100
 80018b8:	e000ed00 	.word	0xe000ed00

080018bc <NVIC_EncodePriority>:
{
 80018bc:	b480      	push	{r7}
 80018be:	b089      	sub	sp, #36	; 0x24
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	f003 0307 	and.w	r3, r3, #7
 80018ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d0:	69fb      	ldr	r3, [r7, #28]
 80018d2:	f1c3 0307 	rsb	r3, r3, #7
 80018d6:	2b04      	cmp	r3, #4
 80018d8:	bf28      	it	cs
 80018da:	2304      	movcs	r3, #4
 80018dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3304      	adds	r3, #4
 80018e2:	2b06      	cmp	r3, #6
 80018e4:	d902      	bls.n	80018ec <NVIC_EncodePriority+0x30>
 80018e6:	69fb      	ldr	r3, [r7, #28]
 80018e8:	3b03      	subs	r3, #3
 80018ea:	e000      	b.n	80018ee <NVIC_EncodePriority+0x32>
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f0:	f04f 32ff 	mov.w	r2, #4294967295
 80018f4:	69bb      	ldr	r3, [r7, #24]
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43da      	mvns	r2, r3
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	401a      	ands	r2, r3
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001904:	f04f 31ff 	mov.w	r1, #4294967295
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	fa01 f303 	lsl.w	r3, r1, r3
 800190e:	43d9      	mvns	r1, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	4313      	orrs	r3, r2
}
 8001916:	4618      	mov	r0, r3
 8001918:	3724      	adds	r7, #36	; 0x24
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b082      	sub	sp, #8
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800192a:	6878      	ldr	r0, [r7, #4]
 800192c:	f7ff ff4c 	bl	80017c8 <__NVIC_SetPriorityGrouping>
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
 800193e:	4603      	mov	r3, r0
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
 8001944:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800194a:	f7ff ff61 	bl	8001810 <__NVIC_GetPriorityGrouping>
 800194e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001950:	687a      	ldr	r2, [r7, #4]
 8001952:	68b9      	ldr	r1, [r7, #8]
 8001954:	6978      	ldr	r0, [r7, #20]
 8001956:	f7ff ffb1 	bl	80018bc <NVIC_EncodePriority>
 800195a:	4602      	mov	r2, r0
 800195c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001960:	4611      	mov	r1, r2
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff80 	bl	8001868 <__NVIC_SetPriority>
}
 8001968:	bf00      	nop
 800196a:	3718      	adds	r7, #24
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}

08001970 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff ff54 	bl	800182c <__NVIC_EnableIRQ>
}
 8001984:	bf00      	nop
 8001986:	3708      	adds	r7, #8
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001990:	f3bf 8f5f 	dmb	sy
}
 8001994:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001996:	4b07      	ldr	r3, [pc, #28]	; (80019b4 <HAL_MPU_Disable+0x28>)
 8001998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800199a:	4a06      	ldr	r2, [pc, #24]	; (80019b4 <HAL_MPU_Disable+0x28>)
 800199c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019a0:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80019a2:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_MPU_Disable+0x2c>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	605a      	str	r2, [r3, #4]
}
 80019a8:	bf00      	nop
 80019aa:	46bd      	mov	sp, r7
 80019ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b0:	4770      	bx	lr
 80019b2:	bf00      	nop
 80019b4:	e000ed00 	.word	0xe000ed00
 80019b8:	e000ed90 	.word	0xe000ed90

080019bc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80019c4:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <HAL_MPU_Enable+0x38>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_MPU_Enable+0x3c>)
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <HAL_MPU_Enable+0x3c>)
 80019d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019d8:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80019da:	f3bf 8f4f 	dsb	sy
}
 80019de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80019e0:	f3bf 8f6f 	isb	sy
}
 80019e4:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80019e6:	bf00      	nop
 80019e8:	370c      	adds	r7, #12
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed90 	.word	0xe000ed90
 80019f8:	e000ed00 	.word	0xe000ed00

080019fc <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b083      	sub	sp, #12
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	785a      	ldrb	r2, [r3, #1]
 8001a08:	4b1d      	ldr	r3, [pc, #116]	; (8001a80 <HAL_MPU_ConfigRegion+0x84>)
 8001a0a:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d029      	beq.n	8001a68 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8001a14:	4a1a      	ldr	r2, [pc, #104]	; (8001a80 <HAL_MPU_ConfigRegion+0x84>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	7b1b      	ldrb	r3, [r3, #12]
 8001a20:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	7adb      	ldrb	r3, [r3, #11]
 8001a26:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a28:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	7a9b      	ldrb	r3, [r3, #10]
 8001a2e:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001a30:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	7b5b      	ldrb	r3, [r3, #13]
 8001a36:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001a38:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	7b9b      	ldrb	r3, [r3, #14]
 8001a3e:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001a40:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	7bdb      	ldrb	r3, [r3, #15]
 8001a46:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001a48:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	7a5b      	ldrb	r3, [r3, #9]
 8001a4e:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001a50:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	7a1b      	ldrb	r3, [r3, #8]
 8001a56:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001a58:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	7812      	ldrb	r2, [r2, #0]
 8001a5e:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a60:	4a07      	ldr	r2, [pc, #28]	; (8001a80 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001a62:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001a64:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 8001a66:	e005      	b.n	8001a74 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8001a68:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <HAL_MPU_ConfigRegion+0x84>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8001a6e:	4b04      	ldr	r3, [pc, #16]	; (8001a80 <HAL_MPU_ConfigRegion+0x84>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
}
 8001a74:	bf00      	nop
 8001a76:	370c      	adds	r7, #12
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7e:	4770      	bx	lr
 8001a80:	e000ed90 	.word	0xe000ed90

08001a84 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d101      	bne.n	8001a96 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001a92:	2301      	movs	r3, #1
 8001a94:	e06a      	b.n	8001b6c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d106      	bne.n	8001aae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2223      	movs	r2, #35	; 0x23
 8001aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001aa8:	6878      	ldr	r0, [r7, #4]
 8001aaa:	f004 fa2d 	bl	8005f08 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aae:	4b31      	ldr	r3, [pc, #196]	; (8001b74 <HAL_ETH_Init+0xf0>)
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	4a30      	ldr	r2, [pc, #192]	; (8001b74 <HAL_ETH_Init+0xf0>)
 8001ab4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aba:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <HAL_ETH_Init+0xf0>)
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ac2:	60bb      	str	r3, [r7, #8]
 8001ac4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001ac6:	4b2c      	ldr	r3, [pc, #176]	; (8001b78 <HAL_ETH_Init+0xf4>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	4a2b      	ldr	r2, [pc, #172]	; (8001b78 <HAL_ETH_Init+0xf4>)
 8001acc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ad0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001ad2:	4b29      	ldr	r3, [pc, #164]	; (8001b78 <HAL_ETH_Init+0xf4>)
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	689b      	ldr	r3, [r3, #8]
 8001ada:	4927      	ldr	r1, [pc, #156]	; (8001b78 <HAL_ETH_Init+0xf4>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001ae0:	4b25      	ldr	r3, [pc, #148]	; (8001b78 <HAL_ETH_Init+0xf4>)
 8001ae2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001afa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001afc:	f7ff fd38 	bl	8001570 <HAL_GetTick>
 8001b00:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b02:	e011      	b.n	8001b28 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001b04:	f7ff fd34 	bl	8001570 <HAL_GetTick>
 8001b08:	4602      	mov	r2, r0
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001b12:	d909      	bls.n	8001b28 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2204      	movs	r2, #4
 8001b18:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	22e0      	movs	r2, #224	; 0xe0
 8001b20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001b24:	2301      	movs	r3, #1
 8001b26:	e021      	b.n	8001b6c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1e4      	bne.n	8001b04 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f000 ffac 	bl	8002a98 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f001 f853 	bl	8002bec <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f001 f8a9 	bl	8002c9e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	461a      	mov	r2, r3
 8001b52:	2100      	movs	r1, #0
 8001b54:	6878      	ldr	r0, [r7, #4]
 8001b56:	f001 f811 	bl	8002b7c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2210      	movs	r2, #16
 8001b66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40023800 	.word	0x40023800
 8001b78:	40013800 	.word	0x40013800

08001b7c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b8a:	2b10      	cmp	r3, #16
 8001b8c:	d150      	bne.n	8001c30 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2223      	movs	r2, #35	; 0x23
 8001b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2204      	movs	r2, #4
 8001b9a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001b9c:	6878      	ldr	r0, [r7, #4]
 8001b9e:	f000 fa7b 	bl	8002098 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0208 	orr.w	r2, r2, #8
 8001bb0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001bba:	2001      	movs	r0, #1
 8001bbc:	f7ff fce4 	bl	8001588 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	68fa      	ldr	r2, [r7, #12]
 8001bc6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f042 0204 	orr.w	r2, r2, #4
 8001bd6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001be0:	2001      	movs	r0, #1
 8001be2:	f7ff fcd1 	bl	8001588 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	68fa      	ldr	r2, [r7, #12]
 8001bec:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 fdf3 	bl	80027da <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bfc:	699b      	ldr	r3, [r3, #24]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	6812      	ldr	r2, [r2, #0]
 8001c02:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c0a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6812      	ldr	r2, [r2, #0]
 8001c1a:	f043 0302 	orr.w	r3, r3, #2
 8001c1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001c22:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2223      	movs	r2, #35	; 0x23
 8001c28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e000      	b.n	8001c32 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
  }
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3710      	adds	r7, #16
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c4a:	2b10      	cmp	r3, #16
 8001c4c:	d17b      	bne.n	8001d46 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2223      	movs	r2, #35	; 0x23
 8001c52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2201      	movs	r2, #1
 8001c5a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001c6a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4b35      	ldr	r3, [pc, #212]	; (8001d50 <HAL_ETH_Start_IT+0x114>)
 8001c7a:	430b      	orrs	r3, r1
 8001c7c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001c90:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2204      	movs	r2, #4
 8001c98:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001c9a:	6878      	ldr	r0, [r7, #4]
 8001c9c:	f000 f9fc 	bl	8002098 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	681a      	ldr	r2, [r3, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f042 0208 	orr.w	r2, r2, #8
 8001cae:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cb8:	2001      	movs	r0, #1
 8001cba:	f7ff fc65 	bl	8001588 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	68fa      	ldr	r2, [r7, #12]
 8001cc4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0204 	orr.w	r2, r2, #4
 8001cd4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001cde:	2001      	movs	r0, #1
 8001ce0:	f7ff fc52 	bl	8001588 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	68fa      	ldr	r2, [r7, #12]
 8001cea:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001cec:	6878      	ldr	r0, [r7, #4]
 8001cee:	f000 fd74 	bl	80027da <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cfa:	699b      	ldr	r3, [r3, #24]
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6812      	ldr	r2, [r2, #0]
 8001d00:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d04:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d08:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d12:	699b      	ldr	r3, [r3, #24]
 8001d14:	687a      	ldr	r2, [r7, #4]
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	f043 0302 	orr.w	r3, r3, #2
 8001d1c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d20:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d2a:	69d9      	ldr	r1, [r3, #28]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <HAL_ETH_Start_IT+0x118>)
 8001d32:	430b      	orrs	r3, r1
 8001d34:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d38:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2223      	movs	r2, #35	; 0x23
 8001d3e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	e000      	b.n	8001d48 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
  }
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3710      	adds	r7, #16
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	00020060 	.word	0x00020060
 8001d54:	0001a0c1 	.word	0x0001a0c1

08001d58 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b086      	sub	sp, #24
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d66:	2b23      	cmp	r3, #35	; 0x23
 8001d68:	d16e      	bne.n	8001e48 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2223      	movs	r2, #35	; 0x23
 8001d6e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d7a:	69d9      	ldr	r1, [r3, #28]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681a      	ldr	r2, [r3, #0]
 8001d80:	4b34      	ldr	r3, [pc, #208]	; (8001e54 <HAL_ETH_Stop_IT+0xfc>)
 8001d82:	400b      	ands	r3, r1
 8001d84:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001d88:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d92:	699b      	ldr	r3, [r3, #24]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001d9c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001da0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001daa:	699b      	ldr	r3, [r3, #24]
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	6812      	ldr	r2, [r2, #0]
 8001db0:	f023 0302 	bic.w	r3, r3, #2
 8001db4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001db8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f022 0204 	bic.w	r2, r2, #4
 8001dc8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dd2:	2001      	movs	r0, #1
 8001dd4:	f7ff fbd8 	bl	8001588 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fcfa 	bl	80027da <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0208 	bic.w	r2, r2, #8
 8001df4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001dfe:	2001      	movs	r0, #1
 8001e00:	f7ff fbc2 	bl	8001588 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	e00e      	b.n	8001e30 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	697a      	ldr	r2, [r7, #20]
 8001e16:	3212      	adds	r2, #18
 8001e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	617b      	str	r3, [r7, #20]
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d9ed      	bls.n	8001e12 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2210      	movs	r2, #16
 8001e40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001e44:	2300      	movs	r3, #0
 8001e46:	e000      	b.n	8001e4a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
  }
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3718      	adds	r7, #24
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	fffe5f3e 	.word	0xfffe5f3e

08001e58 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
 8001e60:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d109      	bne.n	8001e7c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6e:	f043 0201 	orr.w	r2, r3, #1
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	e045      	b.n	8001f08 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e82:	2b23      	cmp	r3, #35	; 0x23
 8001e84:	d13f      	bne.n	8001f06 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	6839      	ldr	r1, [r7, #0]
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 ff70 	bl	8002d78 <ETH_Prepare_Tx_Descriptors>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d009      	beq.n	8001eb2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea4:	f043 0202 	orr.w	r2, r3, #2
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e02a      	b.n	8001f08 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001eb2:	f3bf 8f4f 	dsb	sy
}
 8001eb6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ebc:	1c5a      	adds	r2, r3, #1
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	629a      	str	r2, [r3, #40]	; 0x28
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec6:	2b03      	cmp	r3, #3
 8001ec8:	d904      	bls.n	8001ed4 <HAL_ETH_Transmit_IT+0x7c>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	1f1a      	subs	r2, r3, #4
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001edc:	695b      	ldr	r3, [r3, #20]
 8001ede:	f003 0304 	and.w	r3, r3, #4
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00d      	beq.n	8001f02 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001eee:	461a      	mov	r2, r3
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001efc:	461a      	mov	r2, r3
 8001efe:	2300      	movs	r3, #0
 8001f00:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001f02:	2300      	movs	r3, #0
 8001f04:	e000      	b.n	8001f08 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
  }
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b088      	sub	sp, #32
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
 8001f18:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d109      	bne.n	8001f3c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f2e:	f043 0201 	orr.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0a8      	b.n	800208e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f42:	2b23      	cmp	r3, #35	; 0x23
 8001f44:	d001      	beq.n	8001f4a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e0a1      	b.n	800208e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	3212      	adds	r2, #18
 8001f56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f5a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f60:	f1c3 0304 	rsb	r3, r3, #4
 8001f64:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001f66:	e06a      	b.n	800203e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001f68:	69bb      	ldr	r3, [r7, #24]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d007      	beq.n	8001f84 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	699a      	ldr	r2, [r3, #24]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	69da      	ldr	r2, [r3, #28]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d103      	bne.n	8001f98 <HAL_ETH_ReadData+0x88>
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d040      	beq.n	800201a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001f98:	69bb      	ldr	r3, [r7, #24]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d005      	beq.n	8001fb0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	695b      	ldr	r3, [r3, #20]
 8001fb4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d00c      	beq.n	8001fdc <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	0c1b      	lsrs	r3, r3, #16
 8001fc8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001fcc:	3b04      	subs	r3, #4
 8001fce:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	69bb      	ldr	r3, [r7, #24]
 8001fe2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001ff0:	69bb      	ldr	r3, [r7, #24]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	f004 f951 	bl	80062a0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002002:	1c5a      	adds	r2, r3, #1
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	441a      	add	r2, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8002014:	69bb      	ldr	r3, [r7, #24]
 8002016:	2200      	movs	r2, #0
 8002018:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	3301      	adds	r3, #1
 800201e:	61fb      	str	r3, [r7, #28]
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	2b03      	cmp	r3, #3
 8002024:	d902      	bls.n	800202c <HAL_ETH_ReadData+0x11c>
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3b04      	subs	r3, #4
 800202a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	69fa      	ldr	r2, [r7, #28]
 8002030:	3212      	adds	r2, #18
 8002032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002036:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	3301      	adds	r3, #1
 800203c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2b00      	cmp	r3, #0
 8002044:	db06      	blt.n	8002054 <HAL_ETH_ReadData+0x144>
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	429a      	cmp	r2, r3
 800204c:	d202      	bcs.n	8002054 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d089      	beq.n	8001f68 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002058:	697b      	ldr	r3, [r7, #20]
 800205a:	441a      	add	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002064:	2b00      	cmp	r3, #0
 8002066:	d002      	beq.n	800206e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f000 f815 	bl	8002098 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d108      	bne.n	800208c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2200      	movs	r2, #0
 8002086:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	e000      	b.n	800208e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
}
 800208e:	4618      	mov	r0, r3
 8002090:	3720      	adds	r7, #32
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
	...

08002098 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b088      	sub	sp, #32
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 80020a4:	2301      	movs	r3, #1
 80020a6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020ac:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	3212      	adds	r2, #18
 80020b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020b8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020be:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80020c0:	e040      	b.n	8002144 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	6a1b      	ldr	r3, [r3, #32]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d112      	bne.n	80020f0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	4618      	mov	r0, r3
 80020d0:	f004 f8b6 	bl	8006240 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d102      	bne.n	80020e0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	74fb      	strb	r3, [r7, #19]
 80020de:	e007      	b.n	80020f0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	461a      	mov	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	461a      	mov	r2, r3
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80020f0:	7cfb      	ldrb	r3, [r7, #19]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d026      	beq.n	8002144 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d103      	bne.n	8002106 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	4a1e      	ldr	r2, [pc, #120]	; (800217c <ETH_UpdateDescriptor+0xe4>)
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	e003      	b.n	800210e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800210c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 800210e:	f3bf 8f5f 	dmb	sy
}
 8002112:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8002114:	697b      	ldr	r3, [r7, #20]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	3301      	adds	r3, #1
 8002124:	61fb      	str	r3, [r7, #28]
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d902      	bls.n	8002132 <ETH_UpdateDescriptor+0x9a>
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	3b04      	subs	r3, #4
 8002130:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69fa      	ldr	r2, [r7, #28]
 8002136:	3212      	adds	r2, #18
 8002138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800213c:	617b      	str	r3, [r7, #20]
      desccount--;
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	3b01      	subs	r3, #1
 8002142:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8002144:	69bb      	ldr	r3, [r7, #24]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d002      	beq.n	8002150 <ETH_UpdateDescriptor+0xb8>
 800214a:	7cfb      	ldrb	r3, [r7, #19]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d1b8      	bne.n	80020c2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	429a      	cmp	r2, r3
 8002158:	d00c      	beq.n	8002174 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002162:	461a      	mov	r2, r3
 8002164:	2300      	movs	r3, #0
 8002166:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69fa      	ldr	r2, [r7, #28]
 800216c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8002174:	bf00      	nop
 8002176:	3720      	adds	r7, #32
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	800045f8 	.word	0x800045f8

08002180 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b086      	sub	sp, #24
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	3318      	adds	r3, #24
 800218c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002192:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800219e:	e03f      	b.n	8002220 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	3b01      	subs	r3, #1
 80021a8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80021aa:	68ba      	ldr	r2, [r7, #8]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	3304      	adds	r3, #4
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d106      	bne.n	80021c8 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 80021ba:	693b      	ldr	r3, [r7, #16]
 80021bc:	3301      	adds	r3, #1
 80021be:	f003 0303 	and.w	r3, r3, #3
 80021c2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80021c8:	7bbb      	ldrb	r3, [r7, #14]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d028      	beq.n	8002220 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68d9      	ldr	r1, [r3, #12]
 80021d2:	693a      	ldr	r2, [r7, #16]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	440b      	add	r3, r1
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	db1b      	blt.n	800221c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 80021e4:	68ba      	ldr	r2, [r7, #8]
 80021e6:	693b      	ldr	r3, [r7, #16]
 80021e8:	3304      	adds	r3, #4
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	4618      	mov	r0, r3
 80021f2:	f004 f897 	bl	8006324 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	3304      	adds	r3, #4
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	4413      	add	r3, r2
 8002200:	2200      	movs	r2, #0
 8002202:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	3301      	adds	r3, #1
 8002208:	f003 0303 	and.w	r3, r3, #3
 800220c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	693a      	ldr	r2, [r7, #16]
 8002218:	62da      	str	r2, [r3, #44]	; 0x2c
 800221a:	e001      	b.n	8002220 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800221c:	2300      	movs	r3, #0
 800221e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002220:	697b      	ldr	r3, [r7, #20]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d002      	beq.n	800222c <HAL_ETH_ReleaseTxPacket+0xac>
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1b9      	bne.n	80021a0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800222c:	2300      	movs	r3, #0
}
 800222e:	4618      	mov	r0, r3
 8002230:	3718      	adds	r7, #24
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
	...

08002238 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002248:	695b      	ldr	r3, [r3, #20]
 800224a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800224e:	2b40      	cmp	r3, #64	; 0x40
 8002250:	d112      	bne.n	8002278 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002260:	2b40      	cmp	r3, #64	; 0x40
 8002262:	d109      	bne.n	8002278 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800226c:	461a      	mov	r2, r3
 800226e:	4b50      	ldr	r3, [pc, #320]	; (80023b0 <HAL_ETH_IRQHandler+0x178>)
 8002270:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f003 fbaa 	bl	80059cc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002280:	695b      	ldr	r3, [r3, #20]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	2b01      	cmp	r3, #1
 8002288:	d113      	bne.n	80022b2 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002292:	69db      	ldr	r3, [r3, #28]
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b01      	cmp	r3, #1
 800229a:	d10a      	bne.n	80022b2 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a4:	461a      	mov	r2, r3
 80022a6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80022aa:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80022ac:	6878      	ldr	r0, [r7, #4]
 80022ae:	f003 fb9d 	bl	80059ec <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ba:	695b      	ldr	r3, [r3, #20]
 80022bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022c4:	d14c      	bne.n	8002360 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022d8:	d142      	bne.n	8002360 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e0:	f043 0208 	orr.w	r2, r3, #8
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f2:	695b      	ldr	r3, [r3, #20]
 80022f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022fc:	d11a      	bne.n	8002334 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002306:	695a      	ldr	r2, [r3, #20]
 8002308:	4b2a      	ldr	r3, [pc, #168]	; (80023b4 <HAL_ETH_IRQHandler+0x17c>)
 800230a:	4013      	ands	r3, r2
 800230c:	687a      	ldr	r2, [r7, #4]
 800230e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	6812      	ldr	r2, [r2, #0]
 8002320:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002324:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002328:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	22e0      	movs	r2, #224	; 0xe0
 800232e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002332:	e012      	b.n	800235a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800233c:	695a      	ldr	r2, [r3, #20]
 800233e:	f248 6380 	movw	r3, #34432	; 0x8680
 8002342:	4013      	ands	r3, r2
 8002344:	687a      	ldr	r2, [r7, #4]
 8002346:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002352:	461a      	mov	r2, r3
 8002354:	f248 6380 	movw	r3, #34432	; 0x8680
 8002358:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f003 fb56 	bl	8005a0c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002366:	f003 0308 	and.w	r3, r3, #8
 800236a:	2b08      	cmp	r3, #8
 800236c:	d10e      	bne.n	800238c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002374:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f81c 	bl	80023bc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2200      	movs	r2, #0
 8002388:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800238c:	4b0a      	ldr	r3, [pc, #40]	; (80023b8 <HAL_ETH_IRQHandler+0x180>)
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d006      	beq.n	80023a6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8002398:	4b07      	ldr	r3, [pc, #28]	; (80023b8 <HAL_ETH_IRQHandler+0x180>)
 800239a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800239e:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	f000 f815 	bl	80023d0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80023a6:	bf00      	nop
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	00010040 	.word	0x00010040
 80023b4:	007e2000 	.word	0x007e2000
 80023b8:	40013c00 	.word	0x40013c00

080023bc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80023bc:	b480      	push	{r7}
 80023be:	b083      	sub	sp, #12
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80023c4:	bf00      	nop
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80023d8:	bf00      	nop
 80023da:	370c      	adds	r7, #12
 80023dc:	46bd      	mov	sp, r7
 80023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e2:	4770      	bx	lr

080023e4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b086      	sub	sp, #24
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	f003 031c 	and.w	r3, r3, #28
 8002400:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	02db      	lsls	r3, r3, #11
 8002406:	b29b      	uxth	r3, r3
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	4313      	orrs	r3, r2
 800240c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	019b      	lsls	r3, r3, #6
 8002412:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4313      	orrs	r3, r2
 800241a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f023 0302 	bic.w	r3, r3, #2
 8002422:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	f043 0301 	orr.w	r3, r3, #1
 800242a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	697a      	ldr	r2, [r7, #20]
 8002432:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002434:	f7ff f89c 	bl	8001570 <HAL_GetTick>
 8002438:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800243a:	e00d      	b.n	8002458 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800243c:	f7ff f898 	bl	8001570 <HAL_GetTick>
 8002440:	4602      	mov	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244a:	d301      	bcc.n	8002450 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e010      	b.n	8002472 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	691b      	ldr	r3, [r3, #16]
 8002456:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	f003 0301 	and.w	r3, r3, #1
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1ec      	bne.n	800243c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	b29b      	uxth	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002470:	2300      	movs	r3, #0
}
 8002472:	4618      	mov	r0, r3
 8002474:	3718      	adds	r7, #24
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}

0800247a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800247a:	b580      	push	{r7, lr}
 800247c:	b086      	sub	sp, #24
 800247e:	af00      	add	r7, sp, #0
 8002480:	60f8      	str	r0, [r7, #12]
 8002482:	60b9      	str	r1, [r7, #8]
 8002484:	607a      	str	r2, [r7, #4]
 8002486:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	691b      	ldr	r3, [r3, #16]
 800248e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f003 031c 	and.w	r3, r3, #28
 8002496:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	02db      	lsls	r3, r3, #11
 800249c:	b29b      	uxth	r3, r3
 800249e:	697a      	ldr	r2, [r7, #20]
 80024a0:	4313      	orrs	r3, r2
 80024a2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	019b      	lsls	r3, r3, #6
 80024a8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80024ac:	697a      	ldr	r2, [r7, #20]
 80024ae:	4313      	orrs	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f043 0302 	orr.w	r3, r3, #2
 80024b8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	f043 0301 	orr.w	r3, r3, #1
 80024c0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80024d4:	f7ff f84c 	bl	8001570 <HAL_GetTick>
 80024d8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80024da:	e00d      	b.n	80024f8 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80024dc:	f7ff f848 	bl	8001570 <HAL_GetTick>
 80024e0:	4602      	mov	r2, r0
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024ea:	d301      	bcc.n	80024f0 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e009      	b.n	8002504 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1ec      	bne.n	80024dc <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002502:	2300      	movs	r3, #0
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}

0800250c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e0d9      	b.n	80026d4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0310 	and.w	r3, r3, #16
 800252a:	2b00      	cmp	r3, #0
 800252c:	bf14      	ite	ne
 800252e:	2301      	movne	r3, #1
 8002530:	2300      	moveq	r3, #0
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002554:	2b00      	cmp	r3, #0
 8002556:	bf0c      	ite	eq
 8002558:	2301      	moveq	r3, #1
 800255a:	2300      	movne	r3, #0
 800255c:	b2db      	uxtb	r3, r3
 800255e:	461a      	mov	r2, r3
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002570:	2b00      	cmp	r3, #0
 8002572:	bf14      	ite	ne
 8002574:	2301      	movne	r3, #1
 8002576:	2300      	moveq	r3, #0
 8002578:	b2db      	uxtb	r3, r3
 800257a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800258a:	2b00      	cmp	r3, #0
 800258c:	bf0c      	ite	eq
 800258e:	2301      	moveq	r3, #1
 8002590:	2300      	movne	r3, #0
 8002592:	b2db      	uxtb	r3, r3
 8002594:	461a      	mov	r2, r3
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	bf14      	ite	ne
 80025a8:	2301      	movne	r3, #1
 80025aa:	2300      	moveq	r3, #0
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	461a      	mov	r2, r3
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	bf0c      	ite	eq
 80025de:	2301      	moveq	r3, #1
 80025e0:	2300      	movne	r3, #0
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	461a      	mov	r2, r3
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	bf0c      	ite	eq
 80025f8:	2301      	moveq	r3, #1
 80025fa:	2300      	movne	r3, #0
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	461a      	mov	r2, r3
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260e:	2b00      	cmp	r3, #0
 8002610:	bf14      	ite	ne
 8002612:	2301      	movne	r3, #1
 8002614:	2300      	moveq	r3, #0
 8002616:	b2db      	uxtb	r3, r3
 8002618:	461a      	mov	r2, r3
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002636:	2b00      	cmp	r3, #0
 8002638:	bf14      	ite	ne
 800263a:	2301      	movne	r3, #1
 800263c:	2300      	moveq	r3, #0
 800263e:	b2db      	uxtb	r3, r3
 8002640:	461a      	mov	r2, r3
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	bf14      	ite	ne
 8002654:	2301      	movne	r3, #1
 8002656:	2300      	moveq	r3, #0
 8002658:	b2db      	uxtb	r3, r3
 800265a:	461a      	mov	r2, r3
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800266c:	2b00      	cmp	r3, #0
 800266e:	bf0c      	ite	eq
 8002670:	2301      	moveq	r3, #1
 8002672:	2300      	movne	r3, #0
 8002674:	b2db      	uxtb	r3, r3
 8002676:	461a      	mov	r2, r3
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	699b      	ldr	r3, [r3, #24]
 8002692:	0c1b      	lsrs	r3, r3, #16
 8002694:	b29a      	uxth	r2, r3
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	f003 0304 	and.w	r3, r3, #4
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bf14      	ite	ne
 80026a8:	2301      	movne	r3, #1
 80026aa:	2300      	moveq	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	699b      	ldr	r3, [r3, #24]
 80026bc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	bf14      	ite	ne
 80026c4:	2301      	movne	r3, #1
 80026c6:	2300      	moveq	r3, #0
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d101      	bne.n	80026f4 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e00b      	b.n	800270c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d105      	bne.n	800270a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80026fe:	6839      	ldr	r1, [r7, #0]
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f000 f88f 	bl	8002824 <ETH_SetMACConfig>

    return HAL_OK;
 8002706:	2300      	movs	r3, #0
 8002708:	e000      	b.n	800270c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
  }
}
 800270c:	4618      	mov	r0, r3
 800270e:	3708      	adds	r7, #8
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f023 031c 	bic.w	r3, r3, #28
 800272a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800272c:	f001 fc36 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8002730:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	4a1d      	ldr	r2, [pc, #116]	; (80027ac <HAL_ETH_SetMDIOClockRange+0x98>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d908      	bls.n	800274c <HAL_ETH_SetMDIOClockRange+0x38>
 800273a:	68bb      	ldr	r3, [r7, #8]
 800273c:	4a1c      	ldr	r2, [pc, #112]	; (80027b0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d804      	bhi.n	800274c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f043 0308 	orr.w	r3, r3, #8
 8002748:	60fb      	str	r3, [r7, #12]
 800274a:	e027      	b.n	800279c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	4a18      	ldr	r2, [pc, #96]	; (80027b0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d908      	bls.n	8002766 <HAL_ETH_SetMDIOClockRange+0x52>
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	4a17      	ldr	r2, [pc, #92]	; (80027b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d204      	bcs.n	8002766 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	f043 030c 	orr.w	r3, r3, #12
 8002762:	60fb      	str	r3, [r7, #12]
 8002764:	e01a      	b.n	800279c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d303      	bcc.n	8002776 <HAL_ETH_SetMDIOClockRange+0x62>
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	4a11      	ldr	r2, [pc, #68]	; (80027b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d911      	bls.n	800279a <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	4a0f      	ldr	r2, [pc, #60]	; (80027b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d908      	bls.n	8002790 <HAL_ETH_SetMDIOClockRange+0x7c>
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	4a0e      	ldr	r2, [pc, #56]	; (80027bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002782:	4293      	cmp	r3, r2
 8002784:	d804      	bhi.n	8002790 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	f043 0304 	orr.w	r3, r3, #4
 800278c:	60fb      	str	r3, [r7, #12]
 800278e:	e005      	b.n	800279c <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f043 0310 	orr.w	r3, r3, #16
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e000      	b.n	800279c <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800279a:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	611a      	str	r2, [r3, #16]
}
 80027a4:	bf00      	nop
 80027a6:	3710      	adds	r7, #16
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	01312cff 	.word	0x01312cff
 80027b0:	02160ebf 	.word	0x02160ebf
 80027b4:	03938700 	.word	0x03938700
 80027b8:	05f5e0ff 	.word	0x05f5e0ff
 80027bc:	08f0d17f 	.word	0x08f0d17f

080027c0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	370c      	adds	r7, #12
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b084      	sub	sp, #16
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ee:	699b      	ldr	r3, [r3, #24]
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6812      	ldr	r2, [r2, #0]
 80027f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027f8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027fc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800280a:	2001      	movs	r0, #1
 800280c:	f7fe febc 	bl	8001588 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800281a:	6193      	str	r3, [r2, #24]
}
 800281c:	bf00      	nop
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b084      	sub	sp, #16
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	4b51      	ldr	r3, [pc, #324]	; (8002980 <ETH_SetMACConfig+0x15c>)
 800283a:	4013      	ands	r3, r2
 800283c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	7c1b      	ldrb	r3, [r3, #16]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d102      	bne.n	800284c <ETH_SetMACConfig+0x28>
 8002846:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800284a:	e000      	b.n	800284e <ETH_SetMACConfig+0x2a>
 800284c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	7c5b      	ldrb	r3, [r3, #17]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d102      	bne.n	800285c <ETH_SetMACConfig+0x38>
 8002856:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800285a:	e000      	b.n	800285e <ETH_SetMACConfig+0x3a>
 800285c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800285e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002864:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	7fdb      	ldrb	r3, [r3, #31]
 800286a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800286c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002872:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002874:	683a      	ldr	r2, [r7, #0]
 8002876:	7f92      	ldrb	r2, [r2, #30]
 8002878:	2a00      	cmp	r2, #0
 800287a:	d102      	bne.n	8002882 <ETH_SetMACConfig+0x5e>
 800287c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002880:	e000      	b.n	8002884 <ETH_SetMACConfig+0x60>
 8002882:	2200      	movs	r2, #0
                        macconf->Speed |
 8002884:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	7f1b      	ldrb	r3, [r3, #28]
 800288a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800288c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002892:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	791b      	ldrb	r3, [r3, #4]
 8002898:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800289a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	f892 2020 	ldrb.w	r2, [r2, #32]
 80028a2:	2a00      	cmp	r2, #0
 80028a4:	d102      	bne.n	80028ac <ETH_SetMACConfig+0x88>
 80028a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80028aa:	e000      	b.n	80028ae <ETH_SetMACConfig+0x8a>
 80028ac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80028ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	7bdb      	ldrb	r3, [r3, #15]
 80028b4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80028b6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80028bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80028c4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028c6:	4313      	orrs	r3, r2
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028de:	2001      	movs	r0, #1
 80028e0:	f7fe fe52 	bl	8001588 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68fa      	ldr	r2, [r7, #12]
 80028ea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80028f4:	68fa      	ldr	r2, [r7, #12]
 80028f6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80028fa:	4013      	ands	r3, r2
 80028fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002902:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800290a:	2a00      	cmp	r2, #0
 800290c:	d101      	bne.n	8002912 <ETH_SetMACConfig+0xee>
 800290e:	2280      	movs	r2, #128	; 0x80
 8002910:	e000      	b.n	8002914 <ETH_SetMACConfig+0xf0>
 8002912:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002914:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800291a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800291c:	683a      	ldr	r2, [r7, #0]
 800291e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002922:	2a01      	cmp	r2, #1
 8002924:	d101      	bne.n	800292a <ETH_SetMACConfig+0x106>
 8002926:	2208      	movs	r2, #8
 8002928:	e000      	b.n	800292c <ETH_SetMACConfig+0x108>
 800292a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800292c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002934:	2a01      	cmp	r2, #1
 8002936:	d101      	bne.n	800293c <ETH_SetMACConfig+0x118>
 8002938:	2204      	movs	r2, #4
 800293a:	e000      	b.n	800293e <ETH_SetMACConfig+0x11a>
 800293c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800293e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002946:	2a01      	cmp	r2, #1
 8002948:	d101      	bne.n	800294e <ETH_SetMACConfig+0x12a>
 800294a:	2202      	movs	r2, #2
 800294c:	e000      	b.n	8002950 <ETH_SetMACConfig+0x12c>
 800294e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002950:	4313      	orrs	r3, r2
 8002952:	68fa      	ldr	r2, [r7, #12]
 8002954:	4313      	orrs	r3, r2
 8002956:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	699b      	ldr	r3, [r3, #24]
 8002966:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002968:	2001      	movs	r0, #1
 800296a:	f7fe fe0d 	bl	8001588 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	68fa      	ldr	r2, [r7, #12]
 8002974:	619a      	str	r2, [r3, #24]
}
 8002976:	bf00      	nop
 8002978:	3710      	adds	r7, #16
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	ff20810f 	.word	0xff20810f

08002984 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
 800298c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002996:	699b      	ldr	r3, [r3, #24]
 8002998:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	4b3d      	ldr	r3, [pc, #244]	; (8002a94 <ETH_SetDMAConfig+0x110>)
 800299e:	4013      	ands	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	7b1b      	ldrb	r3, [r3, #12]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d102      	bne.n	80029b0 <ETH_SetDMAConfig+0x2c>
 80029aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80029ae:	e000      	b.n	80029b2 <ETH_SetDMAConfig+0x2e>
 80029b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	7b5b      	ldrb	r3, [r3, #13]
 80029b6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029b8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80029ba:	683a      	ldr	r2, [r7, #0]
 80029bc:	7f52      	ldrb	r2, [r2, #29]
 80029be:	2a00      	cmp	r2, #0
 80029c0:	d102      	bne.n	80029c8 <ETH_SetDMAConfig+0x44>
 80029c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80029c6:	e000      	b.n	80029ca <ETH_SetDMAConfig+0x46>
 80029c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80029ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	7b9b      	ldrb	r3, [r3, #14]
 80029d0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80029d2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80029d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	7f1b      	ldrb	r3, [r3, #28]
 80029de:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80029e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	7f9b      	ldrb	r3, [r3, #30]
 80029e6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80029e8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80029ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80029f6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80029f8:	4313      	orrs	r3, r2
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a08:	461a      	mov	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a1a:	2001      	movs	r0, #1
 8002a1c:	f7fe fdb4 	bl	8001588 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a28:	461a      	mov	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	791b      	ldrb	r3, [r3, #4]
 8002a32:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a38:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002a3e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002a44:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002a4c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002a4e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a54:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002a56:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002a5c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	6812      	ldr	r2, [r2, #0]
 8002a62:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002a66:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002a6a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a78:	2001      	movs	r0, #1
 8002a7a:	f7fe fd85 	bl	8001588 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a86:	461a      	mov	r2, r3
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	6013      	str	r3, [r2, #0]
}
 8002a8c:	bf00      	nop
 8002a8e:	3710      	adds	r7, #16
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	f8de3f23 	.word	0xf8de3f23

08002a98 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b0a6      	sub	sp, #152	; 0x98
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002aac:	2300      	movs	r3, #0
 8002aae:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002abc:	2300      	movs	r3, #0
 8002abe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002aee:	2300      	movs	r3, #0
 8002af0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002af4:	2300      	movs	r3, #0
 8002af6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002afa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002afe:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002b00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002b04:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002b06:	2300      	movs	r3, #0
 8002b08:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002b0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b10:	4619      	mov	r1, r3
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff fe86 	bl	8002824 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002b20:	2301      	movs	r3, #1
 8002b22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002b26:	2301      	movs	r3, #1
 8002b28:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002b34:	2300      	movs	r3, #0
 8002b36:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002b44:	2301      	movs	r3, #1
 8002b46:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002b48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b4c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002b4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b52:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002b54:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b58:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002b60:	2300      	movs	r3, #0
 8002b62:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002b64:	2300      	movs	r3, #0
 8002b66:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002b68:	f107 0308 	add.w	r3, r7, #8
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff ff08 	bl	8002984 <ETH_SetDMAConfig>
}
 8002b74:	bf00      	nop
 8002b76:	3798      	adds	r7, #152	; 0x98
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}

08002b7c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b087      	sub	sp, #28
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	60f8      	str	r0, [r7, #12]
 8002b84:	60b9      	str	r1, [r7, #8]
 8002b86:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3305      	adds	r3, #5
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	021b      	lsls	r3, r3, #8
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	3204      	adds	r2, #4
 8002b94:	7812      	ldrb	r2, [r2, #0]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002b9a:	68ba      	ldr	r2, [r7, #8]
 8002b9c:	4b11      	ldr	r3, [pc, #68]	; (8002be4 <ETH_MACAddressConfig+0x68>)
 8002b9e:	4413      	add	r3, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3303      	adds	r3, #3
 8002baa:	781b      	ldrb	r3, [r3, #0]
 8002bac:	061a      	lsls	r2, r3, #24
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	3302      	adds	r3, #2
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	041b      	lsls	r3, r3, #16
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	021b      	lsls	r3, r3, #8
 8002bc0:	4313      	orrs	r3, r2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	7812      	ldrb	r2, [r2, #0]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002bca:	68ba      	ldr	r2, [r7, #8]
 8002bcc:	4b06      	ldr	r3, [pc, #24]	; (8002be8 <ETH_MACAddressConfig+0x6c>)
 8002bce:	4413      	add	r3, r2
 8002bd0:	461a      	mov	r2, r3
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	6013      	str	r3, [r2, #0]
}
 8002bd6:	bf00      	nop
 8002bd8:	371c      	adds	r7, #28
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	40028040 	.word	0x40028040
 8002be8:	40028044 	.word	0x40028044

08002bec <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b085      	sub	sp, #20
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	e03e      	b.n	8002c78 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68d9      	ldr	r1, [r3, #12]
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	440b      	add	r3, r1
 8002c0a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	2200      	movs	r2, #0
 8002c16:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002c18:	68bb      	ldr	r3, [r7, #8]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	2200      	movs	r2, #0
 8002c22:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002c24:	68b9      	ldr	r1, [r7, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	3206      	adds	r2, #6
 8002c2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d80c      	bhi.n	8002c5c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	68d9      	ldr	r1, [r3, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	1c5a      	adds	r2, r3, #1
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	009b      	lsls	r3, r3, #2
 8002c4e:	4413      	add	r3, r2
 8002c50:	00db      	lsls	r3, r3, #3
 8002c52:	440b      	add	r3, r1
 8002c54:	461a      	mov	r2, r3
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	60da      	str	r2, [r3, #12]
 8002c5a:	e004      	b.n	8002c66 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	68db      	ldr	r3, [r3, #12]
 8002c60:	461a      	mov	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	3301      	adds	r3, #1
 8002c76:	60fb      	str	r3, [r7, #12]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2b03      	cmp	r3, #3
 8002c7c:	d9bd      	bls.n	8002bfa <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2200      	movs	r2, #0
 8002c82:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68da      	ldr	r2, [r3, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c90:	611a      	str	r2, [r3, #16]
}
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	b085      	sub	sp, #20
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	60fb      	str	r3, [r7, #12]
 8002caa:	e046      	b.n	8002d3a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	6919      	ldr	r1, [r3, #16]
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	440b      	add	r3, r1
 8002cbc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002cd6:	68bb      	ldr	r3, [r7, #8]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	2200      	movs	r2, #0
 8002ce0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002ce8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002cf0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002cfe:	68b9      	ldr	r1, [r7, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68fa      	ldr	r2, [r7, #12]
 8002d04:	3212      	adds	r2, #18
 8002d06:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d80c      	bhi.n	8002d2a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6919      	ldr	r1, [r3, #16]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	1c5a      	adds	r2, r3, #1
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	00db      	lsls	r3, r3, #3
 8002d20:	440b      	add	r3, r1
 8002d22:	461a      	mov	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	60da      	str	r2, [r3, #12]
 8002d28:	e004      	b.n	8002d34 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3301      	adds	r3, #1
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2b03      	cmp	r3, #3
 8002d3e:	d9b5      	bls.n	8002cac <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2200      	movs	r2, #0
 8002d56:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691a      	ldr	r2, [r3, #16]
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d6a:	60da      	str	r2, [r3, #12]
}
 8002d6c:	bf00      	nop
 8002d6e:	3714      	adds	r7, #20
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b08d      	sub	sp, #52	; 0x34
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	3318      	adds	r3, #24
 8002d88:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	691b      	ldr	r3, [r3, #16]
 8002d8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002d96:	2300      	movs	r3, #0
 8002d98:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002da2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002daa:	2300      	movs	r3, #0
 8002dac:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002db6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002dba:	d007      	beq.n	8002dcc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc0:	3304      	adds	r3, #4
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e0ff      	b.n	8002fd0 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	3301      	adds	r3, #1
 8002dd4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002dd6:	69fb      	ldr	r3, [r7, #28]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	461a      	mov	r2, r3
 8002ddc:	6a3b      	ldr	r3, [r7, #32]
 8002dde:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	4b7d      	ldr	r3, [pc, #500]	; (8002fdc <ETH_Prepare_Tx_Descriptors+0x264>)
 8002de6:	4013      	ands	r3, r2
 8002de8:	69fa      	ldr	r2, [r7, #28]
 8002dea:	6852      	ldr	r2, [r2, #4]
 8002dec:	431a      	orrs	r2, r3
 8002dee:	6a3b      	ldr	r3, [r7, #32]
 8002df0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0301 	and.w	r3, r3, #1
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	6a3b      	ldr	r3, [r7, #32]
 8002e0e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0320 	and.w	r3, r3, #32
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002e1c:	6a3b      	ldr	r3, [r7, #32]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e24:	68bb      	ldr	r3, [r7, #8]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	431a      	orrs	r2, r3
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0304 	and.w	r3, r3, #4
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002e42:	6a3b      	ldr	r3, [r7, #32]
 8002e44:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002e4e:	6a3b      	ldr	r3, [r7, #32]
 8002e50:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002e52:	f3bf 8f5f 	dmb	sy
}
 8002e56:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002e58:	6a3b      	ldr	r3, [r7, #32]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002e60:	6a3b      	ldr	r3, [r7, #32]
 8002e62:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002e64:	e082      	b.n	8002f6c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002e6e:	6a3b      	ldr	r3, [r7, #32]
 8002e70:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d006      	beq.n	8002e86 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e80:	6a3b      	ldr	r3, [r7, #32]
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	e005      	b.n	8002e92 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e8e:	6a3b      	ldr	r3, [r7, #32]
 8002e90:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e94:	3301      	adds	r3, #1
 8002e96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e9a:	2b03      	cmp	r3, #3
 8002e9c:	d902      	bls.n	8002ea4 <ETH_Prepare_Tx_Descriptors+0x12c>
 8002e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ea0:	3b04      	subs	r3, #4
 8002ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002eac:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002eb6:	6a3b      	ldr	r3, [r7, #32]
 8002eb8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002eba:	6a3b      	ldr	r3, [r7, #32]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ec6:	d007      	beq.n	8002ed8 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	3304      	adds	r3, #4
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	4413      	add	r3, r2
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d029      	beq.n	8002f2c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002ed8:	693b      	ldr	r3, [r7, #16]
 8002eda:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ee4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002eea:	e019      	b.n	8002f20 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002eec:	f3bf 8f5f 	dmb	sy
}
 8002ef0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002efe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f00:	3301      	adds	r3, #1
 8002f02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f06:	2b03      	cmp	r3, #3
 8002f08:	d902      	bls.n	8002f10 <ETH_Prepare_Tx_Descriptors+0x198>
 8002f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f0c:	3b04      	subs	r3, #4
 8002f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f18:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002f1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1c:	3301      	adds	r3, #1
 8002f1e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f20:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d3e1      	bcc.n	8002eec <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002f28:	2302      	movs	r3, #2
 8002f2a:	e051      	b.n	8002fd0 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2e:	3301      	adds	r3, #1
 8002f30:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	6a3b      	ldr	r3, [r7, #32]
 8002f40:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002f42:	6a3b      	ldr	r3, [r7, #32]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <ETH_Prepare_Tx_Descriptors+0x264>)
 8002f48:	4013      	ands	r3, r2
 8002f4a:	69fa      	ldr	r2, [r7, #28]
 8002f4c:	6852      	ldr	r2, [r2, #4]
 8002f4e:	431a      	orrs	r2, r3
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002f54:	69bb      	ldr	r3, [r7, #24]
 8002f56:	3301      	adds	r3, #1
 8002f58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002f5a:	f3bf 8f5f 	dmb	sy
}
 8002f5e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002f60:	6a3b      	ldr	r3, [r7, #32]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002f68:	6a3b      	ldr	r3, [r7, #32]
 8002f6a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	f47f af78 	bne.w	8002e66 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d006      	beq.n	8002f8a <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f7c:	6a3b      	ldr	r3, [r7, #32]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	e005      	b.n	8002f96 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002f8a:	6a3b      	ldr	r3, [r7, #32]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f92:	6a3b      	ldr	r3, [r7, #32]
 8002f94:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002f96:	6a3b      	ldr	r3, [r7, #32]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002f9e:	6a3b      	ldr	r3, [r7, #32]
 8002fa0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fa6:	6979      	ldr	r1, [r7, #20]
 8002fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002faa:	3304      	adds	r3, #4
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fb6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb8:	b672      	cpsid	i
}
 8002fba:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fc0:	69bb      	ldr	r3, [r7, #24]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	697b      	ldr	r3, [r7, #20]
 8002fc8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002fca:	b662      	cpsie	i
}
 8002fcc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3734      	adds	r7, #52	; 0x34
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	ffffe000 	.word	0xffffe000

08002fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	61fb      	str	r3, [r7, #28]
 8002ffe:	e175      	b.n	80032ec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003000:	2201      	movs	r2, #1
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	697a      	ldr	r2, [r7, #20]
 8003010:	4013      	ands	r3, r2
 8003012:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	697b      	ldr	r3, [r7, #20]
 8003018:	429a      	cmp	r2, r3
 800301a:	f040 8164 	bne.w	80032e6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	f003 0303 	and.w	r3, r3, #3
 8003026:	2b01      	cmp	r3, #1
 8003028:	d005      	beq.n	8003036 <HAL_GPIO_Init+0x56>
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d130      	bne.n	8003098 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	689b      	ldr	r3, [r3, #8]
 800303a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	2203      	movs	r2, #3
 8003042:	fa02 f303 	lsl.w	r3, r2, r3
 8003046:	43db      	mvns	r3, r3
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	4013      	ands	r3, r2
 800304c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68da      	ldr	r2, [r3, #12]
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	4313      	orrs	r3, r2
 800305e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69ba      	ldr	r2, [r7, #24]
 8003064:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800306c:	2201      	movs	r2, #1
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	091b      	lsrs	r3, r3, #4
 8003082:	f003 0201 	and.w	r2, r3, #1
 8003086:	69fb      	ldr	r3, [r7, #28]
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d017      	beq.n	80030d4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	005b      	lsls	r3, r3, #1
 80030ae:	2203      	movs	r2, #3
 80030b0:	fa02 f303 	lsl.w	r3, r2, r3
 80030b4:	43db      	mvns	r3, r3
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	4013      	ands	r3, r2
 80030ba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f003 0303 	and.w	r3, r3, #3
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d123      	bne.n	8003128 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	08da      	lsrs	r2, r3, #3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	3208      	adds	r2, #8
 80030e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	009b      	lsls	r3, r3, #2
 80030f6:	220f      	movs	r2, #15
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	691a      	ldr	r2, [r3, #16]
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	08da      	lsrs	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	3208      	adds	r2, #8
 8003122:	69b9      	ldr	r1, [r7, #24]
 8003124:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800312e:	69fb      	ldr	r3, [r7, #28]
 8003130:	005b      	lsls	r3, r3, #1
 8003132:	2203      	movs	r2, #3
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	43db      	mvns	r3, r3
 800313a:	69ba      	ldr	r2, [r7, #24]
 800313c:	4013      	ands	r3, r2
 800313e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	f003 0203 	and.w	r2, r3, #3
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	fa02 f303 	lsl.w	r3, r2, r3
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	4313      	orrs	r3, r2
 8003154:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	69ba      	ldr	r2, [r7, #24]
 800315a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003164:	2b00      	cmp	r3, #0
 8003166:	f000 80be 	beq.w	80032e6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800316a:	4b66      	ldr	r3, [pc, #408]	; (8003304 <HAL_GPIO_Init+0x324>)
 800316c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316e:	4a65      	ldr	r2, [pc, #404]	; (8003304 <HAL_GPIO_Init+0x324>)
 8003170:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003174:	6453      	str	r3, [r2, #68]	; 0x44
 8003176:	4b63      	ldr	r3, [pc, #396]	; (8003304 <HAL_GPIO_Init+0x324>)
 8003178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800317a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317e:	60fb      	str	r3, [r7, #12]
 8003180:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003182:	4a61      	ldr	r2, [pc, #388]	; (8003308 <HAL_GPIO_Init+0x328>)
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	089b      	lsrs	r3, r3, #2
 8003188:	3302      	adds	r3, #2
 800318a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	220f      	movs	r2, #15
 800319a:	fa02 f303 	lsl.w	r3, r2, r3
 800319e:	43db      	mvns	r3, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4013      	ands	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a58      	ldr	r2, [pc, #352]	; (800330c <HAL_GPIO_Init+0x32c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d037      	beq.n	800321e <HAL_GPIO_Init+0x23e>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a57      	ldr	r2, [pc, #348]	; (8003310 <HAL_GPIO_Init+0x330>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d031      	beq.n	800321a <HAL_GPIO_Init+0x23a>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a56      	ldr	r2, [pc, #344]	; (8003314 <HAL_GPIO_Init+0x334>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d02b      	beq.n	8003216 <HAL_GPIO_Init+0x236>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a55      	ldr	r2, [pc, #340]	; (8003318 <HAL_GPIO_Init+0x338>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d025      	beq.n	8003212 <HAL_GPIO_Init+0x232>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a54      	ldr	r2, [pc, #336]	; (800331c <HAL_GPIO_Init+0x33c>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d01f      	beq.n	800320e <HAL_GPIO_Init+0x22e>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a53      	ldr	r2, [pc, #332]	; (8003320 <HAL_GPIO_Init+0x340>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d019      	beq.n	800320a <HAL_GPIO_Init+0x22a>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a52      	ldr	r2, [pc, #328]	; (8003324 <HAL_GPIO_Init+0x344>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d013      	beq.n	8003206 <HAL_GPIO_Init+0x226>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a51      	ldr	r2, [pc, #324]	; (8003328 <HAL_GPIO_Init+0x348>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00d      	beq.n	8003202 <HAL_GPIO_Init+0x222>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a50      	ldr	r2, [pc, #320]	; (800332c <HAL_GPIO_Init+0x34c>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d007      	beq.n	80031fe <HAL_GPIO_Init+0x21e>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a4f      	ldr	r2, [pc, #316]	; (8003330 <HAL_GPIO_Init+0x350>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d101      	bne.n	80031fa <HAL_GPIO_Init+0x21a>
 80031f6:	2309      	movs	r3, #9
 80031f8:	e012      	b.n	8003220 <HAL_GPIO_Init+0x240>
 80031fa:	230a      	movs	r3, #10
 80031fc:	e010      	b.n	8003220 <HAL_GPIO_Init+0x240>
 80031fe:	2308      	movs	r3, #8
 8003200:	e00e      	b.n	8003220 <HAL_GPIO_Init+0x240>
 8003202:	2307      	movs	r3, #7
 8003204:	e00c      	b.n	8003220 <HAL_GPIO_Init+0x240>
 8003206:	2306      	movs	r3, #6
 8003208:	e00a      	b.n	8003220 <HAL_GPIO_Init+0x240>
 800320a:	2305      	movs	r3, #5
 800320c:	e008      	b.n	8003220 <HAL_GPIO_Init+0x240>
 800320e:	2304      	movs	r3, #4
 8003210:	e006      	b.n	8003220 <HAL_GPIO_Init+0x240>
 8003212:	2303      	movs	r3, #3
 8003214:	e004      	b.n	8003220 <HAL_GPIO_Init+0x240>
 8003216:	2302      	movs	r3, #2
 8003218:	e002      	b.n	8003220 <HAL_GPIO_Init+0x240>
 800321a:	2301      	movs	r3, #1
 800321c:	e000      	b.n	8003220 <HAL_GPIO_Init+0x240>
 800321e:	2300      	movs	r3, #0
 8003220:	69fa      	ldr	r2, [r7, #28]
 8003222:	f002 0203 	and.w	r2, r2, #3
 8003226:	0092      	lsls	r2, r2, #2
 8003228:	4093      	lsls	r3, r2
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4313      	orrs	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003230:	4935      	ldr	r1, [pc, #212]	; (8003308 <HAL_GPIO_Init+0x328>)
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	089b      	lsrs	r3, r3, #2
 8003236:	3302      	adds	r3, #2
 8003238:	69ba      	ldr	r2, [r7, #24]
 800323a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800323e:	4b3d      	ldr	r3, [pc, #244]	; (8003334 <HAL_GPIO_Init+0x354>)
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	43db      	mvns	r3, r3
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	4013      	ands	r3, r2
 800324c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d003      	beq.n	8003262 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003262:	4a34      	ldr	r2, [pc, #208]	; (8003334 <HAL_GPIO_Init+0x354>)
 8003264:	69bb      	ldr	r3, [r7, #24]
 8003266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003268:	4b32      	ldr	r3, [pc, #200]	; (8003334 <HAL_GPIO_Init+0x354>)
 800326a:	68db      	ldr	r3, [r3, #12]
 800326c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	43db      	mvns	r3, r3
 8003272:	69ba      	ldr	r2, [r7, #24]
 8003274:	4013      	ands	r3, r2
 8003276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003278:	683b      	ldr	r3, [r7, #0]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003280:	2b00      	cmp	r3, #0
 8003282:	d003      	beq.n	800328c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800328c:	4a29      	ldr	r2, [pc, #164]	; (8003334 <HAL_GPIO_Init+0x354>)
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003292:	4b28      	ldr	r3, [pc, #160]	; (8003334 <HAL_GPIO_Init+0x354>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032b6:	4a1f      	ldr	r2, [pc, #124]	; (8003334 <HAL_GPIO_Init+0x354>)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032bc:	4b1d      	ldr	r3, [pc, #116]	; (8003334 <HAL_GPIO_Init+0x354>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032e0:	4a14      	ldr	r2, [pc, #80]	; (8003334 <HAL_GPIO_Init+0x354>)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3301      	adds	r3, #1
 80032ea:	61fb      	str	r3, [r7, #28]
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	2b0f      	cmp	r3, #15
 80032f0:	f67f ae86 	bls.w	8003000 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	3724      	adds	r7, #36	; 0x24
 80032fa:	46bd      	mov	sp, r7
 80032fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003300:	4770      	bx	lr
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800
 8003308:	40013800 	.word	0x40013800
 800330c:	40020000 	.word	0x40020000
 8003310:	40020400 	.word	0x40020400
 8003314:	40020800 	.word	0x40020800
 8003318:	40020c00 	.word	0x40020c00
 800331c:	40021000 	.word	0x40021000
 8003320:	40021400 	.word	0x40021400
 8003324:	40021800 	.word	0x40021800
 8003328:	40021c00 	.word	0x40021c00
 800332c:	40022000 	.word	0x40022000
 8003330:	40022400 	.word	0x40022400
 8003334:	40013c00 	.word	0x40013c00

08003338 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
 8003344:	4613      	mov	r3, r2
 8003346:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003348:	787b      	ldrb	r3, [r7, #1]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d003      	beq.n	8003356 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800334e:	887a      	ldrh	r2, [r7, #2]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003354:	e003      	b.n	800335e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003356:	887b      	ldrh	r3, [r7, #2]
 8003358:	041a      	lsls	r2, r3, #16
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	619a      	str	r2, [r3, #24]
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr
	...

0800336c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b082      	sub	sp, #8
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d101      	bne.n	800337e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800337a:	2301      	movs	r3, #1
 800337c:	e07f      	b.n	800347e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d106      	bne.n	8003398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2200      	movs	r2, #0
 800338e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f7fd fc74 	bl	8000c80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2224      	movs	r2, #36	; 0x24
 800339c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0201 	bic.w	r2, r2, #1
 80033ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80033bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689a      	ldr	r2, [r3, #8]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	68db      	ldr	r3, [r3, #12]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d107      	bne.n	80033e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689a      	ldr	r2, [r3, #8]
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	e006      	b.n	80033f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	689a      	ldr	r2, [r3, #8]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80033f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d104      	bne.n	8003406 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003404:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	6859      	ldr	r1, [r3, #4]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	4b1d      	ldr	r3, [pc, #116]	; (8003488 <HAL_I2C_Init+0x11c>)
 8003412:	430b      	orrs	r3, r1
 8003414:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003424:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	691a      	ldr	r2, [r3, #16]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	430a      	orrs	r2, r1
 800343e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	69d9      	ldr	r1, [r3, #28]
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a1a      	ldr	r2, [r3, #32]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	430a      	orrs	r2, r1
 800344e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f042 0201 	orr.w	r2, r2, #1
 800345e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2200      	movs	r2, #0
 8003464:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2220      	movs	r2, #32
 800346a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3708      	adds	r7, #8
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	02008000 	.word	0x02008000

0800348c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800348c:	b480      	push	{r7}
 800348e:	b083      	sub	sp, #12
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
 8003494:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d138      	bne.n	8003514 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e032      	b.n	8003516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2224      	movs	r2, #36	; 0x24
 80034bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f022 0201 	bic.w	r2, r2, #1
 80034ce:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	681a      	ldr	r2, [r3, #0]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80034de:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6819      	ldr	r1, [r3, #0]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	430a      	orrs	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003510:	2300      	movs	r3, #0
 8003512:	e000      	b.n	8003516 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003514:	2302      	movs	r3, #2
  }
}
 8003516:	4618      	mov	r0, r3
 8003518:	370c      	adds	r7, #12
 800351a:	46bd      	mov	sp, r7
 800351c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003520:	4770      	bx	lr

08003522 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003522:	b480      	push	{r7}
 8003524:	b085      	sub	sp, #20
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b20      	cmp	r3, #32
 8003536:	d139      	bne.n	80035ac <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800353e:	2b01      	cmp	r3, #1
 8003540:	d101      	bne.n	8003546 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003542:	2302      	movs	r3, #2
 8003544:	e033      	b.n	80035ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2201      	movs	r2, #1
 800354a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2224      	movs	r2, #36	; 0x24
 8003552:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 0201 	bic.w	r2, r2, #1
 8003564:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003574:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	021b      	lsls	r3, r3, #8
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	4313      	orrs	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	68fa      	ldr	r2, [r7, #12]
 8003586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2200      	movs	r2, #0
 80035a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	e000      	b.n	80035ae <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035ac:	2302      	movs	r3, #2
  }
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3714      	adds	r7, #20
 80035b2:	46bd      	mov	sp, r7
 80035b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b8:	4770      	bx	lr
	...

080035bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b082      	sub	sp, #8
 80035c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80035c2:	2300      	movs	r3, #0
 80035c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80035c6:	4b23      	ldr	r3, [pc, #140]	; (8003654 <HAL_PWREx_EnableOverDrive+0x98>)
 80035c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ca:	4a22      	ldr	r2, [pc, #136]	; (8003654 <HAL_PWREx_EnableOverDrive+0x98>)
 80035cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035d0:	6413      	str	r3, [r2, #64]	; 0x40
 80035d2:	4b20      	ldr	r3, [pc, #128]	; (8003654 <HAL_PWREx_EnableOverDrive+0x98>)
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035da:	603b      	str	r3, [r7, #0]
 80035dc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80035de:	4b1e      	ldr	r3, [pc, #120]	; (8003658 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1d      	ldr	r2, [pc, #116]	; (8003658 <HAL_PWREx_EnableOverDrive+0x9c>)
 80035e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035e8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035ea:	f7fd ffc1 	bl	8001570 <HAL_GetTick>
 80035ee:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80035f0:	e009      	b.n	8003606 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80035f2:	f7fd ffbd 	bl	8001570 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003600:	d901      	bls.n	8003606 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003602:	2303      	movs	r3, #3
 8003604:	e022      	b.n	800364c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003606:	4b14      	ldr	r3, [pc, #80]	; (8003658 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800360e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003612:	d1ee      	bne.n	80035f2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003614:	4b10      	ldr	r3, [pc, #64]	; (8003658 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a0f      	ldr	r2, [pc, #60]	; (8003658 <HAL_PWREx_EnableOverDrive+0x9c>)
 800361a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003620:	f7fd ffa6 	bl	8001570 <HAL_GetTick>
 8003624:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003626:	e009      	b.n	800363c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003628:	f7fd ffa2 	bl	8001570 <HAL_GetTick>
 800362c:	4602      	mov	r2, r0
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	1ad3      	subs	r3, r2, r3
 8003632:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003636:	d901      	bls.n	800363c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003638:	2303      	movs	r3, #3
 800363a:	e007      	b.n	800364c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_PWREx_EnableOverDrive+0x9c>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003644:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003648:	d1ee      	bne.n	8003628 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800364a:	2300      	movs	r3, #0
}
 800364c:	4618      	mov	r0, r3
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40023800 	.word	0x40023800
 8003658:	40007000 	.word	0x40007000

0800365c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003664:	2300      	movs	r3, #0
 8003666:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e29b      	b.n	8003baa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b00      	cmp	r3, #0
 800367c:	f000 8087 	beq.w	800378e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003680:	4b96      	ldr	r3, [pc, #600]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 030c 	and.w	r3, r3, #12
 8003688:	2b04      	cmp	r3, #4
 800368a:	d00c      	beq.n	80036a6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800368c:	4b93      	ldr	r3, [pc, #588]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f003 030c 	and.w	r3, r3, #12
 8003694:	2b08      	cmp	r3, #8
 8003696:	d112      	bne.n	80036be <HAL_RCC_OscConfig+0x62>
 8003698:	4b90      	ldr	r3, [pc, #576]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a4:	d10b      	bne.n	80036be <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a6:	4b8d      	ldr	r3, [pc, #564]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d06c      	beq.n	800378c <HAL_RCC_OscConfig+0x130>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d168      	bne.n	800378c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e275      	b.n	8003baa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036c6:	d106      	bne.n	80036d6 <HAL_RCC_OscConfig+0x7a>
 80036c8:	4b84      	ldr	r3, [pc, #528]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a83      	ldr	r2, [pc, #524]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 80036ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036d2:	6013      	str	r3, [r2, #0]
 80036d4:	e02e      	b.n	8003734 <HAL_RCC_OscConfig+0xd8>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10c      	bne.n	80036f8 <HAL_RCC_OscConfig+0x9c>
 80036de:	4b7f      	ldr	r3, [pc, #508]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a7e      	ldr	r2, [pc, #504]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 80036e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	4b7c      	ldr	r3, [pc, #496]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a7b      	ldr	r2, [pc, #492]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 80036f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036f4:	6013      	str	r3, [r2, #0]
 80036f6:	e01d      	b.n	8003734 <HAL_RCC_OscConfig+0xd8>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003700:	d10c      	bne.n	800371c <HAL_RCC_OscConfig+0xc0>
 8003702:	4b76      	ldr	r3, [pc, #472]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a75      	ldr	r2, [pc, #468]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 8003708:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	4b73      	ldr	r3, [pc, #460]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	4a72      	ldr	r2, [pc, #456]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 8003714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003718:	6013      	str	r3, [r2, #0]
 800371a:	e00b      	b.n	8003734 <HAL_RCC_OscConfig+0xd8>
 800371c:	4b6f      	ldr	r3, [pc, #444]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a6e      	ldr	r2, [pc, #440]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 8003722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003726:	6013      	str	r3, [r2, #0]
 8003728:	4b6c      	ldr	r3, [pc, #432]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a6b      	ldr	r2, [pc, #428]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 800372e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d013      	beq.n	8003764 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800373c:	f7fd ff18 	bl	8001570 <HAL_GetTick>
 8003740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	e008      	b.n	8003756 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003744:	f7fd ff14 	bl	8001570 <HAL_GetTick>
 8003748:	4602      	mov	r2, r0
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	1ad3      	subs	r3, r2, r3
 800374e:	2b64      	cmp	r3, #100	; 0x64
 8003750:	d901      	bls.n	8003756 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003752:	2303      	movs	r3, #3
 8003754:	e229      	b.n	8003baa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	4b61      	ldr	r3, [pc, #388]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d0f0      	beq.n	8003744 <HAL_RCC_OscConfig+0xe8>
 8003762:	e014      	b.n	800378e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003764:	f7fd ff04 	bl	8001570 <HAL_GetTick>
 8003768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800376a:	e008      	b.n	800377e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800376c:	f7fd ff00 	bl	8001570 <HAL_GetTick>
 8003770:	4602      	mov	r2, r0
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	2b64      	cmp	r3, #100	; 0x64
 8003778:	d901      	bls.n	800377e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e215      	b.n	8003baa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800377e:	4b57      	ldr	r3, [pc, #348]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1f0      	bne.n	800376c <HAL_RCC_OscConfig+0x110>
 800378a:	e000      	b.n	800378e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800378c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d069      	beq.n	800386e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800379a:	4b50      	ldr	r3, [pc, #320]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00b      	beq.n	80037be <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037a6:	4b4d      	ldr	r3, [pc, #308]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	f003 030c 	and.w	r3, r3, #12
 80037ae:	2b08      	cmp	r3, #8
 80037b0:	d11c      	bne.n	80037ec <HAL_RCC_OscConfig+0x190>
 80037b2:	4b4a      	ldr	r3, [pc, #296]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d116      	bne.n	80037ec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037be:	4b47      	ldr	r3, [pc, #284]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0302 	and.w	r3, r3, #2
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d005      	beq.n	80037d6 <HAL_RCC_OscConfig+0x17a>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68db      	ldr	r3, [r3, #12]
 80037ce:	2b01      	cmp	r3, #1
 80037d0:	d001      	beq.n	80037d6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e1e9      	b.n	8003baa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037d6:	4b41      	ldr	r3, [pc, #260]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	00db      	lsls	r3, r3, #3
 80037e4:	493d      	ldr	r1, [pc, #244]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ea:	e040      	b.n	800386e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d023      	beq.n	800383c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037f4:	4b39      	ldr	r3, [pc, #228]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a38      	ldr	r2, [pc, #224]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 80037fa:	f043 0301 	orr.w	r3, r3, #1
 80037fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fd feb6 	bl	8001570 <HAL_GetTick>
 8003804:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003808:	f7fd feb2 	bl	8001570 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e1c7      	b.n	8003baa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800381a:	4b30      	ldr	r3, [pc, #192]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0302 	and.w	r3, r3, #2
 8003822:	2b00      	cmp	r3, #0
 8003824:	d0f0      	beq.n	8003808 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003826:	4b2d      	ldr	r3, [pc, #180]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	691b      	ldr	r3, [r3, #16]
 8003832:	00db      	lsls	r3, r3, #3
 8003834:	4929      	ldr	r1, [pc, #164]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 8003836:	4313      	orrs	r3, r2
 8003838:	600b      	str	r3, [r1, #0]
 800383a:	e018      	b.n	800386e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800383c:	4b27      	ldr	r3, [pc, #156]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a26      	ldr	r2, [pc, #152]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 8003842:	f023 0301 	bic.w	r3, r3, #1
 8003846:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7fd fe92 	bl	8001570 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003850:	f7fd fe8e 	bl	8001570 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e1a3      	b.n	8003baa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003862:	4b1e      	ldr	r3, [pc, #120]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d038      	beq.n	80038ec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d019      	beq.n	80038b6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003882:	4b16      	ldr	r3, [pc, #88]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 8003884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003886:	4a15      	ldr	r2, [pc, #84]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 8003888:	f043 0301 	orr.w	r3, r3, #1
 800388c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800388e:	f7fd fe6f 	bl	8001570 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003896:	f7fd fe6b 	bl	8001570 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e180      	b.n	8003baa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a8:	4b0c      	ldr	r3, [pc, #48]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 80038aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ac:	f003 0302 	and.w	r3, r3, #2
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0f0      	beq.n	8003896 <HAL_RCC_OscConfig+0x23a>
 80038b4:	e01a      	b.n	80038ec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b6:	4b09      	ldr	r3, [pc, #36]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 80038b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038ba:	4a08      	ldr	r2, [pc, #32]	; (80038dc <HAL_RCC_OscConfig+0x280>)
 80038bc:	f023 0301 	bic.w	r3, r3, #1
 80038c0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038c2:	f7fd fe55 	bl	8001570 <HAL_GetTick>
 80038c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038c8:	e00a      	b.n	80038e0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038ca:	f7fd fe51 	bl	8001570 <HAL_GetTick>
 80038ce:	4602      	mov	r2, r0
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	1ad3      	subs	r3, r2, r3
 80038d4:	2b02      	cmp	r3, #2
 80038d6:	d903      	bls.n	80038e0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80038d8:	2303      	movs	r3, #3
 80038da:	e166      	b.n	8003baa <HAL_RCC_OscConfig+0x54e>
 80038dc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038e0:	4b92      	ldr	r3, [pc, #584]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 80038e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d1ee      	bne.n	80038ca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 0304 	and.w	r3, r3, #4
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 80a4 	beq.w	8003a42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038fa:	4b8c      	ldr	r3, [pc, #560]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10d      	bne.n	8003922 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003906:	4b89      	ldr	r3, [pc, #548]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390a:	4a88      	ldr	r2, [pc, #544]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 800390c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003910:	6413      	str	r3, [r2, #64]	; 0x40
 8003912:	4b86      	ldr	r3, [pc, #536]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003916:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391a:	60bb      	str	r3, [r7, #8]
 800391c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800391e:	2301      	movs	r3, #1
 8003920:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003922:	4b83      	ldr	r3, [pc, #524]	; (8003b30 <HAL_RCC_OscConfig+0x4d4>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392a:	2b00      	cmp	r3, #0
 800392c:	d118      	bne.n	8003960 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800392e:	4b80      	ldr	r3, [pc, #512]	; (8003b30 <HAL_RCC_OscConfig+0x4d4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a7f      	ldr	r2, [pc, #508]	; (8003b30 <HAL_RCC_OscConfig+0x4d4>)
 8003934:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800393a:	f7fd fe19 	bl	8001570 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003942:	f7fd fe15 	bl	8001570 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b64      	cmp	r3, #100	; 0x64
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e12a      	b.n	8003baa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003954:	4b76      	ldr	r3, [pc, #472]	; (8003b30 <HAL_RCC_OscConfig+0x4d4>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d106      	bne.n	8003976 <HAL_RCC_OscConfig+0x31a>
 8003968:	4b70      	ldr	r3, [pc, #448]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 800396a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800396c:	4a6f      	ldr	r2, [pc, #444]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	6713      	str	r3, [r2, #112]	; 0x70
 8003974:	e02d      	b.n	80039d2 <HAL_RCC_OscConfig+0x376>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2b00      	cmp	r3, #0
 800397c:	d10c      	bne.n	8003998 <HAL_RCC_OscConfig+0x33c>
 800397e:	4b6b      	ldr	r3, [pc, #428]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003982:	4a6a      	ldr	r2, [pc, #424]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003984:	f023 0301 	bic.w	r3, r3, #1
 8003988:	6713      	str	r3, [r2, #112]	; 0x70
 800398a:	4b68      	ldr	r3, [pc, #416]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 800398c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800398e:	4a67      	ldr	r2, [pc, #412]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003990:	f023 0304 	bic.w	r3, r3, #4
 8003994:	6713      	str	r3, [r2, #112]	; 0x70
 8003996:	e01c      	b.n	80039d2 <HAL_RCC_OscConfig+0x376>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	2b05      	cmp	r3, #5
 800399e:	d10c      	bne.n	80039ba <HAL_RCC_OscConfig+0x35e>
 80039a0:	4b62      	ldr	r3, [pc, #392]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 80039a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a4:	4a61      	ldr	r2, [pc, #388]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 80039a6:	f043 0304 	orr.w	r3, r3, #4
 80039aa:	6713      	str	r3, [r2, #112]	; 0x70
 80039ac:	4b5f      	ldr	r3, [pc, #380]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 80039ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039b0:	4a5e      	ldr	r2, [pc, #376]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 80039b2:	f043 0301 	orr.w	r3, r3, #1
 80039b6:	6713      	str	r3, [r2, #112]	; 0x70
 80039b8:	e00b      	b.n	80039d2 <HAL_RCC_OscConfig+0x376>
 80039ba:	4b5c      	ldr	r3, [pc, #368]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 80039bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039be:	4a5b      	ldr	r2, [pc, #364]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 80039c0:	f023 0301 	bic.w	r3, r3, #1
 80039c4:	6713      	str	r3, [r2, #112]	; 0x70
 80039c6:	4b59      	ldr	r3, [pc, #356]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 80039c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ca:	4a58      	ldr	r2, [pc, #352]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 80039cc:	f023 0304 	bic.w	r3, r3, #4
 80039d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d015      	beq.n	8003a06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039da:	f7fd fdc9 	bl	8001570 <HAL_GetTick>
 80039de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039e0:	e00a      	b.n	80039f8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e2:	f7fd fdc5 	bl	8001570 <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e0d8      	b.n	8003baa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039f8:	4b4c      	ldr	r3, [pc, #304]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 80039fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0ee      	beq.n	80039e2 <HAL_RCC_OscConfig+0x386>
 8003a04:	e014      	b.n	8003a30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a06:	f7fd fdb3 	bl	8001570 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7fd fdaf 	bl	8001570 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e0c2      	b.n	8003baa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a24:	4b41      	ldr	r3, [pc, #260]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a28:	f003 0302 	and.w	r3, r3, #2
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d1ee      	bne.n	8003a0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a30:	7dfb      	ldrb	r3, [r7, #23]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d105      	bne.n	8003a42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a36:	4b3d      	ldr	r3, [pc, #244]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	4a3c      	ldr	r2, [pc, #240]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003a3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	699b      	ldr	r3, [r3, #24]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80ae 	beq.w	8003ba8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a4c:	4b37      	ldr	r3, [pc, #220]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f003 030c 	and.w	r3, r3, #12
 8003a54:	2b08      	cmp	r3, #8
 8003a56:	d06d      	beq.n	8003b34 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d14b      	bne.n	8003af8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a60:	4b32      	ldr	r3, [pc, #200]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a31      	ldr	r2, [pc, #196]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003a66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a6c:	f7fd fd80 	bl	8001570 <HAL_GetTick>
 8003a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a72:	e008      	b.n	8003a86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a74:	f7fd fd7c 	bl	8001570 <HAL_GetTick>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	693b      	ldr	r3, [r7, #16]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	2b02      	cmp	r3, #2
 8003a80:	d901      	bls.n	8003a86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e091      	b.n	8003baa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a86:	4b29      	ldr	r3, [pc, #164]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d1f0      	bne.n	8003a74 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69da      	ldr	r2, [r3, #28]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	431a      	orrs	r2, r3
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	019b      	lsls	r3, r3, #6
 8003aa2:	431a      	orrs	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa8:	085b      	lsrs	r3, r3, #1
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	041b      	lsls	r3, r3, #16
 8003aae:	431a      	orrs	r2, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab4:	061b      	lsls	r3, r3, #24
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003abc:	071b      	lsls	r3, r3, #28
 8003abe:	491b      	ldr	r1, [pc, #108]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ac4:	4b19      	ldr	r3, [pc, #100]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a18      	ldr	r2, [pc, #96]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003aca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad0:	f7fd fd4e 	bl	8001570 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ad8:	f7fd fd4a 	bl	8001570 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e05f      	b.n	8003baa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aea:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d0f0      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x47c>
 8003af6:	e057      	b.n	8003ba8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003af8:	4b0c      	ldr	r3, [pc, #48]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a0b      	ldr	r2, [pc, #44]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003afe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fd fd34 	bl	8001570 <HAL_GetTick>
 8003b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b0a:	e008      	b.n	8003b1e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b0c:	f7fd fd30 	bl	8001570 <HAL_GetTick>
 8003b10:	4602      	mov	r2, r0
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	1ad3      	subs	r3, r2, r3
 8003b16:	2b02      	cmp	r3, #2
 8003b18:	d901      	bls.n	8003b1e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	e045      	b.n	8003baa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003b1e:	4b03      	ldr	r3, [pc, #12]	; (8003b2c <HAL_RCC_OscConfig+0x4d0>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d1f0      	bne.n	8003b0c <HAL_RCC_OscConfig+0x4b0>
 8003b2a:	e03d      	b.n	8003ba8 <HAL_RCC_OscConfig+0x54c>
 8003b2c:	40023800 	.word	0x40023800
 8003b30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003b34:	4b1f      	ldr	r3, [pc, #124]	; (8003bb4 <HAL_RCC_OscConfig+0x558>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	699b      	ldr	r3, [r3, #24]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d030      	beq.n	8003ba4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	d129      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d122      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b64:	4013      	ands	r3, r2
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b6a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d119      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	085b      	lsrs	r3, r3, #1
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d10f      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b8e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d107      	bne.n	8003ba4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ba0:	429a      	cmp	r2, r3
 8003ba2:	d001      	beq.n	8003ba8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e000      	b.n	8003baa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3718      	adds	r7, #24
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	40023800 	.word	0x40023800

08003bb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d101      	bne.n	8003bd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	e0d0      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bd0:	4b6a      	ldr	r3, [pc, #424]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 030f 	and.w	r3, r3, #15
 8003bd8:	683a      	ldr	r2, [r7, #0]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d910      	bls.n	8003c00 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bde:	4b67      	ldr	r3, [pc, #412]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f023 020f 	bic.w	r2, r3, #15
 8003be6:	4965      	ldr	r1, [pc, #404]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bee:	4b63      	ldr	r3, [pc, #396]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f003 030f 	and.w	r3, r3, #15
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	d001      	beq.n	8003c00 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e0b8      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f003 0302 	and.w	r3, r3, #2
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d020      	beq.n	8003c4e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d005      	beq.n	8003c24 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c18:	4b59      	ldr	r3, [pc, #356]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1a:	689b      	ldr	r3, [r3, #8]
 8003c1c:	4a58      	ldr	r2, [pc, #352]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003c22:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f003 0308 	and.w	r3, r3, #8
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d005      	beq.n	8003c3c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c30:	4b53      	ldr	r3, [pc, #332]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	4a52      	ldr	r2, [pc, #328]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003c3a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c3c:	4b50      	ldr	r3, [pc, #320]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	689b      	ldr	r3, [r3, #8]
 8003c48:	494d      	ldr	r1, [pc, #308]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d040      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d107      	bne.n	8003c72 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	4b47      	ldr	r3, [pc, #284]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d115      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e07f      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d107      	bne.n	8003c8a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c7a:	4b41      	ldr	r3, [pc, #260]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d109      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e073      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c8a:	4b3d      	ldr	r3, [pc, #244]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d101      	bne.n	8003c9a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	e06b      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c9a:	4b39      	ldr	r3, [pc, #228]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f023 0203 	bic.w	r2, r3, #3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	4936      	ldr	r1, [pc, #216]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003cac:	f7fd fc60 	bl	8001570 <HAL_GetTick>
 8003cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cb2:	e00a      	b.n	8003cca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003cb4:	f7fd fc5c 	bl	8001570 <HAL_GetTick>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e053      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cca:	4b2d      	ldr	r3, [pc, #180]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 020c 	and.w	r2, r3, #12
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	685b      	ldr	r3, [r3, #4]
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	429a      	cmp	r2, r3
 8003cda:	d1eb      	bne.n	8003cb4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cdc:	4b27      	ldr	r3, [pc, #156]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 030f 	and.w	r3, r3, #15
 8003ce4:	683a      	ldr	r2, [r7, #0]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d210      	bcs.n	8003d0c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cea:	4b24      	ldr	r3, [pc, #144]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f023 020f 	bic.w	r2, r3, #15
 8003cf2:	4922      	ldr	r1, [pc, #136]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cfa:	4b20      	ldr	r3, [pc, #128]	; (8003d7c <HAL_RCC_ClockConfig+0x1c4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d001      	beq.n	8003d0c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e032      	b.n	8003d72 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f003 0304 	and.w	r3, r3, #4
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d008      	beq.n	8003d2a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d18:	4b19      	ldr	r3, [pc, #100]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	68db      	ldr	r3, [r3, #12]
 8003d24:	4916      	ldr	r1, [pc, #88]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003d26:	4313      	orrs	r3, r2
 8003d28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d36:	4b12      	ldr	r3, [pc, #72]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	490e      	ldr	r1, [pc, #56]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d4a:	f000 f821 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	4b0b      	ldr	r3, [pc, #44]	; (8003d80 <HAL_RCC_ClockConfig+0x1c8>)
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	091b      	lsrs	r3, r3, #4
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	490a      	ldr	r1, [pc, #40]	; (8003d84 <HAL_RCC_ClockConfig+0x1cc>)
 8003d5c:	5ccb      	ldrb	r3, [r1, r3]
 8003d5e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d62:	4a09      	ldr	r2, [pc, #36]	; (8003d88 <HAL_RCC_ClockConfig+0x1d0>)
 8003d64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <HAL_RCC_ClockConfig+0x1d4>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fd f8cc 	bl	8000f08 <HAL_InitTick>

  return HAL_OK;
 8003d70:	2300      	movs	r3, #0
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40023c00 	.word	0x40023c00
 8003d80:	40023800 	.word	0x40023800
 8003d84:	0801afb4 	.word	0x0801afb4
 8003d88:	20000000 	.word	0x20000000
 8003d8c:	20000004 	.word	0x20000004

08003d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d94:	b094      	sub	sp, #80	; 0x50
 8003d96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003d98:	2300      	movs	r3, #0
 8003d9a:	647b      	str	r3, [r7, #68]	; 0x44
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003da0:	2300      	movs	r3, #0
 8003da2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003da8:	4b79      	ldr	r3, [pc, #484]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d00d      	beq.n	8003dd0 <HAL_RCC_GetSysClockFreq+0x40>
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	f200 80e1 	bhi.w	8003f7c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <HAL_RCC_GetSysClockFreq+0x34>
 8003dbe:	2b04      	cmp	r3, #4
 8003dc0:	d003      	beq.n	8003dca <HAL_RCC_GetSysClockFreq+0x3a>
 8003dc2:	e0db      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003dc4:	4b73      	ldr	r3, [pc, #460]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8003dc6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dc8:	e0db      	b.n	8003f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003dca:	4b73      	ldr	r3, [pc, #460]	; (8003f98 <HAL_RCC_GetSysClockFreq+0x208>)
 8003dcc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003dce:	e0d8      	b.n	8003f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003dd0:	4b6f      	ldr	r3, [pc, #444]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003dd8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003dda:	4b6d      	ldr	r3, [pc, #436]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d063      	beq.n	8003eae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003de6:	4b6a      	ldr	r3, [pc, #424]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	099b      	lsrs	r3, r3, #6
 8003dec:	2200      	movs	r2, #0
 8003dee:	63bb      	str	r3, [r7, #56]	; 0x38
 8003df0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003df2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003df8:	633b      	str	r3, [r7, #48]	; 0x30
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8003dfe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003e02:	4622      	mov	r2, r4
 8003e04:	462b      	mov	r3, r5
 8003e06:	f04f 0000 	mov.w	r0, #0
 8003e0a:	f04f 0100 	mov.w	r1, #0
 8003e0e:	0159      	lsls	r1, r3, #5
 8003e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003e14:	0150      	lsls	r0, r2, #5
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4621      	mov	r1, r4
 8003e1c:	1a51      	subs	r1, r2, r1
 8003e1e:	6139      	str	r1, [r7, #16]
 8003e20:	4629      	mov	r1, r5
 8003e22:	eb63 0301 	sbc.w	r3, r3, r1
 8003e26:	617b      	str	r3, [r7, #20]
 8003e28:	f04f 0200 	mov.w	r2, #0
 8003e2c:	f04f 0300 	mov.w	r3, #0
 8003e30:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003e34:	4659      	mov	r1, fp
 8003e36:	018b      	lsls	r3, r1, #6
 8003e38:	4651      	mov	r1, sl
 8003e3a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003e3e:	4651      	mov	r1, sl
 8003e40:	018a      	lsls	r2, r1, #6
 8003e42:	4651      	mov	r1, sl
 8003e44:	ebb2 0801 	subs.w	r8, r2, r1
 8003e48:	4659      	mov	r1, fp
 8003e4a:	eb63 0901 	sbc.w	r9, r3, r1
 8003e4e:	f04f 0200 	mov.w	r2, #0
 8003e52:	f04f 0300 	mov.w	r3, #0
 8003e56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e62:	4690      	mov	r8, r2
 8003e64:	4699      	mov	r9, r3
 8003e66:	4623      	mov	r3, r4
 8003e68:	eb18 0303 	adds.w	r3, r8, r3
 8003e6c:	60bb      	str	r3, [r7, #8]
 8003e6e:	462b      	mov	r3, r5
 8003e70:	eb49 0303 	adc.w	r3, r9, r3
 8003e74:	60fb      	str	r3, [r7, #12]
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	f04f 0300 	mov.w	r3, #0
 8003e7e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003e82:	4629      	mov	r1, r5
 8003e84:	024b      	lsls	r3, r1, #9
 8003e86:	4621      	mov	r1, r4
 8003e88:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003e8c:	4621      	mov	r1, r4
 8003e8e:	024a      	lsls	r2, r1, #9
 8003e90:	4610      	mov	r0, r2
 8003e92:	4619      	mov	r1, r3
 8003e94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e96:	2200      	movs	r2, #0
 8003e98:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003e9c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003ea0:	f7fc fa1e 	bl	80002e0 <__aeabi_uldivmod>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003eac:	e058      	b.n	8003f60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003eae:	4b38      	ldr	r3, [pc, #224]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003eb0:	685b      	ldr	r3, [r3, #4]
 8003eb2:	099b      	lsrs	r3, r3, #6
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	4611      	mov	r1, r2
 8003eba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003ebe:	623b      	str	r3, [r7, #32]
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ec4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003ec8:	4642      	mov	r2, r8
 8003eca:	464b      	mov	r3, r9
 8003ecc:	f04f 0000 	mov.w	r0, #0
 8003ed0:	f04f 0100 	mov.w	r1, #0
 8003ed4:	0159      	lsls	r1, r3, #5
 8003ed6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003eda:	0150      	lsls	r0, r2, #5
 8003edc:	4602      	mov	r2, r0
 8003ede:	460b      	mov	r3, r1
 8003ee0:	4641      	mov	r1, r8
 8003ee2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ee6:	4649      	mov	r1, r9
 8003ee8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	f04f 0300 	mov.w	r3, #0
 8003ef4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ef8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003efc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003f00:	ebb2 040a 	subs.w	r4, r2, sl
 8003f04:	eb63 050b 	sbc.w	r5, r3, fp
 8003f08:	f04f 0200 	mov.w	r2, #0
 8003f0c:	f04f 0300 	mov.w	r3, #0
 8003f10:	00eb      	lsls	r3, r5, #3
 8003f12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f16:	00e2      	lsls	r2, r4, #3
 8003f18:	4614      	mov	r4, r2
 8003f1a:	461d      	mov	r5, r3
 8003f1c:	4643      	mov	r3, r8
 8003f1e:	18e3      	adds	r3, r4, r3
 8003f20:	603b      	str	r3, [r7, #0]
 8003f22:	464b      	mov	r3, r9
 8003f24:	eb45 0303 	adc.w	r3, r5, r3
 8003f28:	607b      	str	r3, [r7, #4]
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	f04f 0300 	mov.w	r3, #0
 8003f32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003f36:	4629      	mov	r1, r5
 8003f38:	028b      	lsls	r3, r1, #10
 8003f3a:	4621      	mov	r1, r4
 8003f3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003f40:	4621      	mov	r1, r4
 8003f42:	028a      	lsls	r2, r1, #10
 8003f44:	4610      	mov	r0, r2
 8003f46:	4619      	mov	r1, r3
 8003f48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	61bb      	str	r3, [r7, #24]
 8003f4e:	61fa      	str	r2, [r7, #28]
 8003f50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003f54:	f7fc f9c4 	bl	80002e0 <__aeabi_uldivmod>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003f60:	4b0b      	ldr	r3, [pc, #44]	; (8003f90 <HAL_RCC_GetSysClockFreq+0x200>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	0c1b      	lsrs	r3, r3, #16
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	3301      	adds	r3, #1
 8003f6c:	005b      	lsls	r3, r3, #1
 8003f6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003f70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003f72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f7a:	e002      	b.n	8003f82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003f7c:	4b05      	ldr	r3, [pc, #20]	; (8003f94 <HAL_RCC_GetSysClockFreq+0x204>)
 8003f7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003f80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3750      	adds	r7, #80	; 0x50
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f8e:	bf00      	nop
 8003f90:	40023800 	.word	0x40023800
 8003f94:	00f42400 	.word	0x00f42400
 8003f98:	007a1200 	.word	0x007a1200

08003f9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fa0:	4b03      	ldr	r3, [pc, #12]	; (8003fb0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr
 8003fae:	bf00      	nop
 8003fb0:	20000000 	.word	0x20000000

08003fb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003fb8:	f7ff fff0 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	0a9b      	lsrs	r3, r3, #10
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	4903      	ldr	r1, [pc, #12]	; (8003fd8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fca:	5ccb      	ldrb	r3, [r1, r3]
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	bd80      	pop	{r7, pc}
 8003fd4:	40023800 	.word	0x40023800
 8003fd8:	0801afc4 	.word	0x0801afc4

08003fdc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003fe0:	f7ff ffdc 	bl	8003f9c <HAL_RCC_GetHCLKFreq>
 8003fe4:	4602      	mov	r2, r0
 8003fe6:	4b05      	ldr	r3, [pc, #20]	; (8003ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003fe8:	689b      	ldr	r3, [r3, #8]
 8003fea:	0b5b      	lsrs	r3, r3, #13
 8003fec:	f003 0307 	and.w	r3, r3, #7
 8003ff0:	4903      	ldr	r1, [pc, #12]	; (8004000 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ff2:	5ccb      	ldrb	r3, [r1, r3]
 8003ff4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	bd80      	pop	{r7, pc}
 8003ffc:	40023800 	.word	0x40023800
 8004000:	0801afc4 	.word	0x0801afc4

08004004 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
 800400c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	220f      	movs	r2, #15
 8004012:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004014:	4b12      	ldr	r3, [pc, #72]	; (8004060 <HAL_RCC_GetClockConfig+0x5c>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f003 0203 	and.w	r2, r3, #3
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004020:	4b0f      	ldr	r3, [pc, #60]	; (8004060 <HAL_RCC_GetClockConfig+0x5c>)
 8004022:	689b      	ldr	r3, [r3, #8]
 8004024:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800402c:	4b0c      	ldr	r3, [pc, #48]	; (8004060 <HAL_RCC_GetClockConfig+0x5c>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8004038:	4b09      	ldr	r3, [pc, #36]	; (8004060 <HAL_RCC_GetClockConfig+0x5c>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	08db      	lsrs	r3, r3, #3
 800403e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004046:	4b07      	ldr	r3, [pc, #28]	; (8004064 <HAL_RCC_GetClockConfig+0x60>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 020f 	and.w	r2, r3, #15
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	601a      	str	r2, [r3, #0]
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800
 8004064:	40023c00 	.word	0x40023c00

08004068 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004074:	2300      	movs	r3, #0
 8004076:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800407c:	2300      	movs	r3, #0
 800407e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004080:	2300      	movs	r3, #0
 8004082:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b00      	cmp	r3, #0
 800408e:	d012      	beq.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004090:	4b69      	ldr	r3, [pc, #420]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	4a68      	ldr	r2, [pc, #416]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004096:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800409a:	6093      	str	r3, [r2, #8]
 800409c:	4b66      	ldr	r3, [pc, #408]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800409e:	689a      	ldr	r2, [r3, #8]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040a4:	4964      	ldr	r1, [pc, #400]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040a6:	4313      	orrs	r3, r2
 80040a8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80040b2:	2301      	movs	r3, #1
 80040b4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d017      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80040c2:	4b5d      	ldr	r3, [pc, #372]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d0:	4959      	ldr	r1, [pc, #356]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040e0:	d101      	bne.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80040e2:	2301      	movs	r3, #1
 80040e4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80040ee:	2301      	movs	r3, #1
 80040f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d017      	beq.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040fe:	4b4e      	ldr	r3, [pc, #312]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004104:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	494a      	ldr	r1, [pc, #296]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004118:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800411c:	d101      	bne.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800411e:	2301      	movs	r3, #1
 8004120:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800412a:	2301      	movs	r3, #1
 800412c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d001      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800413a:	2301      	movs	r3, #1
 800413c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 0320 	and.w	r3, r3, #32
 8004146:	2b00      	cmp	r3, #0
 8004148:	f000 808b 	beq.w	8004262 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800414c:	4b3a      	ldr	r3, [pc, #232]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800414e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004150:	4a39      	ldr	r2, [pc, #228]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004156:	6413      	str	r3, [r2, #64]	; 0x40
 8004158:	4b37      	ldr	r3, [pc, #220]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004160:	60bb      	str	r3, [r7, #8]
 8004162:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004164:	4b35      	ldr	r3, [pc, #212]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a34      	ldr	r2, [pc, #208]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800416a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800416e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004170:	f7fd f9fe 	bl	8001570 <HAL_GetTick>
 8004174:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004176:	e008      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004178:	f7fd f9fa 	bl	8001570 <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	2b64      	cmp	r3, #100	; 0x64
 8004184:	d901      	bls.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e38f      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800418a:	4b2c      	ldr	r3, [pc, #176]	; (800423c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0f0      	beq.n	8004178 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004196:	4b28      	ldr	r3, [pc, #160]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800419a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800419e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80041a0:	693b      	ldr	r3, [r7, #16]
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d035      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d02e      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80041b4:	4b20      	ldr	r3, [pc, #128]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041bc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80041be:	4b1e      	ldr	r3, [pc, #120]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041c2:	4a1d      	ldr	r2, [pc, #116]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041c8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80041ca:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ce:	4a1a      	ldr	r2, [pc, #104]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041d4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80041d6:	4a18      	ldr	r2, [pc, #96]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80041dc:	4b16      	ldr	r3, [pc, #88]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80041de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e0:	f003 0301 	and.w	r3, r3, #1
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d114      	bne.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041e8:	f7fd f9c2 	bl	8001570 <HAL_GetTick>
 80041ec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041ee:	e00a      	b.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041f0:	f7fd f9be 	bl	8001570 <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	1ad3      	subs	r3, r2, r3
 80041fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80041fe:	4293      	cmp	r3, r2
 8004200:	d901      	bls.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004202:	2303      	movs	r3, #3
 8004204:	e351      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004206:	4b0c      	ldr	r3, [pc, #48]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0ee      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800421a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800421e:	d111      	bne.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004220:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800422c:	4b04      	ldr	r3, [pc, #16]	; (8004240 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800422e:	400b      	ands	r3, r1
 8004230:	4901      	ldr	r1, [pc, #4]	; (8004238 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004232:	4313      	orrs	r3, r2
 8004234:	608b      	str	r3, [r1, #8]
 8004236:	e00b      	b.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004238:	40023800 	.word	0x40023800
 800423c:	40007000 	.word	0x40007000
 8004240:	0ffffcff 	.word	0x0ffffcff
 8004244:	4bac      	ldr	r3, [pc, #688]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	4aab      	ldr	r2, [pc, #684]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800424a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800424e:	6093      	str	r3, [r2, #8]
 8004250:	4ba9      	ldr	r3, [pc, #676]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004252:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004258:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800425c:	49a6      	ldr	r1, [pc, #664]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800425e:	4313      	orrs	r3, r2
 8004260:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0310 	and.w	r3, r3, #16
 800426a:	2b00      	cmp	r3, #0
 800426c:	d010      	beq.n	8004290 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800426e:	4ba2      	ldr	r3, [pc, #648]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004274:	4aa0      	ldr	r2, [pc, #640]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004276:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800427a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800427e:	4b9e      	ldr	r3, [pc, #632]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004280:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004288:	499b      	ldr	r1, [pc, #620]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800428a:	4313      	orrs	r3, r2
 800428c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00a      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800429c:	4b96      	ldr	r3, [pc, #600]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800429e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042a2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042aa:	4993      	ldr	r1, [pc, #588]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d00a      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80042be:	4b8e      	ldr	r3, [pc, #568]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80042cc:	498a      	ldr	r1, [pc, #552]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ce:	4313      	orrs	r3, r2
 80042d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00a      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042e0:	4b85      	ldr	r3, [pc, #532]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042ee:	4982      	ldr	r1, [pc, #520]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042f0:	4313      	orrs	r3, r2
 80042f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00a      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004302:	4b7d      	ldr	r3, [pc, #500]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004308:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004310:	4979      	ldr	r1, [pc, #484]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004312:	4313      	orrs	r3, r2
 8004314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004320:	2b00      	cmp	r3, #0
 8004322:	d00a      	beq.n	800433a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004324:	4b74      	ldr	r3, [pc, #464]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800432a:	f023 0203 	bic.w	r2, r3, #3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004332:	4971      	ldr	r1, [pc, #452]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004334:	4313      	orrs	r3, r2
 8004336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004342:	2b00      	cmp	r3, #0
 8004344:	d00a      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004346:	4b6c      	ldr	r3, [pc, #432]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800434c:	f023 020c 	bic.w	r2, r3, #12
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004354:	4968      	ldr	r1, [pc, #416]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004356:	4313      	orrs	r3, r2
 8004358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004364:	2b00      	cmp	r3, #0
 8004366:	d00a      	beq.n	800437e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004368:	4b63      	ldr	r3, [pc, #396]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800436a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800436e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004376:	4960      	ldr	r1, [pc, #384]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004378:	4313      	orrs	r3, r2
 800437a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800438a:	4b5b      	ldr	r3, [pc, #364]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800438c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004390:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004398:	4957      	ldr	r1, [pc, #348]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800439a:	4313      	orrs	r3, r2
 800439c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80043ac:	4b52      	ldr	r3, [pc, #328]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043ba:	494f      	ldr	r1, [pc, #316]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043bc:	4313      	orrs	r3, r2
 80043be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80043ce:	4b4a      	ldr	r3, [pc, #296]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043d4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043dc:	4946      	ldr	r1, [pc, #280]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043de:	4313      	orrs	r3, r2
 80043e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d00a      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80043f0:	4b41      	ldr	r3, [pc, #260]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80043f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043fe:	493e      	ldr	r1, [pc, #248]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004400:	4313      	orrs	r3, r2
 8004402:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00a      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004412:	4b39      	ldr	r3, [pc, #228]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004414:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004418:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004420:	4935      	ldr	r1, [pc, #212]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004422:	4313      	orrs	r3, r2
 8004424:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004434:	4b30      	ldr	r3, [pc, #192]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800443a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004442:	492d      	ldr	r1, [pc, #180]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004444:	4313      	orrs	r3, r2
 8004446:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d011      	beq.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004456:	4b28      	ldr	r3, [pc, #160]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800445c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004464:	4924      	ldr	r1, [pc, #144]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004466:	4313      	orrs	r3, r2
 8004468:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004470:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004474:	d101      	bne.n	800447a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004476:	2301      	movs	r3, #1
 8004478:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004486:	2301      	movs	r3, #1
 8004488:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d00a      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004496:	4b18      	ldr	r3, [pc, #96]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800449c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80044a4:	4914      	ldr	r1, [pc, #80]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044a6:	4313      	orrs	r3, r2
 80044a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d00b      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80044b8:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044c8:	490b      	ldr	r1, [pc, #44]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d00f      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80044dc:	4b06      	ldr	r3, [pc, #24]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044e2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ec:	4902      	ldr	r1, [pc, #8]	; (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80044f4:	e002      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x494>
 80044f6:	bf00      	nop
 80044f8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d00b      	beq.n	8004520 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004508:	4b8a      	ldr	r3, [pc, #552]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800450a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800450e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004518:	4986      	ldr	r1, [pc, #536]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800451a:	4313      	orrs	r3, r2
 800451c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d00b      	beq.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800452c:	4b81      	ldr	r3, [pc, #516]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800452e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004532:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800453c:	497d      	ldr	r1, [pc, #500]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800453e:	4313      	orrs	r3, r2
 8004540:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004544:	69fb      	ldr	r3, [r7, #28]
 8004546:	2b01      	cmp	r3, #1
 8004548:	d006      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004552:	2b00      	cmp	r3, #0
 8004554:	f000 80d6 	beq.w	8004704 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004558:	4b76      	ldr	r3, [pc, #472]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a75      	ldr	r2, [pc, #468]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800455e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004562:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004564:	f7fd f804 	bl	8001570 <HAL_GetTick>
 8004568:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800456a:	e008      	b.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800456c:	f7fd f800 	bl	8001570 <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b64      	cmp	r3, #100	; 0x64
 8004578:	d901      	bls.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e195      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800457e:	4b6d      	ldr	r3, [pc, #436]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d1f0      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d021      	beq.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800459a:	2b00      	cmp	r3, #0
 800459c:	d11d      	bne.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800459e:	4b65      	ldr	r3, [pc, #404]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045a4:	0c1b      	lsrs	r3, r3, #16
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80045ac:	4b61      	ldr	r3, [pc, #388]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045b2:	0e1b      	lsrs	r3, r3, #24
 80045b4:	f003 030f 	and.w	r3, r3, #15
 80045b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	019a      	lsls	r2, r3, #6
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	041b      	lsls	r3, r3, #16
 80045c4:	431a      	orrs	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	061b      	lsls	r3, r3, #24
 80045ca:	431a      	orrs	r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	071b      	lsls	r3, r3, #28
 80045d2:	4958      	ldr	r1, [pc, #352]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d004      	beq.n	80045f0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ee:	d00a      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d02e      	beq.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004604:	d129      	bne.n	800465a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004606:	4b4b      	ldr	r3, [pc, #300]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004608:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800460c:	0c1b      	lsrs	r3, r3, #16
 800460e:	f003 0303 	and.w	r3, r3, #3
 8004612:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004614:	4b47      	ldr	r3, [pc, #284]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004616:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800461a:	0f1b      	lsrs	r3, r3, #28
 800461c:	f003 0307 	and.w	r3, r3, #7
 8004620:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	019a      	lsls	r2, r3, #6
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	041b      	lsls	r3, r3, #16
 800462c:	431a      	orrs	r2, r3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	061b      	lsls	r3, r3, #24
 8004634:	431a      	orrs	r2, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	071b      	lsls	r3, r3, #28
 800463a:	493e      	ldr	r1, [pc, #248]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800463c:	4313      	orrs	r3, r2
 800463e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004642:	4b3c      	ldr	r3, [pc, #240]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004648:	f023 021f 	bic.w	r2, r3, #31
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	3b01      	subs	r3, #1
 8004652:	4938      	ldr	r1, [pc, #224]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004654:	4313      	orrs	r3, r2
 8004656:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004662:	2b00      	cmp	r3, #0
 8004664:	d01d      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004666:	4b33      	ldr	r3, [pc, #204]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004668:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800466c:	0e1b      	lsrs	r3, r3, #24
 800466e:	f003 030f 	and.w	r3, r3, #15
 8004672:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004674:	4b2f      	ldr	r3, [pc, #188]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004676:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800467a:	0f1b      	lsrs	r3, r3, #28
 800467c:	f003 0307 	and.w	r3, r3, #7
 8004680:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	019a      	lsls	r2, r3, #6
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	041b      	lsls	r3, r3, #16
 800468e:	431a      	orrs	r2, r3
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	061b      	lsls	r3, r3, #24
 8004694:	431a      	orrs	r2, r3
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	071b      	lsls	r3, r3, #28
 800469a:	4926      	ldr	r1, [pc, #152]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d011      	beq.n	80046d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	019a      	lsls	r2, r3, #6
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	041b      	lsls	r3, r3, #16
 80046ba:	431a      	orrs	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	061b      	lsls	r3, r3, #24
 80046c2:	431a      	orrs	r2, r3
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	689b      	ldr	r3, [r3, #8]
 80046c8:	071b      	lsls	r3, r3, #28
 80046ca:	491a      	ldr	r1, [pc, #104]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046cc:	4313      	orrs	r3, r2
 80046ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80046d2:	4b18      	ldr	r3, [pc, #96]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a17      	ldr	r2, [pc, #92]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046de:	f7fc ff47 	bl	8001570 <HAL_GetTick>
 80046e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046e4:	e008      	b.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80046e6:	f7fc ff43 	bl	8001570 <HAL_GetTick>
 80046ea:	4602      	mov	r2, r0
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	2b64      	cmp	r3, #100	; 0x64
 80046f2:	d901      	bls.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046f4:	2303      	movs	r3, #3
 80046f6:	e0d8      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80046f8:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d0f0      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	2b01      	cmp	r3, #1
 8004708:	f040 80ce 	bne.w	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800470c:	4b09      	ldr	r3, [pc, #36]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a08      	ldr	r2, [pc, #32]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004712:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004716:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004718:	f7fc ff2a 	bl	8001570 <HAL_GetTick>
 800471c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800471e:	e00b      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004720:	f7fc ff26 	bl	8001570 <HAL_GetTick>
 8004724:	4602      	mov	r2, r0
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	1ad3      	subs	r3, r2, r3
 800472a:	2b64      	cmp	r3, #100	; 0x64
 800472c:	d904      	bls.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800472e:	2303      	movs	r3, #3
 8004730:	e0bb      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004732:	bf00      	nop
 8004734:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004738:	4b5e      	ldr	r3, [pc, #376]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004740:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004744:	d0ec      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d003      	beq.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004756:	2b00      	cmp	r3, #0
 8004758:	d009      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004762:	2b00      	cmp	r3, #0
 8004764:	d02e      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476a:	2b00      	cmp	r3, #0
 800476c:	d12a      	bne.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800476e:	4b51      	ldr	r3, [pc, #324]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004774:	0c1b      	lsrs	r3, r3, #16
 8004776:	f003 0303 	and.w	r3, r3, #3
 800477a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800477c:	4b4d      	ldr	r3, [pc, #308]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800477e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004782:	0f1b      	lsrs	r3, r3, #28
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	019a      	lsls	r2, r3, #6
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	041b      	lsls	r3, r3, #16
 8004794:	431a      	orrs	r2, r3
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	699b      	ldr	r3, [r3, #24]
 800479a:	061b      	lsls	r3, r3, #24
 800479c:	431a      	orrs	r2, r3
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	071b      	lsls	r3, r3, #28
 80047a2:	4944      	ldr	r1, [pc, #272]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047a4:	4313      	orrs	r3, r2
 80047a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80047aa:	4b42      	ldr	r3, [pc, #264]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b8:	3b01      	subs	r3, #1
 80047ba:	021b      	lsls	r3, r3, #8
 80047bc:	493d      	ldr	r1, [pc, #244]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d022      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047d8:	d11d      	bne.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80047da:	4b36      	ldr	r3, [pc, #216]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047e0:	0e1b      	lsrs	r3, r3, #24
 80047e2:	f003 030f 	and.w	r3, r3, #15
 80047e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80047e8:	4b32      	ldr	r3, [pc, #200]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047ee:	0f1b      	lsrs	r3, r3, #28
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	019a      	lsls	r2, r3, #6
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	041b      	lsls	r3, r3, #16
 8004802:	431a      	orrs	r2, r3
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	061b      	lsls	r3, r3, #24
 8004808:	431a      	orrs	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	071b      	lsls	r3, r3, #28
 800480e:	4929      	ldr	r1, [pc, #164]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004810:	4313      	orrs	r3, r2
 8004812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d028      	beq.n	8004874 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004822:	4b24      	ldr	r3, [pc, #144]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	0e1b      	lsrs	r3, r3, #24
 800482a:	f003 030f 	and.w	r3, r3, #15
 800482e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004830:	4b20      	ldr	r3, [pc, #128]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004836:	0c1b      	lsrs	r3, r3, #16
 8004838:	f003 0303 	and.w	r3, r3, #3
 800483c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	019a      	lsls	r2, r3, #6
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	041b      	lsls	r3, r3, #16
 8004848:	431a      	orrs	r2, r3
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	061b      	lsls	r3, r3, #24
 800484e:	431a      	orrs	r2, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	69db      	ldr	r3, [r3, #28]
 8004854:	071b      	lsls	r3, r3, #28
 8004856:	4917      	ldr	r1, [pc, #92]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004858:	4313      	orrs	r3, r2
 800485a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800485e:	4b15      	ldr	r3, [pc, #84]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004860:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004864:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800486c:	4911      	ldr	r1, [pc, #68]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800486e:	4313      	orrs	r3, r2
 8004870:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004874:	4b0f      	ldr	r3, [pc, #60]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	4a0e      	ldr	r2, [pc, #56]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800487a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800487e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004880:	f7fc fe76 	bl	8001570 <HAL_GetTick>
 8004884:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004886:	e008      	b.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004888:	f7fc fe72 	bl	8001570 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	2b64      	cmp	r3, #100	; 0x64
 8004894:	d901      	bls.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e007      	b.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800489a:	4b06      	ldr	r3, [pc, #24]	; (80048b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048a6:	d1ef      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80048a8:	2300      	movs	r3, #0
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3720      	adds	r7, #32
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
 80048b2:	bf00      	nop
 80048b4:	40023800 	.word	0x40023800

080048b8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b084      	sub	sp, #16
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d101      	bne.n	80048ca <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e09d      	b.n	8004a06 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d108      	bne.n	80048e4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048da:	d009      	beq.n	80048f0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	61da      	str	r2, [r3, #28]
 80048e2:	e005      	b.n	80048f0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d106      	bne.n	8004910 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800490a:	6878      	ldr	r0, [r7, #4]
 800490c:	f7fc fa18 	bl	8000d40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2202      	movs	r2, #2
 8004914:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	681a      	ldr	r2, [r3, #0]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004926:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004930:	d902      	bls.n	8004938 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004932:	2300      	movs	r3, #0
 8004934:	60fb      	str	r3, [r7, #12]
 8004936:	e002      	b.n	800493e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004938:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800493c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004946:	d007      	beq.n	8004958 <HAL_SPI_Init+0xa0>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68db      	ldr	r3, [r3, #12]
 800494c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004950:	d002      	beq.n	8004958 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004968:	431a      	orrs	r2, r3
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	695b      	ldr	r3, [r3, #20]
 8004978:	f003 0301 	and.w	r3, r3, #1
 800497c:	431a      	orrs	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	699b      	ldr	r3, [r3, #24]
 8004982:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	69db      	ldr	r3, [r3, #28]
 800498c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004990:	431a      	orrs	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a1b      	ldr	r3, [r3, #32]
 8004996:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800499a:	ea42 0103 	orr.w	r1, r2, r3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	430a      	orrs	r2, r1
 80049ac:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	699b      	ldr	r3, [r3, #24]
 80049b2:	0c1b      	lsrs	r3, r3, #16
 80049b4:	f003 0204 	and.w	r2, r3, #4
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049bc:	f003 0310 	and.w	r3, r3, #16
 80049c0:	431a      	orrs	r2, r3
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049c6:	f003 0308 	and.w	r3, r3, #8
 80049ca:	431a      	orrs	r2, r3
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049d4:	ea42 0103 	orr.w	r1, r2, r3
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	430a      	orrs	r2, r1
 80049e4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	69da      	ldr	r2, [r3, #28]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049f4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}

08004a0e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b082      	sub	sp, #8
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d101      	bne.n	8004a20 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004a1c:	2301      	movs	r3, #1
 8004a1e:	e049      	b.n	8004ab4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d106      	bne.n	8004a3a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a34:	6878      	ldr	r0, [r7, #4]
 8004a36:	f000 f841 	bl	8004abc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2202      	movs	r2, #2
 8004a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3304      	adds	r3, #4
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	f000 f9ff 	bl	8004e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2201      	movs	r2, #1
 8004a56:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	2201      	movs	r2, #1
 8004a66:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2201      	movs	r2, #1
 8004a86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2201      	movs	r2, #1
 8004a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ab2:	2300      	movs	r3, #0
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3708      	adds	r7, #8
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ade:	b2db      	uxtb	r3, r3
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d001      	beq.n	8004ae8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e054      	b.n	8004b92 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2202      	movs	r2, #2
 8004aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	68da      	ldr	r2, [r3, #12]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f042 0201 	orr.w	r2, r2, #1
 8004afe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a26      	ldr	r2, [pc, #152]	; (8004ba0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d022      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x80>
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b12:	d01d      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x80>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a22      	ldr	r2, [pc, #136]	; (8004ba4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d018      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x80>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a21      	ldr	r2, [pc, #132]	; (8004ba8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d013      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x80>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a1f      	ldr	r2, [pc, #124]	; (8004bac <HAL_TIM_Base_Start_IT+0xdc>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d00e      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x80>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a1e      	ldr	r2, [pc, #120]	; (8004bb0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d009      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x80>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1c      	ldr	r2, [pc, #112]	; (8004bb4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d004      	beq.n	8004b50 <HAL_TIM_Base_Start_IT+0x80>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a1b      	ldr	r2, [pc, #108]	; (8004bb8 <HAL_TIM_Base_Start_IT+0xe8>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d115      	bne.n	8004b7c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	689a      	ldr	r2, [r3, #8]
 8004b56:	4b19      	ldr	r3, [pc, #100]	; (8004bbc <HAL_TIM_Base_Start_IT+0xec>)
 8004b58:	4013      	ands	r3, r2
 8004b5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2b06      	cmp	r3, #6
 8004b60:	d015      	beq.n	8004b8e <HAL_TIM_Base_Start_IT+0xbe>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b68:	d011      	beq.n	8004b8e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f042 0201 	orr.w	r2, r2, #1
 8004b78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b7a:	e008      	b.n	8004b8e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	681a      	ldr	r2, [r3, #0]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0201 	orr.w	r2, r2, #1
 8004b8a:	601a      	str	r2, [r3, #0]
 8004b8c:	e000      	b.n	8004b90 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b8e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9c:	4770      	bx	lr
 8004b9e:	bf00      	nop
 8004ba0:	40010000 	.word	0x40010000
 8004ba4:	40000400 	.word	0x40000400
 8004ba8:	40000800 	.word	0x40000800
 8004bac:	40000c00 	.word	0x40000c00
 8004bb0:	40010400 	.word	0x40010400
 8004bb4:	40014000 	.word	0x40014000
 8004bb8:	40001800 	.word	0x40001800
 8004bbc:	00010007 	.word	0x00010007

08004bc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0302 	and.w	r3, r3, #2
 8004bd2:	2b02      	cmp	r3, #2
 8004bd4:	d122      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	2b02      	cmp	r3, #2
 8004be2:	d11b      	bne.n	8004c1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0202 	mvn.w	r2, #2
 8004bec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	f003 0303 	and.w	r3, r3, #3
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f905 	bl	8004e12 <HAL_TIM_IC_CaptureCallback>
 8004c08:	e005      	b.n	8004c16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f8f7 	bl	8004dfe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f908 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0304 	and.w	r3, r3, #4
 8004c26:	2b04      	cmp	r3, #4
 8004c28:	d122      	bne.n	8004c70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0304 	and.w	r3, r3, #4
 8004c34:	2b04      	cmp	r3, #4
 8004c36:	d11b      	bne.n	8004c70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0204 	mvn.w	r2, #4
 8004c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2202      	movs	r2, #2
 8004c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f8db 	bl	8004e12 <HAL_TIM_IC_CaptureCallback>
 8004c5c:	e005      	b.n	8004c6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f8cd 	bl	8004dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f8de 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0308 	and.w	r3, r3, #8
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d122      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0308 	and.w	r3, r3, #8
 8004c88:	2b08      	cmp	r3, #8
 8004c8a:	d11b      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0208 	mvn.w	r2, #8
 8004c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2204      	movs	r2, #4
 8004c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f003 0303 	and.w	r3, r3, #3
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f8b1 	bl	8004e12 <HAL_TIM_IC_CaptureCallback>
 8004cb0:	e005      	b.n	8004cbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f8a3 	bl	8004dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f8b4 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0310 	and.w	r3, r3, #16
 8004cce:	2b10      	cmp	r3, #16
 8004cd0:	d122      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	2b10      	cmp	r3, #16
 8004cde:	d11b      	bne.n	8004d18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0210 	mvn.w	r2, #16
 8004ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2208      	movs	r2, #8
 8004cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	69db      	ldr	r3, [r3, #28]
 8004cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f887 	bl	8004e12 <HAL_TIM_IC_CaptureCallback>
 8004d04:	e005      	b.n	8004d12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f879 	bl	8004dfe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f88a 	bl	8004e26 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2200      	movs	r2, #0
 8004d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0301 	and.w	r3, r3, #1
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d10e      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68db      	ldr	r3, [r3, #12]
 8004d2c:	f003 0301 	and.w	r3, r3, #1
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d107      	bne.n	8004d44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f06f 0201 	mvn.w	r2, #1
 8004d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fb ff1a 	bl	8000b78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4e:	2b80      	cmp	r3, #128	; 0x80
 8004d50:	d10e      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d5c:	2b80      	cmp	r3, #128	; 0x80
 8004d5e:	d107      	bne.n	8004d70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 f91a 	bl	8004fa4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d7e:	d10e      	bne.n	8004d9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d8a:	2b80      	cmp	r3, #128	; 0x80
 8004d8c:	d107      	bne.n	8004d9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 f90d 	bl	8004fb8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004da8:	2b40      	cmp	r3, #64	; 0x40
 8004daa:	d10e      	bne.n	8004dca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	68db      	ldr	r3, [r3, #12]
 8004db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db6:	2b40      	cmp	r3, #64	; 0x40
 8004db8:	d107      	bne.n	8004dca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f838 	bl	8004e3a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	691b      	ldr	r3, [r3, #16]
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b20      	cmp	r3, #32
 8004dd6:	d10e      	bne.n	8004df6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68db      	ldr	r3, [r3, #12]
 8004dde:	f003 0320 	and.w	r3, r3, #32
 8004de2:	2b20      	cmp	r3, #32
 8004de4:	d107      	bne.n	8004df6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f06f 0220 	mvn.w	r2, #32
 8004dee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f000 f8cd 	bl	8004f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004df6:	bf00      	nop
 8004df8:	3708      	adds	r7, #8
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}

08004dfe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b083      	sub	sp, #12
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e1a:	bf00      	nop
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e26:	b480      	push	{r7}
 8004e28:	b083      	sub	sp, #12
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e2e:	bf00      	nop
 8004e30:	370c      	adds	r7, #12
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
	...

08004e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b085      	sub	sp, #20
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	4a40      	ldr	r2, [pc, #256]	; (8004f64 <TIM_Base_SetConfig+0x114>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d013      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e6e:	d00f      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	4a3d      	ldr	r2, [pc, #244]	; (8004f68 <TIM_Base_SetConfig+0x118>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d00b      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	4a3c      	ldr	r2, [pc, #240]	; (8004f6c <TIM_Base_SetConfig+0x11c>)
 8004e7c:	4293      	cmp	r3, r2
 8004e7e:	d007      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	4a3b      	ldr	r2, [pc, #236]	; (8004f70 <TIM_Base_SetConfig+0x120>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d003      	beq.n	8004e90 <TIM_Base_SetConfig+0x40>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a3a      	ldr	r2, [pc, #232]	; (8004f74 <TIM_Base_SetConfig+0x124>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d108      	bne.n	8004ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	68fa      	ldr	r2, [r7, #12]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	4a2f      	ldr	r2, [pc, #188]	; (8004f64 <TIM_Base_SetConfig+0x114>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d02b      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb0:	d027      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	4a2c      	ldr	r2, [pc, #176]	; (8004f68 <TIM_Base_SetConfig+0x118>)
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d023      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	4a2b      	ldr	r2, [pc, #172]	; (8004f6c <TIM_Base_SetConfig+0x11c>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d01f      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	4a2a      	ldr	r2, [pc, #168]	; (8004f70 <TIM_Base_SetConfig+0x120>)
 8004ec6:	4293      	cmp	r3, r2
 8004ec8:	d01b      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	4a29      	ldr	r2, [pc, #164]	; (8004f74 <TIM_Base_SetConfig+0x124>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d017      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a28      	ldr	r2, [pc, #160]	; (8004f78 <TIM_Base_SetConfig+0x128>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d013      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a27      	ldr	r2, [pc, #156]	; (8004f7c <TIM_Base_SetConfig+0x12c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d00f      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a26      	ldr	r2, [pc, #152]	; (8004f80 <TIM_Base_SetConfig+0x130>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00b      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a25      	ldr	r2, [pc, #148]	; (8004f84 <TIM_Base_SetConfig+0x134>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d007      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a24      	ldr	r2, [pc, #144]	; (8004f88 <TIM_Base_SetConfig+0x138>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d003      	beq.n	8004f02 <TIM_Base_SetConfig+0xb2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a23      	ldr	r2, [pc, #140]	; (8004f8c <TIM_Base_SetConfig+0x13c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d108      	bne.n	8004f14 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	68db      	ldr	r3, [r3, #12]
 8004f0e:	68fa      	ldr	r2, [r7, #12]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	68fa      	ldr	r2, [r7, #12]
 8004f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	689a      	ldr	r2, [r3, #8]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	681a      	ldr	r2, [r3, #0]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a0a      	ldr	r2, [pc, #40]	; (8004f64 <TIM_Base_SetConfig+0x114>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d003      	beq.n	8004f48 <TIM_Base_SetConfig+0xf8>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a0c      	ldr	r2, [pc, #48]	; (8004f74 <TIM_Base_SetConfig+0x124>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d103      	bne.n	8004f50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	691a      	ldr	r2, [r3, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2201      	movs	r2, #1
 8004f54:	615a      	str	r2, [r3, #20]
}
 8004f56:	bf00      	nop
 8004f58:	3714      	adds	r7, #20
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	40010000 	.word	0x40010000
 8004f68:	40000400 	.word	0x40000400
 8004f6c:	40000800 	.word	0x40000800
 8004f70:	40000c00 	.word	0x40000c00
 8004f74:	40010400 	.word	0x40010400
 8004f78:	40014000 	.word	0x40014000
 8004f7c:	40014400 	.word	0x40014400
 8004f80:	40014800 	.word	0x40014800
 8004f84:	40001800 	.word	0x40001800
 8004f88:	40001c00 	.word	0x40001c00
 8004f8c:	40002000 	.word	0x40002000

08004f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b083      	sub	sp, #12
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004fac:	bf00      	nop
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr

08004fcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b082      	sub	sp, #8
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	e040      	b.n	8005060 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fb ff08 	bl	8000e04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2224      	movs	r2, #36	; 0x24
 8004ff8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0201 	bic.w	r2, r2, #1
 8005008:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f82c 	bl	8005068 <UART_SetConfig>
 8005010:	4603      	mov	r3, r0
 8005012:	2b01      	cmp	r3, #1
 8005014:	d101      	bne.n	800501a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e022      	b.n	8005060 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501e:	2b00      	cmp	r3, #0
 8005020:	d002      	beq.n	8005028 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f000 fa84 	bl	8005530 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	685a      	ldr	r2, [r3, #4]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	689a      	ldr	r2, [r3, #8]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f042 0201 	orr.w	r2, r2, #1
 8005056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005058:	6878      	ldr	r0, [r7, #4]
 800505a:	f000 fb0b 	bl	8005674 <UART_CheckIdleState>
 800505e:	4603      	mov	r3, r0
}
 8005060:	4618      	mov	r0, r3
 8005062:	3708      	adds	r7, #8
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}

08005068 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b088      	sub	sp, #32
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005070:	2300      	movs	r3, #0
 8005072:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	695b      	ldr	r3, [r3, #20]
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	69db      	ldr	r3, [r3, #28]
 8005088:	4313      	orrs	r3, r2
 800508a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	4ba6      	ldr	r3, [pc, #664]	; (800532c <UART_SetConfig+0x2c4>)
 8005094:	4013      	ands	r3, r2
 8005096:	687a      	ldr	r2, [r7, #4]
 8005098:	6812      	ldr	r2, [r2, #0]
 800509a:	6979      	ldr	r1, [r7, #20]
 800509c:	430b      	orrs	r3, r1
 800509e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68da      	ldr	r2, [r3, #12]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	430a      	orrs	r2, r1
 80050b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	697a      	ldr	r2, [r7, #20]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	430a      	orrs	r2, r1
 80050d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a94      	ldr	r2, [pc, #592]	; (8005330 <UART_SetConfig+0x2c8>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d120      	bne.n	8005126 <UART_SetConfig+0xbe>
 80050e4:	4b93      	ldr	r3, [pc, #588]	; (8005334 <UART_SetConfig+0x2cc>)
 80050e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ea:	f003 0303 	and.w	r3, r3, #3
 80050ee:	2b03      	cmp	r3, #3
 80050f0:	d816      	bhi.n	8005120 <UART_SetConfig+0xb8>
 80050f2:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <UART_SetConfig+0x90>)
 80050f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f8:	08005109 	.word	0x08005109
 80050fc:	08005115 	.word	0x08005115
 8005100:	0800510f 	.word	0x0800510f
 8005104:	0800511b 	.word	0x0800511b
 8005108:	2301      	movs	r3, #1
 800510a:	77fb      	strb	r3, [r7, #31]
 800510c:	e150      	b.n	80053b0 <UART_SetConfig+0x348>
 800510e:	2302      	movs	r3, #2
 8005110:	77fb      	strb	r3, [r7, #31]
 8005112:	e14d      	b.n	80053b0 <UART_SetConfig+0x348>
 8005114:	2304      	movs	r3, #4
 8005116:	77fb      	strb	r3, [r7, #31]
 8005118:	e14a      	b.n	80053b0 <UART_SetConfig+0x348>
 800511a:	2308      	movs	r3, #8
 800511c:	77fb      	strb	r3, [r7, #31]
 800511e:	e147      	b.n	80053b0 <UART_SetConfig+0x348>
 8005120:	2310      	movs	r3, #16
 8005122:	77fb      	strb	r3, [r7, #31]
 8005124:	e144      	b.n	80053b0 <UART_SetConfig+0x348>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a83      	ldr	r2, [pc, #524]	; (8005338 <UART_SetConfig+0x2d0>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d132      	bne.n	8005196 <UART_SetConfig+0x12e>
 8005130:	4b80      	ldr	r3, [pc, #512]	; (8005334 <UART_SetConfig+0x2cc>)
 8005132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005136:	f003 030c 	and.w	r3, r3, #12
 800513a:	2b0c      	cmp	r3, #12
 800513c:	d828      	bhi.n	8005190 <UART_SetConfig+0x128>
 800513e:	a201      	add	r2, pc, #4	; (adr r2, 8005144 <UART_SetConfig+0xdc>)
 8005140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005144:	08005179 	.word	0x08005179
 8005148:	08005191 	.word	0x08005191
 800514c:	08005191 	.word	0x08005191
 8005150:	08005191 	.word	0x08005191
 8005154:	08005185 	.word	0x08005185
 8005158:	08005191 	.word	0x08005191
 800515c:	08005191 	.word	0x08005191
 8005160:	08005191 	.word	0x08005191
 8005164:	0800517f 	.word	0x0800517f
 8005168:	08005191 	.word	0x08005191
 800516c:	08005191 	.word	0x08005191
 8005170:	08005191 	.word	0x08005191
 8005174:	0800518b 	.word	0x0800518b
 8005178:	2300      	movs	r3, #0
 800517a:	77fb      	strb	r3, [r7, #31]
 800517c:	e118      	b.n	80053b0 <UART_SetConfig+0x348>
 800517e:	2302      	movs	r3, #2
 8005180:	77fb      	strb	r3, [r7, #31]
 8005182:	e115      	b.n	80053b0 <UART_SetConfig+0x348>
 8005184:	2304      	movs	r3, #4
 8005186:	77fb      	strb	r3, [r7, #31]
 8005188:	e112      	b.n	80053b0 <UART_SetConfig+0x348>
 800518a:	2308      	movs	r3, #8
 800518c:	77fb      	strb	r3, [r7, #31]
 800518e:	e10f      	b.n	80053b0 <UART_SetConfig+0x348>
 8005190:	2310      	movs	r3, #16
 8005192:	77fb      	strb	r3, [r7, #31]
 8005194:	e10c      	b.n	80053b0 <UART_SetConfig+0x348>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a68      	ldr	r2, [pc, #416]	; (800533c <UART_SetConfig+0x2d4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d120      	bne.n	80051e2 <UART_SetConfig+0x17a>
 80051a0:	4b64      	ldr	r3, [pc, #400]	; (8005334 <UART_SetConfig+0x2cc>)
 80051a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80051aa:	2b30      	cmp	r3, #48	; 0x30
 80051ac:	d013      	beq.n	80051d6 <UART_SetConfig+0x16e>
 80051ae:	2b30      	cmp	r3, #48	; 0x30
 80051b0:	d814      	bhi.n	80051dc <UART_SetConfig+0x174>
 80051b2:	2b20      	cmp	r3, #32
 80051b4:	d009      	beq.n	80051ca <UART_SetConfig+0x162>
 80051b6:	2b20      	cmp	r3, #32
 80051b8:	d810      	bhi.n	80051dc <UART_SetConfig+0x174>
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d002      	beq.n	80051c4 <UART_SetConfig+0x15c>
 80051be:	2b10      	cmp	r3, #16
 80051c0:	d006      	beq.n	80051d0 <UART_SetConfig+0x168>
 80051c2:	e00b      	b.n	80051dc <UART_SetConfig+0x174>
 80051c4:	2300      	movs	r3, #0
 80051c6:	77fb      	strb	r3, [r7, #31]
 80051c8:	e0f2      	b.n	80053b0 <UART_SetConfig+0x348>
 80051ca:	2302      	movs	r3, #2
 80051cc:	77fb      	strb	r3, [r7, #31]
 80051ce:	e0ef      	b.n	80053b0 <UART_SetConfig+0x348>
 80051d0:	2304      	movs	r3, #4
 80051d2:	77fb      	strb	r3, [r7, #31]
 80051d4:	e0ec      	b.n	80053b0 <UART_SetConfig+0x348>
 80051d6:	2308      	movs	r3, #8
 80051d8:	77fb      	strb	r3, [r7, #31]
 80051da:	e0e9      	b.n	80053b0 <UART_SetConfig+0x348>
 80051dc:	2310      	movs	r3, #16
 80051de:	77fb      	strb	r3, [r7, #31]
 80051e0:	e0e6      	b.n	80053b0 <UART_SetConfig+0x348>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4a56      	ldr	r2, [pc, #344]	; (8005340 <UART_SetConfig+0x2d8>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d120      	bne.n	800522e <UART_SetConfig+0x1c6>
 80051ec:	4b51      	ldr	r3, [pc, #324]	; (8005334 <UART_SetConfig+0x2cc>)
 80051ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80051f6:	2bc0      	cmp	r3, #192	; 0xc0
 80051f8:	d013      	beq.n	8005222 <UART_SetConfig+0x1ba>
 80051fa:	2bc0      	cmp	r3, #192	; 0xc0
 80051fc:	d814      	bhi.n	8005228 <UART_SetConfig+0x1c0>
 80051fe:	2b80      	cmp	r3, #128	; 0x80
 8005200:	d009      	beq.n	8005216 <UART_SetConfig+0x1ae>
 8005202:	2b80      	cmp	r3, #128	; 0x80
 8005204:	d810      	bhi.n	8005228 <UART_SetConfig+0x1c0>
 8005206:	2b00      	cmp	r3, #0
 8005208:	d002      	beq.n	8005210 <UART_SetConfig+0x1a8>
 800520a:	2b40      	cmp	r3, #64	; 0x40
 800520c:	d006      	beq.n	800521c <UART_SetConfig+0x1b4>
 800520e:	e00b      	b.n	8005228 <UART_SetConfig+0x1c0>
 8005210:	2300      	movs	r3, #0
 8005212:	77fb      	strb	r3, [r7, #31]
 8005214:	e0cc      	b.n	80053b0 <UART_SetConfig+0x348>
 8005216:	2302      	movs	r3, #2
 8005218:	77fb      	strb	r3, [r7, #31]
 800521a:	e0c9      	b.n	80053b0 <UART_SetConfig+0x348>
 800521c:	2304      	movs	r3, #4
 800521e:	77fb      	strb	r3, [r7, #31]
 8005220:	e0c6      	b.n	80053b0 <UART_SetConfig+0x348>
 8005222:	2308      	movs	r3, #8
 8005224:	77fb      	strb	r3, [r7, #31]
 8005226:	e0c3      	b.n	80053b0 <UART_SetConfig+0x348>
 8005228:	2310      	movs	r3, #16
 800522a:	77fb      	strb	r3, [r7, #31]
 800522c:	e0c0      	b.n	80053b0 <UART_SetConfig+0x348>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	4a44      	ldr	r2, [pc, #272]	; (8005344 <UART_SetConfig+0x2dc>)
 8005234:	4293      	cmp	r3, r2
 8005236:	d125      	bne.n	8005284 <UART_SetConfig+0x21c>
 8005238:	4b3e      	ldr	r3, [pc, #248]	; (8005334 <UART_SetConfig+0x2cc>)
 800523a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800523e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005246:	d017      	beq.n	8005278 <UART_SetConfig+0x210>
 8005248:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800524c:	d817      	bhi.n	800527e <UART_SetConfig+0x216>
 800524e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005252:	d00b      	beq.n	800526c <UART_SetConfig+0x204>
 8005254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005258:	d811      	bhi.n	800527e <UART_SetConfig+0x216>
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <UART_SetConfig+0x1fe>
 800525e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005262:	d006      	beq.n	8005272 <UART_SetConfig+0x20a>
 8005264:	e00b      	b.n	800527e <UART_SetConfig+0x216>
 8005266:	2300      	movs	r3, #0
 8005268:	77fb      	strb	r3, [r7, #31]
 800526a:	e0a1      	b.n	80053b0 <UART_SetConfig+0x348>
 800526c:	2302      	movs	r3, #2
 800526e:	77fb      	strb	r3, [r7, #31]
 8005270:	e09e      	b.n	80053b0 <UART_SetConfig+0x348>
 8005272:	2304      	movs	r3, #4
 8005274:	77fb      	strb	r3, [r7, #31]
 8005276:	e09b      	b.n	80053b0 <UART_SetConfig+0x348>
 8005278:	2308      	movs	r3, #8
 800527a:	77fb      	strb	r3, [r7, #31]
 800527c:	e098      	b.n	80053b0 <UART_SetConfig+0x348>
 800527e:	2310      	movs	r3, #16
 8005280:	77fb      	strb	r3, [r7, #31]
 8005282:	e095      	b.n	80053b0 <UART_SetConfig+0x348>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a2f      	ldr	r2, [pc, #188]	; (8005348 <UART_SetConfig+0x2e0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d125      	bne.n	80052da <UART_SetConfig+0x272>
 800528e:	4b29      	ldr	r3, [pc, #164]	; (8005334 <UART_SetConfig+0x2cc>)
 8005290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005294:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005298:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800529c:	d017      	beq.n	80052ce <UART_SetConfig+0x266>
 800529e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80052a2:	d817      	bhi.n	80052d4 <UART_SetConfig+0x26c>
 80052a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a8:	d00b      	beq.n	80052c2 <UART_SetConfig+0x25a>
 80052aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ae:	d811      	bhi.n	80052d4 <UART_SetConfig+0x26c>
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d003      	beq.n	80052bc <UART_SetConfig+0x254>
 80052b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b8:	d006      	beq.n	80052c8 <UART_SetConfig+0x260>
 80052ba:	e00b      	b.n	80052d4 <UART_SetConfig+0x26c>
 80052bc:	2301      	movs	r3, #1
 80052be:	77fb      	strb	r3, [r7, #31]
 80052c0:	e076      	b.n	80053b0 <UART_SetConfig+0x348>
 80052c2:	2302      	movs	r3, #2
 80052c4:	77fb      	strb	r3, [r7, #31]
 80052c6:	e073      	b.n	80053b0 <UART_SetConfig+0x348>
 80052c8:	2304      	movs	r3, #4
 80052ca:	77fb      	strb	r3, [r7, #31]
 80052cc:	e070      	b.n	80053b0 <UART_SetConfig+0x348>
 80052ce:	2308      	movs	r3, #8
 80052d0:	77fb      	strb	r3, [r7, #31]
 80052d2:	e06d      	b.n	80053b0 <UART_SetConfig+0x348>
 80052d4:	2310      	movs	r3, #16
 80052d6:	77fb      	strb	r3, [r7, #31]
 80052d8:	e06a      	b.n	80053b0 <UART_SetConfig+0x348>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1b      	ldr	r2, [pc, #108]	; (800534c <UART_SetConfig+0x2e4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d138      	bne.n	8005356 <UART_SetConfig+0x2ee>
 80052e4:	4b13      	ldr	r3, [pc, #76]	; (8005334 <UART_SetConfig+0x2cc>)
 80052e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80052ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052f2:	d017      	beq.n	8005324 <UART_SetConfig+0x2bc>
 80052f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80052f8:	d82a      	bhi.n	8005350 <UART_SetConfig+0x2e8>
 80052fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052fe:	d00b      	beq.n	8005318 <UART_SetConfig+0x2b0>
 8005300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005304:	d824      	bhi.n	8005350 <UART_SetConfig+0x2e8>
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <UART_SetConfig+0x2aa>
 800530a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800530e:	d006      	beq.n	800531e <UART_SetConfig+0x2b6>
 8005310:	e01e      	b.n	8005350 <UART_SetConfig+0x2e8>
 8005312:	2300      	movs	r3, #0
 8005314:	77fb      	strb	r3, [r7, #31]
 8005316:	e04b      	b.n	80053b0 <UART_SetConfig+0x348>
 8005318:	2302      	movs	r3, #2
 800531a:	77fb      	strb	r3, [r7, #31]
 800531c:	e048      	b.n	80053b0 <UART_SetConfig+0x348>
 800531e:	2304      	movs	r3, #4
 8005320:	77fb      	strb	r3, [r7, #31]
 8005322:	e045      	b.n	80053b0 <UART_SetConfig+0x348>
 8005324:	2308      	movs	r3, #8
 8005326:	77fb      	strb	r3, [r7, #31]
 8005328:	e042      	b.n	80053b0 <UART_SetConfig+0x348>
 800532a:	bf00      	nop
 800532c:	efff69f3 	.word	0xefff69f3
 8005330:	40011000 	.word	0x40011000
 8005334:	40023800 	.word	0x40023800
 8005338:	40004400 	.word	0x40004400
 800533c:	40004800 	.word	0x40004800
 8005340:	40004c00 	.word	0x40004c00
 8005344:	40005000 	.word	0x40005000
 8005348:	40011400 	.word	0x40011400
 800534c:	40007800 	.word	0x40007800
 8005350:	2310      	movs	r3, #16
 8005352:	77fb      	strb	r3, [r7, #31]
 8005354:	e02c      	b.n	80053b0 <UART_SetConfig+0x348>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a72      	ldr	r2, [pc, #456]	; (8005524 <UART_SetConfig+0x4bc>)
 800535c:	4293      	cmp	r3, r2
 800535e:	d125      	bne.n	80053ac <UART_SetConfig+0x344>
 8005360:	4b71      	ldr	r3, [pc, #452]	; (8005528 <UART_SetConfig+0x4c0>)
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005366:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800536a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800536e:	d017      	beq.n	80053a0 <UART_SetConfig+0x338>
 8005370:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005374:	d817      	bhi.n	80053a6 <UART_SetConfig+0x33e>
 8005376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800537a:	d00b      	beq.n	8005394 <UART_SetConfig+0x32c>
 800537c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005380:	d811      	bhi.n	80053a6 <UART_SetConfig+0x33e>
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <UART_SetConfig+0x326>
 8005386:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800538a:	d006      	beq.n	800539a <UART_SetConfig+0x332>
 800538c:	e00b      	b.n	80053a6 <UART_SetConfig+0x33e>
 800538e:	2300      	movs	r3, #0
 8005390:	77fb      	strb	r3, [r7, #31]
 8005392:	e00d      	b.n	80053b0 <UART_SetConfig+0x348>
 8005394:	2302      	movs	r3, #2
 8005396:	77fb      	strb	r3, [r7, #31]
 8005398:	e00a      	b.n	80053b0 <UART_SetConfig+0x348>
 800539a:	2304      	movs	r3, #4
 800539c:	77fb      	strb	r3, [r7, #31]
 800539e:	e007      	b.n	80053b0 <UART_SetConfig+0x348>
 80053a0:	2308      	movs	r3, #8
 80053a2:	77fb      	strb	r3, [r7, #31]
 80053a4:	e004      	b.n	80053b0 <UART_SetConfig+0x348>
 80053a6:	2310      	movs	r3, #16
 80053a8:	77fb      	strb	r3, [r7, #31]
 80053aa:	e001      	b.n	80053b0 <UART_SetConfig+0x348>
 80053ac:	2310      	movs	r3, #16
 80053ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	69db      	ldr	r3, [r3, #28]
 80053b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053b8:	d15b      	bne.n	8005472 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80053ba:	7ffb      	ldrb	r3, [r7, #31]
 80053bc:	2b08      	cmp	r3, #8
 80053be:	d828      	bhi.n	8005412 <UART_SetConfig+0x3aa>
 80053c0:	a201      	add	r2, pc, #4	; (adr r2, 80053c8 <UART_SetConfig+0x360>)
 80053c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c6:	bf00      	nop
 80053c8:	080053ed 	.word	0x080053ed
 80053cc:	080053f5 	.word	0x080053f5
 80053d0:	080053fd 	.word	0x080053fd
 80053d4:	08005413 	.word	0x08005413
 80053d8:	08005403 	.word	0x08005403
 80053dc:	08005413 	.word	0x08005413
 80053e0:	08005413 	.word	0x08005413
 80053e4:	08005413 	.word	0x08005413
 80053e8:	0800540b 	.word	0x0800540b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80053ec:	f7fe fde2 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 80053f0:	61b8      	str	r0, [r7, #24]
        break;
 80053f2:	e013      	b.n	800541c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80053f4:	f7fe fdf2 	bl	8003fdc <HAL_RCC_GetPCLK2Freq>
 80053f8:	61b8      	str	r0, [r7, #24]
        break;
 80053fa:	e00f      	b.n	800541c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80053fc:	4b4b      	ldr	r3, [pc, #300]	; (800552c <UART_SetConfig+0x4c4>)
 80053fe:	61bb      	str	r3, [r7, #24]
        break;
 8005400:	e00c      	b.n	800541c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005402:	f7fe fcc5 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8005406:	61b8      	str	r0, [r7, #24]
        break;
 8005408:	e008      	b.n	800541c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800540a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800540e:	61bb      	str	r3, [r7, #24]
        break;
 8005410:	e004      	b.n	800541c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005412:	2300      	movs	r3, #0
 8005414:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005416:	2301      	movs	r3, #1
 8005418:	77bb      	strb	r3, [r7, #30]
        break;
 800541a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d074      	beq.n	800550c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	005a      	lsls	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	085b      	lsrs	r3, r3, #1
 800542c:	441a      	add	r2, r3
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	fbb2 f3f3 	udiv	r3, r2, r3
 8005436:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	2b0f      	cmp	r3, #15
 800543c:	d916      	bls.n	800546c <UART_SetConfig+0x404>
 800543e:	693b      	ldr	r3, [r7, #16]
 8005440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005444:	d212      	bcs.n	800546c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	b29b      	uxth	r3, r3
 800544a:	f023 030f 	bic.w	r3, r3, #15
 800544e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005450:	693b      	ldr	r3, [r7, #16]
 8005452:	085b      	lsrs	r3, r3, #1
 8005454:	b29b      	uxth	r3, r3
 8005456:	f003 0307 	and.w	r3, r3, #7
 800545a:	b29a      	uxth	r2, r3
 800545c:	89fb      	ldrh	r3, [r7, #14]
 800545e:	4313      	orrs	r3, r2
 8005460:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	89fa      	ldrh	r2, [r7, #14]
 8005468:	60da      	str	r2, [r3, #12]
 800546a:	e04f      	b.n	800550c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800546c:	2301      	movs	r3, #1
 800546e:	77bb      	strb	r3, [r7, #30]
 8005470:	e04c      	b.n	800550c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005472:	7ffb      	ldrb	r3, [r7, #31]
 8005474:	2b08      	cmp	r3, #8
 8005476:	d828      	bhi.n	80054ca <UART_SetConfig+0x462>
 8005478:	a201      	add	r2, pc, #4	; (adr r2, 8005480 <UART_SetConfig+0x418>)
 800547a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800547e:	bf00      	nop
 8005480:	080054a5 	.word	0x080054a5
 8005484:	080054ad 	.word	0x080054ad
 8005488:	080054b5 	.word	0x080054b5
 800548c:	080054cb 	.word	0x080054cb
 8005490:	080054bb 	.word	0x080054bb
 8005494:	080054cb 	.word	0x080054cb
 8005498:	080054cb 	.word	0x080054cb
 800549c:	080054cb 	.word	0x080054cb
 80054a0:	080054c3 	.word	0x080054c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054a4:	f7fe fd86 	bl	8003fb4 <HAL_RCC_GetPCLK1Freq>
 80054a8:	61b8      	str	r0, [r7, #24]
        break;
 80054aa:	e013      	b.n	80054d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054ac:	f7fe fd96 	bl	8003fdc <HAL_RCC_GetPCLK2Freq>
 80054b0:	61b8      	str	r0, [r7, #24]
        break;
 80054b2:	e00f      	b.n	80054d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80054b4:	4b1d      	ldr	r3, [pc, #116]	; (800552c <UART_SetConfig+0x4c4>)
 80054b6:	61bb      	str	r3, [r7, #24]
        break;
 80054b8:	e00c      	b.n	80054d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80054ba:	f7fe fc69 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 80054be:	61b8      	str	r0, [r7, #24]
        break;
 80054c0:	e008      	b.n	80054d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80054c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054c6:	61bb      	str	r3, [r7, #24]
        break;
 80054c8:	e004      	b.n	80054d4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	77bb      	strb	r3, [r7, #30]
        break;
 80054d2:	bf00      	nop
    }

    if (pclk != 0U)
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d018      	beq.n	800550c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	085a      	lsrs	r2, r3, #1
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	441a      	add	r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	2b0f      	cmp	r3, #15
 80054f2:	d909      	bls.n	8005508 <UART_SetConfig+0x4a0>
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80054fa:	d205      	bcs.n	8005508 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	b29a      	uxth	r2, r3
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	60da      	str	r2, [r3, #12]
 8005506:	e001      	b.n	800550c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2200      	movs	r2, #0
 8005516:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005518:	7fbb      	ldrb	r3, [r7, #30]
}
 800551a:	4618      	mov	r0, r3
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	40007c00 	.word	0x40007c00
 8005528:	40023800 	.word	0x40023800
 800552c:	00f42400 	.word	0x00f42400

08005530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005530:	b480      	push	{r7}
 8005532:	b083      	sub	sp, #12
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	f003 0301 	and.w	r3, r3, #1
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00a      	beq.n	800555a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	f003 0302 	and.w	r3, r3, #2
 8005562:	2b00      	cmp	r3, #0
 8005564:	d00a      	beq.n	800557c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	430a      	orrs	r2, r1
 800557a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005580:	f003 0304 	and.w	r3, r3, #4
 8005584:	2b00      	cmp	r3, #0
 8005586:	d00a      	beq.n	800559e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	430a      	orrs	r2, r1
 800559c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a2:	f003 0308 	and.w	r3, r3, #8
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00a      	beq.n	80055e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	430a      	orrs	r2, r1
 8005602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800560c:	2b00      	cmp	r3, #0
 800560e:	d01a      	beq.n	8005646 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	430a      	orrs	r2, r1
 8005624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800562e:	d10a      	bne.n	8005646 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	430a      	orrs	r2, r1
 8005644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564e:	2b00      	cmp	r3, #0
 8005650:	d00a      	beq.n	8005668 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	430a      	orrs	r2, r1
 8005666:	605a      	str	r2, [r3, #4]
  }
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b086      	sub	sp, #24
 8005678:	af02      	add	r7, sp, #8
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005684:	f7fb ff74 	bl	8001570 <HAL_GetTick>
 8005688:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0308 	and.w	r3, r3, #8
 8005694:	2b08      	cmp	r3, #8
 8005696:	d10e      	bne.n	80056b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005698:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800569c:	9300      	str	r3, [sp, #0]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 f831 	bl	800570e <UART_WaitOnFlagUntilTimeout>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d001      	beq.n	80056b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e027      	b.n	8005706 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0304 	and.w	r3, r3, #4
 80056c0:	2b04      	cmp	r3, #4
 80056c2:	d10e      	bne.n	80056e2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80056c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f000 f81b 	bl	800570e <UART_WaitOnFlagUntilTimeout>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80056de:	2303      	movs	r3, #3
 80056e0:	e011      	b.n	8005706 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2220      	movs	r2, #32
 80056e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2220      	movs	r2, #32
 80056ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2200      	movs	r2, #0
 80056f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005704:	2300      	movs	r3, #0
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800570e:	b580      	push	{r7, lr}
 8005710:	b09c      	sub	sp, #112	; 0x70
 8005712:	af00      	add	r7, sp, #0
 8005714:	60f8      	str	r0, [r7, #12]
 8005716:	60b9      	str	r1, [r7, #8]
 8005718:	603b      	str	r3, [r7, #0]
 800571a:	4613      	mov	r3, r2
 800571c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800571e:	e0a7      	b.n	8005870 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005720:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005726:	f000 80a3 	beq.w	8005870 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800572a:	f7fb ff21 	bl	8001570 <HAL_GetTick>
 800572e:	4602      	mov	r2, r0
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005736:	429a      	cmp	r2, r3
 8005738:	d302      	bcc.n	8005740 <UART_WaitOnFlagUntilTimeout+0x32>
 800573a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800573c:	2b00      	cmp	r3, #0
 800573e:	d13f      	bne.n	80057c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005746:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005748:	e853 3f00 	ldrex	r3, [r3]
 800574c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800574e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005750:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005754:	667b      	str	r3, [r7, #100]	; 0x64
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	461a      	mov	r2, r3
 800575c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800575e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005760:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005764:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800576c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e6      	bne.n	8005740 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3308      	adds	r3, #8
 8005778:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005784:	f023 0301 	bic.w	r3, r3, #1
 8005788:	663b      	str	r3, [r7, #96]	; 0x60
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	3308      	adds	r3, #8
 8005790:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005792:	64ba      	str	r2, [r7, #72]	; 0x48
 8005794:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005796:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005798:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800579a:	e841 2300 	strex	r3, r2, [r1]
 800579e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80057a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d1e5      	bne.n	8005772 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2220      	movs	r2, #32
 80057aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80057bc:	2303      	movs	r3, #3
 80057be:	e068      	b.n	8005892 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 0304 	and.w	r3, r3, #4
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d050      	beq.n	8005870 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	69db      	ldr	r3, [r3, #28]
 80057d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057dc:	d148      	bne.n	8005870 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80057f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80057fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	461a      	mov	r2, r3
 8005804:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005806:	637b      	str	r3, [r7, #52]	; 0x34
 8005808:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800580c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e6      	bne.n	80057e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	3308      	adds	r3, #8
 8005820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	e853 3f00 	ldrex	r3, [r3]
 8005828:	613b      	str	r3, [r7, #16]
   return(result);
 800582a:	693b      	ldr	r3, [r7, #16]
 800582c:	f023 0301 	bic.w	r3, r3, #1
 8005830:	66bb      	str	r3, [r7, #104]	; 0x68
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	3308      	adds	r3, #8
 8005838:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800583a:	623a      	str	r2, [r7, #32]
 800583c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583e:	69f9      	ldr	r1, [r7, #28]
 8005840:	6a3a      	ldr	r2, [r7, #32]
 8005842:	e841 2300 	strex	r3, r2, [r1]
 8005846:	61bb      	str	r3, [r7, #24]
   return(result);
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d1e5      	bne.n	800581a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2220      	movs	r2, #32
 8005852:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2220      	movs	r2, #32
 8005860:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	2200      	movs	r2, #0
 8005868:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800586c:	2303      	movs	r3, #3
 800586e:	e010      	b.n	8005892 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	69da      	ldr	r2, [r3, #28]
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	4013      	ands	r3, r2
 800587a:	68ba      	ldr	r2, [r7, #8]
 800587c:	429a      	cmp	r2, r3
 800587e:	bf0c      	ite	eq
 8005880:	2301      	moveq	r3, #1
 8005882:	2300      	movne	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	461a      	mov	r2, r3
 8005888:	79fb      	ldrb	r3, [r7, #7]
 800588a:	429a      	cmp	r2, r3
 800588c:	f43f af48 	beq.w	8005720 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005890:	2300      	movs	r3, #0
}
 8005892:	4618      	mov	r0, r3
 8005894:	3770      	adds	r7, #112	; 0x70
 8005896:	46bd      	mov	sp, r7
 8005898:	bd80      	pop	{r7, pc}
	...

0800589c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b084      	sub	sp, #16
 80058a0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80058a2:	2100      	movs	r1, #0
 80058a4:	2000      	movs	r0, #0
 80058a6:	f004 ff19 	bl	800a6dc <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80058aa:	4b23      	ldr	r3, [pc, #140]	; (8005938 <MX_LWIP_Init+0x9c>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80058b0:	4b22      	ldr	r3, [pc, #136]	; (800593c <MX_LWIP_Init+0xa0>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80058b6:	4b22      	ldr	r3, [pc, #136]	; (8005940 <MX_LWIP_Init+0xa4>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80058bc:	4b21      	ldr	r3, [pc, #132]	; (8005944 <MX_LWIP_Init+0xa8>)
 80058be:	9302      	str	r3, [sp, #8]
 80058c0:	4b21      	ldr	r3, [pc, #132]	; (8005948 <MX_LWIP_Init+0xac>)
 80058c2:	9301      	str	r3, [sp, #4]
 80058c4:	2300      	movs	r3, #0
 80058c6:	9300      	str	r3, [sp, #0]
 80058c8:	4b1d      	ldr	r3, [pc, #116]	; (8005940 <MX_LWIP_Init+0xa4>)
 80058ca:	4a1c      	ldr	r2, [pc, #112]	; (800593c <MX_LWIP_Init+0xa0>)
 80058cc:	491a      	ldr	r1, [pc, #104]	; (8005938 <MX_LWIP_Init+0x9c>)
 80058ce:	481f      	ldr	r0, [pc, #124]	; (800594c <MX_LWIP_Init+0xb0>)
 80058d0:	f005 fd16 	bl	800b300 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80058d4:	481d      	ldr	r0, [pc, #116]	; (800594c <MX_LWIP_Init+0xb0>)
 80058d6:	f005 ff41 	bl	800b75c <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80058da:	4b1c      	ldr	r3, [pc, #112]	; (800594c <MX_LWIP_Init+0xb0>)
 80058dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058e0:	089b      	lsrs	r3, r3, #2
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80058ec:	4817      	ldr	r0, [pc, #92]	; (800594c <MX_LWIP_Init+0xb0>)
 80058ee:	f005 ff45 	bl	800b77c <netif_set_up>
 80058f2:	e002      	b.n	80058fa <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80058f4:	4815      	ldr	r0, [pc, #84]	; (800594c <MX_LWIP_Init+0xb0>)
 80058f6:	f005 ffbf 	bl	800b878 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80058fa:	4915      	ldr	r1, [pc, #84]	; (8005950 <MX_LWIP_Init+0xb4>)
 80058fc:	4813      	ldr	r0, [pc, #76]	; (800594c <MX_LWIP_Init+0xb0>)
 80058fe:	f006 f879 	bl	800b9f4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005902:	2224      	movs	r2, #36	; 0x24
 8005904:	2100      	movs	r1, #0
 8005906:	4813      	ldr	r0, [pc, #76]	; (8005954 <MX_LWIP_Init+0xb8>)
 8005908:	f011 fb4d 	bl	8016fa6 <memset>
  attributes.name = "EthLink";
 800590c:	4b11      	ldr	r3, [pc, #68]	; (8005954 <MX_LWIP_Init+0xb8>)
 800590e:	4a12      	ldr	r2, [pc, #72]	; (8005958 <MX_LWIP_Init+0xbc>)
 8005910:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005912:	4b10      	ldr	r3, [pc, #64]	; (8005954 <MX_LWIP_Init+0xb8>)
 8005914:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005918:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800591a:	4b0e      	ldr	r3, [pc, #56]	; (8005954 <MX_LWIP_Init+0xb8>)
 800591c:	2210      	movs	r2, #16
 800591e:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8005920:	4a0c      	ldr	r2, [pc, #48]	; (8005954 <MX_LWIP_Init+0xb8>)
 8005922:	490a      	ldr	r1, [pc, #40]	; (800594c <MX_LWIP_Init+0xb0>)
 8005924:	480d      	ldr	r0, [pc, #52]	; (800595c <MX_LWIP_Init+0xc0>)
 8005926:	f000 fda1 	bl	800646c <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800592a:	4808      	ldr	r0, [pc, #32]	; (800594c <MX_LWIP_Init+0xb0>)
 800592c:	f00d fb02 	bl	8012f34 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005930:	bf00      	nop
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	200003fc 	.word	0x200003fc
 800593c:	20000400 	.word	0x20000400
 8005940:	20000404 	.word	0x20000404
 8005944:	0800a619 	.word	0x0800a619
 8005948:	08005e5d 	.word	0x08005e5d
 800594c:	200003b8 	.word	0x200003b8
 8005950:	08005961 	.word	0x08005961
 8005954:	20000408 	.word	0x20000408
 8005958:	08017f68 	.word	0x08017f68
 800595c:	08006125 	.word	0x08006125

08005960 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005968:	bf00      	nop
 800596a:	370c      	adds	r7, #12
 800596c:	46bd      	mov	sp, r7
 800596e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005972:	4770      	bx	lr

08005974 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8005974:	b480      	push	{r7}
 8005976:	b087      	sub	sp, #28
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005986:	2320      	movs	r3, #32
 8005988:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800598a:	f3bf 8f4f 	dsb	sy
}
 800598e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8005990:	e00b      	b.n	80059aa <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8005992:	4a0d      	ldr	r2, [pc, #52]	; (80059c8 <SCB_InvalidateDCache_by_Addr+0x54>)
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	693a      	ldr	r2, [r7, #16]
 800599e:	4413      	add	r3, r2
 80059a0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	1ad3      	subs	r3, r2, r3
 80059a8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	dcf0      	bgt.n	8005992 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80059b0:	f3bf 8f4f 	dsb	sy
}
 80059b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80059b6:	f3bf 8f6f 	isb	sy
}
 80059ba:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80059bc:	bf00      	nop
 80059be:	371c      	adds	r7, #28
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr
 80059c8:	e000ed00 	.word	0xe000ed00

080059cc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80059d4:	4b04      	ldr	r3, [pc, #16]	; (80059e8 <HAL_ETH_RxCpltCallback+0x1c>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4618      	mov	r0, r3
 80059da:	f001 f8a5 	bl	8006b28 <osSemaphoreRelease>
}
 80059de:	bf00      	nop
 80059e0:	3708      	adds	r7, #8
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20004db8 	.word	0x20004db8

080059ec <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80059f4:	4b04      	ldr	r3, [pc, #16]	; (8005a08 <HAL_ETH_TxCpltCallback+0x1c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 f895 	bl	8006b28 <osSemaphoreRelease>
}
 80059fe:	bf00      	nop
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20004dbc 	.word	0x20004dbc

08005a0c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f7fc fed3 	bl	80027c0 <HAL_ETH_GetDMAError>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a20:	2b80      	cmp	r3, #128	; 0x80
 8005a22:	d104      	bne.n	8005a2e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005a24:	4b04      	ldr	r3, [pc, #16]	; (8005a38 <HAL_ETH_ErrorCallback+0x2c>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f001 f87d 	bl	8006b28 <osSemaphoreRelease>
  }
}
 8005a2e:	bf00      	nop
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
 8005a36:	bf00      	nop
 8005a38:	20004db8 	.word	0x20004db8

08005a3c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b0aa      	sub	sp, #168	; 0xa8
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005a44:	2300      	movs	r3, #0
 8005a46:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8005a50:	2300      	movs	r3, #0
 8005a52:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8005a56:	f107 0310 	add.w	r3, r7, #16
 8005a5a:	2264      	movs	r2, #100	; 0x64
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	4618      	mov	r0, r3
 8005a60:	f011 faa1 	bl	8016fa6 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005a64:	4b85      	ldr	r3, [pc, #532]	; (8005c7c <low_level_init+0x240>)
 8005a66:	4a86      	ldr	r2, [pc, #536]	; (8005c80 <low_level_init+0x244>)
 8005a68:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005a6e:	2380      	movs	r3, #128	; 0x80
 8005a70:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005a72:	23e1      	movs	r3, #225	; 0xe1
 8005a74:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005a76:	2300      	movs	r3, #0
 8005a78:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005a82:	4a7e      	ldr	r2, [pc, #504]	; (8005c7c <low_level_init+0x240>)
 8005a84:	f107 0308 	add.w	r3, r7, #8
 8005a88:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005a8a:	4b7c      	ldr	r3, [pc, #496]	; (8005c7c <low_level_init+0x240>)
 8005a8c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005a90:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005a92:	4b7a      	ldr	r3, [pc, #488]	; (8005c7c <low_level_init+0x240>)
 8005a94:	4a7b      	ldr	r2, [pc, #492]	; (8005c84 <low_level_init+0x248>)
 8005a96:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005a98:	4b78      	ldr	r3, [pc, #480]	; (8005c7c <low_level_init+0x240>)
 8005a9a:	4a7b      	ldr	r2, [pc, #492]	; (8005c88 <low_level_init+0x24c>)
 8005a9c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005a9e:	4b77      	ldr	r3, [pc, #476]	; (8005c7c <low_level_init+0x240>)
 8005aa0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005aa4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005aa6:	4875      	ldr	r0, [pc, #468]	; (8005c7c <low_level_init+0x240>)
 8005aa8:	f7fb ffec 	bl	8001a84 <HAL_ETH_Init>
 8005aac:	4603      	mov	r3, r0
 8005aae:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005ab2:	2238      	movs	r2, #56	; 0x38
 8005ab4:	2100      	movs	r1, #0
 8005ab6:	4875      	ldr	r0, [pc, #468]	; (8005c8c <low_level_init+0x250>)
 8005ab8:	f011 fa75 	bl	8016fa6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005abc:	4b73      	ldr	r3, [pc, #460]	; (8005c8c <low_level_init+0x250>)
 8005abe:	2221      	movs	r2, #33	; 0x21
 8005ac0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005ac2:	4b72      	ldr	r3, [pc, #456]	; (8005c8c <low_level_init+0x250>)
 8005ac4:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005ac8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005aca:	4b70      	ldr	r3, [pc, #448]	; (8005c8c <low_level_init+0x250>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005ad0:	486f      	ldr	r0, [pc, #444]	; (8005c90 <low_level_init+0x254>)
 8005ad2:	f005 fa87 	bl	800afe4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2206      	movs	r2, #6
 8005ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005ade:	4b67      	ldr	r3, [pc, #412]	; (8005c7c <low_level_init+0x240>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	781a      	ldrb	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005aea:	4b64      	ldr	r3, [pc, #400]	; (8005c7c <low_level_init+0x240>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	785a      	ldrb	r2, [r3, #1]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005af6:	4b61      	ldr	r3, [pc, #388]	; (8005c7c <low_level_init+0x240>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	789a      	ldrb	r2, [r3, #2]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005b02:	4b5e      	ldr	r3, [pc, #376]	; (8005c7c <low_level_init+0x240>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	78da      	ldrb	r2, [r3, #3]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005b0e:	4b5b      	ldr	r3, [pc, #364]	; (8005c7c <low_level_init+0x240>)
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	791a      	ldrb	r2, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005b1a:	4b58      	ldr	r3, [pc, #352]	; (8005c7c <low_level_init+0x240>)
 8005b1c:	685b      	ldr	r3, [r3, #4]
 8005b1e:	795a      	ldrb	r2, [r3, #5]
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005b2c:	859a      	strh	r2, [r3, #44]	; 0x2c

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b34:	f043 030a 	orr.w	r3, r3, #10
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005b40:	2200      	movs	r2, #0
 8005b42:	2101      	movs	r1, #1
 8005b44:	2001      	movs	r0, #1
 8005b46:	f000 feed 	bl	8006924 <osSemaphoreNew>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	4a51      	ldr	r2, [pc, #324]	; (8005c94 <low_level_init+0x258>)
 8005b4e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005b50:	2200      	movs	r2, #0
 8005b52:	2101      	movs	r1, #1
 8005b54:	2001      	movs	r0, #1
 8005b56:	f000 fee5 	bl	8006924 <osSemaphoreNew>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	4a4e      	ldr	r2, [pc, #312]	; (8005c98 <low_level_init+0x25c>)
 8005b5e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005b60:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005b64:	2224      	movs	r2, #36	; 0x24
 8005b66:	2100      	movs	r1, #0
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f011 fa1c 	bl	8016fa6 <memset>
  attributes.name = "EthIf";
 8005b6e:	4b4b      	ldr	r3, [pc, #300]	; (8005c9c <low_level_init+0x260>)
 8005b70:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005b72:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005b76:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8005b7a:	2330      	movs	r3, #48	; 0x30
 8005b7c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005b80:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005b84:	461a      	mov	r2, r3
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	4845      	ldr	r0, [pc, #276]	; (8005ca0 <low_level_init+0x264>)
 8005b8a:	f000 fc6f 	bl	800646c <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005b8e:	4945      	ldr	r1, [pc, #276]	; (8005ca4 <low_level_init+0x268>)
 8005b90:	4845      	ldr	r0, [pc, #276]	; (8005ca8 <low_level_init+0x26c>)
 8005b92:	f7fb fb62 	bl	800125a <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005b96:	4844      	ldr	r0, [pc, #272]	; (8005ca8 <low_level_init+0x26c>)
 8005b98:	f7fb fb91 	bl	80012be <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005b9c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d164      	bne.n	8005c6e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005ba4:	4840      	ldr	r0, [pc, #256]	; (8005ca8 <low_level_init+0x26c>)
 8005ba6:	f7fb fc32 	bl	800140e <LAN8742_GetLinkState>
 8005baa:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005bae:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	dc06      	bgt.n	8005bc4 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8005bb6:	6878      	ldr	r0, [r7, #4]
 8005bb8:	f005 fee2 	bl	800b980 <netif_set_link_down>
      netif_set_down(netif);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f005 fe5b 	bl	800b878 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005bc2:	e056      	b.n	8005c72 <low_level_init+0x236>
      switch (PHYLinkState)
 8005bc4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bc8:	3b02      	subs	r3, #2
 8005bca:	2b03      	cmp	r3, #3
 8005bcc:	d82a      	bhi.n	8005c24 <low_level_init+0x1e8>
 8005bce:	a201      	add	r2, pc, #4	; (adr r2, 8005bd4 <low_level_init+0x198>)
 8005bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bd4:	08005be5 	.word	0x08005be5
 8005bd8:	08005bf7 	.word	0x08005bf7
 8005bdc:	08005c07 	.word	0x08005c07
 8005be0:	08005c17 	.word	0x08005c17
        duplex = ETH_FULLDUPLEX_MODE;
 8005be4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005be8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8005bec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bf0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005bf4:	e01f      	b.n	8005c36 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8005bfc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005c04:	e017      	b.n	8005c36 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005c06:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005c14:	e00f      	b.n	8005c36 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005c16:	2300      	movs	r3, #0
 8005c18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005c22:	e008      	b.n	8005c36 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005c24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8005c2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005c34:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005c36:	f107 0310 	add.w	r3, r7, #16
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	480f      	ldr	r0, [pc, #60]	; (8005c7c <low_level_init+0x240>)
 8005c3e:	f7fc fc65 	bl	800250c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005c42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8005c48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005c4e:	f107 0310 	add.w	r3, r7, #16
 8005c52:	4619      	mov	r1, r3
 8005c54:	4809      	ldr	r0, [pc, #36]	; (8005c7c <low_level_init+0x240>)
 8005c56:	f7fc fd43 	bl	80026e0 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005c5a:	4808      	ldr	r0, [pc, #32]	; (8005c7c <low_level_init+0x240>)
 8005c5c:	f7fb ffee 	bl	8001c3c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f005 fd8b 	bl	800b77c <netif_set_up>
    netif_set_link_up(netif);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f005 fe4a 	bl	800b900 <netif_set_link_up>
}
 8005c6c:	e001      	b.n	8005c72 <low_level_init+0x236>
    Error_Handler();
 8005c6e:	f7fa ff95 	bl	8000b9c <Error_Handler>
}
 8005c72:	bf00      	nop
 8005c74:	37a8      	adds	r7, #168	; 0xa8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop
 8005c7c:	20004dc0 	.word	0x20004dc0
 8005c80:	40028000 	.word	0x40028000
 8005c84:	20000138 	.word	0x20000138
 8005c88:	20000098 	.word	0x20000098
 8005c8c:	20004e70 	.word	0x20004e70
 8005c90:	0801afcc 	.word	0x0801afcc
 8005c94:	20004db8 	.word	0x20004db8
 8005c98:	20004dbc 	.word	0x20004dbc
 8005c9c:	08017f70 	.word	0x08017f70
 8005ca0:	08005e09 	.word	0x08005e09
 8005ca4:	2000000c 	.word	0x2000000c
 8005ca8:	20004ea8 	.word	0x20004ea8

08005cac <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b092      	sub	sp, #72	; 0x48
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005cc4:	f107 030c 	add.w	r3, r7, #12
 8005cc8:	2230      	movs	r2, #48	; 0x30
 8005cca:	2100      	movs	r1, #0
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f011 f96a 	bl	8016fa6 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005cd2:	f107 030c 	add.w	r3, r7, #12
 8005cd6:	2230      	movs	r2, #48	; 0x30
 8005cd8:	2100      	movs	r1, #0
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f011 f963 	bl	8016fa6 <memset>

  for(q = p; q != NULL; q = q->next)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	643b      	str	r3, [r7, #64]	; 0x40
 8005ce4:	e045      	b.n	8005d72 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005ce6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ce8:	2b03      	cmp	r3, #3
 8005cea:	d902      	bls.n	8005cf2 <low_level_output+0x46>
      return ERR_IF;
 8005cec:	f06f 030b 	mvn.w	r3, #11
 8005cf0:	e065      	b.n	8005dbe <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8005cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf4:	6859      	ldr	r1, [r3, #4]
 8005cf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	3348      	adds	r3, #72	; 0x48
 8005d02:	443b      	add	r3, r7
 8005d04:	3b3c      	subs	r3, #60	; 0x3c
 8005d06:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d0a:	895b      	ldrh	r3, [r3, #10]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d10:	4613      	mov	r3, r2
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	3348      	adds	r3, #72	; 0x48
 8005d1a:	443b      	add	r3, r7
 8005d1c:	3b38      	subs	r3, #56	; 0x38
 8005d1e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005d20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d011      	beq.n	8005d4a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d28:	1e5a      	subs	r2, r3, #1
 8005d2a:	f107 000c 	add.w	r0, r7, #12
 8005d2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d30:	460b      	mov	r3, r1
 8005d32:	005b      	lsls	r3, r3, #1
 8005d34:	440b      	add	r3, r1
 8005d36:	009b      	lsls	r3, r3, #2
 8005d38:	18c1      	adds	r1, r0, r3
 8005d3a:	4613      	mov	r3, r2
 8005d3c:	005b      	lsls	r3, r3, #1
 8005d3e:	4413      	add	r3, r2
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	3348      	adds	r3, #72	; 0x48
 8005d44:	443b      	add	r3, r7
 8005d46:	3b34      	subs	r3, #52	; 0x34
 8005d48:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d109      	bne.n	8005d66 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005d52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d54:	4613      	mov	r3, r2
 8005d56:	005b      	lsls	r3, r3, #1
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	3348      	adds	r3, #72	; 0x48
 8005d5e:	443b      	add	r3, r7
 8005d60:	3b34      	subs	r3, #52	; 0x34
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d68:	3301      	adds	r3, #1
 8005d6a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005d6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	643b      	str	r3, [r7, #64]	; 0x40
 8005d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d1b6      	bne.n	8005ce6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005d78:	683b      	ldr	r3, [r7, #0]
 8005d7a:	891b      	ldrh	r3, [r3, #8]
 8005d7c:	461a      	mov	r2, r3
 8005d7e:	4b12      	ldr	r3, [pc, #72]	; (8005dc8 <low_level_output+0x11c>)
 8005d80:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005d82:	4a11      	ldr	r2, [pc, #68]	; (8005dc8 <low_level_output+0x11c>)
 8005d84:	f107 030c 	add.w	r3, r7, #12
 8005d88:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005d8a:	4a0f      	ldr	r2, [pc, #60]	; (8005dc8 <low_level_output+0x11c>)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005d90:	6838      	ldr	r0, [r7, #0]
 8005d92:	f006 fbbb 	bl	800c50c <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005d96:	490c      	ldr	r1, [pc, #48]	; (8005dc8 <low_level_output+0x11c>)
 8005d98:	480c      	ldr	r0, [pc, #48]	; (8005dcc <low_level_output+0x120>)
 8005d9a:	f7fc f85d 	bl	8001e58 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005d9e:	bf00      	nop
 8005da0:	4b0b      	ldr	r3, [pc, #44]	; (8005dd0 <low_level_output+0x124>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f04f 31ff 	mov.w	r1, #4294967295
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fe57 	bl	8006a5c <osSemaphoreAcquire>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1f5      	bne.n	8005da0 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005db4:	4805      	ldr	r0, [pc, #20]	; (8005dcc <low_level_output+0x120>)
 8005db6:	f7fc f9e3 	bl	8002180 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005dba:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	3748      	adds	r7, #72	; 0x48
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20004e70 	.word	0x20004e70
 8005dcc:	20004dc0 	.word	0x20004dc0
 8005dd0:	20004dbc 	.word	0x20004dbc

08005dd4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b084      	sub	sp, #16
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005de0:	4b07      	ldr	r3, [pc, #28]	; (8005e00 <low_level_input+0x2c>)
 8005de2:	781b      	ldrb	r3, [r3, #0]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d105      	bne.n	8005df4 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005de8:	f107 030c 	add.w	r3, r7, #12
 8005dec:	4619      	mov	r1, r3
 8005dee:	4805      	ldr	r0, [pc, #20]	; (8005e04 <low_level_input+0x30>)
 8005df0:	f7fc f88e 	bl	8001f10 <HAL_ETH_ReadData>
  }

  return p;
 8005df4:	68fb      	ldr	r3, [r7, #12]
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3710      	adds	r7, #16
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	20004db4 	.word	0x20004db4
 8005e04:	20004dc0 	.word	0x20004dc0

08005e08 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b084      	sub	sp, #16
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005e10:	2300      	movs	r3, #0
 8005e12:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005e18:	4b0f      	ldr	r3, [pc, #60]	; (8005e58 <ethernetif_input+0x50>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8005e20:	4618      	mov	r0, r3
 8005e22:	f000 fe1b 	bl	8006a5c <osSemaphoreAcquire>
 8005e26:	4603      	mov	r3, r0
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1f5      	bne.n	8005e18 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005e2c:	68b8      	ldr	r0, [r7, #8]
 8005e2e:	f7ff ffd1 	bl	8005dd4 <low_level_input>
 8005e32:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d00a      	beq.n	8005e50 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	691b      	ldr	r3, [r3, #16]
 8005e3e:	68b9      	ldr	r1, [r7, #8]
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	4798      	blx	r3
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d002      	beq.n	8005e50 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f006 fab8 	bl	800c3c0 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d1ea      	bne.n	8005e2c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005e56:	e7df      	b.n	8005e18 <ethernetif_input+0x10>
 8005e58:	20004db8 	.word	0x20004db8

08005e5c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b082      	sub	sp, #8
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <ethernetif_init+0x1c>
 8005e6a:	4b0e      	ldr	r3, [pc, #56]	; (8005ea4 <ethernetif_init+0x48>)
 8005e6c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005e70:	490d      	ldr	r1, [pc, #52]	; (8005ea8 <ethernetif_init+0x4c>)
 8005e72:	480e      	ldr	r0, [pc, #56]	; (8005eac <ethernetif_init+0x50>)
 8005e74:	f011 f934 	bl	80170e0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2273      	movs	r2, #115	; 0x73
 8005e7c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  netif->name[1] = IFNAME1;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2274      	movs	r2, #116	; 0x74
 8005e84:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a09      	ldr	r2, [pc, #36]	; (8005eb0 <ethernetif_init+0x54>)
 8005e8c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	4a08      	ldr	r2, [pc, #32]	; (8005eb4 <ethernetif_init+0x58>)
 8005e92:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f7ff fdd1 	bl	8005a3c <low_level_init>

  return ERR_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	08017f78 	.word	0x08017f78
 8005ea8:	08017f94 	.word	0x08017f94
 8005eac:	08017fa4 	.word	0x08017fa4
 8005eb0:	08014e01 	.word	0x08014e01
 8005eb4:	08005cad 	.word	0x08005cad

08005eb8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005ec4:	68f9      	ldr	r1, [r7, #12]
 8005ec6:	4809      	ldr	r0, [pc, #36]	; (8005eec <pbuf_free_custom+0x34>)
 8005ec8:	f005 f97c 	bl	800b1c4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005ecc:	4b08      	ldr	r3, [pc, #32]	; (8005ef0 <pbuf_free_custom+0x38>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d107      	bne.n	8005ee4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005ed4:	4b06      	ldr	r3, [pc, #24]	; (8005ef0 <pbuf_free_custom+0x38>)
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005eda:	4b06      	ldr	r3, [pc, #24]	; (8005ef4 <pbuf_free_custom+0x3c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	4618      	mov	r0, r3
 8005ee0:	f000 fe22 	bl	8006b28 <osSemaphoreRelease>
  }
}
 8005ee4:	bf00      	nop
 8005ee6:	3710      	adds	r7, #16
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	0801afcc 	.word	0x0801afcc
 8005ef0:	20004db4 	.word	0x20004db4
 8005ef4:	20004db8 	.word	0x20004db8

08005ef8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005efc:	f7fb fb38 	bl	8001570 <HAL_GetTick>
 8005f00:	4603      	mov	r3, r0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	bd80      	pop	{r7, pc}
	...

08005f08 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08e      	sub	sp, #56	; 0x38
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	605a      	str	r2, [r3, #4]
 8005f1a:	609a      	str	r2, [r3, #8]
 8005f1c:	60da      	str	r2, [r3, #12]
 8005f1e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a52      	ldr	r2, [pc, #328]	; (8006070 <HAL_ETH_MspInit+0x168>)
 8005f26:	4293      	cmp	r3, r2
 8005f28:	f040 809e 	bne.w	8006068 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005f2c:	4b51      	ldr	r3, [pc, #324]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f30:	4a50      	ldr	r2, [pc, #320]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005f32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f36:	6313      	str	r3, [r2, #48]	; 0x30
 8005f38:	4b4e      	ldr	r3, [pc, #312]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f40:	623b      	str	r3, [r7, #32]
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	4b4b      	ldr	r3, [pc, #300]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	4a4a      	ldr	r2, [pc, #296]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005f4a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8005f50:	4b48      	ldr	r3, [pc, #288]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f58:	61fb      	str	r3, [r7, #28]
 8005f5a:	69fb      	ldr	r3, [r7, #28]
 8005f5c:	4b45      	ldr	r3, [pc, #276]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	4a44      	ldr	r2, [pc, #272]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005f62:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f66:	6313      	str	r3, [r2, #48]	; 0x30
 8005f68:	4b42      	ldr	r3, [pc, #264]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f70:	61bb      	str	r3, [r7, #24]
 8005f72:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f74:	4b3f      	ldr	r3, [pc, #252]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f78:	4a3e      	ldr	r2, [pc, #248]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005f7a:	f043 0304 	orr.w	r3, r3, #4
 8005f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8005f80:	4b3c      	ldr	r3, [pc, #240]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f84:	f003 0304 	and.w	r3, r3, #4
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f8c:	4b39      	ldr	r3, [pc, #228]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f90:	4a38      	ldr	r2, [pc, #224]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005f92:	f043 0301 	orr.w	r3, r3, #1
 8005f96:	6313      	str	r3, [r2, #48]	; 0x30
 8005f98:	4b36      	ldr	r3, [pc, #216]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9c:	f003 0301 	and.w	r3, r3, #1
 8005fa0:	613b      	str	r3, [r7, #16]
 8005fa2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005fa4:	4b33      	ldr	r3, [pc, #204]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa8:	4a32      	ldr	r2, [pc, #200]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005faa:	f043 0302 	orr.w	r3, r3, #2
 8005fae:	6313      	str	r3, [r2, #48]	; 0x30
 8005fb0:	4b30      	ldr	r3, [pc, #192]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb4:	f003 0302 	and.w	r3, r3, #2
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005fbc:	4b2d      	ldr	r3, [pc, #180]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc0:	4a2c      	ldr	r2, [pc, #176]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005fc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fc6:	6313      	str	r3, [r2, #48]	; 0x30
 8005fc8:	4b2a      	ldr	r3, [pc, #168]	; (8006074 <HAL_ETH_MspInit+0x16c>)
 8005fca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd0:	60bb      	str	r3, [r7, #8]
 8005fd2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005fd4:	2332      	movs	r3, #50	; 0x32
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fd8:	2302      	movs	r3, #2
 8005fda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005fe4:	230b      	movs	r3, #11
 8005fe6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fe8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fec:	4619      	mov	r1, r3
 8005fee:	4822      	ldr	r0, [pc, #136]	; (8006078 <HAL_ETH_MspInit+0x170>)
 8005ff0:	f7fc fff6 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005ff4:	2386      	movs	r3, #134	; 0x86
 8005ff6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ff8:	2302      	movs	r3, #2
 8005ffa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006000:	2303      	movs	r3, #3
 8006002:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006004:	230b      	movs	r3, #11
 8006006:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800600c:	4619      	mov	r1, r3
 800600e:	481b      	ldr	r0, [pc, #108]	; (800607c <HAL_ETH_MspInit+0x174>)
 8006010:	f7fc ffe6 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006014:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800601a:	2302      	movs	r3, #2
 800601c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800601e:	2300      	movs	r3, #0
 8006020:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006022:	2303      	movs	r3, #3
 8006024:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006026:	230b      	movs	r3, #11
 8006028:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800602a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800602e:	4619      	mov	r1, r3
 8006030:	4813      	ldr	r0, [pc, #76]	; (8006080 <HAL_ETH_MspInit+0x178>)
 8006032:	f7fc ffd5 	bl	8002fe0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8006036:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800603a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800603c:	2302      	movs	r3, #2
 800603e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006040:	2300      	movs	r3, #0
 8006042:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006044:	2303      	movs	r3, #3
 8006046:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006048:	230b      	movs	r3, #11
 800604a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800604c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006050:	4619      	mov	r1, r3
 8006052:	480c      	ldr	r0, [pc, #48]	; (8006084 <HAL_ETH_MspInit+0x17c>)
 8006054:	f7fc ffc4 	bl	8002fe0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006058:	2200      	movs	r2, #0
 800605a:	2105      	movs	r1, #5
 800605c:	203d      	movs	r0, #61	; 0x3d
 800605e:	f7fb fc6b 	bl	8001938 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8006062:	203d      	movs	r0, #61	; 0x3d
 8006064:	f7fb fc84 	bl	8001970 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006068:	bf00      	nop
 800606a:	3738      	adds	r7, #56	; 0x38
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	40028000 	.word	0x40028000
 8006074:	40023800 	.word	0x40023800
 8006078:	40020800 	.word	0x40020800
 800607c:	40020000 	.word	0x40020000
 8006080:	40020400 	.word	0x40020400
 8006084:	40021800 	.word	0x40021800

08006088 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800608c:	4802      	ldr	r0, [pc, #8]	; (8006098 <ETH_PHY_IO_Init+0x10>)
 800608e:	f7fc fb41 	bl	8002714 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8006092:	2300      	movs	r3, #0
}
 8006094:	4618      	mov	r0, r3
 8006096:	bd80      	pop	{r7, pc}
 8006098:	20004dc0 	.word	0x20004dc0

0800609c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800609c:	b480      	push	{r7}
 800609e:	af00      	add	r7, sp, #0
  return 0;
 80060a0:	2300      	movs	r3, #0
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	68ba      	ldr	r2, [r7, #8]
 80060bc:	68f9      	ldr	r1, [r7, #12]
 80060be:	4807      	ldr	r0, [pc, #28]	; (80060dc <ETH_PHY_IO_ReadReg+0x30>)
 80060c0:	f7fc f990 	bl	80023e4 <HAL_ETH_ReadPHYRegister>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d002      	beq.n	80060d0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80060ca:	f04f 33ff 	mov.w	r3, #4294967295
 80060ce:	e000      	b.n	80060d2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3710      	adds	r7, #16
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}
 80060da:	bf00      	nop
 80060dc:	20004dc0 	.word	0x20004dc0

080060e0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b084      	sub	sp, #16
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	68ba      	ldr	r2, [r7, #8]
 80060f0:	68f9      	ldr	r1, [r7, #12]
 80060f2:	4807      	ldr	r0, [pc, #28]	; (8006110 <ETH_PHY_IO_WriteReg+0x30>)
 80060f4:	f7fc f9c1 	bl	800247a <HAL_ETH_WritePHYRegister>
 80060f8:	4603      	mov	r3, r0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d002      	beq.n	8006104 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80060fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006102:	e000      	b.n	8006106 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8006104:	2300      	movs	r3, #0
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	20004dc0 	.word	0x20004dc0

08006114 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006118:	f7fb fa2a 	bl	8001570 <HAL_GetTick>
 800611c:	4603      	mov	r3, r0
}
 800611e:	4618      	mov	r0, r3
 8006120:	bd80      	pop	{r7, pc}
	...

08006124 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b0a0      	sub	sp, #128	; 0x80
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800612c:	f107 0308 	add.w	r3, r7, #8
 8006130:	2264      	movs	r2, #100	; 0x64
 8006132:	2100      	movs	r1, #0
 8006134:	4618      	mov	r0, r3
 8006136:	f010 ff36 	bl	8016fa6 <memset>
  int32_t PHYLinkState = 0;
 800613a:	2300      	movs	r3, #0
 800613c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800613e:	2300      	movs	r3, #0
 8006140:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006142:	2300      	movs	r3, #0
 8006144:	67bb      	str	r3, [r7, #120]	; 0x78
 8006146:	2300      	movs	r3, #0
 8006148:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800614e:	483a      	ldr	r0, [pc, #232]	; (8006238 <ethernet_link_thread+0x114>)
 8006150:	f7fb f95d 	bl	800140e <LAN8742_GetLinkState>
 8006154:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8006156:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006158:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800615c:	089b      	lsrs	r3, r3, #2
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00c      	beq.n	8006182 <ethernet_link_thread+0x5e>
 8006168:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800616a:	2b01      	cmp	r3, #1
 800616c:	dc09      	bgt.n	8006182 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800616e:	4833      	ldr	r0, [pc, #204]	; (800623c <ethernet_link_thread+0x118>)
 8006170:	f7fb fdf2 	bl	8001d58 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8006174:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006176:	f005 fb7f 	bl	800b878 <netif_set_down>
    netif_set_link_down(netif);
 800617a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800617c:	f005 fc00 	bl	800b980 <netif_set_link_down>
 8006180:	e055      	b.n	800622e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8006182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006184:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006188:	f003 0304 	and.w	r3, r3, #4
 800618c:	2b00      	cmp	r3, #0
 800618e:	d14e      	bne.n	800622e <ethernet_link_thread+0x10a>
 8006190:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006192:	2b01      	cmp	r3, #1
 8006194:	dd4b      	ble.n	800622e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8006196:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006198:	3b02      	subs	r3, #2
 800619a:	2b03      	cmp	r3, #3
 800619c:	d82a      	bhi.n	80061f4 <ethernet_link_thread+0xd0>
 800619e:	a201      	add	r2, pc, #4	; (adr r2, 80061a4 <ethernet_link_thread+0x80>)
 80061a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a4:	080061b5 	.word	0x080061b5
 80061a8:	080061c7 	.word	0x080061c7
 80061ac:	080061d7 	.word	0x080061d7
 80061b0:	080061e7 	.word	0x080061e7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80061b4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061b8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80061ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061be:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80061c0:	2301      	movs	r3, #1
 80061c2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80061c4:	e017      	b.n	80061f6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80061c6:	2300      	movs	r3, #0
 80061c8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80061ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061ce:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80061d0:	2301      	movs	r3, #1
 80061d2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80061d4:	e00f      	b.n	80061f6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80061d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061da:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80061dc:	2300      	movs	r3, #0
 80061de:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80061e0:	2301      	movs	r3, #1
 80061e2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80061e4:	e007      	b.n	80061f6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80061e6:	2300      	movs	r3, #0
 80061e8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80061ea:	2300      	movs	r3, #0
 80061ec:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80061ee:	2301      	movs	r3, #1
 80061f0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80061f2:	e000      	b.n	80061f6 <ethernet_link_thread+0xd2>
    default:
      break;
 80061f4:	bf00      	nop
    }

    if(linkchanged)
 80061f6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d018      	beq.n	800622e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80061fc:	f107 0308 	add.w	r3, r7, #8
 8006200:	4619      	mov	r1, r3
 8006202:	480e      	ldr	r0, [pc, #56]	; (800623c <ethernet_link_thread+0x118>)
 8006204:	f7fc f982 	bl	800250c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006208:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800620a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800620c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800620e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006210:	f107 0308 	add.w	r3, r7, #8
 8006214:	4619      	mov	r1, r3
 8006216:	4809      	ldr	r0, [pc, #36]	; (800623c <ethernet_link_thread+0x118>)
 8006218:	f7fc fa62 	bl	80026e0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800621c:	4807      	ldr	r0, [pc, #28]	; (800623c <ethernet_link_thread+0x118>)
 800621e:	f7fb fcad 	bl	8001b7c <HAL_ETH_Start>
      netif_set_up(netif);
 8006222:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006224:	f005 faaa 	bl	800b77c <netif_set_up>
      netif_set_link_up(netif);
 8006228:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800622a:	f005 fb69 	bl	800b900 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800622e:	2064      	movs	r0, #100	; 0x64
 8006230:	f000 fa02 	bl	8006638 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006234:	e78b      	b.n	800614e <ethernet_link_thread+0x2a>
 8006236:	bf00      	nop
 8006238:	20004ea8 	.word	0x20004ea8
 800623c:	20004dc0 	.word	0x20004dc0

08006240 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af02      	add	r7, sp, #8
 8006246:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006248:	4812      	ldr	r0, [pc, #72]	; (8006294 <HAL_ETH_RxAllocateCallback+0x54>)
 800624a:	f004 ff47 	bl	800b0dc <memp_malloc_pool>
 800624e:	60f8      	str	r0, [r7, #12]
  if (p)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d014      	beq.n	8006280 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f103 0220 	add.w	r2, r3, #32
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	4a0d      	ldr	r2, [pc, #52]	; (8006298 <HAL_ETH_RxAllocateCallback+0x58>)
 8006264:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800626e:	9201      	str	r2, [sp, #4]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2241      	movs	r2, #65	; 0x41
 8006276:	2100      	movs	r1, #0
 8006278:	2000      	movs	r0, #0
 800627a:	f005 fee7 	bl	800c04c <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800627e:	e005      	b.n	800628c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006280:	4b06      	ldr	r3, [pc, #24]	; (800629c <HAL_ETH_RxAllocateCallback+0x5c>)
 8006282:	2201      	movs	r2, #1
 8006284:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2200      	movs	r2, #0
 800628a:	601a      	str	r2, [r3, #0]
}
 800628c:	bf00      	nop
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	0801afcc 	.word	0x0801afcc
 8006298:	08005eb9 	.word	0x08005eb9
 800629c:	20004db4 	.word	0x20004db4

080062a0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b088      	sub	sp, #32
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
 80062ac:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80062b6:	2300      	movs	r3, #0
 80062b8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	3b20      	subs	r3, #32
 80062be:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80062c0:	69fb      	ldr	r3, [r7, #28]
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	2200      	movs	r2, #0
 80062ca:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80062cc:	69fb      	ldr	r3, [r7, #28]
 80062ce:	887a      	ldrh	r2, [r7, #2]
 80062d0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d103      	bne.n	80062e2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	69fa      	ldr	r2, [r7, #28]
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	e003      	b.n	80062ea <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	69fa      	ldr	r2, [r7, #28]
 80062e8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	69fa      	ldr	r2, [r7, #28]
 80062ee:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80062f0:	69bb      	ldr	r3, [r7, #24]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	61fb      	str	r3, [r7, #28]
 80062f6:	e009      	b.n	800630c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	891a      	ldrh	r2, [r3, #8]
 80062fc:	887b      	ldrh	r3, [r7, #2]
 80062fe:	4413      	add	r3, r2
 8006300:	b29a      	uxth	r2, r3
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1f2      	bne.n	80062f8 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006312:	887b      	ldrh	r3, [r7, #2]
 8006314:	4619      	mov	r1, r3
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f7ff fb2c 	bl	8005974 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800631c:	bf00      	nop
 800631e:	3720      	adds	r7, #32
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b082      	sub	sp, #8
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f006 f847 	bl	800c3c0 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006332:	bf00      	nop
 8006334:	3708      	adds	r7, #8
 8006336:	46bd      	mov	sp, r7
 8006338:	bd80      	pop	{r7, pc}

0800633a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800633a:	b480      	push	{r7}
 800633c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800633e:	bf00      	nop
 8006340:	46bd      	mov	sp, r7
 8006342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006346:	4770      	bx	lr

08006348 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800634e:	f3ef 8305 	mrs	r3, IPSR
 8006352:	60bb      	str	r3, [r7, #8]
  return(result);
 8006354:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10f      	bne.n	800637a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800635a:	f3ef 8310 	mrs	r3, PRIMASK
 800635e:	607b      	str	r3, [r7, #4]
  return(result);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d105      	bne.n	8006372 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006366:	f3ef 8311 	mrs	r3, BASEPRI
 800636a:	603b      	str	r3, [r7, #0]
  return(result);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d007      	beq.n	8006382 <osKernelInitialize+0x3a>
 8006372:	4b0e      	ldr	r3, [pc, #56]	; (80063ac <osKernelInitialize+0x64>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b02      	cmp	r3, #2
 8006378:	d103      	bne.n	8006382 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800637a:	f06f 0305 	mvn.w	r3, #5
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	e00c      	b.n	800639c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006382:	4b0a      	ldr	r3, [pc, #40]	; (80063ac <osKernelInitialize+0x64>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d105      	bne.n	8006396 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800638a:	4b08      	ldr	r3, [pc, #32]	; (80063ac <osKernelInitialize+0x64>)
 800638c:	2201      	movs	r2, #1
 800638e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006390:	2300      	movs	r3, #0
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	e002      	b.n	800639c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8006396:	f04f 33ff 	mov.w	r3, #4294967295
 800639a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800639c:	68fb      	ldr	r3, [r7, #12]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3714      	adds	r7, #20
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	20004ec8 	.word	0x20004ec8

080063b0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063b6:	f3ef 8305 	mrs	r3, IPSR
 80063ba:	60bb      	str	r3, [r7, #8]
  return(result);
 80063bc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d10f      	bne.n	80063e2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063c2:	f3ef 8310 	mrs	r3, PRIMASK
 80063c6:	607b      	str	r3, [r7, #4]
  return(result);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d105      	bne.n	80063da <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063ce:	f3ef 8311 	mrs	r3, BASEPRI
 80063d2:	603b      	str	r3, [r7, #0]
  return(result);
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d007      	beq.n	80063ea <osKernelStart+0x3a>
 80063da:	4b0f      	ldr	r3, [pc, #60]	; (8006418 <osKernelStart+0x68>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d103      	bne.n	80063ea <osKernelStart+0x3a>
    stat = osErrorISR;
 80063e2:	f06f 0305 	mvn.w	r3, #5
 80063e6:	60fb      	str	r3, [r7, #12]
 80063e8:	e010      	b.n	800640c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80063ea:	4b0b      	ldr	r3, [pc, #44]	; (8006418 <osKernelStart+0x68>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d109      	bne.n	8006406 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80063f2:	f7ff ffa2 	bl	800633a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80063f6:	4b08      	ldr	r3, [pc, #32]	; (8006418 <osKernelStart+0x68>)
 80063f8:	2202      	movs	r2, #2
 80063fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80063fc:	f002 fa22 	bl	8008844 <vTaskStartScheduler>
      stat = osOK;
 8006400:	2300      	movs	r3, #0
 8006402:	60fb      	str	r3, [r7, #12]
 8006404:	e002      	b.n	800640c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006406:	f04f 33ff 	mov.w	r3, #4294967295
 800640a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800640c:	68fb      	ldr	r3, [r7, #12]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	20004ec8 	.word	0x20004ec8

0800641c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800641c:	b580      	push	{r7, lr}
 800641e:	b084      	sub	sp, #16
 8006420:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006422:	f3ef 8305 	mrs	r3, IPSR
 8006426:	60bb      	str	r3, [r7, #8]
  return(result);
 8006428:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800642a:	2b00      	cmp	r3, #0
 800642c:	d10f      	bne.n	800644e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800642e:	f3ef 8310 	mrs	r3, PRIMASK
 8006432:	607b      	str	r3, [r7, #4]
  return(result);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d105      	bne.n	8006446 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800643a:	f3ef 8311 	mrs	r3, BASEPRI
 800643e:	603b      	str	r3, [r7, #0]
  return(result);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d007      	beq.n	8006456 <osKernelGetTickCount+0x3a>
 8006446:	4b08      	ldr	r3, [pc, #32]	; (8006468 <osKernelGetTickCount+0x4c>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	2b02      	cmp	r3, #2
 800644c:	d103      	bne.n	8006456 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800644e:	f002 fb2b 	bl	8008aa8 <xTaskGetTickCountFromISR>
 8006452:	60f8      	str	r0, [r7, #12]
 8006454:	e002      	b.n	800645c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8006456:	f002 fb17 	bl	8008a88 <xTaskGetTickCount>
 800645a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800645c:	68fb      	ldr	r3, [r7, #12]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3710      	adds	r7, #16
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20004ec8 	.word	0x20004ec8

0800646c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800646c:	b580      	push	{r7, lr}
 800646e:	b090      	sub	sp, #64	; 0x40
 8006470:	af04      	add	r7, sp, #16
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006478:	2300      	movs	r3, #0
 800647a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800647c:	f3ef 8305 	mrs	r3, IPSR
 8006480:	61fb      	str	r3, [r7, #28]
  return(result);
 8006482:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006484:	2b00      	cmp	r3, #0
 8006486:	f040 808f 	bne.w	80065a8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800648a:	f3ef 8310 	mrs	r3, PRIMASK
 800648e:	61bb      	str	r3, [r7, #24]
  return(result);
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d105      	bne.n	80064a2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006496:	f3ef 8311 	mrs	r3, BASEPRI
 800649a:	617b      	str	r3, [r7, #20]
  return(result);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <osThreadNew+0x3e>
 80064a2:	4b44      	ldr	r3, [pc, #272]	; (80065b4 <osThreadNew+0x148>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	2b02      	cmp	r3, #2
 80064a8:	d07e      	beq.n	80065a8 <osThreadNew+0x13c>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d07b      	beq.n	80065a8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80064b0:	2380      	movs	r3, #128	; 0x80
 80064b2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80064b4:	2318      	movs	r3, #24
 80064b6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80064b8:	2300      	movs	r3, #0
 80064ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80064bc:	f04f 33ff 	mov.w	r3, #4294967295
 80064c0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d045      	beq.n	8006554 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <osThreadNew+0x6a>
        name = attr->name;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80064e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d008      	beq.n	80064fc <osThreadNew+0x90>
 80064ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ec:	2b38      	cmp	r3, #56	; 0x38
 80064ee:	d805      	bhi.n	80064fc <osThreadNew+0x90>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f003 0301 	and.w	r3, r3, #1
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <osThreadNew+0x94>
        return (NULL);
 80064fc:	2300      	movs	r3, #0
 80064fe:	e054      	b.n	80065aa <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d003      	beq.n	8006510 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	695b      	ldr	r3, [r3, #20]
 800650c:	089b      	lsrs	r3, r3, #2
 800650e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00e      	beq.n	8006536 <osThreadNew+0xca>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	2bbb      	cmp	r3, #187	; 0xbb
 800651e:	d90a      	bls.n	8006536 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006524:	2b00      	cmp	r3, #0
 8006526:	d006      	beq.n	8006536 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <osThreadNew+0xca>
        mem = 1;
 8006530:	2301      	movs	r3, #1
 8006532:	623b      	str	r3, [r7, #32]
 8006534:	e010      	b.n	8006558 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10c      	bne.n	8006558 <osThreadNew+0xec>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d108      	bne.n	8006558 <osThreadNew+0xec>
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d104      	bne.n	8006558 <osThreadNew+0xec>
          mem = 0;
 800654e:	2300      	movs	r3, #0
 8006550:	623b      	str	r3, [r7, #32]
 8006552:	e001      	b.n	8006558 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006554:	2300      	movs	r3, #0
 8006556:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006558:	6a3b      	ldr	r3, [r7, #32]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d110      	bne.n	8006580 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006566:	9202      	str	r2, [sp, #8]
 8006568:	9301      	str	r3, [sp, #4]
 800656a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800656c:	9300      	str	r3, [sp, #0]
 800656e:	68bb      	ldr	r3, [r7, #8]
 8006570:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006572:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006574:	68f8      	ldr	r0, [r7, #12]
 8006576:	f001 fe93 	bl	80082a0 <xTaskCreateStatic>
 800657a:	4603      	mov	r3, r0
 800657c:	613b      	str	r3, [r7, #16]
 800657e:	e013      	b.n	80065a8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d110      	bne.n	80065a8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006588:	b29a      	uxth	r2, r3
 800658a:	f107 0310 	add.w	r3, r7, #16
 800658e:	9301      	str	r3, [sp, #4]
 8006590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006592:	9300      	str	r3, [sp, #0]
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006598:	68f8      	ldr	r0, [r7, #12]
 800659a:	f001 fee4 	bl	8008366 <xTaskCreate>
 800659e:	4603      	mov	r3, r0
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d001      	beq.n	80065a8 <osThreadNew+0x13c>
          hTask = NULL;
 80065a4:	2300      	movs	r3, #0
 80065a6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80065a8:	693b      	ldr	r3, [r7, #16]
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	3730      	adds	r7, #48	; 0x30
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20004ec8 	.word	0x20004ec8

080065b8 <osThreadTerminate>:
  vTaskDelete (NULL);
#endif
  for (;;);
}

osStatus_t osThreadTerminate (osThreadId_t thread_id) {
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b088      	sub	sp, #32
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065c4:	f3ef 8305 	mrs	r3, IPSR
 80065c8:	613b      	str	r3, [r7, #16]
  return(result);
 80065ca:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;
#ifndef USE_FreeRTOS_HEAP_1
  eTaskState tstate;

  if (IS_IRQ()) {
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10f      	bne.n	80065f0 <osThreadTerminate+0x38>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065d0:	f3ef 8310 	mrs	r3, PRIMASK
 80065d4:	60fb      	str	r3, [r7, #12]
  return(result);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d105      	bne.n	80065e8 <osThreadTerminate+0x30>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065dc:	f3ef 8311 	mrs	r3, BASEPRI
 80065e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d007      	beq.n	80065f8 <osThreadTerminate+0x40>
 80065e8:	4b12      	ldr	r3, [pc, #72]	; (8006634 <osThreadTerminate+0x7c>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d103      	bne.n	80065f8 <osThreadTerminate+0x40>
    stat = osErrorISR;
 80065f0:	f06f 0305 	mvn.w	r3, #5
 80065f4:	61fb      	str	r3, [r7, #28]
 80065f6:	e017      	b.n	8006628 <osThreadTerminate+0x70>
  }
  else if (hTask == NULL) {
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d103      	bne.n	8006606 <osThreadTerminate+0x4e>
    stat = osErrorParameter;
 80065fe:	f06f 0303 	mvn.w	r3, #3
 8006602:	61fb      	str	r3, [r7, #28]
 8006604:	e010      	b.n	8006628 <osThreadTerminate+0x70>
  }
  else {
    tstate = eTaskGetState (hTask);
 8006606:	69b8      	ldr	r0, [r7, #24]
 8006608:	f002 f8b4 	bl	8008774 <eTaskGetState>
 800660c:	4603      	mov	r3, r0
 800660e:	75fb      	strb	r3, [r7, #23]

    if (tstate != eDeleted) {
 8006610:	7dfb      	ldrb	r3, [r7, #23]
 8006612:	2b04      	cmp	r3, #4
 8006614:	d005      	beq.n	8006622 <osThreadTerminate+0x6a>
      stat = osOK;
 8006616:	2300      	movs	r3, #0
 8006618:	61fb      	str	r3, [r7, #28]
      vTaskDelete (hTask);
 800661a:	69b8      	ldr	r0, [r7, #24]
 800661c:	f002 f800 	bl	8008620 <vTaskDelete>
 8006620:	e002      	b.n	8006628 <osThreadTerminate+0x70>
    } else {
      stat = osErrorResource;
 8006622:	f06f 0302 	mvn.w	r3, #2
 8006626:	61fb      	str	r3, [r7, #28]
  }
#else
  stat = osError;
#endif

  return (stat);
 8006628:	69fb      	ldr	r3, [r7, #28]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3720      	adds	r7, #32
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20004ec8 	.word	0x20004ec8

08006638 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b086      	sub	sp, #24
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006640:	f3ef 8305 	mrs	r3, IPSR
 8006644:	613b      	str	r3, [r7, #16]
  return(result);
 8006646:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006648:	2b00      	cmp	r3, #0
 800664a:	d10f      	bne.n	800666c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800664c:	f3ef 8310 	mrs	r3, PRIMASK
 8006650:	60fb      	str	r3, [r7, #12]
  return(result);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d105      	bne.n	8006664 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006658:	f3ef 8311 	mrs	r3, BASEPRI
 800665c:	60bb      	str	r3, [r7, #8]
  return(result);
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d007      	beq.n	8006674 <osDelay+0x3c>
 8006664:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <osDelay+0x58>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b02      	cmp	r3, #2
 800666a:	d103      	bne.n	8006674 <osDelay+0x3c>
    stat = osErrorISR;
 800666c:	f06f 0305 	mvn.w	r3, #5
 8006670:	617b      	str	r3, [r7, #20]
 8006672:	e007      	b.n	8006684 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006674:	2300      	movs	r3, #0
 8006676:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d002      	beq.n	8006684 <osDelay+0x4c>
      vTaskDelay(ticks);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f002 f842 	bl	8008708 <vTaskDelay>
    }
  }

  return (stat);
 8006684:	697b      	ldr	r3, [r7, #20]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3718      	adds	r7, #24
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}
 800668e:	bf00      	nop
 8006690:	20004ec8 	.word	0x20004ec8

08006694 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006694:	b580      	push	{r7, lr}
 8006696:	b08a      	sub	sp, #40	; 0x28
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800669c:	2300      	movs	r3, #0
 800669e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066a0:	f3ef 8305 	mrs	r3, IPSR
 80066a4:	613b      	str	r3, [r7, #16]
  return(result);
 80066a6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	f040 8085 	bne.w	80067b8 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066ae:	f3ef 8310 	mrs	r3, PRIMASK
 80066b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d105      	bne.n	80066c6 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066ba:	f3ef 8311 	mrs	r3, BASEPRI
 80066be:	60bb      	str	r3, [r7, #8]
  return(result);
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d003      	beq.n	80066ce <osMutexNew+0x3a>
 80066c6:	4b3f      	ldr	r3, [pc, #252]	; (80067c4 <osMutexNew+0x130>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b02      	cmp	r3, #2
 80066cc:	d074      	beq.n	80067b8 <osMutexNew+0x124>
    if (attr != NULL) {
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d003      	beq.n	80066dc <osMutexNew+0x48>
      type = attr->attr_bits;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	623b      	str	r3, [r7, #32]
 80066da:	e001      	b.n	80066e0 <osMutexNew+0x4c>
    } else {
      type = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	f003 0301 	and.w	r3, r3, #1
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d002      	beq.n	80066f0 <osMutexNew+0x5c>
      rmtx = 1U;
 80066ea:	2301      	movs	r3, #1
 80066ec:	61fb      	str	r3, [r7, #28]
 80066ee:	e001      	b.n	80066f4 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80066f4:	6a3b      	ldr	r3, [r7, #32]
 80066f6:	f003 0308 	and.w	r3, r3, #8
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d15c      	bne.n	80067b8 <osMutexNew+0x124>
      mem = -1;
 80066fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006702:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d015      	beq.n	8006736 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d006      	beq.n	8006720 <osMutexNew+0x8c>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	68db      	ldr	r3, [r3, #12]
 8006716:	2b4f      	cmp	r3, #79	; 0x4f
 8006718:	d902      	bls.n	8006720 <osMutexNew+0x8c>
          mem = 1;
 800671a:	2301      	movs	r3, #1
 800671c:	61bb      	str	r3, [r7, #24]
 800671e:	e00c      	b.n	800673a <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	689b      	ldr	r3, [r3, #8]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d108      	bne.n	800673a <osMutexNew+0xa6>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d104      	bne.n	800673a <osMutexNew+0xa6>
            mem = 0;
 8006730:	2300      	movs	r3, #0
 8006732:	61bb      	str	r3, [r7, #24]
 8006734:	e001      	b.n	800673a <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 8006736:	2300      	movs	r3, #0
 8006738:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 800673a:	69bb      	ldr	r3, [r7, #24]
 800673c:	2b01      	cmp	r3, #1
 800673e:	d112      	bne.n	8006766 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 8006740:	69fb      	ldr	r3, [r7, #28]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d007      	beq.n	8006756 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	4619      	mov	r1, r3
 800674c:	2004      	movs	r0, #4
 800674e:	f000 fe1a 	bl	8007386 <xQueueCreateMutexStatic>
 8006752:	6278      	str	r0, [r7, #36]	; 0x24
 8006754:	e016      	b.n	8006784 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	4619      	mov	r1, r3
 800675c:	2001      	movs	r0, #1
 800675e:	f000 fe12 	bl	8007386 <xQueueCreateMutexStatic>
 8006762:	6278      	str	r0, [r7, #36]	; 0x24
 8006764:	e00e      	b.n	8006784 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 8006766:	69bb      	ldr	r3, [r7, #24]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10b      	bne.n	8006784 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d004      	beq.n	800677c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006772:	2004      	movs	r0, #4
 8006774:	f000 fdef 	bl	8007356 <xQueueCreateMutex>
 8006778:	6278      	str	r0, [r7, #36]	; 0x24
 800677a:	e003      	b.n	8006784 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800677c:	2001      	movs	r0, #1
 800677e:	f000 fdea 	bl	8007356 <xQueueCreateMutex>
 8006782:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00c      	beq.n	80067a4 <osMutexNew+0x110>
        if (attr != NULL) {
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d003      	beq.n	8006798 <osMutexNew+0x104>
          name = attr->name;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	e001      	b.n	800679c <osMutexNew+0x108>
        } else {
          name = NULL;
 8006798:	2300      	movs	r3, #0
 800679a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800679c:	6979      	ldr	r1, [r7, #20]
 800679e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067a0:	f001 fcf6 	bl	8008190 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80067a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d006      	beq.n	80067b8 <osMutexNew+0x124>
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d003      	beq.n	80067b8 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80067b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b2:	f043 0301 	orr.w	r3, r3, #1
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067ba:	4618      	mov	r0, r3
 80067bc:	3728      	adds	r7, #40	; 0x28
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20004ec8 	.word	0x20004ec8

080067c8 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b088      	sub	sp, #32
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f023 0301 	bic.w	r3, r3, #1
 80067d8:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f003 0301 	and.w	r3, r3, #1
 80067e0:	617b      	str	r3, [r7, #20]

  stat = osOK;
 80067e2:	2300      	movs	r3, #0
 80067e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80067e6:	f3ef 8305 	mrs	r3, IPSR
 80067ea:	613b      	str	r3, [r7, #16]
  return(result);
 80067ec:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d10f      	bne.n	8006812 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067f2:	f3ef 8310 	mrs	r3, PRIMASK
 80067f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d105      	bne.n	800680a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80067fe:	f3ef 8311 	mrs	r3, BASEPRI
 8006802:	60bb      	str	r3, [r7, #8]
  return(result);
 8006804:	68bb      	ldr	r3, [r7, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d007      	beq.n	800681a <osMutexAcquire+0x52>
 800680a:	4b1d      	ldr	r3, [pc, #116]	; (8006880 <osMutexAcquire+0xb8>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	2b02      	cmp	r3, #2
 8006810:	d103      	bne.n	800681a <osMutexAcquire+0x52>
    stat = osErrorISR;
 8006812:	f06f 0305 	mvn.w	r3, #5
 8006816:	61fb      	str	r3, [r7, #28]
 8006818:	e02c      	b.n	8006874 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d103      	bne.n	8006828 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006820:	f06f 0303 	mvn.w	r3, #3
 8006824:	61fb      	str	r3, [r7, #28]
 8006826:	e025      	b.n	8006874 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d011      	beq.n	8006852 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	69b8      	ldr	r0, [r7, #24]
 8006832:	f000 fdf9 	bl	8007428 <xQueueTakeMutexRecursive>
 8006836:	4603      	mov	r3, r0
 8006838:	2b01      	cmp	r3, #1
 800683a:	d01b      	beq.n	8006874 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 8006842:	f06f 0301 	mvn.w	r3, #1
 8006846:	61fb      	str	r3, [r7, #28]
 8006848:	e014      	b.n	8006874 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800684a:	f06f 0302 	mvn.w	r3, #2
 800684e:	61fb      	str	r3, [r7, #28]
 8006850:	e010      	b.n	8006874 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	69b8      	ldr	r0, [r7, #24]
 8006856:	f001 f9b3 	bl	8007bc0 <xQueueSemaphoreTake>
 800685a:	4603      	mov	r3, r0
 800685c:	2b01      	cmp	r3, #1
 800685e:	d009      	beq.n	8006874 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d003      	beq.n	800686e <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 8006866:	f06f 0301 	mvn.w	r3, #1
 800686a:	61fb      	str	r3, [r7, #28]
 800686c:	e002      	b.n	8006874 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 800686e:	f06f 0302 	mvn.w	r3, #2
 8006872:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006874:	69fb      	ldr	r3, [r7, #28]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3720      	adds	r7, #32
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20004ec8 	.word	0x20004ec8

08006884 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006884:	b580      	push	{r7, lr}
 8006886:	b088      	sub	sp, #32
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f023 0301 	bic.w	r3, r3, #1
 8006892:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800689c:	2300      	movs	r3, #0
 800689e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068a0:	f3ef 8305 	mrs	r3, IPSR
 80068a4:	613b      	str	r3, [r7, #16]
  return(result);
 80068a6:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d10f      	bne.n	80068cc <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068ac:	f3ef 8310 	mrs	r3, PRIMASK
 80068b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d105      	bne.n	80068c4 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068b8:	f3ef 8311 	mrs	r3, BASEPRI
 80068bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d007      	beq.n	80068d4 <osMutexRelease+0x50>
 80068c4:	4b16      	ldr	r3, [pc, #88]	; (8006920 <osMutexRelease+0x9c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	2b02      	cmp	r3, #2
 80068ca:	d103      	bne.n	80068d4 <osMutexRelease+0x50>
    stat = osErrorISR;
 80068cc:	f06f 0305 	mvn.w	r3, #5
 80068d0:	61fb      	str	r3, [r7, #28]
 80068d2:	e01f      	b.n	8006914 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 80068d4:	69bb      	ldr	r3, [r7, #24]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d103      	bne.n	80068e2 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 80068da:	f06f 0303 	mvn.w	r3, #3
 80068de:	61fb      	str	r3, [r7, #28]
 80068e0:	e018      	b.n	8006914 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d009      	beq.n	80068fc <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80068e8:	69b8      	ldr	r0, [r7, #24]
 80068ea:	f000 fd67 	bl	80073bc <xQueueGiveMutexRecursive>
 80068ee:	4603      	mov	r3, r0
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d00f      	beq.n	8006914 <osMutexRelease+0x90>
        stat = osErrorResource;
 80068f4:	f06f 0302 	mvn.w	r3, #2
 80068f8:	61fb      	str	r3, [r7, #28]
 80068fa:	e00b      	b.n	8006914 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80068fc:	2300      	movs	r3, #0
 80068fe:	2200      	movs	r2, #0
 8006900:	2100      	movs	r1, #0
 8006902:	69b8      	ldr	r0, [r7, #24]
 8006904:	f000 fe3a 	bl	800757c <xQueueGenericSend>
 8006908:	4603      	mov	r3, r0
 800690a:	2b01      	cmp	r3, #1
 800690c:	d002      	beq.n	8006914 <osMutexRelease+0x90>
        stat = osErrorResource;
 800690e:	f06f 0302 	mvn.w	r3, #2
 8006912:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 8006914:	69fb      	ldr	r3, [r7, #28]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3720      	adds	r7, #32
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	20004ec8 	.word	0x20004ec8

08006924 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8006924:	b580      	push	{r7, lr}
 8006926:	b08c      	sub	sp, #48	; 0x30
 8006928:	af02      	add	r7, sp, #8
 800692a:	60f8      	str	r0, [r7, #12]
 800692c:	60b9      	str	r1, [r7, #8]
 800692e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006930:	2300      	movs	r3, #0
 8006932:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006934:	f3ef 8305 	mrs	r3, IPSR
 8006938:	61bb      	str	r3, [r7, #24]
  return(result);
 800693a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800693c:	2b00      	cmp	r3, #0
 800693e:	f040 8086 	bne.w	8006a4e <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006942:	f3ef 8310 	mrs	r3, PRIMASK
 8006946:	617b      	str	r3, [r7, #20]
  return(result);
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d105      	bne.n	800695a <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800694e:	f3ef 8311 	mrs	r3, BASEPRI
 8006952:	613b      	str	r3, [r7, #16]
  return(result);
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d003      	beq.n	8006962 <osSemaphoreNew+0x3e>
 800695a:	4b3f      	ldr	r3, [pc, #252]	; (8006a58 <osSemaphoreNew+0x134>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d075      	beq.n	8006a4e <osSemaphoreNew+0x12a>
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d072      	beq.n	8006a4e <osSemaphoreNew+0x12a>
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	429a      	cmp	r2, r3
 800696e:	d86e      	bhi.n	8006a4e <osSemaphoreNew+0x12a>
    mem = -1;
 8006970:	f04f 33ff 	mov.w	r3, #4294967295
 8006974:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d015      	beq.n	80069a8 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	689b      	ldr	r3, [r3, #8]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d006      	beq.n	8006992 <osSemaphoreNew+0x6e>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	68db      	ldr	r3, [r3, #12]
 8006988:	2b4f      	cmp	r3, #79	; 0x4f
 800698a:	d902      	bls.n	8006992 <osSemaphoreNew+0x6e>
        mem = 1;
 800698c:	2301      	movs	r3, #1
 800698e:	623b      	str	r3, [r7, #32]
 8006990:	e00c      	b.n	80069ac <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d108      	bne.n	80069ac <osSemaphoreNew+0x88>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68db      	ldr	r3, [r3, #12]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d104      	bne.n	80069ac <osSemaphoreNew+0x88>
          mem = 0;
 80069a2:	2300      	movs	r3, #0
 80069a4:	623b      	str	r3, [r7, #32]
 80069a6:	e001      	b.n	80069ac <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80069a8:	2300      	movs	r3, #0
 80069aa:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80069ac:	6a3b      	ldr	r3, [r7, #32]
 80069ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069b2:	d04c      	beq.n	8006a4e <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d128      	bne.n	8006a0c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80069ba:	6a3b      	ldr	r3, [r7, #32]
 80069bc:	2b01      	cmp	r3, #1
 80069be:	d10a      	bne.n	80069d6 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	2203      	movs	r2, #3
 80069c6:	9200      	str	r2, [sp, #0]
 80069c8:	2200      	movs	r2, #0
 80069ca:	2100      	movs	r1, #0
 80069cc:	2001      	movs	r0, #1
 80069ce:	f000 fbc1 	bl	8007154 <xQueueGenericCreateStatic>
 80069d2:	6278      	str	r0, [r7, #36]	; 0x24
 80069d4:	e005      	b.n	80069e2 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 80069d6:	2203      	movs	r2, #3
 80069d8:	2100      	movs	r1, #0
 80069da:	2001      	movs	r0, #1
 80069dc:	f000 fc3c 	bl	8007258 <xQueueGenericCreate>
 80069e0:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80069e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d022      	beq.n	8006a2e <osSemaphoreNew+0x10a>
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d01f      	beq.n	8006a2e <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80069ee:	2300      	movs	r3, #0
 80069f0:	2200      	movs	r2, #0
 80069f2:	2100      	movs	r1, #0
 80069f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069f6:	f000 fdc1 	bl	800757c <xQueueGenericSend>
 80069fa:	4603      	mov	r3, r0
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d016      	beq.n	8006a2e <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006a00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a02:	f001 fa77 	bl	8007ef4 <vQueueDelete>
            hSemaphore = NULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	627b      	str	r3, [r7, #36]	; 0x24
 8006a0a:	e010      	b.n	8006a2e <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006a0c:	6a3b      	ldr	r3, [r7, #32]
 8006a0e:	2b01      	cmp	r3, #1
 8006a10:	d108      	bne.n	8006a24 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	461a      	mov	r2, r3
 8006a18:	68b9      	ldr	r1, [r7, #8]
 8006a1a:	68f8      	ldr	r0, [r7, #12]
 8006a1c:	f000 fd3c 	bl	8007498 <xQueueCreateCountingSemaphoreStatic>
 8006a20:	6278      	str	r0, [r7, #36]	; 0x24
 8006a22:	e004      	b.n	8006a2e <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8006a24:	68b9      	ldr	r1, [r7, #8]
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 fd71 	bl	800750e <xQueueCreateCountingSemaphore>
 8006a2c:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006a2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d00c      	beq.n	8006a4e <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d003      	beq.n	8006a42 <osSemaphoreNew+0x11e>
          name = attr->name;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	61fb      	str	r3, [r7, #28]
 8006a40:	e001      	b.n	8006a46 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 8006a42:	2300      	movs	r3, #0
 8006a44:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8006a46:	69f9      	ldr	r1, [r7, #28]
 8006a48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a4a:	f001 fba1 	bl	8008190 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	3728      	adds	r7, #40	; 0x28
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20004ec8 	.word	0x20004ec8

08006a5c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b088      	sub	sp, #32
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d103      	bne.n	8006a7c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006a74:	f06f 0303 	mvn.w	r3, #3
 8006a78:	61fb      	str	r3, [r7, #28]
 8006a7a:	e04b      	b.n	8006b14 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a7c:	f3ef 8305 	mrs	r3, IPSR
 8006a80:	617b      	str	r3, [r7, #20]
  return(result);
 8006a82:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10f      	bne.n	8006aa8 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a88:	f3ef 8310 	mrs	r3, PRIMASK
 8006a8c:	613b      	str	r3, [r7, #16]
  return(result);
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d105      	bne.n	8006aa0 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006a94:	f3ef 8311 	mrs	r3, BASEPRI
 8006a98:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d026      	beq.n	8006aee <osSemaphoreAcquire+0x92>
 8006aa0:	4b1f      	ldr	r3, [pc, #124]	; (8006b20 <osSemaphoreAcquire+0xc4>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	2b02      	cmp	r3, #2
 8006aa6:	d122      	bne.n	8006aee <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d003      	beq.n	8006ab6 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006aae:	f06f 0303 	mvn.w	r3, #3
 8006ab2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006ab4:	e02d      	b.n	8006b12 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006aba:	f107 0308 	add.w	r3, r7, #8
 8006abe:	461a      	mov	r2, r3
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	69b8      	ldr	r0, [r7, #24]
 8006ac4:	f001 f990 	bl	8007de8 <xQueueReceiveFromISR>
 8006ac8:	4603      	mov	r3, r0
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d003      	beq.n	8006ad6 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006ace:	f06f 0302 	mvn.w	r3, #2
 8006ad2:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006ad4:	e01d      	b.n	8006b12 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006ad6:	68bb      	ldr	r3, [r7, #8]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d01a      	beq.n	8006b12 <osSemaphoreAcquire+0xb6>
 8006adc:	4b11      	ldr	r3, [pc, #68]	; (8006b24 <osSemaphoreAcquire+0xc8>)
 8006ade:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ae2:	601a      	str	r2, [r3, #0]
 8006ae4:	f3bf 8f4f 	dsb	sy
 8006ae8:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006aec:	e011      	b.n	8006b12 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	69b8      	ldr	r0, [r7, #24]
 8006af2:	f001 f865 	bl	8007bc0 <xQueueSemaphoreTake>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d00b      	beq.n	8006b14 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d003      	beq.n	8006b0a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006b02:	f06f 0301 	mvn.w	r3, #1
 8006b06:	61fb      	str	r3, [r7, #28]
 8006b08:	e004      	b.n	8006b14 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006b0a:	f06f 0302 	mvn.w	r3, #2
 8006b0e:	61fb      	str	r3, [r7, #28]
 8006b10:	e000      	b.n	8006b14 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006b12:	bf00      	nop
      }
    }
  }

  return (stat);
 8006b14:	69fb      	ldr	r3, [r7, #28]
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	3720      	adds	r7, #32
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}
 8006b1e:	bf00      	nop
 8006b20:	20004ec8 	.word	0x20004ec8
 8006b24:	e000ed04 	.word	0xe000ed04

08006b28 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006b34:	2300      	movs	r3, #0
 8006b36:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d103      	bne.n	8006b46 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006b3e:	f06f 0303 	mvn.w	r3, #3
 8006b42:	61fb      	str	r3, [r7, #28]
 8006b44:	e03e      	b.n	8006bc4 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b46:	f3ef 8305 	mrs	r3, IPSR
 8006b4a:	617b      	str	r3, [r7, #20]
  return(result);
 8006b4c:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d10f      	bne.n	8006b72 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b52:	f3ef 8310 	mrs	r3, PRIMASK
 8006b56:	613b      	str	r3, [r7, #16]
  return(result);
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d105      	bne.n	8006b6a <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b5e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b62:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d01e      	beq.n	8006ba8 <osSemaphoreRelease+0x80>
 8006b6a:	4b19      	ldr	r3, [pc, #100]	; (8006bd0 <osSemaphoreRelease+0xa8>)
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d11a      	bne.n	8006ba8 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006b72:	2300      	movs	r3, #0
 8006b74:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006b76:	f107 0308 	add.w	r3, r7, #8
 8006b7a:	4619      	mov	r1, r3
 8006b7c:	69b8      	ldr	r0, [r7, #24]
 8006b7e:	f000 fea3 	bl	80078c8 <xQueueGiveFromISR>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b01      	cmp	r3, #1
 8006b86:	d003      	beq.n	8006b90 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006b88:	f06f 0302 	mvn.w	r3, #2
 8006b8c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006b8e:	e018      	b.n	8006bc2 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006b90:	68bb      	ldr	r3, [r7, #8]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d015      	beq.n	8006bc2 <osSemaphoreRelease+0x9a>
 8006b96:	4b0f      	ldr	r3, [pc, #60]	; (8006bd4 <osSemaphoreRelease+0xac>)
 8006b98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	f3bf 8f4f 	dsb	sy
 8006ba2:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006ba6:	e00c      	b.n	8006bc2 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006ba8:	2300      	movs	r3, #0
 8006baa:	2200      	movs	r2, #0
 8006bac:	2100      	movs	r1, #0
 8006bae:	69b8      	ldr	r0, [r7, #24]
 8006bb0:	f000 fce4 	bl	800757c <xQueueGenericSend>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d004      	beq.n	8006bc4 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006bba:	f06f 0302 	mvn.w	r3, #2
 8006bbe:	61fb      	str	r3, [r7, #28]
 8006bc0:	e000      	b.n	8006bc4 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006bc2:	bf00      	nop
    }
  }

  return (stat);
 8006bc4:	69fb      	ldr	r3, [r7, #28]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3720      	adds	r7, #32
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	20004ec8 	.word	0x20004ec8
 8006bd4:	e000ed04 	.word	0xe000ed04

08006bd8 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b08c      	sub	sp, #48	; 0x30
 8006bdc:	af02      	add	r7, sp, #8
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006be4:	2300      	movs	r3, #0
 8006be6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006be8:	f3ef 8305 	mrs	r3, IPSR
 8006bec:	61bb      	str	r3, [r7, #24]
  return(result);
 8006bee:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d16f      	bne.n	8006cd4 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bf4:	f3ef 8310 	mrs	r3, PRIMASK
 8006bf8:	617b      	str	r3, [r7, #20]
  return(result);
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d105      	bne.n	8006c0c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c00:	f3ef 8311 	mrs	r3, BASEPRI
 8006c04:	613b      	str	r3, [r7, #16]
  return(result);
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d003      	beq.n	8006c14 <osMessageQueueNew+0x3c>
 8006c0c:	4b34      	ldr	r3, [pc, #208]	; (8006ce0 <osMessageQueueNew+0x108>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	2b02      	cmp	r3, #2
 8006c12:	d05f      	beq.n	8006cd4 <osMessageQueueNew+0xfc>
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d05c      	beq.n	8006cd4 <osMessageQueueNew+0xfc>
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d059      	beq.n	8006cd4 <osMessageQueueNew+0xfc>
    mem = -1;
 8006c20:	f04f 33ff 	mov.w	r3, #4294967295
 8006c24:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d029      	beq.n	8006c80 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d012      	beq.n	8006c5a <osMessageQueueNew+0x82>
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	2b4f      	cmp	r3, #79	; 0x4f
 8006c3a:	d90e      	bls.n	8006c5a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d00a      	beq.n	8006c5a <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	695a      	ldr	r2, [r3, #20]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	68b9      	ldr	r1, [r7, #8]
 8006c4c:	fb01 f303 	mul.w	r3, r1, r3
 8006c50:	429a      	cmp	r2, r3
 8006c52:	d302      	bcc.n	8006c5a <osMessageQueueNew+0x82>
        mem = 1;
 8006c54:	2301      	movs	r3, #1
 8006c56:	623b      	str	r3, [r7, #32]
 8006c58:	e014      	b.n	8006c84 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d110      	bne.n	8006c84 <osMessageQueueNew+0xac>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d10c      	bne.n	8006c84 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d108      	bne.n	8006c84 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d104      	bne.n	8006c84 <osMessageQueueNew+0xac>
          mem = 0;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	623b      	str	r3, [r7, #32]
 8006c7e:	e001      	b.n	8006c84 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006c80:	2300      	movs	r3, #0
 8006c82:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	2b01      	cmp	r3, #1
 8006c88:	d10b      	bne.n	8006ca2 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	691a      	ldr	r2, [r3, #16]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	2100      	movs	r1, #0
 8006c94:	9100      	str	r1, [sp, #0]
 8006c96:	68b9      	ldr	r1, [r7, #8]
 8006c98:	68f8      	ldr	r0, [r7, #12]
 8006c9a:	f000 fa5b 	bl	8007154 <xQueueGenericCreateStatic>
 8006c9e:	6278      	str	r0, [r7, #36]	; 0x24
 8006ca0:	e008      	b.n	8006cb4 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006ca2:	6a3b      	ldr	r3, [r7, #32]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d105      	bne.n	8006cb4 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006ca8:	2200      	movs	r2, #0
 8006caa:	68b9      	ldr	r1, [r7, #8]
 8006cac:	68f8      	ldr	r0, [r7, #12]
 8006cae:	f000 fad3 	bl	8007258 <xQueueGenericCreate>
 8006cb2:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00c      	beq.n	8006cd4 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	61fb      	str	r3, [r7, #28]
 8006cc6:	e001      	b.n	8006ccc <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006ccc:	69f9      	ldr	r1, [r7, #28]
 8006cce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006cd0:	f001 fa5e 	bl	8008190 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	3728      	adds	r7, #40	; 0x28
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	bf00      	nop
 8006ce0:	20004ec8 	.word	0x20004ec8

08006ce4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08a      	sub	sp, #40	; 0x28
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	603b      	str	r3, [r7, #0]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006cfc:	f3ef 8305 	mrs	r3, IPSR
 8006d00:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d02:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d10f      	bne.n	8006d28 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d08:	f3ef 8310 	mrs	r3, PRIMASK
 8006d0c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d0e:	69bb      	ldr	r3, [r7, #24]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d105      	bne.n	8006d20 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d14:	f3ef 8311 	mrs	r3, BASEPRI
 8006d18:	617b      	str	r3, [r7, #20]
  return(result);
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d02c      	beq.n	8006d7a <osMessageQueuePut+0x96>
 8006d20:	4b28      	ldr	r3, [pc, #160]	; (8006dc4 <osMessageQueuePut+0xe0>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	2b02      	cmp	r3, #2
 8006d26:	d128      	bne.n	8006d7a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d28:	6a3b      	ldr	r3, [r7, #32]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d005      	beq.n	8006d3a <osMessageQueuePut+0x56>
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d002      	beq.n	8006d3a <osMessageQueuePut+0x56>
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d003      	beq.n	8006d42 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006d3a:	f06f 0303 	mvn.w	r3, #3
 8006d3e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d40:	e039      	b.n	8006db6 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006d42:	2300      	movs	r3, #0
 8006d44:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006d46:	f107 0210 	add.w	r2, r7, #16
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	6a38      	ldr	r0, [r7, #32]
 8006d50:	f000 fd1a 	bl	8007788 <xQueueGenericSendFromISR>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b01      	cmp	r3, #1
 8006d58:	d003      	beq.n	8006d62 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006d5a:	f06f 0302 	mvn.w	r3, #2
 8006d5e:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d60:	e029      	b.n	8006db6 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d026      	beq.n	8006db6 <osMessageQueuePut+0xd2>
 8006d68:	4b17      	ldr	r3, [pc, #92]	; (8006dc8 <osMessageQueuePut+0xe4>)
 8006d6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d78:	e01d      	b.n	8006db6 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d002      	beq.n	8006d86 <osMessageQueuePut+0xa2>
 8006d80:	68bb      	ldr	r3, [r7, #8]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d103      	bne.n	8006d8e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006d86:	f06f 0303 	mvn.w	r3, #3
 8006d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d8c:	e014      	b.n	8006db8 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006d8e:	2300      	movs	r3, #0
 8006d90:	683a      	ldr	r2, [r7, #0]
 8006d92:	68b9      	ldr	r1, [r7, #8]
 8006d94:	6a38      	ldr	r0, [r7, #32]
 8006d96:	f000 fbf1 	bl	800757c <xQueueGenericSend>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d00b      	beq.n	8006db8 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d003      	beq.n	8006dae <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006da6:	f06f 0301 	mvn.w	r3, #1
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
 8006dac:	e004      	b.n	8006db8 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006dae:	f06f 0302 	mvn.w	r3, #2
 8006db2:	627b      	str	r3, [r7, #36]	; 0x24
 8006db4:	e000      	b.n	8006db8 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006db6:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dba:	4618      	mov	r0, r3
 8006dbc:	3728      	adds	r7, #40	; 0x28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	bd80      	pop	{r7, pc}
 8006dc2:	bf00      	nop
 8006dc4:	20004ec8 	.word	0x20004ec8
 8006dc8:	e000ed04 	.word	0xe000ed04

08006dcc <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b08a      	sub	sp, #40	; 0x28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	60f8      	str	r0, [r7, #12]
 8006dd4:	60b9      	str	r1, [r7, #8]
 8006dd6:	607a      	str	r2, [r7, #4]
 8006dd8:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006dde:	2300      	movs	r3, #0
 8006de0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006de2:	f3ef 8305 	mrs	r3, IPSR
 8006de6:	61fb      	str	r3, [r7, #28]
  return(result);
 8006de8:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d10f      	bne.n	8006e0e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dee:	f3ef 8310 	mrs	r3, PRIMASK
 8006df2:	61bb      	str	r3, [r7, #24]
  return(result);
 8006df4:	69bb      	ldr	r3, [r7, #24]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d105      	bne.n	8006e06 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006dfa:	f3ef 8311 	mrs	r3, BASEPRI
 8006dfe:	617b      	str	r3, [r7, #20]
  return(result);
 8006e00:	697b      	ldr	r3, [r7, #20]
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d02c      	beq.n	8006e60 <osMessageQueueGet+0x94>
 8006e06:	4b28      	ldr	r3, [pc, #160]	; (8006ea8 <osMessageQueueGet+0xdc>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b02      	cmp	r3, #2
 8006e0c:	d128      	bne.n	8006e60 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e0e:	6a3b      	ldr	r3, [r7, #32]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d005      	beq.n	8006e20 <osMessageQueueGet+0x54>
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d002      	beq.n	8006e20 <osMessageQueueGet+0x54>
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006e20:	f06f 0303 	mvn.w	r3, #3
 8006e24:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e26:	e038      	b.n	8006e9a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006e2c:	f107 0310 	add.w	r3, r7, #16
 8006e30:	461a      	mov	r2, r3
 8006e32:	68b9      	ldr	r1, [r7, #8]
 8006e34:	6a38      	ldr	r0, [r7, #32]
 8006e36:	f000 ffd7 	bl	8007de8 <xQueueReceiveFromISR>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	2b01      	cmp	r3, #1
 8006e3e:	d003      	beq.n	8006e48 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006e40:	f06f 0302 	mvn.w	r3, #2
 8006e44:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e46:	e028      	b.n	8006e9a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d025      	beq.n	8006e9a <osMessageQueueGet+0xce>
 8006e4e:	4b17      	ldr	r3, [pc, #92]	; (8006eac <osMessageQueueGet+0xe0>)
 8006e50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e54:	601a      	str	r2, [r3, #0]
 8006e56:	f3bf 8f4f 	dsb	sy
 8006e5a:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e5e:	e01c      	b.n	8006e9a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d002      	beq.n	8006e6c <osMessageQueueGet+0xa0>
 8006e66:	68bb      	ldr	r3, [r7, #8]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d103      	bne.n	8006e74 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006e6c:	f06f 0303 	mvn.w	r3, #3
 8006e70:	627b      	str	r3, [r7, #36]	; 0x24
 8006e72:	e013      	b.n	8006e9c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006e74:	683a      	ldr	r2, [r7, #0]
 8006e76:	68b9      	ldr	r1, [r7, #8]
 8006e78:	6a38      	ldr	r0, [r7, #32]
 8006e7a:	f000 fdbb 	bl	80079f4 <xQueueReceive>
 8006e7e:	4603      	mov	r3, r0
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d00b      	beq.n	8006e9c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006e8a:	f06f 0301 	mvn.w	r3, #1
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e90:	e004      	b.n	8006e9c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006e92:	f06f 0302 	mvn.w	r3, #2
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
 8006e98:	e000      	b.n	8006e9c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e9a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	3728      	adds	r7, #40	; 0x28
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	bd80      	pop	{r7, pc}
 8006ea6:	bf00      	nop
 8006ea8:	20004ec8 	.word	0x20004ec8
 8006eac:	e000ed04 	.word	0xe000ed04

08006eb0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006eb0:	b480      	push	{r7}
 8006eb2:	b085      	sub	sp, #20
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	4a07      	ldr	r2, [pc, #28]	; (8006edc <vApplicationGetIdleTaskMemory+0x2c>)
 8006ec0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	4a06      	ldr	r2, [pc, #24]	; (8006ee0 <vApplicationGetIdleTaskMemory+0x30>)
 8006ec6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2280      	movs	r2, #128	; 0x80
 8006ecc:	601a      	str	r2, [r3, #0]
}
 8006ece:	bf00      	nop
 8006ed0:	3714      	adds	r7, #20
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	20004ecc 	.word	0x20004ecc
 8006ee0:	20004f88 	.word	0x20004f88

08006ee4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006ee4:	b480      	push	{r7}
 8006ee6:	b085      	sub	sp, #20
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	4a07      	ldr	r2, [pc, #28]	; (8006f10 <vApplicationGetTimerTaskMemory+0x2c>)
 8006ef4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	4a06      	ldr	r2, [pc, #24]	; (8006f14 <vApplicationGetTimerTaskMemory+0x30>)
 8006efa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006f02:	601a      	str	r2, [r3, #0]
}
 8006f04:	bf00      	nop
 8006f06:	3714      	adds	r7, #20
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr
 8006f10:	20005188 	.word	0x20005188
 8006f14:	20005244 	.word	0x20005244

08006f18 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f103 0208 	add.w	r2, r3, #8
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f04f 32ff 	mov.w	r2, #4294967295
 8006f30:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	f103 0208 	add.w	r2, r3, #8
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f103 0208 	add.w	r2, r3, #8
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006f4c:	bf00      	nop
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2200      	movs	r2, #0
 8006f64:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006f66:	bf00      	nop
 8006f68:	370c      	adds	r7, #12
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr

08006f72 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f72:	b480      	push	{r7}
 8006f74:	b085      	sub	sp, #20
 8006f76:	af00      	add	r7, sp, #0
 8006f78:	6078      	str	r0, [r7, #4]
 8006f7a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	68fa      	ldr	r2, [r7, #12]
 8006f86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	689a      	ldr	r2, [r3, #8]
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	683a      	ldr	r2, [r7, #0]
 8006f9c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	1c5a      	adds	r2, r3, #1
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	601a      	str	r2, [r3, #0]
}
 8006fae:	bf00      	nop
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr

08006fba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006fba:	b480      	push	{r7}
 8006fbc:	b085      	sub	sp, #20
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
 8006fc2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006fc4:	683b      	ldr	r3, [r7, #0]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fd0:	d103      	bne.n	8006fda <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	691b      	ldr	r3, [r3, #16]
 8006fd6:	60fb      	str	r3, [r7, #12]
 8006fd8:	e00c      	b.n	8006ff4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	3308      	adds	r3, #8
 8006fde:	60fb      	str	r3, [r7, #12]
 8006fe0:	e002      	b.n	8006fe8 <vListInsert+0x2e>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	60fb      	str	r3, [r7, #12]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	685b      	ldr	r3, [r3, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	68ba      	ldr	r2, [r7, #8]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	d2f6      	bcs.n	8006fe2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	685a      	ldr	r2, [r3, #4]
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	683a      	ldr	r2, [r7, #0]
 8007002:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	68fa      	ldr	r2, [r7, #12]
 8007008:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	683a      	ldr	r2, [r7, #0]
 800700e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	1c5a      	adds	r2, r3, #1
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	601a      	str	r2, [r3, #0]
}
 8007020:	bf00      	nop
 8007022:	3714      	adds	r7, #20
 8007024:	46bd      	mov	sp, r7
 8007026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702a:	4770      	bx	lr

0800702c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	687a      	ldr	r2, [r7, #4]
 8007040:	6892      	ldr	r2, [r2, #8]
 8007042:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	689b      	ldr	r3, [r3, #8]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	6852      	ldr	r2, [r2, #4]
 800704c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	687a      	ldr	r2, [r7, #4]
 8007054:	429a      	cmp	r2, r3
 8007056:	d103      	bne.n	8007060 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	689a      	ldr	r2, [r3, #8]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2200      	movs	r2, #0
 8007064:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	1e5a      	subs	r2, r3, #1
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
}
 8007074:	4618      	mov	r0, r3
 8007076:	3714      	adds	r7, #20
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr

08007080 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007080:	b580      	push	{r7, lr}
 8007082:	b084      	sub	sp, #16
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d10c      	bne.n	80070ae <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007098:	b672      	cpsid	i
 800709a:	f383 8811 	msr	BASEPRI, r3
 800709e:	f3bf 8f6f 	isb	sy
 80070a2:	f3bf 8f4f 	dsb	sy
 80070a6:	b662      	cpsie	i
 80070a8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80070aa:	bf00      	nop
 80070ac:	e7fe      	b.n	80070ac <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80070ae:	f002 fead 	bl	8009e0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681a      	ldr	r2, [r3, #0]
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ba:	68f9      	ldr	r1, [r7, #12]
 80070bc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070be:	fb01 f303 	mul.w	r3, r1, r3
 80070c2:	441a      	add	r2, r3
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070de:	3b01      	subs	r3, #1
 80070e0:	68f9      	ldr	r1, [r7, #12]
 80070e2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80070e4:	fb01 f303 	mul.w	r3, r1, r3
 80070e8:	441a      	add	r2, r3
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	22ff      	movs	r2, #255	; 0xff
 80070f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	22ff      	movs	r2, #255	; 0xff
 80070fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d114      	bne.n	800712e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d01a      	beq.n	8007142 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	3310      	adds	r3, #16
 8007110:	4618      	mov	r0, r3
 8007112:	f001 fe51 	bl	8008db8 <xTaskRemoveFromEventList>
 8007116:	4603      	mov	r3, r0
 8007118:	2b00      	cmp	r3, #0
 800711a:	d012      	beq.n	8007142 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800711c:	4b0c      	ldr	r3, [pc, #48]	; (8007150 <xQueueGenericReset+0xd0>)
 800711e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007122:	601a      	str	r2, [r3, #0]
 8007124:	f3bf 8f4f 	dsb	sy
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	e009      	b.n	8007142 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	3310      	adds	r3, #16
 8007132:	4618      	mov	r0, r3
 8007134:	f7ff fef0 	bl	8006f18 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3324      	adds	r3, #36	; 0x24
 800713c:	4618      	mov	r0, r3
 800713e:	f7ff feeb 	bl	8006f18 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007142:	f002 fe97 	bl	8009e74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007146:	2301      	movs	r3, #1
}
 8007148:	4618      	mov	r0, r3
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}
 8007150:	e000ed04 	.word	0xe000ed04

08007154 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007154:	b580      	push	{r7, lr}
 8007156:	b08e      	sub	sp, #56	; 0x38
 8007158:	af02      	add	r7, sp, #8
 800715a:	60f8      	str	r0, [r7, #12]
 800715c:	60b9      	str	r1, [r7, #8]
 800715e:	607a      	str	r2, [r7, #4]
 8007160:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2b00      	cmp	r3, #0
 8007166:	d10c      	bne.n	8007182 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8007168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716c:	b672      	cpsid	i
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	b662      	cpsie	i
 800717c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800717e:	bf00      	nop
 8007180:	e7fe      	b.n	8007180 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d10c      	bne.n	80071a2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718c:	b672      	cpsid	i
 800718e:	f383 8811 	msr	BASEPRI, r3
 8007192:	f3bf 8f6f 	isb	sy
 8007196:	f3bf 8f4f 	dsb	sy
 800719a:	b662      	cpsie	i
 800719c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800719e:	bf00      	nop
 80071a0:	e7fe      	b.n	80071a0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <xQueueGenericCreateStatic+0x5a>
 80071a8:	68bb      	ldr	r3, [r7, #8]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <xQueueGenericCreateStatic+0x5e>
 80071ae:	2301      	movs	r3, #1
 80071b0:	e000      	b.n	80071b4 <xQueueGenericCreateStatic+0x60>
 80071b2:	2300      	movs	r3, #0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d10c      	bne.n	80071d2 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80071b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071bc:	b672      	cpsid	i
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	b662      	cpsie	i
 80071cc:	623b      	str	r3, [r7, #32]
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d102      	bne.n	80071de <xQueueGenericCreateStatic+0x8a>
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d101      	bne.n	80071e2 <xQueueGenericCreateStatic+0x8e>
 80071de:	2301      	movs	r3, #1
 80071e0:	e000      	b.n	80071e4 <xQueueGenericCreateStatic+0x90>
 80071e2:	2300      	movs	r3, #0
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d10c      	bne.n	8007202 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80071e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ec:	b672      	cpsid	i
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	b662      	cpsie	i
 80071fc:	61fb      	str	r3, [r7, #28]
}
 80071fe:	bf00      	nop
 8007200:	e7fe      	b.n	8007200 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007202:	2350      	movs	r3, #80	; 0x50
 8007204:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2b50      	cmp	r3, #80	; 0x50
 800720a:	d00c      	beq.n	8007226 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800720c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007210:	b672      	cpsid	i
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	b662      	cpsie	i
 8007220:	61bb      	str	r3, [r7, #24]
}
 8007222:	bf00      	nop
 8007224:	e7fe      	b.n	8007224 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007226:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007228:	683b      	ldr	r3, [r7, #0]
 800722a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800722c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800722e:	2b00      	cmp	r3, #0
 8007230:	d00d      	beq.n	800724e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007234:	2201      	movs	r2, #1
 8007236:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800723a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800723e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	4613      	mov	r3, r2
 8007244:	687a      	ldr	r2, [r7, #4]
 8007246:	68b9      	ldr	r1, [r7, #8]
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 f847 	bl	80072dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800724e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007250:	4618      	mov	r0, r3
 8007252:	3730      	adds	r7, #48	; 0x30
 8007254:	46bd      	mov	sp, r7
 8007256:	bd80      	pop	{r7, pc}

08007258 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007258:	b580      	push	{r7, lr}
 800725a:	b08a      	sub	sp, #40	; 0x28
 800725c:	af02      	add	r7, sp, #8
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	4613      	mov	r3, r2
 8007264:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d10c      	bne.n	8007286 <xQueueGenericCreate+0x2e>
	__asm volatile
 800726c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007270:	b672      	cpsid	i
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	b662      	cpsie	i
 8007280:	613b      	str	r3, [r7, #16]
}
 8007282:	bf00      	nop
 8007284:	e7fe      	b.n	8007284 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007286:	68bb      	ldr	r3, [r7, #8]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d102      	bne.n	8007292 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800728c:	2300      	movs	r3, #0
 800728e:	61fb      	str	r3, [r7, #28]
 8007290:	e004      	b.n	800729c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	fb02 f303 	mul.w	r3, r2, r3
 800729a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800729c:	69fb      	ldr	r3, [r7, #28]
 800729e:	3350      	adds	r3, #80	; 0x50
 80072a0:	4618      	mov	r0, r3
 80072a2:	f002 fedf 	bl	800a064 <pvPortMalloc>
 80072a6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d011      	beq.n	80072d2 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80072ae:	69bb      	ldr	r3, [r7, #24]
 80072b0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	3350      	adds	r3, #80	; 0x50
 80072b6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	2200      	movs	r2, #0
 80072bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80072c0:	79fa      	ldrb	r2, [r7, #7]
 80072c2:	69bb      	ldr	r3, [r7, #24]
 80072c4:	9300      	str	r3, [sp, #0]
 80072c6:	4613      	mov	r3, r2
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	68b9      	ldr	r1, [r7, #8]
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	f000 f805 	bl	80072dc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80072d2:	69bb      	ldr	r3, [r7, #24]
	}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3720      	adds	r7, #32
 80072d8:	46bd      	mov	sp, r7
 80072da:	bd80      	pop	{r7, pc}

080072dc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b084      	sub	sp, #16
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	60f8      	str	r0, [r7, #12]
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	607a      	str	r2, [r7, #4]
 80072e8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80072ea:	68bb      	ldr	r3, [r7, #8]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d103      	bne.n	80072f8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80072f0:	69bb      	ldr	r3, [r7, #24]
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	601a      	str	r2, [r3, #0]
 80072f6:	e002      	b.n	80072fe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007304:	69bb      	ldr	r3, [r7, #24]
 8007306:	68ba      	ldr	r2, [r7, #8]
 8007308:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800730a:	2101      	movs	r1, #1
 800730c:	69b8      	ldr	r0, [r7, #24]
 800730e:	f7ff feb7 	bl	8007080 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	78fa      	ldrb	r2, [r7, #3]
 8007316:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800731a:	bf00      	nop
 800731c:	3710      	adds	r7, #16
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00e      	beq.n	800734e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2200      	movs	r2, #0
 8007340:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007342:	2300      	movs	r3, #0
 8007344:	2200      	movs	r2, #0
 8007346:	2100      	movs	r1, #0
 8007348:	6878      	ldr	r0, [r7, #4]
 800734a:	f000 f917 	bl	800757c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800734e:	bf00      	nop
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8007356:	b580      	push	{r7, lr}
 8007358:	b086      	sub	sp, #24
 800735a:	af00      	add	r7, sp, #0
 800735c:	4603      	mov	r3, r0
 800735e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007360:	2301      	movs	r3, #1
 8007362:	617b      	str	r3, [r7, #20]
 8007364:	2300      	movs	r3, #0
 8007366:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007368:	79fb      	ldrb	r3, [r7, #7]
 800736a:	461a      	mov	r2, r3
 800736c:	6939      	ldr	r1, [r7, #16]
 800736e:	6978      	ldr	r0, [r7, #20]
 8007370:	f7ff ff72 	bl	8007258 <xQueueGenericCreate>
 8007374:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f7ff ffd3 	bl	8007322 <prvInitialiseMutex>

		return xNewQueue;
 800737c:	68fb      	ldr	r3, [r7, #12]
	}
 800737e:	4618      	mov	r0, r3
 8007380:	3718      	adds	r7, #24
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}

08007386 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007386:	b580      	push	{r7, lr}
 8007388:	b088      	sub	sp, #32
 800738a:	af02      	add	r7, sp, #8
 800738c:	4603      	mov	r3, r0
 800738e:	6039      	str	r1, [r7, #0]
 8007390:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007392:	2301      	movs	r3, #1
 8007394:	617b      	str	r3, [r7, #20]
 8007396:	2300      	movs	r3, #0
 8007398:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800739a:	79fb      	ldrb	r3, [r7, #7]
 800739c:	9300      	str	r3, [sp, #0]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	2200      	movs	r2, #0
 80073a2:	6939      	ldr	r1, [r7, #16]
 80073a4:	6978      	ldr	r0, [r7, #20]
 80073a6:	f7ff fed5 	bl	8007154 <xQueueGenericCreateStatic>
 80073aa:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80073ac:	68f8      	ldr	r0, [r7, #12]
 80073ae:	f7ff ffb8 	bl	8007322 <prvInitialiseMutex>

		return xNewQueue;
 80073b2:	68fb      	ldr	r3, [r7, #12]
	}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3718      	adds	r7, #24
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80073bc:	b590      	push	{r4, r7, lr}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80073c8:	693b      	ldr	r3, [r7, #16]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10c      	bne.n	80073e8 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d2:	b672      	cpsid	i
 80073d4:	f383 8811 	msr	BASEPRI, r3
 80073d8:	f3bf 8f6f 	isb	sy
 80073dc:	f3bf 8f4f 	dsb	sy
 80073e0:	b662      	cpsie	i
 80073e2:	60fb      	str	r3, [r7, #12]
}
 80073e4:	bf00      	nop
 80073e6:	e7fe      	b.n	80073e6 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	689c      	ldr	r4, [r3, #8]
 80073ec:	f001 feae 	bl	800914c <xTaskGetCurrentTaskHandle>
 80073f0:	4603      	mov	r3, r0
 80073f2:	429c      	cmp	r4, r3
 80073f4:	d111      	bne.n	800741a <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	1e5a      	subs	r2, r3, #1
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d105      	bne.n	8007414 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007408:	2300      	movs	r3, #0
 800740a:	2200      	movs	r2, #0
 800740c:	2100      	movs	r1, #0
 800740e:	6938      	ldr	r0, [r7, #16]
 8007410:	f000 f8b4 	bl	800757c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8007414:	2301      	movs	r3, #1
 8007416:	617b      	str	r3, [r7, #20]
 8007418:	e001      	b.n	800741e <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800741a:	2300      	movs	r3, #0
 800741c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800741e:	697b      	ldr	r3, [r7, #20]
	}
 8007420:	4618      	mov	r0, r3
 8007422:	371c      	adds	r7, #28
 8007424:	46bd      	mov	sp, r7
 8007426:	bd90      	pop	{r4, r7, pc}

08007428 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007428:	b590      	push	{r4, r7, lr}
 800742a:	b087      	sub	sp, #28
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
 8007430:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007436:	693b      	ldr	r3, [r7, #16]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d10c      	bne.n	8007456 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 800743c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007440:	b672      	cpsid	i
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	b662      	cpsie	i
 8007450:	60fb      	str	r3, [r7, #12]
}
 8007452:	bf00      	nop
 8007454:	e7fe      	b.n	8007454 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	689c      	ldr	r4, [r3, #8]
 800745a:	f001 fe77 	bl	800914c <xTaskGetCurrentTaskHandle>
 800745e:	4603      	mov	r3, r0
 8007460:	429c      	cmp	r4, r3
 8007462:	d107      	bne.n	8007474 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	68db      	ldr	r3, [r3, #12]
 8007468:	1c5a      	adds	r2, r3, #1
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800746e:	2301      	movs	r3, #1
 8007470:	617b      	str	r3, [r7, #20]
 8007472:	e00c      	b.n	800748e <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007474:	6839      	ldr	r1, [r7, #0]
 8007476:	6938      	ldr	r0, [r7, #16]
 8007478:	f000 fba2 	bl	8007bc0 <xQueueSemaphoreTake>
 800747c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800747e:	697b      	ldr	r3, [r7, #20]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d004      	beq.n	800748e <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	68db      	ldr	r3, [r3, #12]
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800748e:	697b      	ldr	r3, [r7, #20]
	}
 8007490:	4618      	mov	r0, r3
 8007492:	371c      	adds	r7, #28
 8007494:	46bd      	mov	sp, r7
 8007496:	bd90      	pop	{r4, r7, pc}

08007498 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007498:	b580      	push	{r7, lr}
 800749a:	b08a      	sub	sp, #40	; 0x28
 800749c:	af02      	add	r7, sp, #8
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d10c      	bne.n	80074c4 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 80074aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ae:	b672      	cpsid	i
 80074b0:	f383 8811 	msr	BASEPRI, r3
 80074b4:	f3bf 8f6f 	isb	sy
 80074b8:	f3bf 8f4f 	dsb	sy
 80074bc:	b662      	cpsie	i
 80074be:	61bb      	str	r3, [r7, #24]
}
 80074c0:	bf00      	nop
 80074c2:	e7fe      	b.n	80074c2 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 80074c4:	68ba      	ldr	r2, [r7, #8]
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	429a      	cmp	r2, r3
 80074ca:	d90c      	bls.n	80074e6 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 80074cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074d0:	b672      	cpsid	i
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	b662      	cpsie	i
 80074e0:	617b      	str	r3, [r7, #20]
}
 80074e2:	bf00      	nop
 80074e4:	e7fe      	b.n	80074e4 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80074e6:	2302      	movs	r3, #2
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2200      	movs	r2, #0
 80074ee:	2100      	movs	r1, #0
 80074f0:	68f8      	ldr	r0, [r7, #12]
 80074f2:	f7ff fe2f 	bl	8007154 <xQueueGenericCreateStatic>
 80074f6:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80074f8:	69fb      	ldr	r3, [r7, #28]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d002      	beq.n	8007504 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80074fe:	69fb      	ldr	r3, [r7, #28]
 8007500:	68ba      	ldr	r2, [r7, #8]
 8007502:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007504:	69fb      	ldr	r3, [r7, #28]
	}
 8007506:	4618      	mov	r0, r3
 8007508:	3720      	adds	r7, #32
 800750a:	46bd      	mov	sp, r7
 800750c:	bd80      	pop	{r7, pc}

0800750e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800750e:	b580      	push	{r7, lr}
 8007510:	b086      	sub	sp, #24
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
 8007516:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10c      	bne.n	8007538 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007522:	b672      	cpsid	i
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	b662      	cpsie	i
 8007532:	613b      	str	r3, [r7, #16]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	429a      	cmp	r2, r3
 800753e:	d90c      	bls.n	800755a <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8007540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007544:	b672      	cpsid	i
 8007546:	f383 8811 	msr	BASEPRI, r3
 800754a:	f3bf 8f6f 	isb	sy
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	b662      	cpsie	i
 8007554:	60fb      	str	r3, [r7, #12]
}
 8007556:	bf00      	nop
 8007558:	e7fe      	b.n	8007558 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800755a:	2202      	movs	r2, #2
 800755c:	2100      	movs	r1, #0
 800755e:	6878      	ldr	r0, [r7, #4]
 8007560:	f7ff fe7a 	bl	8007258 <xQueueGenericCreate>
 8007564:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8007566:	697b      	ldr	r3, [r7, #20]
 8007568:	2b00      	cmp	r3, #0
 800756a:	d002      	beq.n	8007572 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	683a      	ldr	r2, [r7, #0]
 8007570:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007572:	697b      	ldr	r3, [r7, #20]
	}
 8007574:	4618      	mov	r0, r3
 8007576:	3718      	adds	r7, #24
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b08e      	sub	sp, #56	; 0x38
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	607a      	str	r2, [r7, #4]
 8007588:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800758a:	2300      	movs	r3, #0
 800758c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10c      	bne.n	80075b2 <xQueueGenericSend+0x36>
	__asm volatile
 8007598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759c:	b672      	cpsid	i
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	b662      	cpsie	i
 80075ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80075ae:	bf00      	nop
 80075b0:	e7fe      	b.n	80075b0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d103      	bne.n	80075c0 <xQueueGenericSend+0x44>
 80075b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <xQueueGenericSend+0x48>
 80075c0:	2301      	movs	r3, #1
 80075c2:	e000      	b.n	80075c6 <xQueueGenericSend+0x4a>
 80075c4:	2300      	movs	r3, #0
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10c      	bne.n	80075e4 <xQueueGenericSend+0x68>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ce:	b672      	cpsid	i
 80075d0:	f383 8811 	msr	BASEPRI, r3
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	f3bf 8f4f 	dsb	sy
 80075dc:	b662      	cpsie	i
 80075de:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075e0:	bf00      	nop
 80075e2:	e7fe      	b.n	80075e2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80075e4:	683b      	ldr	r3, [r7, #0]
 80075e6:	2b02      	cmp	r3, #2
 80075e8:	d103      	bne.n	80075f2 <xQueueGenericSend+0x76>
 80075ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075ee:	2b01      	cmp	r3, #1
 80075f0:	d101      	bne.n	80075f6 <xQueueGenericSend+0x7a>
 80075f2:	2301      	movs	r3, #1
 80075f4:	e000      	b.n	80075f8 <xQueueGenericSend+0x7c>
 80075f6:	2300      	movs	r3, #0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10c      	bne.n	8007616 <xQueueGenericSend+0x9a>
	__asm volatile
 80075fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007600:	b672      	cpsid	i
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	b662      	cpsie	i
 8007610:	623b      	str	r3, [r7, #32]
}
 8007612:	bf00      	nop
 8007614:	e7fe      	b.n	8007614 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007616:	f001 fda9 	bl	800916c <xTaskGetSchedulerState>
 800761a:	4603      	mov	r3, r0
 800761c:	2b00      	cmp	r3, #0
 800761e:	d102      	bne.n	8007626 <xQueueGenericSend+0xaa>
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d101      	bne.n	800762a <xQueueGenericSend+0xae>
 8007626:	2301      	movs	r3, #1
 8007628:	e000      	b.n	800762c <xQueueGenericSend+0xb0>
 800762a:	2300      	movs	r3, #0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10c      	bne.n	800764a <xQueueGenericSend+0xce>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	b672      	cpsid	i
 8007636:	f383 8811 	msr	BASEPRI, r3
 800763a:	f3bf 8f6f 	isb	sy
 800763e:	f3bf 8f4f 	dsb	sy
 8007642:	b662      	cpsie	i
 8007644:	61fb      	str	r3, [r7, #28]
}
 8007646:	bf00      	nop
 8007648:	e7fe      	b.n	8007648 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800764a:	f002 fbdf 	bl	8009e0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800764e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007650:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007656:	429a      	cmp	r2, r3
 8007658:	d302      	bcc.n	8007660 <xQueueGenericSend+0xe4>
 800765a:	683b      	ldr	r3, [r7, #0]
 800765c:	2b02      	cmp	r3, #2
 800765e:	d129      	bne.n	80076b4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007660:	683a      	ldr	r2, [r7, #0]
 8007662:	68b9      	ldr	r1, [r7, #8]
 8007664:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007666:	f000 fc82 	bl	8007f6e <prvCopyDataToQueue>
 800766a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800766c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800766e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007670:	2b00      	cmp	r3, #0
 8007672:	d010      	beq.n	8007696 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007676:	3324      	adds	r3, #36	; 0x24
 8007678:	4618      	mov	r0, r3
 800767a:	f001 fb9d 	bl	8008db8 <xTaskRemoveFromEventList>
 800767e:	4603      	mov	r3, r0
 8007680:	2b00      	cmp	r3, #0
 8007682:	d013      	beq.n	80076ac <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007684:	4b3f      	ldr	r3, [pc, #252]	; (8007784 <xQueueGenericSend+0x208>)
 8007686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800768a:	601a      	str	r2, [r3, #0]
 800768c:	f3bf 8f4f 	dsb	sy
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	e00a      	b.n	80076ac <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007698:	2b00      	cmp	r3, #0
 800769a:	d007      	beq.n	80076ac <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800769c:	4b39      	ldr	r3, [pc, #228]	; (8007784 <xQueueGenericSend+0x208>)
 800769e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076a2:	601a      	str	r2, [r3, #0]
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80076ac:	f002 fbe2 	bl	8009e74 <vPortExitCritical>
				return pdPASS;
 80076b0:	2301      	movs	r3, #1
 80076b2:	e063      	b.n	800777c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d103      	bne.n	80076c2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076ba:	f002 fbdb 	bl	8009e74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80076be:	2300      	movs	r3, #0
 80076c0:	e05c      	b.n	800777c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d106      	bne.n	80076d6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076c8:	f107 0314 	add.w	r3, r7, #20
 80076cc:	4618      	mov	r0, r3
 80076ce:	f001 fbd9 	bl	8008e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076d2:	2301      	movs	r3, #1
 80076d4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80076d6:	f002 fbcd 	bl	8009e74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80076da:	f001 f927 	bl	800892c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80076de:	f002 fb95 	bl	8009e0c <vPortEnterCritical>
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80076e8:	b25b      	sxtb	r3, r3
 80076ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076ee:	d103      	bne.n	80076f8 <xQueueGenericSend+0x17c>
 80076f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80076f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80076fe:	b25b      	sxtb	r3, r3
 8007700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007704:	d103      	bne.n	800770e <xQueueGenericSend+0x192>
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	2200      	movs	r2, #0
 800770a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800770e:	f002 fbb1 	bl	8009e74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007712:	1d3a      	adds	r2, r7, #4
 8007714:	f107 0314 	add.w	r3, r7, #20
 8007718:	4611      	mov	r1, r2
 800771a:	4618      	mov	r0, r3
 800771c:	f001 fbc8 	bl	8008eb0 <xTaskCheckForTimeOut>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d124      	bne.n	8007770 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007726:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007728:	f000 fd19 	bl	800815e <prvIsQueueFull>
 800772c:	4603      	mov	r3, r0
 800772e:	2b00      	cmp	r3, #0
 8007730:	d018      	beq.n	8007764 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	3310      	adds	r3, #16
 8007736:	687a      	ldr	r2, [r7, #4]
 8007738:	4611      	mov	r1, r2
 800773a:	4618      	mov	r0, r3
 800773c:	f001 fae8 	bl	8008d10 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007740:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007742:	f000 fca4 	bl	800808e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007746:	f001 f8ff 	bl	8008948 <xTaskResumeAll>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	f47f af7c 	bne.w	800764a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8007752:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <xQueueGenericSend+0x208>)
 8007754:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007758:	601a      	str	r2, [r3, #0]
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	f3bf 8f6f 	isb	sy
 8007762:	e772      	b.n	800764a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007764:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007766:	f000 fc92 	bl	800808e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800776a:	f001 f8ed 	bl	8008948 <xTaskResumeAll>
 800776e:	e76c      	b.n	800764a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007770:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007772:	f000 fc8c 	bl	800808e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007776:	f001 f8e7 	bl	8008948 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800777a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800777c:	4618      	mov	r0, r3
 800777e:	3738      	adds	r7, #56	; 0x38
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	e000ed04 	.word	0xe000ed04

08007788 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b08e      	sub	sp, #56	; 0x38
 800778c:	af00      	add	r7, sp, #0
 800778e:	60f8      	str	r0, [r7, #12]
 8007790:	60b9      	str	r1, [r7, #8]
 8007792:	607a      	str	r2, [r7, #4]
 8007794:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800779a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800779c:	2b00      	cmp	r3, #0
 800779e:	d10c      	bne.n	80077ba <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80077a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a4:	b672      	cpsid	i
 80077a6:	f383 8811 	msr	BASEPRI, r3
 80077aa:	f3bf 8f6f 	isb	sy
 80077ae:	f3bf 8f4f 	dsb	sy
 80077b2:	b662      	cpsie	i
 80077b4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80077b6:	bf00      	nop
 80077b8:	e7fe      	b.n	80077b8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d103      	bne.n	80077c8 <xQueueGenericSendFromISR+0x40>
 80077c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d101      	bne.n	80077cc <xQueueGenericSendFromISR+0x44>
 80077c8:	2301      	movs	r3, #1
 80077ca:	e000      	b.n	80077ce <xQueueGenericSendFromISR+0x46>
 80077cc:	2300      	movs	r3, #0
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d10c      	bne.n	80077ec <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80077d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d6:	b672      	cpsid	i
 80077d8:	f383 8811 	msr	BASEPRI, r3
 80077dc:	f3bf 8f6f 	isb	sy
 80077e0:	f3bf 8f4f 	dsb	sy
 80077e4:	b662      	cpsie	i
 80077e6:	623b      	str	r3, [r7, #32]
}
 80077e8:	bf00      	nop
 80077ea:	e7fe      	b.n	80077ea <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	2b02      	cmp	r3, #2
 80077f0:	d103      	bne.n	80077fa <xQueueGenericSendFromISR+0x72>
 80077f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077f6:	2b01      	cmp	r3, #1
 80077f8:	d101      	bne.n	80077fe <xQueueGenericSendFromISR+0x76>
 80077fa:	2301      	movs	r3, #1
 80077fc:	e000      	b.n	8007800 <xQueueGenericSendFromISR+0x78>
 80077fe:	2300      	movs	r3, #0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10c      	bne.n	800781e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	b672      	cpsid	i
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	b662      	cpsie	i
 8007818:	61fb      	str	r3, [r7, #28]
}
 800781a:	bf00      	nop
 800781c:	e7fe      	b.n	800781c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800781e:	f002 fbdd 	bl	8009fdc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007822:	f3ef 8211 	mrs	r2, BASEPRI
 8007826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782a:	b672      	cpsid	i
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	b662      	cpsie	i
 800783a:	61ba      	str	r2, [r7, #24]
 800783c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800783e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007840:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800784a:	429a      	cmp	r2, r3
 800784c:	d302      	bcc.n	8007854 <xQueueGenericSendFromISR+0xcc>
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d12c      	bne.n	80078ae <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007856:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800785a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800785e:	683a      	ldr	r2, [r7, #0]
 8007860:	68b9      	ldr	r1, [r7, #8]
 8007862:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007864:	f000 fb83 	bl	8007f6e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007868:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800786c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007870:	d112      	bne.n	8007898 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007876:	2b00      	cmp	r3, #0
 8007878:	d016      	beq.n	80078a8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800787a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787c:	3324      	adds	r3, #36	; 0x24
 800787e:	4618      	mov	r0, r3
 8007880:	f001 fa9a 	bl	8008db8 <xTaskRemoveFromEventList>
 8007884:	4603      	mov	r3, r0
 8007886:	2b00      	cmp	r3, #0
 8007888:	d00e      	beq.n	80078a8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00b      	beq.n	80078a8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2201      	movs	r2, #1
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	e007      	b.n	80078a8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007898:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800789c:	3301      	adds	r3, #1
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	b25a      	sxtb	r2, r3
 80078a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80078a8:	2301      	movs	r3, #1
 80078aa:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80078ac:	e001      	b.n	80078b2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80078ae:	2300      	movs	r3, #0
 80078b0:	637b      	str	r3, [r7, #52]	; 0x34
 80078b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078b4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80078bc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80078c0:	4618      	mov	r0, r3
 80078c2:	3738      	adds	r7, #56	; 0x38
 80078c4:	46bd      	mov	sp, r7
 80078c6:	bd80      	pop	{r7, pc}

080078c8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b08e      	sub	sp, #56	; 0x38
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80078d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d10c      	bne.n	80078f6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80078dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e0:	b672      	cpsid	i
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	b662      	cpsie	i
 80078f0:	623b      	str	r3, [r7, #32]
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d00c      	beq.n	8007918 <xQueueGiveFromISR+0x50>
	__asm volatile
 80078fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007902:	b672      	cpsid	i
 8007904:	f383 8811 	msr	BASEPRI, r3
 8007908:	f3bf 8f6f 	isb	sy
 800790c:	f3bf 8f4f 	dsb	sy
 8007910:	b662      	cpsie	i
 8007912:	61fb      	str	r3, [r7, #28]
}
 8007914:	bf00      	nop
 8007916:	e7fe      	b.n	8007916 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d103      	bne.n	8007928 <xQueueGiveFromISR+0x60>
 8007920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d101      	bne.n	800792c <xQueueGiveFromISR+0x64>
 8007928:	2301      	movs	r3, #1
 800792a:	e000      	b.n	800792e <xQueueGiveFromISR+0x66>
 800792c:	2300      	movs	r3, #0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10c      	bne.n	800794c <xQueueGiveFromISR+0x84>
	__asm volatile
 8007932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007936:	b672      	cpsid	i
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	b662      	cpsie	i
 8007946:	61bb      	str	r3, [r7, #24]
}
 8007948:	bf00      	nop
 800794a:	e7fe      	b.n	800794a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800794c:	f002 fb46 	bl	8009fdc <vPortValidateInterruptPriority>
	__asm volatile
 8007950:	f3ef 8211 	mrs	r2, BASEPRI
 8007954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007958:	b672      	cpsid	i
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	b662      	cpsie	i
 8007968:	617a      	str	r2, [r7, #20]
 800796a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800796c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800796e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007974:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800797a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800797c:	429a      	cmp	r2, r3
 800797e:	d22b      	bcs.n	80079d8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007982:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007986:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800798a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798c:	1c5a      	adds	r2, r3, #1
 800798e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007990:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007992:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799a:	d112      	bne.n	80079c2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800799c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800799e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d016      	beq.n	80079d2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80079a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079a6:	3324      	adds	r3, #36	; 0x24
 80079a8:	4618      	mov	r0, r3
 80079aa:	f001 fa05 	bl	8008db8 <xTaskRemoveFromEventList>
 80079ae:	4603      	mov	r3, r0
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d00e      	beq.n	80079d2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d00b      	beq.n	80079d2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2201      	movs	r2, #1
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	e007      	b.n	80079d2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80079c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80079c6:	3301      	adds	r3, #1
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	b25a      	sxtb	r2, r3
 80079cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80079d2:	2301      	movs	r3, #1
 80079d4:	637b      	str	r3, [r7, #52]	; 0x34
 80079d6:	e001      	b.n	80079dc <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80079d8:	2300      	movs	r3, #0
 80079da:	637b      	str	r3, [r7, #52]	; 0x34
 80079dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079de:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	f383 8811 	msr	BASEPRI, r3
}
 80079e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80079e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3738      	adds	r7, #56	; 0x38
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
	...

080079f4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b08c      	sub	sp, #48	; 0x30
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	60f8      	str	r0, [r7, #12]
 80079fc:	60b9      	str	r1, [r7, #8]
 80079fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a00:	2300      	movs	r3, #0
 8007a02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10c      	bne.n	8007a28 <xQueueReceive+0x34>
	__asm volatile
 8007a0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a12:	b672      	cpsid	i
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	b662      	cpsie	i
 8007a22:	623b      	str	r3, [r7, #32]
}
 8007a24:	bf00      	nop
 8007a26:	e7fe      	b.n	8007a26 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d103      	bne.n	8007a36 <xQueueReceive+0x42>
 8007a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d101      	bne.n	8007a3a <xQueueReceive+0x46>
 8007a36:	2301      	movs	r3, #1
 8007a38:	e000      	b.n	8007a3c <xQueueReceive+0x48>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10c      	bne.n	8007a5a <xQueueReceive+0x66>
	__asm volatile
 8007a40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a44:	b672      	cpsid	i
 8007a46:	f383 8811 	msr	BASEPRI, r3
 8007a4a:	f3bf 8f6f 	isb	sy
 8007a4e:	f3bf 8f4f 	dsb	sy
 8007a52:	b662      	cpsie	i
 8007a54:	61fb      	str	r3, [r7, #28]
}
 8007a56:	bf00      	nop
 8007a58:	e7fe      	b.n	8007a58 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007a5a:	f001 fb87 	bl	800916c <xTaskGetSchedulerState>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d102      	bne.n	8007a6a <xQueueReceive+0x76>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d101      	bne.n	8007a6e <xQueueReceive+0x7a>
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	e000      	b.n	8007a70 <xQueueReceive+0x7c>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10c      	bne.n	8007a8e <xQueueReceive+0x9a>
	__asm volatile
 8007a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a78:	b672      	cpsid	i
 8007a7a:	f383 8811 	msr	BASEPRI, r3
 8007a7e:	f3bf 8f6f 	isb	sy
 8007a82:	f3bf 8f4f 	dsb	sy
 8007a86:	b662      	cpsie	i
 8007a88:	61bb      	str	r3, [r7, #24]
}
 8007a8a:	bf00      	nop
 8007a8c:	e7fe      	b.n	8007a8c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007a8e:	f002 f9bd 	bl	8009e0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a96:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d01f      	beq.n	8007ade <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aa2:	f000 face 	bl	8008042 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aa8:	1e5a      	subs	r2, r3, #1
 8007aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007aac:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab0:	691b      	ldr	r3, [r3, #16]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d00f      	beq.n	8007ad6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab8:	3310      	adds	r3, #16
 8007aba:	4618      	mov	r0, r3
 8007abc:	f001 f97c 	bl	8008db8 <xTaskRemoveFromEventList>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d007      	beq.n	8007ad6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007ac6:	4b3d      	ldr	r3, [pc, #244]	; (8007bbc <xQueueReceive+0x1c8>)
 8007ac8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007acc:	601a      	str	r2, [r3, #0]
 8007ace:	f3bf 8f4f 	dsb	sy
 8007ad2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007ad6:	f002 f9cd 	bl	8009e74 <vPortExitCritical>
				return pdPASS;
 8007ada:	2301      	movs	r3, #1
 8007adc:	e069      	b.n	8007bb2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d103      	bne.n	8007aec <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ae4:	f002 f9c6 	bl	8009e74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	e062      	b.n	8007bb2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d106      	bne.n	8007b00 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007af2:	f107 0310 	add.w	r3, r7, #16
 8007af6:	4618      	mov	r0, r3
 8007af8:	f001 f9c4 	bl	8008e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007afc:	2301      	movs	r3, #1
 8007afe:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b00:	f002 f9b8 	bl	8009e74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b04:	f000 ff12 	bl	800892c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b08:	f002 f980 	bl	8009e0c <vPortEnterCritical>
 8007b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007b12:	b25b      	sxtb	r3, r3
 8007b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b18:	d103      	bne.n	8007b22 <xQueueReceive+0x12e>
 8007b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b24:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007b28:	b25b      	sxtb	r3, r3
 8007b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b2e:	d103      	bne.n	8007b38 <xQueueReceive+0x144>
 8007b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b32:	2200      	movs	r2, #0
 8007b34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b38:	f002 f99c 	bl	8009e74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b3c:	1d3a      	adds	r2, r7, #4
 8007b3e:	f107 0310 	add.w	r3, r7, #16
 8007b42:	4611      	mov	r1, r2
 8007b44:	4618      	mov	r0, r3
 8007b46:	f001 f9b3 	bl	8008eb0 <xTaskCheckForTimeOut>
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d123      	bne.n	8007b98 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b52:	f000 faee 	bl	8008132 <prvIsQueueEmpty>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d017      	beq.n	8007b8c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b5e:	3324      	adds	r3, #36	; 0x24
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	4611      	mov	r1, r2
 8007b64:	4618      	mov	r0, r3
 8007b66:	f001 f8d3 	bl	8008d10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b6c:	f000 fa8f 	bl	800808e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b70:	f000 feea 	bl	8008948 <xTaskResumeAll>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d189      	bne.n	8007a8e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007b7a:	4b10      	ldr	r3, [pc, #64]	; (8007bbc <xQueueReceive+0x1c8>)
 8007b7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b80:	601a      	str	r2, [r3, #0]
 8007b82:	f3bf 8f4f 	dsb	sy
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	e780      	b.n	8007a8e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b8e:	f000 fa7e 	bl	800808e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b92:	f000 fed9 	bl	8008948 <xTaskResumeAll>
 8007b96:	e77a      	b.n	8007a8e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b9a:	f000 fa78 	bl	800808e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b9e:	f000 fed3 	bl	8008948 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ba2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ba4:	f000 fac5 	bl	8008132 <prvIsQueueEmpty>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	f43f af6f 	beq.w	8007a8e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007bb0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007bb2:	4618      	mov	r0, r3
 8007bb4:	3730      	adds	r7, #48	; 0x30
 8007bb6:	46bd      	mov	sp, r7
 8007bb8:	bd80      	pop	{r7, pc}
 8007bba:	bf00      	nop
 8007bbc:	e000ed04 	.word	0xe000ed04

08007bc0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007bc0:	b580      	push	{r7, lr}
 8007bc2:	b08e      	sub	sp, #56	; 0x38
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
 8007bc8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007bca:	2300      	movs	r3, #0
 8007bcc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007bd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10c      	bne.n	8007bf6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be0:	b672      	cpsid	i
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	b662      	cpsie	i
 8007bf0:	623b      	str	r3, [r7, #32]
}
 8007bf2:	bf00      	nop
 8007bf4:	e7fe      	b.n	8007bf4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d00c      	beq.n	8007c18 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8007bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c02:	b672      	cpsid	i
 8007c04:	f383 8811 	msr	BASEPRI, r3
 8007c08:	f3bf 8f6f 	isb	sy
 8007c0c:	f3bf 8f4f 	dsb	sy
 8007c10:	b662      	cpsie	i
 8007c12:	61fb      	str	r3, [r7, #28]
}
 8007c14:	bf00      	nop
 8007c16:	e7fe      	b.n	8007c16 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007c18:	f001 faa8 	bl	800916c <xTaskGetSchedulerState>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d102      	bne.n	8007c28 <xQueueSemaphoreTake+0x68>
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d101      	bne.n	8007c2c <xQueueSemaphoreTake+0x6c>
 8007c28:	2301      	movs	r3, #1
 8007c2a:	e000      	b.n	8007c2e <xQueueSemaphoreTake+0x6e>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d10c      	bne.n	8007c4c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8007c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c36:	b672      	cpsid	i
 8007c38:	f383 8811 	msr	BASEPRI, r3
 8007c3c:	f3bf 8f6f 	isb	sy
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	b662      	cpsie	i
 8007c46:	61bb      	str	r3, [r7, #24]
}
 8007c48:	bf00      	nop
 8007c4a:	e7fe      	b.n	8007c4a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007c4c:	f002 f8de 	bl	8009e0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c54:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d024      	beq.n	8007ca6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c5e:	1e5a      	subs	r2, r3, #1
 8007c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c62:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d104      	bne.n	8007c76 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007c6c:	f001 fbfc 	bl	8009468 <pvTaskIncrementMutexHeldCount>
 8007c70:	4602      	mov	r2, r0
 8007c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c74:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c78:	691b      	ldr	r3, [r3, #16]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00f      	beq.n	8007c9e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c80:	3310      	adds	r3, #16
 8007c82:	4618      	mov	r0, r3
 8007c84:	f001 f898 	bl	8008db8 <xTaskRemoveFromEventList>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d007      	beq.n	8007c9e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007c8e:	4b55      	ldr	r3, [pc, #340]	; (8007de4 <xQueueSemaphoreTake+0x224>)
 8007c90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c9e:	f002 f8e9 	bl	8009e74 <vPortExitCritical>
				return pdPASS;
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e099      	b.n	8007dda <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d113      	bne.n	8007cd4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d00c      	beq.n	8007ccc <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb6:	b672      	cpsid	i
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	b662      	cpsie	i
 8007cc6:	617b      	str	r3, [r7, #20]
}
 8007cc8:	bf00      	nop
 8007cca:	e7fe      	b.n	8007cca <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007ccc:	f002 f8d2 	bl	8009e74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	e082      	b.n	8007dda <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d106      	bne.n	8007ce8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007cda:	f107 030c 	add.w	r3, r7, #12
 8007cde:	4618      	mov	r0, r3
 8007ce0:	f001 f8d0 	bl	8008e84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ce8:	f002 f8c4 	bl	8009e74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007cec:	f000 fe1e 	bl	800892c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007cf0:	f002 f88c 	bl	8009e0c <vPortEnterCritical>
 8007cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cf6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007cfa:	b25b      	sxtb	r3, r3
 8007cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d00:	d103      	bne.n	8007d0a <xQueueSemaphoreTake+0x14a>
 8007d02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d0c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d10:	b25b      	sxtb	r3, r3
 8007d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d16:	d103      	bne.n	8007d20 <xQueueSemaphoreTake+0x160>
 8007d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d20:	f002 f8a8 	bl	8009e74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007d24:	463a      	mov	r2, r7
 8007d26:	f107 030c 	add.w	r3, r7, #12
 8007d2a:	4611      	mov	r1, r2
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f001 f8bf 	bl	8008eb0 <xTaskCheckForTimeOut>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d132      	bne.n	8007d9e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d3a:	f000 f9fa 	bl	8008132 <prvIsQueueEmpty>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d026      	beq.n	8007d92 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d109      	bne.n	8007d60 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007d4c:	f002 f85e 	bl	8009e0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	4618      	mov	r0, r3
 8007d56:	f001 fa27 	bl	80091a8 <xTaskPriorityInherit>
 8007d5a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007d5c:	f002 f88a 	bl	8009e74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d62:	3324      	adds	r3, #36	; 0x24
 8007d64:	683a      	ldr	r2, [r7, #0]
 8007d66:	4611      	mov	r1, r2
 8007d68:	4618      	mov	r0, r3
 8007d6a:	f000 ffd1 	bl	8008d10 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007d6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d70:	f000 f98d 	bl	800808e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007d74:	f000 fde8 	bl	8008948 <xTaskResumeAll>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f47f af66 	bne.w	8007c4c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007d80:	4b18      	ldr	r3, [pc, #96]	; (8007de4 <xQueueSemaphoreTake+0x224>)
 8007d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d86:	601a      	str	r2, [r3, #0]
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	e75c      	b.n	8007c4c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007d92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d94:	f000 f97b 	bl	800808e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d98:	f000 fdd6 	bl	8008948 <xTaskResumeAll>
 8007d9c:	e756      	b.n	8007c4c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007d9e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007da0:	f000 f975 	bl	800808e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007da4:	f000 fdd0 	bl	8008948 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007da8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007daa:	f000 f9c2 	bl	8008132 <prvIsQueueEmpty>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	f43f af4b 	beq.w	8007c4c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d00d      	beq.n	8007dd8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007dbc:	f002 f826 	bl	8009e0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007dc0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007dc2:	f000 f8bc 	bl	8007f3e <prvGetDisinheritPriorityAfterTimeout>
 8007dc6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007dc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007dce:	4618      	mov	r0, r3
 8007dd0:	f001 fac4 	bl	800935c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007dd4:	f002 f84e 	bl	8009e74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007dd8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007dda:	4618      	mov	r0, r3
 8007ddc:	3738      	adds	r7, #56	; 0x38
 8007dde:	46bd      	mov	sp, r7
 8007de0:	bd80      	pop	{r7, pc}
 8007de2:	bf00      	nop
 8007de4:	e000ed04 	.word	0xe000ed04

08007de8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007de8:	b580      	push	{r7, lr}
 8007dea:	b08e      	sub	sp, #56	; 0x38
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	60f8      	str	r0, [r7, #12]
 8007df0:	60b9      	str	r1, [r7, #8]
 8007df2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10c      	bne.n	8007e18 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	b672      	cpsid	i
 8007e04:	f383 8811 	msr	BASEPRI, r3
 8007e08:	f3bf 8f6f 	isb	sy
 8007e0c:	f3bf 8f4f 	dsb	sy
 8007e10:	b662      	cpsie	i
 8007e12:	623b      	str	r3, [r7, #32]
}
 8007e14:	bf00      	nop
 8007e16:	e7fe      	b.n	8007e16 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d103      	bne.n	8007e26 <xQueueReceiveFromISR+0x3e>
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d101      	bne.n	8007e2a <xQueueReceiveFromISR+0x42>
 8007e26:	2301      	movs	r3, #1
 8007e28:	e000      	b.n	8007e2c <xQueueReceiveFromISR+0x44>
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10c      	bne.n	8007e4a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e34:	b672      	cpsid	i
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	b662      	cpsie	i
 8007e44:	61fb      	str	r3, [r7, #28]
}
 8007e46:	bf00      	nop
 8007e48:	e7fe      	b.n	8007e48 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007e4a:	f002 f8c7 	bl	8009fdc <vPortValidateInterruptPriority>
	__asm volatile
 8007e4e:	f3ef 8211 	mrs	r2, BASEPRI
 8007e52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e56:	b672      	cpsid	i
 8007e58:	f383 8811 	msr	BASEPRI, r3
 8007e5c:	f3bf 8f6f 	isb	sy
 8007e60:	f3bf 8f4f 	dsb	sy
 8007e64:	b662      	cpsie	i
 8007e66:	61ba      	str	r2, [r7, #24]
 8007e68:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007e6a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e72:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d02f      	beq.n	8007eda <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007e84:	68b9      	ldr	r1, [r7, #8]
 8007e86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007e88:	f000 f8db 	bl	8008042 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e8e:	1e5a      	subs	r2, r3, #1
 8007e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e92:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007e94:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9c:	d112      	bne.n	8007ec4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d016      	beq.n	8007ed4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ea8:	3310      	adds	r3, #16
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 ff84 	bl	8008db8 <xTaskRemoveFromEventList>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d00e      	beq.n	8007ed4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d00b      	beq.n	8007ed4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2201      	movs	r2, #1
 8007ec0:	601a      	str	r2, [r3, #0]
 8007ec2:	e007      	b.n	8007ed4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007ec4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007ec8:	3301      	adds	r3, #1
 8007eca:	b2db      	uxtb	r3, r3
 8007ecc:	b25a      	sxtb	r2, r3
 8007ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ed0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8007ed8:	e001      	b.n	8007ede <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007eda:	2300      	movs	r3, #0
 8007edc:	637b      	str	r3, [r7, #52]	; 0x34
 8007ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ee0:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	f383 8811 	msr	BASEPRI, r3
}
 8007ee8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007eec:	4618      	mov	r0, r3
 8007eee:	3738      	adds	r7, #56	; 0x38
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	bd80      	pop	{r7, pc}

08007ef4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007ef4:	b580      	push	{r7, lr}
 8007ef6:	b084      	sub	sp, #16
 8007ef8:	af00      	add	r7, sp, #0
 8007efa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10c      	bne.n	8007f20 <vQueueDelete+0x2c>
	__asm volatile
 8007f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f0a:	b672      	cpsid	i
 8007f0c:	f383 8811 	msr	BASEPRI, r3
 8007f10:	f3bf 8f6f 	isb	sy
 8007f14:	f3bf 8f4f 	dsb	sy
 8007f18:	b662      	cpsie	i
 8007f1a:	60bb      	str	r3, [r7, #8]
}
 8007f1c:	bf00      	nop
 8007f1e:	e7fe      	b.n	8007f1e <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007f20:	68f8      	ldr	r0, [r7, #12]
 8007f22:	f000 f95f 	bl	80081e4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d102      	bne.n	8007f36 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8007f30:	68f8      	ldr	r0, [r7, #12]
 8007f32:	f002 f961 	bl	800a1f8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007f36:	bf00      	nop
 8007f38:	3710      	adds	r7, #16
 8007f3a:	46bd      	mov	sp, r7
 8007f3c:	bd80      	pop	{r7, pc}

08007f3e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007f3e:	b480      	push	{r7}
 8007f40:	b085      	sub	sp, #20
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d006      	beq.n	8007f5c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	e001      	b.n	8007f60 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007f60:	68fb      	ldr	r3, [r7, #12]
	}
 8007f62:	4618      	mov	r0, r3
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b086      	sub	sp, #24
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	60f8      	str	r0, [r7, #12]
 8007f76:	60b9      	str	r1, [r7, #8]
 8007f78:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f82:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d10d      	bne.n	8007fa8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d14d      	bne.n	8008030 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	689b      	ldr	r3, [r3, #8]
 8007f98:	4618      	mov	r0, r3
 8007f9a:	f001 f96d 	bl	8009278 <xTaskPriorityDisinherit>
 8007f9e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	609a      	str	r2, [r3, #8]
 8007fa6:	e043      	b.n	8008030 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d119      	bne.n	8007fe2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	6858      	ldr	r0, [r3, #4]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	68b9      	ldr	r1, [r7, #8]
 8007fba:	f00e ffe6 	bl	8016f8a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	685a      	ldr	r2, [r3, #4]
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc6:	441a      	add	r2, r3
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	685a      	ldr	r2, [r3, #4]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	689b      	ldr	r3, [r3, #8]
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	d32b      	bcc.n	8008030 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	605a      	str	r2, [r3, #4]
 8007fe0:	e026      	b.n	8008030 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	68d8      	ldr	r0, [r3, #12]
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fea:	461a      	mov	r2, r3
 8007fec:	68b9      	ldr	r1, [r7, #8]
 8007fee:	f00e ffcc 	bl	8016f8a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	68da      	ldr	r2, [r3, #12]
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ffa:	425b      	negs	r3, r3
 8007ffc:	441a      	add	r2, r3
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	68da      	ldr	r2, [r3, #12]
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	429a      	cmp	r2, r3
 800800c:	d207      	bcs.n	800801e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	689a      	ldr	r2, [r3, #8]
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008016:	425b      	negs	r3, r3
 8008018:	441a      	add	r2, r3
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2b02      	cmp	r3, #2
 8008022:	d105      	bne.n	8008030 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	3b01      	subs	r3, #1
 800802e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	1c5a      	adds	r2, r3, #1
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008038:	697b      	ldr	r3, [r7, #20]
}
 800803a:	4618      	mov	r0, r3
 800803c:	3718      	adds	r7, #24
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}

08008042 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008042:	b580      	push	{r7, lr}
 8008044:	b082      	sub	sp, #8
 8008046:	af00      	add	r7, sp, #0
 8008048:	6078      	str	r0, [r7, #4]
 800804a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008050:	2b00      	cmp	r3, #0
 8008052:	d018      	beq.n	8008086 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	68da      	ldr	r2, [r3, #12]
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805c:	441a      	add	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	68da      	ldr	r2, [r3, #12]
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	689b      	ldr	r3, [r3, #8]
 800806a:	429a      	cmp	r2, r3
 800806c:	d303      	bcc.n	8008076 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	68d9      	ldr	r1, [r3, #12]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800807e:	461a      	mov	r2, r3
 8008080:	6838      	ldr	r0, [r7, #0]
 8008082:	f00e ff82 	bl	8016f8a <memcpy>
	}
}
 8008086:	bf00      	nop
 8008088:	3708      	adds	r7, #8
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}

0800808e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b084      	sub	sp, #16
 8008092:	af00      	add	r7, sp, #0
 8008094:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008096:	f001 feb9 	bl	8009e0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80080a0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080a2:	e011      	b.n	80080c8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d012      	beq.n	80080d2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	3324      	adds	r3, #36	; 0x24
 80080b0:	4618      	mov	r0, r3
 80080b2:	f000 fe81 	bl	8008db8 <xTaskRemoveFromEventList>
 80080b6:	4603      	mov	r3, r0
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d001      	beq.n	80080c0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80080bc:	f000 ff5e 	bl	8008f7c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80080c0:	7bfb      	ldrb	r3, [r7, #15]
 80080c2:	3b01      	subs	r3, #1
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80080c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	dce9      	bgt.n	80080a4 <prvUnlockQueue+0x16>
 80080d0:	e000      	b.n	80080d4 <prvUnlockQueue+0x46>
					break;
 80080d2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	22ff      	movs	r2, #255	; 0xff
 80080d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80080dc:	f001 feca 	bl	8009e74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80080e0:	f001 fe94 	bl	8009e0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80080ea:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80080ec:	e011      	b.n	8008112 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	691b      	ldr	r3, [r3, #16]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d012      	beq.n	800811c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	3310      	adds	r3, #16
 80080fa:	4618      	mov	r0, r3
 80080fc:	f000 fe5c 	bl	8008db8 <xTaskRemoveFromEventList>
 8008100:	4603      	mov	r3, r0
 8008102:	2b00      	cmp	r3, #0
 8008104:	d001      	beq.n	800810a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008106:	f000 ff39 	bl	8008f7c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800810a:	7bbb      	ldrb	r3, [r7, #14]
 800810c:	3b01      	subs	r3, #1
 800810e:	b2db      	uxtb	r3, r3
 8008110:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008112:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008116:	2b00      	cmp	r3, #0
 8008118:	dce9      	bgt.n	80080ee <prvUnlockQueue+0x60>
 800811a:	e000      	b.n	800811e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800811c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	22ff      	movs	r2, #255	; 0xff
 8008122:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008126:	f001 fea5 	bl	8009e74 <vPortExitCritical>
}
 800812a:	bf00      	nop
 800812c:	3710      	adds	r7, #16
 800812e:	46bd      	mov	sp, r7
 8008130:	bd80      	pop	{r7, pc}

08008132 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008132:	b580      	push	{r7, lr}
 8008134:	b084      	sub	sp, #16
 8008136:	af00      	add	r7, sp, #0
 8008138:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800813a:	f001 fe67 	bl	8009e0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008142:	2b00      	cmp	r3, #0
 8008144:	d102      	bne.n	800814c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008146:	2301      	movs	r3, #1
 8008148:	60fb      	str	r3, [r7, #12]
 800814a:	e001      	b.n	8008150 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800814c:	2300      	movs	r3, #0
 800814e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008150:	f001 fe90 	bl	8009e74 <vPortExitCritical>

	return xReturn;
 8008154:	68fb      	ldr	r3, [r7, #12]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3710      	adds	r7, #16
 800815a:	46bd      	mov	sp, r7
 800815c:	bd80      	pop	{r7, pc}

0800815e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800815e:	b580      	push	{r7, lr}
 8008160:	b084      	sub	sp, #16
 8008162:	af00      	add	r7, sp, #0
 8008164:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008166:	f001 fe51 	bl	8009e0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008172:	429a      	cmp	r2, r3
 8008174:	d102      	bne.n	800817c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008176:	2301      	movs	r3, #1
 8008178:	60fb      	str	r3, [r7, #12]
 800817a:	e001      	b.n	8008180 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800817c:	2300      	movs	r3, #0
 800817e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008180:	f001 fe78 	bl	8009e74 <vPortExitCritical>

	return xReturn;
 8008184:	68fb      	ldr	r3, [r7, #12]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3710      	adds	r7, #16
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
	...

08008190 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008190:	b480      	push	{r7}
 8008192:	b085      	sub	sp, #20
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
 8008198:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800819a:	2300      	movs	r3, #0
 800819c:	60fb      	str	r3, [r7, #12]
 800819e:	e014      	b.n	80081ca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80081a0:	4a0f      	ldr	r2, [pc, #60]	; (80081e0 <vQueueAddToRegistry+0x50>)
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d10b      	bne.n	80081c4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80081ac:	490c      	ldr	r1, [pc, #48]	; (80081e0 <vQueueAddToRegistry+0x50>)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	683a      	ldr	r2, [r7, #0]
 80081b2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80081b6:	4a0a      	ldr	r2, [pc, #40]	; (80081e0 <vQueueAddToRegistry+0x50>)
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	00db      	lsls	r3, r3, #3
 80081bc:	4413      	add	r3, r2
 80081be:	687a      	ldr	r2, [r7, #4]
 80081c0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80081c2:	e006      	b.n	80081d2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	3301      	adds	r3, #1
 80081c8:	60fb      	str	r3, [r7, #12]
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2b07      	cmp	r3, #7
 80081ce:	d9e7      	bls.n	80081a0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80081d0:	bf00      	nop
 80081d2:	bf00      	nop
 80081d4:	3714      	adds	r7, #20
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	20005644 	.word	0x20005644

080081e4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80081ec:	2300      	movs	r3, #0
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	e016      	b.n	8008220 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80081f2:	4a10      	ldr	r2, [pc, #64]	; (8008234 <vQueueUnregisterQueue+0x50>)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	00db      	lsls	r3, r3, #3
 80081f8:	4413      	add	r3, r2
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	687a      	ldr	r2, [r7, #4]
 80081fe:	429a      	cmp	r2, r3
 8008200:	d10b      	bne.n	800821a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8008202:	4a0c      	ldr	r2, [pc, #48]	; (8008234 <vQueueUnregisterQueue+0x50>)
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2100      	movs	r1, #0
 8008208:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800820c:	4a09      	ldr	r2, [pc, #36]	; (8008234 <vQueueUnregisterQueue+0x50>)
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	00db      	lsls	r3, r3, #3
 8008212:	4413      	add	r3, r2
 8008214:	2200      	movs	r2, #0
 8008216:	605a      	str	r2, [r3, #4]
				break;
 8008218:	e006      	b.n	8008228 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3301      	adds	r3, #1
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2b07      	cmp	r3, #7
 8008224:	d9e5      	bls.n	80081f2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8008226:	bf00      	nop
 8008228:	bf00      	nop
 800822a:	3714      	adds	r7, #20
 800822c:	46bd      	mov	sp, r7
 800822e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008232:	4770      	bx	lr
 8008234:	20005644 	.word	0x20005644

08008238 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af00      	add	r7, sp, #0
 800823e:	60f8      	str	r0, [r7, #12]
 8008240:	60b9      	str	r1, [r7, #8]
 8008242:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008248:	f001 fde0 	bl	8009e0c <vPortEnterCritical>
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008252:	b25b      	sxtb	r3, r3
 8008254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008258:	d103      	bne.n	8008262 <vQueueWaitForMessageRestricted+0x2a>
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008268:	b25b      	sxtb	r3, r3
 800826a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800826e:	d103      	bne.n	8008278 <vQueueWaitForMessageRestricted+0x40>
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	2200      	movs	r2, #0
 8008274:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008278:	f001 fdfc 	bl	8009e74 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008280:	2b00      	cmp	r3, #0
 8008282:	d106      	bne.n	8008292 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	3324      	adds	r3, #36	; 0x24
 8008288:	687a      	ldr	r2, [r7, #4]
 800828a:	68b9      	ldr	r1, [r7, #8]
 800828c:	4618      	mov	r0, r3
 800828e:	f000 fd65 	bl	8008d5c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008292:	6978      	ldr	r0, [r7, #20]
 8008294:	f7ff fefb 	bl	800808e <prvUnlockQueue>
	}
 8008298:	bf00      	nop
 800829a:	3718      	adds	r7, #24
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b08e      	sub	sp, #56	; 0x38
 80082a4:	af04      	add	r7, sp, #16
 80082a6:	60f8      	str	r0, [r7, #12]
 80082a8:	60b9      	str	r1, [r7, #8]
 80082aa:	607a      	str	r2, [r7, #4]
 80082ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80082ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10c      	bne.n	80082ce <xTaskCreateStatic+0x2e>
	__asm volatile
 80082b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082b8:	b672      	cpsid	i
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	b662      	cpsie	i
 80082c8:	623b      	str	r3, [r7, #32]
}
 80082ca:	bf00      	nop
 80082cc:	e7fe      	b.n	80082cc <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80082ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10c      	bne.n	80082ee <xTaskCreateStatic+0x4e>
	__asm volatile
 80082d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082d8:	b672      	cpsid	i
 80082da:	f383 8811 	msr	BASEPRI, r3
 80082de:	f3bf 8f6f 	isb	sy
 80082e2:	f3bf 8f4f 	dsb	sy
 80082e6:	b662      	cpsie	i
 80082e8:	61fb      	str	r3, [r7, #28]
}
 80082ea:	bf00      	nop
 80082ec:	e7fe      	b.n	80082ec <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80082ee:	23bc      	movs	r3, #188	; 0xbc
 80082f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	2bbc      	cmp	r3, #188	; 0xbc
 80082f6:	d00c      	beq.n	8008312 <xTaskCreateStatic+0x72>
	__asm volatile
 80082f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082fc:	b672      	cpsid	i
 80082fe:	f383 8811 	msr	BASEPRI, r3
 8008302:	f3bf 8f6f 	isb	sy
 8008306:	f3bf 8f4f 	dsb	sy
 800830a:	b662      	cpsie	i
 800830c:	61bb      	str	r3, [r7, #24]
}
 800830e:	bf00      	nop
 8008310:	e7fe      	b.n	8008310 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008312:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008314:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008316:	2b00      	cmp	r3, #0
 8008318:	d01e      	beq.n	8008358 <xTaskCreateStatic+0xb8>
 800831a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800831c:	2b00      	cmp	r3, #0
 800831e:	d01b      	beq.n	8008358 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008322:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008326:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008328:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	2202      	movs	r2, #2
 800832e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008332:	2300      	movs	r3, #0
 8008334:	9303      	str	r3, [sp, #12]
 8008336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008338:	9302      	str	r3, [sp, #8]
 800833a:	f107 0314 	add.w	r3, r7, #20
 800833e:	9301      	str	r3, [sp, #4]
 8008340:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008342:	9300      	str	r3, [sp, #0]
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	68b9      	ldr	r1, [r7, #8]
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f000 f850 	bl	80083f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008350:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008352:	f000 f8f5 	bl	8008540 <prvAddNewTaskToReadyList>
 8008356:	e001      	b.n	800835c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8008358:	2300      	movs	r3, #0
 800835a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800835c:	697b      	ldr	r3, [r7, #20]
	}
 800835e:	4618      	mov	r0, r3
 8008360:	3728      	adds	r7, #40	; 0x28
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008366:	b580      	push	{r7, lr}
 8008368:	b08c      	sub	sp, #48	; 0x30
 800836a:	af04      	add	r7, sp, #16
 800836c:	60f8      	str	r0, [r7, #12]
 800836e:	60b9      	str	r1, [r7, #8]
 8008370:	603b      	str	r3, [r7, #0]
 8008372:	4613      	mov	r3, r2
 8008374:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008376:	88fb      	ldrh	r3, [r7, #6]
 8008378:	009b      	lsls	r3, r3, #2
 800837a:	4618      	mov	r0, r3
 800837c:	f001 fe72 	bl	800a064 <pvPortMalloc>
 8008380:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d00e      	beq.n	80083a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008388:	20bc      	movs	r0, #188	; 0xbc
 800838a:	f001 fe6b 	bl	800a064 <pvPortMalloc>
 800838e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008390:	69fb      	ldr	r3, [r7, #28]
 8008392:	2b00      	cmp	r3, #0
 8008394:	d003      	beq.n	800839e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008396:	69fb      	ldr	r3, [r7, #28]
 8008398:	697a      	ldr	r2, [r7, #20]
 800839a:	631a      	str	r2, [r3, #48]	; 0x30
 800839c:	e005      	b.n	80083aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800839e:	6978      	ldr	r0, [r7, #20]
 80083a0:	f001 ff2a 	bl	800a1f8 <vPortFree>
 80083a4:	e001      	b.n	80083aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80083a6:	2300      	movs	r3, #0
 80083a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d017      	beq.n	80083e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80083b0:	69fb      	ldr	r3, [r7, #28]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80083b8:	88fa      	ldrh	r2, [r7, #6]
 80083ba:	2300      	movs	r3, #0
 80083bc:	9303      	str	r3, [sp, #12]
 80083be:	69fb      	ldr	r3, [r7, #28]
 80083c0:	9302      	str	r3, [sp, #8]
 80083c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c4:	9301      	str	r3, [sp, #4]
 80083c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	683b      	ldr	r3, [r7, #0]
 80083cc:	68b9      	ldr	r1, [r7, #8]
 80083ce:	68f8      	ldr	r0, [r7, #12]
 80083d0:	f000 f80e 	bl	80083f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083d4:	69f8      	ldr	r0, [r7, #28]
 80083d6:	f000 f8b3 	bl	8008540 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80083da:	2301      	movs	r3, #1
 80083dc:	61bb      	str	r3, [r7, #24]
 80083de:	e002      	b.n	80083e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083e0:	f04f 33ff 	mov.w	r3, #4294967295
 80083e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80083e6:	69bb      	ldr	r3, [r7, #24]
	}
 80083e8:	4618      	mov	r0, r3
 80083ea:	3720      	adds	r7, #32
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}

080083f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b088      	sub	sp, #32
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	60f8      	str	r0, [r7, #12]
 80083f8:	60b9      	str	r1, [r7, #8]
 80083fa:	607a      	str	r2, [r7, #4]
 80083fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80083fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008400:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	461a      	mov	r2, r3
 8008408:	21a5      	movs	r1, #165	; 0xa5
 800840a:	f00e fdcc 	bl	8016fa6 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008412:	6879      	ldr	r1, [r7, #4]
 8008414:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008418:	440b      	add	r3, r1
 800841a:	009b      	lsls	r3, r3, #2
 800841c:	4413      	add	r3, r2
 800841e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008420:	69bb      	ldr	r3, [r7, #24]
 8008422:	f023 0307 	bic.w	r3, r3, #7
 8008426:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008428:	69bb      	ldr	r3, [r7, #24]
 800842a:	f003 0307 	and.w	r3, r3, #7
 800842e:	2b00      	cmp	r3, #0
 8008430:	d00c      	beq.n	800844c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8008432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008436:	b672      	cpsid	i
 8008438:	f383 8811 	msr	BASEPRI, r3
 800843c:	f3bf 8f6f 	isb	sy
 8008440:	f3bf 8f4f 	dsb	sy
 8008444:	b662      	cpsie	i
 8008446:	617b      	str	r3, [r7, #20]
}
 8008448:	bf00      	nop
 800844a:	e7fe      	b.n	800844a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800844c:	68bb      	ldr	r3, [r7, #8]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d01f      	beq.n	8008492 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008452:	2300      	movs	r3, #0
 8008454:	61fb      	str	r3, [r7, #28]
 8008456:	e012      	b.n	800847e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008458:	68ba      	ldr	r2, [r7, #8]
 800845a:	69fb      	ldr	r3, [r7, #28]
 800845c:	4413      	add	r3, r2
 800845e:	7819      	ldrb	r1, [r3, #0]
 8008460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	4413      	add	r3, r2
 8008466:	3334      	adds	r3, #52	; 0x34
 8008468:	460a      	mov	r2, r1
 800846a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800846c:	68ba      	ldr	r2, [r7, #8]
 800846e:	69fb      	ldr	r3, [r7, #28]
 8008470:	4413      	add	r3, r2
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d006      	beq.n	8008486 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008478:	69fb      	ldr	r3, [r7, #28]
 800847a:	3301      	adds	r3, #1
 800847c:	61fb      	str	r3, [r7, #28]
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	2b0f      	cmp	r3, #15
 8008482:	d9e9      	bls.n	8008458 <prvInitialiseNewTask+0x68>
 8008484:	e000      	b.n	8008488 <prvInitialiseNewTask+0x98>
			{
				break;
 8008486:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800848a:	2200      	movs	r2, #0
 800848c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008490:	e003      	b.n	800849a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008494:	2200      	movs	r2, #0
 8008496:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800849a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849c:	2b37      	cmp	r3, #55	; 0x37
 800849e:	d901      	bls.n	80084a4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084a0:	2337      	movs	r3, #55	; 0x37
 80084a2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80084a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084a8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80084aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084ae:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80084b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b2:	2200      	movs	r2, #0
 80084b4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084b8:	3304      	adds	r3, #4
 80084ba:	4618      	mov	r0, r3
 80084bc:	f7fe fd4c 	bl	8006f58 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80084c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c2:	3318      	adds	r3, #24
 80084c4:	4618      	mov	r0, r3
 80084c6:	f7fe fd47 	bl	8006f58 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084ce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80084d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084de:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80084e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e2:	2200      	movs	r2, #0
 80084e4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ea:	2200      	movs	r2, #0
 80084ec:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80084f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084f2:	3354      	adds	r3, #84	; 0x54
 80084f4:	2260      	movs	r2, #96	; 0x60
 80084f6:	2100      	movs	r1, #0
 80084f8:	4618      	mov	r0, r3
 80084fa:	f00e fd54 	bl	8016fa6 <memset>
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	4a0c      	ldr	r2, [pc, #48]	; (8008534 <prvInitialiseNewTask+0x144>)
 8008502:	659a      	str	r2, [r3, #88]	; 0x58
 8008504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008506:	4a0c      	ldr	r2, [pc, #48]	; (8008538 <prvInitialiseNewTask+0x148>)
 8008508:	65da      	str	r2, [r3, #92]	; 0x5c
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	4a0b      	ldr	r2, [pc, #44]	; (800853c <prvInitialiseNewTask+0x14c>)
 800850e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008510:	683a      	ldr	r2, [r7, #0]
 8008512:	68f9      	ldr	r1, [r7, #12]
 8008514:	69b8      	ldr	r0, [r7, #24]
 8008516:	f001 fb6b 	bl	8009bf0 <pxPortInitialiseStack>
 800851a:	4602      	mov	r2, r0
 800851c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800851e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008522:	2b00      	cmp	r3, #0
 8008524:	d002      	beq.n	800852c <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800852a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800852c:	bf00      	nop
 800852e:	3720      	adds	r7, #32
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	0801b130 	.word	0x0801b130
 8008538:	0801b150 	.word	0x0801b150
 800853c:	0801b110 	.word	0x0801b110

08008540 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008548:	f001 fc60 	bl	8009e0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800854c:	4b2d      	ldr	r3, [pc, #180]	; (8008604 <prvAddNewTaskToReadyList+0xc4>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3301      	adds	r3, #1
 8008552:	4a2c      	ldr	r2, [pc, #176]	; (8008604 <prvAddNewTaskToReadyList+0xc4>)
 8008554:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008556:	4b2c      	ldr	r3, [pc, #176]	; (8008608 <prvAddNewTaskToReadyList+0xc8>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	2b00      	cmp	r3, #0
 800855c:	d109      	bne.n	8008572 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800855e:	4a2a      	ldr	r2, [pc, #168]	; (8008608 <prvAddNewTaskToReadyList+0xc8>)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008564:	4b27      	ldr	r3, [pc, #156]	; (8008604 <prvAddNewTaskToReadyList+0xc4>)
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b01      	cmp	r3, #1
 800856a:	d110      	bne.n	800858e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800856c:	f000 fd2a 	bl	8008fc4 <prvInitialiseTaskLists>
 8008570:	e00d      	b.n	800858e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008572:	4b26      	ldr	r3, [pc, #152]	; (800860c <prvAddNewTaskToReadyList+0xcc>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d109      	bne.n	800858e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800857a:	4b23      	ldr	r3, [pc, #140]	; (8008608 <prvAddNewTaskToReadyList+0xc8>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008584:	429a      	cmp	r2, r3
 8008586:	d802      	bhi.n	800858e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008588:	4a1f      	ldr	r2, [pc, #124]	; (8008608 <prvAddNewTaskToReadyList+0xc8>)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800858e:	4b20      	ldr	r3, [pc, #128]	; (8008610 <prvAddNewTaskToReadyList+0xd0>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	3301      	adds	r3, #1
 8008594:	4a1e      	ldr	r2, [pc, #120]	; (8008610 <prvAddNewTaskToReadyList+0xd0>)
 8008596:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008598:	4b1d      	ldr	r3, [pc, #116]	; (8008610 <prvAddNewTaskToReadyList+0xd0>)
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a4:	4b1b      	ldr	r3, [pc, #108]	; (8008614 <prvAddNewTaskToReadyList+0xd4>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d903      	bls.n	80085b4 <prvAddNewTaskToReadyList+0x74>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b0:	4a18      	ldr	r2, [pc, #96]	; (8008614 <prvAddNewTaskToReadyList+0xd4>)
 80085b2:	6013      	str	r3, [r2, #0]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085b8:	4613      	mov	r3, r2
 80085ba:	009b      	lsls	r3, r3, #2
 80085bc:	4413      	add	r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	4a15      	ldr	r2, [pc, #84]	; (8008618 <prvAddNewTaskToReadyList+0xd8>)
 80085c2:	441a      	add	r2, r3
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	3304      	adds	r3, #4
 80085c8:	4619      	mov	r1, r3
 80085ca:	4610      	mov	r0, r2
 80085cc:	f7fe fcd1 	bl	8006f72 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80085d0:	f001 fc50 	bl	8009e74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80085d4:	4b0d      	ldr	r3, [pc, #52]	; (800860c <prvAddNewTaskToReadyList+0xcc>)
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00e      	beq.n	80085fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085dc:	4b0a      	ldr	r3, [pc, #40]	; (8008608 <prvAddNewTaskToReadyList+0xc8>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085e6:	429a      	cmp	r2, r3
 80085e8:	d207      	bcs.n	80085fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80085ea:	4b0c      	ldr	r3, [pc, #48]	; (800861c <prvAddNewTaskToReadyList+0xdc>)
 80085ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085f0:	601a      	str	r2, [r3, #0]
 80085f2:	f3bf 8f4f 	dsb	sy
 80085f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085fa:	bf00      	nop
 80085fc:	3708      	adds	r7, #8
 80085fe:	46bd      	mov	sp, r7
 8008600:	bd80      	pop	{r7, pc}
 8008602:	bf00      	nop
 8008604:	20005b58 	.word	0x20005b58
 8008608:	20005684 	.word	0x20005684
 800860c:	20005b64 	.word	0x20005b64
 8008610:	20005b74 	.word	0x20005b74
 8008614:	20005b60 	.word	0x20005b60
 8008618:	20005688 	.word	0x20005688
 800861c:	e000ed04 	.word	0xe000ed04

08008620 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8008628:	f001 fbf0 	bl	8009e0c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d102      	bne.n	8008638 <vTaskDelete+0x18>
 8008632:	4b2d      	ldr	r3, [pc, #180]	; (80086e8 <vTaskDelete+0xc8>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	e000      	b.n	800863a <vTaskDelete+0x1a>
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	3304      	adds	r3, #4
 8008640:	4618      	mov	r0, r3
 8008642:	f7fe fcf3 	bl	800702c <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800864a:	2b00      	cmp	r3, #0
 800864c:	d004      	beq.n	8008658 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	3318      	adds	r3, #24
 8008652:	4618      	mov	r0, r3
 8008654:	f7fe fcea 	bl	800702c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8008658:	4b24      	ldr	r3, [pc, #144]	; (80086ec <vTaskDelete+0xcc>)
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	3301      	adds	r3, #1
 800865e:	4a23      	ldr	r2, [pc, #140]	; (80086ec <vTaskDelete+0xcc>)
 8008660:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8008662:	4b21      	ldr	r3, [pc, #132]	; (80086e8 <vTaskDelete+0xc8>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	68fa      	ldr	r2, [r7, #12]
 8008668:	429a      	cmp	r2, r3
 800866a:	d10b      	bne.n	8008684 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	3304      	adds	r3, #4
 8008670:	4619      	mov	r1, r3
 8008672:	481f      	ldr	r0, [pc, #124]	; (80086f0 <vTaskDelete+0xd0>)
 8008674:	f7fe fc7d 	bl	8006f72 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8008678:	4b1e      	ldr	r3, [pc, #120]	; (80086f4 <vTaskDelete+0xd4>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	3301      	adds	r3, #1
 800867e:	4a1d      	ldr	r2, [pc, #116]	; (80086f4 <vTaskDelete+0xd4>)
 8008680:	6013      	str	r3, [r2, #0]
 8008682:	e009      	b.n	8008698 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8008684:	4b1c      	ldr	r3, [pc, #112]	; (80086f8 <vTaskDelete+0xd8>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	3b01      	subs	r3, #1
 800868a:	4a1b      	ldr	r2, [pc, #108]	; (80086f8 <vTaskDelete+0xd8>)
 800868c:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f000 fd06 	bl	80090a0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8008694:	f000 fd3a 	bl	800910c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8008698:	f001 fbec 	bl	8009e74 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800869c:	4b17      	ldr	r3, [pc, #92]	; (80086fc <vTaskDelete+0xdc>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d01d      	beq.n	80086e0 <vTaskDelete+0xc0>
		{
			if( pxTCB == pxCurrentTCB )
 80086a4:	4b10      	ldr	r3, [pc, #64]	; (80086e8 <vTaskDelete+0xc8>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	68fa      	ldr	r2, [r7, #12]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d118      	bne.n	80086e0 <vTaskDelete+0xc0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80086ae:	4b14      	ldr	r3, [pc, #80]	; (8008700 <vTaskDelete+0xe0>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d00c      	beq.n	80086d0 <vTaskDelete+0xb0>
	__asm volatile
 80086b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ba:	b672      	cpsid	i
 80086bc:	f383 8811 	msr	BASEPRI, r3
 80086c0:	f3bf 8f6f 	isb	sy
 80086c4:	f3bf 8f4f 	dsb	sy
 80086c8:	b662      	cpsie	i
 80086ca:	60bb      	str	r3, [r7, #8]
}
 80086cc:	bf00      	nop
 80086ce:	e7fe      	b.n	80086ce <vTaskDelete+0xae>
				portYIELD_WITHIN_API();
 80086d0:	4b0c      	ldr	r3, [pc, #48]	; (8008704 <vTaskDelete+0xe4>)
 80086d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80086d6:	601a      	str	r2, [r3, #0]
 80086d8:	f3bf 8f4f 	dsb	sy
 80086dc:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80086e0:	bf00      	nop
 80086e2:	3710      	adds	r7, #16
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	20005684 	.word	0x20005684
 80086ec:	20005b74 	.word	0x20005b74
 80086f0:	20005b2c 	.word	0x20005b2c
 80086f4:	20005b40 	.word	0x20005b40
 80086f8:	20005b58 	.word	0x20005b58
 80086fc:	20005b64 	.word	0x20005b64
 8008700:	20005b80 	.word	0x20005b80
 8008704:	e000ed04 	.word	0xe000ed04

08008708 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008710:	2300      	movs	r3, #0
 8008712:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d019      	beq.n	800874e <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800871a:	4b14      	ldr	r3, [pc, #80]	; (800876c <vTaskDelay+0x64>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00c      	beq.n	800873c <vTaskDelay+0x34>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008726:	b672      	cpsid	i
 8008728:	f383 8811 	msr	BASEPRI, r3
 800872c:	f3bf 8f6f 	isb	sy
 8008730:	f3bf 8f4f 	dsb	sy
 8008734:	b662      	cpsie	i
 8008736:	60bb      	str	r3, [r7, #8]
}
 8008738:	bf00      	nop
 800873a:	e7fe      	b.n	800873a <vTaskDelay+0x32>
			vTaskSuspendAll();
 800873c:	f000 f8f6 	bl	800892c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008740:	2100      	movs	r1, #0
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f000 fea4 	bl	8009490 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008748:	f000 f8fe 	bl	8008948 <xTaskResumeAll>
 800874c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d107      	bne.n	8008764 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8008754:	4b06      	ldr	r3, [pc, #24]	; (8008770 <vTaskDelay+0x68>)
 8008756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800875a:	601a      	str	r2, [r3, #0]
 800875c:	f3bf 8f4f 	dsb	sy
 8008760:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008764:	bf00      	nop
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	20005b80 	.word	0x20005b80
 8008770:	e000ed04 	.word	0xe000ed04

08008774 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8008774:	b580      	push	{r7, lr}
 8008776:	b088      	sub	sp, #32
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10c      	bne.n	80087a0 <eTaskGetState+0x2c>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800878a:	b672      	cpsid	i
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	b662      	cpsie	i
 800879a:	60bb      	str	r3, [r7, #8]
}
 800879c:	bf00      	nop
 800879e:	e7fe      	b.n	800879e <eTaskGetState+0x2a>

		if( pxTCB == pxCurrentTCB )
 80087a0:	4b23      	ldr	r3, [pc, #140]	; (8008830 <eTaskGetState+0xbc>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	69ba      	ldr	r2, [r7, #24]
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d102      	bne.n	80087b0 <eTaskGetState+0x3c>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80087aa:	2300      	movs	r3, #0
 80087ac:	77fb      	strb	r3, [r7, #31]
 80087ae:	e03a      	b.n	8008826 <eTaskGetState+0xb2>
		}
		else
		{
			taskENTER_CRITICAL();
 80087b0:	f001 fb2c 	bl	8009e0c <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 80087b4:	69bb      	ldr	r3, [r7, #24]
 80087b6:	695b      	ldr	r3, [r3, #20]
 80087b8:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 80087ba:	4b1e      	ldr	r3, [pc, #120]	; (8008834 <eTaskGetState+0xc0>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 80087c0:	4b1d      	ldr	r3, [pc, #116]	; (8008838 <eTaskGetState+0xc4>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 80087c6:	f001 fb55 	bl	8009e74 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 80087ca:	697a      	ldr	r2, [r7, #20]
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d003      	beq.n	80087da <eTaskGetState+0x66>
 80087d2:	697a      	ldr	r2, [r7, #20]
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d102      	bne.n	80087e0 <eTaskGetState+0x6c>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 80087da:	2302      	movs	r3, #2
 80087dc:	77fb      	strb	r3, [r7, #31]
 80087de:	e022      	b.n	8008826 <eTaskGetState+0xb2>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	4a16      	ldr	r2, [pc, #88]	; (800883c <eTaskGetState+0xc8>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d112      	bne.n	800880e <eTaskGetState+0x9a>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 80087e8:	69bb      	ldr	r3, [r7, #24]
 80087ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d10b      	bne.n	8008808 <eTaskGetState+0x94>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80087f0:	69bb      	ldr	r3, [r7, #24]
 80087f2:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80087f6:	b2db      	uxtb	r3, r3
 80087f8:	2b01      	cmp	r3, #1
 80087fa:	d102      	bne.n	8008802 <eTaskGetState+0x8e>
							{
								eReturn = eBlocked;
 80087fc:	2302      	movs	r3, #2
 80087fe:	77fb      	strb	r3, [r7, #31]
 8008800:	e011      	b.n	8008826 <eTaskGetState+0xb2>
							}
							else
							{
								eReturn = eSuspended;
 8008802:	2303      	movs	r3, #3
 8008804:	77fb      	strb	r3, [r7, #31]
 8008806:	e00e      	b.n	8008826 <eTaskGetState+0xb2>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8008808:	2302      	movs	r3, #2
 800880a:	77fb      	strb	r3, [r7, #31]
 800880c:	e00b      	b.n	8008826 <eTaskGetState+0xb2>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800880e:	697b      	ldr	r3, [r7, #20]
 8008810:	4a0b      	ldr	r2, [pc, #44]	; (8008840 <eTaskGetState+0xcc>)
 8008812:	4293      	cmp	r3, r2
 8008814:	d002      	beq.n	800881c <eTaskGetState+0xa8>
 8008816:	697b      	ldr	r3, [r7, #20]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d102      	bne.n	8008822 <eTaskGetState+0xae>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 800881c:	2304      	movs	r3, #4
 800881e:	77fb      	strb	r3, [r7, #31]
 8008820:	e001      	b.n	8008826 <eTaskGetState+0xb2>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 8008822:	2301      	movs	r3, #1
 8008824:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8008826:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8008828:	4618      	mov	r0, r3
 800882a:	3720      	adds	r7, #32
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	20005684 	.word	0x20005684
 8008834:	20005b10 	.word	0x20005b10
 8008838:	20005b14 	.word	0x20005b14
 800883c:	20005b44 	.word	0x20005b44
 8008840:	20005b2c 	.word	0x20005b2c

08008844 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b08a      	sub	sp, #40	; 0x28
 8008848:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800884a:	2300      	movs	r3, #0
 800884c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800884e:	2300      	movs	r3, #0
 8008850:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008852:	463a      	mov	r2, r7
 8008854:	1d39      	adds	r1, r7, #4
 8008856:	f107 0308 	add.w	r3, r7, #8
 800885a:	4618      	mov	r0, r3
 800885c:	f7fe fb28 	bl	8006eb0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008860:	6839      	ldr	r1, [r7, #0]
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	68ba      	ldr	r2, [r7, #8]
 8008866:	9202      	str	r2, [sp, #8]
 8008868:	9301      	str	r3, [sp, #4]
 800886a:	2300      	movs	r3, #0
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	2300      	movs	r3, #0
 8008870:	460a      	mov	r2, r1
 8008872:	4926      	ldr	r1, [pc, #152]	; (800890c <vTaskStartScheduler+0xc8>)
 8008874:	4826      	ldr	r0, [pc, #152]	; (8008910 <vTaskStartScheduler+0xcc>)
 8008876:	f7ff fd13 	bl	80082a0 <xTaskCreateStatic>
 800887a:	4603      	mov	r3, r0
 800887c:	4a25      	ldr	r2, [pc, #148]	; (8008914 <vTaskStartScheduler+0xd0>)
 800887e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008880:	4b24      	ldr	r3, [pc, #144]	; (8008914 <vTaskStartScheduler+0xd0>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008888:	2301      	movs	r3, #1
 800888a:	617b      	str	r3, [r7, #20]
 800888c:	e001      	b.n	8008892 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800888e:	2300      	movs	r3, #0
 8008890:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008892:	697b      	ldr	r3, [r7, #20]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d102      	bne.n	800889e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008898:	f000 fe4e 	bl	8009538 <xTimerCreateTimerTask>
 800889c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800889e:	697b      	ldr	r3, [r7, #20]
 80088a0:	2b01      	cmp	r3, #1
 80088a2:	d11d      	bne.n	80088e0 <vTaskStartScheduler+0x9c>
	__asm volatile
 80088a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088a8:	b672      	cpsid	i
 80088aa:	f383 8811 	msr	BASEPRI, r3
 80088ae:	f3bf 8f6f 	isb	sy
 80088b2:	f3bf 8f4f 	dsb	sy
 80088b6:	b662      	cpsie	i
 80088b8:	613b      	str	r3, [r7, #16]
}
 80088ba:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088bc:	4b16      	ldr	r3, [pc, #88]	; (8008918 <vTaskStartScheduler+0xd4>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	3354      	adds	r3, #84	; 0x54
 80088c2:	4a16      	ldr	r2, [pc, #88]	; (800891c <vTaskStartScheduler+0xd8>)
 80088c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80088c6:	4b16      	ldr	r3, [pc, #88]	; (8008920 <vTaskStartScheduler+0xdc>)
 80088c8:	f04f 32ff 	mov.w	r2, #4294967295
 80088cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80088ce:	4b15      	ldr	r3, [pc, #84]	; (8008924 <vTaskStartScheduler+0xe0>)
 80088d0:	2201      	movs	r2, #1
 80088d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80088d4:	4b14      	ldr	r3, [pc, #80]	; (8008928 <vTaskStartScheduler+0xe4>)
 80088d6:	2200      	movs	r2, #0
 80088d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80088da:	f001 fa19 	bl	8009d10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80088de:	e010      	b.n	8008902 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80088e0:	697b      	ldr	r3, [r7, #20]
 80088e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e6:	d10c      	bne.n	8008902 <vTaskStartScheduler+0xbe>
	__asm volatile
 80088e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088ec:	b672      	cpsid	i
 80088ee:	f383 8811 	msr	BASEPRI, r3
 80088f2:	f3bf 8f6f 	isb	sy
 80088f6:	f3bf 8f4f 	dsb	sy
 80088fa:	b662      	cpsie	i
 80088fc:	60fb      	str	r3, [r7, #12]
}
 80088fe:	bf00      	nop
 8008900:	e7fe      	b.n	8008900 <vTaskStartScheduler+0xbc>
}
 8008902:	bf00      	nop
 8008904:	3718      	adds	r7, #24
 8008906:	46bd      	mov	sp, r7
 8008908:	bd80      	pop	{r7, pc}
 800890a:	bf00      	nop
 800890c:	08017fcc 	.word	0x08017fcc
 8008910:	08008f95 	.word	0x08008f95
 8008914:	20005b7c 	.word	0x20005b7c
 8008918:	20005684 	.word	0x20005684
 800891c:	20000034 	.word	0x20000034
 8008920:	20005b78 	.word	0x20005b78
 8008924:	20005b64 	.word	0x20005b64
 8008928:	20005b5c 	.word	0x20005b5c

0800892c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800892c:	b480      	push	{r7}
 800892e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008930:	4b04      	ldr	r3, [pc, #16]	; (8008944 <vTaskSuspendAll+0x18>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	3301      	adds	r3, #1
 8008936:	4a03      	ldr	r2, [pc, #12]	; (8008944 <vTaskSuspendAll+0x18>)
 8008938:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800893a:	bf00      	nop
 800893c:	46bd      	mov	sp, r7
 800893e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008942:	4770      	bx	lr
 8008944:	20005b80 	.word	0x20005b80

08008948 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800894e:	2300      	movs	r3, #0
 8008950:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008952:	2300      	movs	r3, #0
 8008954:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008956:	4b43      	ldr	r3, [pc, #268]	; (8008a64 <xTaskResumeAll+0x11c>)
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10c      	bne.n	8008978 <xTaskResumeAll+0x30>
	__asm volatile
 800895e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008962:	b672      	cpsid	i
 8008964:	f383 8811 	msr	BASEPRI, r3
 8008968:	f3bf 8f6f 	isb	sy
 800896c:	f3bf 8f4f 	dsb	sy
 8008970:	b662      	cpsie	i
 8008972:	603b      	str	r3, [r7, #0]
}
 8008974:	bf00      	nop
 8008976:	e7fe      	b.n	8008976 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008978:	f001 fa48 	bl	8009e0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800897c:	4b39      	ldr	r3, [pc, #228]	; (8008a64 <xTaskResumeAll+0x11c>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	3b01      	subs	r3, #1
 8008982:	4a38      	ldr	r2, [pc, #224]	; (8008a64 <xTaskResumeAll+0x11c>)
 8008984:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008986:	4b37      	ldr	r3, [pc, #220]	; (8008a64 <xTaskResumeAll+0x11c>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d162      	bne.n	8008a54 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800898e:	4b36      	ldr	r3, [pc, #216]	; (8008a68 <xTaskResumeAll+0x120>)
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d05e      	beq.n	8008a54 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008996:	e02f      	b.n	80089f8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008998:	4b34      	ldr	r3, [pc, #208]	; (8008a6c <xTaskResumeAll+0x124>)
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	3318      	adds	r3, #24
 80089a4:	4618      	mov	r0, r3
 80089a6:	f7fe fb41 	bl	800702c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	3304      	adds	r3, #4
 80089ae:	4618      	mov	r0, r3
 80089b0:	f7fe fb3c 	bl	800702c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b8:	4b2d      	ldr	r3, [pc, #180]	; (8008a70 <xTaskResumeAll+0x128>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d903      	bls.n	80089c8 <xTaskResumeAll+0x80>
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c4:	4a2a      	ldr	r2, [pc, #168]	; (8008a70 <xTaskResumeAll+0x128>)
 80089c6:	6013      	str	r3, [r2, #0]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089cc:	4613      	mov	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	4413      	add	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4a27      	ldr	r2, [pc, #156]	; (8008a74 <xTaskResumeAll+0x12c>)
 80089d6:	441a      	add	r2, r3
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	3304      	adds	r3, #4
 80089dc:	4619      	mov	r1, r3
 80089de:	4610      	mov	r0, r2
 80089e0:	f7fe fac7 	bl	8006f72 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e8:	4b23      	ldr	r3, [pc, #140]	; (8008a78 <xTaskResumeAll+0x130>)
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ee:	429a      	cmp	r2, r3
 80089f0:	d302      	bcc.n	80089f8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80089f2:	4b22      	ldr	r3, [pc, #136]	; (8008a7c <xTaskResumeAll+0x134>)
 80089f4:	2201      	movs	r2, #1
 80089f6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80089f8:	4b1c      	ldr	r3, [pc, #112]	; (8008a6c <xTaskResumeAll+0x124>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d1cb      	bne.n	8008998 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d001      	beq.n	8008a0a <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008a06:	f000 fb81 	bl	800910c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8008a0a:	4b1d      	ldr	r3, [pc, #116]	; (8008a80 <xTaskResumeAll+0x138>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d010      	beq.n	8008a38 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008a16:	f000 f859 	bl	8008acc <xTaskIncrementTick>
 8008a1a:	4603      	mov	r3, r0
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d002      	beq.n	8008a26 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8008a20:	4b16      	ldr	r3, [pc, #88]	; (8008a7c <xTaskResumeAll+0x134>)
 8008a22:	2201      	movs	r2, #1
 8008a24:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1f1      	bne.n	8008a16 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 8008a32:	4b13      	ldr	r3, [pc, #76]	; (8008a80 <xTaskResumeAll+0x138>)
 8008a34:	2200      	movs	r2, #0
 8008a36:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008a38:	4b10      	ldr	r3, [pc, #64]	; (8008a7c <xTaskResumeAll+0x134>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d009      	beq.n	8008a54 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008a40:	2301      	movs	r3, #1
 8008a42:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008a44:	4b0f      	ldr	r3, [pc, #60]	; (8008a84 <xTaskResumeAll+0x13c>)
 8008a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a4a:	601a      	str	r2, [r3, #0]
 8008a4c:	f3bf 8f4f 	dsb	sy
 8008a50:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008a54:	f001 fa0e 	bl	8009e74 <vPortExitCritical>

	return xAlreadyYielded;
 8008a58:	68bb      	ldr	r3, [r7, #8]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
 8008a62:	bf00      	nop
 8008a64:	20005b80 	.word	0x20005b80
 8008a68:	20005b58 	.word	0x20005b58
 8008a6c:	20005b18 	.word	0x20005b18
 8008a70:	20005b60 	.word	0x20005b60
 8008a74:	20005688 	.word	0x20005688
 8008a78:	20005684 	.word	0x20005684
 8008a7c:	20005b6c 	.word	0x20005b6c
 8008a80:	20005b68 	.word	0x20005b68
 8008a84:	e000ed04 	.word	0xe000ed04

08008a88 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008a88:	b480      	push	{r7}
 8008a8a:	b083      	sub	sp, #12
 8008a8c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008a8e:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <xTaskGetTickCount+0x1c>)
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008a94:	687b      	ldr	r3, [r7, #4]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	370c      	adds	r7, #12
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa0:	4770      	bx	lr
 8008aa2:	bf00      	nop
 8008aa4:	20005b5c 	.word	0x20005b5c

08008aa8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008aae:	f001 fa95 	bl	8009fdc <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008ab6:	4b04      	ldr	r3, [pc, #16]	; (8008ac8 <xTaskGetTickCountFromISR+0x20>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008abc:	683b      	ldr	r3, [r7, #0]
}
 8008abe:	4618      	mov	r0, r3
 8008ac0:	3708      	adds	r7, #8
 8008ac2:	46bd      	mov	sp, r7
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	20005b5c 	.word	0x20005b5c

08008acc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	b086      	sub	sp, #24
 8008ad0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ad6:	4b50      	ldr	r3, [pc, #320]	; (8008c18 <xTaskIncrementTick+0x14c>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	f040 808b 	bne.w	8008bf6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008ae0:	4b4e      	ldr	r3, [pc, #312]	; (8008c1c <xTaskIncrementTick+0x150>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008ae8:	4a4c      	ldr	r2, [pc, #304]	; (8008c1c <xTaskIncrementTick+0x150>)
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d122      	bne.n	8008b3a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8008af4:	4b4a      	ldr	r3, [pc, #296]	; (8008c20 <xTaskIncrementTick+0x154>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d00c      	beq.n	8008b18 <xTaskIncrementTick+0x4c>
	__asm volatile
 8008afe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b02:	b672      	cpsid	i
 8008b04:	f383 8811 	msr	BASEPRI, r3
 8008b08:	f3bf 8f6f 	isb	sy
 8008b0c:	f3bf 8f4f 	dsb	sy
 8008b10:	b662      	cpsie	i
 8008b12:	603b      	str	r3, [r7, #0]
}
 8008b14:	bf00      	nop
 8008b16:	e7fe      	b.n	8008b16 <xTaskIncrementTick+0x4a>
 8008b18:	4b41      	ldr	r3, [pc, #260]	; (8008c20 <xTaskIncrementTick+0x154>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	60fb      	str	r3, [r7, #12]
 8008b1e:	4b41      	ldr	r3, [pc, #260]	; (8008c24 <xTaskIncrementTick+0x158>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	4a3f      	ldr	r2, [pc, #252]	; (8008c20 <xTaskIncrementTick+0x154>)
 8008b24:	6013      	str	r3, [r2, #0]
 8008b26:	4a3f      	ldr	r2, [pc, #252]	; (8008c24 <xTaskIncrementTick+0x158>)
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	6013      	str	r3, [r2, #0]
 8008b2c:	4b3e      	ldr	r3, [pc, #248]	; (8008c28 <xTaskIncrementTick+0x15c>)
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	3301      	adds	r3, #1
 8008b32:	4a3d      	ldr	r2, [pc, #244]	; (8008c28 <xTaskIncrementTick+0x15c>)
 8008b34:	6013      	str	r3, [r2, #0]
 8008b36:	f000 fae9 	bl	800910c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008b3a:	4b3c      	ldr	r3, [pc, #240]	; (8008c2c <xTaskIncrementTick+0x160>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d349      	bcc.n	8008bd8 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b44:	4b36      	ldr	r3, [pc, #216]	; (8008c20 <xTaskIncrementTick+0x154>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d104      	bne.n	8008b58 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b4e:	4b37      	ldr	r3, [pc, #220]	; (8008c2c <xTaskIncrementTick+0x160>)
 8008b50:	f04f 32ff 	mov.w	r2, #4294967295
 8008b54:	601a      	str	r2, [r3, #0]
					break;
 8008b56:	e03f      	b.n	8008bd8 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b58:	4b31      	ldr	r3, [pc, #196]	; (8008c20 <xTaskIncrementTick+0x154>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	68db      	ldr	r3, [r3, #12]
 8008b60:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	685b      	ldr	r3, [r3, #4]
 8008b66:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008b68:	693a      	ldr	r2, [r7, #16]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	429a      	cmp	r2, r3
 8008b6e:	d203      	bcs.n	8008b78 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008b70:	4a2e      	ldr	r2, [pc, #184]	; (8008c2c <xTaskIncrementTick+0x160>)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008b76:	e02f      	b.n	8008bd8 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	3304      	adds	r3, #4
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f7fe fa55 	bl	800702c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008b82:	68bb      	ldr	r3, [r7, #8]
 8008b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	d004      	beq.n	8008b94 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b8a:	68bb      	ldr	r3, [r7, #8]
 8008b8c:	3318      	adds	r3, #24
 8008b8e:	4618      	mov	r0, r3
 8008b90:	f7fe fa4c 	bl	800702c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b98:	4b25      	ldr	r3, [pc, #148]	; (8008c30 <xTaskIncrementTick+0x164>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d903      	bls.n	8008ba8 <xTaskIncrementTick+0xdc>
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba4:	4a22      	ldr	r2, [pc, #136]	; (8008c30 <xTaskIncrementTick+0x164>)
 8008ba6:	6013      	str	r3, [r2, #0]
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bac:	4613      	mov	r3, r2
 8008bae:	009b      	lsls	r3, r3, #2
 8008bb0:	4413      	add	r3, r2
 8008bb2:	009b      	lsls	r3, r3, #2
 8008bb4:	4a1f      	ldr	r2, [pc, #124]	; (8008c34 <xTaskIncrementTick+0x168>)
 8008bb6:	441a      	add	r2, r3
 8008bb8:	68bb      	ldr	r3, [r7, #8]
 8008bba:	3304      	adds	r3, #4
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	4610      	mov	r0, r2
 8008bc0:	f7fe f9d7 	bl	8006f72 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bc8:	4b1b      	ldr	r3, [pc, #108]	; (8008c38 <xTaskIncrementTick+0x16c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bce:	429a      	cmp	r2, r3
 8008bd0:	d3b8      	bcc.n	8008b44 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bd6:	e7b5      	b.n	8008b44 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008bd8:	4b17      	ldr	r3, [pc, #92]	; (8008c38 <xTaskIncrementTick+0x16c>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bde:	4915      	ldr	r1, [pc, #84]	; (8008c34 <xTaskIncrementTick+0x168>)
 8008be0:	4613      	mov	r3, r2
 8008be2:	009b      	lsls	r3, r3, #2
 8008be4:	4413      	add	r3, r2
 8008be6:	009b      	lsls	r3, r3, #2
 8008be8:	440b      	add	r3, r1
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	2b01      	cmp	r3, #1
 8008bee:	d907      	bls.n	8008c00 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	617b      	str	r3, [r7, #20]
 8008bf4:	e004      	b.n	8008c00 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8008bf6:	4b11      	ldr	r3, [pc, #68]	; (8008c3c <xTaskIncrementTick+0x170>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	4a0f      	ldr	r2, [pc, #60]	; (8008c3c <xTaskIncrementTick+0x170>)
 8008bfe:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8008c00:	4b0f      	ldr	r3, [pc, #60]	; (8008c40 <xTaskIncrementTick+0x174>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d001      	beq.n	8008c0c <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8008c0c:	697b      	ldr	r3, [r7, #20]
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3718      	adds	r7, #24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	20005b80 	.word	0x20005b80
 8008c1c:	20005b5c 	.word	0x20005b5c
 8008c20:	20005b10 	.word	0x20005b10
 8008c24:	20005b14 	.word	0x20005b14
 8008c28:	20005b70 	.word	0x20005b70
 8008c2c:	20005b78 	.word	0x20005b78
 8008c30:	20005b60 	.word	0x20005b60
 8008c34:	20005688 	.word	0x20005688
 8008c38:	20005684 	.word	0x20005684
 8008c3c:	20005b68 	.word	0x20005b68
 8008c40:	20005b6c 	.word	0x20005b6c

08008c44 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008c4a:	4b2b      	ldr	r3, [pc, #172]	; (8008cf8 <vTaskSwitchContext+0xb4>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d003      	beq.n	8008c5a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008c52:	4b2a      	ldr	r3, [pc, #168]	; (8008cfc <vTaskSwitchContext+0xb8>)
 8008c54:	2201      	movs	r2, #1
 8008c56:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008c58:	e048      	b.n	8008cec <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008c5a:	4b28      	ldr	r3, [pc, #160]	; (8008cfc <vTaskSwitchContext+0xb8>)
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c60:	4b27      	ldr	r3, [pc, #156]	; (8008d00 <vTaskSwitchContext+0xbc>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	60fb      	str	r3, [r7, #12]
 8008c66:	e012      	b.n	8008c8e <vTaskSwitchContext+0x4a>
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d10c      	bne.n	8008c88 <vTaskSwitchContext+0x44>
	__asm volatile
 8008c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c72:	b672      	cpsid	i
 8008c74:	f383 8811 	msr	BASEPRI, r3
 8008c78:	f3bf 8f6f 	isb	sy
 8008c7c:	f3bf 8f4f 	dsb	sy
 8008c80:	b662      	cpsie	i
 8008c82:	607b      	str	r3, [r7, #4]
}
 8008c84:	bf00      	nop
 8008c86:	e7fe      	b.n	8008c86 <vTaskSwitchContext+0x42>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	60fb      	str	r3, [r7, #12]
 8008c8e:	491d      	ldr	r1, [pc, #116]	; (8008d04 <vTaskSwitchContext+0xc0>)
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	4613      	mov	r3, r2
 8008c94:	009b      	lsls	r3, r3, #2
 8008c96:	4413      	add	r3, r2
 8008c98:	009b      	lsls	r3, r3, #2
 8008c9a:	440b      	add	r3, r1
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d0e2      	beq.n	8008c68 <vTaskSwitchContext+0x24>
 8008ca2:	68fa      	ldr	r2, [r7, #12]
 8008ca4:	4613      	mov	r3, r2
 8008ca6:	009b      	lsls	r3, r3, #2
 8008ca8:	4413      	add	r3, r2
 8008caa:	009b      	lsls	r3, r3, #2
 8008cac:	4a15      	ldr	r2, [pc, #84]	; (8008d04 <vTaskSwitchContext+0xc0>)
 8008cae:	4413      	add	r3, r2
 8008cb0:	60bb      	str	r3, [r7, #8]
 8008cb2:	68bb      	ldr	r3, [r7, #8]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	685a      	ldr	r2, [r3, #4]
 8008cb8:	68bb      	ldr	r3, [r7, #8]
 8008cba:	605a      	str	r2, [r3, #4]
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	685a      	ldr	r2, [r3, #4]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	3308      	adds	r3, #8
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d104      	bne.n	8008cd2 <vTaskSwitchContext+0x8e>
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	605a      	str	r2, [r3, #4]
 8008cd2:	68bb      	ldr	r3, [r7, #8]
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	4a0b      	ldr	r2, [pc, #44]	; (8008d08 <vTaskSwitchContext+0xc4>)
 8008cda:	6013      	str	r3, [r2, #0]
 8008cdc:	4a08      	ldr	r2, [pc, #32]	; (8008d00 <vTaskSwitchContext+0xbc>)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008ce2:	4b09      	ldr	r3, [pc, #36]	; (8008d08 <vTaskSwitchContext+0xc4>)
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	3354      	adds	r3, #84	; 0x54
 8008ce8:	4a08      	ldr	r2, [pc, #32]	; (8008d0c <vTaskSwitchContext+0xc8>)
 8008cea:	6013      	str	r3, [r2, #0]
}
 8008cec:	bf00      	nop
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr
 8008cf8:	20005b80 	.word	0x20005b80
 8008cfc:	20005b6c 	.word	0x20005b6c
 8008d00:	20005b60 	.word	0x20005b60
 8008d04:	20005688 	.word	0x20005688
 8008d08:	20005684 	.word	0x20005684
 8008d0c:	20000034 	.word	0x20000034

08008d10 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b084      	sub	sp, #16
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
 8008d18:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d10c      	bne.n	8008d3a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d24:	b672      	cpsid	i
 8008d26:	f383 8811 	msr	BASEPRI, r3
 8008d2a:	f3bf 8f6f 	isb	sy
 8008d2e:	f3bf 8f4f 	dsb	sy
 8008d32:	b662      	cpsie	i
 8008d34:	60fb      	str	r3, [r7, #12]
}
 8008d36:	bf00      	nop
 8008d38:	e7fe      	b.n	8008d38 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d3a:	4b07      	ldr	r3, [pc, #28]	; (8008d58 <vTaskPlaceOnEventList+0x48>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	3318      	adds	r3, #24
 8008d40:	4619      	mov	r1, r3
 8008d42:	6878      	ldr	r0, [r7, #4]
 8008d44:	f7fe f939 	bl	8006fba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008d48:	2101      	movs	r1, #1
 8008d4a:	6838      	ldr	r0, [r7, #0]
 8008d4c:	f000 fba0 	bl	8009490 <prvAddCurrentTaskToDelayedList>
}
 8008d50:	bf00      	nop
 8008d52:	3710      	adds	r7, #16
 8008d54:	46bd      	mov	sp, r7
 8008d56:	bd80      	pop	{r7, pc}
 8008d58:	20005684 	.word	0x20005684

08008d5c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008d5c:	b580      	push	{r7, lr}
 8008d5e:	b086      	sub	sp, #24
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	60f8      	str	r0, [r7, #12]
 8008d64:	60b9      	str	r1, [r7, #8]
 8008d66:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10c      	bne.n	8008d88 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d72:	b672      	cpsid	i
 8008d74:	f383 8811 	msr	BASEPRI, r3
 8008d78:	f3bf 8f6f 	isb	sy
 8008d7c:	f3bf 8f4f 	dsb	sy
 8008d80:	b662      	cpsie	i
 8008d82:	617b      	str	r3, [r7, #20]
}
 8008d84:	bf00      	nop
 8008d86:	e7fe      	b.n	8008d86 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008d88:	4b0a      	ldr	r3, [pc, #40]	; (8008db4 <vTaskPlaceOnEventListRestricted+0x58>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	3318      	adds	r3, #24
 8008d8e:	4619      	mov	r1, r3
 8008d90:	68f8      	ldr	r0, [r7, #12]
 8008d92:	f7fe f8ee 	bl	8006f72 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d002      	beq.n	8008da2 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8008da0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008da2:	6879      	ldr	r1, [r7, #4]
 8008da4:	68b8      	ldr	r0, [r7, #8]
 8008da6:	f000 fb73 	bl	8009490 <prvAddCurrentTaskToDelayedList>
	}
 8008daa:	bf00      	nop
 8008dac:	3718      	adds	r7, #24
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	bf00      	nop
 8008db4:	20005684 	.word	0x20005684

08008db8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b086      	sub	sp, #24
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	68db      	ldr	r3, [r3, #12]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d10c      	bne.n	8008de8 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dd2:	b672      	cpsid	i
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	b662      	cpsie	i
 8008de2:	60fb      	str	r3, [r7, #12]
}
 8008de4:	bf00      	nop
 8008de6:	e7fe      	b.n	8008de6 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	3318      	adds	r3, #24
 8008dec:	4618      	mov	r0, r3
 8008dee:	f7fe f91d 	bl	800702c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008df2:	4b1e      	ldr	r3, [pc, #120]	; (8008e6c <xTaskRemoveFromEventList+0xb4>)
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d11d      	bne.n	8008e36 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	3304      	adds	r3, #4
 8008dfe:	4618      	mov	r0, r3
 8008e00:	f7fe f914 	bl	800702c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008e04:	693b      	ldr	r3, [r7, #16]
 8008e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e08:	4b19      	ldr	r3, [pc, #100]	; (8008e70 <xTaskRemoveFromEventList+0xb8>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d903      	bls.n	8008e18 <xTaskRemoveFromEventList+0x60>
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e14:	4a16      	ldr	r2, [pc, #88]	; (8008e70 <xTaskRemoveFromEventList+0xb8>)
 8008e16:	6013      	str	r3, [r2, #0]
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1c:	4613      	mov	r3, r2
 8008e1e:	009b      	lsls	r3, r3, #2
 8008e20:	4413      	add	r3, r2
 8008e22:	009b      	lsls	r3, r3, #2
 8008e24:	4a13      	ldr	r2, [pc, #76]	; (8008e74 <xTaskRemoveFromEventList+0xbc>)
 8008e26:	441a      	add	r2, r3
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	3304      	adds	r3, #4
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	4610      	mov	r0, r2
 8008e30:	f7fe f89f 	bl	8006f72 <vListInsertEnd>
 8008e34:	e005      	b.n	8008e42 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	3318      	adds	r3, #24
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	480e      	ldr	r0, [pc, #56]	; (8008e78 <xTaskRemoveFromEventList+0xc0>)
 8008e3e:	f7fe f898 	bl	8006f72 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e46:	4b0d      	ldr	r3, [pc, #52]	; (8008e7c <xTaskRemoveFromEventList+0xc4>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d905      	bls.n	8008e5c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008e50:	2301      	movs	r3, #1
 8008e52:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008e54:	4b0a      	ldr	r3, [pc, #40]	; (8008e80 <xTaskRemoveFromEventList+0xc8>)
 8008e56:	2201      	movs	r2, #1
 8008e58:	601a      	str	r2, [r3, #0]
 8008e5a:	e001      	b.n	8008e60 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008e60:	697b      	ldr	r3, [r7, #20]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3718      	adds	r7, #24
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20005b80 	.word	0x20005b80
 8008e70:	20005b60 	.word	0x20005b60
 8008e74:	20005688 	.word	0x20005688
 8008e78:	20005b18 	.word	0x20005b18
 8008e7c:	20005684 	.word	0x20005684
 8008e80:	20005b6c 	.word	0x20005b6c

08008e84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008e84:	b480      	push	{r7}
 8008e86:	b083      	sub	sp, #12
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008e8c:	4b06      	ldr	r3, [pc, #24]	; (8008ea8 <vTaskInternalSetTimeOutState+0x24>)
 8008e8e:	681a      	ldr	r2, [r3, #0]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008e94:	4b05      	ldr	r3, [pc, #20]	; (8008eac <vTaskInternalSetTimeOutState+0x28>)
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	605a      	str	r2, [r3, #4]
}
 8008e9c:	bf00      	nop
 8008e9e:	370c      	adds	r7, #12
 8008ea0:	46bd      	mov	sp, r7
 8008ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea6:	4770      	bx	lr
 8008ea8:	20005b70 	.word	0x20005b70
 8008eac:	20005b5c 	.word	0x20005b5c

08008eb0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b088      	sub	sp, #32
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d10c      	bne.n	8008eda <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	b672      	cpsid	i
 8008ec6:	f383 8811 	msr	BASEPRI, r3
 8008eca:	f3bf 8f6f 	isb	sy
 8008ece:	f3bf 8f4f 	dsb	sy
 8008ed2:	b662      	cpsie	i
 8008ed4:	613b      	str	r3, [r7, #16]
}
 8008ed6:	bf00      	nop
 8008ed8:	e7fe      	b.n	8008ed8 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008eda:	683b      	ldr	r3, [r7, #0]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d10c      	bne.n	8008efa <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	b672      	cpsid	i
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	b662      	cpsie	i
 8008ef4:	60fb      	str	r3, [r7, #12]
}
 8008ef6:	bf00      	nop
 8008ef8:	e7fe      	b.n	8008ef8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008efa:	f000 ff87 	bl	8009e0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008efe:	4b1d      	ldr	r3, [pc, #116]	; (8008f74 <xTaskCheckForTimeOut+0xc4>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	69ba      	ldr	r2, [r7, #24]
 8008f0a:	1ad3      	subs	r3, r2, r3
 8008f0c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f16:	d102      	bne.n	8008f1e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	61fb      	str	r3, [r7, #28]
 8008f1c:	e023      	b.n	8008f66 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	4b15      	ldr	r3, [pc, #84]	; (8008f78 <xTaskCheckForTimeOut+0xc8>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	429a      	cmp	r2, r3
 8008f28:	d007      	beq.n	8008f3a <xTaskCheckForTimeOut+0x8a>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	685b      	ldr	r3, [r3, #4]
 8008f2e:	69ba      	ldr	r2, [r7, #24]
 8008f30:	429a      	cmp	r2, r3
 8008f32:	d302      	bcc.n	8008f3a <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008f34:	2301      	movs	r3, #1
 8008f36:	61fb      	str	r3, [r7, #28]
 8008f38:	e015      	b.n	8008f66 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	697a      	ldr	r2, [r7, #20]
 8008f40:	429a      	cmp	r2, r3
 8008f42:	d20b      	bcs.n	8008f5c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	681a      	ldr	r2, [r3, #0]
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	1ad2      	subs	r2, r2, r3
 8008f4c:	683b      	ldr	r3, [r7, #0]
 8008f4e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008f50:	6878      	ldr	r0, [r7, #4]
 8008f52:	f7ff ff97 	bl	8008e84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008f56:	2300      	movs	r3, #0
 8008f58:	61fb      	str	r3, [r7, #28]
 8008f5a:	e004      	b.n	8008f66 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	2200      	movs	r2, #0
 8008f60:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008f62:	2301      	movs	r3, #1
 8008f64:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008f66:	f000 ff85 	bl	8009e74 <vPortExitCritical>

	return xReturn;
 8008f6a:	69fb      	ldr	r3, [r7, #28]
}
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	3720      	adds	r7, #32
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	20005b5c 	.word	0x20005b5c
 8008f78:	20005b70 	.word	0x20005b70

08008f7c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008f80:	4b03      	ldr	r3, [pc, #12]	; (8008f90 <vTaskMissedYield+0x14>)
 8008f82:	2201      	movs	r2, #1
 8008f84:	601a      	str	r2, [r3, #0]
}
 8008f86:	bf00      	nop
 8008f88:	46bd      	mov	sp, r7
 8008f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8e:	4770      	bx	lr
 8008f90:	20005b6c 	.word	0x20005b6c

08008f94 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b082      	sub	sp, #8
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008f9c:	f000 f852 	bl	8009044 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008fa0:	4b06      	ldr	r3, [pc, #24]	; (8008fbc <prvIdleTask+0x28>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d9f9      	bls.n	8008f9c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008fa8:	4b05      	ldr	r3, [pc, #20]	; (8008fc0 <prvIdleTask+0x2c>)
 8008faa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008fb8:	e7f0      	b.n	8008f9c <prvIdleTask+0x8>
 8008fba:	bf00      	nop
 8008fbc:	20005688 	.word	0x20005688
 8008fc0:	e000ed04 	.word	0xe000ed04

08008fc4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008fc4:	b580      	push	{r7, lr}
 8008fc6:	b082      	sub	sp, #8
 8008fc8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fca:	2300      	movs	r3, #0
 8008fcc:	607b      	str	r3, [r7, #4]
 8008fce:	e00c      	b.n	8008fea <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008fd0:	687a      	ldr	r2, [r7, #4]
 8008fd2:	4613      	mov	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	4413      	add	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4a12      	ldr	r2, [pc, #72]	; (8009024 <prvInitialiseTaskLists+0x60>)
 8008fdc:	4413      	add	r3, r2
 8008fde:	4618      	mov	r0, r3
 8008fe0:	f7fd ff9a 	bl	8006f18 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	3301      	adds	r3, #1
 8008fe8:	607b      	str	r3, [r7, #4]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2b37      	cmp	r3, #55	; 0x37
 8008fee:	d9ef      	bls.n	8008fd0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ff0:	480d      	ldr	r0, [pc, #52]	; (8009028 <prvInitialiseTaskLists+0x64>)
 8008ff2:	f7fd ff91 	bl	8006f18 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ff6:	480d      	ldr	r0, [pc, #52]	; (800902c <prvInitialiseTaskLists+0x68>)
 8008ff8:	f7fd ff8e 	bl	8006f18 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ffc:	480c      	ldr	r0, [pc, #48]	; (8009030 <prvInitialiseTaskLists+0x6c>)
 8008ffe:	f7fd ff8b 	bl	8006f18 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009002:	480c      	ldr	r0, [pc, #48]	; (8009034 <prvInitialiseTaskLists+0x70>)
 8009004:	f7fd ff88 	bl	8006f18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009008:	480b      	ldr	r0, [pc, #44]	; (8009038 <prvInitialiseTaskLists+0x74>)
 800900a:	f7fd ff85 	bl	8006f18 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800900e:	4b0b      	ldr	r3, [pc, #44]	; (800903c <prvInitialiseTaskLists+0x78>)
 8009010:	4a05      	ldr	r2, [pc, #20]	; (8009028 <prvInitialiseTaskLists+0x64>)
 8009012:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009014:	4b0a      	ldr	r3, [pc, #40]	; (8009040 <prvInitialiseTaskLists+0x7c>)
 8009016:	4a05      	ldr	r2, [pc, #20]	; (800902c <prvInitialiseTaskLists+0x68>)
 8009018:	601a      	str	r2, [r3, #0]
}
 800901a:	bf00      	nop
 800901c:	3708      	adds	r7, #8
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20005688 	.word	0x20005688
 8009028:	20005ae8 	.word	0x20005ae8
 800902c:	20005afc 	.word	0x20005afc
 8009030:	20005b18 	.word	0x20005b18
 8009034:	20005b2c 	.word	0x20005b2c
 8009038:	20005b44 	.word	0x20005b44
 800903c:	20005b10 	.word	0x20005b10
 8009040:	20005b14 	.word	0x20005b14

08009044 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b082      	sub	sp, #8
 8009048:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800904a:	e019      	b.n	8009080 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800904c:	f000 fede 	bl	8009e0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009050:	4b10      	ldr	r3, [pc, #64]	; (8009094 <prvCheckTasksWaitingTermination+0x50>)
 8009052:	68db      	ldr	r3, [r3, #12]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	3304      	adds	r3, #4
 800905c:	4618      	mov	r0, r3
 800905e:	f7fd ffe5 	bl	800702c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009062:	4b0d      	ldr	r3, [pc, #52]	; (8009098 <prvCheckTasksWaitingTermination+0x54>)
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	3b01      	subs	r3, #1
 8009068:	4a0b      	ldr	r2, [pc, #44]	; (8009098 <prvCheckTasksWaitingTermination+0x54>)
 800906a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800906c:	4b0b      	ldr	r3, [pc, #44]	; (800909c <prvCheckTasksWaitingTermination+0x58>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	3b01      	subs	r3, #1
 8009072:	4a0a      	ldr	r2, [pc, #40]	; (800909c <prvCheckTasksWaitingTermination+0x58>)
 8009074:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009076:	f000 fefd 	bl	8009e74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800907a:	6878      	ldr	r0, [r7, #4]
 800907c:	f000 f810 	bl	80090a0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009080:	4b06      	ldr	r3, [pc, #24]	; (800909c <prvCheckTasksWaitingTermination+0x58>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d1e1      	bne.n	800904c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009088:	bf00      	nop
 800908a:	bf00      	nop
 800908c:	3708      	adds	r7, #8
 800908e:	46bd      	mov	sp, r7
 8009090:	bd80      	pop	{r7, pc}
 8009092:	bf00      	nop
 8009094:	20005b2c 	.word	0x20005b2c
 8009098:	20005b58 	.word	0x20005b58
 800909c:	20005b40 	.word	0x20005b40

080090a0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80090a0:	b580      	push	{r7, lr}
 80090a2:	b084      	sub	sp, #16
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	3354      	adds	r3, #84	; 0x54
 80090ac:	4618      	mov	r0, r3
 80090ae:	f00e f87b 	bl	80171a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d108      	bne.n	80090ce <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090c0:	4618      	mov	r0, r3
 80090c2:	f001 f899 	bl	800a1f8 <vPortFree>
				vPortFree( pxTCB );
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f001 f896 	bl	800a1f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80090cc:	e01a      	b.n	8009104 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80090d4:	2b01      	cmp	r3, #1
 80090d6:	d103      	bne.n	80090e0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f001 f88d 	bl	800a1f8 <vPortFree>
	}
 80090de:	e011      	b.n	8009104 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d00c      	beq.n	8009104 <prvDeleteTCB+0x64>
	__asm volatile
 80090ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ee:	b672      	cpsid	i
 80090f0:	f383 8811 	msr	BASEPRI, r3
 80090f4:	f3bf 8f6f 	isb	sy
 80090f8:	f3bf 8f4f 	dsb	sy
 80090fc:	b662      	cpsie	i
 80090fe:	60fb      	str	r3, [r7, #12]
}
 8009100:	bf00      	nop
 8009102:	e7fe      	b.n	8009102 <prvDeleteTCB+0x62>
	}
 8009104:	bf00      	nop
 8009106:	3710      	adds	r7, #16
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009112:	4b0c      	ldr	r3, [pc, #48]	; (8009144 <prvResetNextTaskUnblockTime+0x38>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	2b00      	cmp	r3, #0
 800911a:	d104      	bne.n	8009126 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800911c:	4b0a      	ldr	r3, [pc, #40]	; (8009148 <prvResetNextTaskUnblockTime+0x3c>)
 800911e:	f04f 32ff 	mov.w	r2, #4294967295
 8009122:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009124:	e008      	b.n	8009138 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009126:	4b07      	ldr	r3, [pc, #28]	; (8009144 <prvResetNextTaskUnblockTime+0x38>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	68db      	ldr	r3, [r3, #12]
 800912e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	4a04      	ldr	r2, [pc, #16]	; (8009148 <prvResetNextTaskUnblockTime+0x3c>)
 8009136:	6013      	str	r3, [r2, #0]
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr
 8009144:	20005b10 	.word	0x20005b10
 8009148:	20005b78 	.word	0x20005b78

0800914c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8009152:	4b05      	ldr	r3, [pc, #20]	; (8009168 <xTaskGetCurrentTaskHandle+0x1c>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	607b      	str	r3, [r7, #4]

		return xReturn;
 8009158:	687b      	ldr	r3, [r7, #4]
	}
 800915a:	4618      	mov	r0, r3
 800915c:	370c      	adds	r7, #12
 800915e:	46bd      	mov	sp, r7
 8009160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009164:	4770      	bx	lr
 8009166:	bf00      	nop
 8009168:	20005684 	.word	0x20005684

0800916c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009172:	4b0b      	ldr	r3, [pc, #44]	; (80091a0 <xTaskGetSchedulerState+0x34>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d102      	bne.n	8009180 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800917a:	2301      	movs	r3, #1
 800917c:	607b      	str	r3, [r7, #4]
 800917e:	e008      	b.n	8009192 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009180:	4b08      	ldr	r3, [pc, #32]	; (80091a4 <xTaskGetSchedulerState+0x38>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d102      	bne.n	800918e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009188:	2302      	movs	r3, #2
 800918a:	607b      	str	r3, [r7, #4]
 800918c:	e001      	b.n	8009192 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800918e:	2300      	movs	r3, #0
 8009190:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009192:	687b      	ldr	r3, [r7, #4]
	}
 8009194:	4618      	mov	r0, r3
 8009196:	370c      	adds	r7, #12
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	20005b64 	.word	0x20005b64
 80091a4:	20005b80 	.word	0x20005b80

080091a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80091b4:	2300      	movs	r3, #0
 80091b6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d051      	beq.n	8009262 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80091be:	68bb      	ldr	r3, [r7, #8]
 80091c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091c2:	4b2a      	ldr	r3, [pc, #168]	; (800926c <xTaskPriorityInherit+0xc4>)
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d241      	bcs.n	8009250 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091cc:	68bb      	ldr	r3, [r7, #8]
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	db06      	blt.n	80091e2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091d4:	4b25      	ldr	r3, [pc, #148]	; (800926c <xTaskPriorityInherit+0xc4>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091da:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80091e2:	68bb      	ldr	r3, [r7, #8]
 80091e4:	6959      	ldr	r1, [r3, #20]
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ea:	4613      	mov	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4a1f      	ldr	r2, [pc, #124]	; (8009270 <xTaskPriorityInherit+0xc8>)
 80091f4:	4413      	add	r3, r2
 80091f6:	4299      	cmp	r1, r3
 80091f8:	d122      	bne.n	8009240 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091fa:	68bb      	ldr	r3, [r7, #8]
 80091fc:	3304      	adds	r3, #4
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fd ff14 	bl	800702c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009204:	4b19      	ldr	r3, [pc, #100]	; (800926c <xTaskPriorityInherit+0xc4>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009212:	4b18      	ldr	r3, [pc, #96]	; (8009274 <xTaskPriorityInherit+0xcc>)
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	429a      	cmp	r2, r3
 8009218:	d903      	bls.n	8009222 <xTaskPriorityInherit+0x7a>
 800921a:	68bb      	ldr	r3, [r7, #8]
 800921c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921e:	4a15      	ldr	r2, [pc, #84]	; (8009274 <xTaskPriorityInherit+0xcc>)
 8009220:	6013      	str	r3, [r2, #0]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009226:	4613      	mov	r3, r2
 8009228:	009b      	lsls	r3, r3, #2
 800922a:	4413      	add	r3, r2
 800922c:	009b      	lsls	r3, r3, #2
 800922e:	4a10      	ldr	r2, [pc, #64]	; (8009270 <xTaskPriorityInherit+0xc8>)
 8009230:	441a      	add	r2, r3
 8009232:	68bb      	ldr	r3, [r7, #8]
 8009234:	3304      	adds	r3, #4
 8009236:	4619      	mov	r1, r3
 8009238:	4610      	mov	r0, r2
 800923a:	f7fd fe9a 	bl	8006f72 <vListInsertEnd>
 800923e:	e004      	b.n	800924a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009240:	4b0a      	ldr	r3, [pc, #40]	; (800926c <xTaskPriorityInherit+0xc4>)
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800924a:	2301      	movs	r3, #1
 800924c:	60fb      	str	r3, [r7, #12]
 800924e:	e008      	b.n	8009262 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009250:	68bb      	ldr	r3, [r7, #8]
 8009252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009254:	4b05      	ldr	r3, [pc, #20]	; (800926c <xTaskPriorityInherit+0xc4>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800925a:	429a      	cmp	r2, r3
 800925c:	d201      	bcs.n	8009262 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800925e:	2301      	movs	r3, #1
 8009260:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009262:	68fb      	ldr	r3, [r7, #12]
	}
 8009264:	4618      	mov	r0, r3
 8009266:	3710      	adds	r7, #16
 8009268:	46bd      	mov	sp, r7
 800926a:	bd80      	pop	{r7, pc}
 800926c:	20005684 	.word	0x20005684
 8009270:	20005688 	.word	0x20005688
 8009274:	20005b60 	.word	0x20005b60

08009278 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009278:	b580      	push	{r7, lr}
 800927a:	b086      	sub	sp, #24
 800927c:	af00      	add	r7, sp, #0
 800927e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009284:	2300      	movs	r3, #0
 8009286:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d05a      	beq.n	8009344 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800928e:	4b30      	ldr	r3, [pc, #192]	; (8009350 <xTaskPriorityDisinherit+0xd8>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	693a      	ldr	r2, [r7, #16]
 8009294:	429a      	cmp	r2, r3
 8009296:	d00c      	beq.n	80092b2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800929c:	b672      	cpsid	i
 800929e:	f383 8811 	msr	BASEPRI, r3
 80092a2:	f3bf 8f6f 	isb	sy
 80092a6:	f3bf 8f4f 	dsb	sy
 80092aa:	b662      	cpsie	i
 80092ac:	60fb      	str	r3, [r7, #12]
}
 80092ae:	bf00      	nop
 80092b0:	e7fe      	b.n	80092b0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d10c      	bne.n	80092d4 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 80092ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092be:	b672      	cpsid	i
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	b662      	cpsie	i
 80092ce:	60bb      	str	r3, [r7, #8]
}
 80092d0:	bf00      	nop
 80092d2:	e7fe      	b.n	80092d2 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092d8:	1e5a      	subs	r2, r3, #1
 80092da:	693b      	ldr	r3, [r7, #16]
 80092dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092e2:	693b      	ldr	r3, [r7, #16]
 80092e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092e6:	429a      	cmp	r2, r3
 80092e8:	d02c      	beq.n	8009344 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80092ea:	693b      	ldr	r3, [r7, #16]
 80092ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d128      	bne.n	8009344 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80092f2:	693b      	ldr	r3, [r7, #16]
 80092f4:	3304      	adds	r3, #4
 80092f6:	4618      	mov	r0, r3
 80092f8:	f7fd fe98 	bl	800702c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009308:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009314:	4b0f      	ldr	r3, [pc, #60]	; (8009354 <xTaskPriorityDisinherit+0xdc>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	429a      	cmp	r2, r3
 800931a:	d903      	bls.n	8009324 <xTaskPriorityDisinherit+0xac>
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009320:	4a0c      	ldr	r2, [pc, #48]	; (8009354 <xTaskPriorityDisinherit+0xdc>)
 8009322:	6013      	str	r3, [r2, #0]
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009328:	4613      	mov	r3, r2
 800932a:	009b      	lsls	r3, r3, #2
 800932c:	4413      	add	r3, r2
 800932e:	009b      	lsls	r3, r3, #2
 8009330:	4a09      	ldr	r2, [pc, #36]	; (8009358 <xTaskPriorityDisinherit+0xe0>)
 8009332:	441a      	add	r2, r3
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	3304      	adds	r3, #4
 8009338:	4619      	mov	r1, r3
 800933a:	4610      	mov	r0, r2
 800933c:	f7fd fe19 	bl	8006f72 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009340:	2301      	movs	r3, #1
 8009342:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009344:	697b      	ldr	r3, [r7, #20]
	}
 8009346:	4618      	mov	r0, r3
 8009348:	3718      	adds	r7, #24
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	20005684 	.word	0x20005684
 8009354:	20005b60 	.word	0x20005b60
 8009358:	20005688 	.word	0x20005688

0800935c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800935c:	b580      	push	{r7, lr}
 800935e:	b088      	sub	sp, #32
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800936a:	2301      	movs	r3, #1
 800936c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b00      	cmp	r3, #0
 8009372:	d06e      	beq.n	8009452 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009374:	69bb      	ldr	r3, [r7, #24]
 8009376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009378:	2b00      	cmp	r3, #0
 800937a:	d10c      	bne.n	8009396 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800937c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009380:	b672      	cpsid	i
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	b662      	cpsie	i
 8009390:	60fb      	str	r3, [r7, #12]
}
 8009392:	bf00      	nop
 8009394:	e7fe      	b.n	8009394 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009396:	69bb      	ldr	r3, [r7, #24]
 8009398:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800939a:	683a      	ldr	r2, [r7, #0]
 800939c:	429a      	cmp	r2, r3
 800939e:	d902      	bls.n	80093a6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	61fb      	str	r3, [r7, #28]
 80093a4:	e002      	b.n	80093ac <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80093a6:	69bb      	ldr	r3, [r7, #24]
 80093a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093aa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80093ac:	69bb      	ldr	r3, [r7, #24]
 80093ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093b0:	69fa      	ldr	r2, [r7, #28]
 80093b2:	429a      	cmp	r2, r3
 80093b4:	d04d      	beq.n	8009452 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80093b6:	69bb      	ldr	r3, [r7, #24]
 80093b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80093ba:	697a      	ldr	r2, [r7, #20]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d148      	bne.n	8009452 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80093c0:	4b26      	ldr	r3, [pc, #152]	; (800945c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	69ba      	ldr	r2, [r7, #24]
 80093c6:	429a      	cmp	r2, r3
 80093c8:	d10c      	bne.n	80093e4 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 80093ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ce:	b672      	cpsid	i
 80093d0:	f383 8811 	msr	BASEPRI, r3
 80093d4:	f3bf 8f6f 	isb	sy
 80093d8:	f3bf 8f4f 	dsb	sy
 80093dc:	b662      	cpsie	i
 80093de:	60bb      	str	r3, [r7, #8]
}
 80093e0:	bf00      	nop
 80093e2:	e7fe      	b.n	80093e2 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80093e4:	69bb      	ldr	r3, [r7, #24]
 80093e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80093ea:	69bb      	ldr	r3, [r7, #24]
 80093ec:	69fa      	ldr	r2, [r7, #28]
 80093ee:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80093f0:	69bb      	ldr	r3, [r7, #24]
 80093f2:	699b      	ldr	r3, [r3, #24]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	db04      	blt.n	8009402 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093f8:	69fb      	ldr	r3, [r7, #28]
 80093fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80093fe:	69bb      	ldr	r3, [r7, #24]
 8009400:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009402:	69bb      	ldr	r3, [r7, #24]
 8009404:	6959      	ldr	r1, [r3, #20]
 8009406:	693a      	ldr	r2, [r7, #16]
 8009408:	4613      	mov	r3, r2
 800940a:	009b      	lsls	r3, r3, #2
 800940c:	4413      	add	r3, r2
 800940e:	009b      	lsls	r3, r3, #2
 8009410:	4a13      	ldr	r2, [pc, #76]	; (8009460 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009412:	4413      	add	r3, r2
 8009414:	4299      	cmp	r1, r3
 8009416:	d11c      	bne.n	8009452 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009418:	69bb      	ldr	r3, [r7, #24]
 800941a:	3304      	adds	r3, #4
 800941c:	4618      	mov	r0, r3
 800941e:	f7fd fe05 	bl	800702c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009426:	4b0f      	ldr	r3, [pc, #60]	; (8009464 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	429a      	cmp	r2, r3
 800942c:	d903      	bls.n	8009436 <vTaskPriorityDisinheritAfterTimeout+0xda>
 800942e:	69bb      	ldr	r3, [r7, #24]
 8009430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009432:	4a0c      	ldr	r2, [pc, #48]	; (8009464 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009434:	6013      	str	r3, [r2, #0]
 8009436:	69bb      	ldr	r3, [r7, #24]
 8009438:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800943a:	4613      	mov	r3, r2
 800943c:	009b      	lsls	r3, r3, #2
 800943e:	4413      	add	r3, r2
 8009440:	009b      	lsls	r3, r3, #2
 8009442:	4a07      	ldr	r2, [pc, #28]	; (8009460 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8009444:	441a      	add	r2, r3
 8009446:	69bb      	ldr	r3, [r7, #24]
 8009448:	3304      	adds	r3, #4
 800944a:	4619      	mov	r1, r3
 800944c:	4610      	mov	r0, r2
 800944e:	f7fd fd90 	bl	8006f72 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009452:	bf00      	nop
 8009454:	3720      	adds	r7, #32
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	20005684 	.word	0x20005684
 8009460:	20005688 	.word	0x20005688
 8009464:	20005b60 	.word	0x20005b60

08009468 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009468:	b480      	push	{r7}
 800946a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800946c:	4b07      	ldr	r3, [pc, #28]	; (800948c <pvTaskIncrementMutexHeldCount+0x24>)
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d004      	beq.n	800947e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009474:	4b05      	ldr	r3, [pc, #20]	; (800948c <pvTaskIncrementMutexHeldCount+0x24>)
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800947a:	3201      	adds	r2, #1
 800947c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800947e:	4b03      	ldr	r3, [pc, #12]	; (800948c <pvTaskIncrementMutexHeldCount+0x24>)
 8009480:	681b      	ldr	r3, [r3, #0]
	}
 8009482:	4618      	mov	r0, r3
 8009484:	46bd      	mov	sp, r7
 8009486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948a:	4770      	bx	lr
 800948c:	20005684 	.word	0x20005684

08009490 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b084      	sub	sp, #16
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
 8009498:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800949a:	4b21      	ldr	r3, [pc, #132]	; (8009520 <prvAddCurrentTaskToDelayedList+0x90>)
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094a0:	4b20      	ldr	r3, [pc, #128]	; (8009524 <prvAddCurrentTaskToDelayedList+0x94>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	3304      	adds	r3, #4
 80094a6:	4618      	mov	r0, r3
 80094a8:	f7fd fdc0 	bl	800702c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094b2:	d10a      	bne.n	80094ca <prvAddCurrentTaskToDelayedList+0x3a>
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d007      	beq.n	80094ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094ba:	4b1a      	ldr	r3, [pc, #104]	; (8009524 <prvAddCurrentTaskToDelayedList+0x94>)
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	3304      	adds	r3, #4
 80094c0:	4619      	mov	r1, r3
 80094c2:	4819      	ldr	r0, [pc, #100]	; (8009528 <prvAddCurrentTaskToDelayedList+0x98>)
 80094c4:	f7fd fd55 	bl	8006f72 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80094c8:	e026      	b.n	8009518 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4413      	add	r3, r2
 80094d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80094d2:	4b14      	ldr	r3, [pc, #80]	; (8009524 <prvAddCurrentTaskToDelayedList+0x94>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	68ba      	ldr	r2, [r7, #8]
 80094d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	429a      	cmp	r2, r3
 80094e0:	d209      	bcs.n	80094f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094e2:	4b12      	ldr	r3, [pc, #72]	; (800952c <prvAddCurrentTaskToDelayedList+0x9c>)
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	4b0f      	ldr	r3, [pc, #60]	; (8009524 <prvAddCurrentTaskToDelayedList+0x94>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	3304      	adds	r3, #4
 80094ec:	4619      	mov	r1, r3
 80094ee:	4610      	mov	r0, r2
 80094f0:	f7fd fd63 	bl	8006fba <vListInsert>
}
 80094f4:	e010      	b.n	8009518 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094f6:	4b0e      	ldr	r3, [pc, #56]	; (8009530 <prvAddCurrentTaskToDelayedList+0xa0>)
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	4b0a      	ldr	r3, [pc, #40]	; (8009524 <prvAddCurrentTaskToDelayedList+0x94>)
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	3304      	adds	r3, #4
 8009500:	4619      	mov	r1, r3
 8009502:	4610      	mov	r0, r2
 8009504:	f7fd fd59 	bl	8006fba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009508:	4b0a      	ldr	r3, [pc, #40]	; (8009534 <prvAddCurrentTaskToDelayedList+0xa4>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68ba      	ldr	r2, [r7, #8]
 800950e:	429a      	cmp	r2, r3
 8009510:	d202      	bcs.n	8009518 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009512:	4a08      	ldr	r2, [pc, #32]	; (8009534 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	6013      	str	r3, [r2, #0]
}
 8009518:	bf00      	nop
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}
 8009520:	20005b5c 	.word	0x20005b5c
 8009524:	20005684 	.word	0x20005684
 8009528:	20005b44 	.word	0x20005b44
 800952c:	20005b14 	.word	0x20005b14
 8009530:	20005b10 	.word	0x20005b10
 8009534:	20005b78 	.word	0x20005b78

08009538 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009538:	b580      	push	{r7, lr}
 800953a:	b08a      	sub	sp, #40	; 0x28
 800953c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800953e:	2300      	movs	r3, #0
 8009540:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009542:	f000 fb15 	bl	8009b70 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009546:	4b1d      	ldr	r3, [pc, #116]	; (80095bc <xTimerCreateTimerTask+0x84>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d021      	beq.n	8009592 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800954e:	2300      	movs	r3, #0
 8009550:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009552:	2300      	movs	r3, #0
 8009554:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009556:	1d3a      	adds	r2, r7, #4
 8009558:	f107 0108 	add.w	r1, r7, #8
 800955c:	f107 030c 	add.w	r3, r7, #12
 8009560:	4618      	mov	r0, r3
 8009562:	f7fd fcbf 	bl	8006ee4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009566:	6879      	ldr	r1, [r7, #4]
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	68fa      	ldr	r2, [r7, #12]
 800956c:	9202      	str	r2, [sp, #8]
 800956e:	9301      	str	r3, [sp, #4]
 8009570:	2302      	movs	r3, #2
 8009572:	9300      	str	r3, [sp, #0]
 8009574:	2300      	movs	r3, #0
 8009576:	460a      	mov	r2, r1
 8009578:	4911      	ldr	r1, [pc, #68]	; (80095c0 <xTimerCreateTimerTask+0x88>)
 800957a:	4812      	ldr	r0, [pc, #72]	; (80095c4 <xTimerCreateTimerTask+0x8c>)
 800957c:	f7fe fe90 	bl	80082a0 <xTaskCreateStatic>
 8009580:	4603      	mov	r3, r0
 8009582:	4a11      	ldr	r2, [pc, #68]	; (80095c8 <xTimerCreateTimerTask+0x90>)
 8009584:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009586:	4b10      	ldr	r3, [pc, #64]	; (80095c8 <xTimerCreateTimerTask+0x90>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d001      	beq.n	8009592 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800958e:	2301      	movs	r3, #1
 8009590:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009592:	697b      	ldr	r3, [r7, #20]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d10c      	bne.n	80095b2 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800959c:	b672      	cpsid	i
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	b662      	cpsie	i
 80095ac:	613b      	str	r3, [r7, #16]
}
 80095ae:	bf00      	nop
 80095b0:	e7fe      	b.n	80095b0 <xTimerCreateTimerTask+0x78>
	return xReturn;
 80095b2:	697b      	ldr	r3, [r7, #20]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3718      	adds	r7, #24
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	20005bb4 	.word	0x20005bb4
 80095c0:	08017fd4 	.word	0x08017fd4
 80095c4:	08009709 	.word	0x08009709
 80095c8:	20005bb8 	.word	0x20005bb8

080095cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b08a      	sub	sp, #40	; 0x28
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	60f8      	str	r0, [r7, #12]
 80095d4:	60b9      	str	r1, [r7, #8]
 80095d6:	607a      	str	r2, [r7, #4]
 80095d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80095da:	2300      	movs	r3, #0
 80095dc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d10c      	bne.n	80095fe <xTimerGenericCommand+0x32>
	__asm volatile
 80095e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095e8:	b672      	cpsid	i
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	b662      	cpsie	i
 80095f8:	623b      	str	r3, [r7, #32]
}
 80095fa:	bf00      	nop
 80095fc:	e7fe      	b.n	80095fc <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80095fe:	4b1a      	ldr	r3, [pc, #104]	; (8009668 <xTimerGenericCommand+0x9c>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d02a      	beq.n	800965c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009606:	68bb      	ldr	r3, [r7, #8]
 8009608:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009612:	68bb      	ldr	r3, [r7, #8]
 8009614:	2b05      	cmp	r3, #5
 8009616:	dc18      	bgt.n	800964a <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009618:	f7ff fda8 	bl	800916c <xTaskGetSchedulerState>
 800961c:	4603      	mov	r3, r0
 800961e:	2b02      	cmp	r3, #2
 8009620:	d109      	bne.n	8009636 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009622:	4b11      	ldr	r3, [pc, #68]	; (8009668 <xTimerGenericCommand+0x9c>)
 8009624:	6818      	ldr	r0, [r3, #0]
 8009626:	f107 0110 	add.w	r1, r7, #16
 800962a:	2300      	movs	r3, #0
 800962c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800962e:	f7fd ffa5 	bl	800757c <xQueueGenericSend>
 8009632:	6278      	str	r0, [r7, #36]	; 0x24
 8009634:	e012      	b.n	800965c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009636:	4b0c      	ldr	r3, [pc, #48]	; (8009668 <xTimerGenericCommand+0x9c>)
 8009638:	6818      	ldr	r0, [r3, #0]
 800963a:	f107 0110 	add.w	r1, r7, #16
 800963e:	2300      	movs	r3, #0
 8009640:	2200      	movs	r2, #0
 8009642:	f7fd ff9b 	bl	800757c <xQueueGenericSend>
 8009646:	6278      	str	r0, [r7, #36]	; 0x24
 8009648:	e008      	b.n	800965c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800964a:	4b07      	ldr	r3, [pc, #28]	; (8009668 <xTimerGenericCommand+0x9c>)
 800964c:	6818      	ldr	r0, [r3, #0]
 800964e:	f107 0110 	add.w	r1, r7, #16
 8009652:	2300      	movs	r3, #0
 8009654:	683a      	ldr	r2, [r7, #0]
 8009656:	f7fe f897 	bl	8007788 <xQueueGenericSendFromISR>
 800965a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800965c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800965e:	4618      	mov	r0, r3
 8009660:	3728      	adds	r7, #40	; 0x28
 8009662:	46bd      	mov	sp, r7
 8009664:	bd80      	pop	{r7, pc}
 8009666:	bf00      	nop
 8009668:	20005bb4 	.word	0x20005bb4

0800966c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800966c:	b580      	push	{r7, lr}
 800966e:	b088      	sub	sp, #32
 8009670:	af02      	add	r7, sp, #8
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009676:	4b23      	ldr	r3, [pc, #140]	; (8009704 <prvProcessExpiredTimer+0x98>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	68db      	ldr	r3, [r3, #12]
 800967c:	68db      	ldr	r3, [r3, #12]
 800967e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	3304      	adds	r3, #4
 8009684:	4618      	mov	r0, r3
 8009686:	f7fd fcd1 	bl	800702c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800968a:	697b      	ldr	r3, [r7, #20]
 800968c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009690:	f003 0304 	and.w	r3, r3, #4
 8009694:	2b00      	cmp	r3, #0
 8009696:	d024      	beq.n	80096e2 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	699a      	ldr	r2, [r3, #24]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	18d1      	adds	r1, r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	683a      	ldr	r2, [r7, #0]
 80096a4:	6978      	ldr	r0, [r7, #20]
 80096a6:	f000 f8d3 	bl	8009850 <prvInsertTimerInActiveList>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d021      	beq.n	80096f4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096b0:	2300      	movs	r3, #0
 80096b2:	9300      	str	r3, [sp, #0]
 80096b4:	2300      	movs	r3, #0
 80096b6:	687a      	ldr	r2, [r7, #4]
 80096b8:	2100      	movs	r1, #0
 80096ba:	6978      	ldr	r0, [r7, #20]
 80096bc:	f7ff ff86 	bl	80095cc <xTimerGenericCommand>
 80096c0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80096c2:	693b      	ldr	r3, [r7, #16]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d115      	bne.n	80096f4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 80096c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096cc:	b672      	cpsid	i
 80096ce:	f383 8811 	msr	BASEPRI, r3
 80096d2:	f3bf 8f6f 	isb	sy
 80096d6:	f3bf 8f4f 	dsb	sy
 80096da:	b662      	cpsie	i
 80096dc:	60fb      	str	r3, [r7, #12]
}
 80096de:	bf00      	nop
 80096e0:	e7fe      	b.n	80096e0 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80096e2:	697b      	ldr	r3, [r7, #20]
 80096e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096e8:	f023 0301 	bic.w	r3, r3, #1
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	697b      	ldr	r3, [r7, #20]
 80096f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096f4:	697b      	ldr	r3, [r7, #20]
 80096f6:	6a1b      	ldr	r3, [r3, #32]
 80096f8:	6978      	ldr	r0, [r7, #20]
 80096fa:	4798      	blx	r3
}
 80096fc:	bf00      	nop
 80096fe:	3718      	adds	r7, #24
 8009700:	46bd      	mov	sp, r7
 8009702:	bd80      	pop	{r7, pc}
 8009704:	20005bac 	.word	0x20005bac

08009708 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009710:	f107 0308 	add.w	r3, r7, #8
 8009714:	4618      	mov	r0, r3
 8009716:	f000 f857 	bl	80097c8 <prvGetNextExpireTime>
 800971a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	4619      	mov	r1, r3
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f000 f803 	bl	800972c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009726:	f000 f8d5 	bl	80098d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800972a:	e7f1      	b.n	8009710 <prvTimerTask+0x8>

0800972c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800972c:	b580      	push	{r7, lr}
 800972e:	b084      	sub	sp, #16
 8009730:	af00      	add	r7, sp, #0
 8009732:	6078      	str	r0, [r7, #4]
 8009734:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009736:	f7ff f8f9 	bl	800892c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800973a:	f107 0308 	add.w	r3, r7, #8
 800973e:	4618      	mov	r0, r3
 8009740:	f000 f866 	bl	8009810 <prvSampleTimeNow>
 8009744:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d130      	bne.n	80097ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10a      	bne.n	8009768 <prvProcessTimerOrBlockTask+0x3c>
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	429a      	cmp	r2, r3
 8009758:	d806      	bhi.n	8009768 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800975a:	f7ff f8f5 	bl	8008948 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800975e:	68f9      	ldr	r1, [r7, #12]
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7ff ff83 	bl	800966c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009766:	e024      	b.n	80097b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	2b00      	cmp	r3, #0
 800976c:	d008      	beq.n	8009780 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800976e:	4b13      	ldr	r3, [pc, #76]	; (80097bc <prvProcessTimerOrBlockTask+0x90>)
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d101      	bne.n	800977c <prvProcessTimerOrBlockTask+0x50>
 8009778:	2301      	movs	r3, #1
 800977a:	e000      	b.n	800977e <prvProcessTimerOrBlockTask+0x52>
 800977c:	2300      	movs	r3, #0
 800977e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009780:	4b0f      	ldr	r3, [pc, #60]	; (80097c0 <prvProcessTimerOrBlockTask+0x94>)
 8009782:	6818      	ldr	r0, [r3, #0]
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	1ad3      	subs	r3, r2, r3
 800978a:	683a      	ldr	r2, [r7, #0]
 800978c:	4619      	mov	r1, r3
 800978e:	f7fe fd53 	bl	8008238 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009792:	f7ff f8d9 	bl	8008948 <xTaskResumeAll>
 8009796:	4603      	mov	r3, r0
 8009798:	2b00      	cmp	r3, #0
 800979a:	d10a      	bne.n	80097b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800979c:	4b09      	ldr	r3, [pc, #36]	; (80097c4 <prvProcessTimerOrBlockTask+0x98>)
 800979e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097a2:	601a      	str	r2, [r3, #0]
 80097a4:	f3bf 8f4f 	dsb	sy
 80097a8:	f3bf 8f6f 	isb	sy
}
 80097ac:	e001      	b.n	80097b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80097ae:	f7ff f8cb 	bl	8008948 <xTaskResumeAll>
}
 80097b2:	bf00      	nop
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
 80097ba:	bf00      	nop
 80097bc:	20005bb0 	.word	0x20005bb0
 80097c0:	20005bb4 	.word	0x20005bb4
 80097c4:	e000ed04 	.word	0xe000ed04

080097c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80097d0:	4b0e      	ldr	r3, [pc, #56]	; (800980c <prvGetNextExpireTime+0x44>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d101      	bne.n	80097de <prvGetNextExpireTime+0x16>
 80097da:	2201      	movs	r2, #1
 80097dc:	e000      	b.n	80097e0 <prvGetNextExpireTime+0x18>
 80097de:	2200      	movs	r2, #0
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d105      	bne.n	80097f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80097ec:	4b07      	ldr	r3, [pc, #28]	; (800980c <prvGetNextExpireTime+0x44>)
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	60fb      	str	r3, [r7, #12]
 80097f6:	e001      	b.n	80097fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80097f8:	2300      	movs	r3, #0
 80097fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80097fc:	68fb      	ldr	r3, [r7, #12]
}
 80097fe:	4618      	mov	r0, r3
 8009800:	3714      	adds	r7, #20
 8009802:	46bd      	mov	sp, r7
 8009804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009808:	4770      	bx	lr
 800980a:	bf00      	nop
 800980c:	20005bac 	.word	0x20005bac

08009810 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b084      	sub	sp, #16
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009818:	f7ff f936 	bl	8008a88 <xTaskGetTickCount>
 800981c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800981e:	4b0b      	ldr	r3, [pc, #44]	; (800984c <prvSampleTimeNow+0x3c>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	68fa      	ldr	r2, [r7, #12]
 8009824:	429a      	cmp	r2, r3
 8009826:	d205      	bcs.n	8009834 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009828:	f000 f93c 	bl	8009aa4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	2201      	movs	r2, #1
 8009830:	601a      	str	r2, [r3, #0]
 8009832:	e002      	b.n	800983a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2200      	movs	r2, #0
 8009838:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800983a:	4a04      	ldr	r2, [pc, #16]	; (800984c <prvSampleTimeNow+0x3c>)
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009840:	68fb      	ldr	r3, [r7, #12]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}
 800984a:	bf00      	nop
 800984c:	20005bbc 	.word	0x20005bbc

08009850 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b086      	sub	sp, #24
 8009854:	af00      	add	r7, sp, #0
 8009856:	60f8      	str	r0, [r7, #12]
 8009858:	60b9      	str	r1, [r7, #8]
 800985a:	607a      	str	r2, [r7, #4]
 800985c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800985e:	2300      	movs	r3, #0
 8009860:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009862:	68fb      	ldr	r3, [r7, #12]
 8009864:	68ba      	ldr	r2, [r7, #8]
 8009866:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	68fa      	ldr	r2, [r7, #12]
 800986c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800986e:	68ba      	ldr	r2, [r7, #8]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	429a      	cmp	r2, r3
 8009874:	d812      	bhi.n	800989c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	1ad2      	subs	r2, r2, r3
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	429a      	cmp	r2, r3
 8009882:	d302      	bcc.n	800988a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009884:	2301      	movs	r3, #1
 8009886:	617b      	str	r3, [r7, #20]
 8009888:	e01b      	b.n	80098c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800988a:	4b10      	ldr	r3, [pc, #64]	; (80098cc <prvInsertTimerInActiveList+0x7c>)
 800988c:	681a      	ldr	r2, [r3, #0]
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	3304      	adds	r3, #4
 8009892:	4619      	mov	r1, r3
 8009894:	4610      	mov	r0, r2
 8009896:	f7fd fb90 	bl	8006fba <vListInsert>
 800989a:	e012      	b.n	80098c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800989c:	687a      	ldr	r2, [r7, #4]
 800989e:	683b      	ldr	r3, [r7, #0]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d206      	bcs.n	80098b2 <prvInsertTimerInActiveList+0x62>
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	683b      	ldr	r3, [r7, #0]
 80098a8:	429a      	cmp	r2, r3
 80098aa:	d302      	bcc.n	80098b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80098ac:	2301      	movs	r3, #1
 80098ae:	617b      	str	r3, [r7, #20]
 80098b0:	e007      	b.n	80098c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098b2:	4b07      	ldr	r3, [pc, #28]	; (80098d0 <prvInsertTimerInActiveList+0x80>)
 80098b4:	681a      	ldr	r2, [r3, #0]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	3304      	adds	r3, #4
 80098ba:	4619      	mov	r1, r3
 80098bc:	4610      	mov	r0, r2
 80098be:	f7fd fb7c 	bl	8006fba <vListInsert>
		}
	}

	return xProcessTimerNow;
 80098c2:	697b      	ldr	r3, [r7, #20]
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	3718      	adds	r7, #24
 80098c8:	46bd      	mov	sp, r7
 80098ca:	bd80      	pop	{r7, pc}
 80098cc:	20005bb0 	.word	0x20005bb0
 80098d0:	20005bac 	.word	0x20005bac

080098d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b08e      	sub	sp, #56	; 0x38
 80098d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80098da:	e0d0      	b.n	8009a7e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	2b00      	cmp	r3, #0
 80098e0:	da1a      	bge.n	8009918 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80098e2:	1d3b      	adds	r3, r7, #4
 80098e4:	3304      	adds	r3, #4
 80098e6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80098e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d10c      	bne.n	8009908 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80098ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098f2:	b672      	cpsid	i
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	b662      	cpsie	i
 8009902:	61fb      	str	r3, [r7, #28]
}
 8009904:	bf00      	nop
 8009906:	e7fe      	b.n	8009906 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800990e:	6850      	ldr	r0, [r2, #4]
 8009910:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009912:	6892      	ldr	r2, [r2, #8]
 8009914:	4611      	mov	r1, r2
 8009916:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	2b00      	cmp	r3, #0
 800991c:	f2c0 80ae 	blt.w	8009a7c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009926:	695b      	ldr	r3, [r3, #20]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d004      	beq.n	8009936 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800992c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800992e:	3304      	adds	r3, #4
 8009930:	4618      	mov	r0, r3
 8009932:	f7fd fb7b 	bl	800702c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009936:	463b      	mov	r3, r7
 8009938:	4618      	mov	r0, r3
 800993a:	f7ff ff69 	bl	8009810 <prvSampleTimeNow>
 800993e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b09      	cmp	r3, #9
 8009944:	f200 809b 	bhi.w	8009a7e <prvProcessReceivedCommands+0x1aa>
 8009948:	a201      	add	r2, pc, #4	; (adr r2, 8009950 <prvProcessReceivedCommands+0x7c>)
 800994a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800994e:	bf00      	nop
 8009950:	08009979 	.word	0x08009979
 8009954:	08009979 	.word	0x08009979
 8009958:	08009979 	.word	0x08009979
 800995c:	080099f1 	.word	0x080099f1
 8009960:	08009a05 	.word	0x08009a05
 8009964:	08009a53 	.word	0x08009a53
 8009968:	08009979 	.word	0x08009979
 800996c:	08009979 	.word	0x08009979
 8009970:	080099f1 	.word	0x080099f1
 8009974:	08009a05 	.word	0x08009a05
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800997a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800997e:	f043 0301 	orr.w	r3, r3, #1
 8009982:	b2da      	uxtb	r2, r3
 8009984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009986:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800998a:	68ba      	ldr	r2, [r7, #8]
 800998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800998e:	699b      	ldr	r3, [r3, #24]
 8009990:	18d1      	adds	r1, r2, r3
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009998:	f7ff ff5a 	bl	8009850 <prvInsertTimerInActiveList>
 800999c:	4603      	mov	r3, r0
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d06d      	beq.n	8009a7e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a4:	6a1b      	ldr	r3, [r3, #32]
 80099a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099a8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099b0:	f003 0304 	and.w	r3, r3, #4
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d062      	beq.n	8009a7e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099bc:	699b      	ldr	r3, [r3, #24]
 80099be:	441a      	add	r2, r3
 80099c0:	2300      	movs	r3, #0
 80099c2:	9300      	str	r3, [sp, #0]
 80099c4:	2300      	movs	r3, #0
 80099c6:	2100      	movs	r1, #0
 80099c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099ca:	f7ff fdff 	bl	80095cc <xTimerGenericCommand>
 80099ce:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80099d0:	6a3b      	ldr	r3, [r7, #32]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d153      	bne.n	8009a7e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80099d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099da:	b672      	cpsid	i
 80099dc:	f383 8811 	msr	BASEPRI, r3
 80099e0:	f3bf 8f6f 	isb	sy
 80099e4:	f3bf 8f4f 	dsb	sy
 80099e8:	b662      	cpsie	i
 80099ea:	61bb      	str	r3, [r7, #24]
}
 80099ec:	bf00      	nop
 80099ee:	e7fe      	b.n	80099ee <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80099f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099f6:	f023 0301 	bic.w	r3, r3, #1
 80099fa:	b2da      	uxtb	r2, r3
 80099fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009a02:	e03c      	b.n	8009a7e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a06:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a0a:	f043 0301 	orr.w	r3, r3, #1
 8009a0e:	b2da      	uxtb	r2, r3
 8009a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a12:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a1e:	699b      	ldr	r3, [r3, #24]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d10c      	bne.n	8009a3e <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8009a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a28:	b672      	cpsid	i
 8009a2a:	f383 8811 	msr	BASEPRI, r3
 8009a2e:	f3bf 8f6f 	isb	sy
 8009a32:	f3bf 8f4f 	dsb	sy
 8009a36:	b662      	cpsie	i
 8009a38:	617b      	str	r3, [r7, #20]
}
 8009a3a:	bf00      	nop
 8009a3c:	e7fe      	b.n	8009a3c <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a40:	699a      	ldr	r2, [r3, #24]
 8009a42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a44:	18d1      	adds	r1, r2, r3
 8009a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a4c:	f7ff ff00 	bl	8009850 <prvInsertTimerInActiveList>
					break;
 8009a50:	e015      	b.n	8009a7e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a58:	f003 0302 	and.w	r3, r3, #2
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d103      	bne.n	8009a68 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009a60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a62:	f000 fbc9 	bl	800a1f8 <vPortFree>
 8009a66:	e00a      	b.n	8009a7e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a6e:	f023 0301 	bic.w	r3, r3, #1
 8009a72:	b2da      	uxtb	r2, r3
 8009a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a7a:	e000      	b.n	8009a7e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009a7c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a7e:	4b08      	ldr	r3, [pc, #32]	; (8009aa0 <prvProcessReceivedCommands+0x1cc>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	1d39      	adds	r1, r7, #4
 8009a84:	2200      	movs	r2, #0
 8009a86:	4618      	mov	r0, r3
 8009a88:	f7fd ffb4 	bl	80079f4 <xQueueReceive>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f47f af24 	bne.w	80098dc <prvProcessReceivedCommands+0x8>
	}
}
 8009a94:	bf00      	nop
 8009a96:	bf00      	nop
 8009a98:	3730      	adds	r7, #48	; 0x30
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
 8009a9e:	bf00      	nop
 8009aa0:	20005bb4 	.word	0x20005bb4

08009aa4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009aa4:	b580      	push	{r7, lr}
 8009aa6:	b088      	sub	sp, #32
 8009aa8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009aaa:	e04a      	b.n	8009b42 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009aac:	4b2e      	ldr	r3, [pc, #184]	; (8009b68 <prvSwitchTimerLists+0xc4>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68db      	ldr	r3, [r3, #12]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ab6:	4b2c      	ldr	r3, [pc, #176]	; (8009b68 <prvSwitchTimerLists+0xc4>)
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68db      	ldr	r3, [r3, #12]
 8009abc:	68db      	ldr	r3, [r3, #12]
 8009abe:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	f7fd fab1 	bl	800702c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	6a1b      	ldr	r3, [r3, #32]
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009ad8:	f003 0304 	and.w	r3, r3, #4
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d030      	beq.n	8009b42 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	699b      	ldr	r3, [r3, #24]
 8009ae4:	693a      	ldr	r2, [r7, #16]
 8009ae6:	4413      	add	r3, r2
 8009ae8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009aea:	68ba      	ldr	r2, [r7, #8]
 8009aec:	693b      	ldr	r3, [r7, #16]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	d90e      	bls.n	8009b10 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	68ba      	ldr	r2, [r7, #8]
 8009af6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009afe:	4b1a      	ldr	r3, [pc, #104]	; (8009b68 <prvSwitchTimerLists+0xc4>)
 8009b00:	681a      	ldr	r2, [r3, #0]
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	3304      	adds	r3, #4
 8009b06:	4619      	mov	r1, r3
 8009b08:	4610      	mov	r0, r2
 8009b0a:	f7fd fa56 	bl	8006fba <vListInsert>
 8009b0e:	e018      	b.n	8009b42 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b10:	2300      	movs	r3, #0
 8009b12:	9300      	str	r3, [sp, #0]
 8009b14:	2300      	movs	r3, #0
 8009b16:	693a      	ldr	r2, [r7, #16]
 8009b18:	2100      	movs	r1, #0
 8009b1a:	68f8      	ldr	r0, [r7, #12]
 8009b1c:	f7ff fd56 	bl	80095cc <xTimerGenericCommand>
 8009b20:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10c      	bne.n	8009b42 <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b2c:	b672      	cpsid	i
 8009b2e:	f383 8811 	msr	BASEPRI, r3
 8009b32:	f3bf 8f6f 	isb	sy
 8009b36:	f3bf 8f4f 	dsb	sy
 8009b3a:	b662      	cpsie	i
 8009b3c:	603b      	str	r3, [r7, #0]
}
 8009b3e:	bf00      	nop
 8009b40:	e7fe      	b.n	8009b40 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b42:	4b09      	ldr	r3, [pc, #36]	; (8009b68 <prvSwitchTimerLists+0xc4>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d1af      	bne.n	8009aac <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b4c:	4b06      	ldr	r3, [pc, #24]	; (8009b68 <prvSwitchTimerLists+0xc4>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b52:	4b06      	ldr	r3, [pc, #24]	; (8009b6c <prvSwitchTimerLists+0xc8>)
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	4a04      	ldr	r2, [pc, #16]	; (8009b68 <prvSwitchTimerLists+0xc4>)
 8009b58:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b5a:	4a04      	ldr	r2, [pc, #16]	; (8009b6c <prvSwitchTimerLists+0xc8>)
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	6013      	str	r3, [r2, #0]
}
 8009b60:	bf00      	nop
 8009b62:	3718      	adds	r7, #24
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}
 8009b68:	20005bac 	.word	0x20005bac
 8009b6c:	20005bb0 	.word	0x20005bb0

08009b70 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b70:	b580      	push	{r7, lr}
 8009b72:	b082      	sub	sp, #8
 8009b74:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b76:	f000 f949 	bl	8009e0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b7a:	4b15      	ldr	r3, [pc, #84]	; (8009bd0 <prvCheckForValidListAndQueue+0x60>)
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d120      	bne.n	8009bc4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b82:	4814      	ldr	r0, [pc, #80]	; (8009bd4 <prvCheckForValidListAndQueue+0x64>)
 8009b84:	f7fd f9c8 	bl	8006f18 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009b88:	4813      	ldr	r0, [pc, #76]	; (8009bd8 <prvCheckForValidListAndQueue+0x68>)
 8009b8a:	f7fd f9c5 	bl	8006f18 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009b8e:	4b13      	ldr	r3, [pc, #76]	; (8009bdc <prvCheckForValidListAndQueue+0x6c>)
 8009b90:	4a10      	ldr	r2, [pc, #64]	; (8009bd4 <prvCheckForValidListAndQueue+0x64>)
 8009b92:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009b94:	4b12      	ldr	r3, [pc, #72]	; (8009be0 <prvCheckForValidListAndQueue+0x70>)
 8009b96:	4a10      	ldr	r2, [pc, #64]	; (8009bd8 <prvCheckForValidListAndQueue+0x68>)
 8009b98:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009b9a:	2300      	movs	r3, #0
 8009b9c:	9300      	str	r3, [sp, #0]
 8009b9e:	4b11      	ldr	r3, [pc, #68]	; (8009be4 <prvCheckForValidListAndQueue+0x74>)
 8009ba0:	4a11      	ldr	r2, [pc, #68]	; (8009be8 <prvCheckForValidListAndQueue+0x78>)
 8009ba2:	2110      	movs	r1, #16
 8009ba4:	200a      	movs	r0, #10
 8009ba6:	f7fd fad5 	bl	8007154 <xQueueGenericCreateStatic>
 8009baa:	4603      	mov	r3, r0
 8009bac:	4a08      	ldr	r2, [pc, #32]	; (8009bd0 <prvCheckForValidListAndQueue+0x60>)
 8009bae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009bb0:	4b07      	ldr	r3, [pc, #28]	; (8009bd0 <prvCheckForValidListAndQueue+0x60>)
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d005      	beq.n	8009bc4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009bb8:	4b05      	ldr	r3, [pc, #20]	; (8009bd0 <prvCheckForValidListAndQueue+0x60>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	490b      	ldr	r1, [pc, #44]	; (8009bec <prvCheckForValidListAndQueue+0x7c>)
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	f7fe fae6 	bl	8008190 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009bc4:	f000 f956 	bl	8009e74 <vPortExitCritical>
}
 8009bc8:	bf00      	nop
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bd80      	pop	{r7, pc}
 8009bce:	bf00      	nop
 8009bd0:	20005bb4 	.word	0x20005bb4
 8009bd4:	20005b84 	.word	0x20005b84
 8009bd8:	20005b98 	.word	0x20005b98
 8009bdc:	20005bac 	.word	0x20005bac
 8009be0:	20005bb0 	.word	0x20005bb0
 8009be4:	20005c60 	.word	0x20005c60
 8009be8:	20005bc0 	.word	0x20005bc0
 8009bec:	08017fdc 	.word	0x08017fdc

08009bf0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009bf0:	b480      	push	{r7}
 8009bf2:	b085      	sub	sp, #20
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	3b04      	subs	r3, #4
 8009c00:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c08:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	3b04      	subs	r3, #4
 8009c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	f023 0201 	bic.w	r2, r3, #1
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	3b04      	subs	r3, #4
 8009c1e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c20:	4a0c      	ldr	r2, [pc, #48]	; (8009c54 <pxPortInitialiseStack+0x64>)
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3b14      	subs	r3, #20
 8009c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c2c:	687a      	ldr	r2, [r7, #4]
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	3b04      	subs	r3, #4
 8009c36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	f06f 0202 	mvn.w	r2, #2
 8009c3e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	3b20      	subs	r3, #32
 8009c44:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c46:	68fb      	ldr	r3, [r7, #12]
}
 8009c48:	4618      	mov	r0, r3
 8009c4a:	3714      	adds	r7, #20
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr
 8009c54:	08009c59 	.word	0x08009c59

08009c58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b085      	sub	sp, #20
 8009c5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c5e:	2300      	movs	r3, #0
 8009c60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c62:	4b14      	ldr	r3, [pc, #80]	; (8009cb4 <prvTaskExitError+0x5c>)
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c6a:	d00c      	beq.n	8009c86 <prvTaskExitError+0x2e>
	__asm volatile
 8009c6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c70:	b672      	cpsid	i
 8009c72:	f383 8811 	msr	BASEPRI, r3
 8009c76:	f3bf 8f6f 	isb	sy
 8009c7a:	f3bf 8f4f 	dsb	sy
 8009c7e:	b662      	cpsie	i
 8009c80:	60fb      	str	r3, [r7, #12]
}
 8009c82:	bf00      	nop
 8009c84:	e7fe      	b.n	8009c84 <prvTaskExitError+0x2c>
	__asm volatile
 8009c86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8a:	b672      	cpsid	i
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	b662      	cpsie	i
 8009c9a:	60bb      	str	r3, [r7, #8]
}
 8009c9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009c9e:	bf00      	nop
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	d0fc      	beq.n	8009ca0 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009ca6:	bf00      	nop
 8009ca8:	bf00      	nop
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	20000020 	.word	0x20000020
	...

08009cc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009cc0:	4b07      	ldr	r3, [pc, #28]	; (8009ce0 <pxCurrentTCBConst2>)
 8009cc2:	6819      	ldr	r1, [r3, #0]
 8009cc4:	6808      	ldr	r0, [r1, #0]
 8009cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cca:	f380 8809 	msr	PSP, r0
 8009cce:	f3bf 8f6f 	isb	sy
 8009cd2:	f04f 0000 	mov.w	r0, #0
 8009cd6:	f380 8811 	msr	BASEPRI, r0
 8009cda:	4770      	bx	lr
 8009cdc:	f3af 8000 	nop.w

08009ce0 <pxCurrentTCBConst2>:
 8009ce0:	20005684 	.word	0x20005684
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009ce4:	bf00      	nop
 8009ce6:	bf00      	nop

08009ce8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009ce8:	4808      	ldr	r0, [pc, #32]	; (8009d0c <prvPortStartFirstTask+0x24>)
 8009cea:	6800      	ldr	r0, [r0, #0]
 8009cec:	6800      	ldr	r0, [r0, #0]
 8009cee:	f380 8808 	msr	MSP, r0
 8009cf2:	f04f 0000 	mov.w	r0, #0
 8009cf6:	f380 8814 	msr	CONTROL, r0
 8009cfa:	b662      	cpsie	i
 8009cfc:	b661      	cpsie	f
 8009cfe:	f3bf 8f4f 	dsb	sy
 8009d02:	f3bf 8f6f 	isb	sy
 8009d06:	df00      	svc	0
 8009d08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d0a:	bf00      	nop
 8009d0c:	e000ed08 	.word	0xe000ed08

08009d10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d16:	4b37      	ldr	r3, [pc, #220]	; (8009df4 <xPortStartScheduler+0xe4>)
 8009d18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	781b      	ldrb	r3, [r3, #0]
 8009d1e:	b2db      	uxtb	r3, r3
 8009d20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	22ff      	movs	r2, #255	; 0xff
 8009d26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	781b      	ldrb	r3, [r3, #0]
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d30:	78fb      	ldrb	r3, [r7, #3]
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009d38:	b2da      	uxtb	r2, r3
 8009d3a:	4b2f      	ldr	r3, [pc, #188]	; (8009df8 <xPortStartScheduler+0xe8>)
 8009d3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d3e:	4b2f      	ldr	r3, [pc, #188]	; (8009dfc <xPortStartScheduler+0xec>)
 8009d40:	2207      	movs	r2, #7
 8009d42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d44:	e009      	b.n	8009d5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009d46:	4b2d      	ldr	r3, [pc, #180]	; (8009dfc <xPortStartScheduler+0xec>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	3b01      	subs	r3, #1
 8009d4c:	4a2b      	ldr	r2, [pc, #172]	; (8009dfc <xPortStartScheduler+0xec>)
 8009d4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009d50:	78fb      	ldrb	r3, [r7, #3]
 8009d52:	b2db      	uxtb	r3, r3
 8009d54:	005b      	lsls	r3, r3, #1
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d5a:	78fb      	ldrb	r3, [r7, #3]
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d62:	2b80      	cmp	r3, #128	; 0x80
 8009d64:	d0ef      	beq.n	8009d46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009d66:	4b25      	ldr	r3, [pc, #148]	; (8009dfc <xPortStartScheduler+0xec>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f1c3 0307 	rsb	r3, r3, #7
 8009d6e:	2b04      	cmp	r3, #4
 8009d70:	d00c      	beq.n	8009d8c <xPortStartScheduler+0x7c>
	__asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d76:	b672      	cpsid	i
 8009d78:	f383 8811 	msr	BASEPRI, r3
 8009d7c:	f3bf 8f6f 	isb	sy
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	b662      	cpsie	i
 8009d86:	60bb      	str	r3, [r7, #8]
}
 8009d88:	bf00      	nop
 8009d8a:	e7fe      	b.n	8009d8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009d8c:	4b1b      	ldr	r3, [pc, #108]	; (8009dfc <xPortStartScheduler+0xec>)
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	021b      	lsls	r3, r3, #8
 8009d92:	4a1a      	ldr	r2, [pc, #104]	; (8009dfc <xPortStartScheduler+0xec>)
 8009d94:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009d96:	4b19      	ldr	r3, [pc, #100]	; (8009dfc <xPortStartScheduler+0xec>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009d9e:	4a17      	ldr	r2, [pc, #92]	; (8009dfc <xPortStartScheduler+0xec>)
 8009da0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	b2da      	uxtb	r2, r3
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009daa:	4b15      	ldr	r3, [pc, #84]	; (8009e00 <xPortStartScheduler+0xf0>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	4a14      	ldr	r2, [pc, #80]	; (8009e00 <xPortStartScheduler+0xf0>)
 8009db0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009db4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009db6:	4b12      	ldr	r3, [pc, #72]	; (8009e00 <xPortStartScheduler+0xf0>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a11      	ldr	r2, [pc, #68]	; (8009e00 <xPortStartScheduler+0xf0>)
 8009dbc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009dc0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009dc2:	f000 f8dd 	bl	8009f80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009dc6:	4b0f      	ldr	r3, [pc, #60]	; (8009e04 <xPortStartScheduler+0xf4>)
 8009dc8:	2200      	movs	r2, #0
 8009dca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009dcc:	f000 f8fc 	bl	8009fc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009dd0:	4b0d      	ldr	r3, [pc, #52]	; (8009e08 <xPortStartScheduler+0xf8>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a0c      	ldr	r2, [pc, #48]	; (8009e08 <xPortStartScheduler+0xf8>)
 8009dd6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009dda:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009ddc:	f7ff ff84 	bl	8009ce8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009de0:	f7fe ff30 	bl	8008c44 <vTaskSwitchContext>
	prvTaskExitError();
 8009de4:	f7ff ff38 	bl	8009c58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009de8:	2300      	movs	r3, #0
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3710      	adds	r7, #16
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd80      	pop	{r7, pc}
 8009df2:	bf00      	nop
 8009df4:	e000e400 	.word	0xe000e400
 8009df8:	20005cb0 	.word	0x20005cb0
 8009dfc:	20005cb4 	.word	0x20005cb4
 8009e00:	e000ed20 	.word	0xe000ed20
 8009e04:	20000020 	.word	0x20000020
 8009e08:	e000ef34 	.word	0xe000ef34

08009e0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e0c:	b480      	push	{r7}
 8009e0e:	b083      	sub	sp, #12
 8009e10:	af00      	add	r7, sp, #0
	__asm volatile
 8009e12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e16:	b672      	cpsid	i
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	b662      	cpsie	i
 8009e26:	607b      	str	r3, [r7, #4]
}
 8009e28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e2a:	4b10      	ldr	r3, [pc, #64]	; (8009e6c <vPortEnterCritical+0x60>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	3301      	adds	r3, #1
 8009e30:	4a0e      	ldr	r2, [pc, #56]	; (8009e6c <vPortEnterCritical+0x60>)
 8009e32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e34:	4b0d      	ldr	r3, [pc, #52]	; (8009e6c <vPortEnterCritical+0x60>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	2b01      	cmp	r3, #1
 8009e3a:	d111      	bne.n	8009e60 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e3c:	4b0c      	ldr	r3, [pc, #48]	; (8009e70 <vPortEnterCritical+0x64>)
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	b2db      	uxtb	r3, r3
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00c      	beq.n	8009e60 <vPortEnterCritical+0x54>
	__asm volatile
 8009e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e4a:	b672      	cpsid	i
 8009e4c:	f383 8811 	msr	BASEPRI, r3
 8009e50:	f3bf 8f6f 	isb	sy
 8009e54:	f3bf 8f4f 	dsb	sy
 8009e58:	b662      	cpsie	i
 8009e5a:	603b      	str	r3, [r7, #0]
}
 8009e5c:	bf00      	nop
 8009e5e:	e7fe      	b.n	8009e5e <vPortEnterCritical+0x52>
	}
}
 8009e60:	bf00      	nop
 8009e62:	370c      	adds	r7, #12
 8009e64:	46bd      	mov	sp, r7
 8009e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e6a:	4770      	bx	lr
 8009e6c:	20000020 	.word	0x20000020
 8009e70:	e000ed04 	.word	0xe000ed04

08009e74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009e74:	b480      	push	{r7}
 8009e76:	b083      	sub	sp, #12
 8009e78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009e7a:	4b13      	ldr	r3, [pc, #76]	; (8009ec8 <vPortExitCritical+0x54>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d10c      	bne.n	8009e9c <vPortExitCritical+0x28>
	__asm volatile
 8009e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e86:	b672      	cpsid	i
 8009e88:	f383 8811 	msr	BASEPRI, r3
 8009e8c:	f3bf 8f6f 	isb	sy
 8009e90:	f3bf 8f4f 	dsb	sy
 8009e94:	b662      	cpsie	i
 8009e96:	607b      	str	r3, [r7, #4]
}
 8009e98:	bf00      	nop
 8009e9a:	e7fe      	b.n	8009e9a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009e9c:	4b0a      	ldr	r3, [pc, #40]	; (8009ec8 <vPortExitCritical+0x54>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	3b01      	subs	r3, #1
 8009ea2:	4a09      	ldr	r2, [pc, #36]	; (8009ec8 <vPortExitCritical+0x54>)
 8009ea4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ea6:	4b08      	ldr	r3, [pc, #32]	; (8009ec8 <vPortExitCritical+0x54>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d105      	bne.n	8009eba <vPortExitCritical+0x46>
 8009eae:	2300      	movs	r3, #0
 8009eb0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009eb2:	683b      	ldr	r3, [r7, #0]
 8009eb4:	f383 8811 	msr	BASEPRI, r3
}
 8009eb8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009eba:	bf00      	nop
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	20000020 	.word	0x20000020
 8009ecc:	00000000 	.word	0x00000000

08009ed0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009ed0:	f3ef 8009 	mrs	r0, PSP
 8009ed4:	f3bf 8f6f 	isb	sy
 8009ed8:	4b15      	ldr	r3, [pc, #84]	; (8009f30 <pxCurrentTCBConst>)
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	f01e 0f10 	tst.w	lr, #16
 8009ee0:	bf08      	it	eq
 8009ee2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ee6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eea:	6010      	str	r0, [r2, #0]
 8009eec:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ef0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ef4:	b672      	cpsid	i
 8009ef6:	f380 8811 	msr	BASEPRI, r0
 8009efa:	f3bf 8f4f 	dsb	sy
 8009efe:	f3bf 8f6f 	isb	sy
 8009f02:	b662      	cpsie	i
 8009f04:	f7fe fe9e 	bl	8008c44 <vTaskSwitchContext>
 8009f08:	f04f 0000 	mov.w	r0, #0
 8009f0c:	f380 8811 	msr	BASEPRI, r0
 8009f10:	bc09      	pop	{r0, r3}
 8009f12:	6819      	ldr	r1, [r3, #0]
 8009f14:	6808      	ldr	r0, [r1, #0]
 8009f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f1a:	f01e 0f10 	tst.w	lr, #16
 8009f1e:	bf08      	it	eq
 8009f20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f24:	f380 8809 	msr	PSP, r0
 8009f28:	f3bf 8f6f 	isb	sy
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop

08009f30 <pxCurrentTCBConst>:
 8009f30:	20005684 	.word	0x20005684
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f34:	bf00      	nop
 8009f36:	bf00      	nop

08009f38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f42:	b672      	cpsid	i
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	b662      	cpsie	i
 8009f52:	607b      	str	r3, [r7, #4]
}
 8009f54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009f56:	f7fe fdb9 	bl	8008acc <xTaskIncrementTick>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d003      	beq.n	8009f68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009f60:	4b06      	ldr	r3, [pc, #24]	; (8009f7c <SysTick_Handler+0x44>)
 8009f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f66:	601a      	str	r2, [r3, #0]
 8009f68:	2300      	movs	r3, #0
 8009f6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	f383 8811 	msr	BASEPRI, r3
}
 8009f72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009f74:	bf00      	nop
 8009f76:	3708      	adds	r7, #8
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	bd80      	pop	{r7, pc}
 8009f7c:	e000ed04 	.word	0xe000ed04

08009f80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009f80:	b480      	push	{r7}
 8009f82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009f84:	4b0b      	ldr	r3, [pc, #44]	; (8009fb4 <vPortSetupTimerInterrupt+0x34>)
 8009f86:	2200      	movs	r2, #0
 8009f88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009f8a:	4b0b      	ldr	r3, [pc, #44]	; (8009fb8 <vPortSetupTimerInterrupt+0x38>)
 8009f8c:	2200      	movs	r2, #0
 8009f8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009f90:	4b0a      	ldr	r3, [pc, #40]	; (8009fbc <vPortSetupTimerInterrupt+0x3c>)
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	4a0a      	ldr	r2, [pc, #40]	; (8009fc0 <vPortSetupTimerInterrupt+0x40>)
 8009f96:	fba2 2303 	umull	r2, r3, r2, r3
 8009f9a:	099b      	lsrs	r3, r3, #6
 8009f9c:	4a09      	ldr	r2, [pc, #36]	; (8009fc4 <vPortSetupTimerInterrupt+0x44>)
 8009f9e:	3b01      	subs	r3, #1
 8009fa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009fa2:	4b04      	ldr	r3, [pc, #16]	; (8009fb4 <vPortSetupTimerInterrupt+0x34>)
 8009fa4:	2207      	movs	r2, #7
 8009fa6:	601a      	str	r2, [r3, #0]
}
 8009fa8:	bf00      	nop
 8009faa:	46bd      	mov	sp, r7
 8009fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb0:	4770      	bx	lr
 8009fb2:	bf00      	nop
 8009fb4:	e000e010 	.word	0xe000e010
 8009fb8:	e000e018 	.word	0xe000e018
 8009fbc:	20000000 	.word	0x20000000
 8009fc0:	10624dd3 	.word	0x10624dd3
 8009fc4:	e000e014 	.word	0xe000e014

08009fc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009fc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009fd8 <vPortEnableVFP+0x10>
 8009fcc:	6801      	ldr	r1, [r0, #0]
 8009fce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009fd2:	6001      	str	r1, [r0, #0]
 8009fd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009fd6:	bf00      	nop
 8009fd8:	e000ed88 	.word	0xe000ed88

08009fdc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009fdc:	b480      	push	{r7}
 8009fde:	b085      	sub	sp, #20
 8009fe0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009fe2:	f3ef 8305 	mrs	r3, IPSR
 8009fe6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	2b0f      	cmp	r3, #15
 8009fec:	d916      	bls.n	800a01c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009fee:	4a19      	ldr	r2, [pc, #100]	; (800a054 <vPortValidateInterruptPriority+0x78>)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	4413      	add	r3, r2
 8009ff4:	781b      	ldrb	r3, [r3, #0]
 8009ff6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009ff8:	4b17      	ldr	r3, [pc, #92]	; (800a058 <vPortValidateInterruptPriority+0x7c>)
 8009ffa:	781b      	ldrb	r3, [r3, #0]
 8009ffc:	7afa      	ldrb	r2, [r7, #11]
 8009ffe:	429a      	cmp	r2, r3
 800a000:	d20c      	bcs.n	800a01c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 800a002:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a006:	b672      	cpsid	i
 800a008:	f383 8811 	msr	BASEPRI, r3
 800a00c:	f3bf 8f6f 	isb	sy
 800a010:	f3bf 8f4f 	dsb	sy
 800a014:	b662      	cpsie	i
 800a016:	607b      	str	r3, [r7, #4]
}
 800a018:	bf00      	nop
 800a01a:	e7fe      	b.n	800a01a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a01c:	4b0f      	ldr	r3, [pc, #60]	; (800a05c <vPortValidateInterruptPriority+0x80>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a024:	4b0e      	ldr	r3, [pc, #56]	; (800a060 <vPortValidateInterruptPriority+0x84>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	429a      	cmp	r2, r3
 800a02a:	d90c      	bls.n	800a046 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	b672      	cpsid	i
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	b662      	cpsie	i
 800a040:	603b      	str	r3, [r7, #0]
}
 800a042:	bf00      	nop
 800a044:	e7fe      	b.n	800a044 <vPortValidateInterruptPriority+0x68>
	}
 800a046:	bf00      	nop
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	e000e3f0 	.word	0xe000e3f0
 800a058:	20005cb0 	.word	0x20005cb0
 800a05c:	e000ed0c 	.word	0xe000ed0c
 800a060:	20005cb4 	.word	0x20005cb4

0800a064 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a064:	b580      	push	{r7, lr}
 800a066:	b08a      	sub	sp, #40	; 0x28
 800a068:	af00      	add	r7, sp, #0
 800a06a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a06c:	2300      	movs	r3, #0
 800a06e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a070:	f7fe fc5c 	bl	800892c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a074:	4b5b      	ldr	r3, [pc, #364]	; (800a1e4 <pvPortMalloc+0x180>)
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d101      	bne.n	800a080 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a07c:	f000 f91a 	bl	800a2b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a080:	4b59      	ldr	r3, [pc, #356]	; (800a1e8 <pvPortMalloc+0x184>)
 800a082:	681a      	ldr	r2, [r3, #0]
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	4013      	ands	r3, r2
 800a088:	2b00      	cmp	r3, #0
 800a08a:	f040 8092 	bne.w	800a1b2 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d01f      	beq.n	800a0d4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800a094:	2208      	movs	r2, #8
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	4413      	add	r3, r2
 800a09a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f003 0307 	and.w	r3, r3, #7
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d016      	beq.n	800a0d4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	f023 0307 	bic.w	r3, r3, #7
 800a0ac:	3308      	adds	r3, #8
 800a0ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f003 0307 	and.w	r3, r3, #7
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d00c      	beq.n	800a0d4 <pvPortMalloc+0x70>
	__asm volatile
 800a0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0be:	b672      	cpsid	i
 800a0c0:	f383 8811 	msr	BASEPRI, r3
 800a0c4:	f3bf 8f6f 	isb	sy
 800a0c8:	f3bf 8f4f 	dsb	sy
 800a0cc:	b662      	cpsie	i
 800a0ce:	617b      	str	r3, [r7, #20]
}
 800a0d0:	bf00      	nop
 800a0d2:	e7fe      	b.n	800a0d2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d06b      	beq.n	800a1b2 <pvPortMalloc+0x14e>
 800a0da:	4b44      	ldr	r3, [pc, #272]	; (800a1ec <pvPortMalloc+0x188>)
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	429a      	cmp	r2, r3
 800a0e2:	d866      	bhi.n	800a1b2 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a0e4:	4b42      	ldr	r3, [pc, #264]	; (800a1f0 <pvPortMalloc+0x18c>)
 800a0e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a0e8:	4b41      	ldr	r3, [pc, #260]	; (800a1f0 <pvPortMalloc+0x18c>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0ee:	e004      	b.n	800a0fa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800a0f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a0f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a0fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	429a      	cmp	r2, r3
 800a102:	d903      	bls.n	800a10c <pvPortMalloc+0xa8>
 800a104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d1f1      	bne.n	800a0f0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a10c:	4b35      	ldr	r3, [pc, #212]	; (800a1e4 <pvPortMalloc+0x180>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a112:	429a      	cmp	r2, r3
 800a114:	d04d      	beq.n	800a1b2 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a116:	6a3b      	ldr	r3, [r7, #32]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	2208      	movs	r2, #8
 800a11c:	4413      	add	r3, r2
 800a11e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a122:	681a      	ldr	r2, [r3, #0]
 800a124:	6a3b      	ldr	r3, [r7, #32]
 800a126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a12a:	685a      	ldr	r2, [r3, #4]
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	1ad2      	subs	r2, r2, r3
 800a130:	2308      	movs	r3, #8
 800a132:	005b      	lsls	r3, r3, #1
 800a134:	429a      	cmp	r2, r3
 800a136:	d921      	bls.n	800a17c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	4413      	add	r3, r2
 800a13e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a140:	69bb      	ldr	r3, [r7, #24]
 800a142:	f003 0307 	and.w	r3, r3, #7
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00c      	beq.n	800a164 <pvPortMalloc+0x100>
	__asm volatile
 800a14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a14e:	b672      	cpsid	i
 800a150:	f383 8811 	msr	BASEPRI, r3
 800a154:	f3bf 8f6f 	isb	sy
 800a158:	f3bf 8f4f 	dsb	sy
 800a15c:	b662      	cpsie	i
 800a15e:	613b      	str	r3, [r7, #16]
}
 800a160:	bf00      	nop
 800a162:	e7fe      	b.n	800a162 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	1ad2      	subs	r2, r2, r3
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a176:	69b8      	ldr	r0, [r7, #24]
 800a178:	f000 f8fe 	bl	800a378 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a17c:	4b1b      	ldr	r3, [pc, #108]	; (800a1ec <pvPortMalloc+0x188>)
 800a17e:	681a      	ldr	r2, [r3, #0]
 800a180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	1ad3      	subs	r3, r2, r3
 800a186:	4a19      	ldr	r2, [pc, #100]	; (800a1ec <pvPortMalloc+0x188>)
 800a188:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a18a:	4b18      	ldr	r3, [pc, #96]	; (800a1ec <pvPortMalloc+0x188>)
 800a18c:	681a      	ldr	r2, [r3, #0]
 800a18e:	4b19      	ldr	r3, [pc, #100]	; (800a1f4 <pvPortMalloc+0x190>)
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	429a      	cmp	r2, r3
 800a194:	d203      	bcs.n	800a19e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a196:	4b15      	ldr	r3, [pc, #84]	; (800a1ec <pvPortMalloc+0x188>)
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a16      	ldr	r2, [pc, #88]	; (800a1f4 <pvPortMalloc+0x190>)
 800a19c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a19e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a0:	685a      	ldr	r2, [r3, #4]
 800a1a2:	4b11      	ldr	r3, [pc, #68]	; (800a1e8 <pvPortMalloc+0x184>)
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	431a      	orrs	r2, r3
 800a1a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1aa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1b2:	f7fe fbc9 	bl	8008948 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1b6:	69fb      	ldr	r3, [r7, #28]
 800a1b8:	f003 0307 	and.w	r3, r3, #7
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d00c      	beq.n	800a1da <pvPortMalloc+0x176>
	__asm volatile
 800a1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c4:	b672      	cpsid	i
 800a1c6:	f383 8811 	msr	BASEPRI, r3
 800a1ca:	f3bf 8f6f 	isb	sy
 800a1ce:	f3bf 8f4f 	dsb	sy
 800a1d2:	b662      	cpsie	i
 800a1d4:	60fb      	str	r3, [r7, #12]
}
 800a1d6:	bf00      	nop
 800a1d8:	e7fe      	b.n	800a1d8 <pvPortMalloc+0x174>
	return pvReturn;
 800a1da:	69fb      	ldr	r3, [r7, #28]
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3728      	adds	r7, #40	; 0x28
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	bd80      	pop	{r7, pc}
 800a1e4:	200098c0 	.word	0x200098c0
 800a1e8:	200098cc 	.word	0x200098cc
 800a1ec:	200098c4 	.word	0x200098c4
 800a1f0:	200098b8 	.word	0x200098b8
 800a1f4:	200098c8 	.word	0x200098c8

0800a1f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a1f8:	b580      	push	{r7, lr}
 800a1fa:	b086      	sub	sp, #24
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d04c      	beq.n	800a2a4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a20a:	2308      	movs	r3, #8
 800a20c:	425b      	negs	r3, r3
 800a20e:	697a      	ldr	r2, [r7, #20]
 800a210:	4413      	add	r3, r2
 800a212:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a214:	697b      	ldr	r3, [r7, #20]
 800a216:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a218:	693b      	ldr	r3, [r7, #16]
 800a21a:	685a      	ldr	r2, [r3, #4]
 800a21c:	4b23      	ldr	r3, [pc, #140]	; (800a2ac <vPortFree+0xb4>)
 800a21e:	681b      	ldr	r3, [r3, #0]
 800a220:	4013      	ands	r3, r2
 800a222:	2b00      	cmp	r3, #0
 800a224:	d10c      	bne.n	800a240 <vPortFree+0x48>
	__asm volatile
 800a226:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a22a:	b672      	cpsid	i
 800a22c:	f383 8811 	msr	BASEPRI, r3
 800a230:	f3bf 8f6f 	isb	sy
 800a234:	f3bf 8f4f 	dsb	sy
 800a238:	b662      	cpsie	i
 800a23a:	60fb      	str	r3, [r7, #12]
}
 800a23c:	bf00      	nop
 800a23e:	e7fe      	b.n	800a23e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a240:	693b      	ldr	r3, [r7, #16]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d00c      	beq.n	800a262 <vPortFree+0x6a>
	__asm volatile
 800a248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a24c:	b672      	cpsid	i
 800a24e:	f383 8811 	msr	BASEPRI, r3
 800a252:	f3bf 8f6f 	isb	sy
 800a256:	f3bf 8f4f 	dsb	sy
 800a25a:	b662      	cpsie	i
 800a25c:	60bb      	str	r3, [r7, #8]
}
 800a25e:	bf00      	nop
 800a260:	e7fe      	b.n	800a260 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	685a      	ldr	r2, [r3, #4]
 800a266:	4b11      	ldr	r3, [pc, #68]	; (800a2ac <vPortFree+0xb4>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	4013      	ands	r3, r2
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d019      	beq.n	800a2a4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d115      	bne.n	800a2a4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	685a      	ldr	r2, [r3, #4]
 800a27c:	4b0b      	ldr	r3, [pc, #44]	; (800a2ac <vPortFree+0xb4>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	43db      	mvns	r3, r3
 800a282:	401a      	ands	r2, r3
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a288:	f7fe fb50 	bl	800892c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a28c:	693b      	ldr	r3, [r7, #16]
 800a28e:	685a      	ldr	r2, [r3, #4]
 800a290:	4b07      	ldr	r3, [pc, #28]	; (800a2b0 <vPortFree+0xb8>)
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	4413      	add	r3, r2
 800a296:	4a06      	ldr	r2, [pc, #24]	; (800a2b0 <vPortFree+0xb8>)
 800a298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a29a:	6938      	ldr	r0, [r7, #16]
 800a29c:	f000 f86c 	bl	800a378 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a2a0:	f7fe fb52 	bl	8008948 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2a4:	bf00      	nop
 800a2a6:	3718      	adds	r7, #24
 800a2a8:	46bd      	mov	sp, r7
 800a2aa:	bd80      	pop	{r7, pc}
 800a2ac:	200098cc 	.word	0x200098cc
 800a2b0:	200098c4 	.word	0x200098c4

0800a2b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b085      	sub	sp, #20
 800a2b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a2ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a2be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a2c0:	4b27      	ldr	r3, [pc, #156]	; (800a360 <prvHeapInit+0xac>)
 800a2c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f003 0307 	and.w	r3, r3, #7
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d00c      	beq.n	800a2e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	3307      	adds	r3, #7
 800a2d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f023 0307 	bic.w	r3, r3, #7
 800a2da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a2dc:	68ba      	ldr	r2, [r7, #8]
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	1ad3      	subs	r3, r2, r3
 800a2e2:	4a1f      	ldr	r2, [pc, #124]	; (800a360 <prvHeapInit+0xac>)
 800a2e4:	4413      	add	r3, r2
 800a2e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a2ec:	4a1d      	ldr	r2, [pc, #116]	; (800a364 <prvHeapInit+0xb0>)
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a2f2:	4b1c      	ldr	r3, [pc, #112]	; (800a364 <prvHeapInit+0xb0>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	68ba      	ldr	r2, [r7, #8]
 800a2fc:	4413      	add	r3, r2
 800a2fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a300:	2208      	movs	r2, #8
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	1a9b      	subs	r3, r3, r2
 800a306:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	f023 0307 	bic.w	r3, r3, #7
 800a30e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	4a15      	ldr	r2, [pc, #84]	; (800a368 <prvHeapInit+0xb4>)
 800a314:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a316:	4b14      	ldr	r3, [pc, #80]	; (800a368 <prvHeapInit+0xb4>)
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	2200      	movs	r2, #0
 800a31c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a31e:	4b12      	ldr	r3, [pc, #72]	; (800a368 <prvHeapInit+0xb4>)
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2200      	movs	r2, #0
 800a324:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	1ad2      	subs	r2, r2, r3
 800a330:	683b      	ldr	r3, [r7, #0]
 800a332:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a334:	4b0c      	ldr	r3, [pc, #48]	; (800a368 <prvHeapInit+0xb4>)
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	4a0a      	ldr	r2, [pc, #40]	; (800a36c <prvHeapInit+0xb8>)
 800a342:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	4a09      	ldr	r2, [pc, #36]	; (800a370 <prvHeapInit+0xbc>)
 800a34a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a34c:	4b09      	ldr	r3, [pc, #36]	; (800a374 <prvHeapInit+0xc0>)
 800a34e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a352:	601a      	str	r2, [r3, #0]
}
 800a354:	bf00      	nop
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	20005cb8 	.word	0x20005cb8
 800a364:	200098b8 	.word	0x200098b8
 800a368:	200098c0 	.word	0x200098c0
 800a36c:	200098c8 	.word	0x200098c8
 800a370:	200098c4 	.word	0x200098c4
 800a374:	200098cc 	.word	0x200098cc

0800a378 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a378:	b480      	push	{r7}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a380:	4b28      	ldr	r3, [pc, #160]	; (800a424 <prvInsertBlockIntoFreeList+0xac>)
 800a382:	60fb      	str	r3, [r7, #12]
 800a384:	e002      	b.n	800a38c <prvInsertBlockIntoFreeList+0x14>
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	681b      	ldr	r3, [r3, #0]
 800a38a:	60fb      	str	r3, [r7, #12]
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	687a      	ldr	r2, [r7, #4]
 800a392:	429a      	cmp	r2, r3
 800a394:	d8f7      	bhi.n	800a386 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	685b      	ldr	r3, [r3, #4]
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	4413      	add	r3, r2
 800a3a2:	687a      	ldr	r2, [r7, #4]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	d108      	bne.n	800a3ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	685a      	ldr	r2, [r3, #4]
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	441a      	add	r2, r3
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	685b      	ldr	r3, [r3, #4]
 800a3c2:	68ba      	ldr	r2, [r7, #8]
 800a3c4:	441a      	add	r2, r3
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	429a      	cmp	r2, r3
 800a3cc:	d118      	bne.n	800a400 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681a      	ldr	r2, [r3, #0]
 800a3d2:	4b15      	ldr	r3, [pc, #84]	; (800a428 <prvInsertBlockIntoFreeList+0xb0>)
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	429a      	cmp	r2, r3
 800a3d8:	d00d      	beq.n	800a3f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	685a      	ldr	r2, [r3, #4]
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	441a      	add	r2, r3
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	681a      	ldr	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	601a      	str	r2, [r3, #0]
 800a3f4:	e008      	b.n	800a408 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a3f6:	4b0c      	ldr	r3, [pc, #48]	; (800a428 <prvInsertBlockIntoFreeList+0xb0>)
 800a3f8:	681a      	ldr	r2, [r3, #0]
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	601a      	str	r2, [r3, #0]
 800a3fe:	e003      	b.n	800a408 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a408:	68fa      	ldr	r2, [r7, #12]
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	429a      	cmp	r2, r3
 800a40e:	d002      	beq.n	800a416 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	687a      	ldr	r2, [r7, #4]
 800a414:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a416:	bf00      	nop
 800a418:	3714      	adds	r7, #20
 800a41a:	46bd      	mov	sp, r7
 800a41c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a420:	4770      	bx	lr
 800a422:	bf00      	nop
 800a424:	200098b8 	.word	0x200098b8
 800a428:	200098c0 	.word	0x200098c0

0800a42c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a42c:	b580      	push	{r7, lr}
 800a42e:	b084      	sub	sp, #16
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a436:	f007 fd0b 	bl	8011e50 <sys_timeouts_sleeptime>
 800a43a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a442:	d10b      	bne.n	800a45c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a444:	4813      	ldr	r0, [pc, #76]	; (800a494 <tcpip_timeouts_mbox_fetch+0x68>)
 800a446:	f00c fc28 	bl	8016c9a <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a44a:	2200      	movs	r2, #0
 800a44c:	6839      	ldr	r1, [r7, #0]
 800a44e:	6878      	ldr	r0, [r7, #4]
 800a450:	f00c fbb0 	bl	8016bb4 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a454:	480f      	ldr	r0, [pc, #60]	; (800a494 <tcpip_timeouts_mbox_fetch+0x68>)
 800a456:	f00c fc11 	bl	8016c7c <sys_mutex_lock>
    return;
 800a45a:	e018      	b.n	800a48e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d102      	bne.n	800a468 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a462:	f007 fcbb 	bl	8011ddc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a466:	e7e6      	b.n	800a436 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a468:	480a      	ldr	r0, [pc, #40]	; (800a494 <tcpip_timeouts_mbox_fetch+0x68>)
 800a46a:	f00c fc16 	bl	8016c9a <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	6839      	ldr	r1, [r7, #0]
 800a472:	6878      	ldr	r0, [r7, #4]
 800a474:	f00c fb9e 	bl	8016bb4 <sys_arch_mbox_fetch>
 800a478:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a47a:	4806      	ldr	r0, [pc, #24]	; (800a494 <tcpip_timeouts_mbox_fetch+0x68>)
 800a47c:	f00c fbfe 	bl	8016c7c <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a486:	d102      	bne.n	800a48e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a488:	f007 fca8 	bl	8011ddc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a48c:	e7d3      	b.n	800a436 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a48e:	3710      	adds	r7, #16
 800a490:	46bd      	mov	sp, r7
 800a492:	bd80      	pop	{r7, pc}
 800a494:	200098dc 	.word	0x200098dc

0800a498 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b084      	sub	sp, #16
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a4a0:	4810      	ldr	r0, [pc, #64]	; (800a4e4 <tcpip_thread+0x4c>)
 800a4a2:	f00c fbeb 	bl	8016c7c <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a4a6:	4b10      	ldr	r3, [pc, #64]	; (800a4e8 <tcpip_thread+0x50>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d005      	beq.n	800a4ba <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a4ae:	4b0e      	ldr	r3, [pc, #56]	; (800a4e8 <tcpip_thread+0x50>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	4a0e      	ldr	r2, [pc, #56]	; (800a4ec <tcpip_thread+0x54>)
 800a4b4:	6812      	ldr	r2, [r2, #0]
 800a4b6:	4610      	mov	r0, r2
 800a4b8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a4ba:	f107 030c 	add.w	r3, r7, #12
 800a4be:	4619      	mov	r1, r3
 800a4c0:	480b      	ldr	r0, [pc, #44]	; (800a4f0 <tcpip_thread+0x58>)
 800a4c2:	f7ff ffb3 	bl	800a42c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d106      	bne.n	800a4da <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a4cc:	4b09      	ldr	r3, [pc, #36]	; (800a4f4 <tcpip_thread+0x5c>)
 800a4ce:	2291      	movs	r2, #145	; 0x91
 800a4d0:	4909      	ldr	r1, [pc, #36]	; (800a4f8 <tcpip_thread+0x60>)
 800a4d2:	480a      	ldr	r0, [pc, #40]	; (800a4fc <tcpip_thread+0x64>)
 800a4d4:	f00c fe04 	bl	80170e0 <iprintf>
      continue;
 800a4d8:	e003      	b.n	800a4e2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f000 f80f 	bl	800a500 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a4e2:	e7ea      	b.n	800a4ba <tcpip_thread+0x22>
 800a4e4:	200098dc 	.word	0x200098dc
 800a4e8:	200098d0 	.word	0x200098d0
 800a4ec:	200098d4 	.word	0x200098d4
 800a4f0:	200098d8 	.word	0x200098d8
 800a4f4:	08017fe4 	.word	0x08017fe4
 800a4f8:	08018014 	.word	0x08018014
 800a4fc:	08018034 	.word	0x08018034

0800a500 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b082      	sub	sp, #8
 800a504:	af00      	add	r7, sp, #0
 800a506:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	2b02      	cmp	r3, #2
 800a50e:	d026      	beq.n	800a55e <tcpip_thread_handle_msg+0x5e>
 800a510:	2b02      	cmp	r3, #2
 800a512:	dc2b      	bgt.n	800a56c <tcpip_thread_handle_msg+0x6c>
 800a514:	2b00      	cmp	r3, #0
 800a516:	d002      	beq.n	800a51e <tcpip_thread_handle_msg+0x1e>
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d015      	beq.n	800a548 <tcpip_thread_handle_msg+0x48>
 800a51c:	e026      	b.n	800a56c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	68db      	ldr	r3, [r3, #12]
 800a522:	687a      	ldr	r2, [r7, #4]
 800a524:	6850      	ldr	r0, [r2, #4]
 800a526:	687a      	ldr	r2, [r7, #4]
 800a528:	6892      	ldr	r2, [r2, #8]
 800a52a:	4611      	mov	r1, r2
 800a52c:	4798      	blx	r3
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d004      	beq.n	800a53e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	685b      	ldr	r3, [r3, #4]
 800a538:	4618      	mov	r0, r3
 800a53a:	f001 ff41 	bl	800c3c0 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a53e:	6879      	ldr	r1, [r7, #4]
 800a540:	2009      	movs	r0, #9
 800a542:	f000 fe63 	bl	800b20c <memp_free>
      break;
 800a546:	e018      	b.n	800a57a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	685b      	ldr	r3, [r3, #4]
 800a54c:	687a      	ldr	r2, [r7, #4]
 800a54e:	6892      	ldr	r2, [r2, #8]
 800a550:	4610      	mov	r0, r2
 800a552:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a554:	6879      	ldr	r1, [r7, #4]
 800a556:	2008      	movs	r0, #8
 800a558:	f000 fe58 	bl	800b20c <memp_free>
      break;
 800a55c:	e00d      	b.n	800a57a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	687a      	ldr	r2, [r7, #4]
 800a564:	6892      	ldr	r2, [r2, #8]
 800a566:	4610      	mov	r0, r2
 800a568:	4798      	blx	r3
      break;
 800a56a:	e006      	b.n	800a57a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a56c:	4b05      	ldr	r3, [pc, #20]	; (800a584 <tcpip_thread_handle_msg+0x84>)
 800a56e:	22cf      	movs	r2, #207	; 0xcf
 800a570:	4905      	ldr	r1, [pc, #20]	; (800a588 <tcpip_thread_handle_msg+0x88>)
 800a572:	4806      	ldr	r0, [pc, #24]	; (800a58c <tcpip_thread_handle_msg+0x8c>)
 800a574:	f00c fdb4 	bl	80170e0 <iprintf>
      break;
 800a578:	bf00      	nop
  }
}
 800a57a:	bf00      	nop
 800a57c:	3708      	adds	r7, #8
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}
 800a582:	bf00      	nop
 800a584:	08017fe4 	.word	0x08017fe4
 800a588:	08018014 	.word	0x08018014
 800a58c:	08018034 	.word	0x08018034

0800a590 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a590:	b580      	push	{r7, lr}
 800a592:	b086      	sub	sp, #24
 800a594:	af00      	add	r7, sp, #0
 800a596:	60f8      	str	r0, [r7, #12]
 800a598:	60b9      	str	r1, [r7, #8]
 800a59a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a59c:	481a      	ldr	r0, [pc, #104]	; (800a608 <tcpip_inpkt+0x78>)
 800a59e:	f00c fb3a 	bl	8016c16 <sys_mbox_valid>
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d105      	bne.n	800a5b4 <tcpip_inpkt+0x24>
 800a5a8:	4b18      	ldr	r3, [pc, #96]	; (800a60c <tcpip_inpkt+0x7c>)
 800a5aa:	22fc      	movs	r2, #252	; 0xfc
 800a5ac:	4918      	ldr	r1, [pc, #96]	; (800a610 <tcpip_inpkt+0x80>)
 800a5ae:	4819      	ldr	r0, [pc, #100]	; (800a614 <tcpip_inpkt+0x84>)
 800a5b0:	f00c fd96 	bl	80170e0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a5b4:	2009      	movs	r0, #9
 800a5b6:	f000 fdb3 	bl	800b120 <memp_malloc>
 800a5ba:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a5bc:	697b      	ldr	r3, [r7, #20]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d102      	bne.n	800a5c8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a5c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a5c6:	e01a      	b.n	800a5fe <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a5ce:	697b      	ldr	r3, [r7, #20]
 800a5d0:	68fa      	ldr	r2, [r7, #12]
 800a5d2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a5e0:	6979      	ldr	r1, [r7, #20]
 800a5e2:	4809      	ldr	r0, [pc, #36]	; (800a608 <tcpip_inpkt+0x78>)
 800a5e4:	f00c facc 	bl	8016b80 <sys_mbox_trypost>
 800a5e8:	4603      	mov	r3, r0
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d006      	beq.n	800a5fc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a5ee:	6979      	ldr	r1, [r7, #20]
 800a5f0:	2009      	movs	r0, #9
 800a5f2:	f000 fe0b 	bl	800b20c <memp_free>
    return ERR_MEM;
 800a5f6:	f04f 33ff 	mov.w	r3, #4294967295
 800a5fa:	e000      	b.n	800a5fe <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a5fc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a5fe:	4618      	mov	r0, r3
 800a600:	3718      	adds	r7, #24
 800a602:	46bd      	mov	sp, r7
 800a604:	bd80      	pop	{r7, pc}
 800a606:	bf00      	nop
 800a608:	200098d8 	.word	0x200098d8
 800a60c:	08017fe4 	.word	0x08017fe4
 800a610:	0801805c 	.word	0x0801805c
 800a614:	08018034 	.word	0x08018034

0800a618 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a618:	b580      	push	{r7, lr}
 800a61a:	b082      	sub	sp, #8
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
 800a620:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800a628:	f003 0318 	and.w	r3, r3, #24
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d006      	beq.n	800a63e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a630:	4a08      	ldr	r2, [pc, #32]	; (800a654 <tcpip_input+0x3c>)
 800a632:	6839      	ldr	r1, [r7, #0]
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f7ff ffab 	bl	800a590 <tcpip_inpkt>
 800a63a:	4603      	mov	r3, r0
 800a63c:	e005      	b.n	800a64a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a63e:	4a06      	ldr	r2, [pc, #24]	; (800a658 <tcpip_input+0x40>)
 800a640:	6839      	ldr	r1, [r7, #0]
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f7ff ffa4 	bl	800a590 <tcpip_inpkt>
 800a648:	4603      	mov	r3, r0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3708      	adds	r7, #8
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	080169a1 	.word	0x080169a1
 800a658:	08015851 	.word	0x08015851

0800a65c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a65c:	b580      	push	{r7, lr}
 800a65e:	b084      	sub	sp, #16
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a666:	4819      	ldr	r0, [pc, #100]	; (800a6cc <tcpip_try_callback+0x70>)
 800a668:	f00c fad5 	bl	8016c16 <sys_mbox_valid>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d106      	bne.n	800a680 <tcpip_try_callback+0x24>
 800a672:	4b17      	ldr	r3, [pc, #92]	; (800a6d0 <tcpip_try_callback+0x74>)
 800a674:	f240 125d 	movw	r2, #349	; 0x15d
 800a678:	4916      	ldr	r1, [pc, #88]	; (800a6d4 <tcpip_try_callback+0x78>)
 800a67a:	4817      	ldr	r0, [pc, #92]	; (800a6d8 <tcpip_try_callback+0x7c>)
 800a67c:	f00c fd30 	bl	80170e0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a680:	2008      	movs	r0, #8
 800a682:	f000 fd4d 	bl	800b120 <memp_malloc>
 800a686:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d102      	bne.n	800a694 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a68e:	f04f 33ff 	mov.w	r3, #4294967295
 800a692:	e017      	b.n	800a6c4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2201      	movs	r2, #1
 800a698:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	683a      	ldr	r2, [r7, #0]
 800a6a4:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a6a6:	68f9      	ldr	r1, [r7, #12]
 800a6a8:	4808      	ldr	r0, [pc, #32]	; (800a6cc <tcpip_try_callback+0x70>)
 800a6aa:	f00c fa69 	bl	8016b80 <sys_mbox_trypost>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d006      	beq.n	800a6c2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a6b4:	68f9      	ldr	r1, [r7, #12]
 800a6b6:	2008      	movs	r0, #8
 800a6b8:	f000 fda8 	bl	800b20c <memp_free>
    return ERR_MEM;
 800a6bc:	f04f 33ff 	mov.w	r3, #4294967295
 800a6c0:	e000      	b.n	800a6c4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	3710      	adds	r7, #16
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	bd80      	pop	{r7, pc}
 800a6cc:	200098d8 	.word	0x200098d8
 800a6d0:	08017fe4 	.word	0x08017fe4
 800a6d4:	0801805c 	.word	0x0801805c
 800a6d8:	08018034 	.word	0x08018034

0800a6dc <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a6dc:	b580      	push	{r7, lr}
 800a6de:	b084      	sub	sp, #16
 800a6e0:	af02      	add	r7, sp, #8
 800a6e2:	6078      	str	r0, [r7, #4]
 800a6e4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a6e6:	f000 f871 	bl	800a7cc <lwip_init>

  tcpip_init_done = initfunc;
 800a6ea:	4a17      	ldr	r2, [pc, #92]	; (800a748 <tcpip_init+0x6c>)
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a6f0:	4a16      	ldr	r2, [pc, #88]	; (800a74c <tcpip_init+0x70>)
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a6f6:	2106      	movs	r1, #6
 800a6f8:	4815      	ldr	r0, [pc, #84]	; (800a750 <tcpip_init+0x74>)
 800a6fa:	f00c fa27 	bl	8016b4c <sys_mbox_new>
 800a6fe:	4603      	mov	r3, r0
 800a700:	2b00      	cmp	r3, #0
 800a702:	d006      	beq.n	800a712 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a704:	4b13      	ldr	r3, [pc, #76]	; (800a754 <tcpip_init+0x78>)
 800a706:	f240 2261 	movw	r2, #609	; 0x261
 800a70a:	4913      	ldr	r1, [pc, #76]	; (800a758 <tcpip_init+0x7c>)
 800a70c:	4813      	ldr	r0, [pc, #76]	; (800a75c <tcpip_init+0x80>)
 800a70e:	f00c fce7 	bl	80170e0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a712:	4813      	ldr	r0, [pc, #76]	; (800a760 <tcpip_init+0x84>)
 800a714:	f00c fa9c 	bl	8016c50 <sys_mutex_new>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d006      	beq.n	800a72c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a71e:	4b0d      	ldr	r3, [pc, #52]	; (800a754 <tcpip_init+0x78>)
 800a720:	f240 2265 	movw	r2, #613	; 0x265
 800a724:	490f      	ldr	r1, [pc, #60]	; (800a764 <tcpip_init+0x88>)
 800a726:	480d      	ldr	r0, [pc, #52]	; (800a75c <tcpip_init+0x80>)
 800a728:	f00c fcda 	bl	80170e0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a72c:	2318      	movs	r3, #24
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a734:	2200      	movs	r2, #0
 800a736:	490c      	ldr	r1, [pc, #48]	; (800a768 <tcpip_init+0x8c>)
 800a738:	480c      	ldr	r0, [pc, #48]	; (800a76c <tcpip_init+0x90>)
 800a73a:	f00c fabb 	bl	8016cb4 <sys_thread_new>
}
 800a73e:	bf00      	nop
 800a740:	3708      	adds	r7, #8
 800a742:	46bd      	mov	sp, r7
 800a744:	bd80      	pop	{r7, pc}
 800a746:	bf00      	nop
 800a748:	200098d0 	.word	0x200098d0
 800a74c:	200098d4 	.word	0x200098d4
 800a750:	200098d8 	.word	0x200098d8
 800a754:	08017fe4 	.word	0x08017fe4
 800a758:	0801806c 	.word	0x0801806c
 800a75c:	08018034 	.word	0x08018034
 800a760:	200098dc 	.word	0x200098dc
 800a764:	08018090 	.word	0x08018090
 800a768:	0800a499 	.word	0x0800a499
 800a76c:	080180b4 	.word	0x080180b4

0800a770 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a770:	b480      	push	{r7}
 800a772:	b083      	sub	sp, #12
 800a774:	af00      	add	r7, sp, #0
 800a776:	4603      	mov	r3, r0
 800a778:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a77a:	88fb      	ldrh	r3, [r7, #6]
 800a77c:	021b      	lsls	r3, r3, #8
 800a77e:	b21a      	sxth	r2, r3
 800a780:	88fb      	ldrh	r3, [r7, #6]
 800a782:	0a1b      	lsrs	r3, r3, #8
 800a784:	b29b      	uxth	r3, r3
 800a786:	b21b      	sxth	r3, r3
 800a788:	4313      	orrs	r3, r2
 800a78a:	b21b      	sxth	r3, r3
 800a78c:	b29b      	uxth	r3, r3
}
 800a78e:	4618      	mov	r0, r3
 800a790:	370c      	adds	r7, #12
 800a792:	46bd      	mov	sp, r7
 800a794:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a798:	4770      	bx	lr

0800a79a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a79a:	b480      	push	{r7}
 800a79c:	b083      	sub	sp, #12
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	061a      	lsls	r2, r3, #24
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	021b      	lsls	r3, r3, #8
 800a7aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a7ae:	431a      	orrs	r2, r3
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	0a1b      	lsrs	r3, r3, #8
 800a7b4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a7b8:	431a      	orrs	r2, r3
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	0e1b      	lsrs	r3, r3, #24
 800a7be:	4313      	orrs	r3, r2
}
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	370c      	adds	r7, #12
 800a7c4:	46bd      	mov	sp, r7
 800a7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ca:	4770      	bx	lr

0800a7cc <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a7cc:	b580      	push	{r7, lr}
 800a7ce:	b082      	sub	sp, #8
 800a7d0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a7d6:	f00c fa2f 	bl	8016c38 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a7da:	f000 f8d5 	bl	800a988 <mem_init>
  memp_init();
 800a7de:	f000 fc31 	bl	800b044 <memp_init>
  pbuf_init();
  netif_init();
 800a7e2:	f000 fd63 	bl	800b2ac <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a7e6:	f007 fb6b 	bl	8011ec0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a7ea:	f002 f893 	bl	800c914 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a7ee:	f007 faad 	bl	8011d4c <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a7f2:	bf00      	nop
 800a7f4:	3708      	adds	r7, #8
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	bd80      	pop	{r7, pc}
	...

0800a7fc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	4603      	mov	r3, r0
 800a804:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a806:	4b05      	ldr	r3, [pc, #20]	; (800a81c <ptr_to_mem+0x20>)
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	88fb      	ldrh	r3, [r7, #6]
 800a80c:	4413      	add	r3, r2
}
 800a80e:	4618      	mov	r0, r3
 800a810:	370c      	adds	r7, #12
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr
 800a81a:	bf00      	nop
 800a81c:	2000c10c 	.word	0x2000c10c

0800a820 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a820:	b480      	push	{r7}
 800a822:	b083      	sub	sp, #12
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a828:	4b05      	ldr	r3, [pc, #20]	; (800a840 <mem_to_ptr+0x20>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	687a      	ldr	r2, [r7, #4]
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	b29b      	uxth	r3, r3
}
 800a832:	4618      	mov	r0, r3
 800a834:	370c      	adds	r7, #12
 800a836:	46bd      	mov	sp, r7
 800a838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a83c:	4770      	bx	lr
 800a83e:	bf00      	nop
 800a840:	2000c10c 	.word	0x2000c10c

0800a844 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a844:	b590      	push	{r4, r7, lr}
 800a846:	b085      	sub	sp, #20
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a84c:	4b45      	ldr	r3, [pc, #276]	; (800a964 <plug_holes+0x120>)
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	687a      	ldr	r2, [r7, #4]
 800a852:	429a      	cmp	r2, r3
 800a854:	d206      	bcs.n	800a864 <plug_holes+0x20>
 800a856:	4b44      	ldr	r3, [pc, #272]	; (800a968 <plug_holes+0x124>)
 800a858:	f240 12df 	movw	r2, #479	; 0x1df
 800a85c:	4943      	ldr	r1, [pc, #268]	; (800a96c <plug_holes+0x128>)
 800a85e:	4844      	ldr	r0, [pc, #272]	; (800a970 <plug_holes+0x12c>)
 800a860:	f00c fc3e 	bl	80170e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a864:	4b43      	ldr	r3, [pc, #268]	; (800a974 <plug_holes+0x130>)
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	687a      	ldr	r2, [r7, #4]
 800a86a:	429a      	cmp	r2, r3
 800a86c:	d306      	bcc.n	800a87c <plug_holes+0x38>
 800a86e:	4b3e      	ldr	r3, [pc, #248]	; (800a968 <plug_holes+0x124>)
 800a870:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a874:	4940      	ldr	r1, [pc, #256]	; (800a978 <plug_holes+0x134>)
 800a876:	483e      	ldr	r0, [pc, #248]	; (800a970 <plug_holes+0x12c>)
 800a878:	f00c fc32 	bl	80170e0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	791b      	ldrb	r3, [r3, #4]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d006      	beq.n	800a892 <plug_holes+0x4e>
 800a884:	4b38      	ldr	r3, [pc, #224]	; (800a968 <plug_holes+0x124>)
 800a886:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a88a:	493c      	ldr	r1, [pc, #240]	; (800a97c <plug_holes+0x138>)
 800a88c:	4838      	ldr	r0, [pc, #224]	; (800a970 <plug_holes+0x12c>)
 800a88e:	f00c fc27 	bl	80170e0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	881b      	ldrh	r3, [r3, #0]
 800a896:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a89a:	d906      	bls.n	800a8aa <plug_holes+0x66>
 800a89c:	4b32      	ldr	r3, [pc, #200]	; (800a968 <plug_holes+0x124>)
 800a89e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a8a2:	4937      	ldr	r1, [pc, #220]	; (800a980 <plug_holes+0x13c>)
 800a8a4:	4832      	ldr	r0, [pc, #200]	; (800a970 <plug_holes+0x12c>)
 800a8a6:	f00c fc1b 	bl	80170e0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	881b      	ldrh	r3, [r3, #0]
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f7ff ffa4 	bl	800a7fc <ptr_to_mem>
 800a8b4:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	429a      	cmp	r2, r3
 800a8bc:	d024      	beq.n	800a908 <plug_holes+0xc4>
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	791b      	ldrb	r3, [r3, #4]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d120      	bne.n	800a908 <plug_holes+0xc4>
 800a8c6:	4b2b      	ldr	r3, [pc, #172]	; (800a974 <plug_holes+0x130>)
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	68fa      	ldr	r2, [r7, #12]
 800a8cc:	429a      	cmp	r2, r3
 800a8ce:	d01b      	beq.n	800a908 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a8d0:	4b2c      	ldr	r3, [pc, #176]	; (800a984 <plug_holes+0x140>)
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68fa      	ldr	r2, [r7, #12]
 800a8d6:	429a      	cmp	r2, r3
 800a8d8:	d102      	bne.n	800a8e0 <plug_holes+0x9c>
      lfree = mem;
 800a8da:	4a2a      	ldr	r2, [pc, #168]	; (800a984 <plug_holes+0x140>)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	881a      	ldrh	r2, [r3, #0]
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	881b      	ldrh	r3, [r3, #0]
 800a8ec:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a8f0:	d00a      	beq.n	800a908 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	881b      	ldrh	r3, [r3, #0]
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f7ff ff80 	bl	800a7fc <ptr_to_mem>
 800a8fc:	4604      	mov	r4, r0
 800a8fe:	6878      	ldr	r0, [r7, #4]
 800a900:	f7ff ff8e 	bl	800a820 <mem_to_ptr>
 800a904:	4603      	mov	r3, r0
 800a906:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	885b      	ldrh	r3, [r3, #2]
 800a90c:	4618      	mov	r0, r3
 800a90e:	f7ff ff75 	bl	800a7fc <ptr_to_mem>
 800a912:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a914:	68ba      	ldr	r2, [r7, #8]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	429a      	cmp	r2, r3
 800a91a:	d01f      	beq.n	800a95c <plug_holes+0x118>
 800a91c:	68bb      	ldr	r3, [r7, #8]
 800a91e:	791b      	ldrb	r3, [r3, #4]
 800a920:	2b00      	cmp	r3, #0
 800a922:	d11b      	bne.n	800a95c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a924:	4b17      	ldr	r3, [pc, #92]	; (800a984 <plug_holes+0x140>)
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d102      	bne.n	800a934 <plug_holes+0xf0>
      lfree = pmem;
 800a92e:	4a15      	ldr	r2, [pc, #84]	; (800a984 <plug_holes+0x140>)
 800a930:	68bb      	ldr	r3, [r7, #8]
 800a932:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	881a      	ldrh	r2, [r3, #0]
 800a938:	68bb      	ldr	r3, [r7, #8]
 800a93a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	881b      	ldrh	r3, [r3, #0]
 800a940:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a944:	d00a      	beq.n	800a95c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	881b      	ldrh	r3, [r3, #0]
 800a94a:	4618      	mov	r0, r3
 800a94c:	f7ff ff56 	bl	800a7fc <ptr_to_mem>
 800a950:	4604      	mov	r4, r0
 800a952:	68b8      	ldr	r0, [r7, #8]
 800a954:	f7ff ff64 	bl	800a820 <mem_to_ptr>
 800a958:	4603      	mov	r3, r0
 800a95a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a95c:	bf00      	nop
 800a95e:	3714      	adds	r7, #20
 800a960:	46bd      	mov	sp, r7
 800a962:	bd90      	pop	{r4, r7, pc}
 800a964:	2000c10c 	.word	0x2000c10c
 800a968:	080180c4 	.word	0x080180c4
 800a96c:	080180f4 	.word	0x080180f4
 800a970:	0801810c 	.word	0x0801810c
 800a974:	2000c110 	.word	0x2000c110
 800a978:	08018134 	.word	0x08018134
 800a97c:	08018150 	.word	0x08018150
 800a980:	0801816c 	.word	0x0801816c
 800a984:	2000c118 	.word	0x2000c118

0800a988 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a98e:	4b1f      	ldr	r3, [pc, #124]	; (800aa0c <mem_init+0x84>)
 800a990:	3303      	adds	r3, #3
 800a992:	f023 0303 	bic.w	r3, r3, #3
 800a996:	461a      	mov	r2, r3
 800a998:	4b1d      	ldr	r3, [pc, #116]	; (800aa10 <mem_init+0x88>)
 800a99a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a99c:	4b1c      	ldr	r3, [pc, #112]	; (800aa10 <mem_init+0x88>)
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a9a8:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a9b6:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800a9ba:	f7ff ff1f 	bl	800a7fc <ptr_to_mem>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	4a14      	ldr	r2, [pc, #80]	; (800aa14 <mem_init+0x8c>)
 800a9c2:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a9c4:	4b13      	ldr	r3, [pc, #76]	; (800aa14 <mem_init+0x8c>)
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2201      	movs	r2, #1
 800a9ca:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a9cc:	4b11      	ldr	r3, [pc, #68]	; (800aa14 <mem_init+0x8c>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a9d4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a9d6:	4b0f      	ldr	r3, [pc, #60]	; (800aa14 <mem_init+0x8c>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a9de:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a9e0:	4b0b      	ldr	r3, [pc, #44]	; (800aa10 <mem_init+0x88>)
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	4a0c      	ldr	r2, [pc, #48]	; (800aa18 <mem_init+0x90>)
 800a9e6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a9e8:	480c      	ldr	r0, [pc, #48]	; (800aa1c <mem_init+0x94>)
 800a9ea:	f00c f931 	bl	8016c50 <sys_mutex_new>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	2b00      	cmp	r3, #0
 800a9f2:	d006      	beq.n	800aa02 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a9f4:	4b0a      	ldr	r3, [pc, #40]	; (800aa20 <mem_init+0x98>)
 800a9f6:	f240 221f 	movw	r2, #543	; 0x21f
 800a9fa:	490a      	ldr	r1, [pc, #40]	; (800aa24 <mem_init+0x9c>)
 800a9fc:	480a      	ldr	r0, [pc, #40]	; (800aa28 <mem_init+0xa0>)
 800a9fe:	f00c fb6f 	bl	80170e0 <iprintf>
  }
}
 800aa02:	bf00      	nop
 800aa04:	3708      	adds	r7, #8
 800aa06:	46bd      	mov	sp, r7
 800aa08:	bd80      	pop	{r7, pc}
 800aa0a:	bf00      	nop
 800aa0c:	200098f8 	.word	0x200098f8
 800aa10:	2000c10c 	.word	0x2000c10c
 800aa14:	2000c110 	.word	0x2000c110
 800aa18:	2000c118 	.word	0x2000c118
 800aa1c:	2000c114 	.word	0x2000c114
 800aa20:	080180c4 	.word	0x080180c4
 800aa24:	08018198 	.word	0x08018198
 800aa28:	0801810c 	.word	0x0801810c

0800aa2c <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b086      	sub	sp, #24
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7ff fef3 	bl	800a820 <mem_to_ptr>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	881b      	ldrh	r3, [r3, #0]
 800aa42:	4618      	mov	r0, r3
 800aa44:	f7ff feda 	bl	800a7fc <ptr_to_mem>
 800aa48:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	885b      	ldrh	r3, [r3, #2]
 800aa4e:	4618      	mov	r0, r3
 800aa50:	f7ff fed4 	bl	800a7fc <ptr_to_mem>
 800aa54:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	881b      	ldrh	r3, [r3, #0]
 800aa5a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800aa5e:	d818      	bhi.n	800aa92 <mem_link_valid+0x66>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	885b      	ldrh	r3, [r3, #2]
 800aa64:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800aa68:	d813      	bhi.n	800aa92 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800aa6e:	8afa      	ldrh	r2, [r7, #22]
 800aa70:	429a      	cmp	r2, r3
 800aa72:	d004      	beq.n	800aa7e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	881b      	ldrh	r3, [r3, #0]
 800aa78:	8afa      	ldrh	r2, [r7, #22]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d109      	bne.n	800aa92 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800aa7e:	4b08      	ldr	r3, [pc, #32]	; (800aaa0 <mem_link_valid+0x74>)
 800aa80:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800aa82:	693a      	ldr	r2, [r7, #16]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d006      	beq.n	800aa96 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	885b      	ldrh	r3, [r3, #2]
 800aa8c:	8afa      	ldrh	r2, [r7, #22]
 800aa8e:	429a      	cmp	r2, r3
 800aa90:	d001      	beq.n	800aa96 <mem_link_valid+0x6a>
    return 0;
 800aa92:	2300      	movs	r3, #0
 800aa94:	e000      	b.n	800aa98 <mem_link_valid+0x6c>
  }
  return 1;
 800aa96:	2301      	movs	r3, #1
}
 800aa98:	4618      	mov	r0, r3
 800aa9a:	3718      	adds	r7, #24
 800aa9c:	46bd      	mov	sp, r7
 800aa9e:	bd80      	pop	{r7, pc}
 800aaa0:	2000c110 	.word	0x2000c110

0800aaa4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800aaa4:	b580      	push	{r7, lr}
 800aaa6:	b088      	sub	sp, #32
 800aaa8:	af00      	add	r7, sp, #0
 800aaaa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d070      	beq.n	800ab94 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	f003 0303 	and.w	r3, r3, #3
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d00d      	beq.n	800aad8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800aabc:	4b37      	ldr	r3, [pc, #220]	; (800ab9c <mem_free+0xf8>)
 800aabe:	f240 2273 	movw	r2, #627	; 0x273
 800aac2:	4937      	ldr	r1, [pc, #220]	; (800aba0 <mem_free+0xfc>)
 800aac4:	4837      	ldr	r0, [pc, #220]	; (800aba4 <mem_free+0x100>)
 800aac6:	f00c fb0b 	bl	80170e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aaca:	f00c f913 	bl	8016cf4 <sys_arch_protect>
 800aace:	60f8      	str	r0, [r7, #12]
 800aad0:	68f8      	ldr	r0, [r7, #12]
 800aad2:	f00c f91d 	bl	8016d10 <sys_arch_unprotect>
    return;
 800aad6:	e05e      	b.n	800ab96 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	3b08      	subs	r3, #8
 800aadc:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800aade:	4b32      	ldr	r3, [pc, #200]	; (800aba8 <mem_free+0x104>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	69fa      	ldr	r2, [r7, #28]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	d306      	bcc.n	800aaf6 <mem_free+0x52>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f103 020c 	add.w	r2, r3, #12
 800aaee:	4b2f      	ldr	r3, [pc, #188]	; (800abac <mem_free+0x108>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	d90d      	bls.n	800ab12 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800aaf6:	4b29      	ldr	r3, [pc, #164]	; (800ab9c <mem_free+0xf8>)
 800aaf8:	f240 227f 	movw	r2, #639	; 0x27f
 800aafc:	492c      	ldr	r1, [pc, #176]	; (800abb0 <mem_free+0x10c>)
 800aafe:	4829      	ldr	r0, [pc, #164]	; (800aba4 <mem_free+0x100>)
 800ab00:	f00c faee 	bl	80170e0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ab04:	f00c f8f6 	bl	8016cf4 <sys_arch_protect>
 800ab08:	6138      	str	r0, [r7, #16]
 800ab0a:	6938      	ldr	r0, [r7, #16]
 800ab0c:	f00c f900 	bl	8016d10 <sys_arch_unprotect>
    return;
 800ab10:	e041      	b.n	800ab96 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ab12:	4828      	ldr	r0, [pc, #160]	; (800abb4 <mem_free+0x110>)
 800ab14:	f00c f8b2 	bl	8016c7c <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	791b      	ldrb	r3, [r3, #4]
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d110      	bne.n	800ab42 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ab20:	4b1e      	ldr	r3, [pc, #120]	; (800ab9c <mem_free+0xf8>)
 800ab22:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ab26:	4924      	ldr	r1, [pc, #144]	; (800abb8 <mem_free+0x114>)
 800ab28:	481e      	ldr	r0, [pc, #120]	; (800aba4 <mem_free+0x100>)
 800ab2a:	f00c fad9 	bl	80170e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ab2e:	4821      	ldr	r0, [pc, #132]	; (800abb4 <mem_free+0x110>)
 800ab30:	f00c f8b3 	bl	8016c9a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ab34:	f00c f8de 	bl	8016cf4 <sys_arch_protect>
 800ab38:	6178      	str	r0, [r7, #20]
 800ab3a:	6978      	ldr	r0, [r7, #20]
 800ab3c:	f00c f8e8 	bl	8016d10 <sys_arch_unprotect>
    return;
 800ab40:	e029      	b.n	800ab96 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800ab42:	69f8      	ldr	r0, [r7, #28]
 800ab44:	f7ff ff72 	bl	800aa2c <mem_link_valid>
 800ab48:	4603      	mov	r3, r0
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d110      	bne.n	800ab70 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800ab4e:	4b13      	ldr	r3, [pc, #76]	; (800ab9c <mem_free+0xf8>)
 800ab50:	f240 2295 	movw	r2, #661	; 0x295
 800ab54:	4919      	ldr	r1, [pc, #100]	; (800abbc <mem_free+0x118>)
 800ab56:	4813      	ldr	r0, [pc, #76]	; (800aba4 <mem_free+0x100>)
 800ab58:	f00c fac2 	bl	80170e0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800ab5c:	4815      	ldr	r0, [pc, #84]	; (800abb4 <mem_free+0x110>)
 800ab5e:	f00c f89c 	bl	8016c9a <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ab62:	f00c f8c7 	bl	8016cf4 <sys_arch_protect>
 800ab66:	61b8      	str	r0, [r7, #24]
 800ab68:	69b8      	ldr	r0, [r7, #24]
 800ab6a:	f00c f8d1 	bl	8016d10 <sys_arch_unprotect>
    return;
 800ab6e:	e012      	b.n	800ab96 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800ab70:	69fb      	ldr	r3, [r7, #28]
 800ab72:	2200      	movs	r2, #0
 800ab74:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800ab76:	4b12      	ldr	r3, [pc, #72]	; (800abc0 <mem_free+0x11c>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	69fa      	ldr	r2, [r7, #28]
 800ab7c:	429a      	cmp	r2, r3
 800ab7e:	d202      	bcs.n	800ab86 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800ab80:	4a0f      	ldr	r2, [pc, #60]	; (800abc0 <mem_free+0x11c>)
 800ab82:	69fb      	ldr	r3, [r7, #28]
 800ab84:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ab86:	69f8      	ldr	r0, [r7, #28]
 800ab88:	f7ff fe5c 	bl	800a844 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ab8c:	4809      	ldr	r0, [pc, #36]	; (800abb4 <mem_free+0x110>)
 800ab8e:	f00c f884 	bl	8016c9a <sys_mutex_unlock>
 800ab92:	e000      	b.n	800ab96 <mem_free+0xf2>
    return;
 800ab94:	bf00      	nop
}
 800ab96:	3720      	adds	r7, #32
 800ab98:	46bd      	mov	sp, r7
 800ab9a:	bd80      	pop	{r7, pc}
 800ab9c:	080180c4 	.word	0x080180c4
 800aba0:	080181b4 	.word	0x080181b4
 800aba4:	0801810c 	.word	0x0801810c
 800aba8:	2000c10c 	.word	0x2000c10c
 800abac:	2000c110 	.word	0x2000c110
 800abb0:	080181d8 	.word	0x080181d8
 800abb4:	2000c114 	.word	0x2000c114
 800abb8:	080181f4 	.word	0x080181f4
 800abbc:	0801821c 	.word	0x0801821c
 800abc0:	2000c118 	.word	0x2000c118

0800abc4 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800abc4:	b580      	push	{r7, lr}
 800abc6:	b088      	sub	sp, #32
 800abc8:	af00      	add	r7, sp, #0
 800abca:	6078      	str	r0, [r7, #4]
 800abcc:	460b      	mov	r3, r1
 800abce:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800abd0:	887b      	ldrh	r3, [r7, #2]
 800abd2:	3303      	adds	r3, #3
 800abd4:	b29b      	uxth	r3, r3
 800abd6:	f023 0303 	bic.w	r3, r3, #3
 800abda:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800abdc:	8bfb      	ldrh	r3, [r7, #30]
 800abde:	2b0b      	cmp	r3, #11
 800abe0:	d801      	bhi.n	800abe6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800abe2:	230c      	movs	r3, #12
 800abe4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800abe6:	8bfb      	ldrh	r3, [r7, #30]
 800abe8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800abec:	d803      	bhi.n	800abf6 <mem_trim+0x32>
 800abee:	8bfa      	ldrh	r2, [r7, #30]
 800abf0:	887b      	ldrh	r3, [r7, #2]
 800abf2:	429a      	cmp	r2, r3
 800abf4:	d201      	bcs.n	800abfa <mem_trim+0x36>
    return NULL;
 800abf6:	2300      	movs	r3, #0
 800abf8:	e0d8      	b.n	800adac <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800abfa:	4b6e      	ldr	r3, [pc, #440]	; (800adb4 <mem_trim+0x1f0>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	687a      	ldr	r2, [r7, #4]
 800ac00:	429a      	cmp	r2, r3
 800ac02:	d304      	bcc.n	800ac0e <mem_trim+0x4a>
 800ac04:	4b6c      	ldr	r3, [pc, #432]	; (800adb8 <mem_trim+0x1f4>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	429a      	cmp	r2, r3
 800ac0c:	d306      	bcc.n	800ac1c <mem_trim+0x58>
 800ac0e:	4b6b      	ldr	r3, [pc, #428]	; (800adbc <mem_trim+0x1f8>)
 800ac10:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ac14:	496a      	ldr	r1, [pc, #424]	; (800adc0 <mem_trim+0x1fc>)
 800ac16:	486b      	ldr	r0, [pc, #428]	; (800adc4 <mem_trim+0x200>)
 800ac18:	f00c fa62 	bl	80170e0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ac1c:	4b65      	ldr	r3, [pc, #404]	; (800adb4 <mem_trim+0x1f0>)
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	687a      	ldr	r2, [r7, #4]
 800ac22:	429a      	cmp	r2, r3
 800ac24:	d304      	bcc.n	800ac30 <mem_trim+0x6c>
 800ac26:	4b64      	ldr	r3, [pc, #400]	; (800adb8 <mem_trim+0x1f4>)
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	687a      	ldr	r2, [r7, #4]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d307      	bcc.n	800ac40 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ac30:	f00c f860 	bl	8016cf4 <sys_arch_protect>
 800ac34:	60b8      	str	r0, [r7, #8]
 800ac36:	68b8      	ldr	r0, [r7, #8]
 800ac38:	f00c f86a 	bl	8016d10 <sys_arch_unprotect>
    return rmem;
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	e0b5      	b.n	800adac <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	3b08      	subs	r3, #8
 800ac44:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ac46:	69b8      	ldr	r0, [r7, #24]
 800ac48:	f7ff fdea 	bl	800a820 <mem_to_ptr>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ac50:	69bb      	ldr	r3, [r7, #24]
 800ac52:	881a      	ldrh	r2, [r3, #0]
 800ac54:	8afb      	ldrh	r3, [r7, #22]
 800ac56:	1ad3      	subs	r3, r2, r3
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	3b08      	subs	r3, #8
 800ac5c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ac5e:	8bfa      	ldrh	r2, [r7, #30]
 800ac60:	8abb      	ldrh	r3, [r7, #20]
 800ac62:	429a      	cmp	r2, r3
 800ac64:	d906      	bls.n	800ac74 <mem_trim+0xb0>
 800ac66:	4b55      	ldr	r3, [pc, #340]	; (800adbc <mem_trim+0x1f8>)
 800ac68:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ac6c:	4956      	ldr	r1, [pc, #344]	; (800adc8 <mem_trim+0x204>)
 800ac6e:	4855      	ldr	r0, [pc, #340]	; (800adc4 <mem_trim+0x200>)
 800ac70:	f00c fa36 	bl	80170e0 <iprintf>
  if (newsize > size) {
 800ac74:	8bfa      	ldrh	r2, [r7, #30]
 800ac76:	8abb      	ldrh	r3, [r7, #20]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d901      	bls.n	800ac80 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800ac7c:	2300      	movs	r3, #0
 800ac7e:	e095      	b.n	800adac <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800ac80:	8bfa      	ldrh	r2, [r7, #30]
 800ac82:	8abb      	ldrh	r3, [r7, #20]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d101      	bne.n	800ac8c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	e08f      	b.n	800adac <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ac8c:	484f      	ldr	r0, [pc, #316]	; (800adcc <mem_trim+0x208>)
 800ac8e:	f00b fff5 	bl	8016c7c <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	881b      	ldrh	r3, [r3, #0]
 800ac96:	4618      	mov	r0, r3
 800ac98:	f7ff fdb0 	bl	800a7fc <ptr_to_mem>
 800ac9c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	791b      	ldrb	r3, [r3, #4]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d13f      	bne.n	800ad26 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	881b      	ldrh	r3, [r3, #0]
 800acaa:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800acae:	d106      	bne.n	800acbe <mem_trim+0xfa>
 800acb0:	4b42      	ldr	r3, [pc, #264]	; (800adbc <mem_trim+0x1f8>)
 800acb2:	f240 22f5 	movw	r2, #757	; 0x2f5
 800acb6:	4946      	ldr	r1, [pc, #280]	; (800add0 <mem_trim+0x20c>)
 800acb8:	4842      	ldr	r0, [pc, #264]	; (800adc4 <mem_trim+0x200>)
 800acba:	f00c fa11 	bl	80170e0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	881b      	ldrh	r3, [r3, #0]
 800acc2:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800acc4:	8afa      	ldrh	r2, [r7, #22]
 800acc6:	8bfb      	ldrh	r3, [r7, #30]
 800acc8:	4413      	add	r3, r2
 800acca:	b29b      	uxth	r3, r3
 800accc:	3308      	adds	r3, #8
 800acce:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800acd0:	4b40      	ldr	r3, [pc, #256]	; (800add4 <mem_trim+0x210>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	693a      	ldr	r2, [r7, #16]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d106      	bne.n	800ace8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800acda:	89fb      	ldrh	r3, [r7, #14]
 800acdc:	4618      	mov	r0, r3
 800acde:	f7ff fd8d 	bl	800a7fc <ptr_to_mem>
 800ace2:	4603      	mov	r3, r0
 800ace4:	4a3b      	ldr	r2, [pc, #236]	; (800add4 <mem_trim+0x210>)
 800ace6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ace8:	89fb      	ldrh	r3, [r7, #14]
 800acea:	4618      	mov	r0, r3
 800acec:	f7ff fd86 	bl	800a7fc <ptr_to_mem>
 800acf0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	2200      	movs	r2, #0
 800acf6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	89ba      	ldrh	r2, [r7, #12]
 800acfc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800acfe:	693b      	ldr	r3, [r7, #16]
 800ad00:	8afa      	ldrh	r2, [r7, #22]
 800ad02:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800ad04:	69bb      	ldr	r3, [r7, #24]
 800ad06:	89fa      	ldrh	r2, [r7, #14]
 800ad08:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ad0a:	693b      	ldr	r3, [r7, #16]
 800ad0c:	881b      	ldrh	r3, [r3, #0]
 800ad0e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ad12:	d047      	beq.n	800ada4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ad14:	693b      	ldr	r3, [r7, #16]
 800ad16:	881b      	ldrh	r3, [r3, #0]
 800ad18:	4618      	mov	r0, r3
 800ad1a:	f7ff fd6f 	bl	800a7fc <ptr_to_mem>
 800ad1e:	4602      	mov	r2, r0
 800ad20:	89fb      	ldrh	r3, [r7, #14]
 800ad22:	8053      	strh	r3, [r2, #2]
 800ad24:	e03e      	b.n	800ada4 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800ad26:	8bfb      	ldrh	r3, [r7, #30]
 800ad28:	f103 0214 	add.w	r2, r3, #20
 800ad2c:	8abb      	ldrh	r3, [r7, #20]
 800ad2e:	429a      	cmp	r2, r3
 800ad30:	d838      	bhi.n	800ada4 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ad32:	8afa      	ldrh	r2, [r7, #22]
 800ad34:	8bfb      	ldrh	r3, [r7, #30]
 800ad36:	4413      	add	r3, r2
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	3308      	adds	r3, #8
 800ad3c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ad3e:	69bb      	ldr	r3, [r7, #24]
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ad46:	d106      	bne.n	800ad56 <mem_trim+0x192>
 800ad48:	4b1c      	ldr	r3, [pc, #112]	; (800adbc <mem_trim+0x1f8>)
 800ad4a:	f240 3216 	movw	r2, #790	; 0x316
 800ad4e:	4920      	ldr	r1, [pc, #128]	; (800add0 <mem_trim+0x20c>)
 800ad50:	481c      	ldr	r0, [pc, #112]	; (800adc4 <mem_trim+0x200>)
 800ad52:	f00c f9c5 	bl	80170e0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ad56:	89fb      	ldrh	r3, [r7, #14]
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7ff fd4f 	bl	800a7fc <ptr_to_mem>
 800ad5e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ad60:	4b1c      	ldr	r3, [pc, #112]	; (800add4 <mem_trim+0x210>)
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	693a      	ldr	r2, [r7, #16]
 800ad66:	429a      	cmp	r2, r3
 800ad68:	d202      	bcs.n	800ad70 <mem_trim+0x1ac>
      lfree = mem2;
 800ad6a:	4a1a      	ldr	r2, [pc, #104]	; (800add4 <mem_trim+0x210>)
 800ad6c:	693b      	ldr	r3, [r7, #16]
 800ad6e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	2200      	movs	r2, #0
 800ad74:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ad76:	69bb      	ldr	r3, [r7, #24]
 800ad78:	881a      	ldrh	r2, [r3, #0]
 800ad7a:	693b      	ldr	r3, [r7, #16]
 800ad7c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	8afa      	ldrh	r2, [r7, #22]
 800ad82:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	89fa      	ldrh	r2, [r7, #14]
 800ad88:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ad8a:	693b      	ldr	r3, [r7, #16]
 800ad8c:	881b      	ldrh	r3, [r3, #0]
 800ad8e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ad92:	d007      	beq.n	800ada4 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ad94:	693b      	ldr	r3, [r7, #16]
 800ad96:	881b      	ldrh	r3, [r3, #0]
 800ad98:	4618      	mov	r0, r3
 800ad9a:	f7ff fd2f 	bl	800a7fc <ptr_to_mem>
 800ad9e:	4602      	mov	r2, r0
 800ada0:	89fb      	ldrh	r3, [r7, #14]
 800ada2:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ada4:	4809      	ldr	r0, [pc, #36]	; (800adcc <mem_trim+0x208>)
 800ada6:	f00b ff78 	bl	8016c9a <sys_mutex_unlock>
  return rmem;
 800adaa:	687b      	ldr	r3, [r7, #4]
}
 800adac:	4618      	mov	r0, r3
 800adae:	3720      	adds	r7, #32
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	2000c10c 	.word	0x2000c10c
 800adb8:	2000c110 	.word	0x2000c110
 800adbc:	080180c4 	.word	0x080180c4
 800adc0:	08018250 	.word	0x08018250
 800adc4:	0801810c 	.word	0x0801810c
 800adc8:	08018268 	.word	0x08018268
 800adcc:	2000c114 	.word	0x2000c114
 800add0:	08018288 	.word	0x08018288
 800add4:	2000c118 	.word	0x2000c118

0800add8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b088      	sub	sp, #32
 800addc:	af00      	add	r7, sp, #0
 800adde:	4603      	mov	r3, r0
 800ade0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ade2:	88fb      	ldrh	r3, [r7, #6]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d101      	bne.n	800adec <mem_malloc+0x14>
    return NULL;
 800ade8:	2300      	movs	r3, #0
 800adea:	e0e2      	b.n	800afb2 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800adec:	88fb      	ldrh	r3, [r7, #6]
 800adee:	3303      	adds	r3, #3
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	f023 0303 	bic.w	r3, r3, #3
 800adf6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800adf8:	8bbb      	ldrh	r3, [r7, #28]
 800adfa:	2b0b      	cmp	r3, #11
 800adfc:	d801      	bhi.n	800ae02 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800adfe:	230c      	movs	r3, #12
 800ae00:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ae02:	8bbb      	ldrh	r3, [r7, #28]
 800ae04:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ae08:	d803      	bhi.n	800ae12 <mem_malloc+0x3a>
 800ae0a:	8bba      	ldrh	r2, [r7, #28]
 800ae0c:	88fb      	ldrh	r3, [r7, #6]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d201      	bcs.n	800ae16 <mem_malloc+0x3e>
    return NULL;
 800ae12:	2300      	movs	r3, #0
 800ae14:	e0cd      	b.n	800afb2 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800ae16:	4869      	ldr	r0, [pc, #420]	; (800afbc <mem_malloc+0x1e4>)
 800ae18:	f00b ff30 	bl	8016c7c <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ae1c:	4b68      	ldr	r3, [pc, #416]	; (800afc0 <mem_malloc+0x1e8>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	4618      	mov	r0, r3
 800ae22:	f7ff fcfd 	bl	800a820 <mem_to_ptr>
 800ae26:	4603      	mov	r3, r0
 800ae28:	83fb      	strh	r3, [r7, #30]
 800ae2a:	e0b7      	b.n	800af9c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ae2c:	8bfb      	ldrh	r3, [r7, #30]
 800ae2e:	4618      	mov	r0, r3
 800ae30:	f7ff fce4 	bl	800a7fc <ptr_to_mem>
 800ae34:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	791b      	ldrb	r3, [r3, #4]
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	f040 80a7 	bne.w	800af8e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	881b      	ldrh	r3, [r3, #0]
 800ae44:	461a      	mov	r2, r3
 800ae46:	8bfb      	ldrh	r3, [r7, #30]
 800ae48:	1ad3      	subs	r3, r2, r3
 800ae4a:	f1a3 0208 	sub.w	r2, r3, #8
 800ae4e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ae50:	429a      	cmp	r2, r3
 800ae52:	f0c0 809c 	bcc.w	800af8e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	881b      	ldrh	r3, [r3, #0]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	8bfb      	ldrh	r3, [r7, #30]
 800ae5e:	1ad3      	subs	r3, r2, r3
 800ae60:	f1a3 0208 	sub.w	r2, r3, #8
 800ae64:	8bbb      	ldrh	r3, [r7, #28]
 800ae66:	3314      	adds	r3, #20
 800ae68:	429a      	cmp	r2, r3
 800ae6a:	d333      	bcc.n	800aed4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ae6c:	8bfa      	ldrh	r2, [r7, #30]
 800ae6e:	8bbb      	ldrh	r3, [r7, #28]
 800ae70:	4413      	add	r3, r2
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	3308      	adds	r3, #8
 800ae76:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ae78:	8a7b      	ldrh	r3, [r7, #18]
 800ae7a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ae7e:	d106      	bne.n	800ae8e <mem_malloc+0xb6>
 800ae80:	4b50      	ldr	r3, [pc, #320]	; (800afc4 <mem_malloc+0x1ec>)
 800ae82:	f240 3287 	movw	r2, #903	; 0x387
 800ae86:	4950      	ldr	r1, [pc, #320]	; (800afc8 <mem_malloc+0x1f0>)
 800ae88:	4850      	ldr	r0, [pc, #320]	; (800afcc <mem_malloc+0x1f4>)
 800ae8a:	f00c f929 	bl	80170e0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ae8e:	8a7b      	ldrh	r3, [r7, #18]
 800ae90:	4618      	mov	r0, r3
 800ae92:	f7ff fcb3 	bl	800a7fc <ptr_to_mem>
 800ae96:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	881a      	ldrh	r2, [r3, #0]
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	8bfa      	ldrh	r2, [r7, #30]
 800aeaa:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800aeac:	697b      	ldr	r3, [r7, #20]
 800aeae:	8a7a      	ldrh	r2, [r7, #18]
 800aeb0:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	2201      	movs	r2, #1
 800aeb6:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	881b      	ldrh	r3, [r3, #0]
 800aebc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800aec0:	d00b      	beq.n	800aeda <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	881b      	ldrh	r3, [r3, #0]
 800aec6:	4618      	mov	r0, r3
 800aec8:	f7ff fc98 	bl	800a7fc <ptr_to_mem>
 800aecc:	4602      	mov	r2, r0
 800aece:	8a7b      	ldrh	r3, [r7, #18]
 800aed0:	8053      	strh	r3, [r2, #2]
 800aed2:	e002      	b.n	800aeda <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800aed4:	697b      	ldr	r3, [r7, #20]
 800aed6:	2201      	movs	r2, #1
 800aed8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800aeda:	4b39      	ldr	r3, [pc, #228]	; (800afc0 <mem_malloc+0x1e8>)
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	697a      	ldr	r2, [r7, #20]
 800aee0:	429a      	cmp	r2, r3
 800aee2:	d127      	bne.n	800af34 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800aee4:	4b36      	ldr	r3, [pc, #216]	; (800afc0 <mem_malloc+0x1e8>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800aeea:	e005      	b.n	800aef8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800aeec:	69bb      	ldr	r3, [r7, #24]
 800aeee:	881b      	ldrh	r3, [r3, #0]
 800aef0:	4618      	mov	r0, r3
 800aef2:	f7ff fc83 	bl	800a7fc <ptr_to_mem>
 800aef6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800aef8:	69bb      	ldr	r3, [r7, #24]
 800aefa:	791b      	ldrb	r3, [r3, #4]
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d004      	beq.n	800af0a <mem_malloc+0x132>
 800af00:	4b33      	ldr	r3, [pc, #204]	; (800afd0 <mem_malloc+0x1f8>)
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	69ba      	ldr	r2, [r7, #24]
 800af06:	429a      	cmp	r2, r3
 800af08:	d1f0      	bne.n	800aeec <mem_malloc+0x114>
          }
          lfree = cur;
 800af0a:	4a2d      	ldr	r2, [pc, #180]	; (800afc0 <mem_malloc+0x1e8>)
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800af10:	4b2b      	ldr	r3, [pc, #172]	; (800afc0 <mem_malloc+0x1e8>)
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	4b2e      	ldr	r3, [pc, #184]	; (800afd0 <mem_malloc+0x1f8>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	429a      	cmp	r2, r3
 800af1a:	d00b      	beq.n	800af34 <mem_malloc+0x15c>
 800af1c:	4b28      	ldr	r3, [pc, #160]	; (800afc0 <mem_malloc+0x1e8>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	791b      	ldrb	r3, [r3, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d006      	beq.n	800af34 <mem_malloc+0x15c>
 800af26:	4b27      	ldr	r3, [pc, #156]	; (800afc4 <mem_malloc+0x1ec>)
 800af28:	f240 32b5 	movw	r2, #949	; 0x3b5
 800af2c:	4929      	ldr	r1, [pc, #164]	; (800afd4 <mem_malloc+0x1fc>)
 800af2e:	4827      	ldr	r0, [pc, #156]	; (800afcc <mem_malloc+0x1f4>)
 800af30:	f00c f8d6 	bl	80170e0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800af34:	4821      	ldr	r0, [pc, #132]	; (800afbc <mem_malloc+0x1e4>)
 800af36:	f00b feb0 	bl	8016c9a <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800af3a:	8bba      	ldrh	r2, [r7, #28]
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	4413      	add	r3, r2
 800af40:	3308      	adds	r3, #8
 800af42:	4a23      	ldr	r2, [pc, #140]	; (800afd0 <mem_malloc+0x1f8>)
 800af44:	6812      	ldr	r2, [r2, #0]
 800af46:	4293      	cmp	r3, r2
 800af48:	d906      	bls.n	800af58 <mem_malloc+0x180>
 800af4a:	4b1e      	ldr	r3, [pc, #120]	; (800afc4 <mem_malloc+0x1ec>)
 800af4c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800af50:	4921      	ldr	r1, [pc, #132]	; (800afd8 <mem_malloc+0x200>)
 800af52:	481e      	ldr	r0, [pc, #120]	; (800afcc <mem_malloc+0x1f4>)
 800af54:	f00c f8c4 	bl	80170e0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800af58:	697b      	ldr	r3, [r7, #20]
 800af5a:	f003 0303 	and.w	r3, r3, #3
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d006      	beq.n	800af70 <mem_malloc+0x198>
 800af62:	4b18      	ldr	r3, [pc, #96]	; (800afc4 <mem_malloc+0x1ec>)
 800af64:	f240 32bb 	movw	r2, #955	; 0x3bb
 800af68:	491c      	ldr	r1, [pc, #112]	; (800afdc <mem_malloc+0x204>)
 800af6a:	4818      	ldr	r0, [pc, #96]	; (800afcc <mem_malloc+0x1f4>)
 800af6c:	f00c f8b8 	bl	80170e0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800af70:	697b      	ldr	r3, [r7, #20]
 800af72:	f003 0303 	and.w	r3, r3, #3
 800af76:	2b00      	cmp	r3, #0
 800af78:	d006      	beq.n	800af88 <mem_malloc+0x1b0>
 800af7a:	4b12      	ldr	r3, [pc, #72]	; (800afc4 <mem_malloc+0x1ec>)
 800af7c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800af80:	4917      	ldr	r1, [pc, #92]	; (800afe0 <mem_malloc+0x208>)
 800af82:	4812      	ldr	r0, [pc, #72]	; (800afcc <mem_malloc+0x1f4>)
 800af84:	f00c f8ac 	bl	80170e0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800af88:	697b      	ldr	r3, [r7, #20]
 800af8a:	3308      	adds	r3, #8
 800af8c:	e011      	b.n	800afb2 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800af8e:	8bfb      	ldrh	r3, [r7, #30]
 800af90:	4618      	mov	r0, r3
 800af92:	f7ff fc33 	bl	800a7fc <ptr_to_mem>
 800af96:	4603      	mov	r3, r0
 800af98:	881b      	ldrh	r3, [r3, #0]
 800af9a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800af9c:	8bfa      	ldrh	r2, [r7, #30]
 800af9e:	8bbb      	ldrh	r3, [r7, #28]
 800afa0:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800afa4:	429a      	cmp	r2, r3
 800afa6:	f4ff af41 	bcc.w	800ae2c <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800afaa:	4804      	ldr	r0, [pc, #16]	; (800afbc <mem_malloc+0x1e4>)
 800afac:	f00b fe75 	bl	8016c9a <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800afb0:	2300      	movs	r3, #0
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	3720      	adds	r7, #32
 800afb6:	46bd      	mov	sp, r7
 800afb8:	bd80      	pop	{r7, pc}
 800afba:	bf00      	nop
 800afbc:	2000c114 	.word	0x2000c114
 800afc0:	2000c118 	.word	0x2000c118
 800afc4:	080180c4 	.word	0x080180c4
 800afc8:	08018288 	.word	0x08018288
 800afcc:	0801810c 	.word	0x0801810c
 800afd0:	2000c110 	.word	0x2000c110
 800afd4:	0801829c 	.word	0x0801829c
 800afd8:	080182b8 	.word	0x080182b8
 800afdc:	080182e8 	.word	0x080182e8
 800afe0:	08018318 	.word	0x08018318

0800afe4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800afe4:	b480      	push	{r7}
 800afe6:	b085      	sub	sp, #20
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	689b      	ldr	r3, [r3, #8]
 800aff0:	2200      	movs	r2, #0
 800aff2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	3303      	adds	r3, #3
 800affa:	f023 0303 	bic.w	r3, r3, #3
 800affe:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b000:	2300      	movs	r3, #0
 800b002:	60fb      	str	r3, [r7, #12]
 800b004:	e011      	b.n	800b02a <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	689b      	ldr	r3, [r3, #8]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	68bb      	ldr	r3, [r7, #8]
 800b00e:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	689b      	ldr	r3, [r3, #8]
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	881b      	ldrh	r3, [r3, #0]
 800b01c:	461a      	mov	r2, r3
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	4413      	add	r3, r2
 800b022:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	3301      	adds	r3, #1
 800b028:	60fb      	str	r3, [r7, #12]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	885b      	ldrh	r3, [r3, #2]
 800b02e:	461a      	mov	r2, r3
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	4293      	cmp	r3, r2
 800b034:	dbe7      	blt.n	800b006 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b036:	bf00      	nop
 800b038:	bf00      	nop
 800b03a:	3714      	adds	r7, #20
 800b03c:	46bd      	mov	sp, r7
 800b03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b042:	4770      	bx	lr

0800b044 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b04a:	2300      	movs	r3, #0
 800b04c:	80fb      	strh	r3, [r7, #6]
 800b04e:	e009      	b.n	800b064 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b050:	88fb      	ldrh	r3, [r7, #6]
 800b052:	4a08      	ldr	r2, [pc, #32]	; (800b074 <memp_init+0x30>)
 800b054:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b058:	4618      	mov	r0, r3
 800b05a:	f7ff ffc3 	bl	800afe4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b05e:	88fb      	ldrh	r3, [r7, #6]
 800b060:	3301      	adds	r3, #1
 800b062:	80fb      	strh	r3, [r7, #6]
 800b064:	88fb      	ldrh	r3, [r7, #6]
 800b066:	2b0c      	cmp	r3, #12
 800b068:	d9f2      	bls.n	800b050 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b06a:	bf00      	nop
 800b06c:	bf00      	nop
 800b06e:	3708      	adds	r7, #8
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}
 800b074:	0801b074 	.word	0x0801b074

0800b078 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b084      	sub	sp, #16
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b080:	f00b fe38 	bl	8016cf4 <sys_arch_protect>
 800b084:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d015      	beq.n	800b0c0 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	689b      	ldr	r3, [r3, #8]
 800b098:	68ba      	ldr	r2, [r7, #8]
 800b09a:	6812      	ldr	r2, [r2, #0]
 800b09c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b09e:	68bb      	ldr	r3, [r7, #8]
 800b0a0:	f003 0303 	and.w	r3, r3, #3
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d006      	beq.n	800b0b6 <do_memp_malloc_pool+0x3e>
 800b0a8:	4b09      	ldr	r3, [pc, #36]	; (800b0d0 <do_memp_malloc_pool+0x58>)
 800b0aa:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b0ae:	4909      	ldr	r1, [pc, #36]	; (800b0d4 <do_memp_malloc_pool+0x5c>)
 800b0b0:	4809      	ldr	r0, [pc, #36]	; (800b0d8 <do_memp_malloc_pool+0x60>)
 800b0b2:	f00c f815 	bl	80170e0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	f00b fe2a 	bl	8016d10 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	e003      	b.n	800b0c8 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b0c0:	68f8      	ldr	r0, [r7, #12]
 800b0c2:	f00b fe25 	bl	8016d10 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b0c6:	2300      	movs	r3, #0
}
 800b0c8:	4618      	mov	r0, r3
 800b0ca:	3710      	adds	r7, #16
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}
 800b0d0:	0801833c 	.word	0x0801833c
 800b0d4:	0801836c 	.word	0x0801836c
 800b0d8:	08018390 	.word	0x08018390

0800b0dc <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b082      	sub	sp, #8
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d106      	bne.n	800b0f8 <memp_malloc_pool+0x1c>
 800b0ea:	4b0a      	ldr	r3, [pc, #40]	; (800b114 <memp_malloc_pool+0x38>)
 800b0ec:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b0f0:	4909      	ldr	r1, [pc, #36]	; (800b118 <memp_malloc_pool+0x3c>)
 800b0f2:	480a      	ldr	r0, [pc, #40]	; (800b11c <memp_malloc_pool+0x40>)
 800b0f4:	f00b fff4 	bl	80170e0 <iprintf>
  if (desc == NULL) {
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d101      	bne.n	800b102 <memp_malloc_pool+0x26>
    return NULL;
 800b0fe:	2300      	movs	r3, #0
 800b100:	e003      	b.n	800b10a <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f7ff ffb8 	bl	800b078 <do_memp_malloc_pool>
 800b108:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3708      	adds	r7, #8
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	0801833c 	.word	0x0801833c
 800b118:	080183b8 	.word	0x080183b8
 800b11c:	08018390 	.word	0x08018390

0800b120 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	4603      	mov	r3, r0
 800b128:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b12a:	79fb      	ldrb	r3, [r7, #7]
 800b12c:	2b0c      	cmp	r3, #12
 800b12e:	d908      	bls.n	800b142 <memp_malloc+0x22>
 800b130:	4b0a      	ldr	r3, [pc, #40]	; (800b15c <memp_malloc+0x3c>)
 800b132:	f240 1257 	movw	r2, #343	; 0x157
 800b136:	490a      	ldr	r1, [pc, #40]	; (800b160 <memp_malloc+0x40>)
 800b138:	480a      	ldr	r0, [pc, #40]	; (800b164 <memp_malloc+0x44>)
 800b13a:	f00b ffd1 	bl	80170e0 <iprintf>
 800b13e:	2300      	movs	r3, #0
 800b140:	e008      	b.n	800b154 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b142:	79fb      	ldrb	r3, [r7, #7]
 800b144:	4a08      	ldr	r2, [pc, #32]	; (800b168 <memp_malloc+0x48>)
 800b146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7ff ff94 	bl	800b078 <do_memp_malloc_pool>
 800b150:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b152:	68fb      	ldr	r3, [r7, #12]
}
 800b154:	4618      	mov	r0, r3
 800b156:	3710      	adds	r7, #16
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}
 800b15c:	0801833c 	.word	0x0801833c
 800b160:	080183cc 	.word	0x080183cc
 800b164:	08018390 	.word	0x08018390
 800b168:	0801b074 	.word	0x0801b074

0800b16c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b16c:	b580      	push	{r7, lr}
 800b16e:	b084      	sub	sp, #16
 800b170:	af00      	add	r7, sp, #0
 800b172:	6078      	str	r0, [r7, #4]
 800b174:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	f003 0303 	and.w	r3, r3, #3
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d006      	beq.n	800b18e <do_memp_free_pool+0x22>
 800b180:	4b0d      	ldr	r3, [pc, #52]	; (800b1b8 <do_memp_free_pool+0x4c>)
 800b182:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b186:	490d      	ldr	r1, [pc, #52]	; (800b1bc <do_memp_free_pool+0x50>)
 800b188:	480d      	ldr	r0, [pc, #52]	; (800b1c0 <do_memp_free_pool+0x54>)
 800b18a:	f00b ffa9 	bl	80170e0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b192:	f00b fdaf 	bl	8016cf4 <sys_arch_protect>
 800b196:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	681a      	ldr	r2, [r3, #0]
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	689b      	ldr	r3, [r3, #8]
 800b1a6:	68fa      	ldr	r2, [r7, #12]
 800b1a8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b1aa:	68b8      	ldr	r0, [r7, #8]
 800b1ac:	f00b fdb0 	bl	8016d10 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b1b0:	bf00      	nop
 800b1b2:	3710      	adds	r7, #16
 800b1b4:	46bd      	mov	sp, r7
 800b1b6:	bd80      	pop	{r7, pc}
 800b1b8:	0801833c 	.word	0x0801833c
 800b1bc:	080183ec 	.word	0x080183ec
 800b1c0:	08018390 	.word	0x08018390

0800b1c4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b082      	sub	sp, #8
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	6078      	str	r0, [r7, #4]
 800b1cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d106      	bne.n	800b1e2 <memp_free_pool+0x1e>
 800b1d4:	4b0a      	ldr	r3, [pc, #40]	; (800b200 <memp_free_pool+0x3c>)
 800b1d6:	f240 1295 	movw	r2, #405	; 0x195
 800b1da:	490a      	ldr	r1, [pc, #40]	; (800b204 <memp_free_pool+0x40>)
 800b1dc:	480a      	ldr	r0, [pc, #40]	; (800b208 <memp_free_pool+0x44>)
 800b1de:	f00b ff7f 	bl	80170e0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d007      	beq.n	800b1f8 <memp_free_pool+0x34>
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d004      	beq.n	800b1f8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b1ee:	6839      	ldr	r1, [r7, #0]
 800b1f0:	6878      	ldr	r0, [r7, #4]
 800b1f2:	f7ff ffbb 	bl	800b16c <do_memp_free_pool>
 800b1f6:	e000      	b.n	800b1fa <memp_free_pool+0x36>
    return;
 800b1f8:	bf00      	nop
}
 800b1fa:	3708      	adds	r7, #8
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	bd80      	pop	{r7, pc}
 800b200:	0801833c 	.word	0x0801833c
 800b204:	080183b8 	.word	0x080183b8
 800b208:	08018390 	.word	0x08018390

0800b20c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b082      	sub	sp, #8
 800b210:	af00      	add	r7, sp, #0
 800b212:	4603      	mov	r3, r0
 800b214:	6039      	str	r1, [r7, #0]
 800b216:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b218:	79fb      	ldrb	r3, [r7, #7]
 800b21a:	2b0c      	cmp	r3, #12
 800b21c:	d907      	bls.n	800b22e <memp_free+0x22>
 800b21e:	4b0c      	ldr	r3, [pc, #48]	; (800b250 <memp_free+0x44>)
 800b220:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b224:	490b      	ldr	r1, [pc, #44]	; (800b254 <memp_free+0x48>)
 800b226:	480c      	ldr	r0, [pc, #48]	; (800b258 <memp_free+0x4c>)
 800b228:	f00b ff5a 	bl	80170e0 <iprintf>
 800b22c:	e00c      	b.n	800b248 <memp_free+0x3c>

  if (mem == NULL) {
 800b22e:	683b      	ldr	r3, [r7, #0]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d008      	beq.n	800b246 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b234:	79fb      	ldrb	r3, [r7, #7]
 800b236:	4a09      	ldr	r2, [pc, #36]	; (800b25c <memp_free+0x50>)
 800b238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b23c:	6839      	ldr	r1, [r7, #0]
 800b23e:	4618      	mov	r0, r3
 800b240:	f7ff ff94 	bl	800b16c <do_memp_free_pool>
 800b244:	e000      	b.n	800b248 <memp_free+0x3c>
    return;
 800b246:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b248:	3708      	adds	r7, #8
 800b24a:	46bd      	mov	sp, r7
 800b24c:	bd80      	pop	{r7, pc}
 800b24e:	bf00      	nop
 800b250:	0801833c 	.word	0x0801833c
 800b254:	0801840c 	.word	0x0801840c
 800b258:	08018390 	.word	0x08018390
 800b25c:	0801b074 	.word	0x0801b074

0800b260 <netif_loopif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 */
static err_t
netif_loopif_init(struct netif *netif)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b082      	sub	sp, #8
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d105      	bne.n	800b27a <netif_loopif_init+0x1a>
 800b26e:	4b0b      	ldr	r3, [pc, #44]	; (800b29c <netif_loopif_init+0x3c>)
 800b270:	2299      	movs	r2, #153	; 0x99
 800b272:	490b      	ldr	r1, [pc, #44]	; (800b2a0 <netif_loopif_init+0x40>)
 800b274:	480b      	ldr	r0, [pc, #44]	; (800b2a4 <netif_loopif_init+0x44>)
 800b276:	f00b ff33 	bl	80170e0 <iprintf>
  /* initialize the snmp variables and counters inside the struct netif
   * ifSpeed: no assumption can be made!
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);

  netif->name[0] = 'l';
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	226c      	movs	r2, #108	; 0x6c
 800b27e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  netif->name[1] = 'o';
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	226f      	movs	r2, #111	; 0x6f
 800b286:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
#if LWIP_IPV4
  netif->output = netif_loop_output_ipv4;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	4a06      	ldr	r2, [pc, #24]	; (800b2a8 <netif_loopif_init+0x48>)
 800b28e:	615a      	str	r2, [r3, #20]
#endif
#if LWIP_LOOPIF_MULTICAST
  netif_set_flags(netif, NETIF_FLAG_IGMP);
#endif
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
  return ERR_OK;
 800b290:	2300      	movs	r3, #0
}
 800b292:	4618      	mov	r0, r3
 800b294:	3708      	adds	r7, #8
 800b296:	46bd      	mov	sp, r7
 800b298:	bd80      	pop	{r7, pc}
 800b29a:	bf00      	nop
 800b29c:	08018428 	.word	0x08018428
 800b2a0:	0801845c 	.word	0x0801845c
 800b2a4:	08018480 	.word	0x08018480
 800b2a8:	0800bb1d 	.word	0x0800bb1d

0800b2ac <netif_init>:
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b088      	sub	sp, #32
 800b2b0:	af04      	add	r7, sp, #16
#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
#define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
  ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
 800b2b2:	4b0f      	ldr	r3, [pc, #60]	; (800b2f0 <netif_init+0x44>)
 800b2b4:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
 800b2b6:	4b0e      	ldr	r3, [pc, #56]	; (800b2f0 <netif_init+0x44>)
 800b2b8:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
 800b2ba:	23ff      	movs	r3, #255	; 0xff
 800b2bc:	60bb      	str	r3, [r7, #8]
#endif /* LWIP_IPV4 */

#if NO_SYS
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
#else  /* NO_SYS */
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, tcpip_input);
 800b2be:	1d3b      	adds	r3, r7, #4
 800b2c0:	f107 0208 	add.w	r2, r7, #8
 800b2c4:	f107 010c 	add.w	r1, r7, #12
 800b2c8:	480a      	ldr	r0, [pc, #40]	; (800b2f4 <netif_init+0x48>)
 800b2ca:	9002      	str	r0, [sp, #8]
 800b2cc:	480a      	ldr	r0, [pc, #40]	; (800b2f8 <netif_init+0x4c>)
 800b2ce:	9001      	str	r0, [sp, #4]
 800b2d0:	2000      	movs	r0, #0
 800b2d2:	9000      	str	r0, [sp, #0]
 800b2d4:	4809      	ldr	r0, [pc, #36]	; (800b2fc <netif_init+0x50>)
 800b2d6:	f000 f813 	bl	800b300 <netif_add>
#if LWIP_IPV6
  IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
  loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
#endif /* LWIP_IPV6 */

  netif_set_link_up(&loop_netif);
 800b2da:	4808      	ldr	r0, [pc, #32]	; (800b2fc <netif_init+0x50>)
 800b2dc:	f000 fb10 	bl	800b900 <netif_set_link_up>
  netif_set_up(&loop_netif);
 800b2e0:	4806      	ldr	r0, [pc, #24]	; (800b2fc <netif_init+0x50>)
 800b2e2:	f000 fa4b 	bl	800b77c <netif_set_up>

#endif /* LWIP_HAVE_LOOPIF */
}
 800b2e6:	bf00      	nop
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	0100007f 	.word	0x0100007f
 800b2f4:	0800a619 	.word	0x0800a619
 800b2f8:	0800b261 	.word	0x0800b261
 800b2fc:	2000f218 	.word	0x2000f218

0800b300 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
 800b30c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2b00      	cmp	r3, #0
 800b312:	d108      	bne.n	800b326 <netif_add+0x26>
 800b314:	4b62      	ldr	r3, [pc, #392]	; (800b4a0 <netif_add+0x1a0>)
 800b316:	f240 1227 	movw	r2, #295	; 0x127
 800b31a:	4962      	ldr	r1, [pc, #392]	; (800b4a4 <netif_add+0x1a4>)
 800b31c:	4862      	ldr	r0, [pc, #392]	; (800b4a8 <netif_add+0x1a8>)
 800b31e:	f00b fedf 	bl	80170e0 <iprintf>
 800b322:	2300      	movs	r3, #0
 800b324:	e0b7      	b.n	800b496 <netif_add+0x196>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d108      	bne.n	800b33e <netif_add+0x3e>
 800b32c:	4b5c      	ldr	r3, [pc, #368]	; (800b4a0 <netif_add+0x1a0>)
 800b32e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b332:	495e      	ldr	r1, [pc, #376]	; (800b4ac <netif_add+0x1ac>)
 800b334:	485c      	ldr	r0, [pc, #368]	; (800b4a8 <netif_add+0x1a8>)
 800b336:	f00b fed3 	bl	80170e0 <iprintf>
 800b33a:	2300      	movs	r3, #0
 800b33c:	e0ab      	b.n	800b496 <netif_add+0x196>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b33e:	68bb      	ldr	r3, [r7, #8]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d101      	bne.n	800b348 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b344:	4b5a      	ldr	r3, [pc, #360]	; (800b4b0 <netif_add+0x1b0>)
 800b346:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d101      	bne.n	800b352 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b34e:	4b58      	ldr	r3, [pc, #352]	; (800b4b0 <netif_add+0x1b0>)
 800b350:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b358:	4b55      	ldr	r3, [pc, #340]	; (800b4b0 <netif_add+0x1b0>)
 800b35a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	2200      	movs	r2, #0
 800b360:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	2200      	movs	r2, #0
 800b366:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2200      	movs	r2, #0
 800b36c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	4a50      	ldr	r2, [pc, #320]	; (800b4b4 <netif_add+0x1b4>)
 800b372:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	2200      	movs	r2, #0
 800b378:	859a      	strh	r2, [r3, #44]	; 0x2c
  netif->flags = 0;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	2200      	movs	r2, #0
 800b37e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	3328      	adds	r3, #40	; 0x28
 800b386:	2204      	movs	r2, #4
 800b388:	2100      	movs	r1, #0
 800b38a:	4618      	mov	r0, r3
 800b38c:	f00b fe0b 	bl	8016fa6 <memset>
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	2200      	movs	r2, #0
 800b394:	61da      	str	r2, [r3, #28]
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	621a      	str	r2, [r3, #32]
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	63da      	str	r2, [r3, #60]	; 0x3c
  netif->loop_last = NULL;
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	6a3a      	ldr	r2, [r7, #32]
 800b3ac:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 800b3ae:	4b42      	ldr	r3, [pc, #264]	; (800b4b8 <netif_add+0x1b8>)
 800b3b0:	781a      	ldrb	r2, [r3, #0]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  netif->input = input;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3bc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	687a      	ldr	r2, [r7, #4]
 800b3c2:	68b9      	ldr	r1, [r7, #8]
 800b3c4:	68f8      	ldr	r0, [r7, #12]
 800b3c6:	f000 f947 	bl	800b658 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b3ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	4798      	blx	r3
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d001      	beq.n	800b3da <netif_add+0xda>
    return NULL;
 800b3d6:	2300      	movs	r3, #0
 800b3d8:	e05d      	b.n	800b496 <netif_add+0x196>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b3e0:	2bff      	cmp	r3, #255	; 0xff
 800b3e2:	d103      	bne.n	800b3ec <netif_add+0xec>
        netif->num = 0;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
      }
      num_netifs = 0;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b3f0:	4b32      	ldr	r3, [pc, #200]	; (800b4bc <netif_add+0x1bc>)
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	617b      	str	r3, [r7, #20]
 800b3f6:	e02b      	b.n	800b450 <netif_add+0x150>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b3f8:	697a      	ldr	r2, [r7, #20]
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	429a      	cmp	r2, r3
 800b3fe:	d106      	bne.n	800b40e <netif_add+0x10e>
 800b400:	4b27      	ldr	r3, [pc, #156]	; (800b4a0 <netif_add+0x1a0>)
 800b402:	f240 128b 	movw	r2, #395	; 0x18b
 800b406:	492e      	ldr	r1, [pc, #184]	; (800b4c0 <netif_add+0x1c0>)
 800b408:	4827      	ldr	r0, [pc, #156]	; (800b4a8 <netif_add+0x1a8>)
 800b40a:	f00b fe69 	bl	80170e0 <iprintf>
        num_netifs++;
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	3301      	adds	r3, #1
 800b412:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	2bff      	cmp	r3, #255	; 0xff
 800b418:	dd06      	ble.n	800b428 <netif_add+0x128>
 800b41a:	4b21      	ldr	r3, [pc, #132]	; (800b4a0 <netif_add+0x1a0>)
 800b41c:	f240 128d 	movw	r2, #397	; 0x18d
 800b420:	4928      	ldr	r1, [pc, #160]	; (800b4c4 <netif_add+0x1c4>)
 800b422:	4821      	ldr	r0, [pc, #132]	; (800b4a8 <netif_add+0x1a8>)
 800b424:	f00b fe5c 	bl	80170e0 <iprintf>
        if (netif2->num == netif->num) {
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b434:	429a      	cmp	r2, r3
 800b436:	d108      	bne.n	800b44a <netif_add+0x14a>
          netif->num++;
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b43e:	3301      	adds	r3, #1
 800b440:	b2da      	uxtb	r2, r3
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
          break;
 800b448:	e005      	b.n	800b456 <netif_add+0x156>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b44a:	697b      	ldr	r3, [r7, #20]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	617b      	str	r3, [r7, #20]
 800b450:	697b      	ldr	r3, [r7, #20]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d1d0      	bne.n	800b3f8 <netif_add+0xf8>
        }
      }
    } while (netif2 != NULL);
 800b456:	697b      	ldr	r3, [r7, #20]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d1be      	bne.n	800b3da <netif_add+0xda>
  }
  if (netif->num == 254) {
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b462:	2bfe      	cmp	r3, #254	; 0xfe
 800b464:	d103      	bne.n	800b46e <netif_add+0x16e>
    netif_num = 0;
 800b466:	4b14      	ldr	r3, [pc, #80]	; (800b4b8 <netif_add+0x1b8>)
 800b468:	2200      	movs	r2, #0
 800b46a:	701a      	strb	r2, [r3, #0]
 800b46c:	e006      	b.n	800b47c <netif_add+0x17c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800b474:	3301      	adds	r3, #1
 800b476:	b2da      	uxtb	r2, r3
 800b478:	4b0f      	ldr	r3, [pc, #60]	; (800b4b8 <netif_add+0x1b8>)
 800b47a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b47c:	4b0f      	ldr	r3, [pc, #60]	; (800b4bc <netif_add+0x1bc>)
 800b47e:	681a      	ldr	r2, [r3, #0]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b484:	4a0d      	ldr	r2, [pc, #52]	; (800b4bc <netif_add+0x1bc>)
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);
 800b48a:	2200      	movs	r2, #0
 800b48c:	2101      	movs	r1, #1
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f000 fc00 	bl	800bc94 <netif_invoke_ext_callback>

  return netif;
 800b494:	68fb      	ldr	r3, [r7, #12]
}
 800b496:	4618      	mov	r0, r3
 800b498:	3718      	adds	r7, #24
 800b49a:	46bd      	mov	sp, r7
 800b49c:	bd80      	pop	{r7, pc}
 800b49e:	bf00      	nop
 800b4a0:	08018428 	.word	0x08018428
 800b4a4:	080184e0 	.word	0x080184e0
 800b4a8:	08018480 	.word	0x08018480
 800b4ac:	080184fc 	.word	0x080184fc
 800b4b0:	0801b0f8 	.word	0x0801b0f8
 800b4b4:	0800bc2d 	.word	0x0800bc2d
 800b4b8:	2000f214 	.word	0x2000f214
 800b4bc:	2000f20c 	.word	0x2000f20c
 800b4c0:	08018520 	.word	0x08018520
 800b4c4:	08018534 	.word	0x08018534

0800b4c8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b082      	sub	sp, #8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b4d2:	6839      	ldr	r1, [r7, #0]
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f002 fd65 	bl	800dfa4 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b4da:	6839      	ldr	r1, [r7, #0]
 800b4dc:	6878      	ldr	r0, [r7, #4]
 800b4de:	f007 f97b 	bl	80127d8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b4e2:	bf00      	nop
 800b4e4:	3708      	adds	r7, #8
 800b4e6:	46bd      	mov	sp, r7
 800b4e8:	bd80      	pop	{r7, pc}
	...

0800b4ec <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b4ec:	b580      	push	{r7, lr}
 800b4ee:	b086      	sub	sp, #24
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	60f8      	str	r0, [r7, #12]
 800b4f4:	60b9      	str	r1, [r7, #8]
 800b4f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d106      	bne.n	800b50c <netif_do_set_ipaddr+0x20>
 800b4fe:	4b21      	ldr	r3, [pc, #132]	; (800b584 <netif_do_set_ipaddr+0x98>)
 800b500:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b504:	4920      	ldr	r1, [pc, #128]	; (800b588 <netif_do_set_ipaddr+0x9c>)
 800b506:	4821      	ldr	r0, [pc, #132]	; (800b58c <netif_do_set_ipaddr+0xa0>)
 800b508:	f00b fdea 	bl	80170e0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d106      	bne.n	800b520 <netif_do_set_ipaddr+0x34>
 800b512:	4b1c      	ldr	r3, [pc, #112]	; (800b584 <netif_do_set_ipaddr+0x98>)
 800b514:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b518:	491b      	ldr	r1, [pc, #108]	; (800b588 <netif_do_set_ipaddr+0x9c>)
 800b51a:	481c      	ldr	r0, [pc, #112]	; (800b58c <netif_do_set_ipaddr+0xa0>)
 800b51c:	f00b fde0 	bl	80170e0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b520:	68bb      	ldr	r3, [r7, #8]
 800b522:	681a      	ldr	r2, [r3, #0]
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	3304      	adds	r3, #4
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	429a      	cmp	r2, r3
 800b52c:	d024      	beq.n	800b578 <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b52e:	68bb      	ldr	r3, [r7, #8]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	3304      	adds	r3, #4
 800b538:	681a      	ldr	r2, [r3, #0]
 800b53a:	687b      	ldr	r3, [r7, #4]
 800b53c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b53e:	f107 0314 	add.w	r3, r7, #20
 800b542:	4619      	mov	r1, r3
 800b544:	6878      	ldr	r0, [r7, #4]
 800b546:	f7ff ffbf 	bl	800b4c8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d002      	beq.n	800b556 <netif_do_set_ipaddr+0x6a>
 800b550:	68bb      	ldr	r3, [r7, #8]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	e000      	b.n	800b558 <netif_do_set_ipaddr+0x6c>
 800b556:	2300      	movs	r3, #0
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b55c:	2101      	movs	r1, #1
 800b55e:	68f8      	ldr	r0, [r7, #12]
 800b560:	f000 f94a 	bl	800b7f8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	69db      	ldr	r3, [r3, #28]
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d003      	beq.n	800b574 <netif_do_set_ipaddr+0x88>
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	69db      	ldr	r3, [r3, #28]
 800b570:	68f8      	ldr	r0, [r7, #12]
 800b572:	4798      	blx	r3
    return 1; /* address changed */
 800b574:	2301      	movs	r3, #1
 800b576:	e000      	b.n	800b57a <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 800b578:	2300      	movs	r3, #0
}
 800b57a:	4618      	mov	r0, r3
 800b57c:	3718      	adds	r7, #24
 800b57e:	46bd      	mov	sp, r7
 800b580:	bd80      	pop	{r7, pc}
 800b582:	bf00      	nop
 800b584:	08018428 	.word	0x08018428
 800b588:	08018564 	.word	0x08018564
 800b58c:	08018480 	.word	0x08018480

0800b590 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b590:	b580      	push	{r7, lr}
 800b592:	b084      	sub	sp, #16
 800b594:	af00      	add	r7, sp, #0
 800b596:	60f8      	str	r0, [r7, #12]
 800b598:	60b9      	str	r1, [r7, #8]
 800b59a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	681a      	ldr	r2, [r3, #0]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	3308      	adds	r3, #8
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	429a      	cmp	r2, r3
 800b5a8:	d019      	beq.n	800b5de <netif_do_set_netmask+0x4e>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    LWIP_ASSERT("invalid pointer", old_nm != NULL);
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d106      	bne.n	800b5be <netif_do_set_netmask+0x2e>
 800b5b0:	4b0d      	ldr	r3, [pc, #52]	; (800b5e8 <netif_do_set_netmask+0x58>)
 800b5b2:	f44f 7204 	mov.w	r2, #528	; 0x210
 800b5b6:	490d      	ldr	r1, [pc, #52]	; (800b5ec <netif_do_set_netmask+0x5c>)
 800b5b8:	480d      	ldr	r0, [pc, #52]	; (800b5f0 <netif_do_set_netmask+0x60>)
 800b5ba:	f00b fd91 	bl	80170e0 <iprintf>
    ip_addr_copy(*old_nm, *netif_ip_netmask4(netif));
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	3308      	adds	r3, #8
 800b5c2:	681a      	ldr	r2, [r3, #0]
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	601a      	str	r2, [r3, #0]
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b5c8:	68bb      	ldr	r3, [r7, #8]
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d002      	beq.n	800b5d4 <netif_do_set_netmask+0x44>
 800b5ce:	68bb      	ldr	r3, [r7, #8]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	e000      	b.n	800b5d6 <netif_do_set_netmask+0x46>
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	68fa      	ldr	r2, [r7, #12]
 800b5d8:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e000      	b.n	800b5e0 <netif_do_set_netmask+0x50>
  }
  return 0; /* netmask unchanged */
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	3710      	adds	r7, #16
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	bd80      	pop	{r7, pc}
 800b5e8:	08018428 	.word	0x08018428
 800b5ec:	08018564 	.word	0x08018564
 800b5f0:	08018480 	.word	0x08018480

0800b5f4 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b084      	sub	sp, #16
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	60f8      	str	r0, [r7, #12]
 800b5fc:	60b9      	str	r1, [r7, #8]
 800b5fe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	681a      	ldr	r2, [r3, #0]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	330c      	adds	r3, #12
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d019      	beq.n	800b642 <netif_do_set_gw+0x4e>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    LWIP_ASSERT("invalid pointer", old_gw != NULL);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2b00      	cmp	r3, #0
 800b612:	d106      	bne.n	800b622 <netif_do_set_gw+0x2e>
 800b614:	4b0d      	ldr	r3, [pc, #52]	; (800b64c <netif_do_set_gw+0x58>)
 800b616:	f44f 7214 	mov.w	r2, #592	; 0x250
 800b61a:	490d      	ldr	r1, [pc, #52]	; (800b650 <netif_do_set_gw+0x5c>)
 800b61c:	480d      	ldr	r0, [pc, #52]	; (800b654 <netif_do_set_gw+0x60>)
 800b61e:	f00b fd5f 	bl	80170e0 <iprintf>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	330c      	adds	r3, #12
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	601a      	str	r2, [r3, #0]
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b62c:	68bb      	ldr	r3, [r7, #8]
 800b62e:	2b00      	cmp	r3, #0
 800b630:	d002      	beq.n	800b638 <netif_do_set_gw+0x44>
 800b632:	68bb      	ldr	r3, [r7, #8]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	e000      	b.n	800b63a <netif_do_set_gw+0x46>
 800b638:	2300      	movs	r3, #0
 800b63a:	68fa      	ldr	r2, [r7, #12]
 800b63c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b63e:	2301      	movs	r3, #1
 800b640:	e000      	b.n	800b644 <netif_do_set_gw+0x50>
  }
  return 0; /* gateway unchanged */
 800b642:	2300      	movs	r3, #0
}
 800b644:	4618      	mov	r0, r3
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}
 800b64c:	08018428 	.word	0x08018428
 800b650:	08018564 	.word	0x08018564
 800b654:	08018480 	.word	0x08018480

0800b658 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b08e      	sub	sp, #56	; 0x38
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	60f8      	str	r0, [r7, #12]
 800b660:	60b9      	str	r1, [r7, #8]
 800b662:	607a      	str	r2, [r7, #4]
 800b664:	603b      	str	r3, [r7, #0]
#if LWIP_NETIF_EXT_STATUS_CALLBACK
  netif_nsc_reason_t change_reason = LWIP_NSC_NONE;
 800b666:	2300      	movs	r3, #0
 800b668:	86fb      	strh	r3, [r7, #54]	; 0x36
  netif_ext_callback_args_t cb_args;
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
 800b66a:	f107 0318 	add.w	r3, r7, #24
 800b66e:	633b      	str	r3, [r7, #48]	; 0x30
  ip_addr_t *old_gw = &old_gw_val;
 800b670:	f107 0314 	add.w	r3, r7, #20
 800b674:	62fb      	str	r3, [r7, #44]	; 0x2c
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d101      	bne.n	800b680 <netif_set_addr+0x28>
    ipaddr = IP4_ADDR_ANY4;
 800b67c:	4b36      	ldr	r3, [pc, #216]	; (800b758 <netif_set_addr+0x100>)
 800b67e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	2b00      	cmp	r3, #0
 800b684:	d101      	bne.n	800b68a <netif_set_addr+0x32>
    netmask = IP4_ADDR_ANY4;
 800b686:	4b34      	ldr	r3, [pc, #208]	; (800b758 <netif_set_addr+0x100>)
 800b688:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d101      	bne.n	800b694 <netif_set_addr+0x3c>
    gw = IP4_ADDR_ANY4;
 800b690:	4b31      	ldr	r3, [pc, #196]	; (800b758 <netif_set_addr+0x100>)
 800b692:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b694:	68bb      	ldr	r3, [r7, #8]
 800b696:	2b00      	cmp	r3, #0
 800b698:	d003      	beq.n	800b6a2 <netif_set_addr+0x4a>
 800b69a:	68bb      	ldr	r3, [r7, #8]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d101      	bne.n	800b6a6 <netif_set_addr+0x4e>
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	e000      	b.n	800b6a8 <netif_set_addr+0x50>
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (remove) {
 800b6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d010      	beq.n	800b6d2 <netif_set_addr+0x7a>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b6b0:	f107 0310 	add.w	r3, r7, #16
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	68b9      	ldr	r1, [r7, #8]
 800b6b8:	68f8      	ldr	r0, [r7, #12]
 800b6ba:	f7ff ff17 	bl	800b4ec <netif_do_set_ipaddr>
 800b6be:	4603      	mov	r3, r0
 800b6c0:	2b00      	cmp	r3, #0
 800b6c2:	d006      	beq.n	800b6d2 <netif_set_addr+0x7a>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
 800b6c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b6c6:	f043 0310 	orr.w	r3, r3, #16
 800b6ca:	86fb      	strh	r3, [r7, #54]	; 0x36
      cb_args.ipv4_changed.old_address = &old_addr;
 800b6cc:	f107 0310 	add.w	r3, r7, #16
 800b6d0:	61fb      	str	r3, [r7, #28]
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b6d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b6d4:	6879      	ldr	r1, [r7, #4]
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f7ff ff5a 	bl	800b590 <netif_do_set_netmask>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d005      	beq.n	800b6ee <netif_set_addr+0x96>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
 800b6e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b6e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b6e8:	86fb      	strh	r3, [r7, #54]	; 0x36
    cb_args.ipv4_changed.old_netmask = old_nm;
 800b6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6ec:	623b      	str	r3, [r7, #32]
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b6ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b6f0:	6839      	ldr	r1, [r7, #0]
 800b6f2:	68f8      	ldr	r0, [r7, #12]
 800b6f4:	f7ff ff7e 	bl	800b5f4 <netif_do_set_gw>
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d005      	beq.n	800b70a <netif_set_addr+0xb2>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
 800b6fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b700:	f043 0320 	orr.w	r3, r3, #32
 800b704:	86fb      	strh	r3, [r7, #54]	; 0x36
    cb_args.ipv4_changed.old_gw = old_gw;
 800b706:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b708:	627b      	str	r3, [r7, #36]	; 0x24
#endif
  }
  if (!remove) {
 800b70a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d110      	bne.n	800b732 <netif_set_addr+0xda>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b710:	f107 0310 	add.w	r3, r7, #16
 800b714:	461a      	mov	r2, r3
 800b716:	68b9      	ldr	r1, [r7, #8]
 800b718:	68f8      	ldr	r0, [r7, #12]
 800b71a:	f7ff fee7 	bl	800b4ec <netif_do_set_ipaddr>
 800b71e:	4603      	mov	r3, r0
 800b720:	2b00      	cmp	r3, #0
 800b722:	d006      	beq.n	800b732 <netif_set_addr+0xda>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
 800b724:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b726:	f043 0310 	orr.w	r3, r3, #16
 800b72a:	86fb      	strh	r3, [r7, #54]	; 0x36
      cb_args.ipv4_changed.old_address = &old_addr;
 800b72c:	f107 0310 	add.w	r3, r7, #16
 800b730:	61fb      	str	r3, [r7, #28]
#endif
    }
  }

#if LWIP_NETIF_EXT_STATUS_CALLBACK
  if (change_reason != LWIP_NSC_NONE) {
 800b732:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b734:	2b00      	cmp	r3, #0
 800b736:	d00a      	beq.n	800b74e <netif_set_addr+0xf6>
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
 800b738:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b73a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b73e:	86fb      	strh	r3, [r7, #54]	; 0x36
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
 800b740:	f107 021c 	add.w	r2, r7, #28
 800b744:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b746:	4619      	mov	r1, r3
 800b748:	68f8      	ldr	r0, [r7, #12]
 800b74a:	f000 faa3 	bl	800bc94 <netif_invoke_ext_callback>
  }
#endif
}
 800b74e:	bf00      	nop
 800b750:	3738      	adds	r7, #56	; 0x38
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	0801b0f8 	.word	0x0801b0f8

0800b75c <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b75c:	b480      	push	{r7}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b764:	4a04      	ldr	r2, [pc, #16]	; (800b778 <netif_set_default+0x1c>)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b76a:	bf00      	nop
 800b76c:	370c      	adds	r7, #12
 800b76e:	46bd      	mov	sp, r7
 800b770:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b774:	4770      	bx	lr
 800b776:	bf00      	nop
 800b778:	2000f210 	.word	0x2000f210

0800b77c <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b086      	sub	sp, #24
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d107      	bne.n	800b79a <netif_set_up+0x1e>
 800b78a:	4b18      	ldr	r3, [pc, #96]	; (800b7ec <netif_set_up+0x70>)
 800b78c:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b790:	4917      	ldr	r1, [pc, #92]	; (800b7f0 <netif_set_up+0x74>)
 800b792:	4818      	ldr	r0, [pc, #96]	; (800b7f4 <netif_set_up+0x78>)
 800b794:	f00b fca4 	bl	80170e0 <iprintf>
 800b798:	e024      	b.n	800b7e4 <netif_set_up+0x68>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b7a0:	f003 0301 	and.w	r3, r3, #1
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d11d      	bne.n	800b7e4 <netif_set_up+0x68>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b7ae:	f043 0301 	orr.w	r3, r3, #1
 800b7b2:	b2da      	uxtb	r2, r3
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	69db      	ldr	r3, [r3, #28]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d003      	beq.n	800b7ca <netif_set_up+0x4e>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	69db      	ldr	r3, [r3, #28]
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	4798      	blx	r3

#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.status_changed.state = 1;
 800b7ca:	2301      	movs	r3, #1
 800b7cc:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
 800b7ce:	f107 030c 	add.w	r3, r7, #12
 800b7d2:	461a      	mov	r2, r3
 800b7d4:	2108      	movs	r1, #8
 800b7d6:	6878      	ldr	r0, [r7, #4]
 800b7d8:	f000 fa5c 	bl	800bc94 <netif_invoke_ext_callback>
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b7dc:	2103      	movs	r1, #3
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 f80a 	bl	800b7f8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b7e4:	3718      	adds	r7, #24
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}
 800b7ea:	bf00      	nop
 800b7ec:	08018428 	.word	0x08018428
 800b7f0:	080185d4 	.word	0x080185d4
 800b7f4:	08018480 	.word	0x08018480

0800b7f8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b082      	sub	sp, #8
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	460b      	mov	r3, r1
 800b802:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	2b00      	cmp	r3, #0
 800b808:	d106      	bne.n	800b818 <netif_issue_reports+0x20>
 800b80a:	4b18      	ldr	r3, [pc, #96]	; (800b86c <netif_issue_reports+0x74>)
 800b80c:	f240 326d 	movw	r2, #877	; 0x36d
 800b810:	4917      	ldr	r1, [pc, #92]	; (800b870 <netif_issue_reports+0x78>)
 800b812:	4818      	ldr	r0, [pc, #96]	; (800b874 <netif_issue_reports+0x7c>)
 800b814:	f00b fc64 	bl	80170e0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b81e:	f003 0304 	and.w	r3, r3, #4
 800b822:	2b00      	cmp	r3, #0
 800b824:	d01e      	beq.n	800b864 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b82c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b830:	2b00      	cmp	r3, #0
 800b832:	d017      	beq.n	800b864 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b834:	78fb      	ldrb	r3, [r7, #3]
 800b836:	f003 0301 	and.w	r3, r3, #1
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d013      	beq.n	800b866 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	3304      	adds	r3, #4
 800b842:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b844:	2b00      	cmp	r3, #0
 800b846:	d00e      	beq.n	800b866 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b84e:	f003 0308 	and.w	r3, r3, #8
 800b852:	2b00      	cmp	r3, #0
 800b854:	d007      	beq.n	800b866 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	3304      	adds	r3, #4
 800b85a:	4619      	mov	r1, r3
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f009 fdbd 	bl	80153dc <etharp_request>
 800b862:	e000      	b.n	800b866 <netif_issue_reports+0x6e>
    return;
 800b864:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b866:	3708      	adds	r7, #8
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	08018428 	.word	0x08018428
 800b870:	080185f0 	.word	0x080185f0
 800b874:	08018480 	.word	0x08018480

0800b878 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b086      	sub	sp, #24
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d107      	bne.n	800b896 <netif_set_down+0x1e>
 800b886:	4b1b      	ldr	r3, [pc, #108]	; (800b8f4 <netif_set_down+0x7c>)
 800b888:	f240 329b 	movw	r2, #923	; 0x39b
 800b88c:	491a      	ldr	r1, [pc, #104]	; (800b8f8 <netif_set_down+0x80>)
 800b88e:	481b      	ldr	r0, [pc, #108]	; (800b8fc <netif_set_down+0x84>)
 800b890:	f00b fc26 	bl	80170e0 <iprintf>
 800b894:	e02a      	b.n	800b8ec <netif_set_down+0x74>

  if (netif->flags & NETIF_FLAG_UP) {
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b89c:	f003 0301 	and.w	r3, r3, #1
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d023      	beq.n	800b8ec <netif_set_down+0x74>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.status_changed.state = 0;
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
 800b8a8:	f107 030c 	add.w	r3, r7, #12
 800b8ac:	461a      	mov	r2, r3
 800b8ae:	2108      	movs	r1, #8
 800b8b0:	6878      	ldr	r0, [r7, #4]
 800b8b2:	f000 f9ef 	bl	800bc94 <netif_invoke_ext_callback>
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b8bc:	f023 0301 	bic.w	r3, r3, #1
 800b8c0:	b2da      	uxtb	r2, r3
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b8ce:	f003 0308 	and.w	r3, r3, #8
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d002      	beq.n	800b8dc <netif_set_down+0x64>
      etharp_cleanup_netif(netif);
 800b8d6:	6878      	ldr	r0, [r7, #4]
 800b8d8:	f009 f93a 	bl	8014b50 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	69db      	ldr	r3, [r3, #28]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d003      	beq.n	800b8ec <netif_set_down+0x74>
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	69db      	ldr	r3, [r3, #28]
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	4798      	blx	r3
  }
}
 800b8ec:	3718      	adds	r7, #24
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
 800b8f2:	bf00      	nop
 800b8f4:	08018428 	.word	0x08018428
 800b8f8:	08018614 	.word	0x08018614
 800b8fc:	08018480 	.word	0x08018480

0800b900 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b086      	sub	sp, #24
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d107      	bne.n	800b91e <netif_set_link_up+0x1e>
 800b90e:	4b19      	ldr	r3, [pc, #100]	; (800b974 <netif_set_link_up+0x74>)
 800b910:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b914:	4918      	ldr	r1, [pc, #96]	; (800b978 <netif_set_link_up+0x78>)
 800b916:	4819      	ldr	r0, [pc, #100]	; (800b97c <netif_set_link_up+0x7c>)
 800b918:	f00b fbe2 	bl	80170e0 <iprintf>
 800b91c:	e027      	b.n	800b96e <netif_set_link_up+0x6e>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b924:	f003 0304 	and.w	r3, r3, #4
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d120      	bne.n	800b96e <netif_set_link_up+0x6e>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b932:	f043 0304 	orr.w	r3, r3, #4
 800b936:	b2da      	uxtb	r2, r3
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800b93e:	6878      	ldr	r0, [r7, #4]
 800b940:	f007 fb76 	bl	8013030 <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b944:	2103      	movs	r1, #3
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f7ff ff56 	bl	800b7f8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	6a1b      	ldr	r3, [r3, #32]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d003      	beq.n	800b95c <netif_set_link_up+0x5c>
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	6a1b      	ldr	r3, [r3, #32]
 800b958:	6878      	ldr	r0, [r7, #4]
 800b95a:	4798      	blx	r3
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.link_changed.state = 1;
 800b95c:	2301      	movs	r3, #1
 800b95e:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
 800b960:	f107 030c 	add.w	r3, r7, #12
 800b964:	461a      	mov	r2, r3
 800b966:	2104      	movs	r1, #4
 800b968:	6878      	ldr	r0, [r7, #4]
 800b96a:	f000 f993 	bl	800bc94 <netif_invoke_ext_callback>
    }
#endif
  }
}
 800b96e:	3718      	adds	r7, #24
 800b970:	46bd      	mov	sp, r7
 800b972:	bd80      	pop	{r7, pc}
 800b974:	08018428 	.word	0x08018428
 800b978:	08018634 	.word	0x08018634
 800b97c:	08018480 	.word	0x08018480

0800b980 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b086      	sub	sp, #24
 800b984:	af00      	add	r7, sp, #0
 800b986:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d107      	bne.n	800b99e <netif_set_link_down+0x1e>
 800b98e:	4b16      	ldr	r3, [pc, #88]	; (800b9e8 <netif_set_link_down+0x68>)
 800b990:	f240 4206 	movw	r2, #1030	; 0x406
 800b994:	4915      	ldr	r1, [pc, #84]	; (800b9ec <netif_set_link_down+0x6c>)
 800b996:	4816      	ldr	r0, [pc, #88]	; (800b9f0 <netif_set_link_down+0x70>)
 800b998:	f00b fba2 	bl	80170e0 <iprintf>
 800b99c:	e020      	b.n	800b9e0 <netif_set_link_down+0x60>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b9a4:	f003 0304 	and.w	r3, r3, #4
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d019      	beq.n	800b9e0 <netif_set_link_down+0x60>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b9b2:	f023 0304 	bic.w	r3, r3, #4
 800b9b6:	b2da      	uxtb	r2, r3
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    NETIF_LINK_CALLBACK(netif);
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	6a1b      	ldr	r3, [r3, #32]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d003      	beq.n	800b9ce <netif_set_link_down+0x4e>
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	6a1b      	ldr	r3, [r3, #32]
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	4798      	blx	r3
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    {
      netif_ext_callback_args_t args;
      args.link_changed.state = 0;
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	733b      	strb	r3, [r7, #12]
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
 800b9d2:	f107 030c 	add.w	r3, r7, #12
 800b9d6:	461a      	mov	r2, r3
 800b9d8:	2104      	movs	r1, #4
 800b9da:	6878      	ldr	r0, [r7, #4]
 800b9dc:	f000 f95a 	bl	800bc94 <netif_invoke_ext_callback>
    }
#endif
  }
}
 800b9e0:	3718      	adds	r7, #24
 800b9e2:	46bd      	mov	sp, r7
 800b9e4:	bd80      	pop	{r7, pc}
 800b9e6:	bf00      	nop
 800b9e8:	08018428 	.word	0x08018428
 800b9ec:	08018658 	.word	0x08018658
 800b9f0:	08018480 	.word	0x08018480

0800b9f4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b9f4:	b480      	push	{r7}
 800b9f6:	b083      	sub	sp, #12
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	683a      	ldr	r2, [r7, #0]
 800ba08:	621a      	str	r2, [r3, #32]
  }
}
 800ba0a:	bf00      	nop
 800ba0c:	370c      	adds	r7, #12
 800ba0e:	46bd      	mov	sp, r7
 800ba10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba14:	4770      	bx	lr
	...

0800ba18 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
 800ba18:	b580      	push	{r7, lr}
 800ba1a:	b088      	sub	sp, #32
 800ba1c:	af00      	add	r7, sp, #0
 800ba1e:	6078      	str	r0, [r7, #4]
 800ba20:	6039      	str	r1, [r7, #0]
#else /* LWIP_HAVE_LOOPIF */
  struct netif *stats_if = netif;
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  u8_t schedule_poll = 0;
 800ba22:	2300      	movs	r3, #0
 800ba24:	76fb      	strb	r3, [r7, #27]
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d106      	bne.n	800ba3a <netif_loop_output+0x22>
 800ba2c:	4b35      	ldr	r3, [pc, #212]	; (800bb04 <netif_loop_output+0xec>)
 800ba2e:	f240 424b 	movw	r2, #1099	; 0x44b
 800ba32:	4935      	ldr	r1, [pc, #212]	; (800bb08 <netif_loop_output+0xf0>)
 800ba34:	4835      	ldr	r0, [pc, #212]	; (800bb0c <netif_loop_output+0xf4>)
 800ba36:	f00b fb53 	bl	80170e0 <iprintf>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d106      	bne.n	800ba4e <netif_loop_output+0x36>
 800ba40:	4b30      	ldr	r3, [pc, #192]	; (800bb04 <netif_loop_output+0xec>)
 800ba42:	f240 424c 	movw	r2, #1100	; 0x44c
 800ba46:	4932      	ldr	r1, [pc, #200]	; (800bb10 <netif_loop_output+0xf8>)
 800ba48:	4830      	ldr	r0, [pc, #192]	; (800bb0c <netif_loop_output+0xf4>)
 800ba4a:	f00b fb49 	bl	80170e0 <iprintf>

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 800ba4e:	683b      	ldr	r3, [r7, #0]
 800ba50:	891b      	ldrh	r3, [r3, #8]
 800ba52:	f44f 7220 	mov.w	r2, #640	; 0x280
 800ba56:	4619      	mov	r1, r3
 800ba58:	200e      	movs	r0, #14
 800ba5a:	f000 f9cd 	bl	800bdf8 <pbuf_alloc>
 800ba5e:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 800ba60:	697b      	ldr	r3, [r7, #20]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d102      	bne.n	800ba6c <netif_loop_output+0x54>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return ERR_MEM;
 800ba66:	f04f 33ff 	mov.w	r3, #4294967295
 800ba6a:	e046      	b.n	800bafa <netif_loop_output+0xe2>
  }
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
 800ba6c:	6839      	ldr	r1, [r7, #0]
 800ba6e:	6978      	ldr	r0, [r7, #20]
 800ba70:	f000 fdda 	bl	800c628 <pbuf_copy>
 800ba74:	4603      	mov	r3, r0
 800ba76:	74fb      	strb	r3, [r7, #19]
 800ba78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d005      	beq.n	800ba8c <netif_loop_output+0x74>
    pbuf_free(r);
 800ba80:	6978      	ldr	r0, [r7, #20]
 800ba82:	f000 fc9d 	bl	800c3c0 <pbuf_free>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return err;
 800ba86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ba8a:	e036      	b.n	800bafa <netif_loop_output+0xe2>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next) {
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	61fb      	str	r3, [r7, #28]
 800ba90:	e002      	b.n	800ba98 <netif_loop_output+0x80>
 800ba92:	69fb      	ldr	r3, [r7, #28]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	61fb      	str	r3, [r7, #28]
 800ba98:	69fb      	ldr	r3, [r7, #28]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d1f8      	bne.n	800ba92 <netif_loop_output+0x7a>
    /* nothing to do here, just get to the last pbuf */
  }

  SYS_ARCH_PROTECT(lev);
 800baa0:	f00b f928 	bl	8016cf4 <sys_arch_protect>
 800baa4:	60f8      	str	r0, [r7, #12]
  if (netif->loop_first != NULL) {
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800baaa:	2b00      	cmp	r3, #0
 800baac:	d012      	beq.n	800bad4 <netif_loop_output+0xbc>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d106      	bne.n	800bac4 <netif_loop_output+0xac>
 800bab6:	4b13      	ldr	r3, [pc, #76]	; (800bb04 <netif_loop_output+0xec>)
 800bab8:	f240 4277 	movw	r2, #1143	; 0x477
 800babc:	4915      	ldr	r1, [pc, #84]	; (800bb14 <netif_loop_output+0xfc>)
 800babe:	4813      	ldr	r0, [pc, #76]	; (800bb0c <netif_loop_output+0xf4>)
 800bac0:	f00b fb0e 	bl	80170e0 <iprintf>
    netif->loop_last->next = r;
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac8:	697a      	ldr	r2, [r7, #20]
 800baca:	601a      	str	r2, [r3, #0]
    netif->loop_last = last;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	69fa      	ldr	r2, [r7, #28]
 800bad0:	641a      	str	r2, [r3, #64]	; 0x40
 800bad2:	e007      	b.n	800bae4 <netif_loop_output+0xcc>
  } else {
    netif->loop_first = r;
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	697a      	ldr	r2, [r7, #20]
 800bad8:	63da      	str	r2, [r3, #60]	; 0x3c
    netif->loop_last = last;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	69fa      	ldr	r2, [r7, #28]
 800bade:	641a      	str	r2, [r3, #64]	; 0x40
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
    /* No existing packets queued, schedule poll */
    schedule_poll = 1;
 800bae0:	2301      	movs	r3, #1
 800bae2:	76fb      	strb	r3, [r7, #27]
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  }
  SYS_ARCH_UNPROTECT(lev);
 800bae4:	68f8      	ldr	r0, [r7, #12]
 800bae6:	f00b f913 	bl	8016d10 <sys_arch_unprotect>
  MIB2_STATS_NETIF_ADD(stats_if, ifoutoctets, p->tot_len);
  MIB2_STATS_NETIF_INC(stats_if, ifoutucastpkts);

#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  /* For multithreading environment, schedule a call to netif_poll */
  if (schedule_poll) {
 800baea:	7efb      	ldrb	r3, [r7, #27]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d003      	beq.n	800baf8 <netif_loop_output+0xe0>
    tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
 800baf0:	6879      	ldr	r1, [r7, #4]
 800baf2:	4809      	ldr	r0, [pc, #36]	; (800bb18 <netif_loop_output+0x100>)
 800baf4:	f7fe fdb2 	bl	800a65c <tcpip_try_callback>
  }
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
 800baf8:	2300      	movs	r3, #0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	3720      	adds	r7, #32
 800bafe:	46bd      	mov	sp, r7
 800bb00:	bd80      	pop	{r7, pc}
 800bb02:	bf00      	nop
 800bb04:	08018428 	.word	0x08018428
 800bb08:	0801867c 	.word	0x0801867c
 800bb0c:	08018480 	.word	0x08018480
 800bb10:	080186a0 	.word	0x080186a0
 800bb14:	080186c0 	.word	0x080186c0
 800bb18:	0800bb3d 	.word	0x0800bb3d

0800bb1c <netif_loop_output_ipv4>:

#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
static err_t
netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(addr);
  return netif_loop_output(netif, p);
 800bb28:	68b9      	ldr	r1, [r7, #8]
 800bb2a:	68f8      	ldr	r0, [r7, #12]
 800bb2c:	f7ff ff74 	bl	800ba18 <netif_loop_output>
 800bb30:	4603      	mov	r3, r0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3710      	adds	r7, #16
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
	...

0800bb3c <netif_poll>:
 * netif_loop_output() are put on a list that is passed to netif->input() by
 * netif_poll().
 */
void
netif_poll(struct netif *netif)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b086      	sub	sp, #24
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  struct netif *stats_if = netif;
#endif /* LWIP_HAVE_LOOPIF */
#endif /* MIB2_STATS */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_poll: invalid netif", netif != NULL);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d106      	bne.n	800bb58 <netif_poll+0x1c>
 800bb4a:	4b33      	ldr	r3, [pc, #204]	; (800bc18 <netif_poll+0xdc>)
 800bb4c:	f240 42bb 	movw	r2, #1211	; 0x4bb
 800bb50:	4932      	ldr	r1, [pc, #200]	; (800bc1c <netif_poll+0xe0>)
 800bb52:	4833      	ldr	r0, [pc, #204]	; (800bc20 <netif_poll+0xe4>)
 800bb54:	f00b fac4 	bl	80170e0 <iprintf>

  /* Get a packet from the list. With SYS_LIGHTWEIGHT_PROT=1, this is protected */
  SYS_ARCH_PROTECT(lev);
 800bb58:	f00b f8cc 	bl	8016cf4 <sys_arch_protect>
 800bb5c:	6178      	str	r0, [r7, #20]
  while (netif->loop_first != NULL) {
 800bb5e:	e04f      	b.n	800bc00 <netif_poll+0xc4>
    struct pbuf *in, *in_end;
#if LWIP_LOOPBACK_MAX_PBUFS
    u8_t clen = 1;
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    in = in_end = netif->loop_first;
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bb64:	613b      	str	r3, [r7, #16]
 800bb66:	693b      	ldr	r3, [r7, #16]
 800bb68:	60fb      	str	r3, [r7, #12]
    while (in_end->len != in_end->tot_len) {
 800bb6a:	e00d      	b.n	800bb88 <netif_poll+0x4c>
      LWIP_ASSERT("bogus pbuf: len != tot_len but next == NULL!", in_end->next != NULL);
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d106      	bne.n	800bb82 <netif_poll+0x46>
 800bb74:	4b28      	ldr	r3, [pc, #160]	; (800bc18 <netif_poll+0xdc>)
 800bb76:	f240 42c7 	movw	r2, #1223	; 0x4c7
 800bb7a:	492a      	ldr	r1, [pc, #168]	; (800bc24 <netif_poll+0xe8>)
 800bb7c:	4828      	ldr	r0, [pc, #160]	; (800bc20 <netif_poll+0xe4>)
 800bb7e:	f00b faaf 	bl	80170e0 <iprintf>
      in_end = in_end->next;
 800bb82:	693b      	ldr	r3, [r7, #16]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	613b      	str	r3, [r7, #16]
    while (in_end->len != in_end->tot_len) {
 800bb88:	693b      	ldr	r3, [r7, #16]
 800bb8a:	895a      	ldrh	r2, [r3, #10]
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	891b      	ldrh	r3, [r3, #8]
 800bb90:	429a      	cmp	r2, r3
 800bb92:	d1eb      	bne.n	800bb6c <netif_poll+0x30>
                ((netif->loop_cnt_current - clen) < netif->loop_cnt_current));
    netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current - clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

    /* 'in_end' now points to the last pbuf from 'in' */
    if (in_end == netif->loop_last) {
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb98:	693a      	ldr	r2, [r7, #16]
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d107      	bne.n	800bbae <netif_poll+0x72>
      /* this was the last pbuf in the list */
      netif->loop_first = netif->loop_last = NULL;
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	2200      	movs	r2, #0
 800bba2:	641a      	str	r2, [r3, #64]	; 0x40
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	63da      	str	r2, [r3, #60]	; 0x3c
 800bbac:	e00e      	b.n	800bbcc <netif_poll+0x90>
    } else {
      /* pop the pbuf off the list */
      netif->loop_first = in_end->next;
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	681a      	ldr	r2, [r3, #0]
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	63da      	str	r2, [r3, #60]	; 0x3c
      LWIP_ASSERT("should not be null since first != last!", netif->loop_first != NULL);
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d106      	bne.n	800bbcc <netif_poll+0x90>
 800bbbe:	4b16      	ldr	r3, [pc, #88]	; (800bc18 <netif_poll+0xdc>)
 800bbc0:	f240 42db 	movw	r2, #1243	; 0x4db
 800bbc4:	4918      	ldr	r1, [pc, #96]	; (800bc28 <netif_poll+0xec>)
 800bbc6:	4816      	ldr	r0, [pc, #88]	; (800bc20 <netif_poll+0xe4>)
 800bbc8:	f00b fa8a 	bl	80170e0 <iprintf>
    }
    /* De-queue the pbuf from its successors on the 'loop_' list. */
    in_end->next = NULL;
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	2200      	movs	r2, #0
 800bbd0:	601a      	str	r2, [r3, #0]
    SYS_ARCH_UNPROTECT(lev);
 800bbd2:	6978      	ldr	r0, [r7, #20]
 800bbd4:	f00b f89c 	bl	8016d10 <sys_arch_unprotect>

    in->if_idx = netif_get_index(netif);
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bbde:	3301      	adds	r3, #1
 800bbe0:	b2da      	uxtb	r2, r3
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	73da      	strb	r2, [r3, #15]

    LINK_STATS_INC(link.recv);
    MIB2_STATS_NETIF_ADD(stats_if, ifinoctets, in->tot_len);
    MIB2_STATS_NETIF_INC(stats_if, ifinucastpkts);
    /* loopback packets are always IP packets! */
    if (ip_input(in, netif) != ERR_OK) {
 800bbe6:	6879      	ldr	r1, [r7, #4]
 800bbe8:	68f8      	ldr	r0, [r7, #12]
 800bbea:	f009 fe31 	bl	8015850 <ip4_input>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d002      	beq.n	800bbfa <netif_poll+0xbe>
      pbuf_free(in);
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f000 fbe3 	bl	800c3c0 <pbuf_free>
    }
    SYS_ARCH_PROTECT(lev);
 800bbfa:	f00b f87b 	bl	8016cf4 <sys_arch_protect>
 800bbfe:	6178      	str	r0, [r7, #20]
  while (netif->loop_first != NULL) {
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d1ab      	bne.n	800bb60 <netif_poll+0x24>
  }
  SYS_ARCH_UNPROTECT(lev);
 800bc08:	6978      	ldr	r0, [r7, #20]
 800bc0a:	f00b f881 	bl	8016d10 <sys_arch_unprotect>
}
 800bc0e:	bf00      	nop
 800bc10:	3718      	adds	r7, #24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	08018428 	.word	0x08018428
 800bc1c:	080186ec 	.word	0x080186ec
 800bc20:	08018480 	.word	0x08018480
 800bc24:	08018708 	.word	0x08018708
 800bc28:	08018738 	.word	0x08018738

0800bc2c <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bc2c:	b480      	push	{r7}
 800bc2e:	b085      	sub	sp, #20
 800bc30:	af00      	add	r7, sp, #0
 800bc32:	60f8      	str	r0, [r7, #12]
 800bc34:	60b9      	str	r1, [r7, #8]
 800bc36:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bc38:	f06f 030b 	mvn.w	r3, #11
}
 800bc3c:	4618      	mov	r0, r3
 800bc3e:	3714      	adds	r7, #20
 800bc40:	46bd      	mov	sp, r7
 800bc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc46:	4770      	bx	lr

0800bc48 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	4603      	mov	r3, r0
 800bc50:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bc52:	79fb      	ldrb	r3, [r7, #7]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	d013      	beq.n	800bc80 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bc58:	4b0d      	ldr	r3, [pc, #52]	; (800bc90 <netif_get_by_index+0x48>)
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	60fb      	str	r3, [r7, #12]
 800bc5e:	e00c      	b.n	800bc7a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bc60:	68fb      	ldr	r3, [r7, #12]
 800bc62:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800bc66:	3301      	adds	r3, #1
 800bc68:	b2db      	uxtb	r3, r3
 800bc6a:	79fa      	ldrb	r2, [r7, #7]
 800bc6c:	429a      	cmp	r2, r3
 800bc6e:	d101      	bne.n	800bc74 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	e006      	b.n	800bc82 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	60fb      	str	r3, [r7, #12]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d1ef      	bne.n	800bc60 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3714      	adds	r7, #20
 800bc86:	46bd      	mov	sp, r7
 800bc88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8c:	4770      	bx	lr
 800bc8e:	bf00      	nop
 800bc90:	2000f20c 	.word	0x2000f20c

0800bc94 <netif_invoke_ext_callback>:
 * @param reason change reason
 * @param args depends on reason, see reason description
 */
void
netif_invoke_ext_callback(struct netif *netif, netif_nsc_reason_t reason, const netif_ext_callback_args_t *args)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b086      	sub	sp, #24
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	460b      	mov	r3, r1
 800bc9e:	607a      	str	r2, [r7, #4]
 800bca0:	817b      	strh	r3, [r7, #10]
  netif_ext_callback_t *callback = ext_callback;
 800bca2:	4b0f      	ldr	r3, [pc, #60]	; (800bce0 <netif_invoke_ext_callback+0x4c>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT("netif must be != NULL", netif != NULL);
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	2b00      	cmp	r3, #0
 800bcac:	d110      	bne.n	800bcd0 <netif_invoke_ext_callback+0x3c>
 800bcae:	4b0d      	ldr	r3, [pc, #52]	; (800bce4 <netif_invoke_ext_callback+0x50>)
 800bcb0:	f240 62fc 	movw	r2, #1788	; 0x6fc
 800bcb4:	490c      	ldr	r1, [pc, #48]	; (800bce8 <netif_invoke_ext_callback+0x54>)
 800bcb6:	480d      	ldr	r0, [pc, #52]	; (800bcec <netif_invoke_ext_callback+0x58>)
 800bcb8:	f00b fa12 	bl	80170e0 <iprintf>

  while (callback != NULL) {
 800bcbc:	e008      	b.n	800bcd0 <netif_invoke_ext_callback+0x3c>
    callback->callback_fn(netif, reason, args);
 800bcbe:	697b      	ldr	r3, [r7, #20]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	8979      	ldrh	r1, [r7, #10]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	68f8      	ldr	r0, [r7, #12]
 800bcc8:	4798      	blx	r3
    callback = callback->next;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	685b      	ldr	r3, [r3, #4]
 800bcce:	617b      	str	r3, [r7, #20]
  while (callback != NULL) {
 800bcd0:	697b      	ldr	r3, [r7, #20]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d1f3      	bne.n	800bcbe <netif_invoke_ext_callback+0x2a>
  }
}
 800bcd6:	bf00      	nop
 800bcd8:	bf00      	nop
 800bcda:	3718      	adds	r7, #24
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	2000f208 	.word	0x2000f208
 800bce4:	08018428 	.word	0x08018428
 800bce8:	080187a0 	.word	0x080187a0
 800bcec:	08018480 	.word	0x08018480

0800bcf0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bcf0:	b580      	push	{r7, lr}
 800bcf2:	b082      	sub	sp, #8
 800bcf4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bcf6:	f00a fffd 	bl	8016cf4 <sys_arch_protect>
 800bcfa:	6038      	str	r0, [r7, #0]
 800bcfc:	4b0d      	ldr	r3, [pc, #52]	; (800bd34 <pbuf_free_ooseq+0x44>)
 800bcfe:	2200      	movs	r2, #0
 800bd00:	701a      	strb	r2, [r3, #0]
 800bd02:	6838      	ldr	r0, [r7, #0]
 800bd04:	f00b f804 	bl	8016d10 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bd08:	4b0b      	ldr	r3, [pc, #44]	; (800bd38 <pbuf_free_ooseq+0x48>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	607b      	str	r3, [r7, #4]
 800bd0e:	e00a      	b.n	800bd26 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d003      	beq.n	800bd20 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bd18:	6878      	ldr	r0, [r7, #4]
 800bd1a:	f002 f981 	bl	800e020 <tcp_free_ooseq>
      return;
 800bd1e:	e005      	b.n	800bd2c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	68db      	ldr	r3, [r3, #12]
 800bd24:	607b      	str	r3, [r7, #4]
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1f1      	bne.n	800bd10 <pbuf_free_ooseq+0x20>
    }
  }
}
 800bd2c:	3708      	adds	r7, #8
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}
 800bd32:	bf00      	nop
 800bd34:	2000f25c 	.word	0x2000f25c
 800bd38:	2000f26c 	.word	0x2000f26c

0800bd3c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b082      	sub	sp, #8
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800bd44:	f7ff ffd4 	bl	800bcf0 <pbuf_free_ooseq>
}
 800bd48:	bf00      	nop
 800bd4a:	3708      	adds	r7, #8
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}

0800bd50 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	b082      	sub	sp, #8
 800bd54:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800bd56:	f00a ffcd 	bl	8016cf4 <sys_arch_protect>
 800bd5a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800bd5c:	4b0f      	ldr	r3, [pc, #60]	; (800bd9c <pbuf_pool_is_empty+0x4c>)
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800bd62:	4b0e      	ldr	r3, [pc, #56]	; (800bd9c <pbuf_pool_is_empty+0x4c>)
 800bd64:	2201      	movs	r2, #1
 800bd66:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f00a ffd1 	bl	8016d10 <sys_arch_unprotect>

  if (!queued) {
 800bd6e:	78fb      	ldrb	r3, [r7, #3]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d10f      	bne.n	800bd94 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800bd74:	2100      	movs	r1, #0
 800bd76:	480a      	ldr	r0, [pc, #40]	; (800bda0 <pbuf_pool_is_empty+0x50>)
 800bd78:	f7fe fc70 	bl	800a65c <tcpip_try_callback>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d008      	beq.n	800bd94 <pbuf_pool_is_empty+0x44>
 800bd82:	f00a ffb7 	bl	8016cf4 <sys_arch_protect>
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	4b04      	ldr	r3, [pc, #16]	; (800bd9c <pbuf_pool_is_empty+0x4c>)
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	701a      	strb	r2, [r3, #0]
 800bd8e:	6878      	ldr	r0, [r7, #4]
 800bd90:	f00a ffbe 	bl	8016d10 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bd94:	bf00      	nop
 800bd96:	3708      	adds	r7, #8
 800bd98:	46bd      	mov	sp, r7
 800bd9a:	bd80      	pop	{r7, pc}
 800bd9c:	2000f25c 	.word	0x2000f25c
 800bda0:	0800bd3d 	.word	0x0800bd3d

0800bda4 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bda4:	b480      	push	{r7}
 800bda6:	b085      	sub	sp, #20
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	60f8      	str	r0, [r7, #12]
 800bdac:	60b9      	str	r1, [r7, #8]
 800bdae:	4611      	mov	r1, r2
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	460b      	mov	r3, r1
 800bdb4:	80fb      	strh	r3, [r7, #6]
 800bdb6:	4613      	mov	r3, r2
 800bdb8:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bdba:	68fb      	ldr	r3, [r7, #12]
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bdc0:	68fb      	ldr	r3, [r7, #12]
 800bdc2:	68ba      	ldr	r2, [r7, #8]
 800bdc4:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	88fa      	ldrh	r2, [r7, #6]
 800bdca:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	88ba      	ldrh	r2, [r7, #4]
 800bdd0:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bdd2:	8b3b      	ldrh	r3, [r7, #24]
 800bdd4:	b2da      	uxtb	r2, r3
 800bdd6:	68fb      	ldr	r3, [r7, #12]
 800bdd8:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	7f3a      	ldrb	r2, [r7, #28]
 800bdde:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2201      	movs	r2, #1
 800bde4:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	2200      	movs	r2, #0
 800bdea:	73da      	strb	r2, [r3, #15]
}
 800bdec:	bf00      	nop
 800bdee:	3714      	adds	r7, #20
 800bdf0:	46bd      	mov	sp, r7
 800bdf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf6:	4770      	bx	lr

0800bdf8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b08c      	sub	sp, #48	; 0x30
 800bdfc:	af02      	add	r7, sp, #8
 800bdfe:	4603      	mov	r3, r0
 800be00:	71fb      	strb	r3, [r7, #7]
 800be02:	460b      	mov	r3, r1
 800be04:	80bb      	strh	r3, [r7, #4]
 800be06:	4613      	mov	r3, r2
 800be08:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800be0a:	79fb      	ldrb	r3, [r7, #7]
 800be0c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800be0e:	887b      	ldrh	r3, [r7, #2]
 800be10:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800be14:	d07f      	beq.n	800bf16 <pbuf_alloc+0x11e>
 800be16:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800be1a:	f300 80c8 	bgt.w	800bfae <pbuf_alloc+0x1b6>
 800be1e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800be22:	d010      	beq.n	800be46 <pbuf_alloc+0x4e>
 800be24:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800be28:	f300 80c1 	bgt.w	800bfae <pbuf_alloc+0x1b6>
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d002      	beq.n	800be36 <pbuf_alloc+0x3e>
 800be30:	2b41      	cmp	r3, #65	; 0x41
 800be32:	f040 80bc 	bne.w	800bfae <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800be36:	887a      	ldrh	r2, [r7, #2]
 800be38:	88bb      	ldrh	r3, [r7, #4]
 800be3a:	4619      	mov	r1, r3
 800be3c:	2000      	movs	r0, #0
 800be3e:	f000 f8d1 	bl	800bfe4 <pbuf_alloc_reference>
 800be42:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800be44:	e0bd      	b.n	800bfc2 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800be46:	2300      	movs	r3, #0
 800be48:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800be4a:	2300      	movs	r3, #0
 800be4c:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800be4e:	88bb      	ldrh	r3, [r7, #4]
 800be50:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800be52:	200c      	movs	r0, #12
 800be54:	f7ff f964 	bl	800b120 <memp_malloc>
 800be58:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d109      	bne.n	800be74 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800be60:	f7ff ff76 	bl	800bd50 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800be64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be66:	2b00      	cmp	r3, #0
 800be68:	d002      	beq.n	800be70 <pbuf_alloc+0x78>
            pbuf_free(p);
 800be6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800be6c:	f000 faa8 	bl	800c3c0 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800be70:	2300      	movs	r3, #0
 800be72:	e0a7      	b.n	800bfc4 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800be74:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be76:	3303      	adds	r3, #3
 800be78:	b29b      	uxth	r3, r3
 800be7a:	f023 0303 	bic.w	r3, r3, #3
 800be7e:	b29b      	uxth	r3, r3
 800be80:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800be84:	b29b      	uxth	r3, r3
 800be86:	8b7a      	ldrh	r2, [r7, #26]
 800be88:	4293      	cmp	r3, r2
 800be8a:	bf28      	it	cs
 800be8c:	4613      	movcs	r3, r2
 800be8e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800be90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800be92:	3310      	adds	r3, #16
 800be94:	693a      	ldr	r2, [r7, #16]
 800be96:	4413      	add	r3, r2
 800be98:	3303      	adds	r3, #3
 800be9a:	f023 0303 	bic.w	r3, r3, #3
 800be9e:	4618      	mov	r0, r3
 800bea0:	89f9      	ldrh	r1, [r7, #14]
 800bea2:	8b7a      	ldrh	r2, [r7, #26]
 800bea4:	2300      	movs	r3, #0
 800bea6:	9301      	str	r3, [sp, #4]
 800bea8:	887b      	ldrh	r3, [r7, #2]
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	460b      	mov	r3, r1
 800beae:	4601      	mov	r1, r0
 800beb0:	6938      	ldr	r0, [r7, #16]
 800beb2:	f7ff ff77 	bl	800bda4 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	685b      	ldr	r3, [r3, #4]
 800beba:	f003 0303 	and.w	r3, r3, #3
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d006      	beq.n	800bed0 <pbuf_alloc+0xd8>
 800bec2:	4b42      	ldr	r3, [pc, #264]	; (800bfcc <pbuf_alloc+0x1d4>)
 800bec4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bec8:	4941      	ldr	r1, [pc, #260]	; (800bfd0 <pbuf_alloc+0x1d8>)
 800beca:	4842      	ldr	r0, [pc, #264]	; (800bfd4 <pbuf_alloc+0x1dc>)
 800becc:	f00b f908 	bl	80170e0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bed0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bed2:	3303      	adds	r3, #3
 800bed4:	f023 0303 	bic.w	r3, r3, #3
 800bed8:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bedc:	d106      	bne.n	800beec <pbuf_alloc+0xf4>
 800bede:	4b3b      	ldr	r3, [pc, #236]	; (800bfcc <pbuf_alloc+0x1d4>)
 800bee0:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bee4:	493c      	ldr	r1, [pc, #240]	; (800bfd8 <pbuf_alloc+0x1e0>)
 800bee6:	483b      	ldr	r0, [pc, #236]	; (800bfd4 <pbuf_alloc+0x1dc>)
 800bee8:	f00b f8fa 	bl	80170e0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800beec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d102      	bne.n	800bef8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bef2:	693b      	ldr	r3, [r7, #16]
 800bef4:	627b      	str	r3, [r7, #36]	; 0x24
 800bef6:	e002      	b.n	800befe <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bef8:	69fb      	ldr	r3, [r7, #28]
 800befa:	693a      	ldr	r2, [r7, #16]
 800befc:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800befe:	693b      	ldr	r3, [r7, #16]
 800bf00:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bf02:	8b7a      	ldrh	r2, [r7, #26]
 800bf04:	89fb      	ldrh	r3, [r7, #14]
 800bf06:	1ad3      	subs	r3, r2, r3
 800bf08:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bf0e:	8b7b      	ldrh	r3, [r7, #26]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d19e      	bne.n	800be52 <pbuf_alloc+0x5a>
      break;
 800bf14:	e055      	b.n	800bfc2 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bf16:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf18:	3303      	adds	r3, #3
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	f023 0303 	bic.w	r3, r3, #3
 800bf20:	b29a      	uxth	r2, r3
 800bf22:	88bb      	ldrh	r3, [r7, #4]
 800bf24:	3303      	adds	r3, #3
 800bf26:	b29b      	uxth	r3, r3
 800bf28:	f023 0303 	bic.w	r3, r3, #3
 800bf2c:	b29b      	uxth	r3, r3
 800bf2e:	4413      	add	r3, r2
 800bf30:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bf32:	8b3b      	ldrh	r3, [r7, #24]
 800bf34:	3310      	adds	r3, #16
 800bf36:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bf38:	8b3a      	ldrh	r2, [r7, #24]
 800bf3a:	88bb      	ldrh	r3, [r7, #4]
 800bf3c:	3303      	adds	r3, #3
 800bf3e:	f023 0303 	bic.w	r3, r3, #3
 800bf42:	429a      	cmp	r2, r3
 800bf44:	d306      	bcc.n	800bf54 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bf46:	8afa      	ldrh	r2, [r7, #22]
 800bf48:	88bb      	ldrh	r3, [r7, #4]
 800bf4a:	3303      	adds	r3, #3
 800bf4c:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d201      	bcs.n	800bf58 <pbuf_alloc+0x160>
        return NULL;
 800bf54:	2300      	movs	r3, #0
 800bf56:	e035      	b.n	800bfc4 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bf58:	8afb      	ldrh	r3, [r7, #22]
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	f7fe ff3c 	bl	800add8 <mem_malloc>
 800bf60:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bf62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d101      	bne.n	800bf6c <pbuf_alloc+0x174>
        return NULL;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	e02b      	b.n	800bfc4 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bf6c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bf6e:	3310      	adds	r3, #16
 800bf70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf72:	4413      	add	r3, r2
 800bf74:	3303      	adds	r3, #3
 800bf76:	f023 0303 	bic.w	r3, r3, #3
 800bf7a:	4618      	mov	r0, r3
 800bf7c:	88b9      	ldrh	r1, [r7, #4]
 800bf7e:	88ba      	ldrh	r2, [r7, #4]
 800bf80:	2300      	movs	r3, #0
 800bf82:	9301      	str	r3, [sp, #4]
 800bf84:	887b      	ldrh	r3, [r7, #2]
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	460b      	mov	r3, r1
 800bf8a:	4601      	mov	r1, r0
 800bf8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bf8e:	f7ff ff09 	bl	800bda4 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bf92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	f003 0303 	and.w	r3, r3, #3
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d010      	beq.n	800bfc0 <pbuf_alloc+0x1c8>
 800bf9e:	4b0b      	ldr	r3, [pc, #44]	; (800bfcc <pbuf_alloc+0x1d4>)
 800bfa0:	f44f 7291 	mov.w	r2, #290	; 0x122
 800bfa4:	490d      	ldr	r1, [pc, #52]	; (800bfdc <pbuf_alloc+0x1e4>)
 800bfa6:	480b      	ldr	r0, [pc, #44]	; (800bfd4 <pbuf_alloc+0x1dc>)
 800bfa8:	f00b f89a 	bl	80170e0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bfac:	e008      	b.n	800bfc0 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bfae:	4b07      	ldr	r3, [pc, #28]	; (800bfcc <pbuf_alloc+0x1d4>)
 800bfb0:	f240 1227 	movw	r2, #295	; 0x127
 800bfb4:	490a      	ldr	r1, [pc, #40]	; (800bfe0 <pbuf_alloc+0x1e8>)
 800bfb6:	4807      	ldr	r0, [pc, #28]	; (800bfd4 <pbuf_alloc+0x1dc>)
 800bfb8:	f00b f892 	bl	80170e0 <iprintf>
      return NULL;
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	e001      	b.n	800bfc4 <pbuf_alloc+0x1cc>
      break;
 800bfc0:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800bfc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3728      	adds	r7, #40	; 0x28
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}
 800bfcc:	080187b8 	.word	0x080187b8
 800bfd0:	080187e8 	.word	0x080187e8
 800bfd4:	08018818 	.word	0x08018818
 800bfd8:	08018840 	.word	0x08018840
 800bfdc:	08018874 	.word	0x08018874
 800bfe0:	080188a0 	.word	0x080188a0

0800bfe4 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800bfe4:	b580      	push	{r7, lr}
 800bfe6:	b086      	sub	sp, #24
 800bfe8:	af02      	add	r7, sp, #8
 800bfea:	6078      	str	r0, [r7, #4]
 800bfec:	460b      	mov	r3, r1
 800bfee:	807b      	strh	r3, [r7, #2]
 800bff0:	4613      	mov	r3, r2
 800bff2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800bff4:	883b      	ldrh	r3, [r7, #0]
 800bff6:	2b41      	cmp	r3, #65	; 0x41
 800bff8:	d009      	beq.n	800c00e <pbuf_alloc_reference+0x2a>
 800bffa:	883b      	ldrh	r3, [r7, #0]
 800bffc:	2b01      	cmp	r3, #1
 800bffe:	d006      	beq.n	800c00e <pbuf_alloc_reference+0x2a>
 800c000:	4b0f      	ldr	r3, [pc, #60]	; (800c040 <pbuf_alloc_reference+0x5c>)
 800c002:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800c006:	490f      	ldr	r1, [pc, #60]	; (800c044 <pbuf_alloc_reference+0x60>)
 800c008:	480f      	ldr	r0, [pc, #60]	; (800c048 <pbuf_alloc_reference+0x64>)
 800c00a:	f00b f869 	bl	80170e0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c00e:	200b      	movs	r0, #11
 800c010:	f7ff f886 	bl	800b120 <memp_malloc>
 800c014:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d101      	bne.n	800c020 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800c01c:	2300      	movs	r3, #0
 800c01e:	e00b      	b.n	800c038 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800c020:	8879      	ldrh	r1, [r7, #2]
 800c022:	887a      	ldrh	r2, [r7, #2]
 800c024:	2300      	movs	r3, #0
 800c026:	9301      	str	r3, [sp, #4]
 800c028:	883b      	ldrh	r3, [r7, #0]
 800c02a:	9300      	str	r3, [sp, #0]
 800c02c:	460b      	mov	r3, r1
 800c02e:	6879      	ldr	r1, [r7, #4]
 800c030:	68f8      	ldr	r0, [r7, #12]
 800c032:	f7ff feb7 	bl	800bda4 <pbuf_init_alloced_pbuf>
  return p;
 800c036:	68fb      	ldr	r3, [r7, #12]
}
 800c038:	4618      	mov	r0, r3
 800c03a:	3710      	adds	r7, #16
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd80      	pop	{r7, pc}
 800c040:	080187b8 	.word	0x080187b8
 800c044:	080188bc 	.word	0x080188bc
 800c048:	08018818 	.word	0x08018818

0800c04c <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b088      	sub	sp, #32
 800c050:	af02      	add	r7, sp, #8
 800c052:	607b      	str	r3, [r7, #4]
 800c054:	4603      	mov	r3, r0
 800c056:	73fb      	strb	r3, [r7, #15]
 800c058:	460b      	mov	r3, r1
 800c05a:	81bb      	strh	r3, [r7, #12]
 800c05c:	4613      	mov	r3, r2
 800c05e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800c060:	7bfb      	ldrb	r3, [r7, #15]
 800c062:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c064:	8a7b      	ldrh	r3, [r7, #18]
 800c066:	3303      	adds	r3, #3
 800c068:	f023 0203 	bic.w	r2, r3, #3
 800c06c:	89bb      	ldrh	r3, [r7, #12]
 800c06e:	441a      	add	r2, r3
 800c070:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800c072:	429a      	cmp	r2, r3
 800c074:	d901      	bls.n	800c07a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c076:	2300      	movs	r3, #0
 800c078:	e018      	b.n	800c0ac <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800c07a:	6a3b      	ldr	r3, [r7, #32]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d007      	beq.n	800c090 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c080:	8a7b      	ldrh	r3, [r7, #18]
 800c082:	3303      	adds	r3, #3
 800c084:	f023 0303 	bic.w	r3, r3, #3
 800c088:	6a3a      	ldr	r2, [r7, #32]
 800c08a:	4413      	add	r3, r2
 800c08c:	617b      	str	r3, [r7, #20]
 800c08e:	e001      	b.n	800c094 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800c090:	2300      	movs	r3, #0
 800c092:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	89b9      	ldrh	r1, [r7, #12]
 800c098:	89ba      	ldrh	r2, [r7, #12]
 800c09a:	2302      	movs	r3, #2
 800c09c:	9301      	str	r3, [sp, #4]
 800c09e:	897b      	ldrh	r3, [r7, #10]
 800c0a0:	9300      	str	r3, [sp, #0]
 800c0a2:	460b      	mov	r3, r1
 800c0a4:	6979      	ldr	r1, [r7, #20]
 800c0a6:	f7ff fe7d 	bl	800bda4 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800c0aa:	687b      	ldr	r3, [r7, #4]
}
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	3718      	adds	r7, #24
 800c0b0:	46bd      	mov	sp, r7
 800c0b2:	bd80      	pop	{r7, pc}

0800c0b4 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b084      	sub	sp, #16
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
 800c0bc:	460b      	mov	r3, r1
 800c0be:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d106      	bne.n	800c0d4 <pbuf_realloc+0x20>
 800c0c6:	4b3a      	ldr	r3, [pc, #232]	; (800c1b0 <pbuf_realloc+0xfc>)
 800c0c8:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800c0cc:	4939      	ldr	r1, [pc, #228]	; (800c1b4 <pbuf_realloc+0x100>)
 800c0ce:	483a      	ldr	r0, [pc, #232]	; (800c1b8 <pbuf_realloc+0x104>)
 800c0d0:	f00b f806 	bl	80170e0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	891b      	ldrh	r3, [r3, #8]
 800c0d8:	887a      	ldrh	r2, [r7, #2]
 800c0da:	429a      	cmp	r2, r3
 800c0dc:	d263      	bcs.n	800c1a6 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800c0de:	687b      	ldr	r3, [r7, #4]
 800c0e0:	891a      	ldrh	r2, [r3, #8]
 800c0e2:	887b      	ldrh	r3, [r7, #2]
 800c0e4:	1ad3      	subs	r3, r2, r3
 800c0e6:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c0e8:	887b      	ldrh	r3, [r7, #2]
 800c0ea:	817b      	strh	r3, [r7, #10]
  q = p;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c0f0:	e018      	b.n	800c124 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	895b      	ldrh	r3, [r3, #10]
 800c0f6:	897a      	ldrh	r2, [r7, #10]
 800c0f8:	1ad3      	subs	r3, r2, r3
 800c0fa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	891a      	ldrh	r2, [r3, #8]
 800c100:	893b      	ldrh	r3, [r7, #8]
 800c102:	1ad3      	subs	r3, r2, r3
 800c104:	b29a      	uxth	r2, r3
 800c106:	68fb      	ldr	r3, [r7, #12]
 800c108:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d106      	bne.n	800c124 <pbuf_realloc+0x70>
 800c116:	4b26      	ldr	r3, [pc, #152]	; (800c1b0 <pbuf_realloc+0xfc>)
 800c118:	f240 12af 	movw	r2, #431	; 0x1af
 800c11c:	4927      	ldr	r1, [pc, #156]	; (800c1bc <pbuf_realloc+0x108>)
 800c11e:	4826      	ldr	r0, [pc, #152]	; (800c1b8 <pbuf_realloc+0x104>)
 800c120:	f00a ffde 	bl	80170e0 <iprintf>
  while (rem_len > q->len) {
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	895b      	ldrh	r3, [r3, #10]
 800c128:	897a      	ldrh	r2, [r7, #10]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d8e1      	bhi.n	800c0f2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	7b1b      	ldrb	r3, [r3, #12]
 800c132:	f003 030f 	and.w	r3, r3, #15
 800c136:	2b00      	cmp	r3, #0
 800c138:	d121      	bne.n	800c17e <pbuf_realloc+0xca>
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	895b      	ldrh	r3, [r3, #10]
 800c13e:	897a      	ldrh	r2, [r7, #10]
 800c140:	429a      	cmp	r2, r3
 800c142:	d01c      	beq.n	800c17e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	7b5b      	ldrb	r3, [r3, #13]
 800c148:	f003 0302 	and.w	r3, r3, #2
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d116      	bne.n	800c17e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	685a      	ldr	r2, [r3, #4]
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	1ad3      	subs	r3, r2, r3
 800c158:	b29a      	uxth	r2, r3
 800c15a:	897b      	ldrh	r3, [r7, #10]
 800c15c:	4413      	add	r3, r2
 800c15e:	b29b      	uxth	r3, r3
 800c160:	4619      	mov	r1, r3
 800c162:	68f8      	ldr	r0, [r7, #12]
 800c164:	f7fe fd2e 	bl	800abc4 <mem_trim>
 800c168:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	d106      	bne.n	800c17e <pbuf_realloc+0xca>
 800c170:	4b0f      	ldr	r3, [pc, #60]	; (800c1b0 <pbuf_realloc+0xfc>)
 800c172:	f240 12bd 	movw	r2, #445	; 0x1bd
 800c176:	4912      	ldr	r1, [pc, #72]	; (800c1c0 <pbuf_realloc+0x10c>)
 800c178:	480f      	ldr	r0, [pc, #60]	; (800c1b8 <pbuf_realloc+0x104>)
 800c17a:	f00a ffb1 	bl	80170e0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	897a      	ldrh	r2, [r7, #10]
 800c182:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	895a      	ldrh	r2, [r3, #10]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d004      	beq.n	800c19e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c194:	68fb      	ldr	r3, [r7, #12]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4618      	mov	r0, r3
 800c19a:	f000 f911 	bl	800c3c0 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	2200      	movs	r2, #0
 800c1a2:	601a      	str	r2, [r3, #0]
 800c1a4:	e000      	b.n	800c1a8 <pbuf_realloc+0xf4>
    return;
 800c1a6:	bf00      	nop

}
 800c1a8:	3710      	adds	r7, #16
 800c1aa:	46bd      	mov	sp, r7
 800c1ac:	bd80      	pop	{r7, pc}
 800c1ae:	bf00      	nop
 800c1b0:	080187b8 	.word	0x080187b8
 800c1b4:	080188d0 	.word	0x080188d0
 800c1b8:	08018818 	.word	0x08018818
 800c1bc:	080188e8 	.word	0x080188e8
 800c1c0:	08018900 	.word	0x08018900

0800c1c4 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b086      	sub	sp, #24
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	60f8      	str	r0, [r7, #12]
 800c1cc:	60b9      	str	r1, [r7, #8]
 800c1ce:	4613      	mov	r3, r2
 800c1d0:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d106      	bne.n	800c1e6 <pbuf_add_header_impl+0x22>
 800c1d8:	4b2b      	ldr	r3, [pc, #172]	; (800c288 <pbuf_add_header_impl+0xc4>)
 800c1da:	f240 12df 	movw	r2, #479	; 0x1df
 800c1de:	492b      	ldr	r1, [pc, #172]	; (800c28c <pbuf_add_header_impl+0xc8>)
 800c1e0:	482b      	ldr	r0, [pc, #172]	; (800c290 <pbuf_add_header_impl+0xcc>)
 800c1e2:	f00a ff7d 	bl	80170e0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	d003      	beq.n	800c1f4 <pbuf_add_header_impl+0x30>
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1f2:	d301      	bcc.n	800c1f8 <pbuf_add_header_impl+0x34>
    return 1;
 800c1f4:	2301      	movs	r3, #1
 800c1f6:	e043      	b.n	800c280 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c1f8:	68bb      	ldr	r3, [r7, #8]
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d101      	bne.n	800c202 <pbuf_add_header_impl+0x3e>
    return 0;
 800c1fe:	2300      	movs	r3, #0
 800c200:	e03e      	b.n	800c280 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c202:	68bb      	ldr	r3, [r7, #8]
 800c204:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	891a      	ldrh	r2, [r3, #8]
 800c20a:	8a7b      	ldrh	r3, [r7, #18]
 800c20c:	4413      	add	r3, r2
 800c20e:	b29b      	uxth	r3, r3
 800c210:	8a7a      	ldrh	r2, [r7, #18]
 800c212:	429a      	cmp	r2, r3
 800c214:	d901      	bls.n	800c21a <pbuf_add_header_impl+0x56>
    return 1;
 800c216:	2301      	movs	r3, #1
 800c218:	e032      	b.n	800c280 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	7b1b      	ldrb	r3, [r3, #12]
 800c21e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c220:	8a3b      	ldrh	r3, [r7, #16]
 800c222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c226:	2b00      	cmp	r3, #0
 800c228:	d00c      	beq.n	800c244 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	685a      	ldr	r2, [r3, #4]
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	425b      	negs	r3, r3
 800c232:	4413      	add	r3, r2
 800c234:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c236:	68fb      	ldr	r3, [r7, #12]
 800c238:	3310      	adds	r3, #16
 800c23a:	697a      	ldr	r2, [r7, #20]
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d20d      	bcs.n	800c25c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c240:	2301      	movs	r3, #1
 800c242:	e01d      	b.n	800c280 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c244:	79fb      	ldrb	r3, [r7, #7]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d006      	beq.n	800c258 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	685a      	ldr	r2, [r3, #4]
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	425b      	negs	r3, r3
 800c252:	4413      	add	r3, r2
 800c254:	617b      	str	r3, [r7, #20]
 800c256:	e001      	b.n	800c25c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c258:	2301      	movs	r3, #1
 800c25a:	e011      	b.n	800c280 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	697a      	ldr	r2, [r7, #20]
 800c260:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	895a      	ldrh	r2, [r3, #10]
 800c266:	8a7b      	ldrh	r3, [r7, #18]
 800c268:	4413      	add	r3, r2
 800c26a:	b29a      	uxth	r2, r3
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	891a      	ldrh	r2, [r3, #8]
 800c274:	8a7b      	ldrh	r3, [r7, #18]
 800c276:	4413      	add	r3, r2
 800c278:	b29a      	uxth	r2, r3
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	811a      	strh	r2, [r3, #8]


  return 0;
 800c27e:	2300      	movs	r3, #0
}
 800c280:	4618      	mov	r0, r3
 800c282:	3718      	adds	r7, #24
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	080187b8 	.word	0x080187b8
 800c28c:	0801891c 	.word	0x0801891c
 800c290:	08018818 	.word	0x08018818

0800c294 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c29e:	2200      	movs	r2, #0
 800c2a0:	6839      	ldr	r1, [r7, #0]
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f7ff ff8e 	bl	800c1c4 <pbuf_add_header_impl>
 800c2a8:	4603      	mov	r3, r0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}
	...

0800c2b4 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b084      	sub	sp, #16
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d106      	bne.n	800c2d2 <pbuf_remove_header+0x1e>
 800c2c4:	4b20      	ldr	r3, [pc, #128]	; (800c348 <pbuf_remove_header+0x94>)
 800c2c6:	f240 224b 	movw	r2, #587	; 0x24b
 800c2ca:	4920      	ldr	r1, [pc, #128]	; (800c34c <pbuf_remove_header+0x98>)
 800c2cc:	4820      	ldr	r0, [pc, #128]	; (800c350 <pbuf_remove_header+0x9c>)
 800c2ce:	f00a ff07 	bl	80170e0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d003      	beq.n	800c2e0 <pbuf_remove_header+0x2c>
 800c2d8:	683b      	ldr	r3, [r7, #0]
 800c2da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c2de:	d301      	bcc.n	800c2e4 <pbuf_remove_header+0x30>
    return 1;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	e02c      	b.n	800c33e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c2e4:	683b      	ldr	r3, [r7, #0]
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d101      	bne.n	800c2ee <pbuf_remove_header+0x3a>
    return 0;
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	e027      	b.n	800c33e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	895b      	ldrh	r3, [r3, #10]
 800c2f6:	89fa      	ldrh	r2, [r7, #14]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d908      	bls.n	800c30e <pbuf_remove_header+0x5a>
 800c2fc:	4b12      	ldr	r3, [pc, #72]	; (800c348 <pbuf_remove_header+0x94>)
 800c2fe:	f240 2255 	movw	r2, #597	; 0x255
 800c302:	4914      	ldr	r1, [pc, #80]	; (800c354 <pbuf_remove_header+0xa0>)
 800c304:	4812      	ldr	r0, [pc, #72]	; (800c350 <pbuf_remove_header+0x9c>)
 800c306:	f00a feeb 	bl	80170e0 <iprintf>
 800c30a:	2301      	movs	r3, #1
 800c30c:	e017      	b.n	800c33e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	685b      	ldr	r3, [r3, #4]
 800c312:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	685a      	ldr	r2, [r3, #4]
 800c318:	683b      	ldr	r3, [r7, #0]
 800c31a:	441a      	add	r2, r3
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	895a      	ldrh	r2, [r3, #10]
 800c324:	89fb      	ldrh	r3, [r7, #14]
 800c326:	1ad3      	subs	r3, r2, r3
 800c328:	b29a      	uxth	r2, r3
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	891a      	ldrh	r2, [r3, #8]
 800c332:	89fb      	ldrh	r3, [r7, #14]
 800c334:	1ad3      	subs	r3, r2, r3
 800c336:	b29a      	uxth	r2, r3
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c33c:	2300      	movs	r3, #0
}
 800c33e:	4618      	mov	r0, r3
 800c340:	3710      	adds	r7, #16
 800c342:	46bd      	mov	sp, r7
 800c344:	bd80      	pop	{r7, pc}
 800c346:	bf00      	nop
 800c348:	080187b8 	.word	0x080187b8
 800c34c:	0801891c 	.word	0x0801891c
 800c350:	08018818 	.word	0x08018818
 800c354:	08018928 	.word	0x08018928

0800c358 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b082      	sub	sp, #8
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	460b      	mov	r3, r1
 800c362:	807b      	strh	r3, [r7, #2]
 800c364:	4613      	mov	r3, r2
 800c366:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c368:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	da08      	bge.n	800c382 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c370:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c374:	425b      	negs	r3, r3
 800c376:	4619      	mov	r1, r3
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f7ff ff9b 	bl	800c2b4 <pbuf_remove_header>
 800c37e:	4603      	mov	r3, r0
 800c380:	e007      	b.n	800c392 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c382:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c386:	787a      	ldrb	r2, [r7, #1]
 800c388:	4619      	mov	r1, r3
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f7ff ff1a 	bl	800c1c4 <pbuf_add_header_impl>
 800c390:	4603      	mov	r3, r0
  }
}
 800c392:	4618      	mov	r0, r3
 800c394:	3708      	adds	r7, #8
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b082      	sub	sp, #8
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c3a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c3aa:	2201      	movs	r2, #1
 800c3ac:	4619      	mov	r1, r3
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f7ff ffd2 	bl	800c358 <pbuf_header_impl>
 800c3b4:	4603      	mov	r3, r0
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3708      	adds	r7, #8
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
	...

0800c3c0 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b088      	sub	sp, #32
 800c3c4:	af00      	add	r7, sp, #0
 800c3c6:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d10b      	bne.n	800c3e6 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d106      	bne.n	800c3e2 <pbuf_free+0x22>
 800c3d4:	4b3b      	ldr	r3, [pc, #236]	; (800c4c4 <pbuf_free+0x104>)
 800c3d6:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c3da:	493b      	ldr	r1, [pc, #236]	; (800c4c8 <pbuf_free+0x108>)
 800c3dc:	483b      	ldr	r0, [pc, #236]	; (800c4cc <pbuf_free+0x10c>)
 800c3de:	f00a fe7f 	bl	80170e0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	e069      	b.n	800c4ba <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c3ea:	e062      	b.n	800c4b2 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c3ec:	f00a fc82 	bl	8016cf4 <sys_arch_protect>
 800c3f0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	7b9b      	ldrb	r3, [r3, #14]
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d106      	bne.n	800c408 <pbuf_free+0x48>
 800c3fa:	4b32      	ldr	r3, [pc, #200]	; (800c4c4 <pbuf_free+0x104>)
 800c3fc:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c400:	4933      	ldr	r1, [pc, #204]	; (800c4d0 <pbuf_free+0x110>)
 800c402:	4832      	ldr	r0, [pc, #200]	; (800c4cc <pbuf_free+0x10c>)
 800c404:	f00a fe6c 	bl	80170e0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	7b9b      	ldrb	r3, [r3, #14]
 800c40c:	3b01      	subs	r3, #1
 800c40e:	b2da      	uxtb	r2, r3
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	739a      	strb	r2, [r3, #14]
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	7b9b      	ldrb	r3, [r3, #14]
 800c418:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c41a:	69b8      	ldr	r0, [r7, #24]
 800c41c:	f00a fc78 	bl	8016d10 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c420:	7dfb      	ldrb	r3, [r7, #23]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d143      	bne.n	800c4ae <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	7b1b      	ldrb	r3, [r3, #12]
 800c430:	f003 030f 	and.w	r3, r3, #15
 800c434:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	7b5b      	ldrb	r3, [r3, #13]
 800c43a:	f003 0302 	and.w	r3, r3, #2
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d011      	beq.n	800c466 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c446:	68bb      	ldr	r3, [r7, #8]
 800c448:	691b      	ldr	r3, [r3, #16]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d106      	bne.n	800c45c <pbuf_free+0x9c>
 800c44e:	4b1d      	ldr	r3, [pc, #116]	; (800c4c4 <pbuf_free+0x104>)
 800c450:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c454:	491f      	ldr	r1, [pc, #124]	; (800c4d4 <pbuf_free+0x114>)
 800c456:	481d      	ldr	r0, [pc, #116]	; (800c4cc <pbuf_free+0x10c>)
 800c458:	f00a fe42 	bl	80170e0 <iprintf>
        pc->custom_free_function(p);
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	691b      	ldr	r3, [r3, #16]
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	4798      	blx	r3
 800c464:	e01d      	b.n	800c4a2 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c466:	7bfb      	ldrb	r3, [r7, #15]
 800c468:	2b02      	cmp	r3, #2
 800c46a:	d104      	bne.n	800c476 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c46c:	6879      	ldr	r1, [r7, #4]
 800c46e:	200c      	movs	r0, #12
 800c470:	f7fe fecc 	bl	800b20c <memp_free>
 800c474:	e015      	b.n	800c4a2 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c476:	7bfb      	ldrb	r3, [r7, #15]
 800c478:	2b01      	cmp	r3, #1
 800c47a:	d104      	bne.n	800c486 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c47c:	6879      	ldr	r1, [r7, #4]
 800c47e:	200b      	movs	r0, #11
 800c480:	f7fe fec4 	bl	800b20c <memp_free>
 800c484:	e00d      	b.n	800c4a2 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c486:	7bfb      	ldrb	r3, [r7, #15]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d103      	bne.n	800c494 <pbuf_free+0xd4>
          mem_free(p);
 800c48c:	6878      	ldr	r0, [r7, #4]
 800c48e:	f7fe fb09 	bl	800aaa4 <mem_free>
 800c492:	e006      	b.n	800c4a2 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c494:	4b0b      	ldr	r3, [pc, #44]	; (800c4c4 <pbuf_free+0x104>)
 800c496:	f240 320f 	movw	r2, #783	; 0x30f
 800c49a:	490f      	ldr	r1, [pc, #60]	; (800c4d8 <pbuf_free+0x118>)
 800c49c:	480b      	ldr	r0, [pc, #44]	; (800c4cc <pbuf_free+0x10c>)
 800c49e:	f00a fe1f 	bl	80170e0 <iprintf>
        }
      }
      count++;
 800c4a2:	7ffb      	ldrb	r3, [r7, #31]
 800c4a4:	3301      	adds	r3, #1
 800c4a6:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	607b      	str	r3, [r7, #4]
 800c4ac:	e001      	b.n	800c4b2 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c4ae:	2300      	movs	r3, #0
 800c4b0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d199      	bne.n	800c3ec <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c4b8:	7ffb      	ldrb	r3, [r7, #31]
}
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	3720      	adds	r7, #32
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}
 800c4c2:	bf00      	nop
 800c4c4:	080187b8 	.word	0x080187b8
 800c4c8:	0801891c 	.word	0x0801891c
 800c4cc:	08018818 	.word	0x08018818
 800c4d0:	08018948 	.word	0x08018948
 800c4d4:	08018960 	.word	0x08018960
 800c4d8:	08018984 	.word	0x08018984

0800c4dc <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c4e8:	e005      	b.n	800c4f6 <pbuf_clen+0x1a>
    ++len;
 800c4ea:	89fb      	ldrh	r3, [r7, #14]
 800c4ec:	3301      	adds	r3, #1
 800c4ee:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	681b      	ldr	r3, [r3, #0]
 800c4f4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1f6      	bne.n	800c4ea <pbuf_clen+0xe>
  }
  return len;
 800c4fc:	89fb      	ldrh	r3, [r7, #14]
}
 800c4fe:	4618      	mov	r0, r3
 800c500:	3714      	adds	r7, #20
 800c502:	46bd      	mov	sp, r7
 800c504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c508:	4770      	bx	lr
	...

0800c50c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2b00      	cmp	r3, #0
 800c518:	d016      	beq.n	800c548 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c51a:	f00a fbeb 	bl	8016cf4 <sys_arch_protect>
 800c51e:	60f8      	str	r0, [r7, #12]
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	7b9b      	ldrb	r3, [r3, #14]
 800c524:	3301      	adds	r3, #1
 800c526:	b2da      	uxtb	r2, r3
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	739a      	strb	r2, [r3, #14]
 800c52c:	68f8      	ldr	r0, [r7, #12]
 800c52e:	f00a fbef 	bl	8016d10 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	7b9b      	ldrb	r3, [r3, #14]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d106      	bne.n	800c548 <pbuf_ref+0x3c>
 800c53a:	4b05      	ldr	r3, [pc, #20]	; (800c550 <pbuf_ref+0x44>)
 800c53c:	f240 3242 	movw	r2, #834	; 0x342
 800c540:	4904      	ldr	r1, [pc, #16]	; (800c554 <pbuf_ref+0x48>)
 800c542:	4805      	ldr	r0, [pc, #20]	; (800c558 <pbuf_ref+0x4c>)
 800c544:	f00a fdcc 	bl	80170e0 <iprintf>
  }
}
 800c548:	bf00      	nop
 800c54a:	3710      	adds	r7, #16
 800c54c:	46bd      	mov	sp, r7
 800c54e:	bd80      	pop	{r7, pc}
 800c550:	080187b8 	.word	0x080187b8
 800c554:	08018998 	.word	0x08018998
 800c558:	08018818 	.word	0x08018818

0800c55c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c55c:	b580      	push	{r7, lr}
 800c55e:	b084      	sub	sp, #16
 800c560:	af00      	add	r7, sp, #0
 800c562:	6078      	str	r0, [r7, #4]
 800c564:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d002      	beq.n	800c572 <pbuf_cat+0x16>
 800c56c:	683b      	ldr	r3, [r7, #0]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d107      	bne.n	800c582 <pbuf_cat+0x26>
 800c572:	4b20      	ldr	r3, [pc, #128]	; (800c5f4 <pbuf_cat+0x98>)
 800c574:	f240 3259 	movw	r2, #857	; 0x359
 800c578:	491f      	ldr	r1, [pc, #124]	; (800c5f8 <pbuf_cat+0x9c>)
 800c57a:	4820      	ldr	r0, [pc, #128]	; (800c5fc <pbuf_cat+0xa0>)
 800c57c:	f00a fdb0 	bl	80170e0 <iprintf>
 800c580:	e034      	b.n	800c5ec <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	60fb      	str	r3, [r7, #12]
 800c586:	e00a      	b.n	800c59e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	891a      	ldrh	r2, [r3, #8]
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	891b      	ldrh	r3, [r3, #8]
 800c590:	4413      	add	r3, r2
 800c592:	b29a      	uxth	r2, r3
 800c594:	68fb      	ldr	r3, [r7, #12]
 800c596:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	60fb      	str	r3, [r7, #12]
 800c59e:	68fb      	ldr	r3, [r7, #12]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d1f0      	bne.n	800c588 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	891a      	ldrh	r2, [r3, #8]
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	895b      	ldrh	r3, [r3, #10]
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d006      	beq.n	800c5c0 <pbuf_cat+0x64>
 800c5b2:	4b10      	ldr	r3, [pc, #64]	; (800c5f4 <pbuf_cat+0x98>)
 800c5b4:	f240 3262 	movw	r2, #866	; 0x362
 800c5b8:	4911      	ldr	r1, [pc, #68]	; (800c600 <pbuf_cat+0xa4>)
 800c5ba:	4810      	ldr	r0, [pc, #64]	; (800c5fc <pbuf_cat+0xa0>)
 800c5bc:	f00a fd90 	bl	80170e0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d006      	beq.n	800c5d6 <pbuf_cat+0x7a>
 800c5c8:	4b0a      	ldr	r3, [pc, #40]	; (800c5f4 <pbuf_cat+0x98>)
 800c5ca:	f240 3263 	movw	r2, #867	; 0x363
 800c5ce:	490d      	ldr	r1, [pc, #52]	; (800c604 <pbuf_cat+0xa8>)
 800c5d0:	480a      	ldr	r0, [pc, #40]	; (800c5fc <pbuf_cat+0xa0>)
 800c5d2:	f00a fd85 	bl	80170e0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c5d6:	68fb      	ldr	r3, [r7, #12]
 800c5d8:	891a      	ldrh	r2, [r3, #8]
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	891b      	ldrh	r3, [r3, #8]
 800c5de:	4413      	add	r3, r2
 800c5e0:	b29a      	uxth	r2, r3
 800c5e2:	68fb      	ldr	r3, [r7, #12]
 800c5e4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c5e6:	68fb      	ldr	r3, [r7, #12]
 800c5e8:	683a      	ldr	r2, [r7, #0]
 800c5ea:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c5ec:	3710      	adds	r7, #16
 800c5ee:	46bd      	mov	sp, r7
 800c5f0:	bd80      	pop	{r7, pc}
 800c5f2:	bf00      	nop
 800c5f4:	080187b8 	.word	0x080187b8
 800c5f8:	080189ac 	.word	0x080189ac
 800c5fc:	08018818 	.word	0x08018818
 800c600:	080189e4 	.word	0x080189e4
 800c604:	08018a14 	.word	0x08018a14

0800c608 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b082      	sub	sp, #8
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
 800c610:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c612:	6839      	ldr	r1, [r7, #0]
 800c614:	6878      	ldr	r0, [r7, #4]
 800c616:	f7ff ffa1 	bl	800c55c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c61a:	6838      	ldr	r0, [r7, #0]
 800c61c:	f7ff ff76 	bl	800c50c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c620:	bf00      	nop
 800c622:	3708      	adds	r7, #8
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b086      	sub	sp, #24
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
 800c630:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c632:	2300      	movs	r3, #0
 800c634:	617b      	str	r3, [r7, #20]
 800c636:	2300      	movs	r3, #0
 800c638:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d008      	beq.n	800c652 <pbuf_copy+0x2a>
 800c640:	683b      	ldr	r3, [r7, #0]
 800c642:	2b00      	cmp	r3, #0
 800c644:	d005      	beq.n	800c652 <pbuf_copy+0x2a>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	891a      	ldrh	r2, [r3, #8]
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	891b      	ldrh	r3, [r3, #8]
 800c64e:	429a      	cmp	r2, r3
 800c650:	d209      	bcs.n	800c666 <pbuf_copy+0x3e>
 800c652:	4b57      	ldr	r3, [pc, #348]	; (800c7b0 <pbuf_copy+0x188>)
 800c654:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c658:	4956      	ldr	r1, [pc, #344]	; (800c7b4 <pbuf_copy+0x18c>)
 800c65a:	4857      	ldr	r0, [pc, #348]	; (800c7b8 <pbuf_copy+0x190>)
 800c65c:	f00a fd40 	bl	80170e0 <iprintf>
 800c660:	f06f 030f 	mvn.w	r3, #15
 800c664:	e09f      	b.n	800c7a6 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	895b      	ldrh	r3, [r3, #10]
 800c66a:	461a      	mov	r2, r3
 800c66c:	697b      	ldr	r3, [r7, #20]
 800c66e:	1ad2      	subs	r2, r2, r3
 800c670:	683b      	ldr	r3, [r7, #0]
 800c672:	895b      	ldrh	r3, [r3, #10]
 800c674:	4619      	mov	r1, r3
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	1acb      	subs	r3, r1, r3
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d306      	bcc.n	800c68c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c67e:	683b      	ldr	r3, [r7, #0]
 800c680:	895b      	ldrh	r3, [r3, #10]
 800c682:	461a      	mov	r2, r3
 800c684:	693b      	ldr	r3, [r7, #16]
 800c686:	1ad3      	subs	r3, r2, r3
 800c688:	60fb      	str	r3, [r7, #12]
 800c68a:	e005      	b.n	800c698 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	895b      	ldrh	r3, [r3, #10]
 800c690:	461a      	mov	r2, r3
 800c692:	697b      	ldr	r3, [r7, #20]
 800c694:	1ad3      	subs	r3, r2, r3
 800c696:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	685a      	ldr	r2, [r3, #4]
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	18d0      	adds	r0, r2, r3
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	685a      	ldr	r2, [r3, #4]
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	4413      	add	r3, r2
 800c6a8:	68fa      	ldr	r2, [r7, #12]
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	f00a fc6d 	bl	8016f8a <memcpy>
    offset_to += len;
 800c6b0:	697a      	ldr	r2, [r7, #20]
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c6b8:	693a      	ldr	r2, [r7, #16]
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	4413      	add	r3, r2
 800c6be:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	895b      	ldrh	r3, [r3, #10]
 800c6c4:	461a      	mov	r2, r3
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	4293      	cmp	r3, r2
 800c6ca:	d906      	bls.n	800c6da <pbuf_copy+0xb2>
 800c6cc:	4b38      	ldr	r3, [pc, #224]	; (800c7b0 <pbuf_copy+0x188>)
 800c6ce:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c6d2:	493a      	ldr	r1, [pc, #232]	; (800c7bc <pbuf_copy+0x194>)
 800c6d4:	4838      	ldr	r0, [pc, #224]	; (800c7b8 <pbuf_copy+0x190>)
 800c6d6:	f00a fd03 	bl	80170e0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c6da:	683b      	ldr	r3, [r7, #0]
 800c6dc:	895b      	ldrh	r3, [r3, #10]
 800c6de:	461a      	mov	r2, r3
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	4293      	cmp	r3, r2
 800c6e4:	d906      	bls.n	800c6f4 <pbuf_copy+0xcc>
 800c6e6:	4b32      	ldr	r3, [pc, #200]	; (800c7b0 <pbuf_copy+0x188>)
 800c6e8:	f240 32da 	movw	r2, #986	; 0x3da
 800c6ec:	4934      	ldr	r1, [pc, #208]	; (800c7c0 <pbuf_copy+0x198>)
 800c6ee:	4832      	ldr	r0, [pc, #200]	; (800c7b8 <pbuf_copy+0x190>)
 800c6f0:	f00a fcf6 	bl	80170e0 <iprintf>
    if (offset_from >= p_from->len) {
 800c6f4:	683b      	ldr	r3, [r7, #0]
 800c6f6:	895b      	ldrh	r3, [r3, #10]
 800c6f8:	461a      	mov	r2, r3
 800c6fa:	693b      	ldr	r3, [r7, #16]
 800c6fc:	4293      	cmp	r3, r2
 800c6fe:	d304      	bcc.n	800c70a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c700:	2300      	movs	r3, #0
 800c702:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	681b      	ldr	r3, [r3, #0]
 800c708:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	895b      	ldrh	r3, [r3, #10]
 800c70e:	461a      	mov	r2, r3
 800c710:	697b      	ldr	r3, [r7, #20]
 800c712:	4293      	cmp	r3, r2
 800c714:	d114      	bne.n	800c740 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c716:	2300      	movs	r3, #0
 800c718:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d10c      	bne.n	800c740 <pbuf_copy+0x118>
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	2b00      	cmp	r3, #0
 800c72a:	d009      	beq.n	800c740 <pbuf_copy+0x118>
 800c72c:	4b20      	ldr	r3, [pc, #128]	; (800c7b0 <pbuf_copy+0x188>)
 800c72e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c732:	4924      	ldr	r1, [pc, #144]	; (800c7c4 <pbuf_copy+0x19c>)
 800c734:	4820      	ldr	r0, [pc, #128]	; (800c7b8 <pbuf_copy+0x190>)
 800c736:	f00a fcd3 	bl	80170e0 <iprintf>
 800c73a:	f06f 030f 	mvn.w	r3, #15
 800c73e:	e032      	b.n	800c7a6 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c740:	683b      	ldr	r3, [r7, #0]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d013      	beq.n	800c76e <pbuf_copy+0x146>
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	895a      	ldrh	r2, [r3, #10]
 800c74a:	683b      	ldr	r3, [r7, #0]
 800c74c:	891b      	ldrh	r3, [r3, #8]
 800c74e:	429a      	cmp	r2, r3
 800c750:	d10d      	bne.n	800c76e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	2b00      	cmp	r3, #0
 800c758:	d009      	beq.n	800c76e <pbuf_copy+0x146>
 800c75a:	4b15      	ldr	r3, [pc, #84]	; (800c7b0 <pbuf_copy+0x188>)
 800c75c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c760:	4919      	ldr	r1, [pc, #100]	; (800c7c8 <pbuf_copy+0x1a0>)
 800c762:	4815      	ldr	r0, [pc, #84]	; (800c7b8 <pbuf_copy+0x190>)
 800c764:	f00a fcbc 	bl	80170e0 <iprintf>
 800c768:	f06f 0305 	mvn.w	r3, #5
 800c76c:	e01b      	b.n	800c7a6 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2b00      	cmp	r3, #0
 800c772:	d013      	beq.n	800c79c <pbuf_copy+0x174>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	895a      	ldrh	r2, [r3, #10]
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	891b      	ldrh	r3, [r3, #8]
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d10d      	bne.n	800c79c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	2b00      	cmp	r3, #0
 800c786:	d009      	beq.n	800c79c <pbuf_copy+0x174>
 800c788:	4b09      	ldr	r3, [pc, #36]	; (800c7b0 <pbuf_copy+0x188>)
 800c78a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c78e:	490e      	ldr	r1, [pc, #56]	; (800c7c8 <pbuf_copy+0x1a0>)
 800c790:	4809      	ldr	r0, [pc, #36]	; (800c7b8 <pbuf_copy+0x190>)
 800c792:	f00a fca5 	bl	80170e0 <iprintf>
 800c796:	f06f 0305 	mvn.w	r3, #5
 800c79a:	e004      	b.n	800c7a6 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	f47f af61 	bne.w	800c666 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c7a4:	2300      	movs	r3, #0
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3718      	adds	r7, #24
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	bd80      	pop	{r7, pc}
 800c7ae:	bf00      	nop
 800c7b0:	080187b8 	.word	0x080187b8
 800c7b4:	08018a60 	.word	0x08018a60
 800c7b8:	08018818 	.word	0x08018818
 800c7bc:	08018a90 	.word	0x08018a90
 800c7c0:	08018aa8 	.word	0x08018aa8
 800c7c4:	08018ac4 	.word	0x08018ac4
 800c7c8:	08018ad4 	.word	0x08018ad4

0800c7cc <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c7cc:	b580      	push	{r7, lr}
 800c7ce:	b088      	sub	sp, #32
 800c7d0:	af00      	add	r7, sp, #0
 800c7d2:	60f8      	str	r0, [r7, #12]
 800c7d4:	60b9      	str	r1, [r7, #8]
 800c7d6:	4611      	mov	r1, r2
 800c7d8:	461a      	mov	r2, r3
 800c7da:	460b      	mov	r3, r1
 800c7dc:	80fb      	strh	r3, [r7, #6]
 800c7de:	4613      	mov	r3, r2
 800c7e0:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d108      	bne.n	800c802 <pbuf_copy_partial+0x36>
 800c7f0:	4b2b      	ldr	r3, [pc, #172]	; (800c8a0 <pbuf_copy_partial+0xd4>)
 800c7f2:	f240 420a 	movw	r2, #1034	; 0x40a
 800c7f6:	492b      	ldr	r1, [pc, #172]	; (800c8a4 <pbuf_copy_partial+0xd8>)
 800c7f8:	482b      	ldr	r0, [pc, #172]	; (800c8a8 <pbuf_copy_partial+0xdc>)
 800c7fa:	f00a fc71 	bl	80170e0 <iprintf>
 800c7fe:	2300      	movs	r3, #0
 800c800:	e04a      	b.n	800c898 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d108      	bne.n	800c81a <pbuf_copy_partial+0x4e>
 800c808:	4b25      	ldr	r3, [pc, #148]	; (800c8a0 <pbuf_copy_partial+0xd4>)
 800c80a:	f240 420b 	movw	r2, #1035	; 0x40b
 800c80e:	4927      	ldr	r1, [pc, #156]	; (800c8ac <pbuf_copy_partial+0xe0>)
 800c810:	4825      	ldr	r0, [pc, #148]	; (800c8a8 <pbuf_copy_partial+0xdc>)
 800c812:	f00a fc65 	bl	80170e0 <iprintf>
 800c816:	2300      	movs	r3, #0
 800c818:	e03e      	b.n	800c898 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	61fb      	str	r3, [r7, #28]
 800c81e:	e034      	b.n	800c88a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c820:	88bb      	ldrh	r3, [r7, #4]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00a      	beq.n	800c83c <pbuf_copy_partial+0x70>
 800c826:	69fb      	ldr	r3, [r7, #28]
 800c828:	895b      	ldrh	r3, [r3, #10]
 800c82a:	88ba      	ldrh	r2, [r7, #4]
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d305      	bcc.n	800c83c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c830:	69fb      	ldr	r3, [r7, #28]
 800c832:	895b      	ldrh	r3, [r3, #10]
 800c834:	88ba      	ldrh	r2, [r7, #4]
 800c836:	1ad3      	subs	r3, r2, r3
 800c838:	80bb      	strh	r3, [r7, #4]
 800c83a:	e023      	b.n	800c884 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	895a      	ldrh	r2, [r3, #10]
 800c840:	88bb      	ldrh	r3, [r7, #4]
 800c842:	1ad3      	subs	r3, r2, r3
 800c844:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c846:	8b3a      	ldrh	r2, [r7, #24]
 800c848:	88fb      	ldrh	r3, [r7, #6]
 800c84a:	429a      	cmp	r2, r3
 800c84c:	d901      	bls.n	800c852 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c84e:	88fb      	ldrh	r3, [r7, #6]
 800c850:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c852:	8b7b      	ldrh	r3, [r7, #26]
 800c854:	68ba      	ldr	r2, [r7, #8]
 800c856:	18d0      	adds	r0, r2, r3
 800c858:	69fb      	ldr	r3, [r7, #28]
 800c85a:	685a      	ldr	r2, [r3, #4]
 800c85c:	88bb      	ldrh	r3, [r7, #4]
 800c85e:	4413      	add	r3, r2
 800c860:	8b3a      	ldrh	r2, [r7, #24]
 800c862:	4619      	mov	r1, r3
 800c864:	f00a fb91 	bl	8016f8a <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c868:	8afa      	ldrh	r2, [r7, #22]
 800c86a:	8b3b      	ldrh	r3, [r7, #24]
 800c86c:	4413      	add	r3, r2
 800c86e:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c870:	8b7a      	ldrh	r2, [r7, #26]
 800c872:	8b3b      	ldrh	r3, [r7, #24]
 800c874:	4413      	add	r3, r2
 800c876:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c878:	88fa      	ldrh	r2, [r7, #6]
 800c87a:	8b3b      	ldrh	r3, [r7, #24]
 800c87c:	1ad3      	subs	r3, r2, r3
 800c87e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c880:	2300      	movs	r3, #0
 800c882:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	61fb      	str	r3, [r7, #28]
 800c88a:	88fb      	ldrh	r3, [r7, #6]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d002      	beq.n	800c896 <pbuf_copy_partial+0xca>
 800c890:	69fb      	ldr	r3, [r7, #28]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d1c4      	bne.n	800c820 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c896:	8afb      	ldrh	r3, [r7, #22]
}
 800c898:	4618      	mov	r0, r3
 800c89a:	3720      	adds	r7, #32
 800c89c:	46bd      	mov	sp, r7
 800c89e:	bd80      	pop	{r7, pc}
 800c8a0:	080187b8 	.word	0x080187b8
 800c8a4:	08018b00 	.word	0x08018b00
 800c8a8:	08018818 	.word	0x08018818
 800c8ac:	08018b20 	.word	0x08018b20

0800c8b0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c8b0:	b580      	push	{r7, lr}
 800c8b2:	b084      	sub	sp, #16
 800c8b4:	af00      	add	r7, sp, #0
 800c8b6:	4603      	mov	r3, r0
 800c8b8:	603a      	str	r2, [r7, #0]
 800c8ba:	71fb      	strb	r3, [r7, #7]
 800c8bc:	460b      	mov	r3, r1
 800c8be:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c8c0:	683b      	ldr	r3, [r7, #0]
 800c8c2:	8919      	ldrh	r1, [r3, #8]
 800c8c4:	88ba      	ldrh	r2, [r7, #4]
 800c8c6:	79fb      	ldrb	r3, [r7, #7]
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	f7ff fa95 	bl	800bdf8 <pbuf_alloc>
 800c8ce:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d101      	bne.n	800c8da <pbuf_clone+0x2a>
    return NULL;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	e011      	b.n	800c8fe <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c8da:	6839      	ldr	r1, [r7, #0]
 800c8dc:	68f8      	ldr	r0, [r7, #12]
 800c8de:	f7ff fea3 	bl	800c628 <pbuf_copy>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c8e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d006      	beq.n	800c8fc <pbuf_clone+0x4c>
 800c8ee:	4b06      	ldr	r3, [pc, #24]	; (800c908 <pbuf_clone+0x58>)
 800c8f0:	f240 5224 	movw	r2, #1316	; 0x524
 800c8f4:	4905      	ldr	r1, [pc, #20]	; (800c90c <pbuf_clone+0x5c>)
 800c8f6:	4806      	ldr	r0, [pc, #24]	; (800c910 <pbuf_clone+0x60>)
 800c8f8:	f00a fbf2 	bl	80170e0 <iprintf>
  return q;
 800c8fc:	68fb      	ldr	r3, [r7, #12]
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}
 800c906:	bf00      	nop
 800c908:	080187b8 	.word	0x080187b8
 800c90c:	08018c2c 	.word	0x08018c2c
 800c910:	08018818 	.word	0x08018818

0800c914 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c918:	f00a fbfa 	bl	8017110 <rand>
 800c91c:	4603      	mov	r3, r0
 800c91e:	b29b      	uxth	r3, r3
 800c920:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c924:	b29b      	uxth	r3, r3
 800c926:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c92a:	b29a      	uxth	r2, r3
 800c92c:	4b01      	ldr	r3, [pc, #4]	; (800c934 <tcp_init+0x20>)
 800c92e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c930:	bf00      	nop
 800c932:	bd80      	pop	{r7, pc}
 800c934:	20000024 	.word	0x20000024

0800c938 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c938:	b580      	push	{r7, lr}
 800c93a:	b082      	sub	sp, #8
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	7d1b      	ldrb	r3, [r3, #20]
 800c944:	2b01      	cmp	r3, #1
 800c946:	d105      	bne.n	800c954 <tcp_free+0x1c>
 800c948:	4b06      	ldr	r3, [pc, #24]	; (800c964 <tcp_free+0x2c>)
 800c94a:	22d4      	movs	r2, #212	; 0xd4
 800c94c:	4906      	ldr	r1, [pc, #24]	; (800c968 <tcp_free+0x30>)
 800c94e:	4807      	ldr	r0, [pc, #28]	; (800c96c <tcp_free+0x34>)
 800c950:	f00a fbc6 	bl	80170e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c954:	6879      	ldr	r1, [r7, #4]
 800c956:	2001      	movs	r0, #1
 800c958:	f7fe fc58 	bl	800b20c <memp_free>
}
 800c95c:	bf00      	nop
 800c95e:	3708      	adds	r7, #8
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	08018cb8 	.word	0x08018cb8
 800c968:	08018ce8 	.word	0x08018ce8
 800c96c:	08018cfc 	.word	0x08018cfc

0800c970 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b082      	sub	sp, #8
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	7d1b      	ldrb	r3, [r3, #20]
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d105      	bne.n	800c98c <tcp_free_listen+0x1c>
 800c980:	4b06      	ldr	r3, [pc, #24]	; (800c99c <tcp_free_listen+0x2c>)
 800c982:	22df      	movs	r2, #223	; 0xdf
 800c984:	4906      	ldr	r1, [pc, #24]	; (800c9a0 <tcp_free_listen+0x30>)
 800c986:	4807      	ldr	r0, [pc, #28]	; (800c9a4 <tcp_free_listen+0x34>)
 800c988:	f00a fbaa 	bl	80170e0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c98c:	6879      	ldr	r1, [r7, #4]
 800c98e:	2002      	movs	r0, #2
 800c990:	f7fe fc3c 	bl	800b20c <memp_free>
}
 800c994:	bf00      	nop
 800c996:	3708      	adds	r7, #8
 800c998:	46bd      	mov	sp, r7
 800c99a:	bd80      	pop	{r7, pc}
 800c99c:	08018cb8 	.word	0x08018cb8
 800c9a0:	08018d24 	.word	0x08018d24
 800c9a4:	08018cfc 	.word	0x08018cfc

0800c9a8 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c9ac:	f000 fea2 	bl	800d6f4 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c9b0:	4b07      	ldr	r3, [pc, #28]	; (800c9d0 <tcp_tmr+0x28>)
 800c9b2:	781b      	ldrb	r3, [r3, #0]
 800c9b4:	3301      	adds	r3, #1
 800c9b6:	b2da      	uxtb	r2, r3
 800c9b8:	4b05      	ldr	r3, [pc, #20]	; (800c9d0 <tcp_tmr+0x28>)
 800c9ba:	701a      	strb	r2, [r3, #0]
 800c9bc:	4b04      	ldr	r3, [pc, #16]	; (800c9d0 <tcp_tmr+0x28>)
 800c9be:	781b      	ldrb	r3, [r3, #0]
 800c9c0:	f003 0301 	and.w	r3, r3, #1
 800c9c4:	2b00      	cmp	r3, #0
 800c9c6:	d001      	beq.n	800c9cc <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c9c8:	f000 fb54 	bl	800d074 <tcp_slowtmr>
  }
}
 800c9cc:	bf00      	nop
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	2000f275 	.word	0x2000f275

0800c9d4 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b084      	sub	sp, #16
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
 800c9dc:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c9de:	683b      	ldr	r3, [r7, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d105      	bne.n	800c9f0 <tcp_remove_listener+0x1c>
 800c9e4:	4b0d      	ldr	r3, [pc, #52]	; (800ca1c <tcp_remove_listener+0x48>)
 800c9e6:	22ff      	movs	r2, #255	; 0xff
 800c9e8:	490d      	ldr	r1, [pc, #52]	; (800ca20 <tcp_remove_listener+0x4c>)
 800c9ea:	480e      	ldr	r0, [pc, #56]	; (800ca24 <tcp_remove_listener+0x50>)
 800c9ec:	f00a fb78 	bl	80170e0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	60fb      	str	r3, [r7, #12]
 800c9f4:	e00a      	b.n	800ca0c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c9fa:	683a      	ldr	r2, [r7, #0]
 800c9fc:	429a      	cmp	r2, r3
 800c9fe:	d102      	bne.n	800ca06 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	2200      	movs	r2, #0
 800ca04:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	68db      	ldr	r3, [r3, #12]
 800ca0a:	60fb      	str	r3, [r7, #12]
 800ca0c:	68fb      	ldr	r3, [r7, #12]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1f1      	bne.n	800c9f6 <tcp_remove_listener+0x22>
    }
  }
}
 800ca12:	bf00      	nop
 800ca14:	bf00      	nop
 800ca16:	3710      	adds	r7, #16
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	08018cb8 	.word	0x08018cb8
 800ca20:	08018d40 	.word	0x08018d40
 800ca24:	08018cfc 	.word	0x08018cfc

0800ca28 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800ca28:	b580      	push	{r7, lr}
 800ca2a:	b084      	sub	sp, #16
 800ca2c:	af00      	add	r7, sp, #0
 800ca2e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d106      	bne.n	800ca44 <tcp_listen_closed+0x1c>
 800ca36:	4b14      	ldr	r3, [pc, #80]	; (800ca88 <tcp_listen_closed+0x60>)
 800ca38:	f240 1211 	movw	r2, #273	; 0x111
 800ca3c:	4913      	ldr	r1, [pc, #76]	; (800ca8c <tcp_listen_closed+0x64>)
 800ca3e:	4814      	ldr	r0, [pc, #80]	; (800ca90 <tcp_listen_closed+0x68>)
 800ca40:	f00a fb4e 	bl	80170e0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	7d1b      	ldrb	r3, [r3, #20]
 800ca48:	2b01      	cmp	r3, #1
 800ca4a:	d006      	beq.n	800ca5a <tcp_listen_closed+0x32>
 800ca4c:	4b0e      	ldr	r3, [pc, #56]	; (800ca88 <tcp_listen_closed+0x60>)
 800ca4e:	f44f 7289 	mov.w	r2, #274	; 0x112
 800ca52:	4910      	ldr	r1, [pc, #64]	; (800ca94 <tcp_listen_closed+0x6c>)
 800ca54:	480e      	ldr	r0, [pc, #56]	; (800ca90 <tcp_listen_closed+0x68>)
 800ca56:	f00a fb43 	bl	80170e0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ca5a:	2301      	movs	r3, #1
 800ca5c:	60fb      	str	r3, [r7, #12]
 800ca5e:	e00b      	b.n	800ca78 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800ca60:	4a0d      	ldr	r2, [pc, #52]	; (800ca98 <tcp_listen_closed+0x70>)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	6879      	ldr	r1, [r7, #4]
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	f7ff ffb1 	bl	800c9d4 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	3301      	adds	r3, #1
 800ca76:	60fb      	str	r3, [r7, #12]
 800ca78:	68fb      	ldr	r3, [r7, #12]
 800ca7a:	2b03      	cmp	r3, #3
 800ca7c:	d9f0      	bls.n	800ca60 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800ca7e:	bf00      	nop
 800ca80:	bf00      	nop
 800ca82:	3710      	adds	r7, #16
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}
 800ca88:	08018cb8 	.word	0x08018cb8
 800ca8c:	08018d68 	.word	0x08018d68
 800ca90:	08018cfc 	.word	0x08018cfc
 800ca94:	08018d74 	.word	0x08018d74
 800ca98:	0801b0c0 	.word	0x0801b0c0

0800ca9c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800ca9c:	b5b0      	push	{r4, r5, r7, lr}
 800ca9e:	b088      	sub	sp, #32
 800caa0:	af04      	add	r7, sp, #16
 800caa2:	6078      	str	r0, [r7, #4]
 800caa4:	460b      	mov	r3, r1
 800caa6:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d106      	bne.n	800cabc <tcp_close_shutdown+0x20>
 800caae:	4b63      	ldr	r3, [pc, #396]	; (800cc3c <tcp_close_shutdown+0x1a0>)
 800cab0:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800cab4:	4962      	ldr	r1, [pc, #392]	; (800cc40 <tcp_close_shutdown+0x1a4>)
 800cab6:	4863      	ldr	r0, [pc, #396]	; (800cc44 <tcp_close_shutdown+0x1a8>)
 800cab8:	f00a fb12 	bl	80170e0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cabc:	78fb      	ldrb	r3, [r7, #3]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d066      	beq.n	800cb90 <tcp_close_shutdown+0xf4>
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	7d1b      	ldrb	r3, [r3, #20]
 800cac6:	2b04      	cmp	r3, #4
 800cac8:	d003      	beq.n	800cad2 <tcp_close_shutdown+0x36>
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	7d1b      	ldrb	r3, [r3, #20]
 800cace:	2b07      	cmp	r3, #7
 800cad0:	d15e      	bne.n	800cb90 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d104      	bne.n	800cae4 <tcp_close_shutdown+0x48>
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cade:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cae2:	d055      	beq.n	800cb90 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	8b5b      	ldrh	r3, [r3, #26]
 800cae8:	f003 0310 	and.w	r3, r3, #16
 800caec:	2b00      	cmp	r3, #0
 800caee:	d106      	bne.n	800cafe <tcp_close_shutdown+0x62>
 800caf0:	4b52      	ldr	r3, [pc, #328]	; (800cc3c <tcp_close_shutdown+0x1a0>)
 800caf2:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800caf6:	4954      	ldr	r1, [pc, #336]	; (800cc48 <tcp_close_shutdown+0x1ac>)
 800caf8:	4852      	ldr	r0, [pc, #328]	; (800cc44 <tcp_close_shutdown+0x1a8>)
 800cafa:	f00a faf1 	bl	80170e0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cb06:	687d      	ldr	r5, [r7, #4]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	3304      	adds	r3, #4
 800cb0c:	687a      	ldr	r2, [r7, #4]
 800cb0e:	8ad2      	ldrh	r2, [r2, #22]
 800cb10:	6879      	ldr	r1, [r7, #4]
 800cb12:	8b09      	ldrh	r1, [r1, #24]
 800cb14:	9102      	str	r1, [sp, #8]
 800cb16:	9201      	str	r2, [sp, #4]
 800cb18:	9300      	str	r3, [sp, #0]
 800cb1a:	462b      	mov	r3, r5
 800cb1c:	4622      	mov	r2, r4
 800cb1e:	4601      	mov	r1, r0
 800cb20:	6878      	ldr	r0, [r7, #4]
 800cb22:	f004 fe91 	bl	8011848 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cb26:	6878      	ldr	r0, [r7, #4]
 800cb28:	f001 f8c6 	bl	800dcb8 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cb2c:	4b47      	ldr	r3, [pc, #284]	; (800cc4c <tcp_close_shutdown+0x1b0>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	687a      	ldr	r2, [r7, #4]
 800cb32:	429a      	cmp	r2, r3
 800cb34:	d105      	bne.n	800cb42 <tcp_close_shutdown+0xa6>
 800cb36:	4b45      	ldr	r3, [pc, #276]	; (800cc4c <tcp_close_shutdown+0x1b0>)
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	68db      	ldr	r3, [r3, #12]
 800cb3c:	4a43      	ldr	r2, [pc, #268]	; (800cc4c <tcp_close_shutdown+0x1b0>)
 800cb3e:	6013      	str	r3, [r2, #0]
 800cb40:	e013      	b.n	800cb6a <tcp_close_shutdown+0xce>
 800cb42:	4b42      	ldr	r3, [pc, #264]	; (800cc4c <tcp_close_shutdown+0x1b0>)
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	60fb      	str	r3, [r7, #12]
 800cb48:	e00c      	b.n	800cb64 <tcp_close_shutdown+0xc8>
 800cb4a:	68fb      	ldr	r3, [r7, #12]
 800cb4c:	68db      	ldr	r3, [r3, #12]
 800cb4e:	687a      	ldr	r2, [r7, #4]
 800cb50:	429a      	cmp	r2, r3
 800cb52:	d104      	bne.n	800cb5e <tcp_close_shutdown+0xc2>
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	68da      	ldr	r2, [r3, #12]
 800cb58:	68fb      	ldr	r3, [r7, #12]
 800cb5a:	60da      	str	r2, [r3, #12]
 800cb5c:	e005      	b.n	800cb6a <tcp_close_shutdown+0xce>
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	68db      	ldr	r3, [r3, #12]
 800cb62:	60fb      	str	r3, [r7, #12]
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d1ef      	bne.n	800cb4a <tcp_close_shutdown+0xae>
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	60da      	str	r2, [r3, #12]
 800cb70:	4b37      	ldr	r3, [pc, #220]	; (800cc50 <tcp_close_shutdown+0x1b4>)
 800cb72:	2201      	movs	r2, #1
 800cb74:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800cb76:	4b37      	ldr	r3, [pc, #220]	; (800cc54 <tcp_close_shutdown+0x1b8>)
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	687a      	ldr	r2, [r7, #4]
 800cb7c:	429a      	cmp	r2, r3
 800cb7e:	d102      	bne.n	800cb86 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800cb80:	f003 fd5e 	bl	8010640 <tcp_trigger_input_pcb_close>
 800cb84:	e002      	b.n	800cb8c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800cb86:	6878      	ldr	r0, [r7, #4]
 800cb88:	f7ff fed6 	bl	800c938 <tcp_free>
      }
      return ERR_OK;
 800cb8c:	2300      	movs	r3, #0
 800cb8e:	e050      	b.n	800cc32 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	7d1b      	ldrb	r3, [r3, #20]
 800cb94:	2b02      	cmp	r3, #2
 800cb96:	d03b      	beq.n	800cc10 <tcp_close_shutdown+0x174>
 800cb98:	2b02      	cmp	r3, #2
 800cb9a:	dc44      	bgt.n	800cc26 <tcp_close_shutdown+0x18a>
 800cb9c:	2b00      	cmp	r3, #0
 800cb9e:	d002      	beq.n	800cba6 <tcp_close_shutdown+0x10a>
 800cba0:	2b01      	cmp	r3, #1
 800cba2:	d02a      	beq.n	800cbfa <tcp_close_shutdown+0x15e>
 800cba4:	e03f      	b.n	800cc26 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	8adb      	ldrh	r3, [r3, #22]
 800cbaa:	2b00      	cmp	r3, #0
 800cbac:	d021      	beq.n	800cbf2 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cbae:	4b2a      	ldr	r3, [pc, #168]	; (800cc58 <tcp_close_shutdown+0x1bc>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d105      	bne.n	800cbc4 <tcp_close_shutdown+0x128>
 800cbb8:	4b27      	ldr	r3, [pc, #156]	; (800cc58 <tcp_close_shutdown+0x1bc>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	68db      	ldr	r3, [r3, #12]
 800cbbe:	4a26      	ldr	r2, [pc, #152]	; (800cc58 <tcp_close_shutdown+0x1bc>)
 800cbc0:	6013      	str	r3, [r2, #0]
 800cbc2:	e013      	b.n	800cbec <tcp_close_shutdown+0x150>
 800cbc4:	4b24      	ldr	r3, [pc, #144]	; (800cc58 <tcp_close_shutdown+0x1bc>)
 800cbc6:	681b      	ldr	r3, [r3, #0]
 800cbc8:	60bb      	str	r3, [r7, #8]
 800cbca:	e00c      	b.n	800cbe6 <tcp_close_shutdown+0x14a>
 800cbcc:	68bb      	ldr	r3, [r7, #8]
 800cbce:	68db      	ldr	r3, [r3, #12]
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d104      	bne.n	800cbe0 <tcp_close_shutdown+0x144>
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	68da      	ldr	r2, [r3, #12]
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	60da      	str	r2, [r3, #12]
 800cbde:	e005      	b.n	800cbec <tcp_close_shutdown+0x150>
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	68db      	ldr	r3, [r3, #12]
 800cbe4:	60bb      	str	r3, [r7, #8]
 800cbe6:	68bb      	ldr	r3, [r7, #8]
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	d1ef      	bne.n	800cbcc <tcp_close_shutdown+0x130>
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	2200      	movs	r2, #0
 800cbf0:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cbf2:	6878      	ldr	r0, [r7, #4]
 800cbf4:	f7ff fea0 	bl	800c938 <tcp_free>
      break;
 800cbf8:	e01a      	b.n	800cc30 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cbfa:	6878      	ldr	r0, [r7, #4]
 800cbfc:	f7ff ff14 	bl	800ca28 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cc00:	6879      	ldr	r1, [r7, #4]
 800cc02:	4816      	ldr	r0, [pc, #88]	; (800cc5c <tcp_close_shutdown+0x1c0>)
 800cc04:	f001 f8a8 	bl	800dd58 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f7ff feb1 	bl	800c970 <tcp_free_listen>
      break;
 800cc0e:	e00f      	b.n	800cc30 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cc10:	6879      	ldr	r1, [r7, #4]
 800cc12:	480e      	ldr	r0, [pc, #56]	; (800cc4c <tcp_close_shutdown+0x1b0>)
 800cc14:	f001 f8a0 	bl	800dd58 <tcp_pcb_remove>
 800cc18:	4b0d      	ldr	r3, [pc, #52]	; (800cc50 <tcp_close_shutdown+0x1b4>)
 800cc1a:	2201      	movs	r2, #1
 800cc1c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cc1e:	6878      	ldr	r0, [r7, #4]
 800cc20:	f7ff fe8a 	bl	800c938 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cc24:	e004      	b.n	800cc30 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cc26:	6878      	ldr	r0, [r7, #4]
 800cc28:	f000 f81a 	bl	800cc60 <tcp_close_shutdown_fin>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	e000      	b.n	800cc32 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800cc30:	2300      	movs	r3, #0
}
 800cc32:	4618      	mov	r0, r3
 800cc34:	3710      	adds	r7, #16
 800cc36:	46bd      	mov	sp, r7
 800cc38:	bdb0      	pop	{r4, r5, r7, pc}
 800cc3a:	bf00      	nop
 800cc3c:	08018cb8 	.word	0x08018cb8
 800cc40:	08018d8c 	.word	0x08018d8c
 800cc44:	08018cfc 	.word	0x08018cfc
 800cc48:	08018dac 	.word	0x08018dac
 800cc4c:	2000f26c 	.word	0x2000f26c
 800cc50:	2000f274 	.word	0x2000f274
 800cc54:	2000f2ac 	.word	0x2000f2ac
 800cc58:	2000f264 	.word	0x2000f264
 800cc5c:	2000f268 	.word	0x2000f268

0800cc60 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cc60:	b580      	push	{r7, lr}
 800cc62:	b084      	sub	sp, #16
 800cc64:	af00      	add	r7, sp, #0
 800cc66:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d106      	bne.n	800cc7c <tcp_close_shutdown_fin+0x1c>
 800cc6e:	4b2e      	ldr	r3, [pc, #184]	; (800cd28 <tcp_close_shutdown_fin+0xc8>)
 800cc70:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800cc74:	492d      	ldr	r1, [pc, #180]	; (800cd2c <tcp_close_shutdown_fin+0xcc>)
 800cc76:	482e      	ldr	r0, [pc, #184]	; (800cd30 <tcp_close_shutdown_fin+0xd0>)
 800cc78:	f00a fa32 	bl	80170e0 <iprintf>

  switch (pcb->state) {
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	7d1b      	ldrb	r3, [r3, #20]
 800cc80:	2b07      	cmp	r3, #7
 800cc82:	d020      	beq.n	800ccc6 <tcp_close_shutdown_fin+0x66>
 800cc84:	2b07      	cmp	r3, #7
 800cc86:	dc2b      	bgt.n	800cce0 <tcp_close_shutdown_fin+0x80>
 800cc88:	2b03      	cmp	r3, #3
 800cc8a:	d002      	beq.n	800cc92 <tcp_close_shutdown_fin+0x32>
 800cc8c:	2b04      	cmp	r3, #4
 800cc8e:	d00d      	beq.n	800ccac <tcp_close_shutdown_fin+0x4c>
 800cc90:	e026      	b.n	800cce0 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800cc92:	6878      	ldr	r0, [r7, #4]
 800cc94:	f003 fee6 	bl	8010a64 <tcp_send_fin>
 800cc98:	4603      	mov	r3, r0
 800cc9a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800cc9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d11f      	bne.n	800cce4 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2205      	movs	r2, #5
 800cca8:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ccaa:	e01b      	b.n	800cce4 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f003 fed9 	bl	8010a64 <tcp_send_fin>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ccb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d114      	bne.n	800cce8 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2205      	movs	r2, #5
 800ccc2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ccc4:	e010      	b.n	800cce8 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f003 fecc 	bl	8010a64 <tcp_send_fin>
 800cccc:	4603      	mov	r3, r0
 800ccce:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ccd0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d109      	bne.n	800ccec <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2209      	movs	r2, #9
 800ccdc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ccde:	e005      	b.n	800ccec <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800cce0:	2300      	movs	r3, #0
 800cce2:	e01c      	b.n	800cd1e <tcp_close_shutdown_fin+0xbe>
      break;
 800cce4:	bf00      	nop
 800cce6:	e002      	b.n	800ccee <tcp_close_shutdown_fin+0x8e>
      break;
 800cce8:	bf00      	nop
 800ccea:	e000      	b.n	800ccee <tcp_close_shutdown_fin+0x8e>
      break;
 800ccec:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ccee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d103      	bne.n	800ccfe <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ccf6:	6878      	ldr	r0, [r7, #4]
 800ccf8:	f003 fff2 	bl	8010ce0 <tcp_output>
 800ccfc:	e00d      	b.n	800cd1a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ccfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd02:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd06:	d108      	bne.n	800cd1a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	8b5b      	ldrh	r3, [r3, #26]
 800cd0c:	f043 0308 	orr.w	r3, r3, #8
 800cd10:	b29a      	uxth	r2, r3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cd16:	2300      	movs	r3, #0
 800cd18:	e001      	b.n	800cd1e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800cd1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cd1e:	4618      	mov	r0, r3
 800cd20:	3710      	adds	r7, #16
 800cd22:	46bd      	mov	sp, r7
 800cd24:	bd80      	pop	{r7, pc}
 800cd26:	bf00      	nop
 800cd28:	08018cb8 	.word	0x08018cb8
 800cd2c:	08018d68 	.word	0x08018d68
 800cd30:	08018cfc 	.word	0x08018cfc

0800cd34 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cd34:	b580      	push	{r7, lr}
 800cd36:	b082      	sub	sp, #8
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d109      	bne.n	800cd56 <tcp_close+0x22>
 800cd42:	4b0f      	ldr	r3, [pc, #60]	; (800cd80 <tcp_close+0x4c>)
 800cd44:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cd48:	490e      	ldr	r1, [pc, #56]	; (800cd84 <tcp_close+0x50>)
 800cd4a:	480f      	ldr	r0, [pc, #60]	; (800cd88 <tcp_close+0x54>)
 800cd4c:	f00a f9c8 	bl	80170e0 <iprintf>
 800cd50:	f06f 030f 	mvn.w	r3, #15
 800cd54:	e00f      	b.n	800cd76 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	7d1b      	ldrb	r3, [r3, #20]
 800cd5a:	2b01      	cmp	r3, #1
 800cd5c:	d006      	beq.n	800cd6c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	8b5b      	ldrh	r3, [r3, #26]
 800cd62:	f043 0310 	orr.w	r3, r3, #16
 800cd66:	b29a      	uxth	r2, r3
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cd6c:	2101      	movs	r1, #1
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f7ff fe94 	bl	800ca9c <tcp_close_shutdown>
 800cd74:	4603      	mov	r3, r0
}
 800cd76:	4618      	mov	r0, r3
 800cd78:	3708      	adds	r7, #8
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	08018cb8 	.word	0x08018cb8
 800cd84:	08018dc8 	.word	0x08018dc8
 800cd88:	08018cfc 	.word	0x08018cfc

0800cd8c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cd8c:	b580      	push	{r7, lr}
 800cd8e:	b08e      	sub	sp, #56	; 0x38
 800cd90:	af04      	add	r7, sp, #16
 800cd92:	6078      	str	r0, [r7, #4]
 800cd94:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d107      	bne.n	800cdac <tcp_abandon+0x20>
 800cd9c:	4b52      	ldr	r3, [pc, #328]	; (800cee8 <tcp_abandon+0x15c>)
 800cd9e:	f240 223d 	movw	r2, #573	; 0x23d
 800cda2:	4952      	ldr	r1, [pc, #328]	; (800ceec <tcp_abandon+0x160>)
 800cda4:	4852      	ldr	r0, [pc, #328]	; (800cef0 <tcp_abandon+0x164>)
 800cda6:	f00a f99b 	bl	80170e0 <iprintf>
 800cdaa:	e099      	b.n	800cee0 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	7d1b      	ldrb	r3, [r3, #20]
 800cdb0:	2b01      	cmp	r3, #1
 800cdb2:	d106      	bne.n	800cdc2 <tcp_abandon+0x36>
 800cdb4:	4b4c      	ldr	r3, [pc, #304]	; (800cee8 <tcp_abandon+0x15c>)
 800cdb6:	f44f 7210 	mov.w	r2, #576	; 0x240
 800cdba:	494e      	ldr	r1, [pc, #312]	; (800cef4 <tcp_abandon+0x168>)
 800cdbc:	484c      	ldr	r0, [pc, #304]	; (800cef0 <tcp_abandon+0x164>)
 800cdbe:	f00a f98f 	bl	80170e0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	7d1b      	ldrb	r3, [r3, #20]
 800cdc6:	2b0a      	cmp	r3, #10
 800cdc8:	d107      	bne.n	800cdda <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cdca:	6879      	ldr	r1, [r7, #4]
 800cdcc:	484a      	ldr	r0, [pc, #296]	; (800cef8 <tcp_abandon+0x16c>)
 800cdce:	f000 ffc3 	bl	800dd58 <tcp_pcb_remove>
    tcp_free(pcb);
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f7ff fdb0 	bl	800c938 <tcp_free>
 800cdd8:	e082      	b.n	800cee0 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cdda:	2300      	movs	r3, #0
 800cddc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cdde:	2300      	movs	r3, #0
 800cde0:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cde6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdec:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdf4:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	691b      	ldr	r3, [r3, #16]
 800cdfa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	7d1b      	ldrb	r3, [r3, #20]
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d126      	bne.n	800ce52 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	8adb      	ldrh	r3, [r3, #22]
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d02e      	beq.n	800ce6a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800ce0c:	4b3b      	ldr	r3, [pc, #236]	; (800cefc <tcp_abandon+0x170>)
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	687a      	ldr	r2, [r7, #4]
 800ce12:	429a      	cmp	r2, r3
 800ce14:	d105      	bne.n	800ce22 <tcp_abandon+0x96>
 800ce16:	4b39      	ldr	r3, [pc, #228]	; (800cefc <tcp_abandon+0x170>)
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	68db      	ldr	r3, [r3, #12]
 800ce1c:	4a37      	ldr	r2, [pc, #220]	; (800cefc <tcp_abandon+0x170>)
 800ce1e:	6013      	str	r3, [r2, #0]
 800ce20:	e013      	b.n	800ce4a <tcp_abandon+0xbe>
 800ce22:	4b36      	ldr	r3, [pc, #216]	; (800cefc <tcp_abandon+0x170>)
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	61fb      	str	r3, [r7, #28]
 800ce28:	e00c      	b.n	800ce44 <tcp_abandon+0xb8>
 800ce2a:	69fb      	ldr	r3, [r7, #28]
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	687a      	ldr	r2, [r7, #4]
 800ce30:	429a      	cmp	r2, r3
 800ce32:	d104      	bne.n	800ce3e <tcp_abandon+0xb2>
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	68da      	ldr	r2, [r3, #12]
 800ce38:	69fb      	ldr	r3, [r7, #28]
 800ce3a:	60da      	str	r2, [r3, #12]
 800ce3c:	e005      	b.n	800ce4a <tcp_abandon+0xbe>
 800ce3e:	69fb      	ldr	r3, [r7, #28]
 800ce40:	68db      	ldr	r3, [r3, #12]
 800ce42:	61fb      	str	r3, [r7, #28]
 800ce44:	69fb      	ldr	r3, [r7, #28]
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d1ef      	bne.n	800ce2a <tcp_abandon+0x9e>
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2200      	movs	r2, #0
 800ce4e:	60da      	str	r2, [r3, #12]
 800ce50:	e00b      	b.n	800ce6a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800ce52:	683b      	ldr	r3, [r7, #0]
 800ce54:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	8adb      	ldrh	r3, [r3, #22]
 800ce5a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800ce5c:	6879      	ldr	r1, [r7, #4]
 800ce5e:	4828      	ldr	r0, [pc, #160]	; (800cf00 <tcp_abandon+0x174>)
 800ce60:	f000 ff7a 	bl	800dd58 <tcp_pcb_remove>
 800ce64:	4b27      	ldr	r3, [pc, #156]	; (800cf04 <tcp_abandon+0x178>)
 800ce66:	2201      	movs	r2, #1
 800ce68:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d004      	beq.n	800ce7c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ce72:	687b      	ldr	r3, [r7, #4]
 800ce74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ce76:	4618      	mov	r0, r3
 800ce78:	f000 fd1c 	bl	800d8b4 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d004      	beq.n	800ce8e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ce88:	4618      	mov	r0, r3
 800ce8a:	f000 fd13 	bl	800d8b4 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d004      	beq.n	800cea0 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	f000 fd0a 	bl	800d8b4 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800cea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d00e      	beq.n	800cec4 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cea6:	6879      	ldr	r1, [r7, #4]
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	3304      	adds	r3, #4
 800ceac:	687a      	ldr	r2, [r7, #4]
 800ceae:	8b12      	ldrh	r2, [r2, #24]
 800ceb0:	9202      	str	r2, [sp, #8]
 800ceb2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ceb4:	9201      	str	r2, [sp, #4]
 800ceb6:	9300      	str	r3, [sp, #0]
 800ceb8:	460b      	mov	r3, r1
 800ceba:	697a      	ldr	r2, [r7, #20]
 800cebc:	69b9      	ldr	r1, [r7, #24]
 800cebe:	6878      	ldr	r0, [r7, #4]
 800cec0:	f004 fcc2 	bl	8011848 <tcp_rst>
    }
    last_state = pcb->state;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	7d1b      	ldrb	r3, [r3, #20]
 800cec8:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800ceca:	6878      	ldr	r0, [r7, #4]
 800cecc:	f7ff fd34 	bl	800c938 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800ced0:	693b      	ldr	r3, [r7, #16]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d004      	beq.n	800cee0 <tcp_abandon+0x154>
 800ced6:	693b      	ldr	r3, [r7, #16]
 800ced8:	f06f 010c 	mvn.w	r1, #12
 800cedc:	68f8      	ldr	r0, [r7, #12]
 800cede:	4798      	blx	r3
  }
}
 800cee0:	3728      	adds	r7, #40	; 0x28
 800cee2:	46bd      	mov	sp, r7
 800cee4:	bd80      	pop	{r7, pc}
 800cee6:	bf00      	nop
 800cee8:	08018cb8 	.word	0x08018cb8
 800ceec:	08018dfc 	.word	0x08018dfc
 800cef0:	08018cfc 	.word	0x08018cfc
 800cef4:	08018e18 	.word	0x08018e18
 800cef8:	2000f270 	.word	0x2000f270
 800cefc:	2000f264 	.word	0x2000f264
 800cf00:	2000f26c 	.word	0x2000f26c
 800cf04:	2000f274 	.word	0x2000f274

0800cf08 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b082      	sub	sp, #8
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800cf10:	2101      	movs	r1, #1
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7ff ff3a 	bl	800cd8c <tcp_abandon>
}
 800cf18:	bf00      	nop
 800cf1a:	3708      	adds	r7, #8
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	bd80      	pop	{r7, pc}

0800cf20 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800cf20:	b580      	push	{r7, lr}
 800cf22:	b084      	sub	sp, #16
 800cf24:	af00      	add	r7, sp, #0
 800cf26:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d106      	bne.n	800cf3c <tcp_update_rcv_ann_wnd+0x1c>
 800cf2e:	4b25      	ldr	r3, [pc, #148]	; (800cfc4 <tcp_update_rcv_ann_wnd+0xa4>)
 800cf30:	f240 32a6 	movw	r2, #934	; 0x3a6
 800cf34:	4924      	ldr	r1, [pc, #144]	; (800cfc8 <tcp_update_rcv_ann_wnd+0xa8>)
 800cf36:	4825      	ldr	r0, [pc, #148]	; (800cfcc <tcp_update_rcv_ann_wnd+0xac>)
 800cf38:	f00a f8d2 	bl	80170e0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf40:	687a      	ldr	r2, [r7, #4]
 800cf42:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800cf44:	4413      	add	r3, r2
 800cf46:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800cf50:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800cf54:	bf28      	it	cs
 800cf56:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800cf5a:	b292      	uxth	r2, r2
 800cf5c:	4413      	add	r3, r2
 800cf5e:	68fa      	ldr	r2, [r7, #12]
 800cf60:	1ad3      	subs	r3, r2, r3
 800cf62:	2b00      	cmp	r3, #0
 800cf64:	db08      	blt.n	800cf78 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf72:	68fa      	ldr	r2, [r7, #12]
 800cf74:	1ad3      	subs	r3, r2, r3
 800cf76:	e020      	b.n	800cfba <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf80:	1ad3      	subs	r3, r2, r3
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	dd03      	ble.n	800cf8e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	2200      	movs	r2, #0
 800cf8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800cf8c:	e014      	b.n	800cfb8 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf96:	1ad3      	subs	r3, r2, r3
 800cf98:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cfa0:	d306      	bcc.n	800cfb0 <tcp_update_rcv_ann_wnd+0x90>
 800cfa2:	4b08      	ldr	r3, [pc, #32]	; (800cfc4 <tcp_update_rcv_ann_wnd+0xa4>)
 800cfa4:	f240 32b6 	movw	r2, #950	; 0x3b6
 800cfa8:	4909      	ldr	r1, [pc, #36]	; (800cfd0 <tcp_update_rcv_ann_wnd+0xb0>)
 800cfaa:	4808      	ldr	r0, [pc, #32]	; (800cfcc <tcp_update_rcv_ann_wnd+0xac>)
 800cfac:	f00a f898 	bl	80170e0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800cfb0:	68bb      	ldr	r3, [r7, #8]
 800cfb2:	b29a      	uxth	r2, r3
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800cfb8:	2300      	movs	r3, #0
  }
}
 800cfba:	4618      	mov	r0, r3
 800cfbc:	3710      	adds	r7, #16
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	bd80      	pop	{r7, pc}
 800cfc2:	bf00      	nop
 800cfc4:	08018cb8 	.word	0x08018cb8
 800cfc8:	08018f14 	.word	0x08018f14
 800cfcc:	08018cfc 	.word	0x08018cfc
 800cfd0:	08018f38 	.word	0x08018f38

0800cfd4 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800cfd4:	b580      	push	{r7, lr}
 800cfd6:	b084      	sub	sp, #16
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
 800cfdc:	460b      	mov	r3, r1
 800cfde:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d107      	bne.n	800cff6 <tcp_recved+0x22>
 800cfe6:	4b1f      	ldr	r3, [pc, #124]	; (800d064 <tcp_recved+0x90>)
 800cfe8:	f240 32cf 	movw	r2, #975	; 0x3cf
 800cfec:	491e      	ldr	r1, [pc, #120]	; (800d068 <tcp_recved+0x94>)
 800cfee:	481f      	ldr	r0, [pc, #124]	; (800d06c <tcp_recved+0x98>)
 800cff0:	f00a f876 	bl	80170e0 <iprintf>
 800cff4:	e032      	b.n	800d05c <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	7d1b      	ldrb	r3, [r3, #20]
 800cffa:	2b01      	cmp	r3, #1
 800cffc:	d106      	bne.n	800d00c <tcp_recved+0x38>
 800cffe:	4b19      	ldr	r3, [pc, #100]	; (800d064 <tcp_recved+0x90>)
 800d000:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d004:	491a      	ldr	r1, [pc, #104]	; (800d070 <tcp_recved+0x9c>)
 800d006:	4819      	ldr	r0, [pc, #100]	; (800d06c <tcp_recved+0x98>)
 800d008:	f00a f86a 	bl	80170e0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d010:	887b      	ldrh	r3, [r7, #2]
 800d012:	4413      	add	r3, r2
 800d014:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d016:	89fb      	ldrh	r3, [r7, #14]
 800d018:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d01c:	d804      	bhi.n	800d028 <tcp_recved+0x54>
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d022:	89fa      	ldrh	r2, [r7, #14]
 800d024:	429a      	cmp	r2, r3
 800d026:	d204      	bcs.n	800d032 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d02e:	851a      	strh	r2, [r3, #40]	; 0x28
 800d030:	e002      	b.n	800d038 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	89fa      	ldrh	r2, [r7, #14]
 800d036:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d038:	6878      	ldr	r0, [r7, #4]
 800d03a:	f7ff ff71 	bl	800cf20 <tcp_update_rcv_ann_wnd>
 800d03e:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d040:	68bb      	ldr	r3, [r7, #8]
 800d042:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d046:	d309      	bcc.n	800d05c <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	8b5b      	ldrh	r3, [r3, #26]
 800d04c:	f043 0302 	orr.w	r3, r3, #2
 800d050:	b29a      	uxth	r2, r3
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d056:	6878      	ldr	r0, [r7, #4]
 800d058:	f003 fe42 	bl	8010ce0 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d05c:	3710      	adds	r7, #16
 800d05e:	46bd      	mov	sp, r7
 800d060:	bd80      	pop	{r7, pc}
 800d062:	bf00      	nop
 800d064:	08018cb8 	.word	0x08018cb8
 800d068:	08018f54 	.word	0x08018f54
 800d06c:	08018cfc 	.word	0x08018cfc
 800d070:	08018f6c 	.word	0x08018f6c

0800d074 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d074:	b5b0      	push	{r4, r5, r7, lr}
 800d076:	b090      	sub	sp, #64	; 0x40
 800d078:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d07a:	2300      	movs	r3, #0
 800d07c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d080:	4b94      	ldr	r3, [pc, #592]	; (800d2d4 <tcp_slowtmr+0x260>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	3301      	adds	r3, #1
 800d086:	4a93      	ldr	r2, [pc, #588]	; (800d2d4 <tcp_slowtmr+0x260>)
 800d088:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d08a:	4b93      	ldr	r3, [pc, #588]	; (800d2d8 <tcp_slowtmr+0x264>)
 800d08c:	781b      	ldrb	r3, [r3, #0]
 800d08e:	3301      	adds	r3, #1
 800d090:	b2da      	uxtb	r2, r3
 800d092:	4b91      	ldr	r3, [pc, #580]	; (800d2d8 <tcp_slowtmr+0x264>)
 800d094:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d096:	2300      	movs	r3, #0
 800d098:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d09a:	4b90      	ldr	r3, [pc, #576]	; (800d2dc <tcp_slowtmr+0x268>)
 800d09c:	681b      	ldr	r3, [r3, #0]
 800d09e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d0a0:	e29d      	b.n	800d5de <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0a4:	7d1b      	ldrb	r3, [r3, #20]
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d106      	bne.n	800d0b8 <tcp_slowtmr+0x44>
 800d0aa:	4b8d      	ldr	r3, [pc, #564]	; (800d2e0 <tcp_slowtmr+0x26c>)
 800d0ac:	f240 42be 	movw	r2, #1214	; 0x4be
 800d0b0:	498c      	ldr	r1, [pc, #560]	; (800d2e4 <tcp_slowtmr+0x270>)
 800d0b2:	488d      	ldr	r0, [pc, #564]	; (800d2e8 <tcp_slowtmr+0x274>)
 800d0b4:	f00a f814 	bl	80170e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0ba:	7d1b      	ldrb	r3, [r3, #20]
 800d0bc:	2b01      	cmp	r3, #1
 800d0be:	d106      	bne.n	800d0ce <tcp_slowtmr+0x5a>
 800d0c0:	4b87      	ldr	r3, [pc, #540]	; (800d2e0 <tcp_slowtmr+0x26c>)
 800d0c2:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d0c6:	4989      	ldr	r1, [pc, #548]	; (800d2ec <tcp_slowtmr+0x278>)
 800d0c8:	4887      	ldr	r0, [pc, #540]	; (800d2e8 <tcp_slowtmr+0x274>)
 800d0ca:	f00a f809 	bl	80170e0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d0ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0d0:	7d1b      	ldrb	r3, [r3, #20]
 800d0d2:	2b0a      	cmp	r3, #10
 800d0d4:	d106      	bne.n	800d0e4 <tcp_slowtmr+0x70>
 800d0d6:	4b82      	ldr	r3, [pc, #520]	; (800d2e0 <tcp_slowtmr+0x26c>)
 800d0d8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d0dc:	4984      	ldr	r1, [pc, #528]	; (800d2f0 <tcp_slowtmr+0x27c>)
 800d0de:	4882      	ldr	r0, [pc, #520]	; (800d2e8 <tcp_slowtmr+0x274>)
 800d0e0:	f009 fffe 	bl	80170e0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d0e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e6:	7f9a      	ldrb	r2, [r3, #30]
 800d0e8:	4b7b      	ldr	r3, [pc, #492]	; (800d2d8 <tcp_slowtmr+0x264>)
 800d0ea:	781b      	ldrb	r3, [r3, #0]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d105      	bne.n	800d0fc <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d0fa:	e270      	b.n	800d5de <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d0fc:	4b76      	ldr	r3, [pc, #472]	; (800d2d8 <tcp_slowtmr+0x264>)
 800d0fe:	781a      	ldrb	r2, [r3, #0]
 800d100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d102:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d104:	2300      	movs	r3, #0
 800d106:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d10a:	2300      	movs	r3, #0
 800d10c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d112:	7d1b      	ldrb	r3, [r3, #20]
 800d114:	2b02      	cmp	r3, #2
 800d116:	d10a      	bne.n	800d12e <tcp_slowtmr+0xba>
 800d118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d11a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d11e:	2b05      	cmp	r3, #5
 800d120:	d905      	bls.n	800d12e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d122:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d126:	3301      	adds	r3, #1
 800d128:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d12c:	e11e      	b.n	800d36c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d130:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d134:	2b0b      	cmp	r3, #11
 800d136:	d905      	bls.n	800d144 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d138:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d13c:	3301      	adds	r3, #1
 800d13e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d142:	e113      	b.n	800d36c <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d146:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d075      	beq.n	800d23a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d152:	2b00      	cmp	r3, #0
 800d154:	d006      	beq.n	800d164 <tcp_slowtmr+0xf0>
 800d156:	4b62      	ldr	r3, [pc, #392]	; (800d2e0 <tcp_slowtmr+0x26c>)
 800d158:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d15c:	4965      	ldr	r1, [pc, #404]	; (800d2f4 <tcp_slowtmr+0x280>)
 800d15e:	4862      	ldr	r0, [pc, #392]	; (800d2e8 <tcp_slowtmr+0x274>)
 800d160:	f009 ffbe 	bl	80170e0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d164:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d106      	bne.n	800d17a <tcp_slowtmr+0x106>
 800d16c:	4b5c      	ldr	r3, [pc, #368]	; (800d2e0 <tcp_slowtmr+0x26c>)
 800d16e:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d172:	4961      	ldr	r1, [pc, #388]	; (800d2f8 <tcp_slowtmr+0x284>)
 800d174:	485c      	ldr	r0, [pc, #368]	; (800d2e8 <tcp_slowtmr+0x274>)
 800d176:	f009 ffb3 	bl	80170e0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d17a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d17c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d180:	2b0b      	cmp	r3, #11
 800d182:	d905      	bls.n	800d190 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d184:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d188:	3301      	adds	r3, #1
 800d18a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d18e:	e0ed      	b.n	800d36c <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d192:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d196:	3b01      	subs	r3, #1
 800d198:	4a58      	ldr	r2, [pc, #352]	; (800d2fc <tcp_slowtmr+0x288>)
 800d19a:	5cd3      	ldrb	r3, [r2, r3]
 800d19c:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d19e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1a0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d1a4:	7c7a      	ldrb	r2, [r7, #17]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d907      	bls.n	800d1ba <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ac:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d1b0:	3301      	adds	r3, #1
 800d1b2:	b2da      	uxtb	r2, r3
 800d1b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1b6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d1ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1bc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d1c0:	7c7a      	ldrb	r2, [r7, #17]
 800d1c2:	429a      	cmp	r2, r3
 800d1c4:	f200 80d2 	bhi.w	800d36c <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d1c8:	2301      	movs	r3, #1
 800d1ca:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d1cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ce:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d108      	bne.n	800d1e8 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d1d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1d8:	f004 fc2a 	bl	8011a30 <tcp_zero_window_probe>
 800d1dc:	4603      	mov	r3, r0
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	d014      	beq.n	800d20c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d1e2:	2300      	movs	r3, #0
 800d1e4:	623b      	str	r3, [r7, #32]
 800d1e6:	e011      	b.n	800d20c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d1ee:	4619      	mov	r1, r3
 800d1f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1f2:	f003 faef 	bl	80107d4 <tcp_split_unsent_seg>
 800d1f6:	4603      	mov	r3, r0
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d107      	bne.n	800d20c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d1fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d1fe:	f003 fd6f 	bl	8010ce0 <tcp_output>
 800d202:	4603      	mov	r3, r0
 800d204:	2b00      	cmp	r3, #0
 800d206:	d101      	bne.n	800d20c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d208:	2300      	movs	r3, #0
 800d20a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d20c:	6a3b      	ldr	r3, [r7, #32]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	f000 80ac 	beq.w	800d36c <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d216:	2200      	movs	r2, #0
 800d218:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d21c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d21e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d222:	2b06      	cmp	r3, #6
 800d224:	f200 80a2 	bhi.w	800d36c <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d22a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d22e:	3301      	adds	r3, #1
 800d230:	b2da      	uxtb	r2, r3
 800d232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d234:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d238:	e098      	b.n	800d36c <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d23a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d23c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d240:	2b00      	cmp	r3, #0
 800d242:	db0f      	blt.n	800d264 <tcp_slowtmr+0x1f0>
 800d244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d246:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d24a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d24e:	4293      	cmp	r3, r2
 800d250:	d008      	beq.n	800d264 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d254:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d258:	b29b      	uxth	r3, r3
 800d25a:	3301      	adds	r3, #1
 800d25c:	b29b      	uxth	r3, r3
 800d25e:	b21a      	sxth	r2, r3
 800d260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d262:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d266:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d26a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d26c:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d270:	429a      	cmp	r2, r3
 800d272:	db7b      	blt.n	800d36c <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d274:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d276:	f004 f825 	bl	80112c4 <tcp_rexmit_rto_prepare>
 800d27a:	4603      	mov	r3, r0
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d007      	beq.n	800d290 <tcp_slowtmr+0x21c>
 800d280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d284:	2b00      	cmp	r3, #0
 800d286:	d171      	bne.n	800d36c <tcp_slowtmr+0x2f8>
 800d288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d28c:	2b00      	cmp	r3, #0
 800d28e:	d06d      	beq.n	800d36c <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d292:	7d1b      	ldrb	r3, [r3, #20]
 800d294:	2b02      	cmp	r3, #2
 800d296:	d03a      	beq.n	800d30e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d29a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d29e:	2b0c      	cmp	r3, #12
 800d2a0:	bf28      	it	cs
 800d2a2:	230c      	movcs	r3, #12
 800d2a4:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d2a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2a8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d2ac:	10db      	asrs	r3, r3, #3
 800d2ae:	b21b      	sxth	r3, r3
 800d2b0:	461a      	mov	r2, r3
 800d2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d2b4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d2b8:	4413      	add	r3, r2
 800d2ba:	7efa      	ldrb	r2, [r7, #27]
 800d2bc:	4910      	ldr	r1, [pc, #64]	; (800d300 <tcp_slowtmr+0x28c>)
 800d2be:	5c8a      	ldrb	r2, [r1, r2]
 800d2c0:	4093      	lsls	r3, r2
 800d2c2:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d2c4:	697b      	ldr	r3, [r7, #20]
 800d2c6:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d2ca:	4293      	cmp	r3, r2
 800d2cc:	dc1a      	bgt.n	800d304 <tcp_slowtmr+0x290>
 800d2ce:	697b      	ldr	r3, [r7, #20]
 800d2d0:	b21a      	sxth	r2, r3
 800d2d2:	e019      	b.n	800d308 <tcp_slowtmr+0x294>
 800d2d4:	2000f260 	.word	0x2000f260
 800d2d8:	2000f276 	.word	0x2000f276
 800d2dc:	2000f26c 	.word	0x2000f26c
 800d2e0:	08018cb8 	.word	0x08018cb8
 800d2e4:	08018ffc 	.word	0x08018ffc
 800d2e8:	08018cfc 	.word	0x08018cfc
 800d2ec:	08019028 	.word	0x08019028
 800d2f0:	08019054 	.word	0x08019054
 800d2f4:	08019084 	.word	0x08019084
 800d2f8:	080190b8 	.word	0x080190b8
 800d2fc:	0801b0b8 	.word	0x0801b0b8
 800d300:	0801b0a8 	.word	0x0801b0a8
 800d304:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d310:	2200      	movs	r2, #0
 800d312:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d316:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d31a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d31c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d320:	4293      	cmp	r3, r2
 800d322:	bf28      	it	cs
 800d324:	4613      	movcs	r3, r2
 800d326:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d328:	8a7b      	ldrh	r3, [r7, #18]
 800d32a:	085b      	lsrs	r3, r3, #1
 800d32c:	b29a      	uxth	r2, r3
 800d32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d330:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d336:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d33c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d33e:	005b      	lsls	r3, r3, #1
 800d340:	b29b      	uxth	r3, r3
 800d342:	429a      	cmp	r2, r3
 800d344:	d206      	bcs.n	800d354 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d346:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d348:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d34a:	005b      	lsls	r3, r3, #1
 800d34c:	b29a      	uxth	r2, r3
 800d34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d350:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d356:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d360:	2200      	movs	r2, #0
 800d362:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d366:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d368:	f004 f81c 	bl	80113a4 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d36c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d36e:	7d1b      	ldrb	r3, [r3, #20]
 800d370:	2b06      	cmp	r3, #6
 800d372:	d111      	bne.n	800d398 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d376:	8b5b      	ldrh	r3, [r3, #26]
 800d378:	f003 0310 	and.w	r3, r3, #16
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d00b      	beq.n	800d398 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d380:	4b9c      	ldr	r3, [pc, #624]	; (800d5f4 <tcp_slowtmr+0x580>)
 800d382:	681a      	ldr	r2, [r3, #0]
 800d384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d386:	6a1b      	ldr	r3, [r3, #32]
 800d388:	1ad3      	subs	r3, r2, r3
 800d38a:	2b28      	cmp	r3, #40	; 0x28
 800d38c:	d904      	bls.n	800d398 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d38e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d392:	3301      	adds	r3, #1
 800d394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d39a:	7a5b      	ldrb	r3, [r3, #9]
 800d39c:	f003 0308 	and.w	r3, r3, #8
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d04a      	beq.n	800d43a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d3a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3a6:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d3a8:	2b04      	cmp	r3, #4
 800d3aa:	d003      	beq.n	800d3b4 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ae:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d3b0:	2b07      	cmp	r3, #7
 800d3b2:	d142      	bne.n	800d43a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d3b4:	4b8f      	ldr	r3, [pc, #572]	; (800d5f4 <tcp_slowtmr+0x580>)
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3ba:	6a1b      	ldr	r3, [r3, #32]
 800d3bc:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d3be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3c0:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d3c4:	4b8c      	ldr	r3, [pc, #560]	; (800d5f8 <tcp_slowtmr+0x584>)
 800d3c6:	440b      	add	r3, r1
 800d3c8:	498c      	ldr	r1, [pc, #560]	; (800d5fc <tcp_slowtmr+0x588>)
 800d3ca:	fba1 1303 	umull	r1, r3, r1, r3
 800d3ce:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d3d0:	429a      	cmp	r2, r3
 800d3d2:	d90a      	bls.n	800d3ea <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d3d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d3d8:	3301      	adds	r3, #1
 800d3da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d3de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d3e2:	3301      	adds	r3, #1
 800d3e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d3e8:	e027      	b.n	800d43a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d3ea:	4b82      	ldr	r3, [pc, #520]	; (800d5f4 <tcp_slowtmr+0x580>)
 800d3ec:	681a      	ldr	r2, [r3, #0]
 800d3ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f0:	6a1b      	ldr	r3, [r3, #32]
 800d3f2:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d3f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3f6:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d3fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3fc:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d400:	4618      	mov	r0, r3
 800d402:	4b7f      	ldr	r3, [pc, #508]	; (800d600 <tcp_slowtmr+0x58c>)
 800d404:	fb00 f303 	mul.w	r3, r0, r3
 800d408:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d40a:	497c      	ldr	r1, [pc, #496]	; (800d5fc <tcp_slowtmr+0x588>)
 800d40c:	fba1 1303 	umull	r1, r3, r1, r3
 800d410:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d412:	429a      	cmp	r2, r3
 800d414:	d911      	bls.n	800d43a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d416:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d418:	f004 faca 	bl	80119b0 <tcp_keepalive>
 800d41c:	4603      	mov	r3, r0
 800d41e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d422:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d426:	2b00      	cmp	r3, #0
 800d428:	d107      	bne.n	800d43a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d42a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d42c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d430:	3301      	adds	r3, #1
 800d432:	b2da      	uxtb	r2, r3
 800d434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d436:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d43a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d43c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d011      	beq.n	800d466 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d442:	4b6c      	ldr	r3, [pc, #432]	; (800d5f4 <tcp_slowtmr+0x580>)
 800d444:	681a      	ldr	r2, [r3, #0]
 800d446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d448:	6a1b      	ldr	r3, [r3, #32]
 800d44a:	1ad2      	subs	r2, r2, r3
 800d44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d44e:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d452:	4619      	mov	r1, r3
 800d454:	460b      	mov	r3, r1
 800d456:	005b      	lsls	r3, r3, #1
 800d458:	440b      	add	r3, r1
 800d45a:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d45c:	429a      	cmp	r2, r3
 800d45e:	d302      	bcc.n	800d466 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d460:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d462:	f000 fddd 	bl	800e020 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d468:	7d1b      	ldrb	r3, [r3, #20]
 800d46a:	2b03      	cmp	r3, #3
 800d46c:	d10b      	bne.n	800d486 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d46e:	4b61      	ldr	r3, [pc, #388]	; (800d5f4 <tcp_slowtmr+0x580>)
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d474:	6a1b      	ldr	r3, [r3, #32]
 800d476:	1ad3      	subs	r3, r2, r3
 800d478:	2b28      	cmp	r3, #40	; 0x28
 800d47a:	d904      	bls.n	800d486 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d47c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d480:	3301      	adds	r3, #1
 800d482:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d488:	7d1b      	ldrb	r3, [r3, #20]
 800d48a:	2b09      	cmp	r3, #9
 800d48c:	d10b      	bne.n	800d4a6 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d48e:	4b59      	ldr	r3, [pc, #356]	; (800d5f4 <tcp_slowtmr+0x580>)
 800d490:	681a      	ldr	r2, [r3, #0]
 800d492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d494:	6a1b      	ldr	r3, [r3, #32]
 800d496:	1ad3      	subs	r3, r2, r3
 800d498:	2bf0      	cmp	r3, #240	; 0xf0
 800d49a:	d904      	bls.n	800d4a6 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800d49c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d4a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d060      	beq.n	800d570 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d4b4:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d4b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d4b8:	f000 fbfe 	bl	800dcb8 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d4bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4be:	2b00      	cmp	r3, #0
 800d4c0:	d010      	beq.n	800d4e4 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d4c2:	4b50      	ldr	r3, [pc, #320]	; (800d604 <tcp_slowtmr+0x590>)
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d106      	bne.n	800d4da <tcp_slowtmr+0x466>
 800d4cc:	4b4e      	ldr	r3, [pc, #312]	; (800d608 <tcp_slowtmr+0x594>)
 800d4ce:	f240 526d 	movw	r2, #1389	; 0x56d
 800d4d2:	494e      	ldr	r1, [pc, #312]	; (800d60c <tcp_slowtmr+0x598>)
 800d4d4:	484e      	ldr	r0, [pc, #312]	; (800d610 <tcp_slowtmr+0x59c>)
 800d4d6:	f009 fe03 	bl	80170e0 <iprintf>
        prev->next = pcb->next;
 800d4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4dc:	68da      	ldr	r2, [r3, #12]
 800d4de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4e0:	60da      	str	r2, [r3, #12]
 800d4e2:	e00f      	b.n	800d504 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d4e4:	4b47      	ldr	r3, [pc, #284]	; (800d604 <tcp_slowtmr+0x590>)
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d4ea:	429a      	cmp	r2, r3
 800d4ec:	d006      	beq.n	800d4fc <tcp_slowtmr+0x488>
 800d4ee:	4b46      	ldr	r3, [pc, #280]	; (800d608 <tcp_slowtmr+0x594>)
 800d4f0:	f240 5271 	movw	r2, #1393	; 0x571
 800d4f4:	4947      	ldr	r1, [pc, #284]	; (800d614 <tcp_slowtmr+0x5a0>)
 800d4f6:	4846      	ldr	r0, [pc, #280]	; (800d610 <tcp_slowtmr+0x59c>)
 800d4f8:	f009 fdf2 	bl	80170e0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d4fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d4fe:	68db      	ldr	r3, [r3, #12]
 800d500:	4a40      	ldr	r2, [pc, #256]	; (800d604 <tcp_slowtmr+0x590>)
 800d502:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d504:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d013      	beq.n	800d534 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d50c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d50e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d512:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d514:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800d516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d518:	3304      	adds	r3, #4
 800d51a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d51c:	8ad2      	ldrh	r2, [r2, #22]
 800d51e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d520:	8b09      	ldrh	r1, [r1, #24]
 800d522:	9102      	str	r1, [sp, #8]
 800d524:	9201      	str	r2, [sp, #4]
 800d526:	9300      	str	r3, [sp, #0]
 800d528:	462b      	mov	r3, r5
 800d52a:	4622      	mov	r2, r4
 800d52c:	4601      	mov	r1, r0
 800d52e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d530:	f004 f98a 	bl	8011848 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d536:	691b      	ldr	r3, [r3, #16]
 800d538:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800d53a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d53c:	7d1b      	ldrb	r3, [r3, #20]
 800d53e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800d540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d542:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800d544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d546:	68db      	ldr	r3, [r3, #12]
 800d548:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d54a:	6838      	ldr	r0, [r7, #0]
 800d54c:	f7ff f9f4 	bl	800c938 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800d550:	4b31      	ldr	r3, [pc, #196]	; (800d618 <tcp_slowtmr+0x5a4>)
 800d552:	2200      	movs	r2, #0
 800d554:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d004      	beq.n	800d566 <tcp_slowtmr+0x4f2>
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	f06f 010c 	mvn.w	r1, #12
 800d562:	68b8      	ldr	r0, [r7, #8]
 800d564:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d566:	4b2c      	ldr	r3, [pc, #176]	; (800d618 <tcp_slowtmr+0x5a4>)
 800d568:	781b      	ldrb	r3, [r3, #0]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d037      	beq.n	800d5de <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800d56e:	e592      	b.n	800d096 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d572:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d576:	68db      	ldr	r3, [r3, #12]
 800d578:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57c:	7f1b      	ldrb	r3, [r3, #28]
 800d57e:	3301      	adds	r3, #1
 800d580:	b2da      	uxtb	r2, r3
 800d582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d584:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800d586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d588:	7f1a      	ldrb	r2, [r3, #28]
 800d58a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d58c:	7f5b      	ldrb	r3, [r3, #29]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d325      	bcc.n	800d5de <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800d592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d594:	2200      	movs	r2, #0
 800d596:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d598:	4b1f      	ldr	r3, [pc, #124]	; (800d618 <tcp_slowtmr+0x5a4>)
 800d59a:	2200      	movs	r2, #0
 800d59c:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d59e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d00b      	beq.n	800d5c0 <tcp_slowtmr+0x54c>
 800d5a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d5ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d5b0:	6912      	ldr	r2, [r2, #16]
 800d5b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d5b4:	4610      	mov	r0, r2
 800d5b6:	4798      	blx	r3
 800d5b8:	4603      	mov	r3, r0
 800d5ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800d5be:	e002      	b.n	800d5c6 <tcp_slowtmr+0x552>
 800d5c0:	2300      	movs	r3, #0
 800d5c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800d5c6:	4b14      	ldr	r3, [pc, #80]	; (800d618 <tcp_slowtmr+0x5a4>)
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d000      	beq.n	800d5d0 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800d5ce:	e562      	b.n	800d096 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d5d0:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d102      	bne.n	800d5de <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800d5d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d5da:	f003 fb81 	bl	8010ce0 <tcp_output>
  while (pcb != NULL) {
 800d5de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	f47f ad5e 	bne.w	800d0a2 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d5e6:	2300      	movs	r3, #0
 800d5e8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800d5ea:	4b0c      	ldr	r3, [pc, #48]	; (800d61c <tcp_slowtmr+0x5a8>)
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d5f0:	e069      	b.n	800d6c6 <tcp_slowtmr+0x652>
 800d5f2:	bf00      	nop
 800d5f4:	2000f260 	.word	0x2000f260
 800d5f8:	000a4cb8 	.word	0x000a4cb8
 800d5fc:	10624dd3 	.word	0x10624dd3
 800d600:	000124f8 	.word	0x000124f8
 800d604:	2000f26c 	.word	0x2000f26c
 800d608:	08018cb8 	.word	0x08018cb8
 800d60c:	080190f0 	.word	0x080190f0
 800d610:	08018cfc 	.word	0x08018cfc
 800d614:	0801911c 	.word	0x0801911c
 800d618:	2000f274 	.word	0x2000f274
 800d61c:	2000f270 	.word	0x2000f270
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d620:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d622:	7d1b      	ldrb	r3, [r3, #20]
 800d624:	2b0a      	cmp	r3, #10
 800d626:	d006      	beq.n	800d636 <tcp_slowtmr+0x5c2>
 800d628:	4b2b      	ldr	r3, [pc, #172]	; (800d6d8 <tcp_slowtmr+0x664>)
 800d62a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800d62e:	492b      	ldr	r1, [pc, #172]	; (800d6dc <tcp_slowtmr+0x668>)
 800d630:	482b      	ldr	r0, [pc, #172]	; (800d6e0 <tcp_slowtmr+0x66c>)
 800d632:	f009 fd55 	bl	80170e0 <iprintf>
    pcb_remove = 0;
 800d636:	2300      	movs	r3, #0
 800d638:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d63c:	4b29      	ldr	r3, [pc, #164]	; (800d6e4 <tcp_slowtmr+0x670>)
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d642:	6a1b      	ldr	r3, [r3, #32]
 800d644:	1ad3      	subs	r3, r2, r3
 800d646:	2bf0      	cmp	r3, #240	; 0xf0
 800d648:	d904      	bls.n	800d654 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800d64a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d64e:	3301      	adds	r3, #1
 800d650:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d02f      	beq.n	800d6bc <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d65c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d65e:	f000 fb2b 	bl	800dcb8 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d664:	2b00      	cmp	r3, #0
 800d666:	d010      	beq.n	800d68a <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d668:	4b1f      	ldr	r3, [pc, #124]	; (800d6e8 <tcp_slowtmr+0x674>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d66e:	429a      	cmp	r2, r3
 800d670:	d106      	bne.n	800d680 <tcp_slowtmr+0x60c>
 800d672:	4b19      	ldr	r3, [pc, #100]	; (800d6d8 <tcp_slowtmr+0x664>)
 800d674:	f240 52af 	movw	r2, #1455	; 0x5af
 800d678:	491c      	ldr	r1, [pc, #112]	; (800d6ec <tcp_slowtmr+0x678>)
 800d67a:	4819      	ldr	r0, [pc, #100]	; (800d6e0 <tcp_slowtmr+0x66c>)
 800d67c:	f009 fd30 	bl	80170e0 <iprintf>
        prev->next = pcb->next;
 800d680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d682:	68da      	ldr	r2, [r3, #12]
 800d684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d686:	60da      	str	r2, [r3, #12]
 800d688:	e00f      	b.n	800d6aa <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800d68a:	4b17      	ldr	r3, [pc, #92]	; (800d6e8 <tcp_slowtmr+0x674>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d690:	429a      	cmp	r2, r3
 800d692:	d006      	beq.n	800d6a2 <tcp_slowtmr+0x62e>
 800d694:	4b10      	ldr	r3, [pc, #64]	; (800d6d8 <tcp_slowtmr+0x664>)
 800d696:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800d69a:	4915      	ldr	r1, [pc, #84]	; (800d6f0 <tcp_slowtmr+0x67c>)
 800d69c:	4810      	ldr	r0, [pc, #64]	; (800d6e0 <tcp_slowtmr+0x66c>)
 800d69e:	f009 fd1f 	bl	80170e0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800d6a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a4:	68db      	ldr	r3, [r3, #12]
 800d6a6:	4a10      	ldr	r2, [pc, #64]	; (800d6e8 <tcp_slowtmr+0x674>)
 800d6a8:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800d6aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ac:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800d6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b0:	68db      	ldr	r3, [r3, #12]
 800d6b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800d6b4:	69f8      	ldr	r0, [r7, #28]
 800d6b6:	f7ff f93f 	bl	800c938 <tcp_free>
 800d6ba:	e004      	b.n	800d6c6 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800d6bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6be:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d6c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c2:	68db      	ldr	r3, [r3, #12]
 800d6c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800d6c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d1a9      	bne.n	800d620 <tcp_slowtmr+0x5ac>
    }
  }
}
 800d6cc:	bf00      	nop
 800d6ce:	bf00      	nop
 800d6d0:	3730      	adds	r7, #48	; 0x30
 800d6d2:	46bd      	mov	sp, r7
 800d6d4:	bdb0      	pop	{r4, r5, r7, pc}
 800d6d6:	bf00      	nop
 800d6d8:	08018cb8 	.word	0x08018cb8
 800d6dc:	08019148 	.word	0x08019148
 800d6e0:	08018cfc 	.word	0x08018cfc
 800d6e4:	2000f260 	.word	0x2000f260
 800d6e8:	2000f270 	.word	0x2000f270
 800d6ec:	08019178 	.word	0x08019178
 800d6f0:	080191a0 	.word	0x080191a0

0800d6f4 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b082      	sub	sp, #8
 800d6f8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d6fa:	4b2d      	ldr	r3, [pc, #180]	; (800d7b0 <tcp_fasttmr+0xbc>)
 800d6fc:	781b      	ldrb	r3, [r3, #0]
 800d6fe:	3301      	adds	r3, #1
 800d700:	b2da      	uxtb	r2, r3
 800d702:	4b2b      	ldr	r3, [pc, #172]	; (800d7b0 <tcp_fasttmr+0xbc>)
 800d704:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d706:	4b2b      	ldr	r3, [pc, #172]	; (800d7b4 <tcp_fasttmr+0xc0>)
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d70c:	e048      	b.n	800d7a0 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	7f9a      	ldrb	r2, [r3, #30]
 800d712:	4b27      	ldr	r3, [pc, #156]	; (800d7b0 <tcp_fasttmr+0xbc>)
 800d714:	781b      	ldrb	r3, [r3, #0]
 800d716:	429a      	cmp	r2, r3
 800d718:	d03f      	beq.n	800d79a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d71a:	4b25      	ldr	r3, [pc, #148]	; (800d7b0 <tcp_fasttmr+0xbc>)
 800d71c:	781a      	ldrb	r2, [r3, #0]
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	8b5b      	ldrh	r3, [r3, #26]
 800d726:	f003 0301 	and.w	r3, r3, #1
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d010      	beq.n	800d750 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	8b5b      	ldrh	r3, [r3, #26]
 800d732:	f043 0302 	orr.w	r3, r3, #2
 800d736:	b29a      	uxth	r2, r3
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d73c:	6878      	ldr	r0, [r7, #4]
 800d73e:	f003 facf 	bl	8010ce0 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	8b5b      	ldrh	r3, [r3, #26]
 800d746:	f023 0303 	bic.w	r3, r3, #3
 800d74a:	b29a      	uxth	r2, r3
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	8b5b      	ldrh	r3, [r3, #26]
 800d754:	f003 0308 	and.w	r3, r3, #8
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d009      	beq.n	800d770 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	8b5b      	ldrh	r3, [r3, #26]
 800d760:	f023 0308 	bic.w	r3, r3, #8
 800d764:	b29a      	uxth	r2, r3
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f7ff fa78 	bl	800cc60 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	68db      	ldr	r3, [r3, #12]
 800d774:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d00a      	beq.n	800d794 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d77e:	4b0e      	ldr	r3, [pc, #56]	; (800d7b8 <tcp_fasttmr+0xc4>)
 800d780:	2200      	movs	r2, #0
 800d782:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d784:	6878      	ldr	r0, [r7, #4]
 800d786:	f000 f819 	bl	800d7bc <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d78a:	4b0b      	ldr	r3, [pc, #44]	; (800d7b8 <tcp_fasttmr+0xc4>)
 800d78c:	781b      	ldrb	r3, [r3, #0]
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d000      	beq.n	800d794 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d792:	e7b8      	b.n	800d706 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d794:	683b      	ldr	r3, [r7, #0]
 800d796:	607b      	str	r3, [r7, #4]
 800d798:	e002      	b.n	800d7a0 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d79a:	687b      	ldr	r3, [r7, #4]
 800d79c:	68db      	ldr	r3, [r3, #12]
 800d79e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d1b3      	bne.n	800d70e <tcp_fasttmr+0x1a>
    }
  }
}
 800d7a6:	bf00      	nop
 800d7a8:	bf00      	nop
 800d7aa:	3708      	adds	r7, #8
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd80      	pop	{r7, pc}
 800d7b0:	2000f276 	.word	0x2000f276
 800d7b4:	2000f26c 	.word	0x2000f26c
 800d7b8:	2000f274 	.word	0x2000f274

0800d7bc <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d7bc:	b590      	push	{r4, r7, lr}
 800d7be:	b085      	sub	sp, #20
 800d7c0:	af00      	add	r7, sp, #0
 800d7c2:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2b00      	cmp	r3, #0
 800d7c8:	d109      	bne.n	800d7de <tcp_process_refused_data+0x22>
 800d7ca:	4b37      	ldr	r3, [pc, #220]	; (800d8a8 <tcp_process_refused_data+0xec>)
 800d7cc:	f240 6209 	movw	r2, #1545	; 0x609
 800d7d0:	4936      	ldr	r1, [pc, #216]	; (800d8ac <tcp_process_refused_data+0xf0>)
 800d7d2:	4837      	ldr	r0, [pc, #220]	; (800d8b0 <tcp_process_refused_data+0xf4>)
 800d7d4:	f009 fc84 	bl	80170e0 <iprintf>
 800d7d8:	f06f 030f 	mvn.w	r3, #15
 800d7dc:	e060      	b.n	800d8a0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7e2:	7b5b      	ldrb	r3, [r3, #13]
 800d7e4:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d7ea:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	2200      	movs	r2, #0
 800d7f0:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d00b      	beq.n	800d814 <tcp_process_refused_data+0x58>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	6918      	ldr	r0, [r3, #16]
 800d806:	2300      	movs	r3, #0
 800d808:	68ba      	ldr	r2, [r7, #8]
 800d80a:	6879      	ldr	r1, [r7, #4]
 800d80c:	47a0      	blx	r4
 800d80e:	4603      	mov	r3, r0
 800d810:	73fb      	strb	r3, [r7, #15]
 800d812:	e007      	b.n	800d824 <tcp_process_refused_data+0x68>
 800d814:	2300      	movs	r3, #0
 800d816:	68ba      	ldr	r2, [r7, #8]
 800d818:	6879      	ldr	r1, [r7, #4]
 800d81a:	2000      	movs	r0, #0
 800d81c:	f000 f8a4 	bl	800d968 <tcp_recv_null>
 800d820:	4603      	mov	r3, r0
 800d822:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d824:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d12a      	bne.n	800d882 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d82c:	7bbb      	ldrb	r3, [r7, #14]
 800d82e:	f003 0320 	and.w	r3, r3, #32
 800d832:	2b00      	cmp	r3, #0
 800d834:	d033      	beq.n	800d89e <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d83a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d83e:	d005      	beq.n	800d84c <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d844:	3301      	adds	r3, #1
 800d846:	b29a      	uxth	r2, r3
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d852:	2b00      	cmp	r3, #0
 800d854:	d00b      	beq.n	800d86e <tcp_process_refused_data+0xb2>
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	6918      	ldr	r0, [r3, #16]
 800d860:	2300      	movs	r3, #0
 800d862:	2200      	movs	r2, #0
 800d864:	6879      	ldr	r1, [r7, #4]
 800d866:	47a0      	blx	r4
 800d868:	4603      	mov	r3, r0
 800d86a:	73fb      	strb	r3, [r7, #15]
 800d86c:	e001      	b.n	800d872 <tcp_process_refused_data+0xb6>
 800d86e:	2300      	movs	r3, #0
 800d870:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d876:	f113 0f0d 	cmn.w	r3, #13
 800d87a:	d110      	bne.n	800d89e <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d87c:	f06f 030c 	mvn.w	r3, #12
 800d880:	e00e      	b.n	800d8a0 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d886:	f113 0f0d 	cmn.w	r3, #13
 800d88a:	d102      	bne.n	800d892 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d88c:	f06f 030c 	mvn.w	r3, #12
 800d890:	e006      	b.n	800d8a0 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	68ba      	ldr	r2, [r7, #8]
 800d896:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d898:	f06f 0304 	mvn.w	r3, #4
 800d89c:	e000      	b.n	800d8a0 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d89e:	2300      	movs	r3, #0
}
 800d8a0:	4618      	mov	r0, r3
 800d8a2:	3714      	adds	r7, #20
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd90      	pop	{r4, r7, pc}
 800d8a8:	08018cb8 	.word	0x08018cb8
 800d8ac:	080191c8 	.word	0x080191c8
 800d8b0:	08018cfc 	.word	0x08018cfc

0800d8b4 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d8bc:	e007      	b.n	800d8ce <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d8c4:	6878      	ldr	r0, [r7, #4]
 800d8c6:	f000 f80a 	bl	800d8de <tcp_seg_free>
    seg = next;
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	2b00      	cmp	r3, #0
 800d8d2:	d1f4      	bne.n	800d8be <tcp_segs_free+0xa>
  }
}
 800d8d4:	bf00      	nop
 800d8d6:	bf00      	nop
 800d8d8:	3710      	adds	r7, #16
 800d8da:	46bd      	mov	sp, r7
 800d8dc:	bd80      	pop	{r7, pc}

0800d8de <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d8de:	b580      	push	{r7, lr}
 800d8e0:	b082      	sub	sp, #8
 800d8e2:	af00      	add	r7, sp, #0
 800d8e4:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d00c      	beq.n	800d906 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	685b      	ldr	r3, [r3, #4]
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d004      	beq.n	800d8fe <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	685b      	ldr	r3, [r3, #4]
 800d8f8:	4618      	mov	r0, r3
 800d8fa:	f7fe fd61 	bl	800c3c0 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d8fe:	6879      	ldr	r1, [r7, #4]
 800d900:	2003      	movs	r0, #3
 800d902:	f7fd fc83 	bl	800b20c <memp_free>
  }
}
 800d906:	bf00      	nop
 800d908:	3708      	adds	r7, #8
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
	...

0800d910 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d910:	b580      	push	{r7, lr}
 800d912:	b084      	sub	sp, #16
 800d914:	af00      	add	r7, sp, #0
 800d916:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d106      	bne.n	800d92c <tcp_seg_copy+0x1c>
 800d91e:	4b0f      	ldr	r3, [pc, #60]	; (800d95c <tcp_seg_copy+0x4c>)
 800d920:	f240 6282 	movw	r2, #1666	; 0x682
 800d924:	490e      	ldr	r1, [pc, #56]	; (800d960 <tcp_seg_copy+0x50>)
 800d926:	480f      	ldr	r0, [pc, #60]	; (800d964 <tcp_seg_copy+0x54>)
 800d928:	f009 fbda 	bl	80170e0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d92c:	2003      	movs	r0, #3
 800d92e:	f7fd fbf7 	bl	800b120 <memp_malloc>
 800d932:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	2b00      	cmp	r3, #0
 800d938:	d101      	bne.n	800d93e <tcp_seg_copy+0x2e>
    return NULL;
 800d93a:	2300      	movs	r3, #0
 800d93c:	e00a      	b.n	800d954 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d93e:	2210      	movs	r2, #16
 800d940:	6879      	ldr	r1, [r7, #4]
 800d942:	68f8      	ldr	r0, [r7, #12]
 800d944:	f009 fb21 	bl	8016f8a <memcpy>
  pbuf_ref(cseg->p);
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	685b      	ldr	r3, [r3, #4]
 800d94c:	4618      	mov	r0, r3
 800d94e:	f7fe fddd 	bl	800c50c <pbuf_ref>
  return cseg;
 800d952:	68fb      	ldr	r3, [r7, #12]
}
 800d954:	4618      	mov	r0, r3
 800d956:	3710      	adds	r7, #16
 800d958:	46bd      	mov	sp, r7
 800d95a:	bd80      	pop	{r7, pc}
 800d95c:	08018cb8 	.word	0x08018cb8
 800d960:	0801920c 	.word	0x0801920c
 800d964:	08018cfc 	.word	0x08018cfc

0800d968 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	607a      	str	r2, [r7, #4]
 800d974:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d976:	68bb      	ldr	r3, [r7, #8]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d109      	bne.n	800d990 <tcp_recv_null+0x28>
 800d97c:	4b12      	ldr	r3, [pc, #72]	; (800d9c8 <tcp_recv_null+0x60>)
 800d97e:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d982:	4912      	ldr	r1, [pc, #72]	; (800d9cc <tcp_recv_null+0x64>)
 800d984:	4812      	ldr	r0, [pc, #72]	; (800d9d0 <tcp_recv_null+0x68>)
 800d986:	f009 fbab 	bl	80170e0 <iprintf>
 800d98a:	f06f 030f 	mvn.w	r3, #15
 800d98e:	e016      	b.n	800d9be <tcp_recv_null+0x56>

  if (p != NULL) {
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	2b00      	cmp	r3, #0
 800d994:	d009      	beq.n	800d9aa <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	891b      	ldrh	r3, [r3, #8]
 800d99a:	4619      	mov	r1, r3
 800d99c:	68b8      	ldr	r0, [r7, #8]
 800d99e:	f7ff fb19 	bl	800cfd4 <tcp_recved>
    pbuf_free(p);
 800d9a2:	6878      	ldr	r0, [r7, #4]
 800d9a4:	f7fe fd0c 	bl	800c3c0 <pbuf_free>
 800d9a8:	e008      	b.n	800d9bc <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d9aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d9ae:	2b00      	cmp	r3, #0
 800d9b0:	d104      	bne.n	800d9bc <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d9b2:	68b8      	ldr	r0, [r7, #8]
 800d9b4:	f7ff f9be 	bl	800cd34 <tcp_close>
 800d9b8:	4603      	mov	r3, r0
 800d9ba:	e000      	b.n	800d9be <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d9bc:	2300      	movs	r3, #0
}
 800d9be:	4618      	mov	r0, r3
 800d9c0:	3710      	adds	r7, #16
 800d9c2:	46bd      	mov	sp, r7
 800d9c4:	bd80      	pop	{r7, pc}
 800d9c6:	bf00      	nop
 800d9c8:	08018cb8 	.word	0x08018cb8
 800d9cc:	08019228 	.word	0x08019228
 800d9d0:	08018cfc 	.word	0x08018cfc

0800d9d4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d9d4:	b580      	push	{r7, lr}
 800d9d6:	b086      	sub	sp, #24
 800d9d8:	af00      	add	r7, sp, #0
 800d9da:	4603      	mov	r3, r0
 800d9dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d9de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	db01      	blt.n	800d9ea <tcp_kill_prio+0x16>
 800d9e6:	79fb      	ldrb	r3, [r7, #7]
 800d9e8:	e000      	b.n	800d9ec <tcp_kill_prio+0x18>
 800d9ea:	237f      	movs	r3, #127	; 0x7f
 800d9ec:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d9ee:	7afb      	ldrb	r3, [r7, #11]
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	d034      	beq.n	800da5e <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d9f4:	7afb      	ldrb	r3, [r7, #11]
 800d9f6:	3b01      	subs	r3, #1
 800d9f8:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d9fe:	2300      	movs	r3, #0
 800da00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800da02:	4b19      	ldr	r3, [pc, #100]	; (800da68 <tcp_kill_prio+0x94>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	617b      	str	r3, [r7, #20]
 800da08:	e01f      	b.n	800da4a <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800da0a:	697b      	ldr	r3, [r7, #20]
 800da0c:	7d5b      	ldrb	r3, [r3, #21]
 800da0e:	7afa      	ldrb	r2, [r7, #11]
 800da10:	429a      	cmp	r2, r3
 800da12:	d80c      	bhi.n	800da2e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800da18:	7afa      	ldrb	r2, [r7, #11]
 800da1a:	429a      	cmp	r2, r3
 800da1c:	d112      	bne.n	800da44 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800da1e:	4b13      	ldr	r3, [pc, #76]	; (800da6c <tcp_kill_prio+0x98>)
 800da20:	681a      	ldr	r2, [r3, #0]
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	6a1b      	ldr	r3, [r3, #32]
 800da26:	1ad3      	subs	r3, r2, r3
 800da28:	68fa      	ldr	r2, [r7, #12]
 800da2a:	429a      	cmp	r2, r3
 800da2c:	d80a      	bhi.n	800da44 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800da2e:	4b0f      	ldr	r3, [pc, #60]	; (800da6c <tcp_kill_prio+0x98>)
 800da30:	681a      	ldr	r2, [r3, #0]
 800da32:	697b      	ldr	r3, [r7, #20]
 800da34:	6a1b      	ldr	r3, [r3, #32]
 800da36:	1ad3      	subs	r3, r2, r3
 800da38:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800da3e:	697b      	ldr	r3, [r7, #20]
 800da40:	7d5b      	ldrb	r3, [r3, #21]
 800da42:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800da44:	697b      	ldr	r3, [r7, #20]
 800da46:	68db      	ldr	r3, [r3, #12]
 800da48:	617b      	str	r3, [r7, #20]
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	d1dc      	bne.n	800da0a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800da50:	693b      	ldr	r3, [r7, #16]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d004      	beq.n	800da60 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800da56:	6938      	ldr	r0, [r7, #16]
 800da58:	f7ff fa56 	bl	800cf08 <tcp_abort>
 800da5c:	e000      	b.n	800da60 <tcp_kill_prio+0x8c>
    return;
 800da5e:	bf00      	nop
  }
}
 800da60:	3718      	adds	r7, #24
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	2000f26c 	.word	0x2000f26c
 800da6c:	2000f260 	.word	0x2000f260

0800da70 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800da70:	b580      	push	{r7, lr}
 800da72:	b086      	sub	sp, #24
 800da74:	af00      	add	r7, sp, #0
 800da76:	4603      	mov	r3, r0
 800da78:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800da7a:	79fb      	ldrb	r3, [r7, #7]
 800da7c:	2b08      	cmp	r3, #8
 800da7e:	d009      	beq.n	800da94 <tcp_kill_state+0x24>
 800da80:	79fb      	ldrb	r3, [r7, #7]
 800da82:	2b09      	cmp	r3, #9
 800da84:	d006      	beq.n	800da94 <tcp_kill_state+0x24>
 800da86:	4b1a      	ldr	r3, [pc, #104]	; (800daf0 <tcp_kill_state+0x80>)
 800da88:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800da8c:	4919      	ldr	r1, [pc, #100]	; (800daf4 <tcp_kill_state+0x84>)
 800da8e:	481a      	ldr	r0, [pc, #104]	; (800daf8 <tcp_kill_state+0x88>)
 800da90:	f009 fb26 	bl	80170e0 <iprintf>

  inactivity = 0;
 800da94:	2300      	movs	r3, #0
 800da96:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800da98:	2300      	movs	r3, #0
 800da9a:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800da9c:	4b17      	ldr	r3, [pc, #92]	; (800dafc <tcp_kill_state+0x8c>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	617b      	str	r3, [r7, #20]
 800daa2:	e017      	b.n	800dad4 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800daa4:	697b      	ldr	r3, [r7, #20]
 800daa6:	7d1b      	ldrb	r3, [r3, #20]
 800daa8:	79fa      	ldrb	r2, [r7, #7]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d10f      	bne.n	800dace <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800daae:	4b14      	ldr	r3, [pc, #80]	; (800db00 <tcp_kill_state+0x90>)
 800dab0:	681a      	ldr	r2, [r3, #0]
 800dab2:	697b      	ldr	r3, [r7, #20]
 800dab4:	6a1b      	ldr	r3, [r3, #32]
 800dab6:	1ad3      	subs	r3, r2, r3
 800dab8:	68fa      	ldr	r2, [r7, #12]
 800daba:	429a      	cmp	r2, r3
 800dabc:	d807      	bhi.n	800dace <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800dabe:	4b10      	ldr	r3, [pc, #64]	; (800db00 <tcp_kill_state+0x90>)
 800dac0:	681a      	ldr	r2, [r3, #0]
 800dac2:	697b      	ldr	r3, [r7, #20]
 800dac4:	6a1b      	ldr	r3, [r3, #32]
 800dac6:	1ad3      	subs	r3, r2, r3
 800dac8:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800daca:	697b      	ldr	r3, [r7, #20]
 800dacc:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dace:	697b      	ldr	r3, [r7, #20]
 800dad0:	68db      	ldr	r3, [r3, #12]
 800dad2:	617b      	str	r3, [r7, #20]
 800dad4:	697b      	ldr	r3, [r7, #20]
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	d1e4      	bne.n	800daa4 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800dada:	693b      	ldr	r3, [r7, #16]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d003      	beq.n	800dae8 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800dae0:	2100      	movs	r1, #0
 800dae2:	6938      	ldr	r0, [r7, #16]
 800dae4:	f7ff f952 	bl	800cd8c <tcp_abandon>
  }
}
 800dae8:	bf00      	nop
 800daea:	3718      	adds	r7, #24
 800daec:	46bd      	mov	sp, r7
 800daee:	bd80      	pop	{r7, pc}
 800daf0:	08018cb8 	.word	0x08018cb8
 800daf4:	08019244 	.word	0x08019244
 800daf8:	08018cfc 	.word	0x08018cfc
 800dafc:	2000f26c 	.word	0x2000f26c
 800db00:	2000f260 	.word	0x2000f260

0800db04 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800db04:	b580      	push	{r7, lr}
 800db06:	b084      	sub	sp, #16
 800db08:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800db0a:	2300      	movs	r3, #0
 800db0c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800db0e:	2300      	movs	r3, #0
 800db10:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800db12:	4b12      	ldr	r3, [pc, #72]	; (800db5c <tcp_kill_timewait+0x58>)
 800db14:	681b      	ldr	r3, [r3, #0]
 800db16:	60fb      	str	r3, [r7, #12]
 800db18:	e012      	b.n	800db40 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800db1a:	4b11      	ldr	r3, [pc, #68]	; (800db60 <tcp_kill_timewait+0x5c>)
 800db1c:	681a      	ldr	r2, [r3, #0]
 800db1e:	68fb      	ldr	r3, [r7, #12]
 800db20:	6a1b      	ldr	r3, [r3, #32]
 800db22:	1ad3      	subs	r3, r2, r3
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	429a      	cmp	r2, r3
 800db28:	d807      	bhi.n	800db3a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800db2a:	4b0d      	ldr	r3, [pc, #52]	; (800db60 <tcp_kill_timewait+0x5c>)
 800db2c:	681a      	ldr	r2, [r3, #0]
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	6a1b      	ldr	r3, [r3, #32]
 800db32:	1ad3      	subs	r3, r2, r3
 800db34:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	68db      	ldr	r3, [r3, #12]
 800db3e:	60fb      	str	r3, [r7, #12]
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d1e9      	bne.n	800db1a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800db46:	68bb      	ldr	r3, [r7, #8]
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d002      	beq.n	800db52 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800db4c:	68b8      	ldr	r0, [r7, #8]
 800db4e:	f7ff f9db 	bl	800cf08 <tcp_abort>
  }
}
 800db52:	bf00      	nop
 800db54:	3710      	adds	r7, #16
 800db56:	46bd      	mov	sp, r7
 800db58:	bd80      	pop	{r7, pc}
 800db5a:	bf00      	nop
 800db5c:	2000f270 	.word	0x2000f270
 800db60:	2000f260 	.word	0x2000f260

0800db64 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800db64:	b580      	push	{r7, lr}
 800db66:	b082      	sub	sp, #8
 800db68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800db6a:	4b10      	ldr	r3, [pc, #64]	; (800dbac <tcp_handle_closepend+0x48>)
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800db70:	e014      	b.n	800db9c <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	68db      	ldr	r3, [r3, #12]
 800db76:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	8b5b      	ldrh	r3, [r3, #26]
 800db7c:	f003 0308 	and.w	r3, r3, #8
 800db80:	2b00      	cmp	r3, #0
 800db82:	d009      	beq.n	800db98 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	8b5b      	ldrh	r3, [r3, #26]
 800db88:	f023 0308 	bic.w	r3, r3, #8
 800db8c:	b29a      	uxth	r2, r3
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f7ff f864 	bl	800cc60 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800db98:	683b      	ldr	r3, [r7, #0]
 800db9a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d1e7      	bne.n	800db72 <tcp_handle_closepend+0xe>
  }
}
 800dba2:	bf00      	nop
 800dba4:	bf00      	nop
 800dba6:	3708      	adds	r7, #8
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}
 800dbac:	2000f26c 	.word	0x2000f26c

0800dbb0 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b084      	sub	sp, #16
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dbba:	2001      	movs	r0, #1
 800dbbc:	f7fd fab0 	bl	800b120 <memp_malloc>
 800dbc0:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d126      	bne.n	800dc16 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800dbc8:	f7ff ffcc 	bl	800db64 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800dbcc:	f7ff ff9a 	bl	800db04 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dbd0:	2001      	movs	r0, #1
 800dbd2:	f7fd faa5 	bl	800b120 <memp_malloc>
 800dbd6:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800dbd8:	68fb      	ldr	r3, [r7, #12]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d11b      	bne.n	800dc16 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800dbde:	2009      	movs	r0, #9
 800dbe0:	f7ff ff46 	bl	800da70 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dbe4:	2001      	movs	r0, #1
 800dbe6:	f7fd fa9b 	bl	800b120 <memp_malloc>
 800dbea:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d111      	bne.n	800dc16 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800dbf2:	2008      	movs	r0, #8
 800dbf4:	f7ff ff3c 	bl	800da70 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dbf8:	2001      	movs	r0, #1
 800dbfa:	f7fd fa91 	bl	800b120 <memp_malloc>
 800dbfe:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d107      	bne.n	800dc16 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800dc06:	79fb      	ldrb	r3, [r7, #7]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f7ff fee3 	bl	800d9d4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dc0e:	2001      	movs	r0, #1
 800dc10:	f7fd fa86 	bl	800b120 <memp_malloc>
 800dc14:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	2b00      	cmp	r3, #0
 800dc1a:	d03f      	beq.n	800dc9c <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800dc1c:	229c      	movs	r2, #156	; 0x9c
 800dc1e:	2100      	movs	r1, #0
 800dc20:	68f8      	ldr	r0, [r7, #12]
 800dc22:	f009 f9c0 	bl	8016fa6 <memset>
    pcb->prio = prio;
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	79fa      	ldrb	r2, [r7, #7]
 800dc2a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dc32:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dc36:	68fb      	ldr	r3, [r7, #12]
 800dc38:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800dc3c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	22ff      	movs	r2, #255	; 0xff
 800dc4a:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	f44f 7206 	mov.w	r2, #536	; 0x218
 800dc52:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800dc54:	68fb      	ldr	r3, [r7, #12]
 800dc56:	2206      	movs	r2, #6
 800dc58:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	2206      	movs	r2, #6
 800dc60:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800dc62:	68fb      	ldr	r3, [r7, #12]
 800dc64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dc68:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	2201      	movs	r2, #1
 800dc6e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800dc72:	4b0d      	ldr	r3, [pc, #52]	; (800dca8 <tcp_alloc+0xf8>)
 800dc74:	681a      	ldr	r2, [r3, #0]
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800dc7a:	4b0c      	ldr	r3, [pc, #48]	; (800dcac <tcp_alloc+0xfc>)
 800dc7c:	781a      	ldrb	r2, [r3, #0]
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800dc88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	4a08      	ldr	r2, [pc, #32]	; (800dcb0 <tcp_alloc+0x100>)
 800dc90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	4a07      	ldr	r2, [pc, #28]	; (800dcb4 <tcp_alloc+0x104>)
 800dc98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800dc9c:	68fb      	ldr	r3, [r7, #12]
}
 800dc9e:	4618      	mov	r0, r3
 800dca0:	3710      	adds	r7, #16
 800dca2:	46bd      	mov	sp, r7
 800dca4:	bd80      	pop	{r7, pc}
 800dca6:	bf00      	nop
 800dca8:	2000f260 	.word	0x2000f260
 800dcac:	2000f276 	.word	0x2000f276
 800dcb0:	0800d969 	.word	0x0800d969
 800dcb4:	006ddd00 	.word	0x006ddd00

0800dcb8 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d107      	bne.n	800dcd6 <tcp_pcb_purge+0x1e>
 800dcc6:	4b21      	ldr	r3, [pc, #132]	; (800dd4c <tcp_pcb_purge+0x94>)
 800dcc8:	f640 0251 	movw	r2, #2129	; 0x851
 800dccc:	4920      	ldr	r1, [pc, #128]	; (800dd50 <tcp_pcb_purge+0x98>)
 800dcce:	4821      	ldr	r0, [pc, #132]	; (800dd54 <tcp_pcb_purge+0x9c>)
 800dcd0:	f009 fa06 	bl	80170e0 <iprintf>
 800dcd4:	e037      	b.n	800dd46 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	7d1b      	ldrb	r3, [r3, #20]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d033      	beq.n	800dd46 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800dce2:	2b0a      	cmp	r3, #10
 800dce4:	d02f      	beq.n	800dd46 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800dcea:	2b01      	cmp	r3, #1
 800dcec:	d02b      	beq.n	800dd46 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d007      	beq.n	800dd06 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7fe fb60 	bl	800c3c0 <pbuf_free>
      pcb->refused_data = NULL;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2200      	movs	r2, #0
 800dd04:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d002      	beq.n	800dd14 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800dd0e:	6878      	ldr	r0, [r7, #4]
 800dd10:	f000 f986 	bl	800e020 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800dd1a:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800dd20:	4618      	mov	r0, r3
 800dd22:	f7ff fdc7 	bl	800d8b4 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dd2a:	4618      	mov	r0, r3
 800dd2c:	f7ff fdc2 	bl	800d8b4 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	2200      	movs	r2, #0
 800dd34:	66da      	str	r2, [r3, #108]	; 0x6c
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2200      	movs	r2, #0
 800dd42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800dd46:	3708      	adds	r7, #8
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	bd80      	pop	{r7, pc}
 800dd4c:	08018cb8 	.word	0x08018cb8
 800dd50:	08019304 	.word	0x08019304
 800dd54:	08018cfc 	.word	0x08018cfc

0800dd58 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b084      	sub	sp, #16
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
 800dd60:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800dd62:	683b      	ldr	r3, [r7, #0]
 800dd64:	2b00      	cmp	r3, #0
 800dd66:	d106      	bne.n	800dd76 <tcp_pcb_remove+0x1e>
 800dd68:	4b3e      	ldr	r3, [pc, #248]	; (800de64 <tcp_pcb_remove+0x10c>)
 800dd6a:	f640 0283 	movw	r2, #2179	; 0x883
 800dd6e:	493e      	ldr	r1, [pc, #248]	; (800de68 <tcp_pcb_remove+0x110>)
 800dd70:	483e      	ldr	r0, [pc, #248]	; (800de6c <tcp_pcb_remove+0x114>)
 800dd72:	f009 f9b5 	bl	80170e0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800dd76:	687b      	ldr	r3, [r7, #4]
 800dd78:	2b00      	cmp	r3, #0
 800dd7a:	d106      	bne.n	800dd8a <tcp_pcb_remove+0x32>
 800dd7c:	4b39      	ldr	r3, [pc, #228]	; (800de64 <tcp_pcb_remove+0x10c>)
 800dd7e:	f640 0284 	movw	r2, #2180	; 0x884
 800dd82:	493b      	ldr	r1, [pc, #236]	; (800de70 <tcp_pcb_remove+0x118>)
 800dd84:	4839      	ldr	r0, [pc, #228]	; (800de6c <tcp_pcb_remove+0x114>)
 800dd86:	f009 f9ab 	bl	80170e0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	683a      	ldr	r2, [r7, #0]
 800dd90:	429a      	cmp	r2, r3
 800dd92:	d105      	bne.n	800dda0 <tcp_pcb_remove+0x48>
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	68da      	ldr	r2, [r3, #12]
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	601a      	str	r2, [r3, #0]
 800dd9e:	e013      	b.n	800ddc8 <tcp_pcb_remove+0x70>
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	60fb      	str	r3, [r7, #12]
 800dda6:	e00c      	b.n	800ddc2 <tcp_pcb_remove+0x6a>
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	68db      	ldr	r3, [r3, #12]
 800ddac:	683a      	ldr	r2, [r7, #0]
 800ddae:	429a      	cmp	r2, r3
 800ddb0:	d104      	bne.n	800ddbc <tcp_pcb_remove+0x64>
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	68da      	ldr	r2, [r3, #12]
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	60da      	str	r2, [r3, #12]
 800ddba:	e005      	b.n	800ddc8 <tcp_pcb_remove+0x70>
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	68db      	ldr	r3, [r3, #12]
 800ddc0:	60fb      	str	r3, [r7, #12]
 800ddc2:	68fb      	ldr	r3, [r7, #12]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d1ef      	bne.n	800dda8 <tcp_pcb_remove+0x50>
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	2200      	movs	r2, #0
 800ddcc:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800ddce:	6838      	ldr	r0, [r7, #0]
 800ddd0:	f7ff ff72 	bl	800dcb8 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	7d1b      	ldrb	r3, [r3, #20]
 800ddd8:	2b0a      	cmp	r3, #10
 800ddda:	d013      	beq.n	800de04 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800dddc:	683b      	ldr	r3, [r7, #0]
 800ddde:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d00f      	beq.n	800de04 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	8b5b      	ldrh	r3, [r3, #26]
 800dde8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800ddec:	2b00      	cmp	r3, #0
 800ddee:	d009      	beq.n	800de04 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800ddf0:	683b      	ldr	r3, [r7, #0]
 800ddf2:	8b5b      	ldrh	r3, [r3, #26]
 800ddf4:	f043 0302 	orr.w	r3, r3, #2
 800ddf8:	b29a      	uxth	r2, r3
 800ddfa:	683b      	ldr	r3, [r7, #0]
 800ddfc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800ddfe:	6838      	ldr	r0, [r7, #0]
 800de00:	f002 ff6e 	bl	8010ce0 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	7d1b      	ldrb	r3, [r3, #20]
 800de08:	2b01      	cmp	r3, #1
 800de0a:	d020      	beq.n	800de4e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800de0c:	683b      	ldr	r3, [r7, #0]
 800de0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800de10:	2b00      	cmp	r3, #0
 800de12:	d006      	beq.n	800de22 <tcp_pcb_remove+0xca>
 800de14:	4b13      	ldr	r3, [pc, #76]	; (800de64 <tcp_pcb_remove+0x10c>)
 800de16:	f640 0293 	movw	r2, #2195	; 0x893
 800de1a:	4916      	ldr	r1, [pc, #88]	; (800de74 <tcp_pcb_remove+0x11c>)
 800de1c:	4813      	ldr	r0, [pc, #76]	; (800de6c <tcp_pcb_remove+0x114>)
 800de1e:	f009 f95f 	bl	80170e0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800de22:	683b      	ldr	r3, [r7, #0]
 800de24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de26:	2b00      	cmp	r3, #0
 800de28:	d006      	beq.n	800de38 <tcp_pcb_remove+0xe0>
 800de2a:	4b0e      	ldr	r3, [pc, #56]	; (800de64 <tcp_pcb_remove+0x10c>)
 800de2c:	f640 0294 	movw	r2, #2196	; 0x894
 800de30:	4911      	ldr	r1, [pc, #68]	; (800de78 <tcp_pcb_remove+0x120>)
 800de32:	480e      	ldr	r0, [pc, #56]	; (800de6c <tcp_pcb_remove+0x114>)
 800de34:	f009 f954 	bl	80170e0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800de38:	683b      	ldr	r3, [r7, #0]
 800de3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d006      	beq.n	800de4e <tcp_pcb_remove+0xf6>
 800de40:	4b08      	ldr	r3, [pc, #32]	; (800de64 <tcp_pcb_remove+0x10c>)
 800de42:	f640 0296 	movw	r2, #2198	; 0x896
 800de46:	490d      	ldr	r1, [pc, #52]	; (800de7c <tcp_pcb_remove+0x124>)
 800de48:	4808      	ldr	r0, [pc, #32]	; (800de6c <tcp_pcb_remove+0x114>)
 800de4a:	f009 f949 	bl	80170e0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	2200      	movs	r2, #0
 800de52:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800de54:	683b      	ldr	r3, [r7, #0]
 800de56:	2200      	movs	r2, #0
 800de58:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800de5a:	bf00      	nop
 800de5c:	3710      	adds	r7, #16
 800de5e:	46bd      	mov	sp, r7
 800de60:	bd80      	pop	{r7, pc}
 800de62:	bf00      	nop
 800de64:	08018cb8 	.word	0x08018cb8
 800de68:	08019320 	.word	0x08019320
 800de6c:	08018cfc 	.word	0x08018cfc
 800de70:	0801933c 	.word	0x0801933c
 800de74:	0801935c 	.word	0x0801935c
 800de78:	08019374 	.word	0x08019374
 800de7c:	08019390 	.word	0x08019390

0800de80 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b082      	sub	sp, #8
 800de84:	af00      	add	r7, sp, #0
 800de86:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d106      	bne.n	800de9c <tcp_next_iss+0x1c>
 800de8e:	4b0a      	ldr	r3, [pc, #40]	; (800deb8 <tcp_next_iss+0x38>)
 800de90:	f640 02af 	movw	r2, #2223	; 0x8af
 800de94:	4909      	ldr	r1, [pc, #36]	; (800debc <tcp_next_iss+0x3c>)
 800de96:	480a      	ldr	r0, [pc, #40]	; (800dec0 <tcp_next_iss+0x40>)
 800de98:	f009 f922 	bl	80170e0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800de9c:	4b09      	ldr	r3, [pc, #36]	; (800dec4 <tcp_next_iss+0x44>)
 800de9e:	681a      	ldr	r2, [r3, #0]
 800dea0:	4b09      	ldr	r3, [pc, #36]	; (800dec8 <tcp_next_iss+0x48>)
 800dea2:	681b      	ldr	r3, [r3, #0]
 800dea4:	4413      	add	r3, r2
 800dea6:	4a07      	ldr	r2, [pc, #28]	; (800dec4 <tcp_next_iss+0x44>)
 800dea8:	6013      	str	r3, [r2, #0]
  return iss;
 800deaa:	4b06      	ldr	r3, [pc, #24]	; (800dec4 <tcp_next_iss+0x44>)
 800deac:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800deae:	4618      	mov	r0, r3
 800deb0:	3708      	adds	r7, #8
 800deb2:	46bd      	mov	sp, r7
 800deb4:	bd80      	pop	{r7, pc}
 800deb6:	bf00      	nop
 800deb8:	08018cb8 	.word	0x08018cb8
 800debc:	080193a8 	.word	0x080193a8
 800dec0:	08018cfc 	.word	0x08018cfc
 800dec4:	20000028 	.word	0x20000028
 800dec8:	2000f260 	.word	0x2000f260

0800decc <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b086      	sub	sp, #24
 800ded0:	af00      	add	r7, sp, #0
 800ded2:	4603      	mov	r3, r0
 800ded4:	60b9      	str	r1, [r7, #8]
 800ded6:	607a      	str	r2, [r7, #4]
 800ded8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d106      	bne.n	800deee <tcp_eff_send_mss_netif+0x22>
 800dee0:	4b14      	ldr	r3, [pc, #80]	; (800df34 <tcp_eff_send_mss_netif+0x68>)
 800dee2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800dee6:	4914      	ldr	r1, [pc, #80]	; (800df38 <tcp_eff_send_mss_netif+0x6c>)
 800dee8:	4814      	ldr	r0, [pc, #80]	; (800df3c <tcp_eff_send_mss_netif+0x70>)
 800deea:	f009 f8f9 	bl	80170e0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	2b00      	cmp	r3, #0
 800def2:	d101      	bne.n	800def8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800def4:	89fb      	ldrh	r3, [r7, #14]
 800def6:	e019      	b.n	800df2c <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800def8:	68bb      	ldr	r3, [r7, #8]
 800defa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800defc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800defe:	8afb      	ldrh	r3, [r7, #22]
 800df00:	2b00      	cmp	r3, #0
 800df02:	d012      	beq.n	800df2a <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800df04:	2328      	movs	r3, #40	; 0x28
 800df06:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800df08:	8afa      	ldrh	r2, [r7, #22]
 800df0a:	8abb      	ldrh	r3, [r7, #20]
 800df0c:	429a      	cmp	r2, r3
 800df0e:	d904      	bls.n	800df1a <tcp_eff_send_mss_netif+0x4e>
 800df10:	8afa      	ldrh	r2, [r7, #22]
 800df12:	8abb      	ldrh	r3, [r7, #20]
 800df14:	1ad3      	subs	r3, r2, r3
 800df16:	b29b      	uxth	r3, r3
 800df18:	e000      	b.n	800df1c <tcp_eff_send_mss_netif+0x50>
 800df1a:	2300      	movs	r3, #0
 800df1c:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800df1e:	8a7a      	ldrh	r2, [r7, #18]
 800df20:	89fb      	ldrh	r3, [r7, #14]
 800df22:	4293      	cmp	r3, r2
 800df24:	bf28      	it	cs
 800df26:	4613      	movcs	r3, r2
 800df28:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800df2a:	89fb      	ldrh	r3, [r7, #14]
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	3718      	adds	r7, #24
 800df30:	46bd      	mov	sp, r7
 800df32:	bd80      	pop	{r7, pc}
 800df34:	08018cb8 	.word	0x08018cb8
 800df38:	080193c4 	.word	0x080193c4
 800df3c:	08018cfc 	.word	0x08018cfc

0800df40 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b084      	sub	sp, #16
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d119      	bne.n	800df88 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800df54:	4b10      	ldr	r3, [pc, #64]	; (800df98 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800df56:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800df5a:	4910      	ldr	r1, [pc, #64]	; (800df9c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800df5c:	4810      	ldr	r0, [pc, #64]	; (800dfa0 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800df5e:	f009 f8bf 	bl	80170e0 <iprintf>

  while (pcb != NULL) {
 800df62:	e011      	b.n	800df88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	429a      	cmp	r2, r3
 800df6e:	d108      	bne.n	800df82 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	68db      	ldr	r3, [r3, #12]
 800df74:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800df76:	68f8      	ldr	r0, [r7, #12]
 800df78:	f7fe ffc6 	bl	800cf08 <tcp_abort>
      pcb = next;
 800df7c:	68bb      	ldr	r3, [r7, #8]
 800df7e:	60fb      	str	r3, [r7, #12]
 800df80:	e002      	b.n	800df88 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	68db      	ldr	r3, [r3, #12]
 800df86:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d1ea      	bne.n	800df64 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800df8e:	bf00      	nop
 800df90:	bf00      	nop
 800df92:	3710      	adds	r7, #16
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}
 800df98:	08018cb8 	.word	0x08018cb8
 800df9c:	080193ec 	.word	0x080193ec
 800dfa0:	08018cfc 	.word	0x08018cfc

0800dfa4 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d02a      	beq.n	800e00a <tcp_netif_ip_addr_changed+0x66>
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	2b00      	cmp	r3, #0
 800dfba:	d026      	beq.n	800e00a <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800dfbc:	4b15      	ldr	r3, [pc, #84]	; (800e014 <tcp_netif_ip_addr_changed+0x70>)
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f7ff ffbc 	bl	800df40 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800dfc8:	4b13      	ldr	r3, [pc, #76]	; (800e018 <tcp_netif_ip_addr_changed+0x74>)
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	4619      	mov	r1, r3
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f7ff ffb6 	bl	800df40 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800dfd4:	683b      	ldr	r3, [r7, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d017      	beq.n	800e00a <tcp_netif_ip_addr_changed+0x66>
 800dfda:	683b      	ldr	r3, [r7, #0]
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d013      	beq.n	800e00a <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dfe2:	4b0e      	ldr	r3, [pc, #56]	; (800e01c <tcp_netif_ip_addr_changed+0x78>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	60fb      	str	r3, [r7, #12]
 800dfe8:	e00c      	b.n	800e004 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	681a      	ldr	r2, [r3, #0]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	429a      	cmp	r2, r3
 800dff4:	d103      	bne.n	800dffe <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800dff6:	683b      	ldr	r3, [r7, #0]
 800dff8:	681a      	ldr	r2, [r3, #0]
 800dffa:	68fb      	ldr	r3, [r7, #12]
 800dffc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dffe:	68fb      	ldr	r3, [r7, #12]
 800e000:	68db      	ldr	r3, [r3, #12]
 800e002:	60fb      	str	r3, [r7, #12]
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d1ef      	bne.n	800dfea <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e00a:	bf00      	nop
 800e00c:	3710      	adds	r7, #16
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
 800e012:	bf00      	nop
 800e014:	2000f26c 	.word	0x2000f26c
 800e018:	2000f264 	.word	0x2000f264
 800e01c:	2000f268 	.word	0x2000f268

0800e020 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e020:	b580      	push	{r7, lr}
 800e022:	b082      	sub	sp, #8
 800e024:	af00      	add	r7, sp, #0
 800e026:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d007      	beq.n	800e040 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e034:	4618      	mov	r0, r3
 800e036:	f7ff fc3d 	bl	800d8b4 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	2200      	movs	r2, #0
 800e03e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e040:	bf00      	nop
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}

0800e048 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e048:	b590      	push	{r4, r7, lr}
 800e04a:	b08d      	sub	sp, #52	; 0x34
 800e04c:	af04      	add	r7, sp, #16
 800e04e:	6078      	str	r0, [r7, #4]
 800e050:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2b00      	cmp	r3, #0
 800e056:	d105      	bne.n	800e064 <tcp_input+0x1c>
 800e058:	4b9b      	ldr	r3, [pc, #620]	; (800e2c8 <tcp_input+0x280>)
 800e05a:	2283      	movs	r2, #131	; 0x83
 800e05c:	499b      	ldr	r1, [pc, #620]	; (800e2cc <tcp_input+0x284>)
 800e05e:	489c      	ldr	r0, [pc, #624]	; (800e2d0 <tcp_input+0x288>)
 800e060:	f009 f83e 	bl	80170e0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	685b      	ldr	r3, [r3, #4]
 800e068:	4a9a      	ldr	r2, [pc, #616]	; (800e2d4 <tcp_input+0x28c>)
 800e06a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	895b      	ldrh	r3, [r3, #10]
 800e070:	2b13      	cmp	r3, #19
 800e072:	f240 83d1 	bls.w	800e818 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e076:	4b98      	ldr	r3, [pc, #608]	; (800e2d8 <tcp_input+0x290>)
 800e078:	695b      	ldr	r3, [r3, #20]
 800e07a:	4a97      	ldr	r2, [pc, #604]	; (800e2d8 <tcp_input+0x290>)
 800e07c:	6812      	ldr	r2, [r2, #0]
 800e07e:	4611      	mov	r1, r2
 800e080:	4618      	mov	r0, r3
 800e082:	f007 fe0d 	bl	8015ca0 <ip4_addr_isbroadcast_u32>
 800e086:	4603      	mov	r3, r0
 800e088:	2b00      	cmp	r3, #0
 800e08a:	f040 83c7 	bne.w	800e81c <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e08e:	4b92      	ldr	r3, [pc, #584]	; (800e2d8 <tcp_input+0x290>)
 800e090:	695b      	ldr	r3, [r3, #20]
 800e092:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e096:	2be0      	cmp	r3, #224	; 0xe0
 800e098:	f000 83c0 	beq.w	800e81c <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e09c:	4b8d      	ldr	r3, [pc, #564]	; (800e2d4 <tcp_input+0x28c>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	899b      	ldrh	r3, [r3, #12]
 800e0a2:	b29b      	uxth	r3, r3
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7fc fb63 	bl	800a770 <lwip_htons>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	0b1b      	lsrs	r3, r3, #12
 800e0ae:	b29b      	uxth	r3, r3
 800e0b0:	b2db      	uxtb	r3, r3
 800e0b2:	009b      	lsls	r3, r3, #2
 800e0b4:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e0b6:	7cbb      	ldrb	r3, [r7, #18]
 800e0b8:	2b13      	cmp	r3, #19
 800e0ba:	f240 83b1 	bls.w	800e820 <tcp_input+0x7d8>
 800e0be:	7cbb      	ldrb	r3, [r7, #18]
 800e0c0:	b29a      	uxth	r2, r3
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	891b      	ldrh	r3, [r3, #8]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	f200 83aa 	bhi.w	800e820 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e0cc:	7cbb      	ldrb	r3, [r7, #18]
 800e0ce:	b29b      	uxth	r3, r3
 800e0d0:	3b14      	subs	r3, #20
 800e0d2:	b29a      	uxth	r2, r3
 800e0d4:	4b81      	ldr	r3, [pc, #516]	; (800e2dc <tcp_input+0x294>)
 800e0d6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e0d8:	4b81      	ldr	r3, [pc, #516]	; (800e2e0 <tcp_input+0x298>)
 800e0da:	2200      	movs	r2, #0
 800e0dc:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	895a      	ldrh	r2, [r3, #10]
 800e0e2:	7cbb      	ldrb	r3, [r7, #18]
 800e0e4:	b29b      	uxth	r3, r3
 800e0e6:	429a      	cmp	r2, r3
 800e0e8:	d309      	bcc.n	800e0fe <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e0ea:	4b7c      	ldr	r3, [pc, #496]	; (800e2dc <tcp_input+0x294>)
 800e0ec:	881a      	ldrh	r2, [r3, #0]
 800e0ee:	4b7d      	ldr	r3, [pc, #500]	; (800e2e4 <tcp_input+0x29c>)
 800e0f0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e0f2:	7cbb      	ldrb	r3, [r7, #18]
 800e0f4:	4619      	mov	r1, r3
 800e0f6:	6878      	ldr	r0, [r7, #4]
 800e0f8:	f7fe f8dc 	bl	800c2b4 <pbuf_remove_header>
 800e0fc:	e04e      	b.n	800e19c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d105      	bne.n	800e112 <tcp_input+0xca>
 800e106:	4b70      	ldr	r3, [pc, #448]	; (800e2c8 <tcp_input+0x280>)
 800e108:	22c2      	movs	r2, #194	; 0xc2
 800e10a:	4977      	ldr	r1, [pc, #476]	; (800e2e8 <tcp_input+0x2a0>)
 800e10c:	4870      	ldr	r0, [pc, #448]	; (800e2d0 <tcp_input+0x288>)
 800e10e:	f008 ffe7 	bl	80170e0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e112:	2114      	movs	r1, #20
 800e114:	6878      	ldr	r0, [r7, #4]
 800e116:	f7fe f8cd 	bl	800c2b4 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	895a      	ldrh	r2, [r3, #10]
 800e11e:	4b71      	ldr	r3, [pc, #452]	; (800e2e4 <tcp_input+0x29c>)
 800e120:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e122:	4b6e      	ldr	r3, [pc, #440]	; (800e2dc <tcp_input+0x294>)
 800e124:	881a      	ldrh	r2, [r3, #0]
 800e126:	4b6f      	ldr	r3, [pc, #444]	; (800e2e4 <tcp_input+0x29c>)
 800e128:	881b      	ldrh	r3, [r3, #0]
 800e12a:	1ad3      	subs	r3, r2, r3
 800e12c:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e12e:	4b6d      	ldr	r3, [pc, #436]	; (800e2e4 <tcp_input+0x29c>)
 800e130:	881b      	ldrh	r3, [r3, #0]
 800e132:	4619      	mov	r1, r3
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f7fe f8bd 	bl	800c2b4 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	895b      	ldrh	r3, [r3, #10]
 800e140:	8a3a      	ldrh	r2, [r7, #16]
 800e142:	429a      	cmp	r2, r3
 800e144:	f200 836e 	bhi.w	800e824 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	685b      	ldr	r3, [r3, #4]
 800e14e:	4a64      	ldr	r2, [pc, #400]	; (800e2e0 <tcp_input+0x298>)
 800e150:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	8a3a      	ldrh	r2, [r7, #16]
 800e158:	4611      	mov	r1, r2
 800e15a:	4618      	mov	r0, r3
 800e15c:	f7fe f8aa 	bl	800c2b4 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e160:	687b      	ldr	r3, [r7, #4]
 800e162:	891a      	ldrh	r2, [r3, #8]
 800e164:	8a3b      	ldrh	r3, [r7, #16]
 800e166:	1ad3      	subs	r3, r2, r3
 800e168:	b29a      	uxth	r2, r3
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	895b      	ldrh	r3, [r3, #10]
 800e172:	2b00      	cmp	r3, #0
 800e174:	d005      	beq.n	800e182 <tcp_input+0x13a>
 800e176:	4b54      	ldr	r3, [pc, #336]	; (800e2c8 <tcp_input+0x280>)
 800e178:	22df      	movs	r2, #223	; 0xdf
 800e17a:	495c      	ldr	r1, [pc, #368]	; (800e2ec <tcp_input+0x2a4>)
 800e17c:	4854      	ldr	r0, [pc, #336]	; (800e2d0 <tcp_input+0x288>)
 800e17e:	f008 ffaf 	bl	80170e0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	891a      	ldrh	r2, [r3, #8]
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	891b      	ldrh	r3, [r3, #8]
 800e18c:	429a      	cmp	r2, r3
 800e18e:	d005      	beq.n	800e19c <tcp_input+0x154>
 800e190:	4b4d      	ldr	r3, [pc, #308]	; (800e2c8 <tcp_input+0x280>)
 800e192:	22e0      	movs	r2, #224	; 0xe0
 800e194:	4956      	ldr	r1, [pc, #344]	; (800e2f0 <tcp_input+0x2a8>)
 800e196:	484e      	ldr	r0, [pc, #312]	; (800e2d0 <tcp_input+0x288>)
 800e198:	f008 ffa2 	bl	80170e0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e19c:	4b4d      	ldr	r3, [pc, #308]	; (800e2d4 <tcp_input+0x28c>)
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	881b      	ldrh	r3, [r3, #0]
 800e1a2:	b29b      	uxth	r3, r3
 800e1a4:	4a4b      	ldr	r2, [pc, #300]	; (800e2d4 <tcp_input+0x28c>)
 800e1a6:	6814      	ldr	r4, [r2, #0]
 800e1a8:	4618      	mov	r0, r3
 800e1aa:	f7fc fae1 	bl	800a770 <lwip_htons>
 800e1ae:	4603      	mov	r3, r0
 800e1b0:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e1b2:	4b48      	ldr	r3, [pc, #288]	; (800e2d4 <tcp_input+0x28c>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	885b      	ldrh	r3, [r3, #2]
 800e1b8:	b29b      	uxth	r3, r3
 800e1ba:	4a46      	ldr	r2, [pc, #280]	; (800e2d4 <tcp_input+0x28c>)
 800e1bc:	6814      	ldr	r4, [r2, #0]
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7fc fad6 	bl	800a770 <lwip_htons>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e1c8:	4b42      	ldr	r3, [pc, #264]	; (800e2d4 <tcp_input+0x28c>)
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	685b      	ldr	r3, [r3, #4]
 800e1ce:	4a41      	ldr	r2, [pc, #260]	; (800e2d4 <tcp_input+0x28c>)
 800e1d0:	6814      	ldr	r4, [r2, #0]
 800e1d2:	4618      	mov	r0, r3
 800e1d4:	f7fc fae1 	bl	800a79a <lwip_htonl>
 800e1d8:	4603      	mov	r3, r0
 800e1da:	6063      	str	r3, [r4, #4]
 800e1dc:	6863      	ldr	r3, [r4, #4]
 800e1de:	4a45      	ldr	r2, [pc, #276]	; (800e2f4 <tcp_input+0x2ac>)
 800e1e0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e1e2:	4b3c      	ldr	r3, [pc, #240]	; (800e2d4 <tcp_input+0x28c>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	689b      	ldr	r3, [r3, #8]
 800e1e8:	4a3a      	ldr	r2, [pc, #232]	; (800e2d4 <tcp_input+0x28c>)
 800e1ea:	6814      	ldr	r4, [r2, #0]
 800e1ec:	4618      	mov	r0, r3
 800e1ee:	f7fc fad4 	bl	800a79a <lwip_htonl>
 800e1f2:	4603      	mov	r3, r0
 800e1f4:	60a3      	str	r3, [r4, #8]
 800e1f6:	68a3      	ldr	r3, [r4, #8]
 800e1f8:	4a3f      	ldr	r2, [pc, #252]	; (800e2f8 <tcp_input+0x2b0>)
 800e1fa:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e1fc:	4b35      	ldr	r3, [pc, #212]	; (800e2d4 <tcp_input+0x28c>)
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	89db      	ldrh	r3, [r3, #14]
 800e202:	b29b      	uxth	r3, r3
 800e204:	4a33      	ldr	r2, [pc, #204]	; (800e2d4 <tcp_input+0x28c>)
 800e206:	6814      	ldr	r4, [r2, #0]
 800e208:	4618      	mov	r0, r3
 800e20a:	f7fc fab1 	bl	800a770 <lwip_htons>
 800e20e:	4603      	mov	r3, r0
 800e210:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e212:	4b30      	ldr	r3, [pc, #192]	; (800e2d4 <tcp_input+0x28c>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	899b      	ldrh	r3, [r3, #12]
 800e218:	b29b      	uxth	r3, r3
 800e21a:	4618      	mov	r0, r3
 800e21c:	f7fc faa8 	bl	800a770 <lwip_htons>
 800e220:	4603      	mov	r3, r0
 800e222:	b2db      	uxtb	r3, r3
 800e224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e228:	b2da      	uxtb	r2, r3
 800e22a:	4b34      	ldr	r3, [pc, #208]	; (800e2fc <tcp_input+0x2b4>)
 800e22c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	891a      	ldrh	r2, [r3, #8]
 800e232:	4b33      	ldr	r3, [pc, #204]	; (800e300 <tcp_input+0x2b8>)
 800e234:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e236:	4b31      	ldr	r3, [pc, #196]	; (800e2fc <tcp_input+0x2b4>)
 800e238:	781b      	ldrb	r3, [r3, #0]
 800e23a:	f003 0303 	and.w	r3, r3, #3
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d00c      	beq.n	800e25c <tcp_input+0x214>
    tcplen++;
 800e242:	4b2f      	ldr	r3, [pc, #188]	; (800e300 <tcp_input+0x2b8>)
 800e244:	881b      	ldrh	r3, [r3, #0]
 800e246:	3301      	adds	r3, #1
 800e248:	b29a      	uxth	r2, r3
 800e24a:	4b2d      	ldr	r3, [pc, #180]	; (800e300 <tcp_input+0x2b8>)
 800e24c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e24e:	687b      	ldr	r3, [r7, #4]
 800e250:	891a      	ldrh	r2, [r3, #8]
 800e252:	4b2b      	ldr	r3, [pc, #172]	; (800e300 <tcp_input+0x2b8>)
 800e254:	881b      	ldrh	r3, [r3, #0]
 800e256:	429a      	cmp	r2, r3
 800e258:	f200 82e6 	bhi.w	800e828 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e25c:	2300      	movs	r3, #0
 800e25e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e260:	4b28      	ldr	r3, [pc, #160]	; (800e304 <tcp_input+0x2bc>)
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	61fb      	str	r3, [r7, #28]
 800e266:	e09d      	b.n	800e3a4 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e268:	69fb      	ldr	r3, [r7, #28]
 800e26a:	7d1b      	ldrb	r3, [r3, #20]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d105      	bne.n	800e27c <tcp_input+0x234>
 800e270:	4b15      	ldr	r3, [pc, #84]	; (800e2c8 <tcp_input+0x280>)
 800e272:	22fb      	movs	r2, #251	; 0xfb
 800e274:	4924      	ldr	r1, [pc, #144]	; (800e308 <tcp_input+0x2c0>)
 800e276:	4816      	ldr	r0, [pc, #88]	; (800e2d0 <tcp_input+0x288>)
 800e278:	f008 ff32 	bl	80170e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e27c:	69fb      	ldr	r3, [r7, #28]
 800e27e:	7d1b      	ldrb	r3, [r3, #20]
 800e280:	2b0a      	cmp	r3, #10
 800e282:	d105      	bne.n	800e290 <tcp_input+0x248>
 800e284:	4b10      	ldr	r3, [pc, #64]	; (800e2c8 <tcp_input+0x280>)
 800e286:	22fc      	movs	r2, #252	; 0xfc
 800e288:	4920      	ldr	r1, [pc, #128]	; (800e30c <tcp_input+0x2c4>)
 800e28a:	4811      	ldr	r0, [pc, #68]	; (800e2d0 <tcp_input+0x288>)
 800e28c:	f008 ff28 	bl	80170e0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e290:	69fb      	ldr	r3, [r7, #28]
 800e292:	7d1b      	ldrb	r3, [r3, #20]
 800e294:	2b01      	cmp	r3, #1
 800e296:	d105      	bne.n	800e2a4 <tcp_input+0x25c>
 800e298:	4b0b      	ldr	r3, [pc, #44]	; (800e2c8 <tcp_input+0x280>)
 800e29a:	22fd      	movs	r2, #253	; 0xfd
 800e29c:	491c      	ldr	r1, [pc, #112]	; (800e310 <tcp_input+0x2c8>)
 800e29e:	480c      	ldr	r0, [pc, #48]	; (800e2d0 <tcp_input+0x288>)
 800e2a0:	f008 ff1e 	bl	80170e0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e2a4:	69fb      	ldr	r3, [r7, #28]
 800e2a6:	7a1b      	ldrb	r3, [r3, #8]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d033      	beq.n	800e314 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e2ac:	69fb      	ldr	r3, [r7, #28]
 800e2ae:	7a1a      	ldrb	r2, [r3, #8]
 800e2b0:	4b09      	ldr	r3, [pc, #36]	; (800e2d8 <tcp_input+0x290>)
 800e2b2:	685b      	ldr	r3, [r3, #4]
 800e2b4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e2b8:	3301      	adds	r3, #1
 800e2ba:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e2bc:	429a      	cmp	r2, r3
 800e2be:	d029      	beq.n	800e314 <tcp_input+0x2cc>
      prev = pcb;
 800e2c0:	69fb      	ldr	r3, [r7, #28]
 800e2c2:	61bb      	str	r3, [r7, #24]
      continue;
 800e2c4:	e06b      	b.n	800e39e <tcp_input+0x356>
 800e2c6:	bf00      	nop
 800e2c8:	08019420 	.word	0x08019420
 800e2cc:	08019454 	.word	0x08019454
 800e2d0:	0801946c 	.word	0x0801946c
 800e2d4:	2000f288 	.word	0x2000f288
 800e2d8:	200098e0 	.word	0x200098e0
 800e2dc:	2000f28c 	.word	0x2000f28c
 800e2e0:	2000f290 	.word	0x2000f290
 800e2e4:	2000f28e 	.word	0x2000f28e
 800e2e8:	08019494 	.word	0x08019494
 800e2ec:	080194a4 	.word	0x080194a4
 800e2f0:	080194b0 	.word	0x080194b0
 800e2f4:	2000f298 	.word	0x2000f298
 800e2f8:	2000f29c 	.word	0x2000f29c
 800e2fc:	2000f2a4 	.word	0x2000f2a4
 800e300:	2000f2a2 	.word	0x2000f2a2
 800e304:	2000f26c 	.word	0x2000f26c
 800e308:	080194d0 	.word	0x080194d0
 800e30c:	080194f8 	.word	0x080194f8
 800e310:	08019524 	.word	0x08019524
    }

    if (pcb->remote_port == tcphdr->src &&
 800e314:	69fb      	ldr	r3, [r7, #28]
 800e316:	8b1a      	ldrh	r2, [r3, #24]
 800e318:	4b72      	ldr	r3, [pc, #456]	; (800e4e4 <tcp_input+0x49c>)
 800e31a:	681b      	ldr	r3, [r3, #0]
 800e31c:	881b      	ldrh	r3, [r3, #0]
 800e31e:	b29b      	uxth	r3, r3
 800e320:	429a      	cmp	r2, r3
 800e322:	d13a      	bne.n	800e39a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e324:	69fb      	ldr	r3, [r7, #28]
 800e326:	8ada      	ldrh	r2, [r3, #22]
 800e328:	4b6e      	ldr	r3, [pc, #440]	; (800e4e4 <tcp_input+0x49c>)
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	885b      	ldrh	r3, [r3, #2]
 800e32e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e330:	429a      	cmp	r2, r3
 800e332:	d132      	bne.n	800e39a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e334:	69fb      	ldr	r3, [r7, #28]
 800e336:	685a      	ldr	r2, [r3, #4]
 800e338:	4b6b      	ldr	r3, [pc, #428]	; (800e4e8 <tcp_input+0x4a0>)
 800e33a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e33c:	429a      	cmp	r2, r3
 800e33e:	d12c      	bne.n	800e39a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e340:	69fb      	ldr	r3, [r7, #28]
 800e342:	681a      	ldr	r2, [r3, #0]
 800e344:	4b68      	ldr	r3, [pc, #416]	; (800e4e8 <tcp_input+0x4a0>)
 800e346:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e348:	429a      	cmp	r2, r3
 800e34a:	d126      	bne.n	800e39a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e34c:	69fb      	ldr	r3, [r7, #28]
 800e34e:	68db      	ldr	r3, [r3, #12]
 800e350:	69fa      	ldr	r2, [r7, #28]
 800e352:	429a      	cmp	r2, r3
 800e354:	d106      	bne.n	800e364 <tcp_input+0x31c>
 800e356:	4b65      	ldr	r3, [pc, #404]	; (800e4ec <tcp_input+0x4a4>)
 800e358:	f240 120d 	movw	r2, #269	; 0x10d
 800e35c:	4964      	ldr	r1, [pc, #400]	; (800e4f0 <tcp_input+0x4a8>)
 800e35e:	4865      	ldr	r0, [pc, #404]	; (800e4f4 <tcp_input+0x4ac>)
 800e360:	f008 febe 	bl	80170e0 <iprintf>
      if (prev != NULL) {
 800e364:	69bb      	ldr	r3, [r7, #24]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d00a      	beq.n	800e380 <tcp_input+0x338>
        prev->next = pcb->next;
 800e36a:	69fb      	ldr	r3, [r7, #28]
 800e36c:	68da      	ldr	r2, [r3, #12]
 800e36e:	69bb      	ldr	r3, [r7, #24]
 800e370:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e372:	4b61      	ldr	r3, [pc, #388]	; (800e4f8 <tcp_input+0x4b0>)
 800e374:	681a      	ldr	r2, [r3, #0]
 800e376:	69fb      	ldr	r3, [r7, #28]
 800e378:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e37a:	4a5f      	ldr	r2, [pc, #380]	; (800e4f8 <tcp_input+0x4b0>)
 800e37c:	69fb      	ldr	r3, [r7, #28]
 800e37e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	68db      	ldr	r3, [r3, #12]
 800e384:	69fa      	ldr	r2, [r7, #28]
 800e386:	429a      	cmp	r2, r3
 800e388:	d111      	bne.n	800e3ae <tcp_input+0x366>
 800e38a:	4b58      	ldr	r3, [pc, #352]	; (800e4ec <tcp_input+0x4a4>)
 800e38c:	f240 1215 	movw	r2, #277	; 0x115
 800e390:	495a      	ldr	r1, [pc, #360]	; (800e4fc <tcp_input+0x4b4>)
 800e392:	4858      	ldr	r0, [pc, #352]	; (800e4f4 <tcp_input+0x4ac>)
 800e394:	f008 fea4 	bl	80170e0 <iprintf>
      break;
 800e398:	e009      	b.n	800e3ae <tcp_input+0x366>
    }
    prev = pcb;
 800e39a:	69fb      	ldr	r3, [r7, #28]
 800e39c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e39e:	69fb      	ldr	r3, [r7, #28]
 800e3a0:	68db      	ldr	r3, [r3, #12]
 800e3a2:	61fb      	str	r3, [r7, #28]
 800e3a4:	69fb      	ldr	r3, [r7, #28]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	f47f af5e 	bne.w	800e268 <tcp_input+0x220>
 800e3ac:	e000      	b.n	800e3b0 <tcp_input+0x368>
      break;
 800e3ae:	bf00      	nop
  }

  if (pcb == NULL) {
 800e3b0:	69fb      	ldr	r3, [r7, #28]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	f040 80aa 	bne.w	800e50c <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e3b8:	4b51      	ldr	r3, [pc, #324]	; (800e500 <tcp_input+0x4b8>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	61fb      	str	r3, [r7, #28]
 800e3be:	e03f      	b.n	800e440 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e3c0:	69fb      	ldr	r3, [r7, #28]
 800e3c2:	7d1b      	ldrb	r3, [r3, #20]
 800e3c4:	2b0a      	cmp	r3, #10
 800e3c6:	d006      	beq.n	800e3d6 <tcp_input+0x38e>
 800e3c8:	4b48      	ldr	r3, [pc, #288]	; (800e4ec <tcp_input+0x4a4>)
 800e3ca:	f240 121f 	movw	r2, #287	; 0x11f
 800e3ce:	494d      	ldr	r1, [pc, #308]	; (800e504 <tcp_input+0x4bc>)
 800e3d0:	4848      	ldr	r0, [pc, #288]	; (800e4f4 <tcp_input+0x4ac>)
 800e3d2:	f008 fe85 	bl	80170e0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e3d6:	69fb      	ldr	r3, [r7, #28]
 800e3d8:	7a1b      	ldrb	r3, [r3, #8]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d009      	beq.n	800e3f2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e3de:	69fb      	ldr	r3, [r7, #28]
 800e3e0:	7a1a      	ldrb	r2, [r3, #8]
 800e3e2:	4b41      	ldr	r3, [pc, #260]	; (800e4e8 <tcp_input+0x4a0>)
 800e3e4:	685b      	ldr	r3, [r3, #4]
 800e3e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e3ee:	429a      	cmp	r2, r3
 800e3f0:	d122      	bne.n	800e438 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800e3f2:	69fb      	ldr	r3, [r7, #28]
 800e3f4:	8b1a      	ldrh	r2, [r3, #24]
 800e3f6:	4b3b      	ldr	r3, [pc, #236]	; (800e4e4 <tcp_input+0x49c>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	881b      	ldrh	r3, [r3, #0]
 800e3fc:	b29b      	uxth	r3, r3
 800e3fe:	429a      	cmp	r2, r3
 800e400:	d11b      	bne.n	800e43a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	8ada      	ldrh	r2, [r3, #22]
 800e406:	4b37      	ldr	r3, [pc, #220]	; (800e4e4 <tcp_input+0x49c>)
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	885b      	ldrh	r3, [r3, #2]
 800e40c:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e40e:	429a      	cmp	r2, r3
 800e410:	d113      	bne.n	800e43a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	685a      	ldr	r2, [r3, #4]
 800e416:	4b34      	ldr	r3, [pc, #208]	; (800e4e8 <tcp_input+0x4a0>)
 800e418:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e41a:	429a      	cmp	r2, r3
 800e41c:	d10d      	bne.n	800e43a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e41e:	69fb      	ldr	r3, [r7, #28]
 800e420:	681a      	ldr	r2, [r3, #0]
 800e422:	4b31      	ldr	r3, [pc, #196]	; (800e4e8 <tcp_input+0x4a0>)
 800e424:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e426:	429a      	cmp	r2, r3
 800e428:	d107      	bne.n	800e43a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800e42a:	69f8      	ldr	r0, [r7, #28]
 800e42c:	f000 fb56 	bl	800eadc <tcp_timewait_input>
        }
        pbuf_free(p);
 800e430:	6878      	ldr	r0, [r7, #4]
 800e432:	f7fd ffc5 	bl	800c3c0 <pbuf_free>
        return;
 800e436:	e1fd      	b.n	800e834 <tcp_input+0x7ec>
        continue;
 800e438:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e43a:	69fb      	ldr	r3, [r7, #28]
 800e43c:	68db      	ldr	r3, [r3, #12]
 800e43e:	61fb      	str	r3, [r7, #28]
 800e440:	69fb      	ldr	r3, [r7, #28]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d1bc      	bne.n	800e3c0 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e446:	2300      	movs	r3, #0
 800e448:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e44a:	4b2f      	ldr	r3, [pc, #188]	; (800e508 <tcp_input+0x4c0>)
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	617b      	str	r3, [r7, #20]
 800e450:	e02a      	b.n	800e4a8 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e452:	697b      	ldr	r3, [r7, #20]
 800e454:	7a1b      	ldrb	r3, [r3, #8]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d00c      	beq.n	800e474 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e45a:	697b      	ldr	r3, [r7, #20]
 800e45c:	7a1a      	ldrb	r2, [r3, #8]
 800e45e:	4b22      	ldr	r3, [pc, #136]	; (800e4e8 <tcp_input+0x4a0>)
 800e460:	685b      	ldr	r3, [r3, #4]
 800e462:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800e466:	3301      	adds	r3, #1
 800e468:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800e46a:	429a      	cmp	r2, r3
 800e46c:	d002      	beq.n	800e474 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800e46e:	697b      	ldr	r3, [r7, #20]
 800e470:	61bb      	str	r3, [r7, #24]
        continue;
 800e472:	e016      	b.n	800e4a2 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800e474:	697b      	ldr	r3, [r7, #20]
 800e476:	8ada      	ldrh	r2, [r3, #22]
 800e478:	4b1a      	ldr	r3, [pc, #104]	; (800e4e4 <tcp_input+0x49c>)
 800e47a:	681b      	ldr	r3, [r3, #0]
 800e47c:	885b      	ldrh	r3, [r3, #2]
 800e47e:	b29b      	uxth	r3, r3
 800e480:	429a      	cmp	r2, r3
 800e482:	d10c      	bne.n	800e49e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e484:	697b      	ldr	r3, [r7, #20]
 800e486:	681a      	ldr	r2, [r3, #0]
 800e488:	4b17      	ldr	r3, [pc, #92]	; (800e4e8 <tcp_input+0x4a0>)
 800e48a:	695b      	ldr	r3, [r3, #20]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	d00f      	beq.n	800e4b0 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e490:	697b      	ldr	r3, [r7, #20]
 800e492:	2b00      	cmp	r3, #0
 800e494:	d00d      	beq.n	800e4b2 <tcp_input+0x46a>
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	2b00      	cmp	r3, #0
 800e49c:	d009      	beq.n	800e4b2 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e49e:	697b      	ldr	r3, [r7, #20]
 800e4a0:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e4a2:	697b      	ldr	r3, [r7, #20]
 800e4a4:	68db      	ldr	r3, [r3, #12]
 800e4a6:	617b      	str	r3, [r7, #20]
 800e4a8:	697b      	ldr	r3, [r7, #20]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d1d1      	bne.n	800e452 <tcp_input+0x40a>
 800e4ae:	e000      	b.n	800e4b2 <tcp_input+0x46a>
            break;
 800e4b0:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	2b00      	cmp	r3, #0
 800e4b6:	d029      	beq.n	800e50c <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e4b8:	69bb      	ldr	r3, [r7, #24]
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	d00a      	beq.n	800e4d4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e4be:	697b      	ldr	r3, [r7, #20]
 800e4c0:	68da      	ldr	r2, [r3, #12]
 800e4c2:	69bb      	ldr	r3, [r7, #24]
 800e4c4:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e4c6:	4b10      	ldr	r3, [pc, #64]	; (800e508 <tcp_input+0x4c0>)
 800e4c8:	681a      	ldr	r2, [r3, #0]
 800e4ca:	697b      	ldr	r3, [r7, #20]
 800e4cc:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e4ce:	4a0e      	ldr	r2, [pc, #56]	; (800e508 <tcp_input+0x4c0>)
 800e4d0:	697b      	ldr	r3, [r7, #20]
 800e4d2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800e4d4:	6978      	ldr	r0, [r7, #20]
 800e4d6:	f000 fa03 	bl	800e8e0 <tcp_listen_input>
      }
      pbuf_free(p);
 800e4da:	6878      	ldr	r0, [r7, #4]
 800e4dc:	f7fd ff70 	bl	800c3c0 <pbuf_free>
      return;
 800e4e0:	e1a8      	b.n	800e834 <tcp_input+0x7ec>
 800e4e2:	bf00      	nop
 800e4e4:	2000f288 	.word	0x2000f288
 800e4e8:	200098e0 	.word	0x200098e0
 800e4ec:	08019420 	.word	0x08019420
 800e4f0:	0801954c 	.word	0x0801954c
 800e4f4:	0801946c 	.word	0x0801946c
 800e4f8:	2000f26c 	.word	0x2000f26c
 800e4fc:	08019578 	.word	0x08019578
 800e500:	2000f270 	.word	0x2000f270
 800e504:	080195a4 	.word	0x080195a4
 800e508:	2000f268 	.word	0x2000f268
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800e50c:	69fb      	ldr	r3, [r7, #28]
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f000 8158 	beq.w	800e7c4 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e514:	4b95      	ldr	r3, [pc, #596]	; (800e76c <tcp_input+0x724>)
 800e516:	2200      	movs	r2, #0
 800e518:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e51a:	687b      	ldr	r3, [r7, #4]
 800e51c:	891a      	ldrh	r2, [r3, #8]
 800e51e:	4b93      	ldr	r3, [pc, #588]	; (800e76c <tcp_input+0x724>)
 800e520:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e522:	4a92      	ldr	r2, [pc, #584]	; (800e76c <tcp_input+0x724>)
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e528:	4b91      	ldr	r3, [pc, #580]	; (800e770 <tcp_input+0x728>)
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	4a8f      	ldr	r2, [pc, #572]	; (800e76c <tcp_input+0x724>)
 800e52e:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e530:	4b90      	ldr	r3, [pc, #576]	; (800e774 <tcp_input+0x72c>)
 800e532:	2200      	movs	r2, #0
 800e534:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e536:	4b90      	ldr	r3, [pc, #576]	; (800e778 <tcp_input+0x730>)
 800e538:	2200      	movs	r2, #0
 800e53a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e53c:	4b8f      	ldr	r3, [pc, #572]	; (800e77c <tcp_input+0x734>)
 800e53e:	2200      	movs	r2, #0
 800e540:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e542:	4b8f      	ldr	r3, [pc, #572]	; (800e780 <tcp_input+0x738>)
 800e544:	781b      	ldrb	r3, [r3, #0]
 800e546:	f003 0308 	and.w	r3, r3, #8
 800e54a:	2b00      	cmp	r3, #0
 800e54c:	d006      	beq.n	800e55c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	7b5b      	ldrb	r3, [r3, #13]
 800e552:	f043 0301 	orr.w	r3, r3, #1
 800e556:	b2da      	uxtb	r2, r3
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e55c:	69fb      	ldr	r3, [r7, #28]
 800e55e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e560:	2b00      	cmp	r3, #0
 800e562:	d017      	beq.n	800e594 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e564:	69f8      	ldr	r0, [r7, #28]
 800e566:	f7ff f929 	bl	800d7bc <tcp_process_refused_data>
 800e56a:	4603      	mov	r3, r0
 800e56c:	f113 0f0d 	cmn.w	r3, #13
 800e570:	d007      	beq.n	800e582 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e572:	69fb      	ldr	r3, [r7, #28]
 800e574:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e576:	2b00      	cmp	r3, #0
 800e578:	d00c      	beq.n	800e594 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e57a:	4b82      	ldr	r3, [pc, #520]	; (800e784 <tcp_input+0x73c>)
 800e57c:	881b      	ldrh	r3, [r3, #0]
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d008      	beq.n	800e594 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e582:	69fb      	ldr	r3, [r7, #28]
 800e584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e586:	2b00      	cmp	r3, #0
 800e588:	f040 80e3 	bne.w	800e752 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e58c:	69f8      	ldr	r0, [r7, #28]
 800e58e:	f003 f9ad 	bl	80118ec <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e592:	e0de      	b.n	800e752 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800e594:	4a7c      	ldr	r2, [pc, #496]	; (800e788 <tcp_input+0x740>)
 800e596:	69fb      	ldr	r3, [r7, #28]
 800e598:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e59a:	69f8      	ldr	r0, [r7, #28]
 800e59c:	f000 fb18 	bl	800ebd0 <tcp_process>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e5a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e5a8:	f113 0f0d 	cmn.w	r3, #13
 800e5ac:	f000 80d3 	beq.w	800e756 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800e5b0:	4b71      	ldr	r3, [pc, #452]	; (800e778 <tcp_input+0x730>)
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	f003 0308 	and.w	r3, r3, #8
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d015      	beq.n	800e5e8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e5bc:	69fb      	ldr	r3, [r7, #28]
 800e5be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d008      	beq.n	800e5d8 <tcp_input+0x590>
 800e5c6:	69fb      	ldr	r3, [r7, #28]
 800e5c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e5cc:	69fa      	ldr	r2, [r7, #28]
 800e5ce:	6912      	ldr	r2, [r2, #16]
 800e5d0:	f06f 010d 	mvn.w	r1, #13
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e5d8:	69f9      	ldr	r1, [r7, #28]
 800e5da:	486c      	ldr	r0, [pc, #432]	; (800e78c <tcp_input+0x744>)
 800e5dc:	f7ff fbbc 	bl	800dd58 <tcp_pcb_remove>
        tcp_free(pcb);
 800e5e0:	69f8      	ldr	r0, [r7, #28]
 800e5e2:	f7fe f9a9 	bl	800c938 <tcp_free>
 800e5e6:	e0da      	b.n	800e79e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e5ec:	4b63      	ldr	r3, [pc, #396]	; (800e77c <tcp_input+0x734>)
 800e5ee:	881b      	ldrh	r3, [r3, #0]
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d01d      	beq.n	800e630 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e5f4:	4b61      	ldr	r3, [pc, #388]	; (800e77c <tcp_input+0x734>)
 800e5f6:	881b      	ldrh	r3, [r3, #0]
 800e5f8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e5fa:	69fb      	ldr	r3, [r7, #28]
 800e5fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e600:	2b00      	cmp	r3, #0
 800e602:	d00a      	beq.n	800e61a <tcp_input+0x5d2>
 800e604:	69fb      	ldr	r3, [r7, #28]
 800e606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e60a:	69fa      	ldr	r2, [r7, #28]
 800e60c:	6910      	ldr	r0, [r2, #16]
 800e60e:	89fa      	ldrh	r2, [r7, #14]
 800e610:	69f9      	ldr	r1, [r7, #28]
 800e612:	4798      	blx	r3
 800e614:	4603      	mov	r3, r0
 800e616:	74fb      	strb	r3, [r7, #19]
 800e618:	e001      	b.n	800e61e <tcp_input+0x5d6>
 800e61a:	2300      	movs	r3, #0
 800e61c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e61e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e622:	f113 0f0d 	cmn.w	r3, #13
 800e626:	f000 8098 	beq.w	800e75a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e62a:	4b54      	ldr	r3, [pc, #336]	; (800e77c <tcp_input+0x734>)
 800e62c:	2200      	movs	r2, #0
 800e62e:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e630:	69f8      	ldr	r0, [r7, #28]
 800e632:	f000 f915 	bl	800e860 <tcp_input_delayed_close>
 800e636:	4603      	mov	r3, r0
 800e638:	2b00      	cmp	r3, #0
 800e63a:	f040 8090 	bne.w	800e75e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e63e:	4b4d      	ldr	r3, [pc, #308]	; (800e774 <tcp_input+0x72c>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d041      	beq.n	800e6ca <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e646:	69fb      	ldr	r3, [r7, #28]
 800e648:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	d006      	beq.n	800e65c <tcp_input+0x614>
 800e64e:	4b50      	ldr	r3, [pc, #320]	; (800e790 <tcp_input+0x748>)
 800e650:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800e654:	494f      	ldr	r1, [pc, #316]	; (800e794 <tcp_input+0x74c>)
 800e656:	4850      	ldr	r0, [pc, #320]	; (800e798 <tcp_input+0x750>)
 800e658:	f008 fd42 	bl	80170e0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e65c:	69fb      	ldr	r3, [r7, #28]
 800e65e:	8b5b      	ldrh	r3, [r3, #26]
 800e660:	f003 0310 	and.w	r3, r3, #16
 800e664:	2b00      	cmp	r3, #0
 800e666:	d008      	beq.n	800e67a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e668:	4b42      	ldr	r3, [pc, #264]	; (800e774 <tcp_input+0x72c>)
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7fd fea7 	bl	800c3c0 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e672:	69f8      	ldr	r0, [r7, #28]
 800e674:	f7fe fc48 	bl	800cf08 <tcp_abort>
            goto aborted;
 800e678:	e091      	b.n	800e79e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e67a:	69fb      	ldr	r3, [r7, #28]
 800e67c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e680:	2b00      	cmp	r3, #0
 800e682:	d00c      	beq.n	800e69e <tcp_input+0x656>
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e68a:	69fb      	ldr	r3, [r7, #28]
 800e68c:	6918      	ldr	r0, [r3, #16]
 800e68e:	4b39      	ldr	r3, [pc, #228]	; (800e774 <tcp_input+0x72c>)
 800e690:	681a      	ldr	r2, [r3, #0]
 800e692:	2300      	movs	r3, #0
 800e694:	69f9      	ldr	r1, [r7, #28]
 800e696:	47a0      	blx	r4
 800e698:	4603      	mov	r3, r0
 800e69a:	74fb      	strb	r3, [r7, #19]
 800e69c:	e008      	b.n	800e6b0 <tcp_input+0x668>
 800e69e:	4b35      	ldr	r3, [pc, #212]	; (800e774 <tcp_input+0x72c>)
 800e6a0:	681a      	ldr	r2, [r3, #0]
 800e6a2:	2300      	movs	r3, #0
 800e6a4:	69f9      	ldr	r1, [r7, #28]
 800e6a6:	2000      	movs	r0, #0
 800e6a8:	f7ff f95e 	bl	800d968 <tcp_recv_null>
 800e6ac:	4603      	mov	r3, r0
 800e6ae:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e6b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e6b4:	f113 0f0d 	cmn.w	r3, #13
 800e6b8:	d053      	beq.n	800e762 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e6ba:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d003      	beq.n	800e6ca <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e6c2:	4b2c      	ldr	r3, [pc, #176]	; (800e774 <tcp_input+0x72c>)
 800e6c4:	681a      	ldr	r2, [r3, #0]
 800e6c6:	69fb      	ldr	r3, [r7, #28]
 800e6c8:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e6ca:	4b2b      	ldr	r3, [pc, #172]	; (800e778 <tcp_input+0x730>)
 800e6cc:	781b      	ldrb	r3, [r3, #0]
 800e6ce:	f003 0320 	and.w	r3, r3, #32
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d030      	beq.n	800e738 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800e6d6:	69fb      	ldr	r3, [r7, #28]
 800e6d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d009      	beq.n	800e6f2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e6de:	69fb      	ldr	r3, [r7, #28]
 800e6e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6e2:	7b5a      	ldrb	r2, [r3, #13]
 800e6e4:	69fb      	ldr	r3, [r7, #28]
 800e6e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e6e8:	f042 0220 	orr.w	r2, r2, #32
 800e6ec:	b2d2      	uxtb	r2, r2
 800e6ee:	735a      	strb	r2, [r3, #13]
 800e6f0:	e022      	b.n	800e738 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e6f2:	69fb      	ldr	r3, [r7, #28]
 800e6f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e6f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e6fa:	d005      	beq.n	800e708 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e6fc:	69fb      	ldr	r3, [r7, #28]
 800e6fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e700:	3301      	adds	r3, #1
 800e702:	b29a      	uxth	r2, r3
 800e704:	69fb      	ldr	r3, [r7, #28]
 800e706:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e708:	69fb      	ldr	r3, [r7, #28]
 800e70a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e70e:	2b00      	cmp	r3, #0
 800e710:	d00b      	beq.n	800e72a <tcp_input+0x6e2>
 800e712:	69fb      	ldr	r3, [r7, #28]
 800e714:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e718:	69fb      	ldr	r3, [r7, #28]
 800e71a:	6918      	ldr	r0, [r3, #16]
 800e71c:	2300      	movs	r3, #0
 800e71e:	2200      	movs	r2, #0
 800e720:	69f9      	ldr	r1, [r7, #28]
 800e722:	47a0      	blx	r4
 800e724:	4603      	mov	r3, r0
 800e726:	74fb      	strb	r3, [r7, #19]
 800e728:	e001      	b.n	800e72e <tcp_input+0x6e6>
 800e72a:	2300      	movs	r3, #0
 800e72c:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e72e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e732:	f113 0f0d 	cmn.w	r3, #13
 800e736:	d016      	beq.n	800e766 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e738:	4b13      	ldr	r3, [pc, #76]	; (800e788 <tcp_input+0x740>)
 800e73a:	2200      	movs	r2, #0
 800e73c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e73e:	69f8      	ldr	r0, [r7, #28]
 800e740:	f000 f88e 	bl	800e860 <tcp_input_delayed_close>
 800e744:	4603      	mov	r3, r0
 800e746:	2b00      	cmp	r3, #0
 800e748:	d128      	bne.n	800e79c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e74a:	69f8      	ldr	r0, [r7, #28]
 800e74c:	f002 fac8 	bl	8010ce0 <tcp_output>
 800e750:	e025      	b.n	800e79e <tcp_input+0x756>
        goto aborted;
 800e752:	bf00      	nop
 800e754:	e023      	b.n	800e79e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e756:	bf00      	nop
 800e758:	e021      	b.n	800e79e <tcp_input+0x756>
              goto aborted;
 800e75a:	bf00      	nop
 800e75c:	e01f      	b.n	800e79e <tcp_input+0x756>
          goto aborted;
 800e75e:	bf00      	nop
 800e760:	e01d      	b.n	800e79e <tcp_input+0x756>
            goto aborted;
 800e762:	bf00      	nop
 800e764:	e01b      	b.n	800e79e <tcp_input+0x756>
              goto aborted;
 800e766:	bf00      	nop
 800e768:	e019      	b.n	800e79e <tcp_input+0x756>
 800e76a:	bf00      	nop
 800e76c:	2000f278 	.word	0x2000f278
 800e770:	2000f288 	.word	0x2000f288
 800e774:	2000f2a8 	.word	0x2000f2a8
 800e778:	2000f2a5 	.word	0x2000f2a5
 800e77c:	2000f2a0 	.word	0x2000f2a0
 800e780:	2000f2a4 	.word	0x2000f2a4
 800e784:	2000f2a2 	.word	0x2000f2a2
 800e788:	2000f2ac 	.word	0x2000f2ac
 800e78c:	2000f26c 	.word	0x2000f26c
 800e790:	08019420 	.word	0x08019420
 800e794:	080195d4 	.word	0x080195d4
 800e798:	0801946c 	.word	0x0801946c
          goto aborted;
 800e79c:	bf00      	nop
    tcp_input_pcb = NULL;
 800e79e:	4b27      	ldr	r3, [pc, #156]	; (800e83c <tcp_input+0x7f4>)
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e7a4:	4b26      	ldr	r3, [pc, #152]	; (800e840 <tcp_input+0x7f8>)
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e7aa:	4b26      	ldr	r3, [pc, #152]	; (800e844 <tcp_input+0x7fc>)
 800e7ac:	685b      	ldr	r3, [r3, #4]
 800e7ae:	2b00      	cmp	r3, #0
 800e7b0:	d03f      	beq.n	800e832 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e7b2:	4b24      	ldr	r3, [pc, #144]	; (800e844 <tcp_input+0x7fc>)
 800e7b4:	685b      	ldr	r3, [r3, #4]
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7fd fe02 	bl	800c3c0 <pbuf_free>
      inseg.p = NULL;
 800e7bc:	4b21      	ldr	r3, [pc, #132]	; (800e844 <tcp_input+0x7fc>)
 800e7be:	2200      	movs	r2, #0
 800e7c0:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e7c2:	e036      	b.n	800e832 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e7c4:	4b20      	ldr	r3, [pc, #128]	; (800e848 <tcp_input+0x800>)
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	899b      	ldrh	r3, [r3, #12]
 800e7ca:	b29b      	uxth	r3, r3
 800e7cc:	4618      	mov	r0, r3
 800e7ce:	f7fb ffcf 	bl	800a770 <lwip_htons>
 800e7d2:	4603      	mov	r3, r0
 800e7d4:	b2db      	uxtb	r3, r3
 800e7d6:	f003 0304 	and.w	r3, r3, #4
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d118      	bne.n	800e810 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7de:	4b1b      	ldr	r3, [pc, #108]	; (800e84c <tcp_input+0x804>)
 800e7e0:	6819      	ldr	r1, [r3, #0]
 800e7e2:	4b1b      	ldr	r3, [pc, #108]	; (800e850 <tcp_input+0x808>)
 800e7e4:	881b      	ldrh	r3, [r3, #0]
 800e7e6:	461a      	mov	r2, r3
 800e7e8:	4b1a      	ldr	r3, [pc, #104]	; (800e854 <tcp_input+0x80c>)
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7ee:	4b16      	ldr	r3, [pc, #88]	; (800e848 <tcp_input+0x800>)
 800e7f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7f2:	885b      	ldrh	r3, [r3, #2]
 800e7f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e7f6:	4a14      	ldr	r2, [pc, #80]	; (800e848 <tcp_input+0x800>)
 800e7f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7fa:	8812      	ldrh	r2, [r2, #0]
 800e7fc:	b292      	uxth	r2, r2
 800e7fe:	9202      	str	r2, [sp, #8]
 800e800:	9301      	str	r3, [sp, #4]
 800e802:	4b15      	ldr	r3, [pc, #84]	; (800e858 <tcp_input+0x810>)
 800e804:	9300      	str	r3, [sp, #0]
 800e806:	4b15      	ldr	r3, [pc, #84]	; (800e85c <tcp_input+0x814>)
 800e808:	4602      	mov	r2, r0
 800e80a:	2000      	movs	r0, #0
 800e80c:	f003 f81c 	bl	8011848 <tcp_rst>
    pbuf_free(p);
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f7fd fdd5 	bl	800c3c0 <pbuf_free>
  return;
 800e816:	e00c      	b.n	800e832 <tcp_input+0x7ea>
    goto dropped;
 800e818:	bf00      	nop
 800e81a:	e006      	b.n	800e82a <tcp_input+0x7e2>
    goto dropped;
 800e81c:	bf00      	nop
 800e81e:	e004      	b.n	800e82a <tcp_input+0x7e2>
    goto dropped;
 800e820:	bf00      	nop
 800e822:	e002      	b.n	800e82a <tcp_input+0x7e2>
      goto dropped;
 800e824:	bf00      	nop
 800e826:	e000      	b.n	800e82a <tcp_input+0x7e2>
      goto dropped;
 800e828:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e82a:	6878      	ldr	r0, [r7, #4]
 800e82c:	f7fd fdc8 	bl	800c3c0 <pbuf_free>
 800e830:	e000      	b.n	800e834 <tcp_input+0x7ec>
  return;
 800e832:	bf00      	nop
}
 800e834:	3724      	adds	r7, #36	; 0x24
 800e836:	46bd      	mov	sp, r7
 800e838:	bd90      	pop	{r4, r7, pc}
 800e83a:	bf00      	nop
 800e83c:	2000f2ac 	.word	0x2000f2ac
 800e840:	2000f2a8 	.word	0x2000f2a8
 800e844:	2000f278 	.word	0x2000f278
 800e848:	2000f288 	.word	0x2000f288
 800e84c:	2000f29c 	.word	0x2000f29c
 800e850:	2000f2a2 	.word	0x2000f2a2
 800e854:	2000f298 	.word	0x2000f298
 800e858:	200098f0 	.word	0x200098f0
 800e85c:	200098f4 	.word	0x200098f4

0800e860 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b082      	sub	sp, #8
 800e864:	af00      	add	r7, sp, #0
 800e866:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	2b00      	cmp	r3, #0
 800e86c:	d106      	bne.n	800e87c <tcp_input_delayed_close+0x1c>
 800e86e:	4b17      	ldr	r3, [pc, #92]	; (800e8cc <tcp_input_delayed_close+0x6c>)
 800e870:	f240 225a 	movw	r2, #602	; 0x25a
 800e874:	4916      	ldr	r1, [pc, #88]	; (800e8d0 <tcp_input_delayed_close+0x70>)
 800e876:	4817      	ldr	r0, [pc, #92]	; (800e8d4 <tcp_input_delayed_close+0x74>)
 800e878:	f008 fc32 	bl	80170e0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e87c:	4b16      	ldr	r3, [pc, #88]	; (800e8d8 <tcp_input_delayed_close+0x78>)
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	f003 0310 	and.w	r3, r3, #16
 800e884:	2b00      	cmp	r3, #0
 800e886:	d01c      	beq.n	800e8c2 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	8b5b      	ldrh	r3, [r3, #26]
 800e88c:	f003 0310 	and.w	r3, r3, #16
 800e890:	2b00      	cmp	r3, #0
 800e892:	d10d      	bne.n	800e8b0 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d008      	beq.n	800e8b0 <tcp_input_delayed_close+0x50>
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8a4:	687a      	ldr	r2, [r7, #4]
 800e8a6:	6912      	ldr	r2, [r2, #16]
 800e8a8:	f06f 010e 	mvn.w	r1, #14
 800e8ac:	4610      	mov	r0, r2
 800e8ae:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e8b0:	6879      	ldr	r1, [r7, #4]
 800e8b2:	480a      	ldr	r0, [pc, #40]	; (800e8dc <tcp_input_delayed_close+0x7c>)
 800e8b4:	f7ff fa50 	bl	800dd58 <tcp_pcb_remove>
    tcp_free(pcb);
 800e8b8:	6878      	ldr	r0, [r7, #4]
 800e8ba:	f7fe f83d 	bl	800c938 <tcp_free>
    return 1;
 800e8be:	2301      	movs	r3, #1
 800e8c0:	e000      	b.n	800e8c4 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e8c2:	2300      	movs	r3, #0
}
 800e8c4:	4618      	mov	r0, r3
 800e8c6:	3708      	adds	r7, #8
 800e8c8:	46bd      	mov	sp, r7
 800e8ca:	bd80      	pop	{r7, pc}
 800e8cc:	08019420 	.word	0x08019420
 800e8d0:	080195f0 	.word	0x080195f0
 800e8d4:	0801946c 	.word	0x0801946c
 800e8d8:	2000f2a5 	.word	0x2000f2a5
 800e8dc:	2000f26c 	.word	0x2000f26c

0800e8e0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e8e0:	b590      	push	{r4, r7, lr}
 800e8e2:	b08b      	sub	sp, #44	; 0x2c
 800e8e4:	af04      	add	r7, sp, #16
 800e8e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e8e8:	4b6f      	ldr	r3, [pc, #444]	; (800eaa8 <tcp_listen_input+0x1c8>)
 800e8ea:	781b      	ldrb	r3, [r3, #0]
 800e8ec:	f003 0304 	and.w	r3, r3, #4
 800e8f0:	2b00      	cmp	r3, #0
 800e8f2:	f040 80d2 	bne.w	800ea9a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d106      	bne.n	800e90a <tcp_listen_input+0x2a>
 800e8fc:	4b6b      	ldr	r3, [pc, #428]	; (800eaac <tcp_listen_input+0x1cc>)
 800e8fe:	f240 2281 	movw	r2, #641	; 0x281
 800e902:	496b      	ldr	r1, [pc, #428]	; (800eab0 <tcp_listen_input+0x1d0>)
 800e904:	486b      	ldr	r0, [pc, #428]	; (800eab4 <tcp_listen_input+0x1d4>)
 800e906:	f008 fbeb 	bl	80170e0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e90a:	4b67      	ldr	r3, [pc, #412]	; (800eaa8 <tcp_listen_input+0x1c8>)
 800e90c:	781b      	ldrb	r3, [r3, #0]
 800e90e:	f003 0310 	and.w	r3, r3, #16
 800e912:	2b00      	cmp	r3, #0
 800e914:	d019      	beq.n	800e94a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e916:	4b68      	ldr	r3, [pc, #416]	; (800eab8 <tcp_listen_input+0x1d8>)
 800e918:	6819      	ldr	r1, [r3, #0]
 800e91a:	4b68      	ldr	r3, [pc, #416]	; (800eabc <tcp_listen_input+0x1dc>)
 800e91c:	881b      	ldrh	r3, [r3, #0]
 800e91e:	461a      	mov	r2, r3
 800e920:	4b67      	ldr	r3, [pc, #412]	; (800eac0 <tcp_listen_input+0x1e0>)
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e926:	4b67      	ldr	r3, [pc, #412]	; (800eac4 <tcp_listen_input+0x1e4>)
 800e928:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e92a:	885b      	ldrh	r3, [r3, #2]
 800e92c:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e92e:	4a65      	ldr	r2, [pc, #404]	; (800eac4 <tcp_listen_input+0x1e4>)
 800e930:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e932:	8812      	ldrh	r2, [r2, #0]
 800e934:	b292      	uxth	r2, r2
 800e936:	9202      	str	r2, [sp, #8]
 800e938:	9301      	str	r3, [sp, #4]
 800e93a:	4b63      	ldr	r3, [pc, #396]	; (800eac8 <tcp_listen_input+0x1e8>)
 800e93c:	9300      	str	r3, [sp, #0]
 800e93e:	4b63      	ldr	r3, [pc, #396]	; (800eacc <tcp_listen_input+0x1ec>)
 800e940:	4602      	mov	r2, r0
 800e942:	6878      	ldr	r0, [r7, #4]
 800e944:	f002 ff80 	bl	8011848 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e948:	e0a9      	b.n	800ea9e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e94a:	4b57      	ldr	r3, [pc, #348]	; (800eaa8 <tcp_listen_input+0x1c8>)
 800e94c:	781b      	ldrb	r3, [r3, #0]
 800e94e:	f003 0302 	and.w	r3, r3, #2
 800e952:	2b00      	cmp	r3, #0
 800e954:	f000 80a3 	beq.w	800ea9e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	7d5b      	ldrb	r3, [r3, #21]
 800e95c:	4618      	mov	r0, r3
 800e95e:	f7ff f927 	bl	800dbb0 <tcp_alloc>
 800e962:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d111      	bne.n	800e98e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	699b      	ldr	r3, [r3, #24]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	d00a      	beq.n	800e988 <tcp_listen_input+0xa8>
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	699b      	ldr	r3, [r3, #24]
 800e976:	687a      	ldr	r2, [r7, #4]
 800e978:	6910      	ldr	r0, [r2, #16]
 800e97a:	f04f 32ff 	mov.w	r2, #4294967295
 800e97e:	2100      	movs	r1, #0
 800e980:	4798      	blx	r3
 800e982:	4603      	mov	r3, r0
 800e984:	73bb      	strb	r3, [r7, #14]
      return;
 800e986:	e08b      	b.n	800eaa0 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e988:	23f0      	movs	r3, #240	; 0xf0
 800e98a:	73bb      	strb	r3, [r7, #14]
      return;
 800e98c:	e088      	b.n	800eaa0 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e98e:	4b50      	ldr	r3, [pc, #320]	; (800ead0 <tcp_listen_input+0x1f0>)
 800e990:	695a      	ldr	r2, [r3, #20]
 800e992:	697b      	ldr	r3, [r7, #20]
 800e994:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e996:	4b4e      	ldr	r3, [pc, #312]	; (800ead0 <tcp_listen_input+0x1f0>)
 800e998:	691a      	ldr	r2, [r3, #16]
 800e99a:	697b      	ldr	r3, [r7, #20]
 800e99c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	8ada      	ldrh	r2, [r3, #22]
 800e9a2:	697b      	ldr	r3, [r7, #20]
 800e9a4:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e9a6:	4b47      	ldr	r3, [pc, #284]	; (800eac4 <tcp_listen_input+0x1e4>)
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	881b      	ldrh	r3, [r3, #0]
 800e9ac:	b29a      	uxth	r2, r3
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e9b2:	697b      	ldr	r3, [r7, #20]
 800e9b4:	2203      	movs	r2, #3
 800e9b6:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e9b8:	4b41      	ldr	r3, [pc, #260]	; (800eac0 <tcp_listen_input+0x1e0>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	1c5a      	adds	r2, r3, #1
 800e9be:	697b      	ldr	r3, [r7, #20]
 800e9c0:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e9c2:	697b      	ldr	r3, [r7, #20]
 800e9c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e9ca:	6978      	ldr	r0, [r7, #20]
 800e9cc:	f7ff fa58 	bl	800de80 <tcp_next_iss>
 800e9d0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e9d2:	697b      	ldr	r3, [r7, #20]
 800e9d4:	693a      	ldr	r2, [r7, #16]
 800e9d6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e9d8:	697b      	ldr	r3, [r7, #20]
 800e9da:	693a      	ldr	r2, [r7, #16]
 800e9dc:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e9de:	697b      	ldr	r3, [r7, #20]
 800e9e0:	693a      	ldr	r2, [r7, #16]
 800e9e2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e9e4:	697b      	ldr	r3, [r7, #20]
 800e9e6:	693a      	ldr	r2, [r7, #16]
 800e9e8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e9ea:	4b35      	ldr	r3, [pc, #212]	; (800eac0 <tcp_listen_input+0x1e0>)
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	1e5a      	subs	r2, r3, #1
 800e9f0:	697b      	ldr	r3, [r7, #20]
 800e9f2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	691a      	ldr	r2, [r3, #16]
 800e9f8:	697b      	ldr	r3, [r7, #20]
 800e9fa:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e9fc:	697b      	ldr	r3, [r7, #20]
 800e9fe:	687a      	ldr	r2, [r7, #4]
 800ea00:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	7a5b      	ldrb	r3, [r3, #9]
 800ea06:	f003 030c 	and.w	r3, r3, #12
 800ea0a:	b2da      	uxtb	r2, r3
 800ea0c:	697b      	ldr	r3, [r7, #20]
 800ea0e:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	7a1a      	ldrb	r2, [r3, #8]
 800ea14:	697b      	ldr	r3, [r7, #20]
 800ea16:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ea18:	4b2e      	ldr	r3, [pc, #184]	; (800ead4 <tcp_listen_input+0x1f4>)
 800ea1a:	681a      	ldr	r2, [r3, #0]
 800ea1c:	697b      	ldr	r3, [r7, #20]
 800ea1e:	60da      	str	r2, [r3, #12]
 800ea20:	4a2c      	ldr	r2, [pc, #176]	; (800ead4 <tcp_listen_input+0x1f4>)
 800ea22:	697b      	ldr	r3, [r7, #20]
 800ea24:	6013      	str	r3, [r2, #0]
 800ea26:	f003 f8d1 	bl	8011bcc <tcp_timer_needed>
 800ea2a:	4b2b      	ldr	r3, [pc, #172]	; (800ead8 <tcp_listen_input+0x1f8>)
 800ea2c:	2201      	movs	r2, #1
 800ea2e:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ea30:	6978      	ldr	r0, [r7, #20]
 800ea32:	f001 fd8f 	bl	8010554 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ea36:	4b23      	ldr	r3, [pc, #140]	; (800eac4 <tcp_listen_input+0x1e4>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	89db      	ldrh	r3, [r3, #14]
 800ea3c:	b29a      	uxth	r2, r3
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ea44:	697b      	ldr	r3, [r7, #20]
 800ea46:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ea4a:	697b      	ldr	r3, [r7, #20]
 800ea4c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ea50:	697b      	ldr	r3, [r7, #20]
 800ea52:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ea54:	697b      	ldr	r3, [r7, #20]
 800ea56:	3304      	adds	r3, #4
 800ea58:	4618      	mov	r0, r3
 800ea5a:	f006 fe5f 	bl	801571c <ip4_route>
 800ea5e:	4601      	mov	r1, r0
 800ea60:	697b      	ldr	r3, [r7, #20]
 800ea62:	3304      	adds	r3, #4
 800ea64:	461a      	mov	r2, r3
 800ea66:	4620      	mov	r0, r4
 800ea68:	f7ff fa30 	bl	800decc <tcp_eff_send_mss_netif>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	461a      	mov	r2, r3
 800ea70:	697b      	ldr	r3, [r7, #20]
 800ea72:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ea74:	2112      	movs	r1, #18
 800ea76:	6978      	ldr	r0, [r7, #20]
 800ea78:	f002 f844 	bl	8010b04 <tcp_enqueue_flags>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ea80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d004      	beq.n	800ea92 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ea88:	2100      	movs	r1, #0
 800ea8a:	6978      	ldr	r0, [r7, #20]
 800ea8c:	f7fe f97e 	bl	800cd8c <tcp_abandon>
      return;
 800ea90:	e006      	b.n	800eaa0 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ea92:	6978      	ldr	r0, [r7, #20]
 800ea94:	f002 f924 	bl	8010ce0 <tcp_output>
  return;
 800ea98:	e001      	b.n	800ea9e <tcp_listen_input+0x1be>
    return;
 800ea9a:	bf00      	nop
 800ea9c:	e000      	b.n	800eaa0 <tcp_listen_input+0x1c0>
  return;
 800ea9e:	bf00      	nop
}
 800eaa0:	371c      	adds	r7, #28
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd90      	pop	{r4, r7, pc}
 800eaa6:	bf00      	nop
 800eaa8:	2000f2a4 	.word	0x2000f2a4
 800eaac:	08019420 	.word	0x08019420
 800eab0:	08019618 	.word	0x08019618
 800eab4:	0801946c 	.word	0x0801946c
 800eab8:	2000f29c 	.word	0x2000f29c
 800eabc:	2000f2a2 	.word	0x2000f2a2
 800eac0:	2000f298 	.word	0x2000f298
 800eac4:	2000f288 	.word	0x2000f288
 800eac8:	200098f0 	.word	0x200098f0
 800eacc:	200098f4 	.word	0x200098f4
 800ead0:	200098e0 	.word	0x200098e0
 800ead4:	2000f26c 	.word	0x2000f26c
 800ead8:	2000f274 	.word	0x2000f274

0800eadc <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800eadc:	b580      	push	{r7, lr}
 800eade:	b086      	sub	sp, #24
 800eae0:	af04      	add	r7, sp, #16
 800eae2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800eae4:	4b2f      	ldr	r3, [pc, #188]	; (800eba4 <tcp_timewait_input+0xc8>)
 800eae6:	781b      	ldrb	r3, [r3, #0]
 800eae8:	f003 0304 	and.w	r3, r3, #4
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d153      	bne.n	800eb98 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d106      	bne.n	800eb04 <tcp_timewait_input+0x28>
 800eaf6:	4b2c      	ldr	r3, [pc, #176]	; (800eba8 <tcp_timewait_input+0xcc>)
 800eaf8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800eafc:	492b      	ldr	r1, [pc, #172]	; (800ebac <tcp_timewait_input+0xd0>)
 800eafe:	482c      	ldr	r0, [pc, #176]	; (800ebb0 <tcp_timewait_input+0xd4>)
 800eb00:	f008 faee 	bl	80170e0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800eb04:	4b27      	ldr	r3, [pc, #156]	; (800eba4 <tcp_timewait_input+0xc8>)
 800eb06:	781b      	ldrb	r3, [r3, #0]
 800eb08:	f003 0302 	and.w	r3, r3, #2
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d02a      	beq.n	800eb66 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800eb10:	4b28      	ldr	r3, [pc, #160]	; (800ebb4 <tcp_timewait_input+0xd8>)
 800eb12:	681a      	ldr	r2, [r3, #0]
 800eb14:	687b      	ldr	r3, [r7, #4]
 800eb16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb18:	1ad3      	subs	r3, r2, r3
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	db2d      	blt.n	800eb7a <tcp_timewait_input+0x9e>
 800eb1e:	4b25      	ldr	r3, [pc, #148]	; (800ebb4 <tcp_timewait_input+0xd8>)
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb26:	6879      	ldr	r1, [r7, #4]
 800eb28:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800eb2a:	440b      	add	r3, r1
 800eb2c:	1ad3      	subs	r3, r2, r3
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	dc23      	bgt.n	800eb7a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb32:	4b21      	ldr	r3, [pc, #132]	; (800ebb8 <tcp_timewait_input+0xdc>)
 800eb34:	6819      	ldr	r1, [r3, #0]
 800eb36:	4b21      	ldr	r3, [pc, #132]	; (800ebbc <tcp_timewait_input+0xe0>)
 800eb38:	881b      	ldrh	r3, [r3, #0]
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	4b1d      	ldr	r3, [pc, #116]	; (800ebb4 <tcp_timewait_input+0xd8>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb42:	4b1f      	ldr	r3, [pc, #124]	; (800ebc0 <tcp_timewait_input+0xe4>)
 800eb44:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb46:	885b      	ldrh	r3, [r3, #2]
 800eb48:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eb4a:	4a1d      	ldr	r2, [pc, #116]	; (800ebc0 <tcp_timewait_input+0xe4>)
 800eb4c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eb4e:	8812      	ldrh	r2, [r2, #0]
 800eb50:	b292      	uxth	r2, r2
 800eb52:	9202      	str	r2, [sp, #8]
 800eb54:	9301      	str	r3, [sp, #4]
 800eb56:	4b1b      	ldr	r3, [pc, #108]	; (800ebc4 <tcp_timewait_input+0xe8>)
 800eb58:	9300      	str	r3, [sp, #0]
 800eb5a:	4b1b      	ldr	r3, [pc, #108]	; (800ebc8 <tcp_timewait_input+0xec>)
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f002 fe72 	bl	8011848 <tcp_rst>
      return;
 800eb64:	e01b      	b.n	800eb9e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800eb66:	4b0f      	ldr	r3, [pc, #60]	; (800eba4 <tcp_timewait_input+0xc8>)
 800eb68:	781b      	ldrb	r3, [r3, #0]
 800eb6a:	f003 0301 	and.w	r3, r3, #1
 800eb6e:	2b00      	cmp	r3, #0
 800eb70:	d003      	beq.n	800eb7a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800eb72:	4b16      	ldr	r3, [pc, #88]	; (800ebcc <tcp_timewait_input+0xf0>)
 800eb74:	681a      	ldr	r2, [r3, #0]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800eb7a:	4b10      	ldr	r3, [pc, #64]	; (800ebbc <tcp_timewait_input+0xe0>)
 800eb7c:	881b      	ldrh	r3, [r3, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d00c      	beq.n	800eb9c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	8b5b      	ldrh	r3, [r3, #26]
 800eb86:	f043 0302 	orr.w	r3, r3, #2
 800eb8a:	b29a      	uxth	r2, r3
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800eb90:	6878      	ldr	r0, [r7, #4]
 800eb92:	f002 f8a5 	bl	8010ce0 <tcp_output>
  }
  return;
 800eb96:	e001      	b.n	800eb9c <tcp_timewait_input+0xc0>
    return;
 800eb98:	bf00      	nop
 800eb9a:	e000      	b.n	800eb9e <tcp_timewait_input+0xc2>
  return;
 800eb9c:	bf00      	nop
}
 800eb9e:	3708      	adds	r7, #8
 800eba0:	46bd      	mov	sp, r7
 800eba2:	bd80      	pop	{r7, pc}
 800eba4:	2000f2a4 	.word	0x2000f2a4
 800eba8:	08019420 	.word	0x08019420
 800ebac:	08019638 	.word	0x08019638
 800ebb0:	0801946c 	.word	0x0801946c
 800ebb4:	2000f298 	.word	0x2000f298
 800ebb8:	2000f29c 	.word	0x2000f29c
 800ebbc:	2000f2a2 	.word	0x2000f2a2
 800ebc0:	2000f288 	.word	0x2000f288
 800ebc4:	200098f0 	.word	0x200098f0
 800ebc8:	200098f4 	.word	0x200098f4
 800ebcc:	2000f260 	.word	0x2000f260

0800ebd0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ebd0:	b590      	push	{r4, r7, lr}
 800ebd2:	b08d      	sub	sp, #52	; 0x34
 800ebd4:	af04      	add	r7, sp, #16
 800ebd6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ebd8:	2300      	movs	r3, #0
 800ebda:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ebdc:	2300      	movs	r3, #0
 800ebde:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d106      	bne.n	800ebf4 <tcp_process+0x24>
 800ebe6:	4b9d      	ldr	r3, [pc, #628]	; (800ee5c <tcp_process+0x28c>)
 800ebe8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800ebec:	499c      	ldr	r1, [pc, #624]	; (800ee60 <tcp_process+0x290>)
 800ebee:	489d      	ldr	r0, [pc, #628]	; (800ee64 <tcp_process+0x294>)
 800ebf0:	f008 fa76 	bl	80170e0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ebf4:	4b9c      	ldr	r3, [pc, #624]	; (800ee68 <tcp_process+0x298>)
 800ebf6:	781b      	ldrb	r3, [r3, #0]
 800ebf8:	f003 0304 	and.w	r3, r3, #4
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d04e      	beq.n	800ec9e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	7d1b      	ldrb	r3, [r3, #20]
 800ec04:	2b02      	cmp	r3, #2
 800ec06:	d108      	bne.n	800ec1a <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec0c:	4b97      	ldr	r3, [pc, #604]	; (800ee6c <tcp_process+0x29c>)
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	429a      	cmp	r2, r3
 800ec12:	d123      	bne.n	800ec5c <tcp_process+0x8c>
        acceptable = 1;
 800ec14:	2301      	movs	r3, #1
 800ec16:	76fb      	strb	r3, [r7, #27]
 800ec18:	e020      	b.n	800ec5c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec1e:	4b94      	ldr	r3, [pc, #592]	; (800ee70 <tcp_process+0x2a0>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	429a      	cmp	r2, r3
 800ec24:	d102      	bne.n	800ec2c <tcp_process+0x5c>
        acceptable = 1;
 800ec26:	2301      	movs	r3, #1
 800ec28:	76fb      	strb	r3, [r7, #27]
 800ec2a:	e017      	b.n	800ec5c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ec2c:	4b90      	ldr	r3, [pc, #576]	; (800ee70 <tcp_process+0x2a0>)
 800ec2e:	681a      	ldr	r2, [r3, #0]
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec34:	1ad3      	subs	r3, r2, r3
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	db10      	blt.n	800ec5c <tcp_process+0x8c>
 800ec3a:	4b8d      	ldr	r3, [pc, #564]	; (800ee70 <tcp_process+0x2a0>)
 800ec3c:	681a      	ldr	r2, [r3, #0]
 800ec3e:	687b      	ldr	r3, [r7, #4]
 800ec40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec42:	6879      	ldr	r1, [r7, #4]
 800ec44:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ec46:	440b      	add	r3, r1
 800ec48:	1ad3      	subs	r3, r2, r3
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	dc06      	bgt.n	800ec5c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	8b5b      	ldrh	r3, [r3, #26]
 800ec52:	f043 0302 	orr.w	r3, r3, #2
 800ec56:	b29a      	uxth	r2, r3
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800ec5c:	7efb      	ldrb	r3, [r7, #27]
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	d01b      	beq.n	800ec9a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	7d1b      	ldrb	r3, [r3, #20]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d106      	bne.n	800ec78 <tcp_process+0xa8>
 800ec6a:	4b7c      	ldr	r3, [pc, #496]	; (800ee5c <tcp_process+0x28c>)
 800ec6c:	f44f 724e 	mov.w	r2, #824	; 0x338
 800ec70:	4980      	ldr	r1, [pc, #512]	; (800ee74 <tcp_process+0x2a4>)
 800ec72:	487c      	ldr	r0, [pc, #496]	; (800ee64 <tcp_process+0x294>)
 800ec74:	f008 fa34 	bl	80170e0 <iprintf>
      recv_flags |= TF_RESET;
 800ec78:	4b7f      	ldr	r3, [pc, #508]	; (800ee78 <tcp_process+0x2a8>)
 800ec7a:	781b      	ldrb	r3, [r3, #0]
 800ec7c:	f043 0308 	orr.w	r3, r3, #8
 800ec80:	b2da      	uxtb	r2, r3
 800ec82:	4b7d      	ldr	r3, [pc, #500]	; (800ee78 <tcp_process+0x2a8>)
 800ec84:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	8b5b      	ldrh	r3, [r3, #26]
 800ec8a:	f023 0301 	bic.w	r3, r3, #1
 800ec8e:	b29a      	uxth	r2, r3
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800ec94:	f06f 030d 	mvn.w	r3, #13
 800ec98:	e37a      	b.n	800f390 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	e378      	b.n	800f390 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800ec9e:	4b72      	ldr	r3, [pc, #456]	; (800ee68 <tcp_process+0x298>)
 800eca0:	781b      	ldrb	r3, [r3, #0]
 800eca2:	f003 0302 	and.w	r3, r3, #2
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	d010      	beq.n	800eccc <tcp_process+0xfc>
 800ecaa:	687b      	ldr	r3, [r7, #4]
 800ecac:	7d1b      	ldrb	r3, [r3, #20]
 800ecae:	2b02      	cmp	r3, #2
 800ecb0:	d00c      	beq.n	800eccc <tcp_process+0xfc>
 800ecb2:	687b      	ldr	r3, [r7, #4]
 800ecb4:	7d1b      	ldrb	r3, [r3, #20]
 800ecb6:	2b03      	cmp	r3, #3
 800ecb8:	d008      	beq.n	800eccc <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	8b5b      	ldrh	r3, [r3, #26]
 800ecbe:	f043 0302 	orr.w	r3, r3, #2
 800ecc2:	b29a      	uxth	r2, r3
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800ecc8:	2300      	movs	r3, #0
 800ecca:	e361      	b.n	800f390 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	8b5b      	ldrh	r3, [r3, #26]
 800ecd0:	f003 0310 	and.w	r3, r3, #16
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d103      	bne.n	800ece0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ecd8:	4b68      	ldr	r3, [pc, #416]	; (800ee7c <tcp_process+0x2ac>)
 800ecda:	681a      	ldr	r2, [r3, #0]
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	2200      	movs	r2, #0
 800ece4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2200      	movs	r2, #0
 800ecec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800ecf0:	6878      	ldr	r0, [r7, #4]
 800ecf2:	f001 fc2f 	bl	8010554 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	7d1b      	ldrb	r3, [r3, #20]
 800ecfa:	3b02      	subs	r3, #2
 800ecfc:	2b07      	cmp	r3, #7
 800ecfe:	f200 8337 	bhi.w	800f370 <tcp_process+0x7a0>
 800ed02:	a201      	add	r2, pc, #4	; (adr r2, 800ed08 <tcp_process+0x138>)
 800ed04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed08:	0800ed29 	.word	0x0800ed29
 800ed0c:	0800ef59 	.word	0x0800ef59
 800ed10:	0800f0d1 	.word	0x0800f0d1
 800ed14:	0800f0fb 	.word	0x0800f0fb
 800ed18:	0800f21f 	.word	0x0800f21f
 800ed1c:	0800f0d1 	.word	0x0800f0d1
 800ed20:	0800f2ab 	.word	0x0800f2ab
 800ed24:	0800f33b 	.word	0x0800f33b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ed28:	4b4f      	ldr	r3, [pc, #316]	; (800ee68 <tcp_process+0x298>)
 800ed2a:	781b      	ldrb	r3, [r3, #0]
 800ed2c:	f003 0310 	and.w	r3, r3, #16
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	f000 80e4 	beq.w	800eefe <tcp_process+0x32e>
 800ed36:	4b4c      	ldr	r3, [pc, #304]	; (800ee68 <tcp_process+0x298>)
 800ed38:	781b      	ldrb	r3, [r3, #0]
 800ed3a:	f003 0302 	and.w	r3, r3, #2
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	f000 80dd 	beq.w	800eefe <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ed48:	1c5a      	adds	r2, r3, #1
 800ed4a:	4b48      	ldr	r3, [pc, #288]	; (800ee6c <tcp_process+0x29c>)
 800ed4c:	681b      	ldr	r3, [r3, #0]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	f040 80d5 	bne.w	800eefe <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800ed54:	4b46      	ldr	r3, [pc, #280]	; (800ee70 <tcp_process+0x2a0>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	1c5a      	adds	r2, r3, #1
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800ed66:	4b41      	ldr	r3, [pc, #260]	; (800ee6c <tcp_process+0x29c>)
 800ed68:	681a      	ldr	r2, [r3, #0]
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800ed6e:	4b44      	ldr	r3, [pc, #272]	; (800ee80 <tcp_process+0x2b0>)
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	89db      	ldrh	r3, [r3, #14]
 800ed74:	b29a      	uxth	r2, r3
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800ed88:	4b39      	ldr	r3, [pc, #228]	; (800ee70 <tcp_process+0x2a0>)
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	1e5a      	subs	r2, r3, #1
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	2204      	movs	r2, #4
 800ed96:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	3304      	adds	r3, #4
 800eda0:	4618      	mov	r0, r3
 800eda2:	f006 fcbb 	bl	801571c <ip4_route>
 800eda6:	4601      	mov	r1, r0
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	3304      	adds	r3, #4
 800edac:	461a      	mov	r2, r3
 800edae:	4620      	mov	r0, r4
 800edb0:	f7ff f88c 	bl	800decc <tcp_eff_send_mss_netif>
 800edb4:	4603      	mov	r3, r0
 800edb6:	461a      	mov	r2, r3
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edc0:	009a      	lsls	r2, r3, #2
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edc6:	005b      	lsls	r3, r3, #1
 800edc8:	f241 111c 	movw	r1, #4380	; 0x111c
 800edcc:	428b      	cmp	r3, r1
 800edce:	bf38      	it	cc
 800edd0:	460b      	movcc	r3, r1
 800edd2:	429a      	cmp	r2, r3
 800edd4:	d204      	bcs.n	800ede0 <tcp_process+0x210>
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edda:	009b      	lsls	r3, r3, #2
 800eddc:	b29b      	uxth	r3, r3
 800edde:	e00d      	b.n	800edfc <tcp_process+0x22c>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ede4:	005b      	lsls	r3, r3, #1
 800ede6:	f241 121c 	movw	r2, #4380	; 0x111c
 800edea:	4293      	cmp	r3, r2
 800edec:	d904      	bls.n	800edf8 <tcp_process+0x228>
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800edf2:	005b      	lsls	r3, r3, #1
 800edf4:	b29b      	uxth	r3, r3
 800edf6:	e001      	b.n	800edfc <tcp_process+0x22c>
 800edf8:	f241 131c 	movw	r3, #4380	; 0x111c
 800edfc:	687a      	ldr	r2, [r7, #4]
 800edfe:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d106      	bne.n	800ee1a <tcp_process+0x24a>
 800ee0c:	4b13      	ldr	r3, [pc, #76]	; (800ee5c <tcp_process+0x28c>)
 800ee0e:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800ee12:	491c      	ldr	r1, [pc, #112]	; (800ee84 <tcp_process+0x2b4>)
 800ee14:	4813      	ldr	r0, [pc, #76]	; (800ee64 <tcp_process+0x294>)
 800ee16:	f008 f963 	bl	80170e0 <iprintf>
        --pcb->snd_queuelen;
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee20:	3b01      	subs	r3, #1
 800ee22:	b29a      	uxth	r2, r3
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee2e:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800ee30:	69fb      	ldr	r3, [r7, #28]
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d12a      	bne.n	800ee8c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee3a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800ee3c:	69fb      	ldr	r3, [r7, #28]
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d106      	bne.n	800ee50 <tcp_process+0x280>
 800ee42:	4b06      	ldr	r3, [pc, #24]	; (800ee5c <tcp_process+0x28c>)
 800ee44:	f44f 725d 	mov.w	r2, #884	; 0x374
 800ee48:	490f      	ldr	r1, [pc, #60]	; (800ee88 <tcp_process+0x2b8>)
 800ee4a:	4806      	ldr	r0, [pc, #24]	; (800ee64 <tcp_process+0x294>)
 800ee4c:	f008 f948 	bl	80170e0 <iprintf>
          pcb->unsent = rseg->next;
 800ee50:	69fb      	ldr	r3, [r7, #28]
 800ee52:	681a      	ldr	r2, [r3, #0]
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	66da      	str	r2, [r3, #108]	; 0x6c
 800ee58:	e01c      	b.n	800ee94 <tcp_process+0x2c4>
 800ee5a:	bf00      	nop
 800ee5c:	08019420 	.word	0x08019420
 800ee60:	08019658 	.word	0x08019658
 800ee64:	0801946c 	.word	0x0801946c
 800ee68:	2000f2a4 	.word	0x2000f2a4
 800ee6c:	2000f29c 	.word	0x2000f29c
 800ee70:	2000f298 	.word	0x2000f298
 800ee74:	08019674 	.word	0x08019674
 800ee78:	2000f2a5 	.word	0x2000f2a5
 800ee7c:	2000f260 	.word	0x2000f260
 800ee80:	2000f288 	.word	0x2000f288
 800ee84:	08019694 	.word	0x08019694
 800ee88:	080196ac 	.word	0x080196ac
        } else {
          pcb->unacked = rseg->next;
 800ee8c:	69fb      	ldr	r3, [r7, #28]
 800ee8e:	681a      	ldr	r2, [r3, #0]
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800ee94:	69f8      	ldr	r0, [r7, #28]
 800ee96:	f7fe fd22 	bl	800d8de <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800ee9a:	687b      	ldr	r3, [r7, #4]
 800ee9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ee9e:	2b00      	cmp	r3, #0
 800eea0:	d104      	bne.n	800eeac <tcp_process+0x2dc>
          pcb->rtime = -1;
 800eea2:	687b      	ldr	r3, [r7, #4]
 800eea4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eea8:	861a      	strh	r2, [r3, #48]	; 0x30
 800eeaa:	e006      	b.n	800eeba <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	2200      	movs	r2, #0
 800eeb0:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2200      	movs	r2, #0
 800eeb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eec0:	2b00      	cmp	r3, #0
 800eec2:	d00a      	beq.n	800eeda <tcp_process+0x30a>
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eeca:	687a      	ldr	r2, [r7, #4]
 800eecc:	6910      	ldr	r0, [r2, #16]
 800eece:	2200      	movs	r2, #0
 800eed0:	6879      	ldr	r1, [r7, #4]
 800eed2:	4798      	blx	r3
 800eed4:	4603      	mov	r3, r0
 800eed6:	76bb      	strb	r3, [r7, #26]
 800eed8:	e001      	b.n	800eede <tcp_process+0x30e>
 800eeda:	2300      	movs	r3, #0
 800eedc:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800eede:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800eee2:	f113 0f0d 	cmn.w	r3, #13
 800eee6:	d102      	bne.n	800eeee <tcp_process+0x31e>
          return ERR_ABRT;
 800eee8:	f06f 030c 	mvn.w	r3, #12
 800eeec:	e250      	b.n	800f390 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	8b5b      	ldrh	r3, [r3, #26]
 800eef2:	f043 0302 	orr.w	r3, r3, #2
 800eef6:	b29a      	uxth	r2, r3
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800eefc:	e23a      	b.n	800f374 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800eefe:	4b98      	ldr	r3, [pc, #608]	; (800f160 <tcp_process+0x590>)
 800ef00:	781b      	ldrb	r3, [r3, #0]
 800ef02:	f003 0310 	and.w	r3, r3, #16
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	f000 8234 	beq.w	800f374 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef0c:	4b95      	ldr	r3, [pc, #596]	; (800f164 <tcp_process+0x594>)
 800ef0e:	6819      	ldr	r1, [r3, #0]
 800ef10:	4b95      	ldr	r3, [pc, #596]	; (800f168 <tcp_process+0x598>)
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	461a      	mov	r2, r3
 800ef16:	4b95      	ldr	r3, [pc, #596]	; (800f16c <tcp_process+0x59c>)
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef1c:	4b94      	ldr	r3, [pc, #592]	; (800f170 <tcp_process+0x5a0>)
 800ef1e:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef20:	885b      	ldrh	r3, [r3, #2]
 800ef22:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ef24:	4a92      	ldr	r2, [pc, #584]	; (800f170 <tcp_process+0x5a0>)
 800ef26:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800ef28:	8812      	ldrh	r2, [r2, #0]
 800ef2a:	b292      	uxth	r2, r2
 800ef2c:	9202      	str	r2, [sp, #8]
 800ef2e:	9301      	str	r3, [sp, #4]
 800ef30:	4b90      	ldr	r3, [pc, #576]	; (800f174 <tcp_process+0x5a4>)
 800ef32:	9300      	str	r3, [sp, #0]
 800ef34:	4b90      	ldr	r3, [pc, #576]	; (800f178 <tcp_process+0x5a8>)
 800ef36:	4602      	mov	r2, r0
 800ef38:	6878      	ldr	r0, [r7, #4]
 800ef3a:	f002 fc85 	bl	8011848 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ef44:	2b05      	cmp	r3, #5
 800ef46:	f200 8215 	bhi.w	800f374 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2200      	movs	r2, #0
 800ef4e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800ef50:	6878      	ldr	r0, [r7, #4]
 800ef52:	f002 fa4f 	bl	80113f4 <tcp_rexmit_rto>
      break;
 800ef56:	e20d      	b.n	800f374 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800ef58:	4b81      	ldr	r3, [pc, #516]	; (800f160 <tcp_process+0x590>)
 800ef5a:	781b      	ldrb	r3, [r3, #0]
 800ef5c:	f003 0310 	and.w	r3, r3, #16
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	f000 80a1 	beq.w	800f0a8 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800ef66:	4b7f      	ldr	r3, [pc, #508]	; (800f164 <tcp_process+0x594>)
 800ef68:	681a      	ldr	r2, [r3, #0]
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef6e:	1ad3      	subs	r3, r2, r3
 800ef70:	3b01      	subs	r3, #1
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	db7e      	blt.n	800f074 <tcp_process+0x4a4>
 800ef76:	4b7b      	ldr	r3, [pc, #492]	; (800f164 <tcp_process+0x594>)
 800ef78:	681a      	ldr	r2, [r3, #0]
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef7e:	1ad3      	subs	r3, r2, r3
 800ef80:	2b00      	cmp	r3, #0
 800ef82:	dc77      	bgt.n	800f074 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	2204      	movs	r2, #4
 800ef88:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef8e:	2b00      	cmp	r3, #0
 800ef90:	d102      	bne.n	800ef98 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800ef92:	23fa      	movs	r3, #250	; 0xfa
 800ef94:	76bb      	strb	r3, [r7, #26]
 800ef96:	e01d      	b.n	800efd4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ef9c:	699b      	ldr	r3, [r3, #24]
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d106      	bne.n	800efb0 <tcp_process+0x3e0>
 800efa2:	4b76      	ldr	r3, [pc, #472]	; (800f17c <tcp_process+0x5ac>)
 800efa4:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800efa8:	4975      	ldr	r1, [pc, #468]	; (800f180 <tcp_process+0x5b0>)
 800efaa:	4876      	ldr	r0, [pc, #472]	; (800f184 <tcp_process+0x5b4>)
 800efac:	f008 f898 	bl	80170e0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800efb0:	687b      	ldr	r3, [r7, #4]
 800efb2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efb4:	699b      	ldr	r3, [r3, #24]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d00a      	beq.n	800efd0 <tcp_process+0x400>
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efbe:	699b      	ldr	r3, [r3, #24]
 800efc0:	687a      	ldr	r2, [r7, #4]
 800efc2:	6910      	ldr	r0, [r2, #16]
 800efc4:	2200      	movs	r2, #0
 800efc6:	6879      	ldr	r1, [r7, #4]
 800efc8:	4798      	blx	r3
 800efca:	4603      	mov	r3, r0
 800efcc:	76bb      	strb	r3, [r7, #26]
 800efce:	e001      	b.n	800efd4 <tcp_process+0x404>
 800efd0:	23f0      	movs	r3, #240	; 0xf0
 800efd2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800efd4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d00a      	beq.n	800eff2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800efdc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800efe0:	f113 0f0d 	cmn.w	r3, #13
 800efe4:	d002      	beq.n	800efec <tcp_process+0x41c>
              tcp_abort(pcb);
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f7fd ff8e 	bl	800cf08 <tcp_abort>
            }
            return ERR_ABRT;
 800efec:	f06f 030c 	mvn.w	r3, #12
 800eff0:	e1ce      	b.n	800f390 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f000 fae0 	bl	800f5b8 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800eff8:	4b63      	ldr	r3, [pc, #396]	; (800f188 <tcp_process+0x5b8>)
 800effa:	881b      	ldrh	r3, [r3, #0]
 800effc:	2b00      	cmp	r3, #0
 800effe:	d005      	beq.n	800f00c <tcp_process+0x43c>
            recv_acked--;
 800f000:	4b61      	ldr	r3, [pc, #388]	; (800f188 <tcp_process+0x5b8>)
 800f002:	881b      	ldrh	r3, [r3, #0]
 800f004:	3b01      	subs	r3, #1
 800f006:	b29a      	uxth	r2, r3
 800f008:	4b5f      	ldr	r3, [pc, #380]	; (800f188 <tcp_process+0x5b8>)
 800f00a:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f010:	009a      	lsls	r2, r3, #2
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f016:	005b      	lsls	r3, r3, #1
 800f018:	f241 111c 	movw	r1, #4380	; 0x111c
 800f01c:	428b      	cmp	r3, r1
 800f01e:	bf38      	it	cc
 800f020:	460b      	movcc	r3, r1
 800f022:	429a      	cmp	r2, r3
 800f024:	d204      	bcs.n	800f030 <tcp_process+0x460>
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f02a:	009b      	lsls	r3, r3, #2
 800f02c:	b29b      	uxth	r3, r3
 800f02e:	e00d      	b.n	800f04c <tcp_process+0x47c>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f034:	005b      	lsls	r3, r3, #1
 800f036:	f241 121c 	movw	r2, #4380	; 0x111c
 800f03a:	4293      	cmp	r3, r2
 800f03c:	d904      	bls.n	800f048 <tcp_process+0x478>
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f042:	005b      	lsls	r3, r3, #1
 800f044:	b29b      	uxth	r3, r3
 800f046:	e001      	b.n	800f04c <tcp_process+0x47c>
 800f048:	f241 131c 	movw	r3, #4380	; 0x111c
 800f04c:	687a      	ldr	r2, [r7, #4]
 800f04e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f052:	4b4e      	ldr	r3, [pc, #312]	; (800f18c <tcp_process+0x5bc>)
 800f054:	781b      	ldrb	r3, [r3, #0]
 800f056:	f003 0320 	and.w	r3, r3, #32
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d037      	beq.n	800f0ce <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	8b5b      	ldrh	r3, [r3, #26]
 800f062:	f043 0302 	orr.w	r3, r3, #2
 800f066:	b29a      	uxth	r2, r3
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	2207      	movs	r2, #7
 800f070:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f072:	e02c      	b.n	800f0ce <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f074:	4b3b      	ldr	r3, [pc, #236]	; (800f164 <tcp_process+0x594>)
 800f076:	6819      	ldr	r1, [r3, #0]
 800f078:	4b3b      	ldr	r3, [pc, #236]	; (800f168 <tcp_process+0x598>)
 800f07a:	881b      	ldrh	r3, [r3, #0]
 800f07c:	461a      	mov	r2, r3
 800f07e:	4b3b      	ldr	r3, [pc, #236]	; (800f16c <tcp_process+0x59c>)
 800f080:	681b      	ldr	r3, [r3, #0]
 800f082:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f084:	4b3a      	ldr	r3, [pc, #232]	; (800f170 <tcp_process+0x5a0>)
 800f086:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f088:	885b      	ldrh	r3, [r3, #2]
 800f08a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f08c:	4a38      	ldr	r2, [pc, #224]	; (800f170 <tcp_process+0x5a0>)
 800f08e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f090:	8812      	ldrh	r2, [r2, #0]
 800f092:	b292      	uxth	r2, r2
 800f094:	9202      	str	r2, [sp, #8]
 800f096:	9301      	str	r3, [sp, #4]
 800f098:	4b36      	ldr	r3, [pc, #216]	; (800f174 <tcp_process+0x5a4>)
 800f09a:	9300      	str	r3, [sp, #0]
 800f09c:	4b36      	ldr	r3, [pc, #216]	; (800f178 <tcp_process+0x5a8>)
 800f09e:	4602      	mov	r2, r0
 800f0a0:	6878      	ldr	r0, [r7, #4]
 800f0a2:	f002 fbd1 	bl	8011848 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f0a6:	e167      	b.n	800f378 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f0a8:	4b2d      	ldr	r3, [pc, #180]	; (800f160 <tcp_process+0x590>)
 800f0aa:	781b      	ldrb	r3, [r3, #0]
 800f0ac:	f003 0302 	and.w	r3, r3, #2
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	f000 8161 	beq.w	800f378 <tcp_process+0x7a8>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f0ba:	1e5a      	subs	r2, r3, #1
 800f0bc:	4b2b      	ldr	r3, [pc, #172]	; (800f16c <tcp_process+0x59c>)
 800f0be:	681b      	ldr	r3, [r3, #0]
 800f0c0:	429a      	cmp	r2, r3
 800f0c2:	f040 8159 	bne.w	800f378 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f002 f9b6 	bl	8011438 <tcp_rexmit>
      break;
 800f0cc:	e154      	b.n	800f378 <tcp_process+0x7a8>
 800f0ce:	e153      	b.n	800f378 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f0d0:	6878      	ldr	r0, [r7, #4]
 800f0d2:	f000 fa71 	bl	800f5b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f0d6:	4b2d      	ldr	r3, [pc, #180]	; (800f18c <tcp_process+0x5bc>)
 800f0d8:	781b      	ldrb	r3, [r3, #0]
 800f0da:	f003 0320 	and.w	r3, r3, #32
 800f0de:	2b00      	cmp	r3, #0
 800f0e0:	f000 814c 	beq.w	800f37c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	8b5b      	ldrh	r3, [r3, #26]
 800f0e8:	f043 0302 	orr.w	r3, r3, #2
 800f0ec:	b29a      	uxth	r2, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	2207      	movs	r2, #7
 800f0f6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f0f8:	e140      	b.n	800f37c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f0fa:	6878      	ldr	r0, [r7, #4]
 800f0fc:	f000 fa5c 	bl	800f5b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f100:	4b22      	ldr	r3, [pc, #136]	; (800f18c <tcp_process+0x5bc>)
 800f102:	781b      	ldrb	r3, [r3, #0]
 800f104:	f003 0320 	and.w	r3, r3, #32
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d071      	beq.n	800f1f0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f10c:	4b14      	ldr	r3, [pc, #80]	; (800f160 <tcp_process+0x590>)
 800f10e:	781b      	ldrb	r3, [r3, #0]
 800f110:	f003 0310 	and.w	r3, r3, #16
 800f114:	2b00      	cmp	r3, #0
 800f116:	d060      	beq.n	800f1da <tcp_process+0x60a>
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f11c:	4b11      	ldr	r3, [pc, #68]	; (800f164 <tcp_process+0x594>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	429a      	cmp	r2, r3
 800f122:	d15a      	bne.n	800f1da <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f124:	687b      	ldr	r3, [r7, #4]
 800f126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f128:	2b00      	cmp	r3, #0
 800f12a:	d156      	bne.n	800f1da <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f12c:	687b      	ldr	r3, [r7, #4]
 800f12e:	8b5b      	ldrh	r3, [r3, #26]
 800f130:	f043 0302 	orr.w	r3, r3, #2
 800f134:	b29a      	uxth	r2, r3
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f13a:	6878      	ldr	r0, [r7, #4]
 800f13c:	f7fe fdbc 	bl	800dcb8 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f140:	4b13      	ldr	r3, [pc, #76]	; (800f190 <tcp_process+0x5c0>)
 800f142:	681b      	ldr	r3, [r3, #0]
 800f144:	687a      	ldr	r2, [r7, #4]
 800f146:	429a      	cmp	r2, r3
 800f148:	d105      	bne.n	800f156 <tcp_process+0x586>
 800f14a:	4b11      	ldr	r3, [pc, #68]	; (800f190 <tcp_process+0x5c0>)
 800f14c:	681b      	ldr	r3, [r3, #0]
 800f14e:	68db      	ldr	r3, [r3, #12]
 800f150:	4a0f      	ldr	r2, [pc, #60]	; (800f190 <tcp_process+0x5c0>)
 800f152:	6013      	str	r3, [r2, #0]
 800f154:	e02e      	b.n	800f1b4 <tcp_process+0x5e4>
 800f156:	4b0e      	ldr	r3, [pc, #56]	; (800f190 <tcp_process+0x5c0>)
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	617b      	str	r3, [r7, #20]
 800f15c:	e027      	b.n	800f1ae <tcp_process+0x5de>
 800f15e:	bf00      	nop
 800f160:	2000f2a4 	.word	0x2000f2a4
 800f164:	2000f29c 	.word	0x2000f29c
 800f168:	2000f2a2 	.word	0x2000f2a2
 800f16c:	2000f298 	.word	0x2000f298
 800f170:	2000f288 	.word	0x2000f288
 800f174:	200098f0 	.word	0x200098f0
 800f178:	200098f4 	.word	0x200098f4
 800f17c:	08019420 	.word	0x08019420
 800f180:	080196c0 	.word	0x080196c0
 800f184:	0801946c 	.word	0x0801946c
 800f188:	2000f2a0 	.word	0x2000f2a0
 800f18c:	2000f2a5 	.word	0x2000f2a5
 800f190:	2000f26c 	.word	0x2000f26c
 800f194:	697b      	ldr	r3, [r7, #20]
 800f196:	68db      	ldr	r3, [r3, #12]
 800f198:	687a      	ldr	r2, [r7, #4]
 800f19a:	429a      	cmp	r2, r3
 800f19c:	d104      	bne.n	800f1a8 <tcp_process+0x5d8>
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	68da      	ldr	r2, [r3, #12]
 800f1a2:	697b      	ldr	r3, [r7, #20]
 800f1a4:	60da      	str	r2, [r3, #12]
 800f1a6:	e005      	b.n	800f1b4 <tcp_process+0x5e4>
 800f1a8:	697b      	ldr	r3, [r7, #20]
 800f1aa:	68db      	ldr	r3, [r3, #12]
 800f1ac:	617b      	str	r3, [r7, #20]
 800f1ae:	697b      	ldr	r3, [r7, #20]
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d1ef      	bne.n	800f194 <tcp_process+0x5c4>
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	60da      	str	r2, [r3, #12]
 800f1ba:	4b77      	ldr	r3, [pc, #476]	; (800f398 <tcp_process+0x7c8>)
 800f1bc:	2201      	movs	r2, #1
 800f1be:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	220a      	movs	r2, #10
 800f1c4:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f1c6:	4b75      	ldr	r3, [pc, #468]	; (800f39c <tcp_process+0x7cc>)
 800f1c8:	681a      	ldr	r2, [r3, #0]
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	60da      	str	r2, [r3, #12]
 800f1ce:	4a73      	ldr	r2, [pc, #460]	; (800f39c <tcp_process+0x7cc>)
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	6013      	str	r3, [r2, #0]
 800f1d4:	f002 fcfa 	bl	8011bcc <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f1d8:	e0d2      	b.n	800f380 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	8b5b      	ldrh	r3, [r3, #26]
 800f1de:	f043 0302 	orr.w	r3, r3, #2
 800f1e2:	b29a      	uxth	r2, r3
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2208      	movs	r2, #8
 800f1ec:	751a      	strb	r2, [r3, #20]
      break;
 800f1ee:	e0c7      	b.n	800f380 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f1f0:	4b6b      	ldr	r3, [pc, #428]	; (800f3a0 <tcp_process+0x7d0>)
 800f1f2:	781b      	ldrb	r3, [r3, #0]
 800f1f4:	f003 0310 	and.w	r3, r3, #16
 800f1f8:	2b00      	cmp	r3, #0
 800f1fa:	f000 80c1 	beq.w	800f380 <tcp_process+0x7b0>
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f202:	4b68      	ldr	r3, [pc, #416]	; (800f3a4 <tcp_process+0x7d4>)
 800f204:	681b      	ldr	r3, [r3, #0]
 800f206:	429a      	cmp	r2, r3
 800f208:	f040 80ba 	bne.w	800f380 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f210:	2b00      	cmp	r3, #0
 800f212:	f040 80b5 	bne.w	800f380 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	2206      	movs	r2, #6
 800f21a:	751a      	strb	r2, [r3, #20]
      break;
 800f21c:	e0b0      	b.n	800f380 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f21e:	6878      	ldr	r0, [r7, #4]
 800f220:	f000 f9ca 	bl	800f5b8 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f224:	4b60      	ldr	r3, [pc, #384]	; (800f3a8 <tcp_process+0x7d8>)
 800f226:	781b      	ldrb	r3, [r3, #0]
 800f228:	f003 0320 	and.w	r3, r3, #32
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	f000 80a9 	beq.w	800f384 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	8b5b      	ldrh	r3, [r3, #26]
 800f236:	f043 0302 	orr.w	r3, r3, #2
 800f23a:	b29a      	uxth	r2, r3
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f7fe fd39 	bl	800dcb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f246:	4b59      	ldr	r3, [pc, #356]	; (800f3ac <tcp_process+0x7dc>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	687a      	ldr	r2, [r7, #4]
 800f24c:	429a      	cmp	r2, r3
 800f24e:	d105      	bne.n	800f25c <tcp_process+0x68c>
 800f250:	4b56      	ldr	r3, [pc, #344]	; (800f3ac <tcp_process+0x7dc>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	68db      	ldr	r3, [r3, #12]
 800f256:	4a55      	ldr	r2, [pc, #340]	; (800f3ac <tcp_process+0x7dc>)
 800f258:	6013      	str	r3, [r2, #0]
 800f25a:	e013      	b.n	800f284 <tcp_process+0x6b4>
 800f25c:	4b53      	ldr	r3, [pc, #332]	; (800f3ac <tcp_process+0x7dc>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	613b      	str	r3, [r7, #16]
 800f262:	e00c      	b.n	800f27e <tcp_process+0x6ae>
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	68db      	ldr	r3, [r3, #12]
 800f268:	687a      	ldr	r2, [r7, #4]
 800f26a:	429a      	cmp	r2, r3
 800f26c:	d104      	bne.n	800f278 <tcp_process+0x6a8>
 800f26e:	687b      	ldr	r3, [r7, #4]
 800f270:	68da      	ldr	r2, [r3, #12]
 800f272:	693b      	ldr	r3, [r7, #16]
 800f274:	60da      	str	r2, [r3, #12]
 800f276:	e005      	b.n	800f284 <tcp_process+0x6b4>
 800f278:	693b      	ldr	r3, [r7, #16]
 800f27a:	68db      	ldr	r3, [r3, #12]
 800f27c:	613b      	str	r3, [r7, #16]
 800f27e:	693b      	ldr	r3, [r7, #16]
 800f280:	2b00      	cmp	r3, #0
 800f282:	d1ef      	bne.n	800f264 <tcp_process+0x694>
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2200      	movs	r2, #0
 800f288:	60da      	str	r2, [r3, #12]
 800f28a:	4b43      	ldr	r3, [pc, #268]	; (800f398 <tcp_process+0x7c8>)
 800f28c:	2201      	movs	r2, #1
 800f28e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	220a      	movs	r2, #10
 800f294:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f296:	4b41      	ldr	r3, [pc, #260]	; (800f39c <tcp_process+0x7cc>)
 800f298:	681a      	ldr	r2, [r3, #0]
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	60da      	str	r2, [r3, #12]
 800f29e:	4a3f      	ldr	r2, [pc, #252]	; (800f39c <tcp_process+0x7cc>)
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	6013      	str	r3, [r2, #0]
 800f2a4:	f002 fc92 	bl	8011bcc <tcp_timer_needed>
      }
      break;
 800f2a8:	e06c      	b.n	800f384 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f000 f984 	bl	800f5b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f2b0:	4b3b      	ldr	r3, [pc, #236]	; (800f3a0 <tcp_process+0x7d0>)
 800f2b2:	781b      	ldrb	r3, [r3, #0]
 800f2b4:	f003 0310 	and.w	r3, r3, #16
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d065      	beq.n	800f388 <tcp_process+0x7b8>
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f2c0:	4b38      	ldr	r3, [pc, #224]	; (800f3a4 <tcp_process+0x7d4>)
 800f2c2:	681b      	ldr	r3, [r3, #0]
 800f2c4:	429a      	cmp	r2, r3
 800f2c6:	d15f      	bne.n	800f388 <tcp_process+0x7b8>
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d15b      	bne.n	800f388 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f7fe fcf1 	bl	800dcb8 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f2d6:	4b35      	ldr	r3, [pc, #212]	; (800f3ac <tcp_process+0x7dc>)
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	687a      	ldr	r2, [r7, #4]
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d105      	bne.n	800f2ec <tcp_process+0x71c>
 800f2e0:	4b32      	ldr	r3, [pc, #200]	; (800f3ac <tcp_process+0x7dc>)
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	68db      	ldr	r3, [r3, #12]
 800f2e6:	4a31      	ldr	r2, [pc, #196]	; (800f3ac <tcp_process+0x7dc>)
 800f2e8:	6013      	str	r3, [r2, #0]
 800f2ea:	e013      	b.n	800f314 <tcp_process+0x744>
 800f2ec:	4b2f      	ldr	r3, [pc, #188]	; (800f3ac <tcp_process+0x7dc>)
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	60fb      	str	r3, [r7, #12]
 800f2f2:	e00c      	b.n	800f30e <tcp_process+0x73e>
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	68db      	ldr	r3, [r3, #12]
 800f2f8:	687a      	ldr	r2, [r7, #4]
 800f2fa:	429a      	cmp	r2, r3
 800f2fc:	d104      	bne.n	800f308 <tcp_process+0x738>
 800f2fe:	687b      	ldr	r3, [r7, #4]
 800f300:	68da      	ldr	r2, [r3, #12]
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	60da      	str	r2, [r3, #12]
 800f306:	e005      	b.n	800f314 <tcp_process+0x744>
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	68db      	ldr	r3, [r3, #12]
 800f30c:	60fb      	str	r3, [r7, #12]
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d1ef      	bne.n	800f2f4 <tcp_process+0x724>
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	2200      	movs	r2, #0
 800f318:	60da      	str	r2, [r3, #12]
 800f31a:	4b1f      	ldr	r3, [pc, #124]	; (800f398 <tcp_process+0x7c8>)
 800f31c:	2201      	movs	r2, #1
 800f31e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	220a      	movs	r2, #10
 800f324:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f326:	4b1d      	ldr	r3, [pc, #116]	; (800f39c <tcp_process+0x7cc>)
 800f328:	681a      	ldr	r2, [r3, #0]
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	60da      	str	r2, [r3, #12]
 800f32e:	4a1b      	ldr	r2, [pc, #108]	; (800f39c <tcp_process+0x7cc>)
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6013      	str	r3, [r2, #0]
 800f334:	f002 fc4a 	bl	8011bcc <tcp_timer_needed>
      }
      break;
 800f338:	e026      	b.n	800f388 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800f33a:	6878      	ldr	r0, [r7, #4]
 800f33c:	f000 f93c 	bl	800f5b8 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f340:	4b17      	ldr	r3, [pc, #92]	; (800f3a0 <tcp_process+0x7d0>)
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	f003 0310 	and.w	r3, r3, #16
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d01f      	beq.n	800f38c <tcp_process+0x7bc>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f350:	4b14      	ldr	r3, [pc, #80]	; (800f3a4 <tcp_process+0x7d4>)
 800f352:	681b      	ldr	r3, [r3, #0]
 800f354:	429a      	cmp	r2, r3
 800f356:	d119      	bne.n	800f38c <tcp_process+0x7bc>
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d115      	bne.n	800f38c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800f360:	4b11      	ldr	r3, [pc, #68]	; (800f3a8 <tcp_process+0x7d8>)
 800f362:	781b      	ldrb	r3, [r3, #0]
 800f364:	f043 0310 	orr.w	r3, r3, #16
 800f368:	b2da      	uxtb	r2, r3
 800f36a:	4b0f      	ldr	r3, [pc, #60]	; (800f3a8 <tcp_process+0x7d8>)
 800f36c:	701a      	strb	r2, [r3, #0]
      }
      break;
 800f36e:	e00d      	b.n	800f38c <tcp_process+0x7bc>
    default:
      break;
 800f370:	bf00      	nop
 800f372:	e00c      	b.n	800f38e <tcp_process+0x7be>
      break;
 800f374:	bf00      	nop
 800f376:	e00a      	b.n	800f38e <tcp_process+0x7be>
      break;
 800f378:	bf00      	nop
 800f37a:	e008      	b.n	800f38e <tcp_process+0x7be>
      break;
 800f37c:	bf00      	nop
 800f37e:	e006      	b.n	800f38e <tcp_process+0x7be>
      break;
 800f380:	bf00      	nop
 800f382:	e004      	b.n	800f38e <tcp_process+0x7be>
      break;
 800f384:	bf00      	nop
 800f386:	e002      	b.n	800f38e <tcp_process+0x7be>
      break;
 800f388:	bf00      	nop
 800f38a:	e000      	b.n	800f38e <tcp_process+0x7be>
      break;
 800f38c:	bf00      	nop
  }
  return ERR_OK;
 800f38e:	2300      	movs	r3, #0
}
 800f390:	4618      	mov	r0, r3
 800f392:	3724      	adds	r7, #36	; 0x24
 800f394:	46bd      	mov	sp, r7
 800f396:	bd90      	pop	{r4, r7, pc}
 800f398:	2000f274 	.word	0x2000f274
 800f39c:	2000f270 	.word	0x2000f270
 800f3a0:	2000f2a4 	.word	0x2000f2a4
 800f3a4:	2000f29c 	.word	0x2000f29c
 800f3a8:	2000f2a5 	.word	0x2000f2a5
 800f3ac:	2000f26c 	.word	0x2000f26c

0800f3b0 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f3b0:	b590      	push	{r4, r7, lr}
 800f3b2:	b085      	sub	sp, #20
 800f3b4:	af00      	add	r7, sp, #0
 800f3b6:	6078      	str	r0, [r7, #4]
 800f3b8:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d106      	bne.n	800f3ce <tcp_oos_insert_segment+0x1e>
 800f3c0:	4b3b      	ldr	r3, [pc, #236]	; (800f4b0 <tcp_oos_insert_segment+0x100>)
 800f3c2:	f240 421f 	movw	r2, #1055	; 0x41f
 800f3c6:	493b      	ldr	r1, [pc, #236]	; (800f4b4 <tcp_oos_insert_segment+0x104>)
 800f3c8:	483b      	ldr	r0, [pc, #236]	; (800f4b8 <tcp_oos_insert_segment+0x108>)
 800f3ca:	f007 fe89 	bl	80170e0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	68db      	ldr	r3, [r3, #12]
 800f3d2:	899b      	ldrh	r3, [r3, #12]
 800f3d4:	b29b      	uxth	r3, r3
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f7fb f9ca 	bl	800a770 <lwip_htons>
 800f3dc:	4603      	mov	r3, r0
 800f3de:	b2db      	uxtb	r3, r3
 800f3e0:	f003 0301 	and.w	r3, r3, #1
 800f3e4:	2b00      	cmp	r3, #0
 800f3e6:	d028      	beq.n	800f43a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f3e8:	6838      	ldr	r0, [r7, #0]
 800f3ea:	f7fe fa63 	bl	800d8b4 <tcp_segs_free>
    next = NULL;
 800f3ee:	2300      	movs	r3, #0
 800f3f0:	603b      	str	r3, [r7, #0]
 800f3f2:	e056      	b.n	800f4a2 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f3f4:	683b      	ldr	r3, [r7, #0]
 800f3f6:	68db      	ldr	r3, [r3, #12]
 800f3f8:	899b      	ldrh	r3, [r3, #12]
 800f3fa:	b29b      	uxth	r3, r3
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	f7fb f9b7 	bl	800a770 <lwip_htons>
 800f402:	4603      	mov	r3, r0
 800f404:	b2db      	uxtb	r3, r3
 800f406:	f003 0301 	and.w	r3, r3, #1
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	d00d      	beq.n	800f42a <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	899b      	ldrh	r3, [r3, #12]
 800f414:	b29c      	uxth	r4, r3
 800f416:	2001      	movs	r0, #1
 800f418:	f7fb f9aa 	bl	800a770 <lwip_htons>
 800f41c:	4603      	mov	r3, r0
 800f41e:	461a      	mov	r2, r3
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	68db      	ldr	r3, [r3, #12]
 800f424:	4322      	orrs	r2, r4
 800f426:	b292      	uxth	r2, r2
 800f428:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800f42a:	683b      	ldr	r3, [r7, #0]
 800f42c:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f42e:	683b      	ldr	r3, [r7, #0]
 800f430:	681b      	ldr	r3, [r3, #0]
 800f432:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f434:	68f8      	ldr	r0, [r7, #12]
 800f436:	f7fe fa52 	bl	800d8de <tcp_seg_free>
    while (next &&
 800f43a:	683b      	ldr	r3, [r7, #0]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d00e      	beq.n	800f45e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	891b      	ldrh	r3, [r3, #8]
 800f444:	461a      	mov	r2, r3
 800f446:	4b1d      	ldr	r3, [pc, #116]	; (800f4bc <tcp_oos_insert_segment+0x10c>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	441a      	add	r2, r3
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	68db      	ldr	r3, [r3, #12]
 800f450:	685b      	ldr	r3, [r3, #4]
 800f452:	6839      	ldr	r1, [r7, #0]
 800f454:	8909      	ldrh	r1, [r1, #8]
 800f456:	440b      	add	r3, r1
 800f458:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	daca      	bge.n	800f3f4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800f45e:	683b      	ldr	r3, [r7, #0]
 800f460:	2b00      	cmp	r3, #0
 800f462:	d01e      	beq.n	800f4a2 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	891b      	ldrh	r3, [r3, #8]
 800f468:	461a      	mov	r2, r3
 800f46a:	4b14      	ldr	r3, [pc, #80]	; (800f4bc <tcp_oos_insert_segment+0x10c>)
 800f46c:	681b      	ldr	r3, [r3, #0]
 800f46e:	441a      	add	r2, r3
 800f470:	683b      	ldr	r3, [r7, #0]
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	685b      	ldr	r3, [r3, #4]
 800f476:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f478:	2b00      	cmp	r3, #0
 800f47a:	dd12      	ble.n	800f4a2 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f47c:	683b      	ldr	r3, [r7, #0]
 800f47e:	68db      	ldr	r3, [r3, #12]
 800f480:	685b      	ldr	r3, [r3, #4]
 800f482:	b29a      	uxth	r2, r3
 800f484:	4b0d      	ldr	r3, [pc, #52]	; (800f4bc <tcp_oos_insert_segment+0x10c>)
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	b29b      	uxth	r3, r3
 800f48a:	1ad3      	subs	r3, r2, r3
 800f48c:	b29a      	uxth	r2, r3
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	685a      	ldr	r2, [r3, #4]
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	891b      	ldrh	r3, [r3, #8]
 800f49a:	4619      	mov	r1, r3
 800f49c:	4610      	mov	r0, r2
 800f49e:	f7fc fe09 	bl	800c0b4 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	683a      	ldr	r2, [r7, #0]
 800f4a6:	601a      	str	r2, [r3, #0]
}
 800f4a8:	bf00      	nop
 800f4aa:	3714      	adds	r7, #20
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	bd90      	pop	{r4, r7, pc}
 800f4b0:	08019420 	.word	0x08019420
 800f4b4:	080196e0 	.word	0x080196e0
 800f4b8:	0801946c 	.word	0x0801946c
 800f4bc:	2000f298 	.word	0x2000f298

0800f4c0 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800f4c0:	b5b0      	push	{r4, r5, r7, lr}
 800f4c2:	b086      	sub	sp, #24
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	60f8      	str	r0, [r7, #12]
 800f4c8:	60b9      	str	r1, [r7, #8]
 800f4ca:	607a      	str	r2, [r7, #4]
 800f4cc:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800f4ce:	e03e      	b.n	800f54e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800f4d0:	68bb      	ldr	r3, [r7, #8]
 800f4d2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800f4d4:	68bb      	ldr	r3, [r7, #8]
 800f4d6:	681b      	ldr	r3, [r3, #0]
 800f4d8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	685b      	ldr	r3, [r3, #4]
 800f4de:	4618      	mov	r0, r3
 800f4e0:	f7fc fffc 	bl	800c4dc <pbuf_clen>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800f4e8:	68fb      	ldr	r3, [r7, #12]
 800f4ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f4ee:	8a7a      	ldrh	r2, [r7, #18]
 800f4f0:	429a      	cmp	r2, r3
 800f4f2:	d906      	bls.n	800f502 <tcp_free_acked_segments+0x42>
 800f4f4:	4b2a      	ldr	r3, [pc, #168]	; (800f5a0 <tcp_free_acked_segments+0xe0>)
 800f4f6:	f240 4257 	movw	r2, #1111	; 0x457
 800f4fa:	492a      	ldr	r1, [pc, #168]	; (800f5a4 <tcp_free_acked_segments+0xe4>)
 800f4fc:	482a      	ldr	r0, [pc, #168]	; (800f5a8 <tcp_free_acked_segments+0xe8>)
 800f4fe:	f007 fdef 	bl	80170e0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800f502:	68fb      	ldr	r3, [r7, #12]
 800f504:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800f508:	8a7b      	ldrh	r3, [r7, #18]
 800f50a:	1ad3      	subs	r3, r2, r3
 800f50c:	b29a      	uxth	r2, r3
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800f514:	697b      	ldr	r3, [r7, #20]
 800f516:	891a      	ldrh	r2, [r3, #8]
 800f518:	4b24      	ldr	r3, [pc, #144]	; (800f5ac <tcp_free_acked_segments+0xec>)
 800f51a:	881b      	ldrh	r3, [r3, #0]
 800f51c:	4413      	add	r3, r2
 800f51e:	b29a      	uxth	r2, r3
 800f520:	4b22      	ldr	r3, [pc, #136]	; (800f5ac <tcp_free_acked_segments+0xec>)
 800f522:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800f524:	6978      	ldr	r0, [r7, #20]
 800f526:	f7fe f9da 	bl	800d8de <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800f52a:	68fb      	ldr	r3, [r7, #12]
 800f52c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f530:	2b00      	cmp	r3, #0
 800f532:	d00c      	beq.n	800f54e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d109      	bne.n	800f54e <tcp_free_acked_segments+0x8e>
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d106      	bne.n	800f54e <tcp_free_acked_segments+0x8e>
 800f540:	4b17      	ldr	r3, [pc, #92]	; (800f5a0 <tcp_free_acked_segments+0xe0>)
 800f542:	f240 4261 	movw	r2, #1121	; 0x461
 800f546:	491a      	ldr	r1, [pc, #104]	; (800f5b0 <tcp_free_acked_segments+0xf0>)
 800f548:	4817      	ldr	r0, [pc, #92]	; (800f5a8 <tcp_free_acked_segments+0xe8>)
 800f54a:	f007 fdc9 	bl	80170e0 <iprintf>
  while (seg_list != NULL &&
 800f54e:	68bb      	ldr	r3, [r7, #8]
 800f550:	2b00      	cmp	r3, #0
 800f552:	d020      	beq.n	800f596 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	68db      	ldr	r3, [r3, #12]
 800f558:	685b      	ldr	r3, [r3, #4]
 800f55a:	4618      	mov	r0, r3
 800f55c:	f7fb f91d 	bl	800a79a <lwip_htonl>
 800f560:	4604      	mov	r4, r0
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	891b      	ldrh	r3, [r3, #8]
 800f566:	461d      	mov	r5, r3
 800f568:	68bb      	ldr	r3, [r7, #8]
 800f56a:	68db      	ldr	r3, [r3, #12]
 800f56c:	899b      	ldrh	r3, [r3, #12]
 800f56e:	b29b      	uxth	r3, r3
 800f570:	4618      	mov	r0, r3
 800f572:	f7fb f8fd 	bl	800a770 <lwip_htons>
 800f576:	4603      	mov	r3, r0
 800f578:	b2db      	uxtb	r3, r3
 800f57a:	f003 0303 	and.w	r3, r3, #3
 800f57e:	2b00      	cmp	r3, #0
 800f580:	d001      	beq.n	800f586 <tcp_free_acked_segments+0xc6>
 800f582:	2301      	movs	r3, #1
 800f584:	e000      	b.n	800f588 <tcp_free_acked_segments+0xc8>
 800f586:	2300      	movs	r3, #0
 800f588:	442b      	add	r3, r5
 800f58a:	18e2      	adds	r2, r4, r3
 800f58c:	4b09      	ldr	r3, [pc, #36]	; (800f5b4 <tcp_free_acked_segments+0xf4>)
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800f592:	2b00      	cmp	r3, #0
 800f594:	dd9c      	ble.n	800f4d0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800f596:	68bb      	ldr	r3, [r7, #8]
}
 800f598:	4618      	mov	r0, r3
 800f59a:	3718      	adds	r7, #24
 800f59c:	46bd      	mov	sp, r7
 800f59e:	bdb0      	pop	{r4, r5, r7, pc}
 800f5a0:	08019420 	.word	0x08019420
 800f5a4:	08019708 	.word	0x08019708
 800f5a8:	0801946c 	.word	0x0801946c
 800f5ac:	2000f2a0 	.word	0x2000f2a0
 800f5b0:	08019730 	.word	0x08019730
 800f5b4:	2000f29c 	.word	0x2000f29c

0800f5b8 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f5b8:	b5b0      	push	{r4, r5, r7, lr}
 800f5ba:	b094      	sub	sp, #80	; 0x50
 800f5bc:	af00      	add	r7, sp, #0
 800f5be:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d106      	bne.n	800f5d8 <tcp_receive+0x20>
 800f5ca:	4b91      	ldr	r3, [pc, #580]	; (800f810 <tcp_receive+0x258>)
 800f5cc:	f240 427b 	movw	r2, #1147	; 0x47b
 800f5d0:	4990      	ldr	r1, [pc, #576]	; (800f814 <tcp_receive+0x25c>)
 800f5d2:	4891      	ldr	r0, [pc, #580]	; (800f818 <tcp_receive+0x260>)
 800f5d4:	f007 fd84 	bl	80170e0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	7d1b      	ldrb	r3, [r3, #20]
 800f5dc:	2b03      	cmp	r3, #3
 800f5de:	d806      	bhi.n	800f5ee <tcp_receive+0x36>
 800f5e0:	4b8b      	ldr	r3, [pc, #556]	; (800f810 <tcp_receive+0x258>)
 800f5e2:	f240 427c 	movw	r2, #1148	; 0x47c
 800f5e6:	498d      	ldr	r1, [pc, #564]	; (800f81c <tcp_receive+0x264>)
 800f5e8:	488b      	ldr	r0, [pc, #556]	; (800f818 <tcp_receive+0x260>)
 800f5ea:	f007 fd79 	bl	80170e0 <iprintf>

  if (flags & TCP_ACK) {
 800f5ee:	4b8c      	ldr	r3, [pc, #560]	; (800f820 <tcp_receive+0x268>)
 800f5f0:	781b      	ldrb	r3, [r3, #0]
 800f5f2:	f003 0310 	and.w	r3, r3, #16
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	f000 8264 	beq.w	800fac4 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f602:	461a      	mov	r2, r3
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f608:	4413      	add	r3, r2
 800f60a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f610:	4b84      	ldr	r3, [pc, #528]	; (800f824 <tcp_receive+0x26c>)
 800f612:	681b      	ldr	r3, [r3, #0]
 800f614:	1ad3      	subs	r3, r2, r3
 800f616:	2b00      	cmp	r3, #0
 800f618:	db1b      	blt.n	800f652 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f61a:	687b      	ldr	r3, [r7, #4]
 800f61c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f61e:	4b81      	ldr	r3, [pc, #516]	; (800f824 <tcp_receive+0x26c>)
 800f620:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f622:	429a      	cmp	r2, r3
 800f624:	d106      	bne.n	800f634 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f62a:	4b7f      	ldr	r3, [pc, #508]	; (800f828 <tcp_receive+0x270>)
 800f62c:	681b      	ldr	r3, [r3, #0]
 800f62e:	1ad3      	subs	r3, r2, r3
 800f630:	2b00      	cmp	r3, #0
 800f632:	db0e      	blt.n	800f652 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f638:	4b7b      	ldr	r3, [pc, #492]	; (800f828 <tcp_receive+0x270>)
 800f63a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d125      	bne.n	800f68c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f640:	4b7a      	ldr	r3, [pc, #488]	; (800f82c <tcp_receive+0x274>)
 800f642:	681b      	ldr	r3, [r3, #0]
 800f644:	89db      	ldrh	r3, [r3, #14]
 800f646:	b29a      	uxth	r2, r3
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f64e:	429a      	cmp	r2, r3
 800f650:	d91c      	bls.n	800f68c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f652:	4b76      	ldr	r3, [pc, #472]	; (800f82c <tcp_receive+0x274>)
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	89db      	ldrh	r3, [r3, #14]
 800f658:	b29a      	uxth	r2, r3
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800f66c:	429a      	cmp	r2, r3
 800f66e:	d205      	bcs.n	800f67c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f676:	687b      	ldr	r3, [r7, #4]
 800f678:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800f67c:	4b69      	ldr	r3, [pc, #420]	; (800f824 <tcp_receive+0x26c>)
 800f67e:	681a      	ldr	r2, [r3, #0]
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800f684:	4b68      	ldr	r3, [pc, #416]	; (800f828 <tcp_receive+0x270>)
 800f686:	681a      	ldr	r2, [r3, #0]
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f68c:	4b66      	ldr	r3, [pc, #408]	; (800f828 <tcp_receive+0x270>)
 800f68e:	681a      	ldr	r2, [r3, #0]
 800f690:	687b      	ldr	r3, [r7, #4]
 800f692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f694:	1ad3      	subs	r3, r2, r3
 800f696:	2b00      	cmp	r3, #0
 800f698:	dc58      	bgt.n	800f74c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800f69a:	4b65      	ldr	r3, [pc, #404]	; (800f830 <tcp_receive+0x278>)
 800f69c:	881b      	ldrh	r3, [r3, #0]
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d14b      	bne.n	800f73a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f6a6:	687a      	ldr	r2, [r7, #4]
 800f6a8:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800f6ac:	4413      	add	r3, r2
 800f6ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f6b0:	429a      	cmp	r2, r3
 800f6b2:	d142      	bne.n	800f73a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	db3d      	blt.n	800f73a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f6c2:	4b59      	ldr	r3, [pc, #356]	; (800f828 <tcp_receive+0x270>)
 800f6c4:	681b      	ldr	r3, [r3, #0]
 800f6c6:	429a      	cmp	r2, r3
 800f6c8:	d137      	bne.n	800f73a <tcp_receive+0x182>
              found_dupack = 1;
 800f6ca:	2301      	movs	r3, #1
 800f6cc:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f6d4:	2bff      	cmp	r3, #255	; 0xff
 800f6d6:	d007      	beq.n	800f6e8 <tcp_receive+0x130>
                ++pcb->dupacks;
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f6de:	3301      	adds	r3, #1
 800f6e0:	b2da      	uxtb	r2, r3
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f6ee:	2b03      	cmp	r3, #3
 800f6f0:	d91b      	bls.n	800f72a <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f6fc:	4413      	add	r3, r2
 800f6fe:	b29a      	uxth	r2, r3
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f706:	429a      	cmp	r2, r3
 800f708:	d30a      	bcc.n	800f720 <tcp_receive+0x168>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f714:	4413      	add	r3, r2
 800f716:	b29a      	uxth	r2, r3
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f71e:	e004      	b.n	800f72a <tcp_receive+0x172>
 800f720:	687b      	ldr	r3, [r7, #4]
 800f722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f726:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f730:	2b02      	cmp	r3, #2
 800f732:	d902      	bls.n	800f73a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f734:	6878      	ldr	r0, [r7, #4]
 800f736:	f001 feeb 	bl	8011510 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f73a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	f040 8161 	bne.w	800fa04 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	2200      	movs	r2, #0
 800f746:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f74a:	e15b      	b.n	800fa04 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f74c:	4b36      	ldr	r3, [pc, #216]	; (800f828 <tcp_receive+0x270>)
 800f74e:	681a      	ldr	r2, [r3, #0]
 800f750:	687b      	ldr	r3, [r7, #4]
 800f752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f754:	1ad3      	subs	r3, r2, r3
 800f756:	3b01      	subs	r3, #1
 800f758:	2b00      	cmp	r3, #0
 800f75a:	f2c0 814e 	blt.w	800f9fa <tcp_receive+0x442>
 800f75e:	4b32      	ldr	r3, [pc, #200]	; (800f828 <tcp_receive+0x270>)
 800f760:	681a      	ldr	r2, [r3, #0]
 800f762:	687b      	ldr	r3, [r7, #4]
 800f764:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f766:	1ad3      	subs	r3, r2, r3
 800f768:	2b00      	cmp	r3, #0
 800f76a:	f300 8146 	bgt.w	800f9fa <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	8b5b      	ldrh	r3, [r3, #26]
 800f772:	f003 0304 	and.w	r3, r3, #4
 800f776:	2b00      	cmp	r3, #0
 800f778:	d010      	beq.n	800f79c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	8b5b      	ldrh	r3, [r3, #26]
 800f77e:	f023 0304 	bic.w	r3, r3, #4
 800f782:	b29a      	uxth	r2, r3
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	2200      	movs	r2, #0
 800f798:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f79c:	687b      	ldr	r3, [r7, #4]
 800f79e:	2200      	movs	r2, #0
 800f7a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f7aa:	10db      	asrs	r3, r3, #3
 800f7ac:	b21b      	sxth	r3, r3
 800f7ae:	b29a      	uxth	r2, r3
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f7b6:	b29b      	uxth	r3, r3
 800f7b8:	4413      	add	r3, r2
 800f7ba:	b29b      	uxth	r3, r3
 800f7bc:	b21a      	sxth	r2, r3
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f7c4:	4b18      	ldr	r3, [pc, #96]	; (800f828 <tcp_receive+0x270>)
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	b29a      	uxth	r2, r3
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f7ce:	b29b      	uxth	r3, r3
 800f7d0:	1ad3      	subs	r3, r2, r3
 800f7d2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f7dc:	4b12      	ldr	r3, [pc, #72]	; (800f828 <tcp_receive+0x270>)
 800f7de:	681a      	ldr	r2, [r3, #0]
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	7d1b      	ldrb	r3, [r3, #20]
 800f7e8:	2b03      	cmp	r3, #3
 800f7ea:	f240 8097 	bls.w	800f91c <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f7fa:	429a      	cmp	r2, r3
 800f7fc:	d245      	bcs.n	800f88a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	8b5b      	ldrh	r3, [r3, #26]
 800f802:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f806:	2b00      	cmp	r3, #0
 800f808:	d014      	beq.n	800f834 <tcp_receive+0x27c>
 800f80a:	2301      	movs	r3, #1
 800f80c:	e013      	b.n	800f836 <tcp_receive+0x27e>
 800f80e:	bf00      	nop
 800f810:	08019420 	.word	0x08019420
 800f814:	08019750 	.word	0x08019750
 800f818:	0801946c 	.word	0x0801946c
 800f81c:	0801976c 	.word	0x0801976c
 800f820:	2000f2a4 	.word	0x2000f2a4
 800f824:	2000f298 	.word	0x2000f298
 800f828:	2000f29c 	.word	0x2000f29c
 800f82c:	2000f288 	.word	0x2000f288
 800f830:	2000f2a2 	.word	0x2000f2a2
 800f834:	2302      	movs	r3, #2
 800f836:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f83a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f83e:	b29a      	uxth	r2, r3
 800f840:	687b      	ldr	r3, [r7, #4]
 800f842:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f844:	fb12 f303 	smulbb	r3, r2, r3
 800f848:	b29b      	uxth	r3, r3
 800f84a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f84c:	4293      	cmp	r3, r2
 800f84e:	bf28      	it	cs
 800f850:	4613      	movcs	r3, r2
 800f852:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f85a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f85c:	4413      	add	r3, r2
 800f85e:	b29a      	uxth	r2, r3
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f866:	429a      	cmp	r2, r3
 800f868:	d309      	bcc.n	800f87e <tcp_receive+0x2c6>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f870:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f872:	4413      	add	r3, r2
 800f874:	b29a      	uxth	r2, r3
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f87c:	e04e      	b.n	800f91c <tcp_receive+0x364>
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f884:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f888:	e048      	b.n	800f91c <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f890:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f892:	4413      	add	r3, r2
 800f894:	b29a      	uxth	r2, r3
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d309      	bcc.n	800f8b4 <tcp_receive+0x2fc>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f8a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f8a8:	4413      	add	r3, r2
 800f8aa:	b29a      	uxth	r2, r3
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f8b2:	e004      	b.n	800f8be <tcp_receive+0x306>
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f8ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f8c4:	687b      	ldr	r3, [r7, #4]
 800f8c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	d326      	bcc.n	800f91c <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f8ce:	687b      	ldr	r3, [r7, #4]
 800f8d0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f8d4:	687b      	ldr	r3, [r7, #4]
 800f8d6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f8da:	1ad3      	subs	r3, r2, r3
 800f8dc:	b29a      	uxth	r2, r3
 800f8de:	687b      	ldr	r3, [r7, #4]
 800f8e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f8e4:	687b      	ldr	r3, [r7, #4]
 800f8e6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8ee:	4413      	add	r3, r2
 800f8f0:	b29a      	uxth	r2, r3
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f8f8:	429a      	cmp	r2, r3
 800f8fa:	d30a      	bcc.n	800f912 <tcp_receive+0x35a>
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f902:	687b      	ldr	r3, [r7, #4]
 800f904:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f906:	4413      	add	r3, r2
 800f908:	b29a      	uxth	r2, r3
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f910:	e004      	b.n	800f91c <tcp_receive+0x364>
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f918:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f924:	4a98      	ldr	r2, [pc, #608]	; (800fb88 <tcp_receive+0x5d0>)
 800f926:	6878      	ldr	r0, [r7, #4]
 800f928:	f7ff fdca 	bl	800f4c0 <tcp_free_acked_segments>
 800f92c:	4602      	mov	r2, r0
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f93a:	4a94      	ldr	r2, [pc, #592]	; (800fb8c <tcp_receive+0x5d4>)
 800f93c:	6878      	ldr	r0, [r7, #4]
 800f93e:	f7ff fdbf 	bl	800f4c0 <tcp_free_acked_segments>
 800f942:	4602      	mov	r2, r0
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f948:	687b      	ldr	r3, [r7, #4]
 800f94a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d104      	bne.n	800f95a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f956:	861a      	strh	r2, [r3, #48]	; 0x30
 800f958:	e002      	b.n	800f960 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	2200      	movs	r2, #0
 800f95e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	2200      	movs	r2, #0
 800f964:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d103      	bne.n	800f976 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	2200      	movs	r2, #0
 800f972:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f976:	687b      	ldr	r3, [r7, #4]
 800f978:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f97c:	4b84      	ldr	r3, [pc, #528]	; (800fb90 <tcp_receive+0x5d8>)
 800f97e:	881b      	ldrh	r3, [r3, #0]
 800f980:	4413      	add	r3, r2
 800f982:	b29a      	uxth	r2, r3
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	8b5b      	ldrh	r3, [r3, #26]
 800f98e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f992:	2b00      	cmp	r3, #0
 800f994:	d035      	beq.n	800fa02 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f996:	687b      	ldr	r3, [r7, #4]
 800f998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d118      	bne.n	800f9d0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f99e:	687b      	ldr	r3, [r7, #4]
 800f9a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9a2:	2b00      	cmp	r3, #0
 800f9a4:	d00c      	beq.n	800f9c0 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9ae:	68db      	ldr	r3, [r3, #12]
 800f9b0:	685b      	ldr	r3, [r3, #4]
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	f7fa fef1 	bl	800a79a <lwip_htonl>
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	dc20      	bgt.n	800fa02 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	8b5b      	ldrh	r3, [r3, #26]
 800f9c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f9c8:	b29a      	uxth	r2, r3
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f9ce:	e018      	b.n	800fa02 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f9d8:	68db      	ldr	r3, [r3, #12]
 800f9da:	685b      	ldr	r3, [r3, #4]
 800f9dc:	4618      	mov	r0, r3
 800f9de:	f7fa fedc 	bl	800a79a <lwip_htonl>
 800f9e2:	4603      	mov	r3, r0
 800f9e4:	1ae3      	subs	r3, r4, r3
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	dc0b      	bgt.n	800fa02 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	8b5b      	ldrh	r3, [r3, #26]
 800f9ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f9f2:	b29a      	uxth	r2, r3
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f9f8:	e003      	b.n	800fa02 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f9fa:	6878      	ldr	r0, [r7, #4]
 800f9fc:	f001 ff76 	bl	80118ec <tcp_send_empty_ack>
 800fa00:	e000      	b.n	800fa04 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fa02:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d05b      	beq.n	800fac4 <tcp_receive+0x50c>
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fa10:	4b60      	ldr	r3, [pc, #384]	; (800fb94 <tcp_receive+0x5dc>)
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	1ad3      	subs	r3, r2, r3
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	da54      	bge.n	800fac4 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fa1a:	4b5f      	ldr	r3, [pc, #380]	; (800fb98 <tcp_receive+0x5e0>)
 800fa1c:	681b      	ldr	r3, [r3, #0]
 800fa1e:	b29a      	uxth	r2, r3
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fa24:	b29b      	uxth	r3, r3
 800fa26:	1ad3      	subs	r3, r2, r3
 800fa28:	b29b      	uxth	r3, r3
 800fa2a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800fa2e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fa38:	10db      	asrs	r3, r3, #3
 800fa3a:	b21b      	sxth	r3, r3
 800fa3c:	b29b      	uxth	r3, r3
 800fa3e:	1ad3      	subs	r3, r2, r3
 800fa40:	b29b      	uxth	r3, r3
 800fa42:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fa4c:	b29a      	uxth	r2, r3
 800fa4e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fa52:	4413      	add	r3, r2
 800fa54:	b29b      	uxth	r3, r3
 800fa56:	b21a      	sxth	r2, r3
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fa5c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	da05      	bge.n	800fa70 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800fa64:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fa68:	425b      	negs	r3, r3
 800fa6a:	b29b      	uxth	r3, r3
 800fa6c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800fa70:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fa7a:	109b      	asrs	r3, r3, #2
 800fa7c:	b21b      	sxth	r3, r3
 800fa7e:	b29b      	uxth	r3, r3
 800fa80:	1ad3      	subs	r3, r2, r3
 800fa82:	b29b      	uxth	r3, r3
 800fa84:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fa8e:	b29a      	uxth	r2, r3
 800fa90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800fa94:	4413      	add	r3, r2
 800fa96:	b29b      	uxth	r3, r3
 800fa98:	b21a      	sxth	r2, r3
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fa9e:	687b      	ldr	r3, [r7, #4]
 800faa0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800faa4:	10db      	asrs	r3, r3, #3
 800faa6:	b21b      	sxth	r3, r3
 800faa8:	b29a      	uxth	r2, r3
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fab0:	b29b      	uxth	r3, r3
 800fab2:	4413      	add	r3, r2
 800fab4:	b29b      	uxth	r3, r3
 800fab6:	b21a      	sxth	r2, r3
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	2200      	movs	r2, #0
 800fac2:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fac4:	4b35      	ldr	r3, [pc, #212]	; (800fb9c <tcp_receive+0x5e4>)
 800fac6:	881b      	ldrh	r3, [r3, #0]
 800fac8:	2b00      	cmp	r3, #0
 800faca:	f000 84e2 	beq.w	8010492 <tcp_receive+0xeda>
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	7d1b      	ldrb	r3, [r3, #20]
 800fad2:	2b06      	cmp	r3, #6
 800fad4:	f200 84dd 	bhi.w	8010492 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fadc:	4b30      	ldr	r3, [pc, #192]	; (800fba0 <tcp_receive+0x5e8>)
 800fade:	681b      	ldr	r3, [r3, #0]
 800fae0:	1ad3      	subs	r3, r2, r3
 800fae2:	3b01      	subs	r3, #1
 800fae4:	2b00      	cmp	r3, #0
 800fae6:	f2c0 808f 	blt.w	800fc08 <tcp_receive+0x650>
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800faee:	4b2b      	ldr	r3, [pc, #172]	; (800fb9c <tcp_receive+0x5e4>)
 800faf0:	881b      	ldrh	r3, [r3, #0]
 800faf2:	4619      	mov	r1, r3
 800faf4:	4b2a      	ldr	r3, [pc, #168]	; (800fba0 <tcp_receive+0x5e8>)
 800faf6:	681b      	ldr	r3, [r3, #0]
 800faf8:	440b      	add	r3, r1
 800fafa:	1ad3      	subs	r3, r2, r3
 800fafc:	3301      	adds	r3, #1
 800fafe:	2b00      	cmp	r3, #0
 800fb00:	f300 8082 	bgt.w	800fc08 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fb04:	4b27      	ldr	r3, [pc, #156]	; (800fba4 <tcp_receive+0x5ec>)
 800fb06:	685b      	ldr	r3, [r3, #4]
 800fb08:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fb0e:	4b24      	ldr	r3, [pc, #144]	; (800fba0 <tcp_receive+0x5e8>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	1ad3      	subs	r3, r2, r3
 800fb14:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fb16:	4b23      	ldr	r3, [pc, #140]	; (800fba4 <tcp_receive+0x5ec>)
 800fb18:	685b      	ldr	r3, [r3, #4]
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d106      	bne.n	800fb2c <tcp_receive+0x574>
 800fb1e:	4b22      	ldr	r3, [pc, #136]	; (800fba8 <tcp_receive+0x5f0>)
 800fb20:	f240 5294 	movw	r2, #1428	; 0x594
 800fb24:	4921      	ldr	r1, [pc, #132]	; (800fbac <tcp_receive+0x5f4>)
 800fb26:	4822      	ldr	r0, [pc, #136]	; (800fbb0 <tcp_receive+0x5f8>)
 800fb28:	f007 fada 	bl	80170e0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800fb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb2e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800fb32:	4293      	cmp	r3, r2
 800fb34:	d906      	bls.n	800fb44 <tcp_receive+0x58c>
 800fb36:	4b1c      	ldr	r3, [pc, #112]	; (800fba8 <tcp_receive+0x5f0>)
 800fb38:	f240 5295 	movw	r2, #1429	; 0x595
 800fb3c:	491d      	ldr	r1, [pc, #116]	; (800fbb4 <tcp_receive+0x5fc>)
 800fb3e:	481c      	ldr	r0, [pc, #112]	; (800fbb0 <tcp_receive+0x5f8>)
 800fb40:	f007 face 	bl	80170e0 <iprintf>
      off = (u16_t)off32;
 800fb44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb46:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fb4a:	4b16      	ldr	r3, [pc, #88]	; (800fba4 <tcp_receive+0x5ec>)
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	891b      	ldrh	r3, [r3, #8]
 800fb50:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fb54:	429a      	cmp	r2, r3
 800fb56:	d906      	bls.n	800fb66 <tcp_receive+0x5ae>
 800fb58:	4b13      	ldr	r3, [pc, #76]	; (800fba8 <tcp_receive+0x5f0>)
 800fb5a:	f240 5297 	movw	r2, #1431	; 0x597
 800fb5e:	4916      	ldr	r1, [pc, #88]	; (800fbb8 <tcp_receive+0x600>)
 800fb60:	4813      	ldr	r0, [pc, #76]	; (800fbb0 <tcp_receive+0x5f8>)
 800fb62:	f007 fabd 	bl	80170e0 <iprintf>
      inseg.len -= off;
 800fb66:	4b0f      	ldr	r3, [pc, #60]	; (800fba4 <tcp_receive+0x5ec>)
 800fb68:	891a      	ldrh	r2, [r3, #8]
 800fb6a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fb6e:	1ad3      	subs	r3, r2, r3
 800fb70:	b29a      	uxth	r2, r3
 800fb72:	4b0c      	ldr	r3, [pc, #48]	; (800fba4 <tcp_receive+0x5ec>)
 800fb74:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fb76:	4b0b      	ldr	r3, [pc, #44]	; (800fba4 <tcp_receive+0x5ec>)
 800fb78:	685b      	ldr	r3, [r3, #4]
 800fb7a:	891a      	ldrh	r2, [r3, #8]
 800fb7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fb80:	1ad3      	subs	r3, r2, r3
 800fb82:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800fb84:	e02a      	b.n	800fbdc <tcp_receive+0x624>
 800fb86:	bf00      	nop
 800fb88:	08019788 	.word	0x08019788
 800fb8c:	08019790 	.word	0x08019790
 800fb90:	2000f2a0 	.word	0x2000f2a0
 800fb94:	2000f29c 	.word	0x2000f29c
 800fb98:	2000f260 	.word	0x2000f260
 800fb9c:	2000f2a2 	.word	0x2000f2a2
 800fba0:	2000f298 	.word	0x2000f298
 800fba4:	2000f278 	.word	0x2000f278
 800fba8:	08019420 	.word	0x08019420
 800fbac:	08019798 	.word	0x08019798
 800fbb0:	0801946c 	.word	0x0801946c
 800fbb4:	080197a8 	.word	0x080197a8
 800fbb8:	080197b8 	.word	0x080197b8
        off -= p->len;
 800fbbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbbe:	895b      	ldrh	r3, [r3, #10]
 800fbc0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fbc4:	1ad3      	subs	r3, r2, r3
 800fbc6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800fbca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbcc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fbce:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800fbd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800fbd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800fbdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fbde:	895b      	ldrh	r3, [r3, #10]
 800fbe0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800fbe4:	429a      	cmp	r2, r3
 800fbe6:	d8e9      	bhi.n	800fbbc <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800fbe8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800fbec:	4619      	mov	r1, r3
 800fbee:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800fbf0:	f7fc fb60 	bl	800c2b4 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbf8:	4a91      	ldr	r2, [pc, #580]	; (800fe40 <tcp_receive+0x888>)
 800fbfa:	6013      	str	r3, [r2, #0]
 800fbfc:	4b91      	ldr	r3, [pc, #580]	; (800fe44 <tcp_receive+0x88c>)
 800fbfe:	68db      	ldr	r3, [r3, #12]
 800fc00:	4a8f      	ldr	r2, [pc, #572]	; (800fe40 <tcp_receive+0x888>)
 800fc02:	6812      	ldr	r2, [r2, #0]
 800fc04:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fc06:	e00d      	b.n	800fc24 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fc08:	4b8d      	ldr	r3, [pc, #564]	; (800fe40 <tcp_receive+0x888>)
 800fc0a:	681a      	ldr	r2, [r3, #0]
 800fc0c:	687b      	ldr	r3, [r7, #4]
 800fc0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc10:	1ad3      	subs	r3, r2, r3
 800fc12:	2b00      	cmp	r3, #0
 800fc14:	da06      	bge.n	800fc24 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	8b5b      	ldrh	r3, [r3, #26]
 800fc1a:	f043 0302 	orr.w	r3, r3, #2
 800fc1e:	b29a      	uxth	r2, r3
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fc24:	4b86      	ldr	r3, [pc, #536]	; (800fe40 <tcp_receive+0x888>)
 800fc26:	681a      	ldr	r2, [r3, #0]
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc2c:	1ad3      	subs	r3, r2, r3
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	f2c0 842a 	blt.w	8010488 <tcp_receive+0xed0>
 800fc34:	4b82      	ldr	r3, [pc, #520]	; (800fe40 <tcp_receive+0x888>)
 800fc36:	681a      	ldr	r2, [r3, #0]
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc3c:	6879      	ldr	r1, [r7, #4]
 800fc3e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fc40:	440b      	add	r3, r1
 800fc42:	1ad3      	subs	r3, r2, r3
 800fc44:	3301      	adds	r3, #1
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	f300 841e 	bgt.w	8010488 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc50:	4b7b      	ldr	r3, [pc, #492]	; (800fe40 <tcp_receive+0x888>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	429a      	cmp	r2, r3
 800fc56:	f040 829a 	bne.w	801018e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fc5a:	4b7a      	ldr	r3, [pc, #488]	; (800fe44 <tcp_receive+0x88c>)
 800fc5c:	891c      	ldrh	r4, [r3, #8]
 800fc5e:	4b79      	ldr	r3, [pc, #484]	; (800fe44 <tcp_receive+0x88c>)
 800fc60:	68db      	ldr	r3, [r3, #12]
 800fc62:	899b      	ldrh	r3, [r3, #12]
 800fc64:	b29b      	uxth	r3, r3
 800fc66:	4618      	mov	r0, r3
 800fc68:	f7fa fd82 	bl	800a770 <lwip_htons>
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	b2db      	uxtb	r3, r3
 800fc70:	f003 0303 	and.w	r3, r3, #3
 800fc74:	2b00      	cmp	r3, #0
 800fc76:	d001      	beq.n	800fc7c <tcp_receive+0x6c4>
 800fc78:	2301      	movs	r3, #1
 800fc7a:	e000      	b.n	800fc7e <tcp_receive+0x6c6>
 800fc7c:	2300      	movs	r3, #0
 800fc7e:	4423      	add	r3, r4
 800fc80:	b29a      	uxth	r2, r3
 800fc82:	4b71      	ldr	r3, [pc, #452]	; (800fe48 <tcp_receive+0x890>)
 800fc84:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fc8a:	4b6f      	ldr	r3, [pc, #444]	; (800fe48 <tcp_receive+0x890>)
 800fc8c:	881b      	ldrh	r3, [r3, #0]
 800fc8e:	429a      	cmp	r2, r3
 800fc90:	d275      	bcs.n	800fd7e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fc92:	4b6c      	ldr	r3, [pc, #432]	; (800fe44 <tcp_receive+0x88c>)
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	899b      	ldrh	r3, [r3, #12]
 800fc98:	b29b      	uxth	r3, r3
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7fa fd68 	bl	800a770 <lwip_htons>
 800fca0:	4603      	mov	r3, r0
 800fca2:	b2db      	uxtb	r3, r3
 800fca4:	f003 0301 	and.w	r3, r3, #1
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d01f      	beq.n	800fcec <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fcac:	4b65      	ldr	r3, [pc, #404]	; (800fe44 <tcp_receive+0x88c>)
 800fcae:	68db      	ldr	r3, [r3, #12]
 800fcb0:	899b      	ldrh	r3, [r3, #12]
 800fcb2:	b29b      	uxth	r3, r3
 800fcb4:	b21b      	sxth	r3, r3
 800fcb6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fcba:	b21c      	sxth	r4, r3
 800fcbc:	4b61      	ldr	r3, [pc, #388]	; (800fe44 <tcp_receive+0x88c>)
 800fcbe:	68db      	ldr	r3, [r3, #12]
 800fcc0:	899b      	ldrh	r3, [r3, #12]
 800fcc2:	b29b      	uxth	r3, r3
 800fcc4:	4618      	mov	r0, r3
 800fcc6:	f7fa fd53 	bl	800a770 <lwip_htons>
 800fcca:	4603      	mov	r3, r0
 800fccc:	b2db      	uxtb	r3, r3
 800fcce:	b29b      	uxth	r3, r3
 800fcd0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fcd4:	b29b      	uxth	r3, r3
 800fcd6:	4618      	mov	r0, r3
 800fcd8:	f7fa fd4a 	bl	800a770 <lwip_htons>
 800fcdc:	4603      	mov	r3, r0
 800fcde:	b21b      	sxth	r3, r3
 800fce0:	4323      	orrs	r3, r4
 800fce2:	b21a      	sxth	r2, r3
 800fce4:	4b57      	ldr	r3, [pc, #348]	; (800fe44 <tcp_receive+0x88c>)
 800fce6:	68db      	ldr	r3, [r3, #12]
 800fce8:	b292      	uxth	r2, r2
 800fcea:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800fcec:	687b      	ldr	r3, [r7, #4]
 800fcee:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fcf0:	4b54      	ldr	r3, [pc, #336]	; (800fe44 <tcp_receive+0x88c>)
 800fcf2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800fcf4:	4b53      	ldr	r3, [pc, #332]	; (800fe44 <tcp_receive+0x88c>)
 800fcf6:	68db      	ldr	r3, [r3, #12]
 800fcf8:	899b      	ldrh	r3, [r3, #12]
 800fcfa:	b29b      	uxth	r3, r3
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7fa fd37 	bl	800a770 <lwip_htons>
 800fd02:	4603      	mov	r3, r0
 800fd04:	b2db      	uxtb	r3, r3
 800fd06:	f003 0302 	and.w	r3, r3, #2
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d005      	beq.n	800fd1a <tcp_receive+0x762>
            inseg.len -= 1;
 800fd0e:	4b4d      	ldr	r3, [pc, #308]	; (800fe44 <tcp_receive+0x88c>)
 800fd10:	891b      	ldrh	r3, [r3, #8]
 800fd12:	3b01      	subs	r3, #1
 800fd14:	b29a      	uxth	r2, r3
 800fd16:	4b4b      	ldr	r3, [pc, #300]	; (800fe44 <tcp_receive+0x88c>)
 800fd18:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800fd1a:	4b4a      	ldr	r3, [pc, #296]	; (800fe44 <tcp_receive+0x88c>)
 800fd1c:	685b      	ldr	r3, [r3, #4]
 800fd1e:	4a49      	ldr	r2, [pc, #292]	; (800fe44 <tcp_receive+0x88c>)
 800fd20:	8912      	ldrh	r2, [r2, #8]
 800fd22:	4611      	mov	r1, r2
 800fd24:	4618      	mov	r0, r3
 800fd26:	f7fc f9c5 	bl	800c0b4 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800fd2a:	4b46      	ldr	r3, [pc, #280]	; (800fe44 <tcp_receive+0x88c>)
 800fd2c:	891c      	ldrh	r4, [r3, #8]
 800fd2e:	4b45      	ldr	r3, [pc, #276]	; (800fe44 <tcp_receive+0x88c>)
 800fd30:	68db      	ldr	r3, [r3, #12]
 800fd32:	899b      	ldrh	r3, [r3, #12]
 800fd34:	b29b      	uxth	r3, r3
 800fd36:	4618      	mov	r0, r3
 800fd38:	f7fa fd1a 	bl	800a770 <lwip_htons>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	b2db      	uxtb	r3, r3
 800fd40:	f003 0303 	and.w	r3, r3, #3
 800fd44:	2b00      	cmp	r3, #0
 800fd46:	d001      	beq.n	800fd4c <tcp_receive+0x794>
 800fd48:	2301      	movs	r3, #1
 800fd4a:	e000      	b.n	800fd4e <tcp_receive+0x796>
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	4423      	add	r3, r4
 800fd50:	b29a      	uxth	r2, r3
 800fd52:	4b3d      	ldr	r3, [pc, #244]	; (800fe48 <tcp_receive+0x890>)
 800fd54:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fd56:	4b3c      	ldr	r3, [pc, #240]	; (800fe48 <tcp_receive+0x890>)
 800fd58:	881b      	ldrh	r3, [r3, #0]
 800fd5a:	461a      	mov	r2, r3
 800fd5c:	4b38      	ldr	r3, [pc, #224]	; (800fe40 <tcp_receive+0x888>)
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	441a      	add	r2, r3
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd66:	6879      	ldr	r1, [r7, #4]
 800fd68:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd6a:	440b      	add	r3, r1
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	d006      	beq.n	800fd7e <tcp_receive+0x7c6>
 800fd70:	4b36      	ldr	r3, [pc, #216]	; (800fe4c <tcp_receive+0x894>)
 800fd72:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800fd76:	4936      	ldr	r1, [pc, #216]	; (800fe50 <tcp_receive+0x898>)
 800fd78:	4836      	ldr	r0, [pc, #216]	; (800fe54 <tcp_receive+0x89c>)
 800fd7a:	f007 f9b1 	bl	80170e0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	f000 80e7 	beq.w	800ff56 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fd88:	4b2e      	ldr	r3, [pc, #184]	; (800fe44 <tcp_receive+0x88c>)
 800fd8a:	68db      	ldr	r3, [r3, #12]
 800fd8c:	899b      	ldrh	r3, [r3, #12]
 800fd8e:	b29b      	uxth	r3, r3
 800fd90:	4618      	mov	r0, r3
 800fd92:	f7fa fced 	bl	800a770 <lwip_htons>
 800fd96:	4603      	mov	r3, r0
 800fd98:	b2db      	uxtb	r3, r3
 800fd9a:	f003 0301 	and.w	r3, r3, #1
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	d010      	beq.n	800fdc4 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800fda2:	e00a      	b.n	800fdba <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fda8:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdae:	681a      	ldr	r2, [r3, #0]
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800fdb4:	68f8      	ldr	r0, [r7, #12]
 800fdb6:	f7fd fd92 	bl	800d8de <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdbe:	2b00      	cmp	r3, #0
 800fdc0:	d1f0      	bne.n	800fda4 <tcp_receive+0x7ec>
 800fdc2:	e0c8      	b.n	800ff56 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fdc8:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800fdca:	e052      	b.n	800fe72 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fdcc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdce:	68db      	ldr	r3, [r3, #12]
 800fdd0:	899b      	ldrh	r3, [r3, #12]
 800fdd2:	b29b      	uxth	r3, r3
 800fdd4:	4618      	mov	r0, r3
 800fdd6:	f7fa fccb 	bl	800a770 <lwip_htons>
 800fdda:	4603      	mov	r3, r0
 800fddc:	b2db      	uxtb	r3, r3
 800fdde:	f003 0301 	and.w	r3, r3, #1
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d03d      	beq.n	800fe62 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800fde6:	4b17      	ldr	r3, [pc, #92]	; (800fe44 <tcp_receive+0x88c>)
 800fde8:	68db      	ldr	r3, [r3, #12]
 800fdea:	899b      	ldrh	r3, [r3, #12]
 800fdec:	b29b      	uxth	r3, r3
 800fdee:	4618      	mov	r0, r3
 800fdf0:	f7fa fcbe 	bl	800a770 <lwip_htons>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	b2db      	uxtb	r3, r3
 800fdf8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d130      	bne.n	800fe62 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800fe00:	4b10      	ldr	r3, [pc, #64]	; (800fe44 <tcp_receive+0x88c>)
 800fe02:	68db      	ldr	r3, [r3, #12]
 800fe04:	899b      	ldrh	r3, [r3, #12]
 800fe06:	b29c      	uxth	r4, r3
 800fe08:	2001      	movs	r0, #1
 800fe0a:	f7fa fcb1 	bl	800a770 <lwip_htons>
 800fe0e:	4603      	mov	r3, r0
 800fe10:	461a      	mov	r2, r3
 800fe12:	4b0c      	ldr	r3, [pc, #48]	; (800fe44 <tcp_receive+0x88c>)
 800fe14:	68db      	ldr	r3, [r3, #12]
 800fe16:	4322      	orrs	r2, r4
 800fe18:	b292      	uxth	r2, r2
 800fe1a:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800fe1c:	4b09      	ldr	r3, [pc, #36]	; (800fe44 <tcp_receive+0x88c>)
 800fe1e:	891c      	ldrh	r4, [r3, #8]
 800fe20:	4b08      	ldr	r3, [pc, #32]	; (800fe44 <tcp_receive+0x88c>)
 800fe22:	68db      	ldr	r3, [r3, #12]
 800fe24:	899b      	ldrh	r3, [r3, #12]
 800fe26:	b29b      	uxth	r3, r3
 800fe28:	4618      	mov	r0, r3
 800fe2a:	f7fa fca1 	bl	800a770 <lwip_htons>
 800fe2e:	4603      	mov	r3, r0
 800fe30:	b2db      	uxtb	r3, r3
 800fe32:	f003 0303 	and.w	r3, r3, #3
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d00e      	beq.n	800fe58 <tcp_receive+0x8a0>
 800fe3a:	2301      	movs	r3, #1
 800fe3c:	e00d      	b.n	800fe5a <tcp_receive+0x8a2>
 800fe3e:	bf00      	nop
 800fe40:	2000f298 	.word	0x2000f298
 800fe44:	2000f278 	.word	0x2000f278
 800fe48:	2000f2a2 	.word	0x2000f2a2
 800fe4c:	08019420 	.word	0x08019420
 800fe50:	080197c8 	.word	0x080197c8
 800fe54:	0801946c 	.word	0x0801946c
 800fe58:	2300      	movs	r3, #0
 800fe5a:	4423      	add	r3, r4
 800fe5c:	b29a      	uxth	r2, r3
 800fe5e:	4b98      	ldr	r3, [pc, #608]	; (80100c0 <tcp_receive+0xb08>)
 800fe60:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800fe62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe64:	613b      	str	r3, [r7, #16]
              next = next->next;
 800fe66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800fe6c:	6938      	ldr	r0, [r7, #16]
 800fe6e:	f7fd fd36 	bl	800d8de <tcp_seg_free>
            while (next &&
 800fe72:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d00e      	beq.n	800fe96 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800fe78:	4b91      	ldr	r3, [pc, #580]	; (80100c0 <tcp_receive+0xb08>)
 800fe7a:	881b      	ldrh	r3, [r3, #0]
 800fe7c:	461a      	mov	r2, r3
 800fe7e:	4b91      	ldr	r3, [pc, #580]	; (80100c4 <tcp_receive+0xb0c>)
 800fe80:	681b      	ldr	r3, [r3, #0]
 800fe82:	441a      	add	r2, r3
 800fe84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe86:	68db      	ldr	r3, [r3, #12]
 800fe88:	685b      	ldr	r3, [r3, #4]
 800fe8a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fe8c:	8909      	ldrh	r1, [r1, #8]
 800fe8e:	440b      	add	r3, r1
 800fe90:	1ad3      	subs	r3, r2, r3
            while (next &&
 800fe92:	2b00      	cmp	r3, #0
 800fe94:	da9a      	bge.n	800fdcc <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800fe96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d059      	beq.n	800ff50 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800fe9c:	4b88      	ldr	r3, [pc, #544]	; (80100c0 <tcp_receive+0xb08>)
 800fe9e:	881b      	ldrh	r3, [r3, #0]
 800fea0:	461a      	mov	r2, r3
 800fea2:	4b88      	ldr	r3, [pc, #544]	; (80100c4 <tcp_receive+0xb0c>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	441a      	add	r2, r3
 800fea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feaa:	68db      	ldr	r3, [r3, #12]
 800feac:	685b      	ldr	r3, [r3, #4]
 800feae:	1ad3      	subs	r3, r2, r3
            if (next &&
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	dd4d      	ble.n	800ff50 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800feb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800feb6:	68db      	ldr	r3, [r3, #12]
 800feb8:	685b      	ldr	r3, [r3, #4]
 800feba:	b29a      	uxth	r2, r3
 800febc:	4b81      	ldr	r3, [pc, #516]	; (80100c4 <tcp_receive+0xb0c>)
 800febe:	681b      	ldr	r3, [r3, #0]
 800fec0:	b29b      	uxth	r3, r3
 800fec2:	1ad3      	subs	r3, r2, r3
 800fec4:	b29a      	uxth	r2, r3
 800fec6:	4b80      	ldr	r3, [pc, #512]	; (80100c8 <tcp_receive+0xb10>)
 800fec8:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800feca:	4b7f      	ldr	r3, [pc, #508]	; (80100c8 <tcp_receive+0xb10>)
 800fecc:	68db      	ldr	r3, [r3, #12]
 800fece:	899b      	ldrh	r3, [r3, #12]
 800fed0:	b29b      	uxth	r3, r3
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fa fc4c 	bl	800a770 <lwip_htons>
 800fed8:	4603      	mov	r3, r0
 800feda:	b2db      	uxtb	r3, r3
 800fedc:	f003 0302 	and.w	r3, r3, #2
 800fee0:	2b00      	cmp	r3, #0
 800fee2:	d005      	beq.n	800fef0 <tcp_receive+0x938>
                inseg.len -= 1;
 800fee4:	4b78      	ldr	r3, [pc, #480]	; (80100c8 <tcp_receive+0xb10>)
 800fee6:	891b      	ldrh	r3, [r3, #8]
 800fee8:	3b01      	subs	r3, #1
 800feea:	b29a      	uxth	r2, r3
 800feec:	4b76      	ldr	r3, [pc, #472]	; (80100c8 <tcp_receive+0xb10>)
 800feee:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800fef0:	4b75      	ldr	r3, [pc, #468]	; (80100c8 <tcp_receive+0xb10>)
 800fef2:	685b      	ldr	r3, [r3, #4]
 800fef4:	4a74      	ldr	r2, [pc, #464]	; (80100c8 <tcp_receive+0xb10>)
 800fef6:	8912      	ldrh	r2, [r2, #8]
 800fef8:	4611      	mov	r1, r2
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fc f8da 	bl	800c0b4 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800ff00:	4b71      	ldr	r3, [pc, #452]	; (80100c8 <tcp_receive+0xb10>)
 800ff02:	891c      	ldrh	r4, [r3, #8]
 800ff04:	4b70      	ldr	r3, [pc, #448]	; (80100c8 <tcp_receive+0xb10>)
 800ff06:	68db      	ldr	r3, [r3, #12]
 800ff08:	899b      	ldrh	r3, [r3, #12]
 800ff0a:	b29b      	uxth	r3, r3
 800ff0c:	4618      	mov	r0, r3
 800ff0e:	f7fa fc2f 	bl	800a770 <lwip_htons>
 800ff12:	4603      	mov	r3, r0
 800ff14:	b2db      	uxtb	r3, r3
 800ff16:	f003 0303 	and.w	r3, r3, #3
 800ff1a:	2b00      	cmp	r3, #0
 800ff1c:	d001      	beq.n	800ff22 <tcp_receive+0x96a>
 800ff1e:	2301      	movs	r3, #1
 800ff20:	e000      	b.n	800ff24 <tcp_receive+0x96c>
 800ff22:	2300      	movs	r3, #0
 800ff24:	4423      	add	r3, r4
 800ff26:	b29a      	uxth	r2, r3
 800ff28:	4b65      	ldr	r3, [pc, #404]	; (80100c0 <tcp_receive+0xb08>)
 800ff2a:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800ff2c:	4b64      	ldr	r3, [pc, #400]	; (80100c0 <tcp_receive+0xb08>)
 800ff2e:	881b      	ldrh	r3, [r3, #0]
 800ff30:	461a      	mov	r2, r3
 800ff32:	4b64      	ldr	r3, [pc, #400]	; (80100c4 <tcp_receive+0xb0c>)
 800ff34:	681b      	ldr	r3, [r3, #0]
 800ff36:	441a      	add	r2, r3
 800ff38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff3a:	68db      	ldr	r3, [r3, #12]
 800ff3c:	685b      	ldr	r3, [r3, #4]
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d006      	beq.n	800ff50 <tcp_receive+0x998>
 800ff42:	4b62      	ldr	r3, [pc, #392]	; (80100cc <tcp_receive+0xb14>)
 800ff44:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800ff48:	4961      	ldr	r1, [pc, #388]	; (80100d0 <tcp_receive+0xb18>)
 800ff4a:	4862      	ldr	r0, [pc, #392]	; (80100d4 <tcp_receive+0xb1c>)
 800ff4c:	f007 f8c8 	bl	80170e0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800ff54:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800ff56:	4b5a      	ldr	r3, [pc, #360]	; (80100c0 <tcp_receive+0xb08>)
 800ff58:	881b      	ldrh	r3, [r3, #0]
 800ff5a:	461a      	mov	r2, r3
 800ff5c:	4b59      	ldr	r3, [pc, #356]	; (80100c4 <tcp_receive+0xb0c>)
 800ff5e:	681b      	ldr	r3, [r3, #0]
 800ff60:	441a      	add	r2, r3
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ff6a:	4b55      	ldr	r3, [pc, #340]	; (80100c0 <tcp_receive+0xb08>)
 800ff6c:	881b      	ldrh	r3, [r3, #0]
 800ff6e:	429a      	cmp	r2, r3
 800ff70:	d206      	bcs.n	800ff80 <tcp_receive+0x9c8>
 800ff72:	4b56      	ldr	r3, [pc, #344]	; (80100cc <tcp_receive+0xb14>)
 800ff74:	f240 6207 	movw	r2, #1543	; 0x607
 800ff78:	4957      	ldr	r1, [pc, #348]	; (80100d8 <tcp_receive+0xb20>)
 800ff7a:	4856      	ldr	r0, [pc, #344]	; (80100d4 <tcp_receive+0xb1c>)
 800ff7c:	f007 f8b0 	bl	80170e0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800ff84:	4b4e      	ldr	r3, [pc, #312]	; (80100c0 <tcp_receive+0xb08>)
 800ff86:	881b      	ldrh	r3, [r3, #0]
 800ff88:	1ad3      	subs	r3, r2, r3
 800ff8a:	b29a      	uxth	r2, r3
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800ff90:	6878      	ldr	r0, [r7, #4]
 800ff92:	f7fc ffc5 	bl	800cf20 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800ff96:	4b4c      	ldr	r3, [pc, #304]	; (80100c8 <tcp_receive+0xb10>)
 800ff98:	685b      	ldr	r3, [r3, #4]
 800ff9a:	891b      	ldrh	r3, [r3, #8]
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d006      	beq.n	800ffae <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800ffa0:	4b49      	ldr	r3, [pc, #292]	; (80100c8 <tcp_receive+0xb10>)
 800ffa2:	685b      	ldr	r3, [r3, #4]
 800ffa4:	4a4d      	ldr	r2, [pc, #308]	; (80100dc <tcp_receive+0xb24>)
 800ffa6:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800ffa8:	4b47      	ldr	r3, [pc, #284]	; (80100c8 <tcp_receive+0xb10>)
 800ffaa:	2200      	movs	r2, #0
 800ffac:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ffae:	4b46      	ldr	r3, [pc, #280]	; (80100c8 <tcp_receive+0xb10>)
 800ffb0:	68db      	ldr	r3, [r3, #12]
 800ffb2:	899b      	ldrh	r3, [r3, #12]
 800ffb4:	b29b      	uxth	r3, r3
 800ffb6:	4618      	mov	r0, r3
 800ffb8:	f7fa fbda 	bl	800a770 <lwip_htons>
 800ffbc:	4603      	mov	r3, r0
 800ffbe:	b2db      	uxtb	r3, r3
 800ffc0:	f003 0301 	and.w	r3, r3, #1
 800ffc4:	2b00      	cmp	r3, #0
 800ffc6:	f000 80b8 	beq.w	801013a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800ffca:	4b45      	ldr	r3, [pc, #276]	; (80100e0 <tcp_receive+0xb28>)
 800ffcc:	781b      	ldrb	r3, [r3, #0]
 800ffce:	f043 0320 	orr.w	r3, r3, #32
 800ffd2:	b2da      	uxtb	r2, r3
 800ffd4:	4b42      	ldr	r3, [pc, #264]	; (80100e0 <tcp_receive+0xb28>)
 800ffd6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800ffd8:	e0af      	b.n	801013a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffde:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffe4:	68db      	ldr	r3, [r3, #12]
 800ffe6:	685b      	ldr	r3, [r3, #4]
 800ffe8:	4a36      	ldr	r2, [pc, #216]	; (80100c4 <tcp_receive+0xb0c>)
 800ffea:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800ffec:	68bb      	ldr	r3, [r7, #8]
 800ffee:	891b      	ldrh	r3, [r3, #8]
 800fff0:	461c      	mov	r4, r3
 800fff2:	68bb      	ldr	r3, [r7, #8]
 800fff4:	68db      	ldr	r3, [r3, #12]
 800fff6:	899b      	ldrh	r3, [r3, #12]
 800fff8:	b29b      	uxth	r3, r3
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7fa fbb8 	bl	800a770 <lwip_htons>
 8010000:	4603      	mov	r3, r0
 8010002:	b2db      	uxtb	r3, r3
 8010004:	f003 0303 	and.w	r3, r3, #3
 8010008:	2b00      	cmp	r3, #0
 801000a:	d001      	beq.n	8010010 <tcp_receive+0xa58>
 801000c:	2301      	movs	r3, #1
 801000e:	e000      	b.n	8010012 <tcp_receive+0xa5a>
 8010010:	2300      	movs	r3, #0
 8010012:	191a      	adds	r2, r3, r4
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010018:	441a      	add	r2, r3
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801001e:	687b      	ldr	r3, [r7, #4]
 8010020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010022:	461c      	mov	r4, r3
 8010024:	68bb      	ldr	r3, [r7, #8]
 8010026:	891b      	ldrh	r3, [r3, #8]
 8010028:	461d      	mov	r5, r3
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	68db      	ldr	r3, [r3, #12]
 801002e:	899b      	ldrh	r3, [r3, #12]
 8010030:	b29b      	uxth	r3, r3
 8010032:	4618      	mov	r0, r3
 8010034:	f7fa fb9c 	bl	800a770 <lwip_htons>
 8010038:	4603      	mov	r3, r0
 801003a:	b2db      	uxtb	r3, r3
 801003c:	f003 0303 	and.w	r3, r3, #3
 8010040:	2b00      	cmp	r3, #0
 8010042:	d001      	beq.n	8010048 <tcp_receive+0xa90>
 8010044:	2301      	movs	r3, #1
 8010046:	e000      	b.n	801004a <tcp_receive+0xa92>
 8010048:	2300      	movs	r3, #0
 801004a:	442b      	add	r3, r5
 801004c:	429c      	cmp	r4, r3
 801004e:	d206      	bcs.n	801005e <tcp_receive+0xaa6>
 8010050:	4b1e      	ldr	r3, [pc, #120]	; (80100cc <tcp_receive+0xb14>)
 8010052:	f240 622b 	movw	r2, #1579	; 0x62b
 8010056:	4923      	ldr	r1, [pc, #140]	; (80100e4 <tcp_receive+0xb2c>)
 8010058:	481e      	ldr	r0, [pc, #120]	; (80100d4 <tcp_receive+0xb1c>)
 801005a:	f007 f841 	bl	80170e0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801005e:	68bb      	ldr	r3, [r7, #8]
 8010060:	891b      	ldrh	r3, [r3, #8]
 8010062:	461c      	mov	r4, r3
 8010064:	68bb      	ldr	r3, [r7, #8]
 8010066:	68db      	ldr	r3, [r3, #12]
 8010068:	899b      	ldrh	r3, [r3, #12]
 801006a:	b29b      	uxth	r3, r3
 801006c:	4618      	mov	r0, r3
 801006e:	f7fa fb7f 	bl	800a770 <lwip_htons>
 8010072:	4603      	mov	r3, r0
 8010074:	b2db      	uxtb	r3, r3
 8010076:	f003 0303 	and.w	r3, r3, #3
 801007a:	2b00      	cmp	r3, #0
 801007c:	d001      	beq.n	8010082 <tcp_receive+0xaca>
 801007e:	2301      	movs	r3, #1
 8010080:	e000      	b.n	8010084 <tcp_receive+0xacc>
 8010082:	2300      	movs	r3, #0
 8010084:	1919      	adds	r1, r3, r4
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801008a:	b28b      	uxth	r3, r1
 801008c:	1ad3      	subs	r3, r2, r3
 801008e:	b29a      	uxth	r2, r3
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f7fc ff43 	bl	800cf20 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801009a:	68bb      	ldr	r3, [r7, #8]
 801009c:	685b      	ldr	r3, [r3, #4]
 801009e:	891b      	ldrh	r3, [r3, #8]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	d028      	beq.n	80100f6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80100a4:	4b0d      	ldr	r3, [pc, #52]	; (80100dc <tcp_receive+0xb24>)
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	2b00      	cmp	r3, #0
 80100aa:	d01d      	beq.n	80100e8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80100ac:	4b0b      	ldr	r3, [pc, #44]	; (80100dc <tcp_receive+0xb24>)
 80100ae:	681a      	ldr	r2, [r3, #0]
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	685b      	ldr	r3, [r3, #4]
 80100b4:	4619      	mov	r1, r3
 80100b6:	4610      	mov	r0, r2
 80100b8:	f7fc fa50 	bl	800c55c <pbuf_cat>
 80100bc:	e018      	b.n	80100f0 <tcp_receive+0xb38>
 80100be:	bf00      	nop
 80100c0:	2000f2a2 	.word	0x2000f2a2
 80100c4:	2000f298 	.word	0x2000f298
 80100c8:	2000f278 	.word	0x2000f278
 80100cc:	08019420 	.word	0x08019420
 80100d0:	08019800 	.word	0x08019800
 80100d4:	0801946c 	.word	0x0801946c
 80100d8:	0801983c 	.word	0x0801983c
 80100dc:	2000f2a8 	.word	0x2000f2a8
 80100e0:	2000f2a5 	.word	0x2000f2a5
 80100e4:	0801985c 	.word	0x0801985c
            } else {
              recv_data = cseg->p;
 80100e8:	68bb      	ldr	r3, [r7, #8]
 80100ea:	685b      	ldr	r3, [r3, #4]
 80100ec:	4a70      	ldr	r2, [pc, #448]	; (80102b0 <tcp_receive+0xcf8>)
 80100ee:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80100f0:	68bb      	ldr	r3, [r7, #8]
 80100f2:	2200      	movs	r2, #0
 80100f4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	68db      	ldr	r3, [r3, #12]
 80100fa:	899b      	ldrh	r3, [r3, #12]
 80100fc:	b29b      	uxth	r3, r3
 80100fe:	4618      	mov	r0, r3
 8010100:	f7fa fb36 	bl	800a770 <lwip_htons>
 8010104:	4603      	mov	r3, r0
 8010106:	b2db      	uxtb	r3, r3
 8010108:	f003 0301 	and.w	r3, r3, #1
 801010c:	2b00      	cmp	r3, #0
 801010e:	d00d      	beq.n	801012c <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8010110:	4b68      	ldr	r3, [pc, #416]	; (80102b4 <tcp_receive+0xcfc>)
 8010112:	781b      	ldrb	r3, [r3, #0]
 8010114:	f043 0320 	orr.w	r3, r3, #32
 8010118:	b2da      	uxtb	r2, r3
 801011a:	4b66      	ldr	r3, [pc, #408]	; (80102b4 <tcp_receive+0xcfc>)
 801011c:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	7d1b      	ldrb	r3, [r3, #20]
 8010122:	2b04      	cmp	r3, #4
 8010124:	d102      	bne.n	801012c <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8010126:	687b      	ldr	r3, [r7, #4]
 8010128:	2207      	movs	r2, #7
 801012a:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801012c:	68bb      	ldr	r3, [r7, #8]
 801012e:	681a      	ldr	r2, [r3, #0]
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010134:	68b8      	ldr	r0, [r7, #8]
 8010136:	f7fd fbd2 	bl	800d8de <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801013e:	2b00      	cmp	r3, #0
 8010140:	d008      	beq.n	8010154 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010146:	68db      	ldr	r3, [r3, #12]
 8010148:	685a      	ldr	r2, [r3, #4]
 801014a:	687b      	ldr	r3, [r7, #4]
 801014c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801014e:	429a      	cmp	r2, r3
 8010150:	f43f af43 	beq.w	800ffda <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	8b5b      	ldrh	r3, [r3, #26]
 8010158:	f003 0301 	and.w	r3, r3, #1
 801015c:	2b00      	cmp	r3, #0
 801015e:	d00e      	beq.n	801017e <tcp_receive+0xbc6>
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	8b5b      	ldrh	r3, [r3, #26]
 8010164:	f023 0301 	bic.w	r3, r3, #1
 8010168:	b29a      	uxth	r2, r3
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	835a      	strh	r2, [r3, #26]
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	8b5b      	ldrh	r3, [r3, #26]
 8010172:	f043 0302 	orr.w	r3, r3, #2
 8010176:	b29a      	uxth	r2, r3
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801017c:	e188      	b.n	8010490 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801017e:	687b      	ldr	r3, [r7, #4]
 8010180:	8b5b      	ldrh	r3, [r3, #26]
 8010182:	f043 0301 	orr.w	r3, r3, #1
 8010186:	b29a      	uxth	r2, r3
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801018c:	e180      	b.n	8010490 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010192:	2b00      	cmp	r3, #0
 8010194:	d106      	bne.n	80101a4 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010196:	4848      	ldr	r0, [pc, #288]	; (80102b8 <tcp_receive+0xd00>)
 8010198:	f7fd fbba 	bl	800d910 <tcp_seg_copy>
 801019c:	4602      	mov	r2, r0
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	675a      	str	r2, [r3, #116]	; 0x74
 80101a2:	e16d      	b.n	8010480 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80101a4:	2300      	movs	r3, #0
 80101a6:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80101ac:	63bb      	str	r3, [r7, #56]	; 0x38
 80101ae:	e157      	b.n	8010460 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80101b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101b2:	68db      	ldr	r3, [r3, #12]
 80101b4:	685a      	ldr	r2, [r3, #4]
 80101b6:	4b41      	ldr	r3, [pc, #260]	; (80102bc <tcp_receive+0xd04>)
 80101b8:	681b      	ldr	r3, [r3, #0]
 80101ba:	429a      	cmp	r2, r3
 80101bc:	d11d      	bne.n	80101fa <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80101be:	4b3e      	ldr	r3, [pc, #248]	; (80102b8 <tcp_receive+0xd00>)
 80101c0:	891a      	ldrh	r2, [r3, #8]
 80101c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c4:	891b      	ldrh	r3, [r3, #8]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	f240 814f 	bls.w	801046a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80101cc:	483a      	ldr	r0, [pc, #232]	; (80102b8 <tcp_receive+0xd00>)
 80101ce:	f7fd fb9f 	bl	800d910 <tcp_seg_copy>
 80101d2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80101d4:	697b      	ldr	r3, [r7, #20]
 80101d6:	2b00      	cmp	r3, #0
 80101d8:	f000 8149 	beq.w	801046e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80101dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101de:	2b00      	cmp	r3, #0
 80101e0:	d003      	beq.n	80101ea <tcp_receive+0xc32>
                    prev->next = cseg;
 80101e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101e4:	697a      	ldr	r2, [r7, #20]
 80101e6:	601a      	str	r2, [r3, #0]
 80101e8:	e002      	b.n	80101f0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	697a      	ldr	r2, [r7, #20]
 80101ee:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80101f0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80101f2:	6978      	ldr	r0, [r7, #20]
 80101f4:	f7ff f8dc 	bl	800f3b0 <tcp_oos_insert_segment>
                }
                break;
 80101f8:	e139      	b.n	801046e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80101fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d117      	bne.n	8010230 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8010200:	4b2e      	ldr	r3, [pc, #184]	; (80102bc <tcp_receive+0xd04>)
 8010202:	681a      	ldr	r2, [r3, #0]
 8010204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010206:	68db      	ldr	r3, [r3, #12]
 8010208:	685b      	ldr	r3, [r3, #4]
 801020a:	1ad3      	subs	r3, r2, r3
 801020c:	2b00      	cmp	r3, #0
 801020e:	da57      	bge.n	80102c0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010210:	4829      	ldr	r0, [pc, #164]	; (80102b8 <tcp_receive+0xd00>)
 8010212:	f7fd fb7d 	bl	800d910 <tcp_seg_copy>
 8010216:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8010218:	69bb      	ldr	r3, [r7, #24]
 801021a:	2b00      	cmp	r3, #0
 801021c:	f000 8129 	beq.w	8010472 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	69ba      	ldr	r2, [r7, #24]
 8010224:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8010226:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010228:	69b8      	ldr	r0, [r7, #24]
 801022a:	f7ff f8c1 	bl	800f3b0 <tcp_oos_insert_segment>
                  }
                  break;
 801022e:	e120      	b.n	8010472 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8010230:	4b22      	ldr	r3, [pc, #136]	; (80102bc <tcp_receive+0xd04>)
 8010232:	681a      	ldr	r2, [r3, #0]
 8010234:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010236:	68db      	ldr	r3, [r3, #12]
 8010238:	685b      	ldr	r3, [r3, #4]
 801023a:	1ad3      	subs	r3, r2, r3
 801023c:	3b01      	subs	r3, #1
 801023e:	2b00      	cmp	r3, #0
 8010240:	db3e      	blt.n	80102c0 <tcp_receive+0xd08>
 8010242:	4b1e      	ldr	r3, [pc, #120]	; (80102bc <tcp_receive+0xd04>)
 8010244:	681a      	ldr	r2, [r3, #0]
 8010246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010248:	68db      	ldr	r3, [r3, #12]
 801024a:	685b      	ldr	r3, [r3, #4]
 801024c:	1ad3      	subs	r3, r2, r3
 801024e:	3301      	adds	r3, #1
 8010250:	2b00      	cmp	r3, #0
 8010252:	dc35      	bgt.n	80102c0 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010254:	4818      	ldr	r0, [pc, #96]	; (80102b8 <tcp_receive+0xd00>)
 8010256:	f7fd fb5b 	bl	800d910 <tcp_seg_copy>
 801025a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801025c:	69fb      	ldr	r3, [r7, #28]
 801025e:	2b00      	cmp	r3, #0
 8010260:	f000 8109 	beq.w	8010476 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010264:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010266:	68db      	ldr	r3, [r3, #12]
 8010268:	685b      	ldr	r3, [r3, #4]
 801026a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801026c:	8912      	ldrh	r2, [r2, #8]
 801026e:	441a      	add	r2, r3
 8010270:	4b12      	ldr	r3, [pc, #72]	; (80102bc <tcp_receive+0xd04>)
 8010272:	681b      	ldr	r3, [r3, #0]
 8010274:	1ad3      	subs	r3, r2, r3
 8010276:	2b00      	cmp	r3, #0
 8010278:	dd12      	ble.n	80102a0 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801027a:	4b10      	ldr	r3, [pc, #64]	; (80102bc <tcp_receive+0xd04>)
 801027c:	681b      	ldr	r3, [r3, #0]
 801027e:	b29a      	uxth	r2, r3
 8010280:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010282:	68db      	ldr	r3, [r3, #12]
 8010284:	685b      	ldr	r3, [r3, #4]
 8010286:	b29b      	uxth	r3, r3
 8010288:	1ad3      	subs	r3, r2, r3
 801028a:	b29a      	uxth	r2, r3
 801028c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801028e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8010290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010292:	685a      	ldr	r2, [r3, #4]
 8010294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010296:	891b      	ldrh	r3, [r3, #8]
 8010298:	4619      	mov	r1, r3
 801029a:	4610      	mov	r0, r2
 801029c:	f7fb ff0a 	bl	800c0b4 <pbuf_realloc>
                    }
                    prev->next = cseg;
 80102a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102a2:	69fa      	ldr	r2, [r7, #28]
 80102a4:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80102a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80102a8:	69f8      	ldr	r0, [r7, #28]
 80102aa:	f7ff f881 	bl	800f3b0 <tcp_oos_insert_segment>
                  }
                  break;
 80102ae:	e0e2      	b.n	8010476 <tcp_receive+0xebe>
 80102b0:	2000f2a8 	.word	0x2000f2a8
 80102b4:	2000f2a5 	.word	0x2000f2a5
 80102b8:	2000f278 	.word	0x2000f278
 80102bc:	2000f298 	.word	0x2000f298
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80102c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c2:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80102c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	f040 80c6 	bne.w	801045a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80102ce:	4b80      	ldr	r3, [pc, #512]	; (80104d0 <tcp_receive+0xf18>)
 80102d0:	681a      	ldr	r2, [r3, #0]
 80102d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102d4:	68db      	ldr	r3, [r3, #12]
 80102d6:	685b      	ldr	r3, [r3, #4]
 80102d8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80102da:	2b00      	cmp	r3, #0
 80102dc:	f340 80bd 	ble.w	801045a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80102e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102e2:	68db      	ldr	r3, [r3, #12]
 80102e4:	899b      	ldrh	r3, [r3, #12]
 80102e6:	b29b      	uxth	r3, r3
 80102e8:	4618      	mov	r0, r3
 80102ea:	f7fa fa41 	bl	800a770 <lwip_htons>
 80102ee:	4603      	mov	r3, r0
 80102f0:	b2db      	uxtb	r3, r3
 80102f2:	f003 0301 	and.w	r3, r3, #1
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	f040 80bf 	bne.w	801047a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80102fc:	4875      	ldr	r0, [pc, #468]	; (80104d4 <tcp_receive+0xf1c>)
 80102fe:	f7fd fb07 	bl	800d910 <tcp_seg_copy>
 8010302:	4602      	mov	r2, r0
 8010304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010306:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8010308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801030a:	681b      	ldr	r3, [r3, #0]
 801030c:	2b00      	cmp	r3, #0
 801030e:	f000 80b6 	beq.w	801047e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8010312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010314:	68db      	ldr	r3, [r3, #12]
 8010316:	685b      	ldr	r3, [r3, #4]
 8010318:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801031a:	8912      	ldrh	r2, [r2, #8]
 801031c:	441a      	add	r2, r3
 801031e:	4b6c      	ldr	r3, [pc, #432]	; (80104d0 <tcp_receive+0xf18>)
 8010320:	681b      	ldr	r3, [r3, #0]
 8010322:	1ad3      	subs	r3, r2, r3
 8010324:	2b00      	cmp	r3, #0
 8010326:	dd12      	ble.n	801034e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8010328:	4b69      	ldr	r3, [pc, #420]	; (80104d0 <tcp_receive+0xf18>)
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	b29a      	uxth	r2, r3
 801032e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010330:	68db      	ldr	r3, [r3, #12]
 8010332:	685b      	ldr	r3, [r3, #4]
 8010334:	b29b      	uxth	r3, r3
 8010336:	1ad3      	subs	r3, r2, r3
 8010338:	b29a      	uxth	r2, r3
 801033a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801033c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801033e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010340:	685a      	ldr	r2, [r3, #4]
 8010342:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010344:	891b      	ldrh	r3, [r3, #8]
 8010346:	4619      	mov	r1, r3
 8010348:	4610      	mov	r0, r2
 801034a:	f7fb feb3 	bl	800c0b4 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801034e:	4b62      	ldr	r3, [pc, #392]	; (80104d8 <tcp_receive+0xf20>)
 8010350:	881b      	ldrh	r3, [r3, #0]
 8010352:	461a      	mov	r2, r3
 8010354:	4b5e      	ldr	r3, [pc, #376]	; (80104d0 <tcp_receive+0xf18>)
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	441a      	add	r2, r3
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801035e:	6879      	ldr	r1, [r7, #4]
 8010360:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010362:	440b      	add	r3, r1
 8010364:	1ad3      	subs	r3, r2, r3
 8010366:	2b00      	cmp	r3, #0
 8010368:	f340 8089 	ble.w	801047e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801036c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	68db      	ldr	r3, [r3, #12]
 8010372:	899b      	ldrh	r3, [r3, #12]
 8010374:	b29b      	uxth	r3, r3
 8010376:	4618      	mov	r0, r3
 8010378:	f7fa f9fa 	bl	800a770 <lwip_htons>
 801037c:	4603      	mov	r3, r0
 801037e:	b2db      	uxtb	r3, r3
 8010380:	f003 0301 	and.w	r3, r3, #1
 8010384:	2b00      	cmp	r3, #0
 8010386:	d022      	beq.n	80103ce <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801038a:	681b      	ldr	r3, [r3, #0]
 801038c:	68db      	ldr	r3, [r3, #12]
 801038e:	899b      	ldrh	r3, [r3, #12]
 8010390:	b29b      	uxth	r3, r3
 8010392:	b21b      	sxth	r3, r3
 8010394:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010398:	b21c      	sxth	r4, r3
 801039a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801039c:	681b      	ldr	r3, [r3, #0]
 801039e:	68db      	ldr	r3, [r3, #12]
 80103a0:	899b      	ldrh	r3, [r3, #12]
 80103a2:	b29b      	uxth	r3, r3
 80103a4:	4618      	mov	r0, r3
 80103a6:	f7fa f9e3 	bl	800a770 <lwip_htons>
 80103aa:	4603      	mov	r3, r0
 80103ac:	b2db      	uxtb	r3, r3
 80103ae:	b29b      	uxth	r3, r3
 80103b0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80103b4:	b29b      	uxth	r3, r3
 80103b6:	4618      	mov	r0, r3
 80103b8:	f7fa f9da 	bl	800a770 <lwip_htons>
 80103bc:	4603      	mov	r3, r0
 80103be:	b21b      	sxth	r3, r3
 80103c0:	4323      	orrs	r3, r4
 80103c2:	b21a      	sxth	r2, r3
 80103c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	68db      	ldr	r3, [r3, #12]
 80103ca:	b292      	uxth	r2, r2
 80103cc:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103d2:	b29a      	uxth	r2, r3
 80103d4:	687b      	ldr	r3, [r7, #4]
 80103d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80103d8:	4413      	add	r3, r2
 80103da:	b299      	uxth	r1, r3
 80103dc:	4b3c      	ldr	r3, [pc, #240]	; (80104d0 <tcp_receive+0xf18>)
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	b29a      	uxth	r2, r3
 80103e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	1a8a      	subs	r2, r1, r2
 80103e8:	b292      	uxth	r2, r2
 80103ea:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80103ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ee:	681b      	ldr	r3, [r3, #0]
 80103f0:	685a      	ldr	r2, [r3, #4]
 80103f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	891b      	ldrh	r3, [r3, #8]
 80103f8:	4619      	mov	r1, r3
 80103fa:	4610      	mov	r0, r2
 80103fc:	f7fb fe5a 	bl	800c0b4 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010402:	681b      	ldr	r3, [r3, #0]
 8010404:	891c      	ldrh	r4, [r3, #8]
 8010406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	68db      	ldr	r3, [r3, #12]
 801040c:	899b      	ldrh	r3, [r3, #12]
 801040e:	b29b      	uxth	r3, r3
 8010410:	4618      	mov	r0, r3
 8010412:	f7fa f9ad 	bl	800a770 <lwip_htons>
 8010416:	4603      	mov	r3, r0
 8010418:	b2db      	uxtb	r3, r3
 801041a:	f003 0303 	and.w	r3, r3, #3
 801041e:	2b00      	cmp	r3, #0
 8010420:	d001      	beq.n	8010426 <tcp_receive+0xe6e>
 8010422:	2301      	movs	r3, #1
 8010424:	e000      	b.n	8010428 <tcp_receive+0xe70>
 8010426:	2300      	movs	r3, #0
 8010428:	4423      	add	r3, r4
 801042a:	b29a      	uxth	r2, r3
 801042c:	4b2a      	ldr	r3, [pc, #168]	; (80104d8 <tcp_receive+0xf20>)
 801042e:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010430:	4b29      	ldr	r3, [pc, #164]	; (80104d8 <tcp_receive+0xf20>)
 8010432:	881b      	ldrh	r3, [r3, #0]
 8010434:	461a      	mov	r2, r3
 8010436:	4b26      	ldr	r3, [pc, #152]	; (80104d0 <tcp_receive+0xf18>)
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	441a      	add	r2, r3
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010440:	6879      	ldr	r1, [r7, #4]
 8010442:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010444:	440b      	add	r3, r1
 8010446:	429a      	cmp	r2, r3
 8010448:	d019      	beq.n	801047e <tcp_receive+0xec6>
 801044a:	4b24      	ldr	r3, [pc, #144]	; (80104dc <tcp_receive+0xf24>)
 801044c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010450:	4923      	ldr	r1, [pc, #140]	; (80104e0 <tcp_receive+0xf28>)
 8010452:	4824      	ldr	r0, [pc, #144]	; (80104e4 <tcp_receive+0xf2c>)
 8010454:	f006 fe44 	bl	80170e0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010458:	e011      	b.n	801047e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801045a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	63bb      	str	r3, [r7, #56]	; 0x38
 8010460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010462:	2b00      	cmp	r3, #0
 8010464:	f47f aea4 	bne.w	80101b0 <tcp_receive+0xbf8>
 8010468:	e00a      	b.n	8010480 <tcp_receive+0xec8>
                break;
 801046a:	bf00      	nop
 801046c:	e008      	b.n	8010480 <tcp_receive+0xec8>
                break;
 801046e:	bf00      	nop
 8010470:	e006      	b.n	8010480 <tcp_receive+0xec8>
                  break;
 8010472:	bf00      	nop
 8010474:	e004      	b.n	8010480 <tcp_receive+0xec8>
                  break;
 8010476:	bf00      	nop
 8010478:	e002      	b.n	8010480 <tcp_receive+0xec8>
                  break;
 801047a:	bf00      	nop
 801047c:	e000      	b.n	8010480 <tcp_receive+0xec8>
                break;
 801047e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010480:	6878      	ldr	r0, [r7, #4]
 8010482:	f001 fa33 	bl	80118ec <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010486:	e003      	b.n	8010490 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010488:	6878      	ldr	r0, [r7, #4]
 801048a:	f001 fa2f 	bl	80118ec <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801048e:	e01a      	b.n	80104c6 <tcp_receive+0xf0e>
 8010490:	e019      	b.n	80104c6 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010492:	4b0f      	ldr	r3, [pc, #60]	; (80104d0 <tcp_receive+0xf18>)
 8010494:	681a      	ldr	r2, [r3, #0]
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801049a:	1ad3      	subs	r3, r2, r3
 801049c:	2b00      	cmp	r3, #0
 801049e:	db0a      	blt.n	80104b6 <tcp_receive+0xefe>
 80104a0:	4b0b      	ldr	r3, [pc, #44]	; (80104d0 <tcp_receive+0xf18>)
 80104a2:	681a      	ldr	r2, [r3, #0]
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104a8:	6879      	ldr	r1, [r7, #4]
 80104aa:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80104ac:	440b      	add	r3, r1
 80104ae:	1ad3      	subs	r3, r2, r3
 80104b0:	3301      	adds	r3, #1
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	dd07      	ble.n	80104c6 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	8b5b      	ldrh	r3, [r3, #26]
 80104ba:	f043 0302 	orr.w	r3, r3, #2
 80104be:	b29a      	uxth	r2, r3
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80104c4:	e7ff      	b.n	80104c6 <tcp_receive+0xf0e>
 80104c6:	bf00      	nop
 80104c8:	3750      	adds	r7, #80	; 0x50
 80104ca:	46bd      	mov	sp, r7
 80104cc:	bdb0      	pop	{r4, r5, r7, pc}
 80104ce:	bf00      	nop
 80104d0:	2000f298 	.word	0x2000f298
 80104d4:	2000f278 	.word	0x2000f278
 80104d8:	2000f2a2 	.word	0x2000f2a2
 80104dc:	08019420 	.word	0x08019420
 80104e0:	080197c8 	.word	0x080197c8
 80104e4:	0801946c 	.word	0x0801946c

080104e8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80104e8:	b480      	push	{r7}
 80104ea:	b083      	sub	sp, #12
 80104ec:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80104ee:	4b15      	ldr	r3, [pc, #84]	; (8010544 <tcp_get_next_optbyte+0x5c>)
 80104f0:	881b      	ldrh	r3, [r3, #0]
 80104f2:	1c5a      	adds	r2, r3, #1
 80104f4:	b291      	uxth	r1, r2
 80104f6:	4a13      	ldr	r2, [pc, #76]	; (8010544 <tcp_get_next_optbyte+0x5c>)
 80104f8:	8011      	strh	r1, [r2, #0]
 80104fa:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80104fc:	4b12      	ldr	r3, [pc, #72]	; (8010548 <tcp_get_next_optbyte+0x60>)
 80104fe:	681b      	ldr	r3, [r3, #0]
 8010500:	2b00      	cmp	r3, #0
 8010502:	d004      	beq.n	801050e <tcp_get_next_optbyte+0x26>
 8010504:	4b11      	ldr	r3, [pc, #68]	; (801054c <tcp_get_next_optbyte+0x64>)
 8010506:	881b      	ldrh	r3, [r3, #0]
 8010508:	88fa      	ldrh	r2, [r7, #6]
 801050a:	429a      	cmp	r2, r3
 801050c:	d208      	bcs.n	8010520 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801050e:	4b10      	ldr	r3, [pc, #64]	; (8010550 <tcp_get_next_optbyte+0x68>)
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	3314      	adds	r3, #20
 8010514:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010516:	88fb      	ldrh	r3, [r7, #6]
 8010518:	683a      	ldr	r2, [r7, #0]
 801051a:	4413      	add	r3, r2
 801051c:	781b      	ldrb	r3, [r3, #0]
 801051e:	e00b      	b.n	8010538 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010520:	88fb      	ldrh	r3, [r7, #6]
 8010522:	b2da      	uxtb	r2, r3
 8010524:	4b09      	ldr	r3, [pc, #36]	; (801054c <tcp_get_next_optbyte+0x64>)
 8010526:	881b      	ldrh	r3, [r3, #0]
 8010528:	b2db      	uxtb	r3, r3
 801052a:	1ad3      	subs	r3, r2, r3
 801052c:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801052e:	4b06      	ldr	r3, [pc, #24]	; (8010548 <tcp_get_next_optbyte+0x60>)
 8010530:	681a      	ldr	r2, [r3, #0]
 8010532:	797b      	ldrb	r3, [r7, #5]
 8010534:	4413      	add	r3, r2
 8010536:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010538:	4618      	mov	r0, r3
 801053a:	370c      	adds	r7, #12
 801053c:	46bd      	mov	sp, r7
 801053e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010542:	4770      	bx	lr
 8010544:	2000f294 	.word	0x2000f294
 8010548:	2000f290 	.word	0x2000f290
 801054c:	2000f28e 	.word	0x2000f28e
 8010550:	2000f288 	.word	0x2000f288

08010554 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010554:	b580      	push	{r7, lr}
 8010556:	b084      	sub	sp, #16
 8010558:	af00      	add	r7, sp, #0
 801055a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2b00      	cmp	r3, #0
 8010560:	d106      	bne.n	8010570 <tcp_parseopt+0x1c>
 8010562:	4b32      	ldr	r3, [pc, #200]	; (801062c <tcp_parseopt+0xd8>)
 8010564:	f240 727d 	movw	r2, #1917	; 0x77d
 8010568:	4931      	ldr	r1, [pc, #196]	; (8010630 <tcp_parseopt+0xdc>)
 801056a:	4832      	ldr	r0, [pc, #200]	; (8010634 <tcp_parseopt+0xe0>)
 801056c:	f006 fdb8 	bl	80170e0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010570:	4b31      	ldr	r3, [pc, #196]	; (8010638 <tcp_parseopt+0xe4>)
 8010572:	881b      	ldrh	r3, [r3, #0]
 8010574:	2b00      	cmp	r3, #0
 8010576:	d055      	beq.n	8010624 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010578:	4b30      	ldr	r3, [pc, #192]	; (801063c <tcp_parseopt+0xe8>)
 801057a:	2200      	movs	r2, #0
 801057c:	801a      	strh	r2, [r3, #0]
 801057e:	e045      	b.n	801060c <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010580:	f7ff ffb2 	bl	80104e8 <tcp_get_next_optbyte>
 8010584:	4603      	mov	r3, r0
 8010586:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010588:	7bfb      	ldrb	r3, [r7, #15]
 801058a:	2b02      	cmp	r3, #2
 801058c:	d006      	beq.n	801059c <tcp_parseopt+0x48>
 801058e:	2b02      	cmp	r3, #2
 8010590:	dc2b      	bgt.n	80105ea <tcp_parseopt+0x96>
 8010592:	2b00      	cmp	r3, #0
 8010594:	d041      	beq.n	801061a <tcp_parseopt+0xc6>
 8010596:	2b01      	cmp	r3, #1
 8010598:	d127      	bne.n	80105ea <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801059a:	e037      	b.n	801060c <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801059c:	f7ff ffa4 	bl	80104e8 <tcp_get_next_optbyte>
 80105a0:	4603      	mov	r3, r0
 80105a2:	2b04      	cmp	r3, #4
 80105a4:	d13b      	bne.n	801061e <tcp_parseopt+0xca>
 80105a6:	4b25      	ldr	r3, [pc, #148]	; (801063c <tcp_parseopt+0xe8>)
 80105a8:	881b      	ldrh	r3, [r3, #0]
 80105aa:	3301      	adds	r3, #1
 80105ac:	4a22      	ldr	r2, [pc, #136]	; (8010638 <tcp_parseopt+0xe4>)
 80105ae:	8812      	ldrh	r2, [r2, #0]
 80105b0:	4293      	cmp	r3, r2
 80105b2:	da34      	bge.n	801061e <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80105b4:	f7ff ff98 	bl	80104e8 <tcp_get_next_optbyte>
 80105b8:	4603      	mov	r3, r0
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	021b      	lsls	r3, r3, #8
 80105be:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80105c0:	f7ff ff92 	bl	80104e8 <tcp_get_next_optbyte>
 80105c4:	4603      	mov	r3, r0
 80105c6:	b29a      	uxth	r2, r3
 80105c8:	89bb      	ldrh	r3, [r7, #12]
 80105ca:	4313      	orrs	r3, r2
 80105cc:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80105ce:	89bb      	ldrh	r3, [r7, #12]
 80105d0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80105d4:	d804      	bhi.n	80105e0 <tcp_parseopt+0x8c>
 80105d6:	89bb      	ldrh	r3, [r7, #12]
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d001      	beq.n	80105e0 <tcp_parseopt+0x8c>
 80105dc:	89ba      	ldrh	r2, [r7, #12]
 80105de:	e001      	b.n	80105e4 <tcp_parseopt+0x90>
 80105e0:	f44f 7206 	mov.w	r2, #536	; 0x218
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80105e8:	e010      	b.n	801060c <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80105ea:	f7ff ff7d 	bl	80104e8 <tcp_get_next_optbyte>
 80105ee:	4603      	mov	r3, r0
 80105f0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80105f2:	7afb      	ldrb	r3, [r7, #11]
 80105f4:	2b01      	cmp	r3, #1
 80105f6:	d914      	bls.n	8010622 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 80105f8:	7afb      	ldrb	r3, [r7, #11]
 80105fa:	b29a      	uxth	r2, r3
 80105fc:	4b0f      	ldr	r3, [pc, #60]	; (801063c <tcp_parseopt+0xe8>)
 80105fe:	881b      	ldrh	r3, [r3, #0]
 8010600:	4413      	add	r3, r2
 8010602:	b29b      	uxth	r3, r3
 8010604:	3b02      	subs	r3, #2
 8010606:	b29a      	uxth	r2, r3
 8010608:	4b0c      	ldr	r3, [pc, #48]	; (801063c <tcp_parseopt+0xe8>)
 801060a:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801060c:	4b0b      	ldr	r3, [pc, #44]	; (801063c <tcp_parseopt+0xe8>)
 801060e:	881a      	ldrh	r2, [r3, #0]
 8010610:	4b09      	ldr	r3, [pc, #36]	; (8010638 <tcp_parseopt+0xe4>)
 8010612:	881b      	ldrh	r3, [r3, #0]
 8010614:	429a      	cmp	r2, r3
 8010616:	d3b3      	bcc.n	8010580 <tcp_parseopt+0x2c>
 8010618:	e004      	b.n	8010624 <tcp_parseopt+0xd0>
          return;
 801061a:	bf00      	nop
 801061c:	e002      	b.n	8010624 <tcp_parseopt+0xd0>
            return;
 801061e:	bf00      	nop
 8010620:	e000      	b.n	8010624 <tcp_parseopt+0xd0>
            return;
 8010622:	bf00      	nop
      }
    }
  }
}
 8010624:	3710      	adds	r7, #16
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	08019420 	.word	0x08019420
 8010630:	08019884 	.word	0x08019884
 8010634:	0801946c 	.word	0x0801946c
 8010638:	2000f28c 	.word	0x2000f28c
 801063c:	2000f294 	.word	0x2000f294

08010640 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010640:	b480      	push	{r7}
 8010642:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010644:	4b05      	ldr	r3, [pc, #20]	; (801065c <tcp_trigger_input_pcb_close+0x1c>)
 8010646:	781b      	ldrb	r3, [r3, #0]
 8010648:	f043 0310 	orr.w	r3, r3, #16
 801064c:	b2da      	uxtb	r2, r3
 801064e:	4b03      	ldr	r3, [pc, #12]	; (801065c <tcp_trigger_input_pcb_close+0x1c>)
 8010650:	701a      	strb	r2, [r3, #0]
}
 8010652:	bf00      	nop
 8010654:	46bd      	mov	sp, r7
 8010656:	f85d 7b04 	ldr.w	r7, [sp], #4
 801065a:	4770      	bx	lr
 801065c:	2000f2a5 	.word	0x2000f2a5

08010660 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010660:	b580      	push	{r7, lr}
 8010662:	b084      	sub	sp, #16
 8010664:	af00      	add	r7, sp, #0
 8010666:	60f8      	str	r0, [r7, #12]
 8010668:	60b9      	str	r1, [r7, #8]
 801066a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801066c:	68fb      	ldr	r3, [r7, #12]
 801066e:	2b00      	cmp	r3, #0
 8010670:	d00a      	beq.n	8010688 <tcp_route+0x28>
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	7a1b      	ldrb	r3, [r3, #8]
 8010676:	2b00      	cmp	r3, #0
 8010678:	d006      	beq.n	8010688 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801067a:	68fb      	ldr	r3, [r7, #12]
 801067c:	7a1b      	ldrb	r3, [r3, #8]
 801067e:	4618      	mov	r0, r3
 8010680:	f7fb fae2 	bl	800bc48 <netif_get_by_index>
 8010684:	4603      	mov	r3, r0
 8010686:	e003      	b.n	8010690 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010688:	6878      	ldr	r0, [r7, #4]
 801068a:	f005 f847 	bl	801571c <ip4_route>
 801068e:	4603      	mov	r3, r0
  }
}
 8010690:	4618      	mov	r0, r3
 8010692:	3710      	adds	r7, #16
 8010694:	46bd      	mov	sp, r7
 8010696:	bd80      	pop	{r7, pc}

08010698 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010698:	b590      	push	{r4, r7, lr}
 801069a:	b087      	sub	sp, #28
 801069c:	af00      	add	r7, sp, #0
 801069e:	60f8      	str	r0, [r7, #12]
 80106a0:	60b9      	str	r1, [r7, #8]
 80106a2:	603b      	str	r3, [r7, #0]
 80106a4:	4613      	mov	r3, r2
 80106a6:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80106a8:	68fb      	ldr	r3, [r7, #12]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d105      	bne.n	80106ba <tcp_create_segment+0x22>
 80106ae:	4b44      	ldr	r3, [pc, #272]	; (80107c0 <tcp_create_segment+0x128>)
 80106b0:	22a3      	movs	r2, #163	; 0xa3
 80106b2:	4944      	ldr	r1, [pc, #272]	; (80107c4 <tcp_create_segment+0x12c>)
 80106b4:	4844      	ldr	r0, [pc, #272]	; (80107c8 <tcp_create_segment+0x130>)
 80106b6:	f006 fd13 	bl	80170e0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80106ba:	68bb      	ldr	r3, [r7, #8]
 80106bc:	2b00      	cmp	r3, #0
 80106be:	d105      	bne.n	80106cc <tcp_create_segment+0x34>
 80106c0:	4b3f      	ldr	r3, [pc, #252]	; (80107c0 <tcp_create_segment+0x128>)
 80106c2:	22a4      	movs	r2, #164	; 0xa4
 80106c4:	4941      	ldr	r1, [pc, #260]	; (80107cc <tcp_create_segment+0x134>)
 80106c6:	4840      	ldr	r0, [pc, #256]	; (80107c8 <tcp_create_segment+0x130>)
 80106c8:	f006 fd0a 	bl	80170e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80106cc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80106d0:	009b      	lsls	r3, r3, #2
 80106d2:	b2db      	uxtb	r3, r3
 80106d4:	f003 0304 	and.w	r3, r3, #4
 80106d8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80106da:	2003      	movs	r0, #3
 80106dc:	f7fa fd20 	bl	800b120 <memp_malloc>
 80106e0:	6138      	str	r0, [r7, #16]
 80106e2:	693b      	ldr	r3, [r7, #16]
 80106e4:	2b00      	cmp	r3, #0
 80106e6:	d104      	bne.n	80106f2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80106e8:	68b8      	ldr	r0, [r7, #8]
 80106ea:	f7fb fe69 	bl	800c3c0 <pbuf_free>
    return NULL;
 80106ee:	2300      	movs	r3, #0
 80106f0:	e061      	b.n	80107b6 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80106f2:	693b      	ldr	r3, [r7, #16]
 80106f4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80106f8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 80106fa:	693b      	ldr	r3, [r7, #16]
 80106fc:	2200      	movs	r2, #0
 80106fe:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010700:	693b      	ldr	r3, [r7, #16]
 8010702:	68ba      	ldr	r2, [r7, #8]
 8010704:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	891a      	ldrh	r2, [r3, #8]
 801070a:	7dfb      	ldrb	r3, [r7, #23]
 801070c:	b29b      	uxth	r3, r3
 801070e:	429a      	cmp	r2, r3
 8010710:	d205      	bcs.n	801071e <tcp_create_segment+0x86>
 8010712:	4b2b      	ldr	r3, [pc, #172]	; (80107c0 <tcp_create_segment+0x128>)
 8010714:	22b0      	movs	r2, #176	; 0xb0
 8010716:	492e      	ldr	r1, [pc, #184]	; (80107d0 <tcp_create_segment+0x138>)
 8010718:	482b      	ldr	r0, [pc, #172]	; (80107c8 <tcp_create_segment+0x130>)
 801071a:	f006 fce1 	bl	80170e0 <iprintf>
  seg->len = p->tot_len - optlen;
 801071e:	68bb      	ldr	r3, [r7, #8]
 8010720:	891a      	ldrh	r2, [r3, #8]
 8010722:	7dfb      	ldrb	r3, [r7, #23]
 8010724:	b29b      	uxth	r3, r3
 8010726:	1ad3      	subs	r3, r2, r3
 8010728:	b29a      	uxth	r2, r3
 801072a:	693b      	ldr	r3, [r7, #16]
 801072c:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801072e:	2114      	movs	r1, #20
 8010730:	68b8      	ldr	r0, [r7, #8]
 8010732:	f7fb fdaf 	bl	800c294 <pbuf_add_header>
 8010736:	4603      	mov	r3, r0
 8010738:	2b00      	cmp	r3, #0
 801073a:	d004      	beq.n	8010746 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801073c:	6938      	ldr	r0, [r7, #16]
 801073e:	f7fd f8ce 	bl	800d8de <tcp_seg_free>
    return NULL;
 8010742:	2300      	movs	r3, #0
 8010744:	e037      	b.n	80107b6 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010746:	693b      	ldr	r3, [r7, #16]
 8010748:	685b      	ldr	r3, [r3, #4]
 801074a:	685a      	ldr	r2, [r3, #4]
 801074c:	693b      	ldr	r3, [r7, #16]
 801074e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	8ada      	ldrh	r2, [r3, #22]
 8010754:	693b      	ldr	r3, [r7, #16]
 8010756:	68dc      	ldr	r4, [r3, #12]
 8010758:	4610      	mov	r0, r2
 801075a:	f7fa f809 	bl	800a770 <lwip_htons>
 801075e:	4603      	mov	r3, r0
 8010760:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010762:	68fb      	ldr	r3, [r7, #12]
 8010764:	8b1a      	ldrh	r2, [r3, #24]
 8010766:	693b      	ldr	r3, [r7, #16]
 8010768:	68dc      	ldr	r4, [r3, #12]
 801076a:	4610      	mov	r0, r2
 801076c:	f7fa f800 	bl	800a770 <lwip_htons>
 8010770:	4603      	mov	r3, r0
 8010772:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010774:	693b      	ldr	r3, [r7, #16]
 8010776:	68dc      	ldr	r4, [r3, #12]
 8010778:	6838      	ldr	r0, [r7, #0]
 801077a:	f7fa f80e 	bl	800a79a <lwip_htonl>
 801077e:	4603      	mov	r3, r0
 8010780:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010782:	7dfb      	ldrb	r3, [r7, #23]
 8010784:	089b      	lsrs	r3, r3, #2
 8010786:	b2db      	uxtb	r3, r3
 8010788:	b29b      	uxth	r3, r3
 801078a:	3305      	adds	r3, #5
 801078c:	b29b      	uxth	r3, r3
 801078e:	031b      	lsls	r3, r3, #12
 8010790:	b29a      	uxth	r2, r3
 8010792:	79fb      	ldrb	r3, [r7, #7]
 8010794:	b29b      	uxth	r3, r3
 8010796:	4313      	orrs	r3, r2
 8010798:	b29a      	uxth	r2, r3
 801079a:	693b      	ldr	r3, [r7, #16]
 801079c:	68dc      	ldr	r4, [r3, #12]
 801079e:	4610      	mov	r0, r2
 80107a0:	f7f9 ffe6 	bl	800a770 <lwip_htons>
 80107a4:	4603      	mov	r3, r0
 80107a6:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80107a8:	693b      	ldr	r3, [r7, #16]
 80107aa:	68db      	ldr	r3, [r3, #12]
 80107ac:	2200      	movs	r2, #0
 80107ae:	749a      	strb	r2, [r3, #18]
 80107b0:	2200      	movs	r2, #0
 80107b2:	74da      	strb	r2, [r3, #19]
  return seg;
 80107b4:	693b      	ldr	r3, [r7, #16]
}
 80107b6:	4618      	mov	r0, r3
 80107b8:	371c      	adds	r7, #28
 80107ba:	46bd      	mov	sp, r7
 80107bc:	bd90      	pop	{r4, r7, pc}
 80107be:	bf00      	nop
 80107c0:	080198a0 	.word	0x080198a0
 80107c4:	080198d4 	.word	0x080198d4
 80107c8:	080198f4 	.word	0x080198f4
 80107cc:	0801991c 	.word	0x0801991c
 80107d0:	08019940 	.word	0x08019940

080107d4 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80107d4:	b590      	push	{r4, r7, lr}
 80107d6:	b08b      	sub	sp, #44	; 0x2c
 80107d8:	af02      	add	r7, sp, #8
 80107da:	6078      	str	r0, [r7, #4]
 80107dc:	460b      	mov	r3, r1
 80107de:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80107e0:	2300      	movs	r3, #0
 80107e2:	61fb      	str	r3, [r7, #28]
 80107e4:	2300      	movs	r3, #0
 80107e6:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80107e8:	2300      	movs	r3, #0
 80107ea:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d106      	bne.n	8010800 <tcp_split_unsent_seg+0x2c>
 80107f2:	4b95      	ldr	r3, [pc, #596]	; (8010a48 <tcp_split_unsent_seg+0x274>)
 80107f4:	f240 324b 	movw	r2, #843	; 0x34b
 80107f8:	4994      	ldr	r1, [pc, #592]	; (8010a4c <tcp_split_unsent_seg+0x278>)
 80107fa:	4895      	ldr	r0, [pc, #596]	; (8010a50 <tcp_split_unsent_seg+0x27c>)
 80107fc:	f006 fc70 	bl	80170e0 <iprintf>

  useg = pcb->unsent;
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010804:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d102      	bne.n	8010812 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801080c:	f04f 33ff 	mov.w	r3, #4294967295
 8010810:	e116      	b.n	8010a40 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010812:	887b      	ldrh	r3, [r7, #2]
 8010814:	2b00      	cmp	r3, #0
 8010816:	d109      	bne.n	801082c <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8010818:	4b8b      	ldr	r3, [pc, #556]	; (8010a48 <tcp_split_unsent_seg+0x274>)
 801081a:	f240 3253 	movw	r2, #851	; 0x353
 801081e:	498d      	ldr	r1, [pc, #564]	; (8010a54 <tcp_split_unsent_seg+0x280>)
 8010820:	488b      	ldr	r0, [pc, #556]	; (8010a50 <tcp_split_unsent_seg+0x27c>)
 8010822:	f006 fc5d 	bl	80170e0 <iprintf>
    return ERR_VAL;
 8010826:	f06f 0305 	mvn.w	r3, #5
 801082a:	e109      	b.n	8010a40 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801082c:	697b      	ldr	r3, [r7, #20]
 801082e:	891b      	ldrh	r3, [r3, #8]
 8010830:	887a      	ldrh	r2, [r7, #2]
 8010832:	429a      	cmp	r2, r3
 8010834:	d301      	bcc.n	801083a <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8010836:	2300      	movs	r3, #0
 8010838:	e102      	b.n	8010a40 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801083e:	887a      	ldrh	r2, [r7, #2]
 8010840:	429a      	cmp	r2, r3
 8010842:	d906      	bls.n	8010852 <tcp_split_unsent_seg+0x7e>
 8010844:	4b80      	ldr	r3, [pc, #512]	; (8010a48 <tcp_split_unsent_seg+0x274>)
 8010846:	f240 325b 	movw	r2, #859	; 0x35b
 801084a:	4983      	ldr	r1, [pc, #524]	; (8010a58 <tcp_split_unsent_seg+0x284>)
 801084c:	4880      	ldr	r0, [pc, #512]	; (8010a50 <tcp_split_unsent_seg+0x27c>)
 801084e:	f006 fc47 	bl	80170e0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010852:	697b      	ldr	r3, [r7, #20]
 8010854:	891b      	ldrh	r3, [r3, #8]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d106      	bne.n	8010868 <tcp_split_unsent_seg+0x94>
 801085a:	4b7b      	ldr	r3, [pc, #492]	; (8010a48 <tcp_split_unsent_seg+0x274>)
 801085c:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010860:	497e      	ldr	r1, [pc, #504]	; (8010a5c <tcp_split_unsent_seg+0x288>)
 8010862:	487b      	ldr	r0, [pc, #492]	; (8010a50 <tcp_split_unsent_seg+0x27c>)
 8010864:	f006 fc3c 	bl	80170e0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8010868:	697b      	ldr	r3, [r7, #20]
 801086a:	7a9b      	ldrb	r3, [r3, #10]
 801086c:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801086e:	7bfb      	ldrb	r3, [r7, #15]
 8010870:	009b      	lsls	r3, r3, #2
 8010872:	b2db      	uxtb	r3, r3
 8010874:	f003 0304 	and.w	r3, r3, #4
 8010878:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	891a      	ldrh	r2, [r3, #8]
 801087e:	887b      	ldrh	r3, [r7, #2]
 8010880:	1ad3      	subs	r3, r2, r3
 8010882:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010884:	7bbb      	ldrb	r3, [r7, #14]
 8010886:	b29a      	uxth	r2, r3
 8010888:	89bb      	ldrh	r3, [r7, #12]
 801088a:	4413      	add	r3, r2
 801088c:	b29b      	uxth	r3, r3
 801088e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010892:	4619      	mov	r1, r3
 8010894:	2036      	movs	r0, #54	; 0x36
 8010896:	f7fb faaf 	bl	800bdf8 <pbuf_alloc>
 801089a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801089c:	693b      	ldr	r3, [r7, #16]
 801089e:	2b00      	cmp	r3, #0
 80108a0:	f000 80b7 	beq.w	8010a12 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80108a4:	697b      	ldr	r3, [r7, #20]
 80108a6:	685b      	ldr	r3, [r3, #4]
 80108a8:	891a      	ldrh	r2, [r3, #8]
 80108aa:	697b      	ldr	r3, [r7, #20]
 80108ac:	891b      	ldrh	r3, [r3, #8]
 80108ae:	1ad3      	subs	r3, r2, r3
 80108b0:	b29a      	uxth	r2, r3
 80108b2:	887b      	ldrh	r3, [r7, #2]
 80108b4:	4413      	add	r3, r2
 80108b6:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80108b8:	697b      	ldr	r3, [r7, #20]
 80108ba:	6858      	ldr	r0, [r3, #4]
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	685a      	ldr	r2, [r3, #4]
 80108c0:	7bbb      	ldrb	r3, [r7, #14]
 80108c2:	18d1      	adds	r1, r2, r3
 80108c4:	897b      	ldrh	r3, [r7, #10]
 80108c6:	89ba      	ldrh	r2, [r7, #12]
 80108c8:	f7fb ff80 	bl	800c7cc <pbuf_copy_partial>
 80108cc:	4603      	mov	r3, r0
 80108ce:	461a      	mov	r2, r3
 80108d0:	89bb      	ldrh	r3, [r7, #12]
 80108d2:	4293      	cmp	r3, r2
 80108d4:	f040 809f 	bne.w	8010a16 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80108d8:	697b      	ldr	r3, [r7, #20]
 80108da:	68db      	ldr	r3, [r3, #12]
 80108dc:	899b      	ldrh	r3, [r3, #12]
 80108de:	b29b      	uxth	r3, r3
 80108e0:	4618      	mov	r0, r3
 80108e2:	f7f9 ff45 	bl	800a770 <lwip_htons>
 80108e6:	4603      	mov	r3, r0
 80108e8:	b2db      	uxtb	r3, r3
 80108ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80108ee:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80108f0:	2300      	movs	r3, #0
 80108f2:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80108f4:	7efb      	ldrb	r3, [r7, #27]
 80108f6:	f003 0308 	and.w	r3, r3, #8
 80108fa:	2b00      	cmp	r3, #0
 80108fc:	d007      	beq.n	801090e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80108fe:	7efb      	ldrb	r3, [r7, #27]
 8010900:	f023 0308 	bic.w	r3, r3, #8
 8010904:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010906:	7ebb      	ldrb	r3, [r7, #26]
 8010908:	f043 0308 	orr.w	r3, r3, #8
 801090c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801090e:	7efb      	ldrb	r3, [r7, #27]
 8010910:	f003 0301 	and.w	r3, r3, #1
 8010914:	2b00      	cmp	r3, #0
 8010916:	d007      	beq.n	8010928 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010918:	7efb      	ldrb	r3, [r7, #27]
 801091a:	f023 0301 	bic.w	r3, r3, #1
 801091e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010920:	7ebb      	ldrb	r3, [r7, #26]
 8010922:	f043 0301 	orr.w	r3, r3, #1
 8010926:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8010928:	697b      	ldr	r3, [r7, #20]
 801092a:	68db      	ldr	r3, [r3, #12]
 801092c:	685b      	ldr	r3, [r3, #4]
 801092e:	4618      	mov	r0, r3
 8010930:	f7f9 ff33 	bl	800a79a <lwip_htonl>
 8010934:	4602      	mov	r2, r0
 8010936:	887b      	ldrh	r3, [r7, #2]
 8010938:	18d1      	adds	r1, r2, r3
 801093a:	7eba      	ldrb	r2, [r7, #26]
 801093c:	7bfb      	ldrb	r3, [r7, #15]
 801093e:	9300      	str	r3, [sp, #0]
 8010940:	460b      	mov	r3, r1
 8010942:	6939      	ldr	r1, [r7, #16]
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f7ff fea7 	bl	8010698 <tcp_create_segment>
 801094a:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801094c:	69fb      	ldr	r3, [r7, #28]
 801094e:	2b00      	cmp	r3, #0
 8010950:	d063      	beq.n	8010a1a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010952:	697b      	ldr	r3, [r7, #20]
 8010954:	685b      	ldr	r3, [r3, #4]
 8010956:	4618      	mov	r0, r3
 8010958:	f7fb fdc0 	bl	800c4dc <pbuf_clen>
 801095c:	4603      	mov	r3, r0
 801095e:	461a      	mov	r2, r3
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010966:	1a9b      	subs	r3, r3, r2
 8010968:	b29a      	uxth	r2, r3
 801096a:	687b      	ldr	r3, [r7, #4]
 801096c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010970:	697b      	ldr	r3, [r7, #20]
 8010972:	6858      	ldr	r0, [r3, #4]
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	685b      	ldr	r3, [r3, #4]
 8010978:	891a      	ldrh	r2, [r3, #8]
 801097a:	89bb      	ldrh	r3, [r7, #12]
 801097c:	1ad3      	subs	r3, r2, r3
 801097e:	b29b      	uxth	r3, r3
 8010980:	4619      	mov	r1, r3
 8010982:	f7fb fb97 	bl	800c0b4 <pbuf_realloc>
  useg->len -= remainder;
 8010986:	697b      	ldr	r3, [r7, #20]
 8010988:	891a      	ldrh	r2, [r3, #8]
 801098a:	89bb      	ldrh	r3, [r7, #12]
 801098c:	1ad3      	subs	r3, r2, r3
 801098e:	b29a      	uxth	r2, r3
 8010990:	697b      	ldr	r3, [r7, #20]
 8010992:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010994:	697b      	ldr	r3, [r7, #20]
 8010996:	68db      	ldr	r3, [r3, #12]
 8010998:	899b      	ldrh	r3, [r3, #12]
 801099a:	b29c      	uxth	r4, r3
 801099c:	7efb      	ldrb	r3, [r7, #27]
 801099e:	b29b      	uxth	r3, r3
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7f9 fee5 	bl	800a770 <lwip_htons>
 80109a6:	4603      	mov	r3, r0
 80109a8:	461a      	mov	r2, r3
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	68db      	ldr	r3, [r3, #12]
 80109ae:	4322      	orrs	r2, r4
 80109b0:	b292      	uxth	r2, r2
 80109b2:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80109b4:	697b      	ldr	r3, [r7, #20]
 80109b6:	685b      	ldr	r3, [r3, #4]
 80109b8:	4618      	mov	r0, r3
 80109ba:	f7fb fd8f 	bl	800c4dc <pbuf_clen>
 80109be:	4603      	mov	r3, r0
 80109c0:	461a      	mov	r2, r3
 80109c2:	687b      	ldr	r3, [r7, #4]
 80109c4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109c8:	4413      	add	r3, r2
 80109ca:	b29a      	uxth	r2, r3
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80109d2:	69fb      	ldr	r3, [r7, #28]
 80109d4:	685b      	ldr	r3, [r3, #4]
 80109d6:	4618      	mov	r0, r3
 80109d8:	f7fb fd80 	bl	800c4dc <pbuf_clen>
 80109dc:	4603      	mov	r3, r0
 80109de:	461a      	mov	r2, r3
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109e6:	4413      	add	r3, r2
 80109e8:	b29a      	uxth	r2, r3
 80109ea:	687b      	ldr	r3, [r7, #4]
 80109ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 80109f0:	697b      	ldr	r3, [r7, #20]
 80109f2:	681a      	ldr	r2, [r3, #0]
 80109f4:	69fb      	ldr	r3, [r7, #28]
 80109f6:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80109f8:	697b      	ldr	r3, [r7, #20]
 80109fa:	69fa      	ldr	r2, [r7, #28]
 80109fc:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80109fe:	69fb      	ldr	r3, [r7, #28]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d103      	bne.n	8010a0e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010a06:	687b      	ldr	r3, [r7, #4]
 8010a08:	2200      	movs	r2, #0
 8010a0a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	e016      	b.n	8010a40 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010a12:	bf00      	nop
 8010a14:	e002      	b.n	8010a1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010a16:	bf00      	nop
 8010a18:	e000      	b.n	8010a1c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010a1a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010a1c:	69fb      	ldr	r3, [r7, #28]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d006      	beq.n	8010a30 <tcp_split_unsent_seg+0x25c>
 8010a22:	4b09      	ldr	r3, [pc, #36]	; (8010a48 <tcp_split_unsent_seg+0x274>)
 8010a24:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8010a28:	490d      	ldr	r1, [pc, #52]	; (8010a60 <tcp_split_unsent_seg+0x28c>)
 8010a2a:	4809      	ldr	r0, [pc, #36]	; (8010a50 <tcp_split_unsent_seg+0x27c>)
 8010a2c:	f006 fb58 	bl	80170e0 <iprintf>
  if (p != NULL) {
 8010a30:	693b      	ldr	r3, [r7, #16]
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d002      	beq.n	8010a3c <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8010a36:	6938      	ldr	r0, [r7, #16]
 8010a38:	f7fb fcc2 	bl	800c3c0 <pbuf_free>
  }

  return ERR_MEM;
 8010a3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010a40:	4618      	mov	r0, r3
 8010a42:	3724      	adds	r7, #36	; 0x24
 8010a44:	46bd      	mov	sp, r7
 8010a46:	bd90      	pop	{r4, r7, pc}
 8010a48:	080198a0 	.word	0x080198a0
 8010a4c:	08019c34 	.word	0x08019c34
 8010a50:	080198f4 	.word	0x080198f4
 8010a54:	08019c58 	.word	0x08019c58
 8010a58:	08019c7c 	.word	0x08019c7c
 8010a5c:	08019c8c 	.word	0x08019c8c
 8010a60:	08019c9c 	.word	0x08019c9c

08010a64 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010a64:	b590      	push	{r4, r7, lr}
 8010a66:	b085      	sub	sp, #20
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d106      	bne.n	8010a80 <tcp_send_fin+0x1c>
 8010a72:	4b21      	ldr	r3, [pc, #132]	; (8010af8 <tcp_send_fin+0x94>)
 8010a74:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8010a78:	4920      	ldr	r1, [pc, #128]	; (8010afc <tcp_send_fin+0x98>)
 8010a7a:	4821      	ldr	r0, [pc, #132]	; (8010b00 <tcp_send_fin+0x9c>)
 8010a7c:	f006 fb30 	bl	80170e0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8010a80:	687b      	ldr	r3, [r7, #4]
 8010a82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d02e      	beq.n	8010ae6 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010a88:	687b      	ldr	r3, [r7, #4]
 8010a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a8c:	60fb      	str	r3, [r7, #12]
 8010a8e:	e002      	b.n	8010a96 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	681b      	ldr	r3, [r3, #0]
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d1f8      	bne.n	8010a90 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8010a9e:	68fb      	ldr	r3, [r7, #12]
 8010aa0:	68db      	ldr	r3, [r3, #12]
 8010aa2:	899b      	ldrh	r3, [r3, #12]
 8010aa4:	b29b      	uxth	r3, r3
 8010aa6:	4618      	mov	r0, r3
 8010aa8:	f7f9 fe62 	bl	800a770 <lwip_htons>
 8010aac:	4603      	mov	r3, r0
 8010aae:	b2db      	uxtb	r3, r3
 8010ab0:	f003 0307 	and.w	r3, r3, #7
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d116      	bne.n	8010ae6 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	68db      	ldr	r3, [r3, #12]
 8010abc:	899b      	ldrh	r3, [r3, #12]
 8010abe:	b29c      	uxth	r4, r3
 8010ac0:	2001      	movs	r0, #1
 8010ac2:	f7f9 fe55 	bl	800a770 <lwip_htons>
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	461a      	mov	r2, r3
 8010aca:	68fb      	ldr	r3, [r7, #12]
 8010acc:	68db      	ldr	r3, [r3, #12]
 8010ace:	4322      	orrs	r2, r4
 8010ad0:	b292      	uxth	r2, r2
 8010ad2:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	8b5b      	ldrh	r3, [r3, #26]
 8010ad8:	f043 0320 	orr.w	r3, r3, #32
 8010adc:	b29a      	uxth	r2, r3
 8010ade:	687b      	ldr	r3, [r7, #4]
 8010ae0:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010ae2:	2300      	movs	r3, #0
 8010ae4:	e004      	b.n	8010af0 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010ae6:	2101      	movs	r1, #1
 8010ae8:	6878      	ldr	r0, [r7, #4]
 8010aea:	f000 f80b 	bl	8010b04 <tcp_enqueue_flags>
 8010aee:	4603      	mov	r3, r0
}
 8010af0:	4618      	mov	r0, r3
 8010af2:	3714      	adds	r7, #20
 8010af4:	46bd      	mov	sp, r7
 8010af6:	bd90      	pop	{r4, r7, pc}
 8010af8:	080198a0 	.word	0x080198a0
 8010afc:	08019ca8 	.word	0x08019ca8
 8010b00:	080198f4 	.word	0x080198f4

08010b04 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b08a      	sub	sp, #40	; 0x28
 8010b08:	af02      	add	r7, sp, #8
 8010b0a:	6078      	str	r0, [r7, #4]
 8010b0c:	460b      	mov	r3, r1
 8010b0e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010b10:	2300      	movs	r3, #0
 8010b12:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010b14:	2300      	movs	r3, #0
 8010b16:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010b18:	78fb      	ldrb	r3, [r7, #3]
 8010b1a:	f003 0303 	and.w	r3, r3, #3
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d106      	bne.n	8010b30 <tcp_enqueue_flags+0x2c>
 8010b22:	4b67      	ldr	r3, [pc, #412]	; (8010cc0 <tcp_enqueue_flags+0x1bc>)
 8010b24:	f240 4211 	movw	r2, #1041	; 0x411
 8010b28:	4966      	ldr	r1, [pc, #408]	; (8010cc4 <tcp_enqueue_flags+0x1c0>)
 8010b2a:	4867      	ldr	r0, [pc, #412]	; (8010cc8 <tcp_enqueue_flags+0x1c4>)
 8010b2c:	f006 fad8 	bl	80170e0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	d106      	bne.n	8010b44 <tcp_enqueue_flags+0x40>
 8010b36:	4b62      	ldr	r3, [pc, #392]	; (8010cc0 <tcp_enqueue_flags+0x1bc>)
 8010b38:	f240 4213 	movw	r2, #1043	; 0x413
 8010b3c:	4963      	ldr	r1, [pc, #396]	; (8010ccc <tcp_enqueue_flags+0x1c8>)
 8010b3e:	4862      	ldr	r0, [pc, #392]	; (8010cc8 <tcp_enqueue_flags+0x1c4>)
 8010b40:	f006 face 	bl	80170e0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010b44:	78fb      	ldrb	r3, [r7, #3]
 8010b46:	f003 0302 	and.w	r3, r3, #2
 8010b4a:	2b00      	cmp	r3, #0
 8010b4c:	d001      	beq.n	8010b52 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010b4e:	2301      	movs	r3, #1
 8010b50:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010b52:	7ffb      	ldrb	r3, [r7, #31]
 8010b54:	009b      	lsls	r3, r3, #2
 8010b56:	b2db      	uxtb	r3, r3
 8010b58:	f003 0304 	and.w	r3, r3, #4
 8010b5c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010b5e:	7dfb      	ldrb	r3, [r7, #23]
 8010b60:	b29b      	uxth	r3, r3
 8010b62:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010b66:	4619      	mov	r1, r3
 8010b68:	2036      	movs	r0, #54	; 0x36
 8010b6a:	f7fb f945 	bl	800bdf8 <pbuf_alloc>
 8010b6e:	6138      	str	r0, [r7, #16]
 8010b70:	693b      	ldr	r3, [r7, #16]
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d109      	bne.n	8010b8a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	8b5b      	ldrh	r3, [r3, #26]
 8010b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010b7e:	b29a      	uxth	r2, r3
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010b84:	f04f 33ff 	mov.w	r3, #4294967295
 8010b88:	e095      	b.n	8010cb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010b8a:	693b      	ldr	r3, [r7, #16]
 8010b8c:	895a      	ldrh	r2, [r3, #10]
 8010b8e:	7dfb      	ldrb	r3, [r7, #23]
 8010b90:	b29b      	uxth	r3, r3
 8010b92:	429a      	cmp	r2, r3
 8010b94:	d206      	bcs.n	8010ba4 <tcp_enqueue_flags+0xa0>
 8010b96:	4b4a      	ldr	r3, [pc, #296]	; (8010cc0 <tcp_enqueue_flags+0x1bc>)
 8010b98:	f240 4239 	movw	r2, #1081	; 0x439
 8010b9c:	494c      	ldr	r1, [pc, #304]	; (8010cd0 <tcp_enqueue_flags+0x1cc>)
 8010b9e:	484a      	ldr	r0, [pc, #296]	; (8010cc8 <tcp_enqueue_flags+0x1c4>)
 8010ba0:	f006 fa9e 	bl	80170e0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010ba4:	687b      	ldr	r3, [r7, #4]
 8010ba6:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010ba8:	78fa      	ldrb	r2, [r7, #3]
 8010baa:	7ffb      	ldrb	r3, [r7, #31]
 8010bac:	9300      	str	r3, [sp, #0]
 8010bae:	460b      	mov	r3, r1
 8010bb0:	6939      	ldr	r1, [r7, #16]
 8010bb2:	6878      	ldr	r0, [r7, #4]
 8010bb4:	f7ff fd70 	bl	8010698 <tcp_create_segment>
 8010bb8:	60f8      	str	r0, [r7, #12]
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d109      	bne.n	8010bd4 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010bc0:	687b      	ldr	r3, [r7, #4]
 8010bc2:	8b5b      	ldrh	r3, [r3, #26]
 8010bc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010bc8:	b29a      	uxth	r2, r3
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010bce:	f04f 33ff 	mov.w	r3, #4294967295
 8010bd2:	e070      	b.n	8010cb6 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010bd4:	68fb      	ldr	r3, [r7, #12]
 8010bd6:	68db      	ldr	r3, [r3, #12]
 8010bd8:	f003 0303 	and.w	r3, r3, #3
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d006      	beq.n	8010bee <tcp_enqueue_flags+0xea>
 8010be0:	4b37      	ldr	r3, [pc, #220]	; (8010cc0 <tcp_enqueue_flags+0x1bc>)
 8010be2:	f240 4242 	movw	r2, #1090	; 0x442
 8010be6:	493b      	ldr	r1, [pc, #236]	; (8010cd4 <tcp_enqueue_flags+0x1d0>)
 8010be8:	4837      	ldr	r0, [pc, #220]	; (8010cc8 <tcp_enqueue_flags+0x1c4>)
 8010bea:	f006 fa79 	bl	80170e0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	891b      	ldrh	r3, [r3, #8]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d006      	beq.n	8010c04 <tcp_enqueue_flags+0x100>
 8010bf6:	4b32      	ldr	r3, [pc, #200]	; (8010cc0 <tcp_enqueue_flags+0x1bc>)
 8010bf8:	f240 4243 	movw	r2, #1091	; 0x443
 8010bfc:	4936      	ldr	r1, [pc, #216]	; (8010cd8 <tcp_enqueue_flags+0x1d4>)
 8010bfe:	4832      	ldr	r0, [pc, #200]	; (8010cc8 <tcp_enqueue_flags+0x1c4>)
 8010c00:	f006 fa6e 	bl	80170e0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d103      	bne.n	8010c14 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	68fa      	ldr	r2, [r7, #12]
 8010c10:	66da      	str	r2, [r3, #108]	; 0x6c
 8010c12:	e00d      	b.n	8010c30 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010c18:	61bb      	str	r3, [r7, #24]
 8010c1a:	e002      	b.n	8010c22 <tcp_enqueue_flags+0x11e>
 8010c1c:	69bb      	ldr	r3, [r7, #24]
 8010c1e:	681b      	ldr	r3, [r3, #0]
 8010c20:	61bb      	str	r3, [r7, #24]
 8010c22:	69bb      	ldr	r3, [r7, #24]
 8010c24:	681b      	ldr	r3, [r3, #0]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d1f8      	bne.n	8010c1c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8010c2a:	69bb      	ldr	r3, [r7, #24]
 8010c2c:	68fa      	ldr	r2, [r7, #12]
 8010c2e:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2200      	movs	r2, #0
 8010c34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8010c38:	78fb      	ldrb	r3, [r7, #3]
 8010c3a:	f003 0302 	and.w	r3, r3, #2
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d104      	bne.n	8010c4c <tcp_enqueue_flags+0x148>
 8010c42:	78fb      	ldrb	r3, [r7, #3]
 8010c44:	f003 0301 	and.w	r3, r3, #1
 8010c48:	2b00      	cmp	r3, #0
 8010c4a:	d004      	beq.n	8010c56 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010c50:	1c5a      	adds	r2, r3, #1
 8010c52:	687b      	ldr	r3, [r7, #4]
 8010c54:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8010c56:	78fb      	ldrb	r3, [r7, #3]
 8010c58:	f003 0301 	and.w	r3, r3, #1
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d006      	beq.n	8010c6e <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	8b5b      	ldrh	r3, [r3, #26]
 8010c64:	f043 0320 	orr.w	r3, r3, #32
 8010c68:	b29a      	uxth	r2, r3
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010c6e:	68fb      	ldr	r3, [r7, #12]
 8010c70:	685b      	ldr	r3, [r3, #4]
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7fb fc32 	bl	800c4dc <pbuf_clen>
 8010c78:	4603      	mov	r3, r0
 8010c7a:	461a      	mov	r2, r3
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c82:	4413      	add	r3, r2
 8010c84:	b29a      	uxth	r2, r3
 8010c86:	687b      	ldr	r3, [r7, #4]
 8010c88:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010c92:	2b00      	cmp	r3, #0
 8010c94:	d00e      	beq.n	8010cb4 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010c96:	687b      	ldr	r3, [r7, #4]
 8010c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d10a      	bne.n	8010cb4 <tcp_enqueue_flags+0x1b0>
 8010c9e:	687b      	ldr	r3, [r7, #4]
 8010ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d106      	bne.n	8010cb4 <tcp_enqueue_flags+0x1b0>
 8010ca6:	4b06      	ldr	r3, [pc, #24]	; (8010cc0 <tcp_enqueue_flags+0x1bc>)
 8010ca8:	f240 4265 	movw	r2, #1125	; 0x465
 8010cac:	490b      	ldr	r1, [pc, #44]	; (8010cdc <tcp_enqueue_flags+0x1d8>)
 8010cae:	4806      	ldr	r0, [pc, #24]	; (8010cc8 <tcp_enqueue_flags+0x1c4>)
 8010cb0:	f006 fa16 	bl	80170e0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010cb4:	2300      	movs	r3, #0
}
 8010cb6:	4618      	mov	r0, r3
 8010cb8:	3720      	adds	r7, #32
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}
 8010cbe:	bf00      	nop
 8010cc0:	080198a0 	.word	0x080198a0
 8010cc4:	08019cc4 	.word	0x08019cc4
 8010cc8:	080198f4 	.word	0x080198f4
 8010ccc:	08019d1c 	.word	0x08019d1c
 8010cd0:	08019d3c 	.word	0x08019d3c
 8010cd4:	08019d78 	.word	0x08019d78
 8010cd8:	08019d90 	.word	0x08019d90
 8010cdc:	08019dbc 	.word	0x08019dbc

08010ce0 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010ce0:	b5b0      	push	{r4, r5, r7, lr}
 8010ce2:	b08a      	sub	sp, #40	; 0x28
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d106      	bne.n	8010cfc <tcp_output+0x1c>
 8010cee:	4b8a      	ldr	r3, [pc, #552]	; (8010f18 <tcp_output+0x238>)
 8010cf0:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010cf4:	4989      	ldr	r1, [pc, #548]	; (8010f1c <tcp_output+0x23c>)
 8010cf6:	488a      	ldr	r0, [pc, #552]	; (8010f20 <tcp_output+0x240>)
 8010cf8:	f006 f9f2 	bl	80170e0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010cfc:	687b      	ldr	r3, [r7, #4]
 8010cfe:	7d1b      	ldrb	r3, [r3, #20]
 8010d00:	2b01      	cmp	r3, #1
 8010d02:	d106      	bne.n	8010d12 <tcp_output+0x32>
 8010d04:	4b84      	ldr	r3, [pc, #528]	; (8010f18 <tcp_output+0x238>)
 8010d06:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010d0a:	4986      	ldr	r1, [pc, #536]	; (8010f24 <tcp_output+0x244>)
 8010d0c:	4884      	ldr	r0, [pc, #528]	; (8010f20 <tcp_output+0x240>)
 8010d0e:	f006 f9e7 	bl	80170e0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010d12:	4b85      	ldr	r3, [pc, #532]	; (8010f28 <tcp_output+0x248>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	687a      	ldr	r2, [r7, #4]
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d101      	bne.n	8010d20 <tcp_output+0x40>
    return ERR_OK;
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	e1ce      	b.n	80110be <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010d2c:	4293      	cmp	r3, r2
 8010d2e:	bf28      	it	cs
 8010d30:	4613      	movcs	r3, r2
 8010d32:	b29b      	uxth	r3, r3
 8010d34:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010d3a:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	d10b      	bne.n	8010d5a <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010d42:	687b      	ldr	r3, [r7, #4]
 8010d44:	8b5b      	ldrh	r3, [r3, #26]
 8010d46:	f003 0302 	and.w	r3, r3, #2
 8010d4a:	2b00      	cmp	r3, #0
 8010d4c:	f000 81aa 	beq.w	80110a4 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010d50:	6878      	ldr	r0, [r7, #4]
 8010d52:	f000 fdcb 	bl	80118ec <tcp_send_empty_ack>
 8010d56:	4603      	mov	r3, r0
 8010d58:	e1b1      	b.n	80110be <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8010d5a:	6879      	ldr	r1, [r7, #4]
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	3304      	adds	r3, #4
 8010d60:	461a      	mov	r2, r3
 8010d62:	6878      	ldr	r0, [r7, #4]
 8010d64:	f7ff fc7c 	bl	8010660 <tcp_route>
 8010d68:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8010d6a:	697b      	ldr	r3, [r7, #20]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d102      	bne.n	8010d76 <tcp_output+0x96>
    return ERR_RTE;
 8010d70:	f06f 0303 	mvn.w	r3, #3
 8010d74:	e1a3      	b.n	80110be <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d003      	beq.n	8010d84 <tcp_output+0xa4>
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d111      	bne.n	8010da8 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010d84:	697b      	ldr	r3, [r7, #20]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d002      	beq.n	8010d90 <tcp_output+0xb0>
 8010d8a:	697b      	ldr	r3, [r7, #20]
 8010d8c:	3304      	adds	r3, #4
 8010d8e:	e000      	b.n	8010d92 <tcp_output+0xb2>
 8010d90:	2300      	movs	r3, #0
 8010d92:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010d94:	693b      	ldr	r3, [r7, #16]
 8010d96:	2b00      	cmp	r3, #0
 8010d98:	d102      	bne.n	8010da0 <tcp_output+0xc0>
      return ERR_RTE;
 8010d9a:	f06f 0303 	mvn.w	r3, #3
 8010d9e:	e18e      	b.n	80110be <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8010da0:	693b      	ldr	r3, [r7, #16]
 8010da2:	681a      	ldr	r2, [r3, #0]
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010daa:	68db      	ldr	r3, [r3, #12]
 8010dac:	685b      	ldr	r3, [r3, #4]
 8010dae:	4618      	mov	r0, r3
 8010db0:	f7f9 fcf3 	bl	800a79a <lwip_htonl>
 8010db4:	4602      	mov	r2, r0
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010dba:	1ad3      	subs	r3, r2, r3
 8010dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dbe:	8912      	ldrh	r2, [r2, #8]
 8010dc0:	4413      	add	r3, r2
 8010dc2:	69ba      	ldr	r2, [r7, #24]
 8010dc4:	429a      	cmp	r2, r3
 8010dc6:	d227      	bcs.n	8010e18 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010dce:	461a      	mov	r2, r3
 8010dd0:	69bb      	ldr	r3, [r7, #24]
 8010dd2:	4293      	cmp	r3, r2
 8010dd4:	d114      	bne.n	8010e00 <tcp_output+0x120>
 8010dd6:	687b      	ldr	r3, [r7, #4]
 8010dd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d110      	bne.n	8010e00 <tcp_output+0x120>
 8010dde:	687b      	ldr	r3, [r7, #4]
 8010de0:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010de4:	2b00      	cmp	r3, #0
 8010de6:	d10b      	bne.n	8010e00 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	2200      	movs	r2, #0
 8010dec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	2201      	movs	r2, #1
 8010df4:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2200      	movs	r2, #0
 8010dfc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	8b5b      	ldrh	r3, [r3, #26]
 8010e04:	f003 0302 	and.w	r3, r3, #2
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	f000 814d 	beq.w	80110a8 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010e0e:	6878      	ldr	r0, [r7, #4]
 8010e10:	f000 fd6c 	bl	80118ec <tcp_send_empty_ack>
 8010e14:	4603      	mov	r3, r0
 8010e16:	e152      	b.n	80110be <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e24:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8010e26:	6a3b      	ldr	r3, [r7, #32]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	f000 811c 	beq.w	8011066 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010e2e:	e002      	b.n	8010e36 <tcp_output+0x156>
 8010e30:	6a3b      	ldr	r3, [r7, #32]
 8010e32:	681b      	ldr	r3, [r3, #0]
 8010e34:	623b      	str	r3, [r7, #32]
 8010e36:	6a3b      	ldr	r3, [r7, #32]
 8010e38:	681b      	ldr	r3, [r3, #0]
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d1f8      	bne.n	8010e30 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010e3e:	e112      	b.n	8011066 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e42:	68db      	ldr	r3, [r3, #12]
 8010e44:	899b      	ldrh	r3, [r3, #12]
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	4618      	mov	r0, r3
 8010e4a:	f7f9 fc91 	bl	800a770 <lwip_htons>
 8010e4e:	4603      	mov	r3, r0
 8010e50:	b2db      	uxtb	r3, r3
 8010e52:	f003 0304 	and.w	r3, r3, #4
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d006      	beq.n	8010e68 <tcp_output+0x188>
 8010e5a:	4b2f      	ldr	r3, [pc, #188]	; (8010f18 <tcp_output+0x238>)
 8010e5c:	f240 5236 	movw	r2, #1334	; 0x536
 8010e60:	4932      	ldr	r1, [pc, #200]	; (8010f2c <tcp_output+0x24c>)
 8010e62:	482f      	ldr	r0, [pc, #188]	; (8010f20 <tcp_output+0x240>)
 8010e64:	f006 f93c 	bl	80170e0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d01f      	beq.n	8010eb0 <tcp_output+0x1d0>
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	8b5b      	ldrh	r3, [r3, #26]
 8010e74:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8010e78:	2b00      	cmp	r3, #0
 8010e7a:	d119      	bne.n	8010eb0 <tcp_output+0x1d0>
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d00b      	beq.n	8010e9c <tcp_output+0x1bc>
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e88:	681b      	ldr	r3, [r3, #0]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d110      	bne.n	8010eb0 <tcp_output+0x1d0>
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e92:	891a      	ldrh	r2, [r3, #8]
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010e98:	429a      	cmp	r2, r3
 8010e9a:	d209      	bcs.n	8010eb0 <tcp_output+0x1d0>
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d004      	beq.n	8010eb0 <tcp_output+0x1d0>
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010eac:	2b08      	cmp	r3, #8
 8010eae:	d901      	bls.n	8010eb4 <tcp_output+0x1d4>
 8010eb0:	2301      	movs	r3, #1
 8010eb2:	e000      	b.n	8010eb6 <tcp_output+0x1d6>
 8010eb4:	2300      	movs	r3, #0
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	d106      	bne.n	8010ec8 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	8b5b      	ldrh	r3, [r3, #26]
 8010ebe:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	f000 80e4 	beq.w	8011090 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	7d1b      	ldrb	r3, [r3, #20]
 8010ecc:	2b02      	cmp	r3, #2
 8010ece:	d00d      	beq.n	8010eec <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8010ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ed2:	68db      	ldr	r3, [r3, #12]
 8010ed4:	899b      	ldrh	r3, [r3, #12]
 8010ed6:	b29c      	uxth	r4, r3
 8010ed8:	2010      	movs	r0, #16
 8010eda:	f7f9 fc49 	bl	800a770 <lwip_htons>
 8010ede:	4603      	mov	r3, r0
 8010ee0:	461a      	mov	r2, r3
 8010ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ee4:	68db      	ldr	r3, [r3, #12]
 8010ee6:	4322      	orrs	r2, r4
 8010ee8:	b292      	uxth	r2, r2
 8010eea:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010eec:	697a      	ldr	r2, [r7, #20]
 8010eee:	6879      	ldr	r1, [r7, #4]
 8010ef0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010ef2:	f000 f909 	bl	8011108 <tcp_output_segment>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d016      	beq.n	8010f30 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	8b5b      	ldrh	r3, [r3, #26]
 8010f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f0a:	b29a      	uxth	r2, r3
 8010f0c:	687b      	ldr	r3, [r7, #4]
 8010f0e:	835a      	strh	r2, [r3, #26]
      return err;
 8010f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010f14:	e0d3      	b.n	80110be <tcp_output+0x3de>
 8010f16:	bf00      	nop
 8010f18:	080198a0 	.word	0x080198a0
 8010f1c:	08019de4 	.word	0x08019de4
 8010f20:	080198f4 	.word	0x080198f4
 8010f24:	08019dfc 	.word	0x08019dfc
 8010f28:	2000f2ac 	.word	0x2000f2ac
 8010f2c:	08019e24 	.word	0x08019e24
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f32:	681a      	ldr	r2, [r3, #0]
 8010f34:	687b      	ldr	r3, [r7, #4]
 8010f36:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8010f38:	687b      	ldr	r3, [r7, #4]
 8010f3a:	7d1b      	ldrb	r3, [r3, #20]
 8010f3c:	2b02      	cmp	r3, #2
 8010f3e:	d006      	beq.n	8010f4e <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010f40:	687b      	ldr	r3, [r7, #4]
 8010f42:	8b5b      	ldrh	r3, [r3, #26]
 8010f44:	f023 0303 	bic.w	r3, r3, #3
 8010f48:	b29a      	uxth	r2, r3
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f50:	68db      	ldr	r3, [r3, #12]
 8010f52:	685b      	ldr	r3, [r3, #4]
 8010f54:	4618      	mov	r0, r3
 8010f56:	f7f9 fc20 	bl	800a79a <lwip_htonl>
 8010f5a:	4604      	mov	r4, r0
 8010f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f5e:	891b      	ldrh	r3, [r3, #8]
 8010f60:	461d      	mov	r5, r3
 8010f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f64:	68db      	ldr	r3, [r3, #12]
 8010f66:	899b      	ldrh	r3, [r3, #12]
 8010f68:	b29b      	uxth	r3, r3
 8010f6a:	4618      	mov	r0, r3
 8010f6c:	f7f9 fc00 	bl	800a770 <lwip_htons>
 8010f70:	4603      	mov	r3, r0
 8010f72:	b2db      	uxtb	r3, r3
 8010f74:	f003 0303 	and.w	r3, r3, #3
 8010f78:	2b00      	cmp	r3, #0
 8010f7a:	d001      	beq.n	8010f80 <tcp_output+0x2a0>
 8010f7c:	2301      	movs	r3, #1
 8010f7e:	e000      	b.n	8010f82 <tcp_output+0x2a2>
 8010f80:	2300      	movs	r3, #0
 8010f82:	442b      	add	r3, r5
 8010f84:	4423      	add	r3, r4
 8010f86:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010f8c:	68bb      	ldr	r3, [r7, #8]
 8010f8e:	1ad3      	subs	r3, r2, r3
 8010f90:	2b00      	cmp	r3, #0
 8010f92:	da02      	bge.n	8010f9a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	68ba      	ldr	r2, [r7, #8]
 8010f98:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010f9c:	891b      	ldrh	r3, [r3, #8]
 8010f9e:	461c      	mov	r4, r3
 8010fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fa2:	68db      	ldr	r3, [r3, #12]
 8010fa4:	899b      	ldrh	r3, [r3, #12]
 8010fa6:	b29b      	uxth	r3, r3
 8010fa8:	4618      	mov	r0, r3
 8010faa:	f7f9 fbe1 	bl	800a770 <lwip_htons>
 8010fae:	4603      	mov	r3, r0
 8010fb0:	b2db      	uxtb	r3, r3
 8010fb2:	f003 0303 	and.w	r3, r3, #3
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d001      	beq.n	8010fbe <tcp_output+0x2de>
 8010fba:	2301      	movs	r3, #1
 8010fbc:	e000      	b.n	8010fc0 <tcp_output+0x2e0>
 8010fbe:	2300      	movs	r3, #0
 8010fc0:	4423      	add	r3, r4
 8010fc2:	2b00      	cmp	r3, #0
 8010fc4:	d049      	beq.n	801105a <tcp_output+0x37a>
      seg->next = NULL;
 8010fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fc8:	2200      	movs	r2, #0
 8010fca:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010fd0:	2b00      	cmp	r3, #0
 8010fd2:	d105      	bne.n	8010fe0 <tcp_output+0x300>
        pcb->unacked = seg;
 8010fd4:	687b      	ldr	r3, [r7, #4]
 8010fd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010fd8:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fdc:	623b      	str	r3, [r7, #32]
 8010fde:	e03f      	b.n	8011060 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010fe2:	68db      	ldr	r3, [r3, #12]
 8010fe4:	685b      	ldr	r3, [r3, #4]
 8010fe6:	4618      	mov	r0, r3
 8010fe8:	f7f9 fbd7 	bl	800a79a <lwip_htonl>
 8010fec:	4604      	mov	r4, r0
 8010fee:	6a3b      	ldr	r3, [r7, #32]
 8010ff0:	68db      	ldr	r3, [r3, #12]
 8010ff2:	685b      	ldr	r3, [r3, #4]
 8010ff4:	4618      	mov	r0, r3
 8010ff6:	f7f9 fbd0 	bl	800a79a <lwip_htonl>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	1ae3      	subs	r3, r4, r3
 8010ffe:	2b00      	cmp	r3, #0
 8011000:	da24      	bge.n	801104c <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011002:	687b      	ldr	r3, [r7, #4]
 8011004:	3370      	adds	r3, #112	; 0x70
 8011006:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011008:	e002      	b.n	8011010 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801100a:	69fb      	ldr	r3, [r7, #28]
 801100c:	681b      	ldr	r3, [r3, #0]
 801100e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011010:	69fb      	ldr	r3, [r7, #28]
 8011012:	681b      	ldr	r3, [r3, #0]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d011      	beq.n	801103c <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011018:	69fb      	ldr	r3, [r7, #28]
 801101a:	681b      	ldr	r3, [r3, #0]
 801101c:	68db      	ldr	r3, [r3, #12]
 801101e:	685b      	ldr	r3, [r3, #4]
 8011020:	4618      	mov	r0, r3
 8011022:	f7f9 fbba 	bl	800a79a <lwip_htonl>
 8011026:	4604      	mov	r4, r0
 8011028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801102a:	68db      	ldr	r3, [r3, #12]
 801102c:	685b      	ldr	r3, [r3, #4]
 801102e:	4618      	mov	r0, r3
 8011030:	f7f9 fbb3 	bl	800a79a <lwip_htonl>
 8011034:	4603      	mov	r3, r0
 8011036:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011038:	2b00      	cmp	r3, #0
 801103a:	dbe6      	blt.n	801100a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801103c:	69fb      	ldr	r3, [r7, #28]
 801103e:	681a      	ldr	r2, [r3, #0]
 8011040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011042:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011044:	69fb      	ldr	r3, [r7, #28]
 8011046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011048:	601a      	str	r2, [r3, #0]
 801104a:	e009      	b.n	8011060 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801104c:	6a3b      	ldr	r3, [r7, #32]
 801104e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011050:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011052:	6a3b      	ldr	r3, [r7, #32]
 8011054:	681b      	ldr	r3, [r3, #0]
 8011056:	623b      	str	r3, [r7, #32]
 8011058:	e002      	b.n	8011060 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801105a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801105c:	f7fc fc3f 	bl	800d8de <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011064:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011068:	2b00      	cmp	r3, #0
 801106a:	d012      	beq.n	8011092 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801106c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801106e:	68db      	ldr	r3, [r3, #12]
 8011070:	685b      	ldr	r3, [r3, #4]
 8011072:	4618      	mov	r0, r3
 8011074:	f7f9 fb91 	bl	800a79a <lwip_htonl>
 8011078:	4602      	mov	r2, r0
 801107a:	687b      	ldr	r3, [r7, #4]
 801107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801107e:	1ad3      	subs	r3, r2, r3
 8011080:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011082:	8912      	ldrh	r2, [r2, #8]
 8011084:	4413      	add	r3, r2
  while (seg != NULL &&
 8011086:	69ba      	ldr	r2, [r7, #24]
 8011088:	429a      	cmp	r2, r3
 801108a:	f4bf aed9 	bcs.w	8010e40 <tcp_output+0x160>
 801108e:	e000      	b.n	8011092 <tcp_output+0x3b2>
      break;
 8011090:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011096:	2b00      	cmp	r3, #0
 8011098:	d108      	bne.n	80110ac <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	2200      	movs	r2, #0
 801109e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80110a2:	e004      	b.n	80110ae <tcp_output+0x3ce>
    goto output_done;
 80110a4:	bf00      	nop
 80110a6:	e002      	b.n	80110ae <tcp_output+0x3ce>
    goto output_done;
 80110a8:	bf00      	nop
 80110aa:	e000      	b.n	80110ae <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80110ac:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	8b5b      	ldrh	r3, [r3, #26]
 80110b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80110b6:	b29a      	uxth	r2, r3
 80110b8:	687b      	ldr	r3, [r7, #4]
 80110ba:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80110bc:	2300      	movs	r3, #0
}
 80110be:	4618      	mov	r0, r3
 80110c0:	3728      	adds	r7, #40	; 0x28
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bdb0      	pop	{r4, r5, r7, pc}
 80110c6:	bf00      	nop

080110c8 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80110c8:	b580      	push	{r7, lr}
 80110ca:	b082      	sub	sp, #8
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80110d0:	687b      	ldr	r3, [r7, #4]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	d106      	bne.n	80110e4 <tcp_output_segment_busy+0x1c>
 80110d6:	4b09      	ldr	r3, [pc, #36]	; (80110fc <tcp_output_segment_busy+0x34>)
 80110d8:	f240 529a 	movw	r2, #1434	; 0x59a
 80110dc:	4908      	ldr	r1, [pc, #32]	; (8011100 <tcp_output_segment_busy+0x38>)
 80110de:	4809      	ldr	r0, [pc, #36]	; (8011104 <tcp_output_segment_busy+0x3c>)
 80110e0:	f005 fffe 	bl	80170e0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80110e4:	687b      	ldr	r3, [r7, #4]
 80110e6:	685b      	ldr	r3, [r3, #4]
 80110e8:	7b9b      	ldrb	r3, [r3, #14]
 80110ea:	2b01      	cmp	r3, #1
 80110ec:	d001      	beq.n	80110f2 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80110ee:	2301      	movs	r3, #1
 80110f0:	e000      	b.n	80110f4 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80110f2:	2300      	movs	r3, #0
}
 80110f4:	4618      	mov	r0, r3
 80110f6:	3708      	adds	r7, #8
 80110f8:	46bd      	mov	sp, r7
 80110fa:	bd80      	pop	{r7, pc}
 80110fc:	080198a0 	.word	0x080198a0
 8011100:	08019e3c 	.word	0x08019e3c
 8011104:	080198f4 	.word	0x080198f4

08011108 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011108:	b5b0      	push	{r4, r5, r7, lr}
 801110a:	b08c      	sub	sp, #48	; 0x30
 801110c:	af04      	add	r7, sp, #16
 801110e:	60f8      	str	r0, [r7, #12]
 8011110:	60b9      	str	r1, [r7, #8]
 8011112:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8011114:	68fb      	ldr	r3, [r7, #12]
 8011116:	2b00      	cmp	r3, #0
 8011118:	d106      	bne.n	8011128 <tcp_output_segment+0x20>
 801111a:	4b63      	ldr	r3, [pc, #396]	; (80112a8 <tcp_output_segment+0x1a0>)
 801111c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8011120:	4962      	ldr	r1, [pc, #392]	; (80112ac <tcp_output_segment+0x1a4>)
 8011122:	4863      	ldr	r0, [pc, #396]	; (80112b0 <tcp_output_segment+0x1a8>)
 8011124:	f005 ffdc 	bl	80170e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	2b00      	cmp	r3, #0
 801112c:	d106      	bne.n	801113c <tcp_output_segment+0x34>
 801112e:	4b5e      	ldr	r3, [pc, #376]	; (80112a8 <tcp_output_segment+0x1a0>)
 8011130:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8011134:	495f      	ldr	r1, [pc, #380]	; (80112b4 <tcp_output_segment+0x1ac>)
 8011136:	485e      	ldr	r0, [pc, #376]	; (80112b0 <tcp_output_segment+0x1a8>)
 8011138:	f005 ffd2 	bl	80170e0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801113c:	687b      	ldr	r3, [r7, #4]
 801113e:	2b00      	cmp	r3, #0
 8011140:	d106      	bne.n	8011150 <tcp_output_segment+0x48>
 8011142:	4b59      	ldr	r3, [pc, #356]	; (80112a8 <tcp_output_segment+0x1a0>)
 8011144:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8011148:	495b      	ldr	r1, [pc, #364]	; (80112b8 <tcp_output_segment+0x1b0>)
 801114a:	4859      	ldr	r0, [pc, #356]	; (80112b0 <tcp_output_segment+0x1a8>)
 801114c:	f005 ffc8 	bl	80170e0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8011150:	68f8      	ldr	r0, [r7, #12]
 8011152:	f7ff ffb9 	bl	80110c8 <tcp_output_segment_busy>
 8011156:	4603      	mov	r3, r0
 8011158:	2b00      	cmp	r3, #0
 801115a:	d001      	beq.n	8011160 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801115c:	2300      	movs	r3, #0
 801115e:	e09f      	b.n	80112a0 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8011160:	68bb      	ldr	r3, [r7, #8]
 8011162:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011164:	68fb      	ldr	r3, [r7, #12]
 8011166:	68dc      	ldr	r4, [r3, #12]
 8011168:	4610      	mov	r0, r2
 801116a:	f7f9 fb16 	bl	800a79a <lwip_htonl>
 801116e:	4603      	mov	r3, r0
 8011170:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	68dc      	ldr	r4, [r3, #12]
 801117a:	4610      	mov	r0, r2
 801117c:	f7f9 faf8 	bl	800a770 <lwip_htons>
 8011180:	4603      	mov	r3, r0
 8011182:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011188:	68ba      	ldr	r2, [r7, #8]
 801118a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801118c:	441a      	add	r2, r3
 801118e:	68bb      	ldr	r3, [r7, #8]
 8011190:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8011192:	68fb      	ldr	r3, [r7, #12]
 8011194:	68db      	ldr	r3, [r3, #12]
 8011196:	3314      	adds	r3, #20
 8011198:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801119a:	68fb      	ldr	r3, [r7, #12]
 801119c:	7a9b      	ldrb	r3, [r3, #10]
 801119e:	f003 0301 	and.w	r3, r3, #1
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d015      	beq.n	80111d2 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80111a6:	68bb      	ldr	r3, [r7, #8]
 80111a8:	3304      	adds	r3, #4
 80111aa:	461a      	mov	r2, r3
 80111ac:	6879      	ldr	r1, [r7, #4]
 80111ae:	f44f 7006 	mov.w	r0, #536	; 0x218
 80111b2:	f7fc fe8b 	bl	800decc <tcp_eff_send_mss_netif>
 80111b6:	4603      	mov	r3, r0
 80111b8:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80111ba:	8b7b      	ldrh	r3, [r7, #26]
 80111bc:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80111c0:	4618      	mov	r0, r3
 80111c2:	f7f9 faea 	bl	800a79a <lwip_htonl>
 80111c6:	4602      	mov	r2, r0
 80111c8:	69fb      	ldr	r3, [r7, #28]
 80111ca:	601a      	str	r2, [r3, #0]
    opts += 1;
 80111cc:	69fb      	ldr	r3, [r7, #28]
 80111ce:	3304      	adds	r3, #4
 80111d0:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80111d2:	68bb      	ldr	r3, [r7, #8]
 80111d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80111d8:	2b00      	cmp	r3, #0
 80111da:	da02      	bge.n	80111e2 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	2200      	movs	r2, #0
 80111e0:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80111e2:	68bb      	ldr	r3, [r7, #8]
 80111e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d10c      	bne.n	8011204 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80111ea:	4b34      	ldr	r3, [pc, #208]	; (80112bc <tcp_output_segment+0x1b4>)
 80111ec:	681a      	ldr	r2, [r3, #0]
 80111ee:	68bb      	ldr	r3, [r7, #8]
 80111f0:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80111f2:	68fb      	ldr	r3, [r7, #12]
 80111f4:	68db      	ldr	r3, [r3, #12]
 80111f6:	685b      	ldr	r3, [r3, #4]
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7f9 face 	bl	800a79a <lwip_htonl>
 80111fe:	4602      	mov	r2, r0
 8011200:	68bb      	ldr	r3, [r7, #8]
 8011202:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	68da      	ldr	r2, [r3, #12]
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	685b      	ldr	r3, [r3, #4]
 801120c:	685b      	ldr	r3, [r3, #4]
 801120e:	1ad3      	subs	r3, r2, r3
 8011210:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011212:	68fb      	ldr	r3, [r7, #12]
 8011214:	685b      	ldr	r3, [r3, #4]
 8011216:	8959      	ldrh	r1, [r3, #10]
 8011218:	68fb      	ldr	r3, [r7, #12]
 801121a:	685b      	ldr	r3, [r3, #4]
 801121c:	8b3a      	ldrh	r2, [r7, #24]
 801121e:	1a8a      	subs	r2, r1, r2
 8011220:	b292      	uxth	r2, r2
 8011222:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011224:	68fb      	ldr	r3, [r7, #12]
 8011226:	685b      	ldr	r3, [r3, #4]
 8011228:	8919      	ldrh	r1, [r3, #8]
 801122a:	68fb      	ldr	r3, [r7, #12]
 801122c:	685b      	ldr	r3, [r3, #4]
 801122e:	8b3a      	ldrh	r2, [r7, #24]
 8011230:	1a8a      	subs	r2, r1, r2
 8011232:	b292      	uxth	r2, r2
 8011234:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011236:	68fb      	ldr	r3, [r7, #12]
 8011238:	685b      	ldr	r3, [r3, #4]
 801123a:	68fa      	ldr	r2, [r7, #12]
 801123c:	68d2      	ldr	r2, [r2, #12]
 801123e:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011240:	68fb      	ldr	r3, [r7, #12]
 8011242:	68db      	ldr	r3, [r3, #12]
 8011244:	2200      	movs	r2, #0
 8011246:	741a      	strb	r2, [r3, #16]
 8011248:	2200      	movs	r2, #0
 801124a:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801124c:	68fb      	ldr	r3, [r7, #12]
 801124e:	68db      	ldr	r3, [r3, #12]
 8011250:	f103 0214 	add.w	r2, r3, #20
 8011254:	68fb      	ldr	r3, [r7, #12]
 8011256:	7a9b      	ldrb	r3, [r3, #10]
 8011258:	009b      	lsls	r3, r3, #2
 801125a:	f003 0304 	and.w	r3, r3, #4
 801125e:	4413      	add	r3, r2
 8011260:	69fa      	ldr	r2, [r7, #28]
 8011262:	429a      	cmp	r2, r3
 8011264:	d006      	beq.n	8011274 <tcp_output_segment+0x16c>
 8011266:	4b10      	ldr	r3, [pc, #64]	; (80112a8 <tcp_output_segment+0x1a0>)
 8011268:	f240 621c 	movw	r2, #1564	; 0x61c
 801126c:	4914      	ldr	r1, [pc, #80]	; (80112c0 <tcp_output_segment+0x1b8>)
 801126e:	4810      	ldr	r0, [pc, #64]	; (80112b0 <tcp_output_segment+0x1a8>)
 8011270:	f005 ff36 	bl	80170e0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011274:	68fb      	ldr	r3, [r7, #12]
 8011276:	6858      	ldr	r0, [r3, #4]
 8011278:	68b9      	ldr	r1, [r7, #8]
 801127a:	68bb      	ldr	r3, [r7, #8]
 801127c:	1d1c      	adds	r4, r3, #4
 801127e:	68bb      	ldr	r3, [r7, #8]
 8011280:	7add      	ldrb	r5, [r3, #11]
 8011282:	68bb      	ldr	r3, [r7, #8]
 8011284:	7a9b      	ldrb	r3, [r3, #10]
 8011286:	687a      	ldr	r2, [r7, #4]
 8011288:	9202      	str	r2, [sp, #8]
 801128a:	2206      	movs	r2, #6
 801128c:	9201      	str	r2, [sp, #4]
 801128e:	9300      	str	r3, [sp, #0]
 8011290:	462b      	mov	r3, r5
 8011292:	4622      	mov	r2, r4
 8011294:	f004 fc1e 	bl	8015ad4 <ip4_output_if>
 8011298:	4603      	mov	r3, r0
 801129a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801129c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	3720      	adds	r7, #32
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bdb0      	pop	{r4, r5, r7, pc}
 80112a8:	080198a0 	.word	0x080198a0
 80112ac:	08019e64 	.word	0x08019e64
 80112b0:	080198f4 	.word	0x080198f4
 80112b4:	08019e84 	.word	0x08019e84
 80112b8:	08019ea4 	.word	0x08019ea4
 80112bc:	2000f260 	.word	0x2000f260
 80112c0:	08019ec8 	.word	0x08019ec8

080112c4 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80112c4:	b5b0      	push	{r4, r5, r7, lr}
 80112c6:	b084      	sub	sp, #16
 80112c8:	af00      	add	r7, sp, #0
 80112ca:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d106      	bne.n	80112e0 <tcp_rexmit_rto_prepare+0x1c>
 80112d2:	4b31      	ldr	r3, [pc, #196]	; (8011398 <tcp_rexmit_rto_prepare+0xd4>)
 80112d4:	f240 6263 	movw	r2, #1635	; 0x663
 80112d8:	4930      	ldr	r1, [pc, #192]	; (801139c <tcp_rexmit_rto_prepare+0xd8>)
 80112da:	4831      	ldr	r0, [pc, #196]	; (80113a0 <tcp_rexmit_rto_prepare+0xdc>)
 80112dc:	f005 ff00 	bl	80170e0 <iprintf>

  if (pcb->unacked == NULL) {
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112e4:	2b00      	cmp	r3, #0
 80112e6:	d102      	bne.n	80112ee <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80112e8:	f06f 0305 	mvn.w	r3, #5
 80112ec:	e050      	b.n	8011390 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112f2:	60fb      	str	r3, [r7, #12]
 80112f4:	e00b      	b.n	801130e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 80112f6:	68f8      	ldr	r0, [r7, #12]
 80112f8:	f7ff fee6 	bl	80110c8 <tcp_output_segment_busy>
 80112fc:	4603      	mov	r3, r0
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d002      	beq.n	8011308 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8011302:	f06f 0305 	mvn.w	r3, #5
 8011306:	e043      	b.n	8011390 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	681b      	ldr	r3, [r3, #0]
 801130c:	60fb      	str	r3, [r7, #12]
 801130e:	68fb      	ldr	r3, [r7, #12]
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	2b00      	cmp	r3, #0
 8011314:	d1ef      	bne.n	80112f6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8011316:	68f8      	ldr	r0, [r7, #12]
 8011318:	f7ff fed6 	bl	80110c8 <tcp_output_segment_busy>
 801131c:	4603      	mov	r3, r0
 801131e:	2b00      	cmp	r3, #0
 8011320:	d002      	beq.n	8011328 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8011322:	f06f 0305 	mvn.w	r3, #5
 8011326:	e033      	b.n	8011390 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011328:	687b      	ldr	r3, [r7, #4]
 801132a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801132c:	68fb      	ldr	r3, [r7, #12]
 801132e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8011334:	687b      	ldr	r3, [r7, #4]
 8011336:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011338:	687b      	ldr	r3, [r7, #4]
 801133a:	2200      	movs	r2, #0
 801133c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801133e:	687b      	ldr	r3, [r7, #4]
 8011340:	8b5b      	ldrh	r3, [r3, #26]
 8011342:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8011346:	b29a      	uxth	r2, r3
 8011348:	687b      	ldr	r3, [r7, #4]
 801134a:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801134c:	68fb      	ldr	r3, [r7, #12]
 801134e:	68db      	ldr	r3, [r3, #12]
 8011350:	685b      	ldr	r3, [r3, #4]
 8011352:	4618      	mov	r0, r3
 8011354:	f7f9 fa21 	bl	800a79a <lwip_htonl>
 8011358:	4604      	mov	r4, r0
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	891b      	ldrh	r3, [r3, #8]
 801135e:	461d      	mov	r5, r3
 8011360:	68fb      	ldr	r3, [r7, #12]
 8011362:	68db      	ldr	r3, [r3, #12]
 8011364:	899b      	ldrh	r3, [r3, #12]
 8011366:	b29b      	uxth	r3, r3
 8011368:	4618      	mov	r0, r3
 801136a:	f7f9 fa01 	bl	800a770 <lwip_htons>
 801136e:	4603      	mov	r3, r0
 8011370:	b2db      	uxtb	r3, r3
 8011372:	f003 0303 	and.w	r3, r3, #3
 8011376:	2b00      	cmp	r3, #0
 8011378:	d001      	beq.n	801137e <tcp_rexmit_rto_prepare+0xba>
 801137a:	2301      	movs	r3, #1
 801137c:	e000      	b.n	8011380 <tcp_rexmit_rto_prepare+0xbc>
 801137e:	2300      	movs	r3, #0
 8011380:	442b      	add	r3, r5
 8011382:	18e2      	adds	r2, r4, r3
 8011384:	687b      	ldr	r3, [r7, #4]
 8011386:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	2200      	movs	r2, #0
 801138c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801138e:	2300      	movs	r3, #0
}
 8011390:	4618      	mov	r0, r3
 8011392:	3710      	adds	r7, #16
 8011394:	46bd      	mov	sp, r7
 8011396:	bdb0      	pop	{r4, r5, r7, pc}
 8011398:	080198a0 	.word	0x080198a0
 801139c:	08019edc 	.word	0x08019edc
 80113a0:	080198f4 	.word	0x080198f4

080113a4 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b082      	sub	sp, #8
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d106      	bne.n	80113c0 <tcp_rexmit_rto_commit+0x1c>
 80113b2:	4b0d      	ldr	r3, [pc, #52]	; (80113e8 <tcp_rexmit_rto_commit+0x44>)
 80113b4:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80113b8:	490c      	ldr	r1, [pc, #48]	; (80113ec <tcp_rexmit_rto_commit+0x48>)
 80113ba:	480d      	ldr	r0, [pc, #52]	; (80113f0 <tcp_rexmit_rto_commit+0x4c>)
 80113bc:	f005 fe90 	bl	80170e0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80113c0:	687b      	ldr	r3, [r7, #4]
 80113c2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80113c6:	2bff      	cmp	r3, #255	; 0xff
 80113c8:	d007      	beq.n	80113da <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80113d0:	3301      	adds	r3, #1
 80113d2:	b2da      	uxtb	r2, r3
 80113d4:	687b      	ldr	r3, [r7, #4]
 80113d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80113da:	6878      	ldr	r0, [r7, #4]
 80113dc:	f7ff fc80 	bl	8010ce0 <tcp_output>
}
 80113e0:	bf00      	nop
 80113e2:	3708      	adds	r7, #8
 80113e4:	46bd      	mov	sp, r7
 80113e6:	bd80      	pop	{r7, pc}
 80113e8:	080198a0 	.word	0x080198a0
 80113ec:	08019f00 	.word	0x08019f00
 80113f0:	080198f4 	.word	0x080198f4

080113f4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b082      	sub	sp, #8
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 80113fc:	687b      	ldr	r3, [r7, #4]
 80113fe:	2b00      	cmp	r3, #0
 8011400:	d106      	bne.n	8011410 <tcp_rexmit_rto+0x1c>
 8011402:	4b0a      	ldr	r3, [pc, #40]	; (801142c <tcp_rexmit_rto+0x38>)
 8011404:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8011408:	4909      	ldr	r1, [pc, #36]	; (8011430 <tcp_rexmit_rto+0x3c>)
 801140a:	480a      	ldr	r0, [pc, #40]	; (8011434 <tcp_rexmit_rto+0x40>)
 801140c:	f005 fe68 	bl	80170e0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8011410:	6878      	ldr	r0, [r7, #4]
 8011412:	f7ff ff57 	bl	80112c4 <tcp_rexmit_rto_prepare>
 8011416:	4603      	mov	r3, r0
 8011418:	2b00      	cmp	r3, #0
 801141a:	d102      	bne.n	8011422 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801141c:	6878      	ldr	r0, [r7, #4]
 801141e:	f7ff ffc1 	bl	80113a4 <tcp_rexmit_rto_commit>
  }
}
 8011422:	bf00      	nop
 8011424:	3708      	adds	r7, #8
 8011426:	46bd      	mov	sp, r7
 8011428:	bd80      	pop	{r7, pc}
 801142a:	bf00      	nop
 801142c:	080198a0 	.word	0x080198a0
 8011430:	08019f24 	.word	0x08019f24
 8011434:	080198f4 	.word	0x080198f4

08011438 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011438:	b590      	push	{r4, r7, lr}
 801143a:	b085      	sub	sp, #20
 801143c:	af00      	add	r7, sp, #0
 801143e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	2b00      	cmp	r3, #0
 8011444:	d106      	bne.n	8011454 <tcp_rexmit+0x1c>
 8011446:	4b2f      	ldr	r3, [pc, #188]	; (8011504 <tcp_rexmit+0xcc>)
 8011448:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801144c:	492e      	ldr	r1, [pc, #184]	; (8011508 <tcp_rexmit+0xd0>)
 801144e:	482f      	ldr	r0, [pc, #188]	; (801150c <tcp_rexmit+0xd4>)
 8011450:	f005 fe46 	bl	80170e0 <iprintf>

  if (pcb->unacked == NULL) {
 8011454:	687b      	ldr	r3, [r7, #4]
 8011456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011458:	2b00      	cmp	r3, #0
 801145a:	d102      	bne.n	8011462 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801145c:	f06f 0305 	mvn.w	r3, #5
 8011460:	e04c      	b.n	80114fc <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8011462:	687b      	ldr	r3, [r7, #4]
 8011464:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011466:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8011468:	68b8      	ldr	r0, [r7, #8]
 801146a:	f7ff fe2d 	bl	80110c8 <tcp_output_segment_busy>
 801146e:	4603      	mov	r3, r0
 8011470:	2b00      	cmp	r3, #0
 8011472:	d002      	beq.n	801147a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8011474:	f06f 0305 	mvn.w	r3, #5
 8011478:	e040      	b.n	80114fc <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801147a:	68bb      	ldr	r3, [r7, #8]
 801147c:	681a      	ldr	r2, [r3, #0]
 801147e:	687b      	ldr	r3, [r7, #4]
 8011480:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8011482:	687b      	ldr	r3, [r7, #4]
 8011484:	336c      	adds	r3, #108	; 0x6c
 8011486:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011488:	e002      	b.n	8011490 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801148a:	68fb      	ldr	r3, [r7, #12]
 801148c:	681b      	ldr	r3, [r3, #0]
 801148e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011490:	68fb      	ldr	r3, [r7, #12]
 8011492:	681b      	ldr	r3, [r3, #0]
 8011494:	2b00      	cmp	r3, #0
 8011496:	d011      	beq.n	80114bc <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	681b      	ldr	r3, [r3, #0]
 801149c:	68db      	ldr	r3, [r3, #12]
 801149e:	685b      	ldr	r3, [r3, #4]
 80114a0:	4618      	mov	r0, r3
 80114a2:	f7f9 f97a 	bl	800a79a <lwip_htonl>
 80114a6:	4604      	mov	r4, r0
 80114a8:	68bb      	ldr	r3, [r7, #8]
 80114aa:	68db      	ldr	r3, [r3, #12]
 80114ac:	685b      	ldr	r3, [r3, #4]
 80114ae:	4618      	mov	r0, r3
 80114b0:	f7f9 f973 	bl	800a79a <lwip_htonl>
 80114b4:	4603      	mov	r3, r0
 80114b6:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	dbe6      	blt.n	801148a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80114bc:	68fb      	ldr	r3, [r7, #12]
 80114be:	681a      	ldr	r2, [r3, #0]
 80114c0:	68bb      	ldr	r3, [r7, #8]
 80114c2:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	68ba      	ldr	r2, [r7, #8]
 80114c8:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80114ca:	68bb      	ldr	r3, [r7, #8]
 80114cc:	681b      	ldr	r3, [r3, #0]
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d103      	bne.n	80114da <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80114d2:	687b      	ldr	r3, [r7, #4]
 80114d4:	2200      	movs	r2, #0
 80114d6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80114da:	687b      	ldr	r3, [r7, #4]
 80114dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80114e0:	2bff      	cmp	r3, #255	; 0xff
 80114e2:	d007      	beq.n	80114f4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80114ea:	3301      	adds	r3, #1
 80114ec:	b2da      	uxtb	r2, r3
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 80114f4:	687b      	ldr	r3, [r7, #4]
 80114f6:	2200      	movs	r2, #0
 80114f8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 80114fa:	2300      	movs	r3, #0
}
 80114fc:	4618      	mov	r0, r3
 80114fe:	3714      	adds	r7, #20
 8011500:	46bd      	mov	sp, r7
 8011502:	bd90      	pop	{r4, r7, pc}
 8011504:	080198a0 	.word	0x080198a0
 8011508:	08019f40 	.word	0x08019f40
 801150c:	080198f4 	.word	0x080198f4

08011510 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011510:	b580      	push	{r7, lr}
 8011512:	b082      	sub	sp, #8
 8011514:	af00      	add	r7, sp, #0
 8011516:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8011518:	687b      	ldr	r3, [r7, #4]
 801151a:	2b00      	cmp	r3, #0
 801151c:	d106      	bne.n	801152c <tcp_rexmit_fast+0x1c>
 801151e:	4b2a      	ldr	r3, [pc, #168]	; (80115c8 <tcp_rexmit_fast+0xb8>)
 8011520:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8011524:	4929      	ldr	r1, [pc, #164]	; (80115cc <tcp_rexmit_fast+0xbc>)
 8011526:	482a      	ldr	r0, [pc, #168]	; (80115d0 <tcp_rexmit_fast+0xc0>)
 8011528:	f005 fdda 	bl	80170e0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011530:	2b00      	cmp	r3, #0
 8011532:	d045      	beq.n	80115c0 <tcp_rexmit_fast+0xb0>
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	8b5b      	ldrh	r3, [r3, #26]
 8011538:	f003 0304 	and.w	r3, r3, #4
 801153c:	2b00      	cmp	r3, #0
 801153e:	d13f      	bne.n	80115c0 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8011540:	6878      	ldr	r0, [r7, #4]
 8011542:	f7ff ff79 	bl	8011438 <tcp_rexmit>
 8011546:	4603      	mov	r3, r0
 8011548:	2b00      	cmp	r3, #0
 801154a:	d139      	bne.n	80115c0 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801154c:	687b      	ldr	r3, [r7, #4]
 801154e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8011552:	687b      	ldr	r3, [r7, #4]
 8011554:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011558:	4293      	cmp	r3, r2
 801155a:	bf28      	it	cs
 801155c:	4613      	movcs	r3, r2
 801155e:	b29b      	uxth	r3, r3
 8011560:	2b00      	cmp	r3, #0
 8011562:	da00      	bge.n	8011566 <tcp_rexmit_fast+0x56>
 8011564:	3301      	adds	r3, #1
 8011566:	105b      	asrs	r3, r3, #1
 8011568:	b29a      	uxth	r2, r3
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011576:	461a      	mov	r2, r3
 8011578:	687b      	ldr	r3, [r7, #4]
 801157a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801157c:	005b      	lsls	r3, r3, #1
 801157e:	429a      	cmp	r2, r3
 8011580:	d206      	bcs.n	8011590 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011586:	005b      	lsls	r3, r3, #1
 8011588:	b29a      	uxth	r2, r3
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011590:	687b      	ldr	r3, [r7, #4]
 8011592:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801159a:	4619      	mov	r1, r3
 801159c:	0049      	lsls	r1, r1, #1
 801159e:	440b      	add	r3, r1
 80115a0:	b29b      	uxth	r3, r3
 80115a2:	4413      	add	r3, r2
 80115a4:	b29a      	uxth	r2, r3
 80115a6:	687b      	ldr	r3, [r7, #4]
 80115a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	8b5b      	ldrh	r3, [r3, #26]
 80115b0:	f043 0304 	orr.w	r3, r3, #4
 80115b4:	b29a      	uxth	r2, r3
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	2200      	movs	r2, #0
 80115be:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80115c0:	bf00      	nop
 80115c2:	3708      	adds	r7, #8
 80115c4:	46bd      	mov	sp, r7
 80115c6:	bd80      	pop	{r7, pc}
 80115c8:	080198a0 	.word	0x080198a0
 80115cc:	08019f58 	.word	0x08019f58
 80115d0:	080198f4 	.word	0x080198f4

080115d4 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80115d4:	b580      	push	{r7, lr}
 80115d6:	b086      	sub	sp, #24
 80115d8:	af00      	add	r7, sp, #0
 80115da:	60f8      	str	r0, [r7, #12]
 80115dc:	607b      	str	r3, [r7, #4]
 80115de:	460b      	mov	r3, r1
 80115e0:	817b      	strh	r3, [r7, #10]
 80115e2:	4613      	mov	r3, r2
 80115e4:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80115e6:	897a      	ldrh	r2, [r7, #10]
 80115e8:	893b      	ldrh	r3, [r7, #8]
 80115ea:	4413      	add	r3, r2
 80115ec:	b29b      	uxth	r3, r3
 80115ee:	3314      	adds	r3, #20
 80115f0:	b29b      	uxth	r3, r3
 80115f2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80115f6:	4619      	mov	r1, r3
 80115f8:	2022      	movs	r0, #34	; 0x22
 80115fa:	f7fa fbfd 	bl	800bdf8 <pbuf_alloc>
 80115fe:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8011600:	697b      	ldr	r3, [r7, #20]
 8011602:	2b00      	cmp	r3, #0
 8011604:	d04d      	beq.n	80116a2 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011606:	897b      	ldrh	r3, [r7, #10]
 8011608:	3313      	adds	r3, #19
 801160a:	697a      	ldr	r2, [r7, #20]
 801160c:	8952      	ldrh	r2, [r2, #10]
 801160e:	4293      	cmp	r3, r2
 8011610:	db06      	blt.n	8011620 <tcp_output_alloc_header_common+0x4c>
 8011612:	4b26      	ldr	r3, [pc, #152]	; (80116ac <tcp_output_alloc_header_common+0xd8>)
 8011614:	f240 7223 	movw	r2, #1827	; 0x723
 8011618:	4925      	ldr	r1, [pc, #148]	; (80116b0 <tcp_output_alloc_header_common+0xdc>)
 801161a:	4826      	ldr	r0, [pc, #152]	; (80116b4 <tcp_output_alloc_header_common+0xe0>)
 801161c:	f005 fd60 	bl	80170e0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8011620:	697b      	ldr	r3, [r7, #20]
 8011622:	685b      	ldr	r3, [r3, #4]
 8011624:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8011626:	8c3b      	ldrh	r3, [r7, #32]
 8011628:	4618      	mov	r0, r3
 801162a:	f7f9 f8a1 	bl	800a770 <lwip_htons>
 801162e:	4603      	mov	r3, r0
 8011630:	461a      	mov	r2, r3
 8011632:	693b      	ldr	r3, [r7, #16]
 8011634:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8011636:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011638:	4618      	mov	r0, r3
 801163a:	f7f9 f899 	bl	800a770 <lwip_htons>
 801163e:	4603      	mov	r3, r0
 8011640:	461a      	mov	r2, r3
 8011642:	693b      	ldr	r3, [r7, #16]
 8011644:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	687a      	ldr	r2, [r7, #4]
 801164a:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801164c:	68f8      	ldr	r0, [r7, #12]
 801164e:	f7f9 f8a4 	bl	800a79a <lwip_htonl>
 8011652:	4602      	mov	r2, r0
 8011654:	693b      	ldr	r3, [r7, #16]
 8011656:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8011658:	897b      	ldrh	r3, [r7, #10]
 801165a:	089b      	lsrs	r3, r3, #2
 801165c:	b29b      	uxth	r3, r3
 801165e:	3305      	adds	r3, #5
 8011660:	b29b      	uxth	r3, r3
 8011662:	031b      	lsls	r3, r3, #12
 8011664:	b29a      	uxth	r2, r3
 8011666:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801166a:	b29b      	uxth	r3, r3
 801166c:	4313      	orrs	r3, r2
 801166e:	b29b      	uxth	r3, r3
 8011670:	4618      	mov	r0, r3
 8011672:	f7f9 f87d 	bl	800a770 <lwip_htons>
 8011676:	4603      	mov	r3, r0
 8011678:	461a      	mov	r2, r3
 801167a:	693b      	ldr	r3, [r7, #16]
 801167c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801167e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011680:	4618      	mov	r0, r3
 8011682:	f7f9 f875 	bl	800a770 <lwip_htons>
 8011686:	4603      	mov	r3, r0
 8011688:	461a      	mov	r2, r3
 801168a:	693b      	ldr	r3, [r7, #16]
 801168c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	2200      	movs	r2, #0
 8011692:	741a      	strb	r2, [r3, #16]
 8011694:	2200      	movs	r2, #0
 8011696:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8011698:	693b      	ldr	r3, [r7, #16]
 801169a:	2200      	movs	r2, #0
 801169c:	749a      	strb	r2, [r3, #18]
 801169e:	2200      	movs	r2, #0
 80116a0:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80116a2:	697b      	ldr	r3, [r7, #20]
}
 80116a4:	4618      	mov	r0, r3
 80116a6:	3718      	adds	r7, #24
 80116a8:	46bd      	mov	sp, r7
 80116aa:	bd80      	pop	{r7, pc}
 80116ac:	080198a0 	.word	0x080198a0
 80116b0:	08019f78 	.word	0x08019f78
 80116b4:	080198f4 	.word	0x080198f4

080116b8 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80116b8:	b5b0      	push	{r4, r5, r7, lr}
 80116ba:	b08a      	sub	sp, #40	; 0x28
 80116bc:	af04      	add	r7, sp, #16
 80116be:	60f8      	str	r0, [r7, #12]
 80116c0:	607b      	str	r3, [r7, #4]
 80116c2:	460b      	mov	r3, r1
 80116c4:	817b      	strh	r3, [r7, #10]
 80116c6:	4613      	mov	r3, r2
 80116c8:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80116ca:	68fb      	ldr	r3, [r7, #12]
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d106      	bne.n	80116de <tcp_output_alloc_header+0x26>
 80116d0:	4b15      	ldr	r3, [pc, #84]	; (8011728 <tcp_output_alloc_header+0x70>)
 80116d2:	f240 7242 	movw	r2, #1858	; 0x742
 80116d6:	4915      	ldr	r1, [pc, #84]	; (801172c <tcp_output_alloc_header+0x74>)
 80116d8:	4815      	ldr	r0, [pc, #84]	; (8011730 <tcp_output_alloc_header+0x78>)
 80116da:	f005 fd01 	bl	80170e0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	8adb      	ldrh	r3, [r3, #22]
 80116e6:	68fa      	ldr	r2, [r7, #12]
 80116e8:	8b12      	ldrh	r2, [r2, #24]
 80116ea:	68f9      	ldr	r1, [r7, #12]
 80116ec:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80116ee:	893d      	ldrh	r5, [r7, #8]
 80116f0:	897c      	ldrh	r4, [r7, #10]
 80116f2:	9103      	str	r1, [sp, #12]
 80116f4:	2110      	movs	r1, #16
 80116f6:	9102      	str	r1, [sp, #8]
 80116f8:	9201      	str	r2, [sp, #4]
 80116fa:	9300      	str	r3, [sp, #0]
 80116fc:	687b      	ldr	r3, [r7, #4]
 80116fe:	462a      	mov	r2, r5
 8011700:	4621      	mov	r1, r4
 8011702:	f7ff ff67 	bl	80115d4 <tcp_output_alloc_header_common>
 8011706:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8011708:	697b      	ldr	r3, [r7, #20]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d006      	beq.n	801171c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011712:	68fa      	ldr	r2, [r7, #12]
 8011714:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011716:	441a      	add	r2, r3
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801171c:	697b      	ldr	r3, [r7, #20]
}
 801171e:	4618      	mov	r0, r3
 8011720:	3718      	adds	r7, #24
 8011722:	46bd      	mov	sp, r7
 8011724:	bdb0      	pop	{r4, r5, r7, pc}
 8011726:	bf00      	nop
 8011728:	080198a0 	.word	0x080198a0
 801172c:	08019fa8 	.word	0x08019fa8
 8011730:	080198f4 	.word	0x080198f4

08011734 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011734:	b580      	push	{r7, lr}
 8011736:	b088      	sub	sp, #32
 8011738:	af00      	add	r7, sp, #0
 801173a:	60f8      	str	r0, [r7, #12]
 801173c:	60b9      	str	r1, [r7, #8]
 801173e:	4611      	mov	r1, r2
 8011740:	461a      	mov	r2, r3
 8011742:	460b      	mov	r3, r1
 8011744:	71fb      	strb	r3, [r7, #7]
 8011746:	4613      	mov	r3, r2
 8011748:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801174a:	2300      	movs	r3, #0
 801174c:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801174e:	68bb      	ldr	r3, [r7, #8]
 8011750:	2b00      	cmp	r3, #0
 8011752:	d106      	bne.n	8011762 <tcp_output_fill_options+0x2e>
 8011754:	4b13      	ldr	r3, [pc, #76]	; (80117a4 <tcp_output_fill_options+0x70>)
 8011756:	f240 7256 	movw	r2, #1878	; 0x756
 801175a:	4913      	ldr	r1, [pc, #76]	; (80117a8 <tcp_output_fill_options+0x74>)
 801175c:	4813      	ldr	r0, [pc, #76]	; (80117ac <tcp_output_fill_options+0x78>)
 801175e:	f005 fcbf 	bl	80170e0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011762:	68bb      	ldr	r3, [r7, #8]
 8011764:	685b      	ldr	r3, [r3, #4]
 8011766:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8011768:	69bb      	ldr	r3, [r7, #24]
 801176a:	3314      	adds	r3, #20
 801176c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801176e:	69bb      	ldr	r3, [r7, #24]
 8011770:	f103 0214 	add.w	r2, r3, #20
 8011774:	8bfb      	ldrh	r3, [r7, #30]
 8011776:	009b      	lsls	r3, r3, #2
 8011778:	4619      	mov	r1, r3
 801177a:	79fb      	ldrb	r3, [r7, #7]
 801177c:	009b      	lsls	r3, r3, #2
 801177e:	f003 0304 	and.w	r3, r3, #4
 8011782:	440b      	add	r3, r1
 8011784:	4413      	add	r3, r2
 8011786:	697a      	ldr	r2, [r7, #20]
 8011788:	429a      	cmp	r2, r3
 801178a:	d006      	beq.n	801179a <tcp_output_fill_options+0x66>
 801178c:	4b05      	ldr	r3, [pc, #20]	; (80117a4 <tcp_output_fill_options+0x70>)
 801178e:	f240 7275 	movw	r2, #1909	; 0x775
 8011792:	4907      	ldr	r1, [pc, #28]	; (80117b0 <tcp_output_fill_options+0x7c>)
 8011794:	4805      	ldr	r0, [pc, #20]	; (80117ac <tcp_output_fill_options+0x78>)
 8011796:	f005 fca3 	bl	80170e0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801179a:	bf00      	nop
 801179c:	3720      	adds	r7, #32
 801179e:	46bd      	mov	sp, r7
 80117a0:	bd80      	pop	{r7, pc}
 80117a2:	bf00      	nop
 80117a4:	080198a0 	.word	0x080198a0
 80117a8:	08019fd0 	.word	0x08019fd0
 80117ac:	080198f4 	.word	0x080198f4
 80117b0:	08019ec8 	.word	0x08019ec8

080117b4 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b08a      	sub	sp, #40	; 0x28
 80117b8:	af04      	add	r7, sp, #16
 80117ba:	60f8      	str	r0, [r7, #12]
 80117bc:	60b9      	str	r1, [r7, #8]
 80117be:	607a      	str	r2, [r7, #4]
 80117c0:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80117c2:	68bb      	ldr	r3, [r7, #8]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d106      	bne.n	80117d6 <tcp_output_control_segment+0x22>
 80117c8:	4b1c      	ldr	r3, [pc, #112]	; (801183c <tcp_output_control_segment+0x88>)
 80117ca:	f240 7287 	movw	r2, #1927	; 0x787
 80117ce:	491c      	ldr	r1, [pc, #112]	; (8011840 <tcp_output_control_segment+0x8c>)
 80117d0:	481c      	ldr	r0, [pc, #112]	; (8011844 <tcp_output_control_segment+0x90>)
 80117d2:	f005 fc85 	bl	80170e0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80117d6:	683a      	ldr	r2, [r7, #0]
 80117d8:	6879      	ldr	r1, [r7, #4]
 80117da:	68f8      	ldr	r0, [r7, #12]
 80117dc:	f7fe ff40 	bl	8010660 <tcp_route>
 80117e0:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80117e2:	693b      	ldr	r3, [r7, #16]
 80117e4:	2b00      	cmp	r3, #0
 80117e6:	d102      	bne.n	80117ee <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80117e8:	23fc      	movs	r3, #252	; 0xfc
 80117ea:	75fb      	strb	r3, [r7, #23]
 80117ec:	e01c      	b.n	8011828 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	2b00      	cmp	r3, #0
 80117f2:	d006      	beq.n	8011802 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	7adb      	ldrb	r3, [r3, #11]
 80117f8:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80117fa:	68fb      	ldr	r3, [r7, #12]
 80117fc:	7a9b      	ldrb	r3, [r3, #10]
 80117fe:	757b      	strb	r3, [r7, #21]
 8011800:	e003      	b.n	801180a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011802:	23ff      	movs	r3, #255	; 0xff
 8011804:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8011806:	2300      	movs	r3, #0
 8011808:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801180a:	7dba      	ldrb	r2, [r7, #22]
 801180c:	693b      	ldr	r3, [r7, #16]
 801180e:	9302      	str	r3, [sp, #8]
 8011810:	2306      	movs	r3, #6
 8011812:	9301      	str	r3, [sp, #4]
 8011814:	7d7b      	ldrb	r3, [r7, #21]
 8011816:	9300      	str	r3, [sp, #0]
 8011818:	4613      	mov	r3, r2
 801181a:	683a      	ldr	r2, [r7, #0]
 801181c:	6879      	ldr	r1, [r7, #4]
 801181e:	68b8      	ldr	r0, [r7, #8]
 8011820:	f004 f958 	bl	8015ad4 <ip4_output_if>
 8011824:	4603      	mov	r3, r0
 8011826:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8011828:	68b8      	ldr	r0, [r7, #8]
 801182a:	f7fa fdc9 	bl	800c3c0 <pbuf_free>
  return err;
 801182e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011832:	4618      	mov	r0, r3
 8011834:	3718      	adds	r7, #24
 8011836:	46bd      	mov	sp, r7
 8011838:	bd80      	pop	{r7, pc}
 801183a:	bf00      	nop
 801183c:	080198a0 	.word	0x080198a0
 8011840:	08019ff8 	.word	0x08019ff8
 8011844:	080198f4 	.word	0x080198f4

08011848 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8011848:	b590      	push	{r4, r7, lr}
 801184a:	b08b      	sub	sp, #44	; 0x2c
 801184c:	af04      	add	r7, sp, #16
 801184e:	60f8      	str	r0, [r7, #12]
 8011850:	60b9      	str	r1, [r7, #8]
 8011852:	607a      	str	r2, [r7, #4]
 8011854:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	2b00      	cmp	r3, #0
 801185a:	d106      	bne.n	801186a <tcp_rst+0x22>
 801185c:	4b1f      	ldr	r3, [pc, #124]	; (80118dc <tcp_rst+0x94>)
 801185e:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011862:	491f      	ldr	r1, [pc, #124]	; (80118e0 <tcp_rst+0x98>)
 8011864:	481f      	ldr	r0, [pc, #124]	; (80118e4 <tcp_rst+0x9c>)
 8011866:	f005 fc3b 	bl	80170e0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801186a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801186c:	2b00      	cmp	r3, #0
 801186e:	d106      	bne.n	801187e <tcp_rst+0x36>
 8011870:	4b1a      	ldr	r3, [pc, #104]	; (80118dc <tcp_rst+0x94>)
 8011872:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8011876:	491c      	ldr	r1, [pc, #112]	; (80118e8 <tcp_rst+0xa0>)
 8011878:	481a      	ldr	r0, [pc, #104]	; (80118e4 <tcp_rst+0x9c>)
 801187a:	f005 fc31 	bl	80170e0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801187e:	2300      	movs	r3, #0
 8011880:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8011882:	f246 0308 	movw	r3, #24584	; 0x6008
 8011886:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011888:	7dfb      	ldrb	r3, [r7, #23]
 801188a:	b29c      	uxth	r4, r3
 801188c:	68b8      	ldr	r0, [r7, #8]
 801188e:	f7f8 ff84 	bl	800a79a <lwip_htonl>
 8011892:	4602      	mov	r2, r0
 8011894:	8abb      	ldrh	r3, [r7, #20]
 8011896:	9303      	str	r3, [sp, #12]
 8011898:	2314      	movs	r3, #20
 801189a:	9302      	str	r3, [sp, #8]
 801189c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801189e:	9301      	str	r3, [sp, #4]
 80118a0:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80118a2:	9300      	str	r3, [sp, #0]
 80118a4:	4613      	mov	r3, r2
 80118a6:	2200      	movs	r2, #0
 80118a8:	4621      	mov	r1, r4
 80118aa:	6878      	ldr	r0, [r7, #4]
 80118ac:	f7ff fe92 	bl	80115d4 <tcp_output_alloc_header_common>
 80118b0:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80118b2:	693b      	ldr	r3, [r7, #16]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d00c      	beq.n	80118d2 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80118b8:	7dfb      	ldrb	r3, [r7, #23]
 80118ba:	2200      	movs	r2, #0
 80118bc:	6939      	ldr	r1, [r7, #16]
 80118be:	68f8      	ldr	r0, [r7, #12]
 80118c0:	f7ff ff38 	bl	8011734 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80118c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80118c6:	683a      	ldr	r2, [r7, #0]
 80118c8:	6939      	ldr	r1, [r7, #16]
 80118ca:	68f8      	ldr	r0, [r7, #12]
 80118cc:	f7ff ff72 	bl	80117b4 <tcp_output_control_segment>
 80118d0:	e000      	b.n	80118d4 <tcp_rst+0x8c>
    return;
 80118d2:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80118d4:	371c      	adds	r7, #28
 80118d6:	46bd      	mov	sp, r7
 80118d8:	bd90      	pop	{r4, r7, pc}
 80118da:	bf00      	nop
 80118dc:	080198a0 	.word	0x080198a0
 80118e0:	0801a024 	.word	0x0801a024
 80118e4:	080198f4 	.word	0x080198f4
 80118e8:	0801a040 	.word	0x0801a040

080118ec <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80118ec:	b590      	push	{r4, r7, lr}
 80118ee:	b087      	sub	sp, #28
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80118f4:	2300      	movs	r3, #0
 80118f6:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80118f8:	2300      	movs	r3, #0
 80118fa:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d106      	bne.n	8011910 <tcp_send_empty_ack+0x24>
 8011902:	4b28      	ldr	r3, [pc, #160]	; (80119a4 <tcp_send_empty_ack+0xb8>)
 8011904:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011908:	4927      	ldr	r1, [pc, #156]	; (80119a8 <tcp_send_empty_ack+0xbc>)
 801190a:	4828      	ldr	r0, [pc, #160]	; (80119ac <tcp_send_empty_ack+0xc0>)
 801190c:	f005 fbe8 	bl	80170e0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011910:	7dfb      	ldrb	r3, [r7, #23]
 8011912:	009b      	lsls	r3, r3, #2
 8011914:	b2db      	uxtb	r3, r3
 8011916:	f003 0304 	and.w	r3, r3, #4
 801191a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801191c:	7d7b      	ldrb	r3, [r7, #21]
 801191e:	b29c      	uxth	r4, r3
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011924:	4618      	mov	r0, r3
 8011926:	f7f8 ff38 	bl	800a79a <lwip_htonl>
 801192a:	4603      	mov	r3, r0
 801192c:	2200      	movs	r2, #0
 801192e:	4621      	mov	r1, r4
 8011930:	6878      	ldr	r0, [r7, #4]
 8011932:	f7ff fec1 	bl	80116b8 <tcp_output_alloc_header>
 8011936:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011938:	693b      	ldr	r3, [r7, #16]
 801193a:	2b00      	cmp	r3, #0
 801193c:	d109      	bne.n	8011952 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	8b5b      	ldrh	r3, [r3, #26]
 8011942:	f043 0303 	orr.w	r3, r3, #3
 8011946:	b29a      	uxth	r2, r3
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801194c:	f06f 0301 	mvn.w	r3, #1
 8011950:	e023      	b.n	801199a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011952:	7dbb      	ldrb	r3, [r7, #22]
 8011954:	7dfa      	ldrb	r2, [r7, #23]
 8011956:	6939      	ldr	r1, [r7, #16]
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f7ff feeb 	bl	8011734 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801195e:	687a      	ldr	r2, [r7, #4]
 8011960:	687b      	ldr	r3, [r7, #4]
 8011962:	3304      	adds	r3, #4
 8011964:	6939      	ldr	r1, [r7, #16]
 8011966:	6878      	ldr	r0, [r7, #4]
 8011968:	f7ff ff24 	bl	80117b4 <tcp_output_control_segment>
 801196c:	4603      	mov	r3, r0
 801196e:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011974:	2b00      	cmp	r3, #0
 8011976:	d007      	beq.n	8011988 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011978:	687b      	ldr	r3, [r7, #4]
 801197a:	8b5b      	ldrh	r3, [r3, #26]
 801197c:	f043 0303 	orr.w	r3, r3, #3
 8011980:	b29a      	uxth	r2, r3
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	835a      	strh	r2, [r3, #26]
 8011986:	e006      	b.n	8011996 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	8b5b      	ldrh	r3, [r3, #26]
 801198c:	f023 0303 	bic.w	r3, r3, #3
 8011990:	b29a      	uxth	r2, r3
 8011992:	687b      	ldr	r3, [r7, #4]
 8011994:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011996:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801199a:	4618      	mov	r0, r3
 801199c:	371c      	adds	r7, #28
 801199e:	46bd      	mov	sp, r7
 80119a0:	bd90      	pop	{r4, r7, pc}
 80119a2:	bf00      	nop
 80119a4:	080198a0 	.word	0x080198a0
 80119a8:	0801a05c 	.word	0x0801a05c
 80119ac:	080198f4 	.word	0x080198f4

080119b0 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80119b0:	b590      	push	{r4, r7, lr}
 80119b2:	b087      	sub	sp, #28
 80119b4:	af00      	add	r7, sp, #0
 80119b6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80119b8:	2300      	movs	r3, #0
 80119ba:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d106      	bne.n	80119d0 <tcp_keepalive+0x20>
 80119c2:	4b18      	ldr	r3, [pc, #96]	; (8011a24 <tcp_keepalive+0x74>)
 80119c4:	f640 0224 	movw	r2, #2084	; 0x824
 80119c8:	4917      	ldr	r1, [pc, #92]	; (8011a28 <tcp_keepalive+0x78>)
 80119ca:	4818      	ldr	r0, [pc, #96]	; (8011a2c <tcp_keepalive+0x7c>)
 80119cc:	f005 fb88 	bl	80170e0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80119d0:	7dfb      	ldrb	r3, [r7, #23]
 80119d2:	b29c      	uxth	r4, r3
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80119d8:	3b01      	subs	r3, #1
 80119da:	4618      	mov	r0, r3
 80119dc:	f7f8 fedd 	bl	800a79a <lwip_htonl>
 80119e0:	4603      	mov	r3, r0
 80119e2:	2200      	movs	r2, #0
 80119e4:	4621      	mov	r1, r4
 80119e6:	6878      	ldr	r0, [r7, #4]
 80119e8:	f7ff fe66 	bl	80116b8 <tcp_output_alloc_header>
 80119ec:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80119ee:	693b      	ldr	r3, [r7, #16]
 80119f0:	2b00      	cmp	r3, #0
 80119f2:	d102      	bne.n	80119fa <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80119f4:	f04f 33ff 	mov.w	r3, #4294967295
 80119f8:	e010      	b.n	8011a1c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80119fa:	7dfb      	ldrb	r3, [r7, #23]
 80119fc:	2200      	movs	r2, #0
 80119fe:	6939      	ldr	r1, [r7, #16]
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f7ff fe97 	bl	8011734 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011a06:	687a      	ldr	r2, [r7, #4]
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	3304      	adds	r3, #4
 8011a0c:	6939      	ldr	r1, [r7, #16]
 8011a0e:	6878      	ldr	r0, [r7, #4]
 8011a10:	f7ff fed0 	bl	80117b4 <tcp_output_control_segment>
 8011a14:	4603      	mov	r3, r0
 8011a16:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011a1c:	4618      	mov	r0, r3
 8011a1e:	371c      	adds	r7, #28
 8011a20:	46bd      	mov	sp, r7
 8011a22:	bd90      	pop	{r4, r7, pc}
 8011a24:	080198a0 	.word	0x080198a0
 8011a28:	0801a07c 	.word	0x0801a07c
 8011a2c:	080198f4 	.word	0x080198f4

08011a30 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011a30:	b590      	push	{r4, r7, lr}
 8011a32:	b08b      	sub	sp, #44	; 0x2c
 8011a34:	af00      	add	r7, sp, #0
 8011a36:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011a38:	2300      	movs	r3, #0
 8011a3a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d106      	bne.n	8011a52 <tcp_zero_window_probe+0x22>
 8011a44:	4b4c      	ldr	r3, [pc, #304]	; (8011b78 <tcp_zero_window_probe+0x148>)
 8011a46:	f640 024f 	movw	r2, #2127	; 0x84f
 8011a4a:	494c      	ldr	r1, [pc, #304]	; (8011b7c <tcp_zero_window_probe+0x14c>)
 8011a4c:	484c      	ldr	r0, [pc, #304]	; (8011b80 <tcp_zero_window_probe+0x150>)
 8011a4e:	f005 fb47 	bl	80170e0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011a52:	687b      	ldr	r3, [r7, #4]
 8011a54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a56:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8011a58:	6a3b      	ldr	r3, [r7, #32]
 8011a5a:	2b00      	cmp	r3, #0
 8011a5c:	d101      	bne.n	8011a62 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	e086      	b.n	8011b70 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011a62:	687b      	ldr	r3, [r7, #4]
 8011a64:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011a68:	2bff      	cmp	r3, #255	; 0xff
 8011a6a:	d007      	beq.n	8011a7c <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011a6c:	687b      	ldr	r3, [r7, #4]
 8011a6e:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011a72:	3301      	adds	r3, #1
 8011a74:	b2da      	uxtb	r2, r3
 8011a76:	687b      	ldr	r3, [r7, #4]
 8011a78:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011a7c:	6a3b      	ldr	r3, [r7, #32]
 8011a7e:	68db      	ldr	r3, [r3, #12]
 8011a80:	899b      	ldrh	r3, [r3, #12]
 8011a82:	b29b      	uxth	r3, r3
 8011a84:	4618      	mov	r0, r3
 8011a86:	f7f8 fe73 	bl	800a770 <lwip_htons>
 8011a8a:	4603      	mov	r3, r0
 8011a8c:	b2db      	uxtb	r3, r3
 8011a8e:	f003 0301 	and.w	r3, r3, #1
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d005      	beq.n	8011aa2 <tcp_zero_window_probe+0x72>
 8011a96:	6a3b      	ldr	r3, [r7, #32]
 8011a98:	891b      	ldrh	r3, [r3, #8]
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d101      	bne.n	8011aa2 <tcp_zero_window_probe+0x72>
 8011a9e:	2301      	movs	r3, #1
 8011aa0:	e000      	b.n	8011aa4 <tcp_zero_window_probe+0x74>
 8011aa2:	2300      	movs	r3, #0
 8011aa4:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011aa6:	7ffb      	ldrb	r3, [r7, #31]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	bf0c      	ite	eq
 8011aac:	2301      	moveq	r3, #1
 8011aae:	2300      	movne	r3, #0
 8011ab0:	b2db      	uxtb	r3, r3
 8011ab2:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011ab4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ab8:	b299      	uxth	r1, r3
 8011aba:	6a3b      	ldr	r3, [r7, #32]
 8011abc:	68db      	ldr	r3, [r3, #12]
 8011abe:	685b      	ldr	r3, [r3, #4]
 8011ac0:	8bba      	ldrh	r2, [r7, #28]
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f7ff fdf8 	bl	80116b8 <tcp_output_alloc_header>
 8011ac8:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011aca:	69bb      	ldr	r3, [r7, #24]
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d102      	bne.n	8011ad6 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8011ad4:	e04c      	b.n	8011b70 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011ad6:	69bb      	ldr	r3, [r7, #24]
 8011ad8:	685b      	ldr	r3, [r3, #4]
 8011ada:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011adc:	7ffb      	ldrb	r3, [r7, #31]
 8011ade:	2b00      	cmp	r3, #0
 8011ae0:	d011      	beq.n	8011b06 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011ae2:	697b      	ldr	r3, [r7, #20]
 8011ae4:	899b      	ldrh	r3, [r3, #12]
 8011ae6:	b29b      	uxth	r3, r3
 8011ae8:	b21b      	sxth	r3, r3
 8011aea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011aee:	b21c      	sxth	r4, r3
 8011af0:	2011      	movs	r0, #17
 8011af2:	f7f8 fe3d 	bl	800a770 <lwip_htons>
 8011af6:	4603      	mov	r3, r0
 8011af8:	b21b      	sxth	r3, r3
 8011afa:	4323      	orrs	r3, r4
 8011afc:	b21b      	sxth	r3, r3
 8011afe:	b29a      	uxth	r2, r3
 8011b00:	697b      	ldr	r3, [r7, #20]
 8011b02:	819a      	strh	r2, [r3, #12]
 8011b04:	e010      	b.n	8011b28 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011b06:	69bb      	ldr	r3, [r7, #24]
 8011b08:	685b      	ldr	r3, [r3, #4]
 8011b0a:	3314      	adds	r3, #20
 8011b0c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011b0e:	6a3b      	ldr	r3, [r7, #32]
 8011b10:	6858      	ldr	r0, [r3, #4]
 8011b12:	6a3b      	ldr	r3, [r7, #32]
 8011b14:	685b      	ldr	r3, [r3, #4]
 8011b16:	891a      	ldrh	r2, [r3, #8]
 8011b18:	6a3b      	ldr	r3, [r7, #32]
 8011b1a:	891b      	ldrh	r3, [r3, #8]
 8011b1c:	1ad3      	subs	r3, r2, r3
 8011b1e:	b29b      	uxth	r3, r3
 8011b20:	2201      	movs	r2, #1
 8011b22:	6939      	ldr	r1, [r7, #16]
 8011b24:	f7fa fe52 	bl	800c7cc <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011b28:	6a3b      	ldr	r3, [r7, #32]
 8011b2a:	68db      	ldr	r3, [r3, #12]
 8011b2c:	685b      	ldr	r3, [r3, #4]
 8011b2e:	4618      	mov	r0, r3
 8011b30:	f7f8 fe33 	bl	800a79a <lwip_htonl>
 8011b34:	4603      	mov	r3, r0
 8011b36:	3301      	adds	r3, #1
 8011b38:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011b3e:	68fb      	ldr	r3, [r7, #12]
 8011b40:	1ad3      	subs	r3, r2, r3
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	da02      	bge.n	8011b4c <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	68fa      	ldr	r2, [r7, #12]
 8011b4a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011b4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b50:	2200      	movs	r2, #0
 8011b52:	69b9      	ldr	r1, [r7, #24]
 8011b54:	6878      	ldr	r0, [r7, #4]
 8011b56:	f7ff fded 	bl	8011734 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011b5a:	687a      	ldr	r2, [r7, #4]
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	3304      	adds	r3, #4
 8011b60:	69b9      	ldr	r1, [r7, #24]
 8011b62:	6878      	ldr	r0, [r7, #4]
 8011b64:	f7ff fe26 	bl	80117b4 <tcp_output_control_segment>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011b6c:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011b70:	4618      	mov	r0, r3
 8011b72:	372c      	adds	r7, #44	; 0x2c
 8011b74:	46bd      	mov	sp, r7
 8011b76:	bd90      	pop	{r4, r7, pc}
 8011b78:	080198a0 	.word	0x080198a0
 8011b7c:	0801a098 	.word	0x0801a098
 8011b80:	080198f4 	.word	0x080198f4

08011b84 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011b84:	b580      	push	{r7, lr}
 8011b86:	b082      	sub	sp, #8
 8011b88:	af00      	add	r7, sp, #0
 8011b8a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011b8c:	f7fa ff0c 	bl	800c9a8 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011b90:	4b0a      	ldr	r3, [pc, #40]	; (8011bbc <tcpip_tcp_timer+0x38>)
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d103      	bne.n	8011ba0 <tcpip_tcp_timer+0x1c>
 8011b98:	4b09      	ldr	r3, [pc, #36]	; (8011bc0 <tcpip_tcp_timer+0x3c>)
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d005      	beq.n	8011bac <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	4908      	ldr	r1, [pc, #32]	; (8011bc4 <tcpip_tcp_timer+0x40>)
 8011ba4:	20fa      	movs	r0, #250	; 0xfa
 8011ba6:	f000 f8f3 	bl	8011d90 <sys_timeout>
 8011baa:	e003      	b.n	8011bb4 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011bac:	4b06      	ldr	r3, [pc, #24]	; (8011bc8 <tcpip_tcp_timer+0x44>)
 8011bae:	2200      	movs	r2, #0
 8011bb0:	601a      	str	r2, [r3, #0]
  }
}
 8011bb2:	bf00      	nop
 8011bb4:	bf00      	nop
 8011bb6:	3708      	adds	r7, #8
 8011bb8:	46bd      	mov	sp, r7
 8011bba:	bd80      	pop	{r7, pc}
 8011bbc:	2000f26c 	.word	0x2000f26c
 8011bc0:	2000f270 	.word	0x2000f270
 8011bc4:	08011b85 	.word	0x08011b85
 8011bc8:	2000f2b8 	.word	0x2000f2b8

08011bcc <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011bcc:	b580      	push	{r7, lr}
 8011bce:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011bd0:	4b0a      	ldr	r3, [pc, #40]	; (8011bfc <tcp_timer_needed+0x30>)
 8011bd2:	681b      	ldr	r3, [r3, #0]
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d10f      	bne.n	8011bf8 <tcp_timer_needed+0x2c>
 8011bd8:	4b09      	ldr	r3, [pc, #36]	; (8011c00 <tcp_timer_needed+0x34>)
 8011bda:	681b      	ldr	r3, [r3, #0]
 8011bdc:	2b00      	cmp	r3, #0
 8011bde:	d103      	bne.n	8011be8 <tcp_timer_needed+0x1c>
 8011be0:	4b08      	ldr	r3, [pc, #32]	; (8011c04 <tcp_timer_needed+0x38>)
 8011be2:	681b      	ldr	r3, [r3, #0]
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d007      	beq.n	8011bf8 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011be8:	4b04      	ldr	r3, [pc, #16]	; (8011bfc <tcp_timer_needed+0x30>)
 8011bea:	2201      	movs	r2, #1
 8011bec:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011bee:	2200      	movs	r2, #0
 8011bf0:	4905      	ldr	r1, [pc, #20]	; (8011c08 <tcp_timer_needed+0x3c>)
 8011bf2:	20fa      	movs	r0, #250	; 0xfa
 8011bf4:	f000 f8cc 	bl	8011d90 <sys_timeout>
  }
}
 8011bf8:	bf00      	nop
 8011bfa:	bd80      	pop	{r7, pc}
 8011bfc:	2000f2b8 	.word	0x2000f2b8
 8011c00:	2000f26c 	.word	0x2000f26c
 8011c04:	2000f270 	.word	0x2000f270
 8011c08:	08011b85 	.word	0x08011b85

08011c0c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011c0c:	b580      	push	{r7, lr}
 8011c0e:	b086      	sub	sp, #24
 8011c10:	af00      	add	r7, sp, #0
 8011c12:	60f8      	str	r0, [r7, #12]
 8011c14:	60b9      	str	r1, [r7, #8]
 8011c16:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011c18:	200a      	movs	r0, #10
 8011c1a:	f7f9 fa81 	bl	800b120 <memp_malloc>
 8011c1e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011c20:	693b      	ldr	r3, [r7, #16]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	d109      	bne.n	8011c3a <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8011c26:	693b      	ldr	r3, [r7, #16]
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d151      	bne.n	8011cd0 <sys_timeout_abs+0xc4>
 8011c2c:	4b2a      	ldr	r3, [pc, #168]	; (8011cd8 <sys_timeout_abs+0xcc>)
 8011c2e:	22be      	movs	r2, #190	; 0xbe
 8011c30:	492a      	ldr	r1, [pc, #168]	; (8011cdc <sys_timeout_abs+0xd0>)
 8011c32:	482b      	ldr	r0, [pc, #172]	; (8011ce0 <sys_timeout_abs+0xd4>)
 8011c34:	f005 fa54 	bl	80170e0 <iprintf>
    return;
 8011c38:	e04a      	b.n	8011cd0 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8011c3a:	693b      	ldr	r3, [r7, #16]
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011c40:	693b      	ldr	r3, [r7, #16]
 8011c42:	68ba      	ldr	r2, [r7, #8]
 8011c44:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8011c46:	693b      	ldr	r3, [r7, #16]
 8011c48:	687a      	ldr	r2, [r7, #4]
 8011c4a:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011c4c:	693b      	ldr	r3, [r7, #16]
 8011c4e:	68fa      	ldr	r2, [r7, #12]
 8011c50:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011c52:	4b24      	ldr	r3, [pc, #144]	; (8011ce4 <sys_timeout_abs+0xd8>)
 8011c54:	681b      	ldr	r3, [r3, #0]
 8011c56:	2b00      	cmp	r3, #0
 8011c58:	d103      	bne.n	8011c62 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8011c5a:	4a22      	ldr	r2, [pc, #136]	; (8011ce4 <sys_timeout_abs+0xd8>)
 8011c5c:	693b      	ldr	r3, [r7, #16]
 8011c5e:	6013      	str	r3, [r2, #0]
    return;
 8011c60:	e037      	b.n	8011cd2 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011c62:	693b      	ldr	r3, [r7, #16]
 8011c64:	685a      	ldr	r2, [r3, #4]
 8011c66:	4b1f      	ldr	r3, [pc, #124]	; (8011ce4 <sys_timeout_abs+0xd8>)
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	685b      	ldr	r3, [r3, #4]
 8011c6c:	1ad3      	subs	r3, r2, r3
 8011c6e:	0fdb      	lsrs	r3, r3, #31
 8011c70:	f003 0301 	and.w	r3, r3, #1
 8011c74:	b2db      	uxtb	r3, r3
 8011c76:	2b00      	cmp	r3, #0
 8011c78:	d007      	beq.n	8011c8a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8011c7a:	4b1a      	ldr	r3, [pc, #104]	; (8011ce4 <sys_timeout_abs+0xd8>)
 8011c7c:	681a      	ldr	r2, [r3, #0]
 8011c7e:	693b      	ldr	r3, [r7, #16]
 8011c80:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8011c82:	4a18      	ldr	r2, [pc, #96]	; (8011ce4 <sys_timeout_abs+0xd8>)
 8011c84:	693b      	ldr	r3, [r7, #16]
 8011c86:	6013      	str	r3, [r2, #0]
 8011c88:	e023      	b.n	8011cd2 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011c8a:	4b16      	ldr	r3, [pc, #88]	; (8011ce4 <sys_timeout_abs+0xd8>)
 8011c8c:	681b      	ldr	r3, [r3, #0]
 8011c8e:	617b      	str	r3, [r7, #20]
 8011c90:	e01a      	b.n	8011cc8 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8011c92:	697b      	ldr	r3, [r7, #20]
 8011c94:	681b      	ldr	r3, [r3, #0]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d00b      	beq.n	8011cb2 <sys_timeout_abs+0xa6>
 8011c9a:	693b      	ldr	r3, [r7, #16]
 8011c9c:	685a      	ldr	r2, [r3, #4]
 8011c9e:	697b      	ldr	r3, [r7, #20]
 8011ca0:	681b      	ldr	r3, [r3, #0]
 8011ca2:	685b      	ldr	r3, [r3, #4]
 8011ca4:	1ad3      	subs	r3, r2, r3
 8011ca6:	0fdb      	lsrs	r3, r3, #31
 8011ca8:	f003 0301 	and.w	r3, r3, #1
 8011cac:	b2db      	uxtb	r3, r3
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d007      	beq.n	8011cc2 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8011cb2:	697b      	ldr	r3, [r7, #20]
 8011cb4:	681a      	ldr	r2, [r3, #0]
 8011cb6:	693b      	ldr	r3, [r7, #16]
 8011cb8:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011cba:	697b      	ldr	r3, [r7, #20]
 8011cbc:	693a      	ldr	r2, [r7, #16]
 8011cbe:	601a      	str	r2, [r3, #0]
        break;
 8011cc0:	e007      	b.n	8011cd2 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8011cc2:	697b      	ldr	r3, [r7, #20]
 8011cc4:	681b      	ldr	r3, [r3, #0]
 8011cc6:	617b      	str	r3, [r7, #20]
 8011cc8:	697b      	ldr	r3, [r7, #20]
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d1e1      	bne.n	8011c92 <sys_timeout_abs+0x86>
 8011cce:	e000      	b.n	8011cd2 <sys_timeout_abs+0xc6>
    return;
 8011cd0:	bf00      	nop
      }
    }
  }
}
 8011cd2:	3718      	adds	r7, #24
 8011cd4:	46bd      	mov	sp, r7
 8011cd6:	bd80      	pop	{r7, pc}
 8011cd8:	0801a0bc 	.word	0x0801a0bc
 8011cdc:	0801a0f0 	.word	0x0801a0f0
 8011ce0:	0801a130 	.word	0x0801a130
 8011ce4:	2000f2b0 	.word	0x2000f2b0

08011ce8 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011ce8:	b580      	push	{r7, lr}
 8011cea:	b086      	sub	sp, #24
 8011cec:	af00      	add	r7, sp, #0
 8011cee:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011cf4:	697b      	ldr	r3, [r7, #20]
 8011cf6:	685b      	ldr	r3, [r3, #4]
 8011cf8:	4798      	blx	r3

  now = sys_now();
 8011cfa:	f7f4 f8fd 	bl	8005ef8 <sys_now>
 8011cfe:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	681a      	ldr	r2, [r3, #0]
 8011d04:	4b0f      	ldr	r3, [pc, #60]	; (8011d44 <lwip_cyclic_timer+0x5c>)
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	4413      	add	r3, r2
 8011d0a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011d0c:	68fa      	ldr	r2, [r7, #12]
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	1ad3      	subs	r3, r2, r3
 8011d12:	0fdb      	lsrs	r3, r3, #31
 8011d14:	f003 0301 	and.w	r3, r3, #1
 8011d18:	b2db      	uxtb	r3, r3
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d009      	beq.n	8011d32 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011d1e:	697b      	ldr	r3, [r7, #20]
 8011d20:	681a      	ldr	r2, [r3, #0]
 8011d22:	693b      	ldr	r3, [r7, #16]
 8011d24:	4413      	add	r3, r2
 8011d26:	687a      	ldr	r2, [r7, #4]
 8011d28:	4907      	ldr	r1, [pc, #28]	; (8011d48 <lwip_cyclic_timer+0x60>)
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f7ff ff6e 	bl	8011c0c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011d30:	e004      	b.n	8011d3c <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011d32:	687a      	ldr	r2, [r7, #4]
 8011d34:	4904      	ldr	r1, [pc, #16]	; (8011d48 <lwip_cyclic_timer+0x60>)
 8011d36:	68f8      	ldr	r0, [r7, #12]
 8011d38:	f7ff ff68 	bl	8011c0c <sys_timeout_abs>
}
 8011d3c:	bf00      	nop
 8011d3e:	3718      	adds	r7, #24
 8011d40:	46bd      	mov	sp, r7
 8011d42:	bd80      	pop	{r7, pc}
 8011d44:	2000f2b4 	.word	0x2000f2b4
 8011d48:	08011ce9 	.word	0x08011ce9

08011d4c <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b082      	sub	sp, #8
 8011d50:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011d52:	2301      	movs	r3, #1
 8011d54:	607b      	str	r3, [r7, #4]
 8011d56:	e00e      	b.n	8011d76 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8011d58:	4a0b      	ldr	r2, [pc, #44]	; (8011d88 <sys_timeouts_init+0x3c>)
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	00db      	lsls	r3, r3, #3
 8011d64:	4a08      	ldr	r2, [pc, #32]	; (8011d88 <sys_timeouts_init+0x3c>)
 8011d66:	4413      	add	r3, r2
 8011d68:	461a      	mov	r2, r3
 8011d6a:	4908      	ldr	r1, [pc, #32]	; (8011d8c <sys_timeouts_init+0x40>)
 8011d6c:	f000 f810 	bl	8011d90 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	3301      	adds	r3, #1
 8011d74:	607b      	str	r3, [r7, #4]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	2b04      	cmp	r3, #4
 8011d7a:	d9ed      	bls.n	8011d58 <sys_timeouts_init+0xc>
  }
}
 8011d7c:	bf00      	nop
 8011d7e:	bf00      	nop
 8011d80:	3708      	adds	r7, #8
 8011d82:	46bd      	mov	sp, r7
 8011d84:	bd80      	pop	{r7, pc}
 8011d86:	bf00      	nop
 8011d88:	0801b0d0 	.word	0x0801b0d0
 8011d8c:	08011ce9 	.word	0x08011ce9

08011d90 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b086      	sub	sp, #24
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	60f8      	str	r0, [r7, #12]
 8011d98:	60b9      	str	r1, [r7, #8]
 8011d9a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011d9c:	68fb      	ldr	r3, [r7, #12]
 8011d9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011da2:	d306      	bcc.n	8011db2 <sys_timeout+0x22>
 8011da4:	4b0a      	ldr	r3, [pc, #40]	; (8011dd0 <sys_timeout+0x40>)
 8011da6:	f240 1229 	movw	r2, #297	; 0x129
 8011daa:	490a      	ldr	r1, [pc, #40]	; (8011dd4 <sys_timeout+0x44>)
 8011dac:	480a      	ldr	r0, [pc, #40]	; (8011dd8 <sys_timeout+0x48>)
 8011dae:	f005 f997 	bl	80170e0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8011db2:	f7f4 f8a1 	bl	8005ef8 <sys_now>
 8011db6:	4602      	mov	r2, r0
 8011db8:	68fb      	ldr	r3, [r7, #12]
 8011dba:	4413      	add	r3, r2
 8011dbc:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8011dbe:	687a      	ldr	r2, [r7, #4]
 8011dc0:	68b9      	ldr	r1, [r7, #8]
 8011dc2:	6978      	ldr	r0, [r7, #20]
 8011dc4:	f7ff ff22 	bl	8011c0c <sys_timeout_abs>
#endif
}
 8011dc8:	bf00      	nop
 8011dca:	3718      	adds	r7, #24
 8011dcc:	46bd      	mov	sp, r7
 8011dce:	bd80      	pop	{r7, pc}
 8011dd0:	0801a0bc 	.word	0x0801a0bc
 8011dd4:	0801a158 	.word	0x0801a158
 8011dd8:	0801a130 	.word	0x0801a130

08011ddc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011ddc:	b580      	push	{r7, lr}
 8011dde:	b084      	sub	sp, #16
 8011de0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011de2:	f7f4 f889 	bl	8005ef8 <sys_now>
 8011de6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011de8:	4b17      	ldr	r3, [pc, #92]	; (8011e48 <sys_check_timeouts+0x6c>)
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011dee:	68bb      	ldr	r3, [r7, #8]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d022      	beq.n	8011e3a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	685b      	ldr	r3, [r3, #4]
 8011df8:	68fa      	ldr	r2, [r7, #12]
 8011dfa:	1ad3      	subs	r3, r2, r3
 8011dfc:	0fdb      	lsrs	r3, r3, #31
 8011dfe:	f003 0301 	and.w	r3, r3, #1
 8011e02:	b2db      	uxtb	r3, r3
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d11a      	bne.n	8011e3e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011e08:	68bb      	ldr	r3, [r7, #8]
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	4a0e      	ldr	r2, [pc, #56]	; (8011e48 <sys_check_timeouts+0x6c>)
 8011e0e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011e10:	68bb      	ldr	r3, [r7, #8]
 8011e12:	689b      	ldr	r3, [r3, #8]
 8011e14:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011e16:	68bb      	ldr	r3, [r7, #8]
 8011e18:	68db      	ldr	r3, [r3, #12]
 8011e1a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011e1c:	68bb      	ldr	r3, [r7, #8]
 8011e1e:	685b      	ldr	r3, [r3, #4]
 8011e20:	4a0a      	ldr	r2, [pc, #40]	; (8011e4c <sys_check_timeouts+0x70>)
 8011e22:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011e24:	68b9      	ldr	r1, [r7, #8]
 8011e26:	200a      	movs	r0, #10
 8011e28:	f7f9 f9f0 	bl	800b20c <memp_free>
    if (handler != NULL) {
 8011e2c:	687b      	ldr	r3, [r7, #4]
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d0da      	beq.n	8011de8 <sys_check_timeouts+0xc>
      handler(arg);
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6838      	ldr	r0, [r7, #0]
 8011e36:	4798      	blx	r3
  do {
 8011e38:	e7d6      	b.n	8011de8 <sys_check_timeouts+0xc>
      return;
 8011e3a:	bf00      	nop
 8011e3c:	e000      	b.n	8011e40 <sys_check_timeouts+0x64>
      return;
 8011e3e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011e40:	3710      	adds	r7, #16
 8011e42:	46bd      	mov	sp, r7
 8011e44:	bd80      	pop	{r7, pc}
 8011e46:	bf00      	nop
 8011e48:	2000f2b0 	.word	0x2000f2b0
 8011e4c:	2000f2b4 	.word	0x2000f2b4

08011e50 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011e50:	b580      	push	{r7, lr}
 8011e52:	b082      	sub	sp, #8
 8011e54:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8011e56:	4b16      	ldr	r3, [pc, #88]	; (8011eb0 <sys_timeouts_sleeptime+0x60>)
 8011e58:	681b      	ldr	r3, [r3, #0]
 8011e5a:	2b00      	cmp	r3, #0
 8011e5c:	d102      	bne.n	8011e64 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011e5e:	f04f 33ff 	mov.w	r3, #4294967295
 8011e62:	e020      	b.n	8011ea6 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011e64:	f7f4 f848 	bl	8005ef8 <sys_now>
 8011e68:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8011e6a:	4b11      	ldr	r3, [pc, #68]	; (8011eb0 <sys_timeouts_sleeptime+0x60>)
 8011e6c:	681b      	ldr	r3, [r3, #0]
 8011e6e:	685a      	ldr	r2, [r3, #4]
 8011e70:	687b      	ldr	r3, [r7, #4]
 8011e72:	1ad3      	subs	r3, r2, r3
 8011e74:	0fdb      	lsrs	r3, r3, #31
 8011e76:	f003 0301 	and.w	r3, r3, #1
 8011e7a:	b2db      	uxtb	r3, r3
 8011e7c:	2b00      	cmp	r3, #0
 8011e7e:	d001      	beq.n	8011e84 <sys_timeouts_sleeptime+0x34>
    return 0;
 8011e80:	2300      	movs	r3, #0
 8011e82:	e010      	b.n	8011ea6 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011e84:	4b0a      	ldr	r3, [pc, #40]	; (8011eb0 <sys_timeouts_sleeptime+0x60>)
 8011e86:	681b      	ldr	r3, [r3, #0]
 8011e88:	685a      	ldr	r2, [r3, #4]
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	1ad3      	subs	r3, r2, r3
 8011e8e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8011e90:	683b      	ldr	r3, [r7, #0]
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	da06      	bge.n	8011ea4 <sys_timeouts_sleeptime+0x54>
 8011e96:	4b07      	ldr	r3, [pc, #28]	; (8011eb4 <sys_timeouts_sleeptime+0x64>)
 8011e98:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011e9c:	4906      	ldr	r1, [pc, #24]	; (8011eb8 <sys_timeouts_sleeptime+0x68>)
 8011e9e:	4807      	ldr	r0, [pc, #28]	; (8011ebc <sys_timeouts_sleeptime+0x6c>)
 8011ea0:	f005 f91e 	bl	80170e0 <iprintf>
    return ret;
 8011ea4:	683b      	ldr	r3, [r7, #0]
  }
}
 8011ea6:	4618      	mov	r0, r3
 8011ea8:	3708      	adds	r7, #8
 8011eaa:	46bd      	mov	sp, r7
 8011eac:	bd80      	pop	{r7, pc}
 8011eae:	bf00      	nop
 8011eb0:	2000f2b0 	.word	0x2000f2b0
 8011eb4:	0801a0bc 	.word	0x0801a0bc
 8011eb8:	0801a190 	.word	0x0801a190
 8011ebc:	0801a130 	.word	0x0801a130

08011ec0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8011ec0:	b580      	push	{r7, lr}
 8011ec2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011ec4:	f005 f924 	bl	8017110 <rand>
 8011ec8:	4603      	mov	r3, r0
 8011eca:	b29b      	uxth	r3, r3
 8011ecc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011ed0:	b29b      	uxth	r3, r3
 8011ed2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011ed6:	b29a      	uxth	r2, r3
 8011ed8:	4b01      	ldr	r3, [pc, #4]	; (8011ee0 <udp_init+0x20>)
 8011eda:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011edc:	bf00      	nop
 8011ede:	bd80      	pop	{r7, pc}
 8011ee0:	2000002c 	.word	0x2000002c

08011ee4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011ee4:	b480      	push	{r7}
 8011ee6:	b083      	sub	sp, #12
 8011ee8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011eea:	2300      	movs	r3, #0
 8011eec:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8011eee:	4b17      	ldr	r3, [pc, #92]	; (8011f4c <udp_new_port+0x68>)
 8011ef0:	881b      	ldrh	r3, [r3, #0]
 8011ef2:	1c5a      	adds	r2, r3, #1
 8011ef4:	b291      	uxth	r1, r2
 8011ef6:	4a15      	ldr	r2, [pc, #84]	; (8011f4c <udp_new_port+0x68>)
 8011ef8:	8011      	strh	r1, [r2, #0]
 8011efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011efe:	4293      	cmp	r3, r2
 8011f00:	d103      	bne.n	8011f0a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8011f02:	4b12      	ldr	r3, [pc, #72]	; (8011f4c <udp_new_port+0x68>)
 8011f04:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011f08:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f0a:	4b11      	ldr	r3, [pc, #68]	; (8011f50 <udp_new_port+0x6c>)
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	603b      	str	r3, [r7, #0]
 8011f10:	e011      	b.n	8011f36 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8011f12:	683b      	ldr	r3, [r7, #0]
 8011f14:	8a5a      	ldrh	r2, [r3, #18]
 8011f16:	4b0d      	ldr	r3, [pc, #52]	; (8011f4c <udp_new_port+0x68>)
 8011f18:	881b      	ldrh	r3, [r3, #0]
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	d108      	bne.n	8011f30 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8011f1e:	88fb      	ldrh	r3, [r7, #6]
 8011f20:	3301      	adds	r3, #1
 8011f22:	80fb      	strh	r3, [r7, #6]
 8011f24:	88fb      	ldrh	r3, [r7, #6]
 8011f26:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011f2a:	d3e0      	bcc.n	8011eee <udp_new_port+0xa>
        return 0;
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	e007      	b.n	8011f40 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011f30:	683b      	ldr	r3, [r7, #0]
 8011f32:	68db      	ldr	r3, [r3, #12]
 8011f34:	603b      	str	r3, [r7, #0]
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	2b00      	cmp	r3, #0
 8011f3a:	d1ea      	bne.n	8011f12 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8011f3c:	4b03      	ldr	r3, [pc, #12]	; (8011f4c <udp_new_port+0x68>)
 8011f3e:	881b      	ldrh	r3, [r3, #0]
}
 8011f40:	4618      	mov	r0, r3
 8011f42:	370c      	adds	r7, #12
 8011f44:	46bd      	mov	sp, r7
 8011f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f4a:	4770      	bx	lr
 8011f4c:	2000002c 	.word	0x2000002c
 8011f50:	2000f2bc 	.word	0x2000f2bc

08011f54 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011f54:	b580      	push	{r7, lr}
 8011f56:	b084      	sub	sp, #16
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	60f8      	str	r0, [r7, #12]
 8011f5c:	60b9      	str	r1, [r7, #8]
 8011f5e:	4613      	mov	r3, r2
 8011f60:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011f62:	68fb      	ldr	r3, [r7, #12]
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	d105      	bne.n	8011f74 <udp_input_local_match+0x20>
 8011f68:	4b27      	ldr	r3, [pc, #156]	; (8012008 <udp_input_local_match+0xb4>)
 8011f6a:	2287      	movs	r2, #135	; 0x87
 8011f6c:	4927      	ldr	r1, [pc, #156]	; (801200c <udp_input_local_match+0xb8>)
 8011f6e:	4828      	ldr	r0, [pc, #160]	; (8012010 <udp_input_local_match+0xbc>)
 8011f70:	f005 f8b6 	bl	80170e0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011f74:	68bb      	ldr	r3, [r7, #8]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d105      	bne.n	8011f86 <udp_input_local_match+0x32>
 8011f7a:	4b23      	ldr	r3, [pc, #140]	; (8012008 <udp_input_local_match+0xb4>)
 8011f7c:	2288      	movs	r2, #136	; 0x88
 8011f7e:	4925      	ldr	r1, [pc, #148]	; (8012014 <udp_input_local_match+0xc0>)
 8011f80:	4823      	ldr	r0, [pc, #140]	; (8012010 <udp_input_local_match+0xbc>)
 8011f82:	f005 f8ad 	bl	80170e0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	7a1b      	ldrb	r3, [r3, #8]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d00b      	beq.n	8011fa6 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	7a1a      	ldrb	r2, [r3, #8]
 8011f92:	4b21      	ldr	r3, [pc, #132]	; (8012018 <udp_input_local_match+0xc4>)
 8011f94:	685b      	ldr	r3, [r3, #4]
 8011f96:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011f9a:	3301      	adds	r3, #1
 8011f9c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011f9e:	429a      	cmp	r2, r3
 8011fa0:	d001      	beq.n	8011fa6 <udp_input_local_match+0x52>
    return 0;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	e02b      	b.n	8011ffe <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011fa6:	79fb      	ldrb	r3, [r7, #7]
 8011fa8:	2b00      	cmp	r3, #0
 8011faa:	d018      	beq.n	8011fde <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011fac:	68fb      	ldr	r3, [r7, #12]
 8011fae:	2b00      	cmp	r3, #0
 8011fb0:	d013      	beq.n	8011fda <udp_input_local_match+0x86>
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	681b      	ldr	r3, [r3, #0]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d00f      	beq.n	8011fda <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011fba:	4b17      	ldr	r3, [pc, #92]	; (8012018 <udp_input_local_match+0xc4>)
 8011fbc:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fc2:	d00a      	beq.n	8011fda <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011fc4:	68fb      	ldr	r3, [r7, #12]
 8011fc6:	681a      	ldr	r2, [r3, #0]
 8011fc8:	4b13      	ldr	r3, [pc, #76]	; (8012018 <udp_input_local_match+0xc4>)
 8011fca:	695b      	ldr	r3, [r3, #20]
 8011fcc:	405a      	eors	r2, r3
 8011fce:	68bb      	ldr	r3, [r7, #8]
 8011fd0:	3308      	adds	r3, #8
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011fd6:	2b00      	cmp	r3, #0
 8011fd8:	d110      	bne.n	8011ffc <udp_input_local_match+0xa8>
          return 1;
 8011fda:	2301      	movs	r3, #1
 8011fdc:	e00f      	b.n	8011ffe <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011fde:	68fb      	ldr	r3, [r7, #12]
 8011fe0:	2b00      	cmp	r3, #0
 8011fe2:	d009      	beq.n	8011ff8 <udp_input_local_match+0xa4>
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	681b      	ldr	r3, [r3, #0]
 8011fe8:	2b00      	cmp	r3, #0
 8011fea:	d005      	beq.n	8011ff8 <udp_input_local_match+0xa4>
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	681a      	ldr	r2, [r3, #0]
 8011ff0:	4b09      	ldr	r3, [pc, #36]	; (8012018 <udp_input_local_match+0xc4>)
 8011ff2:	695b      	ldr	r3, [r3, #20]
 8011ff4:	429a      	cmp	r2, r3
 8011ff6:	d101      	bne.n	8011ffc <udp_input_local_match+0xa8>
        return 1;
 8011ff8:	2301      	movs	r3, #1
 8011ffa:	e000      	b.n	8011ffe <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011ffc:	2300      	movs	r3, #0
}
 8011ffe:	4618      	mov	r0, r3
 8012000:	3710      	adds	r7, #16
 8012002:	46bd      	mov	sp, r7
 8012004:	bd80      	pop	{r7, pc}
 8012006:	bf00      	nop
 8012008:	0801a1a4 	.word	0x0801a1a4
 801200c:	0801a1d4 	.word	0x0801a1d4
 8012010:	0801a1f8 	.word	0x0801a1f8
 8012014:	0801a220 	.word	0x0801a220
 8012018:	200098e0 	.word	0x200098e0

0801201c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801201c:	b590      	push	{r4, r7, lr}
 801201e:	b08d      	sub	sp, #52	; 0x34
 8012020:	af02      	add	r7, sp, #8
 8012022:	6078      	str	r0, [r7, #4]
 8012024:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012026:	2300      	movs	r3, #0
 8012028:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d105      	bne.n	801203c <udp_input+0x20>
 8012030:	4b7c      	ldr	r3, [pc, #496]	; (8012224 <udp_input+0x208>)
 8012032:	22cf      	movs	r2, #207	; 0xcf
 8012034:	497c      	ldr	r1, [pc, #496]	; (8012228 <udp_input+0x20c>)
 8012036:	487d      	ldr	r0, [pc, #500]	; (801222c <udp_input+0x210>)
 8012038:	f005 f852 	bl	80170e0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801203c:	683b      	ldr	r3, [r7, #0]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d105      	bne.n	801204e <udp_input+0x32>
 8012042:	4b78      	ldr	r3, [pc, #480]	; (8012224 <udp_input+0x208>)
 8012044:	22d0      	movs	r2, #208	; 0xd0
 8012046:	497a      	ldr	r1, [pc, #488]	; (8012230 <udp_input+0x214>)
 8012048:	4878      	ldr	r0, [pc, #480]	; (801222c <udp_input+0x210>)
 801204a:	f005 f849 	bl	80170e0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801204e:	687b      	ldr	r3, [r7, #4]
 8012050:	895b      	ldrh	r3, [r3, #10]
 8012052:	2b07      	cmp	r3, #7
 8012054:	d803      	bhi.n	801205e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012056:	6878      	ldr	r0, [r7, #4]
 8012058:	f7fa f9b2 	bl	800c3c0 <pbuf_free>
    goto end;
 801205c:	e0de      	b.n	801221c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801205e:	687b      	ldr	r3, [r7, #4]
 8012060:	685b      	ldr	r3, [r3, #4]
 8012062:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012064:	4b73      	ldr	r3, [pc, #460]	; (8012234 <udp_input+0x218>)
 8012066:	695b      	ldr	r3, [r3, #20]
 8012068:	4a72      	ldr	r2, [pc, #456]	; (8012234 <udp_input+0x218>)
 801206a:	6812      	ldr	r2, [r2, #0]
 801206c:	4611      	mov	r1, r2
 801206e:	4618      	mov	r0, r3
 8012070:	f003 fe16 	bl	8015ca0 <ip4_addr_isbroadcast_u32>
 8012074:	4603      	mov	r3, r0
 8012076:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012078:	697b      	ldr	r3, [r7, #20]
 801207a:	881b      	ldrh	r3, [r3, #0]
 801207c:	b29b      	uxth	r3, r3
 801207e:	4618      	mov	r0, r3
 8012080:	f7f8 fb76 	bl	800a770 <lwip_htons>
 8012084:	4603      	mov	r3, r0
 8012086:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012088:	697b      	ldr	r3, [r7, #20]
 801208a:	885b      	ldrh	r3, [r3, #2]
 801208c:	b29b      	uxth	r3, r3
 801208e:	4618      	mov	r0, r3
 8012090:	f7f8 fb6e 	bl	800a770 <lwip_htons>
 8012094:	4603      	mov	r3, r0
 8012096:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012098:	2300      	movs	r3, #0
 801209a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801209c:	2300      	movs	r3, #0
 801209e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80120a0:	2300      	movs	r3, #0
 80120a2:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80120a4:	4b64      	ldr	r3, [pc, #400]	; (8012238 <udp_input+0x21c>)
 80120a6:	681b      	ldr	r3, [r3, #0]
 80120a8:	627b      	str	r3, [r7, #36]	; 0x24
 80120aa:	e054      	b.n	8012156 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80120ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ae:	8a5b      	ldrh	r3, [r3, #18]
 80120b0:	89fa      	ldrh	r2, [r7, #14]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d14a      	bne.n	801214c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80120b6:	7cfb      	ldrb	r3, [r7, #19]
 80120b8:	461a      	mov	r2, r3
 80120ba:	6839      	ldr	r1, [r7, #0]
 80120bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80120be:	f7ff ff49 	bl	8011f54 <udp_input_local_match>
 80120c2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d041      	beq.n	801214c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80120c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120ca:	7c1b      	ldrb	r3, [r3, #16]
 80120cc:	f003 0304 	and.w	r3, r3, #4
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d11d      	bne.n	8012110 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80120d4:	69fb      	ldr	r3, [r7, #28]
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d102      	bne.n	80120e0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80120da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80120dc:	61fb      	str	r3, [r7, #28]
 80120de:	e017      	b.n	8012110 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80120e0:	7cfb      	ldrb	r3, [r7, #19]
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d014      	beq.n	8012110 <udp_input+0xf4>
 80120e6:	4b53      	ldr	r3, [pc, #332]	; (8012234 <udp_input+0x218>)
 80120e8:	695b      	ldr	r3, [r3, #20]
 80120ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80120ee:	d10f      	bne.n	8012110 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80120f0:	69fb      	ldr	r3, [r7, #28]
 80120f2:	681a      	ldr	r2, [r3, #0]
 80120f4:	683b      	ldr	r3, [r7, #0]
 80120f6:	3304      	adds	r3, #4
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	429a      	cmp	r2, r3
 80120fc:	d008      	beq.n	8012110 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80120fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012100:	681a      	ldr	r2, [r3, #0]
 8012102:	683b      	ldr	r3, [r7, #0]
 8012104:	3304      	adds	r3, #4
 8012106:	681b      	ldr	r3, [r3, #0]
 8012108:	429a      	cmp	r2, r3
 801210a:	d101      	bne.n	8012110 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801210c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801210e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8012110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012112:	8a9b      	ldrh	r3, [r3, #20]
 8012114:	8a3a      	ldrh	r2, [r7, #16]
 8012116:	429a      	cmp	r2, r3
 8012118:	d118      	bne.n	801214c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801211c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801211e:	2b00      	cmp	r3, #0
 8012120:	d005      	beq.n	801212e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8012122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012124:	685a      	ldr	r2, [r3, #4]
 8012126:	4b43      	ldr	r3, [pc, #268]	; (8012234 <udp_input+0x218>)
 8012128:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801212a:	429a      	cmp	r2, r3
 801212c:	d10e      	bne.n	801214c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801212e:	6a3b      	ldr	r3, [r7, #32]
 8012130:	2b00      	cmp	r3, #0
 8012132:	d014      	beq.n	801215e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8012134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012136:	68da      	ldr	r2, [r3, #12]
 8012138:	6a3b      	ldr	r3, [r7, #32]
 801213a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801213c:	4b3e      	ldr	r3, [pc, #248]	; (8012238 <udp_input+0x21c>)
 801213e:	681a      	ldr	r2, [r3, #0]
 8012140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012142:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8012144:	4a3c      	ldr	r2, [pc, #240]	; (8012238 <udp_input+0x21c>)
 8012146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012148:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801214a:	e008      	b.n	801215e <udp_input+0x142>
      }
    }

    prev = pcb;
 801214c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801214e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012152:	68db      	ldr	r3, [r3, #12]
 8012154:	627b      	str	r3, [r7, #36]	; 0x24
 8012156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012158:	2b00      	cmp	r3, #0
 801215a:	d1a7      	bne.n	80120ac <udp_input+0x90>
 801215c:	e000      	b.n	8012160 <udp_input+0x144>
        break;
 801215e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8012160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012162:	2b00      	cmp	r3, #0
 8012164:	d101      	bne.n	801216a <udp_input+0x14e>
    pcb = uncon_pcb;
 8012166:	69fb      	ldr	r3, [r7, #28]
 8012168:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801216a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801216c:	2b00      	cmp	r3, #0
 801216e:	d002      	beq.n	8012176 <udp_input+0x15a>
    for_us = 1;
 8012170:	2301      	movs	r3, #1
 8012172:	76fb      	strb	r3, [r7, #27]
 8012174:	e00a      	b.n	801218c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	3304      	adds	r3, #4
 801217a:	681a      	ldr	r2, [r3, #0]
 801217c:	4b2d      	ldr	r3, [pc, #180]	; (8012234 <udp_input+0x218>)
 801217e:	695b      	ldr	r3, [r3, #20]
 8012180:	429a      	cmp	r2, r3
 8012182:	bf0c      	ite	eq
 8012184:	2301      	moveq	r3, #1
 8012186:	2300      	movne	r3, #0
 8012188:	b2db      	uxtb	r3, r3
 801218a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801218c:	7efb      	ldrb	r3, [r7, #27]
 801218e:	2b00      	cmp	r3, #0
 8012190:	d041      	beq.n	8012216 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8012192:	2108      	movs	r1, #8
 8012194:	6878      	ldr	r0, [r7, #4]
 8012196:	f7fa f88d 	bl	800c2b4 <pbuf_remove_header>
 801219a:	4603      	mov	r3, r0
 801219c:	2b00      	cmp	r3, #0
 801219e:	d00a      	beq.n	80121b6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80121a0:	4b20      	ldr	r3, [pc, #128]	; (8012224 <udp_input+0x208>)
 80121a2:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80121a6:	4925      	ldr	r1, [pc, #148]	; (801223c <udp_input+0x220>)
 80121a8:	4820      	ldr	r0, [pc, #128]	; (801222c <udp_input+0x210>)
 80121aa:	f004 ff99 	bl	80170e0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80121ae:	6878      	ldr	r0, [r7, #4]
 80121b0:	f7fa f906 	bl	800c3c0 <pbuf_free>
      goto end;
 80121b4:	e032      	b.n	801221c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80121b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d012      	beq.n	80121e2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80121bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121be:	699b      	ldr	r3, [r3, #24]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d00a      	beq.n	80121da <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80121c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121c6:	699c      	ldr	r4, [r3, #24]
 80121c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80121ca:	69d8      	ldr	r0, [r3, #28]
 80121cc:	8a3b      	ldrh	r3, [r7, #16]
 80121ce:	9300      	str	r3, [sp, #0]
 80121d0:	4b1b      	ldr	r3, [pc, #108]	; (8012240 <udp_input+0x224>)
 80121d2:	687a      	ldr	r2, [r7, #4]
 80121d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80121d6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80121d8:	e021      	b.n	801221e <udp_input+0x202>
        pbuf_free(p);
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	f7fa f8f0 	bl	800c3c0 <pbuf_free>
        goto end;
 80121e0:	e01c      	b.n	801221c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80121e2:	7cfb      	ldrb	r3, [r7, #19]
 80121e4:	2b00      	cmp	r3, #0
 80121e6:	d112      	bne.n	801220e <udp_input+0x1f2>
 80121e8:	4b12      	ldr	r3, [pc, #72]	; (8012234 <udp_input+0x218>)
 80121ea:	695b      	ldr	r3, [r3, #20]
 80121ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80121f0:	2be0      	cmp	r3, #224	; 0xe0
 80121f2:	d00c      	beq.n	801220e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80121f4:	4b0f      	ldr	r3, [pc, #60]	; (8012234 <udp_input+0x218>)
 80121f6:	899b      	ldrh	r3, [r3, #12]
 80121f8:	3308      	adds	r3, #8
 80121fa:	b29b      	uxth	r3, r3
 80121fc:	b21b      	sxth	r3, r3
 80121fe:	4619      	mov	r1, r3
 8012200:	6878      	ldr	r0, [r7, #4]
 8012202:	f7fa f8ca 	bl	800c39a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8012206:	2103      	movs	r1, #3
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f003 f9fd 	bl	8015608 <icmp_dest_unreach>
      pbuf_free(p);
 801220e:	6878      	ldr	r0, [r7, #4]
 8012210:	f7fa f8d6 	bl	800c3c0 <pbuf_free>
  return;
 8012214:	e003      	b.n	801221e <udp_input+0x202>
    pbuf_free(p);
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	f7fa f8d2 	bl	800c3c0 <pbuf_free>
  return;
 801221c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801221e:	372c      	adds	r7, #44	; 0x2c
 8012220:	46bd      	mov	sp, r7
 8012222:	bd90      	pop	{r4, r7, pc}
 8012224:	0801a1a4 	.word	0x0801a1a4
 8012228:	0801a248 	.word	0x0801a248
 801222c:	0801a1f8 	.word	0x0801a1f8
 8012230:	0801a260 	.word	0x0801a260
 8012234:	200098e0 	.word	0x200098e0
 8012238:	2000f2bc 	.word	0x2000f2bc
 801223c:	0801a27c 	.word	0x0801a27c
 8012240:	200098f0 	.word	0x200098f0

08012244 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8012244:	b580      	push	{r7, lr}
 8012246:	b088      	sub	sp, #32
 8012248:	af02      	add	r7, sp, #8
 801224a:	60f8      	str	r0, [r7, #12]
 801224c:	60b9      	str	r1, [r7, #8]
 801224e:	607a      	str	r2, [r7, #4]
 8012250:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8012252:	68fb      	ldr	r3, [r7, #12]
 8012254:	2b00      	cmp	r3, #0
 8012256:	d109      	bne.n	801226c <udp_sendto_if+0x28>
 8012258:	4b2e      	ldr	r3, [pc, #184]	; (8012314 <udp_sendto_if+0xd0>)
 801225a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801225e:	492e      	ldr	r1, [pc, #184]	; (8012318 <udp_sendto_if+0xd4>)
 8012260:	482e      	ldr	r0, [pc, #184]	; (801231c <udp_sendto_if+0xd8>)
 8012262:	f004 ff3d 	bl	80170e0 <iprintf>
 8012266:	f06f 030f 	mvn.w	r3, #15
 801226a:	e04f      	b.n	801230c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801226c:	68bb      	ldr	r3, [r7, #8]
 801226e:	2b00      	cmp	r3, #0
 8012270:	d109      	bne.n	8012286 <udp_sendto_if+0x42>
 8012272:	4b28      	ldr	r3, [pc, #160]	; (8012314 <udp_sendto_if+0xd0>)
 8012274:	f240 2281 	movw	r2, #641	; 0x281
 8012278:	4929      	ldr	r1, [pc, #164]	; (8012320 <udp_sendto_if+0xdc>)
 801227a:	4828      	ldr	r0, [pc, #160]	; (801231c <udp_sendto_if+0xd8>)
 801227c:	f004 ff30 	bl	80170e0 <iprintf>
 8012280:	f06f 030f 	mvn.w	r3, #15
 8012284:	e042      	b.n	801230c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	2b00      	cmp	r3, #0
 801228a:	d109      	bne.n	80122a0 <udp_sendto_if+0x5c>
 801228c:	4b21      	ldr	r3, [pc, #132]	; (8012314 <udp_sendto_if+0xd0>)
 801228e:	f240 2282 	movw	r2, #642	; 0x282
 8012292:	4924      	ldr	r1, [pc, #144]	; (8012324 <udp_sendto_if+0xe0>)
 8012294:	4821      	ldr	r0, [pc, #132]	; (801231c <udp_sendto_if+0xd8>)
 8012296:	f004 ff23 	bl	80170e0 <iprintf>
 801229a:	f06f 030f 	mvn.w	r3, #15
 801229e:	e035      	b.n	801230c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 80122a0:	6a3b      	ldr	r3, [r7, #32]
 80122a2:	2b00      	cmp	r3, #0
 80122a4:	d109      	bne.n	80122ba <udp_sendto_if+0x76>
 80122a6:	4b1b      	ldr	r3, [pc, #108]	; (8012314 <udp_sendto_if+0xd0>)
 80122a8:	f240 2283 	movw	r2, #643	; 0x283
 80122ac:	491e      	ldr	r1, [pc, #120]	; (8012328 <udp_sendto_if+0xe4>)
 80122ae:	481b      	ldr	r0, [pc, #108]	; (801231c <udp_sendto_if+0xd8>)
 80122b0:	f004 ff16 	bl	80170e0 <iprintf>
 80122b4:	f06f 030f 	mvn.w	r3, #15
 80122b8:	e028      	b.n	801230c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80122ba:	68fb      	ldr	r3, [r7, #12]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d009      	beq.n	80122d4 <udp_sendto_if+0x90>
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d005      	beq.n	80122d4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80122d0:	2be0      	cmp	r3, #224	; 0xe0
 80122d2:	d103      	bne.n	80122dc <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 80122d4:	6a3b      	ldr	r3, [r7, #32]
 80122d6:	3304      	adds	r3, #4
 80122d8:	617b      	str	r3, [r7, #20]
 80122da:	e00b      	b.n	80122f4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	681a      	ldr	r2, [r3, #0]
 80122e0:	6a3b      	ldr	r3, [r7, #32]
 80122e2:	3304      	adds	r3, #4
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d002      	beq.n	80122f0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80122ea:	f06f 0303 	mvn.w	r3, #3
 80122ee:	e00d      	b.n	801230c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80122f0:	68fb      	ldr	r3, [r7, #12]
 80122f2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80122f4:	887a      	ldrh	r2, [r7, #2]
 80122f6:	697b      	ldr	r3, [r7, #20]
 80122f8:	9301      	str	r3, [sp, #4]
 80122fa:	6a3b      	ldr	r3, [r7, #32]
 80122fc:	9300      	str	r3, [sp, #0]
 80122fe:	4613      	mov	r3, r2
 8012300:	687a      	ldr	r2, [r7, #4]
 8012302:	68b9      	ldr	r1, [r7, #8]
 8012304:	68f8      	ldr	r0, [r7, #12]
 8012306:	f000 f811 	bl	801232c <udp_sendto_if_src>
 801230a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801230c:	4618      	mov	r0, r3
 801230e:	3718      	adds	r7, #24
 8012310:	46bd      	mov	sp, r7
 8012312:	bd80      	pop	{r7, pc}
 8012314:	0801a1a4 	.word	0x0801a1a4
 8012318:	0801a318 	.word	0x0801a318
 801231c:	0801a1f8 	.word	0x0801a1f8
 8012320:	0801a334 	.word	0x0801a334
 8012324:	0801a350 	.word	0x0801a350
 8012328:	0801a370 	.word	0x0801a370

0801232c <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b08c      	sub	sp, #48	; 0x30
 8012330:	af04      	add	r7, sp, #16
 8012332:	60f8      	str	r0, [r7, #12]
 8012334:	60b9      	str	r1, [r7, #8]
 8012336:	607a      	str	r2, [r7, #4]
 8012338:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801233a:	68fb      	ldr	r3, [r7, #12]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d109      	bne.n	8012354 <udp_sendto_if_src+0x28>
 8012340:	4b65      	ldr	r3, [pc, #404]	; (80124d8 <udp_sendto_if_src+0x1ac>)
 8012342:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012346:	4965      	ldr	r1, [pc, #404]	; (80124dc <udp_sendto_if_src+0x1b0>)
 8012348:	4865      	ldr	r0, [pc, #404]	; (80124e0 <udp_sendto_if_src+0x1b4>)
 801234a:	f004 fec9 	bl	80170e0 <iprintf>
 801234e:	f06f 030f 	mvn.w	r3, #15
 8012352:	e0bc      	b.n	80124ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8012354:	68bb      	ldr	r3, [r7, #8]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d109      	bne.n	801236e <udp_sendto_if_src+0x42>
 801235a:	4b5f      	ldr	r3, [pc, #380]	; (80124d8 <udp_sendto_if_src+0x1ac>)
 801235c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8012360:	4960      	ldr	r1, [pc, #384]	; (80124e4 <udp_sendto_if_src+0x1b8>)
 8012362:	485f      	ldr	r0, [pc, #380]	; (80124e0 <udp_sendto_if_src+0x1b4>)
 8012364:	f004 febc 	bl	80170e0 <iprintf>
 8012368:	f06f 030f 	mvn.w	r3, #15
 801236c:	e0af      	b.n	80124ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	2b00      	cmp	r3, #0
 8012372:	d109      	bne.n	8012388 <udp_sendto_if_src+0x5c>
 8012374:	4b58      	ldr	r3, [pc, #352]	; (80124d8 <udp_sendto_if_src+0x1ac>)
 8012376:	f240 22d3 	movw	r2, #723	; 0x2d3
 801237a:	495b      	ldr	r1, [pc, #364]	; (80124e8 <udp_sendto_if_src+0x1bc>)
 801237c:	4858      	ldr	r0, [pc, #352]	; (80124e0 <udp_sendto_if_src+0x1b4>)
 801237e:	f004 feaf 	bl	80170e0 <iprintf>
 8012382:	f06f 030f 	mvn.w	r3, #15
 8012386:	e0a2      	b.n	80124ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8012388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801238a:	2b00      	cmp	r3, #0
 801238c:	d109      	bne.n	80123a2 <udp_sendto_if_src+0x76>
 801238e:	4b52      	ldr	r3, [pc, #328]	; (80124d8 <udp_sendto_if_src+0x1ac>)
 8012390:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8012394:	4955      	ldr	r1, [pc, #340]	; (80124ec <udp_sendto_if_src+0x1c0>)
 8012396:	4852      	ldr	r0, [pc, #328]	; (80124e0 <udp_sendto_if_src+0x1b4>)
 8012398:	f004 fea2 	bl	80170e0 <iprintf>
 801239c:	f06f 030f 	mvn.w	r3, #15
 80123a0:	e095      	b.n	80124ce <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 80123a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123a4:	2b00      	cmp	r3, #0
 80123a6:	d109      	bne.n	80123bc <udp_sendto_if_src+0x90>
 80123a8:	4b4b      	ldr	r3, [pc, #300]	; (80124d8 <udp_sendto_if_src+0x1ac>)
 80123aa:	f240 22d5 	movw	r2, #725	; 0x2d5
 80123ae:	4950      	ldr	r1, [pc, #320]	; (80124f0 <udp_sendto_if_src+0x1c4>)
 80123b0:	484b      	ldr	r0, [pc, #300]	; (80124e0 <udp_sendto_if_src+0x1b4>)
 80123b2:	f004 fe95 	bl	80170e0 <iprintf>
 80123b6:	f06f 030f 	mvn.w	r3, #15
 80123ba:	e088      	b.n	80124ce <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 80123bc:	68fb      	ldr	r3, [r7, #12]
 80123be:	8a5b      	ldrh	r3, [r3, #18]
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d10f      	bne.n	80123e4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 80123c4:	68f9      	ldr	r1, [r7, #12]
 80123c6:	68fb      	ldr	r3, [r7, #12]
 80123c8:	8a5b      	ldrh	r3, [r3, #18]
 80123ca:	461a      	mov	r2, r3
 80123cc:	68f8      	ldr	r0, [r7, #12]
 80123ce:	f000 f893 	bl	80124f8 <udp_bind>
 80123d2:	4603      	mov	r3, r0
 80123d4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 80123d6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d002      	beq.n	80123e4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 80123de:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80123e2:	e074      	b.n	80124ce <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80123e4:	68bb      	ldr	r3, [r7, #8]
 80123e6:	891b      	ldrh	r3, [r3, #8]
 80123e8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80123ec:	4293      	cmp	r3, r2
 80123ee:	d902      	bls.n	80123f6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80123f0:	f04f 33ff 	mov.w	r3, #4294967295
 80123f4:	e06b      	b.n	80124ce <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80123f6:	2108      	movs	r1, #8
 80123f8:	68b8      	ldr	r0, [r7, #8]
 80123fa:	f7f9 ff4b 	bl	800c294 <pbuf_add_header>
 80123fe:	4603      	mov	r3, r0
 8012400:	2b00      	cmp	r3, #0
 8012402:	d015      	beq.n	8012430 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8012404:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012408:	2108      	movs	r1, #8
 801240a:	2022      	movs	r0, #34	; 0x22
 801240c:	f7f9 fcf4 	bl	800bdf8 <pbuf_alloc>
 8012410:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8012412:	69fb      	ldr	r3, [r7, #28]
 8012414:	2b00      	cmp	r3, #0
 8012416:	d102      	bne.n	801241e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8012418:	f04f 33ff 	mov.w	r3, #4294967295
 801241c:	e057      	b.n	80124ce <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801241e:	68bb      	ldr	r3, [r7, #8]
 8012420:	891b      	ldrh	r3, [r3, #8]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d006      	beq.n	8012434 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8012426:	68b9      	ldr	r1, [r7, #8]
 8012428:	69f8      	ldr	r0, [r7, #28]
 801242a:	f7fa f8ed 	bl	800c608 <pbuf_chain>
 801242e:	e001      	b.n	8012434 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8012430:	68bb      	ldr	r3, [r7, #8]
 8012432:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8012434:	69fb      	ldr	r3, [r7, #28]
 8012436:	895b      	ldrh	r3, [r3, #10]
 8012438:	2b07      	cmp	r3, #7
 801243a:	d806      	bhi.n	801244a <udp_sendto_if_src+0x11e>
 801243c:	4b26      	ldr	r3, [pc, #152]	; (80124d8 <udp_sendto_if_src+0x1ac>)
 801243e:	f240 320d 	movw	r2, #781	; 0x30d
 8012442:	492c      	ldr	r1, [pc, #176]	; (80124f4 <udp_sendto_if_src+0x1c8>)
 8012444:	4826      	ldr	r0, [pc, #152]	; (80124e0 <udp_sendto_if_src+0x1b4>)
 8012446:	f004 fe4b 	bl	80170e0 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801244a:	69fb      	ldr	r3, [r7, #28]
 801244c:	685b      	ldr	r3, [r3, #4]
 801244e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8012450:	68fb      	ldr	r3, [r7, #12]
 8012452:	8a5b      	ldrh	r3, [r3, #18]
 8012454:	4618      	mov	r0, r3
 8012456:	f7f8 f98b 	bl	800a770 <lwip_htons>
 801245a:	4603      	mov	r3, r0
 801245c:	461a      	mov	r2, r3
 801245e:	697b      	ldr	r3, [r7, #20]
 8012460:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8012462:	887b      	ldrh	r3, [r7, #2]
 8012464:	4618      	mov	r0, r3
 8012466:	f7f8 f983 	bl	800a770 <lwip_htons>
 801246a:	4603      	mov	r3, r0
 801246c:	461a      	mov	r2, r3
 801246e:	697b      	ldr	r3, [r7, #20]
 8012470:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8012472:	697b      	ldr	r3, [r7, #20]
 8012474:	2200      	movs	r2, #0
 8012476:	719a      	strb	r2, [r3, #6]
 8012478:	2200      	movs	r2, #0
 801247a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801247c:	69fb      	ldr	r3, [r7, #28]
 801247e:	891b      	ldrh	r3, [r3, #8]
 8012480:	4618      	mov	r0, r3
 8012482:	f7f8 f975 	bl	800a770 <lwip_htons>
 8012486:	4603      	mov	r3, r0
 8012488:	461a      	mov	r2, r3
 801248a:	697b      	ldr	r3, [r7, #20]
 801248c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801248e:	2311      	movs	r3, #17
 8012490:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8012492:	68fb      	ldr	r3, [r7, #12]
 8012494:	7adb      	ldrb	r3, [r3, #11]
 8012496:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8012498:	68fb      	ldr	r3, [r7, #12]
 801249a:	7a9b      	ldrb	r3, [r3, #10]
 801249c:	7cb9      	ldrb	r1, [r7, #18]
 801249e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80124a0:	9202      	str	r2, [sp, #8]
 80124a2:	7cfa      	ldrb	r2, [r7, #19]
 80124a4:	9201      	str	r2, [sp, #4]
 80124a6:	9300      	str	r3, [sp, #0]
 80124a8:	460b      	mov	r3, r1
 80124aa:	687a      	ldr	r2, [r7, #4]
 80124ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80124ae:	69f8      	ldr	r0, [r7, #28]
 80124b0:	f003 fb3a 	bl	8015b28 <ip4_output_if_src>
 80124b4:	4603      	mov	r3, r0
 80124b6:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80124b8:	69fa      	ldr	r2, [r7, #28]
 80124ba:	68bb      	ldr	r3, [r7, #8]
 80124bc:	429a      	cmp	r2, r3
 80124be:	d004      	beq.n	80124ca <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80124c0:	69f8      	ldr	r0, [r7, #28]
 80124c2:	f7f9 ff7d 	bl	800c3c0 <pbuf_free>
    q = NULL;
 80124c6:	2300      	movs	r3, #0
 80124c8:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80124ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80124ce:	4618      	mov	r0, r3
 80124d0:	3720      	adds	r7, #32
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}
 80124d6:	bf00      	nop
 80124d8:	0801a1a4 	.word	0x0801a1a4
 80124dc:	0801a390 	.word	0x0801a390
 80124e0:	0801a1f8 	.word	0x0801a1f8
 80124e4:	0801a3b0 	.word	0x0801a3b0
 80124e8:	0801a3d0 	.word	0x0801a3d0
 80124ec:	0801a3f4 	.word	0x0801a3f4
 80124f0:	0801a418 	.word	0x0801a418
 80124f4:	0801a43c 	.word	0x0801a43c

080124f8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b086      	sub	sp, #24
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	60f8      	str	r0, [r7, #12]
 8012500:	60b9      	str	r1, [r7, #8]
 8012502:	4613      	mov	r3, r2
 8012504:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012506:	68bb      	ldr	r3, [r7, #8]
 8012508:	2b00      	cmp	r3, #0
 801250a:	d101      	bne.n	8012510 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801250c:	4b39      	ldr	r3, [pc, #228]	; (80125f4 <udp_bind+0xfc>)
 801250e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d109      	bne.n	801252a <udp_bind+0x32>
 8012516:	4b38      	ldr	r3, [pc, #224]	; (80125f8 <udp_bind+0x100>)
 8012518:	f240 32b7 	movw	r2, #951	; 0x3b7
 801251c:	4937      	ldr	r1, [pc, #220]	; (80125fc <udp_bind+0x104>)
 801251e:	4838      	ldr	r0, [pc, #224]	; (8012600 <udp_bind+0x108>)
 8012520:	f004 fdde 	bl	80170e0 <iprintf>
 8012524:	f06f 030f 	mvn.w	r3, #15
 8012528:	e060      	b.n	80125ec <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801252a:	2300      	movs	r3, #0
 801252c:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801252e:	4b35      	ldr	r3, [pc, #212]	; (8012604 <udp_bind+0x10c>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	617b      	str	r3, [r7, #20]
 8012534:	e009      	b.n	801254a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8012536:	68fa      	ldr	r2, [r7, #12]
 8012538:	697b      	ldr	r3, [r7, #20]
 801253a:	429a      	cmp	r2, r3
 801253c:	d102      	bne.n	8012544 <udp_bind+0x4c>
      rebind = 1;
 801253e:	2301      	movs	r3, #1
 8012540:	74fb      	strb	r3, [r7, #19]
      break;
 8012542:	e005      	b.n	8012550 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012544:	697b      	ldr	r3, [r7, #20]
 8012546:	68db      	ldr	r3, [r3, #12]
 8012548:	617b      	str	r3, [r7, #20]
 801254a:	697b      	ldr	r3, [r7, #20]
 801254c:	2b00      	cmp	r3, #0
 801254e:	d1f2      	bne.n	8012536 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8012550:	88fb      	ldrh	r3, [r7, #6]
 8012552:	2b00      	cmp	r3, #0
 8012554:	d109      	bne.n	801256a <udp_bind+0x72>
    port = udp_new_port();
 8012556:	f7ff fcc5 	bl	8011ee4 <udp_new_port>
 801255a:	4603      	mov	r3, r0
 801255c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801255e:	88fb      	ldrh	r3, [r7, #6]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d12c      	bne.n	80125be <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8012564:	f06f 0307 	mvn.w	r3, #7
 8012568:	e040      	b.n	80125ec <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801256a:	4b26      	ldr	r3, [pc, #152]	; (8012604 <udp_bind+0x10c>)
 801256c:	681b      	ldr	r3, [r3, #0]
 801256e:	617b      	str	r3, [r7, #20]
 8012570:	e022      	b.n	80125b8 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8012572:	68fa      	ldr	r2, [r7, #12]
 8012574:	697b      	ldr	r3, [r7, #20]
 8012576:	429a      	cmp	r2, r3
 8012578:	d01b      	beq.n	80125b2 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801257a:	697b      	ldr	r3, [r7, #20]
 801257c:	8a5b      	ldrh	r3, [r3, #18]
 801257e:	88fa      	ldrh	r2, [r7, #6]
 8012580:	429a      	cmp	r2, r3
 8012582:	d116      	bne.n	80125b2 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012584:	697b      	ldr	r3, [r7, #20]
 8012586:	681a      	ldr	r2, [r3, #0]
 8012588:	68bb      	ldr	r3, [r7, #8]
 801258a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801258c:	429a      	cmp	r2, r3
 801258e:	d00d      	beq.n	80125ac <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8012590:	68bb      	ldr	r3, [r7, #8]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d00a      	beq.n	80125ac <udp_bind+0xb4>
 8012596:	68bb      	ldr	r3, [r7, #8]
 8012598:	681b      	ldr	r3, [r3, #0]
 801259a:	2b00      	cmp	r3, #0
 801259c:	d006      	beq.n	80125ac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801259e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d003      	beq.n	80125ac <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80125a4:	697b      	ldr	r3, [r7, #20]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	2b00      	cmp	r3, #0
 80125aa:	d102      	bne.n	80125b2 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80125ac:	f06f 0307 	mvn.w	r3, #7
 80125b0:	e01c      	b.n	80125ec <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	68db      	ldr	r3, [r3, #12]
 80125b6:	617b      	str	r3, [r7, #20]
 80125b8:	697b      	ldr	r3, [r7, #20]
 80125ba:	2b00      	cmp	r3, #0
 80125bc:	d1d9      	bne.n	8012572 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80125be:	68bb      	ldr	r3, [r7, #8]
 80125c0:	2b00      	cmp	r3, #0
 80125c2:	d002      	beq.n	80125ca <udp_bind+0xd2>
 80125c4:	68bb      	ldr	r3, [r7, #8]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	e000      	b.n	80125cc <udp_bind+0xd4>
 80125ca:	2300      	movs	r3, #0
 80125cc:	68fa      	ldr	r2, [r7, #12]
 80125ce:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	88fa      	ldrh	r2, [r7, #6]
 80125d4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80125d6:	7cfb      	ldrb	r3, [r7, #19]
 80125d8:	2b00      	cmp	r3, #0
 80125da:	d106      	bne.n	80125ea <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80125dc:	4b09      	ldr	r3, [pc, #36]	; (8012604 <udp_bind+0x10c>)
 80125de:	681a      	ldr	r2, [r3, #0]
 80125e0:	68fb      	ldr	r3, [r7, #12]
 80125e2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80125e4:	4a07      	ldr	r2, [pc, #28]	; (8012604 <udp_bind+0x10c>)
 80125e6:	68fb      	ldr	r3, [r7, #12]
 80125e8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80125ea:	2300      	movs	r3, #0
}
 80125ec:	4618      	mov	r0, r3
 80125ee:	3718      	adds	r7, #24
 80125f0:	46bd      	mov	sp, r7
 80125f2:	bd80      	pop	{r7, pc}
 80125f4:	0801b0f8 	.word	0x0801b0f8
 80125f8:	0801a1a4 	.word	0x0801a1a4
 80125fc:	0801a46c 	.word	0x0801a46c
 8012600:	0801a1f8 	.word	0x0801a1f8
 8012604:	2000f2bc 	.word	0x2000f2bc

08012608 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8012608:	b580      	push	{r7, lr}
 801260a:	b086      	sub	sp, #24
 801260c:	af00      	add	r7, sp, #0
 801260e:	60f8      	str	r0, [r7, #12]
 8012610:	60b9      	str	r1, [r7, #8]
 8012612:	4613      	mov	r3, r2
 8012614:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8012616:	68fb      	ldr	r3, [r7, #12]
 8012618:	2b00      	cmp	r3, #0
 801261a:	d109      	bne.n	8012630 <udp_connect+0x28>
 801261c:	4b2c      	ldr	r3, [pc, #176]	; (80126d0 <udp_connect+0xc8>)
 801261e:	f240 4235 	movw	r2, #1077	; 0x435
 8012622:	492c      	ldr	r1, [pc, #176]	; (80126d4 <udp_connect+0xcc>)
 8012624:	482c      	ldr	r0, [pc, #176]	; (80126d8 <udp_connect+0xd0>)
 8012626:	f004 fd5b 	bl	80170e0 <iprintf>
 801262a:	f06f 030f 	mvn.w	r3, #15
 801262e:	e04b      	b.n	80126c8 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	2b00      	cmp	r3, #0
 8012634:	d109      	bne.n	801264a <udp_connect+0x42>
 8012636:	4b26      	ldr	r3, [pc, #152]	; (80126d0 <udp_connect+0xc8>)
 8012638:	f240 4236 	movw	r2, #1078	; 0x436
 801263c:	4927      	ldr	r1, [pc, #156]	; (80126dc <udp_connect+0xd4>)
 801263e:	4826      	ldr	r0, [pc, #152]	; (80126d8 <udp_connect+0xd0>)
 8012640:	f004 fd4e 	bl	80170e0 <iprintf>
 8012644:	f06f 030f 	mvn.w	r3, #15
 8012648:	e03e      	b.n	80126c8 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	8a5b      	ldrh	r3, [r3, #18]
 801264e:	2b00      	cmp	r3, #0
 8012650:	d10f      	bne.n	8012672 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8012652:	68f9      	ldr	r1, [r7, #12]
 8012654:	68fb      	ldr	r3, [r7, #12]
 8012656:	8a5b      	ldrh	r3, [r3, #18]
 8012658:	461a      	mov	r2, r3
 801265a:	68f8      	ldr	r0, [r7, #12]
 801265c:	f7ff ff4c 	bl	80124f8 <udp_bind>
 8012660:	4603      	mov	r3, r0
 8012662:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8012664:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012668:	2b00      	cmp	r3, #0
 801266a:	d002      	beq.n	8012672 <udp_connect+0x6a>
      return err;
 801266c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012670:	e02a      	b.n	80126c8 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8012672:	68bb      	ldr	r3, [r7, #8]
 8012674:	2b00      	cmp	r3, #0
 8012676:	d002      	beq.n	801267e <udp_connect+0x76>
 8012678:	68bb      	ldr	r3, [r7, #8]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	e000      	b.n	8012680 <udp_connect+0x78>
 801267e:	2300      	movs	r3, #0
 8012680:	68fa      	ldr	r2, [r7, #12]
 8012682:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8012684:	68fb      	ldr	r3, [r7, #12]
 8012686:	88fa      	ldrh	r2, [r7, #6]
 8012688:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	7c1b      	ldrb	r3, [r3, #16]
 801268e:	f043 0304 	orr.w	r3, r3, #4
 8012692:	b2da      	uxtb	r2, r3
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012698:	4b11      	ldr	r3, [pc, #68]	; (80126e0 <udp_connect+0xd8>)
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	617b      	str	r3, [r7, #20]
 801269e:	e008      	b.n	80126b2 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80126a0:	68fa      	ldr	r2, [r7, #12]
 80126a2:	697b      	ldr	r3, [r7, #20]
 80126a4:	429a      	cmp	r2, r3
 80126a6:	d101      	bne.n	80126ac <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80126a8:	2300      	movs	r3, #0
 80126aa:	e00d      	b.n	80126c8 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80126ac:	697b      	ldr	r3, [r7, #20]
 80126ae:	68db      	ldr	r3, [r3, #12]
 80126b0:	617b      	str	r3, [r7, #20]
 80126b2:	697b      	ldr	r3, [r7, #20]
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d1f3      	bne.n	80126a0 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80126b8:	4b09      	ldr	r3, [pc, #36]	; (80126e0 <udp_connect+0xd8>)
 80126ba:	681a      	ldr	r2, [r3, #0]
 80126bc:	68fb      	ldr	r3, [r7, #12]
 80126be:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80126c0:	4a07      	ldr	r2, [pc, #28]	; (80126e0 <udp_connect+0xd8>)
 80126c2:	68fb      	ldr	r3, [r7, #12]
 80126c4:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80126c6:	2300      	movs	r3, #0
}
 80126c8:	4618      	mov	r0, r3
 80126ca:	3718      	adds	r7, #24
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}
 80126d0:	0801a1a4 	.word	0x0801a1a4
 80126d4:	0801a484 	.word	0x0801a484
 80126d8:	0801a1f8 	.word	0x0801a1f8
 80126dc:	0801a4a0 	.word	0x0801a4a0
 80126e0:	2000f2bc 	.word	0x2000f2bc

080126e4 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80126e4:	b580      	push	{r7, lr}
 80126e6:	b084      	sub	sp, #16
 80126e8:	af00      	add	r7, sp, #0
 80126ea:	60f8      	str	r0, [r7, #12]
 80126ec:	60b9      	str	r1, [r7, #8]
 80126ee:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80126f0:	68fb      	ldr	r3, [r7, #12]
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d107      	bne.n	8012706 <udp_recv+0x22>
 80126f6:	4b08      	ldr	r3, [pc, #32]	; (8012718 <udp_recv+0x34>)
 80126f8:	f240 428a 	movw	r2, #1162	; 0x48a
 80126fc:	4907      	ldr	r1, [pc, #28]	; (801271c <udp_recv+0x38>)
 80126fe:	4808      	ldr	r0, [pc, #32]	; (8012720 <udp_recv+0x3c>)
 8012700:	f004 fcee 	bl	80170e0 <iprintf>
 8012704:	e005      	b.n	8012712 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	68ba      	ldr	r2, [r7, #8]
 801270a:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801270c:	68fb      	ldr	r3, [r7, #12]
 801270e:	687a      	ldr	r2, [r7, #4]
 8012710:	61da      	str	r2, [r3, #28]
}
 8012712:	3710      	adds	r7, #16
 8012714:	46bd      	mov	sp, r7
 8012716:	bd80      	pop	{r7, pc}
 8012718:	0801a1a4 	.word	0x0801a1a4
 801271c:	0801a4d8 	.word	0x0801a4d8
 8012720:	0801a1f8 	.word	0x0801a1f8

08012724 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8012724:	b580      	push	{r7, lr}
 8012726:	b084      	sub	sp, #16
 8012728:	af00      	add	r7, sp, #0
 801272a:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d107      	bne.n	8012742 <udp_remove+0x1e>
 8012732:	4b19      	ldr	r3, [pc, #100]	; (8012798 <udp_remove+0x74>)
 8012734:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8012738:	4918      	ldr	r1, [pc, #96]	; (801279c <udp_remove+0x78>)
 801273a:	4819      	ldr	r0, [pc, #100]	; (80127a0 <udp_remove+0x7c>)
 801273c:	f004 fcd0 	bl	80170e0 <iprintf>
 8012740:	e026      	b.n	8012790 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8012742:	4b18      	ldr	r3, [pc, #96]	; (80127a4 <udp_remove+0x80>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	687a      	ldr	r2, [r7, #4]
 8012748:	429a      	cmp	r2, r3
 801274a:	d105      	bne.n	8012758 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801274c:	4b15      	ldr	r3, [pc, #84]	; (80127a4 <udp_remove+0x80>)
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	68db      	ldr	r3, [r3, #12]
 8012752:	4a14      	ldr	r2, [pc, #80]	; (80127a4 <udp_remove+0x80>)
 8012754:	6013      	str	r3, [r2, #0]
 8012756:	e017      	b.n	8012788 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012758:	4b12      	ldr	r3, [pc, #72]	; (80127a4 <udp_remove+0x80>)
 801275a:	681b      	ldr	r3, [r3, #0]
 801275c:	60fb      	str	r3, [r7, #12]
 801275e:	e010      	b.n	8012782 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	68db      	ldr	r3, [r3, #12]
 8012764:	2b00      	cmp	r3, #0
 8012766:	d009      	beq.n	801277c <udp_remove+0x58>
 8012768:	68fb      	ldr	r3, [r7, #12]
 801276a:	68db      	ldr	r3, [r3, #12]
 801276c:	687a      	ldr	r2, [r7, #4]
 801276e:	429a      	cmp	r2, r3
 8012770:	d104      	bne.n	801277c <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	68da      	ldr	r2, [r3, #12]
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	60da      	str	r2, [r3, #12]
        break;
 801277a:	e005      	b.n	8012788 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801277c:	68fb      	ldr	r3, [r7, #12]
 801277e:	68db      	ldr	r3, [r3, #12]
 8012780:	60fb      	str	r3, [r7, #12]
 8012782:	68fb      	ldr	r3, [r7, #12]
 8012784:	2b00      	cmp	r3, #0
 8012786:	d1eb      	bne.n	8012760 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012788:	6879      	ldr	r1, [r7, #4]
 801278a:	2000      	movs	r0, #0
 801278c:	f7f8 fd3e 	bl	800b20c <memp_free>
}
 8012790:	3710      	adds	r7, #16
 8012792:	46bd      	mov	sp, r7
 8012794:	bd80      	pop	{r7, pc}
 8012796:	bf00      	nop
 8012798:	0801a1a4 	.word	0x0801a1a4
 801279c:	0801a4f0 	.word	0x0801a4f0
 80127a0:	0801a1f8 	.word	0x0801a1f8
 80127a4:	2000f2bc 	.word	0x2000f2bc

080127a8 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80127a8:	b580      	push	{r7, lr}
 80127aa:	b082      	sub	sp, #8
 80127ac:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80127ae:	2000      	movs	r0, #0
 80127b0:	f7f8 fcb6 	bl	800b120 <memp_malloc>
 80127b4:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	2b00      	cmp	r3, #0
 80127ba:	d007      	beq.n	80127cc <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80127bc:	2220      	movs	r2, #32
 80127be:	2100      	movs	r1, #0
 80127c0:	6878      	ldr	r0, [r7, #4]
 80127c2:	f004 fbf0 	bl	8016fa6 <memset>
    pcb->ttl = UDP_TTL;
 80127c6:	687b      	ldr	r3, [r7, #4]
 80127c8:	22ff      	movs	r2, #255	; 0xff
 80127ca:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80127cc:	687b      	ldr	r3, [r7, #4]
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3708      	adds	r7, #8
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd80      	pop	{r7, pc}
	...

080127d8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80127d8:	b480      	push	{r7}
 80127da:	b085      	sub	sp, #20
 80127dc:	af00      	add	r7, sp, #0
 80127de:	6078      	str	r0, [r7, #4]
 80127e0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d01e      	beq.n	8012826 <udp_netif_ip_addr_changed+0x4e>
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	681b      	ldr	r3, [r3, #0]
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d01a      	beq.n	8012826 <udp_netif_ip_addr_changed+0x4e>
 80127f0:	683b      	ldr	r3, [r7, #0]
 80127f2:	2b00      	cmp	r3, #0
 80127f4:	d017      	beq.n	8012826 <udp_netif_ip_addr_changed+0x4e>
 80127f6:	683b      	ldr	r3, [r7, #0]
 80127f8:	681b      	ldr	r3, [r3, #0]
 80127fa:	2b00      	cmp	r3, #0
 80127fc:	d013      	beq.n	8012826 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80127fe:	4b0d      	ldr	r3, [pc, #52]	; (8012834 <udp_netif_ip_addr_changed+0x5c>)
 8012800:	681b      	ldr	r3, [r3, #0]
 8012802:	60fb      	str	r3, [r7, #12]
 8012804:	e00c      	b.n	8012820 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	681a      	ldr	r2, [r3, #0]
 801280a:	687b      	ldr	r3, [r7, #4]
 801280c:	681b      	ldr	r3, [r3, #0]
 801280e:	429a      	cmp	r2, r3
 8012810:	d103      	bne.n	801281a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8012812:	683b      	ldr	r3, [r7, #0]
 8012814:	681a      	ldr	r2, [r3, #0]
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	68db      	ldr	r3, [r3, #12]
 801281e:	60fb      	str	r3, [r7, #12]
 8012820:	68fb      	ldr	r3, [r7, #12]
 8012822:	2b00      	cmp	r3, #0
 8012824:	d1ef      	bne.n	8012806 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8012826:	bf00      	nop
 8012828:	3714      	adds	r7, #20
 801282a:	46bd      	mov	sp, r7
 801282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012830:	4770      	bx	lr
 8012832:	bf00      	nop
 8012834:	2000f2bc 	.word	0x2000f2bc

08012838 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8012838:	b580      	push	{r7, lr}
 801283a:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 801283c:	4b20      	ldr	r3, [pc, #128]	; (80128c0 <dhcp_inc_pcb_refcount+0x88>)
 801283e:	781b      	ldrb	r3, [r3, #0]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d133      	bne.n	80128ac <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8012844:	4b1f      	ldr	r3, [pc, #124]	; (80128c4 <dhcp_inc_pcb_refcount+0x8c>)
 8012846:	681b      	ldr	r3, [r3, #0]
 8012848:	2b00      	cmp	r3, #0
 801284a:	d005      	beq.n	8012858 <dhcp_inc_pcb_refcount+0x20>
 801284c:	4b1e      	ldr	r3, [pc, #120]	; (80128c8 <dhcp_inc_pcb_refcount+0x90>)
 801284e:	22e5      	movs	r2, #229	; 0xe5
 8012850:	491e      	ldr	r1, [pc, #120]	; (80128cc <dhcp_inc_pcb_refcount+0x94>)
 8012852:	481f      	ldr	r0, [pc, #124]	; (80128d0 <dhcp_inc_pcb_refcount+0x98>)
 8012854:	f004 fc44 	bl	80170e0 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8012858:	f7ff ffa6 	bl	80127a8 <udp_new>
 801285c:	4603      	mov	r3, r0
 801285e:	4a19      	ldr	r2, [pc, #100]	; (80128c4 <dhcp_inc_pcb_refcount+0x8c>)
 8012860:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8012862:	4b18      	ldr	r3, [pc, #96]	; (80128c4 <dhcp_inc_pcb_refcount+0x8c>)
 8012864:	681b      	ldr	r3, [r3, #0]
 8012866:	2b00      	cmp	r3, #0
 8012868:	d102      	bne.n	8012870 <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 801286a:	f04f 33ff 	mov.w	r3, #4294967295
 801286e:	e024      	b.n	80128ba <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8012870:	4b14      	ldr	r3, [pc, #80]	; (80128c4 <dhcp_inc_pcb_refcount+0x8c>)
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	7a5a      	ldrb	r2, [r3, #9]
 8012876:	4b13      	ldr	r3, [pc, #76]	; (80128c4 <dhcp_inc_pcb_refcount+0x8c>)
 8012878:	681b      	ldr	r3, [r3, #0]
 801287a:	f042 0220 	orr.w	r2, r2, #32
 801287e:	b2d2      	uxtb	r2, r2
 8012880:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8012882:	4b10      	ldr	r3, [pc, #64]	; (80128c4 <dhcp_inc_pcb_refcount+0x8c>)
 8012884:	681b      	ldr	r3, [r3, #0]
 8012886:	2244      	movs	r2, #68	; 0x44
 8012888:	4912      	ldr	r1, [pc, #72]	; (80128d4 <dhcp_inc_pcb_refcount+0x9c>)
 801288a:	4618      	mov	r0, r3
 801288c:	f7ff fe34 	bl	80124f8 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 8012890:	4b0c      	ldr	r3, [pc, #48]	; (80128c4 <dhcp_inc_pcb_refcount+0x8c>)
 8012892:	681b      	ldr	r3, [r3, #0]
 8012894:	2243      	movs	r2, #67	; 0x43
 8012896:	490f      	ldr	r1, [pc, #60]	; (80128d4 <dhcp_inc_pcb_refcount+0x9c>)
 8012898:	4618      	mov	r0, r3
 801289a:	f7ff feb5 	bl	8012608 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801289e:	4b09      	ldr	r3, [pc, #36]	; (80128c4 <dhcp_inc_pcb_refcount+0x8c>)
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	2200      	movs	r2, #0
 80128a4:	490c      	ldr	r1, [pc, #48]	; (80128d8 <dhcp_inc_pcb_refcount+0xa0>)
 80128a6:	4618      	mov	r0, r3
 80128a8:	f7ff ff1c 	bl	80126e4 <udp_recv>
  }

  dhcp_pcb_refcount++;
 80128ac:	4b04      	ldr	r3, [pc, #16]	; (80128c0 <dhcp_inc_pcb_refcount+0x88>)
 80128ae:	781b      	ldrb	r3, [r3, #0]
 80128b0:	3301      	adds	r3, #1
 80128b2:	b2da      	uxtb	r2, r3
 80128b4:	4b02      	ldr	r3, [pc, #8]	; (80128c0 <dhcp_inc_pcb_refcount+0x88>)
 80128b6:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 80128b8:	2300      	movs	r3, #0
}
 80128ba:	4618      	mov	r0, r3
 80128bc:	bd80      	pop	{r7, pc}
 80128be:	bf00      	nop
 80128c0:	2000f2ec 	.word	0x2000f2ec
 80128c4:	2000f2e8 	.word	0x2000f2e8
 80128c8:	0801a508 	.word	0x0801a508
 80128cc:	0801a540 	.word	0x0801a540
 80128d0:	0801a568 	.word	0x0801a568
 80128d4:	0801b0f8 	.word	0x0801b0f8
 80128d8:	08014171 	.word	0x08014171

080128dc <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 80128dc:	b580      	push	{r7, lr}
 80128de:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 80128e0:	4b0e      	ldr	r3, [pc, #56]	; (801291c <dhcp_dec_pcb_refcount+0x40>)
 80128e2:	781b      	ldrb	r3, [r3, #0]
 80128e4:	2b00      	cmp	r3, #0
 80128e6:	d105      	bne.n	80128f4 <dhcp_dec_pcb_refcount+0x18>
 80128e8:	4b0d      	ldr	r3, [pc, #52]	; (8012920 <dhcp_dec_pcb_refcount+0x44>)
 80128ea:	22ff      	movs	r2, #255	; 0xff
 80128ec:	490d      	ldr	r1, [pc, #52]	; (8012924 <dhcp_dec_pcb_refcount+0x48>)
 80128ee:	480e      	ldr	r0, [pc, #56]	; (8012928 <dhcp_dec_pcb_refcount+0x4c>)
 80128f0:	f004 fbf6 	bl	80170e0 <iprintf>
  dhcp_pcb_refcount--;
 80128f4:	4b09      	ldr	r3, [pc, #36]	; (801291c <dhcp_dec_pcb_refcount+0x40>)
 80128f6:	781b      	ldrb	r3, [r3, #0]
 80128f8:	3b01      	subs	r3, #1
 80128fa:	b2da      	uxtb	r2, r3
 80128fc:	4b07      	ldr	r3, [pc, #28]	; (801291c <dhcp_dec_pcb_refcount+0x40>)
 80128fe:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 8012900:	4b06      	ldr	r3, [pc, #24]	; (801291c <dhcp_dec_pcb_refcount+0x40>)
 8012902:	781b      	ldrb	r3, [r3, #0]
 8012904:	2b00      	cmp	r3, #0
 8012906:	d107      	bne.n	8012918 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012908:	4b08      	ldr	r3, [pc, #32]	; (801292c <dhcp_dec_pcb_refcount+0x50>)
 801290a:	681b      	ldr	r3, [r3, #0]
 801290c:	4618      	mov	r0, r3
 801290e:	f7ff ff09 	bl	8012724 <udp_remove>
    dhcp_pcb = NULL;
 8012912:	4b06      	ldr	r3, [pc, #24]	; (801292c <dhcp_dec_pcb_refcount+0x50>)
 8012914:	2200      	movs	r2, #0
 8012916:	601a      	str	r2, [r3, #0]
  }
}
 8012918:	bf00      	nop
 801291a:	bd80      	pop	{r7, pc}
 801291c:	2000f2ec 	.word	0x2000f2ec
 8012920:	0801a508 	.word	0x0801a508
 8012924:	0801a590 	.word	0x0801a590
 8012928:	0801a568 	.word	0x0801a568
 801292c:	2000f2e8 	.word	0x2000f2e8

08012930 <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 8012930:	b580      	push	{r7, lr}
 8012932:	b084      	sub	sp, #16
 8012934:	af00      	add	r7, sp, #0
 8012936:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801293c:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801293e:	210c      	movs	r1, #12
 8012940:	68f8      	ldr	r0, [r7, #12]
 8012942:	f001 f857 	bl	80139f4 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8012946:	4b06      	ldr	r3, [pc, #24]	; (8012960 <dhcp_handle_nak+0x30>)
 8012948:	4a05      	ldr	r2, [pc, #20]	; (8012960 <dhcp_handle_nak+0x30>)
 801294a:	4905      	ldr	r1, [pc, #20]	; (8012960 <dhcp_handle_nak+0x30>)
 801294c:	6878      	ldr	r0, [r7, #4]
 801294e:	f7f8 fe83 	bl	800b658 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 8012952:	6878      	ldr	r0, [r7, #4]
 8012954:	f000 fc4a 	bl	80131ec <dhcp_discover>
}
 8012958:	bf00      	nop
 801295a:	3710      	adds	r7, #16
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}
 8012960:	0801b0f8 	.word	0x0801b0f8

08012964 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 8012964:	b580      	push	{r7, lr}
 8012966:	b084      	sub	sp, #16
 8012968:	af00      	add	r7, sp, #0
 801296a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012970:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 8012972:	2108      	movs	r1, #8
 8012974:	68f8      	ldr	r0, [r7, #12]
 8012976:	f001 f83d 	bl	80139f4 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	331c      	adds	r3, #28
 801297e:	2200      	movs	r2, #0
 8012980:	4619      	mov	r1, r3
 8012982:	6878      	ldr	r0, [r7, #4]
 8012984:	f002 fb3e 	bl	8015004 <etharp_query>
 8012988:	4603      	mov	r3, r0
 801298a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 801298c:	68fb      	ldr	r3, [r7, #12]
 801298e:	799b      	ldrb	r3, [r3, #6]
 8012990:	2bff      	cmp	r3, #255	; 0xff
 8012992:	d005      	beq.n	80129a0 <dhcp_check+0x3c>
    dhcp->tries++;
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	799b      	ldrb	r3, [r3, #6]
 8012998:	3301      	adds	r3, #1
 801299a:	b2da      	uxtb	r2, r3
 801299c:	68fb      	ldr	r3, [r7, #12]
 801299e:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 80129a0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80129a4:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80129a6:	893b      	ldrh	r3, [r7, #8]
 80129a8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80129ac:	4a06      	ldr	r2, [pc, #24]	; (80129c8 <dhcp_check+0x64>)
 80129ae:	fb82 1203 	smull	r1, r2, r2, r3
 80129b2:	1152      	asrs	r2, r2, #5
 80129b4:	17db      	asrs	r3, r3, #31
 80129b6:	1ad3      	subs	r3, r2, r3
 80129b8:	b29a      	uxth	r2, r3
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 80129be:	bf00      	nop
 80129c0:	3710      	adds	r7, #16
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	10624dd3 	.word	0x10624dd3

080129cc <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b084      	sub	sp, #16
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
 80129d4:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80129d6:	687b      	ldr	r3, [r7, #4]
 80129d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80129da:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 80129dc:	4b0c      	ldr	r3, [pc, #48]	; (8012a10 <dhcp_handle_offer+0x44>)
 80129de:	789b      	ldrb	r3, [r3, #2]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d011      	beq.n	8012a08 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 80129e4:	68fb      	ldr	r3, [r7, #12]
 80129e6:	2200      	movs	r2, #0
 80129e8:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 80129ea:	4b0a      	ldr	r3, [pc, #40]	; (8012a14 <dhcp_handle_offer+0x48>)
 80129ec:	689b      	ldr	r3, [r3, #8]
 80129ee:	4618      	mov	r0, r3
 80129f0:	f7f7 fed3 	bl	800a79a <lwip_htonl>
 80129f4:	4602      	mov	r2, r0
 80129f6:	68fb      	ldr	r3, [r7, #12]
 80129f8:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 80129fa:	683b      	ldr	r3, [r7, #0]
 80129fc:	691a      	ldr	r2, [r3, #16]
 80129fe:	68fb      	ldr	r3, [r7, #12]
 8012a00:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 8012a02:	6878      	ldr	r0, [r7, #4]
 8012a04:	f000 f808 	bl	8012a18 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012a08:	bf00      	nop
 8012a0a:	3710      	adds	r7, #16
 8012a0c:	46bd      	mov	sp, r7
 8012a0e:	bd80      	pop	{r7, pc}
 8012a10:	2000f2e0 	.word	0x2000f2e0
 8012a14:	2000f2c0 	.word	0x2000f2c0

08012a18 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012a18:	b5b0      	push	{r4, r5, r7, lr}
 8012a1a:	b08a      	sub	sp, #40	; 0x28
 8012a1c:	af02      	add	r7, sp, #8
 8012a1e:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d109      	bne.n	8012a3a <dhcp_select+0x22>
 8012a26:	4b71      	ldr	r3, [pc, #452]	; (8012bec <dhcp_select+0x1d4>)
 8012a28:	f240 1277 	movw	r2, #375	; 0x177
 8012a2c:	4970      	ldr	r1, [pc, #448]	; (8012bf0 <dhcp_select+0x1d8>)
 8012a2e:	4871      	ldr	r0, [pc, #452]	; (8012bf4 <dhcp_select+0x1dc>)
 8012a30:	f004 fb56 	bl	80170e0 <iprintf>
 8012a34:	f06f 030f 	mvn.w	r3, #15
 8012a38:	e0d3      	b.n	8012be2 <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a3e:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 8012a40:	69bb      	ldr	r3, [r7, #24]
 8012a42:	2b00      	cmp	r3, #0
 8012a44:	d109      	bne.n	8012a5a <dhcp_select+0x42>
 8012a46:	4b69      	ldr	r3, [pc, #420]	; (8012bec <dhcp_select+0x1d4>)
 8012a48:	f240 1279 	movw	r2, #377	; 0x179
 8012a4c:	496a      	ldr	r1, [pc, #424]	; (8012bf8 <dhcp_select+0x1e0>)
 8012a4e:	4869      	ldr	r0, [pc, #420]	; (8012bf4 <dhcp_select+0x1dc>)
 8012a50:	f004 fb46 	bl	80170e0 <iprintf>
 8012a54:	f06f 0305 	mvn.w	r3, #5
 8012a58:	e0c3      	b.n	8012be2 <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 8012a5a:	2101      	movs	r1, #1
 8012a5c:	69b8      	ldr	r0, [r7, #24]
 8012a5e:	f000 ffc9 	bl	80139f4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012a62:	f107 030c 	add.w	r3, r7, #12
 8012a66:	2203      	movs	r2, #3
 8012a68:	69b9      	ldr	r1, [r7, #24]
 8012a6a:	6878      	ldr	r0, [r7, #4]
 8012a6c:	f001 fc4e 	bl	801430c <dhcp_create_msg>
 8012a70:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012a72:	697b      	ldr	r3, [r7, #20]
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	f000 8085 	beq.w	8012b84 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012a7a:	697b      	ldr	r3, [r7, #20]
 8012a7c:	685b      	ldr	r3, [r3, #4]
 8012a7e:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012a80:	89b8      	ldrh	r0, [r7, #12]
 8012a82:	693b      	ldr	r3, [r7, #16]
 8012a84:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012a88:	2302      	movs	r3, #2
 8012a8a:	2239      	movs	r2, #57	; 0x39
 8012a8c:	f000 ffcc 	bl	8013a28 <dhcp_option>
 8012a90:	4603      	mov	r3, r0
 8012a92:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012a94:	89b8      	ldrh	r0, [r7, #12]
 8012a96:	693b      	ldr	r3, [r7, #16]
 8012a98:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8012aa0:	461a      	mov	r2, r3
 8012aa2:	f001 f81b 	bl	8013adc <dhcp_option_short>
 8012aa6:	4603      	mov	r3, r0
 8012aa8:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012aaa:	89b8      	ldrh	r0, [r7, #12]
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012ab2:	2304      	movs	r3, #4
 8012ab4:	2232      	movs	r2, #50	; 0x32
 8012ab6:	f000 ffb7 	bl	8013a28 <dhcp_option>
 8012aba:	4603      	mov	r3, r0
 8012abc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012abe:	89bc      	ldrh	r4, [r7, #12]
 8012ac0:	693b      	ldr	r3, [r7, #16]
 8012ac2:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012ac6:	69bb      	ldr	r3, [r7, #24]
 8012ac8:	69db      	ldr	r3, [r3, #28]
 8012aca:	4618      	mov	r0, r3
 8012acc:	f7f7 fe65 	bl	800a79a <lwip_htonl>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	461a      	mov	r2, r3
 8012ad4:	4629      	mov	r1, r5
 8012ad6:	4620      	mov	r0, r4
 8012ad8:	f001 f832 	bl	8013b40 <dhcp_option_long>
 8012adc:	4603      	mov	r3, r0
 8012ade:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 8012ae0:	89b8      	ldrh	r0, [r7, #12]
 8012ae2:	693b      	ldr	r3, [r7, #16]
 8012ae4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012ae8:	2304      	movs	r3, #4
 8012aea:	2236      	movs	r2, #54	; 0x36
 8012aec:	f000 ff9c 	bl	8013a28 <dhcp_option>
 8012af0:	4603      	mov	r3, r0
 8012af2:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012af4:	89bc      	ldrh	r4, [r7, #12]
 8012af6:	693b      	ldr	r3, [r7, #16]
 8012af8:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012afc:	69bb      	ldr	r3, [r7, #24]
 8012afe:	699b      	ldr	r3, [r3, #24]
 8012b00:	4618      	mov	r0, r3
 8012b02:	f7f7 fe4a 	bl	800a79a <lwip_htonl>
 8012b06:	4603      	mov	r3, r0
 8012b08:	461a      	mov	r2, r3
 8012b0a:	4629      	mov	r1, r5
 8012b0c:	4620      	mov	r0, r4
 8012b0e:	f001 f817 	bl	8013b40 <dhcp_option_long>
 8012b12:	4603      	mov	r3, r0
 8012b14:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012b16:	89b8      	ldrh	r0, [r7, #12]
 8012b18:	693b      	ldr	r3, [r7, #16]
 8012b1a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b1e:	2303      	movs	r3, #3
 8012b20:	2237      	movs	r2, #55	; 0x37
 8012b22:	f000 ff81 	bl	8013a28 <dhcp_option>
 8012b26:	4603      	mov	r3, r0
 8012b28:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012b2a:	2300      	movs	r3, #0
 8012b2c:	77bb      	strb	r3, [r7, #30]
 8012b2e:	e00e      	b.n	8012b4e <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012b30:	89b8      	ldrh	r0, [r7, #12]
 8012b32:	693b      	ldr	r3, [r7, #16]
 8012b34:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012b38:	7fbb      	ldrb	r3, [r7, #30]
 8012b3a:	4a30      	ldr	r2, [pc, #192]	; (8012bfc <dhcp_select+0x1e4>)
 8012b3c:	5cd3      	ldrb	r3, [r2, r3]
 8012b3e:	461a      	mov	r2, r3
 8012b40:	f000 ffa6 	bl	8013a90 <dhcp_option_byte>
 8012b44:	4603      	mov	r3, r0
 8012b46:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012b48:	7fbb      	ldrb	r3, [r7, #30]
 8012b4a:	3301      	adds	r3, #1
 8012b4c:	77bb      	strb	r3, [r7, #30]
 8012b4e:	7fbb      	ldrb	r3, [r7, #30]
 8012b50:	2b02      	cmp	r3, #2
 8012b52:	d9ed      	bls.n	8012b30 <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012b54:	89b8      	ldrh	r0, [r7, #12]
 8012b56:	693b      	ldr	r3, [r7, #16]
 8012b58:	33f0      	adds	r3, #240	; 0xf0
 8012b5a:	697a      	ldr	r2, [r7, #20]
 8012b5c:	4619      	mov	r1, r3
 8012b5e:	f001 fcab 	bl	80144b8 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012b62:	4b27      	ldr	r3, [pc, #156]	; (8012c00 <dhcp_select+0x1e8>)
 8012b64:	6818      	ldr	r0, [r3, #0]
 8012b66:	4b27      	ldr	r3, [pc, #156]	; (8012c04 <dhcp_select+0x1ec>)
 8012b68:	9301      	str	r3, [sp, #4]
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	9300      	str	r3, [sp, #0]
 8012b6e:	2343      	movs	r3, #67	; 0x43
 8012b70:	4a25      	ldr	r2, [pc, #148]	; (8012c08 <dhcp_select+0x1f0>)
 8012b72:	6979      	ldr	r1, [r7, #20]
 8012b74:	f7ff fbda 	bl	801232c <udp_sendto_if_src>
 8012b78:	4603      	mov	r3, r0
 8012b7a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012b7c:	6978      	ldr	r0, [r7, #20]
 8012b7e:	f7f9 fc1f 	bl	800c3c0 <pbuf_free>
 8012b82:	e001      	b.n	8012b88 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012b84:	23ff      	movs	r3, #255	; 0xff
 8012b86:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012b88:	69bb      	ldr	r3, [r7, #24]
 8012b8a:	799b      	ldrb	r3, [r3, #6]
 8012b8c:	2bff      	cmp	r3, #255	; 0xff
 8012b8e:	d005      	beq.n	8012b9c <dhcp_select+0x184>
    dhcp->tries++;
 8012b90:	69bb      	ldr	r3, [r7, #24]
 8012b92:	799b      	ldrb	r3, [r3, #6]
 8012b94:	3301      	adds	r3, #1
 8012b96:	b2da      	uxtb	r2, r3
 8012b98:	69bb      	ldr	r3, [r7, #24]
 8012b9a:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012b9c:	69bb      	ldr	r3, [r7, #24]
 8012b9e:	799b      	ldrb	r3, [r3, #6]
 8012ba0:	2b05      	cmp	r3, #5
 8012ba2:	d80d      	bhi.n	8012bc0 <dhcp_select+0x1a8>
 8012ba4:	69bb      	ldr	r3, [r7, #24]
 8012ba6:	799b      	ldrb	r3, [r3, #6]
 8012ba8:	461a      	mov	r2, r3
 8012baa:	2301      	movs	r3, #1
 8012bac:	4093      	lsls	r3, r2
 8012bae:	b29b      	uxth	r3, r3
 8012bb0:	461a      	mov	r2, r3
 8012bb2:	0152      	lsls	r2, r2, #5
 8012bb4:	1ad2      	subs	r2, r2, r3
 8012bb6:	0092      	lsls	r2, r2, #2
 8012bb8:	4413      	add	r3, r2
 8012bba:	00db      	lsls	r3, r3, #3
 8012bbc:	b29b      	uxth	r3, r3
 8012bbe:	e001      	b.n	8012bc4 <dhcp_select+0x1ac>
 8012bc0:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012bc4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012bc6:	89fb      	ldrh	r3, [r7, #14]
 8012bc8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012bcc:	4a0f      	ldr	r2, [pc, #60]	; (8012c0c <dhcp_select+0x1f4>)
 8012bce:	fb82 1203 	smull	r1, r2, r2, r3
 8012bd2:	1152      	asrs	r2, r2, #5
 8012bd4:	17db      	asrs	r3, r3, #31
 8012bd6:	1ad3      	subs	r3, r2, r3
 8012bd8:	b29a      	uxth	r2, r3
 8012bda:	69bb      	ldr	r3, [r7, #24]
 8012bdc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012bde:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012be2:	4618      	mov	r0, r3
 8012be4:	3720      	adds	r7, #32
 8012be6:	46bd      	mov	sp, r7
 8012be8:	bdb0      	pop	{r4, r5, r7, pc}
 8012bea:	bf00      	nop
 8012bec:	0801a508 	.word	0x0801a508
 8012bf0:	0801a5b4 	.word	0x0801a5b4
 8012bf4:	0801a568 	.word	0x0801a568
 8012bf8:	0801a5d0 	.word	0x0801a5d0
 8012bfc:	20000030 	.word	0x20000030
 8012c00:	2000f2e8 	.word	0x2000f2e8
 8012c04:	0801b0f8 	.word	0x0801b0f8
 8012c08:	0801b0fc 	.word	0x0801b0fc
 8012c0c:	10624dd3 	.word	0x10624dd3

08012c10 <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 8012c10:	b580      	push	{r7, lr}
 8012c12:	b082      	sub	sp, #8
 8012c14:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8012c16:	4b27      	ldr	r3, [pc, #156]	; (8012cb4 <dhcp_coarse_tmr+0xa4>)
 8012c18:	681b      	ldr	r3, [r3, #0]
 8012c1a:	607b      	str	r3, [r7, #4]
 8012c1c:	e042      	b.n	8012ca4 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012c22:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 8012c24:	683b      	ldr	r3, [r7, #0]
 8012c26:	2b00      	cmp	r3, #0
 8012c28:	d039      	beq.n	8012c9e <dhcp_coarse_tmr+0x8e>
 8012c2a:	683b      	ldr	r3, [r7, #0]
 8012c2c:	795b      	ldrb	r3, [r3, #5]
 8012c2e:	2b00      	cmp	r3, #0
 8012c30:	d035      	beq.n	8012c9e <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 8012c32:	683b      	ldr	r3, [r7, #0]
 8012c34:	8a9b      	ldrh	r3, [r3, #20]
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d012      	beq.n	8012c60 <dhcp_coarse_tmr+0x50>
 8012c3a:	683b      	ldr	r3, [r7, #0]
 8012c3c:	8a5b      	ldrh	r3, [r3, #18]
 8012c3e:	3301      	adds	r3, #1
 8012c40:	b29a      	uxth	r2, r3
 8012c42:	683b      	ldr	r3, [r7, #0]
 8012c44:	825a      	strh	r2, [r3, #18]
 8012c46:	683b      	ldr	r3, [r7, #0]
 8012c48:	8a5a      	ldrh	r2, [r3, #18]
 8012c4a:	683b      	ldr	r3, [r7, #0]
 8012c4c:	8a9b      	ldrh	r3, [r3, #20]
 8012c4e:	429a      	cmp	r2, r3
 8012c50:	d106      	bne.n	8012c60 <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 8012c52:	6878      	ldr	r0, [r7, #4]
 8012c54:	f000 fe34 	bl	80138c0 <dhcp_release_and_stop>
        dhcp_start(netif);
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f000 f96b 	bl	8012f34 <dhcp_start>
 8012c5e:	e01e      	b.n	8012c9e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 8012c60:	683b      	ldr	r3, [r7, #0]
 8012c62:	8a1b      	ldrh	r3, [r3, #16]
 8012c64:	2b00      	cmp	r3, #0
 8012c66:	d00b      	beq.n	8012c80 <dhcp_coarse_tmr+0x70>
 8012c68:	683b      	ldr	r3, [r7, #0]
 8012c6a:	8a1b      	ldrh	r3, [r3, #16]
 8012c6c:	1e5a      	subs	r2, r3, #1
 8012c6e:	b291      	uxth	r1, r2
 8012c70:	683a      	ldr	r2, [r7, #0]
 8012c72:	8211      	strh	r1, [r2, #16]
 8012c74:	2b01      	cmp	r3, #1
 8012c76:	d103      	bne.n	8012c80 <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 8012c78:	6878      	ldr	r0, [r7, #4]
 8012c7a:	f000 f8c7 	bl	8012e0c <dhcp_t2_timeout>
 8012c7e:	e00e      	b.n	8012c9e <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 8012c80:	683b      	ldr	r3, [r7, #0]
 8012c82:	89db      	ldrh	r3, [r3, #14]
 8012c84:	2b00      	cmp	r3, #0
 8012c86:	d00a      	beq.n	8012c9e <dhcp_coarse_tmr+0x8e>
 8012c88:	683b      	ldr	r3, [r7, #0]
 8012c8a:	89db      	ldrh	r3, [r3, #14]
 8012c8c:	1e5a      	subs	r2, r3, #1
 8012c8e:	b291      	uxth	r1, r2
 8012c90:	683a      	ldr	r2, [r7, #0]
 8012c92:	81d1      	strh	r1, [r2, #14]
 8012c94:	2b01      	cmp	r3, #1
 8012c96:	d102      	bne.n	8012c9e <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012c98:	6878      	ldr	r0, [r7, #4]
 8012c9a:	f000 f888 	bl	8012dae <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 8012c9e:	687b      	ldr	r3, [r7, #4]
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	607b      	str	r3, [r7, #4]
 8012ca4:	687b      	ldr	r3, [r7, #4]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d1b9      	bne.n	8012c1e <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8012caa:	bf00      	nop
 8012cac:	bf00      	nop
 8012cae:	3708      	adds	r7, #8
 8012cb0:	46bd      	mov	sp, r7
 8012cb2:	bd80      	pop	{r7, pc}
 8012cb4:	2000f20c 	.word	0x2000f20c

08012cb8 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012cb8:	b580      	push	{r7, lr}
 8012cba:	b082      	sub	sp, #8
 8012cbc:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 8012cbe:	4b16      	ldr	r3, [pc, #88]	; (8012d18 <dhcp_fine_tmr+0x60>)
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	607b      	str	r3, [r7, #4]
 8012cc4:	e020      	b.n	8012d08 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012cca:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012ccc:	683b      	ldr	r3, [r7, #0]
 8012cce:	2b00      	cmp	r3, #0
 8012cd0:	d017      	beq.n	8012d02 <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 8012cd2:	683b      	ldr	r3, [r7, #0]
 8012cd4:	891b      	ldrh	r3, [r3, #8]
 8012cd6:	2b01      	cmp	r3, #1
 8012cd8:	d906      	bls.n	8012ce8 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	891b      	ldrh	r3, [r3, #8]
 8012cde:	3b01      	subs	r3, #1
 8012ce0:	b29a      	uxth	r2, r3
 8012ce2:	683b      	ldr	r3, [r7, #0]
 8012ce4:	811a      	strh	r2, [r3, #8]
 8012ce6:	e00c      	b.n	8012d02 <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012ce8:	683b      	ldr	r3, [r7, #0]
 8012cea:	891b      	ldrh	r3, [r3, #8]
 8012cec:	2b01      	cmp	r3, #1
 8012cee:	d108      	bne.n	8012d02 <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 8012cf0:	683b      	ldr	r3, [r7, #0]
 8012cf2:	891b      	ldrh	r3, [r3, #8]
 8012cf4:	3b01      	subs	r3, #1
 8012cf6:	b29a      	uxth	r2, r3
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012cfc:	6878      	ldr	r0, [r7, #4]
 8012cfe:	f000 f80d 	bl	8012d1c <dhcp_timeout>
  NETIF_FOREACH(netif) {
 8012d02:	687b      	ldr	r3, [r7, #4]
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	607b      	str	r3, [r7, #4]
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	2b00      	cmp	r3, #0
 8012d0c:	d1db      	bne.n	8012cc6 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 8012d0e:	bf00      	nop
 8012d10:	bf00      	nop
 8012d12:	3708      	adds	r7, #8
 8012d14:	46bd      	mov	sp, r7
 8012d16:	bd80      	pop	{r7, pc}
 8012d18:	2000f20c 	.word	0x2000f20c

08012d1c <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012d1c:	b580      	push	{r7, lr}
 8012d1e:	b084      	sub	sp, #16
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012d28:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 8012d2a:	68fb      	ldr	r3, [r7, #12]
 8012d2c:	795b      	ldrb	r3, [r3, #5]
 8012d2e:	2b0c      	cmp	r3, #12
 8012d30:	d003      	beq.n	8012d3a <dhcp_timeout+0x1e>
 8012d32:	68fb      	ldr	r3, [r7, #12]
 8012d34:	795b      	ldrb	r3, [r3, #5]
 8012d36:	2b06      	cmp	r3, #6
 8012d38:	d103      	bne.n	8012d42 <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 8012d3a:	6878      	ldr	r0, [r7, #4]
 8012d3c:	f000 fa56 	bl	80131ec <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 8012d40:	e031      	b.n	8012da6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	795b      	ldrb	r3, [r3, #5]
 8012d46:	2b01      	cmp	r3, #1
 8012d48:	d10e      	bne.n	8012d68 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 8012d4a:	68fb      	ldr	r3, [r7, #12]
 8012d4c:	799b      	ldrb	r3, [r3, #6]
 8012d4e:	2b05      	cmp	r3, #5
 8012d50:	d803      	bhi.n	8012d5a <dhcp_timeout+0x3e>
      dhcp_select(netif);
 8012d52:	6878      	ldr	r0, [r7, #4]
 8012d54:	f7ff fe60 	bl	8012a18 <dhcp_select>
}
 8012d58:	e025      	b.n	8012da6 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 8012d5a:	6878      	ldr	r0, [r7, #4]
 8012d5c:	f000 fdb0 	bl	80138c0 <dhcp_release_and_stop>
      dhcp_start(netif);
 8012d60:	6878      	ldr	r0, [r7, #4]
 8012d62:	f000 f8e7 	bl	8012f34 <dhcp_start>
}
 8012d66:	e01e      	b.n	8012da6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 8012d68:	68fb      	ldr	r3, [r7, #12]
 8012d6a:	795b      	ldrb	r3, [r3, #5]
 8012d6c:	2b08      	cmp	r3, #8
 8012d6e:	d10b      	bne.n	8012d88 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 8012d70:	68fb      	ldr	r3, [r7, #12]
 8012d72:	799b      	ldrb	r3, [r3, #6]
 8012d74:	2b01      	cmp	r3, #1
 8012d76:	d803      	bhi.n	8012d80 <dhcp_timeout+0x64>
      dhcp_check(netif);
 8012d78:	6878      	ldr	r0, [r7, #4]
 8012d7a:	f7ff fdf3 	bl	8012964 <dhcp_check>
}
 8012d7e:	e012      	b.n	8012da6 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 8012d80:	6878      	ldr	r0, [r7, #4]
 8012d82:	f000 fad5 	bl	8013330 <dhcp_bind>
}
 8012d86:	e00e      	b.n	8012da6 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8012d88:	68fb      	ldr	r3, [r7, #12]
 8012d8a:	795b      	ldrb	r3, [r3, #5]
 8012d8c:	2b03      	cmp	r3, #3
 8012d8e:	d10a      	bne.n	8012da6 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	799b      	ldrb	r3, [r3, #6]
 8012d94:	2b01      	cmp	r3, #1
 8012d96:	d803      	bhi.n	8012da0 <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8012d98:	6878      	ldr	r0, [r7, #4]
 8012d9a:	f000 fcdb 	bl	8013754 <dhcp_reboot>
}
 8012d9e:	e002      	b.n	8012da6 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 8012da0:	6878      	ldr	r0, [r7, #4]
 8012da2:	f000 fa23 	bl	80131ec <dhcp_discover>
}
 8012da6:	bf00      	nop
 8012da8:	3710      	adds	r7, #16
 8012daa:	46bd      	mov	sp, r7
 8012dac:	bd80      	pop	{r7, pc}

08012dae <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 8012dae:	b580      	push	{r7, lr}
 8012db0:	b084      	sub	sp, #16
 8012db2:	af00      	add	r7, sp, #0
 8012db4:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012db6:	687b      	ldr	r3, [r7, #4]
 8012db8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012dba:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012dbc:	68fb      	ldr	r3, [r7, #12]
 8012dbe:	795b      	ldrb	r3, [r3, #5]
 8012dc0:	2b01      	cmp	r3, #1
 8012dc2:	d007      	beq.n	8012dd4 <dhcp_t1_timeout+0x26>
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	795b      	ldrb	r3, [r3, #5]
 8012dc8:	2b0a      	cmp	r3, #10
 8012dca:	d003      	beq.n	8012dd4 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012dd0:	2b05      	cmp	r3, #5
 8012dd2:	d117      	bne.n	8012e04 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8012dd4:	6878      	ldr	r0, [r7, #4]
 8012dd6:	f000 fb85 	bl	80134e4 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012dda:	68fb      	ldr	r3, [r7, #12]
 8012ddc:	899b      	ldrh	r3, [r3, #12]
 8012dde:	461a      	mov	r2, r3
 8012de0:	68fb      	ldr	r3, [r7, #12]
 8012de2:	8a5b      	ldrh	r3, [r3, #18]
 8012de4:	1ad3      	subs	r3, r2, r3
 8012de6:	2b01      	cmp	r3, #1
 8012de8:	dd0c      	ble.n	8012e04 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012dea:	68fb      	ldr	r3, [r7, #12]
 8012dec:	899b      	ldrh	r3, [r3, #12]
 8012dee:	461a      	mov	r2, r3
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	8a5b      	ldrh	r3, [r3, #18]
 8012df4:	1ad3      	subs	r3, r2, r3
 8012df6:	2b00      	cmp	r3, #0
 8012df8:	da00      	bge.n	8012dfc <dhcp_t1_timeout+0x4e>
 8012dfa:	3301      	adds	r3, #1
 8012dfc:	105b      	asrs	r3, r3, #1
 8012dfe:	b29a      	uxth	r2, r3
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8012e04:	bf00      	nop
 8012e06:	3710      	adds	r7, #16
 8012e08:	46bd      	mov	sp, r7
 8012e0a:	bd80      	pop	{r7, pc}

08012e0c <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012e0c:	b580      	push	{r7, lr}
 8012e0e:	b084      	sub	sp, #16
 8012e10:	af00      	add	r7, sp, #0
 8012e12:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012e14:	687b      	ldr	r3, [r7, #4]
 8012e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e18:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012e1a:	68fb      	ldr	r3, [r7, #12]
 8012e1c:	795b      	ldrb	r3, [r3, #5]
 8012e1e:	2b01      	cmp	r3, #1
 8012e20:	d00b      	beq.n	8012e3a <dhcp_t2_timeout+0x2e>
 8012e22:	68fb      	ldr	r3, [r7, #12]
 8012e24:	795b      	ldrb	r3, [r3, #5]
 8012e26:	2b0a      	cmp	r3, #10
 8012e28:	d007      	beq.n	8012e3a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012e2a:	68fb      	ldr	r3, [r7, #12]
 8012e2c:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012e2e:	2b05      	cmp	r3, #5
 8012e30:	d003      	beq.n	8012e3a <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 8012e32:	68fb      	ldr	r3, [r7, #12]
 8012e34:	795b      	ldrb	r3, [r3, #5]
 8012e36:	2b04      	cmp	r3, #4
 8012e38:	d117      	bne.n	8012e6a <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 8012e3a:	6878      	ldr	r0, [r7, #4]
 8012e3c:	f000 fbee 	bl	801361c <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012e40:	68fb      	ldr	r3, [r7, #12]
 8012e42:	8a9b      	ldrh	r3, [r3, #20]
 8012e44:	461a      	mov	r2, r3
 8012e46:	68fb      	ldr	r3, [r7, #12]
 8012e48:	8a5b      	ldrh	r3, [r3, #18]
 8012e4a:	1ad3      	subs	r3, r2, r3
 8012e4c:	2b01      	cmp	r3, #1
 8012e4e:	dd0c      	ble.n	8012e6a <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 8012e50:	68fb      	ldr	r3, [r7, #12]
 8012e52:	8a9b      	ldrh	r3, [r3, #20]
 8012e54:	461a      	mov	r2, r3
 8012e56:	68fb      	ldr	r3, [r7, #12]
 8012e58:	8a5b      	ldrh	r3, [r3, #18]
 8012e5a:	1ad3      	subs	r3, r2, r3
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	da00      	bge.n	8012e62 <dhcp_t2_timeout+0x56>
 8012e60:	3301      	adds	r3, #1
 8012e62:	105b      	asrs	r3, r3, #1
 8012e64:	b29a      	uxth	r2, r3
 8012e66:	68fb      	ldr	r3, [r7, #12]
 8012e68:	821a      	strh	r2, [r3, #16]
    }
  }
}
 8012e6a:	bf00      	nop
 8012e6c:	3710      	adds	r7, #16
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}
	...

08012e74 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b084      	sub	sp, #16
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
 8012e7c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012e82:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012e84:	68fb      	ldr	r3, [r7, #12]
 8012e86:	2200      	movs	r2, #0
 8012e88:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012e8a:	68fb      	ldr	r3, [r7, #12]
 8012e8c:	2200      	movs	r2, #0
 8012e8e:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 8012e90:	4b26      	ldr	r3, [pc, #152]	; (8012f2c <dhcp_handle_ack+0xb8>)
 8012e92:	78db      	ldrb	r3, [r3, #3]
 8012e94:	2b00      	cmp	r3, #0
 8012e96:	d003      	beq.n	8012ea0 <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8012e98:	4b25      	ldr	r3, [pc, #148]	; (8012f30 <dhcp_handle_ack+0xbc>)
 8012e9a:	68da      	ldr	r2, [r3, #12]
 8012e9c:	68fb      	ldr	r3, [r7, #12]
 8012e9e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 8012ea0:	4b22      	ldr	r3, [pc, #136]	; (8012f2c <dhcp_handle_ack+0xb8>)
 8012ea2:	791b      	ldrb	r3, [r3, #4]
 8012ea4:	2b00      	cmp	r3, #0
 8012ea6:	d004      	beq.n	8012eb2 <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8012ea8:	4b21      	ldr	r3, [pc, #132]	; (8012f30 <dhcp_handle_ack+0xbc>)
 8012eaa:	691a      	ldr	r2, [r3, #16]
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	62da      	str	r2, [r3, #44]	; 0x2c
 8012eb0:	e004      	b.n	8012ebc <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012eb6:	085a      	lsrs	r2, r3, #1
 8012eb8:	68fb      	ldr	r3, [r7, #12]
 8012eba:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8012ebc:	4b1b      	ldr	r3, [pc, #108]	; (8012f2c <dhcp_handle_ack+0xb8>)
 8012ebe:	795b      	ldrb	r3, [r3, #5]
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d004      	beq.n	8012ece <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8012ec4:	4b1a      	ldr	r3, [pc, #104]	; (8012f30 <dhcp_handle_ack+0xbc>)
 8012ec6:	695a      	ldr	r2, [r3, #20]
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	631a      	str	r2, [r3, #48]	; 0x30
 8012ecc:	e007      	b.n	8012ede <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012ed2:	4613      	mov	r3, r2
 8012ed4:	00db      	lsls	r3, r3, #3
 8012ed6:	1a9b      	subs	r3, r3, r2
 8012ed8:	08da      	lsrs	r2, r3, #3
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012ede:	683b      	ldr	r3, [r7, #0]
 8012ee0:	691a      	ldr	r2, [r3, #16]
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8012ee6:	4b11      	ldr	r3, [pc, #68]	; (8012f2c <dhcp_handle_ack+0xb8>)
 8012ee8:	799b      	ldrb	r3, [r3, #6]
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d00b      	beq.n	8012f06 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 8012eee:	4b10      	ldr	r3, [pc, #64]	; (8012f30 <dhcp_handle_ack+0xbc>)
 8012ef0:	699b      	ldr	r3, [r3, #24]
 8012ef2:	4618      	mov	r0, r3
 8012ef4:	f7f7 fc51 	bl	800a79a <lwip_htonl>
 8012ef8:	4602      	mov	r2, r0
 8012efa:	68fb      	ldr	r3, [r7, #12]
 8012efc:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	2201      	movs	r2, #1
 8012f02:	71da      	strb	r2, [r3, #7]
 8012f04:	e002      	b.n	8012f0c <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	2200      	movs	r2, #0
 8012f0a:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012f0c:	4b07      	ldr	r3, [pc, #28]	; (8012f2c <dhcp_handle_ack+0xb8>)
 8012f0e:	79db      	ldrb	r3, [r3, #7]
 8012f10:	2b00      	cmp	r3, #0
 8012f12:	d007      	beq.n	8012f24 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8012f14:	4b06      	ldr	r3, [pc, #24]	; (8012f30 <dhcp_handle_ack+0xbc>)
 8012f16:	69db      	ldr	r3, [r3, #28]
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7f7 fc3e 	bl	800a79a <lwip_htonl>
 8012f1e:	4602      	mov	r2, r0
 8012f20:	68fb      	ldr	r3, [r7, #12]
 8012f22:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 8012f24:	bf00      	nop
 8012f26:	3710      	adds	r7, #16
 8012f28:	46bd      	mov	sp, r7
 8012f2a:	bd80      	pop	{r7, pc}
 8012f2c:	2000f2e0 	.word	0x2000f2e0
 8012f30:	2000f2c0 	.word	0x2000f2c0

08012f34 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 8012f34:	b580      	push	{r7, lr}
 8012f36:	b084      	sub	sp, #16
 8012f38:	af00      	add	r7, sp, #0
 8012f3a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	2b00      	cmp	r3, #0
 8012f40:	d109      	bne.n	8012f56 <dhcp_start+0x22>
 8012f42:	4b37      	ldr	r3, [pc, #220]	; (8013020 <dhcp_start+0xec>)
 8012f44:	f240 22e7 	movw	r2, #743	; 0x2e7
 8012f48:	4936      	ldr	r1, [pc, #216]	; (8013024 <dhcp_start+0xf0>)
 8012f4a:	4837      	ldr	r0, [pc, #220]	; (8013028 <dhcp_start+0xf4>)
 8012f4c:	f004 f8c8 	bl	80170e0 <iprintf>
 8012f50:	f06f 030f 	mvn.w	r3, #15
 8012f54:	e060      	b.n	8013018 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012f5c:	f003 0301 	and.w	r3, r3, #1
 8012f60:	2b00      	cmp	r3, #0
 8012f62:	d109      	bne.n	8012f78 <dhcp_start+0x44>
 8012f64:	4b2e      	ldr	r3, [pc, #184]	; (8013020 <dhcp_start+0xec>)
 8012f66:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 8012f6a:	4930      	ldr	r1, [pc, #192]	; (801302c <dhcp_start+0xf8>)
 8012f6c:	482e      	ldr	r0, [pc, #184]	; (8013028 <dhcp_start+0xf4>)
 8012f6e:	f004 f8b7 	bl	80170e0 <iprintf>
 8012f72:	f06f 030f 	mvn.w	r3, #15
 8012f76:	e04f      	b.n	8013018 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012f7c:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 8012f7e:	687b      	ldr	r3, [r7, #4]
 8012f80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8012f82:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8012f86:	d202      	bcs.n	8012f8e <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8012f88:	f04f 33ff 	mov.w	r3, #4294967295
 8012f8c:	e044      	b.n	8013018 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 8012f8e:	68fb      	ldr	r3, [r7, #12]
 8012f90:	2b00      	cmp	r3, #0
 8012f92:	d10d      	bne.n	8012fb0 <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8012f94:	2034      	movs	r0, #52	; 0x34
 8012f96:	f7f7 ff1f 	bl	800add8 <mem_malloc>
 8012f9a:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d102      	bne.n	8012fa8 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 8012fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8012fa6:	e037      	b.n	8013018 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8012fa8:	687b      	ldr	r3, [r7, #4]
 8012faa:	68fa      	ldr	r2, [r7, #12]
 8012fac:	629a      	str	r2, [r3, #40]	; 0x28
 8012fae:	e005      	b.n	8012fbc <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 8012fb0:	68fb      	ldr	r3, [r7, #12]
 8012fb2:	791b      	ldrb	r3, [r3, #4]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d001      	beq.n	8012fbc <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012fb8:	f7ff fc90 	bl	80128dc <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8012fbc:	2234      	movs	r2, #52	; 0x34
 8012fbe:	2100      	movs	r1, #0
 8012fc0:	68f8      	ldr	r0, [r7, #12]
 8012fc2:	f003 fff0 	bl	8016fa6 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8012fc6:	f7ff fc37 	bl	8012838 <dhcp_inc_pcb_refcount>
 8012fca:	4603      	mov	r3, r0
 8012fcc:	2b00      	cmp	r3, #0
 8012fce:	d002      	beq.n	8012fd6 <dhcp_start+0xa2>
    return ERR_MEM;
 8012fd0:	f04f 33ff 	mov.w	r3, #4294967295
 8012fd4:	e020      	b.n	8013018 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8012fd6:	68fb      	ldr	r3, [r7, #12]
 8012fd8:	2201      	movs	r2, #1
 8012fda:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8012fe2:	f003 0304 	and.w	r3, r3, #4
 8012fe6:	2b00      	cmp	r3, #0
 8012fe8:	d105      	bne.n	8012ff6 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8012fea:	2102      	movs	r1, #2
 8012fec:	68f8      	ldr	r0, [r7, #12]
 8012fee:	f000 fd01 	bl	80139f4 <dhcp_set_state>
    return ERR_OK;
 8012ff2:	2300      	movs	r3, #0
 8012ff4:	e010      	b.n	8013018 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8012ff6:	6878      	ldr	r0, [r7, #4]
 8012ff8:	f000 f8f8 	bl	80131ec <dhcp_discover>
 8012ffc:	4603      	mov	r3, r0
 8012ffe:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 8013000:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d005      	beq.n	8013014 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8013008:	6878      	ldr	r0, [r7, #4]
 801300a:	f000 fc59 	bl	80138c0 <dhcp_release_and_stop>
    return ERR_MEM;
 801300e:	f04f 33ff 	mov.w	r3, #4294967295
 8013012:	e001      	b.n	8013018 <dhcp_start+0xe4>
  }
  return result;
 8013014:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8013018:	4618      	mov	r0, r3
 801301a:	3710      	adds	r7, #16
 801301c:	46bd      	mov	sp, r7
 801301e:	bd80      	pop	{r7, pc}
 8013020:	0801a508 	.word	0x0801a508
 8013024:	0801a5ec 	.word	0x0801a5ec
 8013028:	0801a568 	.word	0x0801a568
 801302c:	0801a630 	.word	0x0801a630

08013030 <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 8013030:	b580      	push	{r7, lr}
 8013032:	b084      	sub	sp, #16
 8013034:	af00      	add	r7, sp, #0
 8013036:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013038:	687b      	ldr	r3, [r7, #4]
 801303a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801303c:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d025      	beq.n	8013090 <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 8013044:	68fb      	ldr	r3, [r7, #12]
 8013046:	795b      	ldrb	r3, [r3, #5]
 8013048:	2b0a      	cmp	r3, #10
 801304a:	d008      	beq.n	801305e <dhcp_network_changed+0x2e>
 801304c:	2b0a      	cmp	r3, #10
 801304e:	dc0d      	bgt.n	801306c <dhcp_network_changed+0x3c>
 8013050:	2b00      	cmp	r3, #0
 8013052:	d01f      	beq.n	8013094 <dhcp_network_changed+0x64>
 8013054:	2b00      	cmp	r3, #0
 8013056:	db09      	blt.n	801306c <dhcp_network_changed+0x3c>
 8013058:	3b03      	subs	r3, #3
 801305a:	2b02      	cmp	r3, #2
 801305c:	d806      	bhi.n	801306c <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 801305e:	68fb      	ldr	r3, [r7, #12]
 8013060:	2200      	movs	r2, #0
 8013062:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 8013064:	6878      	ldr	r0, [r7, #4]
 8013066:	f000 fb75 	bl	8013754 <dhcp_reboot>
      break;
 801306a:	e014      	b.n	8013096 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 801306c:	68fb      	ldr	r3, [r7, #12]
 801306e:	795b      	ldrb	r3, [r3, #5]
 8013070:	2b0c      	cmp	r3, #12
 8013072:	d906      	bls.n	8013082 <dhcp_network_changed+0x52>
 8013074:	4b09      	ldr	r3, [pc, #36]	; (801309c <dhcp_network_changed+0x6c>)
 8013076:	f240 326d 	movw	r2, #877	; 0x36d
 801307a:	4909      	ldr	r1, [pc, #36]	; (80130a0 <dhcp_network_changed+0x70>)
 801307c:	4809      	ldr	r0, [pc, #36]	; (80130a4 <dhcp_network_changed+0x74>)
 801307e:	f004 f82f 	bl	80170e0 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	2200      	movs	r2, #0
 8013086:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8013088:	6878      	ldr	r0, [r7, #4]
 801308a:	f000 f8af 	bl	80131ec <dhcp_discover>
      break;
 801308e:	e002      	b.n	8013096 <dhcp_network_changed+0x66>
    return;
 8013090:	bf00      	nop
 8013092:	e000      	b.n	8013096 <dhcp_network_changed+0x66>
      break;
 8013094:	bf00      	nop
  }
}
 8013096:	3710      	adds	r7, #16
 8013098:	46bd      	mov	sp, r7
 801309a:	bd80      	pop	{r7, pc}
 801309c:	0801a508 	.word	0x0801a508
 80130a0:	0801a654 	.word	0x0801a654
 80130a4:	0801a568 	.word	0x0801a568

080130a8 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 80130a8:	b580      	push	{r7, lr}
 80130aa:	b084      	sub	sp, #16
 80130ac:	af00      	add	r7, sp, #0
 80130ae:	6078      	str	r0, [r7, #4]
 80130b0:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d107      	bne.n	80130c8 <dhcp_arp_reply+0x20>
 80130b8:	4b0e      	ldr	r3, [pc, #56]	; (80130f4 <dhcp_arp_reply+0x4c>)
 80130ba:	f240 328b 	movw	r2, #907	; 0x38b
 80130be:	490e      	ldr	r1, [pc, #56]	; (80130f8 <dhcp_arp_reply+0x50>)
 80130c0:	480e      	ldr	r0, [pc, #56]	; (80130fc <dhcp_arp_reply+0x54>)
 80130c2:	f004 f80d 	bl	80170e0 <iprintf>
 80130c6:	e012      	b.n	80130ee <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 80130c8:	687b      	ldr	r3, [r7, #4]
 80130ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80130cc:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d00c      	beq.n	80130ee <dhcp_arp_reply+0x46>
 80130d4:	68fb      	ldr	r3, [r7, #12]
 80130d6:	795b      	ldrb	r3, [r3, #5]
 80130d8:	2b08      	cmp	r3, #8
 80130da:	d108      	bne.n	80130ee <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 80130dc:	683b      	ldr	r3, [r7, #0]
 80130de:	681a      	ldr	r2, [r3, #0]
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	69db      	ldr	r3, [r3, #28]
 80130e4:	429a      	cmp	r2, r3
 80130e6:	d102      	bne.n	80130ee <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 80130e8:	6878      	ldr	r0, [r7, #4]
 80130ea:	f000 f809 	bl	8013100 <dhcp_decline>
    }
  }
}
 80130ee:	3710      	adds	r7, #16
 80130f0:	46bd      	mov	sp, r7
 80130f2:	bd80      	pop	{r7, pc}
 80130f4:	0801a508 	.word	0x0801a508
 80130f8:	0801a5ec 	.word	0x0801a5ec
 80130fc:	0801a568 	.word	0x0801a568

08013100 <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 8013100:	b5b0      	push	{r4, r5, r7, lr}
 8013102:	b08a      	sub	sp, #40	; 0x28
 8013104:	af02      	add	r7, sp, #8
 8013106:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801310c:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801310e:	210c      	movs	r1, #12
 8013110:	69b8      	ldr	r0, [r7, #24]
 8013112:	f000 fc6f 	bl	80139f4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8013116:	f107 030c 	add.w	r3, r7, #12
 801311a:	2204      	movs	r2, #4
 801311c:	69b9      	ldr	r1, [r7, #24]
 801311e:	6878      	ldr	r0, [r7, #4]
 8013120:	f001 f8f4 	bl	801430c <dhcp_create_msg>
 8013124:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013126:	697b      	ldr	r3, [r7, #20]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d035      	beq.n	8013198 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801312c:	697b      	ldr	r3, [r7, #20]
 801312e:	685b      	ldr	r3, [r3, #4]
 8013130:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8013132:	89b8      	ldrh	r0, [r7, #12]
 8013134:	693b      	ldr	r3, [r7, #16]
 8013136:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801313a:	2304      	movs	r3, #4
 801313c:	2232      	movs	r2, #50	; 0x32
 801313e:	f000 fc73 	bl	8013a28 <dhcp_option>
 8013142:	4603      	mov	r3, r0
 8013144:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8013146:	89bc      	ldrh	r4, [r7, #12]
 8013148:	693b      	ldr	r3, [r7, #16]
 801314a:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 801314e:	69bb      	ldr	r3, [r7, #24]
 8013150:	69db      	ldr	r3, [r3, #28]
 8013152:	4618      	mov	r0, r3
 8013154:	f7f7 fb21 	bl	800a79a <lwip_htonl>
 8013158:	4603      	mov	r3, r0
 801315a:	461a      	mov	r2, r3
 801315c:	4629      	mov	r1, r5
 801315e:	4620      	mov	r0, r4
 8013160:	f000 fcee 	bl	8013b40 <dhcp_option_long>
 8013164:	4603      	mov	r3, r0
 8013166:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013168:	89b8      	ldrh	r0, [r7, #12]
 801316a:	693b      	ldr	r3, [r7, #16]
 801316c:	33f0      	adds	r3, #240	; 0xf0
 801316e:	697a      	ldr	r2, [r7, #20]
 8013170:	4619      	mov	r1, r3
 8013172:	f001 f9a1 	bl	80144b8 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8013176:	4b19      	ldr	r3, [pc, #100]	; (80131dc <dhcp_decline+0xdc>)
 8013178:	6818      	ldr	r0, [r3, #0]
 801317a:	4b19      	ldr	r3, [pc, #100]	; (80131e0 <dhcp_decline+0xe0>)
 801317c:	9301      	str	r3, [sp, #4]
 801317e:	687b      	ldr	r3, [r7, #4]
 8013180:	9300      	str	r3, [sp, #0]
 8013182:	2343      	movs	r3, #67	; 0x43
 8013184:	4a17      	ldr	r2, [pc, #92]	; (80131e4 <dhcp_decline+0xe4>)
 8013186:	6979      	ldr	r1, [r7, #20]
 8013188:	f7ff f8d0 	bl	801232c <udp_sendto_if_src>
 801318c:	4603      	mov	r3, r0
 801318e:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013190:	6978      	ldr	r0, [r7, #20]
 8013192:	f7f9 f915 	bl	800c3c0 <pbuf_free>
 8013196:	e001      	b.n	801319c <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8013198:	23ff      	movs	r3, #255	; 0xff
 801319a:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 801319c:	69bb      	ldr	r3, [r7, #24]
 801319e:	799b      	ldrb	r3, [r3, #6]
 80131a0:	2bff      	cmp	r3, #255	; 0xff
 80131a2:	d005      	beq.n	80131b0 <dhcp_decline+0xb0>
    dhcp->tries++;
 80131a4:	69bb      	ldr	r3, [r7, #24]
 80131a6:	799b      	ldrb	r3, [r3, #6]
 80131a8:	3301      	adds	r3, #1
 80131aa:	b2da      	uxtb	r2, r3
 80131ac:	69bb      	ldr	r3, [r7, #24]
 80131ae:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 80131b0:	f242 7310 	movw	r3, #10000	; 0x2710
 80131b4:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80131b6:	89fb      	ldrh	r3, [r7, #14]
 80131b8:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80131bc:	4a0a      	ldr	r2, [pc, #40]	; (80131e8 <dhcp_decline+0xe8>)
 80131be:	fb82 1203 	smull	r1, r2, r2, r3
 80131c2:	1152      	asrs	r2, r2, #5
 80131c4:	17db      	asrs	r3, r3, #31
 80131c6:	1ad3      	subs	r3, r2, r3
 80131c8:	b29a      	uxth	r2, r3
 80131ca:	69bb      	ldr	r3, [r7, #24]
 80131cc:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80131ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80131d2:	4618      	mov	r0, r3
 80131d4:	3720      	adds	r7, #32
 80131d6:	46bd      	mov	sp, r7
 80131d8:	bdb0      	pop	{r4, r5, r7, pc}
 80131da:	bf00      	nop
 80131dc:	2000f2e8 	.word	0x2000f2e8
 80131e0:	0801b0f8 	.word	0x0801b0f8
 80131e4:	0801b0fc 	.word	0x0801b0fc
 80131e8:	10624dd3 	.word	0x10624dd3

080131ec <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 80131ec:	b580      	push	{r7, lr}
 80131ee:	b08a      	sub	sp, #40	; 0x28
 80131f0:	af02      	add	r7, sp, #8
 80131f2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80131f8:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 80131fa:	2300      	movs	r3, #0
 80131fc:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 80131fe:	69bb      	ldr	r3, [r7, #24]
 8013200:	2200      	movs	r2, #0
 8013202:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8013204:	2106      	movs	r1, #6
 8013206:	69b8      	ldr	r0, [r7, #24]
 8013208:	f000 fbf4 	bl	80139f4 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 801320c:	f107 0308 	add.w	r3, r7, #8
 8013210:	2201      	movs	r2, #1
 8013212:	69b9      	ldr	r1, [r7, #24]
 8013214:	6878      	ldr	r0, [r7, #4]
 8013216:	f001 f879 	bl	801430c <dhcp_create_msg>
 801321a:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 801321c:	693b      	ldr	r3, [r7, #16]
 801321e:	2b00      	cmp	r3, #0
 8013220:	d04b      	beq.n	80132ba <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013222:	693b      	ldr	r3, [r7, #16]
 8013224:	685b      	ldr	r3, [r3, #4]
 8013226:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013228:	8938      	ldrh	r0, [r7, #8]
 801322a:	68fb      	ldr	r3, [r7, #12]
 801322c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013230:	2302      	movs	r3, #2
 8013232:	2239      	movs	r2, #57	; 0x39
 8013234:	f000 fbf8 	bl	8013a28 <dhcp_option>
 8013238:	4603      	mov	r3, r0
 801323a:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801323c:	8938      	ldrh	r0, [r7, #8]
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013244:	687b      	ldr	r3, [r7, #4]
 8013246:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8013248:	461a      	mov	r2, r3
 801324a:	f000 fc47 	bl	8013adc <dhcp_option_short>
 801324e:	4603      	mov	r3, r0
 8013250:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013252:	8938      	ldrh	r0, [r7, #8]
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801325a:	2303      	movs	r3, #3
 801325c:	2237      	movs	r2, #55	; 0x37
 801325e:	f000 fbe3 	bl	8013a28 <dhcp_option>
 8013262:	4603      	mov	r3, r0
 8013264:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013266:	2300      	movs	r3, #0
 8013268:	77fb      	strb	r3, [r7, #31]
 801326a:	e00e      	b.n	801328a <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801326c:	8938      	ldrh	r0, [r7, #8]
 801326e:	68fb      	ldr	r3, [r7, #12]
 8013270:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013274:	7ffb      	ldrb	r3, [r7, #31]
 8013276:	4a29      	ldr	r2, [pc, #164]	; (801331c <dhcp_discover+0x130>)
 8013278:	5cd3      	ldrb	r3, [r2, r3]
 801327a:	461a      	mov	r2, r3
 801327c:	f000 fc08 	bl	8013a90 <dhcp_option_byte>
 8013280:	4603      	mov	r3, r0
 8013282:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013284:	7ffb      	ldrb	r3, [r7, #31]
 8013286:	3301      	adds	r3, #1
 8013288:	77fb      	strb	r3, [r7, #31]
 801328a:	7ffb      	ldrb	r3, [r7, #31]
 801328c:	2b02      	cmp	r3, #2
 801328e:	d9ed      	bls.n	801326c <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013290:	8938      	ldrh	r0, [r7, #8]
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	33f0      	adds	r3, #240	; 0xf0
 8013296:	693a      	ldr	r2, [r7, #16]
 8013298:	4619      	mov	r1, r3
 801329a:	f001 f90d 	bl	80144b8 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 801329e:	4b20      	ldr	r3, [pc, #128]	; (8013320 <dhcp_discover+0x134>)
 80132a0:	6818      	ldr	r0, [r3, #0]
 80132a2:	4b20      	ldr	r3, [pc, #128]	; (8013324 <dhcp_discover+0x138>)
 80132a4:	9301      	str	r3, [sp, #4]
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	9300      	str	r3, [sp, #0]
 80132aa:	2343      	movs	r3, #67	; 0x43
 80132ac:	4a1e      	ldr	r2, [pc, #120]	; (8013328 <dhcp_discover+0x13c>)
 80132ae:	6939      	ldr	r1, [r7, #16]
 80132b0:	f7ff f83c 	bl	801232c <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 80132b4:	6938      	ldr	r0, [r7, #16]
 80132b6:	f7f9 f883 	bl	800c3c0 <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 80132ba:	69bb      	ldr	r3, [r7, #24]
 80132bc:	799b      	ldrb	r3, [r3, #6]
 80132be:	2bff      	cmp	r3, #255	; 0xff
 80132c0:	d005      	beq.n	80132ce <dhcp_discover+0xe2>
    dhcp->tries++;
 80132c2:	69bb      	ldr	r3, [r7, #24]
 80132c4:	799b      	ldrb	r3, [r3, #6]
 80132c6:	3301      	adds	r3, #1
 80132c8:	b2da      	uxtb	r2, r3
 80132ca:	69bb      	ldr	r3, [r7, #24]
 80132cc:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 80132ce:	69bb      	ldr	r3, [r7, #24]
 80132d0:	799b      	ldrb	r3, [r3, #6]
 80132d2:	2b05      	cmp	r3, #5
 80132d4:	d80d      	bhi.n	80132f2 <dhcp_discover+0x106>
 80132d6:	69bb      	ldr	r3, [r7, #24]
 80132d8:	799b      	ldrb	r3, [r3, #6]
 80132da:	461a      	mov	r2, r3
 80132dc:	2301      	movs	r3, #1
 80132de:	4093      	lsls	r3, r2
 80132e0:	b29b      	uxth	r3, r3
 80132e2:	461a      	mov	r2, r3
 80132e4:	0152      	lsls	r2, r2, #5
 80132e6:	1ad2      	subs	r2, r2, r3
 80132e8:	0092      	lsls	r2, r2, #2
 80132ea:	4413      	add	r3, r2
 80132ec:	00db      	lsls	r3, r3, #3
 80132ee:	b29b      	uxth	r3, r3
 80132f0:	e001      	b.n	80132f6 <dhcp_discover+0x10a>
 80132f2:	f64e 2360 	movw	r3, #60000	; 0xea60
 80132f6:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80132f8:	897b      	ldrh	r3, [r7, #10]
 80132fa:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80132fe:	4a0b      	ldr	r2, [pc, #44]	; (801332c <dhcp_discover+0x140>)
 8013300:	fb82 1203 	smull	r1, r2, r2, r3
 8013304:	1152      	asrs	r2, r2, #5
 8013306:	17db      	asrs	r3, r3, #31
 8013308:	1ad3      	subs	r3, r2, r3
 801330a:	b29a      	uxth	r2, r3
 801330c:	69bb      	ldr	r3, [r7, #24]
 801330e:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013310:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013314:	4618      	mov	r0, r3
 8013316:	3720      	adds	r7, #32
 8013318:	46bd      	mov	sp, r7
 801331a:	bd80      	pop	{r7, pc}
 801331c:	20000030 	.word	0x20000030
 8013320:	2000f2e8 	.word	0x2000f2e8
 8013324:	0801b0f8 	.word	0x0801b0f8
 8013328:	0801b0fc 	.word	0x0801b0fc
 801332c:	10624dd3 	.word	0x10624dd3

08013330 <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8013330:	b580      	push	{r7, lr}
 8013332:	b088      	sub	sp, #32
 8013334:	af00      	add	r7, sp, #0
 8013336:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	2b00      	cmp	r3, #0
 801333c:	d107      	bne.n	801334e <dhcp_bind+0x1e>
 801333e:	4b64      	ldr	r3, [pc, #400]	; (80134d0 <dhcp_bind+0x1a0>)
 8013340:	f240 4215 	movw	r2, #1045	; 0x415
 8013344:	4963      	ldr	r1, [pc, #396]	; (80134d4 <dhcp_bind+0x1a4>)
 8013346:	4864      	ldr	r0, [pc, #400]	; (80134d8 <dhcp_bind+0x1a8>)
 8013348:	f003 feca 	bl	80170e0 <iprintf>
 801334c:	e0bc      	b.n	80134c8 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 801334e:	687b      	ldr	r3, [r7, #4]
 8013350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013352:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8013354:	69bb      	ldr	r3, [r7, #24]
 8013356:	2b00      	cmp	r3, #0
 8013358:	d107      	bne.n	801336a <dhcp_bind+0x3a>
 801335a:	4b5d      	ldr	r3, [pc, #372]	; (80134d0 <dhcp_bind+0x1a0>)
 801335c:	f240 4217 	movw	r2, #1047	; 0x417
 8013360:	495e      	ldr	r1, [pc, #376]	; (80134dc <dhcp_bind+0x1ac>)
 8013362:	485d      	ldr	r0, [pc, #372]	; (80134d8 <dhcp_bind+0x1a8>)
 8013364:	f003 febc 	bl	80170e0 <iprintf>
 8013368:	e0ae      	b.n	80134c8 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 801336a:	69bb      	ldr	r3, [r7, #24]
 801336c:	2200      	movs	r2, #0
 801336e:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8013370:	69bb      	ldr	r3, [r7, #24]
 8013372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013378:	d019      	beq.n	80133ae <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 801337a:	69bb      	ldr	r3, [r7, #24]
 801337c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801337e:	331e      	adds	r3, #30
 8013380:	4a57      	ldr	r2, [pc, #348]	; (80134e0 <dhcp_bind+0x1b0>)
 8013382:	fba2 2303 	umull	r2, r3, r2, r3
 8013386:	095b      	lsrs	r3, r3, #5
 8013388:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801338a:	69fb      	ldr	r3, [r7, #28]
 801338c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013390:	d302      	bcc.n	8013398 <dhcp_bind+0x68>
      timeout = 0xffff;
 8013392:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8013396:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8013398:	69fb      	ldr	r3, [r7, #28]
 801339a:	b29a      	uxth	r2, r3
 801339c:	69bb      	ldr	r3, [r7, #24]
 801339e:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 80133a0:	69bb      	ldr	r3, [r7, #24]
 80133a2:	8a9b      	ldrh	r3, [r3, #20]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	d102      	bne.n	80133ae <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 80133a8:	69bb      	ldr	r3, [r7, #24]
 80133aa:	2201      	movs	r2, #1
 80133ac:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 80133ae:	69bb      	ldr	r3, [r7, #24]
 80133b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133b6:	d01d      	beq.n	80133f4 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80133b8:	69bb      	ldr	r3, [r7, #24]
 80133ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80133bc:	331e      	adds	r3, #30
 80133be:	4a48      	ldr	r2, [pc, #288]	; (80134e0 <dhcp_bind+0x1b0>)
 80133c0:	fba2 2303 	umull	r2, r3, r2, r3
 80133c4:	095b      	lsrs	r3, r3, #5
 80133c6:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 80133c8:	69fb      	ldr	r3, [r7, #28]
 80133ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133ce:	d302      	bcc.n	80133d6 <dhcp_bind+0xa6>
      timeout = 0xffff;
 80133d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80133d4:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 80133d6:	69fb      	ldr	r3, [r7, #28]
 80133d8:	b29a      	uxth	r2, r3
 80133da:	69bb      	ldr	r3, [r7, #24]
 80133dc:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 80133de:	69bb      	ldr	r3, [r7, #24]
 80133e0:	895b      	ldrh	r3, [r3, #10]
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d102      	bne.n	80133ec <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 80133e6:	69bb      	ldr	r3, [r7, #24]
 80133e8:	2201      	movs	r2, #1
 80133ea:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 80133ec:	69bb      	ldr	r3, [r7, #24]
 80133ee:	895a      	ldrh	r2, [r3, #10]
 80133f0:	69bb      	ldr	r3, [r7, #24]
 80133f2:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 80133f4:	69bb      	ldr	r3, [r7, #24]
 80133f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80133f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80133fc:	d01d      	beq.n	801343a <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 80133fe:	69bb      	ldr	r3, [r7, #24]
 8013400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013402:	331e      	adds	r3, #30
 8013404:	4a36      	ldr	r2, [pc, #216]	; (80134e0 <dhcp_bind+0x1b0>)
 8013406:	fba2 2303 	umull	r2, r3, r2, r3
 801340a:	095b      	lsrs	r3, r3, #5
 801340c:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 801340e:	69fb      	ldr	r3, [r7, #28]
 8013410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013414:	d302      	bcc.n	801341c <dhcp_bind+0xec>
      timeout = 0xffff;
 8013416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801341a:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 801341c:	69fb      	ldr	r3, [r7, #28]
 801341e:	b29a      	uxth	r2, r3
 8013420:	69bb      	ldr	r3, [r7, #24]
 8013422:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8013424:	69bb      	ldr	r3, [r7, #24]
 8013426:	899b      	ldrh	r3, [r3, #12]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d102      	bne.n	8013432 <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 801342c:	69bb      	ldr	r3, [r7, #24]
 801342e:	2201      	movs	r2, #1
 8013430:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8013432:	69bb      	ldr	r3, [r7, #24]
 8013434:	899a      	ldrh	r2, [r3, #12]
 8013436:	69bb      	ldr	r3, [r7, #24]
 8013438:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 801343a:	69bb      	ldr	r3, [r7, #24]
 801343c:	895a      	ldrh	r2, [r3, #10]
 801343e:	69bb      	ldr	r3, [r7, #24]
 8013440:	899b      	ldrh	r3, [r3, #12]
 8013442:	429a      	cmp	r2, r3
 8013444:	d306      	bcc.n	8013454 <dhcp_bind+0x124>
 8013446:	69bb      	ldr	r3, [r7, #24]
 8013448:	899b      	ldrh	r3, [r3, #12]
 801344a:	2b00      	cmp	r3, #0
 801344c:	d002      	beq.n	8013454 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 801344e:	69bb      	ldr	r3, [r7, #24]
 8013450:	2200      	movs	r2, #0
 8013452:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8013454:	69bb      	ldr	r3, [r7, #24]
 8013456:	79db      	ldrb	r3, [r3, #7]
 8013458:	2b00      	cmp	r3, #0
 801345a:	d003      	beq.n	8013464 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 801345c:	69bb      	ldr	r3, [r7, #24]
 801345e:	6a1b      	ldr	r3, [r3, #32]
 8013460:	613b      	str	r3, [r7, #16]
 8013462:	e014      	b.n	801348e <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8013464:	69bb      	ldr	r3, [r7, #24]
 8013466:	331c      	adds	r3, #28
 8013468:	781b      	ldrb	r3, [r3, #0]
 801346a:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 801346c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8013470:	2b00      	cmp	r3, #0
 8013472:	db02      	blt.n	801347a <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8013474:	23ff      	movs	r3, #255	; 0xff
 8013476:	613b      	str	r3, [r7, #16]
 8013478:	e009      	b.n	801348e <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 801347a:	7dfb      	ldrb	r3, [r7, #23]
 801347c:	2bbf      	cmp	r3, #191	; 0xbf
 801347e:	d903      	bls.n	8013488 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8013480:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8013484:	613b      	str	r3, [r7, #16]
 8013486:	e002      	b.n	801348e <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8013488:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801348c:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 801348e:	69bb      	ldr	r3, [r7, #24]
 8013490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013492:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8013494:	68fb      	ldr	r3, [r7, #12]
 8013496:	2b00      	cmp	r3, #0
 8013498:	d108      	bne.n	80134ac <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 801349a:	69bb      	ldr	r3, [r7, #24]
 801349c:	69da      	ldr	r2, [r3, #28]
 801349e:	693b      	ldr	r3, [r7, #16]
 80134a0:	4013      	ands	r3, r2
 80134a2:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 80134a4:	68fb      	ldr	r3, [r7, #12]
 80134a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80134aa:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 80134ac:	210a      	movs	r1, #10
 80134ae:	69b8      	ldr	r0, [r7, #24]
 80134b0:	f000 faa0 	bl	80139f4 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 80134b4:	69bb      	ldr	r3, [r7, #24]
 80134b6:	f103 011c 	add.w	r1, r3, #28
 80134ba:	f107 030c 	add.w	r3, r7, #12
 80134be:	f107 0210 	add.w	r2, r7, #16
 80134c2:	6878      	ldr	r0, [r7, #4]
 80134c4:	f7f8 f8c8 	bl	800b658 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 80134c8:	3720      	adds	r7, #32
 80134ca:	46bd      	mov	sp, r7
 80134cc:	bd80      	pop	{r7, pc}
 80134ce:	bf00      	nop
 80134d0:	0801a508 	.word	0x0801a508
 80134d4:	0801a668 	.word	0x0801a668
 80134d8:	0801a568 	.word	0x0801a568
 80134dc:	0801a684 	.word	0x0801a684
 80134e0:	88888889 	.word	0x88888889

080134e4 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b08a      	sub	sp, #40	; 0x28
 80134e8:	af02      	add	r7, sp, #8
 80134ea:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80134f0:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 80134f2:	2105      	movs	r1, #5
 80134f4:	69b8      	ldr	r0, [r7, #24]
 80134f6:	f000 fa7d 	bl	80139f4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80134fa:	f107 030c 	add.w	r3, r7, #12
 80134fe:	2203      	movs	r2, #3
 8013500:	69b9      	ldr	r1, [r7, #24]
 8013502:	6878      	ldr	r0, [r7, #4]
 8013504:	f000 ff02 	bl	801430c <dhcp_create_msg>
 8013508:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801350a:	697b      	ldr	r3, [r7, #20]
 801350c:	2b00      	cmp	r3, #0
 801350e:	d04e      	beq.n	80135ae <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013510:	697b      	ldr	r3, [r7, #20]
 8013512:	685b      	ldr	r3, [r3, #4]
 8013514:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013516:	89b8      	ldrh	r0, [r7, #12]
 8013518:	693b      	ldr	r3, [r7, #16]
 801351a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801351e:	2302      	movs	r3, #2
 8013520:	2239      	movs	r2, #57	; 0x39
 8013522:	f000 fa81 	bl	8013a28 <dhcp_option>
 8013526:	4603      	mov	r3, r0
 8013528:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 801352a:	89b8      	ldrh	r0, [r7, #12]
 801352c:	693b      	ldr	r3, [r7, #16]
 801352e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8013536:	461a      	mov	r2, r3
 8013538:	f000 fad0 	bl	8013adc <dhcp_option_short>
 801353c:	4603      	mov	r3, r0
 801353e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013540:	89b8      	ldrh	r0, [r7, #12]
 8013542:	693b      	ldr	r3, [r7, #16]
 8013544:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013548:	2303      	movs	r3, #3
 801354a:	2237      	movs	r2, #55	; 0x37
 801354c:	f000 fa6c 	bl	8013a28 <dhcp_option>
 8013550:	4603      	mov	r3, r0
 8013552:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013554:	2300      	movs	r3, #0
 8013556:	77bb      	strb	r3, [r7, #30]
 8013558:	e00e      	b.n	8013578 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 801355a:	89b8      	ldrh	r0, [r7, #12]
 801355c:	693b      	ldr	r3, [r7, #16]
 801355e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013562:	7fbb      	ldrb	r3, [r7, #30]
 8013564:	4a2a      	ldr	r2, [pc, #168]	; (8013610 <dhcp_renew+0x12c>)
 8013566:	5cd3      	ldrb	r3, [r2, r3]
 8013568:	461a      	mov	r2, r3
 801356a:	f000 fa91 	bl	8013a90 <dhcp_option_byte>
 801356e:	4603      	mov	r3, r0
 8013570:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013572:	7fbb      	ldrb	r3, [r7, #30]
 8013574:	3301      	adds	r3, #1
 8013576:	77bb      	strb	r3, [r7, #30]
 8013578:	7fbb      	ldrb	r3, [r7, #30]
 801357a:	2b02      	cmp	r3, #2
 801357c:	d9ed      	bls.n	801355a <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801357e:	89b8      	ldrh	r0, [r7, #12]
 8013580:	693b      	ldr	r3, [r7, #16]
 8013582:	33f0      	adds	r3, #240	; 0xf0
 8013584:	697a      	ldr	r2, [r7, #20]
 8013586:	4619      	mov	r1, r3
 8013588:	f000 ff96 	bl	80144b8 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801358c:	4b21      	ldr	r3, [pc, #132]	; (8013614 <dhcp_renew+0x130>)
 801358e:	6818      	ldr	r0, [r3, #0]
 8013590:	69bb      	ldr	r3, [r7, #24]
 8013592:	f103 0218 	add.w	r2, r3, #24
 8013596:	687b      	ldr	r3, [r7, #4]
 8013598:	9300      	str	r3, [sp, #0]
 801359a:	2343      	movs	r3, #67	; 0x43
 801359c:	6979      	ldr	r1, [r7, #20]
 801359e:	f7fe fe51 	bl	8012244 <udp_sendto_if>
 80135a2:	4603      	mov	r3, r0
 80135a4:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80135a6:	6978      	ldr	r0, [r7, #20]
 80135a8:	f7f8 ff0a 	bl	800c3c0 <pbuf_free>
 80135ac:	e001      	b.n	80135b2 <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80135ae:	23ff      	movs	r3, #255	; 0xff
 80135b0:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80135b2:	69bb      	ldr	r3, [r7, #24]
 80135b4:	799b      	ldrb	r3, [r3, #6]
 80135b6:	2bff      	cmp	r3, #255	; 0xff
 80135b8:	d005      	beq.n	80135c6 <dhcp_renew+0xe2>
    dhcp->tries++;
 80135ba:	69bb      	ldr	r3, [r7, #24]
 80135bc:	799b      	ldrb	r3, [r3, #6]
 80135be:	3301      	adds	r3, #1
 80135c0:	b2da      	uxtb	r2, r3
 80135c2:	69bb      	ldr	r3, [r7, #24]
 80135c4:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 80135c6:	69bb      	ldr	r3, [r7, #24]
 80135c8:	799b      	ldrb	r3, [r3, #6]
 80135ca:	2b09      	cmp	r3, #9
 80135cc:	d80a      	bhi.n	80135e4 <dhcp_renew+0x100>
 80135ce:	69bb      	ldr	r3, [r7, #24]
 80135d0:	799b      	ldrb	r3, [r3, #6]
 80135d2:	b29b      	uxth	r3, r3
 80135d4:	461a      	mov	r2, r3
 80135d6:	0152      	lsls	r2, r2, #5
 80135d8:	1ad2      	subs	r2, r2, r3
 80135da:	0092      	lsls	r2, r2, #2
 80135dc:	4413      	add	r3, r2
 80135de:	011b      	lsls	r3, r3, #4
 80135e0:	b29b      	uxth	r3, r3
 80135e2:	e001      	b.n	80135e8 <dhcp_renew+0x104>
 80135e4:	f644 6320 	movw	r3, #20000	; 0x4e20
 80135e8:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 80135ea:	89fb      	ldrh	r3, [r7, #14]
 80135ec:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 80135f0:	4a09      	ldr	r2, [pc, #36]	; (8013618 <dhcp_renew+0x134>)
 80135f2:	fb82 1203 	smull	r1, r2, r2, r3
 80135f6:	1152      	asrs	r2, r2, #5
 80135f8:	17db      	asrs	r3, r3, #31
 80135fa:	1ad3      	subs	r3, r2, r3
 80135fc:	b29a      	uxth	r2, r3
 80135fe:	69bb      	ldr	r3, [r7, #24]
 8013600:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013602:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013606:	4618      	mov	r0, r3
 8013608:	3720      	adds	r7, #32
 801360a:	46bd      	mov	sp, r7
 801360c:	bd80      	pop	{r7, pc}
 801360e:	bf00      	nop
 8013610:	20000030 	.word	0x20000030
 8013614:	2000f2e8 	.word	0x2000f2e8
 8013618:	10624dd3 	.word	0x10624dd3

0801361c <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 801361c:	b580      	push	{r7, lr}
 801361e:	b08a      	sub	sp, #40	; 0x28
 8013620:	af02      	add	r7, sp, #8
 8013622:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013628:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 801362a:	2104      	movs	r1, #4
 801362c:	69b8      	ldr	r0, [r7, #24]
 801362e:	f000 f9e1 	bl	80139f4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8013632:	f107 030c 	add.w	r3, r7, #12
 8013636:	2203      	movs	r2, #3
 8013638:	69b9      	ldr	r1, [r7, #24]
 801363a:	6878      	ldr	r0, [r7, #4]
 801363c:	f000 fe66 	bl	801430c <dhcp_create_msg>
 8013640:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8013642:	697b      	ldr	r3, [r7, #20]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d04c      	beq.n	80136e2 <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013648:	697b      	ldr	r3, [r7, #20]
 801364a:	685b      	ldr	r3, [r3, #4]
 801364c:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 801364e:	89b8      	ldrh	r0, [r7, #12]
 8013650:	693b      	ldr	r3, [r7, #16]
 8013652:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013656:	2302      	movs	r3, #2
 8013658:	2239      	movs	r2, #57	; 0x39
 801365a:	f000 f9e5 	bl	8013a28 <dhcp_option>
 801365e:	4603      	mov	r3, r0
 8013660:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8013662:	89b8      	ldrh	r0, [r7, #12]
 8013664:	693b      	ldr	r3, [r7, #16]
 8013666:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801366e:	461a      	mov	r2, r3
 8013670:	f000 fa34 	bl	8013adc <dhcp_option_short>
 8013674:	4603      	mov	r3, r0
 8013676:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8013678:	89b8      	ldrh	r0, [r7, #12]
 801367a:	693b      	ldr	r3, [r7, #16]
 801367c:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013680:	2303      	movs	r3, #3
 8013682:	2237      	movs	r2, #55	; 0x37
 8013684:	f000 f9d0 	bl	8013a28 <dhcp_option>
 8013688:	4603      	mov	r3, r0
 801368a:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 801368c:	2300      	movs	r3, #0
 801368e:	77bb      	strb	r3, [r7, #30]
 8013690:	e00e      	b.n	80136b0 <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8013692:	89b8      	ldrh	r0, [r7, #12]
 8013694:	693b      	ldr	r3, [r7, #16]
 8013696:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801369a:	7fbb      	ldrb	r3, [r7, #30]
 801369c:	4a29      	ldr	r2, [pc, #164]	; (8013744 <dhcp_rebind+0x128>)
 801369e:	5cd3      	ldrb	r3, [r2, r3]
 80136a0:	461a      	mov	r2, r3
 80136a2:	f000 f9f5 	bl	8013a90 <dhcp_option_byte>
 80136a6:	4603      	mov	r3, r0
 80136a8:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80136aa:	7fbb      	ldrb	r3, [r7, #30]
 80136ac:	3301      	adds	r3, #1
 80136ae:	77bb      	strb	r3, [r7, #30]
 80136b0:	7fbb      	ldrb	r3, [r7, #30]
 80136b2:	2b02      	cmp	r3, #2
 80136b4:	d9ed      	bls.n	8013692 <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80136b6:	89b8      	ldrh	r0, [r7, #12]
 80136b8:	693b      	ldr	r3, [r7, #16]
 80136ba:	33f0      	adds	r3, #240	; 0xf0
 80136bc:	697a      	ldr	r2, [r7, #20]
 80136be:	4619      	mov	r1, r3
 80136c0:	f000 fefa 	bl	80144b8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 80136c4:	4b20      	ldr	r3, [pc, #128]	; (8013748 <dhcp_rebind+0x12c>)
 80136c6:	6818      	ldr	r0, [r3, #0]
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	9300      	str	r3, [sp, #0]
 80136cc:	2343      	movs	r3, #67	; 0x43
 80136ce:	4a1f      	ldr	r2, [pc, #124]	; (801374c <dhcp_rebind+0x130>)
 80136d0:	6979      	ldr	r1, [r7, #20]
 80136d2:	f7fe fdb7 	bl	8012244 <udp_sendto_if>
 80136d6:	4603      	mov	r3, r0
 80136d8:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80136da:	6978      	ldr	r0, [r7, #20]
 80136dc:	f7f8 fe70 	bl	800c3c0 <pbuf_free>
 80136e0:	e001      	b.n	80136e6 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 80136e2:	23ff      	movs	r3, #255	; 0xff
 80136e4:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 80136e6:	69bb      	ldr	r3, [r7, #24]
 80136e8:	799b      	ldrb	r3, [r3, #6]
 80136ea:	2bff      	cmp	r3, #255	; 0xff
 80136ec:	d005      	beq.n	80136fa <dhcp_rebind+0xde>
    dhcp->tries++;
 80136ee:	69bb      	ldr	r3, [r7, #24]
 80136f0:	799b      	ldrb	r3, [r3, #6]
 80136f2:	3301      	adds	r3, #1
 80136f4:	b2da      	uxtb	r2, r3
 80136f6:	69bb      	ldr	r3, [r7, #24]
 80136f8:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 80136fa:	69bb      	ldr	r3, [r7, #24]
 80136fc:	799b      	ldrb	r3, [r3, #6]
 80136fe:	2b09      	cmp	r3, #9
 8013700:	d80a      	bhi.n	8013718 <dhcp_rebind+0xfc>
 8013702:	69bb      	ldr	r3, [r7, #24]
 8013704:	799b      	ldrb	r3, [r3, #6]
 8013706:	b29b      	uxth	r3, r3
 8013708:	461a      	mov	r2, r3
 801370a:	0152      	lsls	r2, r2, #5
 801370c:	1ad2      	subs	r2, r2, r3
 801370e:	0092      	lsls	r2, r2, #2
 8013710:	4413      	add	r3, r2
 8013712:	00db      	lsls	r3, r3, #3
 8013714:	b29b      	uxth	r3, r3
 8013716:	e001      	b.n	801371c <dhcp_rebind+0x100>
 8013718:	f242 7310 	movw	r3, #10000	; 0x2710
 801371c:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801371e:	89fb      	ldrh	r3, [r7, #14]
 8013720:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013724:	4a0a      	ldr	r2, [pc, #40]	; (8013750 <dhcp_rebind+0x134>)
 8013726:	fb82 1203 	smull	r1, r2, r2, r3
 801372a:	1152      	asrs	r2, r2, #5
 801372c:	17db      	asrs	r3, r3, #31
 801372e:	1ad3      	subs	r3, r2, r3
 8013730:	b29a      	uxth	r2, r3
 8013732:	69bb      	ldr	r3, [r7, #24]
 8013734:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8013736:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801373a:	4618      	mov	r0, r3
 801373c:	3720      	adds	r7, #32
 801373e:	46bd      	mov	sp, r7
 8013740:	bd80      	pop	{r7, pc}
 8013742:	bf00      	nop
 8013744:	20000030 	.word	0x20000030
 8013748:	2000f2e8 	.word	0x2000f2e8
 801374c:	0801b0fc 	.word	0x0801b0fc
 8013750:	10624dd3 	.word	0x10624dd3

08013754 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8013754:	b5b0      	push	{r4, r5, r7, lr}
 8013756:	b08a      	sub	sp, #40	; 0x28
 8013758:	af02      	add	r7, sp, #8
 801375a:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013760:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8013762:	2103      	movs	r1, #3
 8013764:	69b8      	ldr	r0, [r7, #24]
 8013766:	f000 f945 	bl	80139f4 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 801376a:	f107 030c 	add.w	r3, r7, #12
 801376e:	2203      	movs	r2, #3
 8013770:	69b9      	ldr	r1, [r7, #24]
 8013772:	6878      	ldr	r0, [r7, #4]
 8013774:	f000 fdca 	bl	801430c <dhcp_create_msg>
 8013778:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 801377a:	697b      	ldr	r3, [r7, #20]
 801377c:	2b00      	cmp	r3, #0
 801377e:	d066      	beq.n	801384e <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013780:	697b      	ldr	r3, [r7, #20]
 8013782:	685b      	ldr	r3, [r3, #4]
 8013784:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8013786:	89b8      	ldrh	r0, [r7, #12]
 8013788:	693b      	ldr	r3, [r7, #16]
 801378a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801378e:	2302      	movs	r3, #2
 8013790:	2239      	movs	r2, #57	; 0x39
 8013792:	f000 f949 	bl	8013a28 <dhcp_option>
 8013796:	4603      	mov	r3, r0
 8013798:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 801379a:	89b8      	ldrh	r0, [r7, #12]
 801379c:	693b      	ldr	r3, [r7, #16]
 801379e:	33f0      	adds	r3, #240	; 0xf0
 80137a0:	f44f 7210 	mov.w	r2, #576	; 0x240
 80137a4:	4619      	mov	r1, r3
 80137a6:	f000 f999 	bl	8013adc <dhcp_option_short>
 80137aa:	4603      	mov	r3, r0
 80137ac:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80137ae:	89b8      	ldrh	r0, [r7, #12]
 80137b0:	693b      	ldr	r3, [r7, #16]
 80137b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80137b6:	2304      	movs	r3, #4
 80137b8:	2232      	movs	r2, #50	; 0x32
 80137ba:	f000 f935 	bl	8013a28 <dhcp_option>
 80137be:	4603      	mov	r3, r0
 80137c0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80137c2:	89bc      	ldrh	r4, [r7, #12]
 80137c4:	693b      	ldr	r3, [r7, #16]
 80137c6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80137ca:	69bb      	ldr	r3, [r7, #24]
 80137cc:	69db      	ldr	r3, [r3, #28]
 80137ce:	4618      	mov	r0, r3
 80137d0:	f7f6 ffe3 	bl	800a79a <lwip_htonl>
 80137d4:	4603      	mov	r3, r0
 80137d6:	461a      	mov	r2, r3
 80137d8:	4629      	mov	r1, r5
 80137da:	4620      	mov	r0, r4
 80137dc:	f000 f9b0 	bl	8013b40 <dhcp_option_long>
 80137e0:	4603      	mov	r3, r0
 80137e2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80137e4:	89b8      	ldrh	r0, [r7, #12]
 80137e6:	693b      	ldr	r3, [r7, #16]
 80137e8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80137ec:	2303      	movs	r3, #3
 80137ee:	2237      	movs	r2, #55	; 0x37
 80137f0:	f000 f91a 	bl	8013a28 <dhcp_option>
 80137f4:	4603      	mov	r3, r0
 80137f6:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80137f8:	2300      	movs	r3, #0
 80137fa:	77bb      	strb	r3, [r7, #30]
 80137fc:	e00e      	b.n	801381c <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80137fe:	89b8      	ldrh	r0, [r7, #12]
 8013800:	693b      	ldr	r3, [r7, #16]
 8013802:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013806:	7fbb      	ldrb	r3, [r7, #30]
 8013808:	4a29      	ldr	r2, [pc, #164]	; (80138b0 <dhcp_reboot+0x15c>)
 801380a:	5cd3      	ldrb	r3, [r2, r3]
 801380c:	461a      	mov	r2, r3
 801380e:	f000 f93f 	bl	8013a90 <dhcp_option_byte>
 8013812:	4603      	mov	r3, r0
 8013814:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8013816:	7fbb      	ldrb	r3, [r7, #30]
 8013818:	3301      	adds	r3, #1
 801381a:	77bb      	strb	r3, [r7, #30]
 801381c:	7fbb      	ldrb	r3, [r7, #30]
 801381e:	2b02      	cmp	r3, #2
 8013820:	d9ed      	bls.n	80137fe <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8013822:	89b8      	ldrh	r0, [r7, #12]
 8013824:	693b      	ldr	r3, [r7, #16]
 8013826:	33f0      	adds	r3, #240	; 0xf0
 8013828:	697a      	ldr	r2, [r7, #20]
 801382a:	4619      	mov	r1, r3
 801382c:	f000 fe44 	bl	80144b8 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013830:	4b20      	ldr	r3, [pc, #128]	; (80138b4 <dhcp_reboot+0x160>)
 8013832:	6818      	ldr	r0, [r3, #0]
 8013834:	687b      	ldr	r3, [r7, #4]
 8013836:	9300      	str	r3, [sp, #0]
 8013838:	2343      	movs	r3, #67	; 0x43
 801383a:	4a1f      	ldr	r2, [pc, #124]	; (80138b8 <dhcp_reboot+0x164>)
 801383c:	6979      	ldr	r1, [r7, #20]
 801383e:	f7fe fd01 	bl	8012244 <udp_sendto_if>
 8013842:	4603      	mov	r3, r0
 8013844:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8013846:	6978      	ldr	r0, [r7, #20]
 8013848:	f7f8 fdba 	bl	800c3c0 <pbuf_free>
 801384c:	e001      	b.n	8013852 <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 801384e:	23ff      	movs	r3, #255	; 0xff
 8013850:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8013852:	69bb      	ldr	r3, [r7, #24]
 8013854:	799b      	ldrb	r3, [r3, #6]
 8013856:	2bff      	cmp	r3, #255	; 0xff
 8013858:	d005      	beq.n	8013866 <dhcp_reboot+0x112>
    dhcp->tries++;
 801385a:	69bb      	ldr	r3, [r7, #24]
 801385c:	799b      	ldrb	r3, [r3, #6]
 801385e:	3301      	adds	r3, #1
 8013860:	b2da      	uxtb	r2, r3
 8013862:	69bb      	ldr	r3, [r7, #24]
 8013864:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8013866:	69bb      	ldr	r3, [r7, #24]
 8013868:	799b      	ldrb	r3, [r3, #6]
 801386a:	2b09      	cmp	r3, #9
 801386c:	d80a      	bhi.n	8013884 <dhcp_reboot+0x130>
 801386e:	69bb      	ldr	r3, [r7, #24]
 8013870:	799b      	ldrb	r3, [r3, #6]
 8013872:	b29b      	uxth	r3, r3
 8013874:	461a      	mov	r2, r3
 8013876:	0152      	lsls	r2, r2, #5
 8013878:	1ad2      	subs	r2, r2, r3
 801387a:	0092      	lsls	r2, r2, #2
 801387c:	4413      	add	r3, r2
 801387e:	00db      	lsls	r3, r3, #3
 8013880:	b29b      	uxth	r3, r3
 8013882:	e001      	b.n	8013888 <dhcp_reboot+0x134>
 8013884:	f242 7310 	movw	r3, #10000	; 0x2710
 8013888:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 801388a:	89fb      	ldrh	r3, [r7, #14]
 801388c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8013890:	4a0a      	ldr	r2, [pc, #40]	; (80138bc <dhcp_reboot+0x168>)
 8013892:	fb82 1203 	smull	r1, r2, r2, r3
 8013896:	1152      	asrs	r2, r2, #5
 8013898:	17db      	asrs	r3, r3, #31
 801389a:	1ad3      	subs	r3, r2, r3
 801389c:	b29a      	uxth	r2, r3
 801389e:	69bb      	ldr	r3, [r7, #24]
 80138a0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 80138a2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80138a6:	4618      	mov	r0, r3
 80138a8:	3720      	adds	r7, #32
 80138aa:	46bd      	mov	sp, r7
 80138ac:	bdb0      	pop	{r4, r5, r7, pc}
 80138ae:	bf00      	nop
 80138b0:	20000030 	.word	0x20000030
 80138b4:	2000f2e8 	.word	0x2000f2e8
 80138b8:	0801b0fc 	.word	0x0801b0fc
 80138bc:	10624dd3 	.word	0x10624dd3

080138c0 <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 80138c0:	b5b0      	push	{r4, r5, r7, lr}
 80138c2:	b08a      	sub	sp, #40	; 0x28
 80138c4:	af02      	add	r7, sp, #8
 80138c6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138cc:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 80138ce:	69fb      	ldr	r3, [r7, #28]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	f000 8084 	beq.w	80139de <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 80138d6:	69fb      	ldr	r3, [r7, #28]
 80138d8:	795b      	ldrb	r3, [r3, #5]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	f000 8081 	beq.w	80139e2 <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 80138e0:	69fb      	ldr	r3, [r7, #28]
 80138e2:	699b      	ldr	r3, [r3, #24]
 80138e4:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 80138e6:	69fb      	ldr	r3, [r7, #28]
 80138e8:	2200      	movs	r2, #0
 80138ea:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 80138ec:	69fb      	ldr	r3, [r7, #28]
 80138ee:	2200      	movs	r2, #0
 80138f0:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 80138f2:	69fb      	ldr	r3, [r7, #28]
 80138f4:	2200      	movs	r2, #0
 80138f6:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 80138f8:	69fb      	ldr	r3, [r7, #28]
 80138fa:	2200      	movs	r2, #0
 80138fc:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 80138fe:	69fb      	ldr	r3, [r7, #28]
 8013900:	2200      	movs	r2, #0
 8013902:	631a      	str	r2, [r3, #48]	; 0x30
 8013904:	69fb      	ldr	r3, [r7, #28]
 8013906:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013908:	69fb      	ldr	r3, [r7, #28]
 801390a:	62da      	str	r2, [r3, #44]	; 0x2c
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013910:	69fb      	ldr	r3, [r7, #28]
 8013912:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013914:	69fb      	ldr	r3, [r7, #28]
 8013916:	2200      	movs	r2, #0
 8013918:	829a      	strh	r2, [r3, #20]
 801391a:	69fb      	ldr	r3, [r7, #28]
 801391c:	8a9a      	ldrh	r2, [r3, #20]
 801391e:	69fb      	ldr	r3, [r7, #28]
 8013920:	825a      	strh	r2, [r3, #18]
 8013922:	69fb      	ldr	r3, [r7, #28]
 8013924:	8a5a      	ldrh	r2, [r3, #18]
 8013926:	69fb      	ldr	r3, [r7, #28]
 8013928:	821a      	strh	r2, [r3, #16]
 801392a:	69fb      	ldr	r3, [r7, #28]
 801392c:	8a1a      	ldrh	r2, [r3, #16]
 801392e:	69fb      	ldr	r3, [r7, #28]
 8013930:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 8013932:	6878      	ldr	r0, [r7, #4]
 8013934:	f000 fdee 	bl	8014514 <dhcp_supplied_address>
 8013938:	4603      	mov	r3, r0
 801393a:	2b00      	cmp	r3, #0
 801393c:	d03b      	beq.n	80139b6 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 801393e:	f107 030e 	add.w	r3, r7, #14
 8013942:	2207      	movs	r2, #7
 8013944:	69f9      	ldr	r1, [r7, #28]
 8013946:	6878      	ldr	r0, [r7, #4]
 8013948:	f000 fce0 	bl	801430c <dhcp_create_msg>
 801394c:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 801394e:	69bb      	ldr	r3, [r7, #24]
 8013950:	2b00      	cmp	r3, #0
 8013952:	d030      	beq.n	80139b6 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8013954:	69bb      	ldr	r3, [r7, #24]
 8013956:	685b      	ldr	r3, [r3, #4]
 8013958:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801395a:	89f8      	ldrh	r0, [r7, #14]
 801395c:	697b      	ldr	r3, [r7, #20]
 801395e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013962:	2304      	movs	r3, #4
 8013964:	2236      	movs	r2, #54	; 0x36
 8013966:	f000 f85f 	bl	8013a28 <dhcp_option>
 801396a:	4603      	mov	r3, r0
 801396c:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 801396e:	89fc      	ldrh	r4, [r7, #14]
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8013976:	693b      	ldr	r3, [r7, #16]
 8013978:	4618      	mov	r0, r3
 801397a:	f7f6 ff0e 	bl	800a79a <lwip_htonl>
 801397e:	4603      	mov	r3, r0
 8013980:	461a      	mov	r2, r3
 8013982:	4629      	mov	r1, r5
 8013984:	4620      	mov	r0, r4
 8013986:	f000 f8db 	bl	8013b40 <dhcp_option_long>
 801398a:	4603      	mov	r3, r0
 801398c:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801398e:	89f8      	ldrh	r0, [r7, #14]
 8013990:	697b      	ldr	r3, [r7, #20]
 8013992:	33f0      	adds	r3, #240	; 0xf0
 8013994:	69ba      	ldr	r2, [r7, #24]
 8013996:	4619      	mov	r1, r3
 8013998:	f000 fd8e 	bl	80144b8 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 801399c:	4b13      	ldr	r3, [pc, #76]	; (80139ec <dhcp_release_and_stop+0x12c>)
 801399e:	6818      	ldr	r0, [r3, #0]
 80139a0:	f107 0210 	add.w	r2, r7, #16
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	9300      	str	r3, [sp, #0]
 80139a8:	2343      	movs	r3, #67	; 0x43
 80139aa:	69b9      	ldr	r1, [r7, #24]
 80139ac:	f7fe fc4a 	bl	8012244 <udp_sendto_if>
      pbuf_free(p_out);
 80139b0:	69b8      	ldr	r0, [r7, #24]
 80139b2:	f7f8 fd05 	bl	800c3c0 <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80139b6:	4b0e      	ldr	r3, [pc, #56]	; (80139f0 <dhcp_release_and_stop+0x130>)
 80139b8:	4a0d      	ldr	r2, [pc, #52]	; (80139f0 <dhcp_release_and_stop+0x130>)
 80139ba:	490d      	ldr	r1, [pc, #52]	; (80139f0 <dhcp_release_and_stop+0x130>)
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f7f7 fe4b 	bl	800b658 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 80139c2:	2100      	movs	r1, #0
 80139c4:	69f8      	ldr	r0, [r7, #28]
 80139c6:	f000 f815 	bl	80139f4 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 80139ca:	69fb      	ldr	r3, [r7, #28]
 80139cc:	791b      	ldrb	r3, [r3, #4]
 80139ce:	2b00      	cmp	r3, #0
 80139d0:	d008      	beq.n	80139e4 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 80139d2:	f7fe ff83 	bl	80128dc <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 80139d6:	69fb      	ldr	r3, [r7, #28]
 80139d8:	2200      	movs	r2, #0
 80139da:	711a      	strb	r2, [r3, #4]
 80139dc:	e002      	b.n	80139e4 <dhcp_release_and_stop+0x124>
    return;
 80139de:	bf00      	nop
 80139e0:	e000      	b.n	80139e4 <dhcp_release_and_stop+0x124>
    return;
 80139e2:	bf00      	nop
  }
}
 80139e4:	3720      	adds	r7, #32
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bdb0      	pop	{r4, r5, r7, pc}
 80139ea:	bf00      	nop
 80139ec:	2000f2e8 	.word	0x2000f2e8
 80139f0:	0801b0f8 	.word	0x0801b0f8

080139f4 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 80139f4:	b480      	push	{r7}
 80139f6:	b083      	sub	sp, #12
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
 80139fc:	460b      	mov	r3, r1
 80139fe:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	795b      	ldrb	r3, [r3, #5]
 8013a04:	78fa      	ldrb	r2, [r7, #3]
 8013a06:	429a      	cmp	r2, r3
 8013a08:	d008      	beq.n	8013a1c <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	78fa      	ldrb	r2, [r7, #3]
 8013a0e:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	2200      	movs	r2, #0
 8013a14:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	2200      	movs	r2, #0
 8013a1a:	811a      	strh	r2, [r3, #8]
  }
}
 8013a1c:	bf00      	nop
 8013a1e:	370c      	adds	r7, #12
 8013a20:	46bd      	mov	sp, r7
 8013a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a26:	4770      	bx	lr

08013a28 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 8013a28:	b580      	push	{r7, lr}
 8013a2a:	b082      	sub	sp, #8
 8013a2c:	af00      	add	r7, sp, #0
 8013a2e:	6039      	str	r1, [r7, #0]
 8013a30:	4611      	mov	r1, r2
 8013a32:	461a      	mov	r2, r3
 8013a34:	4603      	mov	r3, r0
 8013a36:	80fb      	strh	r3, [r7, #6]
 8013a38:	460b      	mov	r3, r1
 8013a3a:	717b      	strb	r3, [r7, #5]
 8013a3c:	4613      	mov	r3, r2
 8013a3e:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 8013a40:	88fa      	ldrh	r2, [r7, #6]
 8013a42:	793b      	ldrb	r3, [r7, #4]
 8013a44:	4413      	add	r3, r2
 8013a46:	3302      	adds	r3, #2
 8013a48:	2b44      	cmp	r3, #68	; 0x44
 8013a4a:	d906      	bls.n	8013a5a <dhcp_option+0x32>
 8013a4c:	4b0d      	ldr	r3, [pc, #52]	; (8013a84 <dhcp_option+0x5c>)
 8013a4e:	f240 529a 	movw	r2, #1434	; 0x59a
 8013a52:	490d      	ldr	r1, [pc, #52]	; (8013a88 <dhcp_option+0x60>)
 8013a54:	480d      	ldr	r0, [pc, #52]	; (8013a8c <dhcp_option+0x64>)
 8013a56:	f003 fb43 	bl	80170e0 <iprintf>
  options[options_out_len++] = option_type;
 8013a5a:	88fb      	ldrh	r3, [r7, #6]
 8013a5c:	1c5a      	adds	r2, r3, #1
 8013a5e:	80fa      	strh	r2, [r7, #6]
 8013a60:	461a      	mov	r2, r3
 8013a62:	683b      	ldr	r3, [r7, #0]
 8013a64:	4413      	add	r3, r2
 8013a66:	797a      	ldrb	r2, [r7, #5]
 8013a68:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 8013a6a:	88fb      	ldrh	r3, [r7, #6]
 8013a6c:	1c5a      	adds	r2, r3, #1
 8013a6e:	80fa      	strh	r2, [r7, #6]
 8013a70:	461a      	mov	r2, r3
 8013a72:	683b      	ldr	r3, [r7, #0]
 8013a74:	4413      	add	r3, r2
 8013a76:	793a      	ldrb	r2, [r7, #4]
 8013a78:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013a7a:	88fb      	ldrh	r3, [r7, #6]
}
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	3708      	adds	r7, #8
 8013a80:	46bd      	mov	sp, r7
 8013a82:	bd80      	pop	{r7, pc}
 8013a84:	0801a508 	.word	0x0801a508
 8013a88:	0801a69c 	.word	0x0801a69c
 8013a8c:	0801a568 	.word	0x0801a568

08013a90 <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 8013a90:	b580      	push	{r7, lr}
 8013a92:	b082      	sub	sp, #8
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	4603      	mov	r3, r0
 8013a98:	6039      	str	r1, [r7, #0]
 8013a9a:	80fb      	strh	r3, [r7, #6]
 8013a9c:	4613      	mov	r3, r2
 8013a9e:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 8013aa0:	88fb      	ldrh	r3, [r7, #6]
 8013aa2:	2b43      	cmp	r3, #67	; 0x43
 8013aa4:	d906      	bls.n	8013ab4 <dhcp_option_byte+0x24>
 8013aa6:	4b0a      	ldr	r3, [pc, #40]	; (8013ad0 <dhcp_option_byte+0x40>)
 8013aa8:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8013aac:	4909      	ldr	r1, [pc, #36]	; (8013ad4 <dhcp_option_byte+0x44>)
 8013aae:	480a      	ldr	r0, [pc, #40]	; (8013ad8 <dhcp_option_byte+0x48>)
 8013ab0:	f003 fb16 	bl	80170e0 <iprintf>
  options[options_out_len++] = value;
 8013ab4:	88fb      	ldrh	r3, [r7, #6]
 8013ab6:	1c5a      	adds	r2, r3, #1
 8013ab8:	80fa      	strh	r2, [r7, #6]
 8013aba:	461a      	mov	r2, r3
 8013abc:	683b      	ldr	r3, [r7, #0]
 8013abe:	4413      	add	r3, r2
 8013ac0:	797a      	ldrb	r2, [r7, #5]
 8013ac2:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013ac4:	88fb      	ldrh	r3, [r7, #6]
}
 8013ac6:	4618      	mov	r0, r3
 8013ac8:	3708      	adds	r7, #8
 8013aca:	46bd      	mov	sp, r7
 8013acc:	bd80      	pop	{r7, pc}
 8013ace:	bf00      	nop
 8013ad0:	0801a508 	.word	0x0801a508
 8013ad4:	0801a6e0 	.word	0x0801a6e0
 8013ad8:	0801a568 	.word	0x0801a568

08013adc <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b082      	sub	sp, #8
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	4603      	mov	r3, r0
 8013ae4:	6039      	str	r1, [r7, #0]
 8013ae6:	80fb      	strh	r3, [r7, #6]
 8013ae8:	4613      	mov	r3, r2
 8013aea:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013aec:	88fb      	ldrh	r3, [r7, #6]
 8013aee:	3302      	adds	r3, #2
 8013af0:	2b44      	cmp	r3, #68	; 0x44
 8013af2:	d906      	bls.n	8013b02 <dhcp_option_short+0x26>
 8013af4:	4b0f      	ldr	r3, [pc, #60]	; (8013b34 <dhcp_option_short+0x58>)
 8013af6:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8013afa:	490f      	ldr	r1, [pc, #60]	; (8013b38 <dhcp_option_short+0x5c>)
 8013afc:	480f      	ldr	r0, [pc, #60]	; (8013b3c <dhcp_option_short+0x60>)
 8013afe:	f003 faef 	bl	80170e0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 8013b02:	88bb      	ldrh	r3, [r7, #4]
 8013b04:	0a1b      	lsrs	r3, r3, #8
 8013b06:	b29a      	uxth	r2, r3
 8013b08:	88fb      	ldrh	r3, [r7, #6]
 8013b0a:	1c59      	adds	r1, r3, #1
 8013b0c:	80f9      	strh	r1, [r7, #6]
 8013b0e:	4619      	mov	r1, r3
 8013b10:	683b      	ldr	r3, [r7, #0]
 8013b12:	440b      	add	r3, r1
 8013b14:	b2d2      	uxtb	r2, r2
 8013b16:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8013b18:	88fb      	ldrh	r3, [r7, #6]
 8013b1a:	1c5a      	adds	r2, r3, #1
 8013b1c:	80fa      	strh	r2, [r7, #6]
 8013b1e:	461a      	mov	r2, r3
 8013b20:	683b      	ldr	r3, [r7, #0]
 8013b22:	4413      	add	r3, r2
 8013b24:	88ba      	ldrh	r2, [r7, #4]
 8013b26:	b2d2      	uxtb	r2, r2
 8013b28:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013b2a:	88fb      	ldrh	r3, [r7, #6]
}
 8013b2c:	4618      	mov	r0, r3
 8013b2e:	3708      	adds	r7, #8
 8013b30:	46bd      	mov	sp, r7
 8013b32:	bd80      	pop	{r7, pc}
 8013b34:	0801a508 	.word	0x0801a508
 8013b38:	0801a718 	.word	0x0801a718
 8013b3c:	0801a568 	.word	0x0801a568

08013b40 <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 8013b40:	b580      	push	{r7, lr}
 8013b42:	b084      	sub	sp, #16
 8013b44:	af00      	add	r7, sp, #0
 8013b46:	4603      	mov	r3, r0
 8013b48:	60b9      	str	r1, [r7, #8]
 8013b4a:	607a      	str	r2, [r7, #4]
 8013b4c:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 8013b4e:	89fb      	ldrh	r3, [r7, #14]
 8013b50:	3304      	adds	r3, #4
 8013b52:	2b44      	cmp	r3, #68	; 0x44
 8013b54:	d906      	bls.n	8013b64 <dhcp_option_long+0x24>
 8013b56:	4b19      	ldr	r3, [pc, #100]	; (8013bbc <dhcp_option_long+0x7c>)
 8013b58:	f240 52b7 	movw	r2, #1463	; 0x5b7
 8013b5c:	4918      	ldr	r1, [pc, #96]	; (8013bc0 <dhcp_option_long+0x80>)
 8013b5e:	4819      	ldr	r0, [pc, #100]	; (8013bc4 <dhcp_option_long+0x84>)
 8013b60:	f003 fabe 	bl	80170e0 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 8013b64:	687b      	ldr	r3, [r7, #4]
 8013b66:	0e1a      	lsrs	r2, r3, #24
 8013b68:	89fb      	ldrh	r3, [r7, #14]
 8013b6a:	1c59      	adds	r1, r3, #1
 8013b6c:	81f9      	strh	r1, [r7, #14]
 8013b6e:	4619      	mov	r1, r3
 8013b70:	68bb      	ldr	r3, [r7, #8]
 8013b72:	440b      	add	r3, r1
 8013b74:	b2d2      	uxtb	r2, r2
 8013b76:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 8013b78:	687b      	ldr	r3, [r7, #4]
 8013b7a:	0c1a      	lsrs	r2, r3, #16
 8013b7c:	89fb      	ldrh	r3, [r7, #14]
 8013b7e:	1c59      	adds	r1, r3, #1
 8013b80:	81f9      	strh	r1, [r7, #14]
 8013b82:	4619      	mov	r1, r3
 8013b84:	68bb      	ldr	r3, [r7, #8]
 8013b86:	440b      	add	r3, r1
 8013b88:	b2d2      	uxtb	r2, r2
 8013b8a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013b8c:	687b      	ldr	r3, [r7, #4]
 8013b8e:	0a1a      	lsrs	r2, r3, #8
 8013b90:	89fb      	ldrh	r3, [r7, #14]
 8013b92:	1c59      	adds	r1, r3, #1
 8013b94:	81f9      	strh	r1, [r7, #14]
 8013b96:	4619      	mov	r1, r3
 8013b98:	68bb      	ldr	r3, [r7, #8]
 8013b9a:	440b      	add	r3, r1
 8013b9c:	b2d2      	uxtb	r2, r2
 8013b9e:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 8013ba0:	89fb      	ldrh	r3, [r7, #14]
 8013ba2:	1c5a      	adds	r2, r3, #1
 8013ba4:	81fa      	strh	r2, [r7, #14]
 8013ba6:	461a      	mov	r2, r3
 8013ba8:	68bb      	ldr	r3, [r7, #8]
 8013baa:	4413      	add	r3, r2
 8013bac:	687a      	ldr	r2, [r7, #4]
 8013bae:	b2d2      	uxtb	r2, r2
 8013bb0:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013bb2:	89fb      	ldrh	r3, [r7, #14]
}
 8013bb4:	4618      	mov	r0, r3
 8013bb6:	3710      	adds	r7, #16
 8013bb8:	46bd      	mov	sp, r7
 8013bba:	bd80      	pop	{r7, pc}
 8013bbc:	0801a508 	.word	0x0801a508
 8013bc0:	0801a754 	.word	0x0801a754
 8013bc4:	0801a568 	.word	0x0801a568

08013bc8 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013bc8:	b580      	push	{r7, lr}
 8013bca:	b090      	sub	sp, #64	; 0x40
 8013bcc:	af00      	add	r7, sp, #0
 8013bce:	6078      	str	r0, [r7, #4]
 8013bd0:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 8013bd2:	2300      	movs	r3, #0
 8013bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8013bd6:	2300      	movs	r3, #0
 8013bd8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013bda:	2208      	movs	r2, #8
 8013bdc:	2100      	movs	r1, #0
 8013bde:	48b5      	ldr	r0, [pc, #724]	; (8013eb4 <dhcp_parse_reply+0x2ec>)
 8013be0:	f003 f9e1 	bl	8016fa6 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	895b      	ldrh	r3, [r3, #10]
 8013be8:	2b2b      	cmp	r3, #43	; 0x2b
 8013bea:	d802      	bhi.n	8013bf2 <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013bec:	f06f 0301 	mvn.w	r3, #1
 8013bf0:	e2a7      	b.n	8014142 <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	685b      	ldr	r3, [r3, #4]
 8013bf6:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013bf8:	23f0      	movs	r3, #240	; 0xf0
 8013bfa:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	891b      	ldrh	r3, [r3, #8]
 8013c00:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 8013c02:	687b      	ldr	r3, [r7, #4]
 8013c04:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013c06:	e00c      	b.n	8013c22 <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013c08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c0a:	895b      	ldrh	r3, [r3, #10]
 8013c0c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013c0e:	1ad3      	subs	r3, r2, r3
 8013c10:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 8013c12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c14:	895b      	ldrh	r3, [r3, #10]
 8013c16:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8013c18:	1ad3      	subs	r3, r2, r3
 8013c1a:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8013c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c1e:	681b      	ldr	r3, [r3, #0]
 8013c20:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d004      	beq.n	8013c32 <dhcp_parse_reply+0x6a>
 8013c28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c2a:	895b      	ldrh	r3, [r3, #10]
 8013c2c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8013c2e:	429a      	cmp	r2, r3
 8013c30:	d2ea      	bcs.n	8013c08 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 8013c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c34:	2b00      	cmp	r3, #0
 8013c36:	d102      	bne.n	8013c3e <dhcp_parse_reply+0x76>
    return ERR_BUF;
 8013c38:	f06f 0301 	mvn.w	r3, #1
 8013c3c:	e281      	b.n	8014142 <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 8013c3e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013c40:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 8013c42:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8013c44:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 8013c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c48:	685b      	ldr	r3, [r3, #4]
 8013c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 8013c4c:	e239      	b.n	80140c2 <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 8013c4e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c50:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c52:	4413      	add	r3, r2
 8013c54:	781b      	ldrb	r3, [r3, #0]
 8013c56:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 8013c58:	2300      	movs	r3, #0
 8013c5a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 8013c5e:	f04f 33ff 	mov.w	r3, #4294967295
 8013c62:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 8013c64:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c66:	3302      	adds	r3, #2
 8013c68:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 8013c6a:	8bfa      	ldrh	r2, [r7, #30]
 8013c6c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c6e:	429a      	cmp	r2, r3
 8013c70:	d202      	bcs.n	8013c78 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 8013c72:	f06f 0301 	mvn.w	r3, #1
 8013c76:	e264      	b.n	8014142 <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 8013c78:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c7a:	3301      	adds	r3, #1
 8013c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013c7e:	8952      	ldrh	r2, [r2, #10]
 8013c80:	4293      	cmp	r3, r2
 8013c82:	da07      	bge.n	8013c94 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013c84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013c86:	3301      	adds	r3, #1
 8013c88:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013c8a:	4413      	add	r3, r2
 8013c8c:	781b      	ldrb	r3, [r3, #0]
 8013c8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013c92:	e00b      	b.n	8013cac <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c96:	681b      	ldr	r3, [r3, #0]
 8013c98:	2b00      	cmp	r3, #0
 8013c9a:	d004      	beq.n	8013ca6 <dhcp_parse_reply+0xde>
 8013c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c9e:	681b      	ldr	r3, [r3, #0]
 8013ca0:	685b      	ldr	r3, [r3, #4]
 8013ca2:	781b      	ldrb	r3, [r3, #0]
 8013ca4:	e000      	b.n	8013ca8 <dhcp_parse_reply+0xe0>
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013cac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013cb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8013cb4:	7dfb      	ldrb	r3, [r7, #23]
 8013cb6:	2b3b      	cmp	r3, #59	; 0x3b
 8013cb8:	f200 812c 	bhi.w	8013f14 <dhcp_parse_reply+0x34c>
 8013cbc:	a201      	add	r2, pc, #4	; (adr r2, 8013cc4 <dhcp_parse_reply+0xfc>)
 8013cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013cc2:	bf00      	nop
 8013cc4:	08013db5 	.word	0x08013db5
 8013cc8:	08013dc5 	.word	0x08013dc5
 8013ccc:	08013f15 	.word	0x08013f15
 8013cd0:	08013de7 	.word	0x08013de7
 8013cd4:	08013f15 	.word	0x08013f15
 8013cd8:	08013f15 	.word	0x08013f15
 8013cdc:	08013f15 	.word	0x08013f15
 8013ce0:	08013f15 	.word	0x08013f15
 8013ce4:	08013f15 	.word	0x08013f15
 8013ce8:	08013f15 	.word	0x08013f15
 8013cec:	08013f15 	.word	0x08013f15
 8013cf0:	08013f15 	.word	0x08013f15
 8013cf4:	08013f15 	.word	0x08013f15
 8013cf8:	08013f15 	.word	0x08013f15
 8013cfc:	08013f15 	.word	0x08013f15
 8013d00:	08013f15 	.word	0x08013f15
 8013d04:	08013f15 	.word	0x08013f15
 8013d08:	08013f15 	.word	0x08013f15
 8013d0c:	08013f15 	.word	0x08013f15
 8013d10:	08013f15 	.word	0x08013f15
 8013d14:	08013f15 	.word	0x08013f15
 8013d18:	08013f15 	.word	0x08013f15
 8013d1c:	08013f15 	.word	0x08013f15
 8013d20:	08013f15 	.word	0x08013f15
 8013d24:	08013f15 	.word	0x08013f15
 8013d28:	08013f15 	.word	0x08013f15
 8013d2c:	08013f15 	.word	0x08013f15
 8013d30:	08013f15 	.word	0x08013f15
 8013d34:	08013f15 	.word	0x08013f15
 8013d38:	08013f15 	.word	0x08013f15
 8013d3c:	08013f15 	.word	0x08013f15
 8013d40:	08013f15 	.word	0x08013f15
 8013d44:	08013f15 	.word	0x08013f15
 8013d48:	08013f15 	.word	0x08013f15
 8013d4c:	08013f15 	.word	0x08013f15
 8013d50:	08013f15 	.word	0x08013f15
 8013d54:	08013f15 	.word	0x08013f15
 8013d58:	08013f15 	.word	0x08013f15
 8013d5c:	08013f15 	.word	0x08013f15
 8013d60:	08013f15 	.word	0x08013f15
 8013d64:	08013f15 	.word	0x08013f15
 8013d68:	08013f15 	.word	0x08013f15
 8013d6c:	08013f15 	.word	0x08013f15
 8013d70:	08013f15 	.word	0x08013f15
 8013d74:	08013f15 	.word	0x08013f15
 8013d78:	08013f15 	.word	0x08013f15
 8013d7c:	08013f15 	.word	0x08013f15
 8013d80:	08013f15 	.word	0x08013f15
 8013d84:	08013f15 	.word	0x08013f15
 8013d88:	08013f15 	.word	0x08013f15
 8013d8c:	08013f15 	.word	0x08013f15
 8013d90:	08013e13 	.word	0x08013e13
 8013d94:	08013e35 	.word	0x08013e35
 8013d98:	08013e71 	.word	0x08013e71
 8013d9c:	08013e93 	.word	0x08013e93
 8013da0:	08013f15 	.word	0x08013f15
 8013da4:	08013f15 	.word	0x08013f15
 8013da8:	08013f15 	.word	0x08013f15
 8013dac:	08013ed1 	.word	0x08013ed1
 8013db0:	08013ef3 	.word	0x08013ef3
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013db4:	2300      	movs	r3, #0
 8013db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013dba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013dbe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 8013dc2:	e0ab      	b.n	8013f1c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013dc4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013dc8:	2b04      	cmp	r3, #4
 8013dca:	d009      	beq.n	8013de0 <dhcp_parse_reply+0x218>
 8013dcc:	4b3a      	ldr	r3, [pc, #232]	; (8013eb8 <dhcp_parse_reply+0x2f0>)
 8013dce:	f240 622e 	movw	r2, #1582	; 0x62e
 8013dd2:	493a      	ldr	r1, [pc, #232]	; (8013ebc <dhcp_parse_reply+0x2f4>)
 8013dd4:	483a      	ldr	r0, [pc, #232]	; (8013ec0 <dhcp_parse_reply+0x2f8>)
 8013dd6:	f003 f983 	bl	80170e0 <iprintf>
 8013dda:	f06f 0305 	mvn.w	r3, #5
 8013dde:	e1b0      	b.n	8014142 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 8013de0:	2306      	movs	r3, #6
 8013de2:	623b      	str	r3, [r7, #32]
        break;
 8013de4:	e09a      	b.n	8013f1c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8013de6:	2304      	movs	r3, #4
 8013de8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8013dec:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013df0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013df4:	429a      	cmp	r2, r3
 8013df6:	d209      	bcs.n	8013e0c <dhcp_parse_reply+0x244>
 8013df8:	4b2f      	ldr	r3, [pc, #188]	; (8013eb8 <dhcp_parse_reply+0x2f0>)
 8013dfa:	f240 6233 	movw	r2, #1587	; 0x633
 8013dfe:	4931      	ldr	r1, [pc, #196]	; (8013ec4 <dhcp_parse_reply+0x2fc>)
 8013e00:	482f      	ldr	r0, [pc, #188]	; (8013ec0 <dhcp_parse_reply+0x2f8>)
 8013e02:	f003 f96d 	bl	80170e0 <iprintf>
 8013e06:	f06f 0305 	mvn.w	r3, #5
 8013e0a:	e19a      	b.n	8014142 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8013e0c:	2307      	movs	r3, #7
 8013e0e:	623b      	str	r3, [r7, #32]
        break;
 8013e10:	e084      	b.n	8013f1c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013e12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e16:	2b04      	cmp	r3, #4
 8013e18:	d009      	beq.n	8013e2e <dhcp_parse_reply+0x266>
 8013e1a:	4b27      	ldr	r3, [pc, #156]	; (8013eb8 <dhcp_parse_reply+0x2f0>)
 8013e1c:	f240 6241 	movw	r2, #1601	; 0x641
 8013e20:	4926      	ldr	r1, [pc, #152]	; (8013ebc <dhcp_parse_reply+0x2f4>)
 8013e22:	4827      	ldr	r0, [pc, #156]	; (8013ec0 <dhcp_parse_reply+0x2f8>)
 8013e24:	f003 f95c 	bl	80170e0 <iprintf>
 8013e28:	f06f 0305 	mvn.w	r3, #5
 8013e2c:	e189      	b.n	8014142 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 8013e2e:	2303      	movs	r3, #3
 8013e30:	623b      	str	r3, [r7, #32]
        break;
 8013e32:	e073      	b.n	8013f1c <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013e34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e38:	2b01      	cmp	r3, #1
 8013e3a:	d009      	beq.n	8013e50 <dhcp_parse_reply+0x288>
 8013e3c:	4b1e      	ldr	r3, [pc, #120]	; (8013eb8 <dhcp_parse_reply+0x2f0>)
 8013e3e:	f240 624f 	movw	r2, #1615	; 0x64f
 8013e42:	4921      	ldr	r1, [pc, #132]	; (8013ec8 <dhcp_parse_reply+0x300>)
 8013e44:	481e      	ldr	r0, [pc, #120]	; (8013ec0 <dhcp_parse_reply+0x2f8>)
 8013e46:	f003 f94b 	bl	80170e0 <iprintf>
 8013e4a:	f06f 0305 	mvn.w	r3, #5
 8013e4e:	e178      	b.n	8014142 <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 8013e50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013e52:	2bf0      	cmp	r3, #240	; 0xf0
 8013e54:	d009      	beq.n	8013e6a <dhcp_parse_reply+0x2a2>
 8013e56:	4b18      	ldr	r3, [pc, #96]	; (8013eb8 <dhcp_parse_reply+0x2f0>)
 8013e58:	f240 6251 	movw	r2, #1617	; 0x651
 8013e5c:	491b      	ldr	r1, [pc, #108]	; (8013ecc <dhcp_parse_reply+0x304>)
 8013e5e:	4818      	ldr	r0, [pc, #96]	; (8013ec0 <dhcp_parse_reply+0x2f8>)
 8013e60:	f003 f93e 	bl	80170e0 <iprintf>
 8013e64:	f06f 0305 	mvn.w	r3, #5
 8013e68:	e16b      	b.n	8014142 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 8013e6a:	2300      	movs	r3, #0
 8013e6c:	623b      	str	r3, [r7, #32]
        break;
 8013e6e:	e055      	b.n	8013f1c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 8013e70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e74:	2b01      	cmp	r3, #1
 8013e76:	d009      	beq.n	8013e8c <dhcp_parse_reply+0x2c4>
 8013e78:	4b0f      	ldr	r3, [pc, #60]	; (8013eb8 <dhcp_parse_reply+0x2f0>)
 8013e7a:	f240 6255 	movw	r2, #1621	; 0x655
 8013e7e:	4912      	ldr	r1, [pc, #72]	; (8013ec8 <dhcp_parse_reply+0x300>)
 8013e80:	480f      	ldr	r0, [pc, #60]	; (8013ec0 <dhcp_parse_reply+0x2f8>)
 8013e82:	f003 f92d 	bl	80170e0 <iprintf>
 8013e86:	f06f 0305 	mvn.w	r3, #5
 8013e8a:	e15a      	b.n	8014142 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8013e8c:	2301      	movs	r3, #1
 8013e8e:	623b      	str	r3, [r7, #32]
        break;
 8013e90:	e044      	b.n	8013f1c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013e92:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013e96:	2b04      	cmp	r3, #4
 8013e98:	d009      	beq.n	8013eae <dhcp_parse_reply+0x2e6>
 8013e9a:	4b07      	ldr	r3, [pc, #28]	; (8013eb8 <dhcp_parse_reply+0x2f0>)
 8013e9c:	f240 6259 	movw	r2, #1625	; 0x659
 8013ea0:	4906      	ldr	r1, [pc, #24]	; (8013ebc <dhcp_parse_reply+0x2f4>)
 8013ea2:	4807      	ldr	r0, [pc, #28]	; (8013ec0 <dhcp_parse_reply+0x2f8>)
 8013ea4:	f003 f91c 	bl	80170e0 <iprintf>
 8013ea8:	f06f 0305 	mvn.w	r3, #5
 8013eac:	e149      	b.n	8014142 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 8013eae:	2302      	movs	r3, #2
 8013eb0:	623b      	str	r3, [r7, #32]
        break;
 8013eb2:	e033      	b.n	8013f1c <dhcp_parse_reply+0x354>
 8013eb4:	2000f2e0 	.word	0x2000f2e0
 8013eb8:	0801a508 	.word	0x0801a508
 8013ebc:	0801a790 	.word	0x0801a790
 8013ec0:	0801a568 	.word	0x0801a568
 8013ec4:	0801a79c 	.word	0x0801a79c
 8013ec8:	0801a7b0 	.word	0x0801a7b0
 8013ecc:	0801a7bc 	.word	0x0801a7bc
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013ed0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ed4:	2b04      	cmp	r3, #4
 8013ed6:	d009      	beq.n	8013eec <dhcp_parse_reply+0x324>
 8013ed8:	4b9c      	ldr	r3, [pc, #624]	; (801414c <dhcp_parse_reply+0x584>)
 8013eda:	f240 625d 	movw	r2, #1629	; 0x65d
 8013ede:	499c      	ldr	r1, [pc, #624]	; (8014150 <dhcp_parse_reply+0x588>)
 8013ee0:	489c      	ldr	r0, [pc, #624]	; (8014154 <dhcp_parse_reply+0x58c>)
 8013ee2:	f003 f8fd 	bl	80170e0 <iprintf>
 8013ee6:	f06f 0305 	mvn.w	r3, #5
 8013eea:	e12a      	b.n	8014142 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8013eec:	2304      	movs	r3, #4
 8013eee:	623b      	str	r3, [r7, #32]
        break;
 8013ef0:	e014      	b.n	8013f1c <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013ef2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ef6:	2b04      	cmp	r3, #4
 8013ef8:	d009      	beq.n	8013f0e <dhcp_parse_reply+0x346>
 8013efa:	4b94      	ldr	r3, [pc, #592]	; (801414c <dhcp_parse_reply+0x584>)
 8013efc:	f240 6261 	movw	r2, #1633	; 0x661
 8013f00:	4993      	ldr	r1, [pc, #588]	; (8014150 <dhcp_parse_reply+0x588>)
 8013f02:	4894      	ldr	r0, [pc, #592]	; (8014154 <dhcp_parse_reply+0x58c>)
 8013f04:	f003 f8ec 	bl	80170e0 <iprintf>
 8013f08:	f06f 0305 	mvn.w	r3, #5
 8013f0c:	e119      	b.n	8014142 <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 8013f0e:	2305      	movs	r3, #5
 8013f10:	623b      	str	r3, [r7, #32]
        break;
 8013f12:	e003      	b.n	8013f1c <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8013f14:	2300      	movs	r3, #0
 8013f16:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8013f1a:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8013f1c:	7dfb      	ldrb	r3, [r7, #23]
 8013f1e:	2b00      	cmp	r3, #0
 8013f20:	d103      	bne.n	8013f2a <dhcp_parse_reply+0x362>
      offset++;
 8013f22:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013f24:	3301      	adds	r3, #1
 8013f26:	877b      	strh	r3, [r7, #58]	; 0x3a
 8013f28:	e0a1      	b.n	801406e <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 8013f2a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013f2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f30:	4413      	add	r3, r2
 8013f32:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8013f36:	4293      	cmp	r3, r2
 8013f38:	dd02      	ble.n	8013f40 <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 8013f3a:	f06f 0301 	mvn.w	r3, #1
 8013f3e:	e100      	b.n	8014142 <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 8013f40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013f44:	b29a      	uxth	r2, r3
 8013f46:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013f48:	4413      	add	r3, r2
 8013f4a:	b29b      	uxth	r3, r3
 8013f4c:	3302      	adds	r3, #2
 8013f4e:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 8013f50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	f000 808a 	beq.w	801406e <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 8013f5e:	6a3b      	ldr	r3, [r7, #32]
 8013f60:	2b00      	cmp	r3, #0
 8013f62:	db02      	blt.n	8013f6a <dhcp_parse_reply+0x3a2>
 8013f64:	6a3b      	ldr	r3, [r7, #32]
 8013f66:	2b07      	cmp	r3, #7
 8013f68:	dd06      	ble.n	8013f78 <dhcp_parse_reply+0x3b0>
 8013f6a:	4b78      	ldr	r3, [pc, #480]	; (801414c <dhcp_parse_reply+0x584>)
 8013f6c:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 8013f70:	4979      	ldr	r1, [pc, #484]	; (8014158 <dhcp_parse_reply+0x590>)
 8013f72:	4878      	ldr	r0, [pc, #480]	; (8014154 <dhcp_parse_reply+0x58c>)
 8013f74:	f003 f8b4 	bl	80170e0 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 8013f78:	4a78      	ldr	r2, [pc, #480]	; (801415c <dhcp_parse_reply+0x594>)
 8013f7a:	6a3b      	ldr	r3, [r7, #32]
 8013f7c:	4413      	add	r3, r2
 8013f7e:	781b      	ldrb	r3, [r3, #0]
 8013f80:	2b00      	cmp	r3, #0
 8013f82:	d174      	bne.n	801406e <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8013f84:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013f88:	2b04      	cmp	r3, #4
 8013f8a:	bf28      	it	cs
 8013f8c:	2304      	movcs	r3, #4
 8013f8e:	b2db      	uxtb	r3, r3
 8013f90:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 8013f92:	8bfb      	ldrh	r3, [r7, #30]
 8013f94:	8aba      	ldrh	r2, [r7, #20]
 8013f96:	f107 0108 	add.w	r1, r7, #8
 8013f9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013f9c:	f7f8 fc16 	bl	800c7cc <pbuf_copy_partial>
 8013fa0:	4603      	mov	r3, r0
 8013fa2:	461a      	mov	r2, r3
 8013fa4:	8abb      	ldrh	r3, [r7, #20]
 8013fa6:	4293      	cmp	r3, r2
 8013fa8:	d002      	beq.n	8013fb0 <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8013faa:	f06f 0301 	mvn.w	r3, #1
 8013fae:	e0c8      	b.n	8014142 <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 8013fb0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013fb4:	2b04      	cmp	r3, #4
 8013fb6:	d933      	bls.n	8014020 <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8013fb8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013fbc:	f003 0303 	and.w	r3, r3, #3
 8013fc0:	b2db      	uxtb	r3, r3
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d009      	beq.n	8013fda <dhcp_parse_reply+0x412>
 8013fc6:	4b61      	ldr	r3, [pc, #388]	; (801414c <dhcp_parse_reply+0x584>)
 8013fc8:	f240 6281 	movw	r2, #1665	; 0x681
 8013fcc:	4964      	ldr	r1, [pc, #400]	; (8014160 <dhcp_parse_reply+0x598>)
 8013fce:	4861      	ldr	r0, [pc, #388]	; (8014154 <dhcp_parse_reply+0x58c>)
 8013fd0:	f003 f886 	bl	80170e0 <iprintf>
 8013fd4:	f06f 0305 	mvn.w	r3, #5
 8013fd8:	e0b3      	b.n	8014142 <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8013fda:	4a60      	ldr	r2, [pc, #384]	; (801415c <dhcp_parse_reply+0x594>)
 8013fdc:	6a3b      	ldr	r3, [r7, #32]
 8013fde:	4413      	add	r3, r2
 8013fe0:	2201      	movs	r2, #1
 8013fe2:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8013fe4:	68bb      	ldr	r3, [r7, #8]
 8013fe6:	4618      	mov	r0, r3
 8013fe8:	f7f6 fbd7 	bl	800a79a <lwip_htonl>
 8013fec:	4602      	mov	r2, r0
 8013fee:	495d      	ldr	r1, [pc, #372]	; (8014164 <dhcp_parse_reply+0x59c>)
 8013ff0:	6a3b      	ldr	r3, [r7, #32]
 8013ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8013ff6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013ffa:	3b04      	subs	r3, #4
 8013ffc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 8014000:	8bfb      	ldrh	r3, [r7, #30]
 8014002:	3304      	adds	r3, #4
 8014004:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8014006:	8a7a      	ldrh	r2, [r7, #18]
 8014008:	8bfb      	ldrh	r3, [r7, #30]
 801400a:	429a      	cmp	r2, r3
 801400c:	d202      	bcs.n	8014014 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801400e:	f06f 0301 	mvn.w	r3, #1
 8014012:	e096      	b.n	8014142 <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8014014:	8a7b      	ldrh	r3, [r7, #18]
 8014016:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8014018:	6a3b      	ldr	r3, [r7, #32]
 801401a:	3301      	adds	r3, #1
 801401c:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801401e:	e79e      	b.n	8013f5e <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 8014020:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014024:	2b04      	cmp	r3, #4
 8014026:	d106      	bne.n	8014036 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 8014028:	68bb      	ldr	r3, [r7, #8]
 801402a:	4618      	mov	r0, r3
 801402c:	f7f6 fbb5 	bl	800a79a <lwip_htonl>
 8014030:	4603      	mov	r3, r0
 8014032:	60bb      	str	r3, [r7, #8]
 8014034:	e011      	b.n	801405a <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 8014036:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801403a:	2b01      	cmp	r3, #1
 801403c:	d009      	beq.n	8014052 <dhcp_parse_reply+0x48a>
 801403e:	4b43      	ldr	r3, [pc, #268]	; (801414c <dhcp_parse_reply+0x584>)
 8014040:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 8014044:	4948      	ldr	r1, [pc, #288]	; (8014168 <dhcp_parse_reply+0x5a0>)
 8014046:	4843      	ldr	r0, [pc, #268]	; (8014154 <dhcp_parse_reply+0x58c>)
 8014048:	f003 f84a 	bl	80170e0 <iprintf>
 801404c:	f06f 0305 	mvn.w	r3, #5
 8014050:	e077      	b.n	8014142 <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 8014052:	f107 0308 	add.w	r3, r7, #8
 8014056:	781b      	ldrb	r3, [r3, #0]
 8014058:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 801405a:	4a40      	ldr	r2, [pc, #256]	; (801415c <dhcp_parse_reply+0x594>)
 801405c:	6a3b      	ldr	r3, [r7, #32]
 801405e:	4413      	add	r3, r2
 8014060:	2201      	movs	r2, #1
 8014062:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 8014064:	68ba      	ldr	r2, [r7, #8]
 8014066:	493f      	ldr	r1, [pc, #252]	; (8014164 <dhcp_parse_reply+0x59c>)
 8014068:	6a3b      	ldr	r3, [r7, #32]
 801406a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 801406e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014070:	895b      	ldrh	r3, [r3, #10]
 8014072:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8014074:	429a      	cmp	r2, r3
 8014076:	d324      	bcc.n	80140c2 <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 8014078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801407a:	895b      	ldrh	r3, [r3, #10]
 801407c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801407e:	1ad3      	subs	r3, r2, r3
 8014080:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 8014082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014084:	895b      	ldrh	r3, [r3, #10]
 8014086:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8014088:	1ad3      	subs	r3, r2, r3
 801408a:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 801408c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801408e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8014090:	429a      	cmp	r2, r3
 8014092:	d213      	bcs.n	80140bc <dhcp_parse_reply+0x4f4>
        q = q->next;
 8014094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014096:	681b      	ldr	r3, [r3, #0]
 8014098:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 801409a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801409c:	2b00      	cmp	r3, #0
 801409e:	d109      	bne.n	80140b4 <dhcp_parse_reply+0x4ec>
 80140a0:	4b2a      	ldr	r3, [pc, #168]	; (801414c <dhcp_parse_reply+0x584>)
 80140a2:	f240 629d 	movw	r2, #1693	; 0x69d
 80140a6:	4931      	ldr	r1, [pc, #196]	; (801416c <dhcp_parse_reply+0x5a4>)
 80140a8:	482a      	ldr	r0, [pc, #168]	; (8014154 <dhcp_parse_reply+0x58c>)
 80140aa:	f003 f819 	bl	80170e0 <iprintf>
 80140ae:	f06f 0305 	mvn.w	r3, #5
 80140b2:	e046      	b.n	8014142 <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 80140b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140b6:	685b      	ldr	r3, [r3, #4]
 80140b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80140ba:	e002      	b.n	80140c2 <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 80140bc:	f06f 0301 	mvn.w	r3, #1
 80140c0:	e03f      	b.n	8014142 <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80140c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d00a      	beq.n	80140de <dhcp_parse_reply+0x516>
 80140c8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80140ca:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80140cc:	429a      	cmp	r2, r3
 80140ce:	d206      	bcs.n	80140de <dhcp_parse_reply+0x516>
 80140d0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80140d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80140d4:	4413      	add	r3, r2
 80140d6:	781b      	ldrb	r3, [r3, #0]
 80140d8:	2bff      	cmp	r3, #255	; 0xff
 80140da:	f47f adb8 	bne.w	8013c4e <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 80140de:	4b1f      	ldr	r3, [pc, #124]	; (801415c <dhcp_parse_reply+0x594>)
 80140e0:	781b      	ldrb	r3, [r3, #0]
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d018      	beq.n	8014118 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80140e6:	4b1f      	ldr	r3, [pc, #124]	; (8014164 <dhcp_parse_reply+0x59c>)
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 80140ec:	4b1b      	ldr	r3, [pc, #108]	; (801415c <dhcp_parse_reply+0x594>)
 80140ee:	2200      	movs	r2, #0
 80140f0:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 80140f2:	68fb      	ldr	r3, [r7, #12]
 80140f4:	2b01      	cmp	r3, #1
 80140f6:	d102      	bne.n	80140fe <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 80140f8:	2301      	movs	r3, #1
 80140fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80140fc:	e00c      	b.n	8014118 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	2b02      	cmp	r3, #2
 8014102:	d102      	bne.n	801410a <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8014104:	2301      	movs	r3, #1
 8014106:	62bb      	str	r3, [r7, #40]	; 0x28
 8014108:	e006      	b.n	8014118 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	2b03      	cmp	r3, #3
 801410e:	d103      	bne.n	8014118 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 8014110:	2301      	movs	r3, #1
 8014112:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8014114:	2301      	movs	r3, #1
 8014116:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8014118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801411a:	2b00      	cmp	r3, #0
 801411c:	d006      	beq.n	801412c <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801411e:	2300      	movs	r3, #0
 8014120:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 8014122:	236c      	movs	r3, #108	; 0x6c
 8014124:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 8014126:	23ec      	movs	r3, #236	; 0xec
 8014128:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 801412a:	e56a      	b.n	8013c02 <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 801412c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801412e:	2b00      	cmp	r3, #0
 8014130:	d006      	beq.n	8014140 <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 8014132:	2300      	movs	r3, #0
 8014134:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 8014136:	232c      	movs	r3, #44	; 0x2c
 8014138:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 801413a:	236c      	movs	r3, #108	; 0x6c
 801413c:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 801413e:	e560      	b.n	8013c02 <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 8014140:	2300      	movs	r3, #0
}
 8014142:	4618      	mov	r0, r3
 8014144:	3740      	adds	r7, #64	; 0x40
 8014146:	46bd      	mov	sp, r7
 8014148:	bd80      	pop	{r7, pc}
 801414a:	bf00      	nop
 801414c:	0801a508 	.word	0x0801a508
 8014150:	0801a790 	.word	0x0801a790
 8014154:	0801a568 	.word	0x0801a568
 8014158:	0801a7d4 	.word	0x0801a7d4
 801415c:	2000f2e0 	.word	0x2000f2e0
 8014160:	0801a7e8 	.word	0x0801a7e8
 8014164:	2000f2c0 	.word	0x2000f2c0
 8014168:	0801a800 	.word	0x0801a800
 801416c:	0801a814 	.word	0x0801a814

08014170 <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 8014170:	b580      	push	{r7, lr}
 8014172:	b08a      	sub	sp, #40	; 0x28
 8014174:	af00      	add	r7, sp, #0
 8014176:	60f8      	str	r0, [r7, #12]
 8014178:	60b9      	str	r1, [r7, #8]
 801417a:	607a      	str	r2, [r7, #4]
 801417c:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 801417e:	4b60      	ldr	r3, [pc, #384]	; (8014300 <dhcp_recv+0x190>)
 8014180:	685b      	ldr	r3, [r3, #4]
 8014182:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8014184:	6a3b      	ldr	r3, [r7, #32]
 8014186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014188:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 801418a:	687b      	ldr	r3, [r7, #4]
 801418c:	685b      	ldr	r3, [r3, #4]
 801418e:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 8014190:	69fb      	ldr	r3, [r7, #28]
 8014192:	2b00      	cmp	r3, #0
 8014194:	f000 809d 	beq.w	80142d2 <dhcp_recv+0x162>
 8014198:	69fb      	ldr	r3, [r7, #28]
 801419a:	791b      	ldrb	r3, [r3, #4]
 801419c:	2b00      	cmp	r3, #0
 801419e:	f000 8098 	beq.w	80142d2 <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 80141a2:	687b      	ldr	r3, [r7, #4]
 80141a4:	895b      	ldrh	r3, [r3, #10]
 80141a6:	2b2b      	cmp	r3, #43	; 0x2b
 80141a8:	f240 8095 	bls.w	80142d6 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 80141ac:	69bb      	ldr	r3, [r7, #24]
 80141ae:	781b      	ldrb	r3, [r3, #0]
 80141b0:	2b02      	cmp	r3, #2
 80141b2:	f040 8092 	bne.w	80142da <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80141b6:	2300      	movs	r3, #0
 80141b8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80141bc:	e012      	b.n	80141e4 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 80141be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141c2:	6a3a      	ldr	r2, [r7, #32]
 80141c4:	4413      	add	r3, r2
 80141c6:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 80141ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141ce:	69b9      	ldr	r1, [r7, #24]
 80141d0:	440b      	add	r3, r1
 80141d2:	7f1b      	ldrb	r3, [r3, #28]
 80141d4:	429a      	cmp	r2, r3
 80141d6:	f040 8082 	bne.w	80142de <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 80141da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141de:	3301      	adds	r3, #1
 80141e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80141e4:	6a3b      	ldr	r3, [r7, #32]
 80141e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80141ea:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80141ee:	429a      	cmp	r2, r3
 80141f0:	d203      	bcs.n	80141fa <dhcp_recv+0x8a>
 80141f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80141f6:	2b05      	cmp	r3, #5
 80141f8:	d9e1      	bls.n	80141be <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 80141fa:	69bb      	ldr	r3, [r7, #24]
 80141fc:	685b      	ldr	r3, [r3, #4]
 80141fe:	4618      	mov	r0, r3
 8014200:	f7f6 facb 	bl	800a79a <lwip_htonl>
 8014204:	4602      	mov	r2, r0
 8014206:	69fb      	ldr	r3, [r7, #28]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	429a      	cmp	r2, r3
 801420c:	d169      	bne.n	80142e2 <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801420e:	69f9      	ldr	r1, [r7, #28]
 8014210:	6878      	ldr	r0, [r7, #4]
 8014212:	f7ff fcd9 	bl	8013bc8 <dhcp_parse_reply>
 8014216:	4603      	mov	r3, r0
 8014218:	2b00      	cmp	r3, #0
 801421a:	d164      	bne.n	80142e6 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 801421c:	4b39      	ldr	r3, [pc, #228]	; (8014304 <dhcp_recv+0x194>)
 801421e:	785b      	ldrb	r3, [r3, #1]
 8014220:	2b00      	cmp	r3, #0
 8014222:	d062      	beq.n	80142ea <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 8014224:	687b      	ldr	r3, [r7, #4]
 8014226:	685b      	ldr	r3, [r3, #4]
 8014228:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 801422a:	4b37      	ldr	r3, [pc, #220]	; (8014308 <dhcp_recv+0x198>)
 801422c:	685b      	ldr	r3, [r3, #4]
 801422e:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 8014230:	7cfb      	ldrb	r3, [r7, #19]
 8014232:	2b05      	cmp	r3, #5
 8014234:	d12a      	bne.n	801428c <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 8014236:	69fb      	ldr	r3, [r7, #28]
 8014238:	795b      	ldrb	r3, [r3, #5]
 801423a:	2b01      	cmp	r3, #1
 801423c:	d112      	bne.n	8014264 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 801423e:	6979      	ldr	r1, [r7, #20]
 8014240:	6a38      	ldr	r0, [r7, #32]
 8014242:	f7fe fe17 	bl	8012e74 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 8014246:	6a3b      	ldr	r3, [r7, #32]
 8014248:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801424c:	f003 0308 	and.w	r3, r3, #8
 8014250:	2b00      	cmp	r3, #0
 8014252:	d003      	beq.n	801425c <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 8014254:	6a38      	ldr	r0, [r7, #32]
 8014256:	f7fe fb85 	bl	8012964 <dhcp_check>
 801425a:	e049      	b.n	80142f0 <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 801425c:	6a38      	ldr	r0, [r7, #32]
 801425e:	f7ff f867 	bl	8013330 <dhcp_bind>
 8014262:	e045      	b.n	80142f0 <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014264:	69fb      	ldr	r3, [r7, #28]
 8014266:	795b      	ldrb	r3, [r3, #5]
 8014268:	2b03      	cmp	r3, #3
 801426a:	d007      	beq.n	801427c <dhcp_recv+0x10c>
 801426c:	69fb      	ldr	r3, [r7, #28]
 801426e:	795b      	ldrb	r3, [r3, #5]
 8014270:	2b04      	cmp	r3, #4
 8014272:	d003      	beq.n	801427c <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 8014274:	69fb      	ldr	r3, [r7, #28]
 8014276:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 8014278:	2b05      	cmp	r3, #5
 801427a:	d139      	bne.n	80142f0 <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 801427c:	6979      	ldr	r1, [r7, #20]
 801427e:	6a38      	ldr	r0, [r7, #32]
 8014280:	f7fe fdf8 	bl	8012e74 <dhcp_handle_ack>
      dhcp_bind(netif);
 8014284:	6a38      	ldr	r0, [r7, #32]
 8014286:	f7ff f853 	bl	8013330 <dhcp_bind>
 801428a:	e031      	b.n	80142f0 <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 801428c:	7cfb      	ldrb	r3, [r7, #19]
 801428e:	2b06      	cmp	r3, #6
 8014290:	d113      	bne.n	80142ba <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8014292:	69fb      	ldr	r3, [r7, #28]
 8014294:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8014296:	2b03      	cmp	r3, #3
 8014298:	d00b      	beq.n	80142b2 <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 801429a:	69fb      	ldr	r3, [r7, #28]
 801429c:	795b      	ldrb	r3, [r3, #5]
 801429e:	2b01      	cmp	r3, #1
 80142a0:	d007      	beq.n	80142b2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80142a2:	69fb      	ldr	r3, [r7, #28]
 80142a4:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 80142a6:	2b04      	cmp	r3, #4
 80142a8:	d003      	beq.n	80142b2 <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 80142aa:	69fb      	ldr	r3, [r7, #28]
 80142ac:	795b      	ldrb	r3, [r3, #5]
 80142ae:	2b05      	cmp	r3, #5
 80142b0:	d103      	bne.n	80142ba <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 80142b2:	6a38      	ldr	r0, [r7, #32]
 80142b4:	f7fe fb3c 	bl	8012930 <dhcp_handle_nak>
 80142b8:	e01a      	b.n	80142f0 <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 80142ba:	7cfb      	ldrb	r3, [r7, #19]
 80142bc:	2b02      	cmp	r3, #2
 80142be:	d116      	bne.n	80142ee <dhcp_recv+0x17e>
 80142c0:	69fb      	ldr	r3, [r7, #28]
 80142c2:	795b      	ldrb	r3, [r3, #5]
 80142c4:	2b06      	cmp	r3, #6
 80142c6:	d112      	bne.n	80142ee <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 80142c8:	6979      	ldr	r1, [r7, #20]
 80142ca:	6a38      	ldr	r0, [r7, #32]
 80142cc:	f7fe fb7e 	bl	80129cc <dhcp_handle_offer>
 80142d0:	e00e      	b.n	80142f0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80142d2:	bf00      	nop
 80142d4:	e00c      	b.n	80142f0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80142d6:	bf00      	nop
 80142d8:	e00a      	b.n	80142f0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80142da:	bf00      	nop
 80142dc:	e008      	b.n	80142f0 <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 80142de:	bf00      	nop
 80142e0:	e006      	b.n	80142f0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80142e2:	bf00      	nop
 80142e4:	e004      	b.n	80142f0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80142e6:	bf00      	nop
 80142e8:	e002      	b.n	80142f0 <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 80142ea:	bf00      	nop
 80142ec:	e000      	b.n	80142f0 <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 80142ee:	bf00      	nop
  pbuf_free(p);
 80142f0:	6878      	ldr	r0, [r7, #4]
 80142f2:	f7f8 f865 	bl	800c3c0 <pbuf_free>
}
 80142f6:	bf00      	nop
 80142f8:	3728      	adds	r7, #40	; 0x28
 80142fa:	46bd      	mov	sp, r7
 80142fc:	bd80      	pop	{r7, pc}
 80142fe:	bf00      	nop
 8014300:	200098e0 	.word	0x200098e0
 8014304:	2000f2e0 	.word	0x2000f2e0
 8014308:	2000f2c0 	.word	0x2000f2c0

0801430c <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 801430c:	b580      	push	{r7, lr}
 801430e:	b088      	sub	sp, #32
 8014310:	af00      	add	r7, sp, #0
 8014312:	60f8      	str	r0, [r7, #12]
 8014314:	60b9      	str	r1, [r7, #8]
 8014316:	603b      	str	r3, [r7, #0]
 8014318:	4613      	mov	r3, r2
 801431a:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 801431c:	68fb      	ldr	r3, [r7, #12]
 801431e:	2b00      	cmp	r3, #0
 8014320:	d108      	bne.n	8014334 <dhcp_create_msg+0x28>
 8014322:	4b5f      	ldr	r3, [pc, #380]	; (80144a0 <dhcp_create_msg+0x194>)
 8014324:	f240 7269 	movw	r2, #1897	; 0x769
 8014328:	495e      	ldr	r1, [pc, #376]	; (80144a4 <dhcp_create_msg+0x198>)
 801432a:	485f      	ldr	r0, [pc, #380]	; (80144a8 <dhcp_create_msg+0x19c>)
 801432c:	f002 fed8 	bl	80170e0 <iprintf>
 8014330:	2300      	movs	r3, #0
 8014332:	e0b1      	b.n	8014498 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8014334:	68bb      	ldr	r3, [r7, #8]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d108      	bne.n	801434c <dhcp_create_msg+0x40>
 801433a:	4b59      	ldr	r3, [pc, #356]	; (80144a0 <dhcp_create_msg+0x194>)
 801433c:	f240 726a 	movw	r2, #1898	; 0x76a
 8014340:	495a      	ldr	r1, [pc, #360]	; (80144ac <dhcp_create_msg+0x1a0>)
 8014342:	4859      	ldr	r0, [pc, #356]	; (80144a8 <dhcp_create_msg+0x19c>)
 8014344:	f002 fecc 	bl	80170e0 <iprintf>
 8014348:	2300      	movs	r3, #0
 801434a:	e0a5      	b.n	8014498 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 801434c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014350:	f44f 719a 	mov.w	r1, #308	; 0x134
 8014354:	2036      	movs	r0, #54	; 0x36
 8014356:	f7f7 fd4f 	bl	800bdf8 <pbuf_alloc>
 801435a:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 801435c:	69bb      	ldr	r3, [r7, #24]
 801435e:	2b00      	cmp	r3, #0
 8014360:	d101      	bne.n	8014366 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8014362:	2300      	movs	r3, #0
 8014364:	e098      	b.n	8014498 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8014366:	69bb      	ldr	r3, [r7, #24]
 8014368:	895b      	ldrh	r3, [r3, #10]
 801436a:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 801436e:	d206      	bcs.n	801437e <dhcp_create_msg+0x72>
 8014370:	4b4b      	ldr	r3, [pc, #300]	; (80144a0 <dhcp_create_msg+0x194>)
 8014372:	f240 7271 	movw	r2, #1905	; 0x771
 8014376:	494e      	ldr	r1, [pc, #312]	; (80144b0 <dhcp_create_msg+0x1a4>)
 8014378:	484b      	ldr	r0, [pc, #300]	; (80144a8 <dhcp_create_msg+0x19c>)
 801437a:	f002 feb1 	bl	80170e0 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 801437e:	79fb      	ldrb	r3, [r7, #7]
 8014380:	2b03      	cmp	r3, #3
 8014382:	d103      	bne.n	801438c <dhcp_create_msg+0x80>
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	795b      	ldrb	r3, [r3, #5]
 8014388:	2b03      	cmp	r3, #3
 801438a:	d10d      	bne.n	80143a8 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 801438c:	68bb      	ldr	r3, [r7, #8]
 801438e:	799b      	ldrb	r3, [r3, #6]
 8014390:	2b00      	cmp	r3, #0
 8014392:	d105      	bne.n	80143a0 <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8014394:	f002 febc 	bl	8017110 <rand>
 8014398:	4603      	mov	r3, r0
 801439a:	461a      	mov	r2, r3
 801439c:	4b45      	ldr	r3, [pc, #276]	; (80144b4 <dhcp_create_msg+0x1a8>)
 801439e:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 80143a0:	4b44      	ldr	r3, [pc, #272]	; (80144b4 <dhcp_create_msg+0x1a8>)
 80143a2:	681a      	ldr	r2, [r3, #0]
 80143a4:	68bb      	ldr	r3, [r7, #8]
 80143a6:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 80143a8:	69bb      	ldr	r3, [r7, #24]
 80143aa:	685b      	ldr	r3, [r3, #4]
 80143ac:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 80143ae:	f44f 729a 	mov.w	r2, #308	; 0x134
 80143b2:	2100      	movs	r1, #0
 80143b4:	6978      	ldr	r0, [r7, #20]
 80143b6:	f002 fdf6 	bl	8016fa6 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 80143ba:	697b      	ldr	r3, [r7, #20]
 80143bc:	2201      	movs	r2, #1
 80143be:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 80143c0:	697b      	ldr	r3, [r7, #20]
 80143c2:	2201      	movs	r2, #1
 80143c4:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 80143c6:	68fb      	ldr	r3, [r7, #12]
 80143c8:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 80143cc:	697b      	ldr	r3, [r7, #20]
 80143ce:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	681b      	ldr	r3, [r3, #0]
 80143d4:	4618      	mov	r0, r3
 80143d6:	f7f6 f9e0 	bl	800a79a <lwip_htonl>
 80143da:	4602      	mov	r2, r0
 80143dc:	697b      	ldr	r3, [r7, #20]
 80143de:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 80143e0:	79fb      	ldrb	r3, [r7, #7]
 80143e2:	2b08      	cmp	r3, #8
 80143e4:	d010      	beq.n	8014408 <dhcp_create_msg+0xfc>
 80143e6:	79fb      	ldrb	r3, [r7, #7]
 80143e8:	2b04      	cmp	r3, #4
 80143ea:	d00d      	beq.n	8014408 <dhcp_create_msg+0xfc>
 80143ec:	79fb      	ldrb	r3, [r7, #7]
 80143ee:	2b07      	cmp	r3, #7
 80143f0:	d00a      	beq.n	8014408 <dhcp_create_msg+0xfc>
 80143f2:	79fb      	ldrb	r3, [r7, #7]
 80143f4:	2b03      	cmp	r3, #3
 80143f6:	d10c      	bne.n	8014412 <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 80143f8:	68bb      	ldr	r3, [r7, #8]
 80143fa:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 80143fc:	2b05      	cmp	r3, #5
 80143fe:	d003      	beq.n	8014408 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8014400:	68bb      	ldr	r3, [r7, #8]
 8014402:	795b      	ldrb	r3, [r3, #5]
 8014404:	2b04      	cmp	r3, #4
 8014406:	d104      	bne.n	8014412 <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8014408:	68fb      	ldr	r3, [r7, #12]
 801440a:	3304      	adds	r3, #4
 801440c:	681a      	ldr	r2, [r3, #0]
 801440e:	697b      	ldr	r3, [r7, #20]
 8014410:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8014412:	2300      	movs	r3, #0
 8014414:	83fb      	strh	r3, [r7, #30]
 8014416:	e00c      	b.n	8014432 <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8014418:	8bfa      	ldrh	r2, [r7, #30]
 801441a:	8bfb      	ldrh	r3, [r7, #30]
 801441c:	68f9      	ldr	r1, [r7, #12]
 801441e:	440a      	add	r2, r1
 8014420:	f892 102e 	ldrb.w	r1, [r2, #46]	; 0x2e
 8014424:	697a      	ldr	r2, [r7, #20]
 8014426:	4413      	add	r3, r2
 8014428:	460a      	mov	r2, r1
 801442a:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 801442c:	8bfb      	ldrh	r3, [r7, #30]
 801442e:	3301      	adds	r3, #1
 8014430:	83fb      	strh	r3, [r7, #30]
 8014432:	8bfb      	ldrh	r3, [r7, #30]
 8014434:	2b05      	cmp	r3, #5
 8014436:	d9ef      	bls.n	8014418 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8014438:	697b      	ldr	r3, [r7, #20]
 801443a:	2200      	movs	r2, #0
 801443c:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8014440:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8014444:	2200      	movs	r2, #0
 8014446:	f062 027d 	orn	r2, r2, #125	; 0x7d
 801444a:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 801444e:	2200      	movs	r2, #0
 8014450:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8014454:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8014458:	2200      	movs	r2, #0
 801445a:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 801445e:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8014462:	697b      	ldr	r3, [r7, #20]
 8014464:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8014468:	2301      	movs	r3, #1
 801446a:	2235      	movs	r2, #53	; 0x35
 801446c:	2000      	movs	r0, #0
 801446e:	f7ff fadb 	bl	8013a28 <dhcp_option>
 8014472:	4603      	mov	r3, r0
 8014474:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8014476:	697b      	ldr	r3, [r7, #20]
 8014478:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801447c:	79fa      	ldrb	r2, [r7, #7]
 801447e:	8a7b      	ldrh	r3, [r7, #18]
 8014480:	4618      	mov	r0, r3
 8014482:	f7ff fb05 	bl	8013a90 <dhcp_option_byte>
 8014486:	4603      	mov	r3, r0
 8014488:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 801448a:	683b      	ldr	r3, [r7, #0]
 801448c:	2b00      	cmp	r3, #0
 801448e:	d002      	beq.n	8014496 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8014490:	683b      	ldr	r3, [r7, #0]
 8014492:	8a7a      	ldrh	r2, [r7, #18]
 8014494:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8014496:	69bb      	ldr	r3, [r7, #24]
}
 8014498:	4618      	mov	r0, r3
 801449a:	3720      	adds	r7, #32
 801449c:	46bd      	mov	sp, r7
 801449e:	bd80      	pop	{r7, pc}
 80144a0:	0801a508 	.word	0x0801a508
 80144a4:	0801a828 	.word	0x0801a828
 80144a8:	0801a568 	.word	0x0801a568
 80144ac:	0801a848 	.word	0x0801a848
 80144b0:	0801a868 	.word	0x0801a868
 80144b4:	2000f2f0 	.word	0x2000f2f0

080144b8 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 80144b8:	b580      	push	{r7, lr}
 80144ba:	b084      	sub	sp, #16
 80144bc:	af00      	add	r7, sp, #0
 80144be:	4603      	mov	r3, r0
 80144c0:	60b9      	str	r1, [r7, #8]
 80144c2:	607a      	str	r2, [r7, #4]
 80144c4:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 80144c6:	89fb      	ldrh	r3, [r7, #14]
 80144c8:	1c5a      	adds	r2, r3, #1
 80144ca:	81fa      	strh	r2, [r7, #14]
 80144cc:	461a      	mov	r2, r3
 80144ce:	68bb      	ldr	r3, [r7, #8]
 80144d0:	4413      	add	r3, r2
 80144d2:	22ff      	movs	r2, #255	; 0xff
 80144d4:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80144d6:	e007      	b.n	80144e8 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 80144d8:	89fb      	ldrh	r3, [r7, #14]
 80144da:	1c5a      	adds	r2, r3, #1
 80144dc:	81fa      	strh	r2, [r7, #14]
 80144de:	461a      	mov	r2, r3
 80144e0:	68bb      	ldr	r3, [r7, #8]
 80144e2:	4413      	add	r3, r2
 80144e4:	2200      	movs	r2, #0
 80144e6:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 80144e8:	89fb      	ldrh	r3, [r7, #14]
 80144ea:	2b43      	cmp	r3, #67	; 0x43
 80144ec:	d904      	bls.n	80144f8 <dhcp_option_trailer+0x40>
 80144ee:	89fb      	ldrh	r3, [r7, #14]
 80144f0:	f003 0303 	and.w	r3, r3, #3
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d002      	beq.n	80144fe <dhcp_option_trailer+0x46>
 80144f8:	89fb      	ldrh	r3, [r7, #14]
 80144fa:	2b43      	cmp	r3, #67	; 0x43
 80144fc:	d9ec      	bls.n	80144d8 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 80144fe:	89fb      	ldrh	r3, [r7, #14]
 8014500:	33f0      	adds	r3, #240	; 0xf0
 8014502:	b29b      	uxth	r3, r3
 8014504:	4619      	mov	r1, r3
 8014506:	6878      	ldr	r0, [r7, #4]
 8014508:	f7f7 fdd4 	bl	800c0b4 <pbuf_realloc>
}
 801450c:	bf00      	nop
 801450e:	3710      	adds	r7, #16
 8014510:	46bd      	mov	sp, r7
 8014512:	bd80      	pop	{r7, pc}

08014514 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8014514:	b480      	push	{r7}
 8014516:	b085      	sub	sp, #20
 8014518:	af00      	add	r7, sp, #0
 801451a:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	2b00      	cmp	r3, #0
 8014520:	d017      	beq.n	8014552 <dhcp_supplied_address+0x3e>
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8014526:	2b00      	cmp	r3, #0
 8014528:	d013      	beq.n	8014552 <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801452a:	687b      	ldr	r3, [r7, #4]
 801452c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801452e:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	795b      	ldrb	r3, [r3, #5]
 8014534:	2b0a      	cmp	r3, #10
 8014536:	d007      	beq.n	8014548 <dhcp_supplied_address+0x34>
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	795b      	ldrb	r3, [r3, #5]
 801453c:	2b05      	cmp	r3, #5
 801453e:	d003      	beq.n	8014548 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8014540:	68fb      	ldr	r3, [r7, #12]
 8014542:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8014544:	2b04      	cmp	r3, #4
 8014546:	d101      	bne.n	801454c <dhcp_supplied_address+0x38>
 8014548:	2301      	movs	r3, #1
 801454a:	e000      	b.n	801454e <dhcp_supplied_address+0x3a>
 801454c:	2300      	movs	r3, #0
 801454e:	b2db      	uxtb	r3, r3
 8014550:	e000      	b.n	8014554 <dhcp_supplied_address+0x40>
  }
  return 0;
 8014552:	2300      	movs	r3, #0
}
 8014554:	4618      	mov	r0, r3
 8014556:	3714      	adds	r7, #20
 8014558:	46bd      	mov	sp, r7
 801455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455e:	4770      	bx	lr

08014560 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8014560:	b580      	push	{r7, lr}
 8014562:	b082      	sub	sp, #8
 8014564:	af00      	add	r7, sp, #0
 8014566:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014568:	4915      	ldr	r1, [pc, #84]	; (80145c0 <etharp_free_entry+0x60>)
 801456a:	687a      	ldr	r2, [r7, #4]
 801456c:	4613      	mov	r3, r2
 801456e:	005b      	lsls	r3, r3, #1
 8014570:	4413      	add	r3, r2
 8014572:	00db      	lsls	r3, r3, #3
 8014574:	440b      	add	r3, r1
 8014576:	681b      	ldr	r3, [r3, #0]
 8014578:	2b00      	cmp	r3, #0
 801457a:	d013      	beq.n	80145a4 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801457c:	4910      	ldr	r1, [pc, #64]	; (80145c0 <etharp_free_entry+0x60>)
 801457e:	687a      	ldr	r2, [r7, #4]
 8014580:	4613      	mov	r3, r2
 8014582:	005b      	lsls	r3, r3, #1
 8014584:	4413      	add	r3, r2
 8014586:	00db      	lsls	r3, r3, #3
 8014588:	440b      	add	r3, r1
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	4618      	mov	r0, r3
 801458e:	f7f7 ff17 	bl	800c3c0 <pbuf_free>
    arp_table[i].q = NULL;
 8014592:	490b      	ldr	r1, [pc, #44]	; (80145c0 <etharp_free_entry+0x60>)
 8014594:	687a      	ldr	r2, [r7, #4]
 8014596:	4613      	mov	r3, r2
 8014598:	005b      	lsls	r3, r3, #1
 801459a:	4413      	add	r3, r2
 801459c:	00db      	lsls	r3, r3, #3
 801459e:	440b      	add	r3, r1
 80145a0:	2200      	movs	r2, #0
 80145a2:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80145a4:	4906      	ldr	r1, [pc, #24]	; (80145c0 <etharp_free_entry+0x60>)
 80145a6:	687a      	ldr	r2, [r7, #4]
 80145a8:	4613      	mov	r3, r2
 80145aa:	005b      	lsls	r3, r3, #1
 80145ac:	4413      	add	r3, r2
 80145ae:	00db      	lsls	r3, r3, #3
 80145b0:	440b      	add	r3, r1
 80145b2:	3314      	adds	r3, #20
 80145b4:	2200      	movs	r2, #0
 80145b6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80145b8:	bf00      	nop
 80145ba:	3708      	adds	r7, #8
 80145bc:	46bd      	mov	sp, r7
 80145be:	bd80      	pop	{r7, pc}
 80145c0:	2000f2f4 	.word	0x2000f2f4

080145c4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b082      	sub	sp, #8
 80145c8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80145ca:	2300      	movs	r3, #0
 80145cc:	607b      	str	r3, [r7, #4]
 80145ce:	e096      	b.n	80146fe <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80145d0:	494f      	ldr	r1, [pc, #316]	; (8014710 <etharp_tmr+0x14c>)
 80145d2:	687a      	ldr	r2, [r7, #4]
 80145d4:	4613      	mov	r3, r2
 80145d6:	005b      	lsls	r3, r3, #1
 80145d8:	4413      	add	r3, r2
 80145da:	00db      	lsls	r3, r3, #3
 80145dc:	440b      	add	r3, r1
 80145de:	3314      	adds	r3, #20
 80145e0:	781b      	ldrb	r3, [r3, #0]
 80145e2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80145e4:	78fb      	ldrb	r3, [r7, #3]
 80145e6:	2b00      	cmp	r3, #0
 80145e8:	f000 8086 	beq.w	80146f8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80145ec:	4948      	ldr	r1, [pc, #288]	; (8014710 <etharp_tmr+0x14c>)
 80145ee:	687a      	ldr	r2, [r7, #4]
 80145f0:	4613      	mov	r3, r2
 80145f2:	005b      	lsls	r3, r3, #1
 80145f4:	4413      	add	r3, r2
 80145f6:	00db      	lsls	r3, r3, #3
 80145f8:	440b      	add	r3, r1
 80145fa:	3312      	adds	r3, #18
 80145fc:	881b      	ldrh	r3, [r3, #0]
 80145fe:	3301      	adds	r3, #1
 8014600:	b298      	uxth	r0, r3
 8014602:	4943      	ldr	r1, [pc, #268]	; (8014710 <etharp_tmr+0x14c>)
 8014604:	687a      	ldr	r2, [r7, #4]
 8014606:	4613      	mov	r3, r2
 8014608:	005b      	lsls	r3, r3, #1
 801460a:	4413      	add	r3, r2
 801460c:	00db      	lsls	r3, r3, #3
 801460e:	440b      	add	r3, r1
 8014610:	3312      	adds	r3, #18
 8014612:	4602      	mov	r2, r0
 8014614:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014616:	493e      	ldr	r1, [pc, #248]	; (8014710 <etharp_tmr+0x14c>)
 8014618:	687a      	ldr	r2, [r7, #4]
 801461a:	4613      	mov	r3, r2
 801461c:	005b      	lsls	r3, r3, #1
 801461e:	4413      	add	r3, r2
 8014620:	00db      	lsls	r3, r3, #3
 8014622:	440b      	add	r3, r1
 8014624:	3312      	adds	r3, #18
 8014626:	881b      	ldrh	r3, [r3, #0]
 8014628:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801462c:	d215      	bcs.n	801465a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801462e:	4938      	ldr	r1, [pc, #224]	; (8014710 <etharp_tmr+0x14c>)
 8014630:	687a      	ldr	r2, [r7, #4]
 8014632:	4613      	mov	r3, r2
 8014634:	005b      	lsls	r3, r3, #1
 8014636:	4413      	add	r3, r2
 8014638:	00db      	lsls	r3, r3, #3
 801463a:	440b      	add	r3, r1
 801463c:	3314      	adds	r3, #20
 801463e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8014640:	2b01      	cmp	r3, #1
 8014642:	d10e      	bne.n	8014662 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014644:	4932      	ldr	r1, [pc, #200]	; (8014710 <etharp_tmr+0x14c>)
 8014646:	687a      	ldr	r2, [r7, #4]
 8014648:	4613      	mov	r3, r2
 801464a:	005b      	lsls	r3, r3, #1
 801464c:	4413      	add	r3, r2
 801464e:	00db      	lsls	r3, r3, #3
 8014650:	440b      	add	r3, r1
 8014652:	3312      	adds	r3, #18
 8014654:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014656:	2b04      	cmp	r3, #4
 8014658:	d903      	bls.n	8014662 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801465a:	6878      	ldr	r0, [r7, #4]
 801465c:	f7ff ff80 	bl	8014560 <etharp_free_entry>
 8014660:	e04a      	b.n	80146f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8014662:	492b      	ldr	r1, [pc, #172]	; (8014710 <etharp_tmr+0x14c>)
 8014664:	687a      	ldr	r2, [r7, #4]
 8014666:	4613      	mov	r3, r2
 8014668:	005b      	lsls	r3, r3, #1
 801466a:	4413      	add	r3, r2
 801466c:	00db      	lsls	r3, r3, #3
 801466e:	440b      	add	r3, r1
 8014670:	3314      	adds	r3, #20
 8014672:	781b      	ldrb	r3, [r3, #0]
 8014674:	2b03      	cmp	r3, #3
 8014676:	d10a      	bne.n	801468e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014678:	4925      	ldr	r1, [pc, #148]	; (8014710 <etharp_tmr+0x14c>)
 801467a:	687a      	ldr	r2, [r7, #4]
 801467c:	4613      	mov	r3, r2
 801467e:	005b      	lsls	r3, r3, #1
 8014680:	4413      	add	r3, r2
 8014682:	00db      	lsls	r3, r3, #3
 8014684:	440b      	add	r3, r1
 8014686:	3314      	adds	r3, #20
 8014688:	2204      	movs	r2, #4
 801468a:	701a      	strb	r2, [r3, #0]
 801468c:	e034      	b.n	80146f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801468e:	4920      	ldr	r1, [pc, #128]	; (8014710 <etharp_tmr+0x14c>)
 8014690:	687a      	ldr	r2, [r7, #4]
 8014692:	4613      	mov	r3, r2
 8014694:	005b      	lsls	r3, r3, #1
 8014696:	4413      	add	r3, r2
 8014698:	00db      	lsls	r3, r3, #3
 801469a:	440b      	add	r3, r1
 801469c:	3314      	adds	r3, #20
 801469e:	781b      	ldrb	r3, [r3, #0]
 80146a0:	2b04      	cmp	r3, #4
 80146a2:	d10a      	bne.n	80146ba <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80146a4:	491a      	ldr	r1, [pc, #104]	; (8014710 <etharp_tmr+0x14c>)
 80146a6:	687a      	ldr	r2, [r7, #4]
 80146a8:	4613      	mov	r3, r2
 80146aa:	005b      	lsls	r3, r3, #1
 80146ac:	4413      	add	r3, r2
 80146ae:	00db      	lsls	r3, r3, #3
 80146b0:	440b      	add	r3, r1
 80146b2:	3314      	adds	r3, #20
 80146b4:	2202      	movs	r2, #2
 80146b6:	701a      	strb	r2, [r3, #0]
 80146b8:	e01e      	b.n	80146f8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80146ba:	4915      	ldr	r1, [pc, #84]	; (8014710 <etharp_tmr+0x14c>)
 80146bc:	687a      	ldr	r2, [r7, #4]
 80146be:	4613      	mov	r3, r2
 80146c0:	005b      	lsls	r3, r3, #1
 80146c2:	4413      	add	r3, r2
 80146c4:	00db      	lsls	r3, r3, #3
 80146c6:	440b      	add	r3, r1
 80146c8:	3314      	adds	r3, #20
 80146ca:	781b      	ldrb	r3, [r3, #0]
 80146cc:	2b01      	cmp	r3, #1
 80146ce:	d113      	bne.n	80146f8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80146d0:	490f      	ldr	r1, [pc, #60]	; (8014710 <etharp_tmr+0x14c>)
 80146d2:	687a      	ldr	r2, [r7, #4]
 80146d4:	4613      	mov	r3, r2
 80146d6:	005b      	lsls	r3, r3, #1
 80146d8:	4413      	add	r3, r2
 80146da:	00db      	lsls	r3, r3, #3
 80146dc:	440b      	add	r3, r1
 80146de:	3308      	adds	r3, #8
 80146e0:	6818      	ldr	r0, [r3, #0]
 80146e2:	687a      	ldr	r2, [r7, #4]
 80146e4:	4613      	mov	r3, r2
 80146e6:	005b      	lsls	r3, r3, #1
 80146e8:	4413      	add	r3, r2
 80146ea:	00db      	lsls	r3, r3, #3
 80146ec:	4a08      	ldr	r2, [pc, #32]	; (8014710 <etharp_tmr+0x14c>)
 80146ee:	4413      	add	r3, r2
 80146f0:	3304      	adds	r3, #4
 80146f2:	4619      	mov	r1, r3
 80146f4:	f000 fe72 	bl	80153dc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80146f8:	687b      	ldr	r3, [r7, #4]
 80146fa:	3301      	adds	r3, #1
 80146fc:	607b      	str	r3, [r7, #4]
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	2b09      	cmp	r3, #9
 8014702:	f77f af65 	ble.w	80145d0 <etharp_tmr+0xc>
      }
    }
  }
}
 8014706:	bf00      	nop
 8014708:	bf00      	nop
 801470a:	3708      	adds	r7, #8
 801470c:	46bd      	mov	sp, r7
 801470e:	bd80      	pop	{r7, pc}
 8014710:	2000f2f4 	.word	0x2000f2f4

08014714 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8014714:	b580      	push	{r7, lr}
 8014716:	b08a      	sub	sp, #40	; 0x28
 8014718:	af00      	add	r7, sp, #0
 801471a:	60f8      	str	r0, [r7, #12]
 801471c:	460b      	mov	r3, r1
 801471e:	607a      	str	r2, [r7, #4]
 8014720:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8014722:	230a      	movs	r3, #10
 8014724:	84fb      	strh	r3, [r7, #38]	; 0x26
 8014726:	230a      	movs	r3, #10
 8014728:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801472a:	230a      	movs	r3, #10
 801472c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801472e:	2300      	movs	r3, #0
 8014730:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8014732:	230a      	movs	r3, #10
 8014734:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8014736:	2300      	movs	r3, #0
 8014738:	83bb      	strh	r3, [r7, #28]
 801473a:	2300      	movs	r3, #0
 801473c:	837b      	strh	r3, [r7, #26]
 801473e:	2300      	movs	r3, #0
 8014740:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014742:	2300      	movs	r3, #0
 8014744:	843b      	strh	r3, [r7, #32]
 8014746:	e0ae      	b.n	80148a6 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014748:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801474c:	49a6      	ldr	r1, [pc, #664]	; (80149e8 <etharp_find_entry+0x2d4>)
 801474e:	4613      	mov	r3, r2
 8014750:	005b      	lsls	r3, r3, #1
 8014752:	4413      	add	r3, r2
 8014754:	00db      	lsls	r3, r3, #3
 8014756:	440b      	add	r3, r1
 8014758:	3314      	adds	r3, #20
 801475a:	781b      	ldrb	r3, [r3, #0]
 801475c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801475e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014762:	2b0a      	cmp	r3, #10
 8014764:	d105      	bne.n	8014772 <etharp_find_entry+0x5e>
 8014766:	7dfb      	ldrb	r3, [r7, #23]
 8014768:	2b00      	cmp	r3, #0
 801476a:	d102      	bne.n	8014772 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801476c:	8c3b      	ldrh	r3, [r7, #32]
 801476e:	847b      	strh	r3, [r7, #34]	; 0x22
 8014770:	e095      	b.n	801489e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8014772:	7dfb      	ldrb	r3, [r7, #23]
 8014774:	2b00      	cmp	r3, #0
 8014776:	f000 8092 	beq.w	801489e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801477a:	7dfb      	ldrb	r3, [r7, #23]
 801477c:	2b01      	cmp	r3, #1
 801477e:	d009      	beq.n	8014794 <etharp_find_entry+0x80>
 8014780:	7dfb      	ldrb	r3, [r7, #23]
 8014782:	2b01      	cmp	r3, #1
 8014784:	d806      	bhi.n	8014794 <etharp_find_entry+0x80>
 8014786:	4b99      	ldr	r3, [pc, #612]	; (80149ec <etharp_find_entry+0x2d8>)
 8014788:	f240 1223 	movw	r2, #291	; 0x123
 801478c:	4998      	ldr	r1, [pc, #608]	; (80149f0 <etharp_find_entry+0x2dc>)
 801478e:	4899      	ldr	r0, [pc, #612]	; (80149f4 <etharp_find_entry+0x2e0>)
 8014790:	f002 fca6 	bl	80170e0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	2b00      	cmp	r3, #0
 8014798:	d020      	beq.n	80147dc <etharp_find_entry+0xc8>
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	6819      	ldr	r1, [r3, #0]
 801479e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147a2:	4891      	ldr	r0, [pc, #580]	; (80149e8 <etharp_find_entry+0x2d4>)
 80147a4:	4613      	mov	r3, r2
 80147a6:	005b      	lsls	r3, r3, #1
 80147a8:	4413      	add	r3, r2
 80147aa:	00db      	lsls	r3, r3, #3
 80147ac:	4403      	add	r3, r0
 80147ae:	3304      	adds	r3, #4
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	4299      	cmp	r1, r3
 80147b4:	d112      	bne.n	80147dc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	2b00      	cmp	r3, #0
 80147ba:	d00c      	beq.n	80147d6 <etharp_find_entry+0xc2>
 80147bc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147c0:	4989      	ldr	r1, [pc, #548]	; (80149e8 <etharp_find_entry+0x2d4>)
 80147c2:	4613      	mov	r3, r2
 80147c4:	005b      	lsls	r3, r3, #1
 80147c6:	4413      	add	r3, r2
 80147c8:	00db      	lsls	r3, r3, #3
 80147ca:	440b      	add	r3, r1
 80147cc:	3308      	adds	r3, #8
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	687a      	ldr	r2, [r7, #4]
 80147d2:	429a      	cmp	r2, r3
 80147d4:	d102      	bne.n	80147dc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80147d6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80147da:	e100      	b.n	80149de <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80147dc:	7dfb      	ldrb	r3, [r7, #23]
 80147de:	2b01      	cmp	r3, #1
 80147e0:	d140      	bne.n	8014864 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80147e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147e6:	4980      	ldr	r1, [pc, #512]	; (80149e8 <etharp_find_entry+0x2d4>)
 80147e8:	4613      	mov	r3, r2
 80147ea:	005b      	lsls	r3, r3, #1
 80147ec:	4413      	add	r3, r2
 80147ee:	00db      	lsls	r3, r3, #3
 80147f0:	440b      	add	r3, r1
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	2b00      	cmp	r3, #0
 80147f6:	d01a      	beq.n	801482e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80147f8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80147fc:	497a      	ldr	r1, [pc, #488]	; (80149e8 <etharp_find_entry+0x2d4>)
 80147fe:	4613      	mov	r3, r2
 8014800:	005b      	lsls	r3, r3, #1
 8014802:	4413      	add	r3, r2
 8014804:	00db      	lsls	r3, r3, #3
 8014806:	440b      	add	r3, r1
 8014808:	3312      	adds	r3, #18
 801480a:	881b      	ldrh	r3, [r3, #0]
 801480c:	8bba      	ldrh	r2, [r7, #28]
 801480e:	429a      	cmp	r2, r3
 8014810:	d845      	bhi.n	801489e <etharp_find_entry+0x18a>
            old_queue = i;
 8014812:	8c3b      	ldrh	r3, [r7, #32]
 8014814:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8014816:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801481a:	4973      	ldr	r1, [pc, #460]	; (80149e8 <etharp_find_entry+0x2d4>)
 801481c:	4613      	mov	r3, r2
 801481e:	005b      	lsls	r3, r3, #1
 8014820:	4413      	add	r3, r2
 8014822:	00db      	lsls	r3, r3, #3
 8014824:	440b      	add	r3, r1
 8014826:	3312      	adds	r3, #18
 8014828:	881b      	ldrh	r3, [r3, #0]
 801482a:	83bb      	strh	r3, [r7, #28]
 801482c:	e037      	b.n	801489e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801482e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014832:	496d      	ldr	r1, [pc, #436]	; (80149e8 <etharp_find_entry+0x2d4>)
 8014834:	4613      	mov	r3, r2
 8014836:	005b      	lsls	r3, r3, #1
 8014838:	4413      	add	r3, r2
 801483a:	00db      	lsls	r3, r3, #3
 801483c:	440b      	add	r3, r1
 801483e:	3312      	adds	r3, #18
 8014840:	881b      	ldrh	r3, [r3, #0]
 8014842:	8b7a      	ldrh	r2, [r7, #26]
 8014844:	429a      	cmp	r2, r3
 8014846:	d82a      	bhi.n	801489e <etharp_find_entry+0x18a>
            old_pending = i;
 8014848:	8c3b      	ldrh	r3, [r7, #32]
 801484a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801484c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014850:	4965      	ldr	r1, [pc, #404]	; (80149e8 <etharp_find_entry+0x2d4>)
 8014852:	4613      	mov	r3, r2
 8014854:	005b      	lsls	r3, r3, #1
 8014856:	4413      	add	r3, r2
 8014858:	00db      	lsls	r3, r3, #3
 801485a:	440b      	add	r3, r1
 801485c:	3312      	adds	r3, #18
 801485e:	881b      	ldrh	r3, [r3, #0]
 8014860:	837b      	strh	r3, [r7, #26]
 8014862:	e01c      	b.n	801489e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014864:	7dfb      	ldrb	r3, [r7, #23]
 8014866:	2b01      	cmp	r3, #1
 8014868:	d919      	bls.n	801489e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801486a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801486e:	495e      	ldr	r1, [pc, #376]	; (80149e8 <etharp_find_entry+0x2d4>)
 8014870:	4613      	mov	r3, r2
 8014872:	005b      	lsls	r3, r3, #1
 8014874:	4413      	add	r3, r2
 8014876:	00db      	lsls	r3, r3, #3
 8014878:	440b      	add	r3, r1
 801487a:	3312      	adds	r3, #18
 801487c:	881b      	ldrh	r3, [r3, #0]
 801487e:	8b3a      	ldrh	r2, [r7, #24]
 8014880:	429a      	cmp	r2, r3
 8014882:	d80c      	bhi.n	801489e <etharp_find_entry+0x18a>
            old_stable = i;
 8014884:	8c3b      	ldrh	r3, [r7, #32]
 8014886:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014888:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801488c:	4956      	ldr	r1, [pc, #344]	; (80149e8 <etharp_find_entry+0x2d4>)
 801488e:	4613      	mov	r3, r2
 8014890:	005b      	lsls	r3, r3, #1
 8014892:	4413      	add	r3, r2
 8014894:	00db      	lsls	r3, r3, #3
 8014896:	440b      	add	r3, r1
 8014898:	3312      	adds	r3, #18
 801489a:	881b      	ldrh	r3, [r3, #0]
 801489c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801489e:	8c3b      	ldrh	r3, [r7, #32]
 80148a0:	3301      	adds	r3, #1
 80148a2:	b29b      	uxth	r3, r3
 80148a4:	843b      	strh	r3, [r7, #32]
 80148a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80148aa:	2b09      	cmp	r3, #9
 80148ac:	f77f af4c 	ble.w	8014748 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80148b0:	7afb      	ldrb	r3, [r7, #11]
 80148b2:	f003 0302 	and.w	r3, r3, #2
 80148b6:	2b00      	cmp	r3, #0
 80148b8:	d108      	bne.n	80148cc <etharp_find_entry+0x1b8>
 80148ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80148be:	2b0a      	cmp	r3, #10
 80148c0:	d107      	bne.n	80148d2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80148c2:	7afb      	ldrb	r3, [r7, #11]
 80148c4:	f003 0301 	and.w	r3, r3, #1
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d102      	bne.n	80148d2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80148cc:	f04f 33ff 	mov.w	r3, #4294967295
 80148d0:	e085      	b.n	80149de <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80148d2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80148d6:	2b09      	cmp	r3, #9
 80148d8:	dc02      	bgt.n	80148e0 <etharp_find_entry+0x1cc>
    i = empty;
 80148da:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80148dc:	843b      	strh	r3, [r7, #32]
 80148de:	e039      	b.n	8014954 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80148e0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80148e4:	2b09      	cmp	r3, #9
 80148e6:	dc14      	bgt.n	8014912 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80148e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80148ea:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80148ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80148f0:	493d      	ldr	r1, [pc, #244]	; (80149e8 <etharp_find_entry+0x2d4>)
 80148f2:	4613      	mov	r3, r2
 80148f4:	005b      	lsls	r3, r3, #1
 80148f6:	4413      	add	r3, r2
 80148f8:	00db      	lsls	r3, r3, #3
 80148fa:	440b      	add	r3, r1
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d018      	beq.n	8014934 <etharp_find_entry+0x220>
 8014902:	4b3a      	ldr	r3, [pc, #232]	; (80149ec <etharp_find_entry+0x2d8>)
 8014904:	f240 126d 	movw	r2, #365	; 0x16d
 8014908:	493b      	ldr	r1, [pc, #236]	; (80149f8 <etharp_find_entry+0x2e4>)
 801490a:	483a      	ldr	r0, [pc, #232]	; (80149f4 <etharp_find_entry+0x2e0>)
 801490c:	f002 fbe8 	bl	80170e0 <iprintf>
 8014910:	e010      	b.n	8014934 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8014912:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014916:	2b09      	cmp	r3, #9
 8014918:	dc02      	bgt.n	8014920 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801491a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801491c:	843b      	strh	r3, [r7, #32]
 801491e:	e009      	b.n	8014934 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8014920:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8014924:	2b09      	cmp	r3, #9
 8014926:	dc02      	bgt.n	801492e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8014928:	8bfb      	ldrh	r3, [r7, #30]
 801492a:	843b      	strh	r3, [r7, #32]
 801492c:	e002      	b.n	8014934 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801492e:	f04f 33ff 	mov.w	r3, #4294967295
 8014932:	e054      	b.n	80149de <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014934:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014938:	2b09      	cmp	r3, #9
 801493a:	dd06      	ble.n	801494a <etharp_find_entry+0x236>
 801493c:	4b2b      	ldr	r3, [pc, #172]	; (80149ec <etharp_find_entry+0x2d8>)
 801493e:	f240 127f 	movw	r2, #383	; 0x17f
 8014942:	492e      	ldr	r1, [pc, #184]	; (80149fc <etharp_find_entry+0x2e8>)
 8014944:	482b      	ldr	r0, [pc, #172]	; (80149f4 <etharp_find_entry+0x2e0>)
 8014946:	f002 fbcb 	bl	80170e0 <iprintf>
    etharp_free_entry(i);
 801494a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801494e:	4618      	mov	r0, r3
 8014950:	f7ff fe06 	bl	8014560 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014954:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014958:	2b09      	cmp	r3, #9
 801495a:	dd06      	ble.n	801496a <etharp_find_entry+0x256>
 801495c:	4b23      	ldr	r3, [pc, #140]	; (80149ec <etharp_find_entry+0x2d8>)
 801495e:	f240 1283 	movw	r2, #387	; 0x183
 8014962:	4926      	ldr	r1, [pc, #152]	; (80149fc <etharp_find_entry+0x2e8>)
 8014964:	4823      	ldr	r0, [pc, #140]	; (80149f4 <etharp_find_entry+0x2e0>)
 8014966:	f002 fbbb 	bl	80170e0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801496a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801496e:	491e      	ldr	r1, [pc, #120]	; (80149e8 <etharp_find_entry+0x2d4>)
 8014970:	4613      	mov	r3, r2
 8014972:	005b      	lsls	r3, r3, #1
 8014974:	4413      	add	r3, r2
 8014976:	00db      	lsls	r3, r3, #3
 8014978:	440b      	add	r3, r1
 801497a:	3314      	adds	r3, #20
 801497c:	781b      	ldrb	r3, [r3, #0]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d006      	beq.n	8014990 <etharp_find_entry+0x27c>
 8014982:	4b1a      	ldr	r3, [pc, #104]	; (80149ec <etharp_find_entry+0x2d8>)
 8014984:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014988:	491d      	ldr	r1, [pc, #116]	; (8014a00 <etharp_find_entry+0x2ec>)
 801498a:	481a      	ldr	r0, [pc, #104]	; (80149f4 <etharp_find_entry+0x2e0>)
 801498c:	f002 fba8 	bl	80170e0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	2b00      	cmp	r3, #0
 8014994:	d00b      	beq.n	80149ae <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014996:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	6819      	ldr	r1, [r3, #0]
 801499e:	4812      	ldr	r0, [pc, #72]	; (80149e8 <etharp_find_entry+0x2d4>)
 80149a0:	4613      	mov	r3, r2
 80149a2:	005b      	lsls	r3, r3, #1
 80149a4:	4413      	add	r3, r2
 80149a6:	00db      	lsls	r3, r3, #3
 80149a8:	4403      	add	r3, r0
 80149aa:	3304      	adds	r3, #4
 80149ac:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80149ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149b2:	490d      	ldr	r1, [pc, #52]	; (80149e8 <etharp_find_entry+0x2d4>)
 80149b4:	4613      	mov	r3, r2
 80149b6:	005b      	lsls	r3, r3, #1
 80149b8:	4413      	add	r3, r2
 80149ba:	00db      	lsls	r3, r3, #3
 80149bc:	440b      	add	r3, r1
 80149be:	3312      	adds	r3, #18
 80149c0:	2200      	movs	r2, #0
 80149c2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80149c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80149c8:	4907      	ldr	r1, [pc, #28]	; (80149e8 <etharp_find_entry+0x2d4>)
 80149ca:	4613      	mov	r3, r2
 80149cc:	005b      	lsls	r3, r3, #1
 80149ce:	4413      	add	r3, r2
 80149d0:	00db      	lsls	r3, r3, #3
 80149d2:	440b      	add	r3, r1
 80149d4:	3308      	adds	r3, #8
 80149d6:	687a      	ldr	r2, [r7, #4]
 80149d8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80149da:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80149de:	4618      	mov	r0, r3
 80149e0:	3728      	adds	r7, #40	; 0x28
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd80      	pop	{r7, pc}
 80149e6:	bf00      	nop
 80149e8:	2000f2f4 	.word	0x2000f2f4
 80149ec:	0801a8a8 	.word	0x0801a8a8
 80149f0:	0801a8e0 	.word	0x0801a8e0
 80149f4:	0801a920 	.word	0x0801a920
 80149f8:	0801a948 	.word	0x0801a948
 80149fc:	0801a960 	.word	0x0801a960
 8014a00:	0801a974 	.word	0x0801a974

08014a04 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014a04:	b580      	push	{r7, lr}
 8014a06:	b088      	sub	sp, #32
 8014a08:	af02      	add	r7, sp, #8
 8014a0a:	60f8      	str	r0, [r7, #12]
 8014a0c:	60b9      	str	r1, [r7, #8]
 8014a0e:	607a      	str	r2, [r7, #4]
 8014a10:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8014a18:	2b06      	cmp	r3, #6
 8014a1a:	d006      	beq.n	8014a2a <etharp_update_arp_entry+0x26>
 8014a1c:	4b48      	ldr	r3, [pc, #288]	; (8014b40 <etharp_update_arp_entry+0x13c>)
 8014a1e:	f240 12a9 	movw	r2, #425	; 0x1a9
 8014a22:	4948      	ldr	r1, [pc, #288]	; (8014b44 <etharp_update_arp_entry+0x140>)
 8014a24:	4848      	ldr	r0, [pc, #288]	; (8014b48 <etharp_update_arp_entry+0x144>)
 8014a26:	f002 fb5b 	bl	80170e0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8014a2a:	68bb      	ldr	r3, [r7, #8]
 8014a2c:	2b00      	cmp	r3, #0
 8014a2e:	d012      	beq.n	8014a56 <etharp_update_arp_entry+0x52>
 8014a30:	68bb      	ldr	r3, [r7, #8]
 8014a32:	681b      	ldr	r3, [r3, #0]
 8014a34:	2b00      	cmp	r3, #0
 8014a36:	d00e      	beq.n	8014a56 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014a38:	68bb      	ldr	r3, [r7, #8]
 8014a3a:	681b      	ldr	r3, [r3, #0]
 8014a3c:	68f9      	ldr	r1, [r7, #12]
 8014a3e:	4618      	mov	r0, r3
 8014a40:	f001 f92e 	bl	8015ca0 <ip4_addr_isbroadcast_u32>
 8014a44:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d105      	bne.n	8014a56 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014a4a:	68bb      	ldr	r3, [r7, #8]
 8014a4c:	681b      	ldr	r3, [r3, #0]
 8014a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8014a52:	2be0      	cmp	r3, #224	; 0xe0
 8014a54:	d102      	bne.n	8014a5c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014a56:	f06f 030f 	mvn.w	r3, #15
 8014a5a:	e06c      	b.n	8014b36 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014a5c:	78fb      	ldrb	r3, [r7, #3]
 8014a5e:	68fa      	ldr	r2, [r7, #12]
 8014a60:	4619      	mov	r1, r3
 8014a62:	68b8      	ldr	r0, [r7, #8]
 8014a64:	f7ff fe56 	bl	8014714 <etharp_find_entry>
 8014a68:	4603      	mov	r3, r0
 8014a6a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014a6c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	da02      	bge.n	8014a7a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014a74:	8afb      	ldrh	r3, [r7, #22]
 8014a76:	b25b      	sxtb	r3, r3
 8014a78:	e05d      	b.n	8014b36 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014a7a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a7e:	4933      	ldr	r1, [pc, #204]	; (8014b4c <etharp_update_arp_entry+0x148>)
 8014a80:	4613      	mov	r3, r2
 8014a82:	005b      	lsls	r3, r3, #1
 8014a84:	4413      	add	r3, r2
 8014a86:	00db      	lsls	r3, r3, #3
 8014a88:	440b      	add	r3, r1
 8014a8a:	3314      	adds	r3, #20
 8014a8c:	2202      	movs	r2, #2
 8014a8e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8014a90:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014a94:	492d      	ldr	r1, [pc, #180]	; (8014b4c <etharp_update_arp_entry+0x148>)
 8014a96:	4613      	mov	r3, r2
 8014a98:	005b      	lsls	r3, r3, #1
 8014a9a:	4413      	add	r3, r2
 8014a9c:	00db      	lsls	r3, r3, #3
 8014a9e:	440b      	add	r3, r1
 8014aa0:	3308      	adds	r3, #8
 8014aa2:	68fa      	ldr	r2, [r7, #12]
 8014aa4:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014aa6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014aaa:	4613      	mov	r3, r2
 8014aac:	005b      	lsls	r3, r3, #1
 8014aae:	4413      	add	r3, r2
 8014ab0:	00db      	lsls	r3, r3, #3
 8014ab2:	3308      	adds	r3, #8
 8014ab4:	4a25      	ldr	r2, [pc, #148]	; (8014b4c <etharp_update_arp_entry+0x148>)
 8014ab6:	4413      	add	r3, r2
 8014ab8:	3304      	adds	r3, #4
 8014aba:	2206      	movs	r2, #6
 8014abc:	6879      	ldr	r1, [r7, #4]
 8014abe:	4618      	mov	r0, r3
 8014ac0:	f002 fa63 	bl	8016f8a <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014ac4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ac8:	4920      	ldr	r1, [pc, #128]	; (8014b4c <etharp_update_arp_entry+0x148>)
 8014aca:	4613      	mov	r3, r2
 8014acc:	005b      	lsls	r3, r3, #1
 8014ace:	4413      	add	r3, r2
 8014ad0:	00db      	lsls	r3, r3, #3
 8014ad2:	440b      	add	r3, r1
 8014ad4:	3312      	adds	r3, #18
 8014ad6:	2200      	movs	r2, #0
 8014ad8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014ada:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014ade:	491b      	ldr	r1, [pc, #108]	; (8014b4c <etharp_update_arp_entry+0x148>)
 8014ae0:	4613      	mov	r3, r2
 8014ae2:	005b      	lsls	r3, r3, #1
 8014ae4:	4413      	add	r3, r2
 8014ae6:	00db      	lsls	r3, r3, #3
 8014ae8:	440b      	add	r3, r1
 8014aea:	681b      	ldr	r3, [r3, #0]
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d021      	beq.n	8014b34 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8014af0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014af4:	4915      	ldr	r1, [pc, #84]	; (8014b4c <etharp_update_arp_entry+0x148>)
 8014af6:	4613      	mov	r3, r2
 8014af8:	005b      	lsls	r3, r3, #1
 8014afa:	4413      	add	r3, r2
 8014afc:	00db      	lsls	r3, r3, #3
 8014afe:	440b      	add	r3, r1
 8014b00:	681b      	ldr	r3, [r3, #0]
 8014b02:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014b04:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014b08:	4910      	ldr	r1, [pc, #64]	; (8014b4c <etharp_update_arp_entry+0x148>)
 8014b0a:	4613      	mov	r3, r2
 8014b0c:	005b      	lsls	r3, r3, #1
 8014b0e:	4413      	add	r3, r2
 8014b10:	00db      	lsls	r3, r3, #3
 8014b12:	440b      	add	r3, r1
 8014b14:	2200      	movs	r2, #0
 8014b16:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014b18:	68fb      	ldr	r3, [r7, #12]
 8014b1a:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 8014b1e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014b22:	9300      	str	r3, [sp, #0]
 8014b24:	687b      	ldr	r3, [r7, #4]
 8014b26:	6939      	ldr	r1, [r7, #16]
 8014b28:	68f8      	ldr	r0, [r7, #12]
 8014b2a:	f001 ffc7 	bl	8016abc <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8014b2e:	6938      	ldr	r0, [r7, #16]
 8014b30:	f7f7 fc46 	bl	800c3c0 <pbuf_free>
  }
  return ERR_OK;
 8014b34:	2300      	movs	r3, #0
}
 8014b36:	4618      	mov	r0, r3
 8014b38:	3718      	adds	r7, #24
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	bd80      	pop	{r7, pc}
 8014b3e:	bf00      	nop
 8014b40:	0801a8a8 	.word	0x0801a8a8
 8014b44:	0801a9a0 	.word	0x0801a9a0
 8014b48:	0801a920 	.word	0x0801a920
 8014b4c:	2000f2f4 	.word	0x2000f2f4

08014b50 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8014b50:	b580      	push	{r7, lr}
 8014b52:	b084      	sub	sp, #16
 8014b54:	af00      	add	r7, sp, #0
 8014b56:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014b58:	2300      	movs	r3, #0
 8014b5a:	60fb      	str	r3, [r7, #12]
 8014b5c:	e01e      	b.n	8014b9c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8014b5e:	4913      	ldr	r1, [pc, #76]	; (8014bac <etharp_cleanup_netif+0x5c>)
 8014b60:	68fa      	ldr	r2, [r7, #12]
 8014b62:	4613      	mov	r3, r2
 8014b64:	005b      	lsls	r3, r3, #1
 8014b66:	4413      	add	r3, r2
 8014b68:	00db      	lsls	r3, r3, #3
 8014b6a:	440b      	add	r3, r1
 8014b6c:	3314      	adds	r3, #20
 8014b6e:	781b      	ldrb	r3, [r3, #0]
 8014b70:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8014b72:	7afb      	ldrb	r3, [r7, #11]
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d00e      	beq.n	8014b96 <etharp_cleanup_netif+0x46>
 8014b78:	490c      	ldr	r1, [pc, #48]	; (8014bac <etharp_cleanup_netif+0x5c>)
 8014b7a:	68fa      	ldr	r2, [r7, #12]
 8014b7c:	4613      	mov	r3, r2
 8014b7e:	005b      	lsls	r3, r3, #1
 8014b80:	4413      	add	r3, r2
 8014b82:	00db      	lsls	r3, r3, #3
 8014b84:	440b      	add	r3, r1
 8014b86:	3308      	adds	r3, #8
 8014b88:	681b      	ldr	r3, [r3, #0]
 8014b8a:	687a      	ldr	r2, [r7, #4]
 8014b8c:	429a      	cmp	r2, r3
 8014b8e:	d102      	bne.n	8014b96 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8014b90:	68f8      	ldr	r0, [r7, #12]
 8014b92:	f7ff fce5 	bl	8014560 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014b96:	68fb      	ldr	r3, [r7, #12]
 8014b98:	3301      	adds	r3, #1
 8014b9a:	60fb      	str	r3, [r7, #12]
 8014b9c:	68fb      	ldr	r3, [r7, #12]
 8014b9e:	2b09      	cmp	r3, #9
 8014ba0:	dddd      	ble.n	8014b5e <etharp_cleanup_netif+0xe>
    }
  }
}
 8014ba2:	bf00      	nop
 8014ba4:	bf00      	nop
 8014ba6:	3710      	adds	r7, #16
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	bd80      	pop	{r7, pc}
 8014bac:	2000f2f4 	.word	0x2000f2f4

08014bb0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8014bb0:	b5b0      	push	{r4, r5, r7, lr}
 8014bb2:	b08a      	sub	sp, #40	; 0x28
 8014bb4:	af04      	add	r7, sp, #16
 8014bb6:	6078      	str	r0, [r7, #4]
 8014bb8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014bba:	683b      	ldr	r3, [r7, #0]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d107      	bne.n	8014bd0 <etharp_input+0x20>
 8014bc0:	4b3f      	ldr	r3, [pc, #252]	; (8014cc0 <etharp_input+0x110>)
 8014bc2:	f240 228a 	movw	r2, #650	; 0x28a
 8014bc6:	493f      	ldr	r1, [pc, #252]	; (8014cc4 <etharp_input+0x114>)
 8014bc8:	483f      	ldr	r0, [pc, #252]	; (8014cc8 <etharp_input+0x118>)
 8014bca:	f002 fa89 	bl	80170e0 <iprintf>
 8014bce:	e074      	b.n	8014cba <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 8014bd0:	687b      	ldr	r3, [r7, #4]
 8014bd2:	685b      	ldr	r3, [r3, #4]
 8014bd4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014bd6:	693b      	ldr	r3, [r7, #16]
 8014bd8:	881b      	ldrh	r3, [r3, #0]
 8014bda:	b29b      	uxth	r3, r3
 8014bdc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014be0:	d10c      	bne.n	8014bfc <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014be2:	693b      	ldr	r3, [r7, #16]
 8014be4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014be6:	2b06      	cmp	r3, #6
 8014be8:	d108      	bne.n	8014bfc <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014bea:	693b      	ldr	r3, [r7, #16]
 8014bec:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8014bee:	2b04      	cmp	r3, #4
 8014bf0:	d104      	bne.n	8014bfc <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8014bf2:	693b      	ldr	r3, [r7, #16]
 8014bf4:	885b      	ldrh	r3, [r3, #2]
 8014bf6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014bf8:	2b08      	cmp	r3, #8
 8014bfa:	d003      	beq.n	8014c04 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014bfc:	6878      	ldr	r0, [r7, #4]
 8014bfe:	f7f7 fbdf 	bl	800c3c0 <pbuf_free>
    return;
 8014c02:	e05a      	b.n	8014cba <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014c04:	693b      	ldr	r3, [r7, #16]
 8014c06:	330e      	adds	r3, #14
 8014c08:	681b      	ldr	r3, [r3, #0]
 8014c0a:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014c0c:	693b      	ldr	r3, [r7, #16]
 8014c0e:	3318      	adds	r3, #24
 8014c10:	681b      	ldr	r3, [r3, #0]
 8014c12:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014c14:	683b      	ldr	r3, [r7, #0]
 8014c16:	3304      	adds	r3, #4
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	2b00      	cmp	r3, #0
 8014c1c:	d102      	bne.n	8014c24 <etharp_input+0x74>
    for_us = 0;
 8014c1e:	2300      	movs	r3, #0
 8014c20:	75fb      	strb	r3, [r7, #23]
 8014c22:	e009      	b.n	8014c38 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8014c24:	68ba      	ldr	r2, [r7, #8]
 8014c26:	683b      	ldr	r3, [r7, #0]
 8014c28:	3304      	adds	r3, #4
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	429a      	cmp	r2, r3
 8014c2e:	bf0c      	ite	eq
 8014c30:	2301      	moveq	r3, #1
 8014c32:	2300      	movne	r3, #0
 8014c34:	b2db      	uxtb	r3, r3
 8014c36:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8014c38:	693b      	ldr	r3, [r7, #16]
 8014c3a:	f103 0208 	add.w	r2, r3, #8
 8014c3e:	7dfb      	ldrb	r3, [r7, #23]
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d001      	beq.n	8014c48 <etharp_input+0x98>
 8014c44:	2301      	movs	r3, #1
 8014c46:	e000      	b.n	8014c4a <etharp_input+0x9a>
 8014c48:	2302      	movs	r3, #2
 8014c4a:	f107 010c 	add.w	r1, r7, #12
 8014c4e:	6838      	ldr	r0, [r7, #0]
 8014c50:	f7ff fed8 	bl	8014a04 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014c54:	693b      	ldr	r3, [r7, #16]
 8014c56:	88db      	ldrh	r3, [r3, #6]
 8014c58:	b29b      	uxth	r3, r3
 8014c5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014c5e:	d003      	beq.n	8014c68 <etharp_input+0xb8>
 8014c60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c64:	d01e      	beq.n	8014ca4 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014c66:	e025      	b.n	8014cb4 <etharp_input+0x104>
      if (for_us) {
 8014c68:	7dfb      	ldrb	r3, [r7, #23]
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d021      	beq.n	8014cb2 <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014c6e:	683b      	ldr	r3, [r7, #0]
 8014c70:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 8014c74:	693b      	ldr	r3, [r7, #16]
 8014c76:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014c7a:	683b      	ldr	r3, [r7, #0]
 8014c7c:	f103 052e 	add.w	r5, r3, #46	; 0x2e
 8014c80:	683b      	ldr	r3, [r7, #0]
 8014c82:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014c84:	693a      	ldr	r2, [r7, #16]
 8014c86:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014c88:	2102      	movs	r1, #2
 8014c8a:	9103      	str	r1, [sp, #12]
 8014c8c:	f107 010c 	add.w	r1, r7, #12
 8014c90:	9102      	str	r1, [sp, #8]
 8014c92:	9201      	str	r2, [sp, #4]
 8014c94:	9300      	str	r3, [sp, #0]
 8014c96:	462b      	mov	r3, r5
 8014c98:	4622      	mov	r2, r4
 8014c9a:	4601      	mov	r1, r0
 8014c9c:	6838      	ldr	r0, [r7, #0]
 8014c9e:	f000 faef 	bl	8015280 <etharp_raw>
      break;
 8014ca2:	e006      	b.n	8014cb2 <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8014ca4:	f107 030c 	add.w	r3, r7, #12
 8014ca8:	4619      	mov	r1, r3
 8014caa:	6838      	ldr	r0, [r7, #0]
 8014cac:	f7fe f9fc 	bl	80130a8 <dhcp_arp_reply>
      break;
 8014cb0:	e000      	b.n	8014cb4 <etharp_input+0x104>
      break;
 8014cb2:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014cb4:	6878      	ldr	r0, [r7, #4]
 8014cb6:	f7f7 fb83 	bl	800c3c0 <pbuf_free>
}
 8014cba:	3718      	adds	r7, #24
 8014cbc:	46bd      	mov	sp, r7
 8014cbe:	bdb0      	pop	{r4, r5, r7, pc}
 8014cc0:	0801a8a8 	.word	0x0801a8a8
 8014cc4:	0801a9f8 	.word	0x0801a9f8
 8014cc8:	0801a920 	.word	0x0801a920

08014ccc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014ccc:	b580      	push	{r7, lr}
 8014cce:	b086      	sub	sp, #24
 8014cd0:	af02      	add	r7, sp, #8
 8014cd2:	60f8      	str	r0, [r7, #12]
 8014cd4:	60b9      	str	r1, [r7, #8]
 8014cd6:	4613      	mov	r3, r2
 8014cd8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014cda:	79fa      	ldrb	r2, [r7, #7]
 8014cdc:	4944      	ldr	r1, [pc, #272]	; (8014df0 <etharp_output_to_arp_index+0x124>)
 8014cde:	4613      	mov	r3, r2
 8014ce0:	005b      	lsls	r3, r3, #1
 8014ce2:	4413      	add	r3, r2
 8014ce4:	00db      	lsls	r3, r3, #3
 8014ce6:	440b      	add	r3, r1
 8014ce8:	3314      	adds	r3, #20
 8014cea:	781b      	ldrb	r3, [r3, #0]
 8014cec:	2b01      	cmp	r3, #1
 8014cee:	d806      	bhi.n	8014cfe <etharp_output_to_arp_index+0x32>
 8014cf0:	4b40      	ldr	r3, [pc, #256]	; (8014df4 <etharp_output_to_arp_index+0x128>)
 8014cf2:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014cf6:	4940      	ldr	r1, [pc, #256]	; (8014df8 <etharp_output_to_arp_index+0x12c>)
 8014cf8:	4840      	ldr	r0, [pc, #256]	; (8014dfc <etharp_output_to_arp_index+0x130>)
 8014cfa:	f002 f9f1 	bl	80170e0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014cfe:	79fa      	ldrb	r2, [r7, #7]
 8014d00:	493b      	ldr	r1, [pc, #236]	; (8014df0 <etharp_output_to_arp_index+0x124>)
 8014d02:	4613      	mov	r3, r2
 8014d04:	005b      	lsls	r3, r3, #1
 8014d06:	4413      	add	r3, r2
 8014d08:	00db      	lsls	r3, r3, #3
 8014d0a:	440b      	add	r3, r1
 8014d0c:	3314      	adds	r3, #20
 8014d0e:	781b      	ldrb	r3, [r3, #0]
 8014d10:	2b02      	cmp	r3, #2
 8014d12:	d153      	bne.n	8014dbc <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014d14:	79fa      	ldrb	r2, [r7, #7]
 8014d16:	4936      	ldr	r1, [pc, #216]	; (8014df0 <etharp_output_to_arp_index+0x124>)
 8014d18:	4613      	mov	r3, r2
 8014d1a:	005b      	lsls	r3, r3, #1
 8014d1c:	4413      	add	r3, r2
 8014d1e:	00db      	lsls	r3, r3, #3
 8014d20:	440b      	add	r3, r1
 8014d22:	3312      	adds	r3, #18
 8014d24:	881b      	ldrh	r3, [r3, #0]
 8014d26:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014d2a:	d919      	bls.n	8014d60 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014d2c:	79fa      	ldrb	r2, [r7, #7]
 8014d2e:	4613      	mov	r3, r2
 8014d30:	005b      	lsls	r3, r3, #1
 8014d32:	4413      	add	r3, r2
 8014d34:	00db      	lsls	r3, r3, #3
 8014d36:	4a2e      	ldr	r2, [pc, #184]	; (8014df0 <etharp_output_to_arp_index+0x124>)
 8014d38:	4413      	add	r3, r2
 8014d3a:	3304      	adds	r3, #4
 8014d3c:	4619      	mov	r1, r3
 8014d3e:	68f8      	ldr	r0, [r7, #12]
 8014d40:	f000 fb4c 	bl	80153dc <etharp_request>
 8014d44:	4603      	mov	r3, r0
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	d138      	bne.n	8014dbc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014d4a:	79fa      	ldrb	r2, [r7, #7]
 8014d4c:	4928      	ldr	r1, [pc, #160]	; (8014df0 <etharp_output_to_arp_index+0x124>)
 8014d4e:	4613      	mov	r3, r2
 8014d50:	005b      	lsls	r3, r3, #1
 8014d52:	4413      	add	r3, r2
 8014d54:	00db      	lsls	r3, r3, #3
 8014d56:	440b      	add	r3, r1
 8014d58:	3314      	adds	r3, #20
 8014d5a:	2203      	movs	r2, #3
 8014d5c:	701a      	strb	r2, [r3, #0]
 8014d5e:	e02d      	b.n	8014dbc <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014d60:	79fa      	ldrb	r2, [r7, #7]
 8014d62:	4923      	ldr	r1, [pc, #140]	; (8014df0 <etharp_output_to_arp_index+0x124>)
 8014d64:	4613      	mov	r3, r2
 8014d66:	005b      	lsls	r3, r3, #1
 8014d68:	4413      	add	r3, r2
 8014d6a:	00db      	lsls	r3, r3, #3
 8014d6c:	440b      	add	r3, r1
 8014d6e:	3312      	adds	r3, #18
 8014d70:	881b      	ldrh	r3, [r3, #0]
 8014d72:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014d76:	d321      	bcc.n	8014dbc <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014d78:	79fa      	ldrb	r2, [r7, #7]
 8014d7a:	4613      	mov	r3, r2
 8014d7c:	005b      	lsls	r3, r3, #1
 8014d7e:	4413      	add	r3, r2
 8014d80:	00db      	lsls	r3, r3, #3
 8014d82:	4a1b      	ldr	r2, [pc, #108]	; (8014df0 <etharp_output_to_arp_index+0x124>)
 8014d84:	4413      	add	r3, r2
 8014d86:	1d19      	adds	r1, r3, #4
 8014d88:	79fa      	ldrb	r2, [r7, #7]
 8014d8a:	4613      	mov	r3, r2
 8014d8c:	005b      	lsls	r3, r3, #1
 8014d8e:	4413      	add	r3, r2
 8014d90:	00db      	lsls	r3, r3, #3
 8014d92:	3308      	adds	r3, #8
 8014d94:	4a16      	ldr	r2, [pc, #88]	; (8014df0 <etharp_output_to_arp_index+0x124>)
 8014d96:	4413      	add	r3, r2
 8014d98:	3304      	adds	r3, #4
 8014d9a:	461a      	mov	r2, r3
 8014d9c:	68f8      	ldr	r0, [r7, #12]
 8014d9e:	f000 fafb 	bl	8015398 <etharp_request_dst>
 8014da2:	4603      	mov	r3, r0
 8014da4:	2b00      	cmp	r3, #0
 8014da6:	d109      	bne.n	8014dbc <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014da8:	79fa      	ldrb	r2, [r7, #7]
 8014daa:	4911      	ldr	r1, [pc, #68]	; (8014df0 <etharp_output_to_arp_index+0x124>)
 8014dac:	4613      	mov	r3, r2
 8014dae:	005b      	lsls	r3, r3, #1
 8014db0:	4413      	add	r3, r2
 8014db2:	00db      	lsls	r3, r3, #3
 8014db4:	440b      	add	r3, r1
 8014db6:	3314      	adds	r3, #20
 8014db8:	2203      	movs	r2, #3
 8014dba:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014dbc:	68fb      	ldr	r3, [r7, #12]
 8014dbe:	f103 012e 	add.w	r1, r3, #46	; 0x2e
 8014dc2:	79fa      	ldrb	r2, [r7, #7]
 8014dc4:	4613      	mov	r3, r2
 8014dc6:	005b      	lsls	r3, r3, #1
 8014dc8:	4413      	add	r3, r2
 8014dca:	00db      	lsls	r3, r3, #3
 8014dcc:	3308      	adds	r3, #8
 8014dce:	4a08      	ldr	r2, [pc, #32]	; (8014df0 <etharp_output_to_arp_index+0x124>)
 8014dd0:	4413      	add	r3, r2
 8014dd2:	3304      	adds	r3, #4
 8014dd4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014dd8:	9200      	str	r2, [sp, #0]
 8014dda:	460a      	mov	r2, r1
 8014ddc:	68b9      	ldr	r1, [r7, #8]
 8014dde:	68f8      	ldr	r0, [r7, #12]
 8014de0:	f001 fe6c 	bl	8016abc <ethernet_output>
 8014de4:	4603      	mov	r3, r0
}
 8014de6:	4618      	mov	r0, r3
 8014de8:	3710      	adds	r7, #16
 8014dea:	46bd      	mov	sp, r7
 8014dec:	bd80      	pop	{r7, pc}
 8014dee:	bf00      	nop
 8014df0:	2000f2f4 	.word	0x2000f2f4
 8014df4:	0801a8a8 	.word	0x0801a8a8
 8014df8:	0801aa18 	.word	0x0801aa18
 8014dfc:	0801a920 	.word	0x0801a920

08014e00 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014e00:	b580      	push	{r7, lr}
 8014e02:	b08a      	sub	sp, #40	; 0x28
 8014e04:	af02      	add	r7, sp, #8
 8014e06:	60f8      	str	r0, [r7, #12]
 8014e08:	60b9      	str	r1, [r7, #8]
 8014e0a:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014e0c:	687b      	ldr	r3, [r7, #4]
 8014e0e:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014e10:	68fb      	ldr	r3, [r7, #12]
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d106      	bne.n	8014e24 <etharp_output+0x24>
 8014e16:	4b73      	ldr	r3, [pc, #460]	; (8014fe4 <etharp_output+0x1e4>)
 8014e18:	f240 321e 	movw	r2, #798	; 0x31e
 8014e1c:	4972      	ldr	r1, [pc, #456]	; (8014fe8 <etharp_output+0x1e8>)
 8014e1e:	4873      	ldr	r0, [pc, #460]	; (8014fec <etharp_output+0x1ec>)
 8014e20:	f002 f95e 	bl	80170e0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014e24:	68bb      	ldr	r3, [r7, #8]
 8014e26:	2b00      	cmp	r3, #0
 8014e28:	d106      	bne.n	8014e38 <etharp_output+0x38>
 8014e2a:	4b6e      	ldr	r3, [pc, #440]	; (8014fe4 <etharp_output+0x1e4>)
 8014e2c:	f240 321f 	movw	r2, #799	; 0x31f
 8014e30:	496f      	ldr	r1, [pc, #444]	; (8014ff0 <etharp_output+0x1f0>)
 8014e32:	486e      	ldr	r0, [pc, #440]	; (8014fec <etharp_output+0x1ec>)
 8014e34:	f002 f954 	bl	80170e0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d106      	bne.n	8014e4c <etharp_output+0x4c>
 8014e3e:	4b69      	ldr	r3, [pc, #420]	; (8014fe4 <etharp_output+0x1e4>)
 8014e40:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014e44:	496b      	ldr	r1, [pc, #428]	; (8014ff4 <etharp_output+0x1f4>)
 8014e46:	4869      	ldr	r0, [pc, #420]	; (8014fec <etharp_output+0x1ec>)
 8014e48:	f002 f94a 	bl	80170e0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	681b      	ldr	r3, [r3, #0]
 8014e50:	68f9      	ldr	r1, [r7, #12]
 8014e52:	4618      	mov	r0, r3
 8014e54:	f000 ff24 	bl	8015ca0 <ip4_addr_isbroadcast_u32>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d002      	beq.n	8014e64 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014e5e:	4b66      	ldr	r3, [pc, #408]	; (8014ff8 <etharp_output+0x1f8>)
 8014e60:	61fb      	str	r3, [r7, #28]
 8014e62:	e0af      	b.n	8014fc4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014e64:	687b      	ldr	r3, [r7, #4]
 8014e66:	681b      	ldr	r3, [r3, #0]
 8014e68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014e6c:	2be0      	cmp	r3, #224	; 0xe0
 8014e6e:	d118      	bne.n	8014ea2 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014e70:	2301      	movs	r3, #1
 8014e72:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014e74:	2300      	movs	r3, #0
 8014e76:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014e78:	235e      	movs	r3, #94	; 0x5e
 8014e7a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014e7c:	687b      	ldr	r3, [r7, #4]
 8014e7e:	3301      	adds	r3, #1
 8014e80:	781b      	ldrb	r3, [r3, #0]
 8014e82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014e86:	b2db      	uxtb	r3, r3
 8014e88:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	3302      	adds	r3, #2
 8014e8e:	781b      	ldrb	r3, [r3, #0]
 8014e90:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	3303      	adds	r3, #3
 8014e96:	781b      	ldrb	r3, [r3, #0]
 8014e98:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014e9a:	f107 0310 	add.w	r3, r7, #16
 8014e9e:	61fb      	str	r3, [r7, #28]
 8014ea0:	e090      	b.n	8014fc4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	681a      	ldr	r2, [r3, #0]
 8014ea6:	68fb      	ldr	r3, [r7, #12]
 8014ea8:	3304      	adds	r3, #4
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	405a      	eors	r2, r3
 8014eae:	68fb      	ldr	r3, [r7, #12]
 8014eb0:	3308      	adds	r3, #8
 8014eb2:	681b      	ldr	r3, [r3, #0]
 8014eb4:	4013      	ands	r3, r2
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d012      	beq.n	8014ee0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014ec0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014ec4:	4293      	cmp	r3, r2
 8014ec6:	d00b      	beq.n	8014ee0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014ec8:	68fb      	ldr	r3, [r7, #12]
 8014eca:	330c      	adds	r3, #12
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	2b00      	cmp	r3, #0
 8014ed0:	d003      	beq.n	8014eda <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014ed2:	68fb      	ldr	r3, [r7, #12]
 8014ed4:	330c      	adds	r3, #12
 8014ed6:	61bb      	str	r3, [r7, #24]
 8014ed8:	e002      	b.n	8014ee0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014eda:	f06f 0303 	mvn.w	r3, #3
 8014ede:	e07d      	b.n	8014fdc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014ee0:	4b46      	ldr	r3, [pc, #280]	; (8014ffc <etharp_output+0x1fc>)
 8014ee2:	781b      	ldrb	r3, [r3, #0]
 8014ee4:	4619      	mov	r1, r3
 8014ee6:	4a46      	ldr	r2, [pc, #280]	; (8015000 <etharp_output+0x200>)
 8014ee8:	460b      	mov	r3, r1
 8014eea:	005b      	lsls	r3, r3, #1
 8014eec:	440b      	add	r3, r1
 8014eee:	00db      	lsls	r3, r3, #3
 8014ef0:	4413      	add	r3, r2
 8014ef2:	3314      	adds	r3, #20
 8014ef4:	781b      	ldrb	r3, [r3, #0]
 8014ef6:	2b01      	cmp	r3, #1
 8014ef8:	d925      	bls.n	8014f46 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014efa:	4b40      	ldr	r3, [pc, #256]	; (8014ffc <etharp_output+0x1fc>)
 8014efc:	781b      	ldrb	r3, [r3, #0]
 8014efe:	4619      	mov	r1, r3
 8014f00:	4a3f      	ldr	r2, [pc, #252]	; (8015000 <etharp_output+0x200>)
 8014f02:	460b      	mov	r3, r1
 8014f04:	005b      	lsls	r3, r3, #1
 8014f06:	440b      	add	r3, r1
 8014f08:	00db      	lsls	r3, r3, #3
 8014f0a:	4413      	add	r3, r2
 8014f0c:	3308      	adds	r3, #8
 8014f0e:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014f10:	68fa      	ldr	r2, [r7, #12]
 8014f12:	429a      	cmp	r2, r3
 8014f14:	d117      	bne.n	8014f46 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014f16:	69bb      	ldr	r3, [r7, #24]
 8014f18:	681a      	ldr	r2, [r3, #0]
 8014f1a:	4b38      	ldr	r3, [pc, #224]	; (8014ffc <etharp_output+0x1fc>)
 8014f1c:	781b      	ldrb	r3, [r3, #0]
 8014f1e:	4618      	mov	r0, r3
 8014f20:	4937      	ldr	r1, [pc, #220]	; (8015000 <etharp_output+0x200>)
 8014f22:	4603      	mov	r3, r0
 8014f24:	005b      	lsls	r3, r3, #1
 8014f26:	4403      	add	r3, r0
 8014f28:	00db      	lsls	r3, r3, #3
 8014f2a:	440b      	add	r3, r1
 8014f2c:	3304      	adds	r3, #4
 8014f2e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014f30:	429a      	cmp	r2, r3
 8014f32:	d108      	bne.n	8014f46 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014f34:	4b31      	ldr	r3, [pc, #196]	; (8014ffc <etharp_output+0x1fc>)
 8014f36:	781b      	ldrb	r3, [r3, #0]
 8014f38:	461a      	mov	r2, r3
 8014f3a:	68b9      	ldr	r1, [r7, #8]
 8014f3c:	68f8      	ldr	r0, [r7, #12]
 8014f3e:	f7ff fec5 	bl	8014ccc <etharp_output_to_arp_index>
 8014f42:	4603      	mov	r3, r0
 8014f44:	e04a      	b.n	8014fdc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014f46:	2300      	movs	r3, #0
 8014f48:	75fb      	strb	r3, [r7, #23]
 8014f4a:	e031      	b.n	8014fb0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014f4c:	7dfa      	ldrb	r2, [r7, #23]
 8014f4e:	492c      	ldr	r1, [pc, #176]	; (8015000 <etharp_output+0x200>)
 8014f50:	4613      	mov	r3, r2
 8014f52:	005b      	lsls	r3, r3, #1
 8014f54:	4413      	add	r3, r2
 8014f56:	00db      	lsls	r3, r3, #3
 8014f58:	440b      	add	r3, r1
 8014f5a:	3314      	adds	r3, #20
 8014f5c:	781b      	ldrb	r3, [r3, #0]
 8014f5e:	2b01      	cmp	r3, #1
 8014f60:	d923      	bls.n	8014faa <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014f62:	7dfa      	ldrb	r2, [r7, #23]
 8014f64:	4926      	ldr	r1, [pc, #152]	; (8015000 <etharp_output+0x200>)
 8014f66:	4613      	mov	r3, r2
 8014f68:	005b      	lsls	r3, r3, #1
 8014f6a:	4413      	add	r3, r2
 8014f6c:	00db      	lsls	r3, r3, #3
 8014f6e:	440b      	add	r3, r1
 8014f70:	3308      	adds	r3, #8
 8014f72:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014f74:	68fa      	ldr	r2, [r7, #12]
 8014f76:	429a      	cmp	r2, r3
 8014f78:	d117      	bne.n	8014faa <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014f7a:	69bb      	ldr	r3, [r7, #24]
 8014f7c:	6819      	ldr	r1, [r3, #0]
 8014f7e:	7dfa      	ldrb	r2, [r7, #23]
 8014f80:	481f      	ldr	r0, [pc, #124]	; (8015000 <etharp_output+0x200>)
 8014f82:	4613      	mov	r3, r2
 8014f84:	005b      	lsls	r3, r3, #1
 8014f86:	4413      	add	r3, r2
 8014f88:	00db      	lsls	r3, r3, #3
 8014f8a:	4403      	add	r3, r0
 8014f8c:	3304      	adds	r3, #4
 8014f8e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014f90:	4299      	cmp	r1, r3
 8014f92:	d10a      	bne.n	8014faa <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014f94:	4a19      	ldr	r2, [pc, #100]	; (8014ffc <etharp_output+0x1fc>)
 8014f96:	7dfb      	ldrb	r3, [r7, #23]
 8014f98:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014f9a:	7dfb      	ldrb	r3, [r7, #23]
 8014f9c:	461a      	mov	r2, r3
 8014f9e:	68b9      	ldr	r1, [r7, #8]
 8014fa0:	68f8      	ldr	r0, [r7, #12]
 8014fa2:	f7ff fe93 	bl	8014ccc <etharp_output_to_arp_index>
 8014fa6:	4603      	mov	r3, r0
 8014fa8:	e018      	b.n	8014fdc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014faa:	7dfb      	ldrb	r3, [r7, #23]
 8014fac:	3301      	adds	r3, #1
 8014fae:	75fb      	strb	r3, [r7, #23]
 8014fb0:	7dfb      	ldrb	r3, [r7, #23]
 8014fb2:	2b09      	cmp	r3, #9
 8014fb4:	d9ca      	bls.n	8014f4c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014fb6:	68ba      	ldr	r2, [r7, #8]
 8014fb8:	69b9      	ldr	r1, [r7, #24]
 8014fba:	68f8      	ldr	r0, [r7, #12]
 8014fbc:	f000 f822 	bl	8015004 <etharp_query>
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	e00b      	b.n	8014fdc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	f103 022e 	add.w	r2, r3, #46	; 0x2e
 8014fca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014fce:	9300      	str	r3, [sp, #0]
 8014fd0:	69fb      	ldr	r3, [r7, #28]
 8014fd2:	68b9      	ldr	r1, [r7, #8]
 8014fd4:	68f8      	ldr	r0, [r7, #12]
 8014fd6:	f001 fd71 	bl	8016abc <ethernet_output>
 8014fda:	4603      	mov	r3, r0
}
 8014fdc:	4618      	mov	r0, r3
 8014fde:	3720      	adds	r7, #32
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}
 8014fe4:	0801a8a8 	.word	0x0801a8a8
 8014fe8:	0801a9f8 	.word	0x0801a9f8
 8014fec:	0801a920 	.word	0x0801a920
 8014ff0:	0801aa48 	.word	0x0801aa48
 8014ff4:	0801a9e8 	.word	0x0801a9e8
 8014ff8:	0801b100 	.word	0x0801b100
 8014ffc:	2000f3e4 	.word	0x2000f3e4
 8015000:	2000f2f4 	.word	0x2000f2f4

08015004 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8015004:	b580      	push	{r7, lr}
 8015006:	b08c      	sub	sp, #48	; 0x30
 8015008:	af02      	add	r7, sp, #8
 801500a:	60f8      	str	r0, [r7, #12]
 801500c:	60b9      	str	r1, [r7, #8]
 801500e:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	332e      	adds	r3, #46	; 0x2e
 8015014:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8015016:	23ff      	movs	r3, #255	; 0xff
 8015018:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801501c:	2300      	movs	r3, #0
 801501e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8015020:	68bb      	ldr	r3, [r7, #8]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	68f9      	ldr	r1, [r7, #12]
 8015026:	4618      	mov	r0, r3
 8015028:	f000 fe3a 	bl	8015ca0 <ip4_addr_isbroadcast_u32>
 801502c:	4603      	mov	r3, r0
 801502e:	2b00      	cmp	r3, #0
 8015030:	d10c      	bne.n	801504c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8015032:	68bb      	ldr	r3, [r7, #8]
 8015034:	681b      	ldr	r3, [r3, #0]
 8015036:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801503a:	2be0      	cmp	r3, #224	; 0xe0
 801503c:	d006      	beq.n	801504c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801503e:	68bb      	ldr	r3, [r7, #8]
 8015040:	2b00      	cmp	r3, #0
 8015042:	d003      	beq.n	801504c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8015044:	68bb      	ldr	r3, [r7, #8]
 8015046:	681b      	ldr	r3, [r3, #0]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d102      	bne.n	8015052 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801504c:	f06f 030f 	mvn.w	r3, #15
 8015050:	e101      	b.n	8015256 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8015052:	68fa      	ldr	r2, [r7, #12]
 8015054:	2101      	movs	r1, #1
 8015056:	68b8      	ldr	r0, [r7, #8]
 8015058:	f7ff fb5c 	bl	8014714 <etharp_find_entry>
 801505c:	4603      	mov	r3, r0
 801505e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8015060:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015064:	2b00      	cmp	r3, #0
 8015066:	da02      	bge.n	801506e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8015068:	8a7b      	ldrh	r3, [r7, #18]
 801506a:	b25b      	sxtb	r3, r3
 801506c:	e0f3      	b.n	8015256 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801506e:	8a7b      	ldrh	r3, [r7, #18]
 8015070:	2b7e      	cmp	r3, #126	; 0x7e
 8015072:	d906      	bls.n	8015082 <etharp_query+0x7e>
 8015074:	4b7a      	ldr	r3, [pc, #488]	; (8015260 <etharp_query+0x25c>)
 8015076:	f240 32c1 	movw	r2, #961	; 0x3c1
 801507a:	497a      	ldr	r1, [pc, #488]	; (8015264 <etharp_query+0x260>)
 801507c:	487a      	ldr	r0, [pc, #488]	; (8015268 <etharp_query+0x264>)
 801507e:	f002 f82f 	bl	80170e0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8015082:	8a7b      	ldrh	r3, [r7, #18]
 8015084:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8015086:	7c7a      	ldrb	r2, [r7, #17]
 8015088:	4978      	ldr	r1, [pc, #480]	; (801526c <etharp_query+0x268>)
 801508a:	4613      	mov	r3, r2
 801508c:	005b      	lsls	r3, r3, #1
 801508e:	4413      	add	r3, r2
 8015090:	00db      	lsls	r3, r3, #3
 8015092:	440b      	add	r3, r1
 8015094:	3314      	adds	r3, #20
 8015096:	781b      	ldrb	r3, [r3, #0]
 8015098:	2b00      	cmp	r3, #0
 801509a:	d115      	bne.n	80150c8 <etharp_query+0xc4>
    is_new_entry = 1;
 801509c:	2301      	movs	r3, #1
 801509e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80150a0:	7c7a      	ldrb	r2, [r7, #17]
 80150a2:	4972      	ldr	r1, [pc, #456]	; (801526c <etharp_query+0x268>)
 80150a4:	4613      	mov	r3, r2
 80150a6:	005b      	lsls	r3, r3, #1
 80150a8:	4413      	add	r3, r2
 80150aa:	00db      	lsls	r3, r3, #3
 80150ac:	440b      	add	r3, r1
 80150ae:	3314      	adds	r3, #20
 80150b0:	2201      	movs	r2, #1
 80150b2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80150b4:	7c7a      	ldrb	r2, [r7, #17]
 80150b6:	496d      	ldr	r1, [pc, #436]	; (801526c <etharp_query+0x268>)
 80150b8:	4613      	mov	r3, r2
 80150ba:	005b      	lsls	r3, r3, #1
 80150bc:	4413      	add	r3, r2
 80150be:	00db      	lsls	r3, r3, #3
 80150c0:	440b      	add	r3, r1
 80150c2:	3308      	adds	r3, #8
 80150c4:	68fa      	ldr	r2, [r7, #12]
 80150c6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80150c8:	7c7a      	ldrb	r2, [r7, #17]
 80150ca:	4968      	ldr	r1, [pc, #416]	; (801526c <etharp_query+0x268>)
 80150cc:	4613      	mov	r3, r2
 80150ce:	005b      	lsls	r3, r3, #1
 80150d0:	4413      	add	r3, r2
 80150d2:	00db      	lsls	r3, r3, #3
 80150d4:	440b      	add	r3, r1
 80150d6:	3314      	adds	r3, #20
 80150d8:	781b      	ldrb	r3, [r3, #0]
 80150da:	2b01      	cmp	r3, #1
 80150dc:	d011      	beq.n	8015102 <etharp_query+0xfe>
 80150de:	7c7a      	ldrb	r2, [r7, #17]
 80150e0:	4962      	ldr	r1, [pc, #392]	; (801526c <etharp_query+0x268>)
 80150e2:	4613      	mov	r3, r2
 80150e4:	005b      	lsls	r3, r3, #1
 80150e6:	4413      	add	r3, r2
 80150e8:	00db      	lsls	r3, r3, #3
 80150ea:	440b      	add	r3, r1
 80150ec:	3314      	adds	r3, #20
 80150ee:	781b      	ldrb	r3, [r3, #0]
 80150f0:	2b01      	cmp	r3, #1
 80150f2:	d806      	bhi.n	8015102 <etharp_query+0xfe>
 80150f4:	4b5a      	ldr	r3, [pc, #360]	; (8015260 <etharp_query+0x25c>)
 80150f6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80150fa:	495d      	ldr	r1, [pc, #372]	; (8015270 <etharp_query+0x26c>)
 80150fc:	485a      	ldr	r0, [pc, #360]	; (8015268 <etharp_query+0x264>)
 80150fe:	f001 ffef 	bl	80170e0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8015102:	6a3b      	ldr	r3, [r7, #32]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d102      	bne.n	801510e <etharp_query+0x10a>
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	2b00      	cmp	r3, #0
 801510c:	d10c      	bne.n	8015128 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801510e:	68b9      	ldr	r1, [r7, #8]
 8015110:	68f8      	ldr	r0, [r7, #12]
 8015112:	f000 f963 	bl	80153dc <etharp_request>
 8015116:	4603      	mov	r3, r0
 8015118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	2b00      	cmp	r3, #0
 8015120:	d102      	bne.n	8015128 <etharp_query+0x124>
      return result;
 8015122:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8015126:	e096      	b.n	8015256 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8015128:	687b      	ldr	r3, [r7, #4]
 801512a:	2b00      	cmp	r3, #0
 801512c:	d106      	bne.n	801513c <etharp_query+0x138>
 801512e:	4b4c      	ldr	r3, [pc, #304]	; (8015260 <etharp_query+0x25c>)
 8015130:	f240 32e1 	movw	r2, #993	; 0x3e1
 8015134:	494f      	ldr	r1, [pc, #316]	; (8015274 <etharp_query+0x270>)
 8015136:	484c      	ldr	r0, [pc, #304]	; (8015268 <etharp_query+0x264>)
 8015138:	f001 ffd2 	bl	80170e0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801513c:	7c7a      	ldrb	r2, [r7, #17]
 801513e:	494b      	ldr	r1, [pc, #300]	; (801526c <etharp_query+0x268>)
 8015140:	4613      	mov	r3, r2
 8015142:	005b      	lsls	r3, r3, #1
 8015144:	4413      	add	r3, r2
 8015146:	00db      	lsls	r3, r3, #3
 8015148:	440b      	add	r3, r1
 801514a:	3314      	adds	r3, #20
 801514c:	781b      	ldrb	r3, [r3, #0]
 801514e:	2b01      	cmp	r3, #1
 8015150:	d917      	bls.n	8015182 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8015152:	4a49      	ldr	r2, [pc, #292]	; (8015278 <etharp_query+0x274>)
 8015154:	7c7b      	ldrb	r3, [r7, #17]
 8015156:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8015158:	7c7a      	ldrb	r2, [r7, #17]
 801515a:	4613      	mov	r3, r2
 801515c:	005b      	lsls	r3, r3, #1
 801515e:	4413      	add	r3, r2
 8015160:	00db      	lsls	r3, r3, #3
 8015162:	3308      	adds	r3, #8
 8015164:	4a41      	ldr	r2, [pc, #260]	; (801526c <etharp_query+0x268>)
 8015166:	4413      	add	r3, r2
 8015168:	3304      	adds	r3, #4
 801516a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801516e:	9200      	str	r2, [sp, #0]
 8015170:	697a      	ldr	r2, [r7, #20]
 8015172:	6879      	ldr	r1, [r7, #4]
 8015174:	68f8      	ldr	r0, [r7, #12]
 8015176:	f001 fca1 	bl	8016abc <ethernet_output>
 801517a:	4603      	mov	r3, r0
 801517c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8015180:	e067      	b.n	8015252 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015182:	7c7a      	ldrb	r2, [r7, #17]
 8015184:	4939      	ldr	r1, [pc, #228]	; (801526c <etharp_query+0x268>)
 8015186:	4613      	mov	r3, r2
 8015188:	005b      	lsls	r3, r3, #1
 801518a:	4413      	add	r3, r2
 801518c:	00db      	lsls	r3, r3, #3
 801518e:	440b      	add	r3, r1
 8015190:	3314      	adds	r3, #20
 8015192:	781b      	ldrb	r3, [r3, #0]
 8015194:	2b01      	cmp	r3, #1
 8015196:	d15c      	bne.n	8015252 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8015198:	2300      	movs	r3, #0
 801519a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	61fb      	str	r3, [r7, #28]
    while (p) {
 80151a0:	e01c      	b.n	80151dc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80151a2:	69fb      	ldr	r3, [r7, #28]
 80151a4:	895a      	ldrh	r2, [r3, #10]
 80151a6:	69fb      	ldr	r3, [r7, #28]
 80151a8:	891b      	ldrh	r3, [r3, #8]
 80151aa:	429a      	cmp	r2, r3
 80151ac:	d10a      	bne.n	80151c4 <etharp_query+0x1c0>
 80151ae:	69fb      	ldr	r3, [r7, #28]
 80151b0:	681b      	ldr	r3, [r3, #0]
 80151b2:	2b00      	cmp	r3, #0
 80151b4:	d006      	beq.n	80151c4 <etharp_query+0x1c0>
 80151b6:	4b2a      	ldr	r3, [pc, #168]	; (8015260 <etharp_query+0x25c>)
 80151b8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80151bc:	492f      	ldr	r1, [pc, #188]	; (801527c <etharp_query+0x278>)
 80151be:	482a      	ldr	r0, [pc, #168]	; (8015268 <etharp_query+0x264>)
 80151c0:	f001 ff8e 	bl	80170e0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80151c4:	69fb      	ldr	r3, [r7, #28]
 80151c6:	7b1b      	ldrb	r3, [r3, #12]
 80151c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80151cc:	2b00      	cmp	r3, #0
 80151ce:	d002      	beq.n	80151d6 <etharp_query+0x1d2>
        copy_needed = 1;
 80151d0:	2301      	movs	r3, #1
 80151d2:	61bb      	str	r3, [r7, #24]
        break;
 80151d4:	e005      	b.n	80151e2 <etharp_query+0x1de>
      }
      p = p->next;
 80151d6:	69fb      	ldr	r3, [r7, #28]
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	61fb      	str	r3, [r7, #28]
    while (p) {
 80151dc:	69fb      	ldr	r3, [r7, #28]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d1df      	bne.n	80151a2 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80151e2:	69bb      	ldr	r3, [r7, #24]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d007      	beq.n	80151f8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80151e8:	687a      	ldr	r2, [r7, #4]
 80151ea:	f44f 7120 	mov.w	r1, #640	; 0x280
 80151ee:	200e      	movs	r0, #14
 80151f0:	f7f7 fb5e 	bl	800c8b0 <pbuf_clone>
 80151f4:	61f8      	str	r0, [r7, #28]
 80151f6:	e004      	b.n	8015202 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80151f8:	687b      	ldr	r3, [r7, #4]
 80151fa:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80151fc:	69f8      	ldr	r0, [r7, #28]
 80151fe:	f7f7 f985 	bl	800c50c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8015202:	69fb      	ldr	r3, [r7, #28]
 8015204:	2b00      	cmp	r3, #0
 8015206:	d021      	beq.n	801524c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8015208:	7c7a      	ldrb	r2, [r7, #17]
 801520a:	4918      	ldr	r1, [pc, #96]	; (801526c <etharp_query+0x268>)
 801520c:	4613      	mov	r3, r2
 801520e:	005b      	lsls	r3, r3, #1
 8015210:	4413      	add	r3, r2
 8015212:	00db      	lsls	r3, r3, #3
 8015214:	440b      	add	r3, r1
 8015216:	681b      	ldr	r3, [r3, #0]
 8015218:	2b00      	cmp	r3, #0
 801521a:	d00a      	beq.n	8015232 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801521c:	7c7a      	ldrb	r2, [r7, #17]
 801521e:	4913      	ldr	r1, [pc, #76]	; (801526c <etharp_query+0x268>)
 8015220:	4613      	mov	r3, r2
 8015222:	005b      	lsls	r3, r3, #1
 8015224:	4413      	add	r3, r2
 8015226:	00db      	lsls	r3, r3, #3
 8015228:	440b      	add	r3, r1
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	4618      	mov	r0, r3
 801522e:	f7f7 f8c7 	bl	800c3c0 <pbuf_free>
      }
      arp_table[i].q = p;
 8015232:	7c7a      	ldrb	r2, [r7, #17]
 8015234:	490d      	ldr	r1, [pc, #52]	; (801526c <etharp_query+0x268>)
 8015236:	4613      	mov	r3, r2
 8015238:	005b      	lsls	r3, r3, #1
 801523a:	4413      	add	r3, r2
 801523c:	00db      	lsls	r3, r3, #3
 801523e:	440b      	add	r3, r1
 8015240:	69fa      	ldr	r2, [r7, #28]
 8015242:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8015244:	2300      	movs	r3, #0
 8015246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801524a:	e002      	b.n	8015252 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801524c:	23ff      	movs	r3, #255	; 0xff
 801524e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015252:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8015256:	4618      	mov	r0, r3
 8015258:	3728      	adds	r7, #40	; 0x28
 801525a:	46bd      	mov	sp, r7
 801525c:	bd80      	pop	{r7, pc}
 801525e:	bf00      	nop
 8015260:	0801a8a8 	.word	0x0801a8a8
 8015264:	0801aa54 	.word	0x0801aa54
 8015268:	0801a920 	.word	0x0801a920
 801526c:	2000f2f4 	.word	0x2000f2f4
 8015270:	0801aa64 	.word	0x0801aa64
 8015274:	0801aa48 	.word	0x0801aa48
 8015278:	2000f3e4 	.word	0x2000f3e4
 801527c:	0801aa8c 	.word	0x0801aa8c

08015280 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b08a      	sub	sp, #40	; 0x28
 8015284:	af02      	add	r7, sp, #8
 8015286:	60f8      	str	r0, [r7, #12]
 8015288:	60b9      	str	r1, [r7, #8]
 801528a:	607a      	str	r2, [r7, #4]
 801528c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801528e:	2300      	movs	r3, #0
 8015290:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015292:	68fb      	ldr	r3, [r7, #12]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d106      	bne.n	80152a6 <etharp_raw+0x26>
 8015298:	4b3a      	ldr	r3, [pc, #232]	; (8015384 <etharp_raw+0x104>)
 801529a:	f240 4257 	movw	r2, #1111	; 0x457
 801529e:	493a      	ldr	r1, [pc, #232]	; (8015388 <etharp_raw+0x108>)
 80152a0:	483a      	ldr	r0, [pc, #232]	; (801538c <etharp_raw+0x10c>)
 80152a2:	f001 ff1d 	bl	80170e0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80152a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80152aa:	211c      	movs	r1, #28
 80152ac:	200e      	movs	r0, #14
 80152ae:	f7f6 fda3 	bl	800bdf8 <pbuf_alloc>
 80152b2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80152b4:	69bb      	ldr	r3, [r7, #24]
 80152b6:	2b00      	cmp	r3, #0
 80152b8:	d102      	bne.n	80152c0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80152ba:	f04f 33ff 	mov.w	r3, #4294967295
 80152be:	e05d      	b.n	801537c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80152c0:	69bb      	ldr	r3, [r7, #24]
 80152c2:	895b      	ldrh	r3, [r3, #10]
 80152c4:	2b1b      	cmp	r3, #27
 80152c6:	d806      	bhi.n	80152d6 <etharp_raw+0x56>
 80152c8:	4b2e      	ldr	r3, [pc, #184]	; (8015384 <etharp_raw+0x104>)
 80152ca:	f240 4262 	movw	r2, #1122	; 0x462
 80152ce:	4930      	ldr	r1, [pc, #192]	; (8015390 <etharp_raw+0x110>)
 80152d0:	482e      	ldr	r0, [pc, #184]	; (801538c <etharp_raw+0x10c>)
 80152d2:	f001 ff05 	bl	80170e0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80152d6:	69bb      	ldr	r3, [r7, #24]
 80152d8:	685b      	ldr	r3, [r3, #4]
 80152da:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80152dc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80152de:	4618      	mov	r0, r3
 80152e0:	f7f5 fa46 	bl	800a770 <lwip_htons>
 80152e4:	4603      	mov	r3, r0
 80152e6:	461a      	mov	r2, r3
 80152e8:	697b      	ldr	r3, [r7, #20]
 80152ea:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80152f2:	2b06      	cmp	r3, #6
 80152f4:	d006      	beq.n	8015304 <etharp_raw+0x84>
 80152f6:	4b23      	ldr	r3, [pc, #140]	; (8015384 <etharp_raw+0x104>)
 80152f8:	f240 4269 	movw	r2, #1129	; 0x469
 80152fc:	4925      	ldr	r1, [pc, #148]	; (8015394 <etharp_raw+0x114>)
 80152fe:	4823      	ldr	r0, [pc, #140]	; (801538c <etharp_raw+0x10c>)
 8015300:	f001 feee 	bl	80170e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8015304:	697b      	ldr	r3, [r7, #20]
 8015306:	3308      	adds	r3, #8
 8015308:	2206      	movs	r2, #6
 801530a:	6839      	ldr	r1, [r7, #0]
 801530c:	4618      	mov	r0, r3
 801530e:	f001 fe3c 	bl	8016f8a <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8015312:	697b      	ldr	r3, [r7, #20]
 8015314:	3312      	adds	r3, #18
 8015316:	2206      	movs	r2, #6
 8015318:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801531a:	4618      	mov	r0, r3
 801531c:	f001 fe35 	bl	8016f8a <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8015320:	697b      	ldr	r3, [r7, #20]
 8015322:	330e      	adds	r3, #14
 8015324:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015326:	6812      	ldr	r2, [r2, #0]
 8015328:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801532a:	697b      	ldr	r3, [r7, #20]
 801532c:	3318      	adds	r3, #24
 801532e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015330:	6812      	ldr	r2, [r2, #0]
 8015332:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8015334:	697b      	ldr	r3, [r7, #20]
 8015336:	2200      	movs	r2, #0
 8015338:	701a      	strb	r2, [r3, #0]
 801533a:	2200      	movs	r2, #0
 801533c:	f042 0201 	orr.w	r2, r2, #1
 8015340:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8015342:	697b      	ldr	r3, [r7, #20]
 8015344:	2200      	movs	r2, #0
 8015346:	f042 0208 	orr.w	r2, r2, #8
 801534a:	709a      	strb	r2, [r3, #2]
 801534c:	2200      	movs	r2, #0
 801534e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015350:	697b      	ldr	r3, [r7, #20]
 8015352:	2206      	movs	r2, #6
 8015354:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8015356:	697b      	ldr	r3, [r7, #20]
 8015358:	2204      	movs	r2, #4
 801535a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801535c:	f640 0306 	movw	r3, #2054	; 0x806
 8015360:	9300      	str	r3, [sp, #0]
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	68ba      	ldr	r2, [r7, #8]
 8015366:	69b9      	ldr	r1, [r7, #24]
 8015368:	68f8      	ldr	r0, [r7, #12]
 801536a:	f001 fba7 	bl	8016abc <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801536e:	69b8      	ldr	r0, [r7, #24]
 8015370:	f7f7 f826 	bl	800c3c0 <pbuf_free>
  p = NULL;
 8015374:	2300      	movs	r3, #0
 8015376:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8015378:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801537c:	4618      	mov	r0, r3
 801537e:	3720      	adds	r7, #32
 8015380:	46bd      	mov	sp, r7
 8015382:	bd80      	pop	{r7, pc}
 8015384:	0801a8a8 	.word	0x0801a8a8
 8015388:	0801a9f8 	.word	0x0801a9f8
 801538c:	0801a920 	.word	0x0801a920
 8015390:	0801aaa8 	.word	0x0801aaa8
 8015394:	0801aadc 	.word	0x0801aadc

08015398 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b088      	sub	sp, #32
 801539c:	af04      	add	r7, sp, #16
 801539e:	60f8      	str	r0, [r7, #12]
 80153a0:	60b9      	str	r1, [r7, #8]
 80153a2:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80153a4:	68fb      	ldr	r3, [r7, #12]
 80153a6:	f103 012e 	add.w	r1, r3, #46	; 0x2e
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80153aa:	68fb      	ldr	r3, [r7, #12]
 80153ac:	f103 002e 	add.w	r0, r3, #46	; 0x2e
 80153b0:	68fb      	ldr	r3, [r7, #12]
 80153b2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80153b4:	2201      	movs	r2, #1
 80153b6:	9203      	str	r2, [sp, #12]
 80153b8:	68ba      	ldr	r2, [r7, #8]
 80153ba:	9202      	str	r2, [sp, #8]
 80153bc:	4a06      	ldr	r2, [pc, #24]	; (80153d8 <etharp_request_dst+0x40>)
 80153be:	9201      	str	r2, [sp, #4]
 80153c0:	9300      	str	r3, [sp, #0]
 80153c2:	4603      	mov	r3, r0
 80153c4:	687a      	ldr	r2, [r7, #4]
 80153c6:	68f8      	ldr	r0, [r7, #12]
 80153c8:	f7ff ff5a 	bl	8015280 <etharp_raw>
 80153cc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80153ce:	4618      	mov	r0, r3
 80153d0:	3710      	adds	r7, #16
 80153d2:	46bd      	mov	sp, r7
 80153d4:	bd80      	pop	{r7, pc}
 80153d6:	bf00      	nop
 80153d8:	0801b108 	.word	0x0801b108

080153dc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b082      	sub	sp, #8
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
 80153e4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80153e6:	4a05      	ldr	r2, [pc, #20]	; (80153fc <etharp_request+0x20>)
 80153e8:	6839      	ldr	r1, [r7, #0]
 80153ea:	6878      	ldr	r0, [r7, #4]
 80153ec:	f7ff ffd4 	bl	8015398 <etharp_request_dst>
 80153f0:	4603      	mov	r3, r0
}
 80153f2:	4618      	mov	r0, r3
 80153f4:	3708      	adds	r7, #8
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bd80      	pop	{r7, pc}
 80153fa:	bf00      	nop
 80153fc:	0801b100 	.word	0x0801b100

08015400 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b08e      	sub	sp, #56	; 0x38
 8015404:	af04      	add	r7, sp, #16
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801540a:	4b79      	ldr	r3, [pc, #484]	; (80155f0 <icmp_input+0x1f0>)
 801540c:	689b      	ldr	r3, [r3, #8]
 801540e:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8015410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015412:	781b      	ldrb	r3, [r3, #0]
 8015414:	f003 030f 	and.w	r3, r3, #15
 8015418:	b2db      	uxtb	r3, r3
 801541a:	009b      	lsls	r3, r3, #2
 801541c:	b2db      	uxtb	r3, r3
 801541e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8015420:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015422:	2b13      	cmp	r3, #19
 8015424:	f240 80cd 	bls.w	80155c2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8015428:	687b      	ldr	r3, [r7, #4]
 801542a:	895b      	ldrh	r3, [r3, #10]
 801542c:	2b03      	cmp	r3, #3
 801542e:	f240 80ca 	bls.w	80155c6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	685b      	ldr	r3, [r3, #4]
 8015436:	781b      	ldrb	r3, [r3, #0]
 8015438:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801543c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8015440:	2b00      	cmp	r3, #0
 8015442:	f000 80b7 	beq.w	80155b4 <icmp_input+0x1b4>
 8015446:	2b08      	cmp	r3, #8
 8015448:	f040 80b7 	bne.w	80155ba <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801544c:	4b69      	ldr	r3, [pc, #420]	; (80155f4 <icmp_input+0x1f4>)
 801544e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015450:	4b67      	ldr	r3, [pc, #412]	; (80155f0 <icmp_input+0x1f0>)
 8015452:	695b      	ldr	r3, [r3, #20]
 8015454:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015458:	2be0      	cmp	r3, #224	; 0xe0
 801545a:	f000 80bb 	beq.w	80155d4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801545e:	4b64      	ldr	r3, [pc, #400]	; (80155f0 <icmp_input+0x1f0>)
 8015460:	695b      	ldr	r3, [r3, #20]
 8015462:	4a63      	ldr	r2, [pc, #396]	; (80155f0 <icmp_input+0x1f0>)
 8015464:	6812      	ldr	r2, [r2, #0]
 8015466:	4611      	mov	r1, r2
 8015468:	4618      	mov	r0, r3
 801546a:	f000 fc19 	bl	8015ca0 <ip4_addr_isbroadcast_u32>
 801546e:	4603      	mov	r3, r0
 8015470:	2b00      	cmp	r3, #0
 8015472:	f040 80b1 	bne.w	80155d8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	891b      	ldrh	r3, [r3, #8]
 801547a:	2b07      	cmp	r3, #7
 801547c:	f240 80a5 	bls.w	80155ca <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015480:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015482:	330e      	adds	r3, #14
 8015484:	4619      	mov	r1, r3
 8015486:	6878      	ldr	r0, [r7, #4]
 8015488:	f7f6 ff04 	bl	800c294 <pbuf_add_header>
 801548c:	4603      	mov	r3, r0
 801548e:	2b00      	cmp	r3, #0
 8015490:	d04b      	beq.n	801552a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015492:	687b      	ldr	r3, [r7, #4]
 8015494:	891a      	ldrh	r2, [r3, #8]
 8015496:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015498:	4413      	add	r3, r2
 801549a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	891b      	ldrh	r3, [r3, #8]
 80154a0:	8b7a      	ldrh	r2, [r7, #26]
 80154a2:	429a      	cmp	r2, r3
 80154a4:	f0c0 809a 	bcc.w	80155dc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80154a8:	8b7b      	ldrh	r3, [r7, #26]
 80154aa:	f44f 7220 	mov.w	r2, #640	; 0x280
 80154ae:	4619      	mov	r1, r3
 80154b0:	200e      	movs	r0, #14
 80154b2:	f7f6 fca1 	bl	800bdf8 <pbuf_alloc>
 80154b6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80154b8:	697b      	ldr	r3, [r7, #20]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	f000 8090 	beq.w	80155e0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	895b      	ldrh	r3, [r3, #10]
 80154c4:	461a      	mov	r2, r3
 80154c6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154c8:	3308      	adds	r3, #8
 80154ca:	429a      	cmp	r2, r3
 80154cc:	d203      	bcs.n	80154d6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80154ce:	6978      	ldr	r0, [r7, #20]
 80154d0:	f7f6 ff76 	bl	800c3c0 <pbuf_free>
          goto icmperr;
 80154d4:	e085      	b.n	80155e2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80154d6:	697b      	ldr	r3, [r7, #20]
 80154d8:	685b      	ldr	r3, [r3, #4]
 80154da:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80154dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80154de:	4618      	mov	r0, r3
 80154e0:	f001 fd53 	bl	8016f8a <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80154e4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80154e6:	4619      	mov	r1, r3
 80154e8:	6978      	ldr	r0, [r7, #20]
 80154ea:	f7f6 fee3 	bl	800c2b4 <pbuf_remove_header>
 80154ee:	4603      	mov	r3, r0
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d009      	beq.n	8015508 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80154f4:	4b40      	ldr	r3, [pc, #256]	; (80155f8 <icmp_input+0x1f8>)
 80154f6:	22b6      	movs	r2, #182	; 0xb6
 80154f8:	4940      	ldr	r1, [pc, #256]	; (80155fc <icmp_input+0x1fc>)
 80154fa:	4841      	ldr	r0, [pc, #260]	; (8015600 <icmp_input+0x200>)
 80154fc:	f001 fdf0 	bl	80170e0 <iprintf>
          pbuf_free(r);
 8015500:	6978      	ldr	r0, [r7, #20]
 8015502:	f7f6 ff5d 	bl	800c3c0 <pbuf_free>
          goto icmperr;
 8015506:	e06c      	b.n	80155e2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8015508:	6879      	ldr	r1, [r7, #4]
 801550a:	6978      	ldr	r0, [r7, #20]
 801550c:	f7f7 f88c 	bl	800c628 <pbuf_copy>
 8015510:	4603      	mov	r3, r0
 8015512:	2b00      	cmp	r3, #0
 8015514:	d003      	beq.n	801551e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8015516:	6978      	ldr	r0, [r7, #20]
 8015518:	f7f6 ff52 	bl	800c3c0 <pbuf_free>
          goto icmperr;
 801551c:	e061      	b.n	80155e2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801551e:	6878      	ldr	r0, [r7, #4]
 8015520:	f7f6 ff4e 	bl	800c3c0 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8015524:	697b      	ldr	r3, [r7, #20]
 8015526:	607b      	str	r3, [r7, #4]
 8015528:	e00f      	b.n	801554a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801552a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801552c:	330e      	adds	r3, #14
 801552e:	4619      	mov	r1, r3
 8015530:	6878      	ldr	r0, [r7, #4]
 8015532:	f7f6 febf 	bl	800c2b4 <pbuf_remove_header>
 8015536:	4603      	mov	r3, r0
 8015538:	2b00      	cmp	r3, #0
 801553a:	d006      	beq.n	801554a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801553c:	4b2e      	ldr	r3, [pc, #184]	; (80155f8 <icmp_input+0x1f8>)
 801553e:	22c7      	movs	r2, #199	; 0xc7
 8015540:	4930      	ldr	r1, [pc, #192]	; (8015604 <icmp_input+0x204>)
 8015542:	482f      	ldr	r0, [pc, #188]	; (8015600 <icmp_input+0x200>)
 8015544:	f001 fdcc 	bl	80170e0 <iprintf>
          goto icmperr;
 8015548:	e04b      	b.n	80155e2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	685b      	ldr	r3, [r3, #4]
 801554e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015550:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015552:	4619      	mov	r1, r3
 8015554:	6878      	ldr	r0, [r7, #4]
 8015556:	f7f6 fe9d 	bl	800c294 <pbuf_add_header>
 801555a:	4603      	mov	r3, r0
 801555c:	2b00      	cmp	r3, #0
 801555e:	d12b      	bne.n	80155b8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015560:	687b      	ldr	r3, [r7, #4]
 8015562:	685b      	ldr	r3, [r3, #4]
 8015564:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8015566:	69fb      	ldr	r3, [r7, #28]
 8015568:	681a      	ldr	r2, [r3, #0]
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801556e:	4b20      	ldr	r3, [pc, #128]	; (80155f0 <icmp_input+0x1f0>)
 8015570:	691a      	ldr	r2, [r3, #16]
 8015572:	68fb      	ldr	r3, [r7, #12]
 8015574:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8015576:	693b      	ldr	r3, [r7, #16]
 8015578:	2200      	movs	r2, #0
 801557a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801557c:	693b      	ldr	r3, [r7, #16]
 801557e:	2200      	movs	r2, #0
 8015580:	709a      	strb	r2, [r3, #2]
 8015582:	2200      	movs	r2, #0
 8015584:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8015586:	68fb      	ldr	r3, [r7, #12]
 8015588:	22ff      	movs	r2, #255	; 0xff
 801558a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801558c:	68fb      	ldr	r3, [r7, #12]
 801558e:	2200      	movs	r2, #0
 8015590:	729a      	strb	r2, [r3, #10]
 8015592:	2200      	movs	r2, #0
 8015594:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8015596:	683b      	ldr	r3, [r7, #0]
 8015598:	9302      	str	r3, [sp, #8]
 801559a:	2301      	movs	r3, #1
 801559c:	9301      	str	r3, [sp, #4]
 801559e:	2300      	movs	r3, #0
 80155a0:	9300      	str	r3, [sp, #0]
 80155a2:	23ff      	movs	r3, #255	; 0xff
 80155a4:	2200      	movs	r2, #0
 80155a6:	69f9      	ldr	r1, [r7, #28]
 80155a8:	6878      	ldr	r0, [r7, #4]
 80155aa:	f000 fa93 	bl	8015ad4 <ip4_output_if>
 80155ae:	4603      	mov	r3, r0
 80155b0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80155b2:	e001      	b.n	80155b8 <icmp_input+0x1b8>
      break;
 80155b4:	bf00      	nop
 80155b6:	e000      	b.n	80155ba <icmp_input+0x1ba>
      break;
 80155b8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80155ba:	6878      	ldr	r0, [r7, #4]
 80155bc:	f7f6 ff00 	bl	800c3c0 <pbuf_free>
  return;
 80155c0:	e013      	b.n	80155ea <icmp_input+0x1ea>
    goto lenerr;
 80155c2:	bf00      	nop
 80155c4:	e002      	b.n	80155cc <icmp_input+0x1cc>
    goto lenerr;
 80155c6:	bf00      	nop
 80155c8:	e000      	b.n	80155cc <icmp_input+0x1cc>
        goto lenerr;
 80155ca:	bf00      	nop
lenerr:
  pbuf_free(p);
 80155cc:	6878      	ldr	r0, [r7, #4]
 80155ce:	f7f6 fef7 	bl	800c3c0 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80155d2:	e00a      	b.n	80155ea <icmp_input+0x1ea>
        goto icmperr;
 80155d4:	bf00      	nop
 80155d6:	e004      	b.n	80155e2 <icmp_input+0x1e2>
        goto icmperr;
 80155d8:	bf00      	nop
 80155da:	e002      	b.n	80155e2 <icmp_input+0x1e2>
          goto icmperr;
 80155dc:	bf00      	nop
 80155de:	e000      	b.n	80155e2 <icmp_input+0x1e2>
          goto icmperr;
 80155e0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80155e2:	6878      	ldr	r0, [r7, #4]
 80155e4:	f7f6 feec 	bl	800c3c0 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80155e8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80155ea:	3728      	adds	r7, #40	; 0x28
 80155ec:	46bd      	mov	sp, r7
 80155ee:	bd80      	pop	{r7, pc}
 80155f0:	200098e0 	.word	0x200098e0
 80155f4:	200098f4 	.word	0x200098f4
 80155f8:	0801ab20 	.word	0x0801ab20
 80155fc:	0801ab58 	.word	0x0801ab58
 8015600:	0801ab90 	.word	0x0801ab90
 8015604:	0801abb8 	.word	0x0801abb8

08015608 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b082      	sub	sp, #8
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
 8015610:	460b      	mov	r3, r1
 8015612:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8015614:	78fb      	ldrb	r3, [r7, #3]
 8015616:	461a      	mov	r2, r3
 8015618:	2103      	movs	r1, #3
 801561a:	6878      	ldr	r0, [r7, #4]
 801561c:	f000 f814 	bl	8015648 <icmp_send_response>
}
 8015620:	bf00      	nop
 8015622:	3708      	adds	r7, #8
 8015624:	46bd      	mov	sp, r7
 8015626:	bd80      	pop	{r7, pc}

08015628 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8015628:	b580      	push	{r7, lr}
 801562a:	b082      	sub	sp, #8
 801562c:	af00      	add	r7, sp, #0
 801562e:	6078      	str	r0, [r7, #4]
 8015630:	460b      	mov	r3, r1
 8015632:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8015634:	78fb      	ldrb	r3, [r7, #3]
 8015636:	461a      	mov	r2, r3
 8015638:	210b      	movs	r1, #11
 801563a:	6878      	ldr	r0, [r7, #4]
 801563c:	f000 f804 	bl	8015648 <icmp_send_response>
}
 8015640:	bf00      	nop
 8015642:	3708      	adds	r7, #8
 8015644:	46bd      	mov	sp, r7
 8015646:	bd80      	pop	{r7, pc}

08015648 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8015648:	b580      	push	{r7, lr}
 801564a:	b08c      	sub	sp, #48	; 0x30
 801564c:	af04      	add	r7, sp, #16
 801564e:	6078      	str	r0, [r7, #4]
 8015650:	460b      	mov	r3, r1
 8015652:	70fb      	strb	r3, [r7, #3]
 8015654:	4613      	mov	r3, r2
 8015656:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8015658:	f44f 7220 	mov.w	r2, #640	; 0x280
 801565c:	2124      	movs	r1, #36	; 0x24
 801565e:	2022      	movs	r0, #34	; 0x22
 8015660:	f7f6 fbca 	bl	800bdf8 <pbuf_alloc>
 8015664:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8015666:	69fb      	ldr	r3, [r7, #28]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d04c      	beq.n	8015706 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801566c:	69fb      	ldr	r3, [r7, #28]
 801566e:	895b      	ldrh	r3, [r3, #10]
 8015670:	2b23      	cmp	r3, #35	; 0x23
 8015672:	d806      	bhi.n	8015682 <icmp_send_response+0x3a>
 8015674:	4b26      	ldr	r3, [pc, #152]	; (8015710 <icmp_send_response+0xc8>)
 8015676:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801567a:	4926      	ldr	r1, [pc, #152]	; (8015714 <icmp_send_response+0xcc>)
 801567c:	4826      	ldr	r0, [pc, #152]	; (8015718 <icmp_send_response+0xd0>)
 801567e:	f001 fd2f 	bl	80170e0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015682:	687b      	ldr	r3, [r7, #4]
 8015684:	685b      	ldr	r3, [r3, #4]
 8015686:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8015688:	69fb      	ldr	r3, [r7, #28]
 801568a:	685b      	ldr	r3, [r3, #4]
 801568c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801568e:	697b      	ldr	r3, [r7, #20]
 8015690:	78fa      	ldrb	r2, [r7, #3]
 8015692:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015694:	697b      	ldr	r3, [r7, #20]
 8015696:	78ba      	ldrb	r2, [r7, #2]
 8015698:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801569a:	697b      	ldr	r3, [r7, #20]
 801569c:	2200      	movs	r2, #0
 801569e:	711a      	strb	r2, [r3, #4]
 80156a0:	2200      	movs	r2, #0
 80156a2:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80156a4:	697b      	ldr	r3, [r7, #20]
 80156a6:	2200      	movs	r2, #0
 80156a8:	719a      	strb	r2, [r3, #6]
 80156aa:	2200      	movs	r2, #0
 80156ac:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80156ae:	69fb      	ldr	r3, [r7, #28]
 80156b0:	685b      	ldr	r3, [r3, #4]
 80156b2:	f103 0008 	add.w	r0, r3, #8
 80156b6:	687b      	ldr	r3, [r7, #4]
 80156b8:	685b      	ldr	r3, [r3, #4]
 80156ba:	221c      	movs	r2, #28
 80156bc:	4619      	mov	r1, r3
 80156be:	f001 fc64 	bl	8016f8a <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80156c2:	69bb      	ldr	r3, [r7, #24]
 80156c4:	68db      	ldr	r3, [r3, #12]
 80156c6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80156c8:	f107 030c 	add.w	r3, r7, #12
 80156cc:	4618      	mov	r0, r3
 80156ce:	f000 f825 	bl	801571c <ip4_route>
 80156d2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80156d4:	693b      	ldr	r3, [r7, #16]
 80156d6:	2b00      	cmp	r3, #0
 80156d8:	d011      	beq.n	80156fe <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80156da:	697b      	ldr	r3, [r7, #20]
 80156dc:	2200      	movs	r2, #0
 80156de:	709a      	strb	r2, [r3, #2]
 80156e0:	2200      	movs	r2, #0
 80156e2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80156e4:	f107 020c 	add.w	r2, r7, #12
 80156e8:	693b      	ldr	r3, [r7, #16]
 80156ea:	9302      	str	r3, [sp, #8]
 80156ec:	2301      	movs	r3, #1
 80156ee:	9301      	str	r3, [sp, #4]
 80156f0:	2300      	movs	r3, #0
 80156f2:	9300      	str	r3, [sp, #0]
 80156f4:	23ff      	movs	r3, #255	; 0xff
 80156f6:	2100      	movs	r1, #0
 80156f8:	69f8      	ldr	r0, [r7, #28]
 80156fa:	f000 f9eb 	bl	8015ad4 <ip4_output_if>
  }
  pbuf_free(q);
 80156fe:	69f8      	ldr	r0, [r7, #28]
 8015700:	f7f6 fe5e 	bl	800c3c0 <pbuf_free>
 8015704:	e000      	b.n	8015708 <icmp_send_response+0xc0>
    return;
 8015706:	bf00      	nop
}
 8015708:	3720      	adds	r7, #32
 801570a:	46bd      	mov	sp, r7
 801570c:	bd80      	pop	{r7, pc}
 801570e:	bf00      	nop
 8015710:	0801ab20 	.word	0x0801ab20
 8015714:	0801abec 	.word	0x0801abec
 8015718:	0801ab90 	.word	0x0801ab90

0801571c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801571c:	b480      	push	{r7}
 801571e:	b085      	sub	sp, #20
 8015720:	af00      	add	r7, sp, #0
 8015722:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8015724:	4b33      	ldr	r3, [pc, #204]	; (80157f4 <ip4_route+0xd8>)
 8015726:	681b      	ldr	r3, [r3, #0]
 8015728:	60fb      	str	r3, [r7, #12]
 801572a:	e036      	b.n	801579a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015732:	f003 0301 	and.w	r3, r3, #1
 8015736:	b2db      	uxtb	r3, r3
 8015738:	2b00      	cmp	r3, #0
 801573a:	d02b      	beq.n	8015794 <ip4_route+0x78>
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015742:	089b      	lsrs	r3, r3, #2
 8015744:	f003 0301 	and.w	r3, r3, #1
 8015748:	b2db      	uxtb	r3, r3
 801574a:	2b00      	cmp	r3, #0
 801574c:	d022      	beq.n	8015794 <ip4_route+0x78>
 801574e:	68fb      	ldr	r3, [r7, #12]
 8015750:	3304      	adds	r3, #4
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	2b00      	cmp	r3, #0
 8015756:	d01d      	beq.n	8015794 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8015758:	687b      	ldr	r3, [r7, #4]
 801575a:	681a      	ldr	r2, [r3, #0]
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	3304      	adds	r3, #4
 8015760:	681b      	ldr	r3, [r3, #0]
 8015762:	405a      	eors	r2, r3
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	3308      	adds	r3, #8
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	4013      	ands	r3, r2
 801576c:	2b00      	cmp	r3, #0
 801576e:	d101      	bne.n	8015774 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015770:	68fb      	ldr	r3, [r7, #12]
 8015772:	e038      	b.n	80157e6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015774:	68fb      	ldr	r3, [r7, #12]
 8015776:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801577a:	f003 0302 	and.w	r3, r3, #2
 801577e:	2b00      	cmp	r3, #0
 8015780:	d108      	bne.n	8015794 <ip4_route+0x78>
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	681a      	ldr	r2, [r3, #0]
 8015786:	68fb      	ldr	r3, [r7, #12]
 8015788:	330c      	adds	r3, #12
 801578a:	681b      	ldr	r3, [r3, #0]
 801578c:	429a      	cmp	r2, r3
 801578e:	d101      	bne.n	8015794 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	e028      	b.n	80157e6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	681b      	ldr	r3, [r3, #0]
 8015798:	60fb      	str	r3, [r7, #12]
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	2b00      	cmp	r3, #0
 801579e:	d1c5      	bne.n	801572c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80157a0:	4b15      	ldr	r3, [pc, #84]	; (80157f8 <ip4_route+0xdc>)
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	2b00      	cmp	r3, #0
 80157a6:	d01a      	beq.n	80157de <ip4_route+0xc2>
 80157a8:	4b13      	ldr	r3, [pc, #76]	; (80157f8 <ip4_route+0xdc>)
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80157b0:	f003 0301 	and.w	r3, r3, #1
 80157b4:	2b00      	cmp	r3, #0
 80157b6:	d012      	beq.n	80157de <ip4_route+0xc2>
 80157b8:	4b0f      	ldr	r3, [pc, #60]	; (80157f8 <ip4_route+0xdc>)
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80157c0:	f003 0304 	and.w	r3, r3, #4
 80157c4:	2b00      	cmp	r3, #0
 80157c6:	d00a      	beq.n	80157de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80157c8:	4b0b      	ldr	r3, [pc, #44]	; (80157f8 <ip4_route+0xdc>)
 80157ca:	681b      	ldr	r3, [r3, #0]
 80157cc:	3304      	adds	r3, #4
 80157ce:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d004      	beq.n	80157de <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80157d4:	687b      	ldr	r3, [r7, #4]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	b2db      	uxtb	r3, r3
 80157da:	2b7f      	cmp	r3, #127	; 0x7f
 80157dc:	d101      	bne.n	80157e2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80157de:	2300      	movs	r3, #0
 80157e0:	e001      	b.n	80157e6 <ip4_route+0xca>
  }

  return netif_default;
 80157e2:	4b05      	ldr	r3, [pc, #20]	; (80157f8 <ip4_route+0xdc>)
 80157e4:	681b      	ldr	r3, [r3, #0]
}
 80157e6:	4618      	mov	r0, r3
 80157e8:	3714      	adds	r7, #20
 80157ea:	46bd      	mov	sp, r7
 80157ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80157f0:	4770      	bx	lr
 80157f2:	bf00      	nop
 80157f4:	2000f20c 	.word	0x2000f20c
 80157f8:	2000f210 	.word	0x2000f210

080157fc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80157fc:	b580      	push	{r7, lr}
 80157fe:	b082      	sub	sp, #8
 8015800:	af00      	add	r7, sp, #0
 8015802:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8015804:	687b      	ldr	r3, [r7, #4]
 8015806:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 801580a:	f003 0301 	and.w	r3, r3, #1
 801580e:	b2db      	uxtb	r3, r3
 8015810:	2b00      	cmp	r3, #0
 8015812:	d016      	beq.n	8015842 <ip4_input_accept+0x46>
 8015814:	687b      	ldr	r3, [r7, #4]
 8015816:	3304      	adds	r3, #4
 8015818:	681b      	ldr	r3, [r3, #0]
 801581a:	2b00      	cmp	r3, #0
 801581c:	d011      	beq.n	8015842 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801581e:	4b0b      	ldr	r3, [pc, #44]	; (801584c <ip4_input_accept+0x50>)
 8015820:	695a      	ldr	r2, [r3, #20]
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	3304      	adds	r3, #4
 8015826:	681b      	ldr	r3, [r3, #0]
 8015828:	429a      	cmp	r2, r3
 801582a:	d008      	beq.n	801583e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801582c:	4b07      	ldr	r3, [pc, #28]	; (801584c <ip4_input_accept+0x50>)
 801582e:	695b      	ldr	r3, [r3, #20]
 8015830:	6879      	ldr	r1, [r7, #4]
 8015832:	4618      	mov	r0, r3
 8015834:	f000 fa34 	bl	8015ca0 <ip4_addr_isbroadcast_u32>
 8015838:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801583a:	2b00      	cmp	r3, #0
 801583c:	d001      	beq.n	8015842 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801583e:	2301      	movs	r3, #1
 8015840:	e000      	b.n	8015844 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8015842:	2300      	movs	r3, #0
}
 8015844:	4618      	mov	r0, r3
 8015846:	3708      	adds	r7, #8
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}
 801584c:	200098e0 	.word	0x200098e0

08015850 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b088      	sub	sp, #32
 8015854:	af00      	add	r7, sp, #0
 8015856:	6078      	str	r0, [r7, #4]
 8015858:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 801585a:	2301      	movs	r3, #1
 801585c:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	685b      	ldr	r3, [r3, #4]
 8015862:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8015864:	69fb      	ldr	r3, [r7, #28]
 8015866:	781b      	ldrb	r3, [r3, #0]
 8015868:	091b      	lsrs	r3, r3, #4
 801586a:	b2db      	uxtb	r3, r3
 801586c:	2b04      	cmp	r3, #4
 801586e:	d004      	beq.n	801587a <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015870:	6878      	ldr	r0, [r7, #4]
 8015872:	f7f6 fda5 	bl	800c3c0 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015876:	2300      	movs	r3, #0
 8015878:	e123      	b.n	8015ac2 <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801587a:	69fb      	ldr	r3, [r7, #28]
 801587c:	781b      	ldrb	r3, [r3, #0]
 801587e:	f003 030f 	and.w	r3, r3, #15
 8015882:	b2db      	uxtb	r3, r3
 8015884:	009b      	lsls	r3, r3, #2
 8015886:	b2db      	uxtb	r3, r3
 8015888:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801588a:	69fb      	ldr	r3, [r7, #28]
 801588c:	885b      	ldrh	r3, [r3, #2]
 801588e:	b29b      	uxth	r3, r3
 8015890:	4618      	mov	r0, r3
 8015892:	f7f4 ff6d 	bl	800a770 <lwip_htons>
 8015896:	4603      	mov	r3, r0
 8015898:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	891b      	ldrh	r3, [r3, #8]
 801589e:	8a3a      	ldrh	r2, [r7, #16]
 80158a0:	429a      	cmp	r2, r3
 80158a2:	d204      	bcs.n	80158ae <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 80158a4:	8a3b      	ldrh	r3, [r7, #16]
 80158a6:	4619      	mov	r1, r3
 80158a8:	6878      	ldr	r0, [r7, #4]
 80158aa:	f7f6 fc03 	bl	800c0b4 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	895b      	ldrh	r3, [r3, #10]
 80158b2:	8a7a      	ldrh	r2, [r7, #18]
 80158b4:	429a      	cmp	r2, r3
 80158b6:	d807      	bhi.n	80158c8 <ip4_input+0x78>
 80158b8:	687b      	ldr	r3, [r7, #4]
 80158ba:	891b      	ldrh	r3, [r3, #8]
 80158bc:	8a3a      	ldrh	r2, [r7, #16]
 80158be:	429a      	cmp	r2, r3
 80158c0:	d802      	bhi.n	80158c8 <ip4_input+0x78>
 80158c2:	8a7b      	ldrh	r3, [r7, #18]
 80158c4:	2b13      	cmp	r3, #19
 80158c6:	d804      	bhi.n	80158d2 <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80158c8:	6878      	ldr	r0, [r7, #4]
 80158ca:	f7f6 fd79 	bl	800c3c0 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80158ce:	2300      	movs	r3, #0
 80158d0:	e0f7      	b.n	8015ac2 <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80158d2:	69fb      	ldr	r3, [r7, #28]
 80158d4:	691b      	ldr	r3, [r3, #16]
 80158d6:	4a7d      	ldr	r2, [pc, #500]	; (8015acc <ip4_input+0x27c>)
 80158d8:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80158da:	69fb      	ldr	r3, [r7, #28]
 80158dc:	68db      	ldr	r3, [r3, #12]
 80158de:	4a7b      	ldr	r2, [pc, #492]	; (8015acc <ip4_input+0x27c>)
 80158e0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80158e2:	4b7a      	ldr	r3, [pc, #488]	; (8015acc <ip4_input+0x27c>)
 80158e4:	695b      	ldr	r3, [r3, #20]
 80158e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80158ea:	2be0      	cmp	r3, #224	; 0xe0
 80158ec:	d112      	bne.n	8015914 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80158ee:	683b      	ldr	r3, [r7, #0]
 80158f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80158f4:	f003 0301 	and.w	r3, r3, #1
 80158f8:	b2db      	uxtb	r3, r3
 80158fa:	2b00      	cmp	r3, #0
 80158fc:	d007      	beq.n	801590e <ip4_input+0xbe>
 80158fe:	683b      	ldr	r3, [r7, #0]
 8015900:	3304      	adds	r3, #4
 8015902:	681b      	ldr	r3, [r3, #0]
 8015904:	2b00      	cmp	r3, #0
 8015906:	d002      	beq.n	801590e <ip4_input+0xbe>
      netif = inp;
 8015908:	683b      	ldr	r3, [r7, #0]
 801590a:	61bb      	str	r3, [r7, #24]
 801590c:	e02a      	b.n	8015964 <ip4_input+0x114>
    } else {
      netif = NULL;
 801590e:	2300      	movs	r3, #0
 8015910:	61bb      	str	r3, [r7, #24]
 8015912:	e027      	b.n	8015964 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015914:	6838      	ldr	r0, [r7, #0]
 8015916:	f7ff ff71 	bl	80157fc <ip4_input_accept>
 801591a:	4603      	mov	r3, r0
 801591c:	2b00      	cmp	r3, #0
 801591e:	d002      	beq.n	8015926 <ip4_input+0xd6>
      netif = inp;
 8015920:	683b      	ldr	r3, [r7, #0]
 8015922:	61bb      	str	r3, [r7, #24]
 8015924:	e01e      	b.n	8015964 <ip4_input+0x114>
    } else {
      netif = NULL;
 8015926:	2300      	movs	r3, #0
 8015928:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801592a:	4b68      	ldr	r3, [pc, #416]	; (8015acc <ip4_input+0x27c>)
 801592c:	695b      	ldr	r3, [r3, #20]
 801592e:	b2db      	uxtb	r3, r3
 8015930:	2b7f      	cmp	r3, #127	; 0x7f
 8015932:	d017      	beq.n	8015964 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8015934:	4b66      	ldr	r3, [pc, #408]	; (8015ad0 <ip4_input+0x280>)
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	61bb      	str	r3, [r7, #24]
 801593a:	e00e      	b.n	801595a <ip4_input+0x10a>
          if (netif == inp) {
 801593c:	69ba      	ldr	r2, [r7, #24]
 801593e:	683b      	ldr	r3, [r7, #0]
 8015940:	429a      	cmp	r2, r3
 8015942:	d006      	beq.n	8015952 <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8015944:	69b8      	ldr	r0, [r7, #24]
 8015946:	f7ff ff59 	bl	80157fc <ip4_input_accept>
 801594a:	4603      	mov	r3, r0
 801594c:	2b00      	cmp	r3, #0
 801594e:	d108      	bne.n	8015962 <ip4_input+0x112>
 8015950:	e000      	b.n	8015954 <ip4_input+0x104>
            continue;
 8015952:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015954:	69bb      	ldr	r3, [r7, #24]
 8015956:	681b      	ldr	r3, [r3, #0]
 8015958:	61bb      	str	r3, [r7, #24]
 801595a:	69bb      	ldr	r3, [r7, #24]
 801595c:	2b00      	cmp	r3, #0
 801595e:	d1ed      	bne.n	801593c <ip4_input+0xec>
 8015960:	e000      	b.n	8015964 <ip4_input+0x114>
            break;
 8015962:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 8015964:	69bb      	ldr	r3, [r7, #24]
 8015966:	2b00      	cmp	r3, #0
 8015968:	d111      	bne.n	801598e <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 801596a:	69fb      	ldr	r3, [r7, #28]
 801596c:	7a5b      	ldrb	r3, [r3, #9]
 801596e:	2b11      	cmp	r3, #17
 8015970:	d10d      	bne.n	801598e <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 8015972:	8a7b      	ldrh	r3, [r7, #18]
 8015974:	69fa      	ldr	r2, [r7, #28]
 8015976:	4413      	add	r3, r2
 8015978:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 801597a:	68fb      	ldr	r3, [r7, #12]
 801597c:	885b      	ldrh	r3, [r3, #2]
 801597e:	b29b      	uxth	r3, r3
 8015980:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8015984:	d103      	bne.n	801598e <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015986:	683b      	ldr	r3, [r7, #0]
 8015988:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 801598a:	2300      	movs	r3, #0
 801598c:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801598e:	697b      	ldr	r3, [r7, #20]
 8015990:	2b00      	cmp	r3, #0
 8015992:	d017      	beq.n	80159c4 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015994:	4b4d      	ldr	r3, [pc, #308]	; (8015acc <ip4_input+0x27c>)
 8015996:	691b      	ldr	r3, [r3, #16]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d013      	beq.n	80159c4 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801599c:	4b4b      	ldr	r3, [pc, #300]	; (8015acc <ip4_input+0x27c>)
 801599e:	691b      	ldr	r3, [r3, #16]
 80159a0:	6839      	ldr	r1, [r7, #0]
 80159a2:	4618      	mov	r0, r3
 80159a4:	f000 f97c 	bl	8015ca0 <ip4_addr_isbroadcast_u32>
 80159a8:	4603      	mov	r3, r0
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d105      	bne.n	80159ba <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80159ae:	4b47      	ldr	r3, [pc, #284]	; (8015acc <ip4_input+0x27c>)
 80159b0:	691b      	ldr	r3, [r3, #16]
 80159b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80159b6:	2be0      	cmp	r3, #224	; 0xe0
 80159b8:	d104      	bne.n	80159c4 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80159ba:	6878      	ldr	r0, [r7, #4]
 80159bc:	f7f6 fd00 	bl	800c3c0 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80159c0:	2300      	movs	r3, #0
 80159c2:	e07e      	b.n	8015ac2 <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80159c4:	69bb      	ldr	r3, [r7, #24]
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d104      	bne.n	80159d4 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80159ca:	6878      	ldr	r0, [r7, #4]
 80159cc:	f7f6 fcf8 	bl	800c3c0 <pbuf_free>
    return ERR_OK;
 80159d0:	2300      	movs	r3, #0
 80159d2:	e076      	b.n	8015ac2 <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80159d4:	69fb      	ldr	r3, [r7, #28]
 80159d6:	88db      	ldrh	r3, [r3, #6]
 80159d8:	b29b      	uxth	r3, r3
 80159da:	461a      	mov	r2, r3
 80159dc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80159e0:	4013      	ands	r3, r2
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d00b      	beq.n	80159fe <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80159e6:	6878      	ldr	r0, [r7, #4]
 80159e8:	f000 fca0 	bl	801632c <ip4_reass>
 80159ec:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	2b00      	cmp	r3, #0
 80159f2:	d101      	bne.n	80159f8 <ip4_input+0x1a8>
      return ERR_OK;
 80159f4:	2300      	movs	r3, #0
 80159f6:	e064      	b.n	8015ac2 <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	685b      	ldr	r3, [r3, #4]
 80159fc:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80159fe:	4a33      	ldr	r2, [pc, #204]	; (8015acc <ip4_input+0x27c>)
 8015a00:	69bb      	ldr	r3, [r7, #24]
 8015a02:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015a04:	4a31      	ldr	r2, [pc, #196]	; (8015acc <ip4_input+0x27c>)
 8015a06:	683b      	ldr	r3, [r7, #0]
 8015a08:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015a0a:	4a30      	ldr	r2, [pc, #192]	; (8015acc <ip4_input+0x27c>)
 8015a0c:	69fb      	ldr	r3, [r7, #28]
 8015a0e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015a10:	69fb      	ldr	r3, [r7, #28]
 8015a12:	781b      	ldrb	r3, [r3, #0]
 8015a14:	f003 030f 	and.w	r3, r3, #15
 8015a18:	b2db      	uxtb	r3, r3
 8015a1a:	009b      	lsls	r3, r3, #2
 8015a1c:	b2db      	uxtb	r3, r3
 8015a1e:	b29a      	uxth	r2, r3
 8015a20:	4b2a      	ldr	r3, [pc, #168]	; (8015acc <ip4_input+0x27c>)
 8015a22:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8015a24:	8a7b      	ldrh	r3, [r7, #18]
 8015a26:	4619      	mov	r1, r3
 8015a28:	6878      	ldr	r0, [r7, #4]
 8015a2a:	f7f6 fc43 	bl	800c2b4 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8015a2e:	69fb      	ldr	r3, [r7, #28]
 8015a30:	7a5b      	ldrb	r3, [r3, #9]
 8015a32:	2b11      	cmp	r3, #17
 8015a34:	d006      	beq.n	8015a44 <ip4_input+0x1f4>
 8015a36:	2b11      	cmp	r3, #17
 8015a38:	dc13      	bgt.n	8015a62 <ip4_input+0x212>
 8015a3a:	2b01      	cmp	r3, #1
 8015a3c:	d00c      	beq.n	8015a58 <ip4_input+0x208>
 8015a3e:	2b06      	cmp	r3, #6
 8015a40:	d005      	beq.n	8015a4e <ip4_input+0x1fe>
 8015a42:	e00e      	b.n	8015a62 <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8015a44:	6839      	ldr	r1, [r7, #0]
 8015a46:	6878      	ldr	r0, [r7, #4]
 8015a48:	f7fc fae8 	bl	801201c <udp_input>
        break;
 8015a4c:	e026      	b.n	8015a9c <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8015a4e:	6839      	ldr	r1, [r7, #0]
 8015a50:	6878      	ldr	r0, [r7, #4]
 8015a52:	f7f8 faf9 	bl	800e048 <tcp_input>
        break;
 8015a56:	e021      	b.n	8015a9c <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8015a58:	6839      	ldr	r1, [r7, #0]
 8015a5a:	6878      	ldr	r0, [r7, #4]
 8015a5c:	f7ff fcd0 	bl	8015400 <icmp_input>
        break;
 8015a60:	e01c      	b.n	8015a9c <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015a62:	4b1a      	ldr	r3, [pc, #104]	; (8015acc <ip4_input+0x27c>)
 8015a64:	695b      	ldr	r3, [r3, #20]
 8015a66:	69b9      	ldr	r1, [r7, #24]
 8015a68:	4618      	mov	r0, r3
 8015a6a:	f000 f919 	bl	8015ca0 <ip4_addr_isbroadcast_u32>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	2b00      	cmp	r3, #0
 8015a72:	d10f      	bne.n	8015a94 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015a74:	4b15      	ldr	r3, [pc, #84]	; (8015acc <ip4_input+0x27c>)
 8015a76:	695b      	ldr	r3, [r3, #20]
 8015a78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8015a7c:	2be0      	cmp	r3, #224	; 0xe0
 8015a7e:	d009      	beq.n	8015a94 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8015a80:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015a84:	4619      	mov	r1, r3
 8015a86:	6878      	ldr	r0, [r7, #4]
 8015a88:	f7f6 fc87 	bl	800c39a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015a8c:	2102      	movs	r1, #2
 8015a8e:	6878      	ldr	r0, [r7, #4]
 8015a90:	f7ff fdba 	bl	8015608 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015a94:	6878      	ldr	r0, [r7, #4]
 8015a96:	f7f6 fc93 	bl	800c3c0 <pbuf_free>
        break;
 8015a9a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015a9c:	4b0b      	ldr	r3, [pc, #44]	; (8015acc <ip4_input+0x27c>)
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8015aa2:	4b0a      	ldr	r3, [pc, #40]	; (8015acc <ip4_input+0x27c>)
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015aa8:	4b08      	ldr	r3, [pc, #32]	; (8015acc <ip4_input+0x27c>)
 8015aaa:	2200      	movs	r2, #0
 8015aac:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015aae:	4b07      	ldr	r3, [pc, #28]	; (8015acc <ip4_input+0x27c>)
 8015ab0:	2200      	movs	r2, #0
 8015ab2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015ab4:	4b05      	ldr	r3, [pc, #20]	; (8015acc <ip4_input+0x27c>)
 8015ab6:	2200      	movs	r2, #0
 8015ab8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015aba:	4b04      	ldr	r3, [pc, #16]	; (8015acc <ip4_input+0x27c>)
 8015abc:	2200      	movs	r2, #0
 8015abe:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015ac0:	2300      	movs	r3, #0
}
 8015ac2:	4618      	mov	r0, r3
 8015ac4:	3720      	adds	r7, #32
 8015ac6:	46bd      	mov	sp, r7
 8015ac8:	bd80      	pop	{r7, pc}
 8015aca:	bf00      	nop
 8015acc:	200098e0 	.word	0x200098e0
 8015ad0:	2000f20c 	.word	0x2000f20c

08015ad4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b08a      	sub	sp, #40	; 0x28
 8015ad8:	af04      	add	r7, sp, #16
 8015ada:	60f8      	str	r0, [r7, #12]
 8015adc:	60b9      	str	r1, [r7, #8]
 8015ade:	607a      	str	r2, [r7, #4]
 8015ae0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8015ae2:	68bb      	ldr	r3, [r7, #8]
 8015ae4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d009      	beq.n	8015b00 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015aec:	68bb      	ldr	r3, [r7, #8]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d003      	beq.n	8015afa <ip4_output_if+0x26>
 8015af2:	68bb      	ldr	r3, [r7, #8]
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	2b00      	cmp	r3, #0
 8015af8:	d102      	bne.n	8015b00 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015afc:	3304      	adds	r3, #4
 8015afe:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015b00:	78fa      	ldrb	r2, [r7, #3]
 8015b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b04:	9302      	str	r3, [sp, #8]
 8015b06:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015b0a:	9301      	str	r3, [sp, #4]
 8015b0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015b10:	9300      	str	r3, [sp, #0]
 8015b12:	4613      	mov	r3, r2
 8015b14:	687a      	ldr	r2, [r7, #4]
 8015b16:	6979      	ldr	r1, [r7, #20]
 8015b18:	68f8      	ldr	r0, [r7, #12]
 8015b1a:	f000 f805 	bl	8015b28 <ip4_output_if_src>
 8015b1e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015b20:	4618      	mov	r0, r3
 8015b22:	3718      	adds	r7, #24
 8015b24:	46bd      	mov	sp, r7
 8015b26:	bd80      	pop	{r7, pc}

08015b28 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8015b28:	b580      	push	{r7, lr}
 8015b2a:	b088      	sub	sp, #32
 8015b2c:	af00      	add	r7, sp, #0
 8015b2e:	60f8      	str	r0, [r7, #12]
 8015b30:	60b9      	str	r1, [r7, #8]
 8015b32:	607a      	str	r2, [r7, #4]
 8015b34:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8015b36:	68fb      	ldr	r3, [r7, #12]
 8015b38:	7b9b      	ldrb	r3, [r3, #14]
 8015b3a:	2b01      	cmp	r3, #1
 8015b3c:	d006      	beq.n	8015b4c <ip4_output_if_src+0x24>
 8015b3e:	4b52      	ldr	r3, [pc, #328]	; (8015c88 <ip4_output_if_src+0x160>)
 8015b40:	f44f 7255 	mov.w	r2, #852	; 0x354
 8015b44:	4951      	ldr	r1, [pc, #324]	; (8015c8c <ip4_output_if_src+0x164>)
 8015b46:	4852      	ldr	r0, [pc, #328]	; (8015c90 <ip4_output_if_src+0x168>)
 8015b48:	f001 faca 	bl	80170e0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	2b00      	cmp	r3, #0
 8015b50:	d060      	beq.n	8015c14 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8015b52:	2314      	movs	r3, #20
 8015b54:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8015b56:	2114      	movs	r1, #20
 8015b58:	68f8      	ldr	r0, [r7, #12]
 8015b5a:	f7f6 fb9b 	bl	800c294 <pbuf_add_header>
 8015b5e:	4603      	mov	r3, r0
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	d002      	beq.n	8015b6a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015b64:	f06f 0301 	mvn.w	r3, #1
 8015b68:	e089      	b.n	8015c7e <ip4_output_if_src+0x156>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8015b6a:	68fb      	ldr	r3, [r7, #12]
 8015b6c:	685b      	ldr	r3, [r3, #4]
 8015b6e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8015b70:	68fb      	ldr	r3, [r7, #12]
 8015b72:	895b      	ldrh	r3, [r3, #10]
 8015b74:	2b13      	cmp	r3, #19
 8015b76:	d806      	bhi.n	8015b86 <ip4_output_if_src+0x5e>
 8015b78:	4b43      	ldr	r3, [pc, #268]	; (8015c88 <ip4_output_if_src+0x160>)
 8015b7a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8015b7e:	4945      	ldr	r1, [pc, #276]	; (8015c94 <ip4_output_if_src+0x16c>)
 8015b80:	4843      	ldr	r0, [pc, #268]	; (8015c90 <ip4_output_if_src+0x168>)
 8015b82:	f001 faad 	bl	80170e0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015b86:	69fb      	ldr	r3, [r7, #28]
 8015b88:	78fa      	ldrb	r2, [r7, #3]
 8015b8a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015b8c:	69fb      	ldr	r3, [r7, #28]
 8015b8e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8015b92:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	681a      	ldr	r2, [r3, #0]
 8015b98:	69fb      	ldr	r3, [r7, #28]
 8015b9a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015b9c:	8b7b      	ldrh	r3, [r7, #26]
 8015b9e:	089b      	lsrs	r3, r3, #2
 8015ba0:	b29b      	uxth	r3, r3
 8015ba2:	b2db      	uxtb	r3, r3
 8015ba4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015ba8:	b2da      	uxtb	r2, r3
 8015baa:	69fb      	ldr	r3, [r7, #28]
 8015bac:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015bae:	69fb      	ldr	r3, [r7, #28]
 8015bb0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015bb4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	891b      	ldrh	r3, [r3, #8]
 8015bba:	4618      	mov	r0, r3
 8015bbc:	f7f4 fdd8 	bl	800a770 <lwip_htons>
 8015bc0:	4603      	mov	r3, r0
 8015bc2:	461a      	mov	r2, r3
 8015bc4:	69fb      	ldr	r3, [r7, #28]
 8015bc6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015bc8:	69fb      	ldr	r3, [r7, #28]
 8015bca:	2200      	movs	r2, #0
 8015bcc:	719a      	strb	r2, [r3, #6]
 8015bce:	2200      	movs	r2, #0
 8015bd0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8015bd2:	4b31      	ldr	r3, [pc, #196]	; (8015c98 <ip4_output_if_src+0x170>)
 8015bd4:	881b      	ldrh	r3, [r3, #0]
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	f7f4 fdca 	bl	800a770 <lwip_htons>
 8015bdc:	4603      	mov	r3, r0
 8015bde:	461a      	mov	r2, r3
 8015be0:	69fb      	ldr	r3, [r7, #28]
 8015be2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015be4:	4b2c      	ldr	r3, [pc, #176]	; (8015c98 <ip4_output_if_src+0x170>)
 8015be6:	881b      	ldrh	r3, [r3, #0]
 8015be8:	3301      	adds	r3, #1
 8015bea:	b29a      	uxth	r2, r3
 8015bec:	4b2a      	ldr	r3, [pc, #168]	; (8015c98 <ip4_output_if_src+0x170>)
 8015bee:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015bf0:	68bb      	ldr	r3, [r7, #8]
 8015bf2:	2b00      	cmp	r3, #0
 8015bf4:	d104      	bne.n	8015c00 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015bf6:	4b29      	ldr	r3, [pc, #164]	; (8015c9c <ip4_output_if_src+0x174>)
 8015bf8:	681a      	ldr	r2, [r3, #0]
 8015bfa:	69fb      	ldr	r3, [r7, #28]
 8015bfc:	60da      	str	r2, [r3, #12]
 8015bfe:	e003      	b.n	8015c08 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015c00:	68bb      	ldr	r3, [r7, #8]
 8015c02:	681a      	ldr	r2, [r3, #0]
 8015c04:	69fb      	ldr	r3, [r7, #28]
 8015c06:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015c08:	69fb      	ldr	r3, [r7, #28]
 8015c0a:	2200      	movs	r2, #0
 8015c0c:	729a      	strb	r2, [r3, #10]
 8015c0e:	2200      	movs	r2, #0
 8015c10:	72da      	strb	r2, [r3, #11]
 8015c12:	e00f      	b.n	8015c34 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015c14:	68fb      	ldr	r3, [r7, #12]
 8015c16:	895b      	ldrh	r3, [r3, #10]
 8015c18:	2b13      	cmp	r3, #19
 8015c1a:	d802      	bhi.n	8015c22 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015c1c:	f06f 0301 	mvn.w	r3, #1
 8015c20:	e02d      	b.n	8015c7e <ip4_output_if_src+0x156>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8015c22:	68fb      	ldr	r3, [r7, #12]
 8015c24:	685b      	ldr	r3, [r3, #4]
 8015c26:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8015c28:	69fb      	ldr	r3, [r7, #28]
 8015c2a:	691b      	ldr	r3, [r3, #16]
 8015c2c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8015c2e:	f107 0314 	add.w	r3, r7, #20
 8015c32:	607b      	str	r3, [r7, #4]

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 8015c34:	687b      	ldr	r3, [r7, #4]
 8015c36:	681a      	ldr	r2, [r3, #0]
 8015c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c3a:	3304      	adds	r3, #4
 8015c3c:	681b      	ldr	r3, [r3, #0]
 8015c3e:	429a      	cmp	r2, r3
 8015c40:	d105      	bne.n	8015c4e <ip4_output_if_src+0x126>
      || ip4_addr_isloopback(dest)
#endif /* !LWIP_HAVE_LOOPIF */
     ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
 8015c42:	68f9      	ldr	r1, [r7, #12]
 8015c44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c46:	f7f5 fee7 	bl	800ba18 <netif_loop_output>
 8015c4a:	4603      	mov	r3, r0
 8015c4c:	e017      	b.n	8015c7e <ip4_output_if_src+0x156>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8015c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c50:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8015c52:	2b00      	cmp	r3, #0
 8015c54:	d00c      	beq.n	8015c70 <ip4_output_if_src+0x148>
 8015c56:	68fb      	ldr	r3, [r7, #12]
 8015c58:	891a      	ldrh	r2, [r3, #8]
 8015c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c5c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8015c5e:	429a      	cmp	r2, r3
 8015c60:	d906      	bls.n	8015c70 <ip4_output_if_src+0x148>
    return ip4_frag(p, netif, dest);
 8015c62:	687a      	ldr	r2, [r7, #4]
 8015c64:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015c66:	68f8      	ldr	r0, [r7, #12]
 8015c68:	f000 fd54 	bl	8016714 <ip4_frag>
 8015c6c:	4603      	mov	r3, r0
 8015c6e:	e006      	b.n	8015c7e <ip4_output_if_src+0x156>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8015c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c72:	695b      	ldr	r3, [r3, #20]
 8015c74:	687a      	ldr	r2, [r7, #4]
 8015c76:	68f9      	ldr	r1, [r7, #12]
 8015c78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c7a:	4798      	blx	r3
 8015c7c:	4603      	mov	r3, r0
}
 8015c7e:	4618      	mov	r0, r3
 8015c80:	3720      	adds	r7, #32
 8015c82:	46bd      	mov	sp, r7
 8015c84:	bd80      	pop	{r7, pc}
 8015c86:	bf00      	nop
 8015c88:	0801ac18 	.word	0x0801ac18
 8015c8c:	0801ac4c 	.word	0x0801ac4c
 8015c90:	0801ac58 	.word	0x0801ac58
 8015c94:	0801ac80 	.word	0x0801ac80
 8015c98:	2000f3e6 	.word	0x2000f3e6
 8015c9c:	0801b0f8 	.word	0x0801b0f8

08015ca0 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015ca0:	b480      	push	{r7}
 8015ca2:	b085      	sub	sp, #20
 8015ca4:	af00      	add	r7, sp, #0
 8015ca6:	6078      	str	r0, [r7, #4]
 8015ca8:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015cb4:	d002      	beq.n	8015cbc <ip4_addr_isbroadcast_u32+0x1c>
 8015cb6:	687b      	ldr	r3, [r7, #4]
 8015cb8:	2b00      	cmp	r3, #0
 8015cba:	d101      	bne.n	8015cc0 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015cbc:	2301      	movs	r3, #1
 8015cbe:	e02a      	b.n	8015d16 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015cc0:	683b      	ldr	r3, [r7, #0]
 8015cc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8015cc6:	f003 0302 	and.w	r3, r3, #2
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d101      	bne.n	8015cd2 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015cce:	2300      	movs	r3, #0
 8015cd0:	e021      	b.n	8015d16 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015cd2:	683b      	ldr	r3, [r7, #0]
 8015cd4:	3304      	adds	r3, #4
 8015cd6:	681b      	ldr	r3, [r3, #0]
 8015cd8:	687a      	ldr	r2, [r7, #4]
 8015cda:	429a      	cmp	r2, r3
 8015cdc:	d101      	bne.n	8015ce2 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015cde:	2300      	movs	r3, #0
 8015ce0:	e019      	b.n	8015d16 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015ce2:	68fa      	ldr	r2, [r7, #12]
 8015ce4:	683b      	ldr	r3, [r7, #0]
 8015ce6:	3304      	adds	r3, #4
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	405a      	eors	r2, r3
 8015cec:	683b      	ldr	r3, [r7, #0]
 8015cee:	3308      	adds	r3, #8
 8015cf0:	681b      	ldr	r3, [r3, #0]
 8015cf2:	4013      	ands	r3, r2
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d10d      	bne.n	8015d14 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015cf8:	683b      	ldr	r3, [r7, #0]
 8015cfa:	3308      	adds	r3, #8
 8015cfc:	681b      	ldr	r3, [r3, #0]
 8015cfe:	43da      	mvns	r2, r3
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015d04:	683b      	ldr	r3, [r7, #0]
 8015d06:	3308      	adds	r3, #8
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015d0c:	429a      	cmp	r2, r3
 8015d0e:	d101      	bne.n	8015d14 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015d10:	2301      	movs	r3, #1
 8015d12:	e000      	b.n	8015d16 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015d14:	2300      	movs	r3, #0
  }
}
 8015d16:	4618      	mov	r0, r3
 8015d18:	3714      	adds	r7, #20
 8015d1a:	46bd      	mov	sp, r7
 8015d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d20:	4770      	bx	lr
	...

08015d24 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b084      	sub	sp, #16
 8015d28:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015d2a:	2300      	movs	r3, #0
 8015d2c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015d2e:	4b12      	ldr	r3, [pc, #72]	; (8015d78 <ip_reass_tmr+0x54>)
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015d34:	e018      	b.n	8015d68 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	7fdb      	ldrb	r3, [r3, #31]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d00b      	beq.n	8015d56 <ip_reass_tmr+0x32>
      r->timer--;
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	7fdb      	ldrb	r3, [r3, #31]
 8015d42:	3b01      	subs	r3, #1
 8015d44:	b2da      	uxtb	r2, r3
 8015d46:	68fb      	ldr	r3, [r7, #12]
 8015d48:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015d4a:	68fb      	ldr	r3, [r7, #12]
 8015d4c:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015d4e:	68fb      	ldr	r3, [r7, #12]
 8015d50:	681b      	ldr	r3, [r3, #0]
 8015d52:	60fb      	str	r3, [r7, #12]
 8015d54:	e008      	b.n	8015d68 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015d56:	68fb      	ldr	r3, [r7, #12]
 8015d58:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015d5a:	68fb      	ldr	r3, [r7, #12]
 8015d5c:	681b      	ldr	r3, [r3, #0]
 8015d5e:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015d60:	68b9      	ldr	r1, [r7, #8]
 8015d62:	6878      	ldr	r0, [r7, #4]
 8015d64:	f000 f80a 	bl	8015d7c <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015d68:	68fb      	ldr	r3, [r7, #12]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d1e3      	bne.n	8015d36 <ip_reass_tmr+0x12>
    }
  }
}
 8015d6e:	bf00      	nop
 8015d70:	bf00      	nop
 8015d72:	3710      	adds	r7, #16
 8015d74:	46bd      	mov	sp, r7
 8015d76:	bd80      	pop	{r7, pc}
 8015d78:	2000f3e8 	.word	0x2000f3e8

08015d7c <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015d7c:	b580      	push	{r7, lr}
 8015d7e:	b088      	sub	sp, #32
 8015d80:	af00      	add	r7, sp, #0
 8015d82:	6078      	str	r0, [r7, #4]
 8015d84:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015d86:	2300      	movs	r3, #0
 8015d88:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015d8a:	683a      	ldr	r2, [r7, #0]
 8015d8c:	687b      	ldr	r3, [r7, #4]
 8015d8e:	429a      	cmp	r2, r3
 8015d90:	d105      	bne.n	8015d9e <ip_reass_free_complete_datagram+0x22>
 8015d92:	4b45      	ldr	r3, [pc, #276]	; (8015ea8 <ip_reass_free_complete_datagram+0x12c>)
 8015d94:	22ab      	movs	r2, #171	; 0xab
 8015d96:	4945      	ldr	r1, [pc, #276]	; (8015eac <ip_reass_free_complete_datagram+0x130>)
 8015d98:	4845      	ldr	r0, [pc, #276]	; (8015eb0 <ip_reass_free_complete_datagram+0x134>)
 8015d9a:	f001 f9a1 	bl	80170e0 <iprintf>
  if (prev != NULL) {
 8015d9e:	683b      	ldr	r3, [r7, #0]
 8015da0:	2b00      	cmp	r3, #0
 8015da2:	d00a      	beq.n	8015dba <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015da4:	683b      	ldr	r3, [r7, #0]
 8015da6:	681b      	ldr	r3, [r3, #0]
 8015da8:	687a      	ldr	r2, [r7, #4]
 8015daa:	429a      	cmp	r2, r3
 8015dac:	d005      	beq.n	8015dba <ip_reass_free_complete_datagram+0x3e>
 8015dae:	4b3e      	ldr	r3, [pc, #248]	; (8015ea8 <ip_reass_free_complete_datagram+0x12c>)
 8015db0:	22ad      	movs	r2, #173	; 0xad
 8015db2:	4940      	ldr	r1, [pc, #256]	; (8015eb4 <ip_reass_free_complete_datagram+0x138>)
 8015db4:	483e      	ldr	r0, [pc, #248]	; (8015eb0 <ip_reass_free_complete_datagram+0x134>)
 8015db6:	f001 f993 	bl	80170e0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	685b      	ldr	r3, [r3, #4]
 8015dbe:	685b      	ldr	r3, [r3, #4]
 8015dc0:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015dc2:	697b      	ldr	r3, [r7, #20]
 8015dc4:	889b      	ldrh	r3, [r3, #4]
 8015dc6:	b29b      	uxth	r3, r3
 8015dc8:	2b00      	cmp	r3, #0
 8015dca:	d12a      	bne.n	8015e22 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	685b      	ldr	r3, [r3, #4]
 8015dd0:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015dd2:	697b      	ldr	r3, [r7, #20]
 8015dd4:	681a      	ldr	r2, [r3, #0]
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015dda:	69bb      	ldr	r3, [r7, #24]
 8015ddc:	6858      	ldr	r0, [r3, #4]
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	3308      	adds	r3, #8
 8015de2:	2214      	movs	r2, #20
 8015de4:	4619      	mov	r1, r3
 8015de6:	f001 f8d0 	bl	8016f8a <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015dea:	2101      	movs	r1, #1
 8015dec:	69b8      	ldr	r0, [r7, #24]
 8015dee:	f7ff fc1b 	bl	8015628 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015df2:	69b8      	ldr	r0, [r7, #24]
 8015df4:	f7f6 fb72 	bl	800c4dc <pbuf_clen>
 8015df8:	4603      	mov	r3, r0
 8015dfa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015dfc:	8bfa      	ldrh	r2, [r7, #30]
 8015dfe:	8a7b      	ldrh	r3, [r7, #18]
 8015e00:	4413      	add	r3, r2
 8015e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e06:	db05      	blt.n	8015e14 <ip_reass_free_complete_datagram+0x98>
 8015e08:	4b27      	ldr	r3, [pc, #156]	; (8015ea8 <ip_reass_free_complete_datagram+0x12c>)
 8015e0a:	22bc      	movs	r2, #188	; 0xbc
 8015e0c:	492a      	ldr	r1, [pc, #168]	; (8015eb8 <ip_reass_free_complete_datagram+0x13c>)
 8015e0e:	4828      	ldr	r0, [pc, #160]	; (8015eb0 <ip_reass_free_complete_datagram+0x134>)
 8015e10:	f001 f966 	bl	80170e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015e14:	8bfa      	ldrh	r2, [r7, #30]
 8015e16:	8a7b      	ldrh	r3, [r7, #18]
 8015e18:	4413      	add	r3, r2
 8015e1a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015e1c:	69b8      	ldr	r0, [r7, #24]
 8015e1e:	f7f6 facf 	bl	800c3c0 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	685b      	ldr	r3, [r3, #4]
 8015e26:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015e28:	e01f      	b.n	8015e6a <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015e2a:	69bb      	ldr	r3, [r7, #24]
 8015e2c:	685b      	ldr	r3, [r3, #4]
 8015e2e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015e30:	69bb      	ldr	r3, [r7, #24]
 8015e32:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015e34:	697b      	ldr	r3, [r7, #20]
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015e3a:	68f8      	ldr	r0, [r7, #12]
 8015e3c:	f7f6 fb4e 	bl	800c4dc <pbuf_clen>
 8015e40:	4603      	mov	r3, r0
 8015e42:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015e44:	8bfa      	ldrh	r2, [r7, #30]
 8015e46:	8a7b      	ldrh	r3, [r7, #18]
 8015e48:	4413      	add	r3, r2
 8015e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015e4e:	db05      	blt.n	8015e5c <ip_reass_free_complete_datagram+0xe0>
 8015e50:	4b15      	ldr	r3, [pc, #84]	; (8015ea8 <ip_reass_free_complete_datagram+0x12c>)
 8015e52:	22cc      	movs	r2, #204	; 0xcc
 8015e54:	4918      	ldr	r1, [pc, #96]	; (8015eb8 <ip_reass_free_complete_datagram+0x13c>)
 8015e56:	4816      	ldr	r0, [pc, #88]	; (8015eb0 <ip_reass_free_complete_datagram+0x134>)
 8015e58:	f001 f942 	bl	80170e0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015e5c:	8bfa      	ldrh	r2, [r7, #30]
 8015e5e:	8a7b      	ldrh	r3, [r7, #18]
 8015e60:	4413      	add	r3, r2
 8015e62:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015e64:	68f8      	ldr	r0, [r7, #12]
 8015e66:	f7f6 faab 	bl	800c3c0 <pbuf_free>
  while (p != NULL) {
 8015e6a:	69bb      	ldr	r3, [r7, #24]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d1dc      	bne.n	8015e2a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015e70:	6839      	ldr	r1, [r7, #0]
 8015e72:	6878      	ldr	r0, [r7, #4]
 8015e74:	f000 f8c2 	bl	8015ffc <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015e78:	4b10      	ldr	r3, [pc, #64]	; (8015ebc <ip_reass_free_complete_datagram+0x140>)
 8015e7a:	881b      	ldrh	r3, [r3, #0]
 8015e7c:	8bfa      	ldrh	r2, [r7, #30]
 8015e7e:	429a      	cmp	r2, r3
 8015e80:	d905      	bls.n	8015e8e <ip_reass_free_complete_datagram+0x112>
 8015e82:	4b09      	ldr	r3, [pc, #36]	; (8015ea8 <ip_reass_free_complete_datagram+0x12c>)
 8015e84:	22d2      	movs	r2, #210	; 0xd2
 8015e86:	490e      	ldr	r1, [pc, #56]	; (8015ec0 <ip_reass_free_complete_datagram+0x144>)
 8015e88:	4809      	ldr	r0, [pc, #36]	; (8015eb0 <ip_reass_free_complete_datagram+0x134>)
 8015e8a:	f001 f929 	bl	80170e0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015e8e:	4b0b      	ldr	r3, [pc, #44]	; (8015ebc <ip_reass_free_complete_datagram+0x140>)
 8015e90:	881a      	ldrh	r2, [r3, #0]
 8015e92:	8bfb      	ldrh	r3, [r7, #30]
 8015e94:	1ad3      	subs	r3, r2, r3
 8015e96:	b29a      	uxth	r2, r3
 8015e98:	4b08      	ldr	r3, [pc, #32]	; (8015ebc <ip_reass_free_complete_datagram+0x140>)
 8015e9a:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015e9c:	8bfb      	ldrh	r3, [r7, #30]
}
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	3720      	adds	r7, #32
 8015ea2:	46bd      	mov	sp, r7
 8015ea4:	bd80      	pop	{r7, pc}
 8015ea6:	bf00      	nop
 8015ea8:	0801acb0 	.word	0x0801acb0
 8015eac:	0801acec 	.word	0x0801acec
 8015eb0:	0801acf8 	.word	0x0801acf8
 8015eb4:	0801ad20 	.word	0x0801ad20
 8015eb8:	0801ad34 	.word	0x0801ad34
 8015ebc:	2000f3ec 	.word	0x2000f3ec
 8015ec0:	0801ad54 	.word	0x0801ad54

08015ec4 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015ec4:	b580      	push	{r7, lr}
 8015ec6:	b08a      	sub	sp, #40	; 0x28
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	6078      	str	r0, [r7, #4]
 8015ecc:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015ece:	2300      	movs	r3, #0
 8015ed0:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015ed2:	2300      	movs	r3, #0
 8015ed4:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015ed6:	2300      	movs	r3, #0
 8015ed8:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015eda:	2300      	movs	r3, #0
 8015edc:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015ede:	2300      	movs	r3, #0
 8015ee0:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015ee2:	4b28      	ldr	r3, [pc, #160]	; (8015f84 <ip_reass_remove_oldest_datagram+0xc0>)
 8015ee4:	681b      	ldr	r3, [r3, #0]
 8015ee6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015ee8:	e030      	b.n	8015f4c <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015eec:	695a      	ldr	r2, [r3, #20]
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	68db      	ldr	r3, [r3, #12]
 8015ef2:	429a      	cmp	r2, r3
 8015ef4:	d10c      	bne.n	8015f10 <ip_reass_remove_oldest_datagram+0x4c>
 8015ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ef8:	699a      	ldr	r2, [r3, #24]
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	691b      	ldr	r3, [r3, #16]
 8015efe:	429a      	cmp	r2, r3
 8015f00:	d106      	bne.n	8015f10 <ip_reass_remove_oldest_datagram+0x4c>
 8015f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f04:	899a      	ldrh	r2, [r3, #12]
 8015f06:	687b      	ldr	r3, [r7, #4]
 8015f08:	889b      	ldrh	r3, [r3, #4]
 8015f0a:	b29b      	uxth	r3, r3
 8015f0c:	429a      	cmp	r2, r3
 8015f0e:	d014      	beq.n	8015f3a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015f10:	693b      	ldr	r3, [r7, #16]
 8015f12:	3301      	adds	r3, #1
 8015f14:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015f16:	6a3b      	ldr	r3, [r7, #32]
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d104      	bne.n	8015f26 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f1e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015f20:	69fb      	ldr	r3, [r7, #28]
 8015f22:	61bb      	str	r3, [r7, #24]
 8015f24:	e009      	b.n	8015f3a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f28:	7fda      	ldrb	r2, [r3, #31]
 8015f2a:	6a3b      	ldr	r3, [r7, #32]
 8015f2c:	7fdb      	ldrb	r3, [r3, #31]
 8015f2e:	429a      	cmp	r2, r3
 8015f30:	d803      	bhi.n	8015f3a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f34:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015f36:	69fb      	ldr	r3, [r7, #28]
 8015f38:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d001      	beq.n	8015f46 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f44:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f48:	681b      	ldr	r3, [r3, #0]
 8015f4a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f4e:	2b00      	cmp	r3, #0
 8015f50:	d1cb      	bne.n	8015eea <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015f52:	6a3b      	ldr	r3, [r7, #32]
 8015f54:	2b00      	cmp	r3, #0
 8015f56:	d008      	beq.n	8015f6a <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015f58:	69b9      	ldr	r1, [r7, #24]
 8015f5a:	6a38      	ldr	r0, [r7, #32]
 8015f5c:	f7ff ff0e 	bl	8015d7c <ip_reass_free_complete_datagram>
 8015f60:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015f62:	697a      	ldr	r2, [r7, #20]
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	4413      	add	r3, r2
 8015f68:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015f6a:	697a      	ldr	r2, [r7, #20]
 8015f6c:	683b      	ldr	r3, [r7, #0]
 8015f6e:	429a      	cmp	r2, r3
 8015f70:	da02      	bge.n	8015f78 <ip_reass_remove_oldest_datagram+0xb4>
 8015f72:	693b      	ldr	r3, [r7, #16]
 8015f74:	2b01      	cmp	r3, #1
 8015f76:	dcac      	bgt.n	8015ed2 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015f78:	697b      	ldr	r3, [r7, #20]
}
 8015f7a:	4618      	mov	r0, r3
 8015f7c:	3728      	adds	r7, #40	; 0x28
 8015f7e:	46bd      	mov	sp, r7
 8015f80:	bd80      	pop	{r7, pc}
 8015f82:	bf00      	nop
 8015f84:	2000f3e8 	.word	0x2000f3e8

08015f88 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015f88:	b580      	push	{r7, lr}
 8015f8a:	b084      	sub	sp, #16
 8015f8c:	af00      	add	r7, sp, #0
 8015f8e:	6078      	str	r0, [r7, #4]
 8015f90:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015f92:	2004      	movs	r0, #4
 8015f94:	f7f5 f8c4 	bl	800b120 <memp_malloc>
 8015f98:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	2b00      	cmp	r3, #0
 8015f9e:	d110      	bne.n	8015fc2 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015fa0:	6839      	ldr	r1, [r7, #0]
 8015fa2:	6878      	ldr	r0, [r7, #4]
 8015fa4:	f7ff ff8e 	bl	8015ec4 <ip_reass_remove_oldest_datagram>
 8015fa8:	4602      	mov	r2, r0
 8015faa:	683b      	ldr	r3, [r7, #0]
 8015fac:	4293      	cmp	r3, r2
 8015fae:	dc03      	bgt.n	8015fb8 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015fb0:	2004      	movs	r0, #4
 8015fb2:	f7f5 f8b5 	bl	800b120 <memp_malloc>
 8015fb6:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	2b00      	cmp	r3, #0
 8015fbc:	d101      	bne.n	8015fc2 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015fbe:	2300      	movs	r3, #0
 8015fc0:	e016      	b.n	8015ff0 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015fc2:	2220      	movs	r2, #32
 8015fc4:	2100      	movs	r1, #0
 8015fc6:	68f8      	ldr	r0, [r7, #12]
 8015fc8:	f000 ffed 	bl	8016fa6 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	220f      	movs	r2, #15
 8015fd0:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015fd2:	4b09      	ldr	r3, [pc, #36]	; (8015ff8 <ip_reass_enqueue_new_datagram+0x70>)
 8015fd4:	681a      	ldr	r2, [r3, #0]
 8015fd6:	68fb      	ldr	r3, [r7, #12]
 8015fd8:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015fda:	4a07      	ldr	r2, [pc, #28]	; (8015ff8 <ip_reass_enqueue_new_datagram+0x70>)
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015fe0:	68fb      	ldr	r3, [r7, #12]
 8015fe2:	3308      	adds	r3, #8
 8015fe4:	2214      	movs	r2, #20
 8015fe6:	6879      	ldr	r1, [r7, #4]
 8015fe8:	4618      	mov	r0, r3
 8015fea:	f000 ffce 	bl	8016f8a <memcpy>
  return ipr;
 8015fee:	68fb      	ldr	r3, [r7, #12]
}
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	3710      	adds	r7, #16
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd80      	pop	{r7, pc}
 8015ff8:	2000f3e8 	.word	0x2000f3e8

08015ffc <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015ffc:	b580      	push	{r7, lr}
 8015ffe:	b082      	sub	sp, #8
 8016000:	af00      	add	r7, sp, #0
 8016002:	6078      	str	r0, [r7, #4]
 8016004:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8016006:	4b10      	ldr	r3, [pc, #64]	; (8016048 <ip_reass_dequeue_datagram+0x4c>)
 8016008:	681b      	ldr	r3, [r3, #0]
 801600a:	687a      	ldr	r2, [r7, #4]
 801600c:	429a      	cmp	r2, r3
 801600e:	d104      	bne.n	801601a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	681b      	ldr	r3, [r3, #0]
 8016014:	4a0c      	ldr	r2, [pc, #48]	; (8016048 <ip_reass_dequeue_datagram+0x4c>)
 8016016:	6013      	str	r3, [r2, #0]
 8016018:	e00d      	b.n	8016036 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801601a:	683b      	ldr	r3, [r7, #0]
 801601c:	2b00      	cmp	r3, #0
 801601e:	d106      	bne.n	801602e <ip_reass_dequeue_datagram+0x32>
 8016020:	4b0a      	ldr	r3, [pc, #40]	; (801604c <ip_reass_dequeue_datagram+0x50>)
 8016022:	f240 1245 	movw	r2, #325	; 0x145
 8016026:	490a      	ldr	r1, [pc, #40]	; (8016050 <ip_reass_dequeue_datagram+0x54>)
 8016028:	480a      	ldr	r0, [pc, #40]	; (8016054 <ip_reass_dequeue_datagram+0x58>)
 801602a:	f001 f859 	bl	80170e0 <iprintf>
    prev->next = ipr->next;
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	681a      	ldr	r2, [r3, #0]
 8016032:	683b      	ldr	r3, [r7, #0]
 8016034:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8016036:	6879      	ldr	r1, [r7, #4]
 8016038:	2004      	movs	r0, #4
 801603a:	f7f5 f8e7 	bl	800b20c <memp_free>
}
 801603e:	bf00      	nop
 8016040:	3708      	adds	r7, #8
 8016042:	46bd      	mov	sp, r7
 8016044:	bd80      	pop	{r7, pc}
 8016046:	bf00      	nop
 8016048:	2000f3e8 	.word	0x2000f3e8
 801604c:	0801acb0 	.word	0x0801acb0
 8016050:	0801ad78 	.word	0x0801ad78
 8016054:	0801acf8 	.word	0x0801acf8

08016058 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b08c      	sub	sp, #48	; 0x30
 801605c:	af00      	add	r7, sp, #0
 801605e:	60f8      	str	r0, [r7, #12]
 8016060:	60b9      	str	r1, [r7, #8]
 8016062:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8016064:	2300      	movs	r3, #0
 8016066:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8016068:	2301      	movs	r3, #1
 801606a:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801606c:	68bb      	ldr	r3, [r7, #8]
 801606e:	685b      	ldr	r3, [r3, #4]
 8016070:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016072:	69fb      	ldr	r3, [r7, #28]
 8016074:	885b      	ldrh	r3, [r3, #2]
 8016076:	b29b      	uxth	r3, r3
 8016078:	4618      	mov	r0, r3
 801607a:	f7f4 fb79 	bl	800a770 <lwip_htons>
 801607e:	4603      	mov	r3, r0
 8016080:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8016082:	69fb      	ldr	r3, [r7, #28]
 8016084:	781b      	ldrb	r3, [r3, #0]
 8016086:	f003 030f 	and.w	r3, r3, #15
 801608a:	b2db      	uxtb	r3, r3
 801608c:	009b      	lsls	r3, r3, #2
 801608e:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8016090:	7e7b      	ldrb	r3, [r7, #25]
 8016092:	b29b      	uxth	r3, r3
 8016094:	8b7a      	ldrh	r2, [r7, #26]
 8016096:	429a      	cmp	r2, r3
 8016098:	d202      	bcs.n	80160a0 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801609a:	f04f 33ff 	mov.w	r3, #4294967295
 801609e:	e135      	b.n	801630c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80160a0:	7e7b      	ldrb	r3, [r7, #25]
 80160a2:	b29b      	uxth	r3, r3
 80160a4:	8b7a      	ldrh	r2, [r7, #26]
 80160a6:	1ad3      	subs	r3, r2, r3
 80160a8:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80160aa:	69fb      	ldr	r3, [r7, #28]
 80160ac:	88db      	ldrh	r3, [r3, #6]
 80160ae:	b29b      	uxth	r3, r3
 80160b0:	4618      	mov	r0, r3
 80160b2:	f7f4 fb5d 	bl	800a770 <lwip_htons>
 80160b6:	4603      	mov	r3, r0
 80160b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80160bc:	b29b      	uxth	r3, r3
 80160be:	00db      	lsls	r3, r3, #3
 80160c0:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80160c2:	68bb      	ldr	r3, [r7, #8]
 80160c4:	685b      	ldr	r3, [r3, #4]
 80160c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80160c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ca:	2200      	movs	r2, #0
 80160cc:	701a      	strb	r2, [r3, #0]
 80160ce:	2200      	movs	r2, #0
 80160d0:	705a      	strb	r2, [r3, #1]
 80160d2:	2200      	movs	r2, #0
 80160d4:	709a      	strb	r2, [r3, #2]
 80160d6:	2200      	movs	r2, #0
 80160d8:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 80160da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160dc:	8afa      	ldrh	r2, [r7, #22]
 80160de:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 80160e0:	8afa      	ldrh	r2, [r7, #22]
 80160e2:	8b7b      	ldrh	r3, [r7, #26]
 80160e4:	4413      	add	r3, r2
 80160e6:	b29a      	uxth	r2, r3
 80160e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ea:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80160ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80160ee:	88db      	ldrh	r3, [r3, #6]
 80160f0:	b29b      	uxth	r3, r3
 80160f2:	8afa      	ldrh	r2, [r7, #22]
 80160f4:	429a      	cmp	r2, r3
 80160f6:	d902      	bls.n	80160fe <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80160f8:	f04f 33ff 	mov.w	r3, #4294967295
 80160fc:	e106      	b.n	801630c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	685b      	ldr	r3, [r3, #4]
 8016102:	627b      	str	r3, [r7, #36]	; 0x24
 8016104:	e068      	b.n	80161d8 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8016106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016108:	685b      	ldr	r3, [r3, #4]
 801610a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801610c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801610e:	889b      	ldrh	r3, [r3, #4]
 8016110:	b29a      	uxth	r2, r3
 8016112:	693b      	ldr	r3, [r7, #16]
 8016114:	889b      	ldrh	r3, [r3, #4]
 8016116:	b29b      	uxth	r3, r3
 8016118:	429a      	cmp	r2, r3
 801611a:	d235      	bcs.n	8016188 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801611c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801611e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016120:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8016122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016124:	2b00      	cmp	r3, #0
 8016126:	d020      	beq.n	801616a <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8016128:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801612a:	889b      	ldrh	r3, [r3, #4]
 801612c:	b29a      	uxth	r2, r3
 801612e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016130:	88db      	ldrh	r3, [r3, #6]
 8016132:	b29b      	uxth	r3, r3
 8016134:	429a      	cmp	r2, r3
 8016136:	d307      	bcc.n	8016148 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8016138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801613a:	88db      	ldrh	r3, [r3, #6]
 801613c:	b29a      	uxth	r2, r3
 801613e:	693b      	ldr	r3, [r7, #16]
 8016140:	889b      	ldrh	r3, [r3, #4]
 8016142:	b29b      	uxth	r3, r3
 8016144:	429a      	cmp	r2, r3
 8016146:	d902      	bls.n	801614e <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016148:	f04f 33ff 	mov.w	r3, #4294967295
 801614c:	e0de      	b.n	801630c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016150:	68ba      	ldr	r2, [r7, #8]
 8016152:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8016154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016156:	88db      	ldrh	r3, [r3, #6]
 8016158:	b29a      	uxth	r2, r3
 801615a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801615c:	889b      	ldrh	r3, [r3, #4]
 801615e:	b29b      	uxth	r3, r3
 8016160:	429a      	cmp	r2, r3
 8016162:	d03d      	beq.n	80161e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8016164:	2300      	movs	r3, #0
 8016166:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8016168:	e03a      	b.n	80161e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801616a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801616c:	88db      	ldrh	r3, [r3, #6]
 801616e:	b29a      	uxth	r2, r3
 8016170:	693b      	ldr	r3, [r7, #16]
 8016172:	889b      	ldrh	r3, [r3, #4]
 8016174:	b29b      	uxth	r3, r3
 8016176:	429a      	cmp	r2, r3
 8016178:	d902      	bls.n	8016180 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801617a:	f04f 33ff 	mov.w	r3, #4294967295
 801617e:	e0c5      	b.n	801630c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8016180:	68fb      	ldr	r3, [r7, #12]
 8016182:	68ba      	ldr	r2, [r7, #8]
 8016184:	605a      	str	r2, [r3, #4]
      break;
 8016186:	e02b      	b.n	80161e0 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8016188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801618a:	889b      	ldrh	r3, [r3, #4]
 801618c:	b29a      	uxth	r2, r3
 801618e:	693b      	ldr	r3, [r7, #16]
 8016190:	889b      	ldrh	r3, [r3, #4]
 8016192:	b29b      	uxth	r3, r3
 8016194:	429a      	cmp	r2, r3
 8016196:	d102      	bne.n	801619e <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8016198:	f04f 33ff 	mov.w	r3, #4294967295
 801619c:	e0b6      	b.n	801630c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801619e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161a0:	889b      	ldrh	r3, [r3, #4]
 80161a2:	b29a      	uxth	r2, r3
 80161a4:	693b      	ldr	r3, [r7, #16]
 80161a6:	88db      	ldrh	r3, [r3, #6]
 80161a8:	b29b      	uxth	r3, r3
 80161aa:	429a      	cmp	r2, r3
 80161ac:	d202      	bcs.n	80161b4 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80161ae:	f04f 33ff 	mov.w	r3, #4294967295
 80161b2:	e0ab      	b.n	801630c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80161b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d009      	beq.n	80161ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80161ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161bc:	88db      	ldrh	r3, [r3, #6]
 80161be:	b29a      	uxth	r2, r3
 80161c0:	693b      	ldr	r3, [r7, #16]
 80161c2:	889b      	ldrh	r3, [r3, #4]
 80161c4:	b29b      	uxth	r3, r3
 80161c6:	429a      	cmp	r2, r3
 80161c8:	d001      	beq.n	80161ce <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80161ca:	2300      	movs	r3, #0
 80161cc:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80161ce:	693b      	ldr	r3, [r7, #16]
 80161d0:	681b      	ldr	r3, [r3, #0]
 80161d2:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80161d4:	693b      	ldr	r3, [r7, #16]
 80161d6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 80161d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d193      	bne.n	8016106 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 80161de:	e000      	b.n	80161e2 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 80161e0:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 80161e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80161e4:	2b00      	cmp	r3, #0
 80161e6:	d12d      	bne.n	8016244 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80161e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161ea:	2b00      	cmp	r3, #0
 80161ec:	d01c      	beq.n	8016228 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80161ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161f0:	88db      	ldrh	r3, [r3, #6]
 80161f2:	b29a      	uxth	r2, r3
 80161f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80161f6:	889b      	ldrh	r3, [r3, #4]
 80161f8:	b29b      	uxth	r3, r3
 80161fa:	429a      	cmp	r2, r3
 80161fc:	d906      	bls.n	801620c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80161fe:	4b45      	ldr	r3, [pc, #276]	; (8016314 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016200:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8016204:	4944      	ldr	r1, [pc, #272]	; (8016318 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8016206:	4845      	ldr	r0, [pc, #276]	; (801631c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016208:	f000 ff6a 	bl	80170e0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801620c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801620e:	68ba      	ldr	r2, [r7, #8]
 8016210:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8016212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016214:	88db      	ldrh	r3, [r3, #6]
 8016216:	b29a      	uxth	r2, r3
 8016218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801621a:	889b      	ldrh	r3, [r3, #4]
 801621c:	b29b      	uxth	r3, r3
 801621e:	429a      	cmp	r2, r3
 8016220:	d010      	beq.n	8016244 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8016222:	2300      	movs	r3, #0
 8016224:	623b      	str	r3, [r7, #32]
 8016226:	e00d      	b.n	8016244 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8016228:	68fb      	ldr	r3, [r7, #12]
 801622a:	685b      	ldr	r3, [r3, #4]
 801622c:	2b00      	cmp	r3, #0
 801622e:	d006      	beq.n	801623e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8016230:	4b38      	ldr	r3, [pc, #224]	; (8016314 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016232:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8016236:	493a      	ldr	r1, [pc, #232]	; (8016320 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8016238:	4838      	ldr	r0, [pc, #224]	; (801631c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801623a:	f000 ff51 	bl	80170e0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801623e:	68fb      	ldr	r3, [r7, #12]
 8016240:	68ba      	ldr	r2, [r7, #8]
 8016242:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	2b00      	cmp	r3, #0
 8016248:	d105      	bne.n	8016256 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801624a:	68fb      	ldr	r3, [r7, #12]
 801624c:	7f9b      	ldrb	r3, [r3, #30]
 801624e:	f003 0301 	and.w	r3, r3, #1
 8016252:	2b00      	cmp	r3, #0
 8016254:	d059      	beq.n	801630a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8016256:	6a3b      	ldr	r3, [r7, #32]
 8016258:	2b00      	cmp	r3, #0
 801625a:	d04f      	beq.n	80162fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	685b      	ldr	r3, [r3, #4]
 8016260:	2b00      	cmp	r3, #0
 8016262:	d006      	beq.n	8016272 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8016264:	68fb      	ldr	r3, [r7, #12]
 8016266:	685b      	ldr	r3, [r3, #4]
 8016268:	685b      	ldr	r3, [r3, #4]
 801626a:	889b      	ldrh	r3, [r3, #4]
 801626c:	b29b      	uxth	r3, r3
 801626e:	2b00      	cmp	r3, #0
 8016270:	d002      	beq.n	8016278 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8016272:	2300      	movs	r3, #0
 8016274:	623b      	str	r3, [r7, #32]
 8016276:	e041      	b.n	80162fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8016278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801627a:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801627c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801627e:	681b      	ldr	r3, [r3, #0]
 8016280:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016282:	e012      	b.n	80162aa <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8016284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016286:	685b      	ldr	r3, [r3, #4]
 8016288:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801628a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801628c:	88db      	ldrh	r3, [r3, #6]
 801628e:	b29a      	uxth	r2, r3
 8016290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016292:	889b      	ldrh	r3, [r3, #4]
 8016294:	b29b      	uxth	r3, r3
 8016296:	429a      	cmp	r2, r3
 8016298:	d002      	beq.n	80162a0 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801629a:	2300      	movs	r3, #0
 801629c:	623b      	str	r3, [r7, #32]
            break;
 801629e:	e007      	b.n	80162b0 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80162a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162a2:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80162a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162a6:	681b      	ldr	r3, [r3, #0]
 80162a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80162aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ac:	2b00      	cmp	r3, #0
 80162ae:	d1e9      	bne.n	8016284 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80162b0:	6a3b      	ldr	r3, [r7, #32]
 80162b2:	2b00      	cmp	r3, #0
 80162b4:	d022      	beq.n	80162fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	685b      	ldr	r3, [r3, #4]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d106      	bne.n	80162cc <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80162be:	4b15      	ldr	r3, [pc, #84]	; (8016314 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80162c0:	f240 12df 	movw	r2, #479	; 0x1df
 80162c4:	4917      	ldr	r1, [pc, #92]	; (8016324 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80162c6:	4815      	ldr	r0, [pc, #84]	; (801631c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80162c8:	f000 ff0a 	bl	80170e0 <iprintf>
          LWIP_ASSERT("sanity check",
 80162cc:	68fb      	ldr	r3, [r7, #12]
 80162ce:	685b      	ldr	r3, [r3, #4]
 80162d0:	685b      	ldr	r3, [r3, #4]
 80162d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80162d4:	429a      	cmp	r2, r3
 80162d6:	d106      	bne.n	80162e6 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 80162d8:	4b0e      	ldr	r3, [pc, #56]	; (8016314 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80162da:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80162de:	4911      	ldr	r1, [pc, #68]	; (8016324 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80162e0:	480e      	ldr	r0, [pc, #56]	; (801631c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80162e2:	f000 fefd 	bl	80170e0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 80162e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e8:	681b      	ldr	r3, [r3, #0]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d006      	beq.n	80162fc <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80162ee:	4b09      	ldr	r3, [pc, #36]	; (8016314 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80162f0:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80162f4:	490c      	ldr	r1, [pc, #48]	; (8016328 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80162f6:	4809      	ldr	r0, [pc, #36]	; (801631c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80162f8:	f000 fef2 	bl	80170e0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80162fc:	6a3b      	ldr	r3, [r7, #32]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	bf14      	ite	ne
 8016302:	2301      	movne	r3, #1
 8016304:	2300      	moveq	r3, #0
 8016306:	b2db      	uxtb	r3, r3
 8016308:	e000      	b.n	801630c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801630a:	2300      	movs	r3, #0
}
 801630c:	4618      	mov	r0, r3
 801630e:	3730      	adds	r7, #48	; 0x30
 8016310:	46bd      	mov	sp, r7
 8016312:	bd80      	pop	{r7, pc}
 8016314:	0801acb0 	.word	0x0801acb0
 8016318:	0801ad94 	.word	0x0801ad94
 801631c:	0801acf8 	.word	0x0801acf8
 8016320:	0801adb4 	.word	0x0801adb4
 8016324:	0801adec 	.word	0x0801adec
 8016328:	0801adfc 	.word	0x0801adfc

0801632c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801632c:	b580      	push	{r7, lr}
 801632e:	b08e      	sub	sp, #56	; 0x38
 8016330:	af00      	add	r7, sp, #0
 8016332:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016334:	687b      	ldr	r3, [r7, #4]
 8016336:	685b      	ldr	r3, [r3, #4]
 8016338:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801633a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801633c:	781b      	ldrb	r3, [r3, #0]
 801633e:	f003 030f 	and.w	r3, r3, #15
 8016342:	b2db      	uxtb	r3, r3
 8016344:	009b      	lsls	r3, r3, #2
 8016346:	b2db      	uxtb	r3, r3
 8016348:	2b14      	cmp	r3, #20
 801634a:	f040 8171 	bne.w	8016630 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801634e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016350:	88db      	ldrh	r3, [r3, #6]
 8016352:	b29b      	uxth	r3, r3
 8016354:	4618      	mov	r0, r3
 8016356:	f7f4 fa0b 	bl	800a770 <lwip_htons>
 801635a:	4603      	mov	r3, r0
 801635c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016360:	b29b      	uxth	r3, r3
 8016362:	00db      	lsls	r3, r3, #3
 8016364:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8016366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016368:	885b      	ldrh	r3, [r3, #2]
 801636a:	b29b      	uxth	r3, r3
 801636c:	4618      	mov	r0, r3
 801636e:	f7f4 f9ff 	bl	800a770 <lwip_htons>
 8016372:	4603      	mov	r3, r0
 8016374:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8016376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016378:	781b      	ldrb	r3, [r3, #0]
 801637a:	f003 030f 	and.w	r3, r3, #15
 801637e:	b2db      	uxtb	r3, r3
 8016380:	009b      	lsls	r3, r3, #2
 8016382:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8016386:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801638a:	b29b      	uxth	r3, r3
 801638c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801638e:	429a      	cmp	r2, r3
 8016390:	f0c0 8150 	bcc.w	8016634 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8016394:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8016398:	b29b      	uxth	r3, r3
 801639a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801639c:	1ad3      	subs	r3, r2, r3
 801639e:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80163a0:	6878      	ldr	r0, [r7, #4]
 80163a2:	f7f6 f89b 	bl	800c4dc <pbuf_clen>
 80163a6:	4603      	mov	r3, r0
 80163a8:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80163aa:	4b8c      	ldr	r3, [pc, #560]	; (80165dc <ip4_reass+0x2b0>)
 80163ac:	881b      	ldrh	r3, [r3, #0]
 80163ae:	461a      	mov	r2, r3
 80163b0:	8c3b      	ldrh	r3, [r7, #32]
 80163b2:	4413      	add	r3, r2
 80163b4:	2b0a      	cmp	r3, #10
 80163b6:	dd10      	ble.n	80163da <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80163b8:	8c3b      	ldrh	r3, [r7, #32]
 80163ba:	4619      	mov	r1, r3
 80163bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80163be:	f7ff fd81 	bl	8015ec4 <ip_reass_remove_oldest_datagram>
 80163c2:	4603      	mov	r3, r0
 80163c4:	2b00      	cmp	r3, #0
 80163c6:	f000 8137 	beq.w	8016638 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80163ca:	4b84      	ldr	r3, [pc, #528]	; (80165dc <ip4_reass+0x2b0>)
 80163cc:	881b      	ldrh	r3, [r3, #0]
 80163ce:	461a      	mov	r2, r3
 80163d0:	8c3b      	ldrh	r3, [r7, #32]
 80163d2:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80163d4:	2b0a      	cmp	r3, #10
 80163d6:	f300 812f 	bgt.w	8016638 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80163da:	4b81      	ldr	r3, [pc, #516]	; (80165e0 <ip4_reass+0x2b4>)
 80163dc:	681b      	ldr	r3, [r3, #0]
 80163de:	633b      	str	r3, [r7, #48]	; 0x30
 80163e0:	e015      	b.n	801640e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 80163e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163e4:	695a      	ldr	r2, [r3, #20]
 80163e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163e8:	68db      	ldr	r3, [r3, #12]
 80163ea:	429a      	cmp	r2, r3
 80163ec:	d10c      	bne.n	8016408 <ip4_reass+0xdc>
 80163ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163f0:	699a      	ldr	r2, [r3, #24]
 80163f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80163f4:	691b      	ldr	r3, [r3, #16]
 80163f6:	429a      	cmp	r2, r3
 80163f8:	d106      	bne.n	8016408 <ip4_reass+0xdc>
 80163fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163fc:	899a      	ldrh	r2, [r3, #12]
 80163fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016400:	889b      	ldrh	r3, [r3, #4]
 8016402:	b29b      	uxth	r3, r3
 8016404:	429a      	cmp	r2, r3
 8016406:	d006      	beq.n	8016416 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	633b      	str	r3, [r7, #48]	; 0x30
 801640e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016410:	2b00      	cmp	r3, #0
 8016412:	d1e6      	bne.n	80163e2 <ip4_reass+0xb6>
 8016414:	e000      	b.n	8016418 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016416:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801641a:	2b00      	cmp	r3, #0
 801641c:	d109      	bne.n	8016432 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801641e:	8c3b      	ldrh	r3, [r7, #32]
 8016420:	4619      	mov	r1, r3
 8016422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016424:	f7ff fdb0 	bl	8015f88 <ip_reass_enqueue_new_datagram>
 8016428:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801642a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801642c:	2b00      	cmp	r3, #0
 801642e:	d11c      	bne.n	801646a <ip4_reass+0x13e>
      goto nullreturn;
 8016430:	e105      	b.n	801663e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016434:	88db      	ldrh	r3, [r3, #6]
 8016436:	b29b      	uxth	r3, r3
 8016438:	4618      	mov	r0, r3
 801643a:	f7f4 f999 	bl	800a770 <lwip_htons>
 801643e:	4603      	mov	r3, r0
 8016440:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016444:	2b00      	cmp	r3, #0
 8016446:	d110      	bne.n	801646a <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8016448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801644a:	89db      	ldrh	r3, [r3, #14]
 801644c:	4618      	mov	r0, r3
 801644e:	f7f4 f98f 	bl	800a770 <lwip_htons>
 8016452:	4603      	mov	r3, r0
 8016454:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8016458:	2b00      	cmp	r3, #0
 801645a:	d006      	beq.n	801646a <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801645c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801645e:	3308      	adds	r3, #8
 8016460:	2214      	movs	r2, #20
 8016462:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016464:	4618      	mov	r0, r3
 8016466:	f000 fd90 	bl	8016f8a <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801646a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801646c:	88db      	ldrh	r3, [r3, #6]
 801646e:	b29b      	uxth	r3, r3
 8016470:	f003 0320 	and.w	r3, r3, #32
 8016474:	2b00      	cmp	r3, #0
 8016476:	bf0c      	ite	eq
 8016478:	2301      	moveq	r3, #1
 801647a:	2300      	movne	r3, #0
 801647c:	b2db      	uxtb	r3, r3
 801647e:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8016480:	69fb      	ldr	r3, [r7, #28]
 8016482:	2b00      	cmp	r3, #0
 8016484:	d00e      	beq.n	80164a4 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8016486:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8016488:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801648a:	4413      	add	r3, r2
 801648c:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801648e:	8b7a      	ldrh	r2, [r7, #26]
 8016490:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8016492:	429a      	cmp	r2, r3
 8016494:	f0c0 80a0 	bcc.w	80165d8 <ip4_reass+0x2ac>
 8016498:	8b7b      	ldrh	r3, [r7, #26]
 801649a:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801649e:	4293      	cmp	r3, r2
 80164a0:	f200 809a 	bhi.w	80165d8 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80164a4:	69fa      	ldr	r2, [r7, #28]
 80164a6:	6879      	ldr	r1, [r7, #4]
 80164a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80164aa:	f7ff fdd5 	bl	8016058 <ip_reass_chain_frag_into_datagram_and_validate>
 80164ae:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80164b0:	697b      	ldr	r3, [r7, #20]
 80164b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80164b6:	f000 809b 	beq.w	80165f0 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80164ba:	4b48      	ldr	r3, [pc, #288]	; (80165dc <ip4_reass+0x2b0>)
 80164bc:	881a      	ldrh	r2, [r3, #0]
 80164be:	8c3b      	ldrh	r3, [r7, #32]
 80164c0:	4413      	add	r3, r2
 80164c2:	b29a      	uxth	r2, r3
 80164c4:	4b45      	ldr	r3, [pc, #276]	; (80165dc <ip4_reass+0x2b0>)
 80164c6:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80164c8:	69fb      	ldr	r3, [r7, #28]
 80164ca:	2b00      	cmp	r3, #0
 80164cc:	d00d      	beq.n	80164ea <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80164ce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80164d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80164d2:	4413      	add	r3, r2
 80164d4:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80164d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164d8:	8a7a      	ldrh	r2, [r7, #18]
 80164da:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 80164dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164de:	7f9b      	ldrb	r3, [r3, #30]
 80164e0:	f043 0301 	orr.w	r3, r3, #1
 80164e4:	b2da      	uxtb	r2, r3
 80164e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164e8:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80164ea:	697b      	ldr	r3, [r7, #20]
 80164ec:	2b01      	cmp	r3, #1
 80164ee:	d171      	bne.n	80165d4 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80164f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164f2:	8b9b      	ldrh	r3, [r3, #28]
 80164f4:	3314      	adds	r3, #20
 80164f6:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80164f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164fa:	685b      	ldr	r3, [r3, #4]
 80164fc:	685b      	ldr	r3, [r3, #4]
 80164fe:	681b      	ldr	r3, [r3, #0]
 8016500:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8016502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016504:	685b      	ldr	r3, [r3, #4]
 8016506:	685b      	ldr	r3, [r3, #4]
 8016508:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801650a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801650c:	3308      	adds	r3, #8
 801650e:	2214      	movs	r2, #20
 8016510:	4619      	mov	r1, r3
 8016512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016514:	f000 fd39 	bl	8016f8a <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016518:	8a3b      	ldrh	r3, [r7, #16]
 801651a:	4618      	mov	r0, r3
 801651c:	f7f4 f928 	bl	800a770 <lwip_htons>
 8016520:	4603      	mov	r3, r0
 8016522:	461a      	mov	r2, r3
 8016524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016526:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801652a:	2200      	movs	r2, #0
 801652c:	719a      	strb	r2, [r3, #6]
 801652e:	2200      	movs	r2, #0
 8016530:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8016532:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016534:	2200      	movs	r2, #0
 8016536:	729a      	strb	r2, [r3, #10]
 8016538:	2200      	movs	r2, #0
 801653a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801653c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801653e:	685b      	ldr	r3, [r3, #4]
 8016540:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8016542:	e00d      	b.n	8016560 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8016544:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016546:	685b      	ldr	r3, [r3, #4]
 8016548:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801654a:	2114      	movs	r1, #20
 801654c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801654e:	f7f5 feb1 	bl	800c2b4 <pbuf_remove_header>
      pbuf_cat(p, r);
 8016552:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016554:	6878      	ldr	r0, [r7, #4]
 8016556:	f7f6 f801 	bl	800c55c <pbuf_cat>
      r = iprh->next_pbuf;
 801655a:	68fb      	ldr	r3, [r7, #12]
 801655c:	681b      	ldr	r3, [r3, #0]
 801655e:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8016560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016562:	2b00      	cmp	r3, #0
 8016564:	d1ee      	bne.n	8016544 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8016566:	4b1e      	ldr	r3, [pc, #120]	; (80165e0 <ip4_reass+0x2b4>)
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801656c:	429a      	cmp	r2, r3
 801656e:	d102      	bne.n	8016576 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8016570:	2300      	movs	r3, #0
 8016572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016574:	e010      	b.n	8016598 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016576:	4b1a      	ldr	r3, [pc, #104]	; (80165e0 <ip4_reass+0x2b4>)
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801657c:	e007      	b.n	801658e <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801657e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016584:	429a      	cmp	r2, r3
 8016586:	d006      	beq.n	8016596 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8016588:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801658e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016590:	2b00      	cmp	r3, #0
 8016592:	d1f4      	bne.n	801657e <ip4_reass+0x252>
 8016594:	e000      	b.n	8016598 <ip4_reass+0x26c>
          break;
 8016596:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8016598:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801659a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801659c:	f7ff fd2e 	bl	8015ffc <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80165a0:	6878      	ldr	r0, [r7, #4]
 80165a2:	f7f5 ff9b 	bl	800c4dc <pbuf_clen>
 80165a6:	4603      	mov	r3, r0
 80165a8:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80165aa:	4b0c      	ldr	r3, [pc, #48]	; (80165dc <ip4_reass+0x2b0>)
 80165ac:	881b      	ldrh	r3, [r3, #0]
 80165ae:	8c3a      	ldrh	r2, [r7, #32]
 80165b0:	429a      	cmp	r2, r3
 80165b2:	d906      	bls.n	80165c2 <ip4_reass+0x296>
 80165b4:	4b0b      	ldr	r3, [pc, #44]	; (80165e4 <ip4_reass+0x2b8>)
 80165b6:	f240 229b 	movw	r2, #667	; 0x29b
 80165ba:	490b      	ldr	r1, [pc, #44]	; (80165e8 <ip4_reass+0x2bc>)
 80165bc:	480b      	ldr	r0, [pc, #44]	; (80165ec <ip4_reass+0x2c0>)
 80165be:	f000 fd8f 	bl	80170e0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80165c2:	4b06      	ldr	r3, [pc, #24]	; (80165dc <ip4_reass+0x2b0>)
 80165c4:	881a      	ldrh	r2, [r3, #0]
 80165c6:	8c3b      	ldrh	r3, [r7, #32]
 80165c8:	1ad3      	subs	r3, r2, r3
 80165ca:	b29a      	uxth	r2, r3
 80165cc:	4b03      	ldr	r3, [pc, #12]	; (80165dc <ip4_reass+0x2b0>)
 80165ce:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	e038      	b.n	8016646 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80165d4:	2300      	movs	r3, #0
 80165d6:	e036      	b.n	8016646 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 80165d8:	bf00      	nop
 80165da:	e00a      	b.n	80165f2 <ip4_reass+0x2c6>
 80165dc:	2000f3ec 	.word	0x2000f3ec
 80165e0:	2000f3e8 	.word	0x2000f3e8
 80165e4:	0801acb0 	.word	0x0801acb0
 80165e8:	0801ae20 	.word	0x0801ae20
 80165ec:	0801acf8 	.word	0x0801acf8
    goto nullreturn_ipr;
 80165f0:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 80165f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80165f4:	2b00      	cmp	r3, #0
 80165f6:	d106      	bne.n	8016606 <ip4_reass+0x2da>
 80165f8:	4b15      	ldr	r3, [pc, #84]	; (8016650 <ip4_reass+0x324>)
 80165fa:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 80165fe:	4915      	ldr	r1, [pc, #84]	; (8016654 <ip4_reass+0x328>)
 8016600:	4815      	ldr	r0, [pc, #84]	; (8016658 <ip4_reass+0x32c>)
 8016602:	f000 fd6d 	bl	80170e0 <iprintf>
  if (ipr->p == NULL) {
 8016606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016608:	685b      	ldr	r3, [r3, #4]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d116      	bne.n	801663c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801660e:	4b13      	ldr	r3, [pc, #76]	; (801665c <ip4_reass+0x330>)
 8016610:	681b      	ldr	r3, [r3, #0]
 8016612:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016614:	429a      	cmp	r2, r3
 8016616:	d006      	beq.n	8016626 <ip4_reass+0x2fa>
 8016618:	4b0d      	ldr	r3, [pc, #52]	; (8016650 <ip4_reass+0x324>)
 801661a:	f240 22ab 	movw	r2, #683	; 0x2ab
 801661e:	4910      	ldr	r1, [pc, #64]	; (8016660 <ip4_reass+0x334>)
 8016620:	480d      	ldr	r0, [pc, #52]	; (8016658 <ip4_reass+0x32c>)
 8016622:	f000 fd5d 	bl	80170e0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016626:	2100      	movs	r1, #0
 8016628:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801662a:	f7ff fce7 	bl	8015ffc <ip_reass_dequeue_datagram>
 801662e:	e006      	b.n	801663e <ip4_reass+0x312>
    goto nullreturn;
 8016630:	bf00      	nop
 8016632:	e004      	b.n	801663e <ip4_reass+0x312>
    goto nullreturn;
 8016634:	bf00      	nop
 8016636:	e002      	b.n	801663e <ip4_reass+0x312>
      goto nullreturn;
 8016638:	bf00      	nop
 801663a:	e000      	b.n	801663e <ip4_reass+0x312>
  }

nullreturn:
 801663c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801663e:	6878      	ldr	r0, [r7, #4]
 8016640:	f7f5 febe 	bl	800c3c0 <pbuf_free>
  return NULL;
 8016644:	2300      	movs	r3, #0
}
 8016646:	4618      	mov	r0, r3
 8016648:	3738      	adds	r7, #56	; 0x38
 801664a:	46bd      	mov	sp, r7
 801664c:	bd80      	pop	{r7, pc}
 801664e:	bf00      	nop
 8016650:	0801acb0 	.word	0x0801acb0
 8016654:	0801ae3c 	.word	0x0801ae3c
 8016658:	0801acf8 	.word	0x0801acf8
 801665c:	2000f3e8 	.word	0x2000f3e8
 8016660:	0801ae48 	.word	0x0801ae48

08016664 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8016668:	2005      	movs	r0, #5
 801666a:	f7f4 fd59 	bl	800b120 <memp_malloc>
 801666e:	4603      	mov	r3, r0
}
 8016670:	4618      	mov	r0, r3
 8016672:	bd80      	pop	{r7, pc}

08016674 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8016674:	b580      	push	{r7, lr}
 8016676:	b082      	sub	sp, #8
 8016678:	af00      	add	r7, sp, #0
 801667a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d106      	bne.n	8016690 <ip_frag_free_pbuf_custom_ref+0x1c>
 8016682:	4b07      	ldr	r3, [pc, #28]	; (80166a0 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8016684:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8016688:	4906      	ldr	r1, [pc, #24]	; (80166a4 <ip_frag_free_pbuf_custom_ref+0x30>)
 801668a:	4807      	ldr	r0, [pc, #28]	; (80166a8 <ip_frag_free_pbuf_custom_ref+0x34>)
 801668c:	f000 fd28 	bl	80170e0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8016690:	6879      	ldr	r1, [r7, #4]
 8016692:	2005      	movs	r0, #5
 8016694:	f7f4 fdba 	bl	800b20c <memp_free>
}
 8016698:	bf00      	nop
 801669a:	3708      	adds	r7, #8
 801669c:	46bd      	mov	sp, r7
 801669e:	bd80      	pop	{r7, pc}
 80166a0:	0801acb0 	.word	0x0801acb0
 80166a4:	0801ae68 	.word	0x0801ae68
 80166a8:	0801acf8 	.word	0x0801acf8

080166ac <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80166ac:	b580      	push	{r7, lr}
 80166ae:	b084      	sub	sp, #16
 80166b0:	af00      	add	r7, sp, #0
 80166b2:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	2b00      	cmp	r3, #0
 80166bc:	d106      	bne.n	80166cc <ipfrag_free_pbuf_custom+0x20>
 80166be:	4b11      	ldr	r3, [pc, #68]	; (8016704 <ipfrag_free_pbuf_custom+0x58>)
 80166c0:	f240 22ce 	movw	r2, #718	; 0x2ce
 80166c4:	4910      	ldr	r1, [pc, #64]	; (8016708 <ipfrag_free_pbuf_custom+0x5c>)
 80166c6:	4811      	ldr	r0, [pc, #68]	; (801670c <ipfrag_free_pbuf_custom+0x60>)
 80166c8:	f000 fd0a 	bl	80170e0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 80166cc:	68fa      	ldr	r2, [r7, #12]
 80166ce:	687b      	ldr	r3, [r7, #4]
 80166d0:	429a      	cmp	r2, r3
 80166d2:	d006      	beq.n	80166e2 <ipfrag_free_pbuf_custom+0x36>
 80166d4:	4b0b      	ldr	r3, [pc, #44]	; (8016704 <ipfrag_free_pbuf_custom+0x58>)
 80166d6:	f240 22cf 	movw	r2, #719	; 0x2cf
 80166da:	490d      	ldr	r1, [pc, #52]	; (8016710 <ipfrag_free_pbuf_custom+0x64>)
 80166dc:	480b      	ldr	r0, [pc, #44]	; (801670c <ipfrag_free_pbuf_custom+0x60>)
 80166de:	f000 fcff 	bl	80170e0 <iprintf>
  if (pcr->original != NULL) {
 80166e2:	68fb      	ldr	r3, [r7, #12]
 80166e4:	695b      	ldr	r3, [r3, #20]
 80166e6:	2b00      	cmp	r3, #0
 80166e8:	d004      	beq.n	80166f4 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	695b      	ldr	r3, [r3, #20]
 80166ee:	4618      	mov	r0, r3
 80166f0:	f7f5 fe66 	bl	800c3c0 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 80166f4:	68f8      	ldr	r0, [r7, #12]
 80166f6:	f7ff ffbd 	bl	8016674 <ip_frag_free_pbuf_custom_ref>
}
 80166fa:	bf00      	nop
 80166fc:	3710      	adds	r7, #16
 80166fe:	46bd      	mov	sp, r7
 8016700:	bd80      	pop	{r7, pc}
 8016702:	bf00      	nop
 8016704:	0801acb0 	.word	0x0801acb0
 8016708:	0801ae74 	.word	0x0801ae74
 801670c:	0801acf8 	.word	0x0801acf8
 8016710:	0801ae80 	.word	0x0801ae80

08016714 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b094      	sub	sp, #80	; 0x50
 8016718:	af02      	add	r7, sp, #8
 801671a:	60f8      	str	r0, [r7, #12]
 801671c:	60b9      	str	r1, [r7, #8]
 801671e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8016720:	2300      	movs	r3, #0
 8016722:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016726:	68bb      	ldr	r3, [r7, #8]
 8016728:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 801672a:	3b14      	subs	r3, #20
 801672c:	2b00      	cmp	r3, #0
 801672e:	da00      	bge.n	8016732 <ip4_frag+0x1e>
 8016730:	3307      	adds	r3, #7
 8016732:	10db      	asrs	r3, r3, #3
 8016734:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016736:	2314      	movs	r3, #20
 8016738:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801673a:	68fb      	ldr	r3, [r7, #12]
 801673c:	685b      	ldr	r3, [r3, #4]
 801673e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8016740:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8016742:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8016744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016746:	781b      	ldrb	r3, [r3, #0]
 8016748:	f003 030f 	and.w	r3, r3, #15
 801674c:	b2db      	uxtb	r3, r3
 801674e:	009b      	lsls	r3, r3, #2
 8016750:	b2db      	uxtb	r3, r3
 8016752:	2b14      	cmp	r3, #20
 8016754:	d002      	beq.n	801675c <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8016756:	f06f 0305 	mvn.w	r3, #5
 801675a:	e110      	b.n	801697e <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801675c:	68fb      	ldr	r3, [r7, #12]
 801675e:	895b      	ldrh	r3, [r3, #10]
 8016760:	2b13      	cmp	r3, #19
 8016762:	d809      	bhi.n	8016778 <ip4_frag+0x64>
 8016764:	4b88      	ldr	r3, [pc, #544]	; (8016988 <ip4_frag+0x274>)
 8016766:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801676a:	4988      	ldr	r1, [pc, #544]	; (801698c <ip4_frag+0x278>)
 801676c:	4888      	ldr	r0, [pc, #544]	; (8016990 <ip4_frag+0x27c>)
 801676e:	f000 fcb7 	bl	80170e0 <iprintf>
 8016772:	f06f 0305 	mvn.w	r3, #5
 8016776:	e102      	b.n	801697e <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8016778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801677a:	88db      	ldrh	r3, [r3, #6]
 801677c:	b29b      	uxth	r3, r3
 801677e:	4618      	mov	r0, r3
 8016780:	f7f3 fff6 	bl	800a770 <lwip_htons>
 8016784:	4603      	mov	r3, r0
 8016786:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8016788:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801678a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801678e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8016792:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016798:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801679a:	68fb      	ldr	r3, [r7, #12]
 801679c:	891b      	ldrh	r3, [r3, #8]
 801679e:	3b14      	subs	r3, #20
 80167a0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80167a4:	e0e1      	b.n	801696a <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80167a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80167a8:	00db      	lsls	r3, r3, #3
 80167aa:	b29b      	uxth	r3, r3
 80167ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80167b0:	4293      	cmp	r3, r2
 80167b2:	bf28      	it	cs
 80167b4:	4613      	movcs	r3, r2
 80167b6:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80167b8:	f44f 7220 	mov.w	r2, #640	; 0x280
 80167bc:	2114      	movs	r1, #20
 80167be:	200e      	movs	r0, #14
 80167c0:	f7f5 fb1a 	bl	800bdf8 <pbuf_alloc>
 80167c4:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80167c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167c8:	2b00      	cmp	r3, #0
 80167ca:	f000 80d5 	beq.w	8016978 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 80167ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167d0:	895b      	ldrh	r3, [r3, #10]
 80167d2:	2b13      	cmp	r3, #19
 80167d4:	d806      	bhi.n	80167e4 <ip4_frag+0xd0>
 80167d6:	4b6c      	ldr	r3, [pc, #432]	; (8016988 <ip4_frag+0x274>)
 80167d8:	f44f 7249 	mov.w	r2, #804	; 0x324
 80167dc:	496d      	ldr	r1, [pc, #436]	; (8016994 <ip4_frag+0x280>)
 80167de:	486c      	ldr	r0, [pc, #432]	; (8016990 <ip4_frag+0x27c>)
 80167e0:	f000 fc7e 	bl	80170e0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 80167e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167e6:	685b      	ldr	r3, [r3, #4]
 80167e8:	2214      	movs	r2, #20
 80167ea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80167ec:	4618      	mov	r0, r3
 80167ee:	f000 fbcc 	bl	8016f8a <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 80167f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80167f4:	685b      	ldr	r3, [r3, #4]
 80167f6:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 80167f8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80167fa:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 80167fe:	e064      	b.n	80168ca <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	895a      	ldrh	r2, [r3, #10]
 8016804:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016806:	1ad3      	subs	r3, r2, r3
 8016808:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	895b      	ldrh	r3, [r3, #10]
 801680e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016810:	429a      	cmp	r2, r3
 8016812:	d906      	bls.n	8016822 <ip4_frag+0x10e>
 8016814:	4b5c      	ldr	r3, [pc, #368]	; (8016988 <ip4_frag+0x274>)
 8016816:	f240 322d 	movw	r2, #813	; 0x32d
 801681a:	495f      	ldr	r1, [pc, #380]	; (8016998 <ip4_frag+0x284>)
 801681c:	485c      	ldr	r0, [pc, #368]	; (8016990 <ip4_frag+0x27c>)
 801681e:	f000 fc5f 	bl	80170e0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8016822:	8bfa      	ldrh	r2, [r7, #30]
 8016824:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016828:	4293      	cmp	r3, r2
 801682a:	bf28      	it	cs
 801682c:	4613      	movcs	r3, r2
 801682e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8016832:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016836:	2b00      	cmp	r3, #0
 8016838:	d105      	bne.n	8016846 <ip4_frag+0x132>
        poff = 0;
 801683a:	2300      	movs	r3, #0
 801683c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	681b      	ldr	r3, [r3, #0]
 8016842:	60fb      	str	r3, [r7, #12]
        continue;
 8016844:	e041      	b.n	80168ca <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8016846:	f7ff ff0d 	bl	8016664 <ip_frag_alloc_pbuf_custom_ref>
 801684a:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801684c:	69bb      	ldr	r3, [r7, #24]
 801684e:	2b00      	cmp	r3, #0
 8016850:	d103      	bne.n	801685a <ip4_frag+0x146>
        pbuf_free(rambuf);
 8016852:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016854:	f7f5 fdb4 	bl	800c3c0 <pbuf_free>
        goto memerr;
 8016858:	e08f      	b.n	801697a <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801685a:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8016860:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016862:	4413      	add	r3, r2
 8016864:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8016868:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801686c:	9201      	str	r2, [sp, #4]
 801686e:	9300      	str	r3, [sp, #0]
 8016870:	4603      	mov	r3, r0
 8016872:	2241      	movs	r2, #65	; 0x41
 8016874:	2000      	movs	r0, #0
 8016876:	f7f5 fbe9 	bl	800c04c <pbuf_alloced_custom>
 801687a:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801687c:	697b      	ldr	r3, [r7, #20]
 801687e:	2b00      	cmp	r3, #0
 8016880:	d106      	bne.n	8016890 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8016882:	69b8      	ldr	r0, [r7, #24]
 8016884:	f7ff fef6 	bl	8016674 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8016888:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801688a:	f7f5 fd99 	bl	800c3c0 <pbuf_free>
        goto memerr;
 801688e:	e074      	b.n	801697a <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8016890:	68f8      	ldr	r0, [r7, #12]
 8016892:	f7f5 fe3b 	bl	800c50c <pbuf_ref>
      pcr->original = p;
 8016896:	69bb      	ldr	r3, [r7, #24]
 8016898:	68fa      	ldr	r2, [r7, #12]
 801689a:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801689c:	69bb      	ldr	r3, [r7, #24]
 801689e:	4a3f      	ldr	r2, [pc, #252]	; (801699c <ip4_frag+0x288>)
 80168a0:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80168a2:	6979      	ldr	r1, [r7, #20]
 80168a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80168a6:	f7f5 fe59 	bl	800c55c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80168aa:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80168ae:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80168b2:	1ad3      	subs	r3, r2, r3
 80168b4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80168b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d004      	beq.n	80168ca <ip4_frag+0x1b6>
        poff = 0;
 80168c0:	2300      	movs	r3, #0
 80168c2:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80168c4:	68fb      	ldr	r3, [r7, #12]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 80168ca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d196      	bne.n	8016800 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 80168d2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80168d4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80168d8:	4413      	add	r3, r2
 80168da:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 80168dc:	68bb      	ldr	r3, [r7, #8]
 80168de:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80168e0:	f1a3 0213 	sub.w	r2, r3, #19
 80168e4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80168e8:	429a      	cmp	r2, r3
 80168ea:	bfcc      	ite	gt
 80168ec:	2301      	movgt	r3, #1
 80168ee:	2300      	movle	r3, #0
 80168f0:	b2db      	uxtb	r3, r3
 80168f2:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 80168f4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80168f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80168fc:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 80168fe:	6a3b      	ldr	r3, [r7, #32]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d002      	beq.n	801690a <ip4_frag+0x1f6>
 8016904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016906:	2b00      	cmp	r3, #0
 8016908:	d003      	beq.n	8016912 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801690a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801690c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016910:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016912:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016914:	4618      	mov	r0, r3
 8016916:	f7f3 ff2b 	bl	800a770 <lwip_htons>
 801691a:	4603      	mov	r3, r0
 801691c:	461a      	mov	r2, r3
 801691e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016920:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016922:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016924:	3314      	adds	r3, #20
 8016926:	b29b      	uxth	r3, r3
 8016928:	4618      	mov	r0, r3
 801692a:	f7f3 ff21 	bl	800a770 <lwip_htons>
 801692e:	4603      	mov	r3, r0
 8016930:	461a      	mov	r2, r3
 8016932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016934:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016938:	2200      	movs	r2, #0
 801693a:	729a      	strb	r2, [r3, #10]
 801693c:	2200      	movs	r2, #0
 801693e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8016940:	68bb      	ldr	r3, [r7, #8]
 8016942:	695b      	ldr	r3, [r3, #20]
 8016944:	687a      	ldr	r2, [r7, #4]
 8016946:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016948:	68b8      	ldr	r0, [r7, #8]
 801694a:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801694c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801694e:	f7f5 fd37 	bl	800c3c0 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8016952:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016956:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016958:	1ad3      	subs	r3, r2, r3
 801695a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801695e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8016962:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016964:	4413      	add	r3, r2
 8016966:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801696a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801696e:	2b00      	cmp	r3, #0
 8016970:	f47f af19 	bne.w	80167a6 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8016974:	2300      	movs	r3, #0
 8016976:	e002      	b.n	801697e <ip4_frag+0x26a>
      goto memerr;
 8016978:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801697a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801697e:	4618      	mov	r0, r3
 8016980:	3748      	adds	r7, #72	; 0x48
 8016982:	46bd      	mov	sp, r7
 8016984:	bd80      	pop	{r7, pc}
 8016986:	bf00      	nop
 8016988:	0801acb0 	.word	0x0801acb0
 801698c:	0801ae8c 	.word	0x0801ae8c
 8016990:	0801acf8 	.word	0x0801acf8
 8016994:	0801aea8 	.word	0x0801aea8
 8016998:	0801aec8 	.word	0x0801aec8
 801699c:	080166ad 	.word	0x080166ad

080169a0 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b086      	sub	sp, #24
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
 80169a8:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80169aa:	230e      	movs	r3, #14
 80169ac:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	895b      	ldrh	r3, [r3, #10]
 80169b2:	2b0e      	cmp	r3, #14
 80169b4:	d96e      	bls.n	8016a94 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80169b6:	687b      	ldr	r3, [r7, #4]
 80169b8:	7bdb      	ldrb	r3, [r3, #15]
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d106      	bne.n	80169cc <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80169be:	683b      	ldr	r3, [r7, #0]
 80169c0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80169c4:	3301      	adds	r3, #1
 80169c6:	b2da      	uxtb	r2, r3
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	685b      	ldr	r3, [r3, #4]
 80169d0:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 80169d2:	693b      	ldr	r3, [r7, #16]
 80169d4:	7b1a      	ldrb	r2, [r3, #12]
 80169d6:	7b5b      	ldrb	r3, [r3, #13]
 80169d8:	021b      	lsls	r3, r3, #8
 80169da:	4313      	orrs	r3, r2
 80169dc:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 80169de:	693b      	ldr	r3, [r7, #16]
 80169e0:	781b      	ldrb	r3, [r3, #0]
 80169e2:	f003 0301 	and.w	r3, r3, #1
 80169e6:	2b00      	cmp	r3, #0
 80169e8:	d023      	beq.n	8016a32 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 80169ea:	693b      	ldr	r3, [r7, #16]
 80169ec:	781b      	ldrb	r3, [r3, #0]
 80169ee:	2b01      	cmp	r3, #1
 80169f0:	d10f      	bne.n	8016a12 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80169f2:	693b      	ldr	r3, [r7, #16]
 80169f4:	785b      	ldrb	r3, [r3, #1]
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	d11b      	bne.n	8016a32 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 80169fa:	693b      	ldr	r3, [r7, #16]
 80169fc:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 80169fe:	2b5e      	cmp	r3, #94	; 0x5e
 8016a00:	d117      	bne.n	8016a32 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	7b5b      	ldrb	r3, [r3, #13]
 8016a06:	f043 0310 	orr.w	r3, r3, #16
 8016a0a:	b2da      	uxtb	r2, r3
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	735a      	strb	r2, [r3, #13]
 8016a10:	e00f      	b.n	8016a32 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016a12:	693b      	ldr	r3, [r7, #16]
 8016a14:	2206      	movs	r2, #6
 8016a16:	4928      	ldr	r1, [pc, #160]	; (8016ab8 <ethernet_input+0x118>)
 8016a18:	4618      	mov	r0, r3
 8016a1a:	f000 faa6 	bl	8016f6a <memcmp>
 8016a1e:	4603      	mov	r3, r0
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d106      	bne.n	8016a32 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	7b5b      	ldrb	r3, [r3, #13]
 8016a28:	f043 0308 	orr.w	r3, r3, #8
 8016a2c:	b2da      	uxtb	r2, r3
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016a32:	89fb      	ldrh	r3, [r7, #14]
 8016a34:	2b08      	cmp	r3, #8
 8016a36:	d003      	beq.n	8016a40 <ethernet_input+0xa0>
 8016a38:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016a3c:	d014      	beq.n	8016a68 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8016a3e:	e032      	b.n	8016aa6 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016a40:	683b      	ldr	r3, [r7, #0]
 8016a42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016a46:	f003 0308 	and.w	r3, r3, #8
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d024      	beq.n	8016a98 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016a4e:	8afb      	ldrh	r3, [r7, #22]
 8016a50:	4619      	mov	r1, r3
 8016a52:	6878      	ldr	r0, [r7, #4]
 8016a54:	f7f5 fc2e 	bl	800c2b4 <pbuf_remove_header>
 8016a58:	4603      	mov	r3, r0
 8016a5a:	2b00      	cmp	r3, #0
 8016a5c:	d11e      	bne.n	8016a9c <ethernet_input+0xfc>
        ip4_input(p, netif);
 8016a5e:	6839      	ldr	r1, [r7, #0]
 8016a60:	6878      	ldr	r0, [r7, #4]
 8016a62:	f7fe fef5 	bl	8015850 <ip4_input>
      break;
 8016a66:	e013      	b.n	8016a90 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8016a68:	683b      	ldr	r3, [r7, #0]
 8016a6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016a6e:	f003 0308 	and.w	r3, r3, #8
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d014      	beq.n	8016aa0 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8016a76:	8afb      	ldrh	r3, [r7, #22]
 8016a78:	4619      	mov	r1, r3
 8016a7a:	6878      	ldr	r0, [r7, #4]
 8016a7c:	f7f5 fc1a 	bl	800c2b4 <pbuf_remove_header>
 8016a80:	4603      	mov	r3, r0
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d10e      	bne.n	8016aa4 <ethernet_input+0x104>
        etharp_input(p, netif);
 8016a86:	6839      	ldr	r1, [r7, #0]
 8016a88:	6878      	ldr	r0, [r7, #4]
 8016a8a:	f7fe f891 	bl	8014bb0 <etharp_input>
      break;
 8016a8e:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8016a90:	2300      	movs	r3, #0
 8016a92:	e00c      	b.n	8016aae <ethernet_input+0x10e>
    goto free_and_return;
 8016a94:	bf00      	nop
 8016a96:	e006      	b.n	8016aa6 <ethernet_input+0x106>
        goto free_and_return;
 8016a98:	bf00      	nop
 8016a9a:	e004      	b.n	8016aa6 <ethernet_input+0x106>
        goto free_and_return;
 8016a9c:	bf00      	nop
 8016a9e:	e002      	b.n	8016aa6 <ethernet_input+0x106>
        goto free_and_return;
 8016aa0:	bf00      	nop
 8016aa2:	e000      	b.n	8016aa6 <ethernet_input+0x106>
        goto free_and_return;
 8016aa4:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016aa6:	6878      	ldr	r0, [r7, #4]
 8016aa8:	f7f5 fc8a 	bl	800c3c0 <pbuf_free>
  return ERR_OK;
 8016aac:	2300      	movs	r3, #0
}
 8016aae:	4618      	mov	r0, r3
 8016ab0:	3718      	adds	r7, #24
 8016ab2:	46bd      	mov	sp, r7
 8016ab4:	bd80      	pop	{r7, pc}
 8016ab6:	bf00      	nop
 8016ab8:	0801b100 	.word	0x0801b100

08016abc <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016abc:	b580      	push	{r7, lr}
 8016abe:	b086      	sub	sp, #24
 8016ac0:	af00      	add	r7, sp, #0
 8016ac2:	60f8      	str	r0, [r7, #12]
 8016ac4:	60b9      	str	r1, [r7, #8]
 8016ac6:	607a      	str	r2, [r7, #4]
 8016ac8:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016aca:	8c3b      	ldrh	r3, [r7, #32]
 8016acc:	4618      	mov	r0, r3
 8016ace:	f7f3 fe4f 	bl	800a770 <lwip_htons>
 8016ad2:	4603      	mov	r3, r0
 8016ad4:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016ad6:	210e      	movs	r1, #14
 8016ad8:	68b8      	ldr	r0, [r7, #8]
 8016ada:	f7f5 fbdb 	bl	800c294 <pbuf_add_header>
 8016ade:	4603      	mov	r3, r0
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d125      	bne.n	8016b30 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016ae4:	68bb      	ldr	r3, [r7, #8]
 8016ae6:	685b      	ldr	r3, [r3, #4]
 8016ae8:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016aea:	693b      	ldr	r3, [r7, #16]
 8016aec:	8afa      	ldrh	r2, [r7, #22]
 8016aee:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016af0:	693b      	ldr	r3, [r7, #16]
 8016af2:	2206      	movs	r2, #6
 8016af4:	6839      	ldr	r1, [r7, #0]
 8016af6:	4618      	mov	r0, r3
 8016af8:	f000 fa47 	bl	8016f8a <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016afc:	693b      	ldr	r3, [r7, #16]
 8016afe:	3306      	adds	r3, #6
 8016b00:	2206      	movs	r2, #6
 8016b02:	6879      	ldr	r1, [r7, #4]
 8016b04:	4618      	mov	r0, r3
 8016b06:	f000 fa40 	bl	8016f8a <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016b0a:	68fb      	ldr	r3, [r7, #12]
 8016b0c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016b10:	2b06      	cmp	r3, #6
 8016b12:	d006      	beq.n	8016b22 <ethernet_output+0x66>
 8016b14:	4b0a      	ldr	r3, [pc, #40]	; (8016b40 <ethernet_output+0x84>)
 8016b16:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016b1a:	490a      	ldr	r1, [pc, #40]	; (8016b44 <ethernet_output+0x88>)
 8016b1c:	480a      	ldr	r0, [pc, #40]	; (8016b48 <ethernet_output+0x8c>)
 8016b1e:	f000 fadf 	bl	80170e0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016b22:	68fb      	ldr	r3, [r7, #12]
 8016b24:	699b      	ldr	r3, [r3, #24]
 8016b26:	68b9      	ldr	r1, [r7, #8]
 8016b28:	68f8      	ldr	r0, [r7, #12]
 8016b2a:	4798      	blx	r3
 8016b2c:	4603      	mov	r3, r0
 8016b2e:	e002      	b.n	8016b36 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016b30:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016b32:	f06f 0301 	mvn.w	r3, #1
}
 8016b36:	4618      	mov	r0, r3
 8016b38:	3718      	adds	r7, #24
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	bd80      	pop	{r7, pc}
 8016b3e:	bf00      	nop
 8016b40:	0801aed8 	.word	0x0801aed8
 8016b44:	0801af10 	.word	0x0801af10
 8016b48:	0801af44 	.word	0x0801af44

08016b4c <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8016b4c:	b580      	push	{r7, lr}
 8016b4e:	b082      	sub	sp, #8
 8016b50:	af00      	add	r7, sp, #0
 8016b52:	6078      	str	r0, [r7, #4]
 8016b54:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 8016b56:	683b      	ldr	r3, [r7, #0]
 8016b58:	2200      	movs	r2, #0
 8016b5a:	2104      	movs	r1, #4
 8016b5c:	4618      	mov	r0, r3
 8016b5e:	f7f0 f83b 	bl	8006bd8 <osMessageQueueNew>
 8016b62:	4602      	mov	r2, r0
 8016b64:	687b      	ldr	r3, [r7, #4]
 8016b66:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d102      	bne.n	8016b76 <sys_mbox_new+0x2a>
    return ERR_MEM;
 8016b70:	f04f 33ff 	mov.w	r3, #4294967295
 8016b74:	e000      	b.n	8016b78 <sys_mbox_new+0x2c>

  return ERR_OK;
 8016b76:	2300      	movs	r3, #0
}
 8016b78:	4618      	mov	r0, r3
 8016b7a:	3708      	adds	r7, #8
 8016b7c:	46bd      	mov	sp, r7
 8016b7e:	bd80      	pop	{r7, pc}

08016b80 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016b80:	b580      	push	{r7, lr}
 8016b82:	b084      	sub	sp, #16
 8016b84:	af00      	add	r7, sp, #0
 8016b86:	6078      	str	r0, [r7, #4]
 8016b88:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8016b8a:	687b      	ldr	r3, [r7, #4]
 8016b8c:	6818      	ldr	r0, [r3, #0]
 8016b8e:	4639      	mov	r1, r7
 8016b90:	2300      	movs	r3, #0
 8016b92:	2200      	movs	r2, #0
 8016b94:	f7f0 f8a6 	bl	8006ce4 <osMessageQueuePut>
 8016b98:	4603      	mov	r3, r0
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d102      	bne.n	8016ba4 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8016b9e:	2300      	movs	r3, #0
 8016ba0:	73fb      	strb	r3, [r7, #15]
 8016ba2:	e001      	b.n	8016ba8 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016ba4:	23ff      	movs	r3, #255	; 0xff
 8016ba6:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016bac:	4618      	mov	r0, r3
 8016bae:	3710      	adds	r7, #16
 8016bb0:	46bd      	mov	sp, r7
 8016bb2:	bd80      	pop	{r7, pc}

08016bb4 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016bb4:	b580      	push	{r7, lr}
 8016bb6:	b086      	sub	sp, #24
 8016bb8:	af00      	add	r7, sp, #0
 8016bba:	60f8      	str	r0, [r7, #12]
 8016bbc:	60b9      	str	r1, [r7, #8]
 8016bbe:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016bc0:	f7ef fc2c 	bl	800641c <osKernelGetTickCount>
 8016bc4:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d013      	beq.n	8016bf4 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	6818      	ldr	r0, [r3, #0]
 8016bd0:	687b      	ldr	r3, [r7, #4]
 8016bd2:	2200      	movs	r2, #0
 8016bd4:	68b9      	ldr	r1, [r7, #8]
 8016bd6:	f7f0 f8f9 	bl	8006dcc <osMessageQueueGet>
 8016bda:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8016bdc:	693b      	ldr	r3, [r7, #16]
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d105      	bne.n	8016bee <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8016be2:	f7ef fc1b 	bl	800641c <osKernelGetTickCount>
 8016be6:	4602      	mov	r2, r0
 8016be8:	697b      	ldr	r3, [r7, #20]
 8016bea:	1ad3      	subs	r3, r2, r3
 8016bec:	e00f      	b.n	8016c0e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016bee:	f04f 33ff 	mov.w	r3, #4294967295
 8016bf2:	e00c      	b.n	8016c0e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	6818      	ldr	r0, [r3, #0]
 8016bf8:	f04f 33ff 	mov.w	r3, #4294967295
 8016bfc:	2200      	movs	r2, #0
 8016bfe:	68b9      	ldr	r1, [r7, #8]
 8016c00:	f7f0 f8e4 	bl	8006dcc <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8016c04:	f7ef fc0a 	bl	800641c <osKernelGetTickCount>
 8016c08:	4602      	mov	r2, r0
 8016c0a:	697b      	ldr	r3, [r7, #20]
 8016c0c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8016c0e:	4618      	mov	r0, r3
 8016c10:	3718      	adds	r7, #24
 8016c12:	46bd      	mov	sp, r7
 8016c14:	bd80      	pop	{r7, pc}

08016c16 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016c16:	b480      	push	{r7}
 8016c18:	b083      	sub	sp, #12
 8016c1a:	af00      	add	r7, sp, #0
 8016c1c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016c1e:	687b      	ldr	r3, [r7, #4]
 8016c20:	681b      	ldr	r3, [r3, #0]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d101      	bne.n	8016c2a <sys_mbox_valid+0x14>
    return 0;
 8016c26:	2300      	movs	r3, #0
 8016c28:	e000      	b.n	8016c2c <sys_mbox_valid+0x16>
  else
    return 1;
 8016c2a:	2301      	movs	r3, #1
}
 8016c2c:	4618      	mov	r0, r3
 8016c2e:	370c      	adds	r7, #12
 8016c30:	46bd      	mov	sp, r7
 8016c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c36:	4770      	bx	lr

08016c38 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016c38:	b580      	push	{r7, lr}
 8016c3a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8016c3c:	2000      	movs	r0, #0
 8016c3e:	f7ef fd29 	bl	8006694 <osMutexNew>
 8016c42:	4603      	mov	r3, r0
 8016c44:	4a01      	ldr	r2, [pc, #4]	; (8016c4c <sys_init+0x14>)
 8016c46:	6013      	str	r3, [r2, #0]
#endif
}
 8016c48:	bf00      	nop
 8016c4a:	bd80      	pop	{r7, pc}
 8016c4c:	2000f3f0 	.word	0x2000f3f0

08016c50 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016c50:	b580      	push	{r7, lr}
 8016c52:	b082      	sub	sp, #8
 8016c54:	af00      	add	r7, sp, #0
 8016c56:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8016c58:	2000      	movs	r0, #0
 8016c5a:	f7ef fd1b 	bl	8006694 <osMutexNew>
 8016c5e:	4602      	mov	r2, r0
 8016c60:	687b      	ldr	r3, [r7, #4]
 8016c62:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	681b      	ldr	r3, [r3, #0]
 8016c68:	2b00      	cmp	r3, #0
 8016c6a:	d102      	bne.n	8016c72 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016c6c:	f04f 33ff 	mov.w	r3, #4294967295
 8016c70:	e000      	b.n	8016c74 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016c72:	2300      	movs	r3, #0
}
 8016c74:	4618      	mov	r0, r3
 8016c76:	3708      	adds	r7, #8
 8016c78:	46bd      	mov	sp, r7
 8016c7a:	bd80      	pop	{r7, pc}

08016c7c <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016c7c:	b580      	push	{r7, lr}
 8016c7e:	b082      	sub	sp, #8
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	681b      	ldr	r3, [r3, #0]
 8016c88:	f04f 31ff 	mov.w	r1, #4294967295
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	f7ef fd9b 	bl	80067c8 <osMutexAcquire>
#endif
}
 8016c92:	bf00      	nop
 8016c94:	3708      	adds	r7, #8
 8016c96:	46bd      	mov	sp, r7
 8016c98:	bd80      	pop	{r7, pc}

08016c9a <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016c9a:	b580      	push	{r7, lr}
 8016c9c:	b082      	sub	sp, #8
 8016c9e:	af00      	add	r7, sp, #0
 8016ca0:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	4618      	mov	r0, r3
 8016ca8:	f7ef fdec 	bl	8006884 <osMutexRelease>
}
 8016cac:	bf00      	nop
 8016cae:	3708      	adds	r7, #8
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	bd80      	pop	{r7, pc}

08016cb4 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b08e      	sub	sp, #56	; 0x38
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	60f8      	str	r0, [r7, #12]
 8016cbc:	60b9      	str	r1, [r7, #8]
 8016cbe:	607a      	str	r2, [r7, #4]
 8016cc0:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8016cc2:	f107 0314 	add.w	r3, r7, #20
 8016cc6:	2224      	movs	r2, #36	; 0x24
 8016cc8:	2100      	movs	r1, #0
 8016cca:	4618      	mov	r0, r3
 8016ccc:	f000 f96b 	bl	8016fa6 <memset>
 8016cd0:	68fb      	ldr	r3, [r7, #12]
 8016cd2:	617b      	str	r3, [r7, #20]
 8016cd4:	683b      	ldr	r3, [r7, #0]
 8016cd6:	62bb      	str	r3, [r7, #40]	; 0x28
 8016cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016cda:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8016cdc:	f107 0314 	add.w	r3, r7, #20
 8016ce0:	461a      	mov	r2, r3
 8016ce2:	6879      	ldr	r1, [r7, #4]
 8016ce4:	68b8      	ldr	r0, [r7, #8]
 8016ce6:	f7ef fbc1 	bl	800646c <osThreadNew>
 8016cea:	4603      	mov	r3, r0
#endif
}
 8016cec:	4618      	mov	r0, r3
 8016cee:	3738      	adds	r7, #56	; 0x38
 8016cf0:	46bd      	mov	sp, r7
 8016cf2:	bd80      	pop	{r7, pc}

08016cf4 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016cf4:	b580      	push	{r7, lr}
 8016cf6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8016cf8:	4b04      	ldr	r3, [pc, #16]	; (8016d0c <sys_arch_protect+0x18>)
 8016cfa:	681b      	ldr	r3, [r3, #0]
 8016cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8016d00:	4618      	mov	r0, r3
 8016d02:	f7ef fd61 	bl	80067c8 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8016d06:	2301      	movs	r3, #1
}
 8016d08:	4618      	mov	r0, r3
 8016d0a:	bd80      	pop	{r7, pc}
 8016d0c:	2000f3f0 	.word	0x2000f3f0

08016d10 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016d10:	b580      	push	{r7, lr}
 8016d12:	b082      	sub	sp, #8
 8016d14:	af00      	add	r7, sp, #0
 8016d16:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016d18:	4b04      	ldr	r3, [pc, #16]	; (8016d2c <sys_arch_unprotect+0x1c>)
 8016d1a:	681b      	ldr	r3, [r3, #0]
 8016d1c:	4618      	mov	r0, r3
 8016d1e:	f7ef fdb1 	bl	8006884 <osMutexRelease>
}
 8016d22:	bf00      	nop
 8016d24:	3708      	adds	r7, #8
 8016d26:	46bd      	mov	sp, r7
 8016d28:	bd80      	pop	{r7, pc}
 8016d2a:	bf00      	nop
 8016d2c:	2000f3f0 	.word	0x2000f3f0

08016d30 <std>:
 8016d30:	2300      	movs	r3, #0
 8016d32:	b510      	push	{r4, lr}
 8016d34:	4604      	mov	r4, r0
 8016d36:	e9c0 3300 	strd	r3, r3, [r0]
 8016d3a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016d3e:	6083      	str	r3, [r0, #8]
 8016d40:	8181      	strh	r1, [r0, #12]
 8016d42:	6643      	str	r3, [r0, #100]	; 0x64
 8016d44:	81c2      	strh	r2, [r0, #14]
 8016d46:	6183      	str	r3, [r0, #24]
 8016d48:	4619      	mov	r1, r3
 8016d4a:	2208      	movs	r2, #8
 8016d4c:	305c      	adds	r0, #92	; 0x5c
 8016d4e:	f000 f92a 	bl	8016fa6 <memset>
 8016d52:	4b05      	ldr	r3, [pc, #20]	; (8016d68 <std+0x38>)
 8016d54:	6263      	str	r3, [r4, #36]	; 0x24
 8016d56:	4b05      	ldr	r3, [pc, #20]	; (8016d6c <std+0x3c>)
 8016d58:	62a3      	str	r3, [r4, #40]	; 0x28
 8016d5a:	4b05      	ldr	r3, [pc, #20]	; (8016d70 <std+0x40>)
 8016d5c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016d5e:	4b05      	ldr	r3, [pc, #20]	; (8016d74 <std+0x44>)
 8016d60:	6224      	str	r4, [r4, #32]
 8016d62:	6323      	str	r3, [r4, #48]	; 0x30
 8016d64:	bd10      	pop	{r4, pc}
 8016d66:	bf00      	nop
 8016d68:	08017281 	.word	0x08017281
 8016d6c:	080172a3 	.word	0x080172a3
 8016d70:	080172db 	.word	0x080172db
 8016d74:	080172ff 	.word	0x080172ff

08016d78 <_cleanup_r>:
 8016d78:	4901      	ldr	r1, [pc, #4]	; (8016d80 <_cleanup_r+0x8>)
 8016d7a:	f000 b8af 	b.w	8016edc <_fwalk_reent>
 8016d7e:	bf00      	nop
 8016d80:	08017495 	.word	0x08017495

08016d84 <__sfmoreglue>:
 8016d84:	b570      	push	{r4, r5, r6, lr}
 8016d86:	2268      	movs	r2, #104	; 0x68
 8016d88:	1e4d      	subs	r5, r1, #1
 8016d8a:	4355      	muls	r5, r2
 8016d8c:	460e      	mov	r6, r1
 8016d8e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016d92:	f000 f931 	bl	8016ff8 <_malloc_r>
 8016d96:	4604      	mov	r4, r0
 8016d98:	b140      	cbz	r0, 8016dac <__sfmoreglue+0x28>
 8016d9a:	2100      	movs	r1, #0
 8016d9c:	e9c0 1600 	strd	r1, r6, [r0]
 8016da0:	300c      	adds	r0, #12
 8016da2:	60a0      	str	r0, [r4, #8]
 8016da4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016da8:	f000 f8fd 	bl	8016fa6 <memset>
 8016dac:	4620      	mov	r0, r4
 8016dae:	bd70      	pop	{r4, r5, r6, pc}

08016db0 <__sfp_lock_acquire>:
 8016db0:	4801      	ldr	r0, [pc, #4]	; (8016db8 <__sfp_lock_acquire+0x8>)
 8016db2:	f000 b8d8 	b.w	8016f66 <__retarget_lock_acquire_recursive>
 8016db6:	bf00      	nop
 8016db8:	2000f3f5 	.word	0x2000f3f5

08016dbc <__sfp_lock_release>:
 8016dbc:	4801      	ldr	r0, [pc, #4]	; (8016dc4 <__sfp_lock_release+0x8>)
 8016dbe:	f000 b8d3 	b.w	8016f68 <__retarget_lock_release_recursive>
 8016dc2:	bf00      	nop
 8016dc4:	2000f3f5 	.word	0x2000f3f5

08016dc8 <__sinit_lock_acquire>:
 8016dc8:	4801      	ldr	r0, [pc, #4]	; (8016dd0 <__sinit_lock_acquire+0x8>)
 8016dca:	f000 b8cc 	b.w	8016f66 <__retarget_lock_acquire_recursive>
 8016dce:	bf00      	nop
 8016dd0:	2000f3f6 	.word	0x2000f3f6

08016dd4 <__sinit_lock_release>:
 8016dd4:	4801      	ldr	r0, [pc, #4]	; (8016ddc <__sinit_lock_release+0x8>)
 8016dd6:	f000 b8c7 	b.w	8016f68 <__retarget_lock_release_recursive>
 8016dda:	bf00      	nop
 8016ddc:	2000f3f6 	.word	0x2000f3f6

08016de0 <__sinit>:
 8016de0:	b510      	push	{r4, lr}
 8016de2:	4604      	mov	r4, r0
 8016de4:	f7ff fff0 	bl	8016dc8 <__sinit_lock_acquire>
 8016de8:	69a3      	ldr	r3, [r4, #24]
 8016dea:	b11b      	cbz	r3, 8016df4 <__sinit+0x14>
 8016dec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016df0:	f7ff bff0 	b.w	8016dd4 <__sinit_lock_release>
 8016df4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016df8:	6523      	str	r3, [r4, #80]	; 0x50
 8016dfa:	4b13      	ldr	r3, [pc, #76]	; (8016e48 <__sinit+0x68>)
 8016dfc:	4a13      	ldr	r2, [pc, #76]	; (8016e4c <__sinit+0x6c>)
 8016dfe:	681b      	ldr	r3, [r3, #0]
 8016e00:	62a2      	str	r2, [r4, #40]	; 0x28
 8016e02:	42a3      	cmp	r3, r4
 8016e04:	bf04      	itt	eq
 8016e06:	2301      	moveq	r3, #1
 8016e08:	61a3      	streq	r3, [r4, #24]
 8016e0a:	4620      	mov	r0, r4
 8016e0c:	f000 f820 	bl	8016e50 <__sfp>
 8016e10:	6060      	str	r0, [r4, #4]
 8016e12:	4620      	mov	r0, r4
 8016e14:	f000 f81c 	bl	8016e50 <__sfp>
 8016e18:	60a0      	str	r0, [r4, #8]
 8016e1a:	4620      	mov	r0, r4
 8016e1c:	f000 f818 	bl	8016e50 <__sfp>
 8016e20:	2200      	movs	r2, #0
 8016e22:	60e0      	str	r0, [r4, #12]
 8016e24:	2104      	movs	r1, #4
 8016e26:	6860      	ldr	r0, [r4, #4]
 8016e28:	f7ff ff82 	bl	8016d30 <std>
 8016e2c:	68a0      	ldr	r0, [r4, #8]
 8016e2e:	2201      	movs	r2, #1
 8016e30:	2109      	movs	r1, #9
 8016e32:	f7ff ff7d 	bl	8016d30 <std>
 8016e36:	68e0      	ldr	r0, [r4, #12]
 8016e38:	2202      	movs	r2, #2
 8016e3a:	2112      	movs	r1, #18
 8016e3c:	f7ff ff78 	bl	8016d30 <std>
 8016e40:	2301      	movs	r3, #1
 8016e42:	61a3      	str	r3, [r4, #24]
 8016e44:	e7d2      	b.n	8016dec <__sinit+0xc>
 8016e46:	bf00      	nop
 8016e48:	0801b170 	.word	0x0801b170
 8016e4c:	08016d79 	.word	0x08016d79

08016e50 <__sfp>:
 8016e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016e52:	4607      	mov	r7, r0
 8016e54:	f7ff ffac 	bl	8016db0 <__sfp_lock_acquire>
 8016e58:	4b1e      	ldr	r3, [pc, #120]	; (8016ed4 <__sfp+0x84>)
 8016e5a:	681e      	ldr	r6, [r3, #0]
 8016e5c:	69b3      	ldr	r3, [r6, #24]
 8016e5e:	b913      	cbnz	r3, 8016e66 <__sfp+0x16>
 8016e60:	4630      	mov	r0, r6
 8016e62:	f7ff ffbd 	bl	8016de0 <__sinit>
 8016e66:	3648      	adds	r6, #72	; 0x48
 8016e68:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8016e6c:	3b01      	subs	r3, #1
 8016e6e:	d503      	bpl.n	8016e78 <__sfp+0x28>
 8016e70:	6833      	ldr	r3, [r6, #0]
 8016e72:	b30b      	cbz	r3, 8016eb8 <__sfp+0x68>
 8016e74:	6836      	ldr	r6, [r6, #0]
 8016e76:	e7f7      	b.n	8016e68 <__sfp+0x18>
 8016e78:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8016e7c:	b9d5      	cbnz	r5, 8016eb4 <__sfp+0x64>
 8016e7e:	4b16      	ldr	r3, [pc, #88]	; (8016ed8 <__sfp+0x88>)
 8016e80:	60e3      	str	r3, [r4, #12]
 8016e82:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8016e86:	6665      	str	r5, [r4, #100]	; 0x64
 8016e88:	f000 f86c 	bl	8016f64 <__retarget_lock_init_recursive>
 8016e8c:	f7ff ff96 	bl	8016dbc <__sfp_lock_release>
 8016e90:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016e94:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016e98:	6025      	str	r5, [r4, #0]
 8016e9a:	61a5      	str	r5, [r4, #24]
 8016e9c:	2208      	movs	r2, #8
 8016e9e:	4629      	mov	r1, r5
 8016ea0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016ea4:	f000 f87f 	bl	8016fa6 <memset>
 8016ea8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8016eac:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016eb0:	4620      	mov	r0, r4
 8016eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016eb4:	3468      	adds	r4, #104	; 0x68
 8016eb6:	e7d9      	b.n	8016e6c <__sfp+0x1c>
 8016eb8:	2104      	movs	r1, #4
 8016eba:	4638      	mov	r0, r7
 8016ebc:	f7ff ff62 	bl	8016d84 <__sfmoreglue>
 8016ec0:	4604      	mov	r4, r0
 8016ec2:	6030      	str	r0, [r6, #0]
 8016ec4:	2800      	cmp	r0, #0
 8016ec6:	d1d5      	bne.n	8016e74 <__sfp+0x24>
 8016ec8:	f7ff ff78 	bl	8016dbc <__sfp_lock_release>
 8016ecc:	230c      	movs	r3, #12
 8016ece:	603b      	str	r3, [r7, #0]
 8016ed0:	e7ee      	b.n	8016eb0 <__sfp+0x60>
 8016ed2:	bf00      	nop
 8016ed4:	0801b170 	.word	0x0801b170
 8016ed8:	ffff0001 	.word	0xffff0001

08016edc <_fwalk_reent>:
 8016edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016ee0:	4606      	mov	r6, r0
 8016ee2:	4688      	mov	r8, r1
 8016ee4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016ee8:	2700      	movs	r7, #0
 8016eea:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016eee:	f1b9 0901 	subs.w	r9, r9, #1
 8016ef2:	d505      	bpl.n	8016f00 <_fwalk_reent+0x24>
 8016ef4:	6824      	ldr	r4, [r4, #0]
 8016ef6:	2c00      	cmp	r4, #0
 8016ef8:	d1f7      	bne.n	8016eea <_fwalk_reent+0xe>
 8016efa:	4638      	mov	r0, r7
 8016efc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016f00:	89ab      	ldrh	r3, [r5, #12]
 8016f02:	2b01      	cmp	r3, #1
 8016f04:	d907      	bls.n	8016f16 <_fwalk_reent+0x3a>
 8016f06:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016f0a:	3301      	adds	r3, #1
 8016f0c:	d003      	beq.n	8016f16 <_fwalk_reent+0x3a>
 8016f0e:	4629      	mov	r1, r5
 8016f10:	4630      	mov	r0, r6
 8016f12:	47c0      	blx	r8
 8016f14:	4307      	orrs	r7, r0
 8016f16:	3568      	adds	r5, #104	; 0x68
 8016f18:	e7e9      	b.n	8016eee <_fwalk_reent+0x12>
	...

08016f1c <__libc_init_array>:
 8016f1c:	b570      	push	{r4, r5, r6, lr}
 8016f1e:	4d0d      	ldr	r5, [pc, #52]	; (8016f54 <__libc_init_array+0x38>)
 8016f20:	4c0d      	ldr	r4, [pc, #52]	; (8016f58 <__libc_init_array+0x3c>)
 8016f22:	1b64      	subs	r4, r4, r5
 8016f24:	10a4      	asrs	r4, r4, #2
 8016f26:	2600      	movs	r6, #0
 8016f28:	42a6      	cmp	r6, r4
 8016f2a:	d109      	bne.n	8016f40 <__libc_init_array+0x24>
 8016f2c:	4d0b      	ldr	r5, [pc, #44]	; (8016f5c <__libc_init_array+0x40>)
 8016f2e:	4c0c      	ldr	r4, [pc, #48]	; (8016f60 <__libc_init_array+0x44>)
 8016f30:	f001 f802 	bl	8017f38 <_init>
 8016f34:	1b64      	subs	r4, r4, r5
 8016f36:	10a4      	asrs	r4, r4, #2
 8016f38:	2600      	movs	r6, #0
 8016f3a:	42a6      	cmp	r6, r4
 8016f3c:	d105      	bne.n	8016f4a <__libc_init_array+0x2e>
 8016f3e:	bd70      	pop	{r4, r5, r6, pc}
 8016f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f44:	4798      	blx	r3
 8016f46:	3601      	adds	r6, #1
 8016f48:	e7ee      	b.n	8016f28 <__libc_init_array+0xc>
 8016f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8016f4e:	4798      	blx	r3
 8016f50:	3601      	adds	r6, #1
 8016f52:	e7f2      	b.n	8016f3a <__libc_init_array+0x1e>
 8016f54:	0801b260 	.word	0x0801b260
 8016f58:	0801b260 	.word	0x0801b260
 8016f5c:	0801b260 	.word	0x0801b260
 8016f60:	0801b264 	.word	0x0801b264

08016f64 <__retarget_lock_init_recursive>:
 8016f64:	4770      	bx	lr

08016f66 <__retarget_lock_acquire_recursive>:
 8016f66:	4770      	bx	lr

08016f68 <__retarget_lock_release_recursive>:
 8016f68:	4770      	bx	lr

08016f6a <memcmp>:
 8016f6a:	b510      	push	{r4, lr}
 8016f6c:	3901      	subs	r1, #1
 8016f6e:	4402      	add	r2, r0
 8016f70:	4290      	cmp	r0, r2
 8016f72:	d101      	bne.n	8016f78 <memcmp+0xe>
 8016f74:	2000      	movs	r0, #0
 8016f76:	e005      	b.n	8016f84 <memcmp+0x1a>
 8016f78:	7803      	ldrb	r3, [r0, #0]
 8016f7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016f7e:	42a3      	cmp	r3, r4
 8016f80:	d001      	beq.n	8016f86 <memcmp+0x1c>
 8016f82:	1b18      	subs	r0, r3, r4
 8016f84:	bd10      	pop	{r4, pc}
 8016f86:	3001      	adds	r0, #1
 8016f88:	e7f2      	b.n	8016f70 <memcmp+0x6>

08016f8a <memcpy>:
 8016f8a:	440a      	add	r2, r1
 8016f8c:	4291      	cmp	r1, r2
 8016f8e:	f100 33ff 	add.w	r3, r0, #4294967295
 8016f92:	d100      	bne.n	8016f96 <memcpy+0xc>
 8016f94:	4770      	bx	lr
 8016f96:	b510      	push	{r4, lr}
 8016f98:	f811 4b01 	ldrb.w	r4, [r1], #1
 8016f9c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016fa0:	4291      	cmp	r1, r2
 8016fa2:	d1f9      	bne.n	8016f98 <memcpy+0xe>
 8016fa4:	bd10      	pop	{r4, pc}

08016fa6 <memset>:
 8016fa6:	4402      	add	r2, r0
 8016fa8:	4603      	mov	r3, r0
 8016faa:	4293      	cmp	r3, r2
 8016fac:	d100      	bne.n	8016fb0 <memset+0xa>
 8016fae:	4770      	bx	lr
 8016fb0:	f803 1b01 	strb.w	r1, [r3], #1
 8016fb4:	e7f9      	b.n	8016faa <memset+0x4>
	...

08016fb8 <sbrk_aligned>:
 8016fb8:	b570      	push	{r4, r5, r6, lr}
 8016fba:	4e0e      	ldr	r6, [pc, #56]	; (8016ff4 <sbrk_aligned+0x3c>)
 8016fbc:	460c      	mov	r4, r1
 8016fbe:	6831      	ldr	r1, [r6, #0]
 8016fc0:	4605      	mov	r5, r0
 8016fc2:	b911      	cbnz	r1, 8016fca <sbrk_aligned+0x12>
 8016fc4:	f000 f94c 	bl	8017260 <_sbrk_r>
 8016fc8:	6030      	str	r0, [r6, #0]
 8016fca:	4621      	mov	r1, r4
 8016fcc:	4628      	mov	r0, r5
 8016fce:	f000 f947 	bl	8017260 <_sbrk_r>
 8016fd2:	1c43      	adds	r3, r0, #1
 8016fd4:	d00a      	beq.n	8016fec <sbrk_aligned+0x34>
 8016fd6:	1cc4      	adds	r4, r0, #3
 8016fd8:	f024 0403 	bic.w	r4, r4, #3
 8016fdc:	42a0      	cmp	r0, r4
 8016fde:	d007      	beq.n	8016ff0 <sbrk_aligned+0x38>
 8016fe0:	1a21      	subs	r1, r4, r0
 8016fe2:	4628      	mov	r0, r5
 8016fe4:	f000 f93c 	bl	8017260 <_sbrk_r>
 8016fe8:	3001      	adds	r0, #1
 8016fea:	d101      	bne.n	8016ff0 <sbrk_aligned+0x38>
 8016fec:	f04f 34ff 	mov.w	r4, #4294967295
 8016ff0:	4620      	mov	r0, r4
 8016ff2:	bd70      	pop	{r4, r5, r6, pc}
 8016ff4:	2000f3fc 	.word	0x2000f3fc

08016ff8 <_malloc_r>:
 8016ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016ffc:	1ccd      	adds	r5, r1, #3
 8016ffe:	f025 0503 	bic.w	r5, r5, #3
 8017002:	3508      	adds	r5, #8
 8017004:	2d0c      	cmp	r5, #12
 8017006:	bf38      	it	cc
 8017008:	250c      	movcc	r5, #12
 801700a:	2d00      	cmp	r5, #0
 801700c:	4607      	mov	r7, r0
 801700e:	db01      	blt.n	8017014 <_malloc_r+0x1c>
 8017010:	42a9      	cmp	r1, r5
 8017012:	d905      	bls.n	8017020 <_malloc_r+0x28>
 8017014:	230c      	movs	r3, #12
 8017016:	603b      	str	r3, [r7, #0]
 8017018:	2600      	movs	r6, #0
 801701a:	4630      	mov	r0, r6
 801701c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017020:	4e2e      	ldr	r6, [pc, #184]	; (80170dc <_malloc_r+0xe4>)
 8017022:	f000 fa9f 	bl	8017564 <__malloc_lock>
 8017026:	6833      	ldr	r3, [r6, #0]
 8017028:	461c      	mov	r4, r3
 801702a:	bb34      	cbnz	r4, 801707a <_malloc_r+0x82>
 801702c:	4629      	mov	r1, r5
 801702e:	4638      	mov	r0, r7
 8017030:	f7ff ffc2 	bl	8016fb8 <sbrk_aligned>
 8017034:	1c43      	adds	r3, r0, #1
 8017036:	4604      	mov	r4, r0
 8017038:	d14d      	bne.n	80170d6 <_malloc_r+0xde>
 801703a:	6834      	ldr	r4, [r6, #0]
 801703c:	4626      	mov	r6, r4
 801703e:	2e00      	cmp	r6, #0
 8017040:	d140      	bne.n	80170c4 <_malloc_r+0xcc>
 8017042:	6823      	ldr	r3, [r4, #0]
 8017044:	4631      	mov	r1, r6
 8017046:	4638      	mov	r0, r7
 8017048:	eb04 0803 	add.w	r8, r4, r3
 801704c:	f000 f908 	bl	8017260 <_sbrk_r>
 8017050:	4580      	cmp	r8, r0
 8017052:	d13a      	bne.n	80170ca <_malloc_r+0xd2>
 8017054:	6821      	ldr	r1, [r4, #0]
 8017056:	3503      	adds	r5, #3
 8017058:	1a6d      	subs	r5, r5, r1
 801705a:	f025 0503 	bic.w	r5, r5, #3
 801705e:	3508      	adds	r5, #8
 8017060:	2d0c      	cmp	r5, #12
 8017062:	bf38      	it	cc
 8017064:	250c      	movcc	r5, #12
 8017066:	4629      	mov	r1, r5
 8017068:	4638      	mov	r0, r7
 801706a:	f7ff ffa5 	bl	8016fb8 <sbrk_aligned>
 801706e:	3001      	adds	r0, #1
 8017070:	d02b      	beq.n	80170ca <_malloc_r+0xd2>
 8017072:	6823      	ldr	r3, [r4, #0]
 8017074:	442b      	add	r3, r5
 8017076:	6023      	str	r3, [r4, #0]
 8017078:	e00e      	b.n	8017098 <_malloc_r+0xa0>
 801707a:	6822      	ldr	r2, [r4, #0]
 801707c:	1b52      	subs	r2, r2, r5
 801707e:	d41e      	bmi.n	80170be <_malloc_r+0xc6>
 8017080:	2a0b      	cmp	r2, #11
 8017082:	d916      	bls.n	80170b2 <_malloc_r+0xba>
 8017084:	1961      	adds	r1, r4, r5
 8017086:	42a3      	cmp	r3, r4
 8017088:	6025      	str	r5, [r4, #0]
 801708a:	bf18      	it	ne
 801708c:	6059      	strne	r1, [r3, #4]
 801708e:	6863      	ldr	r3, [r4, #4]
 8017090:	bf08      	it	eq
 8017092:	6031      	streq	r1, [r6, #0]
 8017094:	5162      	str	r2, [r4, r5]
 8017096:	604b      	str	r3, [r1, #4]
 8017098:	4638      	mov	r0, r7
 801709a:	f104 060b 	add.w	r6, r4, #11
 801709e:	f000 fa67 	bl	8017570 <__malloc_unlock>
 80170a2:	f026 0607 	bic.w	r6, r6, #7
 80170a6:	1d23      	adds	r3, r4, #4
 80170a8:	1af2      	subs	r2, r6, r3
 80170aa:	d0b6      	beq.n	801701a <_malloc_r+0x22>
 80170ac:	1b9b      	subs	r3, r3, r6
 80170ae:	50a3      	str	r3, [r4, r2]
 80170b0:	e7b3      	b.n	801701a <_malloc_r+0x22>
 80170b2:	6862      	ldr	r2, [r4, #4]
 80170b4:	42a3      	cmp	r3, r4
 80170b6:	bf0c      	ite	eq
 80170b8:	6032      	streq	r2, [r6, #0]
 80170ba:	605a      	strne	r2, [r3, #4]
 80170bc:	e7ec      	b.n	8017098 <_malloc_r+0xa0>
 80170be:	4623      	mov	r3, r4
 80170c0:	6864      	ldr	r4, [r4, #4]
 80170c2:	e7b2      	b.n	801702a <_malloc_r+0x32>
 80170c4:	4634      	mov	r4, r6
 80170c6:	6876      	ldr	r6, [r6, #4]
 80170c8:	e7b9      	b.n	801703e <_malloc_r+0x46>
 80170ca:	230c      	movs	r3, #12
 80170cc:	603b      	str	r3, [r7, #0]
 80170ce:	4638      	mov	r0, r7
 80170d0:	f000 fa4e 	bl	8017570 <__malloc_unlock>
 80170d4:	e7a1      	b.n	801701a <_malloc_r+0x22>
 80170d6:	6025      	str	r5, [r4, #0]
 80170d8:	e7de      	b.n	8017098 <_malloc_r+0xa0>
 80170da:	bf00      	nop
 80170dc:	2000f3f8 	.word	0x2000f3f8

080170e0 <iprintf>:
 80170e0:	b40f      	push	{r0, r1, r2, r3}
 80170e2:	4b0a      	ldr	r3, [pc, #40]	; (801710c <iprintf+0x2c>)
 80170e4:	b513      	push	{r0, r1, r4, lr}
 80170e6:	681c      	ldr	r4, [r3, #0]
 80170e8:	b124      	cbz	r4, 80170f4 <iprintf+0x14>
 80170ea:	69a3      	ldr	r3, [r4, #24]
 80170ec:	b913      	cbnz	r3, 80170f4 <iprintf+0x14>
 80170ee:	4620      	mov	r0, r4
 80170f0:	f7ff fe76 	bl	8016de0 <__sinit>
 80170f4:	ab05      	add	r3, sp, #20
 80170f6:	9a04      	ldr	r2, [sp, #16]
 80170f8:	68a1      	ldr	r1, [r4, #8]
 80170fa:	9301      	str	r3, [sp, #4]
 80170fc:	4620      	mov	r0, r4
 80170fe:	f000 fab3 	bl	8017668 <_vfiprintf_r>
 8017102:	b002      	add	sp, #8
 8017104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017108:	b004      	add	sp, #16
 801710a:	4770      	bx	lr
 801710c:	20000034 	.word	0x20000034

08017110 <rand>:
 8017110:	4b16      	ldr	r3, [pc, #88]	; (801716c <rand+0x5c>)
 8017112:	b510      	push	{r4, lr}
 8017114:	681c      	ldr	r4, [r3, #0]
 8017116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8017118:	b9b3      	cbnz	r3, 8017148 <rand+0x38>
 801711a:	2018      	movs	r0, #24
 801711c:	f000 fa1a 	bl	8017554 <malloc>
 8017120:	63a0      	str	r0, [r4, #56]	; 0x38
 8017122:	b928      	cbnz	r0, 8017130 <rand+0x20>
 8017124:	4602      	mov	r2, r0
 8017126:	4b12      	ldr	r3, [pc, #72]	; (8017170 <rand+0x60>)
 8017128:	4812      	ldr	r0, [pc, #72]	; (8017174 <rand+0x64>)
 801712a:	214e      	movs	r1, #78	; 0x4e
 801712c:	f000 f8fe 	bl	801732c <__assert_func>
 8017130:	4a11      	ldr	r2, [pc, #68]	; (8017178 <rand+0x68>)
 8017132:	4b12      	ldr	r3, [pc, #72]	; (801717c <rand+0x6c>)
 8017134:	e9c0 2300 	strd	r2, r3, [r0]
 8017138:	4b11      	ldr	r3, [pc, #68]	; (8017180 <rand+0x70>)
 801713a:	6083      	str	r3, [r0, #8]
 801713c:	230b      	movs	r3, #11
 801713e:	8183      	strh	r3, [r0, #12]
 8017140:	2201      	movs	r2, #1
 8017142:	2300      	movs	r3, #0
 8017144:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8017148:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 801714a:	4a0e      	ldr	r2, [pc, #56]	; (8017184 <rand+0x74>)
 801714c:	6920      	ldr	r0, [r4, #16]
 801714e:	6963      	ldr	r3, [r4, #20]
 8017150:	490d      	ldr	r1, [pc, #52]	; (8017188 <rand+0x78>)
 8017152:	4342      	muls	r2, r0
 8017154:	fb01 2203 	mla	r2, r1, r3, r2
 8017158:	fba0 0101 	umull	r0, r1, r0, r1
 801715c:	1c43      	adds	r3, r0, #1
 801715e:	eb42 0001 	adc.w	r0, r2, r1
 8017162:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8017166:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801716a:	bd10      	pop	{r4, pc}
 801716c:	20000034 	.word	0x20000034
 8017170:	0801b174 	.word	0x0801b174
 8017174:	0801b18b 	.word	0x0801b18b
 8017178:	abcd330e 	.word	0xabcd330e
 801717c:	e66d1234 	.word	0xe66d1234
 8017180:	0005deec 	.word	0x0005deec
 8017184:	5851f42d 	.word	0x5851f42d
 8017188:	4c957f2d 	.word	0x4c957f2d

0801718c <cleanup_glue>:
 801718c:	b538      	push	{r3, r4, r5, lr}
 801718e:	460c      	mov	r4, r1
 8017190:	6809      	ldr	r1, [r1, #0]
 8017192:	4605      	mov	r5, r0
 8017194:	b109      	cbz	r1, 801719a <cleanup_glue+0xe>
 8017196:	f7ff fff9 	bl	801718c <cleanup_glue>
 801719a:	4621      	mov	r1, r4
 801719c:	4628      	mov	r0, r5
 801719e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80171a2:	f000 b9eb 	b.w	801757c <_free_r>
	...

080171a8 <_reclaim_reent>:
 80171a8:	4b2c      	ldr	r3, [pc, #176]	; (801725c <_reclaim_reent+0xb4>)
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	4283      	cmp	r3, r0
 80171ae:	b570      	push	{r4, r5, r6, lr}
 80171b0:	4604      	mov	r4, r0
 80171b2:	d051      	beq.n	8017258 <_reclaim_reent+0xb0>
 80171b4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80171b6:	b143      	cbz	r3, 80171ca <_reclaim_reent+0x22>
 80171b8:	68db      	ldr	r3, [r3, #12]
 80171ba:	2b00      	cmp	r3, #0
 80171bc:	d14a      	bne.n	8017254 <_reclaim_reent+0xac>
 80171be:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80171c0:	6819      	ldr	r1, [r3, #0]
 80171c2:	b111      	cbz	r1, 80171ca <_reclaim_reent+0x22>
 80171c4:	4620      	mov	r0, r4
 80171c6:	f000 f9d9 	bl	801757c <_free_r>
 80171ca:	6961      	ldr	r1, [r4, #20]
 80171cc:	b111      	cbz	r1, 80171d4 <_reclaim_reent+0x2c>
 80171ce:	4620      	mov	r0, r4
 80171d0:	f000 f9d4 	bl	801757c <_free_r>
 80171d4:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80171d6:	b111      	cbz	r1, 80171de <_reclaim_reent+0x36>
 80171d8:	4620      	mov	r0, r4
 80171da:	f000 f9cf 	bl	801757c <_free_r>
 80171de:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80171e0:	b111      	cbz	r1, 80171e8 <_reclaim_reent+0x40>
 80171e2:	4620      	mov	r0, r4
 80171e4:	f000 f9ca 	bl	801757c <_free_r>
 80171e8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80171ea:	b111      	cbz	r1, 80171f2 <_reclaim_reent+0x4a>
 80171ec:	4620      	mov	r0, r4
 80171ee:	f000 f9c5 	bl	801757c <_free_r>
 80171f2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80171f4:	b111      	cbz	r1, 80171fc <_reclaim_reent+0x54>
 80171f6:	4620      	mov	r0, r4
 80171f8:	f000 f9c0 	bl	801757c <_free_r>
 80171fc:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80171fe:	b111      	cbz	r1, 8017206 <_reclaim_reent+0x5e>
 8017200:	4620      	mov	r0, r4
 8017202:	f000 f9bb 	bl	801757c <_free_r>
 8017206:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8017208:	b111      	cbz	r1, 8017210 <_reclaim_reent+0x68>
 801720a:	4620      	mov	r0, r4
 801720c:	f000 f9b6 	bl	801757c <_free_r>
 8017210:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017212:	b111      	cbz	r1, 801721a <_reclaim_reent+0x72>
 8017214:	4620      	mov	r0, r4
 8017216:	f000 f9b1 	bl	801757c <_free_r>
 801721a:	69a3      	ldr	r3, [r4, #24]
 801721c:	b1e3      	cbz	r3, 8017258 <_reclaim_reent+0xb0>
 801721e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8017220:	4620      	mov	r0, r4
 8017222:	4798      	blx	r3
 8017224:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8017226:	b1b9      	cbz	r1, 8017258 <_reclaim_reent+0xb0>
 8017228:	4620      	mov	r0, r4
 801722a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801722e:	f7ff bfad 	b.w	801718c <cleanup_glue>
 8017232:	5949      	ldr	r1, [r1, r5]
 8017234:	b941      	cbnz	r1, 8017248 <_reclaim_reent+0xa0>
 8017236:	3504      	adds	r5, #4
 8017238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801723a:	2d80      	cmp	r5, #128	; 0x80
 801723c:	68d9      	ldr	r1, [r3, #12]
 801723e:	d1f8      	bne.n	8017232 <_reclaim_reent+0x8a>
 8017240:	4620      	mov	r0, r4
 8017242:	f000 f99b 	bl	801757c <_free_r>
 8017246:	e7ba      	b.n	80171be <_reclaim_reent+0x16>
 8017248:	680e      	ldr	r6, [r1, #0]
 801724a:	4620      	mov	r0, r4
 801724c:	f000 f996 	bl	801757c <_free_r>
 8017250:	4631      	mov	r1, r6
 8017252:	e7ef      	b.n	8017234 <_reclaim_reent+0x8c>
 8017254:	2500      	movs	r5, #0
 8017256:	e7ef      	b.n	8017238 <_reclaim_reent+0x90>
 8017258:	bd70      	pop	{r4, r5, r6, pc}
 801725a:	bf00      	nop
 801725c:	20000034 	.word	0x20000034

08017260 <_sbrk_r>:
 8017260:	b538      	push	{r3, r4, r5, lr}
 8017262:	4d06      	ldr	r5, [pc, #24]	; (801727c <_sbrk_r+0x1c>)
 8017264:	2300      	movs	r3, #0
 8017266:	4604      	mov	r4, r0
 8017268:	4608      	mov	r0, r1
 801726a:	602b      	str	r3, [r5, #0]
 801726c:	f7e9 ff82 	bl	8001174 <_sbrk>
 8017270:	1c43      	adds	r3, r0, #1
 8017272:	d102      	bne.n	801727a <_sbrk_r+0x1a>
 8017274:	682b      	ldr	r3, [r5, #0]
 8017276:	b103      	cbz	r3, 801727a <_sbrk_r+0x1a>
 8017278:	6023      	str	r3, [r4, #0]
 801727a:	bd38      	pop	{r3, r4, r5, pc}
 801727c:	2000f400 	.word	0x2000f400

08017280 <__sread>:
 8017280:	b510      	push	{r4, lr}
 8017282:	460c      	mov	r4, r1
 8017284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017288:	f000 fcb2 	bl	8017bf0 <_read_r>
 801728c:	2800      	cmp	r0, #0
 801728e:	bfab      	itete	ge
 8017290:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8017292:	89a3      	ldrhlt	r3, [r4, #12]
 8017294:	181b      	addge	r3, r3, r0
 8017296:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801729a:	bfac      	ite	ge
 801729c:	6563      	strge	r3, [r4, #84]	; 0x54
 801729e:	81a3      	strhlt	r3, [r4, #12]
 80172a0:	bd10      	pop	{r4, pc}

080172a2 <__swrite>:
 80172a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80172a6:	461f      	mov	r7, r3
 80172a8:	898b      	ldrh	r3, [r1, #12]
 80172aa:	05db      	lsls	r3, r3, #23
 80172ac:	4605      	mov	r5, r0
 80172ae:	460c      	mov	r4, r1
 80172b0:	4616      	mov	r6, r2
 80172b2:	d505      	bpl.n	80172c0 <__swrite+0x1e>
 80172b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172b8:	2302      	movs	r3, #2
 80172ba:	2200      	movs	r2, #0
 80172bc:	f000 f938 	bl	8017530 <_lseek_r>
 80172c0:	89a3      	ldrh	r3, [r4, #12]
 80172c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80172c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80172ca:	81a3      	strh	r3, [r4, #12]
 80172cc:	4632      	mov	r2, r6
 80172ce:	463b      	mov	r3, r7
 80172d0:	4628      	mov	r0, r5
 80172d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80172d6:	f000 b817 	b.w	8017308 <_write_r>

080172da <__sseek>:
 80172da:	b510      	push	{r4, lr}
 80172dc:	460c      	mov	r4, r1
 80172de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80172e2:	f000 f925 	bl	8017530 <_lseek_r>
 80172e6:	1c43      	adds	r3, r0, #1
 80172e8:	89a3      	ldrh	r3, [r4, #12]
 80172ea:	bf15      	itete	ne
 80172ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80172ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80172f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80172f6:	81a3      	strheq	r3, [r4, #12]
 80172f8:	bf18      	it	ne
 80172fa:	81a3      	strhne	r3, [r4, #12]
 80172fc:	bd10      	pop	{r4, pc}

080172fe <__sclose>:
 80172fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017302:	f000 b831 	b.w	8017368 <_close_r>
	...

08017308 <_write_r>:
 8017308:	b538      	push	{r3, r4, r5, lr}
 801730a:	4d07      	ldr	r5, [pc, #28]	; (8017328 <_write_r+0x20>)
 801730c:	4604      	mov	r4, r0
 801730e:	4608      	mov	r0, r1
 8017310:	4611      	mov	r1, r2
 8017312:	2200      	movs	r2, #0
 8017314:	602a      	str	r2, [r5, #0]
 8017316:	461a      	mov	r2, r3
 8017318:	f7e9 fedb 	bl	80010d2 <_write>
 801731c:	1c43      	adds	r3, r0, #1
 801731e:	d102      	bne.n	8017326 <_write_r+0x1e>
 8017320:	682b      	ldr	r3, [r5, #0]
 8017322:	b103      	cbz	r3, 8017326 <_write_r+0x1e>
 8017324:	6023      	str	r3, [r4, #0]
 8017326:	bd38      	pop	{r3, r4, r5, pc}
 8017328:	2000f400 	.word	0x2000f400

0801732c <__assert_func>:
 801732c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801732e:	4614      	mov	r4, r2
 8017330:	461a      	mov	r2, r3
 8017332:	4b09      	ldr	r3, [pc, #36]	; (8017358 <__assert_func+0x2c>)
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	4605      	mov	r5, r0
 8017338:	68d8      	ldr	r0, [r3, #12]
 801733a:	b14c      	cbz	r4, 8017350 <__assert_func+0x24>
 801733c:	4b07      	ldr	r3, [pc, #28]	; (801735c <__assert_func+0x30>)
 801733e:	9100      	str	r1, [sp, #0]
 8017340:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017344:	4906      	ldr	r1, [pc, #24]	; (8017360 <__assert_func+0x34>)
 8017346:	462b      	mov	r3, r5
 8017348:	f000 f8e0 	bl	801750c <fiprintf>
 801734c:	f000 fd22 	bl	8017d94 <abort>
 8017350:	4b04      	ldr	r3, [pc, #16]	; (8017364 <__assert_func+0x38>)
 8017352:	461c      	mov	r4, r3
 8017354:	e7f3      	b.n	801733e <__assert_func+0x12>
 8017356:	bf00      	nop
 8017358:	20000034 	.word	0x20000034
 801735c:	0801b1e6 	.word	0x0801b1e6
 8017360:	0801b1f3 	.word	0x0801b1f3
 8017364:	0801b221 	.word	0x0801b221

08017368 <_close_r>:
 8017368:	b538      	push	{r3, r4, r5, lr}
 801736a:	4d06      	ldr	r5, [pc, #24]	; (8017384 <_close_r+0x1c>)
 801736c:	2300      	movs	r3, #0
 801736e:	4604      	mov	r4, r0
 8017370:	4608      	mov	r0, r1
 8017372:	602b      	str	r3, [r5, #0]
 8017374:	f7e9 fec9 	bl	800110a <_close>
 8017378:	1c43      	adds	r3, r0, #1
 801737a:	d102      	bne.n	8017382 <_close_r+0x1a>
 801737c:	682b      	ldr	r3, [r5, #0]
 801737e:	b103      	cbz	r3, 8017382 <_close_r+0x1a>
 8017380:	6023      	str	r3, [r4, #0]
 8017382:	bd38      	pop	{r3, r4, r5, pc}
 8017384:	2000f400 	.word	0x2000f400

08017388 <__sflush_r>:
 8017388:	898a      	ldrh	r2, [r1, #12]
 801738a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801738e:	4605      	mov	r5, r0
 8017390:	0710      	lsls	r0, r2, #28
 8017392:	460c      	mov	r4, r1
 8017394:	d458      	bmi.n	8017448 <__sflush_r+0xc0>
 8017396:	684b      	ldr	r3, [r1, #4]
 8017398:	2b00      	cmp	r3, #0
 801739a:	dc05      	bgt.n	80173a8 <__sflush_r+0x20>
 801739c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801739e:	2b00      	cmp	r3, #0
 80173a0:	dc02      	bgt.n	80173a8 <__sflush_r+0x20>
 80173a2:	2000      	movs	r0, #0
 80173a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80173a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80173aa:	2e00      	cmp	r6, #0
 80173ac:	d0f9      	beq.n	80173a2 <__sflush_r+0x1a>
 80173ae:	2300      	movs	r3, #0
 80173b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80173b4:	682f      	ldr	r7, [r5, #0]
 80173b6:	602b      	str	r3, [r5, #0]
 80173b8:	d032      	beq.n	8017420 <__sflush_r+0x98>
 80173ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80173bc:	89a3      	ldrh	r3, [r4, #12]
 80173be:	075a      	lsls	r2, r3, #29
 80173c0:	d505      	bpl.n	80173ce <__sflush_r+0x46>
 80173c2:	6863      	ldr	r3, [r4, #4]
 80173c4:	1ac0      	subs	r0, r0, r3
 80173c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80173c8:	b10b      	cbz	r3, 80173ce <__sflush_r+0x46>
 80173ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80173cc:	1ac0      	subs	r0, r0, r3
 80173ce:	2300      	movs	r3, #0
 80173d0:	4602      	mov	r2, r0
 80173d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80173d4:	6a21      	ldr	r1, [r4, #32]
 80173d6:	4628      	mov	r0, r5
 80173d8:	47b0      	blx	r6
 80173da:	1c43      	adds	r3, r0, #1
 80173dc:	89a3      	ldrh	r3, [r4, #12]
 80173de:	d106      	bne.n	80173ee <__sflush_r+0x66>
 80173e0:	6829      	ldr	r1, [r5, #0]
 80173e2:	291d      	cmp	r1, #29
 80173e4:	d82c      	bhi.n	8017440 <__sflush_r+0xb8>
 80173e6:	4a2a      	ldr	r2, [pc, #168]	; (8017490 <__sflush_r+0x108>)
 80173e8:	40ca      	lsrs	r2, r1
 80173ea:	07d6      	lsls	r6, r2, #31
 80173ec:	d528      	bpl.n	8017440 <__sflush_r+0xb8>
 80173ee:	2200      	movs	r2, #0
 80173f0:	6062      	str	r2, [r4, #4]
 80173f2:	04d9      	lsls	r1, r3, #19
 80173f4:	6922      	ldr	r2, [r4, #16]
 80173f6:	6022      	str	r2, [r4, #0]
 80173f8:	d504      	bpl.n	8017404 <__sflush_r+0x7c>
 80173fa:	1c42      	adds	r2, r0, #1
 80173fc:	d101      	bne.n	8017402 <__sflush_r+0x7a>
 80173fe:	682b      	ldr	r3, [r5, #0]
 8017400:	b903      	cbnz	r3, 8017404 <__sflush_r+0x7c>
 8017402:	6560      	str	r0, [r4, #84]	; 0x54
 8017404:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017406:	602f      	str	r7, [r5, #0]
 8017408:	2900      	cmp	r1, #0
 801740a:	d0ca      	beq.n	80173a2 <__sflush_r+0x1a>
 801740c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017410:	4299      	cmp	r1, r3
 8017412:	d002      	beq.n	801741a <__sflush_r+0x92>
 8017414:	4628      	mov	r0, r5
 8017416:	f000 f8b1 	bl	801757c <_free_r>
 801741a:	2000      	movs	r0, #0
 801741c:	6360      	str	r0, [r4, #52]	; 0x34
 801741e:	e7c1      	b.n	80173a4 <__sflush_r+0x1c>
 8017420:	6a21      	ldr	r1, [r4, #32]
 8017422:	2301      	movs	r3, #1
 8017424:	4628      	mov	r0, r5
 8017426:	47b0      	blx	r6
 8017428:	1c41      	adds	r1, r0, #1
 801742a:	d1c7      	bne.n	80173bc <__sflush_r+0x34>
 801742c:	682b      	ldr	r3, [r5, #0]
 801742e:	2b00      	cmp	r3, #0
 8017430:	d0c4      	beq.n	80173bc <__sflush_r+0x34>
 8017432:	2b1d      	cmp	r3, #29
 8017434:	d001      	beq.n	801743a <__sflush_r+0xb2>
 8017436:	2b16      	cmp	r3, #22
 8017438:	d101      	bne.n	801743e <__sflush_r+0xb6>
 801743a:	602f      	str	r7, [r5, #0]
 801743c:	e7b1      	b.n	80173a2 <__sflush_r+0x1a>
 801743e:	89a3      	ldrh	r3, [r4, #12]
 8017440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017444:	81a3      	strh	r3, [r4, #12]
 8017446:	e7ad      	b.n	80173a4 <__sflush_r+0x1c>
 8017448:	690f      	ldr	r7, [r1, #16]
 801744a:	2f00      	cmp	r7, #0
 801744c:	d0a9      	beq.n	80173a2 <__sflush_r+0x1a>
 801744e:	0793      	lsls	r3, r2, #30
 8017450:	680e      	ldr	r6, [r1, #0]
 8017452:	bf08      	it	eq
 8017454:	694b      	ldreq	r3, [r1, #20]
 8017456:	600f      	str	r7, [r1, #0]
 8017458:	bf18      	it	ne
 801745a:	2300      	movne	r3, #0
 801745c:	eba6 0807 	sub.w	r8, r6, r7
 8017460:	608b      	str	r3, [r1, #8]
 8017462:	f1b8 0f00 	cmp.w	r8, #0
 8017466:	dd9c      	ble.n	80173a2 <__sflush_r+0x1a>
 8017468:	6a21      	ldr	r1, [r4, #32]
 801746a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801746c:	4643      	mov	r3, r8
 801746e:	463a      	mov	r2, r7
 8017470:	4628      	mov	r0, r5
 8017472:	47b0      	blx	r6
 8017474:	2800      	cmp	r0, #0
 8017476:	dc06      	bgt.n	8017486 <__sflush_r+0xfe>
 8017478:	89a3      	ldrh	r3, [r4, #12]
 801747a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801747e:	81a3      	strh	r3, [r4, #12]
 8017480:	f04f 30ff 	mov.w	r0, #4294967295
 8017484:	e78e      	b.n	80173a4 <__sflush_r+0x1c>
 8017486:	4407      	add	r7, r0
 8017488:	eba8 0800 	sub.w	r8, r8, r0
 801748c:	e7e9      	b.n	8017462 <__sflush_r+0xda>
 801748e:	bf00      	nop
 8017490:	20400001 	.word	0x20400001

08017494 <_fflush_r>:
 8017494:	b538      	push	{r3, r4, r5, lr}
 8017496:	690b      	ldr	r3, [r1, #16]
 8017498:	4605      	mov	r5, r0
 801749a:	460c      	mov	r4, r1
 801749c:	b913      	cbnz	r3, 80174a4 <_fflush_r+0x10>
 801749e:	2500      	movs	r5, #0
 80174a0:	4628      	mov	r0, r5
 80174a2:	bd38      	pop	{r3, r4, r5, pc}
 80174a4:	b118      	cbz	r0, 80174ae <_fflush_r+0x1a>
 80174a6:	6983      	ldr	r3, [r0, #24]
 80174a8:	b90b      	cbnz	r3, 80174ae <_fflush_r+0x1a>
 80174aa:	f7ff fc99 	bl	8016de0 <__sinit>
 80174ae:	4b14      	ldr	r3, [pc, #80]	; (8017500 <_fflush_r+0x6c>)
 80174b0:	429c      	cmp	r4, r3
 80174b2:	d11b      	bne.n	80174ec <_fflush_r+0x58>
 80174b4:	686c      	ldr	r4, [r5, #4]
 80174b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80174ba:	2b00      	cmp	r3, #0
 80174bc:	d0ef      	beq.n	801749e <_fflush_r+0xa>
 80174be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80174c0:	07d0      	lsls	r0, r2, #31
 80174c2:	d404      	bmi.n	80174ce <_fflush_r+0x3a>
 80174c4:	0599      	lsls	r1, r3, #22
 80174c6:	d402      	bmi.n	80174ce <_fflush_r+0x3a>
 80174c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80174ca:	f7ff fd4c 	bl	8016f66 <__retarget_lock_acquire_recursive>
 80174ce:	4628      	mov	r0, r5
 80174d0:	4621      	mov	r1, r4
 80174d2:	f7ff ff59 	bl	8017388 <__sflush_r>
 80174d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80174d8:	07da      	lsls	r2, r3, #31
 80174da:	4605      	mov	r5, r0
 80174dc:	d4e0      	bmi.n	80174a0 <_fflush_r+0xc>
 80174de:	89a3      	ldrh	r3, [r4, #12]
 80174e0:	059b      	lsls	r3, r3, #22
 80174e2:	d4dd      	bmi.n	80174a0 <_fflush_r+0xc>
 80174e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80174e6:	f7ff fd3f 	bl	8016f68 <__retarget_lock_release_recursive>
 80174ea:	e7d9      	b.n	80174a0 <_fflush_r+0xc>
 80174ec:	4b05      	ldr	r3, [pc, #20]	; (8017504 <_fflush_r+0x70>)
 80174ee:	429c      	cmp	r4, r3
 80174f0:	d101      	bne.n	80174f6 <_fflush_r+0x62>
 80174f2:	68ac      	ldr	r4, [r5, #8]
 80174f4:	e7df      	b.n	80174b6 <_fflush_r+0x22>
 80174f6:	4b04      	ldr	r3, [pc, #16]	; (8017508 <_fflush_r+0x74>)
 80174f8:	429c      	cmp	r4, r3
 80174fa:	bf08      	it	eq
 80174fc:	68ec      	ldreq	r4, [r5, #12]
 80174fe:	e7da      	b.n	80174b6 <_fflush_r+0x22>
 8017500:	0801b130 	.word	0x0801b130
 8017504:	0801b150 	.word	0x0801b150
 8017508:	0801b110 	.word	0x0801b110

0801750c <fiprintf>:
 801750c:	b40e      	push	{r1, r2, r3}
 801750e:	b503      	push	{r0, r1, lr}
 8017510:	4601      	mov	r1, r0
 8017512:	ab03      	add	r3, sp, #12
 8017514:	4805      	ldr	r0, [pc, #20]	; (801752c <fiprintf+0x20>)
 8017516:	f853 2b04 	ldr.w	r2, [r3], #4
 801751a:	6800      	ldr	r0, [r0, #0]
 801751c:	9301      	str	r3, [sp, #4]
 801751e:	f000 f8a3 	bl	8017668 <_vfiprintf_r>
 8017522:	b002      	add	sp, #8
 8017524:	f85d eb04 	ldr.w	lr, [sp], #4
 8017528:	b003      	add	sp, #12
 801752a:	4770      	bx	lr
 801752c:	20000034 	.word	0x20000034

08017530 <_lseek_r>:
 8017530:	b538      	push	{r3, r4, r5, lr}
 8017532:	4d07      	ldr	r5, [pc, #28]	; (8017550 <_lseek_r+0x20>)
 8017534:	4604      	mov	r4, r0
 8017536:	4608      	mov	r0, r1
 8017538:	4611      	mov	r1, r2
 801753a:	2200      	movs	r2, #0
 801753c:	602a      	str	r2, [r5, #0]
 801753e:	461a      	mov	r2, r3
 8017540:	f7e9 fe0a 	bl	8001158 <_lseek>
 8017544:	1c43      	adds	r3, r0, #1
 8017546:	d102      	bne.n	801754e <_lseek_r+0x1e>
 8017548:	682b      	ldr	r3, [r5, #0]
 801754a:	b103      	cbz	r3, 801754e <_lseek_r+0x1e>
 801754c:	6023      	str	r3, [r4, #0]
 801754e:	bd38      	pop	{r3, r4, r5, pc}
 8017550:	2000f400 	.word	0x2000f400

08017554 <malloc>:
 8017554:	4b02      	ldr	r3, [pc, #8]	; (8017560 <malloc+0xc>)
 8017556:	4601      	mov	r1, r0
 8017558:	6818      	ldr	r0, [r3, #0]
 801755a:	f7ff bd4d 	b.w	8016ff8 <_malloc_r>
 801755e:	bf00      	nop
 8017560:	20000034 	.word	0x20000034

08017564 <__malloc_lock>:
 8017564:	4801      	ldr	r0, [pc, #4]	; (801756c <__malloc_lock+0x8>)
 8017566:	f7ff bcfe 	b.w	8016f66 <__retarget_lock_acquire_recursive>
 801756a:	bf00      	nop
 801756c:	2000f3f4 	.word	0x2000f3f4

08017570 <__malloc_unlock>:
 8017570:	4801      	ldr	r0, [pc, #4]	; (8017578 <__malloc_unlock+0x8>)
 8017572:	f7ff bcf9 	b.w	8016f68 <__retarget_lock_release_recursive>
 8017576:	bf00      	nop
 8017578:	2000f3f4 	.word	0x2000f3f4

0801757c <_free_r>:
 801757c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801757e:	2900      	cmp	r1, #0
 8017580:	d044      	beq.n	801760c <_free_r+0x90>
 8017582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017586:	9001      	str	r0, [sp, #4]
 8017588:	2b00      	cmp	r3, #0
 801758a:	f1a1 0404 	sub.w	r4, r1, #4
 801758e:	bfb8      	it	lt
 8017590:	18e4      	addlt	r4, r4, r3
 8017592:	f7ff ffe7 	bl	8017564 <__malloc_lock>
 8017596:	4a1e      	ldr	r2, [pc, #120]	; (8017610 <_free_r+0x94>)
 8017598:	9801      	ldr	r0, [sp, #4]
 801759a:	6813      	ldr	r3, [r2, #0]
 801759c:	b933      	cbnz	r3, 80175ac <_free_r+0x30>
 801759e:	6063      	str	r3, [r4, #4]
 80175a0:	6014      	str	r4, [r2, #0]
 80175a2:	b003      	add	sp, #12
 80175a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80175a8:	f7ff bfe2 	b.w	8017570 <__malloc_unlock>
 80175ac:	42a3      	cmp	r3, r4
 80175ae:	d908      	bls.n	80175c2 <_free_r+0x46>
 80175b0:	6825      	ldr	r5, [r4, #0]
 80175b2:	1961      	adds	r1, r4, r5
 80175b4:	428b      	cmp	r3, r1
 80175b6:	bf01      	itttt	eq
 80175b8:	6819      	ldreq	r1, [r3, #0]
 80175ba:	685b      	ldreq	r3, [r3, #4]
 80175bc:	1949      	addeq	r1, r1, r5
 80175be:	6021      	streq	r1, [r4, #0]
 80175c0:	e7ed      	b.n	801759e <_free_r+0x22>
 80175c2:	461a      	mov	r2, r3
 80175c4:	685b      	ldr	r3, [r3, #4]
 80175c6:	b10b      	cbz	r3, 80175cc <_free_r+0x50>
 80175c8:	42a3      	cmp	r3, r4
 80175ca:	d9fa      	bls.n	80175c2 <_free_r+0x46>
 80175cc:	6811      	ldr	r1, [r2, #0]
 80175ce:	1855      	adds	r5, r2, r1
 80175d0:	42a5      	cmp	r5, r4
 80175d2:	d10b      	bne.n	80175ec <_free_r+0x70>
 80175d4:	6824      	ldr	r4, [r4, #0]
 80175d6:	4421      	add	r1, r4
 80175d8:	1854      	adds	r4, r2, r1
 80175da:	42a3      	cmp	r3, r4
 80175dc:	6011      	str	r1, [r2, #0]
 80175de:	d1e0      	bne.n	80175a2 <_free_r+0x26>
 80175e0:	681c      	ldr	r4, [r3, #0]
 80175e2:	685b      	ldr	r3, [r3, #4]
 80175e4:	6053      	str	r3, [r2, #4]
 80175e6:	4421      	add	r1, r4
 80175e8:	6011      	str	r1, [r2, #0]
 80175ea:	e7da      	b.n	80175a2 <_free_r+0x26>
 80175ec:	d902      	bls.n	80175f4 <_free_r+0x78>
 80175ee:	230c      	movs	r3, #12
 80175f0:	6003      	str	r3, [r0, #0]
 80175f2:	e7d6      	b.n	80175a2 <_free_r+0x26>
 80175f4:	6825      	ldr	r5, [r4, #0]
 80175f6:	1961      	adds	r1, r4, r5
 80175f8:	428b      	cmp	r3, r1
 80175fa:	bf04      	itt	eq
 80175fc:	6819      	ldreq	r1, [r3, #0]
 80175fe:	685b      	ldreq	r3, [r3, #4]
 8017600:	6063      	str	r3, [r4, #4]
 8017602:	bf04      	itt	eq
 8017604:	1949      	addeq	r1, r1, r5
 8017606:	6021      	streq	r1, [r4, #0]
 8017608:	6054      	str	r4, [r2, #4]
 801760a:	e7ca      	b.n	80175a2 <_free_r+0x26>
 801760c:	b003      	add	sp, #12
 801760e:	bd30      	pop	{r4, r5, pc}
 8017610:	2000f3f8 	.word	0x2000f3f8

08017614 <__sfputc_r>:
 8017614:	6893      	ldr	r3, [r2, #8]
 8017616:	3b01      	subs	r3, #1
 8017618:	2b00      	cmp	r3, #0
 801761a:	b410      	push	{r4}
 801761c:	6093      	str	r3, [r2, #8]
 801761e:	da08      	bge.n	8017632 <__sfputc_r+0x1e>
 8017620:	6994      	ldr	r4, [r2, #24]
 8017622:	42a3      	cmp	r3, r4
 8017624:	db01      	blt.n	801762a <__sfputc_r+0x16>
 8017626:	290a      	cmp	r1, #10
 8017628:	d103      	bne.n	8017632 <__sfputc_r+0x1e>
 801762a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801762e:	f000 baf1 	b.w	8017c14 <__swbuf_r>
 8017632:	6813      	ldr	r3, [r2, #0]
 8017634:	1c58      	adds	r0, r3, #1
 8017636:	6010      	str	r0, [r2, #0]
 8017638:	7019      	strb	r1, [r3, #0]
 801763a:	4608      	mov	r0, r1
 801763c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017640:	4770      	bx	lr

08017642 <__sfputs_r>:
 8017642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017644:	4606      	mov	r6, r0
 8017646:	460f      	mov	r7, r1
 8017648:	4614      	mov	r4, r2
 801764a:	18d5      	adds	r5, r2, r3
 801764c:	42ac      	cmp	r4, r5
 801764e:	d101      	bne.n	8017654 <__sfputs_r+0x12>
 8017650:	2000      	movs	r0, #0
 8017652:	e007      	b.n	8017664 <__sfputs_r+0x22>
 8017654:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017658:	463a      	mov	r2, r7
 801765a:	4630      	mov	r0, r6
 801765c:	f7ff ffda 	bl	8017614 <__sfputc_r>
 8017660:	1c43      	adds	r3, r0, #1
 8017662:	d1f3      	bne.n	801764c <__sfputs_r+0xa>
 8017664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017668 <_vfiprintf_r>:
 8017668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801766c:	460d      	mov	r5, r1
 801766e:	b09d      	sub	sp, #116	; 0x74
 8017670:	4614      	mov	r4, r2
 8017672:	4698      	mov	r8, r3
 8017674:	4606      	mov	r6, r0
 8017676:	b118      	cbz	r0, 8017680 <_vfiprintf_r+0x18>
 8017678:	6983      	ldr	r3, [r0, #24]
 801767a:	b90b      	cbnz	r3, 8017680 <_vfiprintf_r+0x18>
 801767c:	f7ff fbb0 	bl	8016de0 <__sinit>
 8017680:	4b89      	ldr	r3, [pc, #548]	; (80178a8 <_vfiprintf_r+0x240>)
 8017682:	429d      	cmp	r5, r3
 8017684:	d11b      	bne.n	80176be <_vfiprintf_r+0x56>
 8017686:	6875      	ldr	r5, [r6, #4]
 8017688:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801768a:	07d9      	lsls	r1, r3, #31
 801768c:	d405      	bmi.n	801769a <_vfiprintf_r+0x32>
 801768e:	89ab      	ldrh	r3, [r5, #12]
 8017690:	059a      	lsls	r2, r3, #22
 8017692:	d402      	bmi.n	801769a <_vfiprintf_r+0x32>
 8017694:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017696:	f7ff fc66 	bl	8016f66 <__retarget_lock_acquire_recursive>
 801769a:	89ab      	ldrh	r3, [r5, #12]
 801769c:	071b      	lsls	r3, r3, #28
 801769e:	d501      	bpl.n	80176a4 <_vfiprintf_r+0x3c>
 80176a0:	692b      	ldr	r3, [r5, #16]
 80176a2:	b9eb      	cbnz	r3, 80176e0 <_vfiprintf_r+0x78>
 80176a4:	4629      	mov	r1, r5
 80176a6:	4630      	mov	r0, r6
 80176a8:	f000 fb06 	bl	8017cb8 <__swsetup_r>
 80176ac:	b1c0      	cbz	r0, 80176e0 <_vfiprintf_r+0x78>
 80176ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80176b0:	07dc      	lsls	r4, r3, #31
 80176b2:	d50e      	bpl.n	80176d2 <_vfiprintf_r+0x6a>
 80176b4:	f04f 30ff 	mov.w	r0, #4294967295
 80176b8:	b01d      	add	sp, #116	; 0x74
 80176ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80176be:	4b7b      	ldr	r3, [pc, #492]	; (80178ac <_vfiprintf_r+0x244>)
 80176c0:	429d      	cmp	r5, r3
 80176c2:	d101      	bne.n	80176c8 <_vfiprintf_r+0x60>
 80176c4:	68b5      	ldr	r5, [r6, #8]
 80176c6:	e7df      	b.n	8017688 <_vfiprintf_r+0x20>
 80176c8:	4b79      	ldr	r3, [pc, #484]	; (80178b0 <_vfiprintf_r+0x248>)
 80176ca:	429d      	cmp	r5, r3
 80176cc:	bf08      	it	eq
 80176ce:	68f5      	ldreq	r5, [r6, #12]
 80176d0:	e7da      	b.n	8017688 <_vfiprintf_r+0x20>
 80176d2:	89ab      	ldrh	r3, [r5, #12]
 80176d4:	0598      	lsls	r0, r3, #22
 80176d6:	d4ed      	bmi.n	80176b4 <_vfiprintf_r+0x4c>
 80176d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80176da:	f7ff fc45 	bl	8016f68 <__retarget_lock_release_recursive>
 80176de:	e7e9      	b.n	80176b4 <_vfiprintf_r+0x4c>
 80176e0:	2300      	movs	r3, #0
 80176e2:	9309      	str	r3, [sp, #36]	; 0x24
 80176e4:	2320      	movs	r3, #32
 80176e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80176ea:	f8cd 800c 	str.w	r8, [sp, #12]
 80176ee:	2330      	movs	r3, #48	; 0x30
 80176f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80178b4 <_vfiprintf_r+0x24c>
 80176f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80176f8:	f04f 0901 	mov.w	r9, #1
 80176fc:	4623      	mov	r3, r4
 80176fe:	469a      	mov	sl, r3
 8017700:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017704:	b10a      	cbz	r2, 801770a <_vfiprintf_r+0xa2>
 8017706:	2a25      	cmp	r2, #37	; 0x25
 8017708:	d1f9      	bne.n	80176fe <_vfiprintf_r+0x96>
 801770a:	ebba 0b04 	subs.w	fp, sl, r4
 801770e:	d00b      	beq.n	8017728 <_vfiprintf_r+0xc0>
 8017710:	465b      	mov	r3, fp
 8017712:	4622      	mov	r2, r4
 8017714:	4629      	mov	r1, r5
 8017716:	4630      	mov	r0, r6
 8017718:	f7ff ff93 	bl	8017642 <__sfputs_r>
 801771c:	3001      	adds	r0, #1
 801771e:	f000 80aa 	beq.w	8017876 <_vfiprintf_r+0x20e>
 8017722:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8017724:	445a      	add	r2, fp
 8017726:	9209      	str	r2, [sp, #36]	; 0x24
 8017728:	f89a 3000 	ldrb.w	r3, [sl]
 801772c:	2b00      	cmp	r3, #0
 801772e:	f000 80a2 	beq.w	8017876 <_vfiprintf_r+0x20e>
 8017732:	2300      	movs	r3, #0
 8017734:	f04f 32ff 	mov.w	r2, #4294967295
 8017738:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801773c:	f10a 0a01 	add.w	sl, sl, #1
 8017740:	9304      	str	r3, [sp, #16]
 8017742:	9307      	str	r3, [sp, #28]
 8017744:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017748:	931a      	str	r3, [sp, #104]	; 0x68
 801774a:	4654      	mov	r4, sl
 801774c:	2205      	movs	r2, #5
 801774e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017752:	4858      	ldr	r0, [pc, #352]	; (80178b4 <_vfiprintf_r+0x24c>)
 8017754:	f7e8 fd74 	bl	8000240 <memchr>
 8017758:	9a04      	ldr	r2, [sp, #16]
 801775a:	b9d8      	cbnz	r0, 8017794 <_vfiprintf_r+0x12c>
 801775c:	06d1      	lsls	r1, r2, #27
 801775e:	bf44      	itt	mi
 8017760:	2320      	movmi	r3, #32
 8017762:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017766:	0713      	lsls	r3, r2, #28
 8017768:	bf44      	itt	mi
 801776a:	232b      	movmi	r3, #43	; 0x2b
 801776c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017770:	f89a 3000 	ldrb.w	r3, [sl]
 8017774:	2b2a      	cmp	r3, #42	; 0x2a
 8017776:	d015      	beq.n	80177a4 <_vfiprintf_r+0x13c>
 8017778:	9a07      	ldr	r2, [sp, #28]
 801777a:	4654      	mov	r4, sl
 801777c:	2000      	movs	r0, #0
 801777e:	f04f 0c0a 	mov.w	ip, #10
 8017782:	4621      	mov	r1, r4
 8017784:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017788:	3b30      	subs	r3, #48	; 0x30
 801778a:	2b09      	cmp	r3, #9
 801778c:	d94e      	bls.n	801782c <_vfiprintf_r+0x1c4>
 801778e:	b1b0      	cbz	r0, 80177be <_vfiprintf_r+0x156>
 8017790:	9207      	str	r2, [sp, #28]
 8017792:	e014      	b.n	80177be <_vfiprintf_r+0x156>
 8017794:	eba0 0308 	sub.w	r3, r0, r8
 8017798:	fa09 f303 	lsl.w	r3, r9, r3
 801779c:	4313      	orrs	r3, r2
 801779e:	9304      	str	r3, [sp, #16]
 80177a0:	46a2      	mov	sl, r4
 80177a2:	e7d2      	b.n	801774a <_vfiprintf_r+0xe2>
 80177a4:	9b03      	ldr	r3, [sp, #12]
 80177a6:	1d19      	adds	r1, r3, #4
 80177a8:	681b      	ldr	r3, [r3, #0]
 80177aa:	9103      	str	r1, [sp, #12]
 80177ac:	2b00      	cmp	r3, #0
 80177ae:	bfbb      	ittet	lt
 80177b0:	425b      	neglt	r3, r3
 80177b2:	f042 0202 	orrlt.w	r2, r2, #2
 80177b6:	9307      	strge	r3, [sp, #28]
 80177b8:	9307      	strlt	r3, [sp, #28]
 80177ba:	bfb8      	it	lt
 80177bc:	9204      	strlt	r2, [sp, #16]
 80177be:	7823      	ldrb	r3, [r4, #0]
 80177c0:	2b2e      	cmp	r3, #46	; 0x2e
 80177c2:	d10c      	bne.n	80177de <_vfiprintf_r+0x176>
 80177c4:	7863      	ldrb	r3, [r4, #1]
 80177c6:	2b2a      	cmp	r3, #42	; 0x2a
 80177c8:	d135      	bne.n	8017836 <_vfiprintf_r+0x1ce>
 80177ca:	9b03      	ldr	r3, [sp, #12]
 80177cc:	1d1a      	adds	r2, r3, #4
 80177ce:	681b      	ldr	r3, [r3, #0]
 80177d0:	9203      	str	r2, [sp, #12]
 80177d2:	2b00      	cmp	r3, #0
 80177d4:	bfb8      	it	lt
 80177d6:	f04f 33ff 	movlt.w	r3, #4294967295
 80177da:	3402      	adds	r4, #2
 80177dc:	9305      	str	r3, [sp, #20]
 80177de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80178c4 <_vfiprintf_r+0x25c>
 80177e2:	7821      	ldrb	r1, [r4, #0]
 80177e4:	2203      	movs	r2, #3
 80177e6:	4650      	mov	r0, sl
 80177e8:	f7e8 fd2a 	bl	8000240 <memchr>
 80177ec:	b140      	cbz	r0, 8017800 <_vfiprintf_r+0x198>
 80177ee:	2340      	movs	r3, #64	; 0x40
 80177f0:	eba0 000a 	sub.w	r0, r0, sl
 80177f4:	fa03 f000 	lsl.w	r0, r3, r0
 80177f8:	9b04      	ldr	r3, [sp, #16]
 80177fa:	4303      	orrs	r3, r0
 80177fc:	3401      	adds	r4, #1
 80177fe:	9304      	str	r3, [sp, #16]
 8017800:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017804:	482c      	ldr	r0, [pc, #176]	; (80178b8 <_vfiprintf_r+0x250>)
 8017806:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801780a:	2206      	movs	r2, #6
 801780c:	f7e8 fd18 	bl	8000240 <memchr>
 8017810:	2800      	cmp	r0, #0
 8017812:	d03f      	beq.n	8017894 <_vfiprintf_r+0x22c>
 8017814:	4b29      	ldr	r3, [pc, #164]	; (80178bc <_vfiprintf_r+0x254>)
 8017816:	bb1b      	cbnz	r3, 8017860 <_vfiprintf_r+0x1f8>
 8017818:	9b03      	ldr	r3, [sp, #12]
 801781a:	3307      	adds	r3, #7
 801781c:	f023 0307 	bic.w	r3, r3, #7
 8017820:	3308      	adds	r3, #8
 8017822:	9303      	str	r3, [sp, #12]
 8017824:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017826:	443b      	add	r3, r7
 8017828:	9309      	str	r3, [sp, #36]	; 0x24
 801782a:	e767      	b.n	80176fc <_vfiprintf_r+0x94>
 801782c:	fb0c 3202 	mla	r2, ip, r2, r3
 8017830:	460c      	mov	r4, r1
 8017832:	2001      	movs	r0, #1
 8017834:	e7a5      	b.n	8017782 <_vfiprintf_r+0x11a>
 8017836:	2300      	movs	r3, #0
 8017838:	3401      	adds	r4, #1
 801783a:	9305      	str	r3, [sp, #20]
 801783c:	4619      	mov	r1, r3
 801783e:	f04f 0c0a 	mov.w	ip, #10
 8017842:	4620      	mov	r0, r4
 8017844:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017848:	3a30      	subs	r2, #48	; 0x30
 801784a:	2a09      	cmp	r2, #9
 801784c:	d903      	bls.n	8017856 <_vfiprintf_r+0x1ee>
 801784e:	2b00      	cmp	r3, #0
 8017850:	d0c5      	beq.n	80177de <_vfiprintf_r+0x176>
 8017852:	9105      	str	r1, [sp, #20]
 8017854:	e7c3      	b.n	80177de <_vfiprintf_r+0x176>
 8017856:	fb0c 2101 	mla	r1, ip, r1, r2
 801785a:	4604      	mov	r4, r0
 801785c:	2301      	movs	r3, #1
 801785e:	e7f0      	b.n	8017842 <_vfiprintf_r+0x1da>
 8017860:	ab03      	add	r3, sp, #12
 8017862:	9300      	str	r3, [sp, #0]
 8017864:	462a      	mov	r2, r5
 8017866:	4b16      	ldr	r3, [pc, #88]	; (80178c0 <_vfiprintf_r+0x258>)
 8017868:	a904      	add	r1, sp, #16
 801786a:	4630      	mov	r0, r6
 801786c:	f3af 8000 	nop.w
 8017870:	4607      	mov	r7, r0
 8017872:	1c78      	adds	r0, r7, #1
 8017874:	d1d6      	bne.n	8017824 <_vfiprintf_r+0x1bc>
 8017876:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017878:	07d9      	lsls	r1, r3, #31
 801787a:	d405      	bmi.n	8017888 <_vfiprintf_r+0x220>
 801787c:	89ab      	ldrh	r3, [r5, #12]
 801787e:	059a      	lsls	r2, r3, #22
 8017880:	d402      	bmi.n	8017888 <_vfiprintf_r+0x220>
 8017882:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017884:	f7ff fb70 	bl	8016f68 <__retarget_lock_release_recursive>
 8017888:	89ab      	ldrh	r3, [r5, #12]
 801788a:	065b      	lsls	r3, r3, #25
 801788c:	f53f af12 	bmi.w	80176b4 <_vfiprintf_r+0x4c>
 8017890:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017892:	e711      	b.n	80176b8 <_vfiprintf_r+0x50>
 8017894:	ab03      	add	r3, sp, #12
 8017896:	9300      	str	r3, [sp, #0]
 8017898:	462a      	mov	r2, r5
 801789a:	4b09      	ldr	r3, [pc, #36]	; (80178c0 <_vfiprintf_r+0x258>)
 801789c:	a904      	add	r1, sp, #16
 801789e:	4630      	mov	r0, r6
 80178a0:	f000 f880 	bl	80179a4 <_printf_i>
 80178a4:	e7e4      	b.n	8017870 <_vfiprintf_r+0x208>
 80178a6:	bf00      	nop
 80178a8:	0801b130 	.word	0x0801b130
 80178ac:	0801b150 	.word	0x0801b150
 80178b0:	0801b110 	.word	0x0801b110
 80178b4:	0801b222 	.word	0x0801b222
 80178b8:	0801b22c 	.word	0x0801b22c
 80178bc:	00000000 	.word	0x00000000
 80178c0:	08017643 	.word	0x08017643
 80178c4:	0801b228 	.word	0x0801b228

080178c8 <_printf_common>:
 80178c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80178cc:	4616      	mov	r6, r2
 80178ce:	4699      	mov	r9, r3
 80178d0:	688a      	ldr	r2, [r1, #8]
 80178d2:	690b      	ldr	r3, [r1, #16]
 80178d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80178d8:	4293      	cmp	r3, r2
 80178da:	bfb8      	it	lt
 80178dc:	4613      	movlt	r3, r2
 80178de:	6033      	str	r3, [r6, #0]
 80178e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80178e4:	4607      	mov	r7, r0
 80178e6:	460c      	mov	r4, r1
 80178e8:	b10a      	cbz	r2, 80178ee <_printf_common+0x26>
 80178ea:	3301      	adds	r3, #1
 80178ec:	6033      	str	r3, [r6, #0]
 80178ee:	6823      	ldr	r3, [r4, #0]
 80178f0:	0699      	lsls	r1, r3, #26
 80178f2:	bf42      	ittt	mi
 80178f4:	6833      	ldrmi	r3, [r6, #0]
 80178f6:	3302      	addmi	r3, #2
 80178f8:	6033      	strmi	r3, [r6, #0]
 80178fa:	6825      	ldr	r5, [r4, #0]
 80178fc:	f015 0506 	ands.w	r5, r5, #6
 8017900:	d106      	bne.n	8017910 <_printf_common+0x48>
 8017902:	f104 0a19 	add.w	sl, r4, #25
 8017906:	68e3      	ldr	r3, [r4, #12]
 8017908:	6832      	ldr	r2, [r6, #0]
 801790a:	1a9b      	subs	r3, r3, r2
 801790c:	42ab      	cmp	r3, r5
 801790e:	dc26      	bgt.n	801795e <_printf_common+0x96>
 8017910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017914:	1e13      	subs	r3, r2, #0
 8017916:	6822      	ldr	r2, [r4, #0]
 8017918:	bf18      	it	ne
 801791a:	2301      	movne	r3, #1
 801791c:	0692      	lsls	r2, r2, #26
 801791e:	d42b      	bmi.n	8017978 <_printf_common+0xb0>
 8017920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017924:	4649      	mov	r1, r9
 8017926:	4638      	mov	r0, r7
 8017928:	47c0      	blx	r8
 801792a:	3001      	adds	r0, #1
 801792c:	d01e      	beq.n	801796c <_printf_common+0xa4>
 801792e:	6823      	ldr	r3, [r4, #0]
 8017930:	68e5      	ldr	r5, [r4, #12]
 8017932:	6832      	ldr	r2, [r6, #0]
 8017934:	f003 0306 	and.w	r3, r3, #6
 8017938:	2b04      	cmp	r3, #4
 801793a:	bf08      	it	eq
 801793c:	1aad      	subeq	r5, r5, r2
 801793e:	68a3      	ldr	r3, [r4, #8]
 8017940:	6922      	ldr	r2, [r4, #16]
 8017942:	bf0c      	ite	eq
 8017944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8017948:	2500      	movne	r5, #0
 801794a:	4293      	cmp	r3, r2
 801794c:	bfc4      	itt	gt
 801794e:	1a9b      	subgt	r3, r3, r2
 8017950:	18ed      	addgt	r5, r5, r3
 8017952:	2600      	movs	r6, #0
 8017954:	341a      	adds	r4, #26
 8017956:	42b5      	cmp	r5, r6
 8017958:	d11a      	bne.n	8017990 <_printf_common+0xc8>
 801795a:	2000      	movs	r0, #0
 801795c:	e008      	b.n	8017970 <_printf_common+0xa8>
 801795e:	2301      	movs	r3, #1
 8017960:	4652      	mov	r2, sl
 8017962:	4649      	mov	r1, r9
 8017964:	4638      	mov	r0, r7
 8017966:	47c0      	blx	r8
 8017968:	3001      	adds	r0, #1
 801796a:	d103      	bne.n	8017974 <_printf_common+0xac>
 801796c:	f04f 30ff 	mov.w	r0, #4294967295
 8017970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017974:	3501      	adds	r5, #1
 8017976:	e7c6      	b.n	8017906 <_printf_common+0x3e>
 8017978:	18e1      	adds	r1, r4, r3
 801797a:	1c5a      	adds	r2, r3, #1
 801797c:	2030      	movs	r0, #48	; 0x30
 801797e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017982:	4422      	add	r2, r4
 8017984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801798c:	3302      	adds	r3, #2
 801798e:	e7c7      	b.n	8017920 <_printf_common+0x58>
 8017990:	2301      	movs	r3, #1
 8017992:	4622      	mov	r2, r4
 8017994:	4649      	mov	r1, r9
 8017996:	4638      	mov	r0, r7
 8017998:	47c0      	blx	r8
 801799a:	3001      	adds	r0, #1
 801799c:	d0e6      	beq.n	801796c <_printf_common+0xa4>
 801799e:	3601      	adds	r6, #1
 80179a0:	e7d9      	b.n	8017956 <_printf_common+0x8e>
	...

080179a4 <_printf_i>:
 80179a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80179a8:	7e0f      	ldrb	r7, [r1, #24]
 80179aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80179ac:	2f78      	cmp	r7, #120	; 0x78
 80179ae:	4691      	mov	r9, r2
 80179b0:	4680      	mov	r8, r0
 80179b2:	460c      	mov	r4, r1
 80179b4:	469a      	mov	sl, r3
 80179b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80179ba:	d807      	bhi.n	80179cc <_printf_i+0x28>
 80179bc:	2f62      	cmp	r7, #98	; 0x62
 80179be:	d80a      	bhi.n	80179d6 <_printf_i+0x32>
 80179c0:	2f00      	cmp	r7, #0
 80179c2:	f000 80d8 	beq.w	8017b76 <_printf_i+0x1d2>
 80179c6:	2f58      	cmp	r7, #88	; 0x58
 80179c8:	f000 80a3 	beq.w	8017b12 <_printf_i+0x16e>
 80179cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80179d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80179d4:	e03a      	b.n	8017a4c <_printf_i+0xa8>
 80179d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80179da:	2b15      	cmp	r3, #21
 80179dc:	d8f6      	bhi.n	80179cc <_printf_i+0x28>
 80179de:	a101      	add	r1, pc, #4	; (adr r1, 80179e4 <_printf_i+0x40>)
 80179e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80179e4:	08017a3d 	.word	0x08017a3d
 80179e8:	08017a51 	.word	0x08017a51
 80179ec:	080179cd 	.word	0x080179cd
 80179f0:	080179cd 	.word	0x080179cd
 80179f4:	080179cd 	.word	0x080179cd
 80179f8:	080179cd 	.word	0x080179cd
 80179fc:	08017a51 	.word	0x08017a51
 8017a00:	080179cd 	.word	0x080179cd
 8017a04:	080179cd 	.word	0x080179cd
 8017a08:	080179cd 	.word	0x080179cd
 8017a0c:	080179cd 	.word	0x080179cd
 8017a10:	08017b5d 	.word	0x08017b5d
 8017a14:	08017a81 	.word	0x08017a81
 8017a18:	08017b3f 	.word	0x08017b3f
 8017a1c:	080179cd 	.word	0x080179cd
 8017a20:	080179cd 	.word	0x080179cd
 8017a24:	08017b7f 	.word	0x08017b7f
 8017a28:	080179cd 	.word	0x080179cd
 8017a2c:	08017a81 	.word	0x08017a81
 8017a30:	080179cd 	.word	0x080179cd
 8017a34:	080179cd 	.word	0x080179cd
 8017a38:	08017b47 	.word	0x08017b47
 8017a3c:	682b      	ldr	r3, [r5, #0]
 8017a3e:	1d1a      	adds	r2, r3, #4
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	602a      	str	r2, [r5, #0]
 8017a44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017a48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8017a4c:	2301      	movs	r3, #1
 8017a4e:	e0a3      	b.n	8017b98 <_printf_i+0x1f4>
 8017a50:	6820      	ldr	r0, [r4, #0]
 8017a52:	6829      	ldr	r1, [r5, #0]
 8017a54:	0606      	lsls	r6, r0, #24
 8017a56:	f101 0304 	add.w	r3, r1, #4
 8017a5a:	d50a      	bpl.n	8017a72 <_printf_i+0xce>
 8017a5c:	680e      	ldr	r6, [r1, #0]
 8017a5e:	602b      	str	r3, [r5, #0]
 8017a60:	2e00      	cmp	r6, #0
 8017a62:	da03      	bge.n	8017a6c <_printf_i+0xc8>
 8017a64:	232d      	movs	r3, #45	; 0x2d
 8017a66:	4276      	negs	r6, r6
 8017a68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017a6c:	485e      	ldr	r0, [pc, #376]	; (8017be8 <_printf_i+0x244>)
 8017a6e:	230a      	movs	r3, #10
 8017a70:	e019      	b.n	8017aa6 <_printf_i+0x102>
 8017a72:	680e      	ldr	r6, [r1, #0]
 8017a74:	602b      	str	r3, [r5, #0]
 8017a76:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017a7a:	bf18      	it	ne
 8017a7c:	b236      	sxthne	r6, r6
 8017a7e:	e7ef      	b.n	8017a60 <_printf_i+0xbc>
 8017a80:	682b      	ldr	r3, [r5, #0]
 8017a82:	6820      	ldr	r0, [r4, #0]
 8017a84:	1d19      	adds	r1, r3, #4
 8017a86:	6029      	str	r1, [r5, #0]
 8017a88:	0601      	lsls	r1, r0, #24
 8017a8a:	d501      	bpl.n	8017a90 <_printf_i+0xec>
 8017a8c:	681e      	ldr	r6, [r3, #0]
 8017a8e:	e002      	b.n	8017a96 <_printf_i+0xf2>
 8017a90:	0646      	lsls	r6, r0, #25
 8017a92:	d5fb      	bpl.n	8017a8c <_printf_i+0xe8>
 8017a94:	881e      	ldrh	r6, [r3, #0]
 8017a96:	4854      	ldr	r0, [pc, #336]	; (8017be8 <_printf_i+0x244>)
 8017a98:	2f6f      	cmp	r7, #111	; 0x6f
 8017a9a:	bf0c      	ite	eq
 8017a9c:	2308      	moveq	r3, #8
 8017a9e:	230a      	movne	r3, #10
 8017aa0:	2100      	movs	r1, #0
 8017aa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017aa6:	6865      	ldr	r5, [r4, #4]
 8017aa8:	60a5      	str	r5, [r4, #8]
 8017aaa:	2d00      	cmp	r5, #0
 8017aac:	bfa2      	ittt	ge
 8017aae:	6821      	ldrge	r1, [r4, #0]
 8017ab0:	f021 0104 	bicge.w	r1, r1, #4
 8017ab4:	6021      	strge	r1, [r4, #0]
 8017ab6:	b90e      	cbnz	r6, 8017abc <_printf_i+0x118>
 8017ab8:	2d00      	cmp	r5, #0
 8017aba:	d04d      	beq.n	8017b58 <_printf_i+0x1b4>
 8017abc:	4615      	mov	r5, r2
 8017abe:	fbb6 f1f3 	udiv	r1, r6, r3
 8017ac2:	fb03 6711 	mls	r7, r3, r1, r6
 8017ac6:	5dc7      	ldrb	r7, [r0, r7]
 8017ac8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017acc:	4637      	mov	r7, r6
 8017ace:	42bb      	cmp	r3, r7
 8017ad0:	460e      	mov	r6, r1
 8017ad2:	d9f4      	bls.n	8017abe <_printf_i+0x11a>
 8017ad4:	2b08      	cmp	r3, #8
 8017ad6:	d10b      	bne.n	8017af0 <_printf_i+0x14c>
 8017ad8:	6823      	ldr	r3, [r4, #0]
 8017ada:	07de      	lsls	r6, r3, #31
 8017adc:	d508      	bpl.n	8017af0 <_printf_i+0x14c>
 8017ade:	6923      	ldr	r3, [r4, #16]
 8017ae0:	6861      	ldr	r1, [r4, #4]
 8017ae2:	4299      	cmp	r1, r3
 8017ae4:	bfde      	ittt	le
 8017ae6:	2330      	movle	r3, #48	; 0x30
 8017ae8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017aec:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017af0:	1b52      	subs	r2, r2, r5
 8017af2:	6122      	str	r2, [r4, #16]
 8017af4:	f8cd a000 	str.w	sl, [sp]
 8017af8:	464b      	mov	r3, r9
 8017afa:	aa03      	add	r2, sp, #12
 8017afc:	4621      	mov	r1, r4
 8017afe:	4640      	mov	r0, r8
 8017b00:	f7ff fee2 	bl	80178c8 <_printf_common>
 8017b04:	3001      	adds	r0, #1
 8017b06:	d14c      	bne.n	8017ba2 <_printf_i+0x1fe>
 8017b08:	f04f 30ff 	mov.w	r0, #4294967295
 8017b0c:	b004      	add	sp, #16
 8017b0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017b12:	4835      	ldr	r0, [pc, #212]	; (8017be8 <_printf_i+0x244>)
 8017b14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017b18:	6829      	ldr	r1, [r5, #0]
 8017b1a:	6823      	ldr	r3, [r4, #0]
 8017b1c:	f851 6b04 	ldr.w	r6, [r1], #4
 8017b20:	6029      	str	r1, [r5, #0]
 8017b22:	061d      	lsls	r5, r3, #24
 8017b24:	d514      	bpl.n	8017b50 <_printf_i+0x1ac>
 8017b26:	07df      	lsls	r7, r3, #31
 8017b28:	bf44      	itt	mi
 8017b2a:	f043 0320 	orrmi.w	r3, r3, #32
 8017b2e:	6023      	strmi	r3, [r4, #0]
 8017b30:	b91e      	cbnz	r6, 8017b3a <_printf_i+0x196>
 8017b32:	6823      	ldr	r3, [r4, #0]
 8017b34:	f023 0320 	bic.w	r3, r3, #32
 8017b38:	6023      	str	r3, [r4, #0]
 8017b3a:	2310      	movs	r3, #16
 8017b3c:	e7b0      	b.n	8017aa0 <_printf_i+0xfc>
 8017b3e:	6823      	ldr	r3, [r4, #0]
 8017b40:	f043 0320 	orr.w	r3, r3, #32
 8017b44:	6023      	str	r3, [r4, #0]
 8017b46:	2378      	movs	r3, #120	; 0x78
 8017b48:	4828      	ldr	r0, [pc, #160]	; (8017bec <_printf_i+0x248>)
 8017b4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8017b4e:	e7e3      	b.n	8017b18 <_printf_i+0x174>
 8017b50:	0659      	lsls	r1, r3, #25
 8017b52:	bf48      	it	mi
 8017b54:	b2b6      	uxthmi	r6, r6
 8017b56:	e7e6      	b.n	8017b26 <_printf_i+0x182>
 8017b58:	4615      	mov	r5, r2
 8017b5a:	e7bb      	b.n	8017ad4 <_printf_i+0x130>
 8017b5c:	682b      	ldr	r3, [r5, #0]
 8017b5e:	6826      	ldr	r6, [r4, #0]
 8017b60:	6961      	ldr	r1, [r4, #20]
 8017b62:	1d18      	adds	r0, r3, #4
 8017b64:	6028      	str	r0, [r5, #0]
 8017b66:	0635      	lsls	r5, r6, #24
 8017b68:	681b      	ldr	r3, [r3, #0]
 8017b6a:	d501      	bpl.n	8017b70 <_printf_i+0x1cc>
 8017b6c:	6019      	str	r1, [r3, #0]
 8017b6e:	e002      	b.n	8017b76 <_printf_i+0x1d2>
 8017b70:	0670      	lsls	r0, r6, #25
 8017b72:	d5fb      	bpl.n	8017b6c <_printf_i+0x1c8>
 8017b74:	8019      	strh	r1, [r3, #0]
 8017b76:	2300      	movs	r3, #0
 8017b78:	6123      	str	r3, [r4, #16]
 8017b7a:	4615      	mov	r5, r2
 8017b7c:	e7ba      	b.n	8017af4 <_printf_i+0x150>
 8017b7e:	682b      	ldr	r3, [r5, #0]
 8017b80:	1d1a      	adds	r2, r3, #4
 8017b82:	602a      	str	r2, [r5, #0]
 8017b84:	681d      	ldr	r5, [r3, #0]
 8017b86:	6862      	ldr	r2, [r4, #4]
 8017b88:	2100      	movs	r1, #0
 8017b8a:	4628      	mov	r0, r5
 8017b8c:	f7e8 fb58 	bl	8000240 <memchr>
 8017b90:	b108      	cbz	r0, 8017b96 <_printf_i+0x1f2>
 8017b92:	1b40      	subs	r0, r0, r5
 8017b94:	6060      	str	r0, [r4, #4]
 8017b96:	6863      	ldr	r3, [r4, #4]
 8017b98:	6123      	str	r3, [r4, #16]
 8017b9a:	2300      	movs	r3, #0
 8017b9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017ba0:	e7a8      	b.n	8017af4 <_printf_i+0x150>
 8017ba2:	6923      	ldr	r3, [r4, #16]
 8017ba4:	462a      	mov	r2, r5
 8017ba6:	4649      	mov	r1, r9
 8017ba8:	4640      	mov	r0, r8
 8017baa:	47d0      	blx	sl
 8017bac:	3001      	adds	r0, #1
 8017bae:	d0ab      	beq.n	8017b08 <_printf_i+0x164>
 8017bb0:	6823      	ldr	r3, [r4, #0]
 8017bb2:	079b      	lsls	r3, r3, #30
 8017bb4:	d413      	bmi.n	8017bde <_printf_i+0x23a>
 8017bb6:	68e0      	ldr	r0, [r4, #12]
 8017bb8:	9b03      	ldr	r3, [sp, #12]
 8017bba:	4298      	cmp	r0, r3
 8017bbc:	bfb8      	it	lt
 8017bbe:	4618      	movlt	r0, r3
 8017bc0:	e7a4      	b.n	8017b0c <_printf_i+0x168>
 8017bc2:	2301      	movs	r3, #1
 8017bc4:	4632      	mov	r2, r6
 8017bc6:	4649      	mov	r1, r9
 8017bc8:	4640      	mov	r0, r8
 8017bca:	47d0      	blx	sl
 8017bcc:	3001      	adds	r0, #1
 8017bce:	d09b      	beq.n	8017b08 <_printf_i+0x164>
 8017bd0:	3501      	adds	r5, #1
 8017bd2:	68e3      	ldr	r3, [r4, #12]
 8017bd4:	9903      	ldr	r1, [sp, #12]
 8017bd6:	1a5b      	subs	r3, r3, r1
 8017bd8:	42ab      	cmp	r3, r5
 8017bda:	dcf2      	bgt.n	8017bc2 <_printf_i+0x21e>
 8017bdc:	e7eb      	b.n	8017bb6 <_printf_i+0x212>
 8017bde:	2500      	movs	r5, #0
 8017be0:	f104 0619 	add.w	r6, r4, #25
 8017be4:	e7f5      	b.n	8017bd2 <_printf_i+0x22e>
 8017be6:	bf00      	nop
 8017be8:	0801b233 	.word	0x0801b233
 8017bec:	0801b244 	.word	0x0801b244

08017bf0 <_read_r>:
 8017bf0:	b538      	push	{r3, r4, r5, lr}
 8017bf2:	4d07      	ldr	r5, [pc, #28]	; (8017c10 <_read_r+0x20>)
 8017bf4:	4604      	mov	r4, r0
 8017bf6:	4608      	mov	r0, r1
 8017bf8:	4611      	mov	r1, r2
 8017bfa:	2200      	movs	r2, #0
 8017bfc:	602a      	str	r2, [r5, #0]
 8017bfe:	461a      	mov	r2, r3
 8017c00:	f7e9 fa4a 	bl	8001098 <_read>
 8017c04:	1c43      	adds	r3, r0, #1
 8017c06:	d102      	bne.n	8017c0e <_read_r+0x1e>
 8017c08:	682b      	ldr	r3, [r5, #0]
 8017c0a:	b103      	cbz	r3, 8017c0e <_read_r+0x1e>
 8017c0c:	6023      	str	r3, [r4, #0]
 8017c0e:	bd38      	pop	{r3, r4, r5, pc}
 8017c10:	2000f400 	.word	0x2000f400

08017c14 <__swbuf_r>:
 8017c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c16:	460e      	mov	r6, r1
 8017c18:	4614      	mov	r4, r2
 8017c1a:	4605      	mov	r5, r0
 8017c1c:	b118      	cbz	r0, 8017c26 <__swbuf_r+0x12>
 8017c1e:	6983      	ldr	r3, [r0, #24]
 8017c20:	b90b      	cbnz	r3, 8017c26 <__swbuf_r+0x12>
 8017c22:	f7ff f8dd 	bl	8016de0 <__sinit>
 8017c26:	4b21      	ldr	r3, [pc, #132]	; (8017cac <__swbuf_r+0x98>)
 8017c28:	429c      	cmp	r4, r3
 8017c2a:	d12b      	bne.n	8017c84 <__swbuf_r+0x70>
 8017c2c:	686c      	ldr	r4, [r5, #4]
 8017c2e:	69a3      	ldr	r3, [r4, #24]
 8017c30:	60a3      	str	r3, [r4, #8]
 8017c32:	89a3      	ldrh	r3, [r4, #12]
 8017c34:	071a      	lsls	r2, r3, #28
 8017c36:	d52f      	bpl.n	8017c98 <__swbuf_r+0x84>
 8017c38:	6923      	ldr	r3, [r4, #16]
 8017c3a:	b36b      	cbz	r3, 8017c98 <__swbuf_r+0x84>
 8017c3c:	6923      	ldr	r3, [r4, #16]
 8017c3e:	6820      	ldr	r0, [r4, #0]
 8017c40:	1ac0      	subs	r0, r0, r3
 8017c42:	6963      	ldr	r3, [r4, #20]
 8017c44:	b2f6      	uxtb	r6, r6
 8017c46:	4283      	cmp	r3, r0
 8017c48:	4637      	mov	r7, r6
 8017c4a:	dc04      	bgt.n	8017c56 <__swbuf_r+0x42>
 8017c4c:	4621      	mov	r1, r4
 8017c4e:	4628      	mov	r0, r5
 8017c50:	f7ff fc20 	bl	8017494 <_fflush_r>
 8017c54:	bb30      	cbnz	r0, 8017ca4 <__swbuf_r+0x90>
 8017c56:	68a3      	ldr	r3, [r4, #8]
 8017c58:	3b01      	subs	r3, #1
 8017c5a:	60a3      	str	r3, [r4, #8]
 8017c5c:	6823      	ldr	r3, [r4, #0]
 8017c5e:	1c5a      	adds	r2, r3, #1
 8017c60:	6022      	str	r2, [r4, #0]
 8017c62:	701e      	strb	r6, [r3, #0]
 8017c64:	6963      	ldr	r3, [r4, #20]
 8017c66:	3001      	adds	r0, #1
 8017c68:	4283      	cmp	r3, r0
 8017c6a:	d004      	beq.n	8017c76 <__swbuf_r+0x62>
 8017c6c:	89a3      	ldrh	r3, [r4, #12]
 8017c6e:	07db      	lsls	r3, r3, #31
 8017c70:	d506      	bpl.n	8017c80 <__swbuf_r+0x6c>
 8017c72:	2e0a      	cmp	r6, #10
 8017c74:	d104      	bne.n	8017c80 <__swbuf_r+0x6c>
 8017c76:	4621      	mov	r1, r4
 8017c78:	4628      	mov	r0, r5
 8017c7a:	f7ff fc0b 	bl	8017494 <_fflush_r>
 8017c7e:	b988      	cbnz	r0, 8017ca4 <__swbuf_r+0x90>
 8017c80:	4638      	mov	r0, r7
 8017c82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017c84:	4b0a      	ldr	r3, [pc, #40]	; (8017cb0 <__swbuf_r+0x9c>)
 8017c86:	429c      	cmp	r4, r3
 8017c88:	d101      	bne.n	8017c8e <__swbuf_r+0x7a>
 8017c8a:	68ac      	ldr	r4, [r5, #8]
 8017c8c:	e7cf      	b.n	8017c2e <__swbuf_r+0x1a>
 8017c8e:	4b09      	ldr	r3, [pc, #36]	; (8017cb4 <__swbuf_r+0xa0>)
 8017c90:	429c      	cmp	r4, r3
 8017c92:	bf08      	it	eq
 8017c94:	68ec      	ldreq	r4, [r5, #12]
 8017c96:	e7ca      	b.n	8017c2e <__swbuf_r+0x1a>
 8017c98:	4621      	mov	r1, r4
 8017c9a:	4628      	mov	r0, r5
 8017c9c:	f000 f80c 	bl	8017cb8 <__swsetup_r>
 8017ca0:	2800      	cmp	r0, #0
 8017ca2:	d0cb      	beq.n	8017c3c <__swbuf_r+0x28>
 8017ca4:	f04f 37ff 	mov.w	r7, #4294967295
 8017ca8:	e7ea      	b.n	8017c80 <__swbuf_r+0x6c>
 8017caa:	bf00      	nop
 8017cac:	0801b130 	.word	0x0801b130
 8017cb0:	0801b150 	.word	0x0801b150
 8017cb4:	0801b110 	.word	0x0801b110

08017cb8 <__swsetup_r>:
 8017cb8:	4b32      	ldr	r3, [pc, #200]	; (8017d84 <__swsetup_r+0xcc>)
 8017cba:	b570      	push	{r4, r5, r6, lr}
 8017cbc:	681d      	ldr	r5, [r3, #0]
 8017cbe:	4606      	mov	r6, r0
 8017cc0:	460c      	mov	r4, r1
 8017cc2:	b125      	cbz	r5, 8017cce <__swsetup_r+0x16>
 8017cc4:	69ab      	ldr	r3, [r5, #24]
 8017cc6:	b913      	cbnz	r3, 8017cce <__swsetup_r+0x16>
 8017cc8:	4628      	mov	r0, r5
 8017cca:	f7ff f889 	bl	8016de0 <__sinit>
 8017cce:	4b2e      	ldr	r3, [pc, #184]	; (8017d88 <__swsetup_r+0xd0>)
 8017cd0:	429c      	cmp	r4, r3
 8017cd2:	d10f      	bne.n	8017cf4 <__swsetup_r+0x3c>
 8017cd4:	686c      	ldr	r4, [r5, #4]
 8017cd6:	89a3      	ldrh	r3, [r4, #12]
 8017cd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017cdc:	0719      	lsls	r1, r3, #28
 8017cde:	d42c      	bmi.n	8017d3a <__swsetup_r+0x82>
 8017ce0:	06dd      	lsls	r5, r3, #27
 8017ce2:	d411      	bmi.n	8017d08 <__swsetup_r+0x50>
 8017ce4:	2309      	movs	r3, #9
 8017ce6:	6033      	str	r3, [r6, #0]
 8017ce8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017cec:	81a3      	strh	r3, [r4, #12]
 8017cee:	f04f 30ff 	mov.w	r0, #4294967295
 8017cf2:	e03e      	b.n	8017d72 <__swsetup_r+0xba>
 8017cf4:	4b25      	ldr	r3, [pc, #148]	; (8017d8c <__swsetup_r+0xd4>)
 8017cf6:	429c      	cmp	r4, r3
 8017cf8:	d101      	bne.n	8017cfe <__swsetup_r+0x46>
 8017cfa:	68ac      	ldr	r4, [r5, #8]
 8017cfc:	e7eb      	b.n	8017cd6 <__swsetup_r+0x1e>
 8017cfe:	4b24      	ldr	r3, [pc, #144]	; (8017d90 <__swsetup_r+0xd8>)
 8017d00:	429c      	cmp	r4, r3
 8017d02:	bf08      	it	eq
 8017d04:	68ec      	ldreq	r4, [r5, #12]
 8017d06:	e7e6      	b.n	8017cd6 <__swsetup_r+0x1e>
 8017d08:	0758      	lsls	r0, r3, #29
 8017d0a:	d512      	bpl.n	8017d32 <__swsetup_r+0x7a>
 8017d0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017d0e:	b141      	cbz	r1, 8017d22 <__swsetup_r+0x6a>
 8017d10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017d14:	4299      	cmp	r1, r3
 8017d16:	d002      	beq.n	8017d1e <__swsetup_r+0x66>
 8017d18:	4630      	mov	r0, r6
 8017d1a:	f7ff fc2f 	bl	801757c <_free_r>
 8017d1e:	2300      	movs	r3, #0
 8017d20:	6363      	str	r3, [r4, #52]	; 0x34
 8017d22:	89a3      	ldrh	r3, [r4, #12]
 8017d24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017d28:	81a3      	strh	r3, [r4, #12]
 8017d2a:	2300      	movs	r3, #0
 8017d2c:	6063      	str	r3, [r4, #4]
 8017d2e:	6923      	ldr	r3, [r4, #16]
 8017d30:	6023      	str	r3, [r4, #0]
 8017d32:	89a3      	ldrh	r3, [r4, #12]
 8017d34:	f043 0308 	orr.w	r3, r3, #8
 8017d38:	81a3      	strh	r3, [r4, #12]
 8017d3a:	6923      	ldr	r3, [r4, #16]
 8017d3c:	b94b      	cbnz	r3, 8017d52 <__swsetup_r+0x9a>
 8017d3e:	89a3      	ldrh	r3, [r4, #12]
 8017d40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017d44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017d48:	d003      	beq.n	8017d52 <__swsetup_r+0x9a>
 8017d4a:	4621      	mov	r1, r4
 8017d4c:	4630      	mov	r0, r6
 8017d4e:	f000 f84d 	bl	8017dec <__smakebuf_r>
 8017d52:	89a0      	ldrh	r0, [r4, #12]
 8017d54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017d58:	f010 0301 	ands.w	r3, r0, #1
 8017d5c:	d00a      	beq.n	8017d74 <__swsetup_r+0xbc>
 8017d5e:	2300      	movs	r3, #0
 8017d60:	60a3      	str	r3, [r4, #8]
 8017d62:	6963      	ldr	r3, [r4, #20]
 8017d64:	425b      	negs	r3, r3
 8017d66:	61a3      	str	r3, [r4, #24]
 8017d68:	6923      	ldr	r3, [r4, #16]
 8017d6a:	b943      	cbnz	r3, 8017d7e <__swsetup_r+0xc6>
 8017d6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017d70:	d1ba      	bne.n	8017ce8 <__swsetup_r+0x30>
 8017d72:	bd70      	pop	{r4, r5, r6, pc}
 8017d74:	0781      	lsls	r1, r0, #30
 8017d76:	bf58      	it	pl
 8017d78:	6963      	ldrpl	r3, [r4, #20]
 8017d7a:	60a3      	str	r3, [r4, #8]
 8017d7c:	e7f4      	b.n	8017d68 <__swsetup_r+0xb0>
 8017d7e:	2000      	movs	r0, #0
 8017d80:	e7f7      	b.n	8017d72 <__swsetup_r+0xba>
 8017d82:	bf00      	nop
 8017d84:	20000034 	.word	0x20000034
 8017d88:	0801b130 	.word	0x0801b130
 8017d8c:	0801b150 	.word	0x0801b150
 8017d90:	0801b110 	.word	0x0801b110

08017d94 <abort>:
 8017d94:	b508      	push	{r3, lr}
 8017d96:	2006      	movs	r0, #6
 8017d98:	f000 f890 	bl	8017ebc <raise>
 8017d9c:	2001      	movs	r0, #1
 8017d9e:	f7e9 f971 	bl	8001084 <_exit>

08017da2 <__swhatbuf_r>:
 8017da2:	b570      	push	{r4, r5, r6, lr}
 8017da4:	460e      	mov	r6, r1
 8017da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017daa:	2900      	cmp	r1, #0
 8017dac:	b096      	sub	sp, #88	; 0x58
 8017dae:	4614      	mov	r4, r2
 8017db0:	461d      	mov	r5, r3
 8017db2:	da08      	bge.n	8017dc6 <__swhatbuf_r+0x24>
 8017db4:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017db8:	2200      	movs	r2, #0
 8017dba:	602a      	str	r2, [r5, #0]
 8017dbc:	061a      	lsls	r2, r3, #24
 8017dbe:	d410      	bmi.n	8017de2 <__swhatbuf_r+0x40>
 8017dc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017dc4:	e00e      	b.n	8017de4 <__swhatbuf_r+0x42>
 8017dc6:	466a      	mov	r2, sp
 8017dc8:	f000 f894 	bl	8017ef4 <_fstat_r>
 8017dcc:	2800      	cmp	r0, #0
 8017dce:	dbf1      	blt.n	8017db4 <__swhatbuf_r+0x12>
 8017dd0:	9a01      	ldr	r2, [sp, #4]
 8017dd2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017dd6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017dda:	425a      	negs	r2, r3
 8017ddc:	415a      	adcs	r2, r3
 8017dde:	602a      	str	r2, [r5, #0]
 8017de0:	e7ee      	b.n	8017dc0 <__swhatbuf_r+0x1e>
 8017de2:	2340      	movs	r3, #64	; 0x40
 8017de4:	2000      	movs	r0, #0
 8017de6:	6023      	str	r3, [r4, #0]
 8017de8:	b016      	add	sp, #88	; 0x58
 8017dea:	bd70      	pop	{r4, r5, r6, pc}

08017dec <__smakebuf_r>:
 8017dec:	898b      	ldrh	r3, [r1, #12]
 8017dee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017df0:	079d      	lsls	r5, r3, #30
 8017df2:	4606      	mov	r6, r0
 8017df4:	460c      	mov	r4, r1
 8017df6:	d507      	bpl.n	8017e08 <__smakebuf_r+0x1c>
 8017df8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017dfc:	6023      	str	r3, [r4, #0]
 8017dfe:	6123      	str	r3, [r4, #16]
 8017e00:	2301      	movs	r3, #1
 8017e02:	6163      	str	r3, [r4, #20]
 8017e04:	b002      	add	sp, #8
 8017e06:	bd70      	pop	{r4, r5, r6, pc}
 8017e08:	ab01      	add	r3, sp, #4
 8017e0a:	466a      	mov	r2, sp
 8017e0c:	f7ff ffc9 	bl	8017da2 <__swhatbuf_r>
 8017e10:	9900      	ldr	r1, [sp, #0]
 8017e12:	4605      	mov	r5, r0
 8017e14:	4630      	mov	r0, r6
 8017e16:	f7ff f8ef 	bl	8016ff8 <_malloc_r>
 8017e1a:	b948      	cbnz	r0, 8017e30 <__smakebuf_r+0x44>
 8017e1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017e20:	059a      	lsls	r2, r3, #22
 8017e22:	d4ef      	bmi.n	8017e04 <__smakebuf_r+0x18>
 8017e24:	f023 0303 	bic.w	r3, r3, #3
 8017e28:	f043 0302 	orr.w	r3, r3, #2
 8017e2c:	81a3      	strh	r3, [r4, #12]
 8017e2e:	e7e3      	b.n	8017df8 <__smakebuf_r+0xc>
 8017e30:	4b0d      	ldr	r3, [pc, #52]	; (8017e68 <__smakebuf_r+0x7c>)
 8017e32:	62b3      	str	r3, [r6, #40]	; 0x28
 8017e34:	89a3      	ldrh	r3, [r4, #12]
 8017e36:	6020      	str	r0, [r4, #0]
 8017e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017e3c:	81a3      	strh	r3, [r4, #12]
 8017e3e:	9b00      	ldr	r3, [sp, #0]
 8017e40:	6163      	str	r3, [r4, #20]
 8017e42:	9b01      	ldr	r3, [sp, #4]
 8017e44:	6120      	str	r0, [r4, #16]
 8017e46:	b15b      	cbz	r3, 8017e60 <__smakebuf_r+0x74>
 8017e48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017e4c:	4630      	mov	r0, r6
 8017e4e:	f000 f863 	bl	8017f18 <_isatty_r>
 8017e52:	b128      	cbz	r0, 8017e60 <__smakebuf_r+0x74>
 8017e54:	89a3      	ldrh	r3, [r4, #12]
 8017e56:	f023 0303 	bic.w	r3, r3, #3
 8017e5a:	f043 0301 	orr.w	r3, r3, #1
 8017e5e:	81a3      	strh	r3, [r4, #12]
 8017e60:	89a0      	ldrh	r0, [r4, #12]
 8017e62:	4305      	orrs	r5, r0
 8017e64:	81a5      	strh	r5, [r4, #12]
 8017e66:	e7cd      	b.n	8017e04 <__smakebuf_r+0x18>
 8017e68:	08016d79 	.word	0x08016d79

08017e6c <_raise_r>:
 8017e6c:	291f      	cmp	r1, #31
 8017e6e:	b538      	push	{r3, r4, r5, lr}
 8017e70:	4604      	mov	r4, r0
 8017e72:	460d      	mov	r5, r1
 8017e74:	d904      	bls.n	8017e80 <_raise_r+0x14>
 8017e76:	2316      	movs	r3, #22
 8017e78:	6003      	str	r3, [r0, #0]
 8017e7a:	f04f 30ff 	mov.w	r0, #4294967295
 8017e7e:	bd38      	pop	{r3, r4, r5, pc}
 8017e80:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017e82:	b112      	cbz	r2, 8017e8a <_raise_r+0x1e>
 8017e84:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017e88:	b94b      	cbnz	r3, 8017e9e <_raise_r+0x32>
 8017e8a:	4620      	mov	r0, r4
 8017e8c:	f000 f830 	bl	8017ef0 <_getpid_r>
 8017e90:	462a      	mov	r2, r5
 8017e92:	4601      	mov	r1, r0
 8017e94:	4620      	mov	r0, r4
 8017e96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017e9a:	f000 b817 	b.w	8017ecc <_kill_r>
 8017e9e:	2b01      	cmp	r3, #1
 8017ea0:	d00a      	beq.n	8017eb8 <_raise_r+0x4c>
 8017ea2:	1c59      	adds	r1, r3, #1
 8017ea4:	d103      	bne.n	8017eae <_raise_r+0x42>
 8017ea6:	2316      	movs	r3, #22
 8017ea8:	6003      	str	r3, [r0, #0]
 8017eaa:	2001      	movs	r0, #1
 8017eac:	e7e7      	b.n	8017e7e <_raise_r+0x12>
 8017eae:	2400      	movs	r4, #0
 8017eb0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017eb4:	4628      	mov	r0, r5
 8017eb6:	4798      	blx	r3
 8017eb8:	2000      	movs	r0, #0
 8017eba:	e7e0      	b.n	8017e7e <_raise_r+0x12>

08017ebc <raise>:
 8017ebc:	4b02      	ldr	r3, [pc, #8]	; (8017ec8 <raise+0xc>)
 8017ebe:	4601      	mov	r1, r0
 8017ec0:	6818      	ldr	r0, [r3, #0]
 8017ec2:	f7ff bfd3 	b.w	8017e6c <_raise_r>
 8017ec6:	bf00      	nop
 8017ec8:	20000034 	.word	0x20000034

08017ecc <_kill_r>:
 8017ecc:	b538      	push	{r3, r4, r5, lr}
 8017ece:	4d07      	ldr	r5, [pc, #28]	; (8017eec <_kill_r+0x20>)
 8017ed0:	2300      	movs	r3, #0
 8017ed2:	4604      	mov	r4, r0
 8017ed4:	4608      	mov	r0, r1
 8017ed6:	4611      	mov	r1, r2
 8017ed8:	602b      	str	r3, [r5, #0]
 8017eda:	f7e9 f8c1 	bl	8001060 <_kill>
 8017ede:	1c43      	adds	r3, r0, #1
 8017ee0:	d102      	bne.n	8017ee8 <_kill_r+0x1c>
 8017ee2:	682b      	ldr	r3, [r5, #0]
 8017ee4:	b103      	cbz	r3, 8017ee8 <_kill_r+0x1c>
 8017ee6:	6023      	str	r3, [r4, #0]
 8017ee8:	bd38      	pop	{r3, r4, r5, pc}
 8017eea:	bf00      	nop
 8017eec:	2000f400 	.word	0x2000f400

08017ef0 <_getpid_r>:
 8017ef0:	f7e9 b8ae 	b.w	8001050 <_getpid>

08017ef4 <_fstat_r>:
 8017ef4:	b538      	push	{r3, r4, r5, lr}
 8017ef6:	4d07      	ldr	r5, [pc, #28]	; (8017f14 <_fstat_r+0x20>)
 8017ef8:	2300      	movs	r3, #0
 8017efa:	4604      	mov	r4, r0
 8017efc:	4608      	mov	r0, r1
 8017efe:	4611      	mov	r1, r2
 8017f00:	602b      	str	r3, [r5, #0]
 8017f02:	f7e9 f90e 	bl	8001122 <_fstat>
 8017f06:	1c43      	adds	r3, r0, #1
 8017f08:	d102      	bne.n	8017f10 <_fstat_r+0x1c>
 8017f0a:	682b      	ldr	r3, [r5, #0]
 8017f0c:	b103      	cbz	r3, 8017f10 <_fstat_r+0x1c>
 8017f0e:	6023      	str	r3, [r4, #0]
 8017f10:	bd38      	pop	{r3, r4, r5, pc}
 8017f12:	bf00      	nop
 8017f14:	2000f400 	.word	0x2000f400

08017f18 <_isatty_r>:
 8017f18:	b538      	push	{r3, r4, r5, lr}
 8017f1a:	4d06      	ldr	r5, [pc, #24]	; (8017f34 <_isatty_r+0x1c>)
 8017f1c:	2300      	movs	r3, #0
 8017f1e:	4604      	mov	r4, r0
 8017f20:	4608      	mov	r0, r1
 8017f22:	602b      	str	r3, [r5, #0]
 8017f24:	f7e9 f90d 	bl	8001142 <_isatty>
 8017f28:	1c43      	adds	r3, r0, #1
 8017f2a:	d102      	bne.n	8017f32 <_isatty_r+0x1a>
 8017f2c:	682b      	ldr	r3, [r5, #0]
 8017f2e:	b103      	cbz	r3, 8017f32 <_isatty_r+0x1a>
 8017f30:	6023      	str	r3, [r4, #0]
 8017f32:	bd38      	pop	{r3, r4, r5, pc}
 8017f34:	2000f400 	.word	0x2000f400

08017f38 <_init>:
 8017f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f3a:	bf00      	nop
 8017f3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f3e:	bc08      	pop	{r3}
 8017f40:	469e      	mov	lr, r3
 8017f42:	4770      	bx	lr

08017f44 <_fini>:
 8017f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017f46:	bf00      	nop
 8017f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017f4a:	bc08      	pop	{r3}
 8017f4c:	469e      	mov	lr, r3
 8017f4e:	4770      	bx	lr

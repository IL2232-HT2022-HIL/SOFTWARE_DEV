
MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000152e8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002dc4  080154e8  080154e8  000254e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080182ac  080182ac  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  080182ac  080182ac  000282ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080182b4  080182b4  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080182b4  080182b4  000282b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080182b8  080182b8  000282b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080182bc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  08018350  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  080183f0  00030134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000f184  200001d4  08018490  000301d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000f358  08018490  0003f358  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00039321  00000000  00000000  00030202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007b7d  00000000  00000000  00069523  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002948  00000000  00000000  000710a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000027b8  00000000  00000000  000739e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000116fc  00000000  00000000  000761a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003d417  00000000  00000000  0008789c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00127231  00000000  00000000  000c4cb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001ebee4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000b680  00000000  00000000  001ebf34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	080154d0 	.word	0x080154d0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	080154d0 	.word	0x080154d0

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e8:	f3bf 8f4f 	dsb	sy
}
 80005ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ee:	f3bf 8f6f 	isb	sy
}
 80005f2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <SCB_EnableICache+0x48>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <SCB_EnableICache+0x48>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <SCB_EnableICache+0x48>)
 800060e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000612:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000614:	f3bf 8f4f 	dsb	sy
}
 8000618:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800061a:	f3bf 8f6f 	isb	sy
}
 800061e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000638:	2200      	movs	r2, #0
 800063a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800063e:	f3bf 8f4f 	dsb	sy
}
 8000642:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800064a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	0b5b      	lsrs	r3, r3, #13
 8000650:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000654:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	08db      	lsrs	r3, r3, #3
 800065a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800065e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	015a      	lsls	r2, r3, #5
 8000664:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000668:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800066e:	4911      	ldr	r1, [pc, #68]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000670:	4313      	orrs	r3, r2
 8000672:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	1e5a      	subs	r2, r3, #1
 800067a:	60ba      	str	r2, [r7, #8]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1ef      	bne.n	8000660 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	1e5a      	subs	r2, r3, #1
 8000684:	60fa      	str	r2, [r7, #12]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1e5      	bne.n	8000656 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800068a:	f3bf 8f4f 	dsb	sy
}
 800068e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800069a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800069c:	f3bf 8f4f 	dsb	sy
}
 80006a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a2:	f3bf 8f6f 	isb	sy
}
 80006a6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006bc:	f7ff ff92 	bl	80005e4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006c0:	f7ff ffb6 	bl	8000630 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f000 feae 	bl	8001424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 f81e 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f000 f96a 	bl	80009a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006d0:	f000 f8fe 	bl	80008d0 <MX_SPI1_Init>
  MX_CAN1_Init();
 80006d4:	f000 f888 	bl	80007e8 <MX_CAN1_Init>
  MX_I2C1_Init();
 80006d8:	f000 f8ba 	bl	8000850 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80006dc:	f000 f932 	bl	8000944 <MX_USART1_UART_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006e0:	f005 fe26 	bl	8006330 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006e4:	4a05      	ldr	r2, [pc, #20]	; (80006fc <main+0x44>)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <main+0x48>)
 80006ea:	f005 feb3 	bl	8006454 <osThreadNew>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a04      	ldr	r2, [pc, #16]	; (8000704 <main+0x4c>)
 80006f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006f4:	f005 fe50 	bl	8006398 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <main+0x40>
 80006fa:	bf00      	nop
 80006fc:	08017ff8 	.word	0x08017ff8
 8000700:	08000a6d 	.word	0x08000a6d
 8000704:	20000358 	.word	0x20000358

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	2234      	movs	r2, #52	; 0x34
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f013 ff11 	bl	801453e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	4b2c      	ldr	r3, [pc, #176]	; (80007e0 <SystemClock_Config+0xd8>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a2b      	ldr	r2, [pc, #172]	; (80007e0 <SystemClock_Config+0xd8>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
 8000738:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <SystemClock_Config+0xd8>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000744:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <SystemClock_Config+0xdc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074c:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <SystemClock_Config+0xdc>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <SystemClock_Config+0xdc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	2302      	movs	r3, #2
 8000762:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	2302      	movs	r3, #2
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000770:	2300      	movs	r3, #0
 8000772:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000778:	2360      	movs	r3, #96	; 0x60
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000780:	2304      	movs	r3, #4
 8000782:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000784:	2302      	movs	r3, #2
 8000786:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4618      	mov	r0, r3
 800078e:	f002 fe6d 	bl	800346c <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000798:	f000 f984 	bl	8000aa4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800079c:	f002 fe16 	bl	80033cc <HAL_PWREx_EnableOverDrive>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007a6:	f000 f97d 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	230f      	movs	r3, #15
 80007ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2302      	movs	r3, #2
 80007b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	2103      	movs	r1, #3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f003 f8fe 	bl	80039c8 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007d2:	f000 f967 	bl	8000aa4 <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	; 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_CAN1_Init+0x60>)
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <MX_CAN1_Init+0x64>)
 80007f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_CAN1_Init+0x60>)
 80007f4:	2210      	movs	r2, #16
 80007f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_CAN1_Init+0x60>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_CAN1_Init+0x60>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_CAN1_Init+0x60>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_CAN1_Init+0x60>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_CAN1_Init+0x60>)
 8000812:	2200      	movs	r2, #0
 8000814:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_CAN1_Init+0x60>)
 8000818:	2200      	movs	r2, #0
 800081a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_CAN1_Init+0x60>)
 800081e:	2200      	movs	r2, #0
 8000820:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_CAN1_Init+0x60>)
 8000824:	2200      	movs	r2, #0
 8000826:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <MX_CAN1_Init+0x60>)
 800082a:	2200      	movs	r2, #0
 800082c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_CAN1_Init+0x60>)
 8000830:	2200      	movs	r2, #0
 8000832:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_CAN1_Init+0x60>)
 8000836:	f000 fe4f 	bl	80014d8 <HAL_CAN_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000840:	f000 f930 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200001f0 	.word	0x200001f0
 800084c:	40006400 	.word	0x40006400

08000850 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_I2C1_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_I2C1_Init+0x74>)
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <MX_I2C1_Init+0x7c>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000868:	2201      	movs	r2, #1
 800086a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_I2C1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088a:	480e      	ldr	r0, [pc, #56]	; (80008c4 <MX_I2C1_Init+0x74>)
 800088c:	f002 fc76 	bl	800317c <HAL_I2C_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000896:	f000 f905 	bl	8000aa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <MX_I2C1_Init+0x74>)
 800089e:	f002 fcfd 	bl	800329c <HAL_I2CEx_ConfigAnalogFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a8:	f000 f8fc 	bl	8000aa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_I2C1_Init+0x74>)
 80008b0:	f002 fd3f 	bl	8003332 <HAL_I2CEx_ConfigDigitalFilter>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 f8f3 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000218 	.word	0x20000218
 80008c8:	40005400 	.word	0x40005400
 80008cc:	20303e5d 	.word	0x20303e5d

080008d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_SPI1_Init+0x6c>)
 80008d6:	4a1a      	ldr	r2, [pc, #104]	; (8000940 <MX_SPI1_Init+0x70>)
 80008d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_SPI1_Init+0x6c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_SPI1_Init+0x6c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_SPI1_Init+0x6c>)
 80008e8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_SPI1_Init+0x6c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_SPI1_Init+0x6c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_SPI1_Init+0x6c>)
 80008fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000900:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_SPI1_Init+0x6c>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_SPI1_Init+0x6c>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_SPI1_Init+0x6c>)
 8000910:	2200      	movs	r2, #0
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_SPI1_Init+0x6c>)
 8000916:	2207      	movs	r2, #7
 8000918:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_SPI1_Init+0x6c>)
 800091c:	2200      	movs	r2, #0
 800091e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_SPI1_Init+0x6c>)
 8000922:	2200      	movs	r2, #0
 8000924:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_SPI1_Init+0x6c>)
 8000928:	f003 fece 	bl	80046c8 <HAL_SPI_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000932:	f000 f8b7 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	2000026c 	.word	0x2000026c
 8000940:	40013000 	.word	0x40013000

08000944 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_USART1_UART_Init+0x58>)
 800094a:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <MX_USART1_UART_Init+0x5c>)
 800094c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_USART1_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_USART1_UART_Init+0x58>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_USART1_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000988:	f004 fa28 	bl	8004ddc <HAL_UART_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000992:	f000 f887 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200002d0 	.word	0x200002d0
 80009a0:	40011000 	.word	0x40011000

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a29      	ldr	r2, [pc, #164]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a23      	ldr	r2, [pc, #140]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_GPIO_Init+0xc0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a17      	ldr	r2, [pc, #92]	; (8000a64 <MX_GPIO_Init+0xc0>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_GPIO_Init+0xc0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_GPIO_Init+0xc0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <MX_GPIO_Init+0xc0>)
 8000a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_GPIO_Init+0xc0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f244 0181 	movw	r1, #16513	; 0x4081
 8000a38:	480b      	ldr	r0, [pc, #44]	; (8000a68 <MX_GPIO_Init+0xc4>)
 8000a3a:	f002 fb85 	bl	8003148 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 8000a3e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_GPIO_Init+0xc4>)
 8000a58:	f002 f9ca 	bl	8002df0 <HAL_GPIO_Init>

}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020400 	.word	0x40020400

08000a6c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a74:	f004 fe1a 	bl	80056ac <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f005 fd91 	bl	80065a0 <osDelay>
 8000a7e:	e7fb      	b.n	8000a78 <StartDefaultTask+0xc>

08000a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d101      	bne.n	8000a96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a92:	f000 fcdd 	bl	8001450 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40001000 	.word	0x40001000

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a10      	ldr	r2, [pc, #64]	; (8000afc <HAL_MspInit+0x4c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_MspInit+0x4c>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	210f      	movs	r1, #15
 8000aea:	f06f 0001 	mvn.w	r0, #1
 8000aee:	f000 fea7 	bl	8001840 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <HAL_CAN_MspInit+0x7c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d128      	bne.n	8000b74 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <HAL_CAN_MspInit+0x80>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a16      	ldr	r2, [pc, #88]	; (8000b80 <HAL_CAN_MspInit+0x80>)
 8000b28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_CAN_MspInit+0x80>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_CAN_MspInit+0x80>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <HAL_CAN_MspInit+0x80>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_CAN_MspInit+0x80>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b64:	2309      	movs	r3, #9
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <HAL_CAN_MspInit+0x84>)
 8000b70:	f002 f93e 	bl	8002df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40006400 	.word	0x40006400
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020000 	.word	0x40020000

08000b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b0ae      	sub	sp, #184	; 0xb8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2290      	movs	r2, #144	; 0x90
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f013 fcc8 	bl	801453e <memset>
  if(hi2c->Instance==I2C1)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a22      	ldr	r2, [pc, #136]	; (8000c3c <HAL_I2C_MspInit+0xb4>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d13c      	bne.n	8000c32 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bbc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f003 f956 	bl	8003e78 <HAL_RCCEx_PeriphCLKConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000bd2:	f7ff ff67 	bl	8000aa4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <HAL_I2C_MspInit+0xb8>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <HAL_I2C_MspInit+0xb8>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <HAL_I2C_MspInit+0xb8>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000bee:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf6:	2312      	movs	r3, #18
 8000bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c12:	4619      	mov	r1, r3
 8000c14:	480b      	ldr	r0, [pc, #44]	; (8000c44 <HAL_I2C_MspInit+0xbc>)
 8000c16:	f002 f8eb 	bl	8002df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_I2C_MspInit+0xb8>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_I2C_MspInit+0xb8>)
 8000c20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_I2C_MspInit+0xb8>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	37b8      	adds	r7, #184	; 0xb8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40005400 	.word	0x40005400
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020400 	.word	0x40020400

08000c48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a25      	ldr	r2, [pc, #148]	; (8000cfc <HAL_SPI_MspInit+0xb4>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d143      	bne.n	8000cf2 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c6a:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <HAL_SPI_MspInit+0xb8>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	4a24      	ldr	r2, [pc, #144]	; (8000d00 <HAL_SPI_MspInit+0xb8>)
 8000c70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c74:	6453      	str	r3, [r2, #68]	; 0x44
 8000c76:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <HAL_SPI_MspInit+0xb8>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <HAL_SPI_MspInit+0xb8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <HAL_SPI_MspInit+0xb8>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_SPI_MspInit+0xb8>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_SPI_MspInit+0xb8>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <HAL_SPI_MspInit+0xb8>)
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_SPI_MspInit+0xb8>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cb2:	2360      	movs	r3, #96	; 0x60
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <HAL_SPI_MspInit+0xbc>)
 8000cce:	f002 f88f 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4806      	ldr	r0, [pc, #24]	; (8000d08 <HAL_SPI_MspInit+0xc0>)
 8000cee:	f002 f87f 	bl	8002df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40013000 	.word	0x40013000
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000
 8000d08:	40020c00 	.word	0x40020c00

08000d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b0ae      	sub	sp, #184	; 0xb8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2290      	movs	r2, #144	; 0x90
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f013 fc06 	bl	801453e <memset>
  if(huart->Instance==USART1)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a32      	ldr	r2, [pc, #200]	; (8000e00 <HAL_UART_MspInit+0xf4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d15d      	bne.n	8000df8 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d3c:	2340      	movs	r3, #64	; 0x40
 8000d3e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d40:	2300      	movs	r3, #0
 8000d42:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f003 f895 	bl	8003e78 <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d54:	f7ff fea6 	bl	8000aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d58:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5c:	4a29      	ldr	r2, [pc, #164]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6453      	str	r3, [r2, #68]	; 0x44
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d70:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	4a23      	ldr	r2, [pc, #140]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d76:	f043 0302 	orr.w	r3, r3, #2
 8000d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	4a1d      	ldr	r2, [pc, #116]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6313      	str	r3, [r2, #48]	; 0x30
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000da0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000da4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4810      	ldr	r0, [pc, #64]	; (8000e08 <HAL_UART_MspInit+0xfc>)
 8000dc8:	f002 f812 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000de6:	2307      	movs	r3, #7
 8000de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000df0:	4619      	mov	r1, r3
 8000df2:	4806      	ldr	r0, [pc, #24]	; (8000e0c <HAL_UART_MspInit+0x100>)
 8000df4:	f001 fffc 	bl	8002df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	37b8      	adds	r7, #184	; 0xb8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40011000 	.word	0x40011000
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020400 	.word	0x40020400
 8000e0c:	40020000 	.word	0x40020000

08000e10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08e      	sub	sp, #56	; 0x38
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e20:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <HAL_InitTick+0xe0>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a32      	ldr	r2, [pc, #200]	; (8000ef0 <HAL_InitTick+0xe0>)
 8000e26:	f043 0310 	orr.w	r3, r3, #16
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b30      	ldr	r3, [pc, #192]	; (8000ef0 <HAL_InitTick+0xe0>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f003 0310 	and.w	r3, r3, #16
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e38:	f107 0210 	add.w	r2, r7, #16
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 ffe6 	bl	8003e14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e48:	6a3b      	ldr	r3, [r7, #32]
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d103      	bne.n	8000e5a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e52:	f002 ffb7 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 8000e56:	6378      	str	r0, [r7, #52]	; 0x34
 8000e58:	e004      	b.n	8000e64 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e5a:	f002 ffb3 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e66:	4a23      	ldr	r2, [pc, #140]	; (8000ef4 <HAL_InitTick+0xe4>)
 8000e68:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6c:	0c9b      	lsrs	r3, r3, #18
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <HAL_InitTick+0xe8>)
 8000e74:	4a21      	ldr	r2, [pc, #132]	; (8000efc <HAL_InitTick+0xec>)
 8000e76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <HAL_InitTick+0xe8>)
 8000e7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e80:	4a1d      	ldr	r2, [pc, #116]	; (8000ef8 <HAL_InitTick+0xe8>)
 8000e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e86:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <HAL_InitTick+0xe8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <HAL_InitTick+0xe8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <HAL_InitTick+0xe8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e98:	4817      	ldr	r0, [pc, #92]	; (8000ef8 <HAL_InitTick+0xe8>)
 8000e9a:	f003 fcc0 	bl	800481e <HAL_TIM_Base_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ea4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d11b      	bne.n	8000ee4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000eac:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <HAL_InitTick+0xe8>)
 8000eae:	f003 fd17 	bl	80048e0 <HAL_TIM_Base_Start_IT>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000eb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d111      	bne.n	8000ee4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ec0:	2036      	movs	r0, #54	; 0x36
 8000ec2:	f000 fcd9 	bl	8001878 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d808      	bhi.n	8000ede <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	2036      	movs	r0, #54	; 0x36
 8000ed2:	f000 fcb5 	bl	8001840 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <HAL_InitTick+0xf0>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	e002      	b.n	8000ee4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ee4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3738      	adds	r7, #56	; 0x38
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	431bde83 	.word	0x431bde83
 8000ef8:	2000035c 	.word	0x2000035c
 8000efc:	40001000 	.word	0x40001000
 8000f00:	20000004 	.word	0x20000004

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <NMI_Handler+0x4>

08000f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <MemManage_Handler+0x4>

08000f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <TIM6_DAC_IRQHandler+0x10>)
 8000f36:	f003 fd4b 	bl	80049d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	2000035c 	.word	0x2000035c

08000f44 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <ETH_IRQHandler+0x10>)
 8000f4a:	f001 f87d 	bl	8002048 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20004db4 	.word	0x20004db4

08000f58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
	return 1;
 8000f5c:	2301      	movs	r3, #1
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <_kill>:

int _kill(int pid, int sig)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <_kill+0x20>)
 8000f74:	2216      	movs	r2, #22
 8000f76:	601a      	str	r2, [r3, #0]
	return -1;
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	2000f354 	.word	0x2000f354

08000f8c <_exit>:

void _exit (int status)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ffe5 	bl	8000f68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f9e:	e7fe      	b.n	8000f9e <_exit+0x12>

08000fa0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	e00a      	b.n	8000fc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fb2:	f3af 8000 	nop.w
 8000fb6:	4601      	mov	r1, r0
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1c5a      	adds	r2, r3, #1
 8000fbc:	60ba      	str	r2, [r7, #8]
 8000fbe:	b2ca      	uxtb	r2, r1
 8000fc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dbf0      	blt.n	8000fb2 <_read+0x12>
	}

return len;
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	e009      	b.n	8001000 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	60ba      	str	r2, [r7, #8]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbf1      	blt.n	8000fec <_write+0x12>
	}
	return len;
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <_close>:

int _close(int file)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
	return -1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800103a:	605a      	str	r2, [r3, #4]
	return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_isatty>:

int _isatty(int file)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
	return 1;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
	return 0;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001084:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d205      	bcs.n	80010b8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <_sbrk+0x6c>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	e009      	b.n	80010cc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <_sbrk+0x64>)
 80010c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	371c      	adds	r7, #28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	20080000 	.word	0x20080000
 80010dc:	00000400 	.word	0x00000400
 80010e0:	200003a8 	.word	0x200003a8
 80010e4:	2000f358 	.word	0x2000f358
 80010e8:	2000f354 	.word	0x2000f354

080010ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <SystemInit+0x20>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <SystemInit+0x20>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001148 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001116:	490e      	ldr	r1, [pc, #56]	; (8001150 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001118:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800112c:	4c0b      	ldr	r4, [pc, #44]	; (800115c <LoopFillZerobss+0x26>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800113a:	f7ff ffd7 	bl	80010ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113e:	f013 f9b9 	bl	80144b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001142:	f7ff fab9 	bl	80006b8 <main>
  bx  lr    
 8001146:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001148:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001154:	080182bc 	.word	0x080182bc
  ldr r2, =_sbss
 8001158:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800115c:	2000f358 	.word	0x2000f358

08001160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC_IRQHandler>

08001162 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00b      	beq.n	800118a <LAN8742_RegisterBusIO+0x28>
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <LAN8742_RegisterBusIO+0x28>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <LAN8742_RegisterBusIO+0x28>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e014      	b.n	80011ba <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d17c      	bne.n	80012e0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2220      	movs	r2, #32
 80011f8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	e01c      	b.n	800123a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	f107 0208 	add.w	r2, r7, #8
 8001208:	2112      	movs	r1, #18
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	4798      	blx	r3
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	da03      	bge.n	800121c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001214:	f06f 0304 	mvn.w	r3, #4
 8001218:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800121a:	e00b      	b.n	8001234 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	f003 031f 	and.w	r3, r3, #31
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	429a      	cmp	r2, r3
 8001226:	d105      	bne.n	8001234 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
         break;
 8001232:	e005      	b.n	8001240 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2b1f      	cmp	r3, #31
 800123e:	d9df      	bls.n	8001200 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b1f      	cmp	r3, #31
 8001246:	d902      	bls.n	800124e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001248:	f06f 0302 	mvn.w	r3, #2
 800124c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d145      	bne.n	80012e0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	6810      	ldr	r0, [r2, #0]
 800125c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001260:	2100      	movs	r1, #0
 8001262:	4798      	blx	r3
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	db37      	blt.n	80012da <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6810      	ldr	r0, [r2, #0]
 8001272:	f107 0208 	add.w	r2, r7, #8
 8001276:	2100      	movs	r1, #0
 8001278:	4798      	blx	r3
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	db28      	blt.n	80012d2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4798      	blx	r3
 8001286:	4603      	mov	r3, r0
 8001288:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800128a:	e01c      	b.n	80012c6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4798      	blx	r3
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800129e:	d80e      	bhi.n	80012be <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6810      	ldr	r0, [r2, #0]
 80012a8:	f107 0208 	add.w	r2, r7, #8
 80012ac:	2100      	movs	r1, #0
 80012ae:	4798      	blx	r3
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	da07      	bge.n	80012c6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80012b6:	f06f 0304 	mvn.w	r3, #4
 80012ba:	613b      	str	r3, [r7, #16]
                 break;
 80012bc:	e010      	b.n	80012e0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80012be:	f06f 0301 	mvn.w	r3, #1
 80012c2:	613b      	str	r3, [r7, #16]
               break;
 80012c4:	e00c      	b.n	80012e0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1dd      	bne.n	800128c <LAN8742_Init+0xc6>
 80012d0:	e006      	b.n	80012e0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80012d2:	f06f 0304 	mvn.w	r3, #4
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	e002      	b.n	80012e0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80012da:	f06f 0303 	mvn.w	r3, #3
 80012de:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d112      	bne.n	800130c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	4798      	blx	r3
 80012ec:	4603      	mov	r3, r0
 80012ee:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80012f0:	bf00      	nop
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	4798      	blx	r3
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001304:	d9f5      	bls.n	80012f2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800130c:	693b      	ldr	r3, [r7, #16]
 }
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6810      	ldr	r0, [r2, #0]
 800132a:	f107 020c 	add.w	r2, r7, #12
 800132e:	2101      	movs	r1, #1
 8001330:	4798      	blx	r3
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	da02      	bge.n	800133e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001338:	f06f 0304 	mvn.w	r3, #4
 800133c:	e06e      	b.n	800141c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6810      	ldr	r0, [r2, #0]
 8001346:	f107 020c 	add.w	r2, r7, #12
 800134a:	2101      	movs	r1, #1
 800134c:	4798      	blx	r3
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	da02      	bge.n	800135a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001354:	f06f 0304 	mvn.w	r3, #4
 8001358:	e060      	b.n	800141c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001364:	2301      	movs	r3, #1
 8001366:	e059      	b.n	800141c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	6810      	ldr	r0, [r2, #0]
 8001370:	f107 020c 	add.w	r2, r7, #12
 8001374:	2100      	movs	r1, #0
 8001376:	4798      	blx	r3
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	da02      	bge.n	8001384 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800137e:	f06f 0304 	mvn.w	r3, #4
 8001382:	e04b      	b.n	800141c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11b      	bne.n	80013c6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <LAN8742_GetLinkState+0x90>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80013a2:	2302      	movs	r3, #2
 80013a4:	e03a      	b.n	800141c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e033      	b.n	800141c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80013be:	2304      	movs	r3, #4
 80013c0:	e02c      	b.n	800141c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80013c2:	2305      	movs	r3, #5
 80013c4:	e02a      	b.n	800141c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6810      	ldr	r0, [r2, #0]
 80013ce:	f107 020c 	add.w	r2, r7, #12
 80013d2:	211f      	movs	r1, #31
 80013d4:	4798      	blx	r3
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da02      	bge.n	80013e2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80013dc:	f06f 0304 	mvn.w	r3, #4
 80013e0:	e01c      	b.n	800141c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80013ec:	2306      	movs	r3, #6
 80013ee:	e015      	b.n	800141c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 031c 	and.w	r3, r3, #28
 80013f6:	2b18      	cmp	r3, #24
 80013f8:	d101      	bne.n	80013fe <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80013fa:	2302      	movs	r3, #2
 80013fc:	e00e      	b.n	800141c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f003 031c 	and.w	r3, r3, #28
 8001404:	2b08      	cmp	r3, #8
 8001406:	d101      	bne.n	800140c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001408:	2303      	movs	r3, #3
 800140a:	e007      	b.n	800141c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 031c 	and.w	r3, r3, #28
 8001412:	2b14      	cmp	r3, #20
 8001414:	d101      	bne.n	800141a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001416:	2304      	movs	r3, #4
 8001418:	e000      	b.n	800141c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800141a:	2305      	movs	r3, #5
    }				
  }
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_Init+0x28>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a07      	ldr	r2, [pc, #28]	; (800144c <HAL_Init+0x28>)
 800142e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001434:	2003      	movs	r0, #3
 8001436:	f000 f9f8 	bl	800182a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143a:	200f      	movs	r0, #15
 800143c:	f7ff fce8 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001440:	f7ff fb36 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023c00 	.word	0x40023c00

08001450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_IncTick+0x20>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_IncTick+0x24>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4413      	add	r3, r2
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <HAL_IncTick+0x24>)
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000008 	.word	0x20000008
 8001474:	200003ac 	.word	0x200003ac

08001478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return uwTick;
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <HAL_GetTick+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	200003ac 	.word	0x200003ac

08001490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001498:	f7ff ffee 	bl	8001478 <HAL_GetTick>
 800149c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a8:	d005      	beq.n	80014b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_Delay+0x44>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014b6:	bf00      	nop
 80014b8:	f7ff ffde 	bl	8001478 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d8f7      	bhi.n	80014b8 <HAL_Delay+0x28>
  {
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000008 	.word	0x20000008

080014d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0ed      	b.n	80016c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fb02 	bl	8000b00 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 0201 	orr.w	r2, r2, #1
 800150a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800150c:	f7ff ffb4 	bl	8001478 <HAL_GetTick>
 8001510:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001512:	e012      	b.n	800153a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001514:	f7ff ffb0 	bl	8001478 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b0a      	cmp	r3, #10
 8001520:	d90b      	bls.n	800153a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2205      	movs	r2, #5
 8001532:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0c5      	b.n	80016c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0e5      	beq.n	8001514 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0202 	bic.w	r2, r2, #2
 8001556:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001558:	f7ff ff8e 	bl	8001478 <HAL_GetTick>
 800155c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800155e:	e012      	b.n	8001586 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001560:	f7ff ff8a 	bl	8001478 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b0a      	cmp	r3, #10
 800156c:	d90b      	bls.n	8001586 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2205      	movs	r2, #5
 800157e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e09f      	b.n	80016c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1e5      	bne.n	8001560 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7e1b      	ldrb	r3, [r3, #24]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d108      	bne.n	80015ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e007      	b.n	80015be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	7e5b      	ldrb	r3, [r3, #25]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d108      	bne.n	80015d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	e007      	b.n	80015e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7e9b      	ldrb	r3, [r3, #26]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d108      	bne.n	8001602 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0220 	orr.w	r2, r2, #32
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	e007      	b.n	8001612 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0220 	bic.w	r2, r2, #32
 8001610:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7edb      	ldrb	r3, [r3, #27]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d108      	bne.n	800162c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0210 	bic.w	r2, r2, #16
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	e007      	b.n	800163c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0210 	orr.w	r2, r2, #16
 800163a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7f1b      	ldrb	r3, [r3, #28]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d108      	bne.n	8001656 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0208 	orr.w	r2, r2, #8
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	e007      	b.n	8001666 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0208 	bic.w	r2, r2, #8
 8001664:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7f5b      	ldrb	r3, [r3, #29]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d108      	bne.n	8001680 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0204 	orr.w	r2, r2, #4
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e007      	b.n	8001690 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0204 	bic.w	r2, r2, #4
 800168e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	ea42 0103 	orr.w	r1, r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	1e5a      	subs	r2, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <__NVIC_SetPriorityGrouping>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <__NVIC_SetPriorityGrouping+0x40>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fe:	4a04      	ldr	r2, [pc, #16]	; (8001710 <__NVIC_SetPriorityGrouping+0x40>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00
 8001714:	05fa0000 	.word	0x05fa0000

08001718 <__NVIC_GetPriorityGrouping>:
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <__NVIC_GetPriorityGrouping+0x18>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 0307 	and.w	r3, r3, #7
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_EnableIRQ>:
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	db0b      	blt.n	800175e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <__NVIC_EnableIRQ+0x38>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	2001      	movs	r0, #1
 8001756:	fa00 f202 	lsl.w	r2, r0, r2
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ff4c 	bl	80016d0 <__NVIC_SetPriorityGrouping>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001852:	f7ff ff61 	bl	8001718 <__NVIC_GetPriorityGrouping>
 8001856:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	68b9      	ldr	r1, [r7, #8]
 800185c:	6978      	ldr	r0, [r7, #20]
 800185e:	f7ff ffb1 	bl	80017c4 <NVIC_EncodePriority>
 8001862:	4602      	mov	r2, r0
 8001864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff80 	bl	8001770 <__NVIC_SetPriority>
}
 8001870:	bf00      	nop
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff54 	bl	8001734 <__NVIC_EnableIRQ>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e06a      	b.n	800197c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d106      	bne.n	80018be <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2223      	movs	r2, #35	; 0x23
 80018b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f004 fb19 	bl	8005ef0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	4b31      	ldr	r3, [pc, #196]	; (8001984 <HAL_ETH_Init+0xf0>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	4a30      	ldr	r2, [pc, #192]	; (8001984 <HAL_ETH_Init+0xf0>)
 80018c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ca:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <HAL_ETH_Init+0xf0>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80018d6:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <HAL_ETH_Init+0xf4>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4a2b      	ldr	r2, [pc, #172]	; (8001988 <HAL_ETH_Init+0xf4>)
 80018dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018e0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80018e2:	4b29      	ldr	r3, [pc, #164]	; (8001988 <HAL_ETH_Init+0xf4>)
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	4927      	ldr	r1, [pc, #156]	; (8001988 <HAL_ETH_Init+0xf4>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80018f0:	4b25      	ldr	r3, [pc, #148]	; (8001988 <HAL_ETH_Init+0xf4>)
 80018f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800190a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800190c:	f7ff fdb4 	bl	8001478 <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001912:	e011      	b.n	8001938 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001914:	f7ff fdb0 	bl	8001478 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001922:	d909      	bls.n	8001938 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2204      	movs	r2, #4
 8001928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	22e0      	movs	r2, #224	; 0xe0
 8001930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e021      	b.n	800197c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1e4      	bne.n	8001914 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 ffac 	bl	80028a8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f001 f853 	bl	80029fc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f001 f8a9 	bl	8002aae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	461a      	mov	r2, r3
 8001962:	2100      	movs	r1, #0
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f001 f811 	bl	800298c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2210      	movs	r2, #16
 8001976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	40013800 	.word	0x40013800

0800198c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800199a:	2b10      	cmp	r3, #16
 800199c:	d150      	bne.n	8001a40 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2223      	movs	r2, #35	; 0x23
 80019a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2204      	movs	r2, #4
 80019aa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 fa7b 	bl	8001ea8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0208 	orr.w	r2, r2, #8
 80019c0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ca:	2001      	movs	r0, #1
 80019cc:	f7ff fd60 	bl	8001490 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0204 	orr.w	r2, r2, #4
 80019e6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019f0:	2001      	movs	r0, #1
 80019f2:	f7ff fd4d 	bl	8001490 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fdf3 	bl	80025ea <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a1a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	f043 0302 	orr.w	r3, r3, #2
 8001a2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a32:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2223      	movs	r2, #35	; 0x23
 8001a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e000      	b.n	8001a42 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
  }
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a5a:	2b10      	cmp	r3, #16
 8001a5c:	d17b      	bne.n	8001b56 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2223      	movs	r2, #35	; 0x23
 8001a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001a7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b35      	ldr	r3, [pc, #212]	; (8001b60 <HAL_ETH_Start_IT+0x114>)
 8001a8a:	430b      	orrs	r3, r1
 8001a8c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001aa0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f9fc 	bl	8001ea8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0208 	orr.w	r2, r2, #8
 8001abe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f7ff fce1 	bl	8001490 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0204 	orr.w	r2, r2, #4
 8001ae4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff fcce 	bl	8001490 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fd74 	bl	80025ea <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b18:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b30:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3a:	69d9      	ldr	r1, [r3, #28]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_ETH_Start_IT+0x118>)
 8001b42:	430b      	orrs	r3, r1
 8001b44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b48:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2223      	movs	r2, #35	; 0x23
 8001b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
  }
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	00020060 	.word	0x00020060
 8001b64:	0001a0c1 	.word	0x0001a0c1

08001b68 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b76:	2b23      	cmp	r3, #35	; 0x23
 8001b78:	d16e      	bne.n	8001c58 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2223      	movs	r2, #35	; 0x23
 8001b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b8a:	69d9      	ldr	r1, [r3, #28]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <HAL_ETH_Stop_IT+0xfc>)
 8001b92:	400b      	ands	r3, r1
 8001b94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b98:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bb0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	f023 0302 	bic.w	r3, r3, #2
 8001bc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bc8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0204 	bic.w	r2, r2, #4
 8001bd8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001be2:	2001      	movs	r0, #1
 8001be4:	f7ff fc54 	bl	8001490 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 fcfa 	bl	80025ea <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0208 	bic.w	r2, r2, #8
 8001c04:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f7ff fc3e 	bl	8001490 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	e00e      	b.n	8001c40 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	3212      	adds	r2, #18
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d9ed      	bls.n	8001c22 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2210      	movs	r2, #16
 8001c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e000      	b.n	8001c5a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
  }
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	fffe5f3e 	.word	0xfffe5f3e

08001c68 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d109      	bne.n	8001c8c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e045      	b.n	8001d18 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c92:	2b23      	cmp	r3, #35	; 0x23
 8001c94:	d13f      	bne.n	8001d16 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	6839      	ldr	r1, [r7, #0]
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 ff70 	bl	8002b88 <ETH_Prepare_Tx_Descriptors>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb4:	f043 0202 	orr.w	r2, r3, #2
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e02a      	b.n	8001d18 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cc2:	f3bf 8f4f 	dsb	sy
}
 8001cc6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d904      	bls.n	8001ce4 <HAL_ETH_Transmit_IT+0x7c>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	1f1a      	subs	r2, r3, #4
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00d      	beq.n	8001d12 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cfe:	461a      	mov	r2, r3
 8001d00:	2304      	movs	r3, #4
 8001d02:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2300      	movs	r3, #0
 8001d10:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e000      	b.n	8001d18 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
  }
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d109      	bne.n	8001d4c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0a8      	b.n	8001e9e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d52:	2b23      	cmp	r3, #35	; 0x23
 8001d54:	d001      	beq.n	8001d5a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e0a1      	b.n	8001e9e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	3212      	adds	r2, #18
 8001d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d70:	f1c3 0304 	rsb	r3, r3, #4
 8001d74:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d76:	e06a      	b.n	8001e4e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	699a      	ldr	r2, [r3, #24]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	69da      	ldr	r2, [r3, #28]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d103      	bne.n	8001da8 <HAL_ETH_ReadData+0x88>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d040      	beq.n	8001e2a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00c      	beq.n	8001dec <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	0c1b      	lsrs	r3, r3, #16
 8001dd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ddc:	3b04      	subs	r3, #4
 8001dde:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001e04:	461a      	mov	r2, r3
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	f004 fa3d 	bl	8006288 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	441a      	add	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2200      	movs	r2, #0
 8001e28:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d902      	bls.n	8001e3c <HAL_ETH_ReadData+0x11c>
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3b04      	subs	r3, #4
 8001e3a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	3212      	adds	r2, #18
 8001e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e46:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db06      	blt.n	8001e64 <HAL_ETH_ReadData+0x144>
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d202      	bcs.n	8001e64 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d089      	beq.n	8001d78 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	441a      	add	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f815 	bl	8001ea8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e000      	b.n	8001e9e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3720      	adds	r7, #32
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ebc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	3212      	adds	r2, #18
 8001ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ece:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001ed0:	e040      	b.n	8001f54 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d112      	bne.n	8001f00 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 f9a2 	bl	8006228 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d102      	bne.n	8001ef0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	74fb      	strb	r3, [r7, #19]
 8001eee:	e007      	b.n	8001f00 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	461a      	mov	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d026      	beq.n	8001f54 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d103      	bne.n	8001f16 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <ETH_UpdateDescriptor+0xe4>)
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	e003      	b.n	8001f1e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001f1c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f1e:	f3bf 8f5f 	dmb	sy
}
 8001f22:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	3301      	adds	r3, #1
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d902      	bls.n	8001f42 <ETH_UpdateDescriptor+0x9a>
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	3b04      	subs	r3, #4
 8001f40:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	3212      	adds	r2, #18
 8001f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4c:	617b      	str	r3, [r7, #20]
      desccount--;
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <ETH_UpdateDescriptor+0xb8>
 8001f5a:	7cfb      	ldrb	r3, [r7, #19]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1b8      	bne.n	8001ed2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d00c      	beq.n	8001f84 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f72:	461a      	mov	r2, r3
 8001f74:	2300      	movs	r3, #0
 8001f76:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001f84:	bf00      	nop
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	800045f8 	.word	0x800045f8

08001f90 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3318      	adds	r3, #24
 8001f9c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001faa:	2301      	movs	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001fae:	e03f      	b.n	8002030 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001fd8:	7bbb      	ldrb	r3, [r7, #14]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d028      	beq.n	8002030 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68d9      	ldr	r1, [r3, #12]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	db1b      	blt.n	800202c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4618      	mov	r0, r3
 8002002:	f004 f983 	bl	800630c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	3304      	adds	r3, #4
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	2200      	movs	r2, #0
 8002012:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	3301      	adds	r3, #1
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	62da      	str	r2, [r3, #44]	; 0x2c
 800202a:	e001      	b.n	8002030 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <HAL_ETH_ReleaseTxPacket+0xac>
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1b9      	bne.n	8001fb0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205e:	2b40      	cmp	r3, #64	; 0x40
 8002060:	d112      	bne.n	8002088 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	2b40      	cmp	r3, #64	; 0x40
 8002072:	d109      	bne.n	8002088 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207c:	461a      	mov	r2, r3
 800207e:	4b50      	ldr	r3, [pc, #320]	; (80021c0 <HAL_ETH_IRQHandler+0x178>)
 8002080:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f003 fc96 	bl	80059b4 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b01      	cmp	r3, #1
 8002098:	d113      	bne.n	80020c2 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d10a      	bne.n	80020c2 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b4:	461a      	mov	r2, r3
 80020b6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80020ba:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f003 fc89 	bl	80059d4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020d4:	d14c      	bne.n	8002170 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e8:	d142      	bne.n	8002170 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f0:	f043 0208 	orr.w	r2, r3, #8
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800210c:	d11a      	bne.n	8002144 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <HAL_ETH_IRQHandler+0x17c>)
 800211a:	4013      	ands	r3, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002134:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002138:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	22e0      	movs	r2, #224	; 0xe0
 800213e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002142:	e012      	b.n	800216a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	f248 6380 	movw	r3, #34432	; 0x8680
 8002152:	4013      	ands	r3, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002162:	461a      	mov	r2, r3
 8002164:	f248 6380 	movw	r3, #34432	; 0x8680
 8002168:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f003 fc42 	bl	80059f4 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b08      	cmp	r3, #8
 800217c:	d10e      	bne.n	800219c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f81c 	bl	80021cc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <HAL_ETH_IRQHandler+0x180>)
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <HAL_ETH_IRQHandler+0x180>)
 80021aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80021ae:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f815 	bl	80021e0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	00010040 	.word	0x00010040
 80021c4:	007e2000 	.word	0x007e2000
 80021c8:	40013c00 	.word	0x40013c00

080021cc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f003 031c 	and.w	r3, r3, #28
 8002210:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	02db      	lsls	r3, r3, #11
 8002216:	b29b      	uxth	r3, r3
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	019b      	lsls	r3, r3, #6
 8002222:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f023 0302 	bic.w	r3, r3, #2
 8002232:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002244:	f7ff f918 	bl	8001478 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800224a:	e00d      	b.n	8002268 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800224c:	f7ff f914 	bl	8001478 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225a:	d301      	bcc.n	8002260 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e010      	b.n	8002282 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1ec      	bne.n	800224c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	b29b      	uxth	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f003 031c 	and.w	r3, r3, #28
 80022a6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	02db      	lsls	r3, r3, #11
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	019b      	lsls	r3, r3, #6
 80022b8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	4313      	orrs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022e4:	f7ff f8c8 	bl	8001478 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022ea:	e00d      	b.n	8002308 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80022ec:	f7ff f8c4 	bl	8001478 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fa:	d301      	bcc.n	8002300 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e009      	b.n	8002314 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1ec      	bne.n	80022ec <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0d9      	b.n	80024e4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf14      	ite	ne
 800233e:	2301      	movne	r3, #1
 8002340:	2300      	moveq	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002364:	2b00      	cmp	r3, #0
 8002366:	bf0c      	ite	eq
 8002368:	2301      	moveq	r3, #1
 800236a:	2300      	movne	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf14      	ite	ne
 8002384:	2301      	movne	r3, #1
 8002386:	2300      	moveq	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800239a:	2b00      	cmp	r3, #0
 800239c:	bf0c      	ite	eq
 800239e:	2301      	moveq	r3, #1
 80023a0:	2300      	movne	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf14      	ite	ne
 80023b8:	2301      	movne	r3, #1
 80023ba:	2300      	moveq	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	bf0c      	ite	eq
 80023ee:	2301      	moveq	r3, #1
 80023f0:	2300      	movne	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241e:	2b00      	cmp	r3, #0
 8002420:	bf14      	ite	ne
 8002422:	2301      	movne	r3, #1
 8002424:	2300      	moveq	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf14      	ite	ne
 800244a:	2301      	movne	r3, #1
 800244c:	2300      	moveq	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf0c      	ite	eq
 8002480:	2301      	moveq	r3, #1
 8002482:	2300      	movne	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	0c1b      	lsrs	r3, r3, #16
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf14      	ite	ne
 80024b8:	2301      	movne	r3, #1
 80024ba:	2300      	moveq	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf14      	ite	ne
 80024d4:	2301      	movne	r3, #1
 80024d6:	2300      	moveq	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e00b      	b.n	800251c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800250a:	2b10      	cmp	r3, #16
 800250c:	d105      	bne.n	800251a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800250e:	6839      	ldr	r1, [r7, #0]
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f88f 	bl	8002634 <ETH_SetMACConfig>

    return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e000      	b.n	800251c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
  }
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f023 031c 	bic.w	r3, r3, #28
 800253a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800253c:	f001 fc36 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8002540:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <HAL_ETH_SetMDIOClockRange+0x98>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d908      	bls.n	800255c <HAL_ETH_SetMDIOClockRange+0x38>
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	4a1c      	ldr	r2, [pc, #112]	; (80025c0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d804      	bhi.n	800255c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f043 0308 	orr.w	r3, r3, #8
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	e027      	b.n	80025ac <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4a18      	ldr	r2, [pc, #96]	; (80025c0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d908      	bls.n	8002576 <HAL_ETH_SetMDIOClockRange+0x52>
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d204      	bcs.n	8002576 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f043 030c 	orr.w	r3, r3, #12
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	e01a      	b.n	80025ac <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d303      	bcc.n	8002586 <HAL_ETH_SetMDIOClockRange+0x62>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	4a11      	ldr	r2, [pc, #68]	; (80025c8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d911      	bls.n	80025aa <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	4a0f      	ldr	r2, [pc, #60]	; (80025c8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d908      	bls.n	80025a0 <HAL_ETH_SetMDIOClockRange+0x7c>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d804      	bhi.n	80025a0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	e005      	b.n	80025ac <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f043 0310 	orr.w	r3, r3, #16
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	e000      	b.n	80025ac <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80025aa:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	611a      	str	r2, [r3, #16]
}
 80025b4:	bf00      	nop
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	01312cff 	.word	0x01312cff
 80025c0:	02160ebf 	.word	0x02160ebf
 80025c4:	03938700 	.word	0x03938700
 80025c8:	05f5e0ff 	.word	0x05f5e0ff
 80025cc:	08f0d17f 	.word	0x08f0d17f

080025d0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002608:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800260c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800261a:	2001      	movs	r0, #1
 800261c:	f7fe ff38 	bl	8001490 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800262a:	6193      	str	r3, [r2, #24]
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4b51      	ldr	r3, [pc, #324]	; (8002790 <ETH_SetMACConfig+0x15c>)
 800264a:	4013      	ands	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	7c1b      	ldrb	r3, [r3, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d102      	bne.n	800265c <ETH_SetMACConfig+0x28>
 8002656:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800265a:	e000      	b.n	800265e <ETH_SetMACConfig+0x2a>
 800265c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	7c5b      	ldrb	r3, [r3, #17]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d102      	bne.n	800266c <ETH_SetMACConfig+0x38>
 8002666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800266a:	e000      	b.n	800266e <ETH_SetMACConfig+0x3a>
 800266c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800266e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002674:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	7fdb      	ldrb	r3, [r3, #31]
 800267a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800267c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002682:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	7f92      	ldrb	r2, [r2, #30]
 8002688:	2a00      	cmp	r2, #0
 800268a:	d102      	bne.n	8002692 <ETH_SetMACConfig+0x5e>
 800268c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002690:	e000      	b.n	8002694 <ETH_SetMACConfig+0x60>
 8002692:	2200      	movs	r2, #0
                        macconf->Speed |
 8002694:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	7f1b      	ldrb	r3, [r3, #28]
 800269a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800269c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	791b      	ldrb	r3, [r3, #4]
 80026a8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80026aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026b2:	2a00      	cmp	r2, #0
 80026b4:	d102      	bne.n	80026bc <ETH_SetMACConfig+0x88>
 80026b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ba:	e000      	b.n	80026be <ETH_SetMACConfig+0x8a>
 80026bc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	7bdb      	ldrb	r3, [r3, #15]
 80026c4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026c6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026d4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026d6:	4313      	orrs	r3, r2
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ee:	2001      	movs	r0, #1
 80026f0:	f7fe fece 	bl	8001490 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	f64f 7341 	movw	r3, #65345	; 0xff41
 800270a:	4013      	ands	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002712:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800271a:	2a00      	cmp	r2, #0
 800271c:	d101      	bne.n	8002722 <ETH_SetMACConfig+0xee>
 800271e:	2280      	movs	r2, #128	; 0x80
 8002720:	e000      	b.n	8002724 <ETH_SetMACConfig+0xf0>
 8002722:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002724:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800272a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002732:	2a01      	cmp	r2, #1
 8002734:	d101      	bne.n	800273a <ETH_SetMACConfig+0x106>
 8002736:	2208      	movs	r2, #8
 8002738:	e000      	b.n	800273c <ETH_SetMACConfig+0x108>
 800273a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800273c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002744:	2a01      	cmp	r2, #1
 8002746:	d101      	bne.n	800274c <ETH_SetMACConfig+0x118>
 8002748:	2204      	movs	r2, #4
 800274a:	e000      	b.n	800274e <ETH_SetMACConfig+0x11a>
 800274c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800274e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002756:	2a01      	cmp	r2, #1
 8002758:	d101      	bne.n	800275e <ETH_SetMACConfig+0x12a>
 800275a:	2202      	movs	r2, #2
 800275c:	e000      	b.n	8002760 <ETH_SetMACConfig+0x12c>
 800275e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002760:	4313      	orrs	r3, r2
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002778:	2001      	movs	r0, #1
 800277a:	f7fe fe89 	bl	8001490 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	619a      	str	r2, [r3, #24]
}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	ff20810f 	.word	0xff20810f

08002794 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <ETH_SetDMAConfig+0x110>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	7b1b      	ldrb	r3, [r3, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d102      	bne.n	80027c0 <ETH_SetDMAConfig+0x2c>
 80027ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027be:	e000      	b.n	80027c2 <ETH_SetDMAConfig+0x2e>
 80027c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	7b5b      	ldrb	r3, [r3, #13]
 80027c6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027c8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	7f52      	ldrb	r2, [r2, #29]
 80027ce:	2a00      	cmp	r2, #0
 80027d0:	d102      	bne.n	80027d8 <ETH_SetDMAConfig+0x44>
 80027d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027d6:	e000      	b.n	80027da <ETH_SetDMAConfig+0x46>
 80027d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	7b9b      	ldrb	r3, [r3, #14]
 80027e0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027e2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	7f1b      	ldrb	r3, [r3, #28]
 80027ee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80027f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	7f9b      	ldrb	r3, [r3, #30]
 80027f6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027f8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002806:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002808:	4313      	orrs	r3, r2
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002818:	461a      	mov	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800282a:	2001      	movs	r0, #1
 800282c:	f7fe fe30 	bl	8001490 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002838:	461a      	mov	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	791b      	ldrb	r3, [r3, #4]
 8002842:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002848:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800284e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002854:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800285c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800285e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002866:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800286c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002876:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800287a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002888:	2001      	movs	r0, #1
 800288a:	f7fe fe01 	bl	8001490 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002896:	461a      	mov	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6013      	str	r3, [r2, #0]
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	f8de3f23 	.word	0xf8de3f23

080028a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b0a6      	sub	sp, #152	; 0x98
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80028b0:	2301      	movs	r3, #1
 80028b2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80028bc:	2300      	movs	r3, #0
 80028be:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80028c6:	2301      	movs	r3, #1
 80028c8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80028d2:	2301      	movs	r3, #1
 80028d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028e4:	2300      	movs	r3, #0
 80028e6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80028e8:	2300      	movs	r3, #0
 80028ea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80028fe:	2300      	movs	r3, #0
 8002900:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002904:	2300      	movs	r3, #0
 8002906:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800290a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800290e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002910:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002914:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002916:	2300      	movs	r3, #0
 8002918:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800291c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002920:	4619      	mov	r1, r3
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff fe86 	bl	8002634 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002928:	2301      	movs	r3, #1
 800292a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800292c:	2301      	movs	r3, #1
 800292e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002936:	2301      	movs	r3, #1
 8002938:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800293e:	2300      	movs	r3, #0
 8002940:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002944:	2300      	movs	r3, #0
 8002946:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800294a:	2300      	movs	r3, #0
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800294e:	2301      	movs	r3, #1
 8002950:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002954:	2301      	movs	r3, #1
 8002956:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800295c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800295e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002962:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002968:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800296a:	2301      	movs	r3, #1
 800296c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002970:	2300      	movs	r3, #0
 8002972:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002974:	2300      	movs	r3, #0
 8002976:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002978:	f107 0308 	add.w	r3, r7, #8
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff ff08 	bl	8002794 <ETH_SetDMAConfig>
}
 8002984:	bf00      	nop
 8002986:	3798      	adds	r7, #152	; 0x98
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3305      	adds	r3, #5
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	3204      	adds	r2, #4
 80029a4:	7812      	ldrb	r2, [r2, #0]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <ETH_MACAddressConfig+0x68>)
 80029ae:	4413      	add	r3, r2
 80029b0:	461a      	mov	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3303      	adds	r3, #3
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	061a      	lsls	r2, r3, #24
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3302      	adds	r3, #2
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	041b      	lsls	r3, r3, #16
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3301      	adds	r3, #1
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	021b      	lsls	r3, r3, #8
 80029d0:	4313      	orrs	r3, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	7812      	ldrb	r2, [r2, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <ETH_MACAddressConfig+0x6c>)
 80029de:	4413      	add	r3, r2
 80029e0:	461a      	mov	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	6013      	str	r3, [r2, #0]
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40028040 	.word	0x40028040
 80029f8:	40028044 	.word	0x40028044

080029fc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e03e      	b.n	8002a88 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68d9      	ldr	r1, [r3, #12]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	440b      	add	r3, r1
 8002a1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2200      	movs	r2, #0
 8002a26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2200      	movs	r2, #0
 8002a32:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	3206      	adds	r2, #6
 8002a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d80c      	bhi.n	8002a6c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68d9      	ldr	r1, [r3, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	e004      	b.n	8002a76 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	461a      	mov	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	3301      	adds	r3, #1
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d9bd      	bls.n	8002a0a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa0:	611a      	str	r2, [r3, #16]
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b085      	sub	sp, #20
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	e046      	b.n	8002b4a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6919      	ldr	r1, [r3, #16]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	440b      	add	r3, r1
 8002acc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2200      	movs	r2, #0
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002af8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002b00:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	3212      	adds	r2, #18
 8002b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d80c      	bhi.n	8002b3a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6919      	ldr	r1, [r3, #16]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	461a      	mov	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60da      	str	r2, [r3, #12]
 8002b38:	e004      	b.n	8002b44 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	3301      	adds	r3, #1
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d9b5      	bls.n	8002abc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b7a:	60da      	str	r2, [r3, #12]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b08d      	sub	sp, #52	; 0x34
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3318      	adds	r3, #24
 8002b98:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bca:	d007      	beq.n	8002bdc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e0ff      	b.n	8002de0 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	3301      	adds	r3, #1
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4b7d      	ldr	r3, [pc, #500]	; (8002dec <ETH_Prepare_Tx_Descriptors+0x264>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	6852      	ldr	r2, [r2, #4]
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c62:	f3bf 8f5f 	dmb	sy
}
 8002c66:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002c74:	e082      	b.n	8002d7c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d006      	beq.n	8002c96 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	e005      	b.n	8002ca2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d902      	bls.n	8002cb4 <ETH_Prepare_Tx_Descriptors+0x12c>
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	3b04      	subs	r3, #4
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cbc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cd6:	d007      	beq.n	8002ce8 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cdc:	3304      	adds	r3, #4
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d029      	beq.n	8002d3c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cfa:	e019      	b.n	8002d30 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002cfc:	f3bf 8f5f 	dmb	sy
}
 8002d00:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d10:	3301      	adds	r3, #1
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d902      	bls.n	8002d20 <ETH_Prepare_Tx_Descriptors+0x198>
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	3b04      	subs	r3, #4
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d28:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d3e1      	bcc.n	8002cfc <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e051      	b.n	8002de0 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	3301      	adds	r3, #1
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	4b25      	ldr	r3, [pc, #148]	; (8002dec <ETH_Prepare_Tx_Descriptors+0x264>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	6852      	ldr	r2, [r2, #4]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	3301      	adds	r3, #1
 8002d68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d6a:	f3bf 8f5f 	dmb	sy
}
 8002d6e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f47f af78 	bne.w	8002c76 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d006      	beq.n	8002d9a <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	e005      	b.n	8002da6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002db6:	6979      	ldr	r1, [r7, #20]
 8002db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dba:	3304      	adds	r3, #4
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc8:	b672      	cpsid	i
}
 8002dca:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002dda:	b662      	cpsie	i
}
 8002ddc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3734      	adds	r7, #52	; 0x34
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	ffffe000 	.word	0xffffe000

08002df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	; 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	e175      	b.n	80030fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e10:	2201      	movs	r2, #1
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	f040 8164 	bne.w	80030f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d005      	beq.n	8002e46 <HAL_GPIO_Init+0x56>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d130      	bne.n	8002ea8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	2203      	movs	r2, #3
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 0201 	and.w	r2, r3, #1
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d017      	beq.n	8002ee4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d123      	bne.n	8002f38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	08da      	lsrs	r2, r3, #3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3208      	adds	r2, #8
 8002ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	220f      	movs	r2, #15
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	08da      	lsrs	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3208      	adds	r2, #8
 8002f32:	69b9      	ldr	r1, [r7, #24]
 8002f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	2203      	movs	r2, #3
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0203 	and.w	r2, r3, #3
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 80be 	beq.w	80030f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7a:	4b66      	ldr	r3, [pc, #408]	; (8003114 <HAL_GPIO_Init+0x324>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	4a65      	ldr	r2, [pc, #404]	; (8003114 <HAL_GPIO_Init+0x324>)
 8002f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f84:	6453      	str	r3, [r2, #68]	; 0x44
 8002f86:	4b63      	ldr	r3, [pc, #396]	; (8003114 <HAL_GPIO_Init+0x324>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f92:	4a61      	ldr	r2, [pc, #388]	; (8003118 <HAL_GPIO_Init+0x328>)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	089b      	lsrs	r3, r3, #2
 8002f98:	3302      	adds	r3, #2
 8002f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	220f      	movs	r2, #15
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a58      	ldr	r2, [pc, #352]	; (800311c <HAL_GPIO_Init+0x32c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d037      	beq.n	800302e <HAL_GPIO_Init+0x23e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a57      	ldr	r2, [pc, #348]	; (8003120 <HAL_GPIO_Init+0x330>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d031      	beq.n	800302a <HAL_GPIO_Init+0x23a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a56      	ldr	r2, [pc, #344]	; (8003124 <HAL_GPIO_Init+0x334>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d02b      	beq.n	8003026 <HAL_GPIO_Init+0x236>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a55      	ldr	r2, [pc, #340]	; (8003128 <HAL_GPIO_Init+0x338>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d025      	beq.n	8003022 <HAL_GPIO_Init+0x232>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a54      	ldr	r2, [pc, #336]	; (800312c <HAL_GPIO_Init+0x33c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d01f      	beq.n	800301e <HAL_GPIO_Init+0x22e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a53      	ldr	r2, [pc, #332]	; (8003130 <HAL_GPIO_Init+0x340>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d019      	beq.n	800301a <HAL_GPIO_Init+0x22a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a52      	ldr	r2, [pc, #328]	; (8003134 <HAL_GPIO_Init+0x344>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d013      	beq.n	8003016 <HAL_GPIO_Init+0x226>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a51      	ldr	r2, [pc, #324]	; (8003138 <HAL_GPIO_Init+0x348>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00d      	beq.n	8003012 <HAL_GPIO_Init+0x222>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a50      	ldr	r2, [pc, #320]	; (800313c <HAL_GPIO_Init+0x34c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d007      	beq.n	800300e <HAL_GPIO_Init+0x21e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a4f      	ldr	r2, [pc, #316]	; (8003140 <HAL_GPIO_Init+0x350>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d101      	bne.n	800300a <HAL_GPIO_Init+0x21a>
 8003006:	2309      	movs	r3, #9
 8003008:	e012      	b.n	8003030 <HAL_GPIO_Init+0x240>
 800300a:	230a      	movs	r3, #10
 800300c:	e010      	b.n	8003030 <HAL_GPIO_Init+0x240>
 800300e:	2308      	movs	r3, #8
 8003010:	e00e      	b.n	8003030 <HAL_GPIO_Init+0x240>
 8003012:	2307      	movs	r3, #7
 8003014:	e00c      	b.n	8003030 <HAL_GPIO_Init+0x240>
 8003016:	2306      	movs	r3, #6
 8003018:	e00a      	b.n	8003030 <HAL_GPIO_Init+0x240>
 800301a:	2305      	movs	r3, #5
 800301c:	e008      	b.n	8003030 <HAL_GPIO_Init+0x240>
 800301e:	2304      	movs	r3, #4
 8003020:	e006      	b.n	8003030 <HAL_GPIO_Init+0x240>
 8003022:	2303      	movs	r3, #3
 8003024:	e004      	b.n	8003030 <HAL_GPIO_Init+0x240>
 8003026:	2302      	movs	r3, #2
 8003028:	e002      	b.n	8003030 <HAL_GPIO_Init+0x240>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_GPIO_Init+0x240>
 800302e:	2300      	movs	r3, #0
 8003030:	69fa      	ldr	r2, [r7, #28]
 8003032:	f002 0203 	and.w	r2, r2, #3
 8003036:	0092      	lsls	r2, r2, #2
 8003038:	4093      	lsls	r3, r2
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003040:	4935      	ldr	r1, [pc, #212]	; (8003118 <HAL_GPIO_Init+0x328>)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	089b      	lsrs	r3, r3, #2
 8003046:	3302      	adds	r3, #2
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800304e:	4b3d      	ldr	r3, [pc, #244]	; (8003144 <HAL_GPIO_Init+0x354>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003072:	4a34      	ldr	r2, [pc, #208]	; (8003144 <HAL_GPIO_Init+0x354>)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003078:	4b32      	ldr	r3, [pc, #200]	; (8003144 <HAL_GPIO_Init+0x354>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800309c:	4a29      	ldr	r2, [pc, #164]	; (8003144 <HAL_GPIO_Init+0x354>)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030a2:	4b28      	ldr	r3, [pc, #160]	; (8003144 <HAL_GPIO_Init+0x354>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030c6:	4a1f      	ldr	r2, [pc, #124]	; (8003144 <HAL_GPIO_Init+0x354>)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030cc:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <HAL_GPIO_Init+0x354>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030f0:	4a14      	ldr	r2, [pc, #80]	; (8003144 <HAL_GPIO_Init+0x354>)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3301      	adds	r3, #1
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2b0f      	cmp	r3, #15
 8003100:	f67f ae86 	bls.w	8002e10 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	3724      	adds	r7, #36	; 0x24
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800
 8003118:	40013800 	.word	0x40013800
 800311c:	40020000 	.word	0x40020000
 8003120:	40020400 	.word	0x40020400
 8003124:	40020800 	.word	0x40020800
 8003128:	40020c00 	.word	0x40020c00
 800312c:	40021000 	.word	0x40021000
 8003130:	40021400 	.word	0x40021400
 8003134:	40021800 	.word	0x40021800
 8003138:	40021c00 	.word	0x40021c00
 800313c:	40022000 	.word	0x40022000
 8003140:	40022400 	.word	0x40022400
 8003144:	40013c00 	.word	0x40013c00

08003148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	807b      	strh	r3, [r7, #2]
 8003154:	4613      	mov	r3, r2
 8003156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003158:	787b      	ldrb	r3, [r7, #1]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800315e:	887a      	ldrh	r2, [r7, #2]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003164:	e003      	b.n	800316e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	041a      	lsls	r2, r3, #16
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	619a      	str	r2, [r3, #24]
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e07f      	b.n	800328e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fd fcf0 	bl	8000b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2224      	movs	r2, #36	; 0x24
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d107      	bne.n	80031f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	e006      	b.n	8003204 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003202:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d104      	bne.n	8003216 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003214:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <HAL_I2C_Init+0x11c>)
 8003222:	430b      	orrs	r3, r1
 8003224:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003234:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69d9      	ldr	r1, [r3, #28]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1a      	ldr	r2, [r3, #32]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	02008000 	.word	0x02008000

0800329c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d138      	bne.n	8003324 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032bc:	2302      	movs	r3, #2
 80032be:	e032      	b.n	8003326 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	; 0x24
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6819      	ldr	r1, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	e000      	b.n	8003326 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003324:	2302      	movs	r3, #2
  }
}
 8003326:	4618      	mov	r0, r3
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003332:	b480      	push	{r7}
 8003334:	b085      	sub	sp, #20
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b20      	cmp	r3, #32
 8003346:	d139      	bne.n	80033bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003352:	2302      	movs	r3, #2
 8003354:	e033      	b.n	80033be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2224      	movs	r2, #36	; 0x24
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0201 	bic.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003384:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e000      	b.n	80033be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033bc:	2302      	movs	r3, #2
  }
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	4b23      	ldr	r3, [pc, #140]	; (8003464 <HAL_PWREx_EnableOverDrive+0x98>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	4a22      	ldr	r2, [pc, #136]	; (8003464 <HAL_PWREx_EnableOverDrive+0x98>)
 80033dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e0:	6413      	str	r3, [r2, #64]	; 0x40
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_PWREx_EnableOverDrive+0x98>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033ee:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033fa:	f7fe f83d 	bl	8001478 <HAL_GetTick>
 80033fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003400:	e009      	b.n	8003416 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003402:	f7fe f839 	bl	8001478 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003410:	d901      	bls.n	8003416 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e022      	b.n	800345c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003416:	4b14      	ldr	r3, [pc, #80]	; (8003468 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003422:	d1ee      	bne.n	8003402 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003424:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a0f      	ldr	r2, [pc, #60]	; (8003468 <HAL_PWREx_EnableOverDrive+0x9c>)
 800342a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800342e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003430:	f7fe f822 	bl	8001478 <HAL_GetTick>
 8003434:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003436:	e009      	b.n	800344c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003438:	f7fe f81e 	bl	8001478 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003446:	d901      	bls.n	800344c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e007      	b.n	800345c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800344c:	4b06      	ldr	r3, [pc, #24]	; (8003468 <HAL_PWREx_EnableOverDrive+0x9c>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003458:	d1ee      	bne.n	8003438 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40023800 	.word	0x40023800
 8003468:	40007000 	.word	0x40007000

0800346c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003474:	2300      	movs	r3, #0
 8003476:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e29b      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 8087 	beq.w	800359e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003490:	4b96      	ldr	r3, [pc, #600]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 030c 	and.w	r3, r3, #12
 8003498:	2b04      	cmp	r3, #4
 800349a:	d00c      	beq.n	80034b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800349c:	4b93      	ldr	r3, [pc, #588]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 030c 	and.w	r3, r3, #12
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d112      	bne.n	80034ce <HAL_RCC_OscConfig+0x62>
 80034a8:	4b90      	ldr	r3, [pc, #576]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034b4:	d10b      	bne.n	80034ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b6:	4b8d      	ldr	r3, [pc, #564]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d06c      	beq.n	800359c <HAL_RCC_OscConfig+0x130>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d168      	bne.n	800359c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e275      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_OscConfig+0x7a>
 80034d8:	4b84      	ldr	r3, [pc, #528]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a83      	ldr	r2, [pc, #524]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80034de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	e02e      	b.n	8003544 <HAL_RCC_OscConfig+0xd8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x9c>
 80034ee:	4b7f      	ldr	r3, [pc, #508]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a7e      	ldr	r2, [pc, #504]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80034f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4b7c      	ldr	r3, [pc, #496]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a7b      	ldr	r2, [pc, #492]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003500:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	e01d      	b.n	8003544 <HAL_RCC_OscConfig+0xd8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003510:	d10c      	bne.n	800352c <HAL_RCC_OscConfig+0xc0>
 8003512:	4b76      	ldr	r3, [pc, #472]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a75      	ldr	r2, [pc, #468]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	4b73      	ldr	r3, [pc, #460]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a72      	ldr	r2, [pc, #456]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	e00b      	b.n	8003544 <HAL_RCC_OscConfig+0xd8>
 800352c:	4b6f      	ldr	r3, [pc, #444]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a6e      	ldr	r2, [pc, #440]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	4b6c      	ldr	r3, [pc, #432]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a6b      	ldr	r2, [pc, #428]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 800353e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d013      	beq.n	8003574 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fd ff94 	bl	8001478 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003554:	f7fd ff90 	bl	8001478 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	; 0x64
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e229      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003566:	4b61      	ldr	r3, [pc, #388]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0xe8>
 8003572:	e014      	b.n	800359e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fd ff80 	bl	8001478 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800357c:	f7fd ff7c 	bl	8001478 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	; 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e215      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358e:	4b57      	ldr	r3, [pc, #348]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x110>
 800359a:	e000      	b.n	800359e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d069      	beq.n	800367e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035aa:	4b50      	ldr	r3, [pc, #320]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00b      	beq.n	80035ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035b6:	4b4d      	ldr	r3, [pc, #308]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d11c      	bne.n	80035fc <HAL_RCC_OscConfig+0x190>
 80035c2:	4b4a      	ldr	r3, [pc, #296]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d116      	bne.n	80035fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ce:	4b47      	ldr	r3, [pc, #284]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d005      	beq.n	80035e6 <HAL_RCC_OscConfig+0x17a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d001      	beq.n	80035e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e1e9      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e6:	4b41      	ldr	r3, [pc, #260]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	493d      	ldr	r1, [pc, #244]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fa:	e040      	b.n	800367e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d023      	beq.n	800364c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003604:	4b39      	ldr	r3, [pc, #228]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a38      	ldr	r2, [pc, #224]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fd ff32 	bl	8001478 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003618:	f7fd ff2e 	bl	8001478 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e1c7      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362a:	4b30      	ldr	r3, [pc, #192]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003636:	4b2d      	ldr	r3, [pc, #180]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4929      	ldr	r1, [pc, #164]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]
 800364a:	e018      	b.n	800367e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364c:	4b27      	ldr	r3, [pc, #156]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a26      	ldr	r2, [pc, #152]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003652:	f023 0301 	bic.w	r3, r3, #1
 8003656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fd ff0e 	bl	8001478 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003660:	f7fd ff0a 	bl	8001478 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e1a3      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003672:	4b1e      	ldr	r3, [pc, #120]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d038      	beq.n	80036fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d019      	beq.n	80036c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003692:	4b16      	ldr	r3, [pc, #88]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003696:	4a15      	ldr	r2, [pc, #84]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369e:	f7fd feeb 	bl	8001478 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a6:	f7fd fee7 	bl	8001478 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e180      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80036ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x23a>
 80036c4:	e01a      	b.n	80036fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c6:	4b09      	ldr	r3, [pc, #36]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80036c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ca:	4a08      	ldr	r2, [pc, #32]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d2:	f7fd fed1 	bl	8001478 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036da:	f7fd fecd 	bl	8001478 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d903      	bls.n	80036f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e166      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
 80036ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f0:	4b92      	ldr	r3, [pc, #584]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80036f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1ee      	bne.n	80036da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80a4 	beq.w	8003852 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800370a:	4b8c      	ldr	r3, [pc, #560]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10d      	bne.n	8003732 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003716:	4b89      	ldr	r3, [pc, #548]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	4a88      	ldr	r2, [pc, #544]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800371c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003720:	6413      	str	r3, [r2, #64]	; 0x40
 8003722:	4b86      	ldr	r3, [pc, #536]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372e:	2301      	movs	r3, #1
 8003730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003732:	4b83      	ldr	r3, [pc, #524]	; (8003940 <HAL_RCC_OscConfig+0x4d4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d118      	bne.n	8003770 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800373e:	4b80      	ldr	r3, [pc, #512]	; (8003940 <HAL_RCC_OscConfig+0x4d4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a7f      	ldr	r2, [pc, #508]	; (8003940 <HAL_RCC_OscConfig+0x4d4>)
 8003744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374a:	f7fd fe95 	bl	8001478 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003752:	f7fd fe91 	bl	8001478 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b64      	cmp	r3, #100	; 0x64
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e12a      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003764:	4b76      	ldr	r3, [pc, #472]	; (8003940 <HAL_RCC_OscConfig+0x4d4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f0      	beq.n	8003752 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d106      	bne.n	8003786 <HAL_RCC_OscConfig+0x31a>
 8003778:	4b70      	ldr	r3, [pc, #448]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	4a6f      	ldr	r2, [pc, #444]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	6713      	str	r3, [r2, #112]	; 0x70
 8003784:	e02d      	b.n	80037e2 <HAL_RCC_OscConfig+0x376>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x33c>
 800378e:	4b6b      	ldr	r3, [pc, #428]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	4a6a      	ldr	r2, [pc, #424]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003794:	f023 0301 	bic.w	r3, r3, #1
 8003798:	6713      	str	r3, [r2, #112]	; 0x70
 800379a:	4b68      	ldr	r3, [pc, #416]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	4a67      	ldr	r2, [pc, #412]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80037a0:	f023 0304 	bic.w	r3, r3, #4
 80037a4:	6713      	str	r3, [r2, #112]	; 0x70
 80037a6:	e01c      	b.n	80037e2 <HAL_RCC_OscConfig+0x376>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b05      	cmp	r3, #5
 80037ae:	d10c      	bne.n	80037ca <HAL_RCC_OscConfig+0x35e>
 80037b0:	4b62      	ldr	r3, [pc, #392]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	4a61      	ldr	r2, [pc, #388]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80037b6:	f043 0304 	orr.w	r3, r3, #4
 80037ba:	6713      	str	r3, [r2, #112]	; 0x70
 80037bc:	4b5f      	ldr	r3, [pc, #380]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	4a5e      	ldr	r2, [pc, #376]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6713      	str	r3, [r2, #112]	; 0x70
 80037c8:	e00b      	b.n	80037e2 <HAL_RCC_OscConfig+0x376>
 80037ca:	4b5c      	ldr	r3, [pc, #368]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	4a5b      	ldr	r2, [pc, #364]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	6713      	str	r3, [r2, #112]	; 0x70
 80037d6:	4b59      	ldr	r3, [pc, #356]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	4a58      	ldr	r2, [pc, #352]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80037dc:	f023 0304 	bic.w	r3, r3, #4
 80037e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d015      	beq.n	8003816 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ea:	f7fd fe45 	bl	8001478 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f0:	e00a      	b.n	8003808 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f2:	f7fd fe41 	bl	8001478 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003800:	4293      	cmp	r3, r2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e0d8      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003808:	4b4c      	ldr	r3, [pc, #304]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0ee      	beq.n	80037f2 <HAL_RCC_OscConfig+0x386>
 8003814:	e014      	b.n	8003840 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003816:	f7fd fe2f 	bl	8001478 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381c:	e00a      	b.n	8003834 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7fd fe2b 	bl	8001478 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	; 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e0c2      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003834:	4b41      	ldr	r3, [pc, #260]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1ee      	bne.n	800381e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003840:	7dfb      	ldrb	r3, [r7, #23]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d105      	bne.n	8003852 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003846:	4b3d      	ldr	r3, [pc, #244]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	4a3c      	ldr	r2, [pc, #240]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800384c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003850:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80ae 	beq.w	80039b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800385c:	4b37      	ldr	r3, [pc, #220]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b08      	cmp	r3, #8
 8003866:	d06d      	beq.n	8003944 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d14b      	bne.n	8003908 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003870:	4b32      	ldr	r3, [pc, #200]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a31      	ldr	r2, [pc, #196]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800387a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fd fdfc 	bl	8001478 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003884:	f7fd fdf8 	bl	8001478 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e091      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003896:	4b29      	ldr	r3, [pc, #164]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	019b      	lsls	r3, r3, #6
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	085b      	lsrs	r3, r3, #1
 80038ba:	3b01      	subs	r3, #1
 80038bc:	041b      	lsls	r3, r3, #16
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	061b      	lsls	r3, r3, #24
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	071b      	lsls	r3, r3, #28
 80038ce:	491b      	ldr	r1, [pc, #108]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d4:	4b19      	ldr	r3, [pc, #100]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a18      	ldr	r2, [pc, #96]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80038da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fd fdca 	bl	8001478 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e8:	f7fd fdc6 	bl	8001478 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e05f      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fa:	4b10      	ldr	r3, [pc, #64]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCC_OscConfig+0x47c>
 8003906:	e057      	b.n	80039b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a0b      	ldr	r2, [pc, #44]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800390e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fd fdb0 	bl	8001478 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391c:	f7fd fdac 	bl	8001478 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e045      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	4b03      	ldr	r3, [pc, #12]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x4b0>
 800393a:	e03d      	b.n	80039b8 <HAL_RCC_OscConfig+0x54c>
 800393c:	40023800 	.word	0x40023800
 8003940:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003944:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <HAL_RCC_OscConfig+0x558>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d030      	beq.n	80039b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395c:	429a      	cmp	r2, r3
 800395e:	d129      	bne.n	80039b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396a:	429a      	cmp	r2, r3
 800396c:	d122      	bne.n	80039b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003974:	4013      	ands	r3, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800397a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800397c:	4293      	cmp	r3, r2
 800397e:	d119      	bne.n	80039b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	085b      	lsrs	r3, r3, #1
 800398c:	3b01      	subs	r3, #1
 800398e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d10f      	bne.n	80039b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d107      	bne.n	80039b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40023800 	.word	0x40023800

080039c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0d0      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039e0:	4b6a      	ldr	r3, [pc, #424]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d910      	bls.n	8003a10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b67      	ldr	r3, [pc, #412]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f023 020f 	bic.w	r2, r3, #15
 80039f6:	4965      	ldr	r1, [pc, #404]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b63      	ldr	r3, [pc, #396]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0b8      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d020      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a28:	4b59      	ldr	r3, [pc, #356]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a58      	ldr	r2, [pc, #352]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a40:	4b53      	ldr	r3, [pc, #332]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a52      	ldr	r2, [pc, #328]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a4c:	4b50      	ldr	r3, [pc, #320]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	494d      	ldr	r1, [pc, #308]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d040      	beq.n	8003aec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b47      	ldr	r3, [pc, #284]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d115      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e07f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8a:	4b41      	ldr	r3, [pc, #260]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e073      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9a:	4b3d      	ldr	r3, [pc, #244]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e06b      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aaa:	4b39      	ldr	r3, [pc, #228]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f023 0203 	bic.w	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4936      	ldr	r1, [pc, #216]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003abc:	f7fd fcdc 	bl	8001478 <HAL_GetTick>
 8003ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac4:	f7fd fcd8 	bl	8001478 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e053      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	4b2d      	ldr	r3, [pc, #180]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 020c 	and.w	r2, r3, #12
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d1eb      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aec:	4b27      	ldr	r3, [pc, #156]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d210      	bcs.n	8003b1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afa:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 020f 	bic.w	r2, r3, #15
 8003b02:	4922      	ldr	r1, [pc, #136]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e032      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b28:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4916      	ldr	r1, [pc, #88]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b46:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	490e      	ldr	r1, [pc, #56]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b5a:	f000 f821 	bl	8003ba0 <HAL_RCC_GetSysClockFreq>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	490a      	ldr	r1, [pc, #40]	; (8003b94 <HAL_RCC_ClockConfig+0x1cc>)
 8003b6c:	5ccb      	ldrb	r3, [r1, r3]
 8003b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b72:	4a09      	ldr	r2, [pc, #36]	; (8003b98 <HAL_RCC_ClockConfig+0x1d0>)
 8003b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_RCC_ClockConfig+0x1d4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd f948 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023c00 	.word	0x40023c00
 8003b90:	40023800 	.word	0x40023800
 8003b94:	0801801c 	.word	0x0801801c
 8003b98:	20000000 	.word	0x20000000
 8003b9c:	20000004 	.word	0x20000004

08003ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba4:	b094      	sub	sp, #80	; 0x50
 8003ba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	647b      	str	r3, [r7, #68]	; 0x44
 8003bac:	2300      	movs	r3, #0
 8003bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb8:	4b79      	ldr	r3, [pc, #484]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d00d      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0x40>
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	f200 80e1 	bhi.w	8003d8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d003      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0x3a>
 8003bd2:	e0db      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd4:	4b73      	ldr	r3, [pc, #460]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd8:	e0db      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bda:	4b73      	ldr	r3, [pc, #460]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bde:	e0d8      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be0:	4b6f      	ldr	r3, [pc, #444]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003bea:	4b6d      	ldr	r3, [pc, #436]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d063      	beq.n	8003cbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf6:	4b6a      	ldr	r3, [pc, #424]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	099b      	lsrs	r3, r3, #6
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c12:	4622      	mov	r2, r4
 8003c14:	462b      	mov	r3, r5
 8003c16:	f04f 0000 	mov.w	r0, #0
 8003c1a:	f04f 0100 	mov.w	r1, #0
 8003c1e:	0159      	lsls	r1, r3, #5
 8003c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c24:	0150      	lsls	r0, r2, #5
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	1a51      	subs	r1, r2, r1
 8003c2e:	6139      	str	r1, [r7, #16]
 8003c30:	4629      	mov	r1, r5
 8003c32:	eb63 0301 	sbc.w	r3, r3, r1
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c44:	4659      	mov	r1, fp
 8003c46:	018b      	lsls	r3, r1, #6
 8003c48:	4651      	mov	r1, sl
 8003c4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c4e:	4651      	mov	r1, sl
 8003c50:	018a      	lsls	r2, r1, #6
 8003c52:	4651      	mov	r1, sl
 8003c54:	ebb2 0801 	subs.w	r8, r2, r1
 8003c58:	4659      	mov	r1, fp
 8003c5a:	eb63 0901 	sbc.w	r9, r3, r1
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c72:	4690      	mov	r8, r2
 8003c74:	4699      	mov	r9, r3
 8003c76:	4623      	mov	r3, r4
 8003c78:	eb18 0303 	adds.w	r3, r8, r3
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	462b      	mov	r3, r5
 8003c80:	eb49 0303 	adc.w	r3, r9, r3
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c92:	4629      	mov	r1, r5
 8003c94:	024b      	lsls	r3, r1, #9
 8003c96:	4621      	mov	r1, r4
 8003c98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	024a      	lsls	r2, r1, #9
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cb0:	f7fc fb16 	bl	80002e0 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cbc:	e058      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cbe:	4b38      	ldr	r3, [pc, #224]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	099b      	lsrs	r3, r3, #6
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	4611      	mov	r1, r2
 8003cca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cce:	623b      	str	r3, [r7, #32]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cd8:	4642      	mov	r2, r8
 8003cda:	464b      	mov	r3, r9
 8003cdc:	f04f 0000 	mov.w	r0, #0
 8003ce0:	f04f 0100 	mov.w	r1, #0
 8003ce4:	0159      	lsls	r1, r3, #5
 8003ce6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cea:	0150      	lsls	r0, r2, #5
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d10:	ebb2 040a 	subs.w	r4, r2, sl
 8003d14:	eb63 050b 	sbc.w	r5, r3, fp
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	00eb      	lsls	r3, r5, #3
 8003d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d26:	00e2      	lsls	r2, r4, #3
 8003d28:	4614      	mov	r4, r2
 8003d2a:	461d      	mov	r5, r3
 8003d2c:	4643      	mov	r3, r8
 8003d2e:	18e3      	adds	r3, r4, r3
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	464b      	mov	r3, r9
 8003d34:	eb45 0303 	adc.w	r3, r5, r3
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d46:	4629      	mov	r1, r5
 8003d48:	028b      	lsls	r3, r1, #10
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d50:	4621      	mov	r1, r4
 8003d52:	028a      	lsls	r2, r1, #10
 8003d54:	4610      	mov	r0, r2
 8003d56:	4619      	mov	r1, r3
 8003d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	61fa      	str	r2, [r7, #28]
 8003d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d64:	f7fc fabc 	bl	80002e0 <__aeabi_uldivmod>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003d80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d8a:	e002      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3750      	adds	r7, #80	; 0x50
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800
 8003da4:	00f42400 	.word	0x00f42400
 8003da8:	007a1200 	.word	0x007a1200

08003dac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db0:	4b03      	ldr	r3, [pc, #12]	; (8003dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003db2:	681b      	ldr	r3, [r3, #0]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20000000 	.word	0x20000000

08003dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dc8:	f7ff fff0 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	0a9b      	lsrs	r3, r3, #10
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	4903      	ldr	r1, [pc, #12]	; (8003de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dda:	5ccb      	ldrb	r3, [r1, r3]
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	0801802c 	.word	0x0801802c

08003dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003df0:	f7ff ffdc 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	0b5b      	lsrs	r3, r3, #13
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	; (8003e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	0801802c 	.word	0x0801802c

08003e14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	220f      	movs	r2, #15
 8003e22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e24:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 0203 	and.w	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e30:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e48:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	08db      	lsrs	r3, r3, #3
 8003e4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e56:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <HAL_RCC_GetClockConfig+0x60>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 020f 	and.w	r2, r3, #15
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	601a      	str	r2, [r3, #0]
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800
 8003e74:	40023c00 	.word	0x40023c00

08003e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d012      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ea0:	4b69      	ldr	r3, [pc, #420]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4a68      	ldr	r2, [pc, #416]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003eaa:	6093      	str	r3, [r2, #8]
 8003eac:	4b66      	ldr	r3, [pc, #408]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb4:	4964      	ldr	r1, [pc, #400]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d017      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ed2:	4b5d      	ldr	r3, [pc, #372]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee0:	4959      	ldr	r1, [pc, #356]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003efe:	2301      	movs	r3, #1
 8003f00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d017      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f0e:	4b4e      	ldr	r3, [pc, #312]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	494a      	ldr	r1, [pc, #296]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 808b 	beq.w	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f5c:	4b3a      	ldr	r3, [pc, #232]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	4a39      	ldr	r2, [pc, #228]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f66:	6413      	str	r3, [r2, #64]	; 0x40
 8003f68:	4b37      	ldr	r3, [pc, #220]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f74:	4b35      	ldr	r3, [pc, #212]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a34      	ldr	r2, [pc, #208]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f80:	f7fd fa7a 	bl	8001478 <HAL_GetTick>
 8003f84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f88:	f7fd fa76 	bl	8001478 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	; 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e38f      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f9a:	4b2c      	ldr	r3, [pc, #176]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fa6:	4b28      	ldr	r3, [pc, #160]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d035      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d02e      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fc4:	4b20      	ldr	r3, [pc, #128]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fcc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fce:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	4a1d      	ldr	r2, [pc, #116]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fda:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	4a1a      	ldr	r2, [pc, #104]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003fe6:	4a18      	ldr	r2, [pc, #96]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fec:	4b16      	ldr	r3, [pc, #88]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d114      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fd fa3e 	bl	8001478 <HAL_GetTick>
 8003ffc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffe:	e00a      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004000:	f7fd fa3a 	bl	8001478 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f241 3288 	movw	r2, #5000	; 0x1388
 800400e:	4293      	cmp	r3, r2
 8004010:	d901      	bls.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e351      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004016:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0ee      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800402e:	d111      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800403c:	4b04      	ldr	r3, [pc, #16]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800403e:	400b      	ands	r3, r1
 8004040:	4901      	ldr	r1, [pc, #4]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004042:	4313      	orrs	r3, r2
 8004044:	608b      	str	r3, [r1, #8]
 8004046:	e00b      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004048:	40023800 	.word	0x40023800
 800404c:	40007000 	.word	0x40007000
 8004050:	0ffffcff 	.word	0x0ffffcff
 8004054:	4bac      	ldr	r3, [pc, #688]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4aab      	ldr	r2, [pc, #684]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800405e:	6093      	str	r3, [r2, #8]
 8004060:	4ba9      	ldr	r3, [pc, #676]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004062:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406c:	49a6      	ldr	r1, [pc, #664]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406e:	4313      	orrs	r3, r2
 8004070:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	2b00      	cmp	r3, #0
 800407c:	d010      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800407e:	4ba2      	ldr	r3, [pc, #648]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004084:	4aa0      	ldr	r2, [pc, #640]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800408a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800408e:	4b9e      	ldr	r3, [pc, #632]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004090:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	499b      	ldr	r1, [pc, #620]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040ac:	4b96      	ldr	r3, [pc, #600]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ba:	4993      	ldr	r1, [pc, #588]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040ce:	4b8e      	ldr	r3, [pc, #568]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040dc:	498a      	ldr	r1, [pc, #552]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040f0:	4b85      	ldr	r3, [pc, #532]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040fe:	4982      	ldr	r1, [pc, #520]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004112:	4b7d      	ldr	r3, [pc, #500]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004118:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004120:	4979      	ldr	r1, [pc, #484]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004134:	4b74      	ldr	r3, [pc, #464]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f023 0203 	bic.w	r2, r3, #3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	4971      	ldr	r1, [pc, #452]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004156:	4b6c      	ldr	r3, [pc, #432]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415c:	f023 020c 	bic.w	r2, r3, #12
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004164:	4968      	ldr	r1, [pc, #416]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004178:	4b63      	ldr	r3, [pc, #396]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004186:	4960      	ldr	r1, [pc, #384]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800419a:	4b5b      	ldr	r3, [pc, #364]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a8:	4957      	ldr	r1, [pc, #348]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041bc:	4b52      	ldr	r3, [pc, #328]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ca:	494f      	ldr	r1, [pc, #316]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80041de:	4b4a      	ldr	r3, [pc, #296]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ec:	4946      	ldr	r1, [pc, #280]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004200:	4b41      	ldr	r3, [pc, #260]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420e:	493e      	ldr	r1, [pc, #248]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004222:	4b39      	ldr	r3, [pc, #228]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004230:	4935      	ldr	r1, [pc, #212]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004244:	4b30      	ldr	r3, [pc, #192]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004252:	492d      	ldr	r1, [pc, #180]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d011      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004266:	4b28      	ldr	r3, [pc, #160]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004274:	4924      	ldr	r1, [pc, #144]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004280:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004284:	d101      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004286:	2301      	movs	r3, #1
 8004288:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004296:	2301      	movs	r3, #1
 8004298:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042a6:	4b18      	ldr	r3, [pc, #96]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b4:	4914      	ldr	r1, [pc, #80]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00b      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042c8:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042d8:	490b      	ldr	r1, [pc, #44]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00f      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042fc:	4902      	ldr	r1, [pc, #8]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004304:	e002      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004306:	bf00      	nop
 8004308:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00b      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004318:	4b8a      	ldr	r3, [pc, #552]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800431a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800431e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004328:	4986      	ldr	r1, [pc, #536]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00b      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800433c:	4b81      	ldr	r3, [pc, #516]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800433e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004342:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800434c:	497d      	ldr	r1, [pc, #500]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d006      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 80d6 	beq.w	8004514 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004368:	4b76      	ldr	r3, [pc, #472]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a75      	ldr	r2, [pc, #468]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004374:	f7fd f880 	bl	8001478 <HAL_GetTick>
 8004378:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800437c:	f7fd f87c 	bl	8001478 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e195      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800438e:	4b6d      	ldr	r3, [pc, #436]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d021      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x572>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d11d      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043ae:	4b65      	ldr	r3, [pc, #404]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043bc:	4b61      	ldr	r3, [pc, #388]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c2:	0e1b      	lsrs	r3, r3, #24
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	019a      	lsls	r2, r3, #6
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	431a      	orrs	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	061b      	lsls	r3, r3, #24
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	071b      	lsls	r3, r3, #28
 80043e2:	4958      	ldr	r1, [pc, #352]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d004      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004408:	2b00      	cmp	r3, #0
 800440a:	d02e      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004414:	d129      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004416:	4b4b      	ldr	r3, [pc, #300]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800441c:	0c1b      	lsrs	r3, r3, #16
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004424:	4b47      	ldr	r3, [pc, #284]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442a:	0f1b      	lsrs	r3, r3, #28
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	019a      	lsls	r2, r3, #6
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	041b      	lsls	r3, r3, #16
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	061b      	lsls	r3, r3, #24
 8004444:	431a      	orrs	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	071b      	lsls	r3, r3, #28
 800444a:	493e      	ldr	r1, [pc, #248]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004452:	4b3c      	ldr	r3, [pc, #240]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004458:	f023 021f 	bic.w	r2, r3, #31
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	3b01      	subs	r3, #1
 8004462:	4938      	ldr	r1, [pc, #224]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d01d      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004476:	4b33      	ldr	r3, [pc, #204]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447c:	0e1b      	lsrs	r3, r3, #24
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004484:	4b2f      	ldr	r3, [pc, #188]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448a:	0f1b      	lsrs	r3, r3, #28
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	019a      	lsls	r2, r3, #6
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	041b      	lsls	r3, r3, #16
 800449e:	431a      	orrs	r2, r3
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	061b      	lsls	r3, r3, #24
 80044a4:	431a      	orrs	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	071b      	lsls	r3, r3, #28
 80044aa:	4926      	ldr	r1, [pc, #152]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d011      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	019a      	lsls	r2, r3, #6
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	041b      	lsls	r3, r3, #16
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	061b      	lsls	r3, r3, #24
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	071b      	lsls	r3, r3, #28
 80044da:	491a      	ldr	r1, [pc, #104]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044e2:	4b18      	ldr	r3, [pc, #96]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a17      	ldr	r2, [pc, #92]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ee:	f7fc ffc3 	bl	8001478 <HAL_GetTick>
 80044f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044f4:	e008      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044f6:	f7fc ffbf 	bl	8001478 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b64      	cmp	r3, #100	; 0x64
 8004502:	d901      	bls.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e0d8      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004508:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0f0      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b01      	cmp	r3, #1
 8004518:	f040 80ce 	bne.w	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a08      	ldr	r2, [pc, #32]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004526:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004528:	f7fc ffa6 	bl	8001478 <HAL_GetTick>
 800452c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800452e:	e00b      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004530:	f7fc ffa2 	bl	8001478 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b64      	cmp	r3, #100	; 0x64
 800453c:	d904      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e0bb      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004548:	4b5e      	ldr	r3, [pc, #376]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004554:	d0ec      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004572:	2b00      	cmp	r3, #0
 8004574:	d02e      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d12a      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800457e:	4b51      	ldr	r3, [pc, #324]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004584:	0c1b      	lsrs	r3, r3, #16
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800458c:	4b4d      	ldr	r3, [pc, #308]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004592:	0f1b      	lsrs	r3, r3, #28
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	019a      	lsls	r2, r3, #6
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	041b      	lsls	r3, r3, #16
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	061b      	lsls	r3, r3, #24
 80045ac:	431a      	orrs	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	071b      	lsls	r3, r3, #28
 80045b2:	4944      	ldr	r1, [pc, #272]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045ba:	4b42      	ldr	r3, [pc, #264]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c8:	3b01      	subs	r3, #1
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	493d      	ldr	r1, [pc, #244]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d022      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045e8:	d11d      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045ea:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f0:	0e1b      	lsrs	r3, r3, #24
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045f8:	4b32      	ldr	r3, [pc, #200]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fe:	0f1b      	lsrs	r3, r3, #28
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	019a      	lsls	r2, r3, #6
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	041b      	lsls	r3, r3, #16
 8004612:	431a      	orrs	r2, r3
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	061b      	lsls	r3, r3, #24
 8004618:	431a      	orrs	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	071b      	lsls	r3, r3, #28
 800461e:	4929      	ldr	r1, [pc, #164]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d028      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004632:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	0e1b      	lsrs	r3, r3, #24
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004640:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	0c1b      	lsrs	r3, r3, #16
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	019a      	lsls	r2, r3, #6
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	041b      	lsls	r3, r3, #16
 8004658:	431a      	orrs	r2, r3
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	061b      	lsls	r3, r3, #24
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	071b      	lsls	r3, r3, #28
 8004666:	4917      	ldr	r1, [pc, #92]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800466e:	4b15      	ldr	r3, [pc, #84]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	4911      	ldr	r1, [pc, #68]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004684:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a0e      	ldr	r2, [pc, #56]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800468a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004690:	f7fc fef2 	bl	8001478 <HAL_GetTick>
 8004694:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004698:	f7fc feee 	bl	8001478 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	; 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e007      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046b6:	d1ef      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800

080046c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e09d      	b.n	8004816 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d108      	bne.n	80046f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ea:	d009      	beq.n	8004700 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	61da      	str	r2, [r3, #28]
 80046f2:	e005      	b.n	8004700 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fc fa94 	bl	8000c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004736:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004740:	d902      	bls.n	8004748 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	e002      	b.n	800474e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800474c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004756:	d007      	beq.n	8004768 <HAL_SPI_Init+0xa0>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004760:	d002      	beq.n	8004768 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047aa:	ea42 0103 	orr.w	r1, r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	0c1b      	lsrs	r3, r3, #16
 80047c4:	f003 0204 	and.w	r2, r3, #4
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80047e4:	ea42 0103 	orr.w	r1, r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004804:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e049      	b.n	80048c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d106      	bne.n	800484a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f841 	bl	80048cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3304      	adds	r3, #4
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f000 f9ff 	bl	8004c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d001      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e054      	b.n	80049a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a26      	ldr	r2, [pc, #152]	; (80049b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d022      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004922:	d01d      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a22      	ldr	r2, [pc, #136]	; (80049b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d018      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a21      	ldr	r2, [pc, #132]	; (80049b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d013      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1f      	ldr	r2, [pc, #124]	; (80049bc <HAL_TIM_Base_Start_IT+0xdc>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00e      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1e      	ldr	r2, [pc, #120]	; (80049c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d009      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1c      	ldr	r2, [pc, #112]	; (80049c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d004      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1b      	ldr	r2, [pc, #108]	; (80049c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d115      	bne.n	800498c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	4b19      	ldr	r3, [pc, #100]	; (80049cc <HAL_TIM_Base_Start_IT+0xec>)
 8004968:	4013      	ands	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b06      	cmp	r3, #6
 8004970:	d015      	beq.n	800499e <HAL_TIM_Base_Start_IT+0xbe>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004978:	d011      	beq.n	800499e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498a:	e008      	b.n	800499e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	e000      	b.n	80049a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40010000 	.word	0x40010000
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40000c00 	.word	0x40000c00
 80049c0:	40010400 	.word	0x40010400
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40001800 	.word	0x40001800
 80049cc:	00010007 	.word	0x00010007

080049d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d122      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d11b      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0202 	mvn.w	r2, #2
 80049fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f905 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f8f7 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f908 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0204 	mvn.w	r2, #4
 8004a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2202      	movs	r2, #2
 8004a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f8db 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f8cd 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f8de 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0208 	mvn.w	r2, #8
 8004aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f8b1 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8a3 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f8b4 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	2b10      	cmp	r3, #16
 8004ae0:	d122      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d11b      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0210 	mvn.w	r2, #16
 8004af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2208      	movs	r2, #8
 8004afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f887 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 8004b14:	e005      	b.n	8004b22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f879 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f88a 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d10e      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d107      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0201 	mvn.w	r2, #1
 8004b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fb ff96 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5e:	2b80      	cmp	r3, #128	; 0x80
 8004b60:	d10e      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6c:	2b80      	cmp	r3, #128	; 0x80
 8004b6e:	d107      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f91a 	bl	8004db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b8e:	d10e      	bne.n	8004bae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b80      	cmp	r3, #128	; 0x80
 8004b9c:	d107      	bne.n	8004bae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f90d 	bl	8004dc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	d10e      	bne.n	8004bda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d107      	bne.n	8004bda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f838 	bl	8004c4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d10e      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d107      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f06f 0220 	mvn.w	r2, #32
 8004bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f8cd 	bl	8004da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
	...

08004c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a40      	ldr	r2, [pc, #256]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d013      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7e:	d00f      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a3d      	ldr	r2, [pc, #244]	; (8004d78 <TIM_Base_SetConfig+0x118>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00b      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a3c      	ldr	r2, [pc, #240]	; (8004d7c <TIM_Base_SetConfig+0x11c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d007      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a3b      	ldr	r2, [pc, #236]	; (8004d80 <TIM_Base_SetConfig+0x120>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a3a      	ldr	r2, [pc, #232]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d108      	bne.n	8004cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a2f      	ldr	r2, [pc, #188]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d02b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d027      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2c      	ldr	r2, [pc, #176]	; (8004d78 <TIM_Base_SetConfig+0x118>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d023      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2b      	ldr	r2, [pc, #172]	; (8004d7c <TIM_Base_SetConfig+0x11c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01f      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a2a      	ldr	r2, [pc, #168]	; (8004d80 <TIM_Base_SetConfig+0x120>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d01b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a29      	ldr	r2, [pc, #164]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d017      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a28      	ldr	r2, [pc, #160]	; (8004d88 <TIM_Base_SetConfig+0x128>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d013      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a27      	ldr	r2, [pc, #156]	; (8004d8c <TIM_Base_SetConfig+0x12c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00f      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a26      	ldr	r2, [pc, #152]	; (8004d90 <TIM_Base_SetConfig+0x130>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a25      	ldr	r2, [pc, #148]	; (8004d94 <TIM_Base_SetConfig+0x134>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d007      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a24      	ldr	r2, [pc, #144]	; (8004d98 <TIM_Base_SetConfig+0x138>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d003      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a23      	ldr	r2, [pc, #140]	; (8004d9c <TIM_Base_SetConfig+0x13c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d108      	bne.n	8004d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_Base_SetConfig+0xf8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a0c      	ldr	r2, [pc, #48]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d103      	bne.n	8004d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	615a      	str	r2, [r3, #20]
}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40010000 	.word	0x40010000
 8004d78:	40000400 	.word	0x40000400
 8004d7c:	40000800 	.word	0x40000800
 8004d80:	40000c00 	.word	0x40000c00
 8004d84:	40010400 	.word	0x40010400
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800
 8004d94:	40001800 	.word	0x40001800
 8004d98:	40001c00 	.word	0x40001c00
 8004d9c:	40002000 	.word	0x40002000

08004da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e040      	b.n	8004e70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fb ff84 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2224      	movs	r2, #36	; 0x24
 8004e08:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0201 	bic.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f82c 	bl	8004e78 <UART_SetConfig>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e022      	b.n	8004e70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fa84 	bl	8005340 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fb0b 	bl	8005484 <UART_CheckIdleState>
 8004e6e:	4603      	mov	r3, r0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	4ba6      	ldr	r3, [pc, #664]	; (800513c <UART_SetConfig+0x2c4>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6812      	ldr	r2, [r2, #0]
 8004eaa:	6979      	ldr	r1, [r7, #20]
 8004eac:	430b      	orrs	r3, r1
 8004eae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a94      	ldr	r2, [pc, #592]	; (8005140 <UART_SetConfig+0x2c8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d120      	bne.n	8004f36 <UART_SetConfig+0xbe>
 8004ef4:	4b93      	ldr	r3, [pc, #588]	; (8005144 <UART_SetConfig+0x2cc>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d816      	bhi.n	8004f30 <UART_SetConfig+0xb8>
 8004f02:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <UART_SetConfig+0x90>)
 8004f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f08:	08004f19 	.word	0x08004f19
 8004f0c:	08004f25 	.word	0x08004f25
 8004f10:	08004f1f 	.word	0x08004f1f
 8004f14:	08004f2b 	.word	0x08004f2b
 8004f18:	2301      	movs	r3, #1
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	e150      	b.n	80051c0 <UART_SetConfig+0x348>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	77fb      	strb	r3, [r7, #31]
 8004f22:	e14d      	b.n	80051c0 <UART_SetConfig+0x348>
 8004f24:	2304      	movs	r3, #4
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	e14a      	b.n	80051c0 <UART_SetConfig+0x348>
 8004f2a:	2308      	movs	r3, #8
 8004f2c:	77fb      	strb	r3, [r7, #31]
 8004f2e:	e147      	b.n	80051c0 <UART_SetConfig+0x348>
 8004f30:	2310      	movs	r3, #16
 8004f32:	77fb      	strb	r3, [r7, #31]
 8004f34:	e144      	b.n	80051c0 <UART_SetConfig+0x348>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a83      	ldr	r2, [pc, #524]	; (8005148 <UART_SetConfig+0x2d0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d132      	bne.n	8004fa6 <UART_SetConfig+0x12e>
 8004f40:	4b80      	ldr	r3, [pc, #512]	; (8005144 <UART_SetConfig+0x2cc>)
 8004f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f46:	f003 030c 	and.w	r3, r3, #12
 8004f4a:	2b0c      	cmp	r3, #12
 8004f4c:	d828      	bhi.n	8004fa0 <UART_SetConfig+0x128>
 8004f4e:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <UART_SetConfig+0xdc>)
 8004f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f54:	08004f89 	.word	0x08004f89
 8004f58:	08004fa1 	.word	0x08004fa1
 8004f5c:	08004fa1 	.word	0x08004fa1
 8004f60:	08004fa1 	.word	0x08004fa1
 8004f64:	08004f95 	.word	0x08004f95
 8004f68:	08004fa1 	.word	0x08004fa1
 8004f6c:	08004fa1 	.word	0x08004fa1
 8004f70:	08004fa1 	.word	0x08004fa1
 8004f74:	08004f8f 	.word	0x08004f8f
 8004f78:	08004fa1 	.word	0x08004fa1
 8004f7c:	08004fa1 	.word	0x08004fa1
 8004f80:	08004fa1 	.word	0x08004fa1
 8004f84:	08004f9b 	.word	0x08004f9b
 8004f88:	2300      	movs	r3, #0
 8004f8a:	77fb      	strb	r3, [r7, #31]
 8004f8c:	e118      	b.n	80051c0 <UART_SetConfig+0x348>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	77fb      	strb	r3, [r7, #31]
 8004f92:	e115      	b.n	80051c0 <UART_SetConfig+0x348>
 8004f94:	2304      	movs	r3, #4
 8004f96:	77fb      	strb	r3, [r7, #31]
 8004f98:	e112      	b.n	80051c0 <UART_SetConfig+0x348>
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	77fb      	strb	r3, [r7, #31]
 8004f9e:	e10f      	b.n	80051c0 <UART_SetConfig+0x348>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	77fb      	strb	r3, [r7, #31]
 8004fa4:	e10c      	b.n	80051c0 <UART_SetConfig+0x348>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a68      	ldr	r2, [pc, #416]	; (800514c <UART_SetConfig+0x2d4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d120      	bne.n	8004ff2 <UART_SetConfig+0x17a>
 8004fb0:	4b64      	ldr	r3, [pc, #400]	; (8005144 <UART_SetConfig+0x2cc>)
 8004fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fba:	2b30      	cmp	r3, #48	; 0x30
 8004fbc:	d013      	beq.n	8004fe6 <UART_SetConfig+0x16e>
 8004fbe:	2b30      	cmp	r3, #48	; 0x30
 8004fc0:	d814      	bhi.n	8004fec <UART_SetConfig+0x174>
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	d009      	beq.n	8004fda <UART_SetConfig+0x162>
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d810      	bhi.n	8004fec <UART_SetConfig+0x174>
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <UART_SetConfig+0x15c>
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d006      	beq.n	8004fe0 <UART_SetConfig+0x168>
 8004fd2:	e00b      	b.n	8004fec <UART_SetConfig+0x174>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e0f2      	b.n	80051c0 <UART_SetConfig+0x348>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e0ef      	b.n	80051c0 <UART_SetConfig+0x348>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e0ec      	b.n	80051c0 <UART_SetConfig+0x348>
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	77fb      	strb	r3, [r7, #31]
 8004fea:	e0e9      	b.n	80051c0 <UART_SetConfig+0x348>
 8004fec:	2310      	movs	r3, #16
 8004fee:	77fb      	strb	r3, [r7, #31]
 8004ff0:	e0e6      	b.n	80051c0 <UART_SetConfig+0x348>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a56      	ldr	r2, [pc, #344]	; (8005150 <UART_SetConfig+0x2d8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d120      	bne.n	800503e <UART_SetConfig+0x1c6>
 8004ffc:	4b51      	ldr	r3, [pc, #324]	; (8005144 <UART_SetConfig+0x2cc>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005002:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005006:	2bc0      	cmp	r3, #192	; 0xc0
 8005008:	d013      	beq.n	8005032 <UART_SetConfig+0x1ba>
 800500a:	2bc0      	cmp	r3, #192	; 0xc0
 800500c:	d814      	bhi.n	8005038 <UART_SetConfig+0x1c0>
 800500e:	2b80      	cmp	r3, #128	; 0x80
 8005010:	d009      	beq.n	8005026 <UART_SetConfig+0x1ae>
 8005012:	2b80      	cmp	r3, #128	; 0x80
 8005014:	d810      	bhi.n	8005038 <UART_SetConfig+0x1c0>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <UART_SetConfig+0x1a8>
 800501a:	2b40      	cmp	r3, #64	; 0x40
 800501c:	d006      	beq.n	800502c <UART_SetConfig+0x1b4>
 800501e:	e00b      	b.n	8005038 <UART_SetConfig+0x1c0>
 8005020:	2300      	movs	r3, #0
 8005022:	77fb      	strb	r3, [r7, #31]
 8005024:	e0cc      	b.n	80051c0 <UART_SetConfig+0x348>
 8005026:	2302      	movs	r3, #2
 8005028:	77fb      	strb	r3, [r7, #31]
 800502a:	e0c9      	b.n	80051c0 <UART_SetConfig+0x348>
 800502c:	2304      	movs	r3, #4
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e0c6      	b.n	80051c0 <UART_SetConfig+0x348>
 8005032:	2308      	movs	r3, #8
 8005034:	77fb      	strb	r3, [r7, #31]
 8005036:	e0c3      	b.n	80051c0 <UART_SetConfig+0x348>
 8005038:	2310      	movs	r3, #16
 800503a:	77fb      	strb	r3, [r7, #31]
 800503c:	e0c0      	b.n	80051c0 <UART_SetConfig+0x348>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a44      	ldr	r2, [pc, #272]	; (8005154 <UART_SetConfig+0x2dc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d125      	bne.n	8005094 <UART_SetConfig+0x21c>
 8005048:	4b3e      	ldr	r3, [pc, #248]	; (8005144 <UART_SetConfig+0x2cc>)
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005056:	d017      	beq.n	8005088 <UART_SetConfig+0x210>
 8005058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800505c:	d817      	bhi.n	800508e <UART_SetConfig+0x216>
 800505e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005062:	d00b      	beq.n	800507c <UART_SetConfig+0x204>
 8005064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005068:	d811      	bhi.n	800508e <UART_SetConfig+0x216>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <UART_SetConfig+0x1fe>
 800506e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005072:	d006      	beq.n	8005082 <UART_SetConfig+0x20a>
 8005074:	e00b      	b.n	800508e <UART_SetConfig+0x216>
 8005076:	2300      	movs	r3, #0
 8005078:	77fb      	strb	r3, [r7, #31]
 800507a:	e0a1      	b.n	80051c0 <UART_SetConfig+0x348>
 800507c:	2302      	movs	r3, #2
 800507e:	77fb      	strb	r3, [r7, #31]
 8005080:	e09e      	b.n	80051c0 <UART_SetConfig+0x348>
 8005082:	2304      	movs	r3, #4
 8005084:	77fb      	strb	r3, [r7, #31]
 8005086:	e09b      	b.n	80051c0 <UART_SetConfig+0x348>
 8005088:	2308      	movs	r3, #8
 800508a:	77fb      	strb	r3, [r7, #31]
 800508c:	e098      	b.n	80051c0 <UART_SetConfig+0x348>
 800508e:	2310      	movs	r3, #16
 8005090:	77fb      	strb	r3, [r7, #31]
 8005092:	e095      	b.n	80051c0 <UART_SetConfig+0x348>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a2f      	ldr	r2, [pc, #188]	; (8005158 <UART_SetConfig+0x2e0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d125      	bne.n	80050ea <UART_SetConfig+0x272>
 800509e:	4b29      	ldr	r3, [pc, #164]	; (8005144 <UART_SetConfig+0x2cc>)
 80050a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050ac:	d017      	beq.n	80050de <UART_SetConfig+0x266>
 80050ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050b2:	d817      	bhi.n	80050e4 <UART_SetConfig+0x26c>
 80050b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b8:	d00b      	beq.n	80050d2 <UART_SetConfig+0x25a>
 80050ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050be:	d811      	bhi.n	80050e4 <UART_SetConfig+0x26c>
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <UART_SetConfig+0x254>
 80050c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c8:	d006      	beq.n	80050d8 <UART_SetConfig+0x260>
 80050ca:	e00b      	b.n	80050e4 <UART_SetConfig+0x26c>
 80050cc:	2301      	movs	r3, #1
 80050ce:	77fb      	strb	r3, [r7, #31]
 80050d0:	e076      	b.n	80051c0 <UART_SetConfig+0x348>
 80050d2:	2302      	movs	r3, #2
 80050d4:	77fb      	strb	r3, [r7, #31]
 80050d6:	e073      	b.n	80051c0 <UART_SetConfig+0x348>
 80050d8:	2304      	movs	r3, #4
 80050da:	77fb      	strb	r3, [r7, #31]
 80050dc:	e070      	b.n	80051c0 <UART_SetConfig+0x348>
 80050de:	2308      	movs	r3, #8
 80050e0:	77fb      	strb	r3, [r7, #31]
 80050e2:	e06d      	b.n	80051c0 <UART_SetConfig+0x348>
 80050e4:	2310      	movs	r3, #16
 80050e6:	77fb      	strb	r3, [r7, #31]
 80050e8:	e06a      	b.n	80051c0 <UART_SetConfig+0x348>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1b      	ldr	r2, [pc, #108]	; (800515c <UART_SetConfig+0x2e4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d138      	bne.n	8005166 <UART_SetConfig+0x2ee>
 80050f4:	4b13      	ldr	r3, [pc, #76]	; (8005144 <UART_SetConfig+0x2cc>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80050fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005102:	d017      	beq.n	8005134 <UART_SetConfig+0x2bc>
 8005104:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005108:	d82a      	bhi.n	8005160 <UART_SetConfig+0x2e8>
 800510a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800510e:	d00b      	beq.n	8005128 <UART_SetConfig+0x2b0>
 8005110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005114:	d824      	bhi.n	8005160 <UART_SetConfig+0x2e8>
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <UART_SetConfig+0x2aa>
 800511a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511e:	d006      	beq.n	800512e <UART_SetConfig+0x2b6>
 8005120:	e01e      	b.n	8005160 <UART_SetConfig+0x2e8>
 8005122:	2300      	movs	r3, #0
 8005124:	77fb      	strb	r3, [r7, #31]
 8005126:	e04b      	b.n	80051c0 <UART_SetConfig+0x348>
 8005128:	2302      	movs	r3, #2
 800512a:	77fb      	strb	r3, [r7, #31]
 800512c:	e048      	b.n	80051c0 <UART_SetConfig+0x348>
 800512e:	2304      	movs	r3, #4
 8005130:	77fb      	strb	r3, [r7, #31]
 8005132:	e045      	b.n	80051c0 <UART_SetConfig+0x348>
 8005134:	2308      	movs	r3, #8
 8005136:	77fb      	strb	r3, [r7, #31]
 8005138:	e042      	b.n	80051c0 <UART_SetConfig+0x348>
 800513a:	bf00      	nop
 800513c:	efff69f3 	.word	0xefff69f3
 8005140:	40011000 	.word	0x40011000
 8005144:	40023800 	.word	0x40023800
 8005148:	40004400 	.word	0x40004400
 800514c:	40004800 	.word	0x40004800
 8005150:	40004c00 	.word	0x40004c00
 8005154:	40005000 	.word	0x40005000
 8005158:	40011400 	.word	0x40011400
 800515c:	40007800 	.word	0x40007800
 8005160:	2310      	movs	r3, #16
 8005162:	77fb      	strb	r3, [r7, #31]
 8005164:	e02c      	b.n	80051c0 <UART_SetConfig+0x348>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a72      	ldr	r2, [pc, #456]	; (8005334 <UART_SetConfig+0x4bc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d125      	bne.n	80051bc <UART_SetConfig+0x344>
 8005170:	4b71      	ldr	r3, [pc, #452]	; (8005338 <UART_SetConfig+0x4c0>)
 8005172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005176:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800517a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800517e:	d017      	beq.n	80051b0 <UART_SetConfig+0x338>
 8005180:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005184:	d817      	bhi.n	80051b6 <UART_SetConfig+0x33e>
 8005186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518a:	d00b      	beq.n	80051a4 <UART_SetConfig+0x32c>
 800518c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005190:	d811      	bhi.n	80051b6 <UART_SetConfig+0x33e>
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <UART_SetConfig+0x326>
 8005196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800519a:	d006      	beq.n	80051aa <UART_SetConfig+0x332>
 800519c:	e00b      	b.n	80051b6 <UART_SetConfig+0x33e>
 800519e:	2300      	movs	r3, #0
 80051a0:	77fb      	strb	r3, [r7, #31]
 80051a2:	e00d      	b.n	80051c0 <UART_SetConfig+0x348>
 80051a4:	2302      	movs	r3, #2
 80051a6:	77fb      	strb	r3, [r7, #31]
 80051a8:	e00a      	b.n	80051c0 <UART_SetConfig+0x348>
 80051aa:	2304      	movs	r3, #4
 80051ac:	77fb      	strb	r3, [r7, #31]
 80051ae:	e007      	b.n	80051c0 <UART_SetConfig+0x348>
 80051b0:	2308      	movs	r3, #8
 80051b2:	77fb      	strb	r3, [r7, #31]
 80051b4:	e004      	b.n	80051c0 <UART_SetConfig+0x348>
 80051b6:	2310      	movs	r3, #16
 80051b8:	77fb      	strb	r3, [r7, #31]
 80051ba:	e001      	b.n	80051c0 <UART_SetConfig+0x348>
 80051bc:	2310      	movs	r3, #16
 80051be:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c8:	d15b      	bne.n	8005282 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80051ca:	7ffb      	ldrb	r3, [r7, #31]
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d828      	bhi.n	8005222 <UART_SetConfig+0x3aa>
 80051d0:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <UART_SetConfig+0x360>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	080051fd 	.word	0x080051fd
 80051dc:	08005205 	.word	0x08005205
 80051e0:	0800520d 	.word	0x0800520d
 80051e4:	08005223 	.word	0x08005223
 80051e8:	08005213 	.word	0x08005213
 80051ec:	08005223 	.word	0x08005223
 80051f0:	08005223 	.word	0x08005223
 80051f4:	08005223 	.word	0x08005223
 80051f8:	0800521b 	.word	0x0800521b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051fc:	f7fe fde2 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 8005200:	61b8      	str	r0, [r7, #24]
        break;
 8005202:	e013      	b.n	800522c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005204:	f7fe fdf2 	bl	8003dec <HAL_RCC_GetPCLK2Freq>
 8005208:	61b8      	str	r0, [r7, #24]
        break;
 800520a:	e00f      	b.n	800522c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800520c:	4b4b      	ldr	r3, [pc, #300]	; (800533c <UART_SetConfig+0x4c4>)
 800520e:	61bb      	str	r3, [r7, #24]
        break;
 8005210:	e00c      	b.n	800522c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005212:	f7fe fcc5 	bl	8003ba0 <HAL_RCC_GetSysClockFreq>
 8005216:	61b8      	str	r0, [r7, #24]
        break;
 8005218:	e008      	b.n	800522c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800521e:	61bb      	str	r3, [r7, #24]
        break;
 8005220:	e004      	b.n	800522c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	77bb      	strb	r3, [r7, #30]
        break;
 800522a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d074      	beq.n	800531c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	005a      	lsls	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	441a      	add	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	fbb2 f3f3 	udiv	r3, r2, r3
 8005246:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	2b0f      	cmp	r3, #15
 800524c:	d916      	bls.n	800527c <UART_SetConfig+0x404>
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005254:	d212      	bcs.n	800527c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f023 030f 	bic.w	r3, r3, #15
 800525e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	085b      	lsrs	r3, r3, #1
 8005264:	b29b      	uxth	r3, r3
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	b29a      	uxth	r2, r3
 800526c:	89fb      	ldrh	r3, [r7, #14]
 800526e:	4313      	orrs	r3, r2
 8005270:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	89fa      	ldrh	r2, [r7, #14]
 8005278:	60da      	str	r2, [r3, #12]
 800527a:	e04f      	b.n	800531c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	77bb      	strb	r3, [r7, #30]
 8005280:	e04c      	b.n	800531c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005282:	7ffb      	ldrb	r3, [r7, #31]
 8005284:	2b08      	cmp	r3, #8
 8005286:	d828      	bhi.n	80052da <UART_SetConfig+0x462>
 8005288:	a201      	add	r2, pc, #4	; (adr r2, 8005290 <UART_SetConfig+0x418>)
 800528a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528e:	bf00      	nop
 8005290:	080052b5 	.word	0x080052b5
 8005294:	080052bd 	.word	0x080052bd
 8005298:	080052c5 	.word	0x080052c5
 800529c:	080052db 	.word	0x080052db
 80052a0:	080052cb 	.word	0x080052cb
 80052a4:	080052db 	.word	0x080052db
 80052a8:	080052db 	.word	0x080052db
 80052ac:	080052db 	.word	0x080052db
 80052b0:	080052d3 	.word	0x080052d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b4:	f7fe fd86 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 80052b8:	61b8      	str	r0, [r7, #24]
        break;
 80052ba:	e013      	b.n	80052e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052bc:	f7fe fd96 	bl	8003dec <HAL_RCC_GetPCLK2Freq>
 80052c0:	61b8      	str	r0, [r7, #24]
        break;
 80052c2:	e00f      	b.n	80052e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c4:	4b1d      	ldr	r3, [pc, #116]	; (800533c <UART_SetConfig+0x4c4>)
 80052c6:	61bb      	str	r3, [r7, #24]
        break;
 80052c8:	e00c      	b.n	80052e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ca:	f7fe fc69 	bl	8003ba0 <HAL_RCC_GetSysClockFreq>
 80052ce:	61b8      	str	r0, [r7, #24]
        break;
 80052d0:	e008      	b.n	80052e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052d6:	61bb      	str	r3, [r7, #24]
        break;
 80052d8:	e004      	b.n	80052e4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	77bb      	strb	r3, [r7, #30]
        break;
 80052e2:	bf00      	nop
    }

    if (pclk != 0U)
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d018      	beq.n	800531c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	085a      	lsrs	r2, r3, #1
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	441a      	add	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	2b0f      	cmp	r3, #15
 8005302:	d909      	bls.n	8005318 <UART_SetConfig+0x4a0>
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530a:	d205      	bcs.n	8005318 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	b29a      	uxth	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60da      	str	r2, [r3, #12]
 8005316:	e001      	b.n	800531c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005328:	7fbb      	ldrb	r3, [r7, #30]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3720      	adds	r7, #32
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40007c00 	.word	0x40007c00
 8005338:	40023800 	.word	0x40023800
 800533c:	00f42400 	.word	0x00f42400

08005340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01a      	beq.n	8005456 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800543e:	d10a      	bne.n	8005456 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	605a      	str	r2, [r3, #4]
  }
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af02      	add	r7, sp, #8
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005494:	f7fb fff0 	bl	8001478 <HAL_GetTick>
 8005498:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d10e      	bne.n	80054c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f831 	bl	800551e <UART_WaitOnFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e027      	b.n	8005516 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d10e      	bne.n	80054f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f81b 	bl	800551e <UART_WaitOnFlagUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e011      	b.n	8005516 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b09c      	sub	sp, #112	; 0x70
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	603b      	str	r3, [r7, #0]
 800552a:	4613      	mov	r3, r2
 800552c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800552e:	e0a7      	b.n	8005680 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	f000 80a3 	beq.w	8005680 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553a:	f7fb ff9d 	bl	8001478 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005546:	429a      	cmp	r2, r3
 8005548:	d302      	bcc.n	8005550 <UART_WaitOnFlagUntilTimeout+0x32>
 800554a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800554c:	2b00      	cmp	r3, #0
 800554e:	d13f      	bne.n	80055d0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800555e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005560:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005564:	667b      	str	r3, [r7, #100]	; 0x64
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800556e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005570:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005574:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005576:	e841 2300 	strex	r3, r2, [r1]
 800557a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800557c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e6      	bne.n	8005550 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3308      	adds	r3, #8
 8005588:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558c:	e853 3f00 	ldrex	r3, [r3]
 8005590:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005594:	f023 0301 	bic.w	r3, r3, #1
 8005598:	663b      	str	r3, [r7, #96]	; 0x60
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3308      	adds	r3, #8
 80055a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80055a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1e5      	bne.n	8005582 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e068      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d050      	beq.n	8005680 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ec:	d148      	bne.n	8005680 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055f6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800560c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005616:	637b      	str	r3, [r7, #52]	; 0x34
 8005618:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800561c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e6      	bne.n	80055f8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3308      	adds	r3, #8
 8005630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	613b      	str	r3, [r7, #16]
   return(result);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f023 0301 	bic.w	r3, r3, #1
 8005640:	66bb      	str	r3, [r7, #104]	; 0x68
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3308      	adds	r3, #8
 8005648:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800564a:	623a      	str	r2, [r7, #32]
 800564c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	69f9      	ldr	r1, [r7, #28]
 8005650:	6a3a      	ldr	r2, [r7, #32]
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	61bb      	str	r3, [r7, #24]
   return(result);
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e5      	bne.n	800562a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2220      	movs	r2, #32
 8005668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e010      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69da      	ldr	r2, [r3, #28]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	4013      	ands	r3, r2
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	429a      	cmp	r2, r3
 800568e:	bf0c      	ite	eq
 8005690:	2301      	moveq	r3, #1
 8005692:	2300      	movne	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	461a      	mov	r2, r3
 8005698:	79fb      	ldrb	r3, [r7, #7]
 800569a:	429a      	cmp	r2, r3
 800569c:	f43f af48 	beq.w	8005530 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3770      	adds	r7, #112	; 0x70
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 80056b2:	4b98      	ldr	r3, [pc, #608]	; (8005914 <MX_LWIP_Init+0x268>)
 80056b4:	22c0      	movs	r2, #192	; 0xc0
 80056b6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 80056b8:	4b96      	ldr	r3, [pc, #600]	; (8005914 <MX_LWIP_Init+0x268>)
 80056ba:	22a8      	movs	r2, #168	; 0xa8
 80056bc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 80056be:	4b95      	ldr	r3, [pc, #596]	; (8005914 <MX_LWIP_Init+0x268>)
 80056c0:	2201      	movs	r2, #1
 80056c2:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 75;
 80056c4:	4b93      	ldr	r3, [pc, #588]	; (8005914 <MX_LWIP_Init+0x268>)
 80056c6:	224b      	movs	r2, #75	; 0x4b
 80056c8:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 80056ca:	4b93      	ldr	r3, [pc, #588]	; (8005918 <MX_LWIP_Init+0x26c>)
 80056cc:	22ff      	movs	r2, #255	; 0xff
 80056ce:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 80056d0:	4b91      	ldr	r3, [pc, #580]	; (8005918 <MX_LWIP_Init+0x26c>)
 80056d2:	22ff      	movs	r2, #255	; 0xff
 80056d4:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80056d6:	4b90      	ldr	r3, [pc, #576]	; (8005918 <MX_LWIP_Init+0x26c>)
 80056d8:	22ff      	movs	r2, #255	; 0xff
 80056da:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80056dc:	4b8e      	ldr	r3, [pc, #568]	; (8005918 <MX_LWIP_Init+0x26c>)
 80056de:	2200      	movs	r2, #0
 80056e0:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80056e2:	4b8e      	ldr	r3, [pc, #568]	; (800591c <MX_LWIP_Init+0x270>)
 80056e4:	22c0      	movs	r2, #192	; 0xc0
 80056e6:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80056e8:	4b8c      	ldr	r3, [pc, #560]	; (800591c <MX_LWIP_Init+0x270>)
 80056ea:	22a8      	movs	r2, #168	; 0xa8
 80056ec:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80056ee:	4b8b      	ldr	r3, [pc, #556]	; (800591c <MX_LWIP_Init+0x270>)
 80056f0:	2201      	movs	r2, #1
 80056f2:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80056f4:	4b89      	ldr	r3, [pc, #548]	; (800591c <MX_LWIP_Init+0x270>)
 80056f6:	2201      	movs	r2, #1
 80056f8:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80056fa:	2100      	movs	r1, #0
 80056fc:	2000      	movs	r0, #0
 80056fe:	f004 fec5 	bl	800a48c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8005702:	4b84      	ldr	r3, [pc, #528]	; (8005914 <MX_LWIP_Init+0x268>)
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	061a      	lsls	r2, r3, #24
 8005708:	4b82      	ldr	r3, [pc, #520]	; (8005914 <MX_LWIP_Init+0x268>)
 800570a:	785b      	ldrb	r3, [r3, #1]
 800570c:	041b      	lsls	r3, r3, #16
 800570e:	431a      	orrs	r2, r3
 8005710:	4b80      	ldr	r3, [pc, #512]	; (8005914 <MX_LWIP_Init+0x268>)
 8005712:	789b      	ldrb	r3, [r3, #2]
 8005714:	021b      	lsls	r3, r3, #8
 8005716:	4313      	orrs	r3, r2
 8005718:	4a7e      	ldr	r2, [pc, #504]	; (8005914 <MX_LWIP_Init+0x268>)
 800571a:	78d2      	ldrb	r2, [r2, #3]
 800571c:	4313      	orrs	r3, r2
 800571e:	061a      	lsls	r2, r3, #24
 8005720:	4b7c      	ldr	r3, [pc, #496]	; (8005914 <MX_LWIP_Init+0x268>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	0619      	lsls	r1, r3, #24
 8005726:	4b7b      	ldr	r3, [pc, #492]	; (8005914 <MX_LWIP_Init+0x268>)
 8005728:	785b      	ldrb	r3, [r3, #1]
 800572a:	041b      	lsls	r3, r3, #16
 800572c:	4319      	orrs	r1, r3
 800572e:	4b79      	ldr	r3, [pc, #484]	; (8005914 <MX_LWIP_Init+0x268>)
 8005730:	789b      	ldrb	r3, [r3, #2]
 8005732:	021b      	lsls	r3, r3, #8
 8005734:	430b      	orrs	r3, r1
 8005736:	4977      	ldr	r1, [pc, #476]	; (8005914 <MX_LWIP_Init+0x268>)
 8005738:	78c9      	ldrb	r1, [r1, #3]
 800573a:	430b      	orrs	r3, r1
 800573c:	021b      	lsls	r3, r3, #8
 800573e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005742:	431a      	orrs	r2, r3
 8005744:	4b73      	ldr	r3, [pc, #460]	; (8005914 <MX_LWIP_Init+0x268>)
 8005746:	781b      	ldrb	r3, [r3, #0]
 8005748:	0619      	lsls	r1, r3, #24
 800574a:	4b72      	ldr	r3, [pc, #456]	; (8005914 <MX_LWIP_Init+0x268>)
 800574c:	785b      	ldrb	r3, [r3, #1]
 800574e:	041b      	lsls	r3, r3, #16
 8005750:	4319      	orrs	r1, r3
 8005752:	4b70      	ldr	r3, [pc, #448]	; (8005914 <MX_LWIP_Init+0x268>)
 8005754:	789b      	ldrb	r3, [r3, #2]
 8005756:	021b      	lsls	r3, r3, #8
 8005758:	430b      	orrs	r3, r1
 800575a:	496e      	ldr	r1, [pc, #440]	; (8005914 <MX_LWIP_Init+0x268>)
 800575c:	78c9      	ldrb	r1, [r1, #3]
 800575e:	430b      	orrs	r3, r1
 8005760:	0a1b      	lsrs	r3, r3, #8
 8005762:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005766:	431a      	orrs	r2, r3
 8005768:	4b6a      	ldr	r3, [pc, #424]	; (8005914 <MX_LWIP_Init+0x268>)
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	0619      	lsls	r1, r3, #24
 800576e:	4b69      	ldr	r3, [pc, #420]	; (8005914 <MX_LWIP_Init+0x268>)
 8005770:	785b      	ldrb	r3, [r3, #1]
 8005772:	041b      	lsls	r3, r3, #16
 8005774:	4319      	orrs	r1, r3
 8005776:	4b67      	ldr	r3, [pc, #412]	; (8005914 <MX_LWIP_Init+0x268>)
 8005778:	789b      	ldrb	r3, [r3, #2]
 800577a:	021b      	lsls	r3, r3, #8
 800577c:	430b      	orrs	r3, r1
 800577e:	4965      	ldr	r1, [pc, #404]	; (8005914 <MX_LWIP_Init+0x268>)
 8005780:	78c9      	ldrb	r1, [r1, #3]
 8005782:	430b      	orrs	r3, r1
 8005784:	0e1b      	lsrs	r3, r3, #24
 8005786:	4313      	orrs	r3, r2
 8005788:	4a65      	ldr	r2, [pc, #404]	; (8005920 <MX_LWIP_Init+0x274>)
 800578a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800578c:	4b62      	ldr	r3, [pc, #392]	; (8005918 <MX_LWIP_Init+0x26c>)
 800578e:	781b      	ldrb	r3, [r3, #0]
 8005790:	061a      	lsls	r2, r3, #24
 8005792:	4b61      	ldr	r3, [pc, #388]	; (8005918 <MX_LWIP_Init+0x26c>)
 8005794:	785b      	ldrb	r3, [r3, #1]
 8005796:	041b      	lsls	r3, r3, #16
 8005798:	431a      	orrs	r2, r3
 800579a:	4b5f      	ldr	r3, [pc, #380]	; (8005918 <MX_LWIP_Init+0x26c>)
 800579c:	789b      	ldrb	r3, [r3, #2]
 800579e:	021b      	lsls	r3, r3, #8
 80057a0:	4313      	orrs	r3, r2
 80057a2:	4a5d      	ldr	r2, [pc, #372]	; (8005918 <MX_LWIP_Init+0x26c>)
 80057a4:	78d2      	ldrb	r2, [r2, #3]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	061a      	lsls	r2, r3, #24
 80057aa:	4b5b      	ldr	r3, [pc, #364]	; (8005918 <MX_LWIP_Init+0x26c>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	0619      	lsls	r1, r3, #24
 80057b0:	4b59      	ldr	r3, [pc, #356]	; (8005918 <MX_LWIP_Init+0x26c>)
 80057b2:	785b      	ldrb	r3, [r3, #1]
 80057b4:	041b      	lsls	r3, r3, #16
 80057b6:	4319      	orrs	r1, r3
 80057b8:	4b57      	ldr	r3, [pc, #348]	; (8005918 <MX_LWIP_Init+0x26c>)
 80057ba:	789b      	ldrb	r3, [r3, #2]
 80057bc:	021b      	lsls	r3, r3, #8
 80057be:	430b      	orrs	r3, r1
 80057c0:	4955      	ldr	r1, [pc, #340]	; (8005918 <MX_LWIP_Init+0x26c>)
 80057c2:	78c9      	ldrb	r1, [r1, #3]
 80057c4:	430b      	orrs	r3, r1
 80057c6:	021b      	lsls	r3, r3, #8
 80057c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057cc:	431a      	orrs	r2, r3
 80057ce:	4b52      	ldr	r3, [pc, #328]	; (8005918 <MX_LWIP_Init+0x26c>)
 80057d0:	781b      	ldrb	r3, [r3, #0]
 80057d2:	0619      	lsls	r1, r3, #24
 80057d4:	4b50      	ldr	r3, [pc, #320]	; (8005918 <MX_LWIP_Init+0x26c>)
 80057d6:	785b      	ldrb	r3, [r3, #1]
 80057d8:	041b      	lsls	r3, r3, #16
 80057da:	4319      	orrs	r1, r3
 80057dc:	4b4e      	ldr	r3, [pc, #312]	; (8005918 <MX_LWIP_Init+0x26c>)
 80057de:	789b      	ldrb	r3, [r3, #2]
 80057e0:	021b      	lsls	r3, r3, #8
 80057e2:	430b      	orrs	r3, r1
 80057e4:	494c      	ldr	r1, [pc, #304]	; (8005918 <MX_LWIP_Init+0x26c>)
 80057e6:	78c9      	ldrb	r1, [r1, #3]
 80057e8:	430b      	orrs	r3, r1
 80057ea:	0a1b      	lsrs	r3, r3, #8
 80057ec:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80057f0:	431a      	orrs	r2, r3
 80057f2:	4b49      	ldr	r3, [pc, #292]	; (8005918 <MX_LWIP_Init+0x26c>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	0619      	lsls	r1, r3, #24
 80057f8:	4b47      	ldr	r3, [pc, #284]	; (8005918 <MX_LWIP_Init+0x26c>)
 80057fa:	785b      	ldrb	r3, [r3, #1]
 80057fc:	041b      	lsls	r3, r3, #16
 80057fe:	4319      	orrs	r1, r3
 8005800:	4b45      	ldr	r3, [pc, #276]	; (8005918 <MX_LWIP_Init+0x26c>)
 8005802:	789b      	ldrb	r3, [r3, #2]
 8005804:	021b      	lsls	r3, r3, #8
 8005806:	430b      	orrs	r3, r1
 8005808:	4943      	ldr	r1, [pc, #268]	; (8005918 <MX_LWIP_Init+0x26c>)
 800580a:	78c9      	ldrb	r1, [r1, #3]
 800580c:	430b      	orrs	r3, r1
 800580e:	0e1b      	lsrs	r3, r3, #24
 8005810:	4313      	orrs	r3, r2
 8005812:	4a44      	ldr	r2, [pc, #272]	; (8005924 <MX_LWIP_Init+0x278>)
 8005814:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8005816:	4b41      	ldr	r3, [pc, #260]	; (800591c <MX_LWIP_Init+0x270>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	061a      	lsls	r2, r3, #24
 800581c:	4b3f      	ldr	r3, [pc, #252]	; (800591c <MX_LWIP_Init+0x270>)
 800581e:	785b      	ldrb	r3, [r3, #1]
 8005820:	041b      	lsls	r3, r3, #16
 8005822:	431a      	orrs	r2, r3
 8005824:	4b3d      	ldr	r3, [pc, #244]	; (800591c <MX_LWIP_Init+0x270>)
 8005826:	789b      	ldrb	r3, [r3, #2]
 8005828:	021b      	lsls	r3, r3, #8
 800582a:	4313      	orrs	r3, r2
 800582c:	4a3b      	ldr	r2, [pc, #236]	; (800591c <MX_LWIP_Init+0x270>)
 800582e:	78d2      	ldrb	r2, [r2, #3]
 8005830:	4313      	orrs	r3, r2
 8005832:	061a      	lsls	r2, r3, #24
 8005834:	4b39      	ldr	r3, [pc, #228]	; (800591c <MX_LWIP_Init+0x270>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	0619      	lsls	r1, r3, #24
 800583a:	4b38      	ldr	r3, [pc, #224]	; (800591c <MX_LWIP_Init+0x270>)
 800583c:	785b      	ldrb	r3, [r3, #1]
 800583e:	041b      	lsls	r3, r3, #16
 8005840:	4319      	orrs	r1, r3
 8005842:	4b36      	ldr	r3, [pc, #216]	; (800591c <MX_LWIP_Init+0x270>)
 8005844:	789b      	ldrb	r3, [r3, #2]
 8005846:	021b      	lsls	r3, r3, #8
 8005848:	430b      	orrs	r3, r1
 800584a:	4934      	ldr	r1, [pc, #208]	; (800591c <MX_LWIP_Init+0x270>)
 800584c:	78c9      	ldrb	r1, [r1, #3]
 800584e:	430b      	orrs	r3, r1
 8005850:	021b      	lsls	r3, r3, #8
 8005852:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005856:	431a      	orrs	r2, r3
 8005858:	4b30      	ldr	r3, [pc, #192]	; (800591c <MX_LWIP_Init+0x270>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	0619      	lsls	r1, r3, #24
 800585e:	4b2f      	ldr	r3, [pc, #188]	; (800591c <MX_LWIP_Init+0x270>)
 8005860:	785b      	ldrb	r3, [r3, #1]
 8005862:	041b      	lsls	r3, r3, #16
 8005864:	4319      	orrs	r1, r3
 8005866:	4b2d      	ldr	r3, [pc, #180]	; (800591c <MX_LWIP_Init+0x270>)
 8005868:	789b      	ldrb	r3, [r3, #2]
 800586a:	021b      	lsls	r3, r3, #8
 800586c:	430b      	orrs	r3, r1
 800586e:	492b      	ldr	r1, [pc, #172]	; (800591c <MX_LWIP_Init+0x270>)
 8005870:	78c9      	ldrb	r1, [r1, #3]
 8005872:	430b      	orrs	r3, r1
 8005874:	0a1b      	lsrs	r3, r3, #8
 8005876:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800587a:	431a      	orrs	r2, r3
 800587c:	4b27      	ldr	r3, [pc, #156]	; (800591c <MX_LWIP_Init+0x270>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	0619      	lsls	r1, r3, #24
 8005882:	4b26      	ldr	r3, [pc, #152]	; (800591c <MX_LWIP_Init+0x270>)
 8005884:	785b      	ldrb	r3, [r3, #1]
 8005886:	041b      	lsls	r3, r3, #16
 8005888:	4319      	orrs	r1, r3
 800588a:	4b24      	ldr	r3, [pc, #144]	; (800591c <MX_LWIP_Init+0x270>)
 800588c:	789b      	ldrb	r3, [r3, #2]
 800588e:	021b      	lsls	r3, r3, #8
 8005890:	430b      	orrs	r3, r1
 8005892:	4922      	ldr	r1, [pc, #136]	; (800591c <MX_LWIP_Init+0x270>)
 8005894:	78c9      	ldrb	r1, [r1, #3]
 8005896:	430b      	orrs	r3, r1
 8005898:	0e1b      	lsrs	r3, r3, #24
 800589a:	4313      	orrs	r3, r2
 800589c:	4a22      	ldr	r2, [pc, #136]	; (8005928 <MX_LWIP_Init+0x27c>)
 800589e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80058a0:	4b22      	ldr	r3, [pc, #136]	; (800592c <MX_LWIP_Init+0x280>)
 80058a2:	9302      	str	r3, [sp, #8]
 80058a4:	4b22      	ldr	r3, [pc, #136]	; (8005930 <MX_LWIP_Init+0x284>)
 80058a6:	9301      	str	r3, [sp, #4]
 80058a8:	2300      	movs	r3, #0
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	4b1e      	ldr	r3, [pc, #120]	; (8005928 <MX_LWIP_Init+0x27c>)
 80058ae:	4a1d      	ldr	r2, [pc, #116]	; (8005924 <MX_LWIP_Init+0x278>)
 80058b0:	491b      	ldr	r1, [pc, #108]	; (8005920 <MX_LWIP_Init+0x274>)
 80058b2:	4820      	ldr	r0, [pc, #128]	; (8005934 <MX_LWIP_Init+0x288>)
 80058b4:	f005 fbb4 	bl	800b020 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80058b8:	481e      	ldr	r0, [pc, #120]	; (8005934 <MX_LWIP_Init+0x288>)
 80058ba:	f005 fd63 	bl	800b384 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80058be:	4b1d      	ldr	r3, [pc, #116]	; (8005934 <MX_LWIP_Init+0x288>)
 80058c0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80058c4:	089b      	lsrs	r3, r3, #2
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80058d0:	4818      	ldr	r0, [pc, #96]	; (8005934 <MX_LWIP_Init+0x288>)
 80058d2:	f005 fd67 	bl	800b3a4 <netif_set_up>
 80058d6:	e002      	b.n	80058de <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80058d8:	4816      	ldr	r0, [pc, #88]	; (8005934 <MX_LWIP_Init+0x288>)
 80058da:	f005 fdcf 	bl	800b47c <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80058de:	4916      	ldr	r1, [pc, #88]	; (8005938 <MX_LWIP_Init+0x28c>)
 80058e0:	4814      	ldr	r0, [pc, #80]	; (8005934 <MX_LWIP_Init+0x288>)
 80058e2:	f005 fe61 	bl	800b5a8 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 80058e6:	2224      	movs	r2, #36	; 0x24
 80058e8:	2100      	movs	r1, #0
 80058ea:	4814      	ldr	r0, [pc, #80]	; (800593c <MX_LWIP_Init+0x290>)
 80058ec:	f00e fe27 	bl	801453e <memset>
  attributes.name = "EthLink";
 80058f0:	4b12      	ldr	r3, [pc, #72]	; (800593c <MX_LWIP_Init+0x290>)
 80058f2:	4a13      	ldr	r2, [pc, #76]	; (8005940 <MX_LWIP_Init+0x294>)
 80058f4:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 80058f6:	4b11      	ldr	r3, [pc, #68]	; (800593c <MX_LWIP_Init+0x290>)
 80058f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80058fc:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 80058fe:	4b0f      	ldr	r3, [pc, #60]	; (800593c <MX_LWIP_Init+0x290>)
 8005900:	2210      	movs	r2, #16
 8005902:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8005904:	4a0d      	ldr	r2, [pc, #52]	; (800593c <MX_LWIP_Init+0x290>)
 8005906:	490b      	ldr	r1, [pc, #44]	; (8005934 <MX_LWIP_Init+0x288>)
 8005908:	480e      	ldr	r0, [pc, #56]	; (8005944 <MX_LWIP_Init+0x298>)
 800590a:	f000 fda3 	bl	8006454 <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800590e:	bf00      	nop
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}
 8005914:	200003f0 	.word	0x200003f0
 8005918:	200003f4 	.word	0x200003f4
 800591c:	200003f8 	.word	0x200003f8
 8005920:	200003e4 	.word	0x200003e4
 8005924:	200003e8 	.word	0x200003e8
 8005928:	200003ec 	.word	0x200003ec
 800592c:	0800a3c9 	.word	0x0800a3c9
 8005930:	08005e45 	.word	0x08005e45
 8005934:	200003b0 	.word	0x200003b0
 8005938:	08005949 	.word	0x08005949
 800593c:	200003fc 	.word	0x200003fc
 8005940:	080154f4 	.word	0x080154f4
 8005944:	0800610d 	.word	0x0800610d

08005948 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005948:	b480      	push	{r7}
 800594a:	b083      	sub	sp, #12
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005950:	bf00      	nop
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800595c:	b480      	push	{r7}
 800595e:	b087      	sub	sp, #28
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800596e:	2320      	movs	r3, #32
 8005970:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005972:	f3bf 8f4f 	dsb	sy
}
 8005976:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8005978:	e00b      	b.n	8005992 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800597a:	4a0d      	ldr	r2, [pc, #52]	; (80059b0 <SCB_InvalidateDCache_by_Addr+0x54>)
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	693a      	ldr	r2, [r7, #16]
 8005986:	4413      	add	r3, r2
 8005988:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	1ad3      	subs	r3, r2, r3
 8005990:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	2b00      	cmp	r3, #0
 8005996:	dcf0      	bgt.n	800597a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005998:	f3bf 8f4f 	dsb	sy
}
 800599c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800599e:	f3bf 8f6f 	isb	sy
}
 80059a2:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80059a4:	bf00      	nop
 80059a6:	371c      	adds	r7, #28
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr
 80059b0:	e000ed00 	.word	0xe000ed00

080059b4 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80059bc:	4b04      	ldr	r3, [pc, #16]	; (80059d0 <HAL_ETH_RxCpltCallback+0x1c>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	4618      	mov	r0, r3
 80059c2:	f001 f865 	bl	8006a90 <osSemaphoreRelease>
}
 80059c6:	bf00      	nop
 80059c8:	3708      	adds	r7, #8
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	20004dac 	.word	0x20004dac

080059d4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b082      	sub	sp, #8
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80059dc:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <HAL_ETH_TxCpltCallback+0x1c>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4618      	mov	r0, r3
 80059e2:	f001 f855 	bl	8006a90 <osSemaphoreRelease>
}
 80059e6:	bf00      	nop
 80059e8:	3708      	adds	r7, #8
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20004db0 	.word	0x20004db0

080059f4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b082      	sub	sp, #8
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f7fc fde7 	bl	80025d0 <HAL_ETH_GetDMAError>
 8005a02:	4603      	mov	r3, r0
 8005a04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a08:	2b80      	cmp	r3, #128	; 0x80
 8005a0a:	d104      	bne.n	8005a16 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005a0c:	4b04      	ldr	r3, [pc, #16]	; (8005a20 <HAL_ETH_ErrorCallback+0x2c>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f001 f83d 	bl	8006a90 <osSemaphoreRelease>
  }
}
 8005a16:	bf00      	nop
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	20004dac 	.word	0x20004dac

08005a24 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b0aa      	sub	sp, #168	; 0xa8
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8005a32:	2300      	movs	r3, #0
 8005a34:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8005a3e:	f107 0310 	add.w	r3, r7, #16
 8005a42:	2264      	movs	r2, #100	; 0x64
 8005a44:	2100      	movs	r1, #0
 8005a46:	4618      	mov	r0, r3
 8005a48:	f00e fd79 	bl	801453e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005a4c:	4b85      	ldr	r3, [pc, #532]	; (8005c64 <low_level_init+0x240>)
 8005a4e:	4a86      	ldr	r2, [pc, #536]	; (8005c68 <low_level_init+0x244>)
 8005a50:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005a52:	2300      	movs	r3, #0
 8005a54:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8005a56:	2380      	movs	r3, #128	; 0x80
 8005a58:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005a5a:	23e1      	movs	r3, #225	; 0xe1
 8005a5c:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8005a62:	2300      	movs	r3, #0
 8005a64:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8005a66:	2300      	movs	r3, #0
 8005a68:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005a6a:	4a7e      	ldr	r2, [pc, #504]	; (8005c64 <low_level_init+0x240>)
 8005a6c:	f107 0308 	add.w	r3, r7, #8
 8005a70:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8005a72:	4b7c      	ldr	r3, [pc, #496]	; (8005c64 <low_level_init+0x240>)
 8005a74:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005a78:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005a7a:	4b7a      	ldr	r3, [pc, #488]	; (8005c64 <low_level_init+0x240>)
 8005a7c:	4a7b      	ldr	r2, [pc, #492]	; (8005c6c <low_level_init+0x248>)
 8005a7e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005a80:	4b78      	ldr	r3, [pc, #480]	; (8005c64 <low_level_init+0x240>)
 8005a82:	4a7b      	ldr	r2, [pc, #492]	; (8005c70 <low_level_init+0x24c>)
 8005a84:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005a86:	4b77      	ldr	r3, [pc, #476]	; (8005c64 <low_level_init+0x240>)
 8005a88:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005a8c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8005a8e:	4875      	ldr	r0, [pc, #468]	; (8005c64 <low_level_init+0x240>)
 8005a90:	f7fb ff00 	bl	8001894 <HAL_ETH_Init>
 8005a94:	4603      	mov	r3, r0
 8005a96:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005a9a:	2238      	movs	r2, #56	; 0x38
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	4875      	ldr	r0, [pc, #468]	; (8005c74 <low_level_init+0x250>)
 8005aa0:	f00e fd4d 	bl	801453e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005aa4:	4b73      	ldr	r3, [pc, #460]	; (8005c74 <low_level_init+0x250>)
 8005aa6:	2221      	movs	r2, #33	; 0x21
 8005aa8:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005aaa:	4b72      	ldr	r3, [pc, #456]	; (8005c74 <low_level_init+0x250>)
 8005aac:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8005ab0:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8005ab2:	4b70      	ldr	r3, [pc, #448]	; (8005c74 <low_level_init+0x250>)
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005ab8:	486f      	ldr	r0, [pc, #444]	; (8005c78 <low_level_init+0x254>)
 8005aba:	f005 f96b 	bl	800ad94 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2206      	movs	r2, #6
 8005ac2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8005ac6:	4b67      	ldr	r3, [pc, #412]	; (8005c64 <low_level_init+0x240>)
 8005ac8:	685b      	ldr	r3, [r3, #4]
 8005aca:	781a      	ldrb	r2, [r3, #0]
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8005ad2:	4b64      	ldr	r3, [pc, #400]	; (8005c64 <low_level_init+0x240>)
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	785a      	ldrb	r2, [r3, #1]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005ade:	4b61      	ldr	r3, [pc, #388]	; (8005c64 <low_level_init+0x240>)
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	789a      	ldrb	r2, [r3, #2]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005aea:	4b5e      	ldr	r3, [pc, #376]	; (8005c64 <low_level_init+0x240>)
 8005aec:	685b      	ldr	r3, [r3, #4]
 8005aee:	78da      	ldrb	r2, [r3, #3]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8005af6:	4b5b      	ldr	r3, [pc, #364]	; (8005c64 <low_level_init+0x240>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	791a      	ldrb	r2, [r3, #4]
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8005b02:	4b58      	ldr	r3, [pc, #352]	; (8005c64 <low_level_init+0x240>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	795a      	ldrb	r2, [r3, #5]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005b14:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005b1c:	f043 030a 	orr.w	r3, r3, #10
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005b28:	2200      	movs	r2, #0
 8005b2a:	2101      	movs	r1, #1
 8005b2c:	2001      	movs	r0, #1
 8005b2e:	f000 fead 	bl	800688c <osSemaphoreNew>
 8005b32:	4603      	mov	r3, r0
 8005b34:	4a51      	ldr	r2, [pc, #324]	; (8005c7c <low_level_init+0x258>)
 8005b36:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005b38:	2200      	movs	r2, #0
 8005b3a:	2101      	movs	r1, #1
 8005b3c:	2001      	movs	r0, #1
 8005b3e:	f000 fea5 	bl	800688c <osSemaphoreNew>
 8005b42:	4603      	mov	r3, r0
 8005b44:	4a4e      	ldr	r2, [pc, #312]	; (8005c80 <low_level_init+0x25c>)
 8005b46:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005b48:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005b4c:	2224      	movs	r2, #36	; 0x24
 8005b4e:	2100      	movs	r1, #0
 8005b50:	4618      	mov	r0, r3
 8005b52:	f00e fcf4 	bl	801453e <memset>
  attributes.name = "EthIf";
 8005b56:	4b4b      	ldr	r3, [pc, #300]	; (8005c84 <low_level_init+0x260>)
 8005b58:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005b5a:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005b5e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 8005b62:	2330      	movs	r3, #48	; 0x30
 8005b64:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005b68:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005b6c:	461a      	mov	r2, r3
 8005b6e:	6879      	ldr	r1, [r7, #4]
 8005b70:	4845      	ldr	r0, [pc, #276]	; (8005c88 <low_level_init+0x264>)
 8005b72:	f000 fc6f 	bl	8006454 <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005b76:	4945      	ldr	r1, [pc, #276]	; (8005c8c <low_level_init+0x268>)
 8005b78:	4845      	ldr	r0, [pc, #276]	; (8005c90 <low_level_init+0x26c>)
 8005b7a:	f7fb faf2 	bl	8001162 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8005b7e:	4844      	ldr	r0, [pc, #272]	; (8005c90 <low_level_init+0x26c>)
 8005b80:	f7fb fb21 	bl	80011c6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005b84:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d164      	bne.n	8005c56 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005b8c:	4840      	ldr	r0, [pc, #256]	; (8005c90 <low_level_init+0x26c>)
 8005b8e:	f7fb fbc2 	bl	8001316 <LAN8742_GetLinkState>
 8005b92:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005b96:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	dc06      	bgt.n	8005bac <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f005 fcd2 	bl	800b548 <netif_set_link_down>
      netif_set_down(netif);
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f005 fc69 	bl	800b47c <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005baa:	e056      	b.n	8005c5a <low_level_init+0x236>
      switch (PHYLinkState)
 8005bac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bb0:	3b02      	subs	r3, #2
 8005bb2:	2b03      	cmp	r3, #3
 8005bb4:	d82a      	bhi.n	8005c0c <low_level_init+0x1e8>
 8005bb6:	a201      	add	r2, pc, #4	; (adr r2, 8005bbc <low_level_init+0x198>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005bcd 	.word	0x08005bcd
 8005bc0:	08005bdf 	.word	0x08005bdf
 8005bc4:	08005bef 	.word	0x08005bef
 8005bc8:	08005bff 	.word	0x08005bff
        duplex = ETH_FULLDUPLEX_MODE;
 8005bcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8005bd4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005bd8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005bdc:	e01f      	b.n	8005c1e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005bde:	2300      	movs	r3, #0
 8005be0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8005be4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005be8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005bec:	e017      	b.n	8005c1e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005bee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8005bf6:	2300      	movs	r3, #0
 8005bf8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005bfc:	e00f      	b.n	8005c1e <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005bfe:	2300      	movs	r3, #0
 8005c00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8005c04:	2300      	movs	r3, #0
 8005c06:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005c0a:	e008      	b.n	8005c1e <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005c0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005c10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8005c14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005c18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005c1c:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005c1e:	f107 0310 	add.w	r3, r7, #16
 8005c22:	4619      	mov	r1, r3
 8005c24:	480f      	ldr	r0, [pc, #60]	; (8005c64 <low_level_init+0x240>)
 8005c26:	f7fc fb79 	bl	800231c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005c2a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8005c30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005c36:	f107 0310 	add.w	r3, r7, #16
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	4809      	ldr	r0, [pc, #36]	; (8005c64 <low_level_init+0x240>)
 8005c3e:	f7fc fc57 	bl	80024f0 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005c42:	4808      	ldr	r0, [pc, #32]	; (8005c64 <low_level_init+0x240>)
 8005c44:	f7fb ff02 	bl	8001a4c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f005 fbab 	bl	800b3a4 <netif_set_up>
    netif_set_link_up(netif);
 8005c4e:	6878      	ldr	r0, [r7, #4]
 8005c50:	f005 fc46 	bl	800b4e0 <netif_set_link_up>
}
 8005c54:	e001      	b.n	8005c5a <low_level_init+0x236>
    Error_Handler();
 8005c56:	f7fa ff25 	bl	8000aa4 <Error_Handler>
}
 8005c5a:	bf00      	nop
 8005c5c:	37a8      	adds	r7, #168	; 0xa8
 8005c5e:	46bd      	mov	sp, r7
 8005c60:	bd80      	pop	{r7, pc}
 8005c62:	bf00      	nop
 8005c64:	20004db4 	.word	0x20004db4
 8005c68:	40028000 	.word	0x40028000
 8005c6c:	20000134 	.word	0x20000134
 8005c70:	20000094 	.word	0x20000094
 8005c74:	20004e64 	.word	0x20004e64
 8005c78:	08018034 	.word	0x08018034
 8005c7c:	20004dac 	.word	0x20004dac
 8005c80:	20004db0 	.word	0x20004db0
 8005c84:	080154fc 	.word	0x080154fc
 8005c88:	08005df1 	.word	0x08005df1
 8005c8c:	2000000c 	.word	0x2000000c
 8005c90:	20004e9c 	.word	0x20004e9c

08005c94 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b092      	sub	sp, #72	; 0x48
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005cac:	f107 030c 	add.w	r3, r7, #12
 8005cb0:	2230      	movs	r2, #48	; 0x30
 8005cb2:	2100      	movs	r1, #0
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f00e fc42 	bl	801453e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005cba:	f107 030c 	add.w	r3, r7, #12
 8005cbe:	2230      	movs	r2, #48	; 0x30
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f00e fc3b 	bl	801453e <memset>

  for(q = p; q != NULL; q = q->next)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	643b      	str	r3, [r7, #64]	; 0x40
 8005ccc:	e045      	b.n	8005d5a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005cd0:	2b03      	cmp	r3, #3
 8005cd2:	d902      	bls.n	8005cda <low_level_output+0x46>
      return ERR_IF;
 8005cd4:	f06f 030b 	mvn.w	r3, #11
 8005cd8:	e065      	b.n	8005da6 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8005cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cdc:	6859      	ldr	r1, [r3, #4]
 8005cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	005b      	lsls	r3, r3, #1
 8005ce4:	4413      	add	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	3348      	adds	r3, #72	; 0x48
 8005cea:	443b      	add	r3, r7
 8005cec:	3b3c      	subs	r3, #60	; 0x3c
 8005cee:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005cf0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005cf2:	895b      	ldrh	r3, [r3, #10]
 8005cf4:	4619      	mov	r1, r3
 8005cf6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	005b      	lsls	r3, r3, #1
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	3348      	adds	r3, #72	; 0x48
 8005d02:	443b      	add	r3, r7
 8005d04:	3b38      	subs	r3, #56	; 0x38
 8005d06:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d011      	beq.n	8005d32 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005d0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d10:	1e5a      	subs	r2, r3, #1
 8005d12:	f107 000c 	add.w	r0, r7, #12
 8005d16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005d18:	460b      	mov	r3, r1
 8005d1a:	005b      	lsls	r3, r3, #1
 8005d1c:	440b      	add	r3, r1
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	18c1      	adds	r1, r0, r3
 8005d22:	4613      	mov	r3, r2
 8005d24:	005b      	lsls	r3, r3, #1
 8005d26:	4413      	add	r3, r2
 8005d28:	009b      	lsls	r3, r3, #2
 8005d2a:	3348      	adds	r3, #72	; 0x48
 8005d2c:	443b      	add	r3, r7
 8005d2e:	3b34      	subs	r3, #52	; 0x34
 8005d30:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005d32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d109      	bne.n	8005d4e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005d3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	005b      	lsls	r3, r3, #1
 8005d40:	4413      	add	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	3348      	adds	r3, #72	; 0x48
 8005d46:	443b      	add	r3, r7
 8005d48:	3b34      	subs	r3, #52	; 0x34
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d50:	3301      	adds	r3, #1
 8005d52:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	643b      	str	r3, [r7, #64]	; 0x40
 8005d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d1b6      	bne.n	8005cce <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	891b      	ldrh	r3, [r3, #8]
 8005d64:	461a      	mov	r2, r3
 8005d66:	4b12      	ldr	r3, [pc, #72]	; (8005db0 <low_level_output+0x11c>)
 8005d68:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005d6a:	4a11      	ldr	r2, [pc, #68]	; (8005db0 <low_level_output+0x11c>)
 8005d6c:	f107 030c 	add.w	r3, r7, #12
 8005d70:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005d72:	4a0f      	ldr	r2, [pc, #60]	; (8005db0 <low_level_output+0x11c>)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005d78:	6838      	ldr	r0, [r7, #0]
 8005d7a:	f006 f869 	bl	800be50 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005d7e:	490c      	ldr	r1, [pc, #48]	; (8005db0 <low_level_output+0x11c>)
 8005d80:	480c      	ldr	r0, [pc, #48]	; (8005db4 <low_level_output+0x120>)
 8005d82:	f7fb ff71 	bl	8001c68 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005d86:	bf00      	nop
 8005d88:	4b0b      	ldr	r3, [pc, #44]	; (8005db8 <low_level_output+0x124>)
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 fe17 	bl	80069c4 <osSemaphoreAcquire>
 8005d96:	4603      	mov	r3, r0
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d1f5      	bne.n	8005d88 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005d9c:	4805      	ldr	r0, [pc, #20]	; (8005db4 <low_level_output+0x120>)
 8005d9e:	f7fc f8f7 	bl	8001f90 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005da2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3748      	adds	r7, #72	; 0x48
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20004e64 	.word	0x20004e64
 8005db4:	20004db4 	.word	0x20004db4
 8005db8:	20004db0 	.word	0x20004db0

08005dbc <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005dc8:	4b07      	ldr	r3, [pc, #28]	; (8005de8 <low_level_input+0x2c>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d105      	bne.n	8005ddc <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005dd0:	f107 030c 	add.w	r3, r7, #12
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	4805      	ldr	r0, [pc, #20]	; (8005dec <low_level_input+0x30>)
 8005dd8:	f7fb ffa2 	bl	8001d20 <HAL_ETH_ReadData>
  }

  return p;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
 8005de6:	bf00      	nop
 8005de8:	20004da8 	.word	0x20004da8
 8005dec:	20004db4 	.word	0x20004db4

08005df0 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b084      	sub	sp, #16
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005e00:	4b0f      	ldr	r3, [pc, #60]	; (8005e40 <ethernetif_input+0x50>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f04f 31ff 	mov.w	r1, #4294967295
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f000 fddb 	bl	80069c4 <osSemaphoreAcquire>
 8005e0e:	4603      	mov	r3, r0
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d1f5      	bne.n	8005e00 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005e14:	68b8      	ldr	r0, [r7, #8]
 8005e16:	f7ff ffd1 	bl	8005dbc <low_level_input>
 8005e1a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d00a      	beq.n	8005e38 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	691b      	ldr	r3, [r3, #16]
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	4798      	blx	r3
 8005e2c:	4603      	mov	r3, r0
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d002      	beq.n	8005e38 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005e32:	68f8      	ldr	r0, [r7, #12]
 8005e34:	f005 ff66 	bl	800bd04 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1ea      	bne.n	8005e14 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005e3e:	e7df      	b.n	8005e00 <ethernetif_input+0x10>
 8005e40:	20004dac 	.word	0x20004dac

08005e44 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b082      	sub	sp, #8
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d106      	bne.n	8005e60 <ethernetif_init+0x1c>
 8005e52:	4b0e      	ldr	r3, [pc, #56]	; (8005e8c <ethernetif_init+0x48>)
 8005e54:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005e58:	490d      	ldr	r1, [pc, #52]	; (8005e90 <ethernetif_init+0x4c>)
 8005e5a:	480e      	ldr	r0, [pc, #56]	; (8005e94 <ethernetif_init+0x50>)
 8005e5c:	f00e fc0c 	bl	8014678 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2273      	movs	r2, #115	; 0x73
 8005e64:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2274      	movs	r2, #116	; 0x74
 8005e6c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a09      	ldr	r2, [pc, #36]	; (8005e98 <ethernetif_init+0x54>)
 8005e74:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a08      	ldr	r2, [pc, #32]	; (8005e9c <ethernetif_init+0x58>)
 8005e7a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff fdd1 	bl	8005a24 <low_level_init>

  return ERR_OK;
 8005e82:	2300      	movs	r3, #0
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3708      	adds	r7, #8
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	08015504 	.word	0x08015504
 8005e90:	08015520 	.word	0x08015520
 8005e94:	08015530 	.word	0x08015530
 8005e98:	080123f1 	.word	0x080123f1
 8005e9c:	08005c95 	.word	0x08005c95

08005ea0 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005eac:	68f9      	ldr	r1, [r7, #12]
 8005eae:	4809      	ldr	r0, [pc, #36]	; (8005ed4 <pbuf_free_custom+0x34>)
 8005eb0:	f005 f860 	bl	800af74 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005eb4:	4b08      	ldr	r3, [pc, #32]	; (8005ed8 <pbuf_free_custom+0x38>)
 8005eb6:	781b      	ldrb	r3, [r3, #0]
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d107      	bne.n	8005ecc <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005ebc:	4b06      	ldr	r3, [pc, #24]	; (8005ed8 <pbuf_free_custom+0x38>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005ec2:	4b06      	ldr	r3, [pc, #24]	; (8005edc <pbuf_free_custom+0x3c>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f000 fde2 	bl	8006a90 <osSemaphoreRelease>
  }
}
 8005ecc:	bf00      	nop
 8005ece:	3710      	adds	r7, #16
 8005ed0:	46bd      	mov	sp, r7
 8005ed2:	bd80      	pop	{r7, pc}
 8005ed4:	08018034 	.word	0x08018034
 8005ed8:	20004da8 	.word	0x20004da8
 8005edc:	20004dac 	.word	0x20004dac

08005ee0 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005ee4:	f7fb fac8 	bl	8001478 <HAL_GetTick>
 8005ee8:	4603      	mov	r3, r0
}
 8005eea:	4618      	mov	r0, r3
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b08e      	sub	sp, #56	; 0x38
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	605a      	str	r2, [r3, #4]
 8005f02:	609a      	str	r2, [r3, #8]
 8005f04:	60da      	str	r2, [r3, #12]
 8005f06:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a52      	ldr	r2, [pc, #328]	; (8006058 <HAL_ETH_MspInit+0x168>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	f040 809e 	bne.w	8006050 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005f14:	4b51      	ldr	r3, [pc, #324]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f18:	4a50      	ldr	r2, [pc, #320]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005f1a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8005f20:	4b4e      	ldr	r3, [pc, #312]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f28:	623b      	str	r3, [r7, #32]
 8005f2a:	6a3b      	ldr	r3, [r7, #32]
 8005f2c:	4b4b      	ldr	r3, [pc, #300]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f30:	4a4a      	ldr	r2, [pc, #296]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005f32:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005f36:	6313      	str	r3, [r2, #48]	; 0x30
 8005f38:	4b48      	ldr	r3, [pc, #288]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005f40:	61fb      	str	r3, [r7, #28]
 8005f42:	69fb      	ldr	r3, [r7, #28]
 8005f44:	4b45      	ldr	r3, [pc, #276]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005f46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f48:	4a44      	ldr	r2, [pc, #272]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005f4a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005f4e:	6313      	str	r3, [r2, #48]	; 0x30
 8005f50:	4b42      	ldr	r3, [pc, #264]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f58:	61bb      	str	r3, [r7, #24]
 8005f5a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f5c:	4b3f      	ldr	r3, [pc, #252]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f60:	4a3e      	ldr	r2, [pc, #248]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005f62:	f043 0304 	orr.w	r3, r3, #4
 8005f66:	6313      	str	r3, [r2, #48]	; 0x30
 8005f68:	4b3c      	ldr	r3, [pc, #240]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f6c:	f003 0304 	and.w	r3, r3, #4
 8005f70:	617b      	str	r3, [r7, #20]
 8005f72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f74:	4b39      	ldr	r3, [pc, #228]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f78:	4a38      	ldr	r2, [pc, #224]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005f7a:	f043 0301 	orr.w	r3, r3, #1
 8005f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8005f80:	4b36      	ldr	r3, [pc, #216]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	613b      	str	r3, [r7, #16]
 8005f8a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005f8c:	4b33      	ldr	r3, [pc, #204]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f90:	4a32      	ldr	r2, [pc, #200]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005f92:	f043 0302 	orr.w	r3, r3, #2
 8005f96:	6313      	str	r3, [r2, #48]	; 0x30
 8005f98:	4b30      	ldr	r3, [pc, #192]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f9c:	f003 0302 	and.w	r3, r3, #2
 8005fa0:	60fb      	str	r3, [r7, #12]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005fa4:	4b2d      	ldr	r3, [pc, #180]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005fa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fa8:	4a2c      	ldr	r2, [pc, #176]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005faa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005fae:	6313      	str	r3, [r2, #48]	; 0x30
 8005fb0:	4b2a      	ldr	r3, [pc, #168]	; (800605c <HAL_ETH_MspInit+0x16c>)
 8005fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb8:	60bb      	str	r3, [r7, #8]
 8005fba:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005fbc:	2332      	movs	r3, #50	; 0x32
 8005fbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fc4:	2300      	movs	r3, #0
 8005fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fc8:	2303      	movs	r3, #3
 8005fca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005fcc:	230b      	movs	r3, #11
 8005fce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005fd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005fd4:	4619      	mov	r1, r3
 8005fd6:	4822      	ldr	r0, [pc, #136]	; (8006060 <HAL_ETH_MspInit+0x170>)
 8005fd8:	f7fc ff0a 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005fdc:	2386      	movs	r3, #134	; 0x86
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005fe0:	2302      	movs	r3, #2
 8005fe2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005fe4:	2300      	movs	r3, #0
 8005fe6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005fe8:	2303      	movs	r3, #3
 8005fea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005fec:	230b      	movs	r3, #11
 8005fee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ff0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	481b      	ldr	r0, [pc, #108]	; (8006064 <HAL_ETH_MspInit+0x174>)
 8005ff8:	f7fc fefa 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005ffc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006002:	2302      	movs	r3, #2
 8006004:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006006:	2300      	movs	r3, #0
 8006008:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800600a:	2303      	movs	r3, #3
 800600c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800600e:	230b      	movs	r3, #11
 8006010:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006012:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006016:	4619      	mov	r1, r3
 8006018:	4813      	ldr	r0, [pc, #76]	; (8006068 <HAL_ETH_MspInit+0x178>)
 800601a:	f7fc fee9 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 800601e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8006022:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006024:	2302      	movs	r3, #2
 8006026:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006028:	2300      	movs	r3, #0
 800602a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800602c:	2303      	movs	r3, #3
 800602e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8006030:	230b      	movs	r3, #11
 8006032:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006034:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006038:	4619      	mov	r1, r3
 800603a:	480c      	ldr	r0, [pc, #48]	; (800606c <HAL_ETH_MspInit+0x17c>)
 800603c:	f7fc fed8 	bl	8002df0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8006040:	2200      	movs	r2, #0
 8006042:	2105      	movs	r1, #5
 8006044:	203d      	movs	r0, #61	; 0x3d
 8006046:	f7fb fbfb 	bl	8001840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800604a:	203d      	movs	r0, #61	; 0x3d
 800604c:	f7fb fc14 	bl	8001878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8006050:	bf00      	nop
 8006052:	3738      	adds	r7, #56	; 0x38
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}
 8006058:	40028000 	.word	0x40028000
 800605c:	40023800 	.word	0x40023800
 8006060:	40020800 	.word	0x40020800
 8006064:	40020000 	.word	0x40020000
 8006068:	40020400 	.word	0x40020400
 800606c:	40021800 	.word	0x40021800

08006070 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8006074:	4802      	ldr	r0, [pc, #8]	; (8006080 <ETH_PHY_IO_Init+0x10>)
 8006076:	f7fc fa55 	bl	8002524 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	bd80      	pop	{r7, pc}
 8006080:	20004db4 	.word	0x20004db4

08006084 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8006084:	b480      	push	{r7}
 8006086:	af00      	add	r7, sp, #0
  return 0;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b084      	sub	sp, #16
 8006098:	af00      	add	r7, sp, #0
 800609a:	60f8      	str	r0, [r7, #12]
 800609c:	60b9      	str	r1, [r7, #8]
 800609e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68ba      	ldr	r2, [r7, #8]
 80060a4:	68f9      	ldr	r1, [r7, #12]
 80060a6:	4807      	ldr	r0, [pc, #28]	; (80060c4 <ETH_PHY_IO_ReadReg+0x30>)
 80060a8:	f7fc f8a4 	bl	80021f4 <HAL_ETH_ReadPHYRegister>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d002      	beq.n	80060b8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80060b2:	f04f 33ff 	mov.w	r3, #4294967295
 80060b6:	e000      	b.n	80060ba <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80060b8:	2300      	movs	r3, #0
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3710      	adds	r7, #16
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	20004db4 	.word	0x20004db4

080060c8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68ba      	ldr	r2, [r7, #8]
 80060d8:	68f9      	ldr	r1, [r7, #12]
 80060da:	4807      	ldr	r0, [pc, #28]	; (80060f8 <ETH_PHY_IO_WriteReg+0x30>)
 80060dc:	f7fc f8d5 	bl	800228a <HAL_ETH_WritePHYRegister>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d002      	beq.n	80060ec <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80060e6:	f04f 33ff 	mov.w	r3, #4294967295
 80060ea:	e000      	b.n	80060ee <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80060ec:	2300      	movs	r3, #0
}
 80060ee:	4618      	mov	r0, r3
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	20004db4 	.word	0x20004db4

080060fc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8006100:	f7fb f9ba 	bl	8001478 <HAL_GetTick>
 8006104:	4603      	mov	r3, r0
}
 8006106:	4618      	mov	r0, r3
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b0a0      	sub	sp, #128	; 0x80
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8006114:	f107 0308 	add.w	r3, r7, #8
 8006118:	2264      	movs	r2, #100	; 0x64
 800611a:	2100      	movs	r1, #0
 800611c:	4618      	mov	r0, r3
 800611e:	f00e fa0e 	bl	801453e <memset>
  int32_t PHYLinkState = 0;
 8006122:	2300      	movs	r3, #0
 8006124:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8006126:	2300      	movs	r3, #0
 8006128:	67fb      	str	r3, [r7, #124]	; 0x7c
 800612a:	2300      	movs	r3, #0
 800612c:	67bb      	str	r3, [r7, #120]	; 0x78
 800612e:	2300      	movs	r3, #0
 8006130:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006136:	483a      	ldr	r0, [pc, #232]	; (8006220 <ethernet_link_thread+0x114>)
 8006138:	f7fb f8ed 	bl	8001316 <LAN8742_GetLinkState>
 800613c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800613e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006140:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006144:	089b      	lsrs	r3, r3, #2
 8006146:	f003 0301 	and.w	r3, r3, #1
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00c      	beq.n	800616a <ethernet_link_thread+0x5e>
 8006150:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006152:	2b01      	cmp	r3, #1
 8006154:	dc09      	bgt.n	800616a <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8006156:	4833      	ldr	r0, [pc, #204]	; (8006224 <ethernet_link_thread+0x118>)
 8006158:	f7fb fd06 	bl	8001b68 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800615c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800615e:	f005 f98d 	bl	800b47c <netif_set_down>
    netif_set_link_down(netif);
 8006162:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006164:	f005 f9f0 	bl	800b548 <netif_set_link_down>
 8006168:	e055      	b.n	8006216 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800616a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800616c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8006170:	f003 0304 	and.w	r3, r3, #4
 8006174:	2b00      	cmp	r3, #0
 8006176:	d14e      	bne.n	8006216 <ethernet_link_thread+0x10a>
 8006178:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800617a:	2b01      	cmp	r3, #1
 800617c:	dd4b      	ble.n	8006216 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800617e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006180:	3b02      	subs	r3, #2
 8006182:	2b03      	cmp	r3, #3
 8006184:	d82a      	bhi.n	80061dc <ethernet_link_thread+0xd0>
 8006186:	a201      	add	r2, pc, #4	; (adr r2, 800618c <ethernet_link_thread+0x80>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	0800619d 	.word	0x0800619d
 8006190:	080061af 	.word	0x080061af
 8006194:	080061bf 	.word	0x080061bf
 8006198:	080061cf 	.word	0x080061cf
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800619c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061a0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80061a2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061a6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80061a8:	2301      	movs	r3, #1
 80061aa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80061ac:	e017      	b.n	80061de <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80061ae:	2300      	movs	r3, #0
 80061b0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80061b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80061b6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80061b8:	2301      	movs	r3, #1
 80061ba:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80061bc:	e00f      	b.n	80061de <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80061be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061c2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80061c4:	2300      	movs	r3, #0
 80061c6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80061c8:	2301      	movs	r3, #1
 80061ca:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80061cc:	e007      	b.n	80061de <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80061ce:	2300      	movs	r3, #0
 80061d0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80061d2:	2300      	movs	r3, #0
 80061d4:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80061d6:	2301      	movs	r3, #1
 80061d8:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80061da:	e000      	b.n	80061de <ethernet_link_thread+0xd2>
    default:
      break;
 80061dc:	bf00      	nop
    }

    if(linkchanged)
 80061de:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d018      	beq.n	8006216 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80061e4:	f107 0308 	add.w	r3, r7, #8
 80061e8:	4619      	mov	r1, r3
 80061ea:	480e      	ldr	r0, [pc, #56]	; (8006224 <ethernet_link_thread+0x118>)
 80061ec:	f7fc f896 	bl	800231c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80061f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80061f2:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80061f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80061f6:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 80061f8:	f107 0308 	add.w	r3, r7, #8
 80061fc:	4619      	mov	r1, r3
 80061fe:	4809      	ldr	r0, [pc, #36]	; (8006224 <ethernet_link_thread+0x118>)
 8006200:	f7fc f976 	bl	80024f0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8006204:	4807      	ldr	r0, [pc, #28]	; (8006224 <ethernet_link_thread+0x118>)
 8006206:	f7fb fbc1 	bl	800198c <HAL_ETH_Start>
      netif_set_up(netif);
 800620a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800620c:	f005 f8ca 	bl	800b3a4 <netif_set_up>
      netif_set_link_up(netif);
 8006210:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006212:	f005 f965 	bl	800b4e0 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 8006216:	2064      	movs	r0, #100	; 0x64
 8006218:	f000 f9c2 	bl	80065a0 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800621c:	e78b      	b.n	8006136 <ethernet_link_thread+0x2a>
 800621e:	bf00      	nop
 8006220:	20004e9c 	.word	0x20004e9c
 8006224:	20004db4 	.word	0x20004db4

08006228 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b086      	sub	sp, #24
 800622c:	af02      	add	r7, sp, #8
 800622e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006230:	4812      	ldr	r0, [pc, #72]	; (800627c <HAL_ETH_RxAllocateCallback+0x54>)
 8006232:	f004 fe2b 	bl	800ae8c <memp_malloc_pool>
 8006236:	60f8      	str	r0, [r7, #12]
  if (p)
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d014      	beq.n	8006268 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f103 0220 	add.w	r2, r3, #32
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	4a0d      	ldr	r2, [pc, #52]	; (8006280 <HAL_ETH_RxAllocateCallback+0x58>)
 800624c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8006256:	9201      	str	r2, [sp, #4]
 8006258:	9300      	str	r3, [sp, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2241      	movs	r2, #65	; 0x41
 800625e:	2100      	movs	r1, #0
 8006260:	2000      	movs	r0, #0
 8006262:	f005 fb95 	bl	800b990 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8006266:	e005      	b.n	8006274 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006268:	4b06      	ldr	r3, [pc, #24]	; (8006284 <HAL_ETH_RxAllocateCallback+0x5c>)
 800626a:	2201      	movs	r2, #1
 800626c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]
}
 8006274:	bf00      	nop
 8006276:	3710      	adds	r7, #16
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}
 800627c:	08018034 	.word	0x08018034
 8006280:	08005ea1 	.word	0x08005ea1
 8006284:	20004da8 	.word	0x20004da8

08006288 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b088      	sub	sp, #32
 800628c:	af00      	add	r7, sp, #0
 800628e:	60f8      	str	r0, [r7, #12]
 8006290:	60b9      	str	r1, [r7, #8]
 8006292:	607a      	str	r2, [r7, #4]
 8006294:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800629a:	68bb      	ldr	r3, [r7, #8]
 800629c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800629e:	2300      	movs	r3, #0
 80062a0:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	3b20      	subs	r3, #32
 80062a6:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	2200      	movs	r2, #0
 80062b2:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	887a      	ldrh	r2, [r7, #2]
 80062b8:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d103      	bne.n	80062ca <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80062c2:	69bb      	ldr	r3, [r7, #24]
 80062c4:	69fa      	ldr	r2, [r7, #28]
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	e003      	b.n	80062d2 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	69fa      	ldr	r2, [r7, #28]
 80062d0:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	69fa      	ldr	r2, [r7, #28]
 80062d6:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	61fb      	str	r3, [r7, #28]
 80062de:	e009      	b.n	80062f4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	891a      	ldrh	r2, [r3, #8]
 80062e4:	887b      	ldrh	r3, [r7, #2]
 80062e6:	4413      	add	r3, r2
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	69fb      	ldr	r3, [r7, #28]
 80062ec:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80062ee:	69fb      	ldr	r3, [r7, #28]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	61fb      	str	r3, [r7, #28]
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d1f2      	bne.n	80062e0 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80062fa:	887b      	ldrh	r3, [r7, #2]
 80062fc:	4619      	mov	r1, r3
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f7ff fb2c 	bl	800595c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8006304:	bf00      	nop
 8006306:	3720      	adds	r7, #32
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800630c:	b580      	push	{r7, lr}
 800630e:	b082      	sub	sp, #8
 8006310:	af00      	add	r7, sp, #0
 8006312:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f005 fcf5 	bl	800bd04 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800631a:	bf00      	nop
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006322:	b480      	push	{r7}
 8006324:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 8006326:	bf00      	nop
 8006328:	46bd      	mov	sp, r7
 800632a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632e:	4770      	bx	lr

08006330 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006336:	f3ef 8305 	mrs	r3, IPSR
 800633a:	60bb      	str	r3, [r7, #8]
  return(result);
 800633c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800633e:	2b00      	cmp	r3, #0
 8006340:	d10f      	bne.n	8006362 <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006342:	f3ef 8310 	mrs	r3, PRIMASK
 8006346:	607b      	str	r3, [r7, #4]
  return(result);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d105      	bne.n	800635a <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800634e:	f3ef 8311 	mrs	r3, BASEPRI
 8006352:	603b      	str	r3, [r7, #0]
  return(result);
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d007      	beq.n	800636a <osKernelInitialize+0x3a>
 800635a:	4b0e      	ldr	r3, [pc, #56]	; (8006394 <osKernelInitialize+0x64>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	2b02      	cmp	r3, #2
 8006360:	d103      	bne.n	800636a <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8006362:	f06f 0305 	mvn.w	r3, #5
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	e00c      	b.n	8006384 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800636a:	4b0a      	ldr	r3, [pc, #40]	; (8006394 <osKernelInitialize+0x64>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d105      	bne.n	800637e <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006372:	4b08      	ldr	r3, [pc, #32]	; (8006394 <osKernelInitialize+0x64>)
 8006374:	2201      	movs	r2, #1
 8006376:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006378:	2300      	movs	r3, #0
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	e002      	b.n	8006384 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800637e:	f04f 33ff 	mov.w	r3, #4294967295
 8006382:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8006384:	68fb      	ldr	r3, [r7, #12]
}
 8006386:	4618      	mov	r0, r3
 8006388:	3714      	adds	r7, #20
 800638a:	46bd      	mov	sp, r7
 800638c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	20004ebc 	.word	0x20004ebc

08006398 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800639e:	f3ef 8305 	mrs	r3, IPSR
 80063a2:	60bb      	str	r3, [r7, #8]
  return(result);
 80063a4:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10f      	bne.n	80063ca <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063aa:	f3ef 8310 	mrs	r3, PRIMASK
 80063ae:	607b      	str	r3, [r7, #4]
  return(result);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d105      	bne.n	80063c2 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063b6:	f3ef 8311 	mrs	r3, BASEPRI
 80063ba:	603b      	str	r3, [r7, #0]
  return(result);
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d007      	beq.n	80063d2 <osKernelStart+0x3a>
 80063c2:	4b0f      	ldr	r3, [pc, #60]	; (8006400 <osKernelStart+0x68>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b02      	cmp	r3, #2
 80063c8:	d103      	bne.n	80063d2 <osKernelStart+0x3a>
    stat = osErrorISR;
 80063ca:	f06f 0305 	mvn.w	r3, #5
 80063ce:	60fb      	str	r3, [r7, #12]
 80063d0:	e010      	b.n	80063f4 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80063d2:	4b0b      	ldr	r3, [pc, #44]	; (8006400 <osKernelStart+0x68>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d109      	bne.n	80063ee <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80063da:	f7ff ffa2 	bl	8006322 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80063de:	4b08      	ldr	r3, [pc, #32]	; (8006400 <osKernelStart+0x68>)
 80063e0:	2202      	movs	r2, #2
 80063e2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80063e4:	f002 f906 	bl	80085f4 <vTaskStartScheduler>
      stat = osOK;
 80063e8:	2300      	movs	r3, #0
 80063ea:	60fb      	str	r3, [r7, #12]
 80063ec:	e002      	b.n	80063f4 <osKernelStart+0x5c>
    } else {
      stat = osError;
 80063ee:	f04f 33ff 	mov.w	r3, #4294967295
 80063f2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80063f4:	68fb      	ldr	r3, [r7, #12]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop
 8006400:	20004ebc 	.word	0x20004ebc

08006404 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8006404:	b580      	push	{r7, lr}
 8006406:	b084      	sub	sp, #16
 8006408:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800640a:	f3ef 8305 	mrs	r3, IPSR
 800640e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006410:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10f      	bne.n	8006436 <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006416:	f3ef 8310 	mrs	r3, PRIMASK
 800641a:	607b      	str	r3, [r7, #4]
  return(result);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d105      	bne.n	800642e <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006422:	f3ef 8311 	mrs	r3, BASEPRI
 8006426:	603b      	str	r3, [r7, #0]
  return(result);
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d007      	beq.n	800643e <osKernelGetTickCount+0x3a>
 800642e:	4b08      	ldr	r3, [pc, #32]	; (8006450 <osKernelGetTickCount+0x4c>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	2b02      	cmp	r3, #2
 8006434:	d103      	bne.n	800643e <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 8006436:	f002 fa0f 	bl	8008858 <xTaskGetTickCountFromISR>
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	e002      	b.n	8006444 <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 800643e:	f002 f9fb 	bl	8008838 <xTaskGetTickCount>
 8006442:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 8006444:	68fb      	ldr	r3, [r7, #12]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3710      	adds	r7, #16
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	20004ebc 	.word	0x20004ebc

08006454 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006454:	b580      	push	{r7, lr}
 8006456:	b090      	sub	sp, #64	; 0x40
 8006458:	af04      	add	r7, sp, #16
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006460:	2300      	movs	r3, #0
 8006462:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006464:	f3ef 8305 	mrs	r3, IPSR
 8006468:	61fb      	str	r3, [r7, #28]
  return(result);
 800646a:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800646c:	2b00      	cmp	r3, #0
 800646e:	f040 808f 	bne.w	8006590 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006472:	f3ef 8310 	mrs	r3, PRIMASK
 8006476:	61bb      	str	r3, [r7, #24]
  return(result);
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d105      	bne.n	800648a <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800647e:	f3ef 8311 	mrs	r3, BASEPRI
 8006482:	617b      	str	r3, [r7, #20]
  return(result);
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <osThreadNew+0x3e>
 800648a:	4b44      	ldr	r3, [pc, #272]	; (800659c <osThreadNew+0x148>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	2b02      	cmp	r3, #2
 8006490:	d07e      	beq.n	8006590 <osThreadNew+0x13c>
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d07b      	beq.n	8006590 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 8006498:	2380      	movs	r3, #128	; 0x80
 800649a:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800649c:	2318      	movs	r3, #24
 800649e:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80064a0:	2300      	movs	r3, #0
 80064a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80064a4:	f04f 33ff 	mov.w	r3, #4294967295
 80064a8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d045      	beq.n	800653c <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d002      	beq.n	80064be <osThreadNew+0x6a>
        name = attr->name;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	699b      	ldr	r3, [r3, #24]
 80064ca:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80064cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d008      	beq.n	80064e4 <osThreadNew+0x90>
 80064d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064d4:	2b38      	cmp	r3, #56	; 0x38
 80064d6:	d805      	bhi.n	80064e4 <osThreadNew+0x90>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f003 0301 	and.w	r3, r3, #1
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d001      	beq.n	80064e8 <osThreadNew+0x94>
        return (NULL);
 80064e4:	2300      	movs	r3, #0
 80064e6:	e054      	b.n	8006592 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	695b      	ldr	r3, [r3, #20]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d003      	beq.n	80064f8 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	695b      	ldr	r3, [r3, #20]
 80064f4:	089b      	lsrs	r3, r3, #2
 80064f6:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d00e      	beq.n	800651e <osThreadNew+0xca>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	2bbb      	cmp	r3, #187	; 0xbb
 8006506:	d90a      	bls.n	800651e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800650c:	2b00      	cmp	r3, #0
 800650e:	d006      	beq.n	800651e <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	695b      	ldr	r3, [r3, #20]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d002      	beq.n	800651e <osThreadNew+0xca>
        mem = 1;
 8006518:	2301      	movs	r3, #1
 800651a:	623b      	str	r3, [r7, #32]
 800651c:	e010      	b.n	8006540 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10c      	bne.n	8006540 <osThreadNew+0xec>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	2b00      	cmp	r3, #0
 800652c:	d108      	bne.n	8006540 <osThreadNew+0xec>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	691b      	ldr	r3, [r3, #16]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d104      	bne.n	8006540 <osThreadNew+0xec>
          mem = 0;
 8006536:	2300      	movs	r3, #0
 8006538:	623b      	str	r3, [r7, #32]
 800653a:	e001      	b.n	8006540 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800653c:	2300      	movs	r3, #0
 800653e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d110      	bne.n	8006568 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800654e:	9202      	str	r2, [sp, #8]
 8006550:	9301      	str	r3, [sp, #4]
 8006552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006554:	9300      	str	r3, [sp, #0]
 8006556:	68bb      	ldr	r3, [r7, #8]
 8006558:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800655a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f001 fe53 	bl	8008208 <xTaskCreateStatic>
 8006562:	4603      	mov	r3, r0
 8006564:	613b      	str	r3, [r7, #16]
 8006566:	e013      	b.n	8006590 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d110      	bne.n	8006590 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	b29a      	uxth	r2, r3
 8006572:	f107 0310 	add.w	r3, r7, #16
 8006576:	9301      	str	r3, [sp, #4]
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	9300      	str	r3, [sp, #0]
 800657c:	68bb      	ldr	r3, [r7, #8]
 800657e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006580:	68f8      	ldr	r0, [r7, #12]
 8006582:	f001 fea4 	bl	80082ce <xTaskCreate>
 8006586:	4603      	mov	r3, r0
 8006588:	2b01      	cmp	r3, #1
 800658a:	d001      	beq.n	8006590 <osThreadNew+0x13c>
          hTask = NULL;
 800658c:	2300      	movs	r3, #0
 800658e:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8006590:	693b      	ldr	r3, [r7, #16]
}
 8006592:	4618      	mov	r0, r3
 8006594:	3730      	adds	r7, #48	; 0x30
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}
 800659a:	bf00      	nop
 800659c:	20004ebc 	.word	0x20004ebc

080065a0 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80065a8:	f3ef 8305 	mrs	r3, IPSR
 80065ac:	613b      	str	r3, [r7, #16]
  return(result);
 80065ae:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d10f      	bne.n	80065d4 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065b4:	f3ef 8310 	mrs	r3, PRIMASK
 80065b8:	60fb      	str	r3, [r7, #12]
  return(result);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d105      	bne.n	80065cc <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80065c0:	f3ef 8311 	mrs	r3, BASEPRI
 80065c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d007      	beq.n	80065dc <osDelay+0x3c>
 80065cc:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <osDelay+0x58>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b02      	cmp	r3, #2
 80065d2:	d103      	bne.n	80065dc <osDelay+0x3c>
    stat = osErrorISR;
 80065d4:	f06f 0305 	mvn.w	r3, #5
 80065d8:	617b      	str	r3, [r7, #20]
 80065da:	e007      	b.n	80065ec <osDelay+0x4c>
  }
  else {
    stat = osOK;
 80065dc:	2300      	movs	r3, #0
 80065de:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <osDelay+0x4c>
      vTaskDelay(ticks);
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 ffce 	bl	8008588 <vTaskDelay>
    }
  }

  return (stat);
 80065ec:	697b      	ldr	r3, [r7, #20]
}
 80065ee:	4618      	mov	r0, r3
 80065f0:	3718      	adds	r7, #24
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20004ebc 	.word	0x20004ebc

080065fc <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b08a      	sub	sp, #40	; 0x28
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8006604:	2300      	movs	r3, #0
 8006606:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006608:	f3ef 8305 	mrs	r3, IPSR
 800660c:	613b      	str	r3, [r7, #16]
  return(result);
 800660e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006610:	2b00      	cmp	r3, #0
 8006612:	f040 8085 	bne.w	8006720 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006616:	f3ef 8310 	mrs	r3, PRIMASK
 800661a:	60fb      	str	r3, [r7, #12]
  return(result);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d105      	bne.n	800662e <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006622:	f3ef 8311 	mrs	r3, BASEPRI
 8006626:	60bb      	str	r3, [r7, #8]
  return(result);
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d003      	beq.n	8006636 <osMutexNew+0x3a>
 800662e:	4b3f      	ldr	r3, [pc, #252]	; (800672c <osMutexNew+0x130>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	2b02      	cmp	r3, #2
 8006634:	d074      	beq.n	8006720 <osMutexNew+0x124>
    if (attr != NULL) {
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <osMutexNew+0x48>
      type = attr->attr_bits;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	623b      	str	r3, [r7, #32]
 8006642:	e001      	b.n	8006648 <osMutexNew+0x4c>
    } else {
      type = 0U;
 8006644:	2300      	movs	r3, #0
 8006646:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006648:	6a3b      	ldr	r3, [r7, #32]
 800664a:	f003 0301 	and.w	r3, r3, #1
 800664e:	2b00      	cmp	r3, #0
 8006650:	d002      	beq.n	8006658 <osMutexNew+0x5c>
      rmtx = 1U;
 8006652:	2301      	movs	r3, #1
 8006654:	61fb      	str	r3, [r7, #28]
 8006656:	e001      	b.n	800665c <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006658:	2300      	movs	r3, #0
 800665a:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	f003 0308 	and.w	r3, r3, #8
 8006662:	2b00      	cmp	r3, #0
 8006664:	d15c      	bne.n	8006720 <osMutexNew+0x124>
      mem = -1;
 8006666:	f04f 33ff 	mov.w	r3, #4294967295
 800666a:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d015      	beq.n	800669e <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d006      	beq.n	8006688 <osMutexNew+0x8c>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	68db      	ldr	r3, [r3, #12]
 800667e:	2b4f      	cmp	r3, #79	; 0x4f
 8006680:	d902      	bls.n	8006688 <osMutexNew+0x8c>
          mem = 1;
 8006682:	2301      	movs	r3, #1
 8006684:	61bb      	str	r3, [r7, #24]
 8006686:	e00c      	b.n	80066a2 <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d108      	bne.n	80066a2 <osMutexNew+0xa6>
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	2b00      	cmp	r3, #0
 8006696:	d104      	bne.n	80066a2 <osMutexNew+0xa6>
            mem = 0;
 8006698:	2300      	movs	r3, #0
 800669a:	61bb      	str	r3, [r7, #24]
 800669c:	e001      	b.n	80066a2 <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 800669e:	2300      	movs	r3, #0
 80066a0:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d112      	bne.n	80066ce <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d007      	beq.n	80066be <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	4619      	mov	r1, r3
 80066b4:	2004      	movs	r0, #4
 80066b6:	f000 fe1a 	bl	80072ee <xQueueCreateMutexStatic>
 80066ba:	6278      	str	r0, [r7, #36]	; 0x24
 80066bc:	e016      	b.n	80066ec <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	4619      	mov	r1, r3
 80066c4:	2001      	movs	r0, #1
 80066c6:	f000 fe12 	bl	80072ee <xQueueCreateMutexStatic>
 80066ca:	6278      	str	r0, [r7, #36]	; 0x24
 80066cc:	e00e      	b.n	80066ec <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80066ce:	69bb      	ldr	r3, [r7, #24]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10b      	bne.n	80066ec <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d004      	beq.n	80066e4 <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 80066da:	2004      	movs	r0, #4
 80066dc:	f000 fdef 	bl	80072be <xQueueCreateMutex>
 80066e0:	6278      	str	r0, [r7, #36]	; 0x24
 80066e2:	e003      	b.n	80066ec <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 80066e4:	2001      	movs	r0, #1
 80066e6:	f000 fdea 	bl	80072be <xQueueCreateMutex>
 80066ea:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80066ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d00c      	beq.n	800670c <osMutexNew+0x110>
        if (attr != NULL) {
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <osMutexNew+0x104>
          name = attr->name;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	617b      	str	r3, [r7, #20]
 80066fe:	e001      	b.n	8006704 <osMutexNew+0x108>
        } else {
          name = NULL;
 8006700:	2300      	movs	r3, #0
 8006702:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 8006704:	6979      	ldr	r1, [r7, #20]
 8006706:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006708:	f001 fcf6 	bl	80080f8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800670c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670e:	2b00      	cmp	r3, #0
 8006710:	d006      	beq.n	8006720 <osMutexNew+0x124>
 8006712:	69fb      	ldr	r3, [r7, #28]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d003      	beq.n	8006720 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	f043 0301 	orr.w	r3, r3, #1
 800671e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006722:	4618      	mov	r0, r3
 8006724:	3728      	adds	r7, #40	; 0x28
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}
 800672a:	bf00      	nop
 800672c:	20004ebc 	.word	0x20004ebc

08006730 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006730:	b580      	push	{r7, lr}
 8006732:	b088      	sub	sp, #32
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f023 0301 	bic.w	r3, r3, #1
 8006740:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	f003 0301 	and.w	r3, r3, #1
 8006748:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800674a:	2300      	movs	r3, #0
 800674c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800674e:	f3ef 8305 	mrs	r3, IPSR
 8006752:	613b      	str	r3, [r7, #16]
  return(result);
 8006754:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10f      	bne.n	800677a <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800675a:	f3ef 8310 	mrs	r3, PRIMASK
 800675e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d105      	bne.n	8006772 <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006766:	f3ef 8311 	mrs	r3, BASEPRI
 800676a:	60bb      	str	r3, [r7, #8]
  return(result);
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d007      	beq.n	8006782 <osMutexAcquire+0x52>
 8006772:	4b1d      	ldr	r3, [pc, #116]	; (80067e8 <osMutexAcquire+0xb8>)
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	2b02      	cmp	r3, #2
 8006778:	d103      	bne.n	8006782 <osMutexAcquire+0x52>
    stat = osErrorISR;
 800677a:	f06f 0305 	mvn.w	r3, #5
 800677e:	61fb      	str	r3, [r7, #28]
 8006780:	e02c      	b.n	80067dc <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d103      	bne.n	8006790 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 8006788:	f06f 0303 	mvn.w	r3, #3
 800678c:	61fb      	str	r3, [r7, #28]
 800678e:	e025      	b.n	80067dc <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d011      	beq.n	80067ba <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	69b8      	ldr	r0, [r7, #24]
 800679a:	f000 fdf9 	bl	8007390 <xQueueTakeMutexRecursive>
 800679e:	4603      	mov	r3, r0
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d01b      	beq.n	80067dc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80067a4:	683b      	ldr	r3, [r7, #0]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80067aa:	f06f 0301 	mvn.w	r3, #1
 80067ae:	61fb      	str	r3, [r7, #28]
 80067b0:	e014      	b.n	80067dc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80067b2:	f06f 0302 	mvn.w	r3, #2
 80067b6:	61fb      	str	r3, [r7, #28]
 80067b8:	e010      	b.n	80067dc <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80067ba:	6839      	ldr	r1, [r7, #0]
 80067bc:	69b8      	ldr	r0, [r7, #24]
 80067be:	f001 f9b3 	bl	8007b28 <xQueueSemaphoreTake>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	d009      	beq.n	80067dc <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80067ce:	f06f 0301 	mvn.w	r3, #1
 80067d2:	61fb      	str	r3, [r7, #28]
 80067d4:	e002      	b.n	80067dc <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80067d6:	f06f 0302 	mvn.w	r3, #2
 80067da:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80067dc:	69fb      	ldr	r3, [r7, #28]
}
 80067de:	4618      	mov	r0, r3
 80067e0:	3720      	adds	r7, #32
 80067e2:	46bd      	mov	sp, r7
 80067e4:	bd80      	pop	{r7, pc}
 80067e6:	bf00      	nop
 80067e8:	20004ebc 	.word	0x20004ebc

080067ec <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f023 0301 	bic.w	r3, r3, #1
 80067fa:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	f003 0301 	and.w	r3, r3, #1
 8006802:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006804:	2300      	movs	r3, #0
 8006806:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006808:	f3ef 8305 	mrs	r3, IPSR
 800680c:	613b      	str	r3, [r7, #16]
  return(result);
 800680e:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006810:	2b00      	cmp	r3, #0
 8006812:	d10f      	bne.n	8006834 <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006814:	f3ef 8310 	mrs	r3, PRIMASK
 8006818:	60fb      	str	r3, [r7, #12]
  return(result);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d105      	bne.n	800682c <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006820:	f3ef 8311 	mrs	r3, BASEPRI
 8006824:	60bb      	str	r3, [r7, #8]
  return(result);
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d007      	beq.n	800683c <osMutexRelease+0x50>
 800682c:	4b16      	ldr	r3, [pc, #88]	; (8006888 <osMutexRelease+0x9c>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	2b02      	cmp	r3, #2
 8006832:	d103      	bne.n	800683c <osMutexRelease+0x50>
    stat = osErrorISR;
 8006834:	f06f 0305 	mvn.w	r3, #5
 8006838:	61fb      	str	r3, [r7, #28]
 800683a:	e01f      	b.n	800687c <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 800683c:	69bb      	ldr	r3, [r7, #24]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d103      	bne.n	800684a <osMutexRelease+0x5e>
    stat = osErrorParameter;
 8006842:	f06f 0303 	mvn.w	r3, #3
 8006846:	61fb      	str	r3, [r7, #28]
 8006848:	e018      	b.n	800687c <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d009      	beq.n	8006864 <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006850:	69b8      	ldr	r0, [r7, #24]
 8006852:	f000 fd67 	bl	8007324 <xQueueGiveMutexRecursive>
 8006856:	4603      	mov	r3, r0
 8006858:	2b01      	cmp	r3, #1
 800685a:	d00f      	beq.n	800687c <osMutexRelease+0x90>
        stat = osErrorResource;
 800685c:	f06f 0302 	mvn.w	r3, #2
 8006860:	61fb      	str	r3, [r7, #28]
 8006862:	e00b      	b.n	800687c <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8006864:	2300      	movs	r3, #0
 8006866:	2200      	movs	r2, #0
 8006868:	2100      	movs	r1, #0
 800686a:	69b8      	ldr	r0, [r7, #24]
 800686c:	f000 fe3a 	bl	80074e4 <xQueueGenericSend>
 8006870:	4603      	mov	r3, r0
 8006872:	2b01      	cmp	r3, #1
 8006874:	d002      	beq.n	800687c <osMutexRelease+0x90>
        stat = osErrorResource;
 8006876:	f06f 0302 	mvn.w	r3, #2
 800687a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 800687c:	69fb      	ldr	r3, [r7, #28]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3720      	adds	r7, #32
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20004ebc 	.word	0x20004ebc

0800688c <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800688c:	b580      	push	{r7, lr}
 800688e:	b08c      	sub	sp, #48	; 0x30
 8006890:	af02      	add	r7, sp, #8
 8006892:	60f8      	str	r0, [r7, #12]
 8006894:	60b9      	str	r1, [r7, #8]
 8006896:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8006898:	2300      	movs	r3, #0
 800689a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800689c:	f3ef 8305 	mrs	r3, IPSR
 80068a0:	61bb      	str	r3, [r7, #24]
  return(result);
 80068a2:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	f040 8086 	bne.w	80069b6 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068aa:	f3ef 8310 	mrs	r3, PRIMASK
 80068ae:	617b      	str	r3, [r7, #20]
  return(result);
 80068b0:	697b      	ldr	r3, [r7, #20]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d105      	bne.n	80068c2 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068b6:	f3ef 8311 	mrs	r3, BASEPRI
 80068ba:	613b      	str	r3, [r7, #16]
  return(result);
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <osSemaphoreNew+0x3e>
 80068c2:	4b3f      	ldr	r3, [pc, #252]	; (80069c0 <osSemaphoreNew+0x134>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d075      	beq.n	80069b6 <osSemaphoreNew+0x12a>
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d072      	beq.n	80069b6 <osSemaphoreNew+0x12a>
 80068d0:	68ba      	ldr	r2, [r7, #8]
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d86e      	bhi.n	80069b6 <osSemaphoreNew+0x12a>
    mem = -1;
 80068d8:	f04f 33ff 	mov.w	r3, #4294967295
 80068dc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d015      	beq.n	8006910 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d006      	beq.n	80068fa <osSemaphoreNew+0x6e>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	68db      	ldr	r3, [r3, #12]
 80068f0:	2b4f      	cmp	r3, #79	; 0x4f
 80068f2:	d902      	bls.n	80068fa <osSemaphoreNew+0x6e>
        mem = 1;
 80068f4:	2301      	movs	r3, #1
 80068f6:	623b      	str	r3, [r7, #32]
 80068f8:	e00c      	b.n	8006914 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d108      	bne.n	8006914 <osSemaphoreNew+0x88>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	68db      	ldr	r3, [r3, #12]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d104      	bne.n	8006914 <osSemaphoreNew+0x88>
          mem = 0;
 800690a:	2300      	movs	r3, #0
 800690c:	623b      	str	r3, [r7, #32]
 800690e:	e001      	b.n	8006914 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006910:	2300      	movs	r3, #0
 8006912:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 8006914:	6a3b      	ldr	r3, [r7, #32]
 8006916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800691a:	d04c      	beq.n	80069b6 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d128      	bne.n	8006974 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d10a      	bne.n	800693e <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	689b      	ldr	r3, [r3, #8]
 800692c:	2203      	movs	r2, #3
 800692e:	9200      	str	r2, [sp, #0]
 8006930:	2200      	movs	r2, #0
 8006932:	2100      	movs	r1, #0
 8006934:	2001      	movs	r0, #1
 8006936:	f000 fbc1 	bl	80070bc <xQueueGenericCreateStatic>
 800693a:	6278      	str	r0, [r7, #36]	; 0x24
 800693c:	e005      	b.n	800694a <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800693e:	2203      	movs	r2, #3
 8006940:	2100      	movs	r1, #0
 8006942:	2001      	movs	r0, #1
 8006944:	f000 fc3c 	bl	80071c0 <xQueueGenericCreate>
 8006948:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800694a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800694c:	2b00      	cmp	r3, #0
 800694e:	d022      	beq.n	8006996 <osSemaphoreNew+0x10a>
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01f      	beq.n	8006996 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006956:	2300      	movs	r3, #0
 8006958:	2200      	movs	r2, #0
 800695a:	2100      	movs	r1, #0
 800695c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800695e:	f000 fdc1 	bl	80074e4 <xQueueGenericSend>
 8006962:	4603      	mov	r3, r0
 8006964:	2b01      	cmp	r3, #1
 8006966:	d016      	beq.n	8006996 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006968:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800696a:	f001 fa77 	bl	8007e5c <vQueueDelete>
            hSemaphore = NULL;
 800696e:	2300      	movs	r3, #0
 8006970:	627b      	str	r3, [r7, #36]	; 0x24
 8006972:	e010      	b.n	8006996 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	2b01      	cmp	r3, #1
 8006978:	d108      	bne.n	800698c <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	689b      	ldr	r3, [r3, #8]
 800697e:	461a      	mov	r2, r3
 8006980:	68b9      	ldr	r1, [r7, #8]
 8006982:	68f8      	ldr	r0, [r7, #12]
 8006984:	f000 fd3c 	bl	8007400 <xQueueCreateCountingSemaphoreStatic>
 8006988:	6278      	str	r0, [r7, #36]	; 0x24
 800698a:	e004      	b.n	8006996 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800698c:	68b9      	ldr	r1, [r7, #8]
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 fd71 	bl	8007476 <xQueueCreateCountingSemaphore>
 8006994:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00c      	beq.n	80069b6 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d003      	beq.n	80069aa <osSemaphoreNew+0x11e>
          name = attr->name;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	61fb      	str	r3, [r7, #28]
 80069a8:	e001      	b.n	80069ae <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80069aa:	2300      	movs	r3, #0
 80069ac:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80069ae:	69f9      	ldr	r1, [r7, #28]
 80069b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80069b2:	f001 fba1 	bl	80080f8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	3728      	adds	r7, #40	; 0x28
 80069bc:	46bd      	mov	sp, r7
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	20004ebc 	.word	0x20004ebc

080069c4 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b088      	sub	sp, #32
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80069d2:	2300      	movs	r3, #0
 80069d4:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80069d6:	69bb      	ldr	r3, [r7, #24]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d103      	bne.n	80069e4 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80069dc:	f06f 0303 	mvn.w	r3, #3
 80069e0:	61fb      	str	r3, [r7, #28]
 80069e2:	e04b      	b.n	8006a7c <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80069e4:	f3ef 8305 	mrs	r3, IPSR
 80069e8:	617b      	str	r3, [r7, #20]
  return(result);
 80069ea:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d10f      	bne.n	8006a10 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069f0:	f3ef 8310 	mrs	r3, PRIMASK
 80069f4:	613b      	str	r3, [r7, #16]
  return(result);
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d105      	bne.n	8006a08 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80069fc:	f3ef 8311 	mrs	r3, BASEPRI
 8006a00:	60fb      	str	r3, [r7, #12]
  return(result);
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d026      	beq.n	8006a56 <osSemaphoreAcquire+0x92>
 8006a08:	4b1f      	ldr	r3, [pc, #124]	; (8006a88 <osSemaphoreAcquire+0xc4>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	d122      	bne.n	8006a56 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d003      	beq.n	8006a1e <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 8006a16:	f06f 0303 	mvn.w	r3, #3
 8006a1a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006a1c:	e02d      	b.n	8006a7a <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8006a22:	f107 0308 	add.w	r3, r7, #8
 8006a26:	461a      	mov	r2, r3
 8006a28:	2100      	movs	r1, #0
 8006a2a:	69b8      	ldr	r0, [r7, #24]
 8006a2c:	f001 f990 	bl	8007d50 <xQueueReceiveFromISR>
 8006a30:	4603      	mov	r3, r0
 8006a32:	2b01      	cmp	r3, #1
 8006a34:	d003      	beq.n	8006a3e <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 8006a36:	f06f 0302 	mvn.w	r3, #2
 8006a3a:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006a3c:	e01d      	b.n	8006a7a <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d01a      	beq.n	8006a7a <osSemaphoreAcquire+0xb6>
 8006a44:	4b11      	ldr	r3, [pc, #68]	; (8006a8c <osSemaphoreAcquire+0xc8>)
 8006a46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	f3bf 8f4f 	dsb	sy
 8006a50:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8006a54:	e011      	b.n	8006a7a <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8006a56:	6839      	ldr	r1, [r7, #0]
 8006a58:	69b8      	ldr	r0, [r7, #24]
 8006a5a:	f001 f865 	bl	8007b28 <xQueueSemaphoreTake>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d00b      	beq.n	8006a7c <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d003      	beq.n	8006a72 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006a6a:	f06f 0301 	mvn.w	r3, #1
 8006a6e:	61fb      	str	r3, [r7, #28]
 8006a70:	e004      	b.n	8006a7c <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8006a72:	f06f 0302 	mvn.w	r3, #2
 8006a76:	61fb      	str	r3, [r7, #28]
 8006a78:	e000      	b.n	8006a7c <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 8006a7a:	bf00      	nop
      }
    }
  }

  return (stat);
 8006a7c:	69fb      	ldr	r3, [r7, #28]
}
 8006a7e:	4618      	mov	r0, r3
 8006a80:	3720      	adds	r7, #32
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20004ebc 	.word	0x20004ebc
 8006a8c:	e000ed04 	.word	0xe000ed04

08006a90 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b088      	sub	sp, #32
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8006aa0:	69bb      	ldr	r3, [r7, #24]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d103      	bne.n	8006aae <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8006aa6:	f06f 0303 	mvn.w	r3, #3
 8006aaa:	61fb      	str	r3, [r7, #28]
 8006aac:	e03e      	b.n	8006b2c <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006aae:	f3ef 8305 	mrs	r3, IPSR
 8006ab2:	617b      	str	r3, [r7, #20]
  return(result);
 8006ab4:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d10f      	bne.n	8006ada <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aba:	f3ef 8310 	mrs	r3, PRIMASK
 8006abe:	613b      	str	r3, [r7, #16]
  return(result);
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d105      	bne.n	8006ad2 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006ac6:	f3ef 8311 	mrs	r3, BASEPRI
 8006aca:	60fb      	str	r3, [r7, #12]
  return(result);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d01e      	beq.n	8006b10 <osSemaphoreRelease+0x80>
 8006ad2:	4b19      	ldr	r3, [pc, #100]	; (8006b38 <osSemaphoreRelease+0xa8>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d11a      	bne.n	8006b10 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006ada:	2300      	movs	r3, #0
 8006adc:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006ade:	f107 0308 	add.w	r3, r7, #8
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	69b8      	ldr	r0, [r7, #24]
 8006ae6:	f000 fea3 	bl	8007830 <xQueueGiveFromISR>
 8006aea:	4603      	mov	r3, r0
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d003      	beq.n	8006af8 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006af0:	f06f 0302 	mvn.w	r3, #2
 8006af4:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006af6:	e018      	b.n	8006b2a <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d015      	beq.n	8006b2a <osSemaphoreRelease+0x9a>
 8006afe:	4b0f      	ldr	r3, [pc, #60]	; (8006b3c <osSemaphoreRelease+0xac>)
 8006b00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006b04:	601a      	str	r2, [r3, #0]
 8006b06:	f3bf 8f4f 	dsb	sy
 8006b0a:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006b0e:	e00c      	b.n	8006b2a <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006b10:	2300      	movs	r3, #0
 8006b12:	2200      	movs	r2, #0
 8006b14:	2100      	movs	r1, #0
 8006b16:	69b8      	ldr	r0, [r7, #24]
 8006b18:	f000 fce4 	bl	80074e4 <xQueueGenericSend>
 8006b1c:	4603      	mov	r3, r0
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	d004      	beq.n	8006b2c <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 8006b22:	f06f 0302 	mvn.w	r3, #2
 8006b26:	61fb      	str	r3, [r7, #28]
 8006b28:	e000      	b.n	8006b2c <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006b2a:	bf00      	nop
    }
  }

  return (stat);
 8006b2c:	69fb      	ldr	r3, [r7, #28]
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3720      	adds	r7, #32
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20004ebc 	.word	0x20004ebc
 8006b3c:	e000ed04 	.word	0xe000ed04

08006b40 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b08c      	sub	sp, #48	; 0x30
 8006b44:	af02      	add	r7, sp, #8
 8006b46:	60f8      	str	r0, [r7, #12]
 8006b48:	60b9      	str	r1, [r7, #8]
 8006b4a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b50:	f3ef 8305 	mrs	r3, IPSR
 8006b54:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b56:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d16f      	bne.n	8006c3c <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b5c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b60:	617b      	str	r3, [r7, #20]
  return(result);
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d105      	bne.n	8006b74 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b68:	f3ef 8311 	mrs	r3, BASEPRI
 8006b6c:	613b      	str	r3, [r7, #16]
  return(result);
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d003      	beq.n	8006b7c <osMessageQueueNew+0x3c>
 8006b74:	4b34      	ldr	r3, [pc, #208]	; (8006c48 <osMessageQueueNew+0x108>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d05f      	beq.n	8006c3c <osMessageQueueNew+0xfc>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d05c      	beq.n	8006c3c <osMessageQueueNew+0xfc>
 8006b82:	68bb      	ldr	r3, [r7, #8]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d059      	beq.n	8006c3c <osMessageQueueNew+0xfc>
    mem = -1;
 8006b88:	f04f 33ff 	mov.w	r3, #4294967295
 8006b8c:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d029      	beq.n	8006be8 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d012      	beq.n	8006bc2 <osMessageQueueNew+0x82>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	2b4f      	cmp	r3, #79	; 0x4f
 8006ba2:	d90e      	bls.n	8006bc2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d00a      	beq.n	8006bc2 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	695a      	ldr	r2, [r3, #20]
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	68b9      	ldr	r1, [r7, #8]
 8006bb4:	fb01 f303 	mul.w	r3, r1, r3
 8006bb8:	429a      	cmp	r2, r3
 8006bba:	d302      	bcc.n	8006bc2 <osMessageQueueNew+0x82>
        mem = 1;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	623b      	str	r3, [r7, #32]
 8006bc0:	e014      	b.n	8006bec <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	689b      	ldr	r3, [r3, #8]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d110      	bne.n	8006bec <osMessageQueueNew+0xac>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10c      	bne.n	8006bec <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d108      	bne.n	8006bec <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	695b      	ldr	r3, [r3, #20]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d104      	bne.n	8006bec <osMessageQueueNew+0xac>
          mem = 0;
 8006be2:	2300      	movs	r3, #0
 8006be4:	623b      	str	r3, [r7, #32]
 8006be6:	e001      	b.n	8006bec <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006be8:	2300      	movs	r3, #0
 8006bea:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006bec:	6a3b      	ldr	r3, [r7, #32]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d10b      	bne.n	8006c0a <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691a      	ldr	r2, [r3, #16]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	9100      	str	r1, [sp, #0]
 8006bfe:	68b9      	ldr	r1, [r7, #8]
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 fa5b 	bl	80070bc <xQueueGenericCreateStatic>
 8006c06:	6278      	str	r0, [r7, #36]	; 0x24
 8006c08:	e008      	b.n	8006c1c <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006c0a:	6a3b      	ldr	r3, [r7, #32]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d105      	bne.n	8006c1c <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006c10:	2200      	movs	r2, #0
 8006c12:	68b9      	ldr	r1, [r7, #8]
 8006c14:	68f8      	ldr	r0, [r7, #12]
 8006c16:	f000 fad3 	bl	80071c0 <xQueueGenericCreate>
 8006c1a:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d00c      	beq.n	8006c3c <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d003      	beq.n	8006c30 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	61fb      	str	r3, [r7, #28]
 8006c2e:	e001      	b.n	8006c34 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006c30:	2300      	movs	r3, #0
 8006c32:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006c34:	69f9      	ldr	r1, [r7, #28]
 8006c36:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006c38:	f001 fa5e 	bl	80080f8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3728      	adds	r7, #40	; 0x28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	20004ebc 	.word	0x20004ebc

08006c4c <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08a      	sub	sp, #40	; 0x28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006c60:	2300      	movs	r3, #0
 8006c62:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006c64:	f3ef 8305 	mrs	r3, IPSR
 8006c68:	61fb      	str	r3, [r7, #28]
  return(result);
 8006c6a:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d10f      	bne.n	8006c90 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c70:	f3ef 8310 	mrs	r3, PRIMASK
 8006c74:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c76:	69bb      	ldr	r3, [r7, #24]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d105      	bne.n	8006c88 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006c7c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c80:	617b      	str	r3, [r7, #20]
  return(result);
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d02c      	beq.n	8006ce2 <osMessageQueuePut+0x96>
 8006c88:	4b28      	ldr	r3, [pc, #160]	; (8006d2c <osMessageQueuePut+0xe0>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2b02      	cmp	r3, #2
 8006c8e:	d128      	bne.n	8006ce2 <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c90:	6a3b      	ldr	r3, [r7, #32]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d005      	beq.n	8006ca2 <osMessageQueuePut+0x56>
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <osMessageQueuePut+0x56>
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006ca2:	f06f 0303 	mvn.w	r3, #3
 8006ca6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ca8:	e039      	b.n	8006d1e <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006caa:	2300      	movs	r3, #0
 8006cac:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006cae:	f107 0210 	add.w	r2, r7, #16
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	68b9      	ldr	r1, [r7, #8]
 8006cb6:	6a38      	ldr	r0, [r7, #32]
 8006cb8:	f000 fd1a 	bl	80076f0 <xQueueGenericSendFromISR>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d003      	beq.n	8006cca <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006cc2:	f06f 0302 	mvn.w	r3, #2
 8006cc6:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006cc8:	e029      	b.n	8006d1e <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006cca:	693b      	ldr	r3, [r7, #16]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d026      	beq.n	8006d1e <osMessageQueuePut+0xd2>
 8006cd0:	4b17      	ldr	r3, [pc, #92]	; (8006d30 <osMessageQueuePut+0xe4>)
 8006cd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ce0:	e01d      	b.n	8006d1e <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006ce2:	6a3b      	ldr	r3, [r7, #32]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d002      	beq.n	8006cee <osMessageQueuePut+0xa2>
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d103      	bne.n	8006cf6 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006cee:	f06f 0303 	mvn.w	r3, #3
 8006cf2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cf4:	e014      	b.n	8006d20 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	683a      	ldr	r2, [r7, #0]
 8006cfa:	68b9      	ldr	r1, [r7, #8]
 8006cfc:	6a38      	ldr	r0, [r7, #32]
 8006cfe:	f000 fbf1 	bl	80074e4 <xQueueGenericSend>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d00b      	beq.n	8006d20 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d003      	beq.n	8006d16 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006d0e:	f06f 0301 	mvn.w	r3, #1
 8006d12:	627b      	str	r3, [r7, #36]	; 0x24
 8006d14:	e004      	b.n	8006d20 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006d16:	f06f 0302 	mvn.w	r3, #2
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d1c:	e000      	b.n	8006d20 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d1e:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3728      	adds	r7, #40	; 0x28
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20004ebc 	.word	0x20004ebc
 8006d30:	e000ed04 	.word	0xe000ed04

08006d34 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08a      	sub	sp, #40	; 0x28
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	607a      	str	r2, [r7, #4]
 8006d40:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006d46:	2300      	movs	r3, #0
 8006d48:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006d4a:	f3ef 8305 	mrs	r3, IPSR
 8006d4e:	61fb      	str	r3, [r7, #28]
  return(result);
 8006d50:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d10f      	bne.n	8006d76 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d56:	f3ef 8310 	mrs	r3, PRIMASK
 8006d5a:	61bb      	str	r3, [r7, #24]
  return(result);
 8006d5c:	69bb      	ldr	r3, [r7, #24]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d105      	bne.n	8006d6e <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006d62:	f3ef 8311 	mrs	r3, BASEPRI
 8006d66:	617b      	str	r3, [r7, #20]
  return(result);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d02c      	beq.n	8006dc8 <osMessageQueueGet+0x94>
 8006d6e:	4b28      	ldr	r3, [pc, #160]	; (8006e10 <osMessageQueueGet+0xdc>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b02      	cmp	r3, #2
 8006d74:	d128      	bne.n	8006dc8 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d76:	6a3b      	ldr	r3, [r7, #32]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d005      	beq.n	8006d88 <osMessageQueueGet+0x54>
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d002      	beq.n	8006d88 <osMessageQueueGet+0x54>
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d003      	beq.n	8006d90 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006d88:	f06f 0303 	mvn.w	r3, #3
 8006d8c:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006d8e:	e038      	b.n	8006e02 <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006d90:	2300      	movs	r3, #0
 8006d92:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006d94:	f107 0310 	add.w	r3, r7, #16
 8006d98:	461a      	mov	r2, r3
 8006d9a:	68b9      	ldr	r1, [r7, #8]
 8006d9c:	6a38      	ldr	r0, [r7, #32]
 8006d9e:	f000 ffd7 	bl	8007d50 <xQueueReceiveFromISR>
 8006da2:	4603      	mov	r3, r0
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	d003      	beq.n	8006db0 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006da8:	f06f 0302 	mvn.w	r3, #2
 8006dac:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006dae:	e028      	b.n	8006e02 <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d025      	beq.n	8006e02 <osMessageQueueGet+0xce>
 8006db6:	4b17      	ldr	r3, [pc, #92]	; (8006e14 <osMessageQueueGet+0xe0>)
 8006db8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dbc:	601a      	str	r2, [r3, #0]
 8006dbe:	f3bf 8f4f 	dsb	sy
 8006dc2:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006dc6:	e01c      	b.n	8006e02 <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006dc8:	6a3b      	ldr	r3, [r7, #32]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d002      	beq.n	8006dd4 <osMessageQueueGet+0xa0>
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d103      	bne.n	8006ddc <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006dd4:	f06f 0303 	mvn.w	r3, #3
 8006dd8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dda:	e013      	b.n	8006e04 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006ddc:	683a      	ldr	r2, [r7, #0]
 8006dde:	68b9      	ldr	r1, [r7, #8]
 8006de0:	6a38      	ldr	r0, [r7, #32]
 8006de2:	f000 fdbb 	bl	800795c <xQueueReceive>
 8006de6:	4603      	mov	r3, r0
 8006de8:	2b01      	cmp	r3, #1
 8006dea:	d00b      	beq.n	8006e04 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d003      	beq.n	8006dfa <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006df2:	f06f 0301 	mvn.w	r3, #1
 8006df6:	627b      	str	r3, [r7, #36]	; 0x24
 8006df8:	e004      	b.n	8006e04 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006dfa:	f06f 0302 	mvn.w	r3, #2
 8006dfe:	627b      	str	r3, [r7, #36]	; 0x24
 8006e00:	e000      	b.n	8006e04 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006e02:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3728      	adds	r7, #40	; 0x28
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	20004ebc 	.word	0x20004ebc
 8006e14:	e000ed04 	.word	0xe000ed04

08006e18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006e18:	b480      	push	{r7}
 8006e1a:	b085      	sub	sp, #20
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	60f8      	str	r0, [r7, #12]
 8006e20:	60b9      	str	r1, [r7, #8]
 8006e22:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4a07      	ldr	r2, [pc, #28]	; (8006e44 <vApplicationGetIdleTaskMemory+0x2c>)
 8006e28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	4a06      	ldr	r2, [pc, #24]	; (8006e48 <vApplicationGetIdleTaskMemory+0x30>)
 8006e2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2280      	movs	r2, #128	; 0x80
 8006e34:	601a      	str	r2, [r3, #0]
}
 8006e36:	bf00      	nop
 8006e38:	3714      	adds	r7, #20
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e40:	4770      	bx	lr
 8006e42:	bf00      	nop
 8006e44:	20004ec0 	.word	0x20004ec0
 8006e48:	20004f7c 	.word	0x20004f7c

08006e4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	4a07      	ldr	r2, [pc, #28]	; (8006e78 <vApplicationGetTimerTaskMemory+0x2c>)
 8006e5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	4a06      	ldr	r2, [pc, #24]	; (8006e7c <vApplicationGetTimerTaskMemory+0x30>)
 8006e62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006e6a:	601a      	str	r2, [r3, #0]
}
 8006e6c:	bf00      	nop
 8006e6e:	3714      	adds	r7, #20
 8006e70:	46bd      	mov	sp, r7
 8006e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e76:	4770      	bx	lr
 8006e78:	2000517c 	.word	0x2000517c
 8006e7c:	20005238 	.word	0x20005238

08006e80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006e80:	b480      	push	{r7}
 8006e82:	b083      	sub	sp, #12
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f103 0208 	add.w	r2, r3, #8
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f04f 32ff 	mov.w	r2, #4294967295
 8006e98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f103 0208 	add.w	r2, r3, #8
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f103 0208 	add.w	r2, r3, #8
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006eb4:	bf00      	nop
 8006eb6:	370c      	adds	r7, #12
 8006eb8:	46bd      	mov	sp, r7
 8006eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebe:	4770      	bx	lr

08006ec0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006ece:	bf00      	nop
 8006ed0:	370c      	adds	r7, #12
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed8:	4770      	bx	lr

08006eda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006eda:	b480      	push	{r7}
 8006edc:	b085      	sub	sp, #20
 8006ede:	af00      	add	r7, sp, #0
 8006ee0:	6078      	str	r0, [r7, #4]
 8006ee2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	68fa      	ldr	r2, [r7, #12]
 8006eee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	689b      	ldr	r3, [r3, #8]
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	683a      	ldr	r2, [r7, #0]
 8006f04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	1c5a      	adds	r2, r3, #1
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	601a      	str	r2, [r3, #0]
}
 8006f16:	bf00      	nop
 8006f18:	3714      	adds	r7, #20
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr

08006f22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006f22:	b480      	push	{r7}
 8006f24:	b085      	sub	sp, #20
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	6078      	str	r0, [r7, #4]
 8006f2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006f32:	68bb      	ldr	r3, [r7, #8]
 8006f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f38:	d103      	bne.n	8006f42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	e00c      	b.n	8006f5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	3308      	adds	r3, #8
 8006f46:	60fb      	str	r3, [r7, #12]
 8006f48:	e002      	b.n	8006f50 <vListInsert+0x2e>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	685b      	ldr	r3, [r3, #4]
 8006f4e:	60fb      	str	r3, [r7, #12]
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	68ba      	ldr	r2, [r7, #8]
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d2f6      	bcs.n	8006f4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	685a      	ldr	r2, [r3, #4]
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	685b      	ldr	r3, [r3, #4]
 8006f68:	683a      	ldr	r2, [r7, #0]
 8006f6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	68fa      	ldr	r2, [r7, #12]
 8006f70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	683a      	ldr	r2, [r7, #0]
 8006f76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	687a      	ldr	r2, [r7, #4]
 8006f7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	1c5a      	adds	r2, r3, #1
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	601a      	str	r2, [r3, #0]
}
 8006f88:	bf00      	nop
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	691b      	ldr	r3, [r3, #16]
 8006fa0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	687a      	ldr	r2, [r7, #4]
 8006fa8:	6892      	ldr	r2, [r2, #8]
 8006faa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	689b      	ldr	r3, [r3, #8]
 8006fb0:	687a      	ldr	r2, [r7, #4]
 8006fb2:	6852      	ldr	r2, [r2, #4]
 8006fb4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	685b      	ldr	r3, [r3, #4]
 8006fba:	687a      	ldr	r2, [r7, #4]
 8006fbc:	429a      	cmp	r2, r3
 8006fbe:	d103      	bne.n	8006fc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	689a      	ldr	r2, [r3, #8]
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2200      	movs	r2, #0
 8006fcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	1e5a      	subs	r2, r3, #1
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	681b      	ldr	r3, [r3, #0]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3714      	adds	r7, #20
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10c      	bne.n	8007016 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	b672      	cpsid	i
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	b662      	cpsie	i
 8007010:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8007016:	f002 fdd1 	bl	8009bbc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007022:	68f9      	ldr	r1, [r7, #12]
 8007024:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007026:	fb01 f303 	mul.w	r3, r1, r3
 800702a:	441a      	add	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	2200      	movs	r2, #0
 8007034:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681a      	ldr	r2, [r3, #0]
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681a      	ldr	r2, [r3, #0]
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007046:	3b01      	subs	r3, #1
 8007048:	68f9      	ldr	r1, [r7, #12]
 800704a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800704c:	fb01 f303 	mul.w	r3, r1, r3
 8007050:	441a      	add	r2, r3
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	22ff      	movs	r2, #255	; 0xff
 800705a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	22ff      	movs	r2, #255	; 0xff
 8007062:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d114      	bne.n	8007096 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	691b      	ldr	r3, [r3, #16]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d01a      	beq.n	80070aa <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	3310      	adds	r3, #16
 8007078:	4618      	mov	r0, r3
 800707a:	f001 fd75 	bl	8008b68 <xTaskRemoveFromEventList>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d012      	beq.n	80070aa <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007084:	4b0c      	ldr	r3, [pc, #48]	; (80070b8 <xQueueGenericReset+0xd0>)
 8007086:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800708a:	601a      	str	r2, [r3, #0]
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	e009      	b.n	80070aa <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	3310      	adds	r3, #16
 800709a:	4618      	mov	r0, r3
 800709c:	f7ff fef0 	bl	8006e80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	3324      	adds	r3, #36	; 0x24
 80070a4:	4618      	mov	r0, r3
 80070a6:	f7ff feeb 	bl	8006e80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80070aa:	f002 fdbb 	bl	8009c24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80070ae:	2301      	movs	r3, #1
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3710      	adds	r7, #16
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}
 80070b8:	e000ed04 	.word	0xe000ed04

080070bc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b08e      	sub	sp, #56	; 0x38
 80070c0:	af02      	add	r7, sp, #8
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	607a      	str	r2, [r7, #4]
 80070c8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d10c      	bne.n	80070ea <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 80070d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070d4:	b672      	cpsid	i
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	b662      	cpsie	i
 80070e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80070e6:	bf00      	nop
 80070e8:	e7fe      	b.n	80070e8 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10c      	bne.n	800710a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f4:	b672      	cpsid	i
 80070f6:	f383 8811 	msr	BASEPRI, r3
 80070fa:	f3bf 8f6f 	isb	sy
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	b662      	cpsie	i
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007106:	bf00      	nop
 8007108:	e7fe      	b.n	8007108 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d002      	beq.n	8007116 <xQueueGenericCreateStatic+0x5a>
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	2b00      	cmp	r3, #0
 8007114:	d001      	beq.n	800711a <xQueueGenericCreateStatic+0x5e>
 8007116:	2301      	movs	r3, #1
 8007118:	e000      	b.n	800711c <xQueueGenericCreateStatic+0x60>
 800711a:	2300      	movs	r3, #0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d10c      	bne.n	800713a <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007124:	b672      	cpsid	i
 8007126:	f383 8811 	msr	BASEPRI, r3
 800712a:	f3bf 8f6f 	isb	sy
 800712e:	f3bf 8f4f 	dsb	sy
 8007132:	b662      	cpsie	i
 8007134:	623b      	str	r3, [r7, #32]
}
 8007136:	bf00      	nop
 8007138:	e7fe      	b.n	8007138 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d102      	bne.n	8007146 <xQueueGenericCreateStatic+0x8a>
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	2b00      	cmp	r3, #0
 8007144:	d101      	bne.n	800714a <xQueueGenericCreateStatic+0x8e>
 8007146:	2301      	movs	r3, #1
 8007148:	e000      	b.n	800714c <xQueueGenericCreateStatic+0x90>
 800714a:	2300      	movs	r3, #0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10c      	bne.n	800716a <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007154:	b672      	cpsid	i
 8007156:	f383 8811 	msr	BASEPRI, r3
 800715a:	f3bf 8f6f 	isb	sy
 800715e:	f3bf 8f4f 	dsb	sy
 8007162:	b662      	cpsie	i
 8007164:	61fb      	str	r3, [r7, #28]
}
 8007166:	bf00      	nop
 8007168:	e7fe      	b.n	8007168 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800716a:	2350      	movs	r3, #80	; 0x50
 800716c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800716e:	697b      	ldr	r3, [r7, #20]
 8007170:	2b50      	cmp	r3, #80	; 0x50
 8007172:	d00c      	beq.n	800718e <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8007174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007178:	b672      	cpsid	i
 800717a:	f383 8811 	msr	BASEPRI, r3
 800717e:	f3bf 8f6f 	isb	sy
 8007182:	f3bf 8f4f 	dsb	sy
 8007186:	b662      	cpsie	i
 8007188:	61bb      	str	r3, [r7, #24]
}
 800718a:	bf00      	nop
 800718c:	e7fe      	b.n	800718c <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800718e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007196:	2b00      	cmp	r3, #0
 8007198:	d00d      	beq.n	80071b6 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800719a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80071a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80071a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071a8:	9300      	str	r3, [sp, #0]
 80071aa:	4613      	mov	r3, r2
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	68b9      	ldr	r1, [r7, #8]
 80071b0:	68f8      	ldr	r0, [r7, #12]
 80071b2:	f000 f847 	bl	8007244 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80071b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80071b8:	4618      	mov	r0, r3
 80071ba:	3730      	adds	r7, #48	; 0x30
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b08a      	sub	sp, #40	; 0x28
 80071c4:	af02      	add	r7, sp, #8
 80071c6:	60f8      	str	r0, [r7, #12]
 80071c8:	60b9      	str	r1, [r7, #8]
 80071ca:	4613      	mov	r3, r2
 80071cc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d10c      	bne.n	80071ee <xQueueGenericCreate+0x2e>
	__asm volatile
 80071d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d8:	b672      	cpsid	i
 80071da:	f383 8811 	msr	BASEPRI, r3
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f3bf 8f4f 	dsb	sy
 80071e6:	b662      	cpsie	i
 80071e8:	613b      	str	r3, [r7, #16]
}
 80071ea:	bf00      	nop
 80071ec:	e7fe      	b.n	80071ec <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d102      	bne.n	80071fa <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80071f4:	2300      	movs	r3, #0
 80071f6:	61fb      	str	r3, [r7, #28]
 80071f8:	e004      	b.n	8007204 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	68ba      	ldr	r2, [r7, #8]
 80071fe:	fb02 f303 	mul.w	r3, r2, r3
 8007202:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007204:	69fb      	ldr	r3, [r7, #28]
 8007206:	3350      	adds	r3, #80	; 0x50
 8007208:	4618      	mov	r0, r3
 800720a:	f002 fe03 	bl	8009e14 <pvPortMalloc>
 800720e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007210:	69bb      	ldr	r3, [r7, #24]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d011      	beq.n	800723a <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007216:	69bb      	ldr	r3, [r7, #24]
 8007218:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	3350      	adds	r3, #80	; 0x50
 800721e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	2200      	movs	r2, #0
 8007224:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007228:	79fa      	ldrb	r2, [r7, #7]
 800722a:	69bb      	ldr	r3, [r7, #24]
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	4613      	mov	r3, r2
 8007230:	697a      	ldr	r2, [r7, #20]
 8007232:	68b9      	ldr	r1, [r7, #8]
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 f805 	bl	8007244 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800723a:	69bb      	ldr	r3, [r7, #24]
	}
 800723c:	4618      	mov	r0, r3
 800723e:	3720      	adds	r7, #32
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d103      	bne.n	8007260 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007258:	69bb      	ldr	r3, [r7, #24]
 800725a:	69ba      	ldr	r2, [r7, #24]
 800725c:	601a      	str	r2, [r3, #0]
 800725e:	e002      	b.n	8007266 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007260:	69bb      	ldr	r3, [r7, #24]
 8007262:	687a      	ldr	r2, [r7, #4]
 8007264:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800726c:	69bb      	ldr	r3, [r7, #24]
 800726e:	68ba      	ldr	r2, [r7, #8]
 8007270:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007272:	2101      	movs	r1, #1
 8007274:	69b8      	ldr	r0, [r7, #24]
 8007276:	f7ff feb7 	bl	8006fe8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	78fa      	ldrb	r2, [r7, #3]
 800727e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007282:	bf00      	nop
 8007284:	3710      	adds	r7, #16
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}

0800728a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800728a:	b580      	push	{r7, lr}
 800728c:	b082      	sub	sp, #8
 800728e:	af00      	add	r7, sp, #0
 8007290:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00e      	beq.n	80072b6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	2200      	movs	r2, #0
 800729c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2200      	movs	r2, #0
 80072a8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80072aa:	2300      	movs	r3, #0
 80072ac:	2200      	movs	r2, #0
 80072ae:	2100      	movs	r1, #0
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f000 f917 	bl	80074e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80072b6:	bf00      	nop
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b086      	sub	sp, #24
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	4603      	mov	r3, r0
 80072c6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80072c8:	2301      	movs	r3, #1
 80072ca:	617b      	str	r3, [r7, #20]
 80072cc:	2300      	movs	r3, #0
 80072ce:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80072d0:	79fb      	ldrb	r3, [r7, #7]
 80072d2:	461a      	mov	r2, r3
 80072d4:	6939      	ldr	r1, [r7, #16]
 80072d6:	6978      	ldr	r0, [r7, #20]
 80072d8:	f7ff ff72 	bl	80071c0 <xQueueGenericCreate>
 80072dc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80072de:	68f8      	ldr	r0, [r7, #12]
 80072e0:	f7ff ffd3 	bl	800728a <prvInitialiseMutex>

		return xNewQueue;
 80072e4:	68fb      	ldr	r3, [r7, #12]
	}
 80072e6:	4618      	mov	r0, r3
 80072e8:	3718      	adds	r7, #24
 80072ea:	46bd      	mov	sp, r7
 80072ec:	bd80      	pop	{r7, pc}

080072ee <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80072ee:	b580      	push	{r7, lr}
 80072f0:	b088      	sub	sp, #32
 80072f2:	af02      	add	r7, sp, #8
 80072f4:	4603      	mov	r3, r0
 80072f6:	6039      	str	r1, [r7, #0]
 80072f8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80072fa:	2301      	movs	r3, #1
 80072fc:	617b      	str	r3, [r7, #20]
 80072fe:	2300      	movs	r3, #0
 8007300:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8007302:	79fb      	ldrb	r3, [r7, #7]
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	2200      	movs	r2, #0
 800730a:	6939      	ldr	r1, [r7, #16]
 800730c:	6978      	ldr	r0, [r7, #20]
 800730e:	f7ff fed5 	bl	80070bc <xQueueGenericCreateStatic>
 8007312:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f7ff ffb8 	bl	800728a <prvInitialiseMutex>

		return xNewQueue;
 800731a:	68fb      	ldr	r3, [r7, #12]
	}
 800731c:	4618      	mov	r0, r3
 800731e:	3718      	adds	r7, #24
 8007320:	46bd      	mov	sp, r7
 8007322:	bd80      	pop	{r7, pc}

08007324 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8007324:	b590      	push	{r4, r7, lr}
 8007326:	b087      	sub	sp, #28
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007330:	693b      	ldr	r3, [r7, #16]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d10c      	bne.n	8007350 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 8007336:	f04f 0350 	mov.w	r3, #80	; 0x50
 800733a:	b672      	cpsid	i
 800733c:	f383 8811 	msr	BASEPRI, r3
 8007340:	f3bf 8f6f 	isb	sy
 8007344:	f3bf 8f4f 	dsb	sy
 8007348:	b662      	cpsie	i
 800734a:	60fb      	str	r3, [r7, #12]
}
 800734c:	bf00      	nop
 800734e:	e7fe      	b.n	800734e <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	689c      	ldr	r4, [r3, #8]
 8007354:	f001 fdd2 	bl	8008efc <xTaskGetCurrentTaskHandle>
 8007358:	4603      	mov	r3, r0
 800735a:	429c      	cmp	r4, r3
 800735c:	d111      	bne.n	8007382 <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	1e5a      	subs	r2, r3, #1
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d105      	bne.n	800737c <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007370:	2300      	movs	r3, #0
 8007372:	2200      	movs	r2, #0
 8007374:	2100      	movs	r1, #0
 8007376:	6938      	ldr	r0, [r7, #16]
 8007378:	f000 f8b4 	bl	80074e4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800737c:	2301      	movs	r3, #1
 800737e:	617b      	str	r3, [r7, #20]
 8007380:	e001      	b.n	8007386 <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8007382:	2300      	movs	r3, #0
 8007384:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8007386:	697b      	ldr	r3, [r7, #20]
	}
 8007388:	4618      	mov	r0, r3
 800738a:	371c      	adds	r7, #28
 800738c:	46bd      	mov	sp, r7
 800738e:	bd90      	pop	{r4, r7, pc}

08007390 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8007390:	b590      	push	{r4, r7, lr}
 8007392:	b087      	sub	sp, #28
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800739e:	693b      	ldr	r3, [r7, #16]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d10c      	bne.n	80073be <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 80073a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a8:	b672      	cpsid	i
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	b662      	cpsie	i
 80073b8:	60fb      	str	r3, [r7, #12]
}
 80073ba:	bf00      	nop
 80073bc:	e7fe      	b.n	80073bc <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	689c      	ldr	r4, [r3, #8]
 80073c2:	f001 fd9b 	bl	8008efc <xTaskGetCurrentTaskHandle>
 80073c6:	4603      	mov	r3, r0
 80073c8:	429c      	cmp	r4, r3
 80073ca:	d107      	bne.n	80073dc <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	68db      	ldr	r3, [r3, #12]
 80073d0:	1c5a      	adds	r2, r3, #1
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80073d6:	2301      	movs	r3, #1
 80073d8:	617b      	str	r3, [r7, #20]
 80073da:	e00c      	b.n	80073f6 <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80073dc:	6839      	ldr	r1, [r7, #0]
 80073de:	6938      	ldr	r0, [r7, #16]
 80073e0:	f000 fba2 	bl	8007b28 <xQueueSemaphoreTake>
 80073e4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80073e6:	697b      	ldr	r3, [r7, #20]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d004      	beq.n	80073f6 <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	1c5a      	adds	r2, r3, #1
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80073f6:	697b      	ldr	r3, [r7, #20]
	}
 80073f8:	4618      	mov	r0, r3
 80073fa:	371c      	adds	r7, #28
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd90      	pop	{r4, r7, pc}

08007400 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007400:	b580      	push	{r7, lr}
 8007402:	b08a      	sub	sp, #40	; 0x28
 8007404:	af02      	add	r7, sp, #8
 8007406:	60f8      	str	r0, [r7, #12]
 8007408:	60b9      	str	r1, [r7, #8]
 800740a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10c      	bne.n	800742c <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	b672      	cpsid	i
 8007418:	f383 8811 	msr	BASEPRI, r3
 800741c:	f3bf 8f6f 	isb	sy
 8007420:	f3bf 8f4f 	dsb	sy
 8007424:	b662      	cpsie	i
 8007426:	61bb      	str	r3, [r7, #24]
}
 8007428:	bf00      	nop
 800742a:	e7fe      	b.n	800742a <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800742c:	68ba      	ldr	r2, [r7, #8]
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	429a      	cmp	r2, r3
 8007432:	d90c      	bls.n	800744e <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8007434:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007438:	b672      	cpsid	i
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	b662      	cpsie	i
 8007448:	617b      	str	r3, [r7, #20]
}
 800744a:	bf00      	nop
 800744c:	e7fe      	b.n	800744c <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800744e:	2302      	movs	r3, #2
 8007450:	9300      	str	r3, [sp, #0]
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	2100      	movs	r1, #0
 8007458:	68f8      	ldr	r0, [r7, #12]
 800745a:	f7ff fe2f 	bl	80070bc <xQueueGenericCreateStatic>
 800745e:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007460:	69fb      	ldr	r3, [r7, #28]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d002      	beq.n	800746c <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	68ba      	ldr	r2, [r7, #8]
 800746a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800746c:	69fb      	ldr	r3, [r7, #28]
	}
 800746e:	4618      	mov	r0, r3
 8007470:	3720      	adds	r7, #32
 8007472:	46bd      	mov	sp, r7
 8007474:	bd80      	pop	{r7, pc}

08007476 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8007476:	b580      	push	{r7, lr}
 8007478:	b086      	sub	sp, #24
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d10c      	bne.n	80074a0 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8007486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800748a:	b672      	cpsid	i
 800748c:	f383 8811 	msr	BASEPRI, r3
 8007490:	f3bf 8f6f 	isb	sy
 8007494:	f3bf 8f4f 	dsb	sy
 8007498:	b662      	cpsie	i
 800749a:	613b      	str	r3, [r7, #16]
}
 800749c:	bf00      	nop
 800749e:	e7fe      	b.n	800749e <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80074a0:	683a      	ldr	r2, [r7, #0]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	429a      	cmp	r2, r3
 80074a6:	d90c      	bls.n	80074c2 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80074a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ac:	b672      	cpsid	i
 80074ae:	f383 8811 	msr	BASEPRI, r3
 80074b2:	f3bf 8f6f 	isb	sy
 80074b6:	f3bf 8f4f 	dsb	sy
 80074ba:	b662      	cpsie	i
 80074bc:	60fb      	str	r3, [r7, #12]
}
 80074be:	bf00      	nop
 80074c0:	e7fe      	b.n	80074c0 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80074c2:	2202      	movs	r2, #2
 80074c4:	2100      	movs	r1, #0
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7ff fe7a 	bl	80071c0 <xQueueGenericCreate>
 80074cc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80074ce:	697b      	ldr	r3, [r7, #20]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d002      	beq.n	80074da <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80074da:	697b      	ldr	r3, [r7, #20]
	}
 80074dc:	4618      	mov	r0, r3
 80074de:	3718      	adds	r7, #24
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b08e      	sub	sp, #56	; 0x38
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
 80074f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074f2:	2300      	movs	r3, #0
 80074f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80074fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d10c      	bne.n	800751a <xQueueGenericSend+0x36>
	__asm volatile
 8007500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007504:	b672      	cpsid	i
 8007506:	f383 8811 	msr	BASEPRI, r3
 800750a:	f3bf 8f6f 	isb	sy
 800750e:	f3bf 8f4f 	dsb	sy
 8007512:	b662      	cpsie	i
 8007514:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007516:	bf00      	nop
 8007518:	e7fe      	b.n	8007518 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d103      	bne.n	8007528 <xQueueGenericSend+0x44>
 8007520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007524:	2b00      	cmp	r3, #0
 8007526:	d101      	bne.n	800752c <xQueueGenericSend+0x48>
 8007528:	2301      	movs	r3, #1
 800752a:	e000      	b.n	800752e <xQueueGenericSend+0x4a>
 800752c:	2300      	movs	r3, #0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d10c      	bne.n	800754c <xQueueGenericSend+0x68>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007536:	b672      	cpsid	i
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	b662      	cpsie	i
 8007546:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007548:	bf00      	nop
 800754a:	e7fe      	b.n	800754a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2b02      	cmp	r3, #2
 8007550:	d103      	bne.n	800755a <xQueueGenericSend+0x76>
 8007552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007556:	2b01      	cmp	r3, #1
 8007558:	d101      	bne.n	800755e <xQueueGenericSend+0x7a>
 800755a:	2301      	movs	r3, #1
 800755c:	e000      	b.n	8007560 <xQueueGenericSend+0x7c>
 800755e:	2300      	movs	r3, #0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10c      	bne.n	800757e <xQueueGenericSend+0x9a>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	b672      	cpsid	i
 800756a:	f383 8811 	msr	BASEPRI, r3
 800756e:	f3bf 8f6f 	isb	sy
 8007572:	f3bf 8f4f 	dsb	sy
 8007576:	b662      	cpsie	i
 8007578:	623b      	str	r3, [r7, #32]
}
 800757a:	bf00      	nop
 800757c:	e7fe      	b.n	800757c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800757e:	f001 fccd 	bl	8008f1c <xTaskGetSchedulerState>
 8007582:	4603      	mov	r3, r0
 8007584:	2b00      	cmp	r3, #0
 8007586:	d102      	bne.n	800758e <xQueueGenericSend+0xaa>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d101      	bne.n	8007592 <xQueueGenericSend+0xae>
 800758e:	2301      	movs	r3, #1
 8007590:	e000      	b.n	8007594 <xQueueGenericSend+0xb0>
 8007592:	2300      	movs	r3, #0
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10c      	bne.n	80075b2 <xQueueGenericSend+0xce>
	__asm volatile
 8007598:	f04f 0350 	mov.w	r3, #80	; 0x50
 800759c:	b672      	cpsid	i
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	b662      	cpsie	i
 80075ac:	61fb      	str	r3, [r7, #28]
}
 80075ae:	bf00      	nop
 80075b0:	e7fe      	b.n	80075b0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80075b2:	f002 fb03 	bl	8009bbc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075be:	429a      	cmp	r2, r3
 80075c0:	d302      	bcc.n	80075c8 <xQueueGenericSend+0xe4>
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	d129      	bne.n	800761c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075c8:	683a      	ldr	r2, [r7, #0]
 80075ca:	68b9      	ldr	r1, [r7, #8]
 80075cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075ce:	f000 fc82 	bl	8007ed6 <prvCopyDataToQueue>
 80075d2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d010      	beq.n	80075fe <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075de:	3324      	adds	r3, #36	; 0x24
 80075e0:	4618      	mov	r0, r3
 80075e2:	f001 fac1 	bl	8008b68 <xTaskRemoveFromEventList>
 80075e6:	4603      	mov	r3, r0
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d013      	beq.n	8007614 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075ec:	4b3f      	ldr	r3, [pc, #252]	; (80076ec <xQueueGenericSend+0x208>)
 80075ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	f3bf 8f6f 	isb	sy
 80075fc:	e00a      	b.n	8007614 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007600:	2b00      	cmp	r3, #0
 8007602:	d007      	beq.n	8007614 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007604:	4b39      	ldr	r3, [pc, #228]	; (80076ec <xQueueGenericSend+0x208>)
 8007606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	f3bf 8f4f 	dsb	sy
 8007610:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007614:	f002 fb06 	bl	8009c24 <vPortExitCritical>
				return pdPASS;
 8007618:	2301      	movs	r3, #1
 800761a:	e063      	b.n	80076e4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d103      	bne.n	800762a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007622:	f002 faff 	bl	8009c24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007626:	2300      	movs	r3, #0
 8007628:	e05c      	b.n	80076e4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800762a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800762c:	2b00      	cmp	r3, #0
 800762e:	d106      	bne.n	800763e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007630:	f107 0314 	add.w	r3, r7, #20
 8007634:	4618      	mov	r0, r3
 8007636:	f001 fafd 	bl	8008c34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800763a:	2301      	movs	r3, #1
 800763c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800763e:	f002 faf1 	bl	8009c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007642:	f001 f84b 	bl	80086dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007646:	f002 fab9 	bl	8009bbc <vPortEnterCritical>
 800764a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800764c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007650:	b25b      	sxtb	r3, r3
 8007652:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007656:	d103      	bne.n	8007660 <xQueueGenericSend+0x17c>
 8007658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800765a:	2200      	movs	r2, #0
 800765c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007666:	b25b      	sxtb	r3, r3
 8007668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800766c:	d103      	bne.n	8007676 <xQueueGenericSend+0x192>
 800766e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007670:	2200      	movs	r2, #0
 8007672:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007676:	f002 fad5 	bl	8009c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800767a:	1d3a      	adds	r2, r7, #4
 800767c:	f107 0314 	add.w	r3, r7, #20
 8007680:	4611      	mov	r1, r2
 8007682:	4618      	mov	r0, r3
 8007684:	f001 faec 	bl	8008c60 <xTaskCheckForTimeOut>
 8007688:	4603      	mov	r3, r0
 800768a:	2b00      	cmp	r3, #0
 800768c:	d124      	bne.n	80076d8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800768e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007690:	f000 fd19 	bl	80080c6 <prvIsQueueFull>
 8007694:	4603      	mov	r3, r0
 8007696:	2b00      	cmp	r3, #0
 8007698:	d018      	beq.n	80076cc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800769a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769c:	3310      	adds	r3, #16
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	4611      	mov	r1, r2
 80076a2:	4618      	mov	r0, r3
 80076a4:	f001 fa0c 	bl	8008ac0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80076a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076aa:	f000 fca4 	bl	8007ff6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80076ae:	f001 f823 	bl	80086f8 <xTaskResumeAll>
 80076b2:	4603      	mov	r3, r0
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f47f af7c 	bne.w	80075b2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80076ba:	4b0c      	ldr	r3, [pc, #48]	; (80076ec <xQueueGenericSend+0x208>)
 80076bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076c0:	601a      	str	r2, [r3, #0]
 80076c2:	f3bf 8f4f 	dsb	sy
 80076c6:	f3bf 8f6f 	isb	sy
 80076ca:	e772      	b.n	80075b2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80076cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076ce:	f000 fc92 	bl	8007ff6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076d2:	f001 f811 	bl	80086f8 <xTaskResumeAll>
 80076d6:	e76c      	b.n	80075b2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80076d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80076da:	f000 fc8c 	bl	8007ff6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076de:	f001 f80b 	bl	80086f8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076e2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3738      	adds	r7, #56	; 0x38
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	e000ed04 	.word	0xe000ed04

080076f0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b08e      	sub	sp, #56	; 0x38
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
 80076fc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007704:	2b00      	cmp	r3, #0
 8007706:	d10c      	bne.n	8007722 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770c:	b672      	cpsid	i
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	b662      	cpsie	i
 800771c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800771e:	bf00      	nop
 8007720:	e7fe      	b.n	8007720 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007722:	68bb      	ldr	r3, [r7, #8]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d103      	bne.n	8007730 <xQueueGenericSendFromISR+0x40>
 8007728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800772c:	2b00      	cmp	r3, #0
 800772e:	d101      	bne.n	8007734 <xQueueGenericSendFromISR+0x44>
 8007730:	2301      	movs	r3, #1
 8007732:	e000      	b.n	8007736 <xQueueGenericSendFromISR+0x46>
 8007734:	2300      	movs	r3, #0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d10c      	bne.n	8007754 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800773a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800773e:	b672      	cpsid	i
 8007740:	f383 8811 	msr	BASEPRI, r3
 8007744:	f3bf 8f6f 	isb	sy
 8007748:	f3bf 8f4f 	dsb	sy
 800774c:	b662      	cpsie	i
 800774e:	623b      	str	r3, [r7, #32]
}
 8007750:	bf00      	nop
 8007752:	e7fe      	b.n	8007752 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	2b02      	cmp	r3, #2
 8007758:	d103      	bne.n	8007762 <xQueueGenericSendFromISR+0x72>
 800775a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800775e:	2b01      	cmp	r3, #1
 8007760:	d101      	bne.n	8007766 <xQueueGenericSendFromISR+0x76>
 8007762:	2301      	movs	r3, #1
 8007764:	e000      	b.n	8007768 <xQueueGenericSendFromISR+0x78>
 8007766:	2300      	movs	r3, #0
 8007768:	2b00      	cmp	r3, #0
 800776a:	d10c      	bne.n	8007786 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800776c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007770:	b672      	cpsid	i
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	b662      	cpsie	i
 8007780:	61fb      	str	r3, [r7, #28]
}
 8007782:	bf00      	nop
 8007784:	e7fe      	b.n	8007784 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007786:	f002 fb01 	bl	8009d8c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800778a:	f3ef 8211 	mrs	r2, BASEPRI
 800778e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007792:	b672      	cpsid	i
 8007794:	f383 8811 	msr	BASEPRI, r3
 8007798:	f3bf 8f6f 	isb	sy
 800779c:	f3bf 8f4f 	dsb	sy
 80077a0:	b662      	cpsie	i
 80077a2:	61ba      	str	r2, [r7, #24]
 80077a4:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80077a6:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80077a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80077b2:	429a      	cmp	r2, r3
 80077b4:	d302      	bcc.n	80077bc <xQueueGenericSendFromISR+0xcc>
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	2b02      	cmp	r3, #2
 80077ba:	d12c      	bne.n	8007816 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80077bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80077c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077c6:	683a      	ldr	r2, [r7, #0]
 80077c8:	68b9      	ldr	r1, [r7, #8]
 80077ca:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80077cc:	f000 fb83 	bl	8007ed6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80077d0:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80077d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d8:	d112      	bne.n	8007800 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d016      	beq.n	8007810 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077e4:	3324      	adds	r3, #36	; 0x24
 80077e6:	4618      	mov	r0, r3
 80077e8:	f001 f9be 	bl	8008b68 <xTaskRemoveFromEventList>
 80077ec:	4603      	mov	r3, r0
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00e      	beq.n	8007810 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00b      	beq.n	8007810 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2201      	movs	r2, #1
 80077fc:	601a      	str	r2, [r3, #0]
 80077fe:	e007      	b.n	8007810 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007800:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007804:	3301      	adds	r3, #1
 8007806:	b2db      	uxtb	r3, r3
 8007808:	b25a      	sxtb	r2, r3
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007810:	2301      	movs	r3, #1
 8007812:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8007814:	e001      	b.n	800781a <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007816:	2300      	movs	r3, #0
 8007818:	637b      	str	r3, [r7, #52]	; 0x34
 800781a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800781c:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800781e:	693b      	ldr	r3, [r7, #16]
 8007820:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007824:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007826:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007828:	4618      	mov	r0, r3
 800782a:	3738      	adds	r7, #56	; 0x38
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b08e      	sub	sp, #56	; 0x38
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800783e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10c      	bne.n	800785e <xQueueGiveFromISR+0x2e>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007848:	b672      	cpsid	i
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	b662      	cpsie	i
 8007858:	623b      	str	r3, [r7, #32]
}
 800785a:	bf00      	nop
 800785c:	e7fe      	b.n	800785c <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800785e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00c      	beq.n	8007880 <xQueueGiveFromISR+0x50>
	__asm volatile
 8007866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800786a:	b672      	cpsid	i
 800786c:	f383 8811 	msr	BASEPRI, r3
 8007870:	f3bf 8f6f 	isb	sy
 8007874:	f3bf 8f4f 	dsb	sy
 8007878:	b662      	cpsie	i
 800787a:	61fb      	str	r3, [r7, #28]
}
 800787c:	bf00      	nop
 800787e:	e7fe      	b.n	800787e <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d103      	bne.n	8007890 <xQueueGiveFromISR+0x60>
 8007888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800788a:	689b      	ldr	r3, [r3, #8]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d101      	bne.n	8007894 <xQueueGiveFromISR+0x64>
 8007890:	2301      	movs	r3, #1
 8007892:	e000      	b.n	8007896 <xQueueGiveFromISR+0x66>
 8007894:	2300      	movs	r3, #0
 8007896:	2b00      	cmp	r3, #0
 8007898:	d10c      	bne.n	80078b4 <xQueueGiveFromISR+0x84>
	__asm volatile
 800789a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789e:	b672      	cpsid	i
 80078a0:	f383 8811 	msr	BASEPRI, r3
 80078a4:	f3bf 8f6f 	isb	sy
 80078a8:	f3bf 8f4f 	dsb	sy
 80078ac:	b662      	cpsie	i
 80078ae:	61bb      	str	r3, [r7, #24]
}
 80078b0:	bf00      	nop
 80078b2:	e7fe      	b.n	80078b2 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078b4:	f002 fa6a 	bl	8009d8c <vPortValidateInterruptPriority>
	__asm volatile
 80078b8:	f3ef 8211 	mrs	r2, BASEPRI
 80078bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c0:	b672      	cpsid	i
 80078c2:	f383 8811 	msr	BASEPRI, r3
 80078c6:	f3bf 8f6f 	isb	sy
 80078ca:	f3bf 8f4f 	dsb	sy
 80078ce:	b662      	cpsie	i
 80078d0:	617a      	str	r2, [r7, #20]
 80078d2:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80078d4:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80078d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078dc:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80078de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d22b      	bcs.n	8007940 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80078e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078ea:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078f4:	1c5a      	adds	r2, r3, #1
 80078f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078f8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80078fa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80078fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007902:	d112      	bne.n	800792a <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007908:	2b00      	cmp	r3, #0
 800790a:	d016      	beq.n	800793a <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800790c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800790e:	3324      	adds	r3, #36	; 0x24
 8007910:	4618      	mov	r0, r3
 8007912:	f001 f929 	bl	8008b68 <xTaskRemoveFromEventList>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00e      	beq.n	800793a <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d00b      	beq.n	800793a <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	2201      	movs	r2, #1
 8007926:	601a      	str	r2, [r3, #0]
 8007928:	e007      	b.n	800793a <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800792a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800792e:	3301      	adds	r3, #1
 8007930:	b2db      	uxtb	r3, r3
 8007932:	b25a      	sxtb	r2, r3
 8007934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007936:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800793a:	2301      	movs	r3, #1
 800793c:	637b      	str	r3, [r7, #52]	; 0x34
 800793e:	e001      	b.n	8007944 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007940:	2300      	movs	r3, #0
 8007942:	637b      	str	r3, [r7, #52]	; 0x34
 8007944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007946:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	f383 8811 	msr	BASEPRI, r3
}
 800794e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007952:	4618      	mov	r0, r3
 8007954:	3738      	adds	r7, #56	; 0x38
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b08c      	sub	sp, #48	; 0x30
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007968:	2300      	movs	r3, #0
 800796a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007972:	2b00      	cmp	r3, #0
 8007974:	d10c      	bne.n	8007990 <xQueueReceive+0x34>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797a:	b672      	cpsid	i
 800797c:	f383 8811 	msr	BASEPRI, r3
 8007980:	f3bf 8f6f 	isb	sy
 8007984:	f3bf 8f4f 	dsb	sy
 8007988:	b662      	cpsie	i
 800798a:	623b      	str	r3, [r7, #32]
}
 800798c:	bf00      	nop
 800798e:	e7fe      	b.n	800798e <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d103      	bne.n	800799e <xQueueReceive+0x42>
 8007996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <xQueueReceive+0x46>
 800799e:	2301      	movs	r3, #1
 80079a0:	e000      	b.n	80079a4 <xQueueReceive+0x48>
 80079a2:	2300      	movs	r3, #0
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d10c      	bne.n	80079c2 <xQueueReceive+0x66>
	__asm volatile
 80079a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ac:	b672      	cpsid	i
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	b662      	cpsie	i
 80079bc:	61fb      	str	r3, [r7, #28]
}
 80079be:	bf00      	nop
 80079c0:	e7fe      	b.n	80079c0 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079c2:	f001 faab 	bl	8008f1c <xTaskGetSchedulerState>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d102      	bne.n	80079d2 <xQueueReceive+0x76>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <xQueueReceive+0x7a>
 80079d2:	2301      	movs	r3, #1
 80079d4:	e000      	b.n	80079d8 <xQueueReceive+0x7c>
 80079d6:	2300      	movs	r3, #0
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d10c      	bne.n	80079f6 <xQueueReceive+0x9a>
	__asm volatile
 80079dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e0:	b672      	cpsid	i
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	b662      	cpsie	i
 80079f0:	61bb      	str	r3, [r7, #24]
}
 80079f2:	bf00      	nop
 80079f4:	e7fe      	b.n	80079f4 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079f6:	f002 f8e1 	bl	8009bbc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079fe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d01f      	beq.n	8007a46 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007a06:	68b9      	ldr	r1, [r7, #8]
 8007a08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a0a:	f000 face 	bl	8007faa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a10:	1e5a      	subs	r2, r3, #1
 8007a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d00f      	beq.n	8007a3e <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a20:	3310      	adds	r3, #16
 8007a22:	4618      	mov	r0, r3
 8007a24:	f001 f8a0 	bl	8008b68 <xTaskRemoveFromEventList>
 8007a28:	4603      	mov	r3, r0
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d007      	beq.n	8007a3e <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a2e:	4b3d      	ldr	r3, [pc, #244]	; (8007b24 <xQueueReceive+0x1c8>)
 8007a30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a34:	601a      	str	r2, [r3, #0]
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a3e:	f002 f8f1 	bl	8009c24 <vPortExitCritical>
				return pdPASS;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e069      	b.n	8007b1a <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d103      	bne.n	8007a54 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007a4c:	f002 f8ea 	bl	8009c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a50:	2300      	movs	r3, #0
 8007a52:	e062      	b.n	8007b1a <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d106      	bne.n	8007a68 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a5a:	f107 0310 	add.w	r3, r7, #16
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f001 f8e8 	bl	8008c34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a64:	2301      	movs	r3, #1
 8007a66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a68:	f002 f8dc 	bl	8009c24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a6c:	f000 fe36 	bl	80086dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a70:	f002 f8a4 	bl	8009bbc <vPortEnterCritical>
 8007a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a7a:	b25b      	sxtb	r3, r3
 8007a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a80:	d103      	bne.n	8007a8a <xQueueReceive+0x12e>
 8007a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a90:	b25b      	sxtb	r3, r3
 8007a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a96:	d103      	bne.n	8007aa0 <xQueueReceive+0x144>
 8007a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007aa0:	f002 f8c0 	bl	8009c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007aa4:	1d3a      	adds	r2, r7, #4
 8007aa6:	f107 0310 	add.w	r3, r7, #16
 8007aaa:	4611      	mov	r1, r2
 8007aac:	4618      	mov	r0, r3
 8007aae:	f001 f8d7 	bl	8008c60 <xTaskCheckForTimeOut>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d123      	bne.n	8007b00 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007aba:	f000 faee 	bl	800809a <prvIsQueueEmpty>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d017      	beq.n	8007af4 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ac6:	3324      	adds	r3, #36	; 0x24
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	4611      	mov	r1, r2
 8007acc:	4618      	mov	r0, r3
 8007ace:	f000 fff7 	bl	8008ac0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007ad2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ad4:	f000 fa8f 	bl	8007ff6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007ad8:	f000 fe0e 	bl	80086f8 <xTaskResumeAll>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d189      	bne.n	80079f6 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8007ae2:	4b10      	ldr	r3, [pc, #64]	; (8007b24 <xQueueReceive+0x1c8>)
 8007ae4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007ae8:	601a      	str	r2, [r3, #0]
 8007aea:	f3bf 8f4f 	dsb	sy
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	e780      	b.n	80079f6 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007af4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007af6:	f000 fa7e 	bl	8007ff6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007afa:	f000 fdfd 	bl	80086f8 <xTaskResumeAll>
 8007afe:	e77a      	b.n	80079f6 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007b00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b02:	f000 fa78 	bl	8007ff6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b06:	f000 fdf7 	bl	80086f8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007b0c:	f000 fac5 	bl	800809a <prvIsQueueEmpty>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	f43f af6f 	beq.w	80079f6 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b18:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	3730      	adds	r7, #48	; 0x30
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	e000ed04 	.word	0xe000ed04

08007b28 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b08e      	sub	sp, #56	; 0x38
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
 8007b30:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8007b32:	2300      	movs	r3, #0
 8007b34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d10c      	bne.n	8007b5e <xQueueSemaphoreTake+0x36>
	__asm volatile
 8007b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b48:	b672      	cpsid	i
 8007b4a:	f383 8811 	msr	BASEPRI, r3
 8007b4e:	f3bf 8f6f 	isb	sy
 8007b52:	f3bf 8f4f 	dsb	sy
 8007b56:	b662      	cpsie	i
 8007b58:	623b      	str	r3, [r7, #32]
}
 8007b5a:	bf00      	nop
 8007b5c:	e7fe      	b.n	8007b5c <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d00c      	beq.n	8007b80 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8007b66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b6a:	b672      	cpsid	i
 8007b6c:	f383 8811 	msr	BASEPRI, r3
 8007b70:	f3bf 8f6f 	isb	sy
 8007b74:	f3bf 8f4f 	dsb	sy
 8007b78:	b662      	cpsie	i
 8007b7a:	61fb      	str	r3, [r7, #28]
}
 8007b7c:	bf00      	nop
 8007b7e:	e7fe      	b.n	8007b7e <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b80:	f001 f9cc 	bl	8008f1c <xTaskGetSchedulerState>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d102      	bne.n	8007b90 <xQueueSemaphoreTake+0x68>
 8007b8a:	683b      	ldr	r3, [r7, #0]
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d101      	bne.n	8007b94 <xQueueSemaphoreTake+0x6c>
 8007b90:	2301      	movs	r3, #1
 8007b92:	e000      	b.n	8007b96 <xQueueSemaphoreTake+0x6e>
 8007b94:	2300      	movs	r3, #0
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d10c      	bne.n	8007bb4 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8007b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b9e:	b672      	cpsid	i
 8007ba0:	f383 8811 	msr	BASEPRI, r3
 8007ba4:	f3bf 8f6f 	isb	sy
 8007ba8:	f3bf 8f4f 	dsb	sy
 8007bac:	b662      	cpsie	i
 8007bae:	61bb      	str	r3, [r7, #24]
}
 8007bb0:	bf00      	nop
 8007bb2:	e7fe      	b.n	8007bb2 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bb4:	f002 f802 	bl	8009bbc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8007bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc0:	2b00      	cmp	r3, #0
 8007bc2:	d024      	beq.n	8007c0e <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007bc6:	1e5a      	subs	r2, r3, #1
 8007bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bca:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d104      	bne.n	8007bde <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007bd4:	f001 fb20 	bl	8009218 <pvTaskIncrementMutexHeldCount>
 8007bd8:	4602      	mov	r2, r0
 8007bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bdc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be0:	691b      	ldr	r3, [r3, #16]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d00f      	beq.n	8007c06 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	3310      	adds	r3, #16
 8007bea:	4618      	mov	r0, r3
 8007bec:	f000 ffbc 	bl	8008b68 <xTaskRemoveFromEventList>
 8007bf0:	4603      	mov	r3, r0
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d007      	beq.n	8007c06 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007bf6:	4b55      	ldr	r3, [pc, #340]	; (8007d4c <xQueueSemaphoreTake+0x224>)
 8007bf8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bfc:	601a      	str	r2, [r3, #0]
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007c06:	f002 f80d 	bl	8009c24 <vPortExitCritical>
				return pdPASS;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e099      	b.n	8007d42 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d113      	bne.n	8007c3c <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00c      	beq.n	8007c34 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007c1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c1e:	b672      	cpsid	i
 8007c20:	f383 8811 	msr	BASEPRI, r3
 8007c24:	f3bf 8f6f 	isb	sy
 8007c28:	f3bf 8f4f 	dsb	sy
 8007c2c:	b662      	cpsie	i
 8007c2e:	617b      	str	r3, [r7, #20]
}
 8007c30:	bf00      	nop
 8007c32:	e7fe      	b.n	8007c32 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007c34:	f001 fff6 	bl	8009c24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	e082      	b.n	8007d42 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d106      	bne.n	8007c50 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c42:	f107 030c 	add.w	r3, r7, #12
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 fff4 	bl	8008c34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c50:	f001 ffe8 	bl	8009c24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c54:	f000 fd42 	bl	80086dc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c58:	f001 ffb0 	bl	8009bbc <vPortEnterCritical>
 8007c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c62:	b25b      	sxtb	r3, r3
 8007c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c68:	d103      	bne.n	8007c72 <xQueueSemaphoreTake+0x14a>
 8007c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007c78:	b25b      	sxtb	r3, r3
 8007c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c7e:	d103      	bne.n	8007c88 <xQueueSemaphoreTake+0x160>
 8007c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c82:	2200      	movs	r2, #0
 8007c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007c88:	f001 ffcc 	bl	8009c24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007c8c:	463a      	mov	r2, r7
 8007c8e:	f107 030c 	add.w	r3, r7, #12
 8007c92:	4611      	mov	r1, r2
 8007c94:	4618      	mov	r0, r3
 8007c96:	f000 ffe3 	bl	8008c60 <xTaskCheckForTimeOut>
 8007c9a:	4603      	mov	r3, r0
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d132      	bne.n	8007d06 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ca0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007ca2:	f000 f9fa 	bl	800809a <prvIsQueueEmpty>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d026      	beq.n	8007cfa <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d109      	bne.n	8007cc8 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007cb4:	f001 ff82 	bl	8009bbc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	f001 f94b 	bl	8008f58 <xTaskPriorityInherit>
 8007cc2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007cc4:	f001 ffae 	bl	8009c24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007cc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cca:	3324      	adds	r3, #36	; 0x24
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	4611      	mov	r1, r2
 8007cd0:	4618      	mov	r0, r3
 8007cd2:	f000 fef5 	bl	8008ac0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007cd6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cd8:	f000 f98d 	bl	8007ff6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007cdc:	f000 fd0c 	bl	80086f8 <xTaskResumeAll>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	f47f af66 	bne.w	8007bb4 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007ce8:	4b18      	ldr	r3, [pc, #96]	; (8007d4c <xQueueSemaphoreTake+0x224>)
 8007cea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007cee:	601a      	str	r2, [r3, #0]
 8007cf0:	f3bf 8f4f 	dsb	sy
 8007cf4:	f3bf 8f6f 	isb	sy
 8007cf8:	e75c      	b.n	8007bb4 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007cfa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007cfc:	f000 f97b 	bl	8007ff6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d00:	f000 fcfa 	bl	80086f8 <xTaskResumeAll>
 8007d04:	e756      	b.n	8007bb4 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007d06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d08:	f000 f975 	bl	8007ff6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d0c:	f000 fcf4 	bl	80086f8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007d10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d12:	f000 f9c2 	bl	800809a <prvIsQueueEmpty>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	f43f af4b 	beq.w	8007bb4 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d00d      	beq.n	8007d40 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007d24:	f001 ff4a 	bl	8009bbc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007d28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007d2a:	f000 f8bc 	bl	8007ea6 <prvGetDisinheritPriorityAfterTimeout>
 8007d2e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007d30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d32:	689b      	ldr	r3, [r3, #8]
 8007d34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007d36:	4618      	mov	r0, r3
 8007d38:	f001 f9e8 	bl	800910c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007d3c:	f001 ff72 	bl	8009c24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007d40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007d42:	4618      	mov	r0, r3
 8007d44:	3738      	adds	r7, #56	; 0x38
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	e000ed04 	.word	0xe000ed04

08007d50 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b08e      	sub	sp, #56	; 0x38
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
 8007d5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d10c      	bne.n	8007d80 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d6a:	b672      	cpsid	i
 8007d6c:	f383 8811 	msr	BASEPRI, r3
 8007d70:	f3bf 8f6f 	isb	sy
 8007d74:	f3bf 8f4f 	dsb	sy
 8007d78:	b662      	cpsie	i
 8007d7a:	623b      	str	r3, [r7, #32]
}
 8007d7c:	bf00      	nop
 8007d7e:	e7fe      	b.n	8007d7e <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d103      	bne.n	8007d8e <xQueueReceiveFromISR+0x3e>
 8007d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <xQueueReceiveFromISR+0x42>
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e000      	b.n	8007d94 <xQueueReceiveFromISR+0x44>
 8007d92:	2300      	movs	r3, #0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d10c      	bne.n	8007db2 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9c:	b672      	cpsid	i
 8007d9e:	f383 8811 	msr	BASEPRI, r3
 8007da2:	f3bf 8f6f 	isb	sy
 8007da6:	f3bf 8f4f 	dsb	sy
 8007daa:	b662      	cpsie	i
 8007dac:	61fb      	str	r3, [r7, #28]
}
 8007dae:	bf00      	nop
 8007db0:	e7fe      	b.n	8007db0 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007db2:	f001 ffeb 	bl	8009d8c <vPortValidateInterruptPriority>
	__asm volatile
 8007db6:	f3ef 8211 	mrs	r2, BASEPRI
 8007dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbe:	b672      	cpsid	i
 8007dc0:	f383 8811 	msr	BASEPRI, r3
 8007dc4:	f3bf 8f6f 	isb	sy
 8007dc8:	f3bf 8f4f 	dsb	sy
 8007dcc:	b662      	cpsie	i
 8007dce:	61ba      	str	r2, [r7, #24]
 8007dd0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007dd2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dda:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d02f      	beq.n	8007e42 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007de4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007de8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007dec:	68b9      	ldr	r1, [r7, #8]
 8007dee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007df0:	f000 f8db 	bl	8007faa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007df4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007df6:	1e5a      	subs	r2, r3, #1
 8007df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007dfa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007dfc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e04:	d112      	bne.n	8007e2c <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e08:	691b      	ldr	r3, [r3, #16]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d016      	beq.n	8007e3c <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e10:	3310      	adds	r3, #16
 8007e12:	4618      	mov	r0, r3
 8007e14:	f000 fea8 	bl	8008b68 <xTaskRemoveFromEventList>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d00e      	beq.n	8007e3c <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d00b      	beq.n	8007e3c <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2201      	movs	r2, #1
 8007e28:	601a      	str	r2, [r3, #0]
 8007e2a:	e007      	b.n	8007e3c <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007e2c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007e30:	3301      	adds	r3, #1
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	b25a      	sxtb	r2, r3
 8007e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007e3c:	2301      	movs	r3, #1
 8007e3e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e40:	e001      	b.n	8007e46 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007e42:	2300      	movs	r3, #0
 8007e44:	637b      	str	r3, [r7, #52]	; 0x34
 8007e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e48:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	f383 8811 	msr	BASEPRI, r3
}
 8007e50:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3738      	adds	r7, #56	; 0x38
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d10c      	bne.n	8007e88 <vQueueDelete+0x2c>
	__asm volatile
 8007e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e72:	b672      	cpsid	i
 8007e74:	f383 8811 	msr	BASEPRI, r3
 8007e78:	f3bf 8f6f 	isb	sy
 8007e7c:	f3bf 8f4f 	dsb	sy
 8007e80:	b662      	cpsie	i
 8007e82:	60bb      	str	r3, [r7, #8]
}
 8007e84:	bf00      	nop
 8007e86:	e7fe      	b.n	8007e86 <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f000 f95f 	bl	800814c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d102      	bne.n	8007e9e <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8007e98:	68f8      	ldr	r0, [r7, #12]
 8007e9a:	f002 f885 	bl	8009fa8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007e9e:	bf00      	nop
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}

08007ea6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007ea6:	b480      	push	{r7}
 8007ea8:	b085      	sub	sp, #20
 8007eaa:	af00      	add	r7, sp, #0
 8007eac:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d006      	beq.n	8007ec4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007ec0:	60fb      	str	r3, [r7, #12]
 8007ec2:	e001      	b.n	8007ec8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
	}
 8007eca:	4618      	mov	r0, r3
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr

08007ed6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b086      	sub	sp, #24
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	60f8      	str	r0, [r7, #12]
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d10d      	bne.n	8007f10 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d14d      	bne.n	8007f98 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f001 f891 	bl	8009028 <xTaskPriorityDisinherit>
 8007f06:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	609a      	str	r2, [r3, #8]
 8007f0e:	e043      	b.n	8007f98 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d119      	bne.n	8007f4a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	6858      	ldr	r0, [r3, #4]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f1e:	461a      	mov	r2, r3
 8007f20:	68b9      	ldr	r1, [r7, #8]
 8007f22:	f00c fafe 	bl	8014522 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	685a      	ldr	r2, [r3, #4]
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f2e:	441a      	add	r2, r3
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	685a      	ldr	r2, [r3, #4]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d32b      	bcc.n	8007f98 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	605a      	str	r2, [r3, #4]
 8007f48:	e026      	b.n	8007f98 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	68d8      	ldr	r0, [r3, #12]
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f52:	461a      	mov	r2, r3
 8007f54:	68b9      	ldr	r1, [r7, #8]
 8007f56:	f00c fae4 	bl	8014522 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	68da      	ldr	r2, [r3, #12]
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f62:	425b      	negs	r3, r3
 8007f64:	441a      	add	r2, r3
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	68da      	ldr	r2, [r3, #12]
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d207      	bcs.n	8007f86 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	689a      	ldr	r2, [r3, #8]
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f7e:	425b      	negs	r3, r3
 8007f80:	441a      	add	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d105      	bne.n	8007f98 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d002      	beq.n	8007f98 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	3b01      	subs	r3, #1
 8007f96:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	1c5a      	adds	r2, r3, #1
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007fa0:	697b      	ldr	r3, [r7, #20]
}
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	3718      	adds	r7, #24
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bd80      	pop	{r7, pc}

08007faa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007faa:	b580      	push	{r7, lr}
 8007fac:	b082      	sub	sp, #8
 8007fae:	af00      	add	r7, sp, #0
 8007fb0:	6078      	str	r0, [r7, #4]
 8007fb2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d018      	beq.n	8007fee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	68da      	ldr	r2, [r3, #12]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fc4:	441a      	add	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	68da      	ldr	r2, [r3, #12]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	689b      	ldr	r3, [r3, #8]
 8007fd2:	429a      	cmp	r2, r3
 8007fd4:	d303      	bcc.n	8007fde <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	68d9      	ldr	r1, [r3, #12]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fe6:	461a      	mov	r2, r3
 8007fe8:	6838      	ldr	r0, [r7, #0]
 8007fea:	f00c fa9a 	bl	8014522 <memcpy>
	}
}
 8007fee:	bf00      	nop
 8007ff0:	3708      	adds	r7, #8
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b084      	sub	sp, #16
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007ffe:	f001 fddd 	bl	8009bbc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008008:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800800a:	e011      	b.n	8008030 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008010:	2b00      	cmp	r3, #0
 8008012:	d012      	beq.n	800803a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	3324      	adds	r3, #36	; 0x24
 8008018:	4618      	mov	r0, r3
 800801a:	f000 fda5 	bl	8008b68 <xTaskRemoveFromEventList>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008024:	f000 fe82 	bl	8008d2c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008028:	7bfb      	ldrb	r3, [r7, #15]
 800802a:	3b01      	subs	r3, #1
 800802c:	b2db      	uxtb	r3, r3
 800802e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008030:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008034:	2b00      	cmp	r3, #0
 8008036:	dce9      	bgt.n	800800c <prvUnlockQueue+0x16>
 8008038:	e000      	b.n	800803c <prvUnlockQueue+0x46>
					break;
 800803a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	22ff      	movs	r2, #255	; 0xff
 8008040:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008044:	f001 fdee 	bl	8009c24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008048:	f001 fdb8 	bl	8009bbc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008052:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008054:	e011      	b.n	800807a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	691b      	ldr	r3, [r3, #16]
 800805a:	2b00      	cmp	r3, #0
 800805c:	d012      	beq.n	8008084 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	3310      	adds	r3, #16
 8008062:	4618      	mov	r0, r3
 8008064:	f000 fd80 	bl	8008b68 <xTaskRemoveFromEventList>
 8008068:	4603      	mov	r3, r0
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800806e:	f000 fe5d 	bl	8008d2c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008072:	7bbb      	ldrb	r3, [r7, #14]
 8008074:	3b01      	subs	r3, #1
 8008076:	b2db      	uxtb	r3, r3
 8008078:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800807a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800807e:	2b00      	cmp	r3, #0
 8008080:	dce9      	bgt.n	8008056 <prvUnlockQueue+0x60>
 8008082:	e000      	b.n	8008086 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008084:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	22ff      	movs	r2, #255	; 0xff
 800808a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800808e:	f001 fdc9 	bl	8009c24 <vPortExitCritical>
}
 8008092:	bf00      	nop
 8008094:	3710      	adds	r7, #16
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}

0800809a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b084      	sub	sp, #16
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080a2:	f001 fd8b 	bl	8009bbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d102      	bne.n	80080b4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80080ae:	2301      	movs	r3, #1
 80080b0:	60fb      	str	r3, [r7, #12]
 80080b2:	e001      	b.n	80080b8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80080b4:	2300      	movs	r3, #0
 80080b6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080b8:	f001 fdb4 	bl	8009c24 <vPortExitCritical>

	return xReturn;
 80080bc:	68fb      	ldr	r3, [r7, #12]
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3710      	adds	r7, #16
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}

080080c6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80080c6:	b580      	push	{r7, lr}
 80080c8:	b084      	sub	sp, #16
 80080ca:	af00      	add	r7, sp, #0
 80080cc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80080ce:	f001 fd75 	bl	8009bbc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080da:	429a      	cmp	r2, r3
 80080dc:	d102      	bne.n	80080e4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80080de:	2301      	movs	r3, #1
 80080e0:	60fb      	str	r3, [r7, #12]
 80080e2:	e001      	b.n	80080e8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80080e4:	2300      	movs	r3, #0
 80080e6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80080e8:	f001 fd9c 	bl	8009c24 <vPortExitCritical>

	return xReturn;
 80080ec:	68fb      	ldr	r3, [r7, #12]
}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3710      	adds	r7, #16
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}
	...

080080f8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
 8008100:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008102:	2300      	movs	r3, #0
 8008104:	60fb      	str	r3, [r7, #12]
 8008106:	e014      	b.n	8008132 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008108:	4a0f      	ldr	r2, [pc, #60]	; (8008148 <vQueueAddToRegistry+0x50>)
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d10b      	bne.n	800812c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008114:	490c      	ldr	r1, [pc, #48]	; (8008148 <vQueueAddToRegistry+0x50>)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	683a      	ldr	r2, [r7, #0]
 800811a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800811e:	4a0a      	ldr	r2, [pc, #40]	; (8008148 <vQueueAddToRegistry+0x50>)
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	00db      	lsls	r3, r3, #3
 8008124:	4413      	add	r3, r2
 8008126:	687a      	ldr	r2, [r7, #4]
 8008128:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800812a:	e006      	b.n	800813a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	3301      	adds	r3, #1
 8008130:	60fb      	str	r3, [r7, #12]
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	2b07      	cmp	r3, #7
 8008136:	d9e7      	bls.n	8008108 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008138:	bf00      	nop
 800813a:	bf00      	nop
 800813c:	3714      	adds	r7, #20
 800813e:	46bd      	mov	sp, r7
 8008140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008144:	4770      	bx	lr
 8008146:	bf00      	nop
 8008148:	20005638 	.word	0x20005638

0800814c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008154:	2300      	movs	r3, #0
 8008156:	60fb      	str	r3, [r7, #12]
 8008158:	e016      	b.n	8008188 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800815a:	4a10      	ldr	r2, [pc, #64]	; (800819c <vQueueUnregisterQueue+0x50>)
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	00db      	lsls	r3, r3, #3
 8008160:	4413      	add	r3, r2
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	429a      	cmp	r2, r3
 8008168:	d10b      	bne.n	8008182 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800816a:	4a0c      	ldr	r2, [pc, #48]	; (800819c <vQueueUnregisterQueue+0x50>)
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	2100      	movs	r1, #0
 8008170:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8008174:	4a09      	ldr	r2, [pc, #36]	; (800819c <vQueueUnregisterQueue+0x50>)
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	00db      	lsls	r3, r3, #3
 800817a:	4413      	add	r3, r2
 800817c:	2200      	movs	r2, #0
 800817e:	605a      	str	r2, [r3, #4]
				break;
 8008180:	e006      	b.n	8008190 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3301      	adds	r3, #1
 8008186:	60fb      	str	r3, [r7, #12]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	2b07      	cmp	r3, #7
 800818c:	d9e5      	bls.n	800815a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800818e:	bf00      	nop
 8008190:	bf00      	nop
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	20005638 	.word	0x20005638

080081a0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80081a0:	b580      	push	{r7, lr}
 80081a2:	b086      	sub	sp, #24
 80081a4:	af00      	add	r7, sp, #0
 80081a6:	60f8      	str	r0, [r7, #12]
 80081a8:	60b9      	str	r1, [r7, #8]
 80081aa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80081b0:	f001 fd04 	bl	8009bbc <vPortEnterCritical>
 80081b4:	697b      	ldr	r3, [r7, #20]
 80081b6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081ba:	b25b      	sxtb	r3, r3
 80081bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081c0:	d103      	bne.n	80081ca <vQueueWaitForMessageRestricted+0x2a>
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081d0:	b25b      	sxtb	r3, r3
 80081d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d6:	d103      	bne.n	80081e0 <vQueueWaitForMessageRestricted+0x40>
 80081d8:	697b      	ldr	r3, [r7, #20]
 80081da:	2200      	movs	r2, #0
 80081dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80081e0:	f001 fd20 	bl	8009c24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80081e4:	697b      	ldr	r3, [r7, #20]
 80081e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d106      	bne.n	80081fa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	3324      	adds	r3, #36	; 0x24
 80081f0:	687a      	ldr	r2, [r7, #4]
 80081f2:	68b9      	ldr	r1, [r7, #8]
 80081f4:	4618      	mov	r0, r3
 80081f6:	f000 fc89 	bl	8008b0c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80081fa:	6978      	ldr	r0, [r7, #20]
 80081fc:	f7ff fefb 	bl	8007ff6 <prvUnlockQueue>
	}
 8008200:	bf00      	nop
 8008202:	3718      	adds	r7, #24
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}

08008208 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008208:	b580      	push	{r7, lr}
 800820a:	b08e      	sub	sp, #56	; 0x38
 800820c:	af04      	add	r7, sp, #16
 800820e:	60f8      	str	r0, [r7, #12]
 8008210:	60b9      	str	r1, [r7, #8]
 8008212:	607a      	str	r2, [r7, #4]
 8008214:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008218:	2b00      	cmp	r3, #0
 800821a:	d10c      	bne.n	8008236 <xTaskCreateStatic+0x2e>
	__asm volatile
 800821c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008220:	b672      	cpsid	i
 8008222:	f383 8811 	msr	BASEPRI, r3
 8008226:	f3bf 8f6f 	isb	sy
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	b662      	cpsie	i
 8008230:	623b      	str	r3, [r7, #32]
}
 8008232:	bf00      	nop
 8008234:	e7fe      	b.n	8008234 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8008236:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008238:	2b00      	cmp	r3, #0
 800823a:	d10c      	bne.n	8008256 <xTaskCreateStatic+0x4e>
	__asm volatile
 800823c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008240:	b672      	cpsid	i
 8008242:	f383 8811 	msr	BASEPRI, r3
 8008246:	f3bf 8f6f 	isb	sy
 800824a:	f3bf 8f4f 	dsb	sy
 800824e:	b662      	cpsie	i
 8008250:	61fb      	str	r3, [r7, #28]
}
 8008252:	bf00      	nop
 8008254:	e7fe      	b.n	8008254 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008256:	23bc      	movs	r3, #188	; 0xbc
 8008258:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	2bbc      	cmp	r3, #188	; 0xbc
 800825e:	d00c      	beq.n	800827a <xTaskCreateStatic+0x72>
	__asm volatile
 8008260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008264:	b672      	cpsid	i
 8008266:	f383 8811 	msr	BASEPRI, r3
 800826a:	f3bf 8f6f 	isb	sy
 800826e:	f3bf 8f4f 	dsb	sy
 8008272:	b662      	cpsie	i
 8008274:	61bb      	str	r3, [r7, #24]
}
 8008276:	bf00      	nop
 8008278:	e7fe      	b.n	8008278 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800827a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800827c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800827e:	2b00      	cmp	r3, #0
 8008280:	d01e      	beq.n	80082c0 <xTaskCreateStatic+0xb8>
 8008282:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008284:	2b00      	cmp	r3, #0
 8008286:	d01b      	beq.n	80082c0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800828a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800828c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800828e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008290:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008294:	2202      	movs	r2, #2
 8008296:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800829a:	2300      	movs	r3, #0
 800829c:	9303      	str	r3, [sp, #12]
 800829e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a0:	9302      	str	r3, [sp, #8]
 80082a2:	f107 0314 	add.w	r3, r7, #20
 80082a6:	9301      	str	r3, [sp, #4]
 80082a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082aa:	9300      	str	r3, [sp, #0]
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	687a      	ldr	r2, [r7, #4]
 80082b0:	68b9      	ldr	r1, [r7, #8]
 80082b2:	68f8      	ldr	r0, [r7, #12]
 80082b4:	f000 f850 	bl	8008358 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80082b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80082ba:	f000 f8f5 	bl	80084a8 <prvAddNewTaskToReadyList>
 80082be:	e001      	b.n	80082c4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80082c0:	2300      	movs	r3, #0
 80082c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80082c4:	697b      	ldr	r3, [r7, #20]
	}
 80082c6:	4618      	mov	r0, r3
 80082c8:	3728      	adds	r7, #40	; 0x28
 80082ca:	46bd      	mov	sp, r7
 80082cc:	bd80      	pop	{r7, pc}

080082ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80082ce:	b580      	push	{r7, lr}
 80082d0:	b08c      	sub	sp, #48	; 0x30
 80082d2:	af04      	add	r7, sp, #16
 80082d4:	60f8      	str	r0, [r7, #12]
 80082d6:	60b9      	str	r1, [r7, #8]
 80082d8:	603b      	str	r3, [r7, #0]
 80082da:	4613      	mov	r3, r2
 80082dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082de:	88fb      	ldrh	r3, [r7, #6]
 80082e0:	009b      	lsls	r3, r3, #2
 80082e2:	4618      	mov	r0, r3
 80082e4:	f001 fd96 	bl	8009e14 <pvPortMalloc>
 80082e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80082ea:	697b      	ldr	r3, [r7, #20]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d00e      	beq.n	800830e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80082f0:	20bc      	movs	r0, #188	; 0xbc
 80082f2:	f001 fd8f 	bl	8009e14 <pvPortMalloc>
 80082f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d003      	beq.n	8008306 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80082fe:	69fb      	ldr	r3, [r7, #28]
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	631a      	str	r2, [r3, #48]	; 0x30
 8008304:	e005      	b.n	8008312 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008306:	6978      	ldr	r0, [r7, #20]
 8008308:	f001 fe4e 	bl	8009fa8 <vPortFree>
 800830c:	e001      	b.n	8008312 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800830e:	2300      	movs	r3, #0
 8008310:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008312:	69fb      	ldr	r3, [r7, #28]
 8008314:	2b00      	cmp	r3, #0
 8008316:	d017      	beq.n	8008348 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008318:	69fb      	ldr	r3, [r7, #28]
 800831a:	2200      	movs	r2, #0
 800831c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008320:	88fa      	ldrh	r2, [r7, #6]
 8008322:	2300      	movs	r3, #0
 8008324:	9303      	str	r3, [sp, #12]
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	9302      	str	r3, [sp, #8]
 800832a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008330:	9300      	str	r3, [sp, #0]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	68b9      	ldr	r1, [r7, #8]
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f000 f80e 	bl	8008358 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800833c:	69f8      	ldr	r0, [r7, #28]
 800833e:	f000 f8b3 	bl	80084a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008342:	2301      	movs	r3, #1
 8008344:	61bb      	str	r3, [r7, #24]
 8008346:	e002      	b.n	800834e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008348:	f04f 33ff 	mov.w	r3, #4294967295
 800834c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800834e:	69bb      	ldr	r3, [r7, #24]
	}
 8008350:	4618      	mov	r0, r3
 8008352:	3720      	adds	r7, #32
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b088      	sub	sp, #32
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
 8008364:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008368:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	461a      	mov	r2, r3
 8008370:	21a5      	movs	r1, #165	; 0xa5
 8008372:	f00c f8e4 	bl	801453e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008378:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800837a:	6879      	ldr	r1, [r7, #4]
 800837c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008380:	440b      	add	r3, r1
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4413      	add	r3, r2
 8008386:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008388:	69bb      	ldr	r3, [r7, #24]
 800838a:	f023 0307 	bic.w	r3, r3, #7
 800838e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008390:	69bb      	ldr	r3, [r7, #24]
 8008392:	f003 0307 	and.w	r3, r3, #7
 8008396:	2b00      	cmp	r3, #0
 8008398:	d00c      	beq.n	80083b4 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800839a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800839e:	b672      	cpsid	i
 80083a0:	f383 8811 	msr	BASEPRI, r3
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	f3bf 8f4f 	dsb	sy
 80083ac:	b662      	cpsie	i
 80083ae:	617b      	str	r3, [r7, #20]
}
 80083b0:	bf00      	nop
 80083b2:	e7fe      	b.n	80083b2 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d01f      	beq.n	80083fa <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083ba:	2300      	movs	r3, #0
 80083bc:	61fb      	str	r3, [r7, #28]
 80083be:	e012      	b.n	80083e6 <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	69fb      	ldr	r3, [r7, #28]
 80083c4:	4413      	add	r3, r2
 80083c6:	7819      	ldrb	r1, [r3, #0]
 80083c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083ca:	69fb      	ldr	r3, [r7, #28]
 80083cc:	4413      	add	r3, r2
 80083ce:	3334      	adds	r3, #52	; 0x34
 80083d0:	460a      	mov	r2, r1
 80083d2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083d4:	68ba      	ldr	r2, [r7, #8]
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	4413      	add	r3, r2
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d006      	beq.n	80083ee <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	3301      	adds	r3, #1
 80083e4:	61fb      	str	r3, [r7, #28]
 80083e6:	69fb      	ldr	r3, [r7, #28]
 80083e8:	2b0f      	cmp	r3, #15
 80083ea:	d9e9      	bls.n	80083c0 <prvInitialiseNewTask+0x68>
 80083ec:	e000      	b.n	80083f0 <prvInitialiseNewTask+0x98>
			{
				break;
 80083ee:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083f2:	2200      	movs	r2, #0
 80083f4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80083f8:	e003      	b.n	8008402 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083fc:	2200      	movs	r2, #0
 80083fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008404:	2b37      	cmp	r3, #55	; 0x37
 8008406:	d901      	bls.n	800840c <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008408:	2337      	movs	r3, #55	; 0x37
 800840a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800840c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800840e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008410:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008414:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008416:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800841a:	2200      	movs	r2, #0
 800841c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800841e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008420:	3304      	adds	r3, #4
 8008422:	4618      	mov	r0, r3
 8008424:	f7fe fd4c 	bl	8006ec0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842a:	3318      	adds	r3, #24
 800842c:	4618      	mov	r0, r3
 800842e:	f7fe fd47 	bl	8006ec0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008432:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008436:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800843e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008440:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008446:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800844a:	2200      	movs	r2, #0
 800844c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008452:	2200      	movs	r2, #0
 8008454:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800845a:	3354      	adds	r3, #84	; 0x54
 800845c:	2260      	movs	r2, #96	; 0x60
 800845e:	2100      	movs	r1, #0
 8008460:	4618      	mov	r0, r3
 8008462:	f00c f86c 	bl	801453e <memset>
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	4a0c      	ldr	r2, [pc, #48]	; (800849c <prvInitialiseNewTask+0x144>)
 800846a:	659a      	str	r2, [r3, #88]	; 0x58
 800846c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800846e:	4a0c      	ldr	r2, [pc, #48]	; (80084a0 <prvInitialiseNewTask+0x148>)
 8008470:	65da      	str	r2, [r3, #92]	; 0x5c
 8008472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008474:	4a0b      	ldr	r2, [pc, #44]	; (80084a4 <prvInitialiseNewTask+0x14c>)
 8008476:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008478:	683a      	ldr	r2, [r7, #0]
 800847a:	68f9      	ldr	r1, [r7, #12]
 800847c:	69b8      	ldr	r0, [r7, #24]
 800847e:	f001 fa8f 	bl	80099a0 <pxPortInitialiseStack>
 8008482:	4602      	mov	r2, r0
 8008484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008486:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d002      	beq.n	8008494 <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800848e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008492:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008494:	bf00      	nop
 8008496:	3720      	adds	r7, #32
 8008498:	46bd      	mov	sp, r7
 800849a:	bd80      	pop	{r7, pc}
 800849c:	08018184 	.word	0x08018184
 80084a0:	080181a4 	.word	0x080181a4
 80084a4:	08018164 	.word	0x08018164

080084a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b082      	sub	sp, #8
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084b0:	f001 fb84 	bl	8009bbc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084b4:	4b2d      	ldr	r3, [pc, #180]	; (800856c <prvAddNewTaskToReadyList+0xc4>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3301      	adds	r3, #1
 80084ba:	4a2c      	ldr	r2, [pc, #176]	; (800856c <prvAddNewTaskToReadyList+0xc4>)
 80084bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80084be:	4b2c      	ldr	r3, [pc, #176]	; (8008570 <prvAddNewTaskToReadyList+0xc8>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d109      	bne.n	80084da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80084c6:	4a2a      	ldr	r2, [pc, #168]	; (8008570 <prvAddNewTaskToReadyList+0xc8>)
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80084cc:	4b27      	ldr	r3, [pc, #156]	; (800856c <prvAddNewTaskToReadyList+0xc4>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d110      	bne.n	80084f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80084d4:	f000 fc4e 	bl	8008d74 <prvInitialiseTaskLists>
 80084d8:	e00d      	b.n	80084f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80084da:	4b26      	ldr	r3, [pc, #152]	; (8008574 <prvAddNewTaskToReadyList+0xcc>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	2b00      	cmp	r3, #0
 80084e0:	d109      	bne.n	80084f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084e2:	4b23      	ldr	r3, [pc, #140]	; (8008570 <prvAddNewTaskToReadyList+0xc8>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d802      	bhi.n	80084f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80084f0:	4a1f      	ldr	r2, [pc, #124]	; (8008570 <prvAddNewTaskToReadyList+0xc8>)
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80084f6:	4b20      	ldr	r3, [pc, #128]	; (8008578 <prvAddNewTaskToReadyList+0xd0>)
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	3301      	adds	r3, #1
 80084fc:	4a1e      	ldr	r2, [pc, #120]	; (8008578 <prvAddNewTaskToReadyList+0xd0>)
 80084fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008500:	4b1d      	ldr	r3, [pc, #116]	; (8008578 <prvAddNewTaskToReadyList+0xd0>)
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850c:	4b1b      	ldr	r3, [pc, #108]	; (800857c <prvAddNewTaskToReadyList+0xd4>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	429a      	cmp	r2, r3
 8008512:	d903      	bls.n	800851c <prvAddNewTaskToReadyList+0x74>
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008518:	4a18      	ldr	r2, [pc, #96]	; (800857c <prvAddNewTaskToReadyList+0xd4>)
 800851a:	6013      	str	r3, [r2, #0]
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008520:	4613      	mov	r3, r2
 8008522:	009b      	lsls	r3, r3, #2
 8008524:	4413      	add	r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4a15      	ldr	r2, [pc, #84]	; (8008580 <prvAddNewTaskToReadyList+0xd8>)
 800852a:	441a      	add	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	3304      	adds	r3, #4
 8008530:	4619      	mov	r1, r3
 8008532:	4610      	mov	r0, r2
 8008534:	f7fe fcd1 	bl	8006eda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008538:	f001 fb74 	bl	8009c24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800853c:	4b0d      	ldr	r3, [pc, #52]	; (8008574 <prvAddNewTaskToReadyList+0xcc>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00e      	beq.n	8008562 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008544:	4b0a      	ldr	r3, [pc, #40]	; (8008570 <prvAddNewTaskToReadyList+0xc8>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800854e:	429a      	cmp	r2, r3
 8008550:	d207      	bcs.n	8008562 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008552:	4b0c      	ldr	r3, [pc, #48]	; (8008584 <prvAddNewTaskToReadyList+0xdc>)
 8008554:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008558:	601a      	str	r2, [r3, #0]
 800855a:	f3bf 8f4f 	dsb	sy
 800855e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008562:	bf00      	nop
 8008564:	3708      	adds	r7, #8
 8008566:	46bd      	mov	sp, r7
 8008568:	bd80      	pop	{r7, pc}
 800856a:	bf00      	nop
 800856c:	20005b4c 	.word	0x20005b4c
 8008570:	20005678 	.word	0x20005678
 8008574:	20005b58 	.word	0x20005b58
 8008578:	20005b68 	.word	0x20005b68
 800857c:	20005b54 	.word	0x20005b54
 8008580:	2000567c 	.word	0x2000567c
 8008584:	e000ed04 	.word	0xe000ed04

08008588 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008590:	2300      	movs	r3, #0
 8008592:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	2b00      	cmp	r3, #0
 8008598:	d019      	beq.n	80085ce <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800859a:	4b14      	ldr	r3, [pc, #80]	; (80085ec <vTaskDelay+0x64>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d00c      	beq.n	80085bc <vTaskDelay+0x34>
	__asm volatile
 80085a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085a6:	b672      	cpsid	i
 80085a8:	f383 8811 	msr	BASEPRI, r3
 80085ac:	f3bf 8f6f 	isb	sy
 80085b0:	f3bf 8f4f 	dsb	sy
 80085b4:	b662      	cpsie	i
 80085b6:	60bb      	str	r3, [r7, #8]
}
 80085b8:	bf00      	nop
 80085ba:	e7fe      	b.n	80085ba <vTaskDelay+0x32>
			vTaskSuspendAll();
 80085bc:	f000 f88e 	bl	80086dc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80085c0:	2100      	movs	r1, #0
 80085c2:	6878      	ldr	r0, [r7, #4]
 80085c4:	f000 fe3c 	bl	8009240 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80085c8:	f000 f896 	bl	80086f8 <xTaskResumeAll>
 80085cc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d107      	bne.n	80085e4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80085d4:	4b06      	ldr	r3, [pc, #24]	; (80085f0 <vTaskDelay+0x68>)
 80085d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085da:	601a      	str	r2, [r3, #0]
 80085dc:	f3bf 8f4f 	dsb	sy
 80085e0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085e4:	bf00      	nop
 80085e6:	3710      	adds	r7, #16
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	20005b74 	.word	0x20005b74
 80085f0:	e000ed04 	.word	0xe000ed04

080085f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b08a      	sub	sp, #40	; 0x28
 80085f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80085fa:	2300      	movs	r3, #0
 80085fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80085fe:	2300      	movs	r3, #0
 8008600:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008602:	463a      	mov	r2, r7
 8008604:	1d39      	adds	r1, r7, #4
 8008606:	f107 0308 	add.w	r3, r7, #8
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe fc04 	bl	8006e18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008610:	6839      	ldr	r1, [r7, #0]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	68ba      	ldr	r2, [r7, #8]
 8008616:	9202      	str	r2, [sp, #8]
 8008618:	9301      	str	r3, [sp, #4]
 800861a:	2300      	movs	r3, #0
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	2300      	movs	r3, #0
 8008620:	460a      	mov	r2, r1
 8008622:	4926      	ldr	r1, [pc, #152]	; (80086bc <vTaskStartScheduler+0xc8>)
 8008624:	4826      	ldr	r0, [pc, #152]	; (80086c0 <vTaskStartScheduler+0xcc>)
 8008626:	f7ff fdef 	bl	8008208 <xTaskCreateStatic>
 800862a:	4603      	mov	r3, r0
 800862c:	4a25      	ldr	r2, [pc, #148]	; (80086c4 <vTaskStartScheduler+0xd0>)
 800862e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008630:	4b24      	ldr	r3, [pc, #144]	; (80086c4 <vTaskStartScheduler+0xd0>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d002      	beq.n	800863e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008638:	2301      	movs	r3, #1
 800863a:	617b      	str	r3, [r7, #20]
 800863c:	e001      	b.n	8008642 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800863e:	2300      	movs	r3, #0
 8008640:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008642:	697b      	ldr	r3, [r7, #20]
 8008644:	2b01      	cmp	r3, #1
 8008646:	d102      	bne.n	800864e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008648:	f000 fe4e 	bl	80092e8 <xTimerCreateTimerTask>
 800864c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	2b01      	cmp	r3, #1
 8008652:	d11d      	bne.n	8008690 <vTaskStartScheduler+0x9c>
	__asm volatile
 8008654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008658:	b672      	cpsid	i
 800865a:	f383 8811 	msr	BASEPRI, r3
 800865e:	f3bf 8f6f 	isb	sy
 8008662:	f3bf 8f4f 	dsb	sy
 8008666:	b662      	cpsie	i
 8008668:	613b      	str	r3, [r7, #16]
}
 800866a:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800866c:	4b16      	ldr	r3, [pc, #88]	; (80086c8 <vTaskStartScheduler+0xd4>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3354      	adds	r3, #84	; 0x54
 8008672:	4a16      	ldr	r2, [pc, #88]	; (80086cc <vTaskStartScheduler+0xd8>)
 8008674:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008676:	4b16      	ldr	r3, [pc, #88]	; (80086d0 <vTaskStartScheduler+0xdc>)
 8008678:	f04f 32ff 	mov.w	r2, #4294967295
 800867c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800867e:	4b15      	ldr	r3, [pc, #84]	; (80086d4 <vTaskStartScheduler+0xe0>)
 8008680:	2201      	movs	r2, #1
 8008682:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008684:	4b14      	ldr	r3, [pc, #80]	; (80086d8 <vTaskStartScheduler+0xe4>)
 8008686:	2200      	movs	r2, #0
 8008688:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800868a:	f001 fa19 	bl	8009ac0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800868e:	e010      	b.n	80086b2 <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008690:	697b      	ldr	r3, [r7, #20]
 8008692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008696:	d10c      	bne.n	80086b2 <vTaskStartScheduler+0xbe>
	__asm volatile
 8008698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800869c:	b672      	cpsid	i
 800869e:	f383 8811 	msr	BASEPRI, r3
 80086a2:	f3bf 8f6f 	isb	sy
 80086a6:	f3bf 8f4f 	dsb	sy
 80086aa:	b662      	cpsie	i
 80086ac:	60fb      	str	r3, [r7, #12]
}
 80086ae:	bf00      	nop
 80086b0:	e7fe      	b.n	80086b0 <vTaskStartScheduler+0xbc>
}
 80086b2:	bf00      	nop
 80086b4:	3718      	adds	r7, #24
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	08015558 	.word	0x08015558
 80086c0:	08008d45 	.word	0x08008d45
 80086c4:	20005b70 	.word	0x20005b70
 80086c8:	20005678 	.word	0x20005678
 80086cc:	20000030 	.word	0x20000030
 80086d0:	20005b6c 	.word	0x20005b6c
 80086d4:	20005b58 	.word	0x20005b58
 80086d8:	20005b50 	.word	0x20005b50

080086dc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80086dc:	b480      	push	{r7}
 80086de:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80086e0:	4b04      	ldr	r3, [pc, #16]	; (80086f4 <vTaskSuspendAll+0x18>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	3301      	adds	r3, #1
 80086e6:	4a03      	ldr	r2, [pc, #12]	; (80086f4 <vTaskSuspendAll+0x18>)
 80086e8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 80086ea:	bf00      	nop
 80086ec:	46bd      	mov	sp, r7
 80086ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f2:	4770      	bx	lr
 80086f4:	20005b74 	.word	0x20005b74

080086f8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b084      	sub	sp, #16
 80086fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80086fe:	2300      	movs	r3, #0
 8008700:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008702:	2300      	movs	r3, #0
 8008704:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008706:	4b43      	ldr	r3, [pc, #268]	; (8008814 <xTaskResumeAll+0x11c>)
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10c      	bne.n	8008728 <xTaskResumeAll+0x30>
	__asm volatile
 800870e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008712:	b672      	cpsid	i
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	b662      	cpsie	i
 8008722:	603b      	str	r3, [r7, #0]
}
 8008724:	bf00      	nop
 8008726:	e7fe      	b.n	8008726 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008728:	f001 fa48 	bl	8009bbc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800872c:	4b39      	ldr	r3, [pc, #228]	; (8008814 <xTaskResumeAll+0x11c>)
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	3b01      	subs	r3, #1
 8008732:	4a38      	ldr	r2, [pc, #224]	; (8008814 <xTaskResumeAll+0x11c>)
 8008734:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008736:	4b37      	ldr	r3, [pc, #220]	; (8008814 <xTaskResumeAll+0x11c>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d162      	bne.n	8008804 <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800873e:	4b36      	ldr	r3, [pc, #216]	; (8008818 <xTaskResumeAll+0x120>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d05e      	beq.n	8008804 <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008746:	e02f      	b.n	80087a8 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008748:	4b34      	ldr	r3, [pc, #208]	; (800881c <xTaskResumeAll+0x124>)
 800874a:	68db      	ldr	r3, [r3, #12]
 800874c:	68db      	ldr	r3, [r3, #12]
 800874e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	3318      	adds	r3, #24
 8008754:	4618      	mov	r0, r3
 8008756:	f7fe fc1d 	bl	8006f94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	3304      	adds	r3, #4
 800875e:	4618      	mov	r0, r3
 8008760:	f7fe fc18 	bl	8006f94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008768:	4b2d      	ldr	r3, [pc, #180]	; (8008820 <xTaskResumeAll+0x128>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	429a      	cmp	r2, r3
 800876e:	d903      	bls.n	8008778 <xTaskResumeAll+0x80>
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008774:	4a2a      	ldr	r2, [pc, #168]	; (8008820 <xTaskResumeAll+0x128>)
 8008776:	6013      	str	r3, [r2, #0]
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800877c:	4613      	mov	r3, r2
 800877e:	009b      	lsls	r3, r3, #2
 8008780:	4413      	add	r3, r2
 8008782:	009b      	lsls	r3, r3, #2
 8008784:	4a27      	ldr	r2, [pc, #156]	; (8008824 <xTaskResumeAll+0x12c>)
 8008786:	441a      	add	r2, r3
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	3304      	adds	r3, #4
 800878c:	4619      	mov	r1, r3
 800878e:	4610      	mov	r0, r2
 8008790:	f7fe fba3 	bl	8006eda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008798:	4b23      	ldr	r3, [pc, #140]	; (8008828 <xTaskResumeAll+0x130>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879e:	429a      	cmp	r2, r3
 80087a0:	d302      	bcc.n	80087a8 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80087a2:	4b22      	ldr	r3, [pc, #136]	; (800882c <xTaskResumeAll+0x134>)
 80087a4:	2201      	movs	r2, #1
 80087a6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087a8:	4b1c      	ldr	r3, [pc, #112]	; (800881c <xTaskResumeAll+0x124>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d1cb      	bne.n	8008748 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d001      	beq.n	80087ba <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80087b6:	f000 fb81 	bl	8008ebc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80087ba:	4b1d      	ldr	r3, [pc, #116]	; (8008830 <xTaskResumeAll+0x138>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d010      	beq.n	80087e8 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80087c6:	f000 f859 	bl	800887c <xTaskIncrementTick>
 80087ca:	4603      	mov	r3, r0
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d002      	beq.n	80087d6 <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80087d0:	4b16      	ldr	r3, [pc, #88]	; (800882c <xTaskResumeAll+0x134>)
 80087d2:	2201      	movs	r2, #1
 80087d4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	3b01      	subs	r3, #1
 80087da:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1f1      	bne.n	80087c6 <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 80087e2:	4b13      	ldr	r3, [pc, #76]	; (8008830 <xTaskResumeAll+0x138>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80087e8:	4b10      	ldr	r3, [pc, #64]	; (800882c <xTaskResumeAll+0x134>)
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d009      	beq.n	8008804 <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80087f0:	2301      	movs	r3, #1
 80087f2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80087f4:	4b0f      	ldr	r3, [pc, #60]	; (8008834 <xTaskResumeAll+0x13c>)
 80087f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80087fa:	601a      	str	r2, [r3, #0]
 80087fc:	f3bf 8f4f 	dsb	sy
 8008800:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008804:	f001 fa0e 	bl	8009c24 <vPortExitCritical>

	return xAlreadyYielded;
 8008808:	68bb      	ldr	r3, [r7, #8]
}
 800880a:	4618      	mov	r0, r3
 800880c:	3710      	adds	r7, #16
 800880e:	46bd      	mov	sp, r7
 8008810:	bd80      	pop	{r7, pc}
 8008812:	bf00      	nop
 8008814:	20005b74 	.word	0x20005b74
 8008818:	20005b4c 	.word	0x20005b4c
 800881c:	20005b0c 	.word	0x20005b0c
 8008820:	20005b54 	.word	0x20005b54
 8008824:	2000567c 	.word	0x2000567c
 8008828:	20005678 	.word	0x20005678
 800882c:	20005b60 	.word	0x20005b60
 8008830:	20005b5c 	.word	0x20005b5c
 8008834:	e000ed04 	.word	0xe000ed04

08008838 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008838:	b480      	push	{r7}
 800883a:	b083      	sub	sp, #12
 800883c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800883e:	4b05      	ldr	r3, [pc, #20]	; (8008854 <xTaskGetTickCount+0x1c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008844:	687b      	ldr	r3, [r7, #4]
}
 8008846:	4618      	mov	r0, r3
 8008848:	370c      	adds	r7, #12
 800884a:	46bd      	mov	sp, r7
 800884c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008850:	4770      	bx	lr
 8008852:	bf00      	nop
 8008854:	20005b50 	.word	0x20005b50

08008858 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b082      	sub	sp, #8
 800885c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800885e:	f001 fa95 	bl	8009d8c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008862:	2300      	movs	r3, #0
 8008864:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8008866:	4b04      	ldr	r3, [pc, #16]	; (8008878 <xTaskGetTickCountFromISR+0x20>)
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800886c:	683b      	ldr	r3, [r7, #0]
}
 800886e:	4618      	mov	r0, r3
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}
 8008876:	bf00      	nop
 8008878:	20005b50 	.word	0x20005b50

0800887c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008882:	2300      	movs	r3, #0
 8008884:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008886:	4b50      	ldr	r3, [pc, #320]	; (80089c8 <xTaskIncrementTick+0x14c>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	f040 808b 	bne.w	80089a6 <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008890:	4b4e      	ldr	r3, [pc, #312]	; (80089cc <xTaskIncrementTick+0x150>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	3301      	adds	r3, #1
 8008896:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008898:	4a4c      	ldr	r2, [pc, #304]	; (80089cc <xTaskIncrementTick+0x150>)
 800889a:	693b      	ldr	r3, [r7, #16]
 800889c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800889e:	693b      	ldr	r3, [r7, #16]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d122      	bne.n	80088ea <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80088a4:	4b4a      	ldr	r3, [pc, #296]	; (80089d0 <xTaskIncrementTick+0x154>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00c      	beq.n	80088c8 <xTaskIncrementTick+0x4c>
	__asm volatile
 80088ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088b2:	b672      	cpsid	i
 80088b4:	f383 8811 	msr	BASEPRI, r3
 80088b8:	f3bf 8f6f 	isb	sy
 80088bc:	f3bf 8f4f 	dsb	sy
 80088c0:	b662      	cpsie	i
 80088c2:	603b      	str	r3, [r7, #0]
}
 80088c4:	bf00      	nop
 80088c6:	e7fe      	b.n	80088c6 <xTaskIncrementTick+0x4a>
 80088c8:	4b41      	ldr	r3, [pc, #260]	; (80089d0 <xTaskIncrementTick+0x154>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	60fb      	str	r3, [r7, #12]
 80088ce:	4b41      	ldr	r3, [pc, #260]	; (80089d4 <xTaskIncrementTick+0x158>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	4a3f      	ldr	r2, [pc, #252]	; (80089d0 <xTaskIncrementTick+0x154>)
 80088d4:	6013      	str	r3, [r2, #0]
 80088d6:	4a3f      	ldr	r2, [pc, #252]	; (80089d4 <xTaskIncrementTick+0x158>)
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	6013      	str	r3, [r2, #0]
 80088dc:	4b3e      	ldr	r3, [pc, #248]	; (80089d8 <xTaskIncrementTick+0x15c>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	3301      	adds	r3, #1
 80088e2:	4a3d      	ldr	r2, [pc, #244]	; (80089d8 <xTaskIncrementTick+0x15c>)
 80088e4:	6013      	str	r3, [r2, #0]
 80088e6:	f000 fae9 	bl	8008ebc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088ea:	4b3c      	ldr	r3, [pc, #240]	; (80089dc <xTaskIncrementTick+0x160>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	693a      	ldr	r2, [r7, #16]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d349      	bcc.n	8008988 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088f4:	4b36      	ldr	r3, [pc, #216]	; (80089d0 <xTaskIncrementTick+0x154>)
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d104      	bne.n	8008908 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088fe:	4b37      	ldr	r3, [pc, #220]	; (80089dc <xTaskIncrementTick+0x160>)
 8008900:	f04f 32ff 	mov.w	r2, #4294967295
 8008904:	601a      	str	r2, [r3, #0]
					break;
 8008906:	e03f      	b.n	8008988 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008908:	4b31      	ldr	r3, [pc, #196]	; (80089d0 <xTaskIncrementTick+0x154>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	68db      	ldr	r3, [r3, #12]
 800890e:	68db      	ldr	r3, [r3, #12]
 8008910:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	429a      	cmp	r2, r3
 800891e:	d203      	bcs.n	8008928 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008920:	4a2e      	ldr	r2, [pc, #184]	; (80089dc <xTaskIncrementTick+0x160>)
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008926:	e02f      	b.n	8008988 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008928:	68bb      	ldr	r3, [r7, #8]
 800892a:	3304      	adds	r3, #4
 800892c:	4618      	mov	r0, r3
 800892e:	f7fe fb31 	bl	8006f94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008932:	68bb      	ldr	r3, [r7, #8]
 8008934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008936:	2b00      	cmp	r3, #0
 8008938:	d004      	beq.n	8008944 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	3318      	adds	r3, #24
 800893e:	4618      	mov	r0, r3
 8008940:	f7fe fb28 	bl	8006f94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008944:	68bb      	ldr	r3, [r7, #8]
 8008946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008948:	4b25      	ldr	r3, [pc, #148]	; (80089e0 <xTaskIncrementTick+0x164>)
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	429a      	cmp	r2, r3
 800894e:	d903      	bls.n	8008958 <xTaskIncrementTick+0xdc>
 8008950:	68bb      	ldr	r3, [r7, #8]
 8008952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008954:	4a22      	ldr	r2, [pc, #136]	; (80089e0 <xTaskIncrementTick+0x164>)
 8008956:	6013      	str	r3, [r2, #0]
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800895c:	4613      	mov	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	4413      	add	r3, r2
 8008962:	009b      	lsls	r3, r3, #2
 8008964:	4a1f      	ldr	r2, [pc, #124]	; (80089e4 <xTaskIncrementTick+0x168>)
 8008966:	441a      	add	r2, r3
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	3304      	adds	r3, #4
 800896c:	4619      	mov	r1, r3
 800896e:	4610      	mov	r0, r2
 8008970:	f7fe fab3 	bl	8006eda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008978:	4b1b      	ldr	r3, [pc, #108]	; (80089e8 <xTaskIncrementTick+0x16c>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800897e:	429a      	cmp	r2, r3
 8008980:	d3b8      	bcc.n	80088f4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8008982:	2301      	movs	r3, #1
 8008984:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008986:	e7b5      	b.n	80088f4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008988:	4b17      	ldr	r3, [pc, #92]	; (80089e8 <xTaskIncrementTick+0x16c>)
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800898e:	4915      	ldr	r1, [pc, #84]	; (80089e4 <xTaskIncrementTick+0x168>)
 8008990:	4613      	mov	r3, r2
 8008992:	009b      	lsls	r3, r3, #2
 8008994:	4413      	add	r3, r2
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	440b      	add	r3, r1
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	2b01      	cmp	r3, #1
 800899e:	d907      	bls.n	80089b0 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80089a0:	2301      	movs	r3, #1
 80089a2:	617b      	str	r3, [r7, #20]
 80089a4:	e004      	b.n	80089b0 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80089a6:	4b11      	ldr	r3, [pc, #68]	; (80089ec <xTaskIncrementTick+0x170>)
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	3301      	adds	r3, #1
 80089ac:	4a0f      	ldr	r2, [pc, #60]	; (80089ec <xTaskIncrementTick+0x170>)
 80089ae:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80089b0:	4b0f      	ldr	r3, [pc, #60]	; (80089f0 <xTaskIncrementTick+0x174>)
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80089b8:	2301      	movs	r3, #1
 80089ba:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80089bc:	697b      	ldr	r3, [r7, #20]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3718      	adds	r7, #24
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}
 80089c6:	bf00      	nop
 80089c8:	20005b74 	.word	0x20005b74
 80089cc:	20005b50 	.word	0x20005b50
 80089d0:	20005b04 	.word	0x20005b04
 80089d4:	20005b08 	.word	0x20005b08
 80089d8:	20005b64 	.word	0x20005b64
 80089dc:	20005b6c 	.word	0x20005b6c
 80089e0:	20005b54 	.word	0x20005b54
 80089e4:	2000567c 	.word	0x2000567c
 80089e8:	20005678 	.word	0x20005678
 80089ec:	20005b5c 	.word	0x20005b5c
 80089f0:	20005b60 	.word	0x20005b60

080089f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089f4:	b480      	push	{r7}
 80089f6:	b085      	sub	sp, #20
 80089f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089fa:	4b2b      	ldr	r3, [pc, #172]	; (8008aa8 <vTaskSwitchContext+0xb4>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d003      	beq.n	8008a0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a02:	4b2a      	ldr	r3, [pc, #168]	; (8008aac <vTaskSwitchContext+0xb8>)
 8008a04:	2201      	movs	r2, #1
 8008a06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a08:	e048      	b.n	8008a9c <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008a0a:	4b28      	ldr	r3, [pc, #160]	; (8008aac <vTaskSwitchContext+0xb8>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a10:	4b27      	ldr	r3, [pc, #156]	; (8008ab0 <vTaskSwitchContext+0xbc>)
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	60fb      	str	r3, [r7, #12]
 8008a16:	e012      	b.n	8008a3e <vTaskSwitchContext+0x4a>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10c      	bne.n	8008a38 <vTaskSwitchContext+0x44>
	__asm volatile
 8008a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a22:	b672      	cpsid	i
 8008a24:	f383 8811 	msr	BASEPRI, r3
 8008a28:	f3bf 8f6f 	isb	sy
 8008a2c:	f3bf 8f4f 	dsb	sy
 8008a30:	b662      	cpsie	i
 8008a32:	607b      	str	r3, [r7, #4]
}
 8008a34:	bf00      	nop
 8008a36:	e7fe      	b.n	8008a36 <vTaskSwitchContext+0x42>
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	3b01      	subs	r3, #1
 8008a3c:	60fb      	str	r3, [r7, #12]
 8008a3e:	491d      	ldr	r1, [pc, #116]	; (8008ab4 <vTaskSwitchContext+0xc0>)
 8008a40:	68fa      	ldr	r2, [r7, #12]
 8008a42:	4613      	mov	r3, r2
 8008a44:	009b      	lsls	r3, r3, #2
 8008a46:	4413      	add	r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	440b      	add	r3, r1
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d0e2      	beq.n	8008a18 <vTaskSwitchContext+0x24>
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	4613      	mov	r3, r2
 8008a56:	009b      	lsls	r3, r3, #2
 8008a58:	4413      	add	r3, r2
 8008a5a:	009b      	lsls	r3, r3, #2
 8008a5c:	4a15      	ldr	r2, [pc, #84]	; (8008ab4 <vTaskSwitchContext+0xc0>)
 8008a5e:	4413      	add	r3, r2
 8008a60:	60bb      	str	r3, [r7, #8]
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	685a      	ldr	r2, [r3, #4]
 8008a68:	68bb      	ldr	r3, [r7, #8]
 8008a6a:	605a      	str	r2, [r3, #4]
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	685a      	ldr	r2, [r3, #4]
 8008a70:	68bb      	ldr	r3, [r7, #8]
 8008a72:	3308      	adds	r3, #8
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d104      	bne.n	8008a82 <vTaskSwitchContext+0x8e>
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	685a      	ldr	r2, [r3, #4]
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	605a      	str	r2, [r3, #4]
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	685b      	ldr	r3, [r3, #4]
 8008a86:	68db      	ldr	r3, [r3, #12]
 8008a88:	4a0b      	ldr	r2, [pc, #44]	; (8008ab8 <vTaskSwitchContext+0xc4>)
 8008a8a:	6013      	str	r3, [r2, #0]
 8008a8c:	4a08      	ldr	r2, [pc, #32]	; (8008ab0 <vTaskSwitchContext+0xbc>)
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008a92:	4b09      	ldr	r3, [pc, #36]	; (8008ab8 <vTaskSwitchContext+0xc4>)
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	3354      	adds	r3, #84	; 0x54
 8008a98:	4a08      	ldr	r2, [pc, #32]	; (8008abc <vTaskSwitchContext+0xc8>)
 8008a9a:	6013      	str	r3, [r2, #0]
}
 8008a9c:	bf00      	nop
 8008a9e:	3714      	adds	r7, #20
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa6:	4770      	bx	lr
 8008aa8:	20005b74 	.word	0x20005b74
 8008aac:	20005b60 	.word	0x20005b60
 8008ab0:	20005b54 	.word	0x20005b54
 8008ab4:	2000567c 	.word	0x2000567c
 8008ab8:	20005678 	.word	0x20005678
 8008abc:	20000030 	.word	0x20000030

08008ac0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008ac0:	b580      	push	{r7, lr}
 8008ac2:	b084      	sub	sp, #16
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d10c      	bne.n	8008aea <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8008ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad4:	b672      	cpsid	i
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	b662      	cpsie	i
 8008ae4:	60fb      	str	r3, [r7, #12]
}
 8008ae6:	bf00      	nop
 8008ae8:	e7fe      	b.n	8008ae8 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008aea:	4b07      	ldr	r3, [pc, #28]	; (8008b08 <vTaskPlaceOnEventList+0x48>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3318      	adds	r3, #24
 8008af0:	4619      	mov	r1, r3
 8008af2:	6878      	ldr	r0, [r7, #4]
 8008af4:	f7fe fa15 	bl	8006f22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008af8:	2101      	movs	r1, #1
 8008afa:	6838      	ldr	r0, [r7, #0]
 8008afc:	f000 fba0 	bl	8009240 <prvAddCurrentTaskToDelayedList>
}
 8008b00:	bf00      	nop
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	20005678 	.word	0x20005678

08008b0c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b086      	sub	sp, #24
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d10c      	bne.n	8008b38 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b22:	b672      	cpsid	i
 8008b24:	f383 8811 	msr	BASEPRI, r3
 8008b28:	f3bf 8f6f 	isb	sy
 8008b2c:	f3bf 8f4f 	dsb	sy
 8008b30:	b662      	cpsie	i
 8008b32:	617b      	str	r3, [r7, #20]
}
 8008b34:	bf00      	nop
 8008b36:	e7fe      	b.n	8008b36 <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b38:	4b0a      	ldr	r3, [pc, #40]	; (8008b64 <vTaskPlaceOnEventListRestricted+0x58>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	3318      	adds	r3, #24
 8008b3e:	4619      	mov	r1, r3
 8008b40:	68f8      	ldr	r0, [r7, #12]
 8008b42:	f7fe f9ca 	bl	8006eda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d002      	beq.n	8008b52 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008b4c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b50:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008b52:	6879      	ldr	r1, [r7, #4]
 8008b54:	68b8      	ldr	r0, [r7, #8]
 8008b56:	f000 fb73 	bl	8009240 <prvAddCurrentTaskToDelayedList>
	}
 8008b5a:	bf00      	nop
 8008b5c:	3718      	adds	r7, #24
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	20005678 	.word	0x20005678

08008b68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008b78:	693b      	ldr	r3, [r7, #16]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10c      	bne.n	8008b98 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	b672      	cpsid	i
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	b662      	cpsie	i
 8008b92:	60fb      	str	r3, [r7, #12]
}
 8008b94:	bf00      	nop
 8008b96:	e7fe      	b.n	8008b96 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008b98:	693b      	ldr	r3, [r7, #16]
 8008b9a:	3318      	adds	r3, #24
 8008b9c:	4618      	mov	r0, r3
 8008b9e:	f7fe f9f9 	bl	8006f94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008ba2:	4b1e      	ldr	r3, [pc, #120]	; (8008c1c <xTaskRemoveFromEventList+0xb4>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d11d      	bne.n	8008be6 <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	3304      	adds	r3, #4
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fe f9f0 	bl	8006f94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bb8:	4b19      	ldr	r3, [pc, #100]	; (8008c20 <xTaskRemoveFromEventList+0xb8>)
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	429a      	cmp	r2, r3
 8008bbe:	d903      	bls.n	8008bc8 <xTaskRemoveFromEventList+0x60>
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bc4:	4a16      	ldr	r2, [pc, #88]	; (8008c20 <xTaskRemoveFromEventList+0xb8>)
 8008bc6:	6013      	str	r3, [r2, #0]
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bcc:	4613      	mov	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	4413      	add	r3, r2
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	4a13      	ldr	r2, [pc, #76]	; (8008c24 <xTaskRemoveFromEventList+0xbc>)
 8008bd6:	441a      	add	r2, r3
 8008bd8:	693b      	ldr	r3, [r7, #16]
 8008bda:	3304      	adds	r3, #4
 8008bdc:	4619      	mov	r1, r3
 8008bde:	4610      	mov	r0, r2
 8008be0:	f7fe f97b 	bl	8006eda <vListInsertEnd>
 8008be4:	e005      	b.n	8008bf2 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	3318      	adds	r3, #24
 8008bea:	4619      	mov	r1, r3
 8008bec:	480e      	ldr	r0, [pc, #56]	; (8008c28 <xTaskRemoveFromEventList+0xc0>)
 8008bee:	f7fe f974 	bl	8006eda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bf6:	4b0d      	ldr	r3, [pc, #52]	; (8008c2c <xTaskRemoveFromEventList+0xc4>)
 8008bf8:	681b      	ldr	r3, [r3, #0]
 8008bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d905      	bls.n	8008c0c <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c00:	2301      	movs	r3, #1
 8008c02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c04:	4b0a      	ldr	r3, [pc, #40]	; (8008c30 <xTaskRemoveFromEventList+0xc8>)
 8008c06:	2201      	movs	r2, #1
 8008c08:	601a      	str	r2, [r3, #0]
 8008c0a:	e001      	b.n	8008c10 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c10:	697b      	ldr	r3, [r7, #20]
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3718      	adds	r7, #24
 8008c16:	46bd      	mov	sp, r7
 8008c18:	bd80      	pop	{r7, pc}
 8008c1a:	bf00      	nop
 8008c1c:	20005b74 	.word	0x20005b74
 8008c20:	20005b54 	.word	0x20005b54
 8008c24:	2000567c 	.word	0x2000567c
 8008c28:	20005b0c 	.word	0x20005b0c
 8008c2c:	20005678 	.word	0x20005678
 8008c30:	20005b60 	.word	0x20005b60

08008c34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c34:	b480      	push	{r7}
 8008c36:	b083      	sub	sp, #12
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008c3c:	4b06      	ldr	r3, [pc, #24]	; (8008c58 <vTaskInternalSetTimeOutState+0x24>)
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008c44:	4b05      	ldr	r3, [pc, #20]	; (8008c5c <vTaskInternalSetTimeOutState+0x28>)
 8008c46:	681a      	ldr	r2, [r3, #0]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	605a      	str	r2, [r3, #4]
}
 8008c4c:	bf00      	nop
 8008c4e:	370c      	adds	r7, #12
 8008c50:	46bd      	mov	sp, r7
 8008c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c56:	4770      	bx	lr
 8008c58:	20005b64 	.word	0x20005b64
 8008c5c:	20005b50 	.word	0x20005b50

08008c60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b088      	sub	sp, #32
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10c      	bne.n	8008c8a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c74:	b672      	cpsid	i
 8008c76:	f383 8811 	msr	BASEPRI, r3
 8008c7a:	f3bf 8f6f 	isb	sy
 8008c7e:	f3bf 8f4f 	dsb	sy
 8008c82:	b662      	cpsie	i
 8008c84:	613b      	str	r3, [r7, #16]
}
 8008c86:	bf00      	nop
 8008c88:	e7fe      	b.n	8008c88 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d10c      	bne.n	8008caa <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008c90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c94:	b672      	cpsid	i
 8008c96:	f383 8811 	msr	BASEPRI, r3
 8008c9a:	f3bf 8f6f 	isb	sy
 8008c9e:	f3bf 8f4f 	dsb	sy
 8008ca2:	b662      	cpsie	i
 8008ca4:	60fb      	str	r3, [r7, #12]
}
 8008ca6:	bf00      	nop
 8008ca8:	e7fe      	b.n	8008ca8 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008caa:	f000 ff87 	bl	8009bbc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008cae:	4b1d      	ldr	r3, [pc, #116]	; (8008d24 <xTaskCheckForTimeOut+0xc4>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	685b      	ldr	r3, [r3, #4]
 8008cb8:	69ba      	ldr	r2, [r7, #24]
 8008cba:	1ad3      	subs	r3, r2, r3
 8008cbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008cc6:	d102      	bne.n	8008cce <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	61fb      	str	r3, [r7, #28]
 8008ccc:	e023      	b.n	8008d16 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	4b15      	ldr	r3, [pc, #84]	; (8008d28 <xTaskCheckForTimeOut+0xc8>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d007      	beq.n	8008cea <xTaskCheckForTimeOut+0x8a>
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	685b      	ldr	r3, [r3, #4]
 8008cde:	69ba      	ldr	r2, [r7, #24]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d302      	bcc.n	8008cea <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008ce4:	2301      	movs	r3, #1
 8008ce6:	61fb      	str	r3, [r7, #28]
 8008ce8:	e015      	b.n	8008d16 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	697a      	ldr	r2, [r7, #20]
 8008cf0:	429a      	cmp	r2, r3
 8008cf2:	d20b      	bcs.n	8008d0c <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	681a      	ldr	r2, [r3, #0]
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	1ad2      	subs	r2, r2, r3
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f7ff ff97 	bl	8008c34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008d06:	2300      	movs	r3, #0
 8008d08:	61fb      	str	r3, [r7, #28]
 8008d0a:	e004      	b.n	8008d16 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008d12:	2301      	movs	r3, #1
 8008d14:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008d16:	f000 ff85 	bl	8009c24 <vPortExitCritical>

	return xReturn;
 8008d1a:	69fb      	ldr	r3, [r7, #28]
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3720      	adds	r7, #32
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	20005b50 	.word	0x20005b50
 8008d28:	20005b64 	.word	0x20005b64

08008d2c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008d30:	4b03      	ldr	r3, [pc, #12]	; (8008d40 <vTaskMissedYield+0x14>)
 8008d32:	2201      	movs	r2, #1
 8008d34:	601a      	str	r2, [r3, #0]
}
 8008d36:	bf00      	nop
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr
 8008d40:	20005b60 	.word	0x20005b60

08008d44 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008d4c:	f000 f852 	bl	8008df4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008d50:	4b06      	ldr	r3, [pc, #24]	; (8008d6c <prvIdleTask+0x28>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d9f9      	bls.n	8008d4c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008d58:	4b05      	ldr	r3, [pc, #20]	; (8008d70 <prvIdleTask+0x2c>)
 8008d5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d5e:	601a      	str	r2, [r3, #0]
 8008d60:	f3bf 8f4f 	dsb	sy
 8008d64:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008d68:	e7f0      	b.n	8008d4c <prvIdleTask+0x8>
 8008d6a:	bf00      	nop
 8008d6c:	2000567c 	.word	0x2000567c
 8008d70:	e000ed04 	.word	0xe000ed04

08008d74 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b082      	sub	sp, #8
 8008d78:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	607b      	str	r3, [r7, #4]
 8008d7e:	e00c      	b.n	8008d9a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008d80:	687a      	ldr	r2, [r7, #4]
 8008d82:	4613      	mov	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	4413      	add	r3, r2
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4a12      	ldr	r2, [pc, #72]	; (8008dd4 <prvInitialiseTaskLists+0x60>)
 8008d8c:	4413      	add	r3, r2
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f7fe f876 	bl	8006e80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	3301      	adds	r3, #1
 8008d98:	607b      	str	r3, [r7, #4]
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2b37      	cmp	r3, #55	; 0x37
 8008d9e:	d9ef      	bls.n	8008d80 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008da0:	480d      	ldr	r0, [pc, #52]	; (8008dd8 <prvInitialiseTaskLists+0x64>)
 8008da2:	f7fe f86d 	bl	8006e80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008da6:	480d      	ldr	r0, [pc, #52]	; (8008ddc <prvInitialiseTaskLists+0x68>)
 8008da8:	f7fe f86a 	bl	8006e80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008dac:	480c      	ldr	r0, [pc, #48]	; (8008de0 <prvInitialiseTaskLists+0x6c>)
 8008dae:	f7fe f867 	bl	8006e80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008db2:	480c      	ldr	r0, [pc, #48]	; (8008de4 <prvInitialiseTaskLists+0x70>)
 8008db4:	f7fe f864 	bl	8006e80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008db8:	480b      	ldr	r0, [pc, #44]	; (8008de8 <prvInitialiseTaskLists+0x74>)
 8008dba:	f7fe f861 	bl	8006e80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008dbe:	4b0b      	ldr	r3, [pc, #44]	; (8008dec <prvInitialiseTaskLists+0x78>)
 8008dc0:	4a05      	ldr	r2, [pc, #20]	; (8008dd8 <prvInitialiseTaskLists+0x64>)
 8008dc2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008dc4:	4b0a      	ldr	r3, [pc, #40]	; (8008df0 <prvInitialiseTaskLists+0x7c>)
 8008dc6:	4a05      	ldr	r2, [pc, #20]	; (8008ddc <prvInitialiseTaskLists+0x68>)
 8008dc8:	601a      	str	r2, [r3, #0]
}
 8008dca:	bf00      	nop
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}
 8008dd2:	bf00      	nop
 8008dd4:	2000567c 	.word	0x2000567c
 8008dd8:	20005adc 	.word	0x20005adc
 8008ddc:	20005af0 	.word	0x20005af0
 8008de0:	20005b0c 	.word	0x20005b0c
 8008de4:	20005b20 	.word	0x20005b20
 8008de8:	20005b38 	.word	0x20005b38
 8008dec:	20005b04 	.word	0x20005b04
 8008df0:	20005b08 	.word	0x20005b08

08008df4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008dfa:	e019      	b.n	8008e30 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008dfc:	f000 fede 	bl	8009bbc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e00:	4b10      	ldr	r3, [pc, #64]	; (8008e44 <prvCheckTasksWaitingTermination+0x50>)
 8008e02:	68db      	ldr	r3, [r3, #12]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	3304      	adds	r3, #4
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	f7fe f8c1 	bl	8006f94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008e12:	4b0d      	ldr	r3, [pc, #52]	; (8008e48 <prvCheckTasksWaitingTermination+0x54>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	3b01      	subs	r3, #1
 8008e18:	4a0b      	ldr	r2, [pc, #44]	; (8008e48 <prvCheckTasksWaitingTermination+0x54>)
 8008e1a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008e1c:	4b0b      	ldr	r3, [pc, #44]	; (8008e4c <prvCheckTasksWaitingTermination+0x58>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	3b01      	subs	r3, #1
 8008e22:	4a0a      	ldr	r2, [pc, #40]	; (8008e4c <prvCheckTasksWaitingTermination+0x58>)
 8008e24:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008e26:	f000 fefd 	bl	8009c24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f000 f810 	bl	8008e50 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e30:	4b06      	ldr	r3, [pc, #24]	; (8008e4c <prvCheckTasksWaitingTermination+0x58>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d1e1      	bne.n	8008dfc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008e38:	bf00      	nop
 8008e3a:	bf00      	nop
 8008e3c:	3708      	adds	r7, #8
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	bd80      	pop	{r7, pc}
 8008e42:	bf00      	nop
 8008e44:	20005b20 	.word	0x20005b20
 8008e48:	20005b4c 	.word	0x20005b4c
 8008e4c:	20005b34 	.word	0x20005b34

08008e50 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b084      	sub	sp, #16
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	3354      	adds	r3, #84	; 0x54
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f00b fc6f 	bl	8014740 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d108      	bne.n	8008e7e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e70:	4618      	mov	r0, r3
 8008e72:	f001 f899 	bl	8009fa8 <vPortFree>
				vPortFree( pxTCB );
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f001 f896 	bl	8009fa8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008e7c:	e01a      	b.n	8008eb4 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d103      	bne.n	8008e90 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f001 f88d 	bl	8009fa8 <vPortFree>
	}
 8008e8e:	e011      	b.n	8008eb4 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008e96:	2b02      	cmp	r3, #2
 8008e98:	d00c      	beq.n	8008eb4 <prvDeleteTCB+0x64>
	__asm volatile
 8008e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e9e:	b672      	cpsid	i
 8008ea0:	f383 8811 	msr	BASEPRI, r3
 8008ea4:	f3bf 8f6f 	isb	sy
 8008ea8:	f3bf 8f4f 	dsb	sy
 8008eac:	b662      	cpsie	i
 8008eae:	60fb      	str	r3, [r7, #12]
}
 8008eb0:	bf00      	nop
 8008eb2:	e7fe      	b.n	8008eb2 <prvDeleteTCB+0x62>
	}
 8008eb4:	bf00      	nop
 8008eb6:	3710      	adds	r7, #16
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}

08008ebc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ec2:	4b0c      	ldr	r3, [pc, #48]	; (8008ef4 <prvResetNextTaskUnblockTime+0x38>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d104      	bne.n	8008ed6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008ecc:	4b0a      	ldr	r3, [pc, #40]	; (8008ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8008ece:	f04f 32ff 	mov.w	r2, #4294967295
 8008ed2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ed4:	e008      	b.n	8008ee8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ed6:	4b07      	ldr	r3, [pc, #28]	; (8008ef4 <prvResetNextTaskUnblockTime+0x38>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	4a04      	ldr	r2, [pc, #16]	; (8008ef8 <prvResetNextTaskUnblockTime+0x3c>)
 8008ee6:	6013      	str	r3, [r2, #0]
}
 8008ee8:	bf00      	nop
 8008eea:	370c      	adds	r7, #12
 8008eec:	46bd      	mov	sp, r7
 8008eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef2:	4770      	bx	lr
 8008ef4:	20005b04 	.word	0x20005b04
 8008ef8:	20005b6c 	.word	0x20005b6c

08008efc <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008f02:	4b05      	ldr	r3, [pc, #20]	; (8008f18 <xTaskGetCurrentTaskHandle+0x1c>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008f08:	687b      	ldr	r3, [r7, #4]
	}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	370c      	adds	r7, #12
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	20005678 	.word	0x20005678

08008f1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f1c:	b480      	push	{r7}
 8008f1e:	b083      	sub	sp, #12
 8008f20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f22:	4b0b      	ldr	r3, [pc, #44]	; (8008f50 <xTaskGetSchedulerState+0x34>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d102      	bne.n	8008f30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f2a:	2301      	movs	r3, #1
 8008f2c:	607b      	str	r3, [r7, #4]
 8008f2e:	e008      	b.n	8008f42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f30:	4b08      	ldr	r3, [pc, #32]	; (8008f54 <xTaskGetSchedulerState+0x38>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d102      	bne.n	8008f3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008f38:	2302      	movs	r3, #2
 8008f3a:	607b      	str	r3, [r7, #4]
 8008f3c:	e001      	b.n	8008f42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008f42:	687b      	ldr	r3, [r7, #4]
	}
 8008f44:	4618      	mov	r0, r3
 8008f46:	370c      	adds	r7, #12
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f4e:	4770      	bx	lr
 8008f50:	20005b58 	.word	0x20005b58
 8008f54:	20005b74 	.word	0x20005b74

08008f58 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008f64:	2300      	movs	r3, #0
 8008f66:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d051      	beq.n	8009012 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008f6e:	68bb      	ldr	r3, [r7, #8]
 8008f70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f72:	4b2a      	ldr	r3, [pc, #168]	; (800901c <xTaskPriorityInherit+0xc4>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f78:	429a      	cmp	r2, r3
 8008f7a:	d241      	bcs.n	8009000 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	699b      	ldr	r3, [r3, #24]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	db06      	blt.n	8008f92 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f84:	4b25      	ldr	r3, [pc, #148]	; (800901c <xTaskPriorityInherit+0xc4>)
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f8a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	6959      	ldr	r1, [r3, #20]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f9a:	4613      	mov	r3, r2
 8008f9c:	009b      	lsls	r3, r3, #2
 8008f9e:	4413      	add	r3, r2
 8008fa0:	009b      	lsls	r3, r3, #2
 8008fa2:	4a1f      	ldr	r2, [pc, #124]	; (8009020 <xTaskPriorityInherit+0xc8>)
 8008fa4:	4413      	add	r3, r2
 8008fa6:	4299      	cmp	r1, r3
 8008fa8:	d122      	bne.n	8008ff0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	3304      	adds	r3, #4
 8008fae:	4618      	mov	r0, r3
 8008fb0:	f7fd fff0 	bl	8006f94 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008fb4:	4b19      	ldr	r3, [pc, #100]	; (800901c <xTaskPriorityInherit+0xc4>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fc2:	4b18      	ldr	r3, [pc, #96]	; (8009024 <xTaskPriorityInherit+0xcc>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	429a      	cmp	r2, r3
 8008fc8:	d903      	bls.n	8008fd2 <xTaskPriorityInherit+0x7a>
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fce:	4a15      	ldr	r2, [pc, #84]	; (8009024 <xTaskPriorityInherit+0xcc>)
 8008fd0:	6013      	str	r3, [r2, #0]
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fd6:	4613      	mov	r3, r2
 8008fd8:	009b      	lsls	r3, r3, #2
 8008fda:	4413      	add	r3, r2
 8008fdc:	009b      	lsls	r3, r3, #2
 8008fde:	4a10      	ldr	r2, [pc, #64]	; (8009020 <xTaskPriorityInherit+0xc8>)
 8008fe0:	441a      	add	r2, r3
 8008fe2:	68bb      	ldr	r3, [r7, #8]
 8008fe4:	3304      	adds	r3, #4
 8008fe6:	4619      	mov	r1, r3
 8008fe8:	4610      	mov	r0, r2
 8008fea:	f7fd ff76 	bl	8006eda <vListInsertEnd>
 8008fee:	e004      	b.n	8008ffa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ff0:	4b0a      	ldr	r3, [pc, #40]	; (800901c <xTaskPriorityInherit+0xc4>)
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008ffa:	2301      	movs	r3, #1
 8008ffc:	60fb      	str	r3, [r7, #12]
 8008ffe:	e008      	b.n	8009012 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009004:	4b05      	ldr	r3, [pc, #20]	; (800901c <xTaskPriorityInherit+0xc4>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900a:	429a      	cmp	r2, r3
 800900c:	d201      	bcs.n	8009012 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800900e:	2301      	movs	r3, #1
 8009010:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009012:	68fb      	ldr	r3, [r7, #12]
	}
 8009014:	4618      	mov	r0, r3
 8009016:	3710      	adds	r7, #16
 8009018:	46bd      	mov	sp, r7
 800901a:	bd80      	pop	{r7, pc}
 800901c:	20005678 	.word	0x20005678
 8009020:	2000567c 	.word	0x2000567c
 8009024:	20005b54 	.word	0x20005b54

08009028 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009034:	2300      	movs	r3, #0
 8009036:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d05a      	beq.n	80090f4 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800903e:	4b30      	ldr	r3, [pc, #192]	; (8009100 <xTaskPriorityDisinherit+0xd8>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	693a      	ldr	r2, [r7, #16]
 8009044:	429a      	cmp	r2, r3
 8009046:	d00c      	beq.n	8009062 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8009048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904c:	b672      	cpsid	i
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	b662      	cpsie	i
 800905c:	60fb      	str	r3, [r7, #12]
}
 800905e:	bf00      	nop
 8009060:	e7fe      	b.n	8009060 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009066:	2b00      	cmp	r3, #0
 8009068:	d10c      	bne.n	8009084 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800906a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906e:	b672      	cpsid	i
 8009070:	f383 8811 	msr	BASEPRI, r3
 8009074:	f3bf 8f6f 	isb	sy
 8009078:	f3bf 8f4f 	dsb	sy
 800907c:	b662      	cpsie	i
 800907e:	60bb      	str	r3, [r7, #8]
}
 8009080:	bf00      	nop
 8009082:	e7fe      	b.n	8009082 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8009084:	693b      	ldr	r3, [r7, #16]
 8009086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009088:	1e5a      	subs	r2, r3, #1
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009096:	429a      	cmp	r2, r3
 8009098:	d02c      	beq.n	80090f4 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800909a:	693b      	ldr	r3, [r7, #16]
 800909c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d128      	bne.n	80090f4 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090a2:	693b      	ldr	r3, [r7, #16]
 80090a4:	3304      	adds	r3, #4
 80090a6:	4618      	mov	r0, r3
 80090a8:	f7fd ff74 	bl	8006f94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80090ac:	693b      	ldr	r3, [r7, #16]
 80090ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80090b0:	693b      	ldr	r3, [r7, #16]
 80090b2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090b8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80090bc:	693b      	ldr	r3, [r7, #16]
 80090be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80090c0:	693b      	ldr	r3, [r7, #16]
 80090c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090c4:	4b0f      	ldr	r3, [pc, #60]	; (8009104 <xTaskPriorityDisinherit+0xdc>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	429a      	cmp	r2, r3
 80090ca:	d903      	bls.n	80090d4 <xTaskPriorityDisinherit+0xac>
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090d0:	4a0c      	ldr	r2, [pc, #48]	; (8009104 <xTaskPriorityDisinherit+0xdc>)
 80090d2:	6013      	str	r3, [r2, #0]
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090d8:	4613      	mov	r3, r2
 80090da:	009b      	lsls	r3, r3, #2
 80090dc:	4413      	add	r3, r2
 80090de:	009b      	lsls	r3, r3, #2
 80090e0:	4a09      	ldr	r2, [pc, #36]	; (8009108 <xTaskPriorityDisinherit+0xe0>)
 80090e2:	441a      	add	r2, r3
 80090e4:	693b      	ldr	r3, [r7, #16]
 80090e6:	3304      	adds	r3, #4
 80090e8:	4619      	mov	r1, r3
 80090ea:	4610      	mov	r0, r2
 80090ec:	f7fd fef5 	bl	8006eda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80090f0:	2301      	movs	r3, #1
 80090f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80090f4:	697b      	ldr	r3, [r7, #20]
	}
 80090f6:	4618      	mov	r0, r3
 80090f8:	3718      	adds	r7, #24
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	20005678 	.word	0x20005678
 8009104:	20005b54 	.word	0x20005b54
 8009108:	2000567c 	.word	0x2000567c

0800910c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800910c:	b580      	push	{r7, lr}
 800910e:	b088      	sub	sp, #32
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
 8009114:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800911a:	2301      	movs	r3, #1
 800911c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d06e      	beq.n	8009202 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8009124:	69bb      	ldr	r3, [r7, #24]
 8009126:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009128:	2b00      	cmp	r3, #0
 800912a:	d10c      	bne.n	8009146 <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 800912c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009130:	b672      	cpsid	i
 8009132:	f383 8811 	msr	BASEPRI, r3
 8009136:	f3bf 8f6f 	isb	sy
 800913a:	f3bf 8f4f 	dsb	sy
 800913e:	b662      	cpsie	i
 8009140:	60fb      	str	r3, [r7, #12]
}
 8009142:	bf00      	nop
 8009144:	e7fe      	b.n	8009144 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8009146:	69bb      	ldr	r3, [r7, #24]
 8009148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800914a:	683a      	ldr	r2, [r7, #0]
 800914c:	429a      	cmp	r2, r3
 800914e:	d902      	bls.n	8009156 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009150:	683b      	ldr	r3, [r7, #0]
 8009152:	61fb      	str	r3, [r7, #28]
 8009154:	e002      	b.n	800915c <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8009156:	69bb      	ldr	r3, [r7, #24]
 8009158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800915a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009160:	69fa      	ldr	r2, [r7, #28]
 8009162:	429a      	cmp	r2, r3
 8009164:	d04d      	beq.n	8009202 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009166:	69bb      	ldr	r3, [r7, #24]
 8009168:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800916a:	697a      	ldr	r2, [r7, #20]
 800916c:	429a      	cmp	r2, r3
 800916e:	d148      	bne.n	8009202 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8009170:	4b26      	ldr	r3, [pc, #152]	; (800920c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	69ba      	ldr	r2, [r7, #24]
 8009176:	429a      	cmp	r2, r3
 8009178:	d10c      	bne.n	8009194 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 800917a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800917e:	b672      	cpsid	i
 8009180:	f383 8811 	msr	BASEPRI, r3
 8009184:	f3bf 8f6f 	isb	sy
 8009188:	f3bf 8f4f 	dsb	sy
 800918c:	b662      	cpsie	i
 800918e:	60bb      	str	r3, [r7, #8]
}
 8009190:	bf00      	nop
 8009192:	e7fe      	b.n	8009192 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8009194:	69bb      	ldr	r3, [r7, #24]
 8009196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009198:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800919a:	69bb      	ldr	r3, [r7, #24]
 800919c:	69fa      	ldr	r2, [r7, #28]
 800919e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80091a0:	69bb      	ldr	r3, [r7, #24]
 80091a2:	699b      	ldr	r3, [r3, #24]
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	db04      	blt.n	80091b2 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80091a8:	69fb      	ldr	r3, [r7, #28]
 80091aa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80091ae:	69bb      	ldr	r3, [r7, #24]
 80091b0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	6959      	ldr	r1, [r3, #20]
 80091b6:	693a      	ldr	r2, [r7, #16]
 80091b8:	4613      	mov	r3, r2
 80091ba:	009b      	lsls	r3, r3, #2
 80091bc:	4413      	add	r3, r2
 80091be:	009b      	lsls	r3, r3, #2
 80091c0:	4a13      	ldr	r2, [pc, #76]	; (8009210 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80091c2:	4413      	add	r3, r2
 80091c4:	4299      	cmp	r1, r3
 80091c6:	d11c      	bne.n	8009202 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80091c8:	69bb      	ldr	r3, [r7, #24]
 80091ca:	3304      	adds	r3, #4
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7fd fee1 	bl	8006f94 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80091d2:	69bb      	ldr	r3, [r7, #24]
 80091d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091d6:	4b0f      	ldr	r3, [pc, #60]	; (8009214 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d903      	bls.n	80091e6 <vTaskPriorityDisinheritAfterTimeout+0xda>
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80091e2:	4a0c      	ldr	r2, [pc, #48]	; (8009214 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80091e4:	6013      	str	r3, [r2, #0]
 80091e6:	69bb      	ldr	r3, [r7, #24]
 80091e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ea:	4613      	mov	r3, r2
 80091ec:	009b      	lsls	r3, r3, #2
 80091ee:	4413      	add	r3, r2
 80091f0:	009b      	lsls	r3, r3, #2
 80091f2:	4a07      	ldr	r2, [pc, #28]	; (8009210 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80091f4:	441a      	add	r2, r3
 80091f6:	69bb      	ldr	r3, [r7, #24]
 80091f8:	3304      	adds	r3, #4
 80091fa:	4619      	mov	r1, r3
 80091fc:	4610      	mov	r0, r2
 80091fe:	f7fd fe6c 	bl	8006eda <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009202:	bf00      	nop
 8009204:	3720      	adds	r7, #32
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
 800920a:	bf00      	nop
 800920c:	20005678 	.word	0x20005678
 8009210:	2000567c 	.word	0x2000567c
 8009214:	20005b54 	.word	0x20005b54

08009218 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009218:	b480      	push	{r7}
 800921a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800921c:	4b07      	ldr	r3, [pc, #28]	; (800923c <pvTaskIncrementMutexHeldCount+0x24>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d004      	beq.n	800922e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009224:	4b05      	ldr	r3, [pc, #20]	; (800923c <pvTaskIncrementMutexHeldCount+0x24>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800922a:	3201      	adds	r2, #1
 800922c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800922e:	4b03      	ldr	r3, [pc, #12]	; (800923c <pvTaskIncrementMutexHeldCount+0x24>)
 8009230:	681b      	ldr	r3, [r3, #0]
	}
 8009232:	4618      	mov	r0, r3
 8009234:	46bd      	mov	sp, r7
 8009236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923a:	4770      	bx	lr
 800923c:	20005678 	.word	0x20005678

08009240 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009240:	b580      	push	{r7, lr}
 8009242:	b084      	sub	sp, #16
 8009244:	af00      	add	r7, sp, #0
 8009246:	6078      	str	r0, [r7, #4]
 8009248:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800924a:	4b21      	ldr	r3, [pc, #132]	; (80092d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009250:	4b20      	ldr	r3, [pc, #128]	; (80092d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	3304      	adds	r3, #4
 8009256:	4618      	mov	r0, r3
 8009258:	f7fd fe9c 	bl	8006f94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009262:	d10a      	bne.n	800927a <prvAddCurrentTaskToDelayedList+0x3a>
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d007      	beq.n	800927a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800926a:	4b1a      	ldr	r3, [pc, #104]	; (80092d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	3304      	adds	r3, #4
 8009270:	4619      	mov	r1, r3
 8009272:	4819      	ldr	r0, [pc, #100]	; (80092d8 <prvAddCurrentTaskToDelayedList+0x98>)
 8009274:	f7fd fe31 	bl	8006eda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009278:	e026      	b.n	80092c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	4413      	add	r3, r2
 8009280:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009282:	4b14      	ldr	r3, [pc, #80]	; (80092d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68ba      	ldr	r2, [r7, #8]
 8009288:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800928a:	68ba      	ldr	r2, [r7, #8]
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	429a      	cmp	r2, r3
 8009290:	d209      	bcs.n	80092a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009292:	4b12      	ldr	r3, [pc, #72]	; (80092dc <prvAddCurrentTaskToDelayedList+0x9c>)
 8009294:	681a      	ldr	r2, [r3, #0]
 8009296:	4b0f      	ldr	r3, [pc, #60]	; (80092d4 <prvAddCurrentTaskToDelayedList+0x94>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	3304      	adds	r3, #4
 800929c:	4619      	mov	r1, r3
 800929e:	4610      	mov	r0, r2
 80092a0:	f7fd fe3f 	bl	8006f22 <vListInsert>
}
 80092a4:	e010      	b.n	80092c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80092a6:	4b0e      	ldr	r3, [pc, #56]	; (80092e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 80092a8:	681a      	ldr	r2, [r3, #0]
 80092aa:	4b0a      	ldr	r3, [pc, #40]	; (80092d4 <prvAddCurrentTaskToDelayedList+0x94>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	3304      	adds	r3, #4
 80092b0:	4619      	mov	r1, r3
 80092b2:	4610      	mov	r0, r2
 80092b4:	f7fd fe35 	bl	8006f22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80092b8:	4b0a      	ldr	r3, [pc, #40]	; (80092e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68ba      	ldr	r2, [r7, #8]
 80092be:	429a      	cmp	r2, r3
 80092c0:	d202      	bcs.n	80092c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80092c2:	4a08      	ldr	r2, [pc, #32]	; (80092e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	6013      	str	r3, [r2, #0]
}
 80092c8:	bf00      	nop
 80092ca:	3710      	adds	r7, #16
 80092cc:	46bd      	mov	sp, r7
 80092ce:	bd80      	pop	{r7, pc}
 80092d0:	20005b50 	.word	0x20005b50
 80092d4:	20005678 	.word	0x20005678
 80092d8:	20005b38 	.word	0x20005b38
 80092dc:	20005b08 	.word	0x20005b08
 80092e0:	20005b04 	.word	0x20005b04
 80092e4:	20005b6c 	.word	0x20005b6c

080092e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08a      	sub	sp, #40	; 0x28
 80092ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80092ee:	2300      	movs	r3, #0
 80092f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80092f2:	f000 fb15 	bl	8009920 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80092f6:	4b1d      	ldr	r3, [pc, #116]	; (800936c <xTimerCreateTimerTask+0x84>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d021      	beq.n	8009342 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80092fe:	2300      	movs	r3, #0
 8009300:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009302:	2300      	movs	r3, #0
 8009304:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009306:	1d3a      	adds	r2, r7, #4
 8009308:	f107 0108 	add.w	r1, r7, #8
 800930c:	f107 030c 	add.w	r3, r7, #12
 8009310:	4618      	mov	r0, r3
 8009312:	f7fd fd9b 	bl	8006e4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	9202      	str	r2, [sp, #8]
 800931e:	9301      	str	r3, [sp, #4]
 8009320:	2302      	movs	r3, #2
 8009322:	9300      	str	r3, [sp, #0]
 8009324:	2300      	movs	r3, #0
 8009326:	460a      	mov	r2, r1
 8009328:	4911      	ldr	r1, [pc, #68]	; (8009370 <xTimerCreateTimerTask+0x88>)
 800932a:	4812      	ldr	r0, [pc, #72]	; (8009374 <xTimerCreateTimerTask+0x8c>)
 800932c:	f7fe ff6c 	bl	8008208 <xTaskCreateStatic>
 8009330:	4603      	mov	r3, r0
 8009332:	4a11      	ldr	r2, [pc, #68]	; (8009378 <xTimerCreateTimerTask+0x90>)
 8009334:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009336:	4b10      	ldr	r3, [pc, #64]	; (8009378 <xTimerCreateTimerTask+0x90>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d001      	beq.n	8009342 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800933e:	2301      	movs	r3, #1
 8009340:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009342:	697b      	ldr	r3, [r7, #20]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d10c      	bne.n	8009362 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800934c:	b672      	cpsid	i
 800934e:	f383 8811 	msr	BASEPRI, r3
 8009352:	f3bf 8f6f 	isb	sy
 8009356:	f3bf 8f4f 	dsb	sy
 800935a:	b662      	cpsie	i
 800935c:	613b      	str	r3, [r7, #16]
}
 800935e:	bf00      	nop
 8009360:	e7fe      	b.n	8009360 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8009362:	697b      	ldr	r3, [r7, #20]
}
 8009364:	4618      	mov	r0, r3
 8009366:	3718      	adds	r7, #24
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	20005ba8 	.word	0x20005ba8
 8009370:	08015560 	.word	0x08015560
 8009374:	080094b9 	.word	0x080094b9
 8009378:	20005bac 	.word	0x20005bac

0800937c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b08a      	sub	sp, #40	; 0x28
 8009380:	af00      	add	r7, sp, #0
 8009382:	60f8      	str	r0, [r7, #12]
 8009384:	60b9      	str	r1, [r7, #8]
 8009386:	607a      	str	r2, [r7, #4]
 8009388:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800938a:	2300      	movs	r3, #0
 800938c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d10c      	bne.n	80093ae <xTimerGenericCommand+0x32>
	__asm volatile
 8009394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009398:	b672      	cpsid	i
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	b662      	cpsie	i
 80093a8:	623b      	str	r3, [r7, #32]
}
 80093aa:	bf00      	nop
 80093ac:	e7fe      	b.n	80093ac <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80093ae:	4b1a      	ldr	r3, [pc, #104]	; (8009418 <xTimerGenericCommand+0x9c>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d02a      	beq.n	800940c <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	2b05      	cmp	r3, #5
 80093c6:	dc18      	bgt.n	80093fa <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80093c8:	f7ff fda8 	bl	8008f1c <xTaskGetSchedulerState>
 80093cc:	4603      	mov	r3, r0
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d109      	bne.n	80093e6 <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80093d2:	4b11      	ldr	r3, [pc, #68]	; (8009418 <xTimerGenericCommand+0x9c>)
 80093d4:	6818      	ldr	r0, [r3, #0]
 80093d6:	f107 0110 	add.w	r1, r7, #16
 80093da:	2300      	movs	r3, #0
 80093dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80093de:	f7fe f881 	bl	80074e4 <xQueueGenericSend>
 80093e2:	6278      	str	r0, [r7, #36]	; 0x24
 80093e4:	e012      	b.n	800940c <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80093e6:	4b0c      	ldr	r3, [pc, #48]	; (8009418 <xTimerGenericCommand+0x9c>)
 80093e8:	6818      	ldr	r0, [r3, #0]
 80093ea:	f107 0110 	add.w	r1, r7, #16
 80093ee:	2300      	movs	r3, #0
 80093f0:	2200      	movs	r2, #0
 80093f2:	f7fe f877 	bl	80074e4 <xQueueGenericSend>
 80093f6:	6278      	str	r0, [r7, #36]	; 0x24
 80093f8:	e008      	b.n	800940c <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80093fa:	4b07      	ldr	r3, [pc, #28]	; (8009418 <xTimerGenericCommand+0x9c>)
 80093fc:	6818      	ldr	r0, [r3, #0]
 80093fe:	f107 0110 	add.w	r1, r7, #16
 8009402:	2300      	movs	r3, #0
 8009404:	683a      	ldr	r2, [r7, #0]
 8009406:	f7fe f973 	bl	80076f0 <xQueueGenericSendFromISR>
 800940a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800940c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800940e:	4618      	mov	r0, r3
 8009410:	3728      	adds	r7, #40	; 0x28
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	20005ba8 	.word	0x20005ba8

0800941c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b088      	sub	sp, #32
 8009420:	af02      	add	r7, sp, #8
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009426:	4b23      	ldr	r3, [pc, #140]	; (80094b4 <prvProcessExpiredTimer+0x98>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68db      	ldr	r3, [r3, #12]
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009430:	697b      	ldr	r3, [r7, #20]
 8009432:	3304      	adds	r3, #4
 8009434:	4618      	mov	r0, r3
 8009436:	f7fd fdad 	bl	8006f94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800943a:	697b      	ldr	r3, [r7, #20]
 800943c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009440:	f003 0304 	and.w	r3, r3, #4
 8009444:	2b00      	cmp	r3, #0
 8009446:	d024      	beq.n	8009492 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009448:	697b      	ldr	r3, [r7, #20]
 800944a:	699a      	ldr	r2, [r3, #24]
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	18d1      	adds	r1, r2, r3
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	683a      	ldr	r2, [r7, #0]
 8009454:	6978      	ldr	r0, [r7, #20]
 8009456:	f000 f8d3 	bl	8009600 <prvInsertTimerInActiveList>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d021      	beq.n	80094a4 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009460:	2300      	movs	r3, #0
 8009462:	9300      	str	r3, [sp, #0]
 8009464:	2300      	movs	r3, #0
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	2100      	movs	r1, #0
 800946a:	6978      	ldr	r0, [r7, #20]
 800946c:	f7ff ff86 	bl	800937c <xTimerGenericCommand>
 8009470:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009472:	693b      	ldr	r3, [r7, #16]
 8009474:	2b00      	cmp	r3, #0
 8009476:	d115      	bne.n	80094a4 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8009478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800947c:	b672      	cpsid	i
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	b662      	cpsie	i
 800948c:	60fb      	str	r3, [r7, #12]
}
 800948e:	bf00      	nop
 8009490:	e7fe      	b.n	8009490 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009498:	f023 0301 	bic.w	r3, r3, #1
 800949c:	b2da      	uxtb	r2, r3
 800949e:	697b      	ldr	r3, [r7, #20]
 80094a0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	6a1b      	ldr	r3, [r3, #32]
 80094a8:	6978      	ldr	r0, [r7, #20]
 80094aa:	4798      	blx	r3
}
 80094ac:	bf00      	nop
 80094ae:	3718      	adds	r7, #24
 80094b0:	46bd      	mov	sp, r7
 80094b2:	bd80      	pop	{r7, pc}
 80094b4:	20005ba0 	.word	0x20005ba0

080094b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094c0:	f107 0308 	add.w	r3, r7, #8
 80094c4:	4618      	mov	r0, r3
 80094c6:	f000 f857 	bl	8009578 <prvGetNextExpireTime>
 80094ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80094cc:	68bb      	ldr	r3, [r7, #8]
 80094ce:	4619      	mov	r1, r3
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 f803 	bl	80094dc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80094d6:	f000 f8d5 	bl	8009684 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80094da:	e7f1      	b.n	80094c0 <prvTimerTask+0x8>

080094dc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80094e6:	f7ff f8f9 	bl	80086dc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80094ea:	f107 0308 	add.w	r3, r7, #8
 80094ee:	4618      	mov	r0, r3
 80094f0:	f000 f866 	bl	80095c0 <prvSampleTimeNow>
 80094f4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d130      	bne.n	800955e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d10a      	bne.n	8009518 <prvProcessTimerOrBlockTask+0x3c>
 8009502:	687a      	ldr	r2, [r7, #4]
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	429a      	cmp	r2, r3
 8009508:	d806      	bhi.n	8009518 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800950a:	f7ff f8f5 	bl	80086f8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800950e:	68f9      	ldr	r1, [r7, #12]
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f7ff ff83 	bl	800941c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009516:	e024      	b.n	8009562 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d008      	beq.n	8009530 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800951e:	4b13      	ldr	r3, [pc, #76]	; (800956c <prvProcessTimerOrBlockTask+0x90>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d101      	bne.n	800952c <prvProcessTimerOrBlockTask+0x50>
 8009528:	2301      	movs	r3, #1
 800952a:	e000      	b.n	800952e <prvProcessTimerOrBlockTask+0x52>
 800952c:	2300      	movs	r3, #0
 800952e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009530:	4b0f      	ldr	r3, [pc, #60]	; (8009570 <prvProcessTimerOrBlockTask+0x94>)
 8009532:	6818      	ldr	r0, [r3, #0]
 8009534:	687a      	ldr	r2, [r7, #4]
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	683a      	ldr	r2, [r7, #0]
 800953c:	4619      	mov	r1, r3
 800953e:	f7fe fe2f 	bl	80081a0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009542:	f7ff f8d9 	bl	80086f8 <xTaskResumeAll>
 8009546:	4603      	mov	r3, r0
 8009548:	2b00      	cmp	r3, #0
 800954a:	d10a      	bne.n	8009562 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800954c:	4b09      	ldr	r3, [pc, #36]	; (8009574 <prvProcessTimerOrBlockTask+0x98>)
 800954e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009552:	601a      	str	r2, [r3, #0]
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	f3bf 8f6f 	isb	sy
}
 800955c:	e001      	b.n	8009562 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800955e:	f7ff f8cb 	bl	80086f8 <xTaskResumeAll>
}
 8009562:	bf00      	nop
 8009564:	3710      	adds	r7, #16
 8009566:	46bd      	mov	sp, r7
 8009568:	bd80      	pop	{r7, pc}
 800956a:	bf00      	nop
 800956c:	20005ba4 	.word	0x20005ba4
 8009570:	20005ba8 	.word	0x20005ba8
 8009574:	e000ed04 	.word	0xe000ed04

08009578 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009578:	b480      	push	{r7}
 800957a:	b085      	sub	sp, #20
 800957c:	af00      	add	r7, sp, #0
 800957e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009580:	4b0e      	ldr	r3, [pc, #56]	; (80095bc <prvGetNextExpireTime+0x44>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	2b00      	cmp	r3, #0
 8009588:	d101      	bne.n	800958e <prvGetNextExpireTime+0x16>
 800958a:	2201      	movs	r2, #1
 800958c:	e000      	b.n	8009590 <prvGetNextExpireTime+0x18>
 800958e:	2200      	movs	r2, #0
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	2b00      	cmp	r3, #0
 800959a:	d105      	bne.n	80095a8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800959c:	4b07      	ldr	r3, [pc, #28]	; (80095bc <prvGetNextExpireTime+0x44>)
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	68db      	ldr	r3, [r3, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	60fb      	str	r3, [r7, #12]
 80095a6:	e001      	b.n	80095ac <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80095a8:	2300      	movs	r3, #0
 80095aa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80095ac:	68fb      	ldr	r3, [r7, #12]
}
 80095ae:	4618      	mov	r0, r3
 80095b0:	3714      	adds	r7, #20
 80095b2:	46bd      	mov	sp, r7
 80095b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b8:	4770      	bx	lr
 80095ba:	bf00      	nop
 80095bc:	20005ba0 	.word	0x20005ba0

080095c0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80095c0:	b580      	push	{r7, lr}
 80095c2:	b084      	sub	sp, #16
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80095c8:	f7ff f936 	bl	8008838 <xTaskGetTickCount>
 80095cc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80095ce:	4b0b      	ldr	r3, [pc, #44]	; (80095fc <prvSampleTimeNow+0x3c>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	68fa      	ldr	r2, [r7, #12]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d205      	bcs.n	80095e4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80095d8:	f000 f93c 	bl	8009854 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2201      	movs	r2, #1
 80095e0:	601a      	str	r2, [r3, #0]
 80095e2:	e002      	b.n	80095ea <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80095ea:	4a04      	ldr	r2, [pc, #16]	; (80095fc <prvSampleTimeNow+0x3c>)
 80095ec:	68fb      	ldr	r3, [r7, #12]
 80095ee:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80095f0:	68fb      	ldr	r3, [r7, #12]
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3710      	adds	r7, #16
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	20005bb0 	.word	0x20005bb0

08009600 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b086      	sub	sp, #24
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
 800960c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800960e:	2300      	movs	r3, #0
 8009610:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	68ba      	ldr	r2, [r7, #8]
 8009616:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	68fa      	ldr	r2, [r7, #12]
 800961c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800961e:	68ba      	ldr	r2, [r7, #8]
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	429a      	cmp	r2, r3
 8009624:	d812      	bhi.n	800964c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009626:	687a      	ldr	r2, [r7, #4]
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	1ad2      	subs	r2, r2, r3
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	699b      	ldr	r3, [r3, #24]
 8009630:	429a      	cmp	r2, r3
 8009632:	d302      	bcc.n	800963a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009634:	2301      	movs	r3, #1
 8009636:	617b      	str	r3, [r7, #20]
 8009638:	e01b      	b.n	8009672 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800963a:	4b10      	ldr	r3, [pc, #64]	; (800967c <prvInsertTimerInActiveList+0x7c>)
 800963c:	681a      	ldr	r2, [r3, #0]
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	3304      	adds	r3, #4
 8009642:	4619      	mov	r1, r3
 8009644:	4610      	mov	r0, r2
 8009646:	f7fd fc6c 	bl	8006f22 <vListInsert>
 800964a:	e012      	b.n	8009672 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800964c:	687a      	ldr	r2, [r7, #4]
 800964e:	683b      	ldr	r3, [r7, #0]
 8009650:	429a      	cmp	r2, r3
 8009652:	d206      	bcs.n	8009662 <prvInsertTimerInActiveList+0x62>
 8009654:	68ba      	ldr	r2, [r7, #8]
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	429a      	cmp	r2, r3
 800965a:	d302      	bcc.n	8009662 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800965c:	2301      	movs	r3, #1
 800965e:	617b      	str	r3, [r7, #20]
 8009660:	e007      	b.n	8009672 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009662:	4b07      	ldr	r3, [pc, #28]	; (8009680 <prvInsertTimerInActiveList+0x80>)
 8009664:	681a      	ldr	r2, [r3, #0]
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	3304      	adds	r3, #4
 800966a:	4619      	mov	r1, r3
 800966c:	4610      	mov	r0, r2
 800966e:	f7fd fc58 	bl	8006f22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009672:	697b      	ldr	r3, [r7, #20]
}
 8009674:	4618      	mov	r0, r3
 8009676:	3718      	adds	r7, #24
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}
 800967c:	20005ba4 	.word	0x20005ba4
 8009680:	20005ba0 	.word	0x20005ba0

08009684 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b08e      	sub	sp, #56	; 0x38
 8009688:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800968a:	e0d0      	b.n	800982e <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2b00      	cmp	r3, #0
 8009690:	da1a      	bge.n	80096c8 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009692:	1d3b      	adds	r3, r7, #4
 8009694:	3304      	adds	r3, #4
 8009696:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009698:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800969a:	2b00      	cmp	r3, #0
 800969c:	d10c      	bne.n	80096b8 <prvProcessReceivedCommands+0x34>
	__asm volatile
 800969e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096a2:	b672      	cpsid	i
 80096a4:	f383 8811 	msr	BASEPRI, r3
 80096a8:	f3bf 8f6f 	isb	sy
 80096ac:	f3bf 8f4f 	dsb	sy
 80096b0:	b662      	cpsie	i
 80096b2:	61fb      	str	r3, [r7, #28]
}
 80096b4:	bf00      	nop
 80096b6:	e7fe      	b.n	80096b6 <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80096b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096be:	6850      	ldr	r0, [r2, #4]
 80096c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096c2:	6892      	ldr	r2, [r2, #8]
 80096c4:	4611      	mov	r1, r2
 80096c6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	f2c0 80ae 	blt.w	800982c <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80096d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d004      	beq.n	80096e6 <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80096de:	3304      	adds	r3, #4
 80096e0:	4618      	mov	r0, r3
 80096e2:	f7fd fc57 	bl	8006f94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80096e6:	463b      	mov	r3, r7
 80096e8:	4618      	mov	r0, r3
 80096ea:	f7ff ff69 	bl	80095c0 <prvSampleTimeNow>
 80096ee:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b09      	cmp	r3, #9
 80096f4:	f200 809b 	bhi.w	800982e <prvProcessReceivedCommands+0x1aa>
 80096f8:	a201      	add	r2, pc, #4	; (adr r2, 8009700 <prvProcessReceivedCommands+0x7c>)
 80096fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096fe:	bf00      	nop
 8009700:	08009729 	.word	0x08009729
 8009704:	08009729 	.word	0x08009729
 8009708:	08009729 	.word	0x08009729
 800970c:	080097a1 	.word	0x080097a1
 8009710:	080097b5 	.word	0x080097b5
 8009714:	08009803 	.word	0x08009803
 8009718:	08009729 	.word	0x08009729
 800971c:	08009729 	.word	0x08009729
 8009720:	080097a1 	.word	0x080097a1
 8009724:	080097b5 	.word	0x080097b5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800972a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800972e:	f043 0301 	orr.w	r3, r3, #1
 8009732:	b2da      	uxtb	r2, r3
 8009734:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009736:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800973a:	68ba      	ldr	r2, [r7, #8]
 800973c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800973e:	699b      	ldr	r3, [r3, #24]
 8009740:	18d1      	adds	r1, r2, r3
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009746:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009748:	f7ff ff5a 	bl	8009600 <prvInsertTimerInActiveList>
 800974c:	4603      	mov	r3, r0
 800974e:	2b00      	cmp	r3, #0
 8009750:	d06d      	beq.n	800982e <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009754:	6a1b      	ldr	r3, [r3, #32]
 8009756:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009758:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800975a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800975c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009760:	f003 0304 	and.w	r3, r3, #4
 8009764:	2b00      	cmp	r3, #0
 8009766:	d062      	beq.n	800982e <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009768:	68ba      	ldr	r2, [r7, #8]
 800976a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800976c:	699b      	ldr	r3, [r3, #24]
 800976e:	441a      	add	r2, r3
 8009770:	2300      	movs	r3, #0
 8009772:	9300      	str	r3, [sp, #0]
 8009774:	2300      	movs	r3, #0
 8009776:	2100      	movs	r1, #0
 8009778:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800977a:	f7ff fdff 	bl	800937c <xTimerGenericCommand>
 800977e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009780:	6a3b      	ldr	r3, [r7, #32]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d153      	bne.n	800982e <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8009786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800978a:	b672      	cpsid	i
 800978c:	f383 8811 	msr	BASEPRI, r3
 8009790:	f3bf 8f6f 	isb	sy
 8009794:	f3bf 8f4f 	dsb	sy
 8009798:	b662      	cpsie	i
 800979a:	61bb      	str	r3, [r7, #24]
}
 800979c:	bf00      	nop
 800979e:	e7fe      	b.n	800979e <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80097a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097a6:	f023 0301 	bic.w	r3, r3, #1
 80097aa:	b2da      	uxtb	r2, r3
 80097ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80097b2:	e03c      	b.n	800982e <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80097b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80097ba:	f043 0301 	orr.w	r3, r3, #1
 80097be:	b2da      	uxtb	r2, r3
 80097c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80097cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d10c      	bne.n	80097ee <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80097d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097d8:	b672      	cpsid	i
 80097da:	f383 8811 	msr	BASEPRI, r3
 80097de:	f3bf 8f6f 	isb	sy
 80097e2:	f3bf 8f4f 	dsb	sy
 80097e6:	b662      	cpsie	i
 80097e8:	617b      	str	r3, [r7, #20]
}
 80097ea:	bf00      	nop
 80097ec:	e7fe      	b.n	80097ec <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80097ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f0:	699a      	ldr	r2, [r3, #24]
 80097f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f4:	18d1      	adds	r1, r2, r3
 80097f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80097fc:	f7ff ff00 	bl	8009600 <prvInsertTimerInActiveList>
					break;
 8009800:	e015      	b.n	800982e <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009802:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009804:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009808:	f003 0302 	and.w	r3, r3, #2
 800980c:	2b00      	cmp	r3, #0
 800980e:	d103      	bne.n	8009818 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009812:	f000 fbc9 	bl	8009fa8 <vPortFree>
 8009816:	e00a      	b.n	800982e <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800981a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800981e:	f023 0301 	bic.w	r3, r3, #1
 8009822:	b2da      	uxtb	r2, r3
 8009824:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009826:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800982a:	e000      	b.n	800982e <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800982c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800982e:	4b08      	ldr	r3, [pc, #32]	; (8009850 <prvProcessReceivedCommands+0x1cc>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	1d39      	adds	r1, r7, #4
 8009834:	2200      	movs	r2, #0
 8009836:	4618      	mov	r0, r3
 8009838:	f7fe f890 	bl	800795c <xQueueReceive>
 800983c:	4603      	mov	r3, r0
 800983e:	2b00      	cmp	r3, #0
 8009840:	f47f af24 	bne.w	800968c <prvProcessReceivedCommands+0x8>
	}
}
 8009844:	bf00      	nop
 8009846:	bf00      	nop
 8009848:	3730      	adds	r7, #48	; 0x30
 800984a:	46bd      	mov	sp, r7
 800984c:	bd80      	pop	{r7, pc}
 800984e:	bf00      	nop
 8009850:	20005ba8 	.word	0x20005ba8

08009854 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b088      	sub	sp, #32
 8009858:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800985a:	e04a      	b.n	80098f2 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800985c:	4b2e      	ldr	r3, [pc, #184]	; (8009918 <prvSwitchTimerLists+0xc4>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	68db      	ldr	r3, [r3, #12]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009866:	4b2c      	ldr	r3, [pc, #176]	; (8009918 <prvSwitchTimerLists+0xc4>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	68db      	ldr	r3, [r3, #12]
 800986c:	68db      	ldr	r3, [r3, #12]
 800986e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	3304      	adds	r3, #4
 8009874:	4618      	mov	r0, r3
 8009876:	f7fd fb8d 	bl	8006f94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	6a1b      	ldr	r3, [r3, #32]
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009888:	f003 0304 	and.w	r3, r3, #4
 800988c:	2b00      	cmp	r3, #0
 800988e:	d030      	beq.n	80098f2 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	699b      	ldr	r3, [r3, #24]
 8009894:	693a      	ldr	r2, [r7, #16]
 8009896:	4413      	add	r3, r2
 8009898:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d90e      	bls.n	80098c0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	68ba      	ldr	r2, [r7, #8]
 80098a6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	68fa      	ldr	r2, [r7, #12]
 80098ac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098ae:	4b1a      	ldr	r3, [pc, #104]	; (8009918 <prvSwitchTimerLists+0xc4>)
 80098b0:	681a      	ldr	r2, [r3, #0]
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	3304      	adds	r3, #4
 80098b6:	4619      	mov	r1, r3
 80098b8:	4610      	mov	r0, r2
 80098ba:	f7fd fb32 	bl	8006f22 <vListInsert>
 80098be:	e018      	b.n	80098f2 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80098c0:	2300      	movs	r3, #0
 80098c2:	9300      	str	r3, [sp, #0]
 80098c4:	2300      	movs	r3, #0
 80098c6:	693a      	ldr	r2, [r7, #16]
 80098c8:	2100      	movs	r1, #0
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f7ff fd56 	bl	800937c <xTimerGenericCommand>
 80098d0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d10c      	bne.n	80098f2 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80098d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098dc:	b672      	cpsid	i
 80098de:	f383 8811 	msr	BASEPRI, r3
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	f3bf 8f4f 	dsb	sy
 80098ea:	b662      	cpsie	i
 80098ec:	603b      	str	r3, [r7, #0]
}
 80098ee:	bf00      	nop
 80098f0:	e7fe      	b.n	80098f0 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80098f2:	4b09      	ldr	r3, [pc, #36]	; (8009918 <prvSwitchTimerLists+0xc4>)
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d1af      	bne.n	800985c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80098fc:	4b06      	ldr	r3, [pc, #24]	; (8009918 <prvSwitchTimerLists+0xc4>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009902:	4b06      	ldr	r3, [pc, #24]	; (800991c <prvSwitchTimerLists+0xc8>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	4a04      	ldr	r2, [pc, #16]	; (8009918 <prvSwitchTimerLists+0xc4>)
 8009908:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800990a:	4a04      	ldr	r2, [pc, #16]	; (800991c <prvSwitchTimerLists+0xc8>)
 800990c:	697b      	ldr	r3, [r7, #20]
 800990e:	6013      	str	r3, [r2, #0]
}
 8009910:	bf00      	nop
 8009912:	3718      	adds	r7, #24
 8009914:	46bd      	mov	sp, r7
 8009916:	bd80      	pop	{r7, pc}
 8009918:	20005ba0 	.word	0x20005ba0
 800991c:	20005ba4 	.word	0x20005ba4

08009920 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009920:	b580      	push	{r7, lr}
 8009922:	b082      	sub	sp, #8
 8009924:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009926:	f000 f949 	bl	8009bbc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800992a:	4b15      	ldr	r3, [pc, #84]	; (8009980 <prvCheckForValidListAndQueue+0x60>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d120      	bne.n	8009974 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009932:	4814      	ldr	r0, [pc, #80]	; (8009984 <prvCheckForValidListAndQueue+0x64>)
 8009934:	f7fd faa4 	bl	8006e80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009938:	4813      	ldr	r0, [pc, #76]	; (8009988 <prvCheckForValidListAndQueue+0x68>)
 800993a:	f7fd faa1 	bl	8006e80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800993e:	4b13      	ldr	r3, [pc, #76]	; (800998c <prvCheckForValidListAndQueue+0x6c>)
 8009940:	4a10      	ldr	r2, [pc, #64]	; (8009984 <prvCheckForValidListAndQueue+0x64>)
 8009942:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009944:	4b12      	ldr	r3, [pc, #72]	; (8009990 <prvCheckForValidListAndQueue+0x70>)
 8009946:	4a10      	ldr	r2, [pc, #64]	; (8009988 <prvCheckForValidListAndQueue+0x68>)
 8009948:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800994a:	2300      	movs	r3, #0
 800994c:	9300      	str	r3, [sp, #0]
 800994e:	4b11      	ldr	r3, [pc, #68]	; (8009994 <prvCheckForValidListAndQueue+0x74>)
 8009950:	4a11      	ldr	r2, [pc, #68]	; (8009998 <prvCheckForValidListAndQueue+0x78>)
 8009952:	2110      	movs	r1, #16
 8009954:	200a      	movs	r0, #10
 8009956:	f7fd fbb1 	bl	80070bc <xQueueGenericCreateStatic>
 800995a:	4603      	mov	r3, r0
 800995c:	4a08      	ldr	r2, [pc, #32]	; (8009980 <prvCheckForValidListAndQueue+0x60>)
 800995e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009960:	4b07      	ldr	r3, [pc, #28]	; (8009980 <prvCheckForValidListAndQueue+0x60>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	2b00      	cmp	r3, #0
 8009966:	d005      	beq.n	8009974 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009968:	4b05      	ldr	r3, [pc, #20]	; (8009980 <prvCheckForValidListAndQueue+0x60>)
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	490b      	ldr	r1, [pc, #44]	; (800999c <prvCheckForValidListAndQueue+0x7c>)
 800996e:	4618      	mov	r0, r3
 8009970:	f7fe fbc2 	bl	80080f8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009974:	f000 f956 	bl	8009c24 <vPortExitCritical>
}
 8009978:	bf00      	nop
 800997a:	46bd      	mov	sp, r7
 800997c:	bd80      	pop	{r7, pc}
 800997e:	bf00      	nop
 8009980:	20005ba8 	.word	0x20005ba8
 8009984:	20005b78 	.word	0x20005b78
 8009988:	20005b8c 	.word	0x20005b8c
 800998c:	20005ba0 	.word	0x20005ba0
 8009990:	20005ba4 	.word	0x20005ba4
 8009994:	20005c54 	.word	0x20005c54
 8009998:	20005bb4 	.word	0x20005bb4
 800999c:	08015568 	.word	0x08015568

080099a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80099a0:	b480      	push	{r7}
 80099a2:	b085      	sub	sp, #20
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	60f8      	str	r0, [r7, #12]
 80099a8:	60b9      	str	r1, [r7, #8]
 80099aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	3b04      	subs	r3, #4
 80099b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80099b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	3b04      	subs	r3, #4
 80099be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	f023 0201 	bic.w	r2, r3, #1
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	3b04      	subs	r3, #4
 80099ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80099d0:	4a0c      	ldr	r2, [pc, #48]	; (8009a04 <pxPortInitialiseStack+0x64>)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	3b14      	subs	r3, #20
 80099da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	3b04      	subs	r3, #4
 80099e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	f06f 0202 	mvn.w	r2, #2
 80099ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	3b20      	subs	r3, #32
 80099f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80099f6:	68fb      	ldr	r3, [r7, #12]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a02:	4770      	bx	lr
 8009a04:	08009a09 	.word	0x08009a09

08009a08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b085      	sub	sp, #20
 8009a0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009a12:	4b14      	ldr	r3, [pc, #80]	; (8009a64 <prvTaskExitError+0x5c>)
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1a:	d00c      	beq.n	8009a36 <prvTaskExitError+0x2e>
	__asm volatile
 8009a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a20:	b672      	cpsid	i
 8009a22:	f383 8811 	msr	BASEPRI, r3
 8009a26:	f3bf 8f6f 	isb	sy
 8009a2a:	f3bf 8f4f 	dsb	sy
 8009a2e:	b662      	cpsie	i
 8009a30:	60fb      	str	r3, [r7, #12]
}
 8009a32:	bf00      	nop
 8009a34:	e7fe      	b.n	8009a34 <prvTaskExitError+0x2c>
	__asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a3a:	b672      	cpsid	i
 8009a3c:	f383 8811 	msr	BASEPRI, r3
 8009a40:	f3bf 8f6f 	isb	sy
 8009a44:	f3bf 8f4f 	dsb	sy
 8009a48:	b662      	cpsie	i
 8009a4a:	60bb      	str	r3, [r7, #8]
}
 8009a4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009a4e:	bf00      	nop
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d0fc      	beq.n	8009a50 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009a56:	bf00      	nop
 8009a58:	bf00      	nop
 8009a5a:	3714      	adds	r7, #20
 8009a5c:	46bd      	mov	sp, r7
 8009a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a62:	4770      	bx	lr
 8009a64:	20000020 	.word	0x20000020
	...

08009a70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009a70:	4b07      	ldr	r3, [pc, #28]	; (8009a90 <pxCurrentTCBConst2>)
 8009a72:	6819      	ldr	r1, [r3, #0]
 8009a74:	6808      	ldr	r0, [r1, #0]
 8009a76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a7a:	f380 8809 	msr	PSP, r0
 8009a7e:	f3bf 8f6f 	isb	sy
 8009a82:	f04f 0000 	mov.w	r0, #0
 8009a86:	f380 8811 	msr	BASEPRI, r0
 8009a8a:	4770      	bx	lr
 8009a8c:	f3af 8000 	nop.w

08009a90 <pxCurrentTCBConst2>:
 8009a90:	20005678 	.word	0x20005678
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009a94:	bf00      	nop
 8009a96:	bf00      	nop

08009a98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009a98:	4808      	ldr	r0, [pc, #32]	; (8009abc <prvPortStartFirstTask+0x24>)
 8009a9a:	6800      	ldr	r0, [r0, #0]
 8009a9c:	6800      	ldr	r0, [r0, #0]
 8009a9e:	f380 8808 	msr	MSP, r0
 8009aa2:	f04f 0000 	mov.w	r0, #0
 8009aa6:	f380 8814 	msr	CONTROL, r0
 8009aaa:	b662      	cpsie	i
 8009aac:	b661      	cpsie	f
 8009aae:	f3bf 8f4f 	dsb	sy
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	df00      	svc	0
 8009ab8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009aba:	bf00      	nop
 8009abc:	e000ed08 	.word	0xe000ed08

08009ac0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009ac6:	4b37      	ldr	r3, [pc, #220]	; (8009ba4 <xPortStartScheduler+0xe4>)
 8009ac8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	781b      	ldrb	r3, [r3, #0]
 8009ace:	b2db      	uxtb	r3, r3
 8009ad0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	22ff      	movs	r2, #255	; 0xff
 8009ad6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	781b      	ldrb	r3, [r3, #0]
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009ae0:	78fb      	ldrb	r3, [r7, #3]
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009ae8:	b2da      	uxtb	r2, r3
 8009aea:	4b2f      	ldr	r3, [pc, #188]	; (8009ba8 <xPortStartScheduler+0xe8>)
 8009aec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009aee:	4b2f      	ldr	r3, [pc, #188]	; (8009bac <xPortStartScheduler+0xec>)
 8009af0:	2207      	movs	r2, #7
 8009af2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009af4:	e009      	b.n	8009b0a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009af6:	4b2d      	ldr	r3, [pc, #180]	; (8009bac <xPortStartScheduler+0xec>)
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	3b01      	subs	r3, #1
 8009afc:	4a2b      	ldr	r2, [pc, #172]	; (8009bac <xPortStartScheduler+0xec>)
 8009afe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009b00:	78fb      	ldrb	r3, [r7, #3]
 8009b02:	b2db      	uxtb	r3, r3
 8009b04:	005b      	lsls	r3, r3, #1
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009b0a:	78fb      	ldrb	r3, [r7, #3]
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b12:	2b80      	cmp	r3, #128	; 0x80
 8009b14:	d0ef      	beq.n	8009af6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009b16:	4b25      	ldr	r3, [pc, #148]	; (8009bac <xPortStartScheduler+0xec>)
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	f1c3 0307 	rsb	r3, r3, #7
 8009b1e:	2b04      	cmp	r3, #4
 8009b20:	d00c      	beq.n	8009b3c <xPortStartScheduler+0x7c>
	__asm volatile
 8009b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b26:	b672      	cpsid	i
 8009b28:	f383 8811 	msr	BASEPRI, r3
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f3bf 8f4f 	dsb	sy
 8009b34:	b662      	cpsie	i
 8009b36:	60bb      	str	r3, [r7, #8]
}
 8009b38:	bf00      	nop
 8009b3a:	e7fe      	b.n	8009b3a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009b3c:	4b1b      	ldr	r3, [pc, #108]	; (8009bac <xPortStartScheduler+0xec>)
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	021b      	lsls	r3, r3, #8
 8009b42:	4a1a      	ldr	r2, [pc, #104]	; (8009bac <xPortStartScheduler+0xec>)
 8009b44:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009b46:	4b19      	ldr	r3, [pc, #100]	; (8009bac <xPortStartScheduler+0xec>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009b4e:	4a17      	ldr	r2, [pc, #92]	; (8009bac <xPortStartScheduler+0xec>)
 8009b50:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	b2da      	uxtb	r2, r3
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009b5a:	4b15      	ldr	r3, [pc, #84]	; (8009bb0 <xPortStartScheduler+0xf0>)
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a14      	ldr	r2, [pc, #80]	; (8009bb0 <xPortStartScheduler+0xf0>)
 8009b60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b64:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009b66:	4b12      	ldr	r3, [pc, #72]	; (8009bb0 <xPortStartScheduler+0xf0>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	4a11      	ldr	r2, [pc, #68]	; (8009bb0 <xPortStartScheduler+0xf0>)
 8009b6c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009b70:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009b72:	f000 f8dd 	bl	8009d30 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009b76:	4b0f      	ldr	r3, [pc, #60]	; (8009bb4 <xPortStartScheduler+0xf4>)
 8009b78:	2200      	movs	r2, #0
 8009b7a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009b7c:	f000 f8fc 	bl	8009d78 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b80:	4b0d      	ldr	r3, [pc, #52]	; (8009bb8 <xPortStartScheduler+0xf8>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	4a0c      	ldr	r2, [pc, #48]	; (8009bb8 <xPortStartScheduler+0xf8>)
 8009b86:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009b8a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009b8c:	f7ff ff84 	bl	8009a98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009b90:	f7fe ff30 	bl	80089f4 <vTaskSwitchContext>
	prvTaskExitError();
 8009b94:	f7ff ff38 	bl	8009a08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	e000e400 	.word	0xe000e400
 8009ba8:	20005ca4 	.word	0x20005ca4
 8009bac:	20005ca8 	.word	0x20005ca8
 8009bb0:	e000ed20 	.word	0xe000ed20
 8009bb4:	20000020 	.word	0x20000020
 8009bb8:	e000ef34 	.word	0xe000ef34

08009bbc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009bbc:	b480      	push	{r7}
 8009bbe:	b083      	sub	sp, #12
 8009bc0:	af00      	add	r7, sp, #0
	__asm volatile
 8009bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bc6:	b672      	cpsid	i
 8009bc8:	f383 8811 	msr	BASEPRI, r3
 8009bcc:	f3bf 8f6f 	isb	sy
 8009bd0:	f3bf 8f4f 	dsb	sy
 8009bd4:	b662      	cpsie	i
 8009bd6:	607b      	str	r3, [r7, #4]
}
 8009bd8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009bda:	4b10      	ldr	r3, [pc, #64]	; (8009c1c <vPortEnterCritical+0x60>)
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	3301      	adds	r3, #1
 8009be0:	4a0e      	ldr	r2, [pc, #56]	; (8009c1c <vPortEnterCritical+0x60>)
 8009be2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009be4:	4b0d      	ldr	r3, [pc, #52]	; (8009c1c <vPortEnterCritical+0x60>)
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d111      	bne.n	8009c10 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009bec:	4b0c      	ldr	r3, [pc, #48]	; (8009c20 <vPortEnterCritical+0x64>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d00c      	beq.n	8009c10 <vPortEnterCritical+0x54>
	__asm volatile
 8009bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bfa:	b672      	cpsid	i
 8009bfc:	f383 8811 	msr	BASEPRI, r3
 8009c00:	f3bf 8f6f 	isb	sy
 8009c04:	f3bf 8f4f 	dsb	sy
 8009c08:	b662      	cpsie	i
 8009c0a:	603b      	str	r3, [r7, #0]
}
 8009c0c:	bf00      	nop
 8009c0e:	e7fe      	b.n	8009c0e <vPortEnterCritical+0x52>
	}
}
 8009c10:	bf00      	nop
 8009c12:	370c      	adds	r7, #12
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	4770      	bx	lr
 8009c1c:	20000020 	.word	0x20000020
 8009c20:	e000ed04 	.word	0xe000ed04

08009c24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009c2a:	4b13      	ldr	r3, [pc, #76]	; (8009c78 <vPortExitCritical+0x54>)
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d10c      	bne.n	8009c4c <vPortExitCritical+0x28>
	__asm volatile
 8009c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c36:	b672      	cpsid	i
 8009c38:	f383 8811 	msr	BASEPRI, r3
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f3bf 8f4f 	dsb	sy
 8009c44:	b662      	cpsie	i
 8009c46:	607b      	str	r3, [r7, #4]
}
 8009c48:	bf00      	nop
 8009c4a:	e7fe      	b.n	8009c4a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009c4c:	4b0a      	ldr	r3, [pc, #40]	; (8009c78 <vPortExitCritical+0x54>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	3b01      	subs	r3, #1
 8009c52:	4a09      	ldr	r2, [pc, #36]	; (8009c78 <vPortExitCritical+0x54>)
 8009c54:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009c56:	4b08      	ldr	r3, [pc, #32]	; (8009c78 <vPortExitCritical+0x54>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2b00      	cmp	r3, #0
 8009c5c:	d105      	bne.n	8009c6a <vPortExitCritical+0x46>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	f383 8811 	msr	BASEPRI, r3
}
 8009c68:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009c6a:	bf00      	nop
 8009c6c:	370c      	adds	r7, #12
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	20000020 	.word	0x20000020
 8009c7c:	00000000 	.word	0x00000000

08009c80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009c80:	f3ef 8009 	mrs	r0, PSP
 8009c84:	f3bf 8f6f 	isb	sy
 8009c88:	4b15      	ldr	r3, [pc, #84]	; (8009ce0 <pxCurrentTCBConst>)
 8009c8a:	681a      	ldr	r2, [r3, #0]
 8009c8c:	f01e 0f10 	tst.w	lr, #16
 8009c90:	bf08      	it	eq
 8009c92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c9a:	6010      	str	r0, [r2, #0]
 8009c9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ca0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ca4:	b672      	cpsid	i
 8009ca6:	f380 8811 	msr	BASEPRI, r0
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	f3bf 8f6f 	isb	sy
 8009cb2:	b662      	cpsie	i
 8009cb4:	f7fe fe9e 	bl	80089f4 <vTaskSwitchContext>
 8009cb8:	f04f 0000 	mov.w	r0, #0
 8009cbc:	f380 8811 	msr	BASEPRI, r0
 8009cc0:	bc09      	pop	{r0, r3}
 8009cc2:	6819      	ldr	r1, [r3, #0]
 8009cc4:	6808      	ldr	r0, [r1, #0]
 8009cc6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cca:	f01e 0f10 	tst.w	lr, #16
 8009cce:	bf08      	it	eq
 8009cd0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009cd4:	f380 8809 	msr	PSP, r0
 8009cd8:	f3bf 8f6f 	isb	sy
 8009cdc:	4770      	bx	lr
 8009cde:	bf00      	nop

08009ce0 <pxCurrentTCBConst>:
 8009ce0:	20005678 	.word	0x20005678
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009ce4:	bf00      	nop
 8009ce6:	bf00      	nop

08009ce8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009ce8:	b580      	push	{r7, lr}
 8009cea:	b082      	sub	sp, #8
 8009cec:	af00      	add	r7, sp, #0
	__asm volatile
 8009cee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cf2:	b672      	cpsid	i
 8009cf4:	f383 8811 	msr	BASEPRI, r3
 8009cf8:	f3bf 8f6f 	isb	sy
 8009cfc:	f3bf 8f4f 	dsb	sy
 8009d00:	b662      	cpsie	i
 8009d02:	607b      	str	r3, [r7, #4]
}
 8009d04:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009d06:	f7fe fdb9 	bl	800887c <xTaskIncrementTick>
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d003      	beq.n	8009d18 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009d10:	4b06      	ldr	r3, [pc, #24]	; (8009d2c <SysTick_Handler+0x44>)
 8009d12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d16:	601a      	str	r2, [r3, #0]
 8009d18:	2300      	movs	r3, #0
 8009d1a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	f383 8811 	msr	BASEPRI, r3
}
 8009d22:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009d24:	bf00      	nop
 8009d26:	3708      	adds	r7, #8
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}
 8009d2c:	e000ed04 	.word	0xe000ed04

08009d30 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009d30:	b480      	push	{r7}
 8009d32:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009d34:	4b0b      	ldr	r3, [pc, #44]	; (8009d64 <vPortSetupTimerInterrupt+0x34>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009d3a:	4b0b      	ldr	r3, [pc, #44]	; (8009d68 <vPortSetupTimerInterrupt+0x38>)
 8009d3c:	2200      	movs	r2, #0
 8009d3e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009d40:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <vPortSetupTimerInterrupt+0x3c>)
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	4a0a      	ldr	r2, [pc, #40]	; (8009d70 <vPortSetupTimerInterrupt+0x40>)
 8009d46:	fba2 2303 	umull	r2, r3, r2, r3
 8009d4a:	099b      	lsrs	r3, r3, #6
 8009d4c:	4a09      	ldr	r2, [pc, #36]	; (8009d74 <vPortSetupTimerInterrupt+0x44>)
 8009d4e:	3b01      	subs	r3, #1
 8009d50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009d52:	4b04      	ldr	r3, [pc, #16]	; (8009d64 <vPortSetupTimerInterrupt+0x34>)
 8009d54:	2207      	movs	r2, #7
 8009d56:	601a      	str	r2, [r3, #0]
}
 8009d58:	bf00      	nop
 8009d5a:	46bd      	mov	sp, r7
 8009d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d60:	4770      	bx	lr
 8009d62:	bf00      	nop
 8009d64:	e000e010 	.word	0xe000e010
 8009d68:	e000e018 	.word	0xe000e018
 8009d6c:	20000000 	.word	0x20000000
 8009d70:	10624dd3 	.word	0x10624dd3
 8009d74:	e000e014 	.word	0xe000e014

08009d78 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009d78:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009d88 <vPortEnableVFP+0x10>
 8009d7c:	6801      	ldr	r1, [r0, #0]
 8009d7e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009d82:	6001      	str	r1, [r0, #0]
 8009d84:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009d86:	bf00      	nop
 8009d88:	e000ed88 	.word	0xe000ed88

08009d8c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009d8c:	b480      	push	{r7}
 8009d8e:	b085      	sub	sp, #20
 8009d90:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009d92:	f3ef 8305 	mrs	r3, IPSR
 8009d96:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	2b0f      	cmp	r3, #15
 8009d9c:	d916      	bls.n	8009dcc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d9e:	4a19      	ldr	r2, [pc, #100]	; (8009e04 <vPortValidateInterruptPriority+0x78>)
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	4413      	add	r3, r2
 8009da4:	781b      	ldrb	r3, [r3, #0]
 8009da6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009da8:	4b17      	ldr	r3, [pc, #92]	; (8009e08 <vPortValidateInterruptPriority+0x7c>)
 8009daa:	781b      	ldrb	r3, [r3, #0]
 8009dac:	7afa      	ldrb	r2, [r7, #11]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d20c      	bcs.n	8009dcc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009db6:	b672      	cpsid	i
 8009db8:	f383 8811 	msr	BASEPRI, r3
 8009dbc:	f3bf 8f6f 	isb	sy
 8009dc0:	f3bf 8f4f 	dsb	sy
 8009dc4:	b662      	cpsie	i
 8009dc6:	607b      	str	r3, [r7, #4]
}
 8009dc8:	bf00      	nop
 8009dca:	e7fe      	b.n	8009dca <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009dcc:	4b0f      	ldr	r3, [pc, #60]	; (8009e0c <vPortValidateInterruptPriority+0x80>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009dd4:	4b0e      	ldr	r3, [pc, #56]	; (8009e10 <vPortValidateInterruptPriority+0x84>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	429a      	cmp	r2, r3
 8009dda:	d90c      	bls.n	8009df6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de0:	b672      	cpsid	i
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	b662      	cpsie	i
 8009df0:	603b      	str	r3, [r7, #0]
}
 8009df2:	bf00      	nop
 8009df4:	e7fe      	b.n	8009df4 <vPortValidateInterruptPriority+0x68>
	}
 8009df6:	bf00      	nop
 8009df8:	3714      	adds	r7, #20
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e00:	4770      	bx	lr
 8009e02:	bf00      	nop
 8009e04:	e000e3f0 	.word	0xe000e3f0
 8009e08:	20005ca4 	.word	0x20005ca4
 8009e0c:	e000ed0c 	.word	0xe000ed0c
 8009e10:	20005ca8 	.word	0x20005ca8

08009e14 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b08a      	sub	sp, #40	; 0x28
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009e1c:	2300      	movs	r3, #0
 8009e1e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009e20:	f7fe fc5c 	bl	80086dc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009e24:	4b5b      	ldr	r3, [pc, #364]	; (8009f94 <pvPortMalloc+0x180>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d101      	bne.n	8009e30 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009e2c:	f000 f91a 	bl	800a064 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009e30:	4b59      	ldr	r3, [pc, #356]	; (8009f98 <pvPortMalloc+0x184>)
 8009e32:	681a      	ldr	r2, [r3, #0]
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	4013      	ands	r3, r2
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	f040 8092 	bne.w	8009f62 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d01f      	beq.n	8009e84 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009e44:	2208      	movs	r2, #8
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	4413      	add	r3, r2
 8009e4a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	f003 0307 	and.w	r3, r3, #7
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d016      	beq.n	8009e84 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	f023 0307 	bic.w	r3, r3, #7
 8009e5c:	3308      	adds	r3, #8
 8009e5e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f003 0307 	and.w	r3, r3, #7
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00c      	beq.n	8009e84 <pvPortMalloc+0x70>
	__asm volatile
 8009e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6e:	b672      	cpsid	i
 8009e70:	f383 8811 	msr	BASEPRI, r3
 8009e74:	f3bf 8f6f 	isb	sy
 8009e78:	f3bf 8f4f 	dsb	sy
 8009e7c:	b662      	cpsie	i
 8009e7e:	617b      	str	r3, [r7, #20]
}
 8009e80:	bf00      	nop
 8009e82:	e7fe      	b.n	8009e82 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d06b      	beq.n	8009f62 <pvPortMalloc+0x14e>
 8009e8a:	4b44      	ldr	r3, [pc, #272]	; (8009f9c <pvPortMalloc+0x188>)
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	687a      	ldr	r2, [r7, #4]
 8009e90:	429a      	cmp	r2, r3
 8009e92:	d866      	bhi.n	8009f62 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009e94:	4b42      	ldr	r3, [pc, #264]	; (8009fa0 <pvPortMalloc+0x18c>)
 8009e96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009e98:	4b41      	ldr	r3, [pc, #260]	; (8009fa0 <pvPortMalloc+0x18c>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e9e:	e004      	b.n	8009eaa <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eac:	685b      	ldr	r3, [r3, #4]
 8009eae:	687a      	ldr	r2, [r7, #4]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d903      	bls.n	8009ebc <pvPortMalloc+0xa8>
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	2b00      	cmp	r3, #0
 8009eba:	d1f1      	bne.n	8009ea0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009ebc:	4b35      	ldr	r3, [pc, #212]	; (8009f94 <pvPortMalloc+0x180>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ec2:	429a      	cmp	r2, r3
 8009ec4:	d04d      	beq.n	8009f62 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ec6:	6a3b      	ldr	r3, [r7, #32]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	2208      	movs	r2, #8
 8009ecc:	4413      	add	r3, r2
 8009ece:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ed2:	681a      	ldr	r2, [r3, #0]
 8009ed4:	6a3b      	ldr	r3, [r7, #32]
 8009ed6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eda:	685a      	ldr	r2, [r3, #4]
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	1ad2      	subs	r2, r2, r3
 8009ee0:	2308      	movs	r3, #8
 8009ee2:	005b      	lsls	r3, r3, #1
 8009ee4:	429a      	cmp	r2, r3
 8009ee6:	d921      	bls.n	8009f2c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009ee8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	4413      	add	r3, r2
 8009eee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ef0:	69bb      	ldr	r3, [r7, #24]
 8009ef2:	f003 0307 	and.w	r3, r3, #7
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d00c      	beq.n	8009f14 <pvPortMalloc+0x100>
	__asm volatile
 8009efa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009efe:	b672      	cpsid	i
 8009f00:	f383 8811 	msr	BASEPRI, r3
 8009f04:	f3bf 8f6f 	isb	sy
 8009f08:	f3bf 8f4f 	dsb	sy
 8009f0c:	b662      	cpsie	i
 8009f0e:	613b      	str	r3, [r7, #16]
}
 8009f10:	bf00      	nop
 8009f12:	e7fe      	b.n	8009f12 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f16:	685a      	ldr	r2, [r3, #4]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	1ad2      	subs	r2, r2, r3
 8009f1c:	69bb      	ldr	r3, [r7, #24]
 8009f1e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009f26:	69b8      	ldr	r0, [r7, #24]
 8009f28:	f000 f8fe 	bl	800a128 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009f2c:	4b1b      	ldr	r3, [pc, #108]	; (8009f9c <pvPortMalloc+0x188>)
 8009f2e:	681a      	ldr	r2, [r3, #0]
 8009f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f32:	685b      	ldr	r3, [r3, #4]
 8009f34:	1ad3      	subs	r3, r2, r3
 8009f36:	4a19      	ldr	r2, [pc, #100]	; (8009f9c <pvPortMalloc+0x188>)
 8009f38:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009f3a:	4b18      	ldr	r3, [pc, #96]	; (8009f9c <pvPortMalloc+0x188>)
 8009f3c:	681a      	ldr	r2, [r3, #0]
 8009f3e:	4b19      	ldr	r3, [pc, #100]	; (8009fa4 <pvPortMalloc+0x190>)
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	429a      	cmp	r2, r3
 8009f44:	d203      	bcs.n	8009f4e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009f46:	4b15      	ldr	r3, [pc, #84]	; (8009f9c <pvPortMalloc+0x188>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a16      	ldr	r2, [pc, #88]	; (8009fa4 <pvPortMalloc+0x190>)
 8009f4c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f50:	685a      	ldr	r2, [r3, #4]
 8009f52:	4b11      	ldr	r3, [pc, #68]	; (8009f98 <pvPortMalloc+0x184>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	431a      	orrs	r2, r3
 8009f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f5e:	2200      	movs	r2, #0
 8009f60:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009f62:	f7fe fbc9 	bl	80086f8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009f66:	69fb      	ldr	r3, [r7, #28]
 8009f68:	f003 0307 	and.w	r3, r3, #7
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d00c      	beq.n	8009f8a <pvPortMalloc+0x176>
	__asm volatile
 8009f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f74:	b672      	cpsid	i
 8009f76:	f383 8811 	msr	BASEPRI, r3
 8009f7a:	f3bf 8f6f 	isb	sy
 8009f7e:	f3bf 8f4f 	dsb	sy
 8009f82:	b662      	cpsie	i
 8009f84:	60fb      	str	r3, [r7, #12]
}
 8009f86:	bf00      	nop
 8009f88:	e7fe      	b.n	8009f88 <pvPortMalloc+0x174>
	return pvReturn;
 8009f8a:	69fb      	ldr	r3, [r7, #28]
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	3728      	adds	r7, #40	; 0x28
 8009f90:	46bd      	mov	sp, r7
 8009f92:	bd80      	pop	{r7, pc}
 8009f94:	200098b4 	.word	0x200098b4
 8009f98:	200098c0 	.word	0x200098c0
 8009f9c:	200098b8 	.word	0x200098b8
 8009fa0:	200098ac 	.word	0x200098ac
 8009fa4:	200098bc 	.word	0x200098bc

08009fa8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	b086      	sub	sp, #24
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d04c      	beq.n	800a054 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009fba:	2308      	movs	r3, #8
 8009fbc:	425b      	negs	r3, r3
 8009fbe:	697a      	ldr	r2, [r7, #20]
 8009fc0:	4413      	add	r3, r2
 8009fc2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009fc4:	697b      	ldr	r3, [r7, #20]
 8009fc6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009fc8:	693b      	ldr	r3, [r7, #16]
 8009fca:	685a      	ldr	r2, [r3, #4]
 8009fcc:	4b23      	ldr	r3, [pc, #140]	; (800a05c <vPortFree+0xb4>)
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d10c      	bne.n	8009ff0 <vPortFree+0x48>
	__asm volatile
 8009fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fda:	b672      	cpsid	i
 8009fdc:	f383 8811 	msr	BASEPRI, r3
 8009fe0:	f3bf 8f6f 	isb	sy
 8009fe4:	f3bf 8f4f 	dsb	sy
 8009fe8:	b662      	cpsie	i
 8009fea:	60fb      	str	r3, [r7, #12]
}
 8009fec:	bf00      	nop
 8009fee:	e7fe      	b.n	8009fee <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009ff0:	693b      	ldr	r3, [r7, #16]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d00c      	beq.n	800a012 <vPortFree+0x6a>
	__asm volatile
 8009ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ffc:	b672      	cpsid	i
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	b662      	cpsie	i
 800a00c:	60bb      	str	r3, [r7, #8]
}
 800a00e:	bf00      	nop
 800a010:	e7fe      	b.n	800a010 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	685a      	ldr	r2, [r3, #4]
 800a016:	4b11      	ldr	r3, [pc, #68]	; (800a05c <vPortFree+0xb4>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4013      	ands	r3, r2
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d019      	beq.n	800a054 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d115      	bne.n	800a054 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a028:	693b      	ldr	r3, [r7, #16]
 800a02a:	685a      	ldr	r2, [r3, #4]
 800a02c:	4b0b      	ldr	r3, [pc, #44]	; (800a05c <vPortFree+0xb4>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	43db      	mvns	r3, r3
 800a032:	401a      	ands	r2, r3
 800a034:	693b      	ldr	r3, [r7, #16]
 800a036:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a038:	f7fe fb50 	bl	80086dc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a03c:	693b      	ldr	r3, [r7, #16]
 800a03e:	685a      	ldr	r2, [r3, #4]
 800a040:	4b07      	ldr	r3, [pc, #28]	; (800a060 <vPortFree+0xb8>)
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4413      	add	r3, r2
 800a046:	4a06      	ldr	r2, [pc, #24]	; (800a060 <vPortFree+0xb8>)
 800a048:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a04a:	6938      	ldr	r0, [r7, #16]
 800a04c:	f000 f86c 	bl	800a128 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800a050:	f7fe fb52 	bl	80086f8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a054:	bf00      	nop
 800a056:	3718      	adds	r7, #24
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	200098c0 	.word	0x200098c0
 800a060:	200098b8 	.word	0x200098b8

0800a064 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a06a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a06e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a070:	4b27      	ldr	r3, [pc, #156]	; (800a110 <prvHeapInit+0xac>)
 800a072:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	f003 0307 	and.w	r3, r3, #7
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d00c      	beq.n	800a098 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3307      	adds	r3, #7
 800a082:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f023 0307 	bic.w	r3, r3, #7
 800a08a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a08c:	68ba      	ldr	r2, [r7, #8]
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	4a1f      	ldr	r2, [pc, #124]	; (800a110 <prvHeapInit+0xac>)
 800a094:	4413      	add	r3, r2
 800a096:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a09c:	4a1d      	ldr	r2, [pc, #116]	; (800a114 <prvHeapInit+0xb0>)
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a0a2:	4b1c      	ldr	r3, [pc, #112]	; (800a114 <prvHeapInit+0xb0>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a0b0:	2208      	movs	r2, #8
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	1a9b      	subs	r3, r3, r2
 800a0b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f023 0307 	bic.w	r3, r3, #7
 800a0be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	4a15      	ldr	r2, [pc, #84]	; (800a118 <prvHeapInit+0xb4>)
 800a0c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a0c6:	4b14      	ldr	r3, [pc, #80]	; (800a118 <prvHeapInit+0xb4>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	2200      	movs	r2, #0
 800a0cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a0ce:	4b12      	ldr	r3, [pc, #72]	; (800a118 <prvHeapInit+0xb4>)
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	68fa      	ldr	r2, [r7, #12]
 800a0de:	1ad2      	subs	r2, r2, r3
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a0e4:	4b0c      	ldr	r3, [pc, #48]	; (800a118 <prvHeapInit+0xb4>)
 800a0e6:	681a      	ldr	r2, [r3, #0]
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	4a0a      	ldr	r2, [pc, #40]	; (800a11c <prvHeapInit+0xb8>)
 800a0f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	4a09      	ldr	r2, [pc, #36]	; (800a120 <prvHeapInit+0xbc>)
 800a0fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a0fc:	4b09      	ldr	r3, [pc, #36]	; (800a124 <prvHeapInit+0xc0>)
 800a0fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a102:	601a      	str	r2, [r3, #0]
}
 800a104:	bf00      	nop
 800a106:	3714      	adds	r7, #20
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr
 800a110:	20005cac 	.word	0x20005cac
 800a114:	200098ac 	.word	0x200098ac
 800a118:	200098b4 	.word	0x200098b4
 800a11c:	200098bc 	.word	0x200098bc
 800a120:	200098b8 	.word	0x200098b8
 800a124:	200098c0 	.word	0x200098c0

0800a128 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a128:	b480      	push	{r7}
 800a12a:	b085      	sub	sp, #20
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a130:	4b28      	ldr	r3, [pc, #160]	; (800a1d4 <prvInsertBlockIntoFreeList+0xac>)
 800a132:	60fb      	str	r3, [r7, #12]
 800a134:	e002      	b.n	800a13c <prvInsertBlockIntoFreeList+0x14>
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	60fb      	str	r3, [r7, #12]
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	687a      	ldr	r2, [r7, #4]
 800a142:	429a      	cmp	r2, r3
 800a144:	d8f7      	bhi.n	800a136 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	68ba      	ldr	r2, [r7, #8]
 800a150:	4413      	add	r3, r2
 800a152:	687a      	ldr	r2, [r7, #4]
 800a154:	429a      	cmp	r2, r3
 800a156:	d108      	bne.n	800a16a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	685a      	ldr	r2, [r3, #4]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	441a      	add	r2, r3
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	68ba      	ldr	r2, [r7, #8]
 800a174:	441a      	add	r2, r3
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d118      	bne.n	800a1b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	4b15      	ldr	r3, [pc, #84]	; (800a1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	429a      	cmp	r2, r3
 800a188:	d00d      	beq.n	800a1a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	685a      	ldr	r2, [r3, #4]
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	685b      	ldr	r3, [r3, #4]
 800a194:	441a      	add	r2, r3
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	681a      	ldr	r2, [r3, #0]
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	e008      	b.n	800a1b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a1a6:	4b0c      	ldr	r3, [pc, #48]	; (800a1d8 <prvInsertBlockIntoFreeList+0xb0>)
 800a1a8:	681a      	ldr	r2, [r3, #0]
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	601a      	str	r2, [r3, #0]
 800a1ae:	e003      	b.n	800a1b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681a      	ldr	r2, [r3, #0]
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a1b8:	68fa      	ldr	r2, [r7, #12]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	429a      	cmp	r2, r3
 800a1be:	d002      	beq.n	800a1c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a1c6:	bf00      	nop
 800a1c8:	3714      	adds	r7, #20
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d0:	4770      	bx	lr
 800a1d2:	bf00      	nop
 800a1d4:	200098ac 	.word	0x200098ac
 800a1d8:	200098b4 	.word	0x200098b4

0800a1dc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a1e6:	f007 fac5 	bl	8011774 <sys_timeouts_sleeptime>
 800a1ea:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1f2:	d10b      	bne.n	800a20c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a1f4:	4813      	ldr	r0, [pc, #76]	; (800a244 <tcpip_timeouts_mbox_fetch+0x68>)
 800a1f6:	f00a f81c 	bl	8014232 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	6839      	ldr	r1, [r7, #0]
 800a1fe:	6878      	ldr	r0, [r7, #4]
 800a200:	f009 ffa4 	bl	801414c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a204:	480f      	ldr	r0, [pc, #60]	; (800a244 <tcpip_timeouts_mbox_fetch+0x68>)
 800a206:	f00a f805 	bl	8014214 <sys_mutex_lock>
    return;
 800a20a:	e018      	b.n	800a23e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d102      	bne.n	800a218 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a212:	f007 fa75 	bl	8011700 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a216:	e7e6      	b.n	800a1e6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a218:	480a      	ldr	r0, [pc, #40]	; (800a244 <tcpip_timeouts_mbox_fetch+0x68>)
 800a21a:	f00a f80a 	bl	8014232 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	6839      	ldr	r1, [r7, #0]
 800a222:	6878      	ldr	r0, [r7, #4]
 800a224:	f009 ff92 	bl	801414c <sys_arch_mbox_fetch>
 800a228:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a22a:	4806      	ldr	r0, [pc, #24]	; (800a244 <tcpip_timeouts_mbox_fetch+0x68>)
 800a22c:	f009 fff2 	bl	8014214 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a230:	68bb      	ldr	r3, [r7, #8]
 800a232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a236:	d102      	bne.n	800a23e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a238:	f007 fa62 	bl	8011700 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a23c:	e7d3      	b.n	800a1e6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a23e:	3710      	adds	r7, #16
 800a240:	46bd      	mov	sp, r7
 800a242:	bd80      	pop	{r7, pc}
 800a244:	200098d0 	.word	0x200098d0

0800a248 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a250:	4810      	ldr	r0, [pc, #64]	; (800a294 <tcpip_thread+0x4c>)
 800a252:	f009 ffdf 	bl	8014214 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a256:	4b10      	ldr	r3, [pc, #64]	; (800a298 <tcpip_thread+0x50>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d005      	beq.n	800a26a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a25e:	4b0e      	ldr	r3, [pc, #56]	; (800a298 <tcpip_thread+0x50>)
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	4a0e      	ldr	r2, [pc, #56]	; (800a29c <tcpip_thread+0x54>)
 800a264:	6812      	ldr	r2, [r2, #0]
 800a266:	4610      	mov	r0, r2
 800a268:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a26a:	f107 030c 	add.w	r3, r7, #12
 800a26e:	4619      	mov	r1, r3
 800a270:	480b      	ldr	r0, [pc, #44]	; (800a2a0 <tcpip_thread+0x58>)
 800a272:	f7ff ffb3 	bl	800a1dc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d106      	bne.n	800a28a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a27c:	4b09      	ldr	r3, [pc, #36]	; (800a2a4 <tcpip_thread+0x5c>)
 800a27e:	2291      	movs	r2, #145	; 0x91
 800a280:	4909      	ldr	r1, [pc, #36]	; (800a2a8 <tcpip_thread+0x60>)
 800a282:	480a      	ldr	r0, [pc, #40]	; (800a2ac <tcpip_thread+0x64>)
 800a284:	f00a f9f8 	bl	8014678 <iprintf>
      continue;
 800a288:	e003      	b.n	800a292 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	4618      	mov	r0, r3
 800a28e:	f000 f80f 	bl	800a2b0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a292:	e7ea      	b.n	800a26a <tcpip_thread+0x22>
 800a294:	200098d0 	.word	0x200098d0
 800a298:	200098c4 	.word	0x200098c4
 800a29c:	200098c8 	.word	0x200098c8
 800a2a0:	200098cc 	.word	0x200098cc
 800a2a4:	08015570 	.word	0x08015570
 800a2a8:	080155a0 	.word	0x080155a0
 800a2ac:	080155c0 	.word	0x080155c0

0800a2b0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	781b      	ldrb	r3, [r3, #0]
 800a2bc:	2b02      	cmp	r3, #2
 800a2be:	d026      	beq.n	800a30e <tcpip_thread_handle_msg+0x5e>
 800a2c0:	2b02      	cmp	r3, #2
 800a2c2:	dc2b      	bgt.n	800a31c <tcpip_thread_handle_msg+0x6c>
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d002      	beq.n	800a2ce <tcpip_thread_handle_msg+0x1e>
 800a2c8:	2b01      	cmp	r3, #1
 800a2ca:	d015      	beq.n	800a2f8 <tcpip_thread_handle_msg+0x48>
 800a2cc:	e026      	b.n	800a31c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	6850      	ldr	r0, [r2, #4]
 800a2d6:	687a      	ldr	r2, [r7, #4]
 800a2d8:	6892      	ldr	r2, [r2, #8]
 800a2da:	4611      	mov	r1, r2
 800a2dc:	4798      	blx	r3
 800a2de:	4603      	mov	r3, r0
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d004      	beq.n	800a2ee <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f001 fd0b 	bl	800bd04 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a2ee:	6879      	ldr	r1, [r7, #4]
 800a2f0:	2009      	movs	r0, #9
 800a2f2:	f000 fe63 	bl	800afbc <memp_free>
      break;
 800a2f6:	e018      	b.n	800a32a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	687a      	ldr	r2, [r7, #4]
 800a2fe:	6892      	ldr	r2, [r2, #8]
 800a300:	4610      	mov	r0, r2
 800a302:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a304:	6879      	ldr	r1, [r7, #4]
 800a306:	2008      	movs	r0, #8
 800a308:	f000 fe58 	bl	800afbc <memp_free>
      break;
 800a30c:	e00d      	b.n	800a32a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	687a      	ldr	r2, [r7, #4]
 800a314:	6892      	ldr	r2, [r2, #8]
 800a316:	4610      	mov	r0, r2
 800a318:	4798      	blx	r3
      break;
 800a31a:	e006      	b.n	800a32a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a31c:	4b05      	ldr	r3, [pc, #20]	; (800a334 <tcpip_thread_handle_msg+0x84>)
 800a31e:	22cf      	movs	r2, #207	; 0xcf
 800a320:	4905      	ldr	r1, [pc, #20]	; (800a338 <tcpip_thread_handle_msg+0x88>)
 800a322:	4806      	ldr	r0, [pc, #24]	; (800a33c <tcpip_thread_handle_msg+0x8c>)
 800a324:	f00a f9a8 	bl	8014678 <iprintf>
      break;
 800a328:	bf00      	nop
  }
}
 800a32a:	bf00      	nop
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}
 800a332:	bf00      	nop
 800a334:	08015570 	.word	0x08015570
 800a338:	080155a0 	.word	0x080155a0
 800a33c:	080155c0 	.word	0x080155c0

0800a340 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b086      	sub	sp, #24
 800a344:	af00      	add	r7, sp, #0
 800a346:	60f8      	str	r0, [r7, #12]
 800a348:	60b9      	str	r1, [r7, #8]
 800a34a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a34c:	481a      	ldr	r0, [pc, #104]	; (800a3b8 <tcpip_inpkt+0x78>)
 800a34e:	f009 ff2e 	bl	80141ae <sys_mbox_valid>
 800a352:	4603      	mov	r3, r0
 800a354:	2b00      	cmp	r3, #0
 800a356:	d105      	bne.n	800a364 <tcpip_inpkt+0x24>
 800a358:	4b18      	ldr	r3, [pc, #96]	; (800a3bc <tcpip_inpkt+0x7c>)
 800a35a:	22fc      	movs	r2, #252	; 0xfc
 800a35c:	4918      	ldr	r1, [pc, #96]	; (800a3c0 <tcpip_inpkt+0x80>)
 800a35e:	4819      	ldr	r0, [pc, #100]	; (800a3c4 <tcpip_inpkt+0x84>)
 800a360:	f00a f98a 	bl	8014678 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a364:	2009      	movs	r0, #9
 800a366:	f000 fdb3 	bl	800aed0 <memp_malloc>
 800a36a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a36c:	697b      	ldr	r3, [r7, #20]
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d102      	bne.n	800a378 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a372:	f04f 33ff 	mov.w	r3, #4294967295
 800a376:	e01a      	b.n	800a3ae <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	2200      	movs	r2, #0
 800a37c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a37e:	697b      	ldr	r3, [r7, #20]
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a384:	697b      	ldr	r3, [r7, #20]
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a390:	6979      	ldr	r1, [r7, #20]
 800a392:	4809      	ldr	r0, [pc, #36]	; (800a3b8 <tcpip_inpkt+0x78>)
 800a394:	f009 fec0 	bl	8014118 <sys_mbox_trypost>
 800a398:	4603      	mov	r3, r0
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	d006      	beq.n	800a3ac <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a39e:	6979      	ldr	r1, [r7, #20]
 800a3a0:	2009      	movs	r0, #9
 800a3a2:	f000 fe0b 	bl	800afbc <memp_free>
    return ERR_MEM;
 800a3a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a3aa:	e000      	b.n	800a3ae <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a3ac:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a3ae:	4618      	mov	r0, r3
 800a3b0:	3718      	adds	r7, #24
 800a3b2:	46bd      	mov	sp, r7
 800a3b4:	bd80      	pop	{r7, pc}
 800a3b6:	bf00      	nop
 800a3b8:	200098cc 	.word	0x200098cc
 800a3bc:	08015570 	.word	0x08015570
 800a3c0:	080155e8 	.word	0x080155e8
 800a3c4:	080155c0 	.word	0x080155c0

0800a3c8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b082      	sub	sp, #8
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
 800a3d0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a3d8:	f003 0318 	and.w	r3, r3, #24
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d006      	beq.n	800a3ee <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a3e0:	4a08      	ldr	r2, [pc, #32]	; (800a404 <tcpip_input+0x3c>)
 800a3e2:	6839      	ldr	r1, [r7, #0]
 800a3e4:	6878      	ldr	r0, [r7, #4]
 800a3e6:	f7ff ffab 	bl	800a340 <tcpip_inpkt>
 800a3ea:	4603      	mov	r3, r0
 800a3ec:	e005      	b.n	800a3fa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a3ee:	4a06      	ldr	r2, [pc, #24]	; (800a408 <tcpip_input+0x40>)
 800a3f0:	6839      	ldr	r1, [r7, #0]
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	f7ff ffa4 	bl	800a340 <tcpip_inpkt>
 800a3f8:	4603      	mov	r3, r0
}
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}
 800a402:	bf00      	nop
 800a404:	08013f39 	.word	0x08013f39
 800a408:	08012e41 	.word	0x08012e41

0800a40c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a40c:	b580      	push	{r7, lr}
 800a40e:	b084      	sub	sp, #16
 800a410:	af00      	add	r7, sp, #0
 800a412:	6078      	str	r0, [r7, #4]
 800a414:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a416:	4819      	ldr	r0, [pc, #100]	; (800a47c <tcpip_try_callback+0x70>)
 800a418:	f009 fec9 	bl	80141ae <sys_mbox_valid>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d106      	bne.n	800a430 <tcpip_try_callback+0x24>
 800a422:	4b17      	ldr	r3, [pc, #92]	; (800a480 <tcpip_try_callback+0x74>)
 800a424:	f240 125d 	movw	r2, #349	; 0x15d
 800a428:	4916      	ldr	r1, [pc, #88]	; (800a484 <tcpip_try_callback+0x78>)
 800a42a:	4817      	ldr	r0, [pc, #92]	; (800a488 <tcpip_try_callback+0x7c>)
 800a42c:	f00a f924 	bl	8014678 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a430:	2008      	movs	r0, #8
 800a432:	f000 fd4d 	bl	800aed0 <memp_malloc>
 800a436:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d102      	bne.n	800a444 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a43e:	f04f 33ff 	mov.w	r3, #4294967295
 800a442:	e017      	b.n	800a474 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	2201      	movs	r2, #1
 800a448:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	687a      	ldr	r2, [r7, #4]
 800a44e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	683a      	ldr	r2, [r7, #0]
 800a454:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a456:	68f9      	ldr	r1, [r7, #12]
 800a458:	4808      	ldr	r0, [pc, #32]	; (800a47c <tcpip_try_callback+0x70>)
 800a45a:	f009 fe5d 	bl	8014118 <sys_mbox_trypost>
 800a45e:	4603      	mov	r3, r0
 800a460:	2b00      	cmp	r3, #0
 800a462:	d006      	beq.n	800a472 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a464:	68f9      	ldr	r1, [r7, #12]
 800a466:	2008      	movs	r0, #8
 800a468:	f000 fda8 	bl	800afbc <memp_free>
    return ERR_MEM;
 800a46c:	f04f 33ff 	mov.w	r3, #4294967295
 800a470:	e000      	b.n	800a474 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a472:	2300      	movs	r3, #0
}
 800a474:	4618      	mov	r0, r3
 800a476:	3710      	adds	r7, #16
 800a478:	46bd      	mov	sp, r7
 800a47a:	bd80      	pop	{r7, pc}
 800a47c:	200098cc 	.word	0x200098cc
 800a480:	08015570 	.word	0x08015570
 800a484:	080155e8 	.word	0x080155e8
 800a488:	080155c0 	.word	0x080155c0

0800a48c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b084      	sub	sp, #16
 800a490:	af02      	add	r7, sp, #8
 800a492:	6078      	str	r0, [r7, #4]
 800a494:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a496:	f000 f871 	bl	800a57c <lwip_init>

  tcpip_init_done = initfunc;
 800a49a:	4a17      	ldr	r2, [pc, #92]	; (800a4f8 <tcpip_init+0x6c>)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a4a0:	4a16      	ldr	r2, [pc, #88]	; (800a4fc <tcpip_init+0x70>)
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a4a6:	2106      	movs	r1, #6
 800a4a8:	4815      	ldr	r0, [pc, #84]	; (800a500 <tcpip_init+0x74>)
 800a4aa:	f009 fe1b 	bl	80140e4 <sys_mbox_new>
 800a4ae:	4603      	mov	r3, r0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d006      	beq.n	800a4c2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a4b4:	4b13      	ldr	r3, [pc, #76]	; (800a504 <tcpip_init+0x78>)
 800a4b6:	f240 2261 	movw	r2, #609	; 0x261
 800a4ba:	4913      	ldr	r1, [pc, #76]	; (800a508 <tcpip_init+0x7c>)
 800a4bc:	4813      	ldr	r0, [pc, #76]	; (800a50c <tcpip_init+0x80>)
 800a4be:	f00a f8db 	bl	8014678 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a4c2:	4813      	ldr	r0, [pc, #76]	; (800a510 <tcpip_init+0x84>)
 800a4c4:	f009 fe90 	bl	80141e8 <sys_mutex_new>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d006      	beq.n	800a4dc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a4ce:	4b0d      	ldr	r3, [pc, #52]	; (800a504 <tcpip_init+0x78>)
 800a4d0:	f240 2265 	movw	r2, #613	; 0x265
 800a4d4:	490f      	ldr	r1, [pc, #60]	; (800a514 <tcpip_init+0x88>)
 800a4d6:	480d      	ldr	r0, [pc, #52]	; (800a50c <tcpip_init+0x80>)
 800a4d8:	f00a f8ce 	bl	8014678 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a4dc:	2318      	movs	r3, #24
 800a4de:	9300      	str	r3, [sp, #0]
 800a4e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	490c      	ldr	r1, [pc, #48]	; (800a518 <tcpip_init+0x8c>)
 800a4e8:	480c      	ldr	r0, [pc, #48]	; (800a51c <tcpip_init+0x90>)
 800a4ea:	f009 feaf 	bl	801424c <sys_thread_new>
}
 800a4ee:	bf00      	nop
 800a4f0:	3708      	adds	r7, #8
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	bf00      	nop
 800a4f8:	200098c4 	.word	0x200098c4
 800a4fc:	200098c8 	.word	0x200098c8
 800a500:	200098cc 	.word	0x200098cc
 800a504:	08015570 	.word	0x08015570
 800a508:	080155f8 	.word	0x080155f8
 800a50c:	080155c0 	.word	0x080155c0
 800a510:	200098d0 	.word	0x200098d0
 800a514:	0801561c 	.word	0x0801561c
 800a518:	0800a249 	.word	0x0800a249
 800a51c:	08015640 	.word	0x08015640

0800a520 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a520:	b480      	push	{r7}
 800a522:	b083      	sub	sp, #12
 800a524:	af00      	add	r7, sp, #0
 800a526:	4603      	mov	r3, r0
 800a528:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a52a:	88fb      	ldrh	r3, [r7, #6]
 800a52c:	021b      	lsls	r3, r3, #8
 800a52e:	b21a      	sxth	r2, r3
 800a530:	88fb      	ldrh	r3, [r7, #6]
 800a532:	0a1b      	lsrs	r3, r3, #8
 800a534:	b29b      	uxth	r3, r3
 800a536:	b21b      	sxth	r3, r3
 800a538:	4313      	orrs	r3, r2
 800a53a:	b21b      	sxth	r3, r3
 800a53c:	b29b      	uxth	r3, r3
}
 800a53e:	4618      	mov	r0, r3
 800a540:	370c      	adds	r7, #12
 800a542:	46bd      	mov	sp, r7
 800a544:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a548:	4770      	bx	lr

0800a54a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a54a:	b480      	push	{r7}
 800a54c:	b083      	sub	sp, #12
 800a54e:	af00      	add	r7, sp, #0
 800a550:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	061a      	lsls	r2, r3, #24
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	021b      	lsls	r3, r3, #8
 800a55a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a55e:	431a      	orrs	r2, r3
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	0a1b      	lsrs	r3, r3, #8
 800a564:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a568:	431a      	orrs	r2, r3
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	0e1b      	lsrs	r3, r3, #24
 800a56e:	4313      	orrs	r3, r2
}
 800a570:	4618      	mov	r0, r3
 800a572:	370c      	adds	r7, #12
 800a574:	46bd      	mov	sp, r7
 800a576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a57a:	4770      	bx	lr

0800a57c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a582:	2300      	movs	r3, #0
 800a584:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a586:	f009 fe23 	bl	80141d0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a58a:	f000 f8d5 	bl	800a738 <mem_init>
  memp_init();
 800a58e:	f000 fc31 	bl	800adf4 <memp_init>
  pbuf_init();
  netif_init();
 800a592:	f000 fd3d 	bl	800b010 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a596:	f007 f925 	bl	80117e4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a59a:	f001 fe4d 	bl	800c238 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a59e:	f007 f867 	bl	8011670 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a5a2:	bf00      	nop
 800a5a4:	3708      	adds	r7, #8
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	bd80      	pop	{r7, pc}
	...

0800a5ac <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a5ac:	b480      	push	{r7}
 800a5ae:	b083      	sub	sp, #12
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a5b6:	4b05      	ldr	r3, [pc, #20]	; (800a5cc <ptr_to_mem+0x20>)
 800a5b8:	681a      	ldr	r2, [r3, #0]
 800a5ba:	88fb      	ldrh	r3, [r7, #6]
 800a5bc:	4413      	add	r3, r2
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	370c      	adds	r7, #12
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr
 800a5ca:	bf00      	nop
 800a5cc:	2000c100 	.word	0x2000c100

0800a5d0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b083      	sub	sp, #12
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a5d8:	4b05      	ldr	r3, [pc, #20]	; (800a5f0 <mem_to_ptr+0x20>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	687a      	ldr	r2, [r7, #4]
 800a5de:	1ad3      	subs	r3, r2, r3
 800a5e0:	b29b      	uxth	r3, r3
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	370c      	adds	r7, #12
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ec:	4770      	bx	lr
 800a5ee:	bf00      	nop
 800a5f0:	2000c100 	.word	0x2000c100

0800a5f4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a5f4:	b590      	push	{r4, r7, lr}
 800a5f6:	b085      	sub	sp, #20
 800a5f8:	af00      	add	r7, sp, #0
 800a5fa:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a5fc:	4b45      	ldr	r3, [pc, #276]	; (800a714 <plug_holes+0x120>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	687a      	ldr	r2, [r7, #4]
 800a602:	429a      	cmp	r2, r3
 800a604:	d206      	bcs.n	800a614 <plug_holes+0x20>
 800a606:	4b44      	ldr	r3, [pc, #272]	; (800a718 <plug_holes+0x124>)
 800a608:	f240 12df 	movw	r2, #479	; 0x1df
 800a60c:	4943      	ldr	r1, [pc, #268]	; (800a71c <plug_holes+0x128>)
 800a60e:	4844      	ldr	r0, [pc, #272]	; (800a720 <plug_holes+0x12c>)
 800a610:	f00a f832 	bl	8014678 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a614:	4b43      	ldr	r3, [pc, #268]	; (800a724 <plug_holes+0x130>)
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	687a      	ldr	r2, [r7, #4]
 800a61a:	429a      	cmp	r2, r3
 800a61c:	d306      	bcc.n	800a62c <plug_holes+0x38>
 800a61e:	4b3e      	ldr	r3, [pc, #248]	; (800a718 <plug_holes+0x124>)
 800a620:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a624:	4940      	ldr	r1, [pc, #256]	; (800a728 <plug_holes+0x134>)
 800a626:	483e      	ldr	r0, [pc, #248]	; (800a720 <plug_holes+0x12c>)
 800a628:	f00a f826 	bl	8014678 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	791b      	ldrb	r3, [r3, #4]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d006      	beq.n	800a642 <plug_holes+0x4e>
 800a634:	4b38      	ldr	r3, [pc, #224]	; (800a718 <plug_holes+0x124>)
 800a636:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a63a:	493c      	ldr	r1, [pc, #240]	; (800a72c <plug_holes+0x138>)
 800a63c:	4838      	ldr	r0, [pc, #224]	; (800a720 <plug_holes+0x12c>)
 800a63e:	f00a f81b 	bl	8014678 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	881b      	ldrh	r3, [r3, #0]
 800a646:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a64a:	d906      	bls.n	800a65a <plug_holes+0x66>
 800a64c:	4b32      	ldr	r3, [pc, #200]	; (800a718 <plug_holes+0x124>)
 800a64e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a652:	4937      	ldr	r1, [pc, #220]	; (800a730 <plug_holes+0x13c>)
 800a654:	4832      	ldr	r0, [pc, #200]	; (800a720 <plug_holes+0x12c>)
 800a656:	f00a f80f 	bl	8014678 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	881b      	ldrh	r3, [r3, #0]
 800a65e:	4618      	mov	r0, r3
 800a660:	f7ff ffa4 	bl	800a5ac <ptr_to_mem>
 800a664:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d024      	beq.n	800a6b8 <plug_holes+0xc4>
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	791b      	ldrb	r3, [r3, #4]
 800a672:	2b00      	cmp	r3, #0
 800a674:	d120      	bne.n	800a6b8 <plug_holes+0xc4>
 800a676:	4b2b      	ldr	r3, [pc, #172]	; (800a724 <plug_holes+0x130>)
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	68fa      	ldr	r2, [r7, #12]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d01b      	beq.n	800a6b8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a680:	4b2c      	ldr	r3, [pc, #176]	; (800a734 <plug_holes+0x140>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	68fa      	ldr	r2, [r7, #12]
 800a686:	429a      	cmp	r2, r3
 800a688:	d102      	bne.n	800a690 <plug_holes+0x9c>
      lfree = mem;
 800a68a:	4a2a      	ldr	r2, [pc, #168]	; (800a734 <plug_holes+0x140>)
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	881a      	ldrh	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	881b      	ldrh	r3, [r3, #0]
 800a69c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a6a0:	d00a      	beq.n	800a6b8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	881b      	ldrh	r3, [r3, #0]
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f7ff ff80 	bl	800a5ac <ptr_to_mem>
 800a6ac:	4604      	mov	r4, r0
 800a6ae:	6878      	ldr	r0, [r7, #4]
 800a6b0:	f7ff ff8e 	bl	800a5d0 <mem_to_ptr>
 800a6b4:	4603      	mov	r3, r0
 800a6b6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	885b      	ldrh	r3, [r3, #2]
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f7ff ff75 	bl	800a5ac <ptr_to_mem>
 800a6c2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d01f      	beq.n	800a70c <plug_holes+0x118>
 800a6cc:	68bb      	ldr	r3, [r7, #8]
 800a6ce:	791b      	ldrb	r3, [r3, #4]
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d11b      	bne.n	800a70c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a6d4:	4b17      	ldr	r3, [pc, #92]	; (800a734 <plug_holes+0x140>)
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	687a      	ldr	r2, [r7, #4]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d102      	bne.n	800a6e4 <plug_holes+0xf0>
      lfree = pmem;
 800a6de:	4a15      	ldr	r2, [pc, #84]	; (800a734 <plug_holes+0x140>)
 800a6e0:	68bb      	ldr	r3, [r7, #8]
 800a6e2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	881a      	ldrh	r2, [r3, #0]
 800a6e8:	68bb      	ldr	r3, [r7, #8]
 800a6ea:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	881b      	ldrh	r3, [r3, #0]
 800a6f0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a6f4:	d00a      	beq.n	800a70c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f7ff ff56 	bl	800a5ac <ptr_to_mem>
 800a700:	4604      	mov	r4, r0
 800a702:	68b8      	ldr	r0, [r7, #8]
 800a704:	f7ff ff64 	bl	800a5d0 <mem_to_ptr>
 800a708:	4603      	mov	r3, r0
 800a70a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a70c:	bf00      	nop
 800a70e:	3714      	adds	r7, #20
 800a710:	46bd      	mov	sp, r7
 800a712:	bd90      	pop	{r4, r7, pc}
 800a714:	2000c100 	.word	0x2000c100
 800a718:	08015650 	.word	0x08015650
 800a71c:	08015680 	.word	0x08015680
 800a720:	08015698 	.word	0x08015698
 800a724:	2000c104 	.word	0x2000c104
 800a728:	080156c0 	.word	0x080156c0
 800a72c:	080156dc 	.word	0x080156dc
 800a730:	080156f8 	.word	0x080156f8
 800a734:	2000c10c 	.word	0x2000c10c

0800a738 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b082      	sub	sp, #8
 800a73c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a73e:	4b1f      	ldr	r3, [pc, #124]	; (800a7bc <mem_init+0x84>)
 800a740:	3303      	adds	r3, #3
 800a742:	f023 0303 	bic.w	r3, r3, #3
 800a746:	461a      	mov	r2, r3
 800a748:	4b1d      	ldr	r3, [pc, #116]	; (800a7c0 <mem_init+0x88>)
 800a74a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a74c:	4b1c      	ldr	r3, [pc, #112]	; (800a7c0 <mem_init+0x88>)
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a758:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2200      	movs	r2, #0
 800a75e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	2200      	movs	r2, #0
 800a764:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a766:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800a76a:	f7ff ff1f 	bl	800a5ac <ptr_to_mem>
 800a76e:	4603      	mov	r3, r0
 800a770:	4a14      	ldr	r2, [pc, #80]	; (800a7c4 <mem_init+0x8c>)
 800a772:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a774:	4b13      	ldr	r3, [pc, #76]	; (800a7c4 <mem_init+0x8c>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	2201      	movs	r2, #1
 800a77a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a77c:	4b11      	ldr	r3, [pc, #68]	; (800a7c4 <mem_init+0x8c>)
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a784:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a786:	4b0f      	ldr	r3, [pc, #60]	; (800a7c4 <mem_init+0x8c>)
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a78e:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a790:	4b0b      	ldr	r3, [pc, #44]	; (800a7c0 <mem_init+0x88>)
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4a0c      	ldr	r2, [pc, #48]	; (800a7c8 <mem_init+0x90>)
 800a796:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a798:	480c      	ldr	r0, [pc, #48]	; (800a7cc <mem_init+0x94>)
 800a79a:	f009 fd25 	bl	80141e8 <sys_mutex_new>
 800a79e:	4603      	mov	r3, r0
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d006      	beq.n	800a7b2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a7a4:	4b0a      	ldr	r3, [pc, #40]	; (800a7d0 <mem_init+0x98>)
 800a7a6:	f240 221f 	movw	r2, #543	; 0x21f
 800a7aa:	490a      	ldr	r1, [pc, #40]	; (800a7d4 <mem_init+0x9c>)
 800a7ac:	480a      	ldr	r0, [pc, #40]	; (800a7d8 <mem_init+0xa0>)
 800a7ae:	f009 ff63 	bl	8014678 <iprintf>
  }
}
 800a7b2:	bf00      	nop
 800a7b4:	3708      	adds	r7, #8
 800a7b6:	46bd      	mov	sp, r7
 800a7b8:	bd80      	pop	{r7, pc}
 800a7ba:	bf00      	nop
 800a7bc:	200098ec 	.word	0x200098ec
 800a7c0:	2000c100 	.word	0x2000c100
 800a7c4:	2000c104 	.word	0x2000c104
 800a7c8:	2000c10c 	.word	0x2000c10c
 800a7cc:	2000c108 	.word	0x2000c108
 800a7d0:	08015650 	.word	0x08015650
 800a7d4:	08015724 	.word	0x08015724
 800a7d8:	08015698 	.word	0x08015698

0800a7dc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a7dc:	b580      	push	{r7, lr}
 800a7de:	b086      	sub	sp, #24
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f7ff fef3 	bl	800a5d0 <mem_to_ptr>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	881b      	ldrh	r3, [r3, #0]
 800a7f2:	4618      	mov	r0, r3
 800a7f4:	f7ff feda 	bl	800a5ac <ptr_to_mem>
 800a7f8:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	885b      	ldrh	r3, [r3, #2]
 800a7fe:	4618      	mov	r0, r3
 800a800:	f7ff fed4 	bl	800a5ac <ptr_to_mem>
 800a804:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	881b      	ldrh	r3, [r3, #0]
 800a80a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a80e:	d818      	bhi.n	800a842 <mem_link_valid+0x66>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	885b      	ldrh	r3, [r3, #2]
 800a814:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a818:	d813      	bhi.n	800a842 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a81e:	8afa      	ldrh	r2, [r7, #22]
 800a820:	429a      	cmp	r2, r3
 800a822:	d004      	beq.n	800a82e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	881b      	ldrh	r3, [r3, #0]
 800a828:	8afa      	ldrh	r2, [r7, #22]
 800a82a:	429a      	cmp	r2, r3
 800a82c:	d109      	bne.n	800a842 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a82e:	4b08      	ldr	r3, [pc, #32]	; (800a850 <mem_link_valid+0x74>)
 800a830:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a832:	693a      	ldr	r2, [r7, #16]
 800a834:	429a      	cmp	r2, r3
 800a836:	d006      	beq.n	800a846 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	885b      	ldrh	r3, [r3, #2]
 800a83c:	8afa      	ldrh	r2, [r7, #22]
 800a83e:	429a      	cmp	r2, r3
 800a840:	d001      	beq.n	800a846 <mem_link_valid+0x6a>
    return 0;
 800a842:	2300      	movs	r3, #0
 800a844:	e000      	b.n	800a848 <mem_link_valid+0x6c>
  }
  return 1;
 800a846:	2301      	movs	r3, #1
}
 800a848:	4618      	mov	r0, r3
 800a84a:	3718      	adds	r7, #24
 800a84c:	46bd      	mov	sp, r7
 800a84e:	bd80      	pop	{r7, pc}
 800a850:	2000c104 	.word	0x2000c104

0800a854 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a854:	b580      	push	{r7, lr}
 800a856:	b088      	sub	sp, #32
 800a858:	af00      	add	r7, sp, #0
 800a85a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d070      	beq.n	800a944 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f003 0303 	and.w	r3, r3, #3
 800a868:	2b00      	cmp	r3, #0
 800a86a:	d00d      	beq.n	800a888 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a86c:	4b37      	ldr	r3, [pc, #220]	; (800a94c <mem_free+0xf8>)
 800a86e:	f240 2273 	movw	r2, #627	; 0x273
 800a872:	4937      	ldr	r1, [pc, #220]	; (800a950 <mem_free+0xfc>)
 800a874:	4837      	ldr	r0, [pc, #220]	; (800a954 <mem_free+0x100>)
 800a876:	f009 feff 	bl	8014678 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a87a:	f009 fd07 	bl	801428c <sys_arch_protect>
 800a87e:	60f8      	str	r0, [r7, #12]
 800a880:	68f8      	ldr	r0, [r7, #12]
 800a882:	f009 fd11 	bl	80142a8 <sys_arch_unprotect>
    return;
 800a886:	e05e      	b.n	800a946 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	3b08      	subs	r3, #8
 800a88c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a88e:	4b32      	ldr	r3, [pc, #200]	; (800a958 <mem_free+0x104>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	69fa      	ldr	r2, [r7, #28]
 800a894:	429a      	cmp	r2, r3
 800a896:	d306      	bcc.n	800a8a6 <mem_free+0x52>
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	f103 020c 	add.w	r2, r3, #12
 800a89e:	4b2f      	ldr	r3, [pc, #188]	; (800a95c <mem_free+0x108>)
 800a8a0:	681b      	ldr	r3, [r3, #0]
 800a8a2:	429a      	cmp	r2, r3
 800a8a4:	d90d      	bls.n	800a8c2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a8a6:	4b29      	ldr	r3, [pc, #164]	; (800a94c <mem_free+0xf8>)
 800a8a8:	f240 227f 	movw	r2, #639	; 0x27f
 800a8ac:	492c      	ldr	r1, [pc, #176]	; (800a960 <mem_free+0x10c>)
 800a8ae:	4829      	ldr	r0, [pc, #164]	; (800a954 <mem_free+0x100>)
 800a8b0:	f009 fee2 	bl	8014678 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a8b4:	f009 fcea 	bl	801428c <sys_arch_protect>
 800a8b8:	6138      	str	r0, [r7, #16]
 800a8ba:	6938      	ldr	r0, [r7, #16]
 800a8bc:	f009 fcf4 	bl	80142a8 <sys_arch_unprotect>
    return;
 800a8c0:	e041      	b.n	800a946 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a8c2:	4828      	ldr	r0, [pc, #160]	; (800a964 <mem_free+0x110>)
 800a8c4:	f009 fca6 	bl	8014214 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a8c8:	69fb      	ldr	r3, [r7, #28]
 800a8ca:	791b      	ldrb	r3, [r3, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d110      	bne.n	800a8f2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a8d0:	4b1e      	ldr	r3, [pc, #120]	; (800a94c <mem_free+0xf8>)
 800a8d2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a8d6:	4924      	ldr	r1, [pc, #144]	; (800a968 <mem_free+0x114>)
 800a8d8:	481e      	ldr	r0, [pc, #120]	; (800a954 <mem_free+0x100>)
 800a8da:	f009 fecd 	bl	8014678 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a8de:	4821      	ldr	r0, [pc, #132]	; (800a964 <mem_free+0x110>)
 800a8e0:	f009 fca7 	bl	8014232 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a8e4:	f009 fcd2 	bl	801428c <sys_arch_protect>
 800a8e8:	6178      	str	r0, [r7, #20]
 800a8ea:	6978      	ldr	r0, [r7, #20]
 800a8ec:	f009 fcdc 	bl	80142a8 <sys_arch_unprotect>
    return;
 800a8f0:	e029      	b.n	800a946 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a8f2:	69f8      	ldr	r0, [r7, #28]
 800a8f4:	f7ff ff72 	bl	800a7dc <mem_link_valid>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d110      	bne.n	800a920 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a8fe:	4b13      	ldr	r3, [pc, #76]	; (800a94c <mem_free+0xf8>)
 800a900:	f240 2295 	movw	r2, #661	; 0x295
 800a904:	4919      	ldr	r1, [pc, #100]	; (800a96c <mem_free+0x118>)
 800a906:	4813      	ldr	r0, [pc, #76]	; (800a954 <mem_free+0x100>)
 800a908:	f009 feb6 	bl	8014678 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a90c:	4815      	ldr	r0, [pc, #84]	; (800a964 <mem_free+0x110>)
 800a90e:	f009 fc90 	bl	8014232 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a912:	f009 fcbb 	bl	801428c <sys_arch_protect>
 800a916:	61b8      	str	r0, [r7, #24]
 800a918:	69b8      	ldr	r0, [r7, #24]
 800a91a:	f009 fcc5 	bl	80142a8 <sys_arch_unprotect>
    return;
 800a91e:	e012      	b.n	800a946 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a920:	69fb      	ldr	r3, [r7, #28]
 800a922:	2200      	movs	r2, #0
 800a924:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a926:	4b12      	ldr	r3, [pc, #72]	; (800a970 <mem_free+0x11c>)
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	69fa      	ldr	r2, [r7, #28]
 800a92c:	429a      	cmp	r2, r3
 800a92e:	d202      	bcs.n	800a936 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a930:	4a0f      	ldr	r2, [pc, #60]	; (800a970 <mem_free+0x11c>)
 800a932:	69fb      	ldr	r3, [r7, #28]
 800a934:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a936:	69f8      	ldr	r0, [r7, #28]
 800a938:	f7ff fe5c 	bl	800a5f4 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a93c:	4809      	ldr	r0, [pc, #36]	; (800a964 <mem_free+0x110>)
 800a93e:	f009 fc78 	bl	8014232 <sys_mutex_unlock>
 800a942:	e000      	b.n	800a946 <mem_free+0xf2>
    return;
 800a944:	bf00      	nop
}
 800a946:	3720      	adds	r7, #32
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	08015650 	.word	0x08015650
 800a950:	08015740 	.word	0x08015740
 800a954:	08015698 	.word	0x08015698
 800a958:	2000c100 	.word	0x2000c100
 800a95c:	2000c104 	.word	0x2000c104
 800a960:	08015764 	.word	0x08015764
 800a964:	2000c108 	.word	0x2000c108
 800a968:	08015780 	.word	0x08015780
 800a96c:	080157a8 	.word	0x080157a8
 800a970:	2000c10c 	.word	0x2000c10c

0800a974 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a974:	b580      	push	{r7, lr}
 800a976:	b088      	sub	sp, #32
 800a978:	af00      	add	r7, sp, #0
 800a97a:	6078      	str	r0, [r7, #4]
 800a97c:	460b      	mov	r3, r1
 800a97e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a980:	887b      	ldrh	r3, [r7, #2]
 800a982:	3303      	adds	r3, #3
 800a984:	b29b      	uxth	r3, r3
 800a986:	f023 0303 	bic.w	r3, r3, #3
 800a98a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a98c:	8bfb      	ldrh	r3, [r7, #30]
 800a98e:	2b0b      	cmp	r3, #11
 800a990:	d801      	bhi.n	800a996 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a992:	230c      	movs	r3, #12
 800a994:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a996:	8bfb      	ldrh	r3, [r7, #30]
 800a998:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a99c:	d803      	bhi.n	800a9a6 <mem_trim+0x32>
 800a99e:	8bfa      	ldrh	r2, [r7, #30]
 800a9a0:	887b      	ldrh	r3, [r7, #2]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d201      	bcs.n	800a9aa <mem_trim+0x36>
    return NULL;
 800a9a6:	2300      	movs	r3, #0
 800a9a8:	e0d8      	b.n	800ab5c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a9aa:	4b6e      	ldr	r3, [pc, #440]	; (800ab64 <mem_trim+0x1f0>)
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	429a      	cmp	r2, r3
 800a9b2:	d304      	bcc.n	800a9be <mem_trim+0x4a>
 800a9b4:	4b6c      	ldr	r3, [pc, #432]	; (800ab68 <mem_trim+0x1f4>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	687a      	ldr	r2, [r7, #4]
 800a9ba:	429a      	cmp	r2, r3
 800a9bc:	d306      	bcc.n	800a9cc <mem_trim+0x58>
 800a9be:	4b6b      	ldr	r3, [pc, #428]	; (800ab6c <mem_trim+0x1f8>)
 800a9c0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a9c4:	496a      	ldr	r1, [pc, #424]	; (800ab70 <mem_trim+0x1fc>)
 800a9c6:	486b      	ldr	r0, [pc, #428]	; (800ab74 <mem_trim+0x200>)
 800a9c8:	f009 fe56 	bl	8014678 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a9cc:	4b65      	ldr	r3, [pc, #404]	; (800ab64 <mem_trim+0x1f0>)
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	687a      	ldr	r2, [r7, #4]
 800a9d2:	429a      	cmp	r2, r3
 800a9d4:	d304      	bcc.n	800a9e0 <mem_trim+0x6c>
 800a9d6:	4b64      	ldr	r3, [pc, #400]	; (800ab68 <mem_trim+0x1f4>)
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	429a      	cmp	r2, r3
 800a9de:	d307      	bcc.n	800a9f0 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a9e0:	f009 fc54 	bl	801428c <sys_arch_protect>
 800a9e4:	60b8      	str	r0, [r7, #8]
 800a9e6:	68b8      	ldr	r0, [r7, #8]
 800a9e8:	f009 fc5e 	bl	80142a8 <sys_arch_unprotect>
    return rmem;
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	e0b5      	b.n	800ab5c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	3b08      	subs	r3, #8
 800a9f4:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a9f6:	69b8      	ldr	r0, [r7, #24]
 800a9f8:	f7ff fdea 	bl	800a5d0 <mem_to_ptr>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800aa00:	69bb      	ldr	r3, [r7, #24]
 800aa02:	881a      	ldrh	r2, [r3, #0]
 800aa04:	8afb      	ldrh	r3, [r7, #22]
 800aa06:	1ad3      	subs	r3, r2, r3
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	3b08      	subs	r3, #8
 800aa0c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800aa0e:	8bfa      	ldrh	r2, [r7, #30]
 800aa10:	8abb      	ldrh	r3, [r7, #20]
 800aa12:	429a      	cmp	r2, r3
 800aa14:	d906      	bls.n	800aa24 <mem_trim+0xb0>
 800aa16:	4b55      	ldr	r3, [pc, #340]	; (800ab6c <mem_trim+0x1f8>)
 800aa18:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800aa1c:	4956      	ldr	r1, [pc, #344]	; (800ab78 <mem_trim+0x204>)
 800aa1e:	4855      	ldr	r0, [pc, #340]	; (800ab74 <mem_trim+0x200>)
 800aa20:	f009 fe2a 	bl	8014678 <iprintf>
  if (newsize > size) {
 800aa24:	8bfa      	ldrh	r2, [r7, #30]
 800aa26:	8abb      	ldrh	r3, [r7, #20]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d901      	bls.n	800aa30 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	e095      	b.n	800ab5c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800aa30:	8bfa      	ldrh	r2, [r7, #30]
 800aa32:	8abb      	ldrh	r3, [r7, #20]
 800aa34:	429a      	cmp	r2, r3
 800aa36:	d101      	bne.n	800aa3c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	e08f      	b.n	800ab5c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800aa3c:	484f      	ldr	r0, [pc, #316]	; (800ab7c <mem_trim+0x208>)
 800aa3e:	f009 fbe9 	bl	8014214 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800aa42:	69bb      	ldr	r3, [r7, #24]
 800aa44:	881b      	ldrh	r3, [r3, #0]
 800aa46:	4618      	mov	r0, r3
 800aa48:	f7ff fdb0 	bl	800a5ac <ptr_to_mem>
 800aa4c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	791b      	ldrb	r3, [r3, #4]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d13f      	bne.n	800aad6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800aa56:	69bb      	ldr	r3, [r7, #24]
 800aa58:	881b      	ldrh	r3, [r3, #0]
 800aa5a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800aa5e:	d106      	bne.n	800aa6e <mem_trim+0xfa>
 800aa60:	4b42      	ldr	r3, [pc, #264]	; (800ab6c <mem_trim+0x1f8>)
 800aa62:	f240 22f5 	movw	r2, #757	; 0x2f5
 800aa66:	4946      	ldr	r1, [pc, #280]	; (800ab80 <mem_trim+0x20c>)
 800aa68:	4842      	ldr	r0, [pc, #264]	; (800ab74 <mem_trim+0x200>)
 800aa6a:	f009 fe05 	bl	8014678 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800aa6e:	693b      	ldr	r3, [r7, #16]
 800aa70:	881b      	ldrh	r3, [r3, #0]
 800aa72:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800aa74:	8afa      	ldrh	r2, [r7, #22]
 800aa76:	8bfb      	ldrh	r3, [r7, #30]
 800aa78:	4413      	add	r3, r2
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	3308      	adds	r3, #8
 800aa7e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800aa80:	4b40      	ldr	r3, [pc, #256]	; (800ab84 <mem_trim+0x210>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	693a      	ldr	r2, [r7, #16]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d106      	bne.n	800aa98 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800aa8a:	89fb      	ldrh	r3, [r7, #14]
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7ff fd8d 	bl	800a5ac <ptr_to_mem>
 800aa92:	4603      	mov	r3, r0
 800aa94:	4a3b      	ldr	r2, [pc, #236]	; (800ab84 <mem_trim+0x210>)
 800aa96:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800aa98:	89fb      	ldrh	r3, [r7, #14]
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	f7ff fd86 	bl	800a5ac <ptr_to_mem>
 800aaa0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	2200      	movs	r2, #0
 800aaa6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800aaa8:	693b      	ldr	r3, [r7, #16]
 800aaaa:	89ba      	ldrh	r2, [r7, #12]
 800aaac:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800aaae:	693b      	ldr	r3, [r7, #16]
 800aab0:	8afa      	ldrh	r2, [r7, #22]
 800aab2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800aab4:	69bb      	ldr	r3, [r7, #24]
 800aab6:	89fa      	ldrh	r2, [r7, #14]
 800aab8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800aaba:	693b      	ldr	r3, [r7, #16]
 800aabc:	881b      	ldrh	r3, [r3, #0]
 800aabe:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800aac2:	d047      	beq.n	800ab54 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800aac4:	693b      	ldr	r3, [r7, #16]
 800aac6:	881b      	ldrh	r3, [r3, #0]
 800aac8:	4618      	mov	r0, r3
 800aaca:	f7ff fd6f 	bl	800a5ac <ptr_to_mem>
 800aace:	4602      	mov	r2, r0
 800aad0:	89fb      	ldrh	r3, [r7, #14]
 800aad2:	8053      	strh	r3, [r2, #2]
 800aad4:	e03e      	b.n	800ab54 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800aad6:	8bfb      	ldrh	r3, [r7, #30]
 800aad8:	f103 0214 	add.w	r2, r3, #20
 800aadc:	8abb      	ldrh	r3, [r7, #20]
 800aade:	429a      	cmp	r2, r3
 800aae0:	d838      	bhi.n	800ab54 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800aae2:	8afa      	ldrh	r2, [r7, #22]
 800aae4:	8bfb      	ldrh	r3, [r7, #30]
 800aae6:	4413      	add	r3, r2
 800aae8:	b29b      	uxth	r3, r3
 800aaea:	3308      	adds	r3, #8
 800aaec:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800aaee:	69bb      	ldr	r3, [r7, #24]
 800aaf0:	881b      	ldrh	r3, [r3, #0]
 800aaf2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800aaf6:	d106      	bne.n	800ab06 <mem_trim+0x192>
 800aaf8:	4b1c      	ldr	r3, [pc, #112]	; (800ab6c <mem_trim+0x1f8>)
 800aafa:	f240 3216 	movw	r2, #790	; 0x316
 800aafe:	4920      	ldr	r1, [pc, #128]	; (800ab80 <mem_trim+0x20c>)
 800ab00:	481c      	ldr	r0, [pc, #112]	; (800ab74 <mem_trim+0x200>)
 800ab02:	f009 fdb9 	bl	8014678 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800ab06:	89fb      	ldrh	r3, [r7, #14]
 800ab08:	4618      	mov	r0, r3
 800ab0a:	f7ff fd4f 	bl	800a5ac <ptr_to_mem>
 800ab0e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800ab10:	4b1c      	ldr	r3, [pc, #112]	; (800ab84 <mem_trim+0x210>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	693a      	ldr	r2, [r7, #16]
 800ab16:	429a      	cmp	r2, r3
 800ab18:	d202      	bcs.n	800ab20 <mem_trim+0x1ac>
      lfree = mem2;
 800ab1a:	4a1a      	ldr	r2, [pc, #104]	; (800ab84 <mem_trim+0x210>)
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800ab20:	693b      	ldr	r3, [r7, #16]
 800ab22:	2200      	movs	r2, #0
 800ab24:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800ab26:	69bb      	ldr	r3, [r7, #24]
 800ab28:	881a      	ldrh	r2, [r3, #0]
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800ab2e:	693b      	ldr	r3, [r7, #16]
 800ab30:	8afa      	ldrh	r2, [r7, #22]
 800ab32:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ab34:	69bb      	ldr	r3, [r7, #24]
 800ab36:	89fa      	ldrh	r2, [r7, #14]
 800ab38:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ab3a:	693b      	ldr	r3, [r7, #16]
 800ab3c:	881b      	ldrh	r3, [r3, #0]
 800ab3e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ab42:	d007      	beq.n	800ab54 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ab44:	693b      	ldr	r3, [r7, #16]
 800ab46:	881b      	ldrh	r3, [r3, #0]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7ff fd2f 	bl	800a5ac <ptr_to_mem>
 800ab4e:	4602      	mov	r2, r0
 800ab50:	89fb      	ldrh	r3, [r7, #14]
 800ab52:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ab54:	4809      	ldr	r0, [pc, #36]	; (800ab7c <mem_trim+0x208>)
 800ab56:	f009 fb6c 	bl	8014232 <sys_mutex_unlock>
  return rmem;
 800ab5a:	687b      	ldr	r3, [r7, #4]
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3720      	adds	r7, #32
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd80      	pop	{r7, pc}
 800ab64:	2000c100 	.word	0x2000c100
 800ab68:	2000c104 	.word	0x2000c104
 800ab6c:	08015650 	.word	0x08015650
 800ab70:	080157dc 	.word	0x080157dc
 800ab74:	08015698 	.word	0x08015698
 800ab78:	080157f4 	.word	0x080157f4
 800ab7c:	2000c108 	.word	0x2000c108
 800ab80:	08015814 	.word	0x08015814
 800ab84:	2000c10c 	.word	0x2000c10c

0800ab88 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ab88:	b580      	push	{r7, lr}
 800ab8a:	b088      	sub	sp, #32
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	4603      	mov	r3, r0
 800ab90:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ab92:	88fb      	ldrh	r3, [r7, #6]
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d101      	bne.n	800ab9c <mem_malloc+0x14>
    return NULL;
 800ab98:	2300      	movs	r3, #0
 800ab9a:	e0e2      	b.n	800ad62 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ab9c:	88fb      	ldrh	r3, [r7, #6]
 800ab9e:	3303      	adds	r3, #3
 800aba0:	b29b      	uxth	r3, r3
 800aba2:	f023 0303 	bic.w	r3, r3, #3
 800aba6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800aba8:	8bbb      	ldrh	r3, [r7, #28]
 800abaa:	2b0b      	cmp	r3, #11
 800abac:	d801      	bhi.n	800abb2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800abae:	230c      	movs	r3, #12
 800abb0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800abb2:	8bbb      	ldrh	r3, [r7, #28]
 800abb4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800abb8:	d803      	bhi.n	800abc2 <mem_malloc+0x3a>
 800abba:	8bba      	ldrh	r2, [r7, #28]
 800abbc:	88fb      	ldrh	r3, [r7, #6]
 800abbe:	429a      	cmp	r2, r3
 800abc0:	d201      	bcs.n	800abc6 <mem_malloc+0x3e>
    return NULL;
 800abc2:	2300      	movs	r3, #0
 800abc4:	e0cd      	b.n	800ad62 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800abc6:	4869      	ldr	r0, [pc, #420]	; (800ad6c <mem_malloc+0x1e4>)
 800abc8:	f009 fb24 	bl	8014214 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800abcc:	4b68      	ldr	r3, [pc, #416]	; (800ad70 <mem_malloc+0x1e8>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7ff fcfd 	bl	800a5d0 <mem_to_ptr>
 800abd6:	4603      	mov	r3, r0
 800abd8:	83fb      	strh	r3, [r7, #30]
 800abda:	e0b7      	b.n	800ad4c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800abdc:	8bfb      	ldrh	r3, [r7, #30]
 800abde:	4618      	mov	r0, r3
 800abe0:	f7ff fce4 	bl	800a5ac <ptr_to_mem>
 800abe4:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800abe6:	697b      	ldr	r3, [r7, #20]
 800abe8:	791b      	ldrb	r3, [r3, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	f040 80a7 	bne.w	800ad3e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	881b      	ldrh	r3, [r3, #0]
 800abf4:	461a      	mov	r2, r3
 800abf6:	8bfb      	ldrh	r3, [r7, #30]
 800abf8:	1ad3      	subs	r3, r2, r3
 800abfa:	f1a3 0208 	sub.w	r2, r3, #8
 800abfe:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ac00:	429a      	cmp	r2, r3
 800ac02:	f0c0 809c 	bcc.w	800ad3e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ac06:	697b      	ldr	r3, [r7, #20]
 800ac08:	881b      	ldrh	r3, [r3, #0]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	8bfb      	ldrh	r3, [r7, #30]
 800ac0e:	1ad3      	subs	r3, r2, r3
 800ac10:	f1a3 0208 	sub.w	r2, r3, #8
 800ac14:	8bbb      	ldrh	r3, [r7, #28]
 800ac16:	3314      	adds	r3, #20
 800ac18:	429a      	cmp	r2, r3
 800ac1a:	d333      	bcc.n	800ac84 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ac1c:	8bfa      	ldrh	r2, [r7, #30]
 800ac1e:	8bbb      	ldrh	r3, [r7, #28]
 800ac20:	4413      	add	r3, r2
 800ac22:	b29b      	uxth	r3, r3
 800ac24:	3308      	adds	r3, #8
 800ac26:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ac28:	8a7b      	ldrh	r3, [r7, #18]
 800ac2a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ac2e:	d106      	bne.n	800ac3e <mem_malloc+0xb6>
 800ac30:	4b50      	ldr	r3, [pc, #320]	; (800ad74 <mem_malloc+0x1ec>)
 800ac32:	f240 3287 	movw	r2, #903	; 0x387
 800ac36:	4950      	ldr	r1, [pc, #320]	; (800ad78 <mem_malloc+0x1f0>)
 800ac38:	4850      	ldr	r0, [pc, #320]	; (800ad7c <mem_malloc+0x1f4>)
 800ac3a:	f009 fd1d 	bl	8014678 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800ac3e:	8a7b      	ldrh	r3, [r7, #18]
 800ac40:	4618      	mov	r0, r3
 800ac42:	f7ff fcb3 	bl	800a5ac <ptr_to_mem>
 800ac46:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	881a      	ldrh	r2, [r3, #0]
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	8bfa      	ldrh	r2, [r7, #30]
 800ac5a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	8a7a      	ldrh	r2, [r7, #18]
 800ac60:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	2201      	movs	r2, #1
 800ac66:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	881b      	ldrh	r3, [r3, #0]
 800ac6c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800ac70:	d00b      	beq.n	800ac8a <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	881b      	ldrh	r3, [r3, #0]
 800ac76:	4618      	mov	r0, r3
 800ac78:	f7ff fc98 	bl	800a5ac <ptr_to_mem>
 800ac7c:	4602      	mov	r2, r0
 800ac7e:	8a7b      	ldrh	r3, [r7, #18]
 800ac80:	8053      	strh	r3, [r2, #2]
 800ac82:	e002      	b.n	800ac8a <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	2201      	movs	r2, #1
 800ac88:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ac8a:	4b39      	ldr	r3, [pc, #228]	; (800ad70 <mem_malloc+0x1e8>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	697a      	ldr	r2, [r7, #20]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d127      	bne.n	800ace4 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800ac94:	4b36      	ldr	r3, [pc, #216]	; (800ad70 <mem_malloc+0x1e8>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ac9a:	e005      	b.n	800aca8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ac9c:	69bb      	ldr	r3, [r7, #24]
 800ac9e:	881b      	ldrh	r3, [r3, #0]
 800aca0:	4618      	mov	r0, r3
 800aca2:	f7ff fc83 	bl	800a5ac <ptr_to_mem>
 800aca6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800aca8:	69bb      	ldr	r3, [r7, #24]
 800acaa:	791b      	ldrb	r3, [r3, #4]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d004      	beq.n	800acba <mem_malloc+0x132>
 800acb0:	4b33      	ldr	r3, [pc, #204]	; (800ad80 <mem_malloc+0x1f8>)
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	69ba      	ldr	r2, [r7, #24]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d1f0      	bne.n	800ac9c <mem_malloc+0x114>
          }
          lfree = cur;
 800acba:	4a2d      	ldr	r2, [pc, #180]	; (800ad70 <mem_malloc+0x1e8>)
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800acc0:	4b2b      	ldr	r3, [pc, #172]	; (800ad70 <mem_malloc+0x1e8>)
 800acc2:	681a      	ldr	r2, [r3, #0]
 800acc4:	4b2e      	ldr	r3, [pc, #184]	; (800ad80 <mem_malloc+0x1f8>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	429a      	cmp	r2, r3
 800acca:	d00b      	beq.n	800ace4 <mem_malloc+0x15c>
 800accc:	4b28      	ldr	r3, [pc, #160]	; (800ad70 <mem_malloc+0x1e8>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	791b      	ldrb	r3, [r3, #4]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d006      	beq.n	800ace4 <mem_malloc+0x15c>
 800acd6:	4b27      	ldr	r3, [pc, #156]	; (800ad74 <mem_malloc+0x1ec>)
 800acd8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800acdc:	4929      	ldr	r1, [pc, #164]	; (800ad84 <mem_malloc+0x1fc>)
 800acde:	4827      	ldr	r0, [pc, #156]	; (800ad7c <mem_malloc+0x1f4>)
 800ace0:	f009 fcca 	bl	8014678 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ace4:	4821      	ldr	r0, [pc, #132]	; (800ad6c <mem_malloc+0x1e4>)
 800ace6:	f009 faa4 	bl	8014232 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800acea:	8bba      	ldrh	r2, [r7, #28]
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	4413      	add	r3, r2
 800acf0:	3308      	adds	r3, #8
 800acf2:	4a23      	ldr	r2, [pc, #140]	; (800ad80 <mem_malloc+0x1f8>)
 800acf4:	6812      	ldr	r2, [r2, #0]
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d906      	bls.n	800ad08 <mem_malloc+0x180>
 800acfa:	4b1e      	ldr	r3, [pc, #120]	; (800ad74 <mem_malloc+0x1ec>)
 800acfc:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ad00:	4921      	ldr	r1, [pc, #132]	; (800ad88 <mem_malloc+0x200>)
 800ad02:	481e      	ldr	r0, [pc, #120]	; (800ad7c <mem_malloc+0x1f4>)
 800ad04:	f009 fcb8 	bl	8014678 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	f003 0303 	and.w	r3, r3, #3
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d006      	beq.n	800ad20 <mem_malloc+0x198>
 800ad12:	4b18      	ldr	r3, [pc, #96]	; (800ad74 <mem_malloc+0x1ec>)
 800ad14:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ad18:	491c      	ldr	r1, [pc, #112]	; (800ad8c <mem_malloc+0x204>)
 800ad1a:	4818      	ldr	r0, [pc, #96]	; (800ad7c <mem_malloc+0x1f4>)
 800ad1c:	f009 fcac 	bl	8014678 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	f003 0303 	and.w	r3, r3, #3
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d006      	beq.n	800ad38 <mem_malloc+0x1b0>
 800ad2a:	4b12      	ldr	r3, [pc, #72]	; (800ad74 <mem_malloc+0x1ec>)
 800ad2c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ad30:	4917      	ldr	r1, [pc, #92]	; (800ad90 <mem_malloc+0x208>)
 800ad32:	4812      	ldr	r0, [pc, #72]	; (800ad7c <mem_malloc+0x1f4>)
 800ad34:	f009 fca0 	bl	8014678 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ad38:	697b      	ldr	r3, [r7, #20]
 800ad3a:	3308      	adds	r3, #8
 800ad3c:	e011      	b.n	800ad62 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ad3e:	8bfb      	ldrh	r3, [r7, #30]
 800ad40:	4618      	mov	r0, r3
 800ad42:	f7ff fc33 	bl	800a5ac <ptr_to_mem>
 800ad46:	4603      	mov	r3, r0
 800ad48:	881b      	ldrh	r3, [r3, #0]
 800ad4a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ad4c:	8bfa      	ldrh	r2, [r7, #30]
 800ad4e:	8bbb      	ldrh	r3, [r7, #28]
 800ad50:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800ad54:	429a      	cmp	r2, r3
 800ad56:	f4ff af41 	bcc.w	800abdc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ad5a:	4804      	ldr	r0, [pc, #16]	; (800ad6c <mem_malloc+0x1e4>)
 800ad5c:	f009 fa69 	bl	8014232 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3720      	adds	r7, #32
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}
 800ad6a:	bf00      	nop
 800ad6c:	2000c108 	.word	0x2000c108
 800ad70:	2000c10c 	.word	0x2000c10c
 800ad74:	08015650 	.word	0x08015650
 800ad78:	08015814 	.word	0x08015814
 800ad7c:	08015698 	.word	0x08015698
 800ad80:	2000c104 	.word	0x2000c104
 800ad84:	08015828 	.word	0x08015828
 800ad88:	08015844 	.word	0x08015844
 800ad8c:	08015874 	.word	0x08015874
 800ad90:	080158a4 	.word	0x080158a4

0800ad94 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800ad94:	b480      	push	{r7}
 800ad96:	b085      	sub	sp, #20
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	689b      	ldr	r3, [r3, #8]
 800ada0:	2200      	movs	r2, #0
 800ada2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	685b      	ldr	r3, [r3, #4]
 800ada8:	3303      	adds	r3, #3
 800adaa:	f023 0303 	bic.w	r3, r3, #3
 800adae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800adb0:	2300      	movs	r3, #0
 800adb2:	60fb      	str	r3, [r7, #12]
 800adb4:	e011      	b.n	800adda <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	689b      	ldr	r3, [r3, #8]
 800adba:	681a      	ldr	r2, [r3, #0]
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	689b      	ldr	r3, [r3, #8]
 800adc4:	68ba      	ldr	r2, [r7, #8]
 800adc6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	881b      	ldrh	r3, [r3, #0]
 800adcc:	461a      	mov	r2, r3
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	4413      	add	r3, r2
 800add2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	3301      	adds	r3, #1
 800add8:	60fb      	str	r3, [r7, #12]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	885b      	ldrh	r3, [r3, #2]
 800adde:	461a      	mov	r2, r3
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	4293      	cmp	r3, r2
 800ade4:	dbe7      	blt.n	800adb6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ade6:	bf00      	nop
 800ade8:	bf00      	nop
 800adea:	3714      	adds	r7, #20
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800adfa:	2300      	movs	r3, #0
 800adfc:	80fb      	strh	r3, [r7, #6]
 800adfe:	e009      	b.n	800ae14 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ae00:	88fb      	ldrh	r3, [r7, #6]
 800ae02:	4a08      	ldr	r2, [pc, #32]	; (800ae24 <memp_init+0x30>)
 800ae04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f7ff ffc3 	bl	800ad94 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ae0e:	88fb      	ldrh	r3, [r7, #6]
 800ae10:	3301      	adds	r3, #1
 800ae12:	80fb      	strh	r3, [r7, #6]
 800ae14:	88fb      	ldrh	r3, [r7, #6]
 800ae16:	2b0c      	cmp	r3, #12
 800ae18:	d9f2      	bls.n	800ae00 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ae1a:	bf00      	nop
 800ae1c:	bf00      	nop
 800ae1e:	3708      	adds	r7, #8
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	080180dc 	.word	0x080180dc

0800ae28 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b084      	sub	sp, #16
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ae30:	f009 fa2c 	bl	801428c <sys_arch_protect>
 800ae34:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	689b      	ldr	r3, [r3, #8]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ae3e:	68bb      	ldr	r3, [r7, #8]
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d015      	beq.n	800ae70 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	689b      	ldr	r3, [r3, #8]
 800ae48:	68ba      	ldr	r2, [r7, #8]
 800ae4a:	6812      	ldr	r2, [r2, #0]
 800ae4c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	f003 0303 	and.w	r3, r3, #3
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d006      	beq.n	800ae66 <do_memp_malloc_pool+0x3e>
 800ae58:	4b09      	ldr	r3, [pc, #36]	; (800ae80 <do_memp_malloc_pool+0x58>)
 800ae5a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ae5e:	4909      	ldr	r1, [pc, #36]	; (800ae84 <do_memp_malloc_pool+0x5c>)
 800ae60:	4809      	ldr	r0, [pc, #36]	; (800ae88 <do_memp_malloc_pool+0x60>)
 800ae62:	f009 fc09 	bl	8014678 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ae66:	68f8      	ldr	r0, [r7, #12]
 800ae68:	f009 fa1e 	bl	80142a8 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	e003      	b.n	800ae78 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ae70:	68f8      	ldr	r0, [r7, #12]
 800ae72:	f009 fa19 	bl	80142a8 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ae76:	2300      	movs	r3, #0
}
 800ae78:	4618      	mov	r0, r3
 800ae7a:	3710      	adds	r7, #16
 800ae7c:	46bd      	mov	sp, r7
 800ae7e:	bd80      	pop	{r7, pc}
 800ae80:	080158c8 	.word	0x080158c8
 800ae84:	080158f8 	.word	0x080158f8
 800ae88:	0801591c 	.word	0x0801591c

0800ae8c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b082      	sub	sp, #8
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d106      	bne.n	800aea8 <memp_malloc_pool+0x1c>
 800ae9a:	4b0a      	ldr	r3, [pc, #40]	; (800aec4 <memp_malloc_pool+0x38>)
 800ae9c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800aea0:	4909      	ldr	r1, [pc, #36]	; (800aec8 <memp_malloc_pool+0x3c>)
 800aea2:	480a      	ldr	r0, [pc, #40]	; (800aecc <memp_malloc_pool+0x40>)
 800aea4:	f009 fbe8 	bl	8014678 <iprintf>
  if (desc == NULL) {
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d101      	bne.n	800aeb2 <memp_malloc_pool+0x26>
    return NULL;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	e003      	b.n	800aeba <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800aeb2:	6878      	ldr	r0, [r7, #4]
 800aeb4:	f7ff ffb8 	bl	800ae28 <do_memp_malloc_pool>
 800aeb8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3708      	adds	r7, #8
 800aebe:	46bd      	mov	sp, r7
 800aec0:	bd80      	pop	{r7, pc}
 800aec2:	bf00      	nop
 800aec4:	080158c8 	.word	0x080158c8
 800aec8:	08015944 	.word	0x08015944
 800aecc:	0801591c 	.word	0x0801591c

0800aed0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b084      	sub	sp, #16
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	4603      	mov	r3, r0
 800aed8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800aeda:	79fb      	ldrb	r3, [r7, #7]
 800aedc:	2b0c      	cmp	r3, #12
 800aede:	d908      	bls.n	800aef2 <memp_malloc+0x22>
 800aee0:	4b0a      	ldr	r3, [pc, #40]	; (800af0c <memp_malloc+0x3c>)
 800aee2:	f240 1257 	movw	r2, #343	; 0x157
 800aee6:	490a      	ldr	r1, [pc, #40]	; (800af10 <memp_malloc+0x40>)
 800aee8:	480a      	ldr	r0, [pc, #40]	; (800af14 <memp_malloc+0x44>)
 800aeea:	f009 fbc5 	bl	8014678 <iprintf>
 800aeee:	2300      	movs	r3, #0
 800aef0:	e008      	b.n	800af04 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800aef2:	79fb      	ldrb	r3, [r7, #7]
 800aef4:	4a08      	ldr	r2, [pc, #32]	; (800af18 <memp_malloc+0x48>)
 800aef6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aefa:	4618      	mov	r0, r3
 800aefc:	f7ff ff94 	bl	800ae28 <do_memp_malloc_pool>
 800af00:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800af02:	68fb      	ldr	r3, [r7, #12]
}
 800af04:	4618      	mov	r0, r3
 800af06:	3710      	adds	r7, #16
 800af08:	46bd      	mov	sp, r7
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	080158c8 	.word	0x080158c8
 800af10:	08015958 	.word	0x08015958
 800af14:	0801591c 	.word	0x0801591c
 800af18:	080180dc 	.word	0x080180dc

0800af1c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	b084      	sub	sp, #16
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
 800af24:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	f003 0303 	and.w	r3, r3, #3
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d006      	beq.n	800af3e <do_memp_free_pool+0x22>
 800af30:	4b0d      	ldr	r3, [pc, #52]	; (800af68 <do_memp_free_pool+0x4c>)
 800af32:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800af36:	490d      	ldr	r1, [pc, #52]	; (800af6c <do_memp_free_pool+0x50>)
 800af38:	480d      	ldr	r0, [pc, #52]	; (800af70 <do_memp_free_pool+0x54>)
 800af3a:	f009 fb9d 	bl	8014678 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800af3e:	683b      	ldr	r3, [r7, #0]
 800af40:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800af42:	f009 f9a3 	bl	801428c <sys_arch_protect>
 800af46:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	689b      	ldr	r3, [r3, #8]
 800af4c:	681a      	ldr	r2, [r3, #0]
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	689b      	ldr	r3, [r3, #8]
 800af56:	68fa      	ldr	r2, [r7, #12]
 800af58:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800af5a:	68b8      	ldr	r0, [r7, #8]
 800af5c:	f009 f9a4 	bl	80142a8 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800af60:	bf00      	nop
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}
 800af68:	080158c8 	.word	0x080158c8
 800af6c:	08015978 	.word	0x08015978
 800af70:	0801591c 	.word	0x0801591c

0800af74 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800af74:	b580      	push	{r7, lr}
 800af76:	b082      	sub	sp, #8
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
 800af7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d106      	bne.n	800af92 <memp_free_pool+0x1e>
 800af84:	4b0a      	ldr	r3, [pc, #40]	; (800afb0 <memp_free_pool+0x3c>)
 800af86:	f240 1295 	movw	r2, #405	; 0x195
 800af8a:	490a      	ldr	r1, [pc, #40]	; (800afb4 <memp_free_pool+0x40>)
 800af8c:	480a      	ldr	r0, [pc, #40]	; (800afb8 <memp_free_pool+0x44>)
 800af8e:	f009 fb73 	bl	8014678 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2b00      	cmp	r3, #0
 800af96:	d007      	beq.n	800afa8 <memp_free_pool+0x34>
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d004      	beq.n	800afa8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800af9e:	6839      	ldr	r1, [r7, #0]
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f7ff ffbb 	bl	800af1c <do_memp_free_pool>
 800afa6:	e000      	b.n	800afaa <memp_free_pool+0x36>
    return;
 800afa8:	bf00      	nop
}
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	080158c8 	.word	0x080158c8
 800afb4:	08015944 	.word	0x08015944
 800afb8:	0801591c 	.word	0x0801591c

0800afbc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b082      	sub	sp, #8
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	4603      	mov	r3, r0
 800afc4:	6039      	str	r1, [r7, #0]
 800afc6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800afc8:	79fb      	ldrb	r3, [r7, #7]
 800afca:	2b0c      	cmp	r3, #12
 800afcc:	d907      	bls.n	800afde <memp_free+0x22>
 800afce:	4b0c      	ldr	r3, [pc, #48]	; (800b000 <memp_free+0x44>)
 800afd0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800afd4:	490b      	ldr	r1, [pc, #44]	; (800b004 <memp_free+0x48>)
 800afd6:	480c      	ldr	r0, [pc, #48]	; (800b008 <memp_free+0x4c>)
 800afd8:	f009 fb4e 	bl	8014678 <iprintf>
 800afdc:	e00c      	b.n	800aff8 <memp_free+0x3c>

  if (mem == NULL) {
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d008      	beq.n	800aff6 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800afe4:	79fb      	ldrb	r3, [r7, #7]
 800afe6:	4a09      	ldr	r2, [pc, #36]	; (800b00c <memp_free+0x50>)
 800afe8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afec:	6839      	ldr	r1, [r7, #0]
 800afee:	4618      	mov	r0, r3
 800aff0:	f7ff ff94 	bl	800af1c <do_memp_free_pool>
 800aff4:	e000      	b.n	800aff8 <memp_free+0x3c>
    return;
 800aff6:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800aff8:	3708      	adds	r7, #8
 800affa:	46bd      	mov	sp, r7
 800affc:	bd80      	pop	{r7, pc}
 800affe:	bf00      	nop
 800b000:	080158c8 	.word	0x080158c8
 800b004:	08015998 	.word	0x08015998
 800b008:	0801591c 	.word	0x0801591c
 800b00c:	080180dc 	.word	0x080180dc

0800b010 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b010:	b480      	push	{r7}
 800b012:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b014:	bf00      	nop
 800b016:	46bd      	mov	sp, r7
 800b018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b01c:	4770      	bx	lr
	...

0800b020 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
 800b02c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2b00      	cmp	r3, #0
 800b032:	d108      	bne.n	800b046 <netif_add+0x26>
 800b034:	4b57      	ldr	r3, [pc, #348]	; (800b194 <netif_add+0x174>)
 800b036:	f240 1227 	movw	r2, #295	; 0x127
 800b03a:	4957      	ldr	r1, [pc, #348]	; (800b198 <netif_add+0x178>)
 800b03c:	4857      	ldr	r0, [pc, #348]	; (800b19c <netif_add+0x17c>)
 800b03e:	f009 fb1b 	bl	8014678 <iprintf>
 800b042:	2300      	movs	r3, #0
 800b044:	e0a2      	b.n	800b18c <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d108      	bne.n	800b05e <netif_add+0x3e>
 800b04c:	4b51      	ldr	r3, [pc, #324]	; (800b194 <netif_add+0x174>)
 800b04e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b052:	4953      	ldr	r1, [pc, #332]	; (800b1a0 <netif_add+0x180>)
 800b054:	4851      	ldr	r0, [pc, #324]	; (800b19c <netif_add+0x17c>)
 800b056:	f009 fb0f 	bl	8014678 <iprintf>
 800b05a:	2300      	movs	r3, #0
 800b05c:	e096      	b.n	800b18c <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b064:	4b4f      	ldr	r3, [pc, #316]	; (800b1a4 <netif_add+0x184>)
 800b066:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d101      	bne.n	800b072 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b06e:	4b4d      	ldr	r3, [pc, #308]	; (800b1a4 <netif_add+0x184>)
 800b070:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d101      	bne.n	800b07c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b078:	4b4a      	ldr	r3, [pc, #296]	; (800b1a4 <netif_add+0x184>)
 800b07a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	2200      	movs	r2, #0
 800b080:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	2200      	movs	r2, #0
 800b086:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	2200      	movs	r2, #0
 800b08c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	4a45      	ldr	r2, [pc, #276]	; (800b1a8 <netif_add+0x188>)
 800b092:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	2200      	movs	r2, #0
 800b098:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b09a:	68fb      	ldr	r3, [r7, #12]
 800b09c:	2200      	movs	r2, #0
 800b09e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	6a3a      	ldr	r2, [r7, #32]
 800b0ac:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b0ae:	4b3f      	ldr	r3, [pc, #252]	; (800b1ac <netif_add+0x18c>)
 800b0b0:	781a      	ldrb	r2, [r3, #0]
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b0bc:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b0be:	683b      	ldr	r3, [r7, #0]
 800b0c0:	687a      	ldr	r2, [r7, #4]
 800b0c2:	68b9      	ldr	r1, [r7, #8]
 800b0c4:	68f8      	ldr	r0, [r7, #12]
 800b0c6:	f000 f913 	bl	800b2f0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0cc:	68f8      	ldr	r0, [r7, #12]
 800b0ce:	4798      	blx	r3
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d001      	beq.n	800b0da <netif_add+0xba>
    return NULL;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	e058      	b.n	800b18c <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b0e0:	2bff      	cmp	r3, #255	; 0xff
 800b0e2:	d103      	bne.n	800b0ec <netif_add+0xcc>
        netif->num = 0;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b0f0:	4b2f      	ldr	r3, [pc, #188]	; (800b1b0 <netif_add+0x190>)
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	617b      	str	r3, [r7, #20]
 800b0f6:	e02b      	b.n	800b150 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b0f8:	697a      	ldr	r2, [r7, #20]
 800b0fa:	68fb      	ldr	r3, [r7, #12]
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	d106      	bne.n	800b10e <netif_add+0xee>
 800b100:	4b24      	ldr	r3, [pc, #144]	; (800b194 <netif_add+0x174>)
 800b102:	f240 128b 	movw	r2, #395	; 0x18b
 800b106:	492b      	ldr	r1, [pc, #172]	; (800b1b4 <netif_add+0x194>)
 800b108:	4824      	ldr	r0, [pc, #144]	; (800b19c <netif_add+0x17c>)
 800b10a:	f009 fab5 	bl	8014678 <iprintf>
        num_netifs++;
 800b10e:	693b      	ldr	r3, [r7, #16]
 800b110:	3301      	adds	r3, #1
 800b112:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	2bff      	cmp	r3, #255	; 0xff
 800b118:	dd06      	ble.n	800b128 <netif_add+0x108>
 800b11a:	4b1e      	ldr	r3, [pc, #120]	; (800b194 <netif_add+0x174>)
 800b11c:	f240 128d 	movw	r2, #397	; 0x18d
 800b120:	4925      	ldr	r1, [pc, #148]	; (800b1b8 <netif_add+0x198>)
 800b122:	481e      	ldr	r0, [pc, #120]	; (800b19c <netif_add+0x17c>)
 800b124:	f009 faa8 	bl	8014678 <iprintf>
        if (netif2->num == netif->num) {
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b134:	429a      	cmp	r2, r3
 800b136:	d108      	bne.n	800b14a <netif_add+0x12a>
          netif->num++;
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b13e:	3301      	adds	r3, #1
 800b140:	b2da      	uxtb	r2, r3
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b148:	e005      	b.n	800b156 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b14a:	697b      	ldr	r3, [r7, #20]
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	617b      	str	r3, [r7, #20]
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	2b00      	cmp	r3, #0
 800b154:	d1d0      	bne.n	800b0f8 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b156:	697b      	ldr	r3, [r7, #20]
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d1be      	bne.n	800b0da <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b162:	2bfe      	cmp	r3, #254	; 0xfe
 800b164:	d103      	bne.n	800b16e <netif_add+0x14e>
    netif_num = 0;
 800b166:	4b11      	ldr	r3, [pc, #68]	; (800b1ac <netif_add+0x18c>)
 800b168:	2200      	movs	r2, #0
 800b16a:	701a      	strb	r2, [r3, #0]
 800b16c:	e006      	b.n	800b17c <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b174:	3301      	adds	r3, #1
 800b176:	b2da      	uxtb	r2, r3
 800b178:	4b0c      	ldr	r3, [pc, #48]	; (800b1ac <netif_add+0x18c>)
 800b17a:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b17c:	4b0c      	ldr	r3, [pc, #48]	; (800b1b0 <netif_add+0x190>)
 800b17e:	681a      	ldr	r2, [r3, #0]
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b184:	4a0a      	ldr	r2, [pc, #40]	; (800b1b0 <netif_add+0x190>)
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b18a:	68fb      	ldr	r3, [r7, #12]
}
 800b18c:	4618      	mov	r0, r3
 800b18e:	3718      	adds	r7, #24
 800b190:	46bd      	mov	sp, r7
 800b192:	bd80      	pop	{r7, pc}
 800b194:	080159b4 	.word	0x080159b4
 800b198:	08015a48 	.word	0x08015a48
 800b19c:	08015a04 	.word	0x08015a04
 800b1a0:	08015a64 	.word	0x08015a64
 800b1a4:	08018150 	.word	0x08018150
 800b1a8:	0800b5cb 	.word	0x0800b5cb
 800b1ac:	2000f1e4 	.word	0x2000f1e4
 800b1b0:	2000f1dc 	.word	0x2000f1dc
 800b1b4:	08015a88 	.word	0x08015a88
 800b1b8:	08015a9c 	.word	0x08015a9c

0800b1bc <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b1bc:	b580      	push	{r7, lr}
 800b1be:	b082      	sub	sp, #8
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
 800b1c4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b1c6:	6839      	ldr	r1, [r7, #0]
 800b1c8:	6878      	ldr	r0, [r7, #4]
 800b1ca:	f002 fb7d 	bl	800d8c8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b1ce:	6839      	ldr	r1, [r7, #0]
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f006 fc91 	bl	8011af8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b1d6:	bf00      	nop
 800b1d8:	3708      	adds	r7, #8
 800b1da:	46bd      	mov	sp, r7
 800b1dc:	bd80      	pop	{r7, pc}
	...

0800b1e0 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	60b9      	str	r1, [r7, #8]
 800b1ea:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b1ec:	68bb      	ldr	r3, [r7, #8]
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d106      	bne.n	800b200 <netif_do_set_ipaddr+0x20>
 800b1f2:	4b1d      	ldr	r3, [pc, #116]	; (800b268 <netif_do_set_ipaddr+0x88>)
 800b1f4:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b1f8:	491c      	ldr	r1, [pc, #112]	; (800b26c <netif_do_set_ipaddr+0x8c>)
 800b1fa:	481d      	ldr	r0, [pc, #116]	; (800b270 <netif_do_set_ipaddr+0x90>)
 800b1fc:	f009 fa3c 	bl	8014678 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2b00      	cmp	r3, #0
 800b204:	d106      	bne.n	800b214 <netif_do_set_ipaddr+0x34>
 800b206:	4b18      	ldr	r3, [pc, #96]	; (800b268 <netif_do_set_ipaddr+0x88>)
 800b208:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b20c:	4917      	ldr	r1, [pc, #92]	; (800b26c <netif_do_set_ipaddr+0x8c>)
 800b20e:	4818      	ldr	r0, [pc, #96]	; (800b270 <netif_do_set_ipaddr+0x90>)
 800b210:	f009 fa32 	bl	8014678 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	3304      	adds	r3, #4
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	429a      	cmp	r2, r3
 800b220:	d01c      	beq.n	800b25c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b222:	68bb      	ldr	r3, [r7, #8]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	3304      	adds	r3, #4
 800b22c:	681a      	ldr	r2, [r3, #0]
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b232:	f107 0314 	add.w	r3, r7, #20
 800b236:	4619      	mov	r1, r3
 800b238:	6878      	ldr	r0, [r7, #4]
 800b23a:	f7ff ffbf 	bl	800b1bc <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b23e:	68bb      	ldr	r3, [r7, #8]
 800b240:	2b00      	cmp	r3, #0
 800b242:	d002      	beq.n	800b24a <netif_do_set_ipaddr+0x6a>
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	e000      	b.n	800b24c <netif_do_set_ipaddr+0x6c>
 800b24a:	2300      	movs	r3, #0
 800b24c:	68fa      	ldr	r2, [r7, #12]
 800b24e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b250:	2101      	movs	r1, #1
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	f000 f8d2 	bl	800b3fc <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b258:	2301      	movs	r3, #1
 800b25a:	e000      	b.n	800b25e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b25c:	2300      	movs	r3, #0
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3718      	adds	r7, #24
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}
 800b266:	bf00      	nop
 800b268:	080159b4 	.word	0x080159b4
 800b26c:	08015acc 	.word	0x08015acc
 800b270:	08015a04 	.word	0x08015a04

0800b274 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b274:	b480      	push	{r7}
 800b276:	b085      	sub	sp, #20
 800b278:	af00      	add	r7, sp, #0
 800b27a:	60f8      	str	r0, [r7, #12]
 800b27c:	60b9      	str	r1, [r7, #8]
 800b27e:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b280:	68bb      	ldr	r3, [r7, #8]
 800b282:	681a      	ldr	r2, [r3, #0]
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	3308      	adds	r3, #8
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	429a      	cmp	r2, r3
 800b28c:	d00a      	beq.n	800b2a4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d002      	beq.n	800b29a <netif_do_set_netmask+0x26>
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	e000      	b.n	800b29c <netif_do_set_netmask+0x28>
 800b29a:	2300      	movs	r3, #0
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e000      	b.n	800b2a6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b2a4:	2300      	movs	r3, #0
}
 800b2a6:	4618      	mov	r0, r3
 800b2a8:	3714      	adds	r7, #20
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr

0800b2b2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b2b2:	b480      	push	{r7}
 800b2b4:	b085      	sub	sp, #20
 800b2b6:	af00      	add	r7, sp, #0
 800b2b8:	60f8      	str	r0, [r7, #12]
 800b2ba:	60b9      	str	r1, [r7, #8]
 800b2bc:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	681a      	ldr	r2, [r3, #0]
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	330c      	adds	r3, #12
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d00a      	beq.n	800b2e2 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b2cc:	68bb      	ldr	r3, [r7, #8]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d002      	beq.n	800b2d8 <netif_do_set_gw+0x26>
 800b2d2:	68bb      	ldr	r3, [r7, #8]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	e000      	b.n	800b2da <netif_do_set_gw+0x28>
 800b2d8:	2300      	movs	r3, #0
 800b2da:	68fa      	ldr	r2, [r7, #12]
 800b2dc:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e000      	b.n	800b2e4 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b2e2:	2300      	movs	r3, #0
}
 800b2e4:	4618      	mov	r0, r3
 800b2e6:	3714      	adds	r7, #20
 800b2e8:	46bd      	mov	sp, r7
 800b2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ee:	4770      	bx	lr

0800b2f0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b088      	sub	sp, #32
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	60f8      	str	r0, [r7, #12]
 800b2f8:	60b9      	str	r1, [r7, #8]
 800b2fa:	607a      	str	r2, [r7, #4]
 800b2fc:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b2fe:	2300      	movs	r3, #0
 800b300:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b302:	2300      	movs	r3, #0
 800b304:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b306:	68bb      	ldr	r3, [r7, #8]
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d101      	bne.n	800b310 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b30c:	4b1c      	ldr	r3, [pc, #112]	; (800b380 <netif_set_addr+0x90>)
 800b30e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d101      	bne.n	800b31a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b316:	4b1a      	ldr	r3, [pc, #104]	; (800b380 <netif_set_addr+0x90>)
 800b318:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d101      	bne.n	800b324 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b320:	4b17      	ldr	r3, [pc, #92]	; (800b380 <netif_set_addr+0x90>)
 800b322:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b324:	68bb      	ldr	r3, [r7, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d003      	beq.n	800b332 <netif_set_addr+0x42>
 800b32a:	68bb      	ldr	r3, [r7, #8]
 800b32c:	681b      	ldr	r3, [r3, #0]
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d101      	bne.n	800b336 <netif_set_addr+0x46>
 800b332:	2301      	movs	r3, #1
 800b334:	e000      	b.n	800b338 <netif_set_addr+0x48>
 800b336:	2300      	movs	r3, #0
 800b338:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d006      	beq.n	800b34e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b340:	f107 0310 	add.w	r3, r7, #16
 800b344:	461a      	mov	r2, r3
 800b346:	68b9      	ldr	r1, [r7, #8]
 800b348:	68f8      	ldr	r0, [r7, #12]
 800b34a:	f7ff ff49 	bl	800b1e0 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b34e:	69fa      	ldr	r2, [r7, #28]
 800b350:	6879      	ldr	r1, [r7, #4]
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f7ff ff8e 	bl	800b274 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b358:	69ba      	ldr	r2, [r7, #24]
 800b35a:	6839      	ldr	r1, [r7, #0]
 800b35c:	68f8      	ldr	r0, [r7, #12]
 800b35e:	f7ff ffa8 	bl	800b2b2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d106      	bne.n	800b376 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b368:	f107 0310 	add.w	r3, r7, #16
 800b36c:	461a      	mov	r2, r3
 800b36e:	68b9      	ldr	r1, [r7, #8]
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f7ff ff35 	bl	800b1e0 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b376:	bf00      	nop
 800b378:	3720      	adds	r7, #32
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	08018150 	.word	0x08018150

0800b384 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b384:	b480      	push	{r7}
 800b386:	b083      	sub	sp, #12
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b38c:	4a04      	ldr	r2, [pc, #16]	; (800b3a0 <netif_set_default+0x1c>)
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b392:	bf00      	nop
 800b394:	370c      	adds	r7, #12
 800b396:	46bd      	mov	sp, r7
 800b398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39c:	4770      	bx	lr
 800b39e:	bf00      	nop
 800b3a0:	2000f1e0 	.word	0x2000f1e0

0800b3a4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2b00      	cmp	r3, #0
 800b3b0:	d107      	bne.n	800b3c2 <netif_set_up+0x1e>
 800b3b2:	4b0f      	ldr	r3, [pc, #60]	; (800b3f0 <netif_set_up+0x4c>)
 800b3b4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b3b8:	490e      	ldr	r1, [pc, #56]	; (800b3f4 <netif_set_up+0x50>)
 800b3ba:	480f      	ldr	r0, [pc, #60]	; (800b3f8 <netif_set_up+0x54>)
 800b3bc:	f009 f95c 	bl	8014678 <iprintf>
 800b3c0:	e013      	b.n	800b3ea <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b3c8:	f003 0301 	and.w	r3, r3, #1
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	d10c      	bne.n	800b3ea <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b3d6:	f043 0301 	orr.w	r3, r3, #1
 800b3da:	b2da      	uxtb	r2, r3
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b3e2:	2103      	movs	r1, #3
 800b3e4:	6878      	ldr	r0, [r7, #4]
 800b3e6:	f000 f809 	bl	800b3fc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b3ea:	3708      	adds	r7, #8
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	080159b4 	.word	0x080159b4
 800b3f4:	08015b3c 	.word	0x08015b3c
 800b3f8:	08015a04 	.word	0x08015a04

0800b3fc <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b082      	sub	sp, #8
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
 800b404:	460b      	mov	r3, r1
 800b406:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d106      	bne.n	800b41c <netif_issue_reports+0x20>
 800b40e:	4b18      	ldr	r3, [pc, #96]	; (800b470 <netif_issue_reports+0x74>)
 800b410:	f240 326d 	movw	r2, #877	; 0x36d
 800b414:	4917      	ldr	r1, [pc, #92]	; (800b474 <netif_issue_reports+0x78>)
 800b416:	4818      	ldr	r0, [pc, #96]	; (800b478 <netif_issue_reports+0x7c>)
 800b418:	f009 f92e 	bl	8014678 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b422:	f003 0304 	and.w	r3, r3, #4
 800b426:	2b00      	cmp	r3, #0
 800b428:	d01e      	beq.n	800b468 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b430:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b434:	2b00      	cmp	r3, #0
 800b436:	d017      	beq.n	800b468 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b438:	78fb      	ldrb	r3, [r7, #3]
 800b43a:	f003 0301 	and.w	r3, r3, #1
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d013      	beq.n	800b46a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	3304      	adds	r3, #4
 800b446:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d00e      	beq.n	800b46a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b452:	f003 0308 	and.w	r3, r3, #8
 800b456:	2b00      	cmp	r3, #0
 800b458:	d007      	beq.n	800b46a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	3304      	adds	r3, #4
 800b45e:	4619      	mov	r1, r3
 800b460:	6878      	ldr	r0, [r7, #4]
 800b462:	f007 fab3 	bl	80129cc <etharp_request>
 800b466:	e000      	b.n	800b46a <netif_issue_reports+0x6e>
    return;
 800b468:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	080159b4 	.word	0x080159b4
 800b474:	08015b58 	.word	0x08015b58
 800b478:	08015a04 	.word	0x08015a04

0800b47c <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b082      	sub	sp, #8
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2b00      	cmp	r3, #0
 800b488:	d107      	bne.n	800b49a <netif_set_down+0x1e>
 800b48a:	4b12      	ldr	r3, [pc, #72]	; (800b4d4 <netif_set_down+0x58>)
 800b48c:	f240 329b 	movw	r2, #923	; 0x39b
 800b490:	4911      	ldr	r1, [pc, #68]	; (800b4d8 <netif_set_down+0x5c>)
 800b492:	4812      	ldr	r0, [pc, #72]	; (800b4dc <netif_set_down+0x60>)
 800b494:	f009 f8f0 	bl	8014678 <iprintf>
 800b498:	e019      	b.n	800b4ce <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b4a0:	f003 0301 	and.w	r3, r3, #1
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d012      	beq.n	800b4ce <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b4ae:	f023 0301 	bic.w	r3, r3, #1
 800b4b2:	b2da      	uxtb	r2, r3
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b4c0:	f003 0308 	and.w	r3, r3, #8
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d002      	beq.n	800b4ce <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f006 fe3d 	bl	8012148 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b4ce:	3708      	adds	r7, #8
 800b4d0:	46bd      	mov	sp, r7
 800b4d2:	bd80      	pop	{r7, pc}
 800b4d4:	080159b4 	.word	0x080159b4
 800b4d8:	08015b7c 	.word	0x08015b7c
 800b4dc:	08015a04 	.word	0x08015a04

0800b4e0 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b4e0:	b580      	push	{r7, lr}
 800b4e2:	b082      	sub	sp, #8
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d107      	bne.n	800b4fe <netif_set_link_up+0x1e>
 800b4ee:	4b13      	ldr	r3, [pc, #76]	; (800b53c <netif_set_link_up+0x5c>)
 800b4f0:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b4f4:	4912      	ldr	r1, [pc, #72]	; (800b540 <netif_set_link_up+0x60>)
 800b4f6:	4813      	ldr	r0, [pc, #76]	; (800b544 <netif_set_link_up+0x64>)
 800b4f8:	f009 f8be 	bl	8014678 <iprintf>
 800b4fc:	e01b      	b.n	800b536 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b504:	f003 0304 	and.w	r3, r3, #4
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d114      	bne.n	800b536 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b512:	f043 0304 	orr.w	r3, r3, #4
 800b516:	b2da      	uxtb	r2, r3
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b51e:	2103      	movs	r1, #3
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f7ff ff6b 	bl	800b3fc <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	69db      	ldr	r3, [r3, #28]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d003      	beq.n	800b536 <netif_set_link_up+0x56>
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	69db      	ldr	r3, [r3, #28]
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b536:	3708      	adds	r7, #8
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	080159b4 	.word	0x080159b4
 800b540:	08015b9c 	.word	0x08015b9c
 800b544:	08015a04 	.word	0x08015a04

0800b548 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	2b00      	cmp	r3, #0
 800b554:	d107      	bne.n	800b566 <netif_set_link_down+0x1e>
 800b556:	4b11      	ldr	r3, [pc, #68]	; (800b59c <netif_set_link_down+0x54>)
 800b558:	f240 4206 	movw	r2, #1030	; 0x406
 800b55c:	4910      	ldr	r1, [pc, #64]	; (800b5a0 <netif_set_link_down+0x58>)
 800b55e:	4811      	ldr	r0, [pc, #68]	; (800b5a4 <netif_set_link_down+0x5c>)
 800b560:	f009 f88a 	bl	8014678 <iprintf>
 800b564:	e017      	b.n	800b596 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b56c:	f003 0304 	and.w	r3, r3, #4
 800b570:	2b00      	cmp	r3, #0
 800b572:	d010      	beq.n	800b596 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b57a:	f023 0304 	bic.w	r3, r3, #4
 800b57e:	b2da      	uxtb	r2, r3
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	69db      	ldr	r3, [r3, #28]
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d003      	beq.n	800b596 <netif_set_link_down+0x4e>
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	69db      	ldr	r3, [r3, #28]
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b596:	3708      	adds	r7, #8
 800b598:	46bd      	mov	sp, r7
 800b59a:	bd80      	pop	{r7, pc}
 800b59c:	080159b4 	.word	0x080159b4
 800b5a0:	08015bc0 	.word	0x08015bc0
 800b5a4:	08015a04 	.word	0x08015a04

0800b5a8 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b5a8:	b480      	push	{r7}
 800b5aa:	b083      	sub	sp, #12
 800b5ac:	af00      	add	r7, sp, #0
 800b5ae:	6078      	str	r0, [r7, #4]
 800b5b0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d002      	beq.n	800b5be <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	61da      	str	r2, [r3, #28]
  }
}
 800b5be:	bf00      	nop
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr

0800b5ca <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b5ca:	b480      	push	{r7}
 800b5cc:	b085      	sub	sp, #20
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	60f8      	str	r0, [r7, #12]
 800b5d2:	60b9      	str	r1, [r7, #8]
 800b5d4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b5d6:	f06f 030b 	mvn.w	r3, #11
}
 800b5da:	4618      	mov	r0, r3
 800b5dc:	3714      	adds	r7, #20
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e4:	4770      	bx	lr
	...

0800b5e8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b5e8:	b480      	push	{r7}
 800b5ea:	b085      	sub	sp, #20
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b5f2:	79fb      	ldrb	r3, [r7, #7]
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d013      	beq.n	800b620 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b5f8:	4b0d      	ldr	r3, [pc, #52]	; (800b630 <netif_get_by_index+0x48>)
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	60fb      	str	r3, [r7, #12]
 800b5fe:	e00c      	b.n	800b61a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b606:	3301      	adds	r3, #1
 800b608:	b2db      	uxtb	r3, r3
 800b60a:	79fa      	ldrb	r2, [r7, #7]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d101      	bne.n	800b614 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	e006      	b.n	800b622 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	60fb      	str	r3, [r7, #12]
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d1ef      	bne.n	800b600 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b620:	2300      	movs	r3, #0
}
 800b622:	4618      	mov	r0, r3
 800b624:	3714      	adds	r7, #20
 800b626:	46bd      	mov	sp, r7
 800b628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62c:	4770      	bx	lr
 800b62e:	bf00      	nop
 800b630:	2000f1dc 	.word	0x2000f1dc

0800b634 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b082      	sub	sp, #8
 800b638:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b63a:	f008 fe27 	bl	801428c <sys_arch_protect>
 800b63e:	6038      	str	r0, [r7, #0]
 800b640:	4b0d      	ldr	r3, [pc, #52]	; (800b678 <pbuf_free_ooseq+0x44>)
 800b642:	2200      	movs	r2, #0
 800b644:	701a      	strb	r2, [r3, #0]
 800b646:	6838      	ldr	r0, [r7, #0]
 800b648:	f008 fe2e 	bl	80142a8 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b64c:	4b0b      	ldr	r3, [pc, #44]	; (800b67c <pbuf_free_ooseq+0x48>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	607b      	str	r3, [r7, #4]
 800b652:	e00a      	b.n	800b66a <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d003      	beq.n	800b664 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f002 f971 	bl	800d944 <tcp_free_ooseq>
      return;
 800b662:	e005      	b.n	800b670 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	68db      	ldr	r3, [r3, #12]
 800b668:	607b      	str	r3, [r7, #4]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2b00      	cmp	r3, #0
 800b66e:	d1f1      	bne.n	800b654 <pbuf_free_ooseq+0x20>
    }
  }
}
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}
 800b676:	bf00      	nop
 800b678:	2000f1e5 	.word	0x2000f1e5
 800b67c:	2000f1f4 	.word	0x2000f1f4

0800b680 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b680:	b580      	push	{r7, lr}
 800b682:	b082      	sub	sp, #8
 800b684:	af00      	add	r7, sp, #0
 800b686:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b688:	f7ff ffd4 	bl	800b634 <pbuf_free_ooseq>
}
 800b68c:	bf00      	nop
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b694:	b580      	push	{r7, lr}
 800b696:	b082      	sub	sp, #8
 800b698:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b69a:	f008 fdf7 	bl	801428c <sys_arch_protect>
 800b69e:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b6a0:	4b0f      	ldr	r3, [pc, #60]	; (800b6e0 <pbuf_pool_is_empty+0x4c>)
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b6a6:	4b0e      	ldr	r3, [pc, #56]	; (800b6e0 <pbuf_pool_is_empty+0x4c>)
 800b6a8:	2201      	movs	r2, #1
 800b6aa:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	f008 fdfb 	bl	80142a8 <sys_arch_unprotect>

  if (!queued) {
 800b6b2:	78fb      	ldrb	r3, [r7, #3]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d10f      	bne.n	800b6d8 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b6b8:	2100      	movs	r1, #0
 800b6ba:	480a      	ldr	r0, [pc, #40]	; (800b6e4 <pbuf_pool_is_empty+0x50>)
 800b6bc:	f7fe fea6 	bl	800a40c <tcpip_try_callback>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d008      	beq.n	800b6d8 <pbuf_pool_is_empty+0x44>
 800b6c6:	f008 fde1 	bl	801428c <sys_arch_protect>
 800b6ca:	6078      	str	r0, [r7, #4]
 800b6cc:	4b04      	ldr	r3, [pc, #16]	; (800b6e0 <pbuf_pool_is_empty+0x4c>)
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	701a      	strb	r2, [r3, #0]
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f008 fde8 	bl	80142a8 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b6d8:	bf00      	nop
 800b6da:	3708      	adds	r7, #8
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}
 800b6e0:	2000f1e5 	.word	0x2000f1e5
 800b6e4:	0800b681 	.word	0x0800b681

0800b6e8 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b6e8:	b480      	push	{r7}
 800b6ea:	b085      	sub	sp, #20
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	60f8      	str	r0, [r7, #12]
 800b6f0:	60b9      	str	r1, [r7, #8]
 800b6f2:	4611      	mov	r1, r2
 800b6f4:	461a      	mov	r2, r3
 800b6f6:	460b      	mov	r3, r1
 800b6f8:	80fb      	strh	r3, [r7, #6]
 800b6fa:	4613      	mov	r3, r2
 800b6fc:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	2200      	movs	r2, #0
 800b702:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	68ba      	ldr	r2, [r7, #8]
 800b708:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	88fa      	ldrh	r2, [r7, #6]
 800b70e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	88ba      	ldrh	r2, [r7, #4]
 800b714:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b716:	8b3b      	ldrh	r3, [r7, #24]
 800b718:	b2da      	uxtb	r2, r3
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	7f3a      	ldrb	r2, [r7, #28]
 800b722:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	2201      	movs	r2, #1
 800b728:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2200      	movs	r2, #0
 800b72e:	73da      	strb	r2, [r3, #15]
}
 800b730:	bf00      	nop
 800b732:	3714      	adds	r7, #20
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b08c      	sub	sp, #48	; 0x30
 800b740:	af02      	add	r7, sp, #8
 800b742:	4603      	mov	r3, r0
 800b744:	71fb      	strb	r3, [r7, #7]
 800b746:	460b      	mov	r3, r1
 800b748:	80bb      	strh	r3, [r7, #4]
 800b74a:	4613      	mov	r3, r2
 800b74c:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b74e:	79fb      	ldrb	r3, [r7, #7]
 800b750:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b752:	887b      	ldrh	r3, [r7, #2]
 800b754:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b758:	d07f      	beq.n	800b85a <pbuf_alloc+0x11e>
 800b75a:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b75e:	f300 80c8 	bgt.w	800b8f2 <pbuf_alloc+0x1b6>
 800b762:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b766:	d010      	beq.n	800b78a <pbuf_alloc+0x4e>
 800b768:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b76c:	f300 80c1 	bgt.w	800b8f2 <pbuf_alloc+0x1b6>
 800b770:	2b01      	cmp	r3, #1
 800b772:	d002      	beq.n	800b77a <pbuf_alloc+0x3e>
 800b774:	2b41      	cmp	r3, #65	; 0x41
 800b776:	f040 80bc 	bne.w	800b8f2 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b77a:	887a      	ldrh	r2, [r7, #2]
 800b77c:	88bb      	ldrh	r3, [r7, #4]
 800b77e:	4619      	mov	r1, r3
 800b780:	2000      	movs	r0, #0
 800b782:	f000 f8d1 	bl	800b928 <pbuf_alloc_reference>
 800b786:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b788:	e0bd      	b.n	800b906 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b78a:	2300      	movs	r3, #0
 800b78c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b78e:	2300      	movs	r3, #0
 800b790:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b792:	88bb      	ldrh	r3, [r7, #4]
 800b794:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b796:	200c      	movs	r0, #12
 800b798:	f7ff fb9a 	bl	800aed0 <memp_malloc>
 800b79c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d109      	bne.n	800b7b8 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b7a4:	f7ff ff76 	bl	800b694 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b7a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d002      	beq.n	800b7b4 <pbuf_alloc+0x78>
            pbuf_free(p);
 800b7ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b7b0:	f000 faa8 	bl	800bd04 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b7b4:	2300      	movs	r3, #0
 800b7b6:	e0a7      	b.n	800b908 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b7b8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7ba:	3303      	adds	r3, #3
 800b7bc:	b29b      	uxth	r3, r3
 800b7be:	f023 0303 	bic.w	r3, r3, #3
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	8b7a      	ldrh	r2, [r7, #26]
 800b7cc:	4293      	cmp	r3, r2
 800b7ce:	bf28      	it	cs
 800b7d0:	4613      	movcs	r3, r2
 800b7d2:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b7d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b7d6:	3310      	adds	r3, #16
 800b7d8:	693a      	ldr	r2, [r7, #16]
 800b7da:	4413      	add	r3, r2
 800b7dc:	3303      	adds	r3, #3
 800b7de:	f023 0303 	bic.w	r3, r3, #3
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	89f9      	ldrh	r1, [r7, #14]
 800b7e6:	8b7a      	ldrh	r2, [r7, #26]
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	9301      	str	r3, [sp, #4]
 800b7ec:	887b      	ldrh	r3, [r7, #2]
 800b7ee:	9300      	str	r3, [sp, #0]
 800b7f0:	460b      	mov	r3, r1
 800b7f2:	4601      	mov	r1, r0
 800b7f4:	6938      	ldr	r0, [r7, #16]
 800b7f6:	f7ff ff77 	bl	800b6e8 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	f003 0303 	and.w	r3, r3, #3
 800b802:	2b00      	cmp	r3, #0
 800b804:	d006      	beq.n	800b814 <pbuf_alloc+0xd8>
 800b806:	4b42      	ldr	r3, [pc, #264]	; (800b910 <pbuf_alloc+0x1d4>)
 800b808:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b80c:	4941      	ldr	r1, [pc, #260]	; (800b914 <pbuf_alloc+0x1d8>)
 800b80e:	4842      	ldr	r0, [pc, #264]	; (800b918 <pbuf_alloc+0x1dc>)
 800b810:	f008 ff32 	bl	8014678 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b814:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b816:	3303      	adds	r3, #3
 800b818:	f023 0303 	bic.w	r3, r3, #3
 800b81c:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b820:	d106      	bne.n	800b830 <pbuf_alloc+0xf4>
 800b822:	4b3b      	ldr	r3, [pc, #236]	; (800b910 <pbuf_alloc+0x1d4>)
 800b824:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b828:	493c      	ldr	r1, [pc, #240]	; (800b91c <pbuf_alloc+0x1e0>)
 800b82a:	483b      	ldr	r0, [pc, #236]	; (800b918 <pbuf_alloc+0x1dc>)
 800b82c:	f008 ff24 	bl	8014678 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b832:	2b00      	cmp	r3, #0
 800b834:	d102      	bne.n	800b83c <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b836:	693b      	ldr	r3, [r7, #16]
 800b838:	627b      	str	r3, [r7, #36]	; 0x24
 800b83a:	e002      	b.n	800b842 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	693a      	ldr	r2, [r7, #16]
 800b840:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b842:	693b      	ldr	r3, [r7, #16]
 800b844:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b846:	8b7a      	ldrh	r2, [r7, #26]
 800b848:	89fb      	ldrh	r3, [r7, #14]
 800b84a:	1ad3      	subs	r3, r2, r3
 800b84c:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b84e:	2300      	movs	r3, #0
 800b850:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b852:	8b7b      	ldrh	r3, [r7, #26]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d19e      	bne.n	800b796 <pbuf_alloc+0x5a>
      break;
 800b858:	e055      	b.n	800b906 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b85a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b85c:	3303      	adds	r3, #3
 800b85e:	b29b      	uxth	r3, r3
 800b860:	f023 0303 	bic.w	r3, r3, #3
 800b864:	b29a      	uxth	r2, r3
 800b866:	88bb      	ldrh	r3, [r7, #4]
 800b868:	3303      	adds	r3, #3
 800b86a:	b29b      	uxth	r3, r3
 800b86c:	f023 0303 	bic.w	r3, r3, #3
 800b870:	b29b      	uxth	r3, r3
 800b872:	4413      	add	r3, r2
 800b874:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b876:	8b3b      	ldrh	r3, [r7, #24]
 800b878:	3310      	adds	r3, #16
 800b87a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b87c:	8b3a      	ldrh	r2, [r7, #24]
 800b87e:	88bb      	ldrh	r3, [r7, #4]
 800b880:	3303      	adds	r3, #3
 800b882:	f023 0303 	bic.w	r3, r3, #3
 800b886:	429a      	cmp	r2, r3
 800b888:	d306      	bcc.n	800b898 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b88a:	8afa      	ldrh	r2, [r7, #22]
 800b88c:	88bb      	ldrh	r3, [r7, #4]
 800b88e:	3303      	adds	r3, #3
 800b890:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b894:	429a      	cmp	r2, r3
 800b896:	d201      	bcs.n	800b89c <pbuf_alloc+0x160>
        return NULL;
 800b898:	2300      	movs	r3, #0
 800b89a:	e035      	b.n	800b908 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b89c:	8afb      	ldrh	r3, [r7, #22]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f7ff f972 	bl	800ab88 <mem_malloc>
 800b8a4:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d101      	bne.n	800b8b0 <pbuf_alloc+0x174>
        return NULL;
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	e02b      	b.n	800b908 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b8b0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b8b2:	3310      	adds	r3, #16
 800b8b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8b6:	4413      	add	r3, r2
 800b8b8:	3303      	adds	r3, #3
 800b8ba:	f023 0303 	bic.w	r3, r3, #3
 800b8be:	4618      	mov	r0, r3
 800b8c0:	88b9      	ldrh	r1, [r7, #4]
 800b8c2:	88ba      	ldrh	r2, [r7, #4]
 800b8c4:	2300      	movs	r3, #0
 800b8c6:	9301      	str	r3, [sp, #4]
 800b8c8:	887b      	ldrh	r3, [r7, #2]
 800b8ca:	9300      	str	r3, [sp, #0]
 800b8cc:	460b      	mov	r3, r1
 800b8ce:	4601      	mov	r1, r0
 800b8d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b8d2:	f7ff ff09 	bl	800b6e8 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8d8:	685b      	ldr	r3, [r3, #4]
 800b8da:	f003 0303 	and.w	r3, r3, #3
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d010      	beq.n	800b904 <pbuf_alloc+0x1c8>
 800b8e2:	4b0b      	ldr	r3, [pc, #44]	; (800b910 <pbuf_alloc+0x1d4>)
 800b8e4:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b8e8:	490d      	ldr	r1, [pc, #52]	; (800b920 <pbuf_alloc+0x1e4>)
 800b8ea:	480b      	ldr	r0, [pc, #44]	; (800b918 <pbuf_alloc+0x1dc>)
 800b8ec:	f008 fec4 	bl	8014678 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b8f0:	e008      	b.n	800b904 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b8f2:	4b07      	ldr	r3, [pc, #28]	; (800b910 <pbuf_alloc+0x1d4>)
 800b8f4:	f240 1227 	movw	r2, #295	; 0x127
 800b8f8:	490a      	ldr	r1, [pc, #40]	; (800b924 <pbuf_alloc+0x1e8>)
 800b8fa:	4807      	ldr	r0, [pc, #28]	; (800b918 <pbuf_alloc+0x1dc>)
 800b8fc:	f008 febc 	bl	8014678 <iprintf>
      return NULL;
 800b900:	2300      	movs	r3, #0
 800b902:	e001      	b.n	800b908 <pbuf_alloc+0x1cc>
      break;
 800b904:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b908:	4618      	mov	r0, r3
 800b90a:	3728      	adds	r7, #40	; 0x28
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd80      	pop	{r7, pc}
 800b910:	08015be4 	.word	0x08015be4
 800b914:	08015c14 	.word	0x08015c14
 800b918:	08015c44 	.word	0x08015c44
 800b91c:	08015c6c 	.word	0x08015c6c
 800b920:	08015ca0 	.word	0x08015ca0
 800b924:	08015ccc 	.word	0x08015ccc

0800b928 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b086      	sub	sp, #24
 800b92c:	af02      	add	r7, sp, #8
 800b92e:	6078      	str	r0, [r7, #4]
 800b930:	460b      	mov	r3, r1
 800b932:	807b      	strh	r3, [r7, #2]
 800b934:	4613      	mov	r3, r2
 800b936:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b938:	883b      	ldrh	r3, [r7, #0]
 800b93a:	2b41      	cmp	r3, #65	; 0x41
 800b93c:	d009      	beq.n	800b952 <pbuf_alloc_reference+0x2a>
 800b93e:	883b      	ldrh	r3, [r7, #0]
 800b940:	2b01      	cmp	r3, #1
 800b942:	d006      	beq.n	800b952 <pbuf_alloc_reference+0x2a>
 800b944:	4b0f      	ldr	r3, [pc, #60]	; (800b984 <pbuf_alloc_reference+0x5c>)
 800b946:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b94a:	490f      	ldr	r1, [pc, #60]	; (800b988 <pbuf_alloc_reference+0x60>)
 800b94c:	480f      	ldr	r0, [pc, #60]	; (800b98c <pbuf_alloc_reference+0x64>)
 800b94e:	f008 fe93 	bl	8014678 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b952:	200b      	movs	r0, #11
 800b954:	f7ff fabc 	bl	800aed0 <memp_malloc>
 800b958:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d101      	bne.n	800b964 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b960:	2300      	movs	r3, #0
 800b962:	e00b      	b.n	800b97c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b964:	8879      	ldrh	r1, [r7, #2]
 800b966:	887a      	ldrh	r2, [r7, #2]
 800b968:	2300      	movs	r3, #0
 800b96a:	9301      	str	r3, [sp, #4]
 800b96c:	883b      	ldrh	r3, [r7, #0]
 800b96e:	9300      	str	r3, [sp, #0]
 800b970:	460b      	mov	r3, r1
 800b972:	6879      	ldr	r1, [r7, #4]
 800b974:	68f8      	ldr	r0, [r7, #12]
 800b976:	f7ff feb7 	bl	800b6e8 <pbuf_init_alloced_pbuf>
  return p;
 800b97a:	68fb      	ldr	r3, [r7, #12]
}
 800b97c:	4618      	mov	r0, r3
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	08015be4 	.word	0x08015be4
 800b988:	08015ce8 	.word	0x08015ce8
 800b98c:	08015c44 	.word	0x08015c44

0800b990 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b088      	sub	sp, #32
 800b994:	af02      	add	r7, sp, #8
 800b996:	607b      	str	r3, [r7, #4]
 800b998:	4603      	mov	r3, r0
 800b99a:	73fb      	strb	r3, [r7, #15]
 800b99c:	460b      	mov	r3, r1
 800b99e:	81bb      	strh	r3, [r7, #12]
 800b9a0:	4613      	mov	r3, r2
 800b9a2:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b9a4:	7bfb      	ldrb	r3, [r7, #15]
 800b9a6:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b9a8:	8a7b      	ldrh	r3, [r7, #18]
 800b9aa:	3303      	adds	r3, #3
 800b9ac:	f023 0203 	bic.w	r2, r3, #3
 800b9b0:	89bb      	ldrh	r3, [r7, #12]
 800b9b2:	441a      	add	r2, r3
 800b9b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b9b6:	429a      	cmp	r2, r3
 800b9b8:	d901      	bls.n	800b9be <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b9ba:	2300      	movs	r3, #0
 800b9bc:	e018      	b.n	800b9f0 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b9be:	6a3b      	ldr	r3, [r7, #32]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d007      	beq.n	800b9d4 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b9c4:	8a7b      	ldrh	r3, [r7, #18]
 800b9c6:	3303      	adds	r3, #3
 800b9c8:	f023 0303 	bic.w	r3, r3, #3
 800b9cc:	6a3a      	ldr	r2, [r7, #32]
 800b9ce:	4413      	add	r3, r2
 800b9d0:	617b      	str	r3, [r7, #20]
 800b9d2:	e001      	b.n	800b9d8 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b9d8:	6878      	ldr	r0, [r7, #4]
 800b9da:	89b9      	ldrh	r1, [r7, #12]
 800b9dc:	89ba      	ldrh	r2, [r7, #12]
 800b9de:	2302      	movs	r3, #2
 800b9e0:	9301      	str	r3, [sp, #4]
 800b9e2:	897b      	ldrh	r3, [r7, #10]
 800b9e4:	9300      	str	r3, [sp, #0]
 800b9e6:	460b      	mov	r3, r1
 800b9e8:	6979      	ldr	r1, [r7, #20]
 800b9ea:	f7ff fe7d 	bl	800b6e8 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b9ee:	687b      	ldr	r3, [r7, #4]
}
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	3718      	adds	r7, #24
 800b9f4:	46bd      	mov	sp, r7
 800b9f6:	bd80      	pop	{r7, pc}

0800b9f8 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	460b      	mov	r3, r1
 800ba02:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d106      	bne.n	800ba18 <pbuf_realloc+0x20>
 800ba0a:	4b3a      	ldr	r3, [pc, #232]	; (800baf4 <pbuf_realloc+0xfc>)
 800ba0c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800ba10:	4939      	ldr	r1, [pc, #228]	; (800baf8 <pbuf_realloc+0x100>)
 800ba12:	483a      	ldr	r0, [pc, #232]	; (800bafc <pbuf_realloc+0x104>)
 800ba14:	f008 fe30 	bl	8014678 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	891b      	ldrh	r3, [r3, #8]
 800ba1c:	887a      	ldrh	r2, [r7, #2]
 800ba1e:	429a      	cmp	r2, r3
 800ba20:	d263      	bcs.n	800baea <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	891a      	ldrh	r2, [r3, #8]
 800ba26:	887b      	ldrh	r3, [r7, #2]
 800ba28:	1ad3      	subs	r3, r2, r3
 800ba2a:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800ba2c:	887b      	ldrh	r3, [r7, #2]
 800ba2e:	817b      	strh	r3, [r7, #10]
  q = p;
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800ba34:	e018      	b.n	800ba68 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	895b      	ldrh	r3, [r3, #10]
 800ba3a:	897a      	ldrh	r2, [r7, #10]
 800ba3c:	1ad3      	subs	r3, r2, r3
 800ba3e:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	891a      	ldrh	r2, [r3, #8]
 800ba44:	893b      	ldrh	r3, [r7, #8]
 800ba46:	1ad3      	subs	r3, r2, r3
 800ba48:	b29a      	uxth	r2, r3
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d106      	bne.n	800ba68 <pbuf_realloc+0x70>
 800ba5a:	4b26      	ldr	r3, [pc, #152]	; (800baf4 <pbuf_realloc+0xfc>)
 800ba5c:	f240 12af 	movw	r2, #431	; 0x1af
 800ba60:	4927      	ldr	r1, [pc, #156]	; (800bb00 <pbuf_realloc+0x108>)
 800ba62:	4826      	ldr	r0, [pc, #152]	; (800bafc <pbuf_realloc+0x104>)
 800ba64:	f008 fe08 	bl	8014678 <iprintf>
  while (rem_len > q->len) {
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	895b      	ldrh	r3, [r3, #10]
 800ba6c:	897a      	ldrh	r2, [r7, #10]
 800ba6e:	429a      	cmp	r2, r3
 800ba70:	d8e1      	bhi.n	800ba36 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800ba72:	68fb      	ldr	r3, [r7, #12]
 800ba74:	7b1b      	ldrb	r3, [r3, #12]
 800ba76:	f003 030f 	and.w	r3, r3, #15
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d121      	bne.n	800bac2 <pbuf_realloc+0xca>
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	895b      	ldrh	r3, [r3, #10]
 800ba82:	897a      	ldrh	r2, [r7, #10]
 800ba84:	429a      	cmp	r2, r3
 800ba86:	d01c      	beq.n	800bac2 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	7b5b      	ldrb	r3, [r3, #13]
 800ba8c:	f003 0302 	and.w	r3, r3, #2
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d116      	bne.n	800bac2 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	685a      	ldr	r2, [r3, #4]
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	1ad3      	subs	r3, r2, r3
 800ba9c:	b29a      	uxth	r2, r3
 800ba9e:	897b      	ldrh	r3, [r7, #10]
 800baa0:	4413      	add	r3, r2
 800baa2:	b29b      	uxth	r3, r3
 800baa4:	4619      	mov	r1, r3
 800baa6:	68f8      	ldr	r0, [r7, #12]
 800baa8:	f7fe ff64 	bl	800a974 <mem_trim>
 800baac:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d106      	bne.n	800bac2 <pbuf_realloc+0xca>
 800bab4:	4b0f      	ldr	r3, [pc, #60]	; (800baf4 <pbuf_realloc+0xfc>)
 800bab6:	f240 12bd 	movw	r2, #445	; 0x1bd
 800baba:	4912      	ldr	r1, [pc, #72]	; (800bb04 <pbuf_realloc+0x10c>)
 800babc:	480f      	ldr	r0, [pc, #60]	; (800bafc <pbuf_realloc+0x104>)
 800babe:	f008 fddb 	bl	8014678 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	897a      	ldrh	r2, [r7, #10]
 800bac6:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	895a      	ldrh	r2, [r3, #10]
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d004      	beq.n	800bae2 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	4618      	mov	r0, r3
 800bade:	f000 f911 	bl	800bd04 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	2200      	movs	r2, #0
 800bae6:	601a      	str	r2, [r3, #0]
 800bae8:	e000      	b.n	800baec <pbuf_realloc+0xf4>
    return;
 800baea:	bf00      	nop

}
 800baec:	3710      	adds	r7, #16
 800baee:	46bd      	mov	sp, r7
 800baf0:	bd80      	pop	{r7, pc}
 800baf2:	bf00      	nop
 800baf4:	08015be4 	.word	0x08015be4
 800baf8:	08015cfc 	.word	0x08015cfc
 800bafc:	08015c44 	.word	0x08015c44
 800bb00:	08015d14 	.word	0x08015d14
 800bb04:	08015d2c 	.word	0x08015d2c

0800bb08 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800bb08:	b580      	push	{r7, lr}
 800bb0a:	b086      	sub	sp, #24
 800bb0c:	af00      	add	r7, sp, #0
 800bb0e:	60f8      	str	r0, [r7, #12]
 800bb10:	60b9      	str	r1, [r7, #8]
 800bb12:	4613      	mov	r3, r2
 800bb14:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d106      	bne.n	800bb2a <pbuf_add_header_impl+0x22>
 800bb1c:	4b2b      	ldr	r3, [pc, #172]	; (800bbcc <pbuf_add_header_impl+0xc4>)
 800bb1e:	f240 12df 	movw	r2, #479	; 0x1df
 800bb22:	492b      	ldr	r1, [pc, #172]	; (800bbd0 <pbuf_add_header_impl+0xc8>)
 800bb24:	482b      	ldr	r0, [pc, #172]	; (800bbd4 <pbuf_add_header_impl+0xcc>)
 800bb26:	f008 fda7 	bl	8014678 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d003      	beq.n	800bb38 <pbuf_add_header_impl+0x30>
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb36:	d301      	bcc.n	800bb3c <pbuf_add_header_impl+0x34>
    return 1;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	e043      	b.n	800bbc4 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800bb3c:	68bb      	ldr	r3, [r7, #8]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d101      	bne.n	800bb46 <pbuf_add_header_impl+0x3e>
    return 0;
 800bb42:	2300      	movs	r3, #0
 800bb44:	e03e      	b.n	800bbc4 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800bb46:	68bb      	ldr	r3, [r7, #8]
 800bb48:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	891a      	ldrh	r2, [r3, #8]
 800bb4e:	8a7b      	ldrh	r3, [r7, #18]
 800bb50:	4413      	add	r3, r2
 800bb52:	b29b      	uxth	r3, r3
 800bb54:	8a7a      	ldrh	r2, [r7, #18]
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d901      	bls.n	800bb5e <pbuf_add_header_impl+0x56>
    return 1;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e032      	b.n	800bbc4 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800bb5e:	68fb      	ldr	r3, [r7, #12]
 800bb60:	7b1b      	ldrb	r3, [r3, #12]
 800bb62:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800bb64:	8a3b      	ldrh	r3, [r7, #16]
 800bb66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d00c      	beq.n	800bb88 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	685a      	ldr	r2, [r3, #4]
 800bb72:	68bb      	ldr	r3, [r7, #8]
 800bb74:	425b      	negs	r3, r3
 800bb76:	4413      	add	r3, r2
 800bb78:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	3310      	adds	r3, #16
 800bb7e:	697a      	ldr	r2, [r7, #20]
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d20d      	bcs.n	800bba0 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800bb84:	2301      	movs	r3, #1
 800bb86:	e01d      	b.n	800bbc4 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800bb88:	79fb      	ldrb	r3, [r7, #7]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d006      	beq.n	800bb9c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	685a      	ldr	r2, [r3, #4]
 800bb92:	68bb      	ldr	r3, [r7, #8]
 800bb94:	425b      	negs	r3, r3
 800bb96:	4413      	add	r3, r2
 800bb98:	617b      	str	r3, [r7, #20]
 800bb9a:	e001      	b.n	800bba0 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800bb9c:	2301      	movs	r3, #1
 800bb9e:	e011      	b.n	800bbc4 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	697a      	ldr	r2, [r7, #20]
 800bba4:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	895a      	ldrh	r2, [r3, #10]
 800bbaa:	8a7b      	ldrh	r3, [r7, #18]
 800bbac:	4413      	add	r3, r2
 800bbae:	b29a      	uxth	r2, r3
 800bbb0:	68fb      	ldr	r3, [r7, #12]
 800bbb2:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	891a      	ldrh	r2, [r3, #8]
 800bbb8:	8a7b      	ldrh	r3, [r7, #18]
 800bbba:	4413      	add	r3, r2
 800bbbc:	b29a      	uxth	r2, r3
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	811a      	strh	r2, [r3, #8]


  return 0;
 800bbc2:	2300      	movs	r3, #0
}
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	3718      	adds	r7, #24
 800bbc8:	46bd      	mov	sp, r7
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	08015be4 	.word	0x08015be4
 800bbd0:	08015d48 	.word	0x08015d48
 800bbd4:	08015c44 	.word	0x08015c44

0800bbd8 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800bbd8:	b580      	push	{r7, lr}
 800bbda:	b082      	sub	sp, #8
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
 800bbe0:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800bbe2:	2200      	movs	r2, #0
 800bbe4:	6839      	ldr	r1, [r7, #0]
 800bbe6:	6878      	ldr	r0, [r7, #4]
 800bbe8:	f7ff ff8e 	bl	800bb08 <pbuf_add_header_impl>
 800bbec:	4603      	mov	r3, r0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3708      	adds	r7, #8
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
	...

0800bbf8 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b084      	sub	sp, #16
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d106      	bne.n	800bc16 <pbuf_remove_header+0x1e>
 800bc08:	4b20      	ldr	r3, [pc, #128]	; (800bc8c <pbuf_remove_header+0x94>)
 800bc0a:	f240 224b 	movw	r2, #587	; 0x24b
 800bc0e:	4920      	ldr	r1, [pc, #128]	; (800bc90 <pbuf_remove_header+0x98>)
 800bc10:	4820      	ldr	r0, [pc, #128]	; (800bc94 <pbuf_remove_header+0x9c>)
 800bc12:	f008 fd31 	bl	8014678 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d003      	beq.n	800bc24 <pbuf_remove_header+0x2c>
 800bc1c:	683b      	ldr	r3, [r7, #0]
 800bc1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc22:	d301      	bcc.n	800bc28 <pbuf_remove_header+0x30>
    return 1;
 800bc24:	2301      	movs	r3, #1
 800bc26:	e02c      	b.n	800bc82 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800bc28:	683b      	ldr	r3, [r7, #0]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d101      	bne.n	800bc32 <pbuf_remove_header+0x3a>
    return 0;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	e027      	b.n	800bc82 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	895b      	ldrh	r3, [r3, #10]
 800bc3a:	89fa      	ldrh	r2, [r7, #14]
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d908      	bls.n	800bc52 <pbuf_remove_header+0x5a>
 800bc40:	4b12      	ldr	r3, [pc, #72]	; (800bc8c <pbuf_remove_header+0x94>)
 800bc42:	f240 2255 	movw	r2, #597	; 0x255
 800bc46:	4914      	ldr	r1, [pc, #80]	; (800bc98 <pbuf_remove_header+0xa0>)
 800bc48:	4812      	ldr	r0, [pc, #72]	; (800bc94 <pbuf_remove_header+0x9c>)
 800bc4a:	f008 fd15 	bl	8014678 <iprintf>
 800bc4e:	2301      	movs	r3, #1
 800bc50:	e017      	b.n	800bc82 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	685a      	ldr	r2, [r3, #4]
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	441a      	add	r2, r3
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	895a      	ldrh	r2, [r3, #10]
 800bc68:	89fb      	ldrh	r3, [r7, #14]
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	b29a      	uxth	r2, r3
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	891a      	ldrh	r2, [r3, #8]
 800bc76:	89fb      	ldrh	r3, [r7, #14]
 800bc78:	1ad3      	subs	r3, r2, r3
 800bc7a:	b29a      	uxth	r2, r3
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bc80:	2300      	movs	r3, #0
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	08015be4 	.word	0x08015be4
 800bc90:	08015d48 	.word	0x08015d48
 800bc94:	08015c44 	.word	0x08015c44
 800bc98:	08015d54 	.word	0x08015d54

0800bc9c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b082      	sub	sp, #8
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	460b      	mov	r3, r1
 800bca6:	807b      	strh	r3, [r7, #2]
 800bca8:	4613      	mov	r3, r2
 800bcaa:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bcac:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	da08      	bge.n	800bcc6 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800bcb4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bcb8:	425b      	negs	r3, r3
 800bcba:	4619      	mov	r1, r3
 800bcbc:	6878      	ldr	r0, [r7, #4]
 800bcbe:	f7ff ff9b 	bl	800bbf8 <pbuf_remove_header>
 800bcc2:	4603      	mov	r3, r0
 800bcc4:	e007      	b.n	800bcd6 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bcc6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bcca:	787a      	ldrb	r2, [r7, #1]
 800bccc:	4619      	mov	r1, r3
 800bcce:	6878      	ldr	r0, [r7, #4]
 800bcd0:	f7ff ff1a 	bl	800bb08 <pbuf_add_header_impl>
 800bcd4:	4603      	mov	r3, r0
  }
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	3708      	adds	r7, #8
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	bd80      	pop	{r7, pc}

0800bcde <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bcde:	b580      	push	{r7, lr}
 800bce0:	b082      	sub	sp, #8
 800bce2:	af00      	add	r7, sp, #0
 800bce4:	6078      	str	r0, [r7, #4]
 800bce6:	460b      	mov	r3, r1
 800bce8:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bcea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f7ff ffd2 	bl	800bc9c <pbuf_header_impl>
 800bcf8:	4603      	mov	r3, r0
}
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	3708      	adds	r7, #8
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	bd80      	pop	{r7, pc}
	...

0800bd04 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bd04:	b580      	push	{r7, lr}
 800bd06:	b088      	sub	sp, #32
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d10b      	bne.n	800bd2a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bd12:	687b      	ldr	r3, [r7, #4]
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d106      	bne.n	800bd26 <pbuf_free+0x22>
 800bd18:	4b3b      	ldr	r3, [pc, #236]	; (800be08 <pbuf_free+0x104>)
 800bd1a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800bd1e:	493b      	ldr	r1, [pc, #236]	; (800be0c <pbuf_free+0x108>)
 800bd20:	483b      	ldr	r0, [pc, #236]	; (800be10 <pbuf_free+0x10c>)
 800bd22:	f008 fca9 	bl	8014678 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bd26:	2300      	movs	r3, #0
 800bd28:	e069      	b.n	800bdfe <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bd2e:	e062      	b.n	800bdf6 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bd30:	f008 faac 	bl	801428c <sys_arch_protect>
 800bd34:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	7b9b      	ldrb	r3, [r3, #14]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d106      	bne.n	800bd4c <pbuf_free+0x48>
 800bd3e:	4b32      	ldr	r3, [pc, #200]	; (800be08 <pbuf_free+0x104>)
 800bd40:	f240 22f1 	movw	r2, #753	; 0x2f1
 800bd44:	4933      	ldr	r1, [pc, #204]	; (800be14 <pbuf_free+0x110>)
 800bd46:	4832      	ldr	r0, [pc, #200]	; (800be10 <pbuf_free+0x10c>)
 800bd48:	f008 fc96 	bl	8014678 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	7b9b      	ldrb	r3, [r3, #14]
 800bd50:	3b01      	subs	r3, #1
 800bd52:	b2da      	uxtb	r2, r3
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	739a      	strb	r2, [r3, #14]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	7b9b      	ldrb	r3, [r3, #14]
 800bd5c:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bd5e:	69b8      	ldr	r0, [r7, #24]
 800bd60:	f008 faa2 	bl	80142a8 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bd64:	7dfb      	ldrb	r3, [r7, #23]
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d143      	bne.n	800bdf2 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	7b1b      	ldrb	r3, [r3, #12]
 800bd74:	f003 030f 	and.w	r3, r3, #15
 800bd78:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	7b5b      	ldrb	r3, [r3, #13]
 800bd7e:	f003 0302 	and.w	r3, r3, #2
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d011      	beq.n	800bdaa <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bd8a:	68bb      	ldr	r3, [r7, #8]
 800bd8c:	691b      	ldr	r3, [r3, #16]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d106      	bne.n	800bda0 <pbuf_free+0x9c>
 800bd92:	4b1d      	ldr	r3, [pc, #116]	; (800be08 <pbuf_free+0x104>)
 800bd94:	f240 22ff 	movw	r2, #767	; 0x2ff
 800bd98:	491f      	ldr	r1, [pc, #124]	; (800be18 <pbuf_free+0x114>)
 800bd9a:	481d      	ldr	r0, [pc, #116]	; (800be10 <pbuf_free+0x10c>)
 800bd9c:	f008 fc6c 	bl	8014678 <iprintf>
        pc->custom_free_function(p);
 800bda0:	68bb      	ldr	r3, [r7, #8]
 800bda2:	691b      	ldr	r3, [r3, #16]
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	4798      	blx	r3
 800bda8:	e01d      	b.n	800bde6 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bdaa:	7bfb      	ldrb	r3, [r7, #15]
 800bdac:	2b02      	cmp	r3, #2
 800bdae:	d104      	bne.n	800bdba <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bdb0:	6879      	ldr	r1, [r7, #4]
 800bdb2:	200c      	movs	r0, #12
 800bdb4:	f7ff f902 	bl	800afbc <memp_free>
 800bdb8:	e015      	b.n	800bde6 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bdba:	7bfb      	ldrb	r3, [r7, #15]
 800bdbc:	2b01      	cmp	r3, #1
 800bdbe:	d104      	bne.n	800bdca <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bdc0:	6879      	ldr	r1, [r7, #4]
 800bdc2:	200b      	movs	r0, #11
 800bdc4:	f7ff f8fa 	bl	800afbc <memp_free>
 800bdc8:	e00d      	b.n	800bde6 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bdca:	7bfb      	ldrb	r3, [r7, #15]
 800bdcc:	2b00      	cmp	r3, #0
 800bdce:	d103      	bne.n	800bdd8 <pbuf_free+0xd4>
          mem_free(p);
 800bdd0:	6878      	ldr	r0, [r7, #4]
 800bdd2:	f7fe fd3f 	bl	800a854 <mem_free>
 800bdd6:	e006      	b.n	800bde6 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bdd8:	4b0b      	ldr	r3, [pc, #44]	; (800be08 <pbuf_free+0x104>)
 800bdda:	f240 320f 	movw	r2, #783	; 0x30f
 800bdde:	490f      	ldr	r1, [pc, #60]	; (800be1c <pbuf_free+0x118>)
 800bde0:	480b      	ldr	r0, [pc, #44]	; (800be10 <pbuf_free+0x10c>)
 800bde2:	f008 fc49 	bl	8014678 <iprintf>
        }
      }
      count++;
 800bde6:	7ffb      	ldrb	r3, [r7, #31]
 800bde8:	3301      	adds	r3, #1
 800bdea:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bdec:	693b      	ldr	r3, [r7, #16]
 800bdee:	607b      	str	r3, [r7, #4]
 800bdf0:	e001      	b.n	800bdf6 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d199      	bne.n	800bd30 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bdfc:	7ffb      	ldrb	r3, [r7, #31]
}
 800bdfe:	4618      	mov	r0, r3
 800be00:	3720      	adds	r7, #32
 800be02:	46bd      	mov	sp, r7
 800be04:	bd80      	pop	{r7, pc}
 800be06:	bf00      	nop
 800be08:	08015be4 	.word	0x08015be4
 800be0c:	08015d48 	.word	0x08015d48
 800be10:	08015c44 	.word	0x08015c44
 800be14:	08015d74 	.word	0x08015d74
 800be18:	08015d8c 	.word	0x08015d8c
 800be1c:	08015db0 	.word	0x08015db0

0800be20 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800be20:	b480      	push	{r7}
 800be22:	b085      	sub	sp, #20
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800be28:	2300      	movs	r3, #0
 800be2a:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800be2c:	e005      	b.n	800be3a <pbuf_clen+0x1a>
    ++len;
 800be2e:	89fb      	ldrh	r3, [r7, #14]
 800be30:	3301      	adds	r3, #1
 800be32:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d1f6      	bne.n	800be2e <pbuf_clen+0xe>
  }
  return len;
 800be40:	89fb      	ldrh	r3, [r7, #14]
}
 800be42:	4618      	mov	r0, r3
 800be44:	3714      	adds	r7, #20
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr
	...

0800be50 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d016      	beq.n	800be8c <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800be5e:	f008 fa15 	bl	801428c <sys_arch_protect>
 800be62:	60f8      	str	r0, [r7, #12]
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	7b9b      	ldrb	r3, [r3, #14]
 800be68:	3301      	adds	r3, #1
 800be6a:	b2da      	uxtb	r2, r3
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	739a      	strb	r2, [r3, #14]
 800be70:	68f8      	ldr	r0, [r7, #12]
 800be72:	f008 fa19 	bl	80142a8 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	7b9b      	ldrb	r3, [r3, #14]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d106      	bne.n	800be8c <pbuf_ref+0x3c>
 800be7e:	4b05      	ldr	r3, [pc, #20]	; (800be94 <pbuf_ref+0x44>)
 800be80:	f240 3242 	movw	r2, #834	; 0x342
 800be84:	4904      	ldr	r1, [pc, #16]	; (800be98 <pbuf_ref+0x48>)
 800be86:	4805      	ldr	r0, [pc, #20]	; (800be9c <pbuf_ref+0x4c>)
 800be88:	f008 fbf6 	bl	8014678 <iprintf>
  }
}
 800be8c:	bf00      	nop
 800be8e:	3710      	adds	r7, #16
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}
 800be94:	08015be4 	.word	0x08015be4
 800be98:	08015dc4 	.word	0x08015dc4
 800be9c:	08015c44 	.word	0x08015c44

0800bea0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bea0:	b580      	push	{r7, lr}
 800bea2:	b084      	sub	sp, #16
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
 800bea8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d002      	beq.n	800beb6 <pbuf_cat+0x16>
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d107      	bne.n	800bec6 <pbuf_cat+0x26>
 800beb6:	4b20      	ldr	r3, [pc, #128]	; (800bf38 <pbuf_cat+0x98>)
 800beb8:	f240 3259 	movw	r2, #857	; 0x359
 800bebc:	491f      	ldr	r1, [pc, #124]	; (800bf3c <pbuf_cat+0x9c>)
 800bebe:	4820      	ldr	r0, [pc, #128]	; (800bf40 <pbuf_cat+0xa0>)
 800bec0:	f008 fbda 	bl	8014678 <iprintf>
 800bec4:	e034      	b.n	800bf30 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	60fb      	str	r3, [r7, #12]
 800beca:	e00a      	b.n	800bee2 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	891a      	ldrh	r2, [r3, #8]
 800bed0:	683b      	ldr	r3, [r7, #0]
 800bed2:	891b      	ldrh	r3, [r3, #8]
 800bed4:	4413      	add	r3, r2
 800bed6:	b29a      	uxth	r2, r3
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	60fb      	str	r3, [r7, #12]
 800bee2:	68fb      	ldr	r3, [r7, #12]
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d1f0      	bne.n	800becc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	891a      	ldrh	r2, [r3, #8]
 800beee:	68fb      	ldr	r3, [r7, #12]
 800bef0:	895b      	ldrh	r3, [r3, #10]
 800bef2:	429a      	cmp	r2, r3
 800bef4:	d006      	beq.n	800bf04 <pbuf_cat+0x64>
 800bef6:	4b10      	ldr	r3, [pc, #64]	; (800bf38 <pbuf_cat+0x98>)
 800bef8:	f240 3262 	movw	r2, #866	; 0x362
 800befc:	4911      	ldr	r1, [pc, #68]	; (800bf44 <pbuf_cat+0xa4>)
 800befe:	4810      	ldr	r0, [pc, #64]	; (800bf40 <pbuf_cat+0xa0>)
 800bf00:	f008 fbba 	bl	8014678 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d006      	beq.n	800bf1a <pbuf_cat+0x7a>
 800bf0c:	4b0a      	ldr	r3, [pc, #40]	; (800bf38 <pbuf_cat+0x98>)
 800bf0e:	f240 3263 	movw	r2, #867	; 0x363
 800bf12:	490d      	ldr	r1, [pc, #52]	; (800bf48 <pbuf_cat+0xa8>)
 800bf14:	480a      	ldr	r0, [pc, #40]	; (800bf40 <pbuf_cat+0xa0>)
 800bf16:	f008 fbaf 	bl	8014678 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	891a      	ldrh	r2, [r3, #8]
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	891b      	ldrh	r3, [r3, #8]
 800bf22:	4413      	add	r3, r2
 800bf24:	b29a      	uxth	r2, r3
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	683a      	ldr	r2, [r7, #0]
 800bf2e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bf30:	3710      	adds	r7, #16
 800bf32:	46bd      	mov	sp, r7
 800bf34:	bd80      	pop	{r7, pc}
 800bf36:	bf00      	nop
 800bf38:	08015be4 	.word	0x08015be4
 800bf3c:	08015dd8 	.word	0x08015dd8
 800bf40:	08015c44 	.word	0x08015c44
 800bf44:	08015e10 	.word	0x08015e10
 800bf48:	08015e40 	.word	0x08015e40

0800bf4c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bf4c:	b580      	push	{r7, lr}
 800bf4e:	b086      	sub	sp, #24
 800bf50:	af00      	add	r7, sp, #0
 800bf52:	6078      	str	r0, [r7, #4]
 800bf54:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bf56:	2300      	movs	r3, #0
 800bf58:	617b      	str	r3, [r7, #20]
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d008      	beq.n	800bf76 <pbuf_copy+0x2a>
 800bf64:	683b      	ldr	r3, [r7, #0]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d005      	beq.n	800bf76 <pbuf_copy+0x2a>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	891a      	ldrh	r2, [r3, #8]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	891b      	ldrh	r3, [r3, #8]
 800bf72:	429a      	cmp	r2, r3
 800bf74:	d209      	bcs.n	800bf8a <pbuf_copy+0x3e>
 800bf76:	4b57      	ldr	r3, [pc, #348]	; (800c0d4 <pbuf_copy+0x188>)
 800bf78:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bf7c:	4956      	ldr	r1, [pc, #344]	; (800c0d8 <pbuf_copy+0x18c>)
 800bf7e:	4857      	ldr	r0, [pc, #348]	; (800c0dc <pbuf_copy+0x190>)
 800bf80:	f008 fb7a 	bl	8014678 <iprintf>
 800bf84:	f06f 030f 	mvn.w	r3, #15
 800bf88:	e09f      	b.n	800c0ca <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	895b      	ldrh	r3, [r3, #10]
 800bf8e:	461a      	mov	r2, r3
 800bf90:	697b      	ldr	r3, [r7, #20]
 800bf92:	1ad2      	subs	r2, r2, r3
 800bf94:	683b      	ldr	r3, [r7, #0]
 800bf96:	895b      	ldrh	r3, [r3, #10]
 800bf98:	4619      	mov	r1, r3
 800bf9a:	693b      	ldr	r3, [r7, #16]
 800bf9c:	1acb      	subs	r3, r1, r3
 800bf9e:	429a      	cmp	r2, r3
 800bfa0:	d306      	bcc.n	800bfb0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	895b      	ldrh	r3, [r3, #10]
 800bfa6:	461a      	mov	r2, r3
 800bfa8:	693b      	ldr	r3, [r7, #16]
 800bfaa:	1ad3      	subs	r3, r2, r3
 800bfac:	60fb      	str	r3, [r7, #12]
 800bfae:	e005      	b.n	800bfbc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	895b      	ldrh	r3, [r3, #10]
 800bfb4:	461a      	mov	r2, r3
 800bfb6:	697b      	ldr	r3, [r7, #20]
 800bfb8:	1ad3      	subs	r3, r2, r3
 800bfba:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	685a      	ldr	r2, [r3, #4]
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	18d0      	adds	r0, r2, r3
 800bfc4:	683b      	ldr	r3, [r7, #0]
 800bfc6:	685a      	ldr	r2, [r3, #4]
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	4413      	add	r3, r2
 800bfcc:	68fa      	ldr	r2, [r7, #12]
 800bfce:	4619      	mov	r1, r3
 800bfd0:	f008 faa7 	bl	8014522 <memcpy>
    offset_to += len;
 800bfd4:	697a      	ldr	r2, [r7, #20]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	4413      	add	r3, r2
 800bfda:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800bfdc:	693a      	ldr	r2, [r7, #16]
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	4413      	add	r3, r2
 800bfe2:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	895b      	ldrh	r3, [r3, #10]
 800bfe8:	461a      	mov	r2, r3
 800bfea:	697b      	ldr	r3, [r7, #20]
 800bfec:	4293      	cmp	r3, r2
 800bfee:	d906      	bls.n	800bffe <pbuf_copy+0xb2>
 800bff0:	4b38      	ldr	r3, [pc, #224]	; (800c0d4 <pbuf_copy+0x188>)
 800bff2:	f240 32d9 	movw	r2, #985	; 0x3d9
 800bff6:	493a      	ldr	r1, [pc, #232]	; (800c0e0 <pbuf_copy+0x194>)
 800bff8:	4838      	ldr	r0, [pc, #224]	; (800c0dc <pbuf_copy+0x190>)
 800bffa:	f008 fb3d 	bl	8014678 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800bffe:	683b      	ldr	r3, [r7, #0]
 800c000:	895b      	ldrh	r3, [r3, #10]
 800c002:	461a      	mov	r2, r3
 800c004:	693b      	ldr	r3, [r7, #16]
 800c006:	4293      	cmp	r3, r2
 800c008:	d906      	bls.n	800c018 <pbuf_copy+0xcc>
 800c00a:	4b32      	ldr	r3, [pc, #200]	; (800c0d4 <pbuf_copy+0x188>)
 800c00c:	f240 32da 	movw	r2, #986	; 0x3da
 800c010:	4934      	ldr	r1, [pc, #208]	; (800c0e4 <pbuf_copy+0x198>)
 800c012:	4832      	ldr	r0, [pc, #200]	; (800c0dc <pbuf_copy+0x190>)
 800c014:	f008 fb30 	bl	8014678 <iprintf>
    if (offset_from >= p_from->len) {
 800c018:	683b      	ldr	r3, [r7, #0]
 800c01a:	895b      	ldrh	r3, [r3, #10]
 800c01c:	461a      	mov	r2, r3
 800c01e:	693b      	ldr	r3, [r7, #16]
 800c020:	4293      	cmp	r3, r2
 800c022:	d304      	bcc.n	800c02e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c024:	2300      	movs	r3, #0
 800c026:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	895b      	ldrh	r3, [r3, #10]
 800c032:	461a      	mov	r2, r3
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	4293      	cmp	r3, r2
 800c038:	d114      	bne.n	800c064 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c03a:	2300      	movs	r3, #0
 800c03c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d10c      	bne.n	800c064 <pbuf_copy+0x118>
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d009      	beq.n	800c064 <pbuf_copy+0x118>
 800c050:	4b20      	ldr	r3, [pc, #128]	; (800c0d4 <pbuf_copy+0x188>)
 800c052:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c056:	4924      	ldr	r1, [pc, #144]	; (800c0e8 <pbuf_copy+0x19c>)
 800c058:	4820      	ldr	r0, [pc, #128]	; (800c0dc <pbuf_copy+0x190>)
 800c05a:	f008 fb0d 	bl	8014678 <iprintf>
 800c05e:	f06f 030f 	mvn.w	r3, #15
 800c062:	e032      	b.n	800c0ca <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c064:	683b      	ldr	r3, [r7, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d013      	beq.n	800c092 <pbuf_copy+0x146>
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	895a      	ldrh	r2, [r3, #10]
 800c06e:	683b      	ldr	r3, [r7, #0]
 800c070:	891b      	ldrh	r3, [r3, #8]
 800c072:	429a      	cmp	r2, r3
 800c074:	d10d      	bne.n	800c092 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c076:	683b      	ldr	r3, [r7, #0]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d009      	beq.n	800c092 <pbuf_copy+0x146>
 800c07e:	4b15      	ldr	r3, [pc, #84]	; (800c0d4 <pbuf_copy+0x188>)
 800c080:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c084:	4919      	ldr	r1, [pc, #100]	; (800c0ec <pbuf_copy+0x1a0>)
 800c086:	4815      	ldr	r0, [pc, #84]	; (800c0dc <pbuf_copy+0x190>)
 800c088:	f008 faf6 	bl	8014678 <iprintf>
 800c08c:	f06f 0305 	mvn.w	r3, #5
 800c090:	e01b      	b.n	800c0ca <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d013      	beq.n	800c0c0 <pbuf_copy+0x174>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	895a      	ldrh	r2, [r3, #10]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	891b      	ldrh	r3, [r3, #8]
 800c0a0:	429a      	cmp	r2, r3
 800c0a2:	d10d      	bne.n	800c0c0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d009      	beq.n	800c0c0 <pbuf_copy+0x174>
 800c0ac:	4b09      	ldr	r3, [pc, #36]	; (800c0d4 <pbuf_copy+0x188>)
 800c0ae:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c0b2:	490e      	ldr	r1, [pc, #56]	; (800c0ec <pbuf_copy+0x1a0>)
 800c0b4:	4809      	ldr	r0, [pc, #36]	; (800c0dc <pbuf_copy+0x190>)
 800c0b6:	f008 fadf 	bl	8014678 <iprintf>
 800c0ba:	f06f 0305 	mvn.w	r3, #5
 800c0be:	e004      	b.n	800c0ca <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c0c0:	683b      	ldr	r3, [r7, #0]
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	f47f af61 	bne.w	800bf8a <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c0c8:	2300      	movs	r3, #0
}
 800c0ca:	4618      	mov	r0, r3
 800c0cc:	3718      	adds	r7, #24
 800c0ce:	46bd      	mov	sp, r7
 800c0d0:	bd80      	pop	{r7, pc}
 800c0d2:	bf00      	nop
 800c0d4:	08015be4 	.word	0x08015be4
 800c0d8:	08015e8c 	.word	0x08015e8c
 800c0dc:	08015c44 	.word	0x08015c44
 800c0e0:	08015ebc 	.word	0x08015ebc
 800c0e4:	08015ed4 	.word	0x08015ed4
 800c0e8:	08015ef0 	.word	0x08015ef0
 800c0ec:	08015f00 	.word	0x08015f00

0800c0f0 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c0f0:	b580      	push	{r7, lr}
 800c0f2:	b088      	sub	sp, #32
 800c0f4:	af00      	add	r7, sp, #0
 800c0f6:	60f8      	str	r0, [r7, #12]
 800c0f8:	60b9      	str	r1, [r7, #8]
 800c0fa:	4611      	mov	r1, r2
 800c0fc:	461a      	mov	r2, r3
 800c0fe:	460b      	mov	r3, r1
 800c100:	80fb      	strh	r3, [r7, #6]
 800c102:	4613      	mov	r3, r2
 800c104:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c106:	2300      	movs	r3, #0
 800c108:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c10a:	2300      	movs	r3, #0
 800c10c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d108      	bne.n	800c126 <pbuf_copy_partial+0x36>
 800c114:	4b2b      	ldr	r3, [pc, #172]	; (800c1c4 <pbuf_copy_partial+0xd4>)
 800c116:	f240 420a 	movw	r2, #1034	; 0x40a
 800c11a:	492b      	ldr	r1, [pc, #172]	; (800c1c8 <pbuf_copy_partial+0xd8>)
 800c11c:	482b      	ldr	r0, [pc, #172]	; (800c1cc <pbuf_copy_partial+0xdc>)
 800c11e:	f008 faab 	bl	8014678 <iprintf>
 800c122:	2300      	movs	r3, #0
 800c124:	e04a      	b.n	800c1bc <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c126:	68bb      	ldr	r3, [r7, #8]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d108      	bne.n	800c13e <pbuf_copy_partial+0x4e>
 800c12c:	4b25      	ldr	r3, [pc, #148]	; (800c1c4 <pbuf_copy_partial+0xd4>)
 800c12e:	f240 420b 	movw	r2, #1035	; 0x40b
 800c132:	4927      	ldr	r1, [pc, #156]	; (800c1d0 <pbuf_copy_partial+0xe0>)
 800c134:	4825      	ldr	r0, [pc, #148]	; (800c1cc <pbuf_copy_partial+0xdc>)
 800c136:	f008 fa9f 	bl	8014678 <iprintf>
 800c13a:	2300      	movs	r3, #0
 800c13c:	e03e      	b.n	800c1bc <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	61fb      	str	r3, [r7, #28]
 800c142:	e034      	b.n	800c1ae <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c144:	88bb      	ldrh	r3, [r7, #4]
 800c146:	2b00      	cmp	r3, #0
 800c148:	d00a      	beq.n	800c160 <pbuf_copy_partial+0x70>
 800c14a:	69fb      	ldr	r3, [r7, #28]
 800c14c:	895b      	ldrh	r3, [r3, #10]
 800c14e:	88ba      	ldrh	r2, [r7, #4]
 800c150:	429a      	cmp	r2, r3
 800c152:	d305      	bcc.n	800c160 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c154:	69fb      	ldr	r3, [r7, #28]
 800c156:	895b      	ldrh	r3, [r3, #10]
 800c158:	88ba      	ldrh	r2, [r7, #4]
 800c15a:	1ad3      	subs	r3, r2, r3
 800c15c:	80bb      	strh	r3, [r7, #4]
 800c15e:	e023      	b.n	800c1a8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	895a      	ldrh	r2, [r3, #10]
 800c164:	88bb      	ldrh	r3, [r7, #4]
 800c166:	1ad3      	subs	r3, r2, r3
 800c168:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c16a:	8b3a      	ldrh	r2, [r7, #24]
 800c16c:	88fb      	ldrh	r3, [r7, #6]
 800c16e:	429a      	cmp	r2, r3
 800c170:	d901      	bls.n	800c176 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c172:	88fb      	ldrh	r3, [r7, #6]
 800c174:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c176:	8b7b      	ldrh	r3, [r7, #26]
 800c178:	68ba      	ldr	r2, [r7, #8]
 800c17a:	18d0      	adds	r0, r2, r3
 800c17c:	69fb      	ldr	r3, [r7, #28]
 800c17e:	685a      	ldr	r2, [r3, #4]
 800c180:	88bb      	ldrh	r3, [r7, #4]
 800c182:	4413      	add	r3, r2
 800c184:	8b3a      	ldrh	r2, [r7, #24]
 800c186:	4619      	mov	r1, r3
 800c188:	f008 f9cb 	bl	8014522 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c18c:	8afa      	ldrh	r2, [r7, #22]
 800c18e:	8b3b      	ldrh	r3, [r7, #24]
 800c190:	4413      	add	r3, r2
 800c192:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c194:	8b7a      	ldrh	r2, [r7, #26]
 800c196:	8b3b      	ldrh	r3, [r7, #24]
 800c198:	4413      	add	r3, r2
 800c19a:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c19c:	88fa      	ldrh	r2, [r7, #6]
 800c19e:	8b3b      	ldrh	r3, [r7, #24]
 800c1a0:	1ad3      	subs	r3, r2, r3
 800c1a2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c1a4:	2300      	movs	r3, #0
 800c1a6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c1a8:	69fb      	ldr	r3, [r7, #28]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	61fb      	str	r3, [r7, #28]
 800c1ae:	88fb      	ldrh	r3, [r7, #6]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d002      	beq.n	800c1ba <pbuf_copy_partial+0xca>
 800c1b4:	69fb      	ldr	r3, [r7, #28]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d1c4      	bne.n	800c144 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c1ba:	8afb      	ldrh	r3, [r7, #22]
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3720      	adds	r7, #32
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}
 800c1c4:	08015be4 	.word	0x08015be4
 800c1c8:	08015f2c 	.word	0x08015f2c
 800c1cc:	08015c44 	.word	0x08015c44
 800c1d0:	08015f4c 	.word	0x08015f4c

0800c1d4 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	b084      	sub	sp, #16
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	4603      	mov	r3, r0
 800c1dc:	603a      	str	r2, [r7, #0]
 800c1de:	71fb      	strb	r3, [r7, #7]
 800c1e0:	460b      	mov	r3, r1
 800c1e2:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	8919      	ldrh	r1, [r3, #8]
 800c1e8:	88ba      	ldrh	r2, [r7, #4]
 800c1ea:	79fb      	ldrb	r3, [r7, #7]
 800c1ec:	4618      	mov	r0, r3
 800c1ee:	f7ff faa5 	bl	800b73c <pbuf_alloc>
 800c1f2:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d101      	bne.n	800c1fe <pbuf_clone+0x2a>
    return NULL;
 800c1fa:	2300      	movs	r3, #0
 800c1fc:	e011      	b.n	800c222 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c1fe:	6839      	ldr	r1, [r7, #0]
 800c200:	68f8      	ldr	r0, [r7, #12]
 800c202:	f7ff fea3 	bl	800bf4c <pbuf_copy>
 800c206:	4603      	mov	r3, r0
 800c208:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c20a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d006      	beq.n	800c220 <pbuf_clone+0x4c>
 800c212:	4b06      	ldr	r3, [pc, #24]	; (800c22c <pbuf_clone+0x58>)
 800c214:	f240 5224 	movw	r2, #1316	; 0x524
 800c218:	4905      	ldr	r1, [pc, #20]	; (800c230 <pbuf_clone+0x5c>)
 800c21a:	4806      	ldr	r0, [pc, #24]	; (800c234 <pbuf_clone+0x60>)
 800c21c:	f008 fa2c 	bl	8014678 <iprintf>
  return q;
 800c220:	68fb      	ldr	r3, [r7, #12]
}
 800c222:	4618      	mov	r0, r3
 800c224:	3710      	adds	r7, #16
 800c226:	46bd      	mov	sp, r7
 800c228:	bd80      	pop	{r7, pc}
 800c22a:	bf00      	nop
 800c22c:	08015be4 	.word	0x08015be4
 800c230:	08016058 	.word	0x08016058
 800c234:	08015c44 	.word	0x08015c44

0800c238 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c238:	b580      	push	{r7, lr}
 800c23a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c23c:	f008 fa34 	bl	80146a8 <rand>
 800c240:	4603      	mov	r3, r0
 800c242:	b29b      	uxth	r3, r3
 800c244:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c248:	b29b      	uxth	r3, r3
 800c24a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c24e:	b29a      	uxth	r2, r3
 800c250:	4b01      	ldr	r3, [pc, #4]	; (800c258 <tcp_init+0x20>)
 800c252:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c254:	bf00      	nop
 800c256:	bd80      	pop	{r7, pc}
 800c258:	20000024 	.word	0x20000024

0800c25c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	7d1b      	ldrb	r3, [r3, #20]
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d105      	bne.n	800c278 <tcp_free+0x1c>
 800c26c:	4b06      	ldr	r3, [pc, #24]	; (800c288 <tcp_free+0x2c>)
 800c26e:	22d4      	movs	r2, #212	; 0xd4
 800c270:	4906      	ldr	r1, [pc, #24]	; (800c28c <tcp_free+0x30>)
 800c272:	4807      	ldr	r0, [pc, #28]	; (800c290 <tcp_free+0x34>)
 800c274:	f008 fa00 	bl	8014678 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c278:	6879      	ldr	r1, [r7, #4]
 800c27a:	2001      	movs	r0, #1
 800c27c:	f7fe fe9e 	bl	800afbc <memp_free>
}
 800c280:	bf00      	nop
 800c282:	3708      	adds	r7, #8
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	080160e4 	.word	0x080160e4
 800c28c:	08016114 	.word	0x08016114
 800c290:	08016128 	.word	0x08016128

0800c294 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b082      	sub	sp, #8
 800c298:	af00      	add	r7, sp, #0
 800c29a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	7d1b      	ldrb	r3, [r3, #20]
 800c2a0:	2b01      	cmp	r3, #1
 800c2a2:	d105      	bne.n	800c2b0 <tcp_free_listen+0x1c>
 800c2a4:	4b06      	ldr	r3, [pc, #24]	; (800c2c0 <tcp_free_listen+0x2c>)
 800c2a6:	22df      	movs	r2, #223	; 0xdf
 800c2a8:	4906      	ldr	r1, [pc, #24]	; (800c2c4 <tcp_free_listen+0x30>)
 800c2aa:	4807      	ldr	r0, [pc, #28]	; (800c2c8 <tcp_free_listen+0x34>)
 800c2ac:	f008 f9e4 	bl	8014678 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c2b0:	6879      	ldr	r1, [r7, #4]
 800c2b2:	2002      	movs	r0, #2
 800c2b4:	f7fe fe82 	bl	800afbc <memp_free>
}
 800c2b8:	bf00      	nop
 800c2ba:	3708      	adds	r7, #8
 800c2bc:	46bd      	mov	sp, r7
 800c2be:	bd80      	pop	{r7, pc}
 800c2c0:	080160e4 	.word	0x080160e4
 800c2c4:	08016150 	.word	0x08016150
 800c2c8:	08016128 	.word	0x08016128

0800c2cc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c2d0:	f000 fea2 	bl	800d018 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c2d4:	4b07      	ldr	r3, [pc, #28]	; (800c2f4 <tcp_tmr+0x28>)
 800c2d6:	781b      	ldrb	r3, [r3, #0]
 800c2d8:	3301      	adds	r3, #1
 800c2da:	b2da      	uxtb	r2, r3
 800c2dc:	4b05      	ldr	r3, [pc, #20]	; (800c2f4 <tcp_tmr+0x28>)
 800c2de:	701a      	strb	r2, [r3, #0]
 800c2e0:	4b04      	ldr	r3, [pc, #16]	; (800c2f4 <tcp_tmr+0x28>)
 800c2e2:	781b      	ldrb	r3, [r3, #0]
 800c2e4:	f003 0301 	and.w	r3, r3, #1
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d001      	beq.n	800c2f0 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c2ec:	f000 fb54 	bl	800c998 <tcp_slowtmr>
  }
}
 800c2f0:	bf00      	nop
 800c2f2:	bd80      	pop	{r7, pc}
 800c2f4:	2000f1fd 	.word	0x2000f1fd

0800c2f8 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c2f8:	b580      	push	{r7, lr}
 800c2fa:	b084      	sub	sp, #16
 800c2fc:	af00      	add	r7, sp, #0
 800c2fe:	6078      	str	r0, [r7, #4]
 800c300:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c302:	683b      	ldr	r3, [r7, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d105      	bne.n	800c314 <tcp_remove_listener+0x1c>
 800c308:	4b0d      	ldr	r3, [pc, #52]	; (800c340 <tcp_remove_listener+0x48>)
 800c30a:	22ff      	movs	r2, #255	; 0xff
 800c30c:	490d      	ldr	r1, [pc, #52]	; (800c344 <tcp_remove_listener+0x4c>)
 800c30e:	480e      	ldr	r0, [pc, #56]	; (800c348 <tcp_remove_listener+0x50>)
 800c310:	f008 f9b2 	bl	8014678 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	60fb      	str	r3, [r7, #12]
 800c318:	e00a      	b.n	800c330 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c31e:	683a      	ldr	r2, [r7, #0]
 800c320:	429a      	cmp	r2, r3
 800c322:	d102      	bne.n	800c32a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	2200      	movs	r2, #0
 800c328:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	68db      	ldr	r3, [r3, #12]
 800c32e:	60fb      	str	r3, [r7, #12]
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	2b00      	cmp	r3, #0
 800c334:	d1f1      	bne.n	800c31a <tcp_remove_listener+0x22>
    }
  }
}
 800c336:	bf00      	nop
 800c338:	bf00      	nop
 800c33a:	3710      	adds	r7, #16
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}
 800c340:	080160e4 	.word	0x080160e4
 800c344:	0801616c 	.word	0x0801616c
 800c348:	08016128 	.word	0x08016128

0800c34c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b084      	sub	sp, #16
 800c350:	af00      	add	r7, sp, #0
 800c352:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d106      	bne.n	800c368 <tcp_listen_closed+0x1c>
 800c35a:	4b14      	ldr	r3, [pc, #80]	; (800c3ac <tcp_listen_closed+0x60>)
 800c35c:	f240 1211 	movw	r2, #273	; 0x111
 800c360:	4913      	ldr	r1, [pc, #76]	; (800c3b0 <tcp_listen_closed+0x64>)
 800c362:	4814      	ldr	r0, [pc, #80]	; (800c3b4 <tcp_listen_closed+0x68>)
 800c364:	f008 f988 	bl	8014678 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	7d1b      	ldrb	r3, [r3, #20]
 800c36c:	2b01      	cmp	r3, #1
 800c36e:	d006      	beq.n	800c37e <tcp_listen_closed+0x32>
 800c370:	4b0e      	ldr	r3, [pc, #56]	; (800c3ac <tcp_listen_closed+0x60>)
 800c372:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c376:	4910      	ldr	r1, [pc, #64]	; (800c3b8 <tcp_listen_closed+0x6c>)
 800c378:	480e      	ldr	r0, [pc, #56]	; (800c3b4 <tcp_listen_closed+0x68>)
 800c37a:	f008 f97d 	bl	8014678 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c37e:	2301      	movs	r3, #1
 800c380:	60fb      	str	r3, [r7, #12]
 800c382:	e00b      	b.n	800c39c <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c384:	4a0d      	ldr	r2, [pc, #52]	; (800c3bc <tcp_listen_closed+0x70>)
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	6879      	ldr	r1, [r7, #4]
 800c390:	4618      	mov	r0, r3
 800c392:	f7ff ffb1 	bl	800c2f8 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	3301      	adds	r3, #1
 800c39a:	60fb      	str	r3, [r7, #12]
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	2b03      	cmp	r3, #3
 800c3a0:	d9f0      	bls.n	800c384 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c3a2:	bf00      	nop
 800c3a4:	bf00      	nop
 800c3a6:	3710      	adds	r7, #16
 800c3a8:	46bd      	mov	sp, r7
 800c3aa:	bd80      	pop	{r7, pc}
 800c3ac:	080160e4 	.word	0x080160e4
 800c3b0:	08016194 	.word	0x08016194
 800c3b4:	08016128 	.word	0x08016128
 800c3b8:	080161a0 	.word	0x080161a0
 800c3bc:	08018128 	.word	0x08018128

0800c3c0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c3c0:	b5b0      	push	{r4, r5, r7, lr}
 800c3c2:	b088      	sub	sp, #32
 800c3c4:	af04      	add	r7, sp, #16
 800c3c6:	6078      	str	r0, [r7, #4]
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d106      	bne.n	800c3e0 <tcp_close_shutdown+0x20>
 800c3d2:	4b63      	ldr	r3, [pc, #396]	; (800c560 <tcp_close_shutdown+0x1a0>)
 800c3d4:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c3d8:	4962      	ldr	r1, [pc, #392]	; (800c564 <tcp_close_shutdown+0x1a4>)
 800c3da:	4863      	ldr	r0, [pc, #396]	; (800c568 <tcp_close_shutdown+0x1a8>)
 800c3dc:	f008 f94c 	bl	8014678 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c3e0:	78fb      	ldrb	r3, [r7, #3]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d066      	beq.n	800c4b4 <tcp_close_shutdown+0xf4>
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	7d1b      	ldrb	r3, [r3, #20]
 800c3ea:	2b04      	cmp	r3, #4
 800c3ec:	d003      	beq.n	800c3f6 <tcp_close_shutdown+0x36>
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	7d1b      	ldrb	r3, [r3, #20]
 800c3f2:	2b07      	cmp	r3, #7
 800c3f4:	d15e      	bne.n	800c4b4 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d104      	bne.n	800c408 <tcp_close_shutdown+0x48>
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c402:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c406:	d055      	beq.n	800c4b4 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	8b5b      	ldrh	r3, [r3, #26]
 800c40c:	f003 0310 	and.w	r3, r3, #16
 800c410:	2b00      	cmp	r3, #0
 800c412:	d106      	bne.n	800c422 <tcp_close_shutdown+0x62>
 800c414:	4b52      	ldr	r3, [pc, #328]	; (800c560 <tcp_close_shutdown+0x1a0>)
 800c416:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c41a:	4954      	ldr	r1, [pc, #336]	; (800c56c <tcp_close_shutdown+0x1ac>)
 800c41c:	4852      	ldr	r0, [pc, #328]	; (800c568 <tcp_close_shutdown+0x1a8>)
 800c41e:	f008 f92b 	bl	8014678 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c42a:	687d      	ldr	r5, [r7, #4]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	3304      	adds	r3, #4
 800c430:	687a      	ldr	r2, [r7, #4]
 800c432:	8ad2      	ldrh	r2, [r2, #22]
 800c434:	6879      	ldr	r1, [r7, #4]
 800c436:	8b09      	ldrh	r1, [r1, #24]
 800c438:	9102      	str	r1, [sp, #8]
 800c43a:	9201      	str	r2, [sp, #4]
 800c43c:	9300      	str	r3, [sp, #0]
 800c43e:	462b      	mov	r3, r5
 800c440:	4622      	mov	r2, r4
 800c442:	4601      	mov	r1, r0
 800c444:	6878      	ldr	r0, [r7, #4]
 800c446:	f004 fe91 	bl	801116c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f001 f8c6 	bl	800d5dc <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c450:	4b47      	ldr	r3, [pc, #284]	; (800c570 <tcp_close_shutdown+0x1b0>)
 800c452:	681b      	ldr	r3, [r3, #0]
 800c454:	687a      	ldr	r2, [r7, #4]
 800c456:	429a      	cmp	r2, r3
 800c458:	d105      	bne.n	800c466 <tcp_close_shutdown+0xa6>
 800c45a:	4b45      	ldr	r3, [pc, #276]	; (800c570 <tcp_close_shutdown+0x1b0>)
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	68db      	ldr	r3, [r3, #12]
 800c460:	4a43      	ldr	r2, [pc, #268]	; (800c570 <tcp_close_shutdown+0x1b0>)
 800c462:	6013      	str	r3, [r2, #0]
 800c464:	e013      	b.n	800c48e <tcp_close_shutdown+0xce>
 800c466:	4b42      	ldr	r3, [pc, #264]	; (800c570 <tcp_close_shutdown+0x1b0>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	60fb      	str	r3, [r7, #12]
 800c46c:	e00c      	b.n	800c488 <tcp_close_shutdown+0xc8>
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	68db      	ldr	r3, [r3, #12]
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	429a      	cmp	r2, r3
 800c476:	d104      	bne.n	800c482 <tcp_close_shutdown+0xc2>
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	68da      	ldr	r2, [r3, #12]
 800c47c:	68fb      	ldr	r3, [r7, #12]
 800c47e:	60da      	str	r2, [r3, #12]
 800c480:	e005      	b.n	800c48e <tcp_close_shutdown+0xce>
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	68db      	ldr	r3, [r3, #12]
 800c486:	60fb      	str	r3, [r7, #12]
 800c488:	68fb      	ldr	r3, [r7, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d1ef      	bne.n	800c46e <tcp_close_shutdown+0xae>
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	2200      	movs	r2, #0
 800c492:	60da      	str	r2, [r3, #12]
 800c494:	4b37      	ldr	r3, [pc, #220]	; (800c574 <tcp_close_shutdown+0x1b4>)
 800c496:	2201      	movs	r2, #1
 800c498:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c49a:	4b37      	ldr	r3, [pc, #220]	; (800c578 <tcp_close_shutdown+0x1b8>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	687a      	ldr	r2, [r7, #4]
 800c4a0:	429a      	cmp	r2, r3
 800c4a2:	d102      	bne.n	800c4aa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c4a4:	f003 fd5e 	bl	800ff64 <tcp_trigger_input_pcb_close>
 800c4a8:	e002      	b.n	800c4b0 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f7ff fed6 	bl	800c25c <tcp_free>
      }
      return ERR_OK;
 800c4b0:	2300      	movs	r3, #0
 800c4b2:	e050      	b.n	800c556 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	7d1b      	ldrb	r3, [r3, #20]
 800c4b8:	2b02      	cmp	r3, #2
 800c4ba:	d03b      	beq.n	800c534 <tcp_close_shutdown+0x174>
 800c4bc:	2b02      	cmp	r3, #2
 800c4be:	dc44      	bgt.n	800c54a <tcp_close_shutdown+0x18a>
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d002      	beq.n	800c4ca <tcp_close_shutdown+0x10a>
 800c4c4:	2b01      	cmp	r3, #1
 800c4c6:	d02a      	beq.n	800c51e <tcp_close_shutdown+0x15e>
 800c4c8:	e03f      	b.n	800c54a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	8adb      	ldrh	r3, [r3, #22]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d021      	beq.n	800c516 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c4d2:	4b2a      	ldr	r3, [pc, #168]	; (800c57c <tcp_close_shutdown+0x1bc>)
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	687a      	ldr	r2, [r7, #4]
 800c4d8:	429a      	cmp	r2, r3
 800c4da:	d105      	bne.n	800c4e8 <tcp_close_shutdown+0x128>
 800c4dc:	4b27      	ldr	r3, [pc, #156]	; (800c57c <tcp_close_shutdown+0x1bc>)
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	4a26      	ldr	r2, [pc, #152]	; (800c57c <tcp_close_shutdown+0x1bc>)
 800c4e4:	6013      	str	r3, [r2, #0]
 800c4e6:	e013      	b.n	800c510 <tcp_close_shutdown+0x150>
 800c4e8:	4b24      	ldr	r3, [pc, #144]	; (800c57c <tcp_close_shutdown+0x1bc>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	60bb      	str	r3, [r7, #8]
 800c4ee:	e00c      	b.n	800c50a <tcp_close_shutdown+0x14a>
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	68db      	ldr	r3, [r3, #12]
 800c4f4:	687a      	ldr	r2, [r7, #4]
 800c4f6:	429a      	cmp	r2, r3
 800c4f8:	d104      	bne.n	800c504 <tcp_close_shutdown+0x144>
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	68da      	ldr	r2, [r3, #12]
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	60da      	str	r2, [r3, #12]
 800c502:	e005      	b.n	800c510 <tcp_close_shutdown+0x150>
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	60bb      	str	r3, [r7, #8]
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d1ef      	bne.n	800c4f0 <tcp_close_shutdown+0x130>
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c516:	6878      	ldr	r0, [r7, #4]
 800c518:	f7ff fea0 	bl	800c25c <tcp_free>
      break;
 800c51c:	e01a      	b.n	800c554 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f7ff ff14 	bl	800c34c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c524:	6879      	ldr	r1, [r7, #4]
 800c526:	4816      	ldr	r0, [pc, #88]	; (800c580 <tcp_close_shutdown+0x1c0>)
 800c528:	f001 f8a8 	bl	800d67c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c52c:	6878      	ldr	r0, [r7, #4]
 800c52e:	f7ff feb1 	bl	800c294 <tcp_free_listen>
      break;
 800c532:	e00f      	b.n	800c554 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c534:	6879      	ldr	r1, [r7, #4]
 800c536:	480e      	ldr	r0, [pc, #56]	; (800c570 <tcp_close_shutdown+0x1b0>)
 800c538:	f001 f8a0 	bl	800d67c <tcp_pcb_remove>
 800c53c:	4b0d      	ldr	r3, [pc, #52]	; (800c574 <tcp_close_shutdown+0x1b4>)
 800c53e:	2201      	movs	r2, #1
 800c540:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c542:	6878      	ldr	r0, [r7, #4]
 800c544:	f7ff fe8a 	bl	800c25c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c548:	e004      	b.n	800c554 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c54a:	6878      	ldr	r0, [r7, #4]
 800c54c:	f000 f81a 	bl	800c584 <tcp_close_shutdown_fin>
 800c550:	4603      	mov	r3, r0
 800c552:	e000      	b.n	800c556 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c554:	2300      	movs	r3, #0
}
 800c556:	4618      	mov	r0, r3
 800c558:	3710      	adds	r7, #16
 800c55a:	46bd      	mov	sp, r7
 800c55c:	bdb0      	pop	{r4, r5, r7, pc}
 800c55e:	bf00      	nop
 800c560:	080160e4 	.word	0x080160e4
 800c564:	080161b8 	.word	0x080161b8
 800c568:	08016128 	.word	0x08016128
 800c56c:	080161d8 	.word	0x080161d8
 800c570:	2000f1f4 	.word	0x2000f1f4
 800c574:	2000f1fc 	.word	0x2000f1fc
 800c578:	2000f234 	.word	0x2000f234
 800c57c:	2000f1ec 	.word	0x2000f1ec
 800c580:	2000f1f0 	.word	0x2000f1f0

0800c584 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d106      	bne.n	800c5a0 <tcp_close_shutdown_fin+0x1c>
 800c592:	4b2e      	ldr	r3, [pc, #184]	; (800c64c <tcp_close_shutdown_fin+0xc8>)
 800c594:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c598:	492d      	ldr	r1, [pc, #180]	; (800c650 <tcp_close_shutdown_fin+0xcc>)
 800c59a:	482e      	ldr	r0, [pc, #184]	; (800c654 <tcp_close_shutdown_fin+0xd0>)
 800c59c:	f008 f86c 	bl	8014678 <iprintf>

  switch (pcb->state) {
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	7d1b      	ldrb	r3, [r3, #20]
 800c5a4:	2b07      	cmp	r3, #7
 800c5a6:	d020      	beq.n	800c5ea <tcp_close_shutdown_fin+0x66>
 800c5a8:	2b07      	cmp	r3, #7
 800c5aa:	dc2b      	bgt.n	800c604 <tcp_close_shutdown_fin+0x80>
 800c5ac:	2b03      	cmp	r3, #3
 800c5ae:	d002      	beq.n	800c5b6 <tcp_close_shutdown_fin+0x32>
 800c5b0:	2b04      	cmp	r3, #4
 800c5b2:	d00d      	beq.n	800c5d0 <tcp_close_shutdown_fin+0x4c>
 800c5b4:	e026      	b.n	800c604 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c5b6:	6878      	ldr	r0, [r7, #4]
 800c5b8:	f003 fee6 	bl	8010388 <tcp_send_fin>
 800c5bc:	4603      	mov	r3, r0
 800c5be:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c5c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d11f      	bne.n	800c608 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2205      	movs	r2, #5
 800c5cc:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c5ce:	e01b      	b.n	800c608 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c5d0:	6878      	ldr	r0, [r7, #4]
 800c5d2:	f003 fed9 	bl	8010388 <tcp_send_fin>
 800c5d6:	4603      	mov	r3, r0
 800c5d8:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c5da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d114      	bne.n	800c60c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	2205      	movs	r2, #5
 800c5e6:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c5e8:	e010      	b.n	800c60c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f003 fecc 	bl	8010388 <tcp_send_fin>
 800c5f0:	4603      	mov	r3, r0
 800c5f2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c5f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d109      	bne.n	800c610 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	2209      	movs	r2, #9
 800c600:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c602:	e005      	b.n	800c610 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c604:	2300      	movs	r3, #0
 800c606:	e01c      	b.n	800c642 <tcp_close_shutdown_fin+0xbe>
      break;
 800c608:	bf00      	nop
 800c60a:	e002      	b.n	800c612 <tcp_close_shutdown_fin+0x8e>
      break;
 800c60c:	bf00      	nop
 800c60e:	e000      	b.n	800c612 <tcp_close_shutdown_fin+0x8e>
      break;
 800c610:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d103      	bne.n	800c622 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c61a:	6878      	ldr	r0, [r7, #4]
 800c61c:	f003 fff2 	bl	8010604 <tcp_output>
 800c620:	e00d      	b.n	800c63e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c622:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c62a:	d108      	bne.n	800c63e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	8b5b      	ldrh	r3, [r3, #26]
 800c630:	f043 0308 	orr.w	r3, r3, #8
 800c634:	b29a      	uxth	r2, r3
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c63a:	2300      	movs	r3, #0
 800c63c:	e001      	b.n	800c642 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c63e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c642:	4618      	mov	r0, r3
 800c644:	3710      	adds	r7, #16
 800c646:	46bd      	mov	sp, r7
 800c648:	bd80      	pop	{r7, pc}
 800c64a:	bf00      	nop
 800c64c:	080160e4 	.word	0x080160e4
 800c650:	08016194 	.word	0x08016194
 800c654:	08016128 	.word	0x08016128

0800c658 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b082      	sub	sp, #8
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	2b00      	cmp	r3, #0
 800c664:	d109      	bne.n	800c67a <tcp_close+0x22>
 800c666:	4b0f      	ldr	r3, [pc, #60]	; (800c6a4 <tcp_close+0x4c>)
 800c668:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c66c:	490e      	ldr	r1, [pc, #56]	; (800c6a8 <tcp_close+0x50>)
 800c66e:	480f      	ldr	r0, [pc, #60]	; (800c6ac <tcp_close+0x54>)
 800c670:	f008 f802 	bl	8014678 <iprintf>
 800c674:	f06f 030f 	mvn.w	r3, #15
 800c678:	e00f      	b.n	800c69a <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	7d1b      	ldrb	r3, [r3, #20]
 800c67e:	2b01      	cmp	r3, #1
 800c680:	d006      	beq.n	800c690 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	8b5b      	ldrh	r3, [r3, #26]
 800c686:	f043 0310 	orr.w	r3, r3, #16
 800c68a:	b29a      	uxth	r2, r3
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c690:	2101      	movs	r1, #1
 800c692:	6878      	ldr	r0, [r7, #4]
 800c694:	f7ff fe94 	bl	800c3c0 <tcp_close_shutdown>
 800c698:	4603      	mov	r3, r0
}
 800c69a:	4618      	mov	r0, r3
 800c69c:	3708      	adds	r7, #8
 800c69e:	46bd      	mov	sp, r7
 800c6a0:	bd80      	pop	{r7, pc}
 800c6a2:	bf00      	nop
 800c6a4:	080160e4 	.word	0x080160e4
 800c6a8:	080161f4 	.word	0x080161f4
 800c6ac:	08016128 	.word	0x08016128

0800c6b0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b08e      	sub	sp, #56	; 0x38
 800c6b4:	af04      	add	r7, sp, #16
 800c6b6:	6078      	str	r0, [r7, #4]
 800c6b8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d107      	bne.n	800c6d0 <tcp_abandon+0x20>
 800c6c0:	4b52      	ldr	r3, [pc, #328]	; (800c80c <tcp_abandon+0x15c>)
 800c6c2:	f240 223d 	movw	r2, #573	; 0x23d
 800c6c6:	4952      	ldr	r1, [pc, #328]	; (800c810 <tcp_abandon+0x160>)
 800c6c8:	4852      	ldr	r0, [pc, #328]	; (800c814 <tcp_abandon+0x164>)
 800c6ca:	f007 ffd5 	bl	8014678 <iprintf>
 800c6ce:	e099      	b.n	800c804 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	7d1b      	ldrb	r3, [r3, #20]
 800c6d4:	2b01      	cmp	r3, #1
 800c6d6:	d106      	bne.n	800c6e6 <tcp_abandon+0x36>
 800c6d8:	4b4c      	ldr	r3, [pc, #304]	; (800c80c <tcp_abandon+0x15c>)
 800c6da:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c6de:	494e      	ldr	r1, [pc, #312]	; (800c818 <tcp_abandon+0x168>)
 800c6e0:	484c      	ldr	r0, [pc, #304]	; (800c814 <tcp_abandon+0x164>)
 800c6e2:	f007 ffc9 	bl	8014678 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	7d1b      	ldrb	r3, [r3, #20]
 800c6ea:	2b0a      	cmp	r3, #10
 800c6ec:	d107      	bne.n	800c6fe <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c6ee:	6879      	ldr	r1, [r7, #4]
 800c6f0:	484a      	ldr	r0, [pc, #296]	; (800c81c <tcp_abandon+0x16c>)
 800c6f2:	f000 ffc3 	bl	800d67c <tcp_pcb_remove>
    tcp_free(pcb);
 800c6f6:	6878      	ldr	r0, [r7, #4]
 800c6f8:	f7ff fdb0 	bl	800c25c <tcp_free>
 800c6fc:	e082      	b.n	800c804 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c6fe:	2300      	movs	r3, #0
 800c700:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c702:	2300      	movs	r3, #0
 800c704:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c70a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c710:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c718:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	691b      	ldr	r3, [r3, #16]
 800c71e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	7d1b      	ldrb	r3, [r3, #20]
 800c724:	2b00      	cmp	r3, #0
 800c726:	d126      	bne.n	800c776 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	8adb      	ldrh	r3, [r3, #22]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d02e      	beq.n	800c78e <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c730:	4b3b      	ldr	r3, [pc, #236]	; (800c820 <tcp_abandon+0x170>)
 800c732:	681b      	ldr	r3, [r3, #0]
 800c734:	687a      	ldr	r2, [r7, #4]
 800c736:	429a      	cmp	r2, r3
 800c738:	d105      	bne.n	800c746 <tcp_abandon+0x96>
 800c73a:	4b39      	ldr	r3, [pc, #228]	; (800c820 <tcp_abandon+0x170>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	68db      	ldr	r3, [r3, #12]
 800c740:	4a37      	ldr	r2, [pc, #220]	; (800c820 <tcp_abandon+0x170>)
 800c742:	6013      	str	r3, [r2, #0]
 800c744:	e013      	b.n	800c76e <tcp_abandon+0xbe>
 800c746:	4b36      	ldr	r3, [pc, #216]	; (800c820 <tcp_abandon+0x170>)
 800c748:	681b      	ldr	r3, [r3, #0]
 800c74a:	61fb      	str	r3, [r7, #28]
 800c74c:	e00c      	b.n	800c768 <tcp_abandon+0xb8>
 800c74e:	69fb      	ldr	r3, [r7, #28]
 800c750:	68db      	ldr	r3, [r3, #12]
 800c752:	687a      	ldr	r2, [r7, #4]
 800c754:	429a      	cmp	r2, r3
 800c756:	d104      	bne.n	800c762 <tcp_abandon+0xb2>
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	68da      	ldr	r2, [r3, #12]
 800c75c:	69fb      	ldr	r3, [r7, #28]
 800c75e:	60da      	str	r2, [r3, #12]
 800c760:	e005      	b.n	800c76e <tcp_abandon+0xbe>
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	68db      	ldr	r3, [r3, #12]
 800c766:	61fb      	str	r3, [r7, #28]
 800c768:	69fb      	ldr	r3, [r7, #28]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d1ef      	bne.n	800c74e <tcp_abandon+0x9e>
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	2200      	movs	r2, #0
 800c772:	60da      	str	r2, [r3, #12]
 800c774:	e00b      	b.n	800c78e <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c776:	683b      	ldr	r3, [r7, #0]
 800c778:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	8adb      	ldrh	r3, [r3, #22]
 800c77e:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c780:	6879      	ldr	r1, [r7, #4]
 800c782:	4828      	ldr	r0, [pc, #160]	; (800c824 <tcp_abandon+0x174>)
 800c784:	f000 ff7a 	bl	800d67c <tcp_pcb_remove>
 800c788:	4b27      	ldr	r3, [pc, #156]	; (800c828 <tcp_abandon+0x178>)
 800c78a:	2201      	movs	r2, #1
 800c78c:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c792:	2b00      	cmp	r3, #0
 800c794:	d004      	beq.n	800c7a0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c79a:	4618      	mov	r0, r3
 800c79c:	f000 fd1c 	bl	800d1d8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d004      	beq.n	800c7b2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f000 fd13 	bl	800d1d8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d004      	beq.n	800c7c4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f000 fd0a 	bl	800d1d8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00e      	beq.n	800c7e8 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c7ca:	6879      	ldr	r1, [r7, #4]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	3304      	adds	r3, #4
 800c7d0:	687a      	ldr	r2, [r7, #4]
 800c7d2:	8b12      	ldrh	r2, [r2, #24]
 800c7d4:	9202      	str	r2, [sp, #8]
 800c7d6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c7d8:	9201      	str	r2, [sp, #4]
 800c7da:	9300      	str	r3, [sp, #0]
 800c7dc:	460b      	mov	r3, r1
 800c7de:	697a      	ldr	r2, [r7, #20]
 800c7e0:	69b9      	ldr	r1, [r7, #24]
 800c7e2:	6878      	ldr	r0, [r7, #4]
 800c7e4:	f004 fcc2 	bl	801116c <tcp_rst>
    }
    last_state = pcb->state;
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	7d1b      	ldrb	r3, [r3, #20]
 800c7ec:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c7ee:	6878      	ldr	r0, [r7, #4]
 800c7f0:	f7ff fd34 	bl	800c25c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d004      	beq.n	800c804 <tcp_abandon+0x154>
 800c7fa:	693b      	ldr	r3, [r7, #16]
 800c7fc:	f06f 010c 	mvn.w	r1, #12
 800c800:	68f8      	ldr	r0, [r7, #12]
 800c802:	4798      	blx	r3
  }
}
 800c804:	3728      	adds	r7, #40	; 0x28
 800c806:	46bd      	mov	sp, r7
 800c808:	bd80      	pop	{r7, pc}
 800c80a:	bf00      	nop
 800c80c:	080160e4 	.word	0x080160e4
 800c810:	08016228 	.word	0x08016228
 800c814:	08016128 	.word	0x08016128
 800c818:	08016244 	.word	0x08016244
 800c81c:	2000f1f8 	.word	0x2000f1f8
 800c820:	2000f1ec 	.word	0x2000f1ec
 800c824:	2000f1f4 	.word	0x2000f1f4
 800c828:	2000f1fc 	.word	0x2000f1fc

0800c82c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b082      	sub	sp, #8
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c834:	2101      	movs	r1, #1
 800c836:	6878      	ldr	r0, [r7, #4]
 800c838:	f7ff ff3a 	bl	800c6b0 <tcp_abandon>
}
 800c83c:	bf00      	nop
 800c83e:	3708      	adds	r7, #8
 800c840:	46bd      	mov	sp, r7
 800c842:	bd80      	pop	{r7, pc}

0800c844 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c844:	b580      	push	{r7, lr}
 800c846:	b084      	sub	sp, #16
 800c848:	af00      	add	r7, sp, #0
 800c84a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d106      	bne.n	800c860 <tcp_update_rcv_ann_wnd+0x1c>
 800c852:	4b25      	ldr	r3, [pc, #148]	; (800c8e8 <tcp_update_rcv_ann_wnd+0xa4>)
 800c854:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c858:	4924      	ldr	r1, [pc, #144]	; (800c8ec <tcp_update_rcv_ann_wnd+0xa8>)
 800c85a:	4825      	ldr	r0, [pc, #148]	; (800c8f0 <tcp_update_rcv_ann_wnd+0xac>)
 800c85c:	f007 ff0c 	bl	8014678 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c868:	4413      	add	r3, r2
 800c86a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c870:	687a      	ldr	r2, [r7, #4]
 800c872:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c874:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c878:	bf28      	it	cs
 800c87a:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c87e:	b292      	uxth	r2, r2
 800c880:	4413      	add	r3, r2
 800c882:	68fa      	ldr	r2, [r7, #12]
 800c884:	1ad3      	subs	r3, r2, r3
 800c886:	2b00      	cmp	r3, #0
 800c888:	db08      	blt.n	800c89c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c896:	68fa      	ldr	r2, [r7, #12]
 800c898:	1ad3      	subs	r3, r2, r3
 800c89a:	e020      	b.n	800c8de <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a4:	1ad3      	subs	r3, r2, r3
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	dd03      	ble.n	800c8b2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2200      	movs	r2, #0
 800c8ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c8b0:	e014      	b.n	800c8dc <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c8ba:	1ad3      	subs	r3, r2, r3
 800c8bc:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c8c4:	d306      	bcc.n	800c8d4 <tcp_update_rcv_ann_wnd+0x90>
 800c8c6:	4b08      	ldr	r3, [pc, #32]	; (800c8e8 <tcp_update_rcv_ann_wnd+0xa4>)
 800c8c8:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c8cc:	4909      	ldr	r1, [pc, #36]	; (800c8f4 <tcp_update_rcv_ann_wnd+0xb0>)
 800c8ce:	4808      	ldr	r0, [pc, #32]	; (800c8f0 <tcp_update_rcv_ann_wnd+0xac>)
 800c8d0:	f007 fed2 	bl	8014678 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c8d4:	68bb      	ldr	r3, [r7, #8]
 800c8d6:	b29a      	uxth	r2, r3
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c8dc:	2300      	movs	r3, #0
  }
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3710      	adds	r7, #16
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	080160e4 	.word	0x080160e4
 800c8ec:	08016340 	.word	0x08016340
 800c8f0:	08016128 	.word	0x08016128
 800c8f4:	08016364 	.word	0x08016364

0800c8f8 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	460b      	mov	r3, r1
 800c902:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d107      	bne.n	800c91a <tcp_recved+0x22>
 800c90a:	4b1f      	ldr	r3, [pc, #124]	; (800c988 <tcp_recved+0x90>)
 800c90c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c910:	491e      	ldr	r1, [pc, #120]	; (800c98c <tcp_recved+0x94>)
 800c912:	481f      	ldr	r0, [pc, #124]	; (800c990 <tcp_recved+0x98>)
 800c914:	f007 feb0 	bl	8014678 <iprintf>
 800c918:	e032      	b.n	800c980 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	7d1b      	ldrb	r3, [r3, #20]
 800c91e:	2b01      	cmp	r3, #1
 800c920:	d106      	bne.n	800c930 <tcp_recved+0x38>
 800c922:	4b19      	ldr	r3, [pc, #100]	; (800c988 <tcp_recved+0x90>)
 800c924:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c928:	491a      	ldr	r1, [pc, #104]	; (800c994 <tcp_recved+0x9c>)
 800c92a:	4819      	ldr	r0, [pc, #100]	; (800c990 <tcp_recved+0x98>)
 800c92c:	f007 fea4 	bl	8014678 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c934:	887b      	ldrh	r3, [r7, #2]
 800c936:	4413      	add	r3, r2
 800c938:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c93a:	89fb      	ldrh	r3, [r7, #14]
 800c93c:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c940:	d804      	bhi.n	800c94c <tcp_recved+0x54>
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c946:	89fa      	ldrh	r2, [r7, #14]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d204      	bcs.n	800c956 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c952:	851a      	strh	r2, [r3, #40]	; 0x28
 800c954:	e002      	b.n	800c95c <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	89fa      	ldrh	r2, [r7, #14]
 800c95a:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f7ff ff71 	bl	800c844 <tcp_update_rcv_ann_wnd>
 800c962:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c96a:	d309      	bcc.n	800c980 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	8b5b      	ldrh	r3, [r3, #26]
 800c970:	f043 0302 	orr.w	r3, r3, #2
 800c974:	b29a      	uxth	r2, r3
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c97a:	6878      	ldr	r0, [r7, #4]
 800c97c:	f003 fe42 	bl	8010604 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c980:	3710      	adds	r7, #16
 800c982:	46bd      	mov	sp, r7
 800c984:	bd80      	pop	{r7, pc}
 800c986:	bf00      	nop
 800c988:	080160e4 	.word	0x080160e4
 800c98c:	08016380 	.word	0x08016380
 800c990:	08016128 	.word	0x08016128
 800c994:	08016398 	.word	0x08016398

0800c998 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c998:	b5b0      	push	{r4, r5, r7, lr}
 800c99a:	b090      	sub	sp, #64	; 0x40
 800c99c:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c99e:	2300      	movs	r3, #0
 800c9a0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c9a4:	4b94      	ldr	r3, [pc, #592]	; (800cbf8 <tcp_slowtmr+0x260>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	3301      	adds	r3, #1
 800c9aa:	4a93      	ldr	r2, [pc, #588]	; (800cbf8 <tcp_slowtmr+0x260>)
 800c9ac:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c9ae:	4b93      	ldr	r3, [pc, #588]	; (800cbfc <tcp_slowtmr+0x264>)
 800c9b0:	781b      	ldrb	r3, [r3, #0]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	b2da      	uxtb	r2, r3
 800c9b6:	4b91      	ldr	r3, [pc, #580]	; (800cbfc <tcp_slowtmr+0x264>)
 800c9b8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c9be:	4b90      	ldr	r3, [pc, #576]	; (800cc00 <tcp_slowtmr+0x268>)
 800c9c0:	681b      	ldr	r3, [r3, #0]
 800c9c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c9c4:	e29d      	b.n	800cf02 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c8:	7d1b      	ldrb	r3, [r3, #20]
 800c9ca:	2b00      	cmp	r3, #0
 800c9cc:	d106      	bne.n	800c9dc <tcp_slowtmr+0x44>
 800c9ce:	4b8d      	ldr	r3, [pc, #564]	; (800cc04 <tcp_slowtmr+0x26c>)
 800c9d0:	f240 42be 	movw	r2, #1214	; 0x4be
 800c9d4:	498c      	ldr	r1, [pc, #560]	; (800cc08 <tcp_slowtmr+0x270>)
 800c9d6:	488d      	ldr	r0, [pc, #564]	; (800cc0c <tcp_slowtmr+0x274>)
 800c9d8:	f007 fe4e 	bl	8014678 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9de:	7d1b      	ldrb	r3, [r3, #20]
 800c9e0:	2b01      	cmp	r3, #1
 800c9e2:	d106      	bne.n	800c9f2 <tcp_slowtmr+0x5a>
 800c9e4:	4b87      	ldr	r3, [pc, #540]	; (800cc04 <tcp_slowtmr+0x26c>)
 800c9e6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c9ea:	4989      	ldr	r1, [pc, #548]	; (800cc10 <tcp_slowtmr+0x278>)
 800c9ec:	4887      	ldr	r0, [pc, #540]	; (800cc0c <tcp_slowtmr+0x274>)
 800c9ee:	f007 fe43 	bl	8014678 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9f4:	7d1b      	ldrb	r3, [r3, #20]
 800c9f6:	2b0a      	cmp	r3, #10
 800c9f8:	d106      	bne.n	800ca08 <tcp_slowtmr+0x70>
 800c9fa:	4b82      	ldr	r3, [pc, #520]	; (800cc04 <tcp_slowtmr+0x26c>)
 800c9fc:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800ca00:	4984      	ldr	r1, [pc, #528]	; (800cc14 <tcp_slowtmr+0x27c>)
 800ca02:	4882      	ldr	r0, [pc, #520]	; (800cc0c <tcp_slowtmr+0x274>)
 800ca04:	f007 fe38 	bl	8014678 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800ca08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0a:	7f9a      	ldrb	r2, [r3, #30]
 800ca0c:	4b7b      	ldr	r3, [pc, #492]	; (800cbfc <tcp_slowtmr+0x264>)
 800ca0e:	781b      	ldrb	r3, [r3, #0]
 800ca10:	429a      	cmp	r2, r3
 800ca12:	d105      	bne.n	800ca20 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800ca14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca16:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ca18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1a:	68db      	ldr	r3, [r3, #12]
 800ca1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800ca1e:	e270      	b.n	800cf02 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800ca20:	4b76      	ldr	r3, [pc, #472]	; (800cbfc <tcp_slowtmr+0x264>)
 800ca22:	781a      	ldrb	r2, [r3, #0]
 800ca24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca26:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800ca28:	2300      	movs	r3, #0
 800ca2a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800ca2e:	2300      	movs	r3, #0
 800ca30:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800ca34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca36:	7d1b      	ldrb	r3, [r3, #20]
 800ca38:	2b02      	cmp	r3, #2
 800ca3a:	d10a      	bne.n	800ca52 <tcp_slowtmr+0xba>
 800ca3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca42:	2b05      	cmp	r3, #5
 800ca44:	d905      	bls.n	800ca52 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800ca46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca4a:	3301      	adds	r3, #1
 800ca4c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca50:	e11e      	b.n	800cc90 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800ca52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca54:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca58:	2b0b      	cmp	r3, #11
 800ca5a:	d905      	bls.n	800ca68 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800ca5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ca60:	3301      	adds	r3, #1
 800ca62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ca66:	e113      	b.n	800cc90 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800ca68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca6a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	d075      	beq.n	800cb5e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800ca72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca76:	2b00      	cmp	r3, #0
 800ca78:	d006      	beq.n	800ca88 <tcp_slowtmr+0xf0>
 800ca7a:	4b62      	ldr	r3, [pc, #392]	; (800cc04 <tcp_slowtmr+0x26c>)
 800ca7c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800ca80:	4965      	ldr	r1, [pc, #404]	; (800cc18 <tcp_slowtmr+0x280>)
 800ca82:	4862      	ldr	r0, [pc, #392]	; (800cc0c <tcp_slowtmr+0x274>)
 800ca84:	f007 fdf8 	bl	8014678 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800ca88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d106      	bne.n	800ca9e <tcp_slowtmr+0x106>
 800ca90:	4b5c      	ldr	r3, [pc, #368]	; (800cc04 <tcp_slowtmr+0x26c>)
 800ca92:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800ca96:	4961      	ldr	r1, [pc, #388]	; (800cc1c <tcp_slowtmr+0x284>)
 800ca98:	485c      	ldr	r0, [pc, #368]	; (800cc0c <tcp_slowtmr+0x274>)
 800ca9a:	f007 fded 	bl	8014678 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800ca9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caa0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800caa4:	2b0b      	cmp	r3, #11
 800caa6:	d905      	bls.n	800cab4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800caa8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800caac:	3301      	adds	r3, #1
 800caae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800cab2:	e0ed      	b.n	800cc90 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800cab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800caba:	3b01      	subs	r3, #1
 800cabc:	4a58      	ldr	r2, [pc, #352]	; (800cc20 <tcp_slowtmr+0x288>)
 800cabe:	5cd3      	ldrb	r3, [r2, r3]
 800cac0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800cac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cac8:	7c7a      	ldrb	r2, [r7, #17]
 800caca:	429a      	cmp	r2, r3
 800cacc:	d907      	bls.n	800cade <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800cace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cad4:	3301      	adds	r3, #1
 800cad6:	b2da      	uxtb	r2, r3
 800cad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cada:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800cade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cae0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800cae4:	7c7a      	ldrb	r2, [r7, #17]
 800cae6:	429a      	cmp	r2, r3
 800cae8:	f200 80d2 	bhi.w	800cc90 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800caec:	2301      	movs	r3, #1
 800caee:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800caf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d108      	bne.n	800cb0c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800cafa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cafc:	f004 fc2a 	bl	8011354 <tcp_zero_window_probe>
 800cb00:	4603      	mov	r3, r0
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d014      	beq.n	800cb30 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800cb06:	2300      	movs	r3, #0
 800cb08:	623b      	str	r3, [r7, #32]
 800cb0a:	e011      	b.n	800cb30 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800cb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800cb12:	4619      	mov	r1, r3
 800cb14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb16:	f003 faef 	bl	80100f8 <tcp_split_unsent_seg>
 800cb1a:	4603      	mov	r3, r0
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d107      	bne.n	800cb30 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800cb20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb22:	f003 fd6f 	bl	8010604 <tcp_output>
 800cb26:	4603      	mov	r3, r0
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d101      	bne.n	800cb30 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800cb30:	6a3b      	ldr	r3, [r7, #32]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	f000 80ac 	beq.w	800cc90 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800cb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800cb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb42:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cb46:	2b06      	cmp	r3, #6
 800cb48:	f200 80a2 	bhi.w	800cc90 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800cb4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb4e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800cb52:	3301      	adds	r3, #1
 800cb54:	b2da      	uxtb	r2, r3
 800cb56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb58:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800cb5c:	e098      	b.n	800cc90 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800cb5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb60:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	db0f      	blt.n	800cb88 <tcp_slowtmr+0x1f0>
 800cb68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb6e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cb72:	4293      	cmp	r3, r2
 800cb74:	d008      	beq.n	800cb88 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800cb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb78:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800cb7c:	b29b      	uxth	r3, r3
 800cb7e:	3301      	adds	r3, #1
 800cb80:	b29b      	uxth	r3, r3
 800cb82:	b21a      	sxth	r2, r3
 800cb84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb86:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800cb88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb8a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800cb8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb90:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cb94:	429a      	cmp	r2, r3
 800cb96:	db7b      	blt.n	800cc90 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800cb98:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb9a:	f004 f825 	bl	8010be8 <tcp_rexmit_rto_prepare>
 800cb9e:	4603      	mov	r3, r0
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d007      	beq.n	800cbb4 <tcp_slowtmr+0x21c>
 800cba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d171      	bne.n	800cc90 <tcp_slowtmr+0x2f8>
 800cbac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d06d      	beq.n	800cc90 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800cbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb6:	7d1b      	ldrb	r3, [r3, #20]
 800cbb8:	2b02      	cmp	r3, #2
 800cbba:	d03a      	beq.n	800cc32 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800cbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbbe:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cbc2:	2b0c      	cmp	r3, #12
 800cbc4:	bf28      	it	cs
 800cbc6:	230c      	movcs	r3, #12
 800cbc8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800cbca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbcc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800cbd0:	10db      	asrs	r3, r3, #3
 800cbd2:	b21b      	sxth	r3, r3
 800cbd4:	461a      	mov	r2, r3
 800cbd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbd8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800cbdc:	4413      	add	r3, r2
 800cbde:	7efa      	ldrb	r2, [r7, #27]
 800cbe0:	4910      	ldr	r1, [pc, #64]	; (800cc24 <tcp_slowtmr+0x28c>)
 800cbe2:	5c8a      	ldrb	r2, [r1, r2]
 800cbe4:	4093      	lsls	r3, r2
 800cbe6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800cbe8:	697b      	ldr	r3, [r7, #20]
 800cbea:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800cbee:	4293      	cmp	r3, r2
 800cbf0:	dc1a      	bgt.n	800cc28 <tcp_slowtmr+0x290>
 800cbf2:	697b      	ldr	r3, [r7, #20]
 800cbf4:	b21a      	sxth	r2, r3
 800cbf6:	e019      	b.n	800cc2c <tcp_slowtmr+0x294>
 800cbf8:	2000f1e8 	.word	0x2000f1e8
 800cbfc:	2000f1fe 	.word	0x2000f1fe
 800cc00:	2000f1f4 	.word	0x2000f1f4
 800cc04:	080160e4 	.word	0x080160e4
 800cc08:	08016428 	.word	0x08016428
 800cc0c:	08016128 	.word	0x08016128
 800cc10:	08016454 	.word	0x08016454
 800cc14:	08016480 	.word	0x08016480
 800cc18:	080164b0 	.word	0x080164b0
 800cc1c:	080164e4 	.word	0x080164e4
 800cc20:	08018120 	.word	0x08018120
 800cc24:	08018110 	.word	0x08018110
 800cc28:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800cc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800cc32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc34:	2200      	movs	r2, #0
 800cc36:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800cc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc3a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800cc3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc40:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800cc44:	4293      	cmp	r3, r2
 800cc46:	bf28      	it	cs
 800cc48:	4613      	movcs	r3, r2
 800cc4a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800cc4c:	8a7b      	ldrh	r3, [r7, #18]
 800cc4e:	085b      	lsrs	r3, r3, #1
 800cc50:	b29a      	uxth	r2, r3
 800cc52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc54:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cc5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc62:	005b      	lsls	r3, r3, #1
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d206      	bcs.n	800cc78 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cc6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cc6e:	005b      	lsls	r3, r3, #1
 800cc70:	b29a      	uxth	r2, r3
 800cc72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc74:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800cc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cc7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800cc82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc84:	2200      	movs	r2, #0
 800cc86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800cc8a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc8c:	f004 f81c 	bl	8010cc8 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800cc90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc92:	7d1b      	ldrb	r3, [r3, #20]
 800cc94:	2b06      	cmp	r3, #6
 800cc96:	d111      	bne.n	800ccbc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800cc98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc9a:	8b5b      	ldrh	r3, [r3, #26]
 800cc9c:	f003 0310 	and.w	r3, r3, #16
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	d00b      	beq.n	800ccbc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cca4:	4b9c      	ldr	r3, [pc, #624]	; (800cf18 <tcp_slowtmr+0x580>)
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccaa:	6a1b      	ldr	r3, [r3, #32]
 800ccac:	1ad3      	subs	r3, r2, r3
 800ccae:	2b28      	cmp	r3, #40	; 0x28
 800ccb0:	d904      	bls.n	800ccbc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800ccb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccb6:	3301      	adds	r3, #1
 800ccb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800ccbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccbe:	7a5b      	ldrb	r3, [r3, #9]
 800ccc0:	f003 0308 	and.w	r3, r3, #8
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d04a      	beq.n	800cd5e <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800ccc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccca:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cccc:	2b04      	cmp	r3, #4
 800ccce:	d003      	beq.n	800ccd8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800ccd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800ccd4:	2b07      	cmp	r3, #7
 800ccd6:	d142      	bne.n	800cd5e <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ccd8:	4b8f      	ldr	r3, [pc, #572]	; (800cf18 <tcp_slowtmr+0x580>)
 800ccda:	681a      	ldr	r2, [r3, #0]
 800ccdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccde:	6a1b      	ldr	r3, [r3, #32]
 800cce0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cce2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cce4:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cce8:	4b8c      	ldr	r3, [pc, #560]	; (800cf1c <tcp_slowtmr+0x584>)
 800ccea:	440b      	add	r3, r1
 800ccec:	498c      	ldr	r1, [pc, #560]	; (800cf20 <tcp_slowtmr+0x588>)
 800ccee:	fba1 1303 	umull	r1, r3, r1, r3
 800ccf2:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	d90a      	bls.n	800cd0e <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800ccf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ccfc:	3301      	adds	r3, #1
 800ccfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800cd02:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cd06:	3301      	adds	r3, #1
 800cd08:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cd0c:	e027      	b.n	800cd5e <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd0e:	4b82      	ldr	r3, [pc, #520]	; (800cf18 <tcp_slowtmr+0x580>)
 800cd10:	681a      	ldr	r2, [r3, #0]
 800cd12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd14:	6a1b      	ldr	r3, [r3, #32]
 800cd16:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd1a:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cd1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd20:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cd24:	4618      	mov	r0, r3
 800cd26:	4b7f      	ldr	r3, [pc, #508]	; (800cf24 <tcp_slowtmr+0x58c>)
 800cd28:	fb00 f303 	mul.w	r3, r0, r3
 800cd2c:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cd2e:	497c      	ldr	r1, [pc, #496]	; (800cf20 <tcp_slowtmr+0x588>)
 800cd30:	fba1 1303 	umull	r1, r3, r1, r3
 800cd34:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd36:	429a      	cmp	r2, r3
 800cd38:	d911      	bls.n	800cd5e <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800cd3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd3c:	f004 faca 	bl	80112d4 <tcp_keepalive>
 800cd40:	4603      	mov	r3, r0
 800cd42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cd46:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d107      	bne.n	800cd5e <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800cd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd50:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cd54:	3301      	adds	r3, #1
 800cd56:	b2da      	uxtb	r2, r3
 800cd58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5a:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cd5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cd62:	2b00      	cmp	r3, #0
 800cd64:	d011      	beq.n	800cd8a <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cd66:	4b6c      	ldr	r3, [pc, #432]	; (800cf18 <tcp_slowtmr+0x580>)
 800cd68:	681a      	ldr	r2, [r3, #0]
 800cd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6c:	6a1b      	ldr	r3, [r3, #32]
 800cd6e:	1ad2      	subs	r2, r2, r3
 800cd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd72:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cd76:	4619      	mov	r1, r3
 800cd78:	460b      	mov	r3, r1
 800cd7a:	005b      	lsls	r3, r3, #1
 800cd7c:	440b      	add	r3, r1
 800cd7e:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d302      	bcc.n	800cd8a <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cd84:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cd86:	f000 fddd 	bl	800d944 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800cd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd8c:	7d1b      	ldrb	r3, [r3, #20]
 800cd8e:	2b03      	cmp	r3, #3
 800cd90:	d10b      	bne.n	800cdaa <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cd92:	4b61      	ldr	r3, [pc, #388]	; (800cf18 <tcp_slowtmr+0x580>)
 800cd94:	681a      	ldr	r2, [r3, #0]
 800cd96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd98:	6a1b      	ldr	r3, [r3, #32]
 800cd9a:	1ad3      	subs	r3, r2, r3
 800cd9c:	2b28      	cmp	r3, #40	; 0x28
 800cd9e:	d904      	bls.n	800cdaa <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800cda0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cda4:	3301      	adds	r3, #1
 800cda6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cdaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdac:	7d1b      	ldrb	r3, [r3, #20]
 800cdae:	2b09      	cmp	r3, #9
 800cdb0:	d10b      	bne.n	800cdca <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cdb2:	4b59      	ldr	r3, [pc, #356]	; (800cf18 <tcp_slowtmr+0x580>)
 800cdb4:	681a      	ldr	r2, [r3, #0]
 800cdb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdb8:	6a1b      	ldr	r3, [r3, #32]
 800cdba:	1ad3      	subs	r3, r2, r3
 800cdbc:	2bf0      	cmp	r3, #240	; 0xf0
 800cdbe:	d904      	bls.n	800cdca <tcp_slowtmr+0x432>
        ++pcb_remove;
 800cdc0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdc4:	3301      	adds	r3, #1
 800cdc6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cdca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d060      	beq.n	800ce94 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cdd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cdd8:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cdda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cddc:	f000 fbfe 	bl	800d5dc <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cde0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d010      	beq.n	800ce08 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cde6:	4b50      	ldr	r3, [pc, #320]	; (800cf28 <tcp_slowtmr+0x590>)
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d106      	bne.n	800cdfe <tcp_slowtmr+0x466>
 800cdf0:	4b4e      	ldr	r3, [pc, #312]	; (800cf2c <tcp_slowtmr+0x594>)
 800cdf2:	f240 526d 	movw	r2, #1389	; 0x56d
 800cdf6:	494e      	ldr	r1, [pc, #312]	; (800cf30 <tcp_slowtmr+0x598>)
 800cdf8:	484e      	ldr	r0, [pc, #312]	; (800cf34 <tcp_slowtmr+0x59c>)
 800cdfa:	f007 fc3d 	bl	8014678 <iprintf>
        prev->next = pcb->next;
 800cdfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce00:	68da      	ldr	r2, [r3, #12]
 800ce02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce04:	60da      	str	r2, [r3, #12]
 800ce06:	e00f      	b.n	800ce28 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800ce08:	4b47      	ldr	r3, [pc, #284]	; (800cf28 <tcp_slowtmr+0x590>)
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d006      	beq.n	800ce20 <tcp_slowtmr+0x488>
 800ce12:	4b46      	ldr	r3, [pc, #280]	; (800cf2c <tcp_slowtmr+0x594>)
 800ce14:	f240 5271 	movw	r2, #1393	; 0x571
 800ce18:	4947      	ldr	r1, [pc, #284]	; (800cf38 <tcp_slowtmr+0x5a0>)
 800ce1a:	4846      	ldr	r0, [pc, #280]	; (800cf34 <tcp_slowtmr+0x59c>)
 800ce1c:	f007 fc2c 	bl	8014678 <iprintf>
        tcp_active_pcbs = pcb->next;
 800ce20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce22:	68db      	ldr	r3, [r3, #12]
 800ce24:	4a40      	ldr	r2, [pc, #256]	; (800cf28 <tcp_slowtmr+0x590>)
 800ce26:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800ce28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d013      	beq.n	800ce58 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800ce30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce32:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800ce34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce36:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800ce38:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800ce3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3c:	3304      	adds	r3, #4
 800ce3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce40:	8ad2      	ldrh	r2, [r2, #22]
 800ce42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ce44:	8b09      	ldrh	r1, [r1, #24]
 800ce46:	9102      	str	r1, [sp, #8]
 800ce48:	9201      	str	r2, [sp, #4]
 800ce4a:	9300      	str	r3, [sp, #0]
 800ce4c:	462b      	mov	r3, r5
 800ce4e:	4622      	mov	r2, r4
 800ce50:	4601      	mov	r1, r0
 800ce52:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ce54:	f004 f98a 	bl	801116c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ce58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce5a:	691b      	ldr	r3, [r3, #16]
 800ce5c:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ce5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce60:	7d1b      	ldrb	r3, [r3, #20]
 800ce62:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ce64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce66:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6a:	68db      	ldr	r3, [r3, #12]
 800ce6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ce6e:	6838      	ldr	r0, [r7, #0]
 800ce70:	f7ff f9f4 	bl	800c25c <tcp_free>

      tcp_active_pcbs_changed = 0;
 800ce74:	4b31      	ldr	r3, [pc, #196]	; (800cf3c <tcp_slowtmr+0x5a4>)
 800ce76:	2200      	movs	r2, #0
 800ce78:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d004      	beq.n	800ce8a <tcp_slowtmr+0x4f2>
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f06f 010c 	mvn.w	r1, #12
 800ce86:	68b8      	ldr	r0, [r7, #8]
 800ce88:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800ce8a:	4b2c      	ldr	r3, [pc, #176]	; (800cf3c <tcp_slowtmr+0x5a4>)
 800ce8c:	781b      	ldrb	r3, [r3, #0]
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d037      	beq.n	800cf02 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ce92:	e592      	b.n	800c9ba <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ce94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce96:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ce98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce9a:	68db      	ldr	r3, [r3, #12]
 800ce9c:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ce9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea0:	7f1b      	ldrb	r3, [r3, #28]
 800cea2:	3301      	adds	r3, #1
 800cea4:	b2da      	uxtb	r2, r3
 800cea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cea8:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800ceaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceac:	7f1a      	ldrb	r2, [r3, #28]
 800ceae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb0:	7f5b      	ldrb	r3, [r3, #29]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	d325      	bcc.n	800cf02 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800ceb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ceb8:	2200      	movs	r2, #0
 800ceba:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800cebc:	4b1f      	ldr	r3, [pc, #124]	; (800cf3c <tcp_slowtmr+0x5a4>)
 800cebe:	2200      	movs	r2, #0
 800cec0:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d00b      	beq.n	800cee4 <tcp_slowtmr+0x54c>
 800cecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cece:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ced2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ced4:	6912      	ldr	r2, [r2, #16]
 800ced6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ced8:	4610      	mov	r0, r2
 800ceda:	4798      	blx	r3
 800cedc:	4603      	mov	r3, r0
 800cede:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cee2:	e002      	b.n	800ceea <tcp_slowtmr+0x552>
 800cee4:	2300      	movs	r3, #0
 800cee6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800ceea:	4b14      	ldr	r3, [pc, #80]	; (800cf3c <tcp_slowtmr+0x5a4>)
 800ceec:	781b      	ldrb	r3, [r3, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d000      	beq.n	800cef4 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800cef2:	e562      	b.n	800c9ba <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cef4:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d102      	bne.n	800cf02 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800cefc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cefe:	f003 fb81 	bl	8010604 <tcp_output>
  while (pcb != NULL) {
 800cf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	f47f ad5e 	bne.w	800c9c6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800cf0e:	4b0c      	ldr	r3, [pc, #48]	; (800cf40 <tcp_slowtmr+0x5a8>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cf14:	e069      	b.n	800cfea <tcp_slowtmr+0x652>
 800cf16:	bf00      	nop
 800cf18:	2000f1e8 	.word	0x2000f1e8
 800cf1c:	000a4cb8 	.word	0x000a4cb8
 800cf20:	10624dd3 	.word	0x10624dd3
 800cf24:	000124f8 	.word	0x000124f8
 800cf28:	2000f1f4 	.word	0x2000f1f4
 800cf2c:	080160e4 	.word	0x080160e4
 800cf30:	0801651c 	.word	0x0801651c
 800cf34:	08016128 	.word	0x08016128
 800cf38:	08016548 	.word	0x08016548
 800cf3c:	2000f1fc 	.word	0x2000f1fc
 800cf40:	2000f1f8 	.word	0x2000f1f8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cf44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf46:	7d1b      	ldrb	r3, [r3, #20]
 800cf48:	2b0a      	cmp	r3, #10
 800cf4a:	d006      	beq.n	800cf5a <tcp_slowtmr+0x5c2>
 800cf4c:	4b2b      	ldr	r3, [pc, #172]	; (800cffc <tcp_slowtmr+0x664>)
 800cf4e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cf52:	492b      	ldr	r1, [pc, #172]	; (800d000 <tcp_slowtmr+0x668>)
 800cf54:	482b      	ldr	r0, [pc, #172]	; (800d004 <tcp_slowtmr+0x66c>)
 800cf56:	f007 fb8f 	bl	8014678 <iprintf>
    pcb_remove = 0;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cf60:	4b29      	ldr	r3, [pc, #164]	; (800d008 <tcp_slowtmr+0x670>)
 800cf62:	681a      	ldr	r2, [r3, #0]
 800cf64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf66:	6a1b      	ldr	r3, [r3, #32]
 800cf68:	1ad3      	subs	r3, r2, r3
 800cf6a:	2bf0      	cmp	r3, #240	; 0xf0
 800cf6c:	d904      	bls.n	800cf78 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cf6e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf72:	3301      	adds	r3, #1
 800cf74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cf78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d02f      	beq.n	800cfe0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cf80:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf82:	f000 fb2b 	bl	800d5dc <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cf86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d010      	beq.n	800cfae <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cf8c:	4b1f      	ldr	r3, [pc, #124]	; (800d00c <tcp_slowtmr+0x674>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d106      	bne.n	800cfa4 <tcp_slowtmr+0x60c>
 800cf96:	4b19      	ldr	r3, [pc, #100]	; (800cffc <tcp_slowtmr+0x664>)
 800cf98:	f240 52af 	movw	r2, #1455	; 0x5af
 800cf9c:	491c      	ldr	r1, [pc, #112]	; (800d010 <tcp_slowtmr+0x678>)
 800cf9e:	4819      	ldr	r0, [pc, #100]	; (800d004 <tcp_slowtmr+0x66c>)
 800cfa0:	f007 fb6a 	bl	8014678 <iprintf>
        prev->next = pcb->next;
 800cfa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfa6:	68da      	ldr	r2, [r3, #12]
 800cfa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfaa:	60da      	str	r2, [r3, #12]
 800cfac:	e00f      	b.n	800cfce <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800cfae:	4b17      	ldr	r3, [pc, #92]	; (800d00c <tcp_slowtmr+0x674>)
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfb4:	429a      	cmp	r2, r3
 800cfb6:	d006      	beq.n	800cfc6 <tcp_slowtmr+0x62e>
 800cfb8:	4b10      	ldr	r3, [pc, #64]	; (800cffc <tcp_slowtmr+0x664>)
 800cfba:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800cfbe:	4915      	ldr	r1, [pc, #84]	; (800d014 <tcp_slowtmr+0x67c>)
 800cfc0:	4810      	ldr	r0, [pc, #64]	; (800d004 <tcp_slowtmr+0x66c>)
 800cfc2:	f007 fb59 	bl	8014678 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800cfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfc8:	68db      	ldr	r3, [r3, #12]
 800cfca:	4a10      	ldr	r2, [pc, #64]	; (800d00c <tcp_slowtmr+0x674>)
 800cfcc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800cfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800cfd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800cfd8:	69f8      	ldr	r0, [r7, #28]
 800cfda:	f7ff f93f 	bl	800c25c <tcp_free>
 800cfde:	e004      	b.n	800cfea <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800cfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800cfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfe6:	68db      	ldr	r3, [r3, #12]
 800cfe8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cfea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	d1a9      	bne.n	800cf44 <tcp_slowtmr+0x5ac>
    }
  }
}
 800cff0:	bf00      	nop
 800cff2:	bf00      	nop
 800cff4:	3730      	adds	r7, #48	; 0x30
 800cff6:	46bd      	mov	sp, r7
 800cff8:	bdb0      	pop	{r4, r5, r7, pc}
 800cffa:	bf00      	nop
 800cffc:	080160e4 	.word	0x080160e4
 800d000:	08016574 	.word	0x08016574
 800d004:	08016128 	.word	0x08016128
 800d008:	2000f1e8 	.word	0x2000f1e8
 800d00c:	2000f1f8 	.word	0x2000f1f8
 800d010:	080165a4 	.word	0x080165a4
 800d014:	080165cc 	.word	0x080165cc

0800d018 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800d018:	b580      	push	{r7, lr}
 800d01a:	b082      	sub	sp, #8
 800d01c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800d01e:	4b2d      	ldr	r3, [pc, #180]	; (800d0d4 <tcp_fasttmr+0xbc>)
 800d020:	781b      	ldrb	r3, [r3, #0]
 800d022:	3301      	adds	r3, #1
 800d024:	b2da      	uxtb	r2, r3
 800d026:	4b2b      	ldr	r3, [pc, #172]	; (800d0d4 <tcp_fasttmr+0xbc>)
 800d028:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800d02a:	4b2b      	ldr	r3, [pc, #172]	; (800d0d8 <tcp_fasttmr+0xc0>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d030:	e048      	b.n	800d0c4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800d032:	687b      	ldr	r3, [r7, #4]
 800d034:	7f9a      	ldrb	r2, [r3, #30]
 800d036:	4b27      	ldr	r3, [pc, #156]	; (800d0d4 <tcp_fasttmr+0xbc>)
 800d038:	781b      	ldrb	r3, [r3, #0]
 800d03a:	429a      	cmp	r2, r3
 800d03c:	d03f      	beq.n	800d0be <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800d03e:	4b25      	ldr	r3, [pc, #148]	; (800d0d4 <tcp_fasttmr+0xbc>)
 800d040:	781a      	ldrb	r2, [r3, #0]
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	8b5b      	ldrh	r3, [r3, #26]
 800d04a:	f003 0301 	and.w	r3, r3, #1
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d010      	beq.n	800d074 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	8b5b      	ldrh	r3, [r3, #26]
 800d056:	f043 0302 	orr.w	r3, r3, #2
 800d05a:	b29a      	uxth	r2, r3
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f003 facf 	bl	8010604 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	8b5b      	ldrh	r3, [r3, #26]
 800d06a:	f023 0303 	bic.w	r3, r3, #3
 800d06e:	b29a      	uxth	r2, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	8b5b      	ldrh	r3, [r3, #26]
 800d078:	f003 0308 	and.w	r3, r3, #8
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d009      	beq.n	800d094 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	8b5b      	ldrh	r3, [r3, #26]
 800d084:	f023 0308 	bic.w	r3, r3, #8
 800d088:	b29a      	uxth	r2, r3
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f7ff fa78 	bl	800c584 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	68db      	ldr	r3, [r3, #12]
 800d098:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d00a      	beq.n	800d0b8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800d0a2:	4b0e      	ldr	r3, [pc, #56]	; (800d0dc <tcp_fasttmr+0xc4>)
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800d0a8:	6878      	ldr	r0, [r7, #4]
 800d0aa:	f000 f819 	bl	800d0e0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800d0ae:	4b0b      	ldr	r3, [pc, #44]	; (800d0dc <tcp_fasttmr+0xc4>)
 800d0b0:	781b      	ldrb	r3, [r3, #0]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d000      	beq.n	800d0b8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800d0b6:	e7b8      	b.n	800d02a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800d0b8:	683b      	ldr	r3, [r7, #0]
 800d0ba:	607b      	str	r3, [r7, #4]
 800d0bc:	e002      	b.n	800d0c4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	68db      	ldr	r3, [r3, #12]
 800d0c2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	2b00      	cmp	r3, #0
 800d0c8:	d1b3      	bne.n	800d032 <tcp_fasttmr+0x1a>
    }
  }
}
 800d0ca:	bf00      	nop
 800d0cc:	bf00      	nop
 800d0ce:	3708      	adds	r7, #8
 800d0d0:	46bd      	mov	sp, r7
 800d0d2:	bd80      	pop	{r7, pc}
 800d0d4:	2000f1fe 	.word	0x2000f1fe
 800d0d8:	2000f1f4 	.word	0x2000f1f4
 800d0dc:	2000f1fc 	.word	0x2000f1fc

0800d0e0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800d0e0:	b590      	push	{r4, r7, lr}
 800d0e2:	b085      	sub	sp, #20
 800d0e4:	af00      	add	r7, sp, #0
 800d0e6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d109      	bne.n	800d102 <tcp_process_refused_data+0x22>
 800d0ee:	4b37      	ldr	r3, [pc, #220]	; (800d1cc <tcp_process_refused_data+0xec>)
 800d0f0:	f240 6209 	movw	r2, #1545	; 0x609
 800d0f4:	4936      	ldr	r1, [pc, #216]	; (800d1d0 <tcp_process_refused_data+0xf0>)
 800d0f6:	4837      	ldr	r0, [pc, #220]	; (800d1d4 <tcp_process_refused_data+0xf4>)
 800d0f8:	f007 fabe 	bl	8014678 <iprintf>
 800d0fc:	f06f 030f 	mvn.w	r3, #15
 800d100:	e060      	b.n	800d1c4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d106:	7b5b      	ldrb	r3, [r3, #13]
 800d108:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d10e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	2200      	movs	r2, #0
 800d114:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00b      	beq.n	800d138 <tcp_process_refused_data+0x58>
 800d120:	687b      	ldr	r3, [r7, #4]
 800d122:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	6918      	ldr	r0, [r3, #16]
 800d12a:	2300      	movs	r3, #0
 800d12c:	68ba      	ldr	r2, [r7, #8]
 800d12e:	6879      	ldr	r1, [r7, #4]
 800d130:	47a0      	blx	r4
 800d132:	4603      	mov	r3, r0
 800d134:	73fb      	strb	r3, [r7, #15]
 800d136:	e007      	b.n	800d148 <tcp_process_refused_data+0x68>
 800d138:	2300      	movs	r3, #0
 800d13a:	68ba      	ldr	r2, [r7, #8]
 800d13c:	6879      	ldr	r1, [r7, #4]
 800d13e:	2000      	movs	r0, #0
 800d140:	f000 f8a4 	bl	800d28c <tcp_recv_null>
 800d144:	4603      	mov	r3, r0
 800d146:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800d148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d12a      	bne.n	800d1a6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800d150:	7bbb      	ldrb	r3, [r7, #14]
 800d152:	f003 0320 	and.w	r3, r3, #32
 800d156:	2b00      	cmp	r3, #0
 800d158:	d033      	beq.n	800d1c2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d15e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d162:	d005      	beq.n	800d170 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d168:	3301      	adds	r3, #1
 800d16a:	b29a      	uxth	r2, r3
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d176:	2b00      	cmp	r3, #0
 800d178:	d00b      	beq.n	800d192 <tcp_process_refused_data+0xb2>
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	6918      	ldr	r0, [r3, #16]
 800d184:	2300      	movs	r3, #0
 800d186:	2200      	movs	r2, #0
 800d188:	6879      	ldr	r1, [r7, #4]
 800d18a:	47a0      	blx	r4
 800d18c:	4603      	mov	r3, r0
 800d18e:	73fb      	strb	r3, [r7, #15]
 800d190:	e001      	b.n	800d196 <tcp_process_refused_data+0xb6>
 800d192:	2300      	movs	r3, #0
 800d194:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800d196:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d19a:	f113 0f0d 	cmn.w	r3, #13
 800d19e:	d110      	bne.n	800d1c2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800d1a0:	f06f 030c 	mvn.w	r3, #12
 800d1a4:	e00e      	b.n	800d1c4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800d1a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d1aa:	f113 0f0d 	cmn.w	r3, #13
 800d1ae:	d102      	bne.n	800d1b6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d1b0:	f06f 030c 	mvn.w	r3, #12
 800d1b4:	e006      	b.n	800d1c4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	68ba      	ldr	r2, [r7, #8]
 800d1ba:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d1bc:	f06f 0304 	mvn.w	r3, #4
 800d1c0:	e000      	b.n	800d1c4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d1c2:	2300      	movs	r3, #0
}
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	3714      	adds	r7, #20
 800d1c8:	46bd      	mov	sp, r7
 800d1ca:	bd90      	pop	{r4, r7, pc}
 800d1cc:	080160e4 	.word	0x080160e4
 800d1d0:	080165f4 	.word	0x080165f4
 800d1d4:	08016128 	.word	0x08016128

0800d1d8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d1d8:	b580      	push	{r7, lr}
 800d1da:	b084      	sub	sp, #16
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d1e0:	e007      	b.n	800d1f2 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d1e8:	6878      	ldr	r0, [r7, #4]
 800d1ea:	f000 f80a 	bl	800d202 <tcp_seg_free>
    seg = next;
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d1f4      	bne.n	800d1e2 <tcp_segs_free+0xa>
  }
}
 800d1f8:	bf00      	nop
 800d1fa:	bf00      	nop
 800d1fc:	3710      	adds	r7, #16
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd80      	pop	{r7, pc}

0800d202 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d202:	b580      	push	{r7, lr}
 800d204:	b082      	sub	sp, #8
 800d206:	af00      	add	r7, sp, #0
 800d208:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d00c      	beq.n	800d22a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	685b      	ldr	r3, [r3, #4]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d004      	beq.n	800d222 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	685b      	ldr	r3, [r3, #4]
 800d21c:	4618      	mov	r0, r3
 800d21e:	f7fe fd71 	bl	800bd04 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d222:	6879      	ldr	r1, [r7, #4]
 800d224:	2003      	movs	r0, #3
 800d226:	f7fd fec9 	bl	800afbc <memp_free>
  }
}
 800d22a:	bf00      	nop
 800d22c:	3708      	adds	r7, #8
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}
	...

0800d234 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d234:	b580      	push	{r7, lr}
 800d236:	b084      	sub	sp, #16
 800d238:	af00      	add	r7, sp, #0
 800d23a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d106      	bne.n	800d250 <tcp_seg_copy+0x1c>
 800d242:	4b0f      	ldr	r3, [pc, #60]	; (800d280 <tcp_seg_copy+0x4c>)
 800d244:	f240 6282 	movw	r2, #1666	; 0x682
 800d248:	490e      	ldr	r1, [pc, #56]	; (800d284 <tcp_seg_copy+0x50>)
 800d24a:	480f      	ldr	r0, [pc, #60]	; (800d288 <tcp_seg_copy+0x54>)
 800d24c:	f007 fa14 	bl	8014678 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d250:	2003      	movs	r0, #3
 800d252:	f7fd fe3d 	bl	800aed0 <memp_malloc>
 800d256:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d101      	bne.n	800d262 <tcp_seg_copy+0x2e>
    return NULL;
 800d25e:	2300      	movs	r3, #0
 800d260:	e00a      	b.n	800d278 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d262:	2210      	movs	r2, #16
 800d264:	6879      	ldr	r1, [r7, #4]
 800d266:	68f8      	ldr	r0, [r7, #12]
 800d268:	f007 f95b 	bl	8014522 <memcpy>
  pbuf_ref(cseg->p);
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	4618      	mov	r0, r3
 800d272:	f7fe fded 	bl	800be50 <pbuf_ref>
  return cseg;
 800d276:	68fb      	ldr	r3, [r7, #12]
}
 800d278:	4618      	mov	r0, r3
 800d27a:	3710      	adds	r7, #16
 800d27c:	46bd      	mov	sp, r7
 800d27e:	bd80      	pop	{r7, pc}
 800d280:	080160e4 	.word	0x080160e4
 800d284:	08016638 	.word	0x08016638
 800d288:	08016128 	.word	0x08016128

0800d28c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d28c:	b580      	push	{r7, lr}
 800d28e:	b084      	sub	sp, #16
 800d290:	af00      	add	r7, sp, #0
 800d292:	60f8      	str	r0, [r7, #12]
 800d294:	60b9      	str	r1, [r7, #8]
 800d296:	607a      	str	r2, [r7, #4]
 800d298:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d109      	bne.n	800d2b4 <tcp_recv_null+0x28>
 800d2a0:	4b12      	ldr	r3, [pc, #72]	; (800d2ec <tcp_recv_null+0x60>)
 800d2a2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d2a6:	4912      	ldr	r1, [pc, #72]	; (800d2f0 <tcp_recv_null+0x64>)
 800d2a8:	4812      	ldr	r0, [pc, #72]	; (800d2f4 <tcp_recv_null+0x68>)
 800d2aa:	f007 f9e5 	bl	8014678 <iprintf>
 800d2ae:	f06f 030f 	mvn.w	r3, #15
 800d2b2:	e016      	b.n	800d2e2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	2b00      	cmp	r3, #0
 800d2b8:	d009      	beq.n	800d2ce <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	891b      	ldrh	r3, [r3, #8]
 800d2be:	4619      	mov	r1, r3
 800d2c0:	68b8      	ldr	r0, [r7, #8]
 800d2c2:	f7ff fb19 	bl	800c8f8 <tcp_recved>
    pbuf_free(p);
 800d2c6:	6878      	ldr	r0, [r7, #4]
 800d2c8:	f7fe fd1c 	bl	800bd04 <pbuf_free>
 800d2cc:	e008      	b.n	800d2e0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d2ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d104      	bne.n	800d2e0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d2d6:	68b8      	ldr	r0, [r7, #8]
 800d2d8:	f7ff f9be 	bl	800c658 <tcp_close>
 800d2dc:	4603      	mov	r3, r0
 800d2de:	e000      	b.n	800d2e2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d2e0:	2300      	movs	r3, #0
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3710      	adds	r7, #16
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	080160e4 	.word	0x080160e4
 800d2f0:	08016654 	.word	0x08016654
 800d2f4:	08016128 	.word	0x08016128

0800d2f8 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b086      	sub	sp, #24
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	4603      	mov	r3, r0
 800d300:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d302:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d306:	2b00      	cmp	r3, #0
 800d308:	db01      	blt.n	800d30e <tcp_kill_prio+0x16>
 800d30a:	79fb      	ldrb	r3, [r7, #7]
 800d30c:	e000      	b.n	800d310 <tcp_kill_prio+0x18>
 800d30e:	237f      	movs	r3, #127	; 0x7f
 800d310:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d312:	7afb      	ldrb	r3, [r7, #11]
 800d314:	2b00      	cmp	r3, #0
 800d316:	d034      	beq.n	800d382 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d318:	7afb      	ldrb	r3, [r7, #11]
 800d31a:	3b01      	subs	r3, #1
 800d31c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d31e:	2300      	movs	r3, #0
 800d320:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d322:	2300      	movs	r3, #0
 800d324:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d326:	4b19      	ldr	r3, [pc, #100]	; (800d38c <tcp_kill_prio+0x94>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	617b      	str	r3, [r7, #20]
 800d32c:	e01f      	b.n	800d36e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	7d5b      	ldrb	r3, [r3, #21]
 800d332:	7afa      	ldrb	r2, [r7, #11]
 800d334:	429a      	cmp	r2, r3
 800d336:	d80c      	bhi.n	800d352 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d338:	697b      	ldr	r3, [r7, #20]
 800d33a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d33c:	7afa      	ldrb	r2, [r7, #11]
 800d33e:	429a      	cmp	r2, r3
 800d340:	d112      	bne.n	800d368 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d342:	4b13      	ldr	r3, [pc, #76]	; (800d390 <tcp_kill_prio+0x98>)
 800d344:	681a      	ldr	r2, [r3, #0]
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	6a1b      	ldr	r3, [r3, #32]
 800d34a:	1ad3      	subs	r3, r2, r3
 800d34c:	68fa      	ldr	r2, [r7, #12]
 800d34e:	429a      	cmp	r2, r3
 800d350:	d80a      	bhi.n	800d368 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d352:	4b0f      	ldr	r3, [pc, #60]	; (800d390 <tcp_kill_prio+0x98>)
 800d354:	681a      	ldr	r2, [r3, #0]
 800d356:	697b      	ldr	r3, [r7, #20]
 800d358:	6a1b      	ldr	r3, [r3, #32]
 800d35a:	1ad3      	subs	r3, r2, r3
 800d35c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d35e:	697b      	ldr	r3, [r7, #20]
 800d360:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	7d5b      	ldrb	r3, [r3, #21]
 800d366:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d368:	697b      	ldr	r3, [r7, #20]
 800d36a:	68db      	ldr	r3, [r3, #12]
 800d36c:	617b      	str	r3, [r7, #20]
 800d36e:	697b      	ldr	r3, [r7, #20]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d1dc      	bne.n	800d32e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d004      	beq.n	800d384 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d37a:	6938      	ldr	r0, [r7, #16]
 800d37c:	f7ff fa56 	bl	800c82c <tcp_abort>
 800d380:	e000      	b.n	800d384 <tcp_kill_prio+0x8c>
    return;
 800d382:	bf00      	nop
  }
}
 800d384:	3718      	adds	r7, #24
 800d386:	46bd      	mov	sp, r7
 800d388:	bd80      	pop	{r7, pc}
 800d38a:	bf00      	nop
 800d38c:	2000f1f4 	.word	0x2000f1f4
 800d390:	2000f1e8 	.word	0x2000f1e8

0800d394 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b086      	sub	sp, #24
 800d398:	af00      	add	r7, sp, #0
 800d39a:	4603      	mov	r3, r0
 800d39c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d39e:	79fb      	ldrb	r3, [r7, #7]
 800d3a0:	2b08      	cmp	r3, #8
 800d3a2:	d009      	beq.n	800d3b8 <tcp_kill_state+0x24>
 800d3a4:	79fb      	ldrb	r3, [r7, #7]
 800d3a6:	2b09      	cmp	r3, #9
 800d3a8:	d006      	beq.n	800d3b8 <tcp_kill_state+0x24>
 800d3aa:	4b1a      	ldr	r3, [pc, #104]	; (800d414 <tcp_kill_state+0x80>)
 800d3ac:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d3b0:	4919      	ldr	r1, [pc, #100]	; (800d418 <tcp_kill_state+0x84>)
 800d3b2:	481a      	ldr	r0, [pc, #104]	; (800d41c <tcp_kill_state+0x88>)
 800d3b4:	f007 f960 	bl	8014678 <iprintf>

  inactivity = 0;
 800d3b8:	2300      	movs	r3, #0
 800d3ba:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d3bc:	2300      	movs	r3, #0
 800d3be:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3c0:	4b17      	ldr	r3, [pc, #92]	; (800d420 <tcp_kill_state+0x8c>)
 800d3c2:	681b      	ldr	r3, [r3, #0]
 800d3c4:	617b      	str	r3, [r7, #20]
 800d3c6:	e017      	b.n	800d3f8 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d3c8:	697b      	ldr	r3, [r7, #20]
 800d3ca:	7d1b      	ldrb	r3, [r3, #20]
 800d3cc:	79fa      	ldrb	r2, [r7, #7]
 800d3ce:	429a      	cmp	r2, r3
 800d3d0:	d10f      	bne.n	800d3f2 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d3d2:	4b14      	ldr	r3, [pc, #80]	; (800d424 <tcp_kill_state+0x90>)
 800d3d4:	681a      	ldr	r2, [r3, #0]
 800d3d6:	697b      	ldr	r3, [r7, #20]
 800d3d8:	6a1b      	ldr	r3, [r3, #32]
 800d3da:	1ad3      	subs	r3, r2, r3
 800d3dc:	68fa      	ldr	r2, [r7, #12]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d807      	bhi.n	800d3f2 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d3e2:	4b10      	ldr	r3, [pc, #64]	; (800d424 <tcp_kill_state+0x90>)
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	697b      	ldr	r3, [r7, #20]
 800d3e8:	6a1b      	ldr	r3, [r3, #32]
 800d3ea:	1ad3      	subs	r3, r2, r3
 800d3ec:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	68db      	ldr	r3, [r3, #12]
 800d3f6:	617b      	str	r3, [r7, #20]
 800d3f8:	697b      	ldr	r3, [r7, #20]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d1e4      	bne.n	800d3c8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d3fe:	693b      	ldr	r3, [r7, #16]
 800d400:	2b00      	cmp	r3, #0
 800d402:	d003      	beq.n	800d40c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d404:	2100      	movs	r1, #0
 800d406:	6938      	ldr	r0, [r7, #16]
 800d408:	f7ff f952 	bl	800c6b0 <tcp_abandon>
  }
}
 800d40c:	bf00      	nop
 800d40e:	3718      	adds	r7, #24
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}
 800d414:	080160e4 	.word	0x080160e4
 800d418:	08016670 	.word	0x08016670
 800d41c:	08016128 	.word	0x08016128
 800d420:	2000f1f4 	.word	0x2000f1f4
 800d424:	2000f1e8 	.word	0x2000f1e8

0800d428 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b084      	sub	sp, #16
 800d42c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d42e:	2300      	movs	r3, #0
 800d430:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d432:	2300      	movs	r3, #0
 800d434:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d436:	4b12      	ldr	r3, [pc, #72]	; (800d480 <tcp_kill_timewait+0x58>)
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	60fb      	str	r3, [r7, #12]
 800d43c:	e012      	b.n	800d464 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d43e:	4b11      	ldr	r3, [pc, #68]	; (800d484 <tcp_kill_timewait+0x5c>)
 800d440:	681a      	ldr	r2, [r3, #0]
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	6a1b      	ldr	r3, [r3, #32]
 800d446:	1ad3      	subs	r3, r2, r3
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	429a      	cmp	r2, r3
 800d44c:	d807      	bhi.n	800d45e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d44e:	4b0d      	ldr	r3, [pc, #52]	; (800d484 <tcp_kill_timewait+0x5c>)
 800d450:	681a      	ldr	r2, [r3, #0]
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	6a1b      	ldr	r3, [r3, #32]
 800d456:	1ad3      	subs	r3, r2, r3
 800d458:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	68db      	ldr	r3, [r3, #12]
 800d462:	60fb      	str	r3, [r7, #12]
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d1e9      	bne.n	800d43e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d46a:	68bb      	ldr	r3, [r7, #8]
 800d46c:	2b00      	cmp	r3, #0
 800d46e:	d002      	beq.n	800d476 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d470:	68b8      	ldr	r0, [r7, #8]
 800d472:	f7ff f9db 	bl	800c82c <tcp_abort>
  }
}
 800d476:	bf00      	nop
 800d478:	3710      	adds	r7, #16
 800d47a:	46bd      	mov	sp, r7
 800d47c:	bd80      	pop	{r7, pc}
 800d47e:	bf00      	nop
 800d480:	2000f1f8 	.word	0x2000f1f8
 800d484:	2000f1e8 	.word	0x2000f1e8

0800d488 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d488:	b580      	push	{r7, lr}
 800d48a:	b082      	sub	sp, #8
 800d48c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d48e:	4b10      	ldr	r3, [pc, #64]	; (800d4d0 <tcp_handle_closepend+0x48>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d494:	e014      	b.n	800d4c0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	68db      	ldr	r3, [r3, #12]
 800d49a:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	8b5b      	ldrh	r3, [r3, #26]
 800d4a0:	f003 0308 	and.w	r3, r3, #8
 800d4a4:	2b00      	cmp	r3, #0
 800d4a6:	d009      	beq.n	800d4bc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	8b5b      	ldrh	r3, [r3, #26]
 800d4ac:	f023 0308 	bic.w	r3, r3, #8
 800d4b0:	b29a      	uxth	r2, r3
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d4b6:	6878      	ldr	r0, [r7, #4]
 800d4b8:	f7ff f864 	bl	800c584 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d4bc:	683b      	ldr	r3, [r7, #0]
 800d4be:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d1e7      	bne.n	800d496 <tcp_handle_closepend+0xe>
  }
}
 800d4c6:	bf00      	nop
 800d4c8:	bf00      	nop
 800d4ca:	3708      	adds	r7, #8
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	bd80      	pop	{r7, pc}
 800d4d0:	2000f1f4 	.word	0x2000f1f4

0800d4d4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	4603      	mov	r3, r0
 800d4dc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d4de:	2001      	movs	r0, #1
 800d4e0:	f7fd fcf6 	bl	800aed0 <memp_malloc>
 800d4e4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d4e6:	68fb      	ldr	r3, [r7, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	d126      	bne.n	800d53a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d4ec:	f7ff ffcc 	bl	800d488 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d4f0:	f7ff ff9a 	bl	800d428 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d4f4:	2001      	movs	r0, #1
 800d4f6:	f7fd fceb 	bl	800aed0 <memp_malloc>
 800d4fa:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d11b      	bne.n	800d53a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d502:	2009      	movs	r0, #9
 800d504:	f7ff ff46 	bl	800d394 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d508:	2001      	movs	r0, #1
 800d50a:	f7fd fce1 	bl	800aed0 <memp_malloc>
 800d50e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d111      	bne.n	800d53a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d516:	2008      	movs	r0, #8
 800d518:	f7ff ff3c 	bl	800d394 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d51c:	2001      	movs	r0, #1
 800d51e:	f7fd fcd7 	bl	800aed0 <memp_malloc>
 800d522:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	2b00      	cmp	r3, #0
 800d528:	d107      	bne.n	800d53a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d52a:	79fb      	ldrb	r3, [r7, #7]
 800d52c:	4618      	mov	r0, r3
 800d52e:	f7ff fee3 	bl	800d2f8 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d532:	2001      	movs	r0, #1
 800d534:	f7fd fccc 	bl	800aed0 <memp_malloc>
 800d538:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	d03f      	beq.n	800d5c0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d540:	229c      	movs	r2, #156	; 0x9c
 800d542:	2100      	movs	r1, #0
 800d544:	68f8      	ldr	r0, [r7, #12]
 800d546:	f006 fffa 	bl	801453e <memset>
    pcb->prio = prio;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	79fa      	ldrb	r2, [r7, #7]
 800d54e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d550:	68fb      	ldr	r3, [r7, #12]
 800d552:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d556:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d560:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d562:	68fb      	ldr	r3, [r7, #12]
 800d564:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d566:	68fb      	ldr	r3, [r7, #12]
 800d568:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	22ff      	movs	r2, #255	; 0xff
 800d56e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d576:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	2206      	movs	r2, #6
 800d57c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	2206      	movs	r2, #6
 800d584:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d58c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2201      	movs	r2, #1
 800d592:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d596:	4b0d      	ldr	r3, [pc, #52]	; (800d5cc <tcp_alloc+0xf8>)
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d59e:	4b0c      	ldr	r3, [pc, #48]	; (800d5d0 <tcp_alloc+0xfc>)
 800d5a0:	781a      	ldrb	r2, [r3, #0]
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d5a6:	68fb      	ldr	r3, [r7, #12]
 800d5a8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d5ac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	4a08      	ldr	r2, [pc, #32]	; (800d5d4 <tcp_alloc+0x100>)
 800d5b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	4a07      	ldr	r2, [pc, #28]	; (800d5d8 <tcp_alloc+0x104>)
 800d5bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d5c0:	68fb      	ldr	r3, [r7, #12]
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3710      	adds	r7, #16
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	2000f1e8 	.word	0x2000f1e8
 800d5d0:	2000f1fe 	.word	0x2000f1fe
 800d5d4:	0800d28d 	.word	0x0800d28d
 800d5d8:	006ddd00 	.word	0x006ddd00

0800d5dc <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b082      	sub	sp, #8
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d107      	bne.n	800d5fa <tcp_pcb_purge+0x1e>
 800d5ea:	4b21      	ldr	r3, [pc, #132]	; (800d670 <tcp_pcb_purge+0x94>)
 800d5ec:	f640 0251 	movw	r2, #2129	; 0x851
 800d5f0:	4920      	ldr	r1, [pc, #128]	; (800d674 <tcp_pcb_purge+0x98>)
 800d5f2:	4821      	ldr	r0, [pc, #132]	; (800d678 <tcp_pcb_purge+0x9c>)
 800d5f4:	f007 f840 	bl	8014678 <iprintf>
 800d5f8:	e037      	b.n	800d66a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	7d1b      	ldrb	r3, [r3, #20]
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d033      	beq.n	800d66a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d606:	2b0a      	cmp	r3, #10
 800d608:	d02f      	beq.n	800d66a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d60e:	2b01      	cmp	r3, #1
 800d610:	d02b      	beq.n	800d66a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d612:	687b      	ldr	r3, [r7, #4]
 800d614:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d616:	2b00      	cmp	r3, #0
 800d618:	d007      	beq.n	800d62a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d61e:	4618      	mov	r0, r3
 800d620:	f7fe fb70 	bl	800bd04 <pbuf_free>
      pcb->refused_data = NULL;
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	2200      	movs	r2, #0
 800d628:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d62e:	2b00      	cmp	r3, #0
 800d630:	d002      	beq.n	800d638 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d632:	6878      	ldr	r0, [r7, #4]
 800d634:	f000 f986 	bl	800d944 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d63e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d644:	4618      	mov	r0, r3
 800d646:	f7ff fdc7 	bl	800d1d8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d64e:	4618      	mov	r0, r3
 800d650:	f7ff fdc2 	bl	800d1d8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2200      	movs	r2, #0
 800d658:	66da      	str	r2, [r3, #108]	; 0x6c
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	2200      	movs	r2, #0
 800d666:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d66a:	3708      	adds	r7, #8
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	080160e4 	.word	0x080160e4
 800d674:	08016730 	.word	0x08016730
 800d678:	08016128 	.word	0x08016128

0800d67c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b084      	sub	sp, #16
 800d680:	af00      	add	r7, sp, #0
 800d682:	6078      	str	r0, [r7, #4]
 800d684:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d106      	bne.n	800d69a <tcp_pcb_remove+0x1e>
 800d68c:	4b3e      	ldr	r3, [pc, #248]	; (800d788 <tcp_pcb_remove+0x10c>)
 800d68e:	f640 0283 	movw	r2, #2179	; 0x883
 800d692:	493e      	ldr	r1, [pc, #248]	; (800d78c <tcp_pcb_remove+0x110>)
 800d694:	483e      	ldr	r0, [pc, #248]	; (800d790 <tcp_pcb_remove+0x114>)
 800d696:	f006 ffef 	bl	8014678 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d106      	bne.n	800d6ae <tcp_pcb_remove+0x32>
 800d6a0:	4b39      	ldr	r3, [pc, #228]	; (800d788 <tcp_pcb_remove+0x10c>)
 800d6a2:	f640 0284 	movw	r2, #2180	; 0x884
 800d6a6:	493b      	ldr	r1, [pc, #236]	; (800d794 <tcp_pcb_remove+0x118>)
 800d6a8:	4839      	ldr	r0, [pc, #228]	; (800d790 <tcp_pcb_remove+0x114>)
 800d6aa:	f006 ffe5 	bl	8014678 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	681b      	ldr	r3, [r3, #0]
 800d6b2:	683a      	ldr	r2, [r7, #0]
 800d6b4:	429a      	cmp	r2, r3
 800d6b6:	d105      	bne.n	800d6c4 <tcp_pcb_remove+0x48>
 800d6b8:	687b      	ldr	r3, [r7, #4]
 800d6ba:	681b      	ldr	r3, [r3, #0]
 800d6bc:	68da      	ldr	r2, [r3, #12]
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	601a      	str	r2, [r3, #0]
 800d6c2:	e013      	b.n	800d6ec <tcp_pcb_remove+0x70>
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	681b      	ldr	r3, [r3, #0]
 800d6c8:	60fb      	str	r3, [r7, #12]
 800d6ca:	e00c      	b.n	800d6e6 <tcp_pcb_remove+0x6a>
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	68db      	ldr	r3, [r3, #12]
 800d6d0:	683a      	ldr	r2, [r7, #0]
 800d6d2:	429a      	cmp	r2, r3
 800d6d4:	d104      	bne.n	800d6e0 <tcp_pcb_remove+0x64>
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	68da      	ldr	r2, [r3, #12]
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	60da      	str	r2, [r3, #12]
 800d6de:	e005      	b.n	800d6ec <tcp_pcb_remove+0x70>
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	68db      	ldr	r3, [r3, #12]
 800d6e4:	60fb      	str	r3, [r7, #12]
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d1ef      	bne.n	800d6cc <tcp_pcb_remove+0x50>
 800d6ec:	683b      	ldr	r3, [r7, #0]
 800d6ee:	2200      	movs	r2, #0
 800d6f0:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d6f2:	6838      	ldr	r0, [r7, #0]
 800d6f4:	f7ff ff72 	bl	800d5dc <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	7d1b      	ldrb	r3, [r3, #20]
 800d6fc:	2b0a      	cmp	r3, #10
 800d6fe:	d013      	beq.n	800d728 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d700:	683b      	ldr	r3, [r7, #0]
 800d702:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d704:	2b01      	cmp	r3, #1
 800d706:	d00f      	beq.n	800d728 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	8b5b      	ldrh	r3, [r3, #26]
 800d70c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d710:	2b00      	cmp	r3, #0
 800d712:	d009      	beq.n	800d728 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	8b5b      	ldrh	r3, [r3, #26]
 800d718:	f043 0302 	orr.w	r3, r3, #2
 800d71c:	b29a      	uxth	r2, r3
 800d71e:	683b      	ldr	r3, [r7, #0]
 800d720:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d722:	6838      	ldr	r0, [r7, #0]
 800d724:	f002 ff6e 	bl	8010604 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d728:	683b      	ldr	r3, [r7, #0]
 800d72a:	7d1b      	ldrb	r3, [r3, #20]
 800d72c:	2b01      	cmp	r3, #1
 800d72e:	d020      	beq.n	800d772 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d730:	683b      	ldr	r3, [r7, #0]
 800d732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d734:	2b00      	cmp	r3, #0
 800d736:	d006      	beq.n	800d746 <tcp_pcb_remove+0xca>
 800d738:	4b13      	ldr	r3, [pc, #76]	; (800d788 <tcp_pcb_remove+0x10c>)
 800d73a:	f640 0293 	movw	r2, #2195	; 0x893
 800d73e:	4916      	ldr	r1, [pc, #88]	; (800d798 <tcp_pcb_remove+0x11c>)
 800d740:	4813      	ldr	r0, [pc, #76]	; (800d790 <tcp_pcb_remove+0x114>)
 800d742:	f006 ff99 	bl	8014678 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d006      	beq.n	800d75c <tcp_pcb_remove+0xe0>
 800d74e:	4b0e      	ldr	r3, [pc, #56]	; (800d788 <tcp_pcb_remove+0x10c>)
 800d750:	f640 0294 	movw	r2, #2196	; 0x894
 800d754:	4911      	ldr	r1, [pc, #68]	; (800d79c <tcp_pcb_remove+0x120>)
 800d756:	480e      	ldr	r0, [pc, #56]	; (800d790 <tcp_pcb_remove+0x114>)
 800d758:	f006 ff8e 	bl	8014678 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d75c:	683b      	ldr	r3, [r7, #0]
 800d75e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d760:	2b00      	cmp	r3, #0
 800d762:	d006      	beq.n	800d772 <tcp_pcb_remove+0xf6>
 800d764:	4b08      	ldr	r3, [pc, #32]	; (800d788 <tcp_pcb_remove+0x10c>)
 800d766:	f640 0296 	movw	r2, #2198	; 0x896
 800d76a:	490d      	ldr	r1, [pc, #52]	; (800d7a0 <tcp_pcb_remove+0x124>)
 800d76c:	4808      	ldr	r0, [pc, #32]	; (800d790 <tcp_pcb_remove+0x114>)
 800d76e:	f006 ff83 	bl	8014678 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	2200      	movs	r2, #0
 800d776:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	2200      	movs	r2, #0
 800d77c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d77e:	bf00      	nop
 800d780:	3710      	adds	r7, #16
 800d782:	46bd      	mov	sp, r7
 800d784:	bd80      	pop	{r7, pc}
 800d786:	bf00      	nop
 800d788:	080160e4 	.word	0x080160e4
 800d78c:	0801674c 	.word	0x0801674c
 800d790:	08016128 	.word	0x08016128
 800d794:	08016768 	.word	0x08016768
 800d798:	08016788 	.word	0x08016788
 800d79c:	080167a0 	.word	0x080167a0
 800d7a0:	080167bc 	.word	0x080167bc

0800d7a4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b082      	sub	sp, #8
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d106      	bne.n	800d7c0 <tcp_next_iss+0x1c>
 800d7b2:	4b0a      	ldr	r3, [pc, #40]	; (800d7dc <tcp_next_iss+0x38>)
 800d7b4:	f640 02af 	movw	r2, #2223	; 0x8af
 800d7b8:	4909      	ldr	r1, [pc, #36]	; (800d7e0 <tcp_next_iss+0x3c>)
 800d7ba:	480a      	ldr	r0, [pc, #40]	; (800d7e4 <tcp_next_iss+0x40>)
 800d7bc:	f006 ff5c 	bl	8014678 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d7c0:	4b09      	ldr	r3, [pc, #36]	; (800d7e8 <tcp_next_iss+0x44>)
 800d7c2:	681a      	ldr	r2, [r3, #0]
 800d7c4:	4b09      	ldr	r3, [pc, #36]	; (800d7ec <tcp_next_iss+0x48>)
 800d7c6:	681b      	ldr	r3, [r3, #0]
 800d7c8:	4413      	add	r3, r2
 800d7ca:	4a07      	ldr	r2, [pc, #28]	; (800d7e8 <tcp_next_iss+0x44>)
 800d7cc:	6013      	str	r3, [r2, #0]
  return iss;
 800d7ce:	4b06      	ldr	r3, [pc, #24]	; (800d7e8 <tcp_next_iss+0x44>)
 800d7d0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	3708      	adds	r7, #8
 800d7d6:	46bd      	mov	sp, r7
 800d7d8:	bd80      	pop	{r7, pc}
 800d7da:	bf00      	nop
 800d7dc:	080160e4 	.word	0x080160e4
 800d7e0:	080167d4 	.word	0x080167d4
 800d7e4:	08016128 	.word	0x08016128
 800d7e8:	20000028 	.word	0x20000028
 800d7ec:	2000f1e8 	.word	0x2000f1e8

0800d7f0 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d7f0:	b580      	push	{r7, lr}
 800d7f2:	b086      	sub	sp, #24
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	60b9      	str	r1, [r7, #8]
 800d7fa:	607a      	str	r2, [r7, #4]
 800d7fc:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d106      	bne.n	800d812 <tcp_eff_send_mss_netif+0x22>
 800d804:	4b14      	ldr	r3, [pc, #80]	; (800d858 <tcp_eff_send_mss_netif+0x68>)
 800d806:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d80a:	4914      	ldr	r1, [pc, #80]	; (800d85c <tcp_eff_send_mss_netif+0x6c>)
 800d80c:	4814      	ldr	r0, [pc, #80]	; (800d860 <tcp_eff_send_mss_netif+0x70>)
 800d80e:	f006 ff33 	bl	8014678 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	2b00      	cmp	r3, #0
 800d816:	d101      	bne.n	800d81c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d818:	89fb      	ldrh	r3, [r7, #14]
 800d81a:	e019      	b.n	800d850 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d81c:	68bb      	ldr	r3, [r7, #8]
 800d81e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d820:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d822:	8afb      	ldrh	r3, [r7, #22]
 800d824:	2b00      	cmp	r3, #0
 800d826:	d012      	beq.n	800d84e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d828:	2328      	movs	r3, #40	; 0x28
 800d82a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d82c:	8afa      	ldrh	r2, [r7, #22]
 800d82e:	8abb      	ldrh	r3, [r7, #20]
 800d830:	429a      	cmp	r2, r3
 800d832:	d904      	bls.n	800d83e <tcp_eff_send_mss_netif+0x4e>
 800d834:	8afa      	ldrh	r2, [r7, #22]
 800d836:	8abb      	ldrh	r3, [r7, #20]
 800d838:	1ad3      	subs	r3, r2, r3
 800d83a:	b29b      	uxth	r3, r3
 800d83c:	e000      	b.n	800d840 <tcp_eff_send_mss_netif+0x50>
 800d83e:	2300      	movs	r3, #0
 800d840:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d842:	8a7a      	ldrh	r2, [r7, #18]
 800d844:	89fb      	ldrh	r3, [r7, #14]
 800d846:	4293      	cmp	r3, r2
 800d848:	bf28      	it	cs
 800d84a:	4613      	movcs	r3, r2
 800d84c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d84e:	89fb      	ldrh	r3, [r7, #14]
}
 800d850:	4618      	mov	r0, r3
 800d852:	3718      	adds	r7, #24
 800d854:	46bd      	mov	sp, r7
 800d856:	bd80      	pop	{r7, pc}
 800d858:	080160e4 	.word	0x080160e4
 800d85c:	080167f0 	.word	0x080167f0
 800d860:	08016128 	.word	0x08016128

0800d864 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	2b00      	cmp	r3, #0
 800d876:	d119      	bne.n	800d8ac <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d878:	4b10      	ldr	r3, [pc, #64]	; (800d8bc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d87a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d87e:	4910      	ldr	r1, [pc, #64]	; (800d8c0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d880:	4810      	ldr	r0, [pc, #64]	; (800d8c4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d882:	f006 fef9 	bl	8014678 <iprintf>

  while (pcb != NULL) {
 800d886:	e011      	b.n	800d8ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d888:	68fb      	ldr	r3, [r7, #12]
 800d88a:	681a      	ldr	r2, [r3, #0]
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	429a      	cmp	r2, r3
 800d892:	d108      	bne.n	800d8a6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d894:	68fb      	ldr	r3, [r7, #12]
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d89a:	68f8      	ldr	r0, [r7, #12]
 800d89c:	f7fe ffc6 	bl	800c82c <tcp_abort>
      pcb = next;
 800d8a0:	68bb      	ldr	r3, [r7, #8]
 800d8a2:	60fb      	str	r3, [r7, #12]
 800d8a4:	e002      	b.n	800d8ac <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d8a6:	68fb      	ldr	r3, [r7, #12]
 800d8a8:	68db      	ldr	r3, [r3, #12]
 800d8aa:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d8ac:	68fb      	ldr	r3, [r7, #12]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d1ea      	bne.n	800d888 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d8b2:	bf00      	nop
 800d8b4:	bf00      	nop
 800d8b6:	3710      	adds	r7, #16
 800d8b8:	46bd      	mov	sp, r7
 800d8ba:	bd80      	pop	{r7, pc}
 800d8bc:	080160e4 	.word	0x080160e4
 800d8c0:	08016818 	.word	0x08016818
 800d8c4:	08016128 	.word	0x08016128

0800d8c8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d8c8:	b580      	push	{r7, lr}
 800d8ca:	b084      	sub	sp, #16
 800d8cc:	af00      	add	r7, sp, #0
 800d8ce:	6078      	str	r0, [r7, #4]
 800d8d0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d02a      	beq.n	800d92e <tcp_netif_ip_addr_changed+0x66>
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d026      	beq.n	800d92e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d8e0:	4b15      	ldr	r3, [pc, #84]	; (800d938 <tcp_netif_ip_addr_changed+0x70>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	4619      	mov	r1, r3
 800d8e6:	6878      	ldr	r0, [r7, #4]
 800d8e8:	f7ff ffbc 	bl	800d864 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d8ec:	4b13      	ldr	r3, [pc, #76]	; (800d93c <tcp_netif_ip_addr_changed+0x74>)
 800d8ee:	681b      	ldr	r3, [r3, #0]
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f7ff ffb6 	bl	800d864 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d017      	beq.n	800d92e <tcp_netif_ip_addr_changed+0x66>
 800d8fe:	683b      	ldr	r3, [r7, #0]
 800d900:	681b      	ldr	r3, [r3, #0]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d013      	beq.n	800d92e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d906:	4b0e      	ldr	r3, [pc, #56]	; (800d940 <tcp_netif_ip_addr_changed+0x78>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	60fb      	str	r3, [r7, #12]
 800d90c:	e00c      	b.n	800d928 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d90e:	68fb      	ldr	r3, [r7, #12]
 800d910:	681a      	ldr	r2, [r3, #0]
 800d912:	687b      	ldr	r3, [r7, #4]
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	429a      	cmp	r2, r3
 800d918:	d103      	bne.n	800d922 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	681a      	ldr	r2, [r3, #0]
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d922:	68fb      	ldr	r3, [r7, #12]
 800d924:	68db      	ldr	r3, [r3, #12]
 800d926:	60fb      	str	r3, [r7, #12]
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d1ef      	bne.n	800d90e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d92e:	bf00      	nop
 800d930:	3710      	adds	r7, #16
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	2000f1f4 	.word	0x2000f1f4
 800d93c:	2000f1ec 	.word	0x2000f1ec
 800d940:	2000f1f0 	.word	0x2000f1f0

0800d944 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b082      	sub	sp, #8
 800d948:	af00      	add	r7, sp, #0
 800d94a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d950:	2b00      	cmp	r3, #0
 800d952:	d007      	beq.n	800d964 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d958:	4618      	mov	r0, r3
 800d95a:	f7ff fc3d 	bl	800d1d8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	2200      	movs	r2, #0
 800d962:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d964:	bf00      	nop
 800d966:	3708      	adds	r7, #8
 800d968:	46bd      	mov	sp, r7
 800d96a:	bd80      	pop	{r7, pc}

0800d96c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d96c:	b590      	push	{r4, r7, lr}
 800d96e:	b08d      	sub	sp, #52	; 0x34
 800d970:	af04      	add	r7, sp, #16
 800d972:	6078      	str	r0, [r7, #4]
 800d974:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d105      	bne.n	800d988 <tcp_input+0x1c>
 800d97c:	4b9b      	ldr	r3, [pc, #620]	; (800dbec <tcp_input+0x280>)
 800d97e:	2283      	movs	r2, #131	; 0x83
 800d980:	499b      	ldr	r1, [pc, #620]	; (800dbf0 <tcp_input+0x284>)
 800d982:	489c      	ldr	r0, [pc, #624]	; (800dbf4 <tcp_input+0x288>)
 800d984:	f006 fe78 	bl	8014678 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d988:	687b      	ldr	r3, [r7, #4]
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	4a9a      	ldr	r2, [pc, #616]	; (800dbf8 <tcp_input+0x28c>)
 800d98e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d990:	687b      	ldr	r3, [r7, #4]
 800d992:	895b      	ldrh	r3, [r3, #10]
 800d994:	2b13      	cmp	r3, #19
 800d996:	f240 83d1 	bls.w	800e13c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d99a:	4b98      	ldr	r3, [pc, #608]	; (800dbfc <tcp_input+0x290>)
 800d99c:	695b      	ldr	r3, [r3, #20]
 800d99e:	4a97      	ldr	r2, [pc, #604]	; (800dbfc <tcp_input+0x290>)
 800d9a0:	6812      	ldr	r2, [r2, #0]
 800d9a2:	4611      	mov	r1, r2
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	f005 fc47 	bl	8013238 <ip4_addr_isbroadcast_u32>
 800d9aa:	4603      	mov	r3, r0
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	f040 83c7 	bne.w	800e140 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d9b2:	4b92      	ldr	r3, [pc, #584]	; (800dbfc <tcp_input+0x290>)
 800d9b4:	695b      	ldr	r3, [r3, #20]
 800d9b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d9ba:	2be0      	cmp	r3, #224	; 0xe0
 800d9bc:	f000 83c0 	beq.w	800e140 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d9c0:	4b8d      	ldr	r3, [pc, #564]	; (800dbf8 <tcp_input+0x28c>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	899b      	ldrh	r3, [r3, #12]
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	4618      	mov	r0, r3
 800d9ca:	f7fc fda9 	bl	800a520 <lwip_htons>
 800d9ce:	4603      	mov	r3, r0
 800d9d0:	0b1b      	lsrs	r3, r3, #12
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	b2db      	uxtb	r3, r3
 800d9d6:	009b      	lsls	r3, r3, #2
 800d9d8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d9da:	7cbb      	ldrb	r3, [r7, #18]
 800d9dc:	2b13      	cmp	r3, #19
 800d9de:	f240 83b1 	bls.w	800e144 <tcp_input+0x7d8>
 800d9e2:	7cbb      	ldrb	r3, [r7, #18]
 800d9e4:	b29a      	uxth	r2, r3
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	891b      	ldrh	r3, [r3, #8]
 800d9ea:	429a      	cmp	r2, r3
 800d9ec:	f200 83aa 	bhi.w	800e144 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d9f0:	7cbb      	ldrb	r3, [r7, #18]
 800d9f2:	b29b      	uxth	r3, r3
 800d9f4:	3b14      	subs	r3, #20
 800d9f6:	b29a      	uxth	r2, r3
 800d9f8:	4b81      	ldr	r3, [pc, #516]	; (800dc00 <tcp_input+0x294>)
 800d9fa:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d9fc:	4b81      	ldr	r3, [pc, #516]	; (800dc04 <tcp_input+0x298>)
 800d9fe:	2200      	movs	r2, #0
 800da00:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800da02:	687b      	ldr	r3, [r7, #4]
 800da04:	895a      	ldrh	r2, [r3, #10]
 800da06:	7cbb      	ldrb	r3, [r7, #18]
 800da08:	b29b      	uxth	r3, r3
 800da0a:	429a      	cmp	r2, r3
 800da0c:	d309      	bcc.n	800da22 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800da0e:	4b7c      	ldr	r3, [pc, #496]	; (800dc00 <tcp_input+0x294>)
 800da10:	881a      	ldrh	r2, [r3, #0]
 800da12:	4b7d      	ldr	r3, [pc, #500]	; (800dc08 <tcp_input+0x29c>)
 800da14:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800da16:	7cbb      	ldrb	r3, [r7, #18]
 800da18:	4619      	mov	r1, r3
 800da1a:	6878      	ldr	r0, [r7, #4]
 800da1c:	f7fe f8ec 	bl	800bbf8 <pbuf_remove_header>
 800da20:	e04e      	b.n	800dac0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d105      	bne.n	800da36 <tcp_input+0xca>
 800da2a:	4b70      	ldr	r3, [pc, #448]	; (800dbec <tcp_input+0x280>)
 800da2c:	22c2      	movs	r2, #194	; 0xc2
 800da2e:	4977      	ldr	r1, [pc, #476]	; (800dc0c <tcp_input+0x2a0>)
 800da30:	4870      	ldr	r0, [pc, #448]	; (800dbf4 <tcp_input+0x288>)
 800da32:	f006 fe21 	bl	8014678 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800da36:	2114      	movs	r1, #20
 800da38:	6878      	ldr	r0, [r7, #4]
 800da3a:	f7fe f8dd 	bl	800bbf8 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	895a      	ldrh	r2, [r3, #10]
 800da42:	4b71      	ldr	r3, [pc, #452]	; (800dc08 <tcp_input+0x29c>)
 800da44:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800da46:	4b6e      	ldr	r3, [pc, #440]	; (800dc00 <tcp_input+0x294>)
 800da48:	881a      	ldrh	r2, [r3, #0]
 800da4a:	4b6f      	ldr	r3, [pc, #444]	; (800dc08 <tcp_input+0x29c>)
 800da4c:	881b      	ldrh	r3, [r3, #0]
 800da4e:	1ad3      	subs	r3, r2, r3
 800da50:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800da52:	4b6d      	ldr	r3, [pc, #436]	; (800dc08 <tcp_input+0x29c>)
 800da54:	881b      	ldrh	r3, [r3, #0]
 800da56:	4619      	mov	r1, r3
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f7fe f8cd 	bl	800bbf8 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	895b      	ldrh	r3, [r3, #10]
 800da64:	8a3a      	ldrh	r2, [r7, #16]
 800da66:	429a      	cmp	r2, r3
 800da68:	f200 836e 	bhi.w	800e148 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	681b      	ldr	r3, [r3, #0]
 800da70:	685b      	ldr	r3, [r3, #4]
 800da72:	4a64      	ldr	r2, [pc, #400]	; (800dc04 <tcp_input+0x298>)
 800da74:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	8a3a      	ldrh	r2, [r7, #16]
 800da7c:	4611      	mov	r1, r2
 800da7e:	4618      	mov	r0, r3
 800da80:	f7fe f8ba 	bl	800bbf8 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	891a      	ldrh	r2, [r3, #8]
 800da88:	8a3b      	ldrh	r3, [r7, #16]
 800da8a:	1ad3      	subs	r3, r2, r3
 800da8c:	b29a      	uxth	r2, r3
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	895b      	ldrh	r3, [r3, #10]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d005      	beq.n	800daa6 <tcp_input+0x13a>
 800da9a:	4b54      	ldr	r3, [pc, #336]	; (800dbec <tcp_input+0x280>)
 800da9c:	22df      	movs	r2, #223	; 0xdf
 800da9e:	495c      	ldr	r1, [pc, #368]	; (800dc10 <tcp_input+0x2a4>)
 800daa0:	4854      	ldr	r0, [pc, #336]	; (800dbf4 <tcp_input+0x288>)
 800daa2:	f006 fde9 	bl	8014678 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	891a      	ldrh	r2, [r3, #8]
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	891b      	ldrh	r3, [r3, #8]
 800dab0:	429a      	cmp	r2, r3
 800dab2:	d005      	beq.n	800dac0 <tcp_input+0x154>
 800dab4:	4b4d      	ldr	r3, [pc, #308]	; (800dbec <tcp_input+0x280>)
 800dab6:	22e0      	movs	r2, #224	; 0xe0
 800dab8:	4956      	ldr	r1, [pc, #344]	; (800dc14 <tcp_input+0x2a8>)
 800daba:	484e      	ldr	r0, [pc, #312]	; (800dbf4 <tcp_input+0x288>)
 800dabc:	f006 fddc 	bl	8014678 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800dac0:	4b4d      	ldr	r3, [pc, #308]	; (800dbf8 <tcp_input+0x28c>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	881b      	ldrh	r3, [r3, #0]
 800dac6:	b29b      	uxth	r3, r3
 800dac8:	4a4b      	ldr	r2, [pc, #300]	; (800dbf8 <tcp_input+0x28c>)
 800daca:	6814      	ldr	r4, [r2, #0]
 800dacc:	4618      	mov	r0, r3
 800dace:	f7fc fd27 	bl	800a520 <lwip_htons>
 800dad2:	4603      	mov	r3, r0
 800dad4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800dad6:	4b48      	ldr	r3, [pc, #288]	; (800dbf8 <tcp_input+0x28c>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	885b      	ldrh	r3, [r3, #2]
 800dadc:	b29b      	uxth	r3, r3
 800dade:	4a46      	ldr	r2, [pc, #280]	; (800dbf8 <tcp_input+0x28c>)
 800dae0:	6814      	ldr	r4, [r2, #0]
 800dae2:	4618      	mov	r0, r3
 800dae4:	f7fc fd1c 	bl	800a520 <lwip_htons>
 800dae8:	4603      	mov	r3, r0
 800daea:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800daec:	4b42      	ldr	r3, [pc, #264]	; (800dbf8 <tcp_input+0x28c>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	685b      	ldr	r3, [r3, #4]
 800daf2:	4a41      	ldr	r2, [pc, #260]	; (800dbf8 <tcp_input+0x28c>)
 800daf4:	6814      	ldr	r4, [r2, #0]
 800daf6:	4618      	mov	r0, r3
 800daf8:	f7fc fd27 	bl	800a54a <lwip_htonl>
 800dafc:	4603      	mov	r3, r0
 800dafe:	6063      	str	r3, [r4, #4]
 800db00:	6863      	ldr	r3, [r4, #4]
 800db02:	4a45      	ldr	r2, [pc, #276]	; (800dc18 <tcp_input+0x2ac>)
 800db04:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800db06:	4b3c      	ldr	r3, [pc, #240]	; (800dbf8 <tcp_input+0x28c>)
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	689b      	ldr	r3, [r3, #8]
 800db0c:	4a3a      	ldr	r2, [pc, #232]	; (800dbf8 <tcp_input+0x28c>)
 800db0e:	6814      	ldr	r4, [r2, #0]
 800db10:	4618      	mov	r0, r3
 800db12:	f7fc fd1a 	bl	800a54a <lwip_htonl>
 800db16:	4603      	mov	r3, r0
 800db18:	60a3      	str	r3, [r4, #8]
 800db1a:	68a3      	ldr	r3, [r4, #8]
 800db1c:	4a3f      	ldr	r2, [pc, #252]	; (800dc1c <tcp_input+0x2b0>)
 800db1e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800db20:	4b35      	ldr	r3, [pc, #212]	; (800dbf8 <tcp_input+0x28c>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	89db      	ldrh	r3, [r3, #14]
 800db26:	b29b      	uxth	r3, r3
 800db28:	4a33      	ldr	r2, [pc, #204]	; (800dbf8 <tcp_input+0x28c>)
 800db2a:	6814      	ldr	r4, [r2, #0]
 800db2c:	4618      	mov	r0, r3
 800db2e:	f7fc fcf7 	bl	800a520 <lwip_htons>
 800db32:	4603      	mov	r3, r0
 800db34:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800db36:	4b30      	ldr	r3, [pc, #192]	; (800dbf8 <tcp_input+0x28c>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	899b      	ldrh	r3, [r3, #12]
 800db3c:	b29b      	uxth	r3, r3
 800db3e:	4618      	mov	r0, r3
 800db40:	f7fc fcee 	bl	800a520 <lwip_htons>
 800db44:	4603      	mov	r3, r0
 800db46:	b2db      	uxtb	r3, r3
 800db48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800db4c:	b2da      	uxtb	r2, r3
 800db4e:	4b34      	ldr	r3, [pc, #208]	; (800dc20 <tcp_input+0x2b4>)
 800db50:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	891a      	ldrh	r2, [r3, #8]
 800db56:	4b33      	ldr	r3, [pc, #204]	; (800dc24 <tcp_input+0x2b8>)
 800db58:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800db5a:	4b31      	ldr	r3, [pc, #196]	; (800dc20 <tcp_input+0x2b4>)
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	f003 0303 	and.w	r3, r3, #3
 800db62:	2b00      	cmp	r3, #0
 800db64:	d00c      	beq.n	800db80 <tcp_input+0x214>
    tcplen++;
 800db66:	4b2f      	ldr	r3, [pc, #188]	; (800dc24 <tcp_input+0x2b8>)
 800db68:	881b      	ldrh	r3, [r3, #0]
 800db6a:	3301      	adds	r3, #1
 800db6c:	b29a      	uxth	r2, r3
 800db6e:	4b2d      	ldr	r3, [pc, #180]	; (800dc24 <tcp_input+0x2b8>)
 800db70:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	891a      	ldrh	r2, [r3, #8]
 800db76:	4b2b      	ldr	r3, [pc, #172]	; (800dc24 <tcp_input+0x2b8>)
 800db78:	881b      	ldrh	r3, [r3, #0]
 800db7a:	429a      	cmp	r2, r3
 800db7c:	f200 82e6 	bhi.w	800e14c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800db80:	2300      	movs	r3, #0
 800db82:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db84:	4b28      	ldr	r3, [pc, #160]	; (800dc28 <tcp_input+0x2bc>)
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	61fb      	str	r3, [r7, #28]
 800db8a:	e09d      	b.n	800dcc8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800db8c:	69fb      	ldr	r3, [r7, #28]
 800db8e:	7d1b      	ldrb	r3, [r3, #20]
 800db90:	2b00      	cmp	r3, #0
 800db92:	d105      	bne.n	800dba0 <tcp_input+0x234>
 800db94:	4b15      	ldr	r3, [pc, #84]	; (800dbec <tcp_input+0x280>)
 800db96:	22fb      	movs	r2, #251	; 0xfb
 800db98:	4924      	ldr	r1, [pc, #144]	; (800dc2c <tcp_input+0x2c0>)
 800db9a:	4816      	ldr	r0, [pc, #88]	; (800dbf4 <tcp_input+0x288>)
 800db9c:	f006 fd6c 	bl	8014678 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	7d1b      	ldrb	r3, [r3, #20]
 800dba4:	2b0a      	cmp	r3, #10
 800dba6:	d105      	bne.n	800dbb4 <tcp_input+0x248>
 800dba8:	4b10      	ldr	r3, [pc, #64]	; (800dbec <tcp_input+0x280>)
 800dbaa:	22fc      	movs	r2, #252	; 0xfc
 800dbac:	4920      	ldr	r1, [pc, #128]	; (800dc30 <tcp_input+0x2c4>)
 800dbae:	4811      	ldr	r0, [pc, #68]	; (800dbf4 <tcp_input+0x288>)
 800dbb0:	f006 fd62 	bl	8014678 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800dbb4:	69fb      	ldr	r3, [r7, #28]
 800dbb6:	7d1b      	ldrb	r3, [r3, #20]
 800dbb8:	2b01      	cmp	r3, #1
 800dbba:	d105      	bne.n	800dbc8 <tcp_input+0x25c>
 800dbbc:	4b0b      	ldr	r3, [pc, #44]	; (800dbec <tcp_input+0x280>)
 800dbbe:	22fd      	movs	r2, #253	; 0xfd
 800dbc0:	491c      	ldr	r1, [pc, #112]	; (800dc34 <tcp_input+0x2c8>)
 800dbc2:	480c      	ldr	r0, [pc, #48]	; (800dbf4 <tcp_input+0x288>)
 800dbc4:	f006 fd58 	bl	8014678 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dbc8:	69fb      	ldr	r3, [r7, #28]
 800dbca:	7a1b      	ldrb	r3, [r3, #8]
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d033      	beq.n	800dc38 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dbd0:	69fb      	ldr	r3, [r7, #28]
 800dbd2:	7a1a      	ldrb	r2, [r3, #8]
 800dbd4:	4b09      	ldr	r3, [pc, #36]	; (800dbfc <tcp_input+0x290>)
 800dbd6:	685b      	ldr	r3, [r3, #4]
 800dbd8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dbdc:	3301      	adds	r3, #1
 800dbde:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dbe0:	429a      	cmp	r2, r3
 800dbe2:	d029      	beq.n	800dc38 <tcp_input+0x2cc>
      prev = pcb;
 800dbe4:	69fb      	ldr	r3, [r7, #28]
 800dbe6:	61bb      	str	r3, [r7, #24]
      continue;
 800dbe8:	e06b      	b.n	800dcc2 <tcp_input+0x356>
 800dbea:	bf00      	nop
 800dbec:	0801684c 	.word	0x0801684c
 800dbf0:	08016880 	.word	0x08016880
 800dbf4:	08016898 	.word	0x08016898
 800dbf8:	2000f210 	.word	0x2000f210
 800dbfc:	200098d4 	.word	0x200098d4
 800dc00:	2000f214 	.word	0x2000f214
 800dc04:	2000f218 	.word	0x2000f218
 800dc08:	2000f216 	.word	0x2000f216
 800dc0c:	080168c0 	.word	0x080168c0
 800dc10:	080168d0 	.word	0x080168d0
 800dc14:	080168dc 	.word	0x080168dc
 800dc18:	2000f220 	.word	0x2000f220
 800dc1c:	2000f224 	.word	0x2000f224
 800dc20:	2000f22c 	.word	0x2000f22c
 800dc24:	2000f22a 	.word	0x2000f22a
 800dc28:	2000f1f4 	.word	0x2000f1f4
 800dc2c:	080168fc 	.word	0x080168fc
 800dc30:	08016924 	.word	0x08016924
 800dc34:	08016950 	.word	0x08016950
    }

    if (pcb->remote_port == tcphdr->src &&
 800dc38:	69fb      	ldr	r3, [r7, #28]
 800dc3a:	8b1a      	ldrh	r2, [r3, #24]
 800dc3c:	4b72      	ldr	r3, [pc, #456]	; (800de08 <tcp_input+0x49c>)
 800dc3e:	681b      	ldr	r3, [r3, #0]
 800dc40:	881b      	ldrh	r3, [r3, #0]
 800dc42:	b29b      	uxth	r3, r3
 800dc44:	429a      	cmp	r2, r3
 800dc46:	d13a      	bne.n	800dcbe <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800dc48:	69fb      	ldr	r3, [r7, #28]
 800dc4a:	8ada      	ldrh	r2, [r3, #22]
 800dc4c:	4b6e      	ldr	r3, [pc, #440]	; (800de08 <tcp_input+0x49c>)
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	885b      	ldrh	r3, [r3, #2]
 800dc52:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800dc54:	429a      	cmp	r2, r3
 800dc56:	d132      	bne.n	800dcbe <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	685a      	ldr	r2, [r3, #4]
 800dc5c:	4b6b      	ldr	r3, [pc, #428]	; (800de0c <tcp_input+0x4a0>)
 800dc5e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dc60:	429a      	cmp	r2, r3
 800dc62:	d12c      	bne.n	800dcbe <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dc64:	69fb      	ldr	r3, [r7, #28]
 800dc66:	681a      	ldr	r2, [r3, #0]
 800dc68:	4b68      	ldr	r3, [pc, #416]	; (800de0c <tcp_input+0x4a0>)
 800dc6a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dc6c:	429a      	cmp	r2, r3
 800dc6e:	d126      	bne.n	800dcbe <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dc70:	69fb      	ldr	r3, [r7, #28]
 800dc72:	68db      	ldr	r3, [r3, #12]
 800dc74:	69fa      	ldr	r2, [r7, #28]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d106      	bne.n	800dc88 <tcp_input+0x31c>
 800dc7a:	4b65      	ldr	r3, [pc, #404]	; (800de10 <tcp_input+0x4a4>)
 800dc7c:	f240 120d 	movw	r2, #269	; 0x10d
 800dc80:	4964      	ldr	r1, [pc, #400]	; (800de14 <tcp_input+0x4a8>)
 800dc82:	4865      	ldr	r0, [pc, #404]	; (800de18 <tcp_input+0x4ac>)
 800dc84:	f006 fcf8 	bl	8014678 <iprintf>
      if (prev != NULL) {
 800dc88:	69bb      	ldr	r3, [r7, #24]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d00a      	beq.n	800dca4 <tcp_input+0x338>
        prev->next = pcb->next;
 800dc8e:	69fb      	ldr	r3, [r7, #28]
 800dc90:	68da      	ldr	r2, [r3, #12]
 800dc92:	69bb      	ldr	r3, [r7, #24]
 800dc94:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800dc96:	4b61      	ldr	r3, [pc, #388]	; (800de1c <tcp_input+0x4b0>)
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	69fb      	ldr	r3, [r7, #28]
 800dc9c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800dc9e:	4a5f      	ldr	r2, [pc, #380]	; (800de1c <tcp_input+0x4b0>)
 800dca0:	69fb      	ldr	r3, [r7, #28]
 800dca2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dca4:	69fb      	ldr	r3, [r7, #28]
 800dca6:	68db      	ldr	r3, [r3, #12]
 800dca8:	69fa      	ldr	r2, [r7, #28]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d111      	bne.n	800dcd2 <tcp_input+0x366>
 800dcae:	4b58      	ldr	r3, [pc, #352]	; (800de10 <tcp_input+0x4a4>)
 800dcb0:	f240 1215 	movw	r2, #277	; 0x115
 800dcb4:	495a      	ldr	r1, [pc, #360]	; (800de20 <tcp_input+0x4b4>)
 800dcb6:	4858      	ldr	r0, [pc, #352]	; (800de18 <tcp_input+0x4ac>)
 800dcb8:	f006 fcde 	bl	8014678 <iprintf>
      break;
 800dcbc:	e009      	b.n	800dcd2 <tcp_input+0x366>
    }
    prev = pcb;
 800dcbe:	69fb      	ldr	r3, [r7, #28]
 800dcc0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcc2:	69fb      	ldr	r3, [r7, #28]
 800dcc4:	68db      	ldr	r3, [r3, #12]
 800dcc6:	61fb      	str	r3, [r7, #28]
 800dcc8:	69fb      	ldr	r3, [r7, #28]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	f47f af5e 	bne.w	800db8c <tcp_input+0x220>
 800dcd0:	e000      	b.n	800dcd4 <tcp_input+0x368>
      break;
 800dcd2:	bf00      	nop
  }

  if (pcb == NULL) {
 800dcd4:	69fb      	ldr	r3, [r7, #28]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	f040 80aa 	bne.w	800de30 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcdc:	4b51      	ldr	r3, [pc, #324]	; (800de24 <tcp_input+0x4b8>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	61fb      	str	r3, [r7, #28]
 800dce2:	e03f      	b.n	800dd64 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800dce4:	69fb      	ldr	r3, [r7, #28]
 800dce6:	7d1b      	ldrb	r3, [r3, #20]
 800dce8:	2b0a      	cmp	r3, #10
 800dcea:	d006      	beq.n	800dcfa <tcp_input+0x38e>
 800dcec:	4b48      	ldr	r3, [pc, #288]	; (800de10 <tcp_input+0x4a4>)
 800dcee:	f240 121f 	movw	r2, #287	; 0x11f
 800dcf2:	494d      	ldr	r1, [pc, #308]	; (800de28 <tcp_input+0x4bc>)
 800dcf4:	4848      	ldr	r0, [pc, #288]	; (800de18 <tcp_input+0x4ac>)
 800dcf6:	f006 fcbf 	bl	8014678 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	7a1b      	ldrb	r3, [r3, #8]
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d009      	beq.n	800dd16 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dd02:	69fb      	ldr	r3, [r7, #28]
 800dd04:	7a1a      	ldrb	r2, [r3, #8]
 800dd06:	4b41      	ldr	r3, [pc, #260]	; (800de0c <tcp_input+0x4a0>)
 800dd08:	685b      	ldr	r3, [r3, #4]
 800dd0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd0e:	3301      	adds	r3, #1
 800dd10:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800dd12:	429a      	cmp	r2, r3
 800dd14:	d122      	bne.n	800dd5c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800dd16:	69fb      	ldr	r3, [r7, #28]
 800dd18:	8b1a      	ldrh	r2, [r3, #24]
 800dd1a:	4b3b      	ldr	r3, [pc, #236]	; (800de08 <tcp_input+0x49c>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	881b      	ldrh	r3, [r3, #0]
 800dd20:	b29b      	uxth	r3, r3
 800dd22:	429a      	cmp	r2, r3
 800dd24:	d11b      	bne.n	800dd5e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800dd26:	69fb      	ldr	r3, [r7, #28]
 800dd28:	8ada      	ldrh	r2, [r3, #22]
 800dd2a:	4b37      	ldr	r3, [pc, #220]	; (800de08 <tcp_input+0x49c>)
 800dd2c:	681b      	ldr	r3, [r3, #0]
 800dd2e:	885b      	ldrh	r3, [r3, #2]
 800dd30:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800dd32:	429a      	cmp	r2, r3
 800dd34:	d113      	bne.n	800dd5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dd36:	69fb      	ldr	r3, [r7, #28]
 800dd38:	685a      	ldr	r2, [r3, #4]
 800dd3a:	4b34      	ldr	r3, [pc, #208]	; (800de0c <tcp_input+0x4a0>)
 800dd3c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800dd3e:	429a      	cmp	r2, r3
 800dd40:	d10d      	bne.n	800dd5e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	681a      	ldr	r2, [r3, #0]
 800dd46:	4b31      	ldr	r3, [pc, #196]	; (800de0c <tcp_input+0x4a0>)
 800dd48:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dd4a:	429a      	cmp	r2, r3
 800dd4c:	d107      	bne.n	800dd5e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800dd4e:	69f8      	ldr	r0, [r7, #28]
 800dd50:	f000 fb56 	bl	800e400 <tcp_timewait_input>
        }
        pbuf_free(p);
 800dd54:	6878      	ldr	r0, [r7, #4]
 800dd56:	f7fd ffd5 	bl	800bd04 <pbuf_free>
        return;
 800dd5a:	e1fd      	b.n	800e158 <tcp_input+0x7ec>
        continue;
 800dd5c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd5e:	69fb      	ldr	r3, [r7, #28]
 800dd60:	68db      	ldr	r3, [r3, #12]
 800dd62:	61fb      	str	r3, [r7, #28]
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d1bc      	bne.n	800dce4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dd6e:	4b2f      	ldr	r3, [pc, #188]	; (800de2c <tcp_input+0x4c0>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	617b      	str	r3, [r7, #20]
 800dd74:	e02a      	b.n	800ddcc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dd76:	697b      	ldr	r3, [r7, #20]
 800dd78:	7a1b      	ldrb	r3, [r3, #8]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d00c      	beq.n	800dd98 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dd7e:	697b      	ldr	r3, [r7, #20]
 800dd80:	7a1a      	ldrb	r2, [r3, #8]
 800dd82:	4b22      	ldr	r3, [pc, #136]	; (800de0c <tcp_input+0x4a0>)
 800dd84:	685b      	ldr	r3, [r3, #4]
 800dd86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800dd8a:	3301      	adds	r3, #1
 800dd8c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dd8e:	429a      	cmp	r2, r3
 800dd90:	d002      	beq.n	800dd98 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800dd92:	697b      	ldr	r3, [r7, #20]
 800dd94:	61bb      	str	r3, [r7, #24]
        continue;
 800dd96:	e016      	b.n	800ddc6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dd98:	697b      	ldr	r3, [r7, #20]
 800dd9a:	8ada      	ldrh	r2, [r3, #22]
 800dd9c:	4b1a      	ldr	r3, [pc, #104]	; (800de08 <tcp_input+0x49c>)
 800dd9e:	681b      	ldr	r3, [r3, #0]
 800dda0:	885b      	ldrh	r3, [r3, #2]
 800dda2:	b29b      	uxth	r3, r3
 800dda4:	429a      	cmp	r2, r3
 800dda6:	d10c      	bne.n	800ddc2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dda8:	697b      	ldr	r3, [r7, #20]
 800ddaa:	681a      	ldr	r2, [r3, #0]
 800ddac:	4b17      	ldr	r3, [pc, #92]	; (800de0c <tcp_input+0x4a0>)
 800ddae:	695b      	ldr	r3, [r3, #20]
 800ddb0:	429a      	cmp	r2, r3
 800ddb2:	d00f      	beq.n	800ddd4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d00d      	beq.n	800ddd6 <tcp_input+0x46a>
 800ddba:	697b      	ldr	r3, [r7, #20]
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d009      	beq.n	800ddd6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	68db      	ldr	r3, [r3, #12]
 800ddca:	617b      	str	r3, [r7, #20]
 800ddcc:	697b      	ldr	r3, [r7, #20]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d1d1      	bne.n	800dd76 <tcp_input+0x40a>
 800ddd2:	e000      	b.n	800ddd6 <tcp_input+0x46a>
            break;
 800ddd4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800ddd6:	697b      	ldr	r3, [r7, #20]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d029      	beq.n	800de30 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dddc:	69bb      	ldr	r3, [r7, #24]
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d00a      	beq.n	800ddf8 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	68da      	ldr	r2, [r3, #12]
 800dde6:	69bb      	ldr	r3, [r7, #24]
 800dde8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800ddea:	4b10      	ldr	r3, [pc, #64]	; (800de2c <tcp_input+0x4c0>)
 800ddec:	681a      	ldr	r2, [r3, #0]
 800ddee:	697b      	ldr	r3, [r7, #20]
 800ddf0:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800ddf2:	4a0e      	ldr	r2, [pc, #56]	; (800de2c <tcp_input+0x4c0>)
 800ddf4:	697b      	ldr	r3, [r7, #20]
 800ddf6:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800ddf8:	6978      	ldr	r0, [r7, #20]
 800ddfa:	f000 fa03 	bl	800e204 <tcp_listen_input>
      }
      pbuf_free(p);
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f7fd ff80 	bl	800bd04 <pbuf_free>
      return;
 800de04:	e1a8      	b.n	800e158 <tcp_input+0x7ec>
 800de06:	bf00      	nop
 800de08:	2000f210 	.word	0x2000f210
 800de0c:	200098d4 	.word	0x200098d4
 800de10:	0801684c 	.word	0x0801684c
 800de14:	08016978 	.word	0x08016978
 800de18:	08016898 	.word	0x08016898
 800de1c:	2000f1f4 	.word	0x2000f1f4
 800de20:	080169a4 	.word	0x080169a4
 800de24:	2000f1f8 	.word	0x2000f1f8
 800de28:	080169d0 	.word	0x080169d0
 800de2c:	2000f1f0 	.word	0x2000f1f0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800de30:	69fb      	ldr	r3, [r7, #28]
 800de32:	2b00      	cmp	r3, #0
 800de34:	f000 8158 	beq.w	800e0e8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800de38:	4b95      	ldr	r3, [pc, #596]	; (800e090 <tcp_input+0x724>)
 800de3a:	2200      	movs	r2, #0
 800de3c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	891a      	ldrh	r2, [r3, #8]
 800de42:	4b93      	ldr	r3, [pc, #588]	; (800e090 <tcp_input+0x724>)
 800de44:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800de46:	4a92      	ldr	r2, [pc, #584]	; (800e090 <tcp_input+0x724>)
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800de4c:	4b91      	ldr	r3, [pc, #580]	; (800e094 <tcp_input+0x728>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	4a8f      	ldr	r2, [pc, #572]	; (800e090 <tcp_input+0x724>)
 800de52:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800de54:	4b90      	ldr	r3, [pc, #576]	; (800e098 <tcp_input+0x72c>)
 800de56:	2200      	movs	r2, #0
 800de58:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800de5a:	4b90      	ldr	r3, [pc, #576]	; (800e09c <tcp_input+0x730>)
 800de5c:	2200      	movs	r2, #0
 800de5e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800de60:	4b8f      	ldr	r3, [pc, #572]	; (800e0a0 <tcp_input+0x734>)
 800de62:	2200      	movs	r2, #0
 800de64:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800de66:	4b8f      	ldr	r3, [pc, #572]	; (800e0a4 <tcp_input+0x738>)
 800de68:	781b      	ldrb	r3, [r3, #0]
 800de6a:	f003 0308 	and.w	r3, r3, #8
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d006      	beq.n	800de80 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	7b5b      	ldrb	r3, [r3, #13]
 800de76:	f043 0301 	orr.w	r3, r3, #1
 800de7a:	b2da      	uxtb	r2, r3
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de84:	2b00      	cmp	r3, #0
 800de86:	d017      	beq.n	800deb8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800de88:	69f8      	ldr	r0, [r7, #28]
 800de8a:	f7ff f929 	bl	800d0e0 <tcp_process_refused_data>
 800de8e:	4603      	mov	r3, r0
 800de90:	f113 0f0d 	cmn.w	r3, #13
 800de94:	d007      	beq.n	800dea6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800de96:	69fb      	ldr	r3, [r7, #28]
 800de98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d00c      	beq.n	800deb8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800de9e:	4b82      	ldr	r3, [pc, #520]	; (800e0a8 <tcp_input+0x73c>)
 800dea0:	881b      	ldrh	r3, [r3, #0]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d008      	beq.n	800deb8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800deaa:	2b00      	cmp	r3, #0
 800deac:	f040 80e3 	bne.w	800e076 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800deb0:	69f8      	ldr	r0, [r7, #28]
 800deb2:	f003 f9ad 	bl	8011210 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800deb6:	e0de      	b.n	800e076 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800deb8:	4a7c      	ldr	r2, [pc, #496]	; (800e0ac <tcp_input+0x740>)
 800deba:	69fb      	ldr	r3, [r7, #28]
 800debc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800debe:	69f8      	ldr	r0, [r7, #28]
 800dec0:	f000 fb18 	bl	800e4f4 <tcp_process>
 800dec4:	4603      	mov	r3, r0
 800dec6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dec8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800decc:	f113 0f0d 	cmn.w	r3, #13
 800ded0:	f000 80d3 	beq.w	800e07a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800ded4:	4b71      	ldr	r3, [pc, #452]	; (800e09c <tcp_input+0x730>)
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	f003 0308 	and.w	r3, r3, #8
 800dedc:	2b00      	cmp	r3, #0
 800dede:	d015      	beq.n	800df0c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dee0:	69fb      	ldr	r3, [r7, #28]
 800dee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	d008      	beq.n	800defc <tcp_input+0x590>
 800deea:	69fb      	ldr	r3, [r7, #28]
 800deec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800def0:	69fa      	ldr	r2, [r7, #28]
 800def2:	6912      	ldr	r2, [r2, #16]
 800def4:	f06f 010d 	mvn.w	r1, #13
 800def8:	4610      	mov	r0, r2
 800defa:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800defc:	69f9      	ldr	r1, [r7, #28]
 800defe:	486c      	ldr	r0, [pc, #432]	; (800e0b0 <tcp_input+0x744>)
 800df00:	f7ff fbbc 	bl	800d67c <tcp_pcb_remove>
        tcp_free(pcb);
 800df04:	69f8      	ldr	r0, [r7, #28]
 800df06:	f7fe f9a9 	bl	800c25c <tcp_free>
 800df0a:	e0da      	b.n	800e0c2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800df0c:	2300      	movs	r3, #0
 800df0e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800df10:	4b63      	ldr	r3, [pc, #396]	; (800e0a0 <tcp_input+0x734>)
 800df12:	881b      	ldrh	r3, [r3, #0]
 800df14:	2b00      	cmp	r3, #0
 800df16:	d01d      	beq.n	800df54 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800df18:	4b61      	ldr	r3, [pc, #388]	; (800e0a0 <tcp_input+0x734>)
 800df1a:	881b      	ldrh	r3, [r3, #0]
 800df1c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800df1e:	69fb      	ldr	r3, [r7, #28]
 800df20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df24:	2b00      	cmp	r3, #0
 800df26:	d00a      	beq.n	800df3e <tcp_input+0x5d2>
 800df28:	69fb      	ldr	r3, [r7, #28]
 800df2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800df2e:	69fa      	ldr	r2, [r7, #28]
 800df30:	6910      	ldr	r0, [r2, #16]
 800df32:	89fa      	ldrh	r2, [r7, #14]
 800df34:	69f9      	ldr	r1, [r7, #28]
 800df36:	4798      	blx	r3
 800df38:	4603      	mov	r3, r0
 800df3a:	74fb      	strb	r3, [r7, #19]
 800df3c:	e001      	b.n	800df42 <tcp_input+0x5d6>
 800df3e:	2300      	movs	r3, #0
 800df40:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800df42:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800df46:	f113 0f0d 	cmn.w	r3, #13
 800df4a:	f000 8098 	beq.w	800e07e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800df4e:	4b54      	ldr	r3, [pc, #336]	; (800e0a0 <tcp_input+0x734>)
 800df50:	2200      	movs	r2, #0
 800df52:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800df54:	69f8      	ldr	r0, [r7, #28]
 800df56:	f000 f915 	bl	800e184 <tcp_input_delayed_close>
 800df5a:	4603      	mov	r3, r0
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	f040 8090 	bne.w	800e082 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800df62:	4b4d      	ldr	r3, [pc, #308]	; (800e098 <tcp_input+0x72c>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d041      	beq.n	800dfee <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800df6a:	69fb      	ldr	r3, [r7, #28]
 800df6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d006      	beq.n	800df80 <tcp_input+0x614>
 800df72:	4b50      	ldr	r3, [pc, #320]	; (800e0b4 <tcp_input+0x748>)
 800df74:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800df78:	494f      	ldr	r1, [pc, #316]	; (800e0b8 <tcp_input+0x74c>)
 800df7a:	4850      	ldr	r0, [pc, #320]	; (800e0bc <tcp_input+0x750>)
 800df7c:	f006 fb7c 	bl	8014678 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800df80:	69fb      	ldr	r3, [r7, #28]
 800df82:	8b5b      	ldrh	r3, [r3, #26]
 800df84:	f003 0310 	and.w	r3, r3, #16
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d008      	beq.n	800df9e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800df8c:	4b42      	ldr	r3, [pc, #264]	; (800e098 <tcp_input+0x72c>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	4618      	mov	r0, r3
 800df92:	f7fd feb7 	bl	800bd04 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800df96:	69f8      	ldr	r0, [r7, #28]
 800df98:	f7fe fc48 	bl	800c82c <tcp_abort>
            goto aborted;
 800df9c:	e091      	b.n	800e0c2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800df9e:	69fb      	ldr	r3, [r7, #28]
 800dfa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d00c      	beq.n	800dfc2 <tcp_input+0x656>
 800dfa8:	69fb      	ldr	r3, [r7, #28]
 800dfaa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dfae:	69fb      	ldr	r3, [r7, #28]
 800dfb0:	6918      	ldr	r0, [r3, #16]
 800dfb2:	4b39      	ldr	r3, [pc, #228]	; (800e098 <tcp_input+0x72c>)
 800dfb4:	681a      	ldr	r2, [r3, #0]
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	69f9      	ldr	r1, [r7, #28]
 800dfba:	47a0      	blx	r4
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	74fb      	strb	r3, [r7, #19]
 800dfc0:	e008      	b.n	800dfd4 <tcp_input+0x668>
 800dfc2:	4b35      	ldr	r3, [pc, #212]	; (800e098 <tcp_input+0x72c>)
 800dfc4:	681a      	ldr	r2, [r3, #0]
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	69f9      	ldr	r1, [r7, #28]
 800dfca:	2000      	movs	r0, #0
 800dfcc:	f7ff f95e 	bl	800d28c <tcp_recv_null>
 800dfd0:	4603      	mov	r3, r0
 800dfd2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800dfd4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dfd8:	f113 0f0d 	cmn.w	r3, #13
 800dfdc:	d053      	beq.n	800e086 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800dfde:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dfe2:	2b00      	cmp	r3, #0
 800dfe4:	d003      	beq.n	800dfee <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800dfe6:	4b2c      	ldr	r3, [pc, #176]	; (800e098 <tcp_input+0x72c>)
 800dfe8:	681a      	ldr	r2, [r3, #0]
 800dfea:	69fb      	ldr	r3, [r7, #28]
 800dfec:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800dfee:	4b2b      	ldr	r3, [pc, #172]	; (800e09c <tcp_input+0x730>)
 800dff0:	781b      	ldrb	r3, [r3, #0]
 800dff2:	f003 0320 	and.w	r3, r3, #32
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d030      	beq.n	800e05c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800dffa:	69fb      	ldr	r3, [r7, #28]
 800dffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d009      	beq.n	800e016 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e002:	69fb      	ldr	r3, [r7, #28]
 800e004:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e006:	7b5a      	ldrb	r2, [r3, #13]
 800e008:	69fb      	ldr	r3, [r7, #28]
 800e00a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e00c:	f042 0220 	orr.w	r2, r2, #32
 800e010:	b2d2      	uxtb	r2, r2
 800e012:	735a      	strb	r2, [r3, #13]
 800e014:	e022      	b.n	800e05c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e016:	69fb      	ldr	r3, [r7, #28]
 800e018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e01a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e01e:	d005      	beq.n	800e02c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800e020:	69fb      	ldr	r3, [r7, #28]
 800e022:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e024:	3301      	adds	r3, #1
 800e026:	b29a      	uxth	r2, r3
 800e028:	69fb      	ldr	r3, [r7, #28]
 800e02a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e02c:	69fb      	ldr	r3, [r7, #28]
 800e02e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e032:	2b00      	cmp	r3, #0
 800e034:	d00b      	beq.n	800e04e <tcp_input+0x6e2>
 800e036:	69fb      	ldr	r3, [r7, #28]
 800e038:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800e03c:	69fb      	ldr	r3, [r7, #28]
 800e03e:	6918      	ldr	r0, [r3, #16]
 800e040:	2300      	movs	r3, #0
 800e042:	2200      	movs	r2, #0
 800e044:	69f9      	ldr	r1, [r7, #28]
 800e046:	47a0      	blx	r4
 800e048:	4603      	mov	r3, r0
 800e04a:	74fb      	strb	r3, [r7, #19]
 800e04c:	e001      	b.n	800e052 <tcp_input+0x6e6>
 800e04e:	2300      	movs	r3, #0
 800e050:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e052:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e056:	f113 0f0d 	cmn.w	r3, #13
 800e05a:	d016      	beq.n	800e08a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800e05c:	4b13      	ldr	r3, [pc, #76]	; (800e0ac <tcp_input+0x740>)
 800e05e:	2200      	movs	r2, #0
 800e060:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800e062:	69f8      	ldr	r0, [r7, #28]
 800e064:	f000 f88e 	bl	800e184 <tcp_input_delayed_close>
 800e068:	4603      	mov	r3, r0
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	d128      	bne.n	800e0c0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800e06e:	69f8      	ldr	r0, [r7, #28]
 800e070:	f002 fac8 	bl	8010604 <tcp_output>
 800e074:	e025      	b.n	800e0c2 <tcp_input+0x756>
        goto aborted;
 800e076:	bf00      	nop
 800e078:	e023      	b.n	800e0c2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800e07a:	bf00      	nop
 800e07c:	e021      	b.n	800e0c2 <tcp_input+0x756>
              goto aborted;
 800e07e:	bf00      	nop
 800e080:	e01f      	b.n	800e0c2 <tcp_input+0x756>
          goto aborted;
 800e082:	bf00      	nop
 800e084:	e01d      	b.n	800e0c2 <tcp_input+0x756>
            goto aborted;
 800e086:	bf00      	nop
 800e088:	e01b      	b.n	800e0c2 <tcp_input+0x756>
              goto aborted;
 800e08a:	bf00      	nop
 800e08c:	e019      	b.n	800e0c2 <tcp_input+0x756>
 800e08e:	bf00      	nop
 800e090:	2000f200 	.word	0x2000f200
 800e094:	2000f210 	.word	0x2000f210
 800e098:	2000f230 	.word	0x2000f230
 800e09c:	2000f22d 	.word	0x2000f22d
 800e0a0:	2000f228 	.word	0x2000f228
 800e0a4:	2000f22c 	.word	0x2000f22c
 800e0a8:	2000f22a 	.word	0x2000f22a
 800e0ac:	2000f234 	.word	0x2000f234
 800e0b0:	2000f1f4 	.word	0x2000f1f4
 800e0b4:	0801684c 	.word	0x0801684c
 800e0b8:	08016a00 	.word	0x08016a00
 800e0bc:	08016898 	.word	0x08016898
          goto aborted;
 800e0c0:	bf00      	nop
    tcp_input_pcb = NULL;
 800e0c2:	4b27      	ldr	r3, [pc, #156]	; (800e160 <tcp_input+0x7f4>)
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800e0c8:	4b26      	ldr	r3, [pc, #152]	; (800e164 <tcp_input+0x7f8>)
 800e0ca:	2200      	movs	r2, #0
 800e0cc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800e0ce:	4b26      	ldr	r3, [pc, #152]	; (800e168 <tcp_input+0x7fc>)
 800e0d0:	685b      	ldr	r3, [r3, #4]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d03f      	beq.n	800e156 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800e0d6:	4b24      	ldr	r3, [pc, #144]	; (800e168 <tcp_input+0x7fc>)
 800e0d8:	685b      	ldr	r3, [r3, #4]
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7fd fe12 	bl	800bd04 <pbuf_free>
      inseg.p = NULL;
 800e0e0:	4b21      	ldr	r3, [pc, #132]	; (800e168 <tcp_input+0x7fc>)
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800e0e6:	e036      	b.n	800e156 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800e0e8:	4b20      	ldr	r3, [pc, #128]	; (800e16c <tcp_input+0x800>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	899b      	ldrh	r3, [r3, #12]
 800e0ee:	b29b      	uxth	r3, r3
 800e0f0:	4618      	mov	r0, r3
 800e0f2:	f7fc fa15 	bl	800a520 <lwip_htons>
 800e0f6:	4603      	mov	r3, r0
 800e0f8:	b2db      	uxtb	r3, r3
 800e0fa:	f003 0304 	and.w	r3, r3, #4
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d118      	bne.n	800e134 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e102:	4b1b      	ldr	r3, [pc, #108]	; (800e170 <tcp_input+0x804>)
 800e104:	6819      	ldr	r1, [r3, #0]
 800e106:	4b1b      	ldr	r3, [pc, #108]	; (800e174 <tcp_input+0x808>)
 800e108:	881b      	ldrh	r3, [r3, #0]
 800e10a:	461a      	mov	r2, r3
 800e10c:	4b1a      	ldr	r3, [pc, #104]	; (800e178 <tcp_input+0x80c>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e112:	4b16      	ldr	r3, [pc, #88]	; (800e16c <tcp_input+0x800>)
 800e114:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e116:	885b      	ldrh	r3, [r3, #2]
 800e118:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e11a:	4a14      	ldr	r2, [pc, #80]	; (800e16c <tcp_input+0x800>)
 800e11c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e11e:	8812      	ldrh	r2, [r2, #0]
 800e120:	b292      	uxth	r2, r2
 800e122:	9202      	str	r2, [sp, #8]
 800e124:	9301      	str	r3, [sp, #4]
 800e126:	4b15      	ldr	r3, [pc, #84]	; (800e17c <tcp_input+0x810>)
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	4b15      	ldr	r3, [pc, #84]	; (800e180 <tcp_input+0x814>)
 800e12c:	4602      	mov	r2, r0
 800e12e:	2000      	movs	r0, #0
 800e130:	f003 f81c 	bl	801116c <tcp_rst>
    pbuf_free(p);
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f7fd fde5 	bl	800bd04 <pbuf_free>
  return;
 800e13a:	e00c      	b.n	800e156 <tcp_input+0x7ea>
    goto dropped;
 800e13c:	bf00      	nop
 800e13e:	e006      	b.n	800e14e <tcp_input+0x7e2>
    goto dropped;
 800e140:	bf00      	nop
 800e142:	e004      	b.n	800e14e <tcp_input+0x7e2>
    goto dropped;
 800e144:	bf00      	nop
 800e146:	e002      	b.n	800e14e <tcp_input+0x7e2>
      goto dropped;
 800e148:	bf00      	nop
 800e14a:	e000      	b.n	800e14e <tcp_input+0x7e2>
      goto dropped;
 800e14c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800e14e:	6878      	ldr	r0, [r7, #4]
 800e150:	f7fd fdd8 	bl	800bd04 <pbuf_free>
 800e154:	e000      	b.n	800e158 <tcp_input+0x7ec>
  return;
 800e156:	bf00      	nop
}
 800e158:	3724      	adds	r7, #36	; 0x24
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd90      	pop	{r4, r7, pc}
 800e15e:	bf00      	nop
 800e160:	2000f234 	.word	0x2000f234
 800e164:	2000f230 	.word	0x2000f230
 800e168:	2000f200 	.word	0x2000f200
 800e16c:	2000f210 	.word	0x2000f210
 800e170:	2000f224 	.word	0x2000f224
 800e174:	2000f22a 	.word	0x2000f22a
 800e178:	2000f220 	.word	0x2000f220
 800e17c:	200098e4 	.word	0x200098e4
 800e180:	200098e8 	.word	0x200098e8

0800e184 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800e184:	b580      	push	{r7, lr}
 800e186:	b082      	sub	sp, #8
 800e188:	af00      	add	r7, sp, #0
 800e18a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d106      	bne.n	800e1a0 <tcp_input_delayed_close+0x1c>
 800e192:	4b17      	ldr	r3, [pc, #92]	; (800e1f0 <tcp_input_delayed_close+0x6c>)
 800e194:	f240 225a 	movw	r2, #602	; 0x25a
 800e198:	4916      	ldr	r1, [pc, #88]	; (800e1f4 <tcp_input_delayed_close+0x70>)
 800e19a:	4817      	ldr	r0, [pc, #92]	; (800e1f8 <tcp_input_delayed_close+0x74>)
 800e19c:	f006 fa6c 	bl	8014678 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800e1a0:	4b16      	ldr	r3, [pc, #88]	; (800e1fc <tcp_input_delayed_close+0x78>)
 800e1a2:	781b      	ldrb	r3, [r3, #0]
 800e1a4:	f003 0310 	and.w	r3, r3, #16
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d01c      	beq.n	800e1e6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e1ac:	687b      	ldr	r3, [r7, #4]
 800e1ae:	8b5b      	ldrh	r3, [r3, #26]
 800e1b0:	f003 0310 	and.w	r3, r3, #16
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d10d      	bne.n	800e1d4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	d008      	beq.n	800e1d4 <tcp_input_delayed_close+0x50>
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e1c8:	687a      	ldr	r2, [r7, #4]
 800e1ca:	6912      	ldr	r2, [r2, #16]
 800e1cc:	f06f 010e 	mvn.w	r1, #14
 800e1d0:	4610      	mov	r0, r2
 800e1d2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e1d4:	6879      	ldr	r1, [r7, #4]
 800e1d6:	480a      	ldr	r0, [pc, #40]	; (800e200 <tcp_input_delayed_close+0x7c>)
 800e1d8:	f7ff fa50 	bl	800d67c <tcp_pcb_remove>
    tcp_free(pcb);
 800e1dc:	6878      	ldr	r0, [r7, #4]
 800e1de:	f7fe f83d 	bl	800c25c <tcp_free>
    return 1;
 800e1e2:	2301      	movs	r3, #1
 800e1e4:	e000      	b.n	800e1e8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e1e6:	2300      	movs	r3, #0
}
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	3708      	adds	r7, #8
 800e1ec:	46bd      	mov	sp, r7
 800e1ee:	bd80      	pop	{r7, pc}
 800e1f0:	0801684c 	.word	0x0801684c
 800e1f4:	08016a1c 	.word	0x08016a1c
 800e1f8:	08016898 	.word	0x08016898
 800e1fc:	2000f22d 	.word	0x2000f22d
 800e200:	2000f1f4 	.word	0x2000f1f4

0800e204 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e204:	b590      	push	{r4, r7, lr}
 800e206:	b08b      	sub	sp, #44	; 0x2c
 800e208:	af04      	add	r7, sp, #16
 800e20a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e20c:	4b6f      	ldr	r3, [pc, #444]	; (800e3cc <tcp_listen_input+0x1c8>)
 800e20e:	781b      	ldrb	r3, [r3, #0]
 800e210:	f003 0304 	and.w	r3, r3, #4
 800e214:	2b00      	cmp	r3, #0
 800e216:	f040 80d2 	bne.w	800e3be <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d106      	bne.n	800e22e <tcp_listen_input+0x2a>
 800e220:	4b6b      	ldr	r3, [pc, #428]	; (800e3d0 <tcp_listen_input+0x1cc>)
 800e222:	f240 2281 	movw	r2, #641	; 0x281
 800e226:	496b      	ldr	r1, [pc, #428]	; (800e3d4 <tcp_listen_input+0x1d0>)
 800e228:	486b      	ldr	r0, [pc, #428]	; (800e3d8 <tcp_listen_input+0x1d4>)
 800e22a:	f006 fa25 	bl	8014678 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e22e:	4b67      	ldr	r3, [pc, #412]	; (800e3cc <tcp_listen_input+0x1c8>)
 800e230:	781b      	ldrb	r3, [r3, #0]
 800e232:	f003 0310 	and.w	r3, r3, #16
 800e236:	2b00      	cmp	r3, #0
 800e238:	d019      	beq.n	800e26e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e23a:	4b68      	ldr	r3, [pc, #416]	; (800e3dc <tcp_listen_input+0x1d8>)
 800e23c:	6819      	ldr	r1, [r3, #0]
 800e23e:	4b68      	ldr	r3, [pc, #416]	; (800e3e0 <tcp_listen_input+0x1dc>)
 800e240:	881b      	ldrh	r3, [r3, #0]
 800e242:	461a      	mov	r2, r3
 800e244:	4b67      	ldr	r3, [pc, #412]	; (800e3e4 <tcp_listen_input+0x1e0>)
 800e246:	681b      	ldr	r3, [r3, #0]
 800e248:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e24a:	4b67      	ldr	r3, [pc, #412]	; (800e3e8 <tcp_listen_input+0x1e4>)
 800e24c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e24e:	885b      	ldrh	r3, [r3, #2]
 800e250:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e252:	4a65      	ldr	r2, [pc, #404]	; (800e3e8 <tcp_listen_input+0x1e4>)
 800e254:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e256:	8812      	ldrh	r2, [r2, #0]
 800e258:	b292      	uxth	r2, r2
 800e25a:	9202      	str	r2, [sp, #8]
 800e25c:	9301      	str	r3, [sp, #4]
 800e25e:	4b63      	ldr	r3, [pc, #396]	; (800e3ec <tcp_listen_input+0x1e8>)
 800e260:	9300      	str	r3, [sp, #0]
 800e262:	4b63      	ldr	r3, [pc, #396]	; (800e3f0 <tcp_listen_input+0x1ec>)
 800e264:	4602      	mov	r2, r0
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f002 ff80 	bl	801116c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e26c:	e0a9      	b.n	800e3c2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e26e:	4b57      	ldr	r3, [pc, #348]	; (800e3cc <tcp_listen_input+0x1c8>)
 800e270:	781b      	ldrb	r3, [r3, #0]
 800e272:	f003 0302 	and.w	r3, r3, #2
 800e276:	2b00      	cmp	r3, #0
 800e278:	f000 80a3 	beq.w	800e3c2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e27c:	687b      	ldr	r3, [r7, #4]
 800e27e:	7d5b      	ldrb	r3, [r3, #21]
 800e280:	4618      	mov	r0, r3
 800e282:	f7ff f927 	bl	800d4d4 <tcp_alloc>
 800e286:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e288:	697b      	ldr	r3, [r7, #20]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d111      	bne.n	800e2b2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	699b      	ldr	r3, [r3, #24]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d00a      	beq.n	800e2ac <tcp_listen_input+0xa8>
 800e296:	687b      	ldr	r3, [r7, #4]
 800e298:	699b      	ldr	r3, [r3, #24]
 800e29a:	687a      	ldr	r2, [r7, #4]
 800e29c:	6910      	ldr	r0, [r2, #16]
 800e29e:	f04f 32ff 	mov.w	r2, #4294967295
 800e2a2:	2100      	movs	r1, #0
 800e2a4:	4798      	blx	r3
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	73bb      	strb	r3, [r7, #14]
      return;
 800e2aa:	e08b      	b.n	800e3c4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e2ac:	23f0      	movs	r3, #240	; 0xf0
 800e2ae:	73bb      	strb	r3, [r7, #14]
      return;
 800e2b0:	e088      	b.n	800e3c4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e2b2:	4b50      	ldr	r3, [pc, #320]	; (800e3f4 <tcp_listen_input+0x1f0>)
 800e2b4:	695a      	ldr	r2, [r3, #20]
 800e2b6:	697b      	ldr	r3, [r7, #20]
 800e2b8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e2ba:	4b4e      	ldr	r3, [pc, #312]	; (800e3f4 <tcp_listen_input+0x1f0>)
 800e2bc:	691a      	ldr	r2, [r3, #16]
 800e2be:	697b      	ldr	r3, [r7, #20]
 800e2c0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	8ada      	ldrh	r2, [r3, #22]
 800e2c6:	697b      	ldr	r3, [r7, #20]
 800e2c8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e2ca:	4b47      	ldr	r3, [pc, #284]	; (800e3e8 <tcp_listen_input+0x1e4>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	881b      	ldrh	r3, [r3, #0]
 800e2d0:	b29a      	uxth	r2, r3
 800e2d2:	697b      	ldr	r3, [r7, #20]
 800e2d4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e2d6:	697b      	ldr	r3, [r7, #20]
 800e2d8:	2203      	movs	r2, #3
 800e2da:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e2dc:	4b41      	ldr	r3, [pc, #260]	; (800e3e4 <tcp_listen_input+0x1e0>)
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	1c5a      	adds	r2, r3, #1
 800e2e2:	697b      	ldr	r3, [r7, #20]
 800e2e4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2ea:	697b      	ldr	r3, [r7, #20]
 800e2ec:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e2ee:	6978      	ldr	r0, [r7, #20]
 800e2f0:	f7ff fa58 	bl	800d7a4 <tcp_next_iss>
 800e2f4:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	693a      	ldr	r2, [r7, #16]
 800e2fa:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	693a      	ldr	r2, [r7, #16]
 800e300:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e302:	697b      	ldr	r3, [r7, #20]
 800e304:	693a      	ldr	r2, [r7, #16]
 800e306:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e308:	697b      	ldr	r3, [r7, #20]
 800e30a:	693a      	ldr	r2, [r7, #16]
 800e30c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e30e:	4b35      	ldr	r3, [pc, #212]	; (800e3e4 <tcp_listen_input+0x1e0>)
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	1e5a      	subs	r2, r3, #1
 800e314:	697b      	ldr	r3, [r7, #20]
 800e316:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	691a      	ldr	r2, [r3, #16]
 800e31c:	697b      	ldr	r3, [r7, #20]
 800e31e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	687a      	ldr	r2, [r7, #4]
 800e324:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	7a5b      	ldrb	r3, [r3, #9]
 800e32a:	f003 030c 	and.w	r3, r3, #12
 800e32e:	b2da      	uxtb	r2, r3
 800e330:	697b      	ldr	r3, [r7, #20]
 800e332:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e334:	687b      	ldr	r3, [r7, #4]
 800e336:	7a1a      	ldrb	r2, [r3, #8]
 800e338:	697b      	ldr	r3, [r7, #20]
 800e33a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e33c:	4b2e      	ldr	r3, [pc, #184]	; (800e3f8 <tcp_listen_input+0x1f4>)
 800e33e:	681a      	ldr	r2, [r3, #0]
 800e340:	697b      	ldr	r3, [r7, #20]
 800e342:	60da      	str	r2, [r3, #12]
 800e344:	4a2c      	ldr	r2, [pc, #176]	; (800e3f8 <tcp_listen_input+0x1f4>)
 800e346:	697b      	ldr	r3, [r7, #20]
 800e348:	6013      	str	r3, [r2, #0]
 800e34a:	f003 f8d1 	bl	80114f0 <tcp_timer_needed>
 800e34e:	4b2b      	ldr	r3, [pc, #172]	; (800e3fc <tcp_listen_input+0x1f8>)
 800e350:	2201      	movs	r2, #1
 800e352:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e354:	6978      	ldr	r0, [r7, #20]
 800e356:	f001 fd8f 	bl	800fe78 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e35a:	4b23      	ldr	r3, [pc, #140]	; (800e3e8 <tcp_listen_input+0x1e4>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	89db      	ldrh	r3, [r3, #14]
 800e360:	b29a      	uxth	r2, r3
 800e362:	697b      	ldr	r3, [r7, #20]
 800e364:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e368:	697b      	ldr	r3, [r7, #20]
 800e36a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e36e:	697b      	ldr	r3, [r7, #20]
 800e370:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e374:	697b      	ldr	r3, [r7, #20]
 800e376:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e378:	697b      	ldr	r3, [r7, #20]
 800e37a:	3304      	adds	r3, #4
 800e37c:	4618      	mov	r0, r3
 800e37e:	f004 fcc5 	bl	8012d0c <ip4_route>
 800e382:	4601      	mov	r1, r0
 800e384:	697b      	ldr	r3, [r7, #20]
 800e386:	3304      	adds	r3, #4
 800e388:	461a      	mov	r2, r3
 800e38a:	4620      	mov	r0, r4
 800e38c:	f7ff fa30 	bl	800d7f0 <tcp_eff_send_mss_netif>
 800e390:	4603      	mov	r3, r0
 800e392:	461a      	mov	r2, r3
 800e394:	697b      	ldr	r3, [r7, #20]
 800e396:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e398:	2112      	movs	r1, #18
 800e39a:	6978      	ldr	r0, [r7, #20]
 800e39c:	f002 f844 	bl	8010428 <tcp_enqueue_flags>
 800e3a0:	4603      	mov	r3, r0
 800e3a2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e3a4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d004      	beq.n	800e3b6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e3ac:	2100      	movs	r1, #0
 800e3ae:	6978      	ldr	r0, [r7, #20]
 800e3b0:	f7fe f97e 	bl	800c6b0 <tcp_abandon>
      return;
 800e3b4:	e006      	b.n	800e3c4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e3b6:	6978      	ldr	r0, [r7, #20]
 800e3b8:	f002 f924 	bl	8010604 <tcp_output>
  return;
 800e3bc:	e001      	b.n	800e3c2 <tcp_listen_input+0x1be>
    return;
 800e3be:	bf00      	nop
 800e3c0:	e000      	b.n	800e3c4 <tcp_listen_input+0x1c0>
  return;
 800e3c2:	bf00      	nop
}
 800e3c4:	371c      	adds	r7, #28
 800e3c6:	46bd      	mov	sp, r7
 800e3c8:	bd90      	pop	{r4, r7, pc}
 800e3ca:	bf00      	nop
 800e3cc:	2000f22c 	.word	0x2000f22c
 800e3d0:	0801684c 	.word	0x0801684c
 800e3d4:	08016a44 	.word	0x08016a44
 800e3d8:	08016898 	.word	0x08016898
 800e3dc:	2000f224 	.word	0x2000f224
 800e3e0:	2000f22a 	.word	0x2000f22a
 800e3e4:	2000f220 	.word	0x2000f220
 800e3e8:	2000f210 	.word	0x2000f210
 800e3ec:	200098e4 	.word	0x200098e4
 800e3f0:	200098e8 	.word	0x200098e8
 800e3f4:	200098d4 	.word	0x200098d4
 800e3f8:	2000f1f4 	.word	0x2000f1f4
 800e3fc:	2000f1fc 	.word	0x2000f1fc

0800e400 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b086      	sub	sp, #24
 800e404:	af04      	add	r7, sp, #16
 800e406:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e408:	4b2f      	ldr	r3, [pc, #188]	; (800e4c8 <tcp_timewait_input+0xc8>)
 800e40a:	781b      	ldrb	r3, [r3, #0]
 800e40c:	f003 0304 	and.w	r3, r3, #4
 800e410:	2b00      	cmp	r3, #0
 800e412:	d153      	bne.n	800e4bc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e414:	687b      	ldr	r3, [r7, #4]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d106      	bne.n	800e428 <tcp_timewait_input+0x28>
 800e41a:	4b2c      	ldr	r3, [pc, #176]	; (800e4cc <tcp_timewait_input+0xcc>)
 800e41c:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e420:	492b      	ldr	r1, [pc, #172]	; (800e4d0 <tcp_timewait_input+0xd0>)
 800e422:	482c      	ldr	r0, [pc, #176]	; (800e4d4 <tcp_timewait_input+0xd4>)
 800e424:	f006 f928 	bl	8014678 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e428:	4b27      	ldr	r3, [pc, #156]	; (800e4c8 <tcp_timewait_input+0xc8>)
 800e42a:	781b      	ldrb	r3, [r3, #0]
 800e42c:	f003 0302 	and.w	r3, r3, #2
 800e430:	2b00      	cmp	r3, #0
 800e432:	d02a      	beq.n	800e48a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e434:	4b28      	ldr	r3, [pc, #160]	; (800e4d8 <tcp_timewait_input+0xd8>)
 800e436:	681a      	ldr	r2, [r3, #0]
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e43c:	1ad3      	subs	r3, r2, r3
 800e43e:	2b00      	cmp	r3, #0
 800e440:	db2d      	blt.n	800e49e <tcp_timewait_input+0x9e>
 800e442:	4b25      	ldr	r3, [pc, #148]	; (800e4d8 <tcp_timewait_input+0xd8>)
 800e444:	681a      	ldr	r2, [r3, #0]
 800e446:	687b      	ldr	r3, [r7, #4]
 800e448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e44a:	6879      	ldr	r1, [r7, #4]
 800e44c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e44e:	440b      	add	r3, r1
 800e450:	1ad3      	subs	r3, r2, r3
 800e452:	2b00      	cmp	r3, #0
 800e454:	dc23      	bgt.n	800e49e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e456:	4b21      	ldr	r3, [pc, #132]	; (800e4dc <tcp_timewait_input+0xdc>)
 800e458:	6819      	ldr	r1, [r3, #0]
 800e45a:	4b21      	ldr	r3, [pc, #132]	; (800e4e0 <tcp_timewait_input+0xe0>)
 800e45c:	881b      	ldrh	r3, [r3, #0]
 800e45e:	461a      	mov	r2, r3
 800e460:	4b1d      	ldr	r3, [pc, #116]	; (800e4d8 <tcp_timewait_input+0xd8>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e466:	4b1f      	ldr	r3, [pc, #124]	; (800e4e4 <tcp_timewait_input+0xe4>)
 800e468:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e46a:	885b      	ldrh	r3, [r3, #2]
 800e46c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e46e:	4a1d      	ldr	r2, [pc, #116]	; (800e4e4 <tcp_timewait_input+0xe4>)
 800e470:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e472:	8812      	ldrh	r2, [r2, #0]
 800e474:	b292      	uxth	r2, r2
 800e476:	9202      	str	r2, [sp, #8]
 800e478:	9301      	str	r3, [sp, #4]
 800e47a:	4b1b      	ldr	r3, [pc, #108]	; (800e4e8 <tcp_timewait_input+0xe8>)
 800e47c:	9300      	str	r3, [sp, #0]
 800e47e:	4b1b      	ldr	r3, [pc, #108]	; (800e4ec <tcp_timewait_input+0xec>)
 800e480:	4602      	mov	r2, r0
 800e482:	6878      	ldr	r0, [r7, #4]
 800e484:	f002 fe72 	bl	801116c <tcp_rst>
      return;
 800e488:	e01b      	b.n	800e4c2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e48a:	4b0f      	ldr	r3, [pc, #60]	; (800e4c8 <tcp_timewait_input+0xc8>)
 800e48c:	781b      	ldrb	r3, [r3, #0]
 800e48e:	f003 0301 	and.w	r3, r3, #1
 800e492:	2b00      	cmp	r3, #0
 800e494:	d003      	beq.n	800e49e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e496:	4b16      	ldr	r3, [pc, #88]	; (800e4f0 <tcp_timewait_input+0xf0>)
 800e498:	681a      	ldr	r2, [r3, #0]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e49e:	4b10      	ldr	r3, [pc, #64]	; (800e4e0 <tcp_timewait_input+0xe0>)
 800e4a0:	881b      	ldrh	r3, [r3, #0]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d00c      	beq.n	800e4c0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e4a6:	687b      	ldr	r3, [r7, #4]
 800e4a8:	8b5b      	ldrh	r3, [r3, #26]
 800e4aa:	f043 0302 	orr.w	r3, r3, #2
 800e4ae:	b29a      	uxth	r2, r3
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f002 f8a5 	bl	8010604 <tcp_output>
  }
  return;
 800e4ba:	e001      	b.n	800e4c0 <tcp_timewait_input+0xc0>
    return;
 800e4bc:	bf00      	nop
 800e4be:	e000      	b.n	800e4c2 <tcp_timewait_input+0xc2>
  return;
 800e4c0:	bf00      	nop
}
 800e4c2:	3708      	adds	r7, #8
 800e4c4:	46bd      	mov	sp, r7
 800e4c6:	bd80      	pop	{r7, pc}
 800e4c8:	2000f22c 	.word	0x2000f22c
 800e4cc:	0801684c 	.word	0x0801684c
 800e4d0:	08016a64 	.word	0x08016a64
 800e4d4:	08016898 	.word	0x08016898
 800e4d8:	2000f220 	.word	0x2000f220
 800e4dc:	2000f224 	.word	0x2000f224
 800e4e0:	2000f22a 	.word	0x2000f22a
 800e4e4:	2000f210 	.word	0x2000f210
 800e4e8:	200098e4 	.word	0x200098e4
 800e4ec:	200098e8 	.word	0x200098e8
 800e4f0:	2000f1e8 	.word	0x2000f1e8

0800e4f4 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e4f4:	b590      	push	{r4, r7, lr}
 800e4f6:	b08d      	sub	sp, #52	; 0x34
 800e4f8:	af04      	add	r7, sp, #16
 800e4fa:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e500:	2300      	movs	r3, #0
 800e502:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2b00      	cmp	r3, #0
 800e508:	d106      	bne.n	800e518 <tcp_process+0x24>
 800e50a:	4b9d      	ldr	r3, [pc, #628]	; (800e780 <tcp_process+0x28c>)
 800e50c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e510:	499c      	ldr	r1, [pc, #624]	; (800e784 <tcp_process+0x290>)
 800e512:	489d      	ldr	r0, [pc, #628]	; (800e788 <tcp_process+0x294>)
 800e514:	f006 f8b0 	bl	8014678 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e518:	4b9c      	ldr	r3, [pc, #624]	; (800e78c <tcp_process+0x298>)
 800e51a:	781b      	ldrb	r3, [r3, #0]
 800e51c:	f003 0304 	and.w	r3, r3, #4
 800e520:	2b00      	cmp	r3, #0
 800e522:	d04e      	beq.n	800e5c2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	7d1b      	ldrb	r3, [r3, #20]
 800e528:	2b02      	cmp	r3, #2
 800e52a:	d108      	bne.n	800e53e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e530:	4b97      	ldr	r3, [pc, #604]	; (800e790 <tcp_process+0x29c>)
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	429a      	cmp	r2, r3
 800e536:	d123      	bne.n	800e580 <tcp_process+0x8c>
        acceptable = 1;
 800e538:	2301      	movs	r3, #1
 800e53a:	76fb      	strb	r3, [r7, #27]
 800e53c:	e020      	b.n	800e580 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e542:	4b94      	ldr	r3, [pc, #592]	; (800e794 <tcp_process+0x2a0>)
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	429a      	cmp	r2, r3
 800e548:	d102      	bne.n	800e550 <tcp_process+0x5c>
        acceptable = 1;
 800e54a:	2301      	movs	r3, #1
 800e54c:	76fb      	strb	r3, [r7, #27]
 800e54e:	e017      	b.n	800e580 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e550:	4b90      	ldr	r3, [pc, #576]	; (800e794 <tcp_process+0x2a0>)
 800e552:	681a      	ldr	r2, [r3, #0]
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e558:	1ad3      	subs	r3, r2, r3
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	db10      	blt.n	800e580 <tcp_process+0x8c>
 800e55e:	4b8d      	ldr	r3, [pc, #564]	; (800e794 <tcp_process+0x2a0>)
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e566:	6879      	ldr	r1, [r7, #4]
 800e568:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e56a:	440b      	add	r3, r1
 800e56c:	1ad3      	subs	r3, r2, r3
 800e56e:	2b00      	cmp	r3, #0
 800e570:	dc06      	bgt.n	800e580 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	8b5b      	ldrh	r3, [r3, #26]
 800e576:	f043 0302 	orr.w	r3, r3, #2
 800e57a:	b29a      	uxth	r2, r3
 800e57c:	687b      	ldr	r3, [r7, #4]
 800e57e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e580:	7efb      	ldrb	r3, [r7, #27]
 800e582:	2b00      	cmp	r3, #0
 800e584:	d01b      	beq.n	800e5be <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	7d1b      	ldrb	r3, [r3, #20]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d106      	bne.n	800e59c <tcp_process+0xa8>
 800e58e:	4b7c      	ldr	r3, [pc, #496]	; (800e780 <tcp_process+0x28c>)
 800e590:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e594:	4980      	ldr	r1, [pc, #512]	; (800e798 <tcp_process+0x2a4>)
 800e596:	487c      	ldr	r0, [pc, #496]	; (800e788 <tcp_process+0x294>)
 800e598:	f006 f86e 	bl	8014678 <iprintf>
      recv_flags |= TF_RESET;
 800e59c:	4b7f      	ldr	r3, [pc, #508]	; (800e79c <tcp_process+0x2a8>)
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	f043 0308 	orr.w	r3, r3, #8
 800e5a4:	b2da      	uxtb	r2, r3
 800e5a6:	4b7d      	ldr	r3, [pc, #500]	; (800e79c <tcp_process+0x2a8>)
 800e5a8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	8b5b      	ldrh	r3, [r3, #26]
 800e5ae:	f023 0301 	bic.w	r3, r3, #1
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	687b      	ldr	r3, [r7, #4]
 800e5b6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e5b8:	f06f 030d 	mvn.w	r3, #13
 800e5bc:	e37a      	b.n	800ecb4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e5be:	2300      	movs	r3, #0
 800e5c0:	e378      	b.n	800ecb4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e5c2:	4b72      	ldr	r3, [pc, #456]	; (800e78c <tcp_process+0x298>)
 800e5c4:	781b      	ldrb	r3, [r3, #0]
 800e5c6:	f003 0302 	and.w	r3, r3, #2
 800e5ca:	2b00      	cmp	r3, #0
 800e5cc:	d010      	beq.n	800e5f0 <tcp_process+0xfc>
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	7d1b      	ldrb	r3, [r3, #20]
 800e5d2:	2b02      	cmp	r3, #2
 800e5d4:	d00c      	beq.n	800e5f0 <tcp_process+0xfc>
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	7d1b      	ldrb	r3, [r3, #20]
 800e5da:	2b03      	cmp	r3, #3
 800e5dc:	d008      	beq.n	800e5f0 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	8b5b      	ldrh	r3, [r3, #26]
 800e5e2:	f043 0302 	orr.w	r3, r3, #2
 800e5e6:	b29a      	uxth	r2, r3
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e5ec:	2300      	movs	r3, #0
 800e5ee:	e361      	b.n	800ecb4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	8b5b      	ldrh	r3, [r3, #26]
 800e5f4:	f003 0310 	and.w	r3, r3, #16
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d103      	bne.n	800e604 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e5fc:	4b68      	ldr	r3, [pc, #416]	; (800e7a0 <tcp_process+0x2ac>)
 800e5fe:	681a      	ldr	r2, [r3, #0]
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e604:	687b      	ldr	r3, [r7, #4]
 800e606:	2200      	movs	r2, #0
 800e608:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2200      	movs	r2, #0
 800e610:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f001 fc2f 	bl	800fe78 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	7d1b      	ldrb	r3, [r3, #20]
 800e61e:	3b02      	subs	r3, #2
 800e620:	2b07      	cmp	r3, #7
 800e622:	f200 8337 	bhi.w	800ec94 <tcp_process+0x7a0>
 800e626:	a201      	add	r2, pc, #4	; (adr r2, 800e62c <tcp_process+0x138>)
 800e628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e62c:	0800e64d 	.word	0x0800e64d
 800e630:	0800e87d 	.word	0x0800e87d
 800e634:	0800e9f5 	.word	0x0800e9f5
 800e638:	0800ea1f 	.word	0x0800ea1f
 800e63c:	0800eb43 	.word	0x0800eb43
 800e640:	0800e9f5 	.word	0x0800e9f5
 800e644:	0800ebcf 	.word	0x0800ebcf
 800e648:	0800ec5f 	.word	0x0800ec5f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e64c:	4b4f      	ldr	r3, [pc, #316]	; (800e78c <tcp_process+0x298>)
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	f003 0310 	and.w	r3, r3, #16
 800e654:	2b00      	cmp	r3, #0
 800e656:	f000 80e4 	beq.w	800e822 <tcp_process+0x32e>
 800e65a:	4b4c      	ldr	r3, [pc, #304]	; (800e78c <tcp_process+0x298>)
 800e65c:	781b      	ldrb	r3, [r3, #0]
 800e65e:	f003 0302 	and.w	r3, r3, #2
 800e662:	2b00      	cmp	r3, #0
 800e664:	f000 80dd 	beq.w	800e822 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e66c:	1c5a      	adds	r2, r3, #1
 800e66e:	4b48      	ldr	r3, [pc, #288]	; (800e790 <tcp_process+0x29c>)
 800e670:	681b      	ldr	r3, [r3, #0]
 800e672:	429a      	cmp	r2, r3
 800e674:	f040 80d5 	bne.w	800e822 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e678:	4b46      	ldr	r3, [pc, #280]	; (800e794 <tcp_process+0x2a0>)
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	1c5a      	adds	r2, r3, #1
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e68a:	4b41      	ldr	r3, [pc, #260]	; (800e790 <tcp_process+0x29c>)
 800e68c:	681a      	ldr	r2, [r3, #0]
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e692:	4b44      	ldr	r3, [pc, #272]	; (800e7a4 <tcp_process+0x2b0>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	89db      	ldrh	r3, [r3, #14]
 800e698:	b29a      	uxth	r2, r3
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e6ac:	4b39      	ldr	r3, [pc, #228]	; (800e794 <tcp_process+0x2a0>)
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	1e5a      	subs	r2, r3, #1
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2204      	movs	r2, #4
 800e6ba:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	3304      	adds	r3, #4
 800e6c4:	4618      	mov	r0, r3
 800e6c6:	f004 fb21 	bl	8012d0c <ip4_route>
 800e6ca:	4601      	mov	r1, r0
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	3304      	adds	r3, #4
 800e6d0:	461a      	mov	r2, r3
 800e6d2:	4620      	mov	r0, r4
 800e6d4:	f7ff f88c 	bl	800d7f0 <tcp_eff_send_mss_netif>
 800e6d8:	4603      	mov	r3, r0
 800e6da:	461a      	mov	r2, r3
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6e4:	009a      	lsls	r2, r3, #2
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6ea:	005b      	lsls	r3, r3, #1
 800e6ec:	f241 111c 	movw	r1, #4380	; 0x111c
 800e6f0:	428b      	cmp	r3, r1
 800e6f2:	bf38      	it	cc
 800e6f4:	460b      	movcc	r3, r1
 800e6f6:	429a      	cmp	r2, r3
 800e6f8:	d204      	bcs.n	800e704 <tcp_process+0x210>
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e6fe:	009b      	lsls	r3, r3, #2
 800e700:	b29b      	uxth	r3, r3
 800e702:	e00d      	b.n	800e720 <tcp_process+0x22c>
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e708:	005b      	lsls	r3, r3, #1
 800e70a:	f241 121c 	movw	r2, #4380	; 0x111c
 800e70e:	4293      	cmp	r3, r2
 800e710:	d904      	bls.n	800e71c <tcp_process+0x228>
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e716:	005b      	lsls	r3, r3, #1
 800e718:	b29b      	uxth	r3, r3
 800e71a:	e001      	b.n	800e720 <tcp_process+0x22c>
 800e71c:	f241 131c 	movw	r3, #4380	; 0x111c
 800e720:	687a      	ldr	r2, [r7, #4]
 800e722:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e726:	687b      	ldr	r3, [r7, #4]
 800e728:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d106      	bne.n	800e73e <tcp_process+0x24a>
 800e730:	4b13      	ldr	r3, [pc, #76]	; (800e780 <tcp_process+0x28c>)
 800e732:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e736:	491c      	ldr	r1, [pc, #112]	; (800e7a8 <tcp_process+0x2b4>)
 800e738:	4813      	ldr	r0, [pc, #76]	; (800e788 <tcp_process+0x294>)
 800e73a:	f005 ff9d 	bl	8014678 <iprintf>
        --pcb->snd_queuelen;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e744:	3b01      	subs	r3, #1
 800e746:	b29a      	uxth	r2, r3
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e752:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e754:	69fb      	ldr	r3, [r7, #28]
 800e756:	2b00      	cmp	r3, #0
 800e758:	d12a      	bne.n	800e7b0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e75e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e760:	69fb      	ldr	r3, [r7, #28]
 800e762:	2b00      	cmp	r3, #0
 800e764:	d106      	bne.n	800e774 <tcp_process+0x280>
 800e766:	4b06      	ldr	r3, [pc, #24]	; (800e780 <tcp_process+0x28c>)
 800e768:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e76c:	490f      	ldr	r1, [pc, #60]	; (800e7ac <tcp_process+0x2b8>)
 800e76e:	4806      	ldr	r0, [pc, #24]	; (800e788 <tcp_process+0x294>)
 800e770:	f005 ff82 	bl	8014678 <iprintf>
          pcb->unsent = rseg->next;
 800e774:	69fb      	ldr	r3, [r7, #28]
 800e776:	681a      	ldr	r2, [r3, #0]
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	66da      	str	r2, [r3, #108]	; 0x6c
 800e77c:	e01c      	b.n	800e7b8 <tcp_process+0x2c4>
 800e77e:	bf00      	nop
 800e780:	0801684c 	.word	0x0801684c
 800e784:	08016a84 	.word	0x08016a84
 800e788:	08016898 	.word	0x08016898
 800e78c:	2000f22c 	.word	0x2000f22c
 800e790:	2000f224 	.word	0x2000f224
 800e794:	2000f220 	.word	0x2000f220
 800e798:	08016aa0 	.word	0x08016aa0
 800e79c:	2000f22d 	.word	0x2000f22d
 800e7a0:	2000f1e8 	.word	0x2000f1e8
 800e7a4:	2000f210 	.word	0x2000f210
 800e7a8:	08016ac0 	.word	0x08016ac0
 800e7ac:	08016ad8 	.word	0x08016ad8
        } else {
          pcb->unacked = rseg->next;
 800e7b0:	69fb      	ldr	r3, [r7, #28]
 800e7b2:	681a      	ldr	r2, [r3, #0]
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e7b8:	69f8      	ldr	r0, [r7, #28]
 800e7ba:	f7fe fd22 	bl	800d202 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d104      	bne.n	800e7d0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e7cc:	861a      	strh	r2, [r3, #48]	; 0x30
 800e7ce:	e006      	b.n	800e7de <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2200      	movs	r2, #0
 800e7da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d00a      	beq.n	800e7fe <tcp_process+0x30a>
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e7ee:	687a      	ldr	r2, [r7, #4]
 800e7f0:	6910      	ldr	r0, [r2, #16]
 800e7f2:	2200      	movs	r2, #0
 800e7f4:	6879      	ldr	r1, [r7, #4]
 800e7f6:	4798      	blx	r3
 800e7f8:	4603      	mov	r3, r0
 800e7fa:	76bb      	strb	r3, [r7, #26]
 800e7fc:	e001      	b.n	800e802 <tcp_process+0x30e>
 800e7fe:	2300      	movs	r3, #0
 800e800:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e802:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e806:	f113 0f0d 	cmn.w	r3, #13
 800e80a:	d102      	bne.n	800e812 <tcp_process+0x31e>
          return ERR_ABRT;
 800e80c:	f06f 030c 	mvn.w	r3, #12
 800e810:	e250      	b.n	800ecb4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	8b5b      	ldrh	r3, [r3, #26]
 800e816:	f043 0302 	orr.w	r3, r3, #2
 800e81a:	b29a      	uxth	r2, r3
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e820:	e23a      	b.n	800ec98 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e822:	4b98      	ldr	r3, [pc, #608]	; (800ea84 <tcp_process+0x590>)
 800e824:	781b      	ldrb	r3, [r3, #0]
 800e826:	f003 0310 	and.w	r3, r3, #16
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	f000 8234 	beq.w	800ec98 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e830:	4b95      	ldr	r3, [pc, #596]	; (800ea88 <tcp_process+0x594>)
 800e832:	6819      	ldr	r1, [r3, #0]
 800e834:	4b95      	ldr	r3, [pc, #596]	; (800ea8c <tcp_process+0x598>)
 800e836:	881b      	ldrh	r3, [r3, #0]
 800e838:	461a      	mov	r2, r3
 800e83a:	4b95      	ldr	r3, [pc, #596]	; (800ea90 <tcp_process+0x59c>)
 800e83c:	681b      	ldr	r3, [r3, #0]
 800e83e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e840:	4b94      	ldr	r3, [pc, #592]	; (800ea94 <tcp_process+0x5a0>)
 800e842:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e844:	885b      	ldrh	r3, [r3, #2]
 800e846:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e848:	4a92      	ldr	r2, [pc, #584]	; (800ea94 <tcp_process+0x5a0>)
 800e84a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e84c:	8812      	ldrh	r2, [r2, #0]
 800e84e:	b292      	uxth	r2, r2
 800e850:	9202      	str	r2, [sp, #8]
 800e852:	9301      	str	r3, [sp, #4]
 800e854:	4b90      	ldr	r3, [pc, #576]	; (800ea98 <tcp_process+0x5a4>)
 800e856:	9300      	str	r3, [sp, #0]
 800e858:	4b90      	ldr	r3, [pc, #576]	; (800ea9c <tcp_process+0x5a8>)
 800e85a:	4602      	mov	r2, r0
 800e85c:	6878      	ldr	r0, [r7, #4]
 800e85e:	f002 fc85 	bl	801116c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e868:	2b05      	cmp	r3, #5
 800e86a:	f200 8215 	bhi.w	800ec98 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2200      	movs	r2, #0
 800e872:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e874:	6878      	ldr	r0, [r7, #4]
 800e876:	f002 fa4f 	bl	8010d18 <tcp_rexmit_rto>
      break;
 800e87a:	e20d      	b.n	800ec98 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e87c:	4b81      	ldr	r3, [pc, #516]	; (800ea84 <tcp_process+0x590>)
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	f003 0310 	and.w	r3, r3, #16
 800e884:	2b00      	cmp	r3, #0
 800e886:	f000 80a1 	beq.w	800e9cc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e88a:	4b7f      	ldr	r3, [pc, #508]	; (800ea88 <tcp_process+0x594>)
 800e88c:	681a      	ldr	r2, [r3, #0]
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e892:	1ad3      	subs	r3, r2, r3
 800e894:	3b01      	subs	r3, #1
 800e896:	2b00      	cmp	r3, #0
 800e898:	db7e      	blt.n	800e998 <tcp_process+0x4a4>
 800e89a:	4b7b      	ldr	r3, [pc, #492]	; (800ea88 <tcp_process+0x594>)
 800e89c:	681a      	ldr	r2, [r3, #0]
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8a2:	1ad3      	subs	r3, r2, r3
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	dc77      	bgt.n	800e998 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2204      	movs	r2, #4
 800e8ac:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8b2:	2b00      	cmp	r3, #0
 800e8b4:	d102      	bne.n	800e8bc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e8b6:	23fa      	movs	r3, #250	; 0xfa
 800e8b8:	76bb      	strb	r3, [r7, #26]
 800e8ba:	e01d      	b.n	800e8f8 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8c0:	699b      	ldr	r3, [r3, #24]
 800e8c2:	2b00      	cmp	r3, #0
 800e8c4:	d106      	bne.n	800e8d4 <tcp_process+0x3e0>
 800e8c6:	4b76      	ldr	r3, [pc, #472]	; (800eaa0 <tcp_process+0x5ac>)
 800e8c8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e8cc:	4975      	ldr	r1, [pc, #468]	; (800eaa4 <tcp_process+0x5b0>)
 800e8ce:	4876      	ldr	r0, [pc, #472]	; (800eaa8 <tcp_process+0x5b4>)
 800e8d0:	f005 fed2 	bl	8014678 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8d8:	699b      	ldr	r3, [r3, #24]
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d00a      	beq.n	800e8f4 <tcp_process+0x400>
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8e2:	699b      	ldr	r3, [r3, #24]
 800e8e4:	687a      	ldr	r2, [r7, #4]
 800e8e6:	6910      	ldr	r0, [r2, #16]
 800e8e8:	2200      	movs	r2, #0
 800e8ea:	6879      	ldr	r1, [r7, #4]
 800e8ec:	4798      	blx	r3
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	76bb      	strb	r3, [r7, #26]
 800e8f2:	e001      	b.n	800e8f8 <tcp_process+0x404>
 800e8f4:	23f0      	movs	r3, #240	; 0xf0
 800e8f6:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e8f8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d00a      	beq.n	800e916 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e900:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e904:	f113 0f0d 	cmn.w	r3, #13
 800e908:	d002      	beq.n	800e910 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f7fd ff8e 	bl	800c82c <tcp_abort>
            }
            return ERR_ABRT;
 800e910:	f06f 030c 	mvn.w	r3, #12
 800e914:	e1ce      	b.n	800ecb4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f000 fae0 	bl	800eedc <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e91c:	4b63      	ldr	r3, [pc, #396]	; (800eaac <tcp_process+0x5b8>)
 800e91e:	881b      	ldrh	r3, [r3, #0]
 800e920:	2b00      	cmp	r3, #0
 800e922:	d005      	beq.n	800e930 <tcp_process+0x43c>
            recv_acked--;
 800e924:	4b61      	ldr	r3, [pc, #388]	; (800eaac <tcp_process+0x5b8>)
 800e926:	881b      	ldrh	r3, [r3, #0]
 800e928:	3b01      	subs	r3, #1
 800e92a:	b29a      	uxth	r2, r3
 800e92c:	4b5f      	ldr	r3, [pc, #380]	; (800eaac <tcp_process+0x5b8>)
 800e92e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e934:	009a      	lsls	r2, r3, #2
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e93a:	005b      	lsls	r3, r3, #1
 800e93c:	f241 111c 	movw	r1, #4380	; 0x111c
 800e940:	428b      	cmp	r3, r1
 800e942:	bf38      	it	cc
 800e944:	460b      	movcc	r3, r1
 800e946:	429a      	cmp	r2, r3
 800e948:	d204      	bcs.n	800e954 <tcp_process+0x460>
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e94e:	009b      	lsls	r3, r3, #2
 800e950:	b29b      	uxth	r3, r3
 800e952:	e00d      	b.n	800e970 <tcp_process+0x47c>
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e958:	005b      	lsls	r3, r3, #1
 800e95a:	f241 121c 	movw	r2, #4380	; 0x111c
 800e95e:	4293      	cmp	r3, r2
 800e960:	d904      	bls.n	800e96c <tcp_process+0x478>
 800e962:	687b      	ldr	r3, [r7, #4]
 800e964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e966:	005b      	lsls	r3, r3, #1
 800e968:	b29b      	uxth	r3, r3
 800e96a:	e001      	b.n	800e970 <tcp_process+0x47c>
 800e96c:	f241 131c 	movw	r3, #4380	; 0x111c
 800e970:	687a      	ldr	r2, [r7, #4]
 800e972:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e976:	4b4e      	ldr	r3, [pc, #312]	; (800eab0 <tcp_process+0x5bc>)
 800e978:	781b      	ldrb	r3, [r3, #0]
 800e97a:	f003 0320 	and.w	r3, r3, #32
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d037      	beq.n	800e9f2 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	8b5b      	ldrh	r3, [r3, #26]
 800e986:	f043 0302 	orr.w	r3, r3, #2
 800e98a:	b29a      	uxth	r2, r3
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	2207      	movs	r2, #7
 800e994:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e996:	e02c      	b.n	800e9f2 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e998:	4b3b      	ldr	r3, [pc, #236]	; (800ea88 <tcp_process+0x594>)
 800e99a:	6819      	ldr	r1, [r3, #0]
 800e99c:	4b3b      	ldr	r3, [pc, #236]	; (800ea8c <tcp_process+0x598>)
 800e99e:	881b      	ldrh	r3, [r3, #0]
 800e9a0:	461a      	mov	r2, r3
 800e9a2:	4b3b      	ldr	r3, [pc, #236]	; (800ea90 <tcp_process+0x59c>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9a8:	4b3a      	ldr	r3, [pc, #232]	; (800ea94 <tcp_process+0x5a0>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9ac:	885b      	ldrh	r3, [r3, #2]
 800e9ae:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e9b0:	4a38      	ldr	r2, [pc, #224]	; (800ea94 <tcp_process+0x5a0>)
 800e9b2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e9b4:	8812      	ldrh	r2, [r2, #0]
 800e9b6:	b292      	uxth	r2, r2
 800e9b8:	9202      	str	r2, [sp, #8]
 800e9ba:	9301      	str	r3, [sp, #4]
 800e9bc:	4b36      	ldr	r3, [pc, #216]	; (800ea98 <tcp_process+0x5a4>)
 800e9be:	9300      	str	r3, [sp, #0]
 800e9c0:	4b36      	ldr	r3, [pc, #216]	; (800ea9c <tcp_process+0x5a8>)
 800e9c2:	4602      	mov	r2, r0
 800e9c4:	6878      	ldr	r0, [r7, #4]
 800e9c6:	f002 fbd1 	bl	801116c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e9ca:	e167      	b.n	800ec9c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e9cc:	4b2d      	ldr	r3, [pc, #180]	; (800ea84 <tcp_process+0x590>)
 800e9ce:	781b      	ldrb	r3, [r3, #0]
 800e9d0:	f003 0302 	and.w	r3, r3, #2
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	f000 8161 	beq.w	800ec9c <tcp_process+0x7a8>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9de:	1e5a      	subs	r2, r3, #1
 800e9e0:	4b2b      	ldr	r3, [pc, #172]	; (800ea90 <tcp_process+0x59c>)
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	429a      	cmp	r2, r3
 800e9e6:	f040 8159 	bne.w	800ec9c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e9ea:	6878      	ldr	r0, [r7, #4]
 800e9ec:	f002 f9b6 	bl	8010d5c <tcp_rexmit>
      break;
 800e9f0:	e154      	b.n	800ec9c <tcp_process+0x7a8>
 800e9f2:	e153      	b.n	800ec9c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e9f4:	6878      	ldr	r0, [r7, #4]
 800e9f6:	f000 fa71 	bl	800eedc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e9fa:	4b2d      	ldr	r3, [pc, #180]	; (800eab0 <tcp_process+0x5bc>)
 800e9fc:	781b      	ldrb	r3, [r3, #0]
 800e9fe:	f003 0320 	and.w	r3, r3, #32
 800ea02:	2b00      	cmp	r3, #0
 800ea04:	f000 814c 	beq.w	800eca0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	8b5b      	ldrh	r3, [r3, #26]
 800ea0c:	f043 0302 	orr.w	r3, r3, #2
 800ea10:	b29a      	uxth	r2, r3
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	2207      	movs	r2, #7
 800ea1a:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ea1c:	e140      	b.n	800eca0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800ea1e:	6878      	ldr	r0, [r7, #4]
 800ea20:	f000 fa5c 	bl	800eedc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800ea24:	4b22      	ldr	r3, [pc, #136]	; (800eab0 <tcp_process+0x5bc>)
 800ea26:	781b      	ldrb	r3, [r3, #0]
 800ea28:	f003 0320 	and.w	r3, r3, #32
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d071      	beq.n	800eb14 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ea30:	4b14      	ldr	r3, [pc, #80]	; (800ea84 <tcp_process+0x590>)
 800ea32:	781b      	ldrb	r3, [r3, #0]
 800ea34:	f003 0310 	and.w	r3, r3, #16
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d060      	beq.n	800eafe <tcp_process+0x60a>
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea40:	4b11      	ldr	r3, [pc, #68]	; (800ea88 <tcp_process+0x594>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	429a      	cmp	r2, r3
 800ea46:	d15a      	bne.n	800eafe <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d156      	bne.n	800eafe <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	8b5b      	ldrh	r3, [r3, #26]
 800ea54:	f043 0302 	orr.w	r3, r3, #2
 800ea58:	b29a      	uxth	r2, r3
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f7fe fdbc 	bl	800d5dc <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800ea64:	4b13      	ldr	r3, [pc, #76]	; (800eab4 <tcp_process+0x5c0>)
 800ea66:	681b      	ldr	r3, [r3, #0]
 800ea68:	687a      	ldr	r2, [r7, #4]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d105      	bne.n	800ea7a <tcp_process+0x586>
 800ea6e:	4b11      	ldr	r3, [pc, #68]	; (800eab4 <tcp_process+0x5c0>)
 800ea70:	681b      	ldr	r3, [r3, #0]
 800ea72:	68db      	ldr	r3, [r3, #12]
 800ea74:	4a0f      	ldr	r2, [pc, #60]	; (800eab4 <tcp_process+0x5c0>)
 800ea76:	6013      	str	r3, [r2, #0]
 800ea78:	e02e      	b.n	800ead8 <tcp_process+0x5e4>
 800ea7a:	4b0e      	ldr	r3, [pc, #56]	; (800eab4 <tcp_process+0x5c0>)
 800ea7c:	681b      	ldr	r3, [r3, #0]
 800ea7e:	617b      	str	r3, [r7, #20]
 800ea80:	e027      	b.n	800ead2 <tcp_process+0x5de>
 800ea82:	bf00      	nop
 800ea84:	2000f22c 	.word	0x2000f22c
 800ea88:	2000f224 	.word	0x2000f224
 800ea8c:	2000f22a 	.word	0x2000f22a
 800ea90:	2000f220 	.word	0x2000f220
 800ea94:	2000f210 	.word	0x2000f210
 800ea98:	200098e4 	.word	0x200098e4
 800ea9c:	200098e8 	.word	0x200098e8
 800eaa0:	0801684c 	.word	0x0801684c
 800eaa4:	08016aec 	.word	0x08016aec
 800eaa8:	08016898 	.word	0x08016898
 800eaac:	2000f228 	.word	0x2000f228
 800eab0:	2000f22d 	.word	0x2000f22d
 800eab4:	2000f1f4 	.word	0x2000f1f4
 800eab8:	697b      	ldr	r3, [r7, #20]
 800eaba:	68db      	ldr	r3, [r3, #12]
 800eabc:	687a      	ldr	r2, [r7, #4]
 800eabe:	429a      	cmp	r2, r3
 800eac0:	d104      	bne.n	800eacc <tcp_process+0x5d8>
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	68da      	ldr	r2, [r3, #12]
 800eac6:	697b      	ldr	r3, [r7, #20]
 800eac8:	60da      	str	r2, [r3, #12]
 800eaca:	e005      	b.n	800ead8 <tcp_process+0x5e4>
 800eacc:	697b      	ldr	r3, [r7, #20]
 800eace:	68db      	ldr	r3, [r3, #12]
 800ead0:	617b      	str	r3, [r7, #20]
 800ead2:	697b      	ldr	r3, [r7, #20]
 800ead4:	2b00      	cmp	r3, #0
 800ead6:	d1ef      	bne.n	800eab8 <tcp_process+0x5c4>
 800ead8:	687b      	ldr	r3, [r7, #4]
 800eada:	2200      	movs	r2, #0
 800eadc:	60da      	str	r2, [r3, #12]
 800eade:	4b77      	ldr	r3, [pc, #476]	; (800ecbc <tcp_process+0x7c8>)
 800eae0:	2201      	movs	r2, #1
 800eae2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	220a      	movs	r2, #10
 800eae8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800eaea:	4b75      	ldr	r3, [pc, #468]	; (800ecc0 <tcp_process+0x7cc>)
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	687b      	ldr	r3, [r7, #4]
 800eaf0:	60da      	str	r2, [r3, #12]
 800eaf2:	4a73      	ldr	r2, [pc, #460]	; (800ecc0 <tcp_process+0x7cc>)
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	6013      	str	r3, [r2, #0]
 800eaf8:	f002 fcfa 	bl	80114f0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800eafc:	e0d2      	b.n	800eca4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	8b5b      	ldrh	r3, [r3, #26]
 800eb02:	f043 0302 	orr.w	r3, r3, #2
 800eb06:	b29a      	uxth	r2, r3
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2208      	movs	r2, #8
 800eb10:	751a      	strb	r2, [r3, #20]
      break;
 800eb12:	e0c7      	b.n	800eca4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eb14:	4b6b      	ldr	r3, [pc, #428]	; (800ecc4 <tcp_process+0x7d0>)
 800eb16:	781b      	ldrb	r3, [r3, #0]
 800eb18:	f003 0310 	and.w	r3, r3, #16
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	f000 80c1 	beq.w	800eca4 <tcp_process+0x7b0>
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eb26:	4b68      	ldr	r3, [pc, #416]	; (800ecc8 <tcp_process+0x7d4>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	f040 80ba 	bne.w	800eca4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	f040 80b5 	bne.w	800eca4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2206      	movs	r2, #6
 800eb3e:	751a      	strb	r2, [r3, #20]
      break;
 800eb40:	e0b0      	b.n	800eca4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f000 f9ca 	bl	800eedc <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800eb48:	4b60      	ldr	r3, [pc, #384]	; (800eccc <tcp_process+0x7d8>)
 800eb4a:	781b      	ldrb	r3, [r3, #0]
 800eb4c:	f003 0320 	and.w	r3, r3, #32
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	f000 80a9 	beq.w	800eca8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	8b5b      	ldrh	r3, [r3, #26]
 800eb5a:	f043 0302 	orr.w	r3, r3, #2
 800eb5e:	b29a      	uxth	r2, r3
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f7fe fd39 	bl	800d5dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800eb6a:	4b59      	ldr	r3, [pc, #356]	; (800ecd0 <tcp_process+0x7dc>)
 800eb6c:	681b      	ldr	r3, [r3, #0]
 800eb6e:	687a      	ldr	r2, [r7, #4]
 800eb70:	429a      	cmp	r2, r3
 800eb72:	d105      	bne.n	800eb80 <tcp_process+0x68c>
 800eb74:	4b56      	ldr	r3, [pc, #344]	; (800ecd0 <tcp_process+0x7dc>)
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	68db      	ldr	r3, [r3, #12]
 800eb7a:	4a55      	ldr	r2, [pc, #340]	; (800ecd0 <tcp_process+0x7dc>)
 800eb7c:	6013      	str	r3, [r2, #0]
 800eb7e:	e013      	b.n	800eba8 <tcp_process+0x6b4>
 800eb80:	4b53      	ldr	r3, [pc, #332]	; (800ecd0 <tcp_process+0x7dc>)
 800eb82:	681b      	ldr	r3, [r3, #0]
 800eb84:	613b      	str	r3, [r7, #16]
 800eb86:	e00c      	b.n	800eba2 <tcp_process+0x6ae>
 800eb88:	693b      	ldr	r3, [r7, #16]
 800eb8a:	68db      	ldr	r3, [r3, #12]
 800eb8c:	687a      	ldr	r2, [r7, #4]
 800eb8e:	429a      	cmp	r2, r3
 800eb90:	d104      	bne.n	800eb9c <tcp_process+0x6a8>
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	68da      	ldr	r2, [r3, #12]
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	60da      	str	r2, [r3, #12]
 800eb9a:	e005      	b.n	800eba8 <tcp_process+0x6b4>
 800eb9c:	693b      	ldr	r3, [r7, #16]
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	613b      	str	r3, [r7, #16]
 800eba2:	693b      	ldr	r3, [r7, #16]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d1ef      	bne.n	800eb88 <tcp_process+0x694>
 800eba8:	687b      	ldr	r3, [r7, #4]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	60da      	str	r2, [r3, #12]
 800ebae:	4b43      	ldr	r3, [pc, #268]	; (800ecbc <tcp_process+0x7c8>)
 800ebb0:	2201      	movs	r2, #1
 800ebb2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	220a      	movs	r2, #10
 800ebb8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ebba:	4b41      	ldr	r3, [pc, #260]	; (800ecc0 <tcp_process+0x7cc>)
 800ebbc:	681a      	ldr	r2, [r3, #0]
 800ebbe:	687b      	ldr	r3, [r7, #4]
 800ebc0:	60da      	str	r2, [r3, #12]
 800ebc2:	4a3f      	ldr	r2, [pc, #252]	; (800ecc0 <tcp_process+0x7cc>)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	6013      	str	r3, [r2, #0]
 800ebc8:	f002 fc92 	bl	80114f0 <tcp_timer_needed>
      }
      break;
 800ebcc:	e06c      	b.n	800eca8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ebce:	6878      	ldr	r0, [r7, #4]
 800ebd0:	f000 f984 	bl	800eedc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ebd4:	4b3b      	ldr	r3, [pc, #236]	; (800ecc4 <tcp_process+0x7d0>)
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	f003 0310 	and.w	r3, r3, #16
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d065      	beq.n	800ecac <tcp_process+0x7b8>
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ebe4:	4b38      	ldr	r3, [pc, #224]	; (800ecc8 <tcp_process+0x7d4>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	429a      	cmp	r2, r3
 800ebea:	d15f      	bne.n	800ecac <tcp_process+0x7b8>
 800ebec:	687b      	ldr	r3, [r7, #4]
 800ebee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d15b      	bne.n	800ecac <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f7fe fcf1 	bl	800d5dc <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ebfa:	4b35      	ldr	r3, [pc, #212]	; (800ecd0 <tcp_process+0x7dc>)
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	687a      	ldr	r2, [r7, #4]
 800ec00:	429a      	cmp	r2, r3
 800ec02:	d105      	bne.n	800ec10 <tcp_process+0x71c>
 800ec04:	4b32      	ldr	r3, [pc, #200]	; (800ecd0 <tcp_process+0x7dc>)
 800ec06:	681b      	ldr	r3, [r3, #0]
 800ec08:	68db      	ldr	r3, [r3, #12]
 800ec0a:	4a31      	ldr	r2, [pc, #196]	; (800ecd0 <tcp_process+0x7dc>)
 800ec0c:	6013      	str	r3, [r2, #0]
 800ec0e:	e013      	b.n	800ec38 <tcp_process+0x744>
 800ec10:	4b2f      	ldr	r3, [pc, #188]	; (800ecd0 <tcp_process+0x7dc>)
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	60fb      	str	r3, [r7, #12]
 800ec16:	e00c      	b.n	800ec32 <tcp_process+0x73e>
 800ec18:	68fb      	ldr	r3, [r7, #12]
 800ec1a:	68db      	ldr	r3, [r3, #12]
 800ec1c:	687a      	ldr	r2, [r7, #4]
 800ec1e:	429a      	cmp	r2, r3
 800ec20:	d104      	bne.n	800ec2c <tcp_process+0x738>
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	68da      	ldr	r2, [r3, #12]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	60da      	str	r2, [r3, #12]
 800ec2a:	e005      	b.n	800ec38 <tcp_process+0x744>
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	68db      	ldr	r3, [r3, #12]
 800ec30:	60fb      	str	r3, [r7, #12]
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d1ef      	bne.n	800ec18 <tcp_process+0x724>
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	2200      	movs	r2, #0
 800ec3c:	60da      	str	r2, [r3, #12]
 800ec3e:	4b1f      	ldr	r3, [pc, #124]	; (800ecbc <tcp_process+0x7c8>)
 800ec40:	2201      	movs	r2, #1
 800ec42:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	220a      	movs	r2, #10
 800ec48:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ec4a:	4b1d      	ldr	r3, [pc, #116]	; (800ecc0 <tcp_process+0x7cc>)
 800ec4c:	681a      	ldr	r2, [r3, #0]
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	60da      	str	r2, [r3, #12]
 800ec52:	4a1b      	ldr	r2, [pc, #108]	; (800ecc0 <tcp_process+0x7cc>)
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	6013      	str	r3, [r2, #0]
 800ec58:	f002 fc4a 	bl	80114f0 <tcp_timer_needed>
      }
      break;
 800ec5c:	e026      	b.n	800ecac <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800ec5e:	6878      	ldr	r0, [r7, #4]
 800ec60:	f000 f93c 	bl	800eedc <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ec64:	4b17      	ldr	r3, [pc, #92]	; (800ecc4 <tcp_process+0x7d0>)
 800ec66:	781b      	ldrb	r3, [r3, #0]
 800ec68:	f003 0310 	and.w	r3, r3, #16
 800ec6c:	2b00      	cmp	r3, #0
 800ec6e:	d01f      	beq.n	800ecb0 <tcp_process+0x7bc>
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ec74:	4b14      	ldr	r3, [pc, #80]	; (800ecc8 <tcp_process+0x7d4>)
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d119      	bne.n	800ecb0 <tcp_process+0x7bc>
 800ec7c:	687b      	ldr	r3, [r7, #4]
 800ec7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	d115      	bne.n	800ecb0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800ec84:	4b11      	ldr	r3, [pc, #68]	; (800eccc <tcp_process+0x7d8>)
 800ec86:	781b      	ldrb	r3, [r3, #0]
 800ec88:	f043 0310 	orr.w	r3, r3, #16
 800ec8c:	b2da      	uxtb	r2, r3
 800ec8e:	4b0f      	ldr	r3, [pc, #60]	; (800eccc <tcp_process+0x7d8>)
 800ec90:	701a      	strb	r2, [r3, #0]
      }
      break;
 800ec92:	e00d      	b.n	800ecb0 <tcp_process+0x7bc>
    default:
      break;
 800ec94:	bf00      	nop
 800ec96:	e00c      	b.n	800ecb2 <tcp_process+0x7be>
      break;
 800ec98:	bf00      	nop
 800ec9a:	e00a      	b.n	800ecb2 <tcp_process+0x7be>
      break;
 800ec9c:	bf00      	nop
 800ec9e:	e008      	b.n	800ecb2 <tcp_process+0x7be>
      break;
 800eca0:	bf00      	nop
 800eca2:	e006      	b.n	800ecb2 <tcp_process+0x7be>
      break;
 800eca4:	bf00      	nop
 800eca6:	e004      	b.n	800ecb2 <tcp_process+0x7be>
      break;
 800eca8:	bf00      	nop
 800ecaa:	e002      	b.n	800ecb2 <tcp_process+0x7be>
      break;
 800ecac:	bf00      	nop
 800ecae:	e000      	b.n	800ecb2 <tcp_process+0x7be>
      break;
 800ecb0:	bf00      	nop
  }
  return ERR_OK;
 800ecb2:	2300      	movs	r3, #0
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3724      	adds	r7, #36	; 0x24
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd90      	pop	{r4, r7, pc}
 800ecbc:	2000f1fc 	.word	0x2000f1fc
 800ecc0:	2000f1f8 	.word	0x2000f1f8
 800ecc4:	2000f22c 	.word	0x2000f22c
 800ecc8:	2000f224 	.word	0x2000f224
 800eccc:	2000f22d 	.word	0x2000f22d
 800ecd0:	2000f1f4 	.word	0x2000f1f4

0800ecd4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800ecd4:	b590      	push	{r4, r7, lr}
 800ecd6:	b085      	sub	sp, #20
 800ecd8:	af00      	add	r7, sp, #0
 800ecda:	6078      	str	r0, [r7, #4]
 800ecdc:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d106      	bne.n	800ecf2 <tcp_oos_insert_segment+0x1e>
 800ece4:	4b3b      	ldr	r3, [pc, #236]	; (800edd4 <tcp_oos_insert_segment+0x100>)
 800ece6:	f240 421f 	movw	r2, #1055	; 0x41f
 800ecea:	493b      	ldr	r1, [pc, #236]	; (800edd8 <tcp_oos_insert_segment+0x104>)
 800ecec:	483b      	ldr	r0, [pc, #236]	; (800eddc <tcp_oos_insert_segment+0x108>)
 800ecee:	f005 fcc3 	bl	8014678 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800ecf2:	687b      	ldr	r3, [r7, #4]
 800ecf4:	68db      	ldr	r3, [r3, #12]
 800ecf6:	899b      	ldrh	r3, [r3, #12]
 800ecf8:	b29b      	uxth	r3, r3
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7fb fc10 	bl	800a520 <lwip_htons>
 800ed00:	4603      	mov	r3, r0
 800ed02:	b2db      	uxtb	r3, r3
 800ed04:	f003 0301 	and.w	r3, r3, #1
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d028      	beq.n	800ed5e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800ed0c:	6838      	ldr	r0, [r7, #0]
 800ed0e:	f7fe fa63 	bl	800d1d8 <tcp_segs_free>
    next = NULL;
 800ed12:	2300      	movs	r3, #0
 800ed14:	603b      	str	r3, [r7, #0]
 800ed16:	e056      	b.n	800edc6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	68db      	ldr	r3, [r3, #12]
 800ed1c:	899b      	ldrh	r3, [r3, #12]
 800ed1e:	b29b      	uxth	r3, r3
 800ed20:	4618      	mov	r0, r3
 800ed22:	f7fb fbfd 	bl	800a520 <lwip_htons>
 800ed26:	4603      	mov	r3, r0
 800ed28:	b2db      	uxtb	r3, r3
 800ed2a:	f003 0301 	and.w	r3, r3, #1
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d00d      	beq.n	800ed4e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	68db      	ldr	r3, [r3, #12]
 800ed36:	899b      	ldrh	r3, [r3, #12]
 800ed38:	b29c      	uxth	r4, r3
 800ed3a:	2001      	movs	r0, #1
 800ed3c:	f7fb fbf0 	bl	800a520 <lwip_htons>
 800ed40:	4603      	mov	r3, r0
 800ed42:	461a      	mov	r2, r3
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	68db      	ldr	r3, [r3, #12]
 800ed48:	4322      	orrs	r2, r4
 800ed4a:	b292      	uxth	r2, r2
 800ed4c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ed52:	683b      	ldr	r3, [r7, #0]
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ed58:	68f8      	ldr	r0, [r7, #12]
 800ed5a:	f7fe fa52 	bl	800d202 <tcp_seg_free>
    while (next &&
 800ed5e:	683b      	ldr	r3, [r7, #0]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	d00e      	beq.n	800ed82 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ed64:	687b      	ldr	r3, [r7, #4]
 800ed66:	891b      	ldrh	r3, [r3, #8]
 800ed68:	461a      	mov	r2, r3
 800ed6a:	4b1d      	ldr	r3, [pc, #116]	; (800ede0 <tcp_oos_insert_segment+0x10c>)
 800ed6c:	681b      	ldr	r3, [r3, #0]
 800ed6e:	441a      	add	r2, r3
 800ed70:	683b      	ldr	r3, [r7, #0]
 800ed72:	68db      	ldr	r3, [r3, #12]
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	6839      	ldr	r1, [r7, #0]
 800ed78:	8909      	ldrh	r1, [r1, #8]
 800ed7a:	440b      	add	r3, r1
 800ed7c:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	daca      	bge.n	800ed18 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d01e      	beq.n	800edc6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	891b      	ldrh	r3, [r3, #8]
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	4b14      	ldr	r3, [pc, #80]	; (800ede0 <tcp_oos_insert_segment+0x10c>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	441a      	add	r2, r3
 800ed94:	683b      	ldr	r3, [r7, #0]
 800ed96:	68db      	ldr	r3, [r3, #12]
 800ed98:	685b      	ldr	r3, [r3, #4]
 800ed9a:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ed9c:	2b00      	cmp	r3, #0
 800ed9e:	dd12      	ble.n	800edc6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	68db      	ldr	r3, [r3, #12]
 800eda4:	685b      	ldr	r3, [r3, #4]
 800eda6:	b29a      	uxth	r2, r3
 800eda8:	4b0d      	ldr	r3, [pc, #52]	; (800ede0 <tcp_oos_insert_segment+0x10c>)
 800edaa:	681b      	ldr	r3, [r3, #0]
 800edac:	b29b      	uxth	r3, r3
 800edae:	1ad3      	subs	r3, r2, r3
 800edb0:	b29a      	uxth	r2, r3
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800edb6:	687b      	ldr	r3, [r7, #4]
 800edb8:	685a      	ldr	r2, [r3, #4]
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	891b      	ldrh	r3, [r3, #8]
 800edbe:	4619      	mov	r1, r3
 800edc0:	4610      	mov	r0, r2
 800edc2:	f7fc fe19 	bl	800b9f8 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	683a      	ldr	r2, [r7, #0]
 800edca:	601a      	str	r2, [r3, #0]
}
 800edcc:	bf00      	nop
 800edce:	3714      	adds	r7, #20
 800edd0:	46bd      	mov	sp, r7
 800edd2:	bd90      	pop	{r4, r7, pc}
 800edd4:	0801684c 	.word	0x0801684c
 800edd8:	08016b0c 	.word	0x08016b0c
 800eddc:	08016898 	.word	0x08016898
 800ede0:	2000f220 	.word	0x2000f220

0800ede4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ede4:	b5b0      	push	{r4, r5, r7, lr}
 800ede6:	b086      	sub	sp, #24
 800ede8:	af00      	add	r7, sp, #0
 800edea:	60f8      	str	r0, [r7, #12]
 800edec:	60b9      	str	r1, [r7, #8]
 800edee:	607a      	str	r2, [r7, #4]
 800edf0:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800edf2:	e03e      	b.n	800ee72 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800edf4:	68bb      	ldr	r3, [r7, #8]
 800edf6:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	681b      	ldr	r3, [r3, #0]
 800edfc:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	685b      	ldr	r3, [r3, #4]
 800ee02:	4618      	mov	r0, r3
 800ee04:	f7fd f80c 	bl	800be20 <pbuf_clen>
 800ee08:	4603      	mov	r3, r0
 800ee0a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee12:	8a7a      	ldrh	r2, [r7, #18]
 800ee14:	429a      	cmp	r2, r3
 800ee16:	d906      	bls.n	800ee26 <tcp_free_acked_segments+0x42>
 800ee18:	4b2a      	ldr	r3, [pc, #168]	; (800eec4 <tcp_free_acked_segments+0xe0>)
 800ee1a:	f240 4257 	movw	r2, #1111	; 0x457
 800ee1e:	492a      	ldr	r1, [pc, #168]	; (800eec8 <tcp_free_acked_segments+0xe4>)
 800ee20:	482a      	ldr	r0, [pc, #168]	; (800eecc <tcp_free_acked_segments+0xe8>)
 800ee22:	f005 fc29 	bl	8014678 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ee26:	68fb      	ldr	r3, [r7, #12]
 800ee28:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ee2c:	8a7b      	ldrh	r3, [r7, #18]
 800ee2e:	1ad3      	subs	r3, r2, r3
 800ee30:	b29a      	uxth	r2, r3
 800ee32:	68fb      	ldr	r3, [r7, #12]
 800ee34:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ee38:	697b      	ldr	r3, [r7, #20]
 800ee3a:	891a      	ldrh	r2, [r3, #8]
 800ee3c:	4b24      	ldr	r3, [pc, #144]	; (800eed0 <tcp_free_acked_segments+0xec>)
 800ee3e:	881b      	ldrh	r3, [r3, #0]
 800ee40:	4413      	add	r3, r2
 800ee42:	b29a      	uxth	r2, r3
 800ee44:	4b22      	ldr	r3, [pc, #136]	; (800eed0 <tcp_free_acked_segments+0xec>)
 800ee46:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800ee48:	6978      	ldr	r0, [r7, #20]
 800ee4a:	f7fe f9da 	bl	800d202 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	d00c      	beq.n	800ee72 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d109      	bne.n	800ee72 <tcp_free_acked_segments+0x8e>
 800ee5e:	683b      	ldr	r3, [r7, #0]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d106      	bne.n	800ee72 <tcp_free_acked_segments+0x8e>
 800ee64:	4b17      	ldr	r3, [pc, #92]	; (800eec4 <tcp_free_acked_segments+0xe0>)
 800ee66:	f240 4261 	movw	r2, #1121	; 0x461
 800ee6a:	491a      	ldr	r1, [pc, #104]	; (800eed4 <tcp_free_acked_segments+0xf0>)
 800ee6c:	4817      	ldr	r0, [pc, #92]	; (800eecc <tcp_free_acked_segments+0xe8>)
 800ee6e:	f005 fc03 	bl	8014678 <iprintf>
  while (seg_list != NULL &&
 800ee72:	68bb      	ldr	r3, [r7, #8]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d020      	beq.n	800eeba <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ee78:	68bb      	ldr	r3, [r7, #8]
 800ee7a:	68db      	ldr	r3, [r3, #12]
 800ee7c:	685b      	ldr	r3, [r3, #4]
 800ee7e:	4618      	mov	r0, r3
 800ee80:	f7fb fb63 	bl	800a54a <lwip_htonl>
 800ee84:	4604      	mov	r4, r0
 800ee86:	68bb      	ldr	r3, [r7, #8]
 800ee88:	891b      	ldrh	r3, [r3, #8]
 800ee8a:	461d      	mov	r5, r3
 800ee8c:	68bb      	ldr	r3, [r7, #8]
 800ee8e:	68db      	ldr	r3, [r3, #12]
 800ee90:	899b      	ldrh	r3, [r3, #12]
 800ee92:	b29b      	uxth	r3, r3
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7fb fb43 	bl	800a520 <lwip_htons>
 800ee9a:	4603      	mov	r3, r0
 800ee9c:	b2db      	uxtb	r3, r3
 800ee9e:	f003 0303 	and.w	r3, r3, #3
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d001      	beq.n	800eeaa <tcp_free_acked_segments+0xc6>
 800eea6:	2301      	movs	r3, #1
 800eea8:	e000      	b.n	800eeac <tcp_free_acked_segments+0xc8>
 800eeaa:	2300      	movs	r3, #0
 800eeac:	442b      	add	r3, r5
 800eeae:	18e2      	adds	r2, r4, r3
 800eeb0:	4b09      	ldr	r3, [pc, #36]	; (800eed8 <tcp_free_acked_segments+0xf4>)
 800eeb2:	681b      	ldr	r3, [r3, #0]
 800eeb4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800eeb6:	2b00      	cmp	r3, #0
 800eeb8:	dd9c      	ble.n	800edf4 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800eeba:	68bb      	ldr	r3, [r7, #8]
}
 800eebc:	4618      	mov	r0, r3
 800eebe:	3718      	adds	r7, #24
 800eec0:	46bd      	mov	sp, r7
 800eec2:	bdb0      	pop	{r4, r5, r7, pc}
 800eec4:	0801684c 	.word	0x0801684c
 800eec8:	08016b34 	.word	0x08016b34
 800eecc:	08016898 	.word	0x08016898
 800eed0:	2000f228 	.word	0x2000f228
 800eed4:	08016b5c 	.word	0x08016b5c
 800eed8:	2000f224 	.word	0x2000f224

0800eedc <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800eedc:	b5b0      	push	{r4, r5, r7, lr}
 800eede:	b094      	sub	sp, #80	; 0x50
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800eee4:	2300      	movs	r3, #0
 800eee6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d106      	bne.n	800eefc <tcp_receive+0x20>
 800eeee:	4b91      	ldr	r3, [pc, #580]	; (800f134 <tcp_receive+0x258>)
 800eef0:	f240 427b 	movw	r2, #1147	; 0x47b
 800eef4:	4990      	ldr	r1, [pc, #576]	; (800f138 <tcp_receive+0x25c>)
 800eef6:	4891      	ldr	r0, [pc, #580]	; (800f13c <tcp_receive+0x260>)
 800eef8:	f005 fbbe 	bl	8014678 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800eefc:	687b      	ldr	r3, [r7, #4]
 800eefe:	7d1b      	ldrb	r3, [r3, #20]
 800ef00:	2b03      	cmp	r3, #3
 800ef02:	d806      	bhi.n	800ef12 <tcp_receive+0x36>
 800ef04:	4b8b      	ldr	r3, [pc, #556]	; (800f134 <tcp_receive+0x258>)
 800ef06:	f240 427c 	movw	r2, #1148	; 0x47c
 800ef0a:	498d      	ldr	r1, [pc, #564]	; (800f140 <tcp_receive+0x264>)
 800ef0c:	488b      	ldr	r0, [pc, #556]	; (800f13c <tcp_receive+0x260>)
 800ef0e:	f005 fbb3 	bl	8014678 <iprintf>

  if (flags & TCP_ACK) {
 800ef12:	4b8c      	ldr	r3, [pc, #560]	; (800f144 <tcp_receive+0x268>)
 800ef14:	781b      	ldrb	r3, [r3, #0]
 800ef16:	f003 0310 	and.w	r3, r3, #16
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	f000 8264 	beq.w	800f3e8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef26:	461a      	mov	r2, r3
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ef2c:	4413      	add	r3, r2
 800ef2e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ef30:	687b      	ldr	r3, [r7, #4]
 800ef32:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef34:	4b84      	ldr	r3, [pc, #528]	; (800f148 <tcp_receive+0x26c>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	1ad3      	subs	r3, r2, r3
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	db1b      	blt.n	800ef76 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ef42:	4b81      	ldr	r3, [pc, #516]	; (800f148 <tcp_receive+0x26c>)
 800ef44:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ef46:	429a      	cmp	r2, r3
 800ef48:	d106      	bne.n	800ef58 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ef4e:	4b7f      	ldr	r3, [pc, #508]	; (800f14c <tcp_receive+0x270>)
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	1ad3      	subs	r3, r2, r3
 800ef54:	2b00      	cmp	r3, #0
 800ef56:	db0e      	blt.n	800ef76 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800ef5c:	4b7b      	ldr	r3, [pc, #492]	; (800f14c <tcp_receive+0x270>)
 800ef5e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d125      	bne.n	800efb0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800ef64:	4b7a      	ldr	r3, [pc, #488]	; (800f150 <tcp_receive+0x274>)
 800ef66:	681b      	ldr	r3, [r3, #0]
 800ef68:	89db      	ldrh	r3, [r3, #14]
 800ef6a:	b29a      	uxth	r2, r3
 800ef6c:	687b      	ldr	r3, [r7, #4]
 800ef6e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef72:	429a      	cmp	r2, r3
 800ef74:	d91c      	bls.n	800efb0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800ef76:	4b76      	ldr	r3, [pc, #472]	; (800f150 <tcp_receive+0x274>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	89db      	ldrh	r3, [r3, #14]
 800ef7c:	b29a      	uxth	r2, r3
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800ef84:	687b      	ldr	r3, [r7, #4]
 800ef86:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ef90:	429a      	cmp	r2, r3
 800ef92:	d205      	bcs.n	800efa0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800efa0:	4b69      	ldr	r3, [pc, #420]	; (800f148 <tcp_receive+0x26c>)
 800efa2:	681a      	ldr	r2, [r3, #0]
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800efa8:	4b68      	ldr	r3, [pc, #416]	; (800f14c <tcp_receive+0x270>)
 800efaa:	681a      	ldr	r2, [r3, #0]
 800efac:	687b      	ldr	r3, [r7, #4]
 800efae:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800efb0:	4b66      	ldr	r3, [pc, #408]	; (800f14c <tcp_receive+0x270>)
 800efb2:	681a      	ldr	r2, [r3, #0]
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800efb8:	1ad3      	subs	r3, r2, r3
 800efba:	2b00      	cmp	r3, #0
 800efbc:	dc58      	bgt.n	800f070 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800efbe:	4b65      	ldr	r3, [pc, #404]	; (800f154 <tcp_receive+0x278>)
 800efc0:	881b      	ldrh	r3, [r3, #0]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d14b      	bne.n	800f05e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800efca:	687a      	ldr	r2, [r7, #4]
 800efcc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800efd0:	4413      	add	r3, r2
 800efd2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800efd4:	429a      	cmp	r2, r3
 800efd6:	d142      	bne.n	800f05e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800efde:	2b00      	cmp	r3, #0
 800efe0:	db3d      	blt.n	800f05e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800efe6:	4b59      	ldr	r3, [pc, #356]	; (800f14c <tcp_receive+0x270>)
 800efe8:	681b      	ldr	r3, [r3, #0]
 800efea:	429a      	cmp	r2, r3
 800efec:	d137      	bne.n	800f05e <tcp_receive+0x182>
              found_dupack = 1;
 800efee:	2301      	movs	r3, #1
 800eff0:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eff8:	2bff      	cmp	r3, #255	; 0xff
 800effa:	d007      	beq.n	800f00c <tcp_receive+0x130>
                ++pcb->dupacks;
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f002:	3301      	adds	r3, #1
 800f004:	b2da      	uxtb	r2, r3
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f012:	2b03      	cmp	r3, #3
 800f014:	d91b      	bls.n	800f04e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f020:	4413      	add	r3, r2
 800f022:	b29a      	uxth	r2, r3
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f02a:	429a      	cmp	r2, r3
 800f02c:	d30a      	bcc.n	800f044 <tcp_receive+0x168>
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f038:	4413      	add	r3, r2
 800f03a:	b29a      	uxth	r2, r3
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f042:	e004      	b.n	800f04e <tcp_receive+0x172>
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f04a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f054:	2b02      	cmp	r3, #2
 800f056:	d902      	bls.n	800f05e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800f058:	6878      	ldr	r0, [r7, #4]
 800f05a:	f001 feeb 	bl	8010e34 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f05e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f060:	2b00      	cmp	r3, #0
 800f062:	f040 8161 	bne.w	800f328 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2200      	movs	r2, #0
 800f06a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f06e:	e15b      	b.n	800f328 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f070:	4b36      	ldr	r3, [pc, #216]	; (800f14c <tcp_receive+0x270>)
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f078:	1ad3      	subs	r3, r2, r3
 800f07a:	3b01      	subs	r3, #1
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	f2c0 814e 	blt.w	800f31e <tcp_receive+0x442>
 800f082:	4b32      	ldr	r3, [pc, #200]	; (800f14c <tcp_receive+0x270>)
 800f084:	681a      	ldr	r2, [r3, #0]
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f08a:	1ad3      	subs	r3, r2, r3
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	f300 8146 	bgt.w	800f31e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	8b5b      	ldrh	r3, [r3, #26]
 800f096:	f003 0304 	and.w	r3, r3, #4
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d010      	beq.n	800f0c0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	8b5b      	ldrh	r3, [r3, #26]
 800f0a2:	f023 0304 	bic.w	r3, r3, #4
 800f0a6:	b29a      	uxth	r2, r3
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	2200      	movs	r2, #0
 800f0c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f0ce:	10db      	asrs	r3, r3, #3
 800f0d0:	b21b      	sxth	r3, r3
 800f0d2:	b29a      	uxth	r2, r3
 800f0d4:	687b      	ldr	r3, [r7, #4]
 800f0d6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f0da:	b29b      	uxth	r3, r3
 800f0dc:	4413      	add	r3, r2
 800f0de:	b29b      	uxth	r3, r3
 800f0e0:	b21a      	sxth	r2, r3
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800f0e8:	4b18      	ldr	r3, [pc, #96]	; (800f14c <tcp_receive+0x270>)
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	b29a      	uxth	r2, r3
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f0f2:	b29b      	uxth	r3, r3
 800f0f4:	1ad3      	subs	r3, r2, r3
 800f0f6:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	2200      	movs	r2, #0
 800f0fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f100:	4b12      	ldr	r3, [pc, #72]	; (800f14c <tcp_receive+0x270>)
 800f102:	681a      	ldr	r2, [r3, #0]
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	7d1b      	ldrb	r3, [r3, #20]
 800f10c:	2b03      	cmp	r3, #3
 800f10e:	f240 8097 	bls.w	800f240 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f11e:	429a      	cmp	r2, r3
 800f120:	d245      	bcs.n	800f1ae <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	8b5b      	ldrh	r3, [r3, #26]
 800f126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f12a:	2b00      	cmp	r3, #0
 800f12c:	d014      	beq.n	800f158 <tcp_receive+0x27c>
 800f12e:	2301      	movs	r3, #1
 800f130:	e013      	b.n	800f15a <tcp_receive+0x27e>
 800f132:	bf00      	nop
 800f134:	0801684c 	.word	0x0801684c
 800f138:	08016b7c 	.word	0x08016b7c
 800f13c:	08016898 	.word	0x08016898
 800f140:	08016b98 	.word	0x08016b98
 800f144:	2000f22c 	.word	0x2000f22c
 800f148:	2000f220 	.word	0x2000f220
 800f14c:	2000f224 	.word	0x2000f224
 800f150:	2000f210 	.word	0x2000f210
 800f154:	2000f22a 	.word	0x2000f22a
 800f158:	2302      	movs	r3, #2
 800f15a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800f15e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800f162:	b29a      	uxth	r2, r3
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f168:	fb12 f303 	smulbb	r3, r2, r3
 800f16c:	b29b      	uxth	r3, r3
 800f16e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800f170:	4293      	cmp	r3, r2
 800f172:	bf28      	it	cs
 800f174:	4613      	movcs	r3, r2
 800f176:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f17e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f180:	4413      	add	r3, r2
 800f182:	b29a      	uxth	r2, r3
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f18a:	429a      	cmp	r2, r3
 800f18c:	d309      	bcc.n	800f1a2 <tcp_receive+0x2c6>
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f194:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800f196:	4413      	add	r3, r2
 800f198:	b29a      	uxth	r2, r3
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f1a0:	e04e      	b.n	800f240 <tcp_receive+0x364>
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f1ac:	e048      	b.n	800f240 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f1b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f1b6:	4413      	add	r3, r2
 800f1b8:	b29a      	uxth	r2, r3
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f1c0:	429a      	cmp	r2, r3
 800f1c2:	d309      	bcc.n	800f1d8 <tcp_receive+0x2fc>
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f1ca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f1cc:	4413      	add	r3, r2
 800f1ce:	b29a      	uxth	r2, r3
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f1d6:	e004      	b.n	800f1e2 <tcp_receive+0x306>
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f1ee:	429a      	cmp	r2, r3
 800f1f0:	d326      	bcc.n	800f240 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f1fe:	1ad3      	subs	r3, r2, r3
 800f200:	b29a      	uxth	r2, r3
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f208:	687b      	ldr	r3, [r7, #4]
 800f20a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f212:	4413      	add	r3, r2
 800f214:	b29a      	uxth	r2, r3
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f21c:	429a      	cmp	r2, r3
 800f21e:	d30a      	bcc.n	800f236 <tcp_receive+0x35a>
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f22a:	4413      	add	r3, r2
 800f22c:	b29a      	uxth	r2, r3
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f234:	e004      	b.n	800f240 <tcp_receive+0x364>
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f23c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f248:	4a98      	ldr	r2, [pc, #608]	; (800f4ac <tcp_receive+0x5d0>)
 800f24a:	6878      	ldr	r0, [r7, #4]
 800f24c:	f7ff fdca 	bl	800ede4 <tcp_free_acked_segments>
 800f250:	4602      	mov	r2, r0
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f25e:	4a94      	ldr	r2, [pc, #592]	; (800f4b0 <tcp_receive+0x5d4>)
 800f260:	6878      	ldr	r0, [r7, #4]
 800f262:	f7ff fdbf 	bl	800ede4 <tcp_free_acked_segments>
 800f266:	4602      	mov	r2, r0
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f270:	2b00      	cmp	r3, #0
 800f272:	d104      	bne.n	800f27e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f27a:	861a      	strh	r2, [r3, #48]	; 0x30
 800f27c:	e002      	b.n	800f284 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f27e:	687b      	ldr	r3, [r7, #4]
 800f280:	2200      	movs	r2, #0
 800f282:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	2200      	movs	r2, #0
 800f288:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f28a:	687b      	ldr	r3, [r7, #4]
 800f28c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f28e:	2b00      	cmp	r3, #0
 800f290:	d103      	bne.n	800f29a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	2200      	movs	r2, #0
 800f296:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f2a0:	4b84      	ldr	r3, [pc, #528]	; (800f4b4 <tcp_receive+0x5d8>)
 800f2a2:	881b      	ldrh	r3, [r3, #0]
 800f2a4:	4413      	add	r3, r2
 800f2a6:	b29a      	uxth	r2, r3
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	8b5b      	ldrh	r3, [r3, #26]
 800f2b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d035      	beq.n	800f326 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f2ba:	687b      	ldr	r3, [r7, #4]
 800f2bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d118      	bne.n	800f2f4 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f2c2:	687b      	ldr	r3, [r7, #4]
 800f2c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d00c      	beq.n	800f2e4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2d2:	68db      	ldr	r3, [r3, #12]
 800f2d4:	685b      	ldr	r3, [r3, #4]
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	f7fb f937 	bl	800a54a <lwip_htonl>
 800f2dc:	4603      	mov	r3, r0
 800f2de:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	dc20      	bgt.n	800f326 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	8b5b      	ldrh	r3, [r3, #26]
 800f2e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f2ec:	b29a      	uxth	r2, r3
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f2f2:	e018      	b.n	800f326 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f2f4:	687b      	ldr	r3, [r7, #4]
 800f2f6:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2fc:	68db      	ldr	r3, [r3, #12]
 800f2fe:	685b      	ldr	r3, [r3, #4]
 800f300:	4618      	mov	r0, r3
 800f302:	f7fb f922 	bl	800a54a <lwip_htonl>
 800f306:	4603      	mov	r3, r0
 800f308:	1ae3      	subs	r3, r4, r3
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	dc0b      	bgt.n	800f326 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	8b5b      	ldrh	r3, [r3, #26]
 800f312:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f316:	b29a      	uxth	r2, r3
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f31c:	e003      	b.n	800f326 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f001 ff76 	bl	8011210 <tcp_send_empty_ack>
 800f324:	e000      	b.n	800f328 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f326:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d05b      	beq.n	800f3e8 <tcp_receive+0x50c>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f334:	4b60      	ldr	r3, [pc, #384]	; (800f4b8 <tcp_receive+0x5dc>)
 800f336:	681b      	ldr	r3, [r3, #0]
 800f338:	1ad3      	subs	r3, r2, r3
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	da54      	bge.n	800f3e8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f33e:	4b5f      	ldr	r3, [pc, #380]	; (800f4bc <tcp_receive+0x5e0>)
 800f340:	681b      	ldr	r3, [r3, #0]
 800f342:	b29a      	uxth	r2, r3
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f348:	b29b      	uxth	r3, r3
 800f34a:	1ad3      	subs	r3, r2, r3
 800f34c:	b29b      	uxth	r3, r3
 800f34e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f352:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f35c:	10db      	asrs	r3, r3, #3
 800f35e:	b21b      	sxth	r3, r3
 800f360:	b29b      	uxth	r3, r3
 800f362:	1ad3      	subs	r3, r2, r3
 800f364:	b29b      	uxth	r3, r3
 800f366:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f370:	b29a      	uxth	r2, r3
 800f372:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f376:	4413      	add	r3, r2
 800f378:	b29b      	uxth	r3, r3
 800f37a:	b21a      	sxth	r2, r3
 800f37c:	687b      	ldr	r3, [r7, #4]
 800f37e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f380:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f384:	2b00      	cmp	r3, #0
 800f386:	da05      	bge.n	800f394 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f388:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f38c:	425b      	negs	r3, r3
 800f38e:	b29b      	uxth	r3, r3
 800f390:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f394:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f39e:	109b      	asrs	r3, r3, #2
 800f3a0:	b21b      	sxth	r3, r3
 800f3a2:	b29b      	uxth	r3, r3
 800f3a4:	1ad3      	subs	r3, r2, r3
 800f3a6:	b29b      	uxth	r3, r3
 800f3a8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f3b2:	b29a      	uxth	r2, r3
 800f3b4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f3b8:	4413      	add	r3, r2
 800f3ba:	b29b      	uxth	r3, r3
 800f3bc:	b21a      	sxth	r2, r3
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f3c8:	10db      	asrs	r3, r3, #3
 800f3ca:	b21b      	sxth	r3, r3
 800f3cc:	b29a      	uxth	r2, r3
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f3d4:	b29b      	uxth	r3, r3
 800f3d6:	4413      	add	r3, r2
 800f3d8:	b29b      	uxth	r3, r3
 800f3da:	b21a      	sxth	r2, r3
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2200      	movs	r2, #0
 800f3e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f3e8:	4b35      	ldr	r3, [pc, #212]	; (800f4c0 <tcp_receive+0x5e4>)
 800f3ea:	881b      	ldrh	r3, [r3, #0]
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	f000 84e2 	beq.w	800fdb6 <tcp_receive+0xeda>
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	7d1b      	ldrb	r3, [r3, #20]
 800f3f6:	2b06      	cmp	r3, #6
 800f3f8:	f200 84dd 	bhi.w	800fdb6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f400:	4b30      	ldr	r3, [pc, #192]	; (800f4c4 <tcp_receive+0x5e8>)
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	1ad3      	subs	r3, r2, r3
 800f406:	3b01      	subs	r3, #1
 800f408:	2b00      	cmp	r3, #0
 800f40a:	f2c0 808f 	blt.w	800f52c <tcp_receive+0x650>
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f412:	4b2b      	ldr	r3, [pc, #172]	; (800f4c0 <tcp_receive+0x5e4>)
 800f414:	881b      	ldrh	r3, [r3, #0]
 800f416:	4619      	mov	r1, r3
 800f418:	4b2a      	ldr	r3, [pc, #168]	; (800f4c4 <tcp_receive+0x5e8>)
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	440b      	add	r3, r1
 800f41e:	1ad3      	subs	r3, r2, r3
 800f420:	3301      	adds	r3, #1
 800f422:	2b00      	cmp	r3, #0
 800f424:	f300 8082 	bgt.w	800f52c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f428:	4b27      	ldr	r3, [pc, #156]	; (800f4c8 <tcp_receive+0x5ec>)
 800f42a:	685b      	ldr	r3, [r3, #4]
 800f42c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f432:	4b24      	ldr	r3, [pc, #144]	; (800f4c4 <tcp_receive+0x5e8>)
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	1ad3      	subs	r3, r2, r3
 800f438:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f43a:	4b23      	ldr	r3, [pc, #140]	; (800f4c8 <tcp_receive+0x5ec>)
 800f43c:	685b      	ldr	r3, [r3, #4]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d106      	bne.n	800f450 <tcp_receive+0x574>
 800f442:	4b22      	ldr	r3, [pc, #136]	; (800f4cc <tcp_receive+0x5f0>)
 800f444:	f240 5294 	movw	r2, #1428	; 0x594
 800f448:	4921      	ldr	r1, [pc, #132]	; (800f4d0 <tcp_receive+0x5f4>)
 800f44a:	4822      	ldr	r0, [pc, #136]	; (800f4d4 <tcp_receive+0x5f8>)
 800f44c:	f005 f914 	bl	8014678 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f452:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f456:	4293      	cmp	r3, r2
 800f458:	d906      	bls.n	800f468 <tcp_receive+0x58c>
 800f45a:	4b1c      	ldr	r3, [pc, #112]	; (800f4cc <tcp_receive+0x5f0>)
 800f45c:	f240 5295 	movw	r2, #1429	; 0x595
 800f460:	491d      	ldr	r1, [pc, #116]	; (800f4d8 <tcp_receive+0x5fc>)
 800f462:	481c      	ldr	r0, [pc, #112]	; (800f4d4 <tcp_receive+0x5f8>)
 800f464:	f005 f908 	bl	8014678 <iprintf>
      off = (u16_t)off32;
 800f468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f46a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f46e:	4b16      	ldr	r3, [pc, #88]	; (800f4c8 <tcp_receive+0x5ec>)
 800f470:	685b      	ldr	r3, [r3, #4]
 800f472:	891b      	ldrh	r3, [r3, #8]
 800f474:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f478:	429a      	cmp	r2, r3
 800f47a:	d906      	bls.n	800f48a <tcp_receive+0x5ae>
 800f47c:	4b13      	ldr	r3, [pc, #76]	; (800f4cc <tcp_receive+0x5f0>)
 800f47e:	f240 5297 	movw	r2, #1431	; 0x597
 800f482:	4916      	ldr	r1, [pc, #88]	; (800f4dc <tcp_receive+0x600>)
 800f484:	4813      	ldr	r0, [pc, #76]	; (800f4d4 <tcp_receive+0x5f8>)
 800f486:	f005 f8f7 	bl	8014678 <iprintf>
      inseg.len -= off;
 800f48a:	4b0f      	ldr	r3, [pc, #60]	; (800f4c8 <tcp_receive+0x5ec>)
 800f48c:	891a      	ldrh	r2, [r3, #8]
 800f48e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f492:	1ad3      	subs	r3, r2, r3
 800f494:	b29a      	uxth	r2, r3
 800f496:	4b0c      	ldr	r3, [pc, #48]	; (800f4c8 <tcp_receive+0x5ec>)
 800f498:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f49a:	4b0b      	ldr	r3, [pc, #44]	; (800f4c8 <tcp_receive+0x5ec>)
 800f49c:	685b      	ldr	r3, [r3, #4]
 800f49e:	891a      	ldrh	r2, [r3, #8]
 800f4a0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f4a4:	1ad3      	subs	r3, r2, r3
 800f4a6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f4a8:	e02a      	b.n	800f500 <tcp_receive+0x624>
 800f4aa:	bf00      	nop
 800f4ac:	08016bb4 	.word	0x08016bb4
 800f4b0:	08016bbc 	.word	0x08016bbc
 800f4b4:	2000f228 	.word	0x2000f228
 800f4b8:	2000f224 	.word	0x2000f224
 800f4bc:	2000f1e8 	.word	0x2000f1e8
 800f4c0:	2000f22a 	.word	0x2000f22a
 800f4c4:	2000f220 	.word	0x2000f220
 800f4c8:	2000f200 	.word	0x2000f200
 800f4cc:	0801684c 	.word	0x0801684c
 800f4d0:	08016bc4 	.word	0x08016bc4
 800f4d4:	08016898 	.word	0x08016898
 800f4d8:	08016bd4 	.word	0x08016bd4
 800f4dc:	08016be4 	.word	0x08016be4
        off -= p->len;
 800f4e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4e2:	895b      	ldrh	r3, [r3, #10]
 800f4e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f4e8:	1ad3      	subs	r3, r2, r3
 800f4ea:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f4ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4f0:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f4f2:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f4f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f4fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4fc:	681b      	ldr	r3, [r3, #0]
 800f4fe:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f502:	895b      	ldrh	r3, [r3, #10]
 800f504:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f508:	429a      	cmp	r2, r3
 800f50a:	d8e9      	bhi.n	800f4e0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f50c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f510:	4619      	mov	r1, r3
 800f512:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f514:	f7fc fb70 	bl	800bbf8 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f51c:	4a91      	ldr	r2, [pc, #580]	; (800f764 <tcp_receive+0x888>)
 800f51e:	6013      	str	r3, [r2, #0]
 800f520:	4b91      	ldr	r3, [pc, #580]	; (800f768 <tcp_receive+0x88c>)
 800f522:	68db      	ldr	r3, [r3, #12]
 800f524:	4a8f      	ldr	r2, [pc, #572]	; (800f764 <tcp_receive+0x888>)
 800f526:	6812      	ldr	r2, [r2, #0]
 800f528:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f52a:	e00d      	b.n	800f548 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f52c:	4b8d      	ldr	r3, [pc, #564]	; (800f764 <tcp_receive+0x888>)
 800f52e:	681a      	ldr	r2, [r3, #0]
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f534:	1ad3      	subs	r3, r2, r3
 800f536:	2b00      	cmp	r3, #0
 800f538:	da06      	bge.n	800f548 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	8b5b      	ldrh	r3, [r3, #26]
 800f53e:	f043 0302 	orr.w	r3, r3, #2
 800f542:	b29a      	uxth	r2, r3
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f548:	4b86      	ldr	r3, [pc, #536]	; (800f764 <tcp_receive+0x888>)
 800f54a:	681a      	ldr	r2, [r3, #0]
 800f54c:	687b      	ldr	r3, [r7, #4]
 800f54e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f550:	1ad3      	subs	r3, r2, r3
 800f552:	2b00      	cmp	r3, #0
 800f554:	f2c0 842a 	blt.w	800fdac <tcp_receive+0xed0>
 800f558:	4b82      	ldr	r3, [pc, #520]	; (800f764 <tcp_receive+0x888>)
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f560:	6879      	ldr	r1, [r7, #4]
 800f562:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f564:	440b      	add	r3, r1
 800f566:	1ad3      	subs	r3, r2, r3
 800f568:	3301      	adds	r3, #1
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	f300 841e 	bgt.w	800fdac <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f570:	687b      	ldr	r3, [r7, #4]
 800f572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f574:	4b7b      	ldr	r3, [pc, #492]	; (800f764 <tcp_receive+0x888>)
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	429a      	cmp	r2, r3
 800f57a:	f040 829a 	bne.w	800fab2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f57e:	4b7a      	ldr	r3, [pc, #488]	; (800f768 <tcp_receive+0x88c>)
 800f580:	891c      	ldrh	r4, [r3, #8]
 800f582:	4b79      	ldr	r3, [pc, #484]	; (800f768 <tcp_receive+0x88c>)
 800f584:	68db      	ldr	r3, [r3, #12]
 800f586:	899b      	ldrh	r3, [r3, #12]
 800f588:	b29b      	uxth	r3, r3
 800f58a:	4618      	mov	r0, r3
 800f58c:	f7fa ffc8 	bl	800a520 <lwip_htons>
 800f590:	4603      	mov	r3, r0
 800f592:	b2db      	uxtb	r3, r3
 800f594:	f003 0303 	and.w	r3, r3, #3
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d001      	beq.n	800f5a0 <tcp_receive+0x6c4>
 800f59c:	2301      	movs	r3, #1
 800f59e:	e000      	b.n	800f5a2 <tcp_receive+0x6c6>
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	4423      	add	r3, r4
 800f5a4:	b29a      	uxth	r2, r3
 800f5a6:	4b71      	ldr	r3, [pc, #452]	; (800f76c <tcp_receive+0x890>)
 800f5a8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f5aa:	687b      	ldr	r3, [r7, #4]
 800f5ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f5ae:	4b6f      	ldr	r3, [pc, #444]	; (800f76c <tcp_receive+0x890>)
 800f5b0:	881b      	ldrh	r3, [r3, #0]
 800f5b2:	429a      	cmp	r2, r3
 800f5b4:	d275      	bcs.n	800f6a2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f5b6:	4b6c      	ldr	r3, [pc, #432]	; (800f768 <tcp_receive+0x88c>)
 800f5b8:	68db      	ldr	r3, [r3, #12]
 800f5ba:	899b      	ldrh	r3, [r3, #12]
 800f5bc:	b29b      	uxth	r3, r3
 800f5be:	4618      	mov	r0, r3
 800f5c0:	f7fa ffae 	bl	800a520 <lwip_htons>
 800f5c4:	4603      	mov	r3, r0
 800f5c6:	b2db      	uxtb	r3, r3
 800f5c8:	f003 0301 	and.w	r3, r3, #1
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d01f      	beq.n	800f610 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f5d0:	4b65      	ldr	r3, [pc, #404]	; (800f768 <tcp_receive+0x88c>)
 800f5d2:	68db      	ldr	r3, [r3, #12]
 800f5d4:	899b      	ldrh	r3, [r3, #12]
 800f5d6:	b29b      	uxth	r3, r3
 800f5d8:	b21b      	sxth	r3, r3
 800f5da:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f5de:	b21c      	sxth	r4, r3
 800f5e0:	4b61      	ldr	r3, [pc, #388]	; (800f768 <tcp_receive+0x88c>)
 800f5e2:	68db      	ldr	r3, [r3, #12]
 800f5e4:	899b      	ldrh	r3, [r3, #12]
 800f5e6:	b29b      	uxth	r3, r3
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	f7fa ff99 	bl	800a520 <lwip_htons>
 800f5ee:	4603      	mov	r3, r0
 800f5f0:	b2db      	uxtb	r3, r3
 800f5f2:	b29b      	uxth	r3, r3
 800f5f4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	4618      	mov	r0, r3
 800f5fc:	f7fa ff90 	bl	800a520 <lwip_htons>
 800f600:	4603      	mov	r3, r0
 800f602:	b21b      	sxth	r3, r3
 800f604:	4323      	orrs	r3, r4
 800f606:	b21a      	sxth	r2, r3
 800f608:	4b57      	ldr	r3, [pc, #348]	; (800f768 <tcp_receive+0x88c>)
 800f60a:	68db      	ldr	r3, [r3, #12]
 800f60c:	b292      	uxth	r2, r2
 800f60e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f614:	4b54      	ldr	r3, [pc, #336]	; (800f768 <tcp_receive+0x88c>)
 800f616:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f618:	4b53      	ldr	r3, [pc, #332]	; (800f768 <tcp_receive+0x88c>)
 800f61a:	68db      	ldr	r3, [r3, #12]
 800f61c:	899b      	ldrh	r3, [r3, #12]
 800f61e:	b29b      	uxth	r3, r3
 800f620:	4618      	mov	r0, r3
 800f622:	f7fa ff7d 	bl	800a520 <lwip_htons>
 800f626:	4603      	mov	r3, r0
 800f628:	b2db      	uxtb	r3, r3
 800f62a:	f003 0302 	and.w	r3, r3, #2
 800f62e:	2b00      	cmp	r3, #0
 800f630:	d005      	beq.n	800f63e <tcp_receive+0x762>
            inseg.len -= 1;
 800f632:	4b4d      	ldr	r3, [pc, #308]	; (800f768 <tcp_receive+0x88c>)
 800f634:	891b      	ldrh	r3, [r3, #8]
 800f636:	3b01      	subs	r3, #1
 800f638:	b29a      	uxth	r2, r3
 800f63a:	4b4b      	ldr	r3, [pc, #300]	; (800f768 <tcp_receive+0x88c>)
 800f63c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f63e:	4b4a      	ldr	r3, [pc, #296]	; (800f768 <tcp_receive+0x88c>)
 800f640:	685b      	ldr	r3, [r3, #4]
 800f642:	4a49      	ldr	r2, [pc, #292]	; (800f768 <tcp_receive+0x88c>)
 800f644:	8912      	ldrh	r2, [r2, #8]
 800f646:	4611      	mov	r1, r2
 800f648:	4618      	mov	r0, r3
 800f64a:	f7fc f9d5 	bl	800b9f8 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f64e:	4b46      	ldr	r3, [pc, #280]	; (800f768 <tcp_receive+0x88c>)
 800f650:	891c      	ldrh	r4, [r3, #8]
 800f652:	4b45      	ldr	r3, [pc, #276]	; (800f768 <tcp_receive+0x88c>)
 800f654:	68db      	ldr	r3, [r3, #12]
 800f656:	899b      	ldrh	r3, [r3, #12]
 800f658:	b29b      	uxth	r3, r3
 800f65a:	4618      	mov	r0, r3
 800f65c:	f7fa ff60 	bl	800a520 <lwip_htons>
 800f660:	4603      	mov	r3, r0
 800f662:	b2db      	uxtb	r3, r3
 800f664:	f003 0303 	and.w	r3, r3, #3
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d001      	beq.n	800f670 <tcp_receive+0x794>
 800f66c:	2301      	movs	r3, #1
 800f66e:	e000      	b.n	800f672 <tcp_receive+0x796>
 800f670:	2300      	movs	r3, #0
 800f672:	4423      	add	r3, r4
 800f674:	b29a      	uxth	r2, r3
 800f676:	4b3d      	ldr	r3, [pc, #244]	; (800f76c <tcp_receive+0x890>)
 800f678:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f67a:	4b3c      	ldr	r3, [pc, #240]	; (800f76c <tcp_receive+0x890>)
 800f67c:	881b      	ldrh	r3, [r3, #0]
 800f67e:	461a      	mov	r2, r3
 800f680:	4b38      	ldr	r3, [pc, #224]	; (800f764 <tcp_receive+0x888>)
 800f682:	681b      	ldr	r3, [r3, #0]
 800f684:	441a      	add	r2, r3
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f68a:	6879      	ldr	r1, [r7, #4]
 800f68c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f68e:	440b      	add	r3, r1
 800f690:	429a      	cmp	r2, r3
 800f692:	d006      	beq.n	800f6a2 <tcp_receive+0x7c6>
 800f694:	4b36      	ldr	r3, [pc, #216]	; (800f770 <tcp_receive+0x894>)
 800f696:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f69a:	4936      	ldr	r1, [pc, #216]	; (800f774 <tcp_receive+0x898>)
 800f69c:	4836      	ldr	r0, [pc, #216]	; (800f778 <tcp_receive+0x89c>)
 800f69e:	f004 ffeb 	bl	8014678 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f6a2:	687b      	ldr	r3, [r7, #4]
 800f6a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6a6:	2b00      	cmp	r3, #0
 800f6a8:	f000 80e7 	beq.w	800f87a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f6ac:	4b2e      	ldr	r3, [pc, #184]	; (800f768 <tcp_receive+0x88c>)
 800f6ae:	68db      	ldr	r3, [r3, #12]
 800f6b0:	899b      	ldrh	r3, [r3, #12]
 800f6b2:	b29b      	uxth	r3, r3
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	f7fa ff33 	bl	800a520 <lwip_htons>
 800f6ba:	4603      	mov	r3, r0
 800f6bc:	b2db      	uxtb	r3, r3
 800f6be:	f003 0301 	and.w	r3, r3, #1
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d010      	beq.n	800f6e8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f6c6:	e00a      	b.n	800f6de <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6cc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6d2:	681a      	ldr	r2, [r3, #0]
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f6d8:	68f8      	ldr	r0, [r7, #12]
 800f6da:	f7fd fd92 	bl	800d202 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d1f0      	bne.n	800f6c8 <tcp_receive+0x7ec>
 800f6e6:	e0c8      	b.n	800f87a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f6ee:	e052      	b.n	800f796 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f6f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6f2:	68db      	ldr	r3, [r3, #12]
 800f6f4:	899b      	ldrh	r3, [r3, #12]
 800f6f6:	b29b      	uxth	r3, r3
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	f7fa ff11 	bl	800a520 <lwip_htons>
 800f6fe:	4603      	mov	r3, r0
 800f700:	b2db      	uxtb	r3, r3
 800f702:	f003 0301 	and.w	r3, r3, #1
 800f706:	2b00      	cmp	r3, #0
 800f708:	d03d      	beq.n	800f786 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f70a:	4b17      	ldr	r3, [pc, #92]	; (800f768 <tcp_receive+0x88c>)
 800f70c:	68db      	ldr	r3, [r3, #12]
 800f70e:	899b      	ldrh	r3, [r3, #12]
 800f710:	b29b      	uxth	r3, r3
 800f712:	4618      	mov	r0, r3
 800f714:	f7fa ff04 	bl	800a520 <lwip_htons>
 800f718:	4603      	mov	r3, r0
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f720:	2b00      	cmp	r3, #0
 800f722:	d130      	bne.n	800f786 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f724:	4b10      	ldr	r3, [pc, #64]	; (800f768 <tcp_receive+0x88c>)
 800f726:	68db      	ldr	r3, [r3, #12]
 800f728:	899b      	ldrh	r3, [r3, #12]
 800f72a:	b29c      	uxth	r4, r3
 800f72c:	2001      	movs	r0, #1
 800f72e:	f7fa fef7 	bl	800a520 <lwip_htons>
 800f732:	4603      	mov	r3, r0
 800f734:	461a      	mov	r2, r3
 800f736:	4b0c      	ldr	r3, [pc, #48]	; (800f768 <tcp_receive+0x88c>)
 800f738:	68db      	ldr	r3, [r3, #12]
 800f73a:	4322      	orrs	r2, r4
 800f73c:	b292      	uxth	r2, r2
 800f73e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f740:	4b09      	ldr	r3, [pc, #36]	; (800f768 <tcp_receive+0x88c>)
 800f742:	891c      	ldrh	r4, [r3, #8]
 800f744:	4b08      	ldr	r3, [pc, #32]	; (800f768 <tcp_receive+0x88c>)
 800f746:	68db      	ldr	r3, [r3, #12]
 800f748:	899b      	ldrh	r3, [r3, #12]
 800f74a:	b29b      	uxth	r3, r3
 800f74c:	4618      	mov	r0, r3
 800f74e:	f7fa fee7 	bl	800a520 <lwip_htons>
 800f752:	4603      	mov	r3, r0
 800f754:	b2db      	uxtb	r3, r3
 800f756:	f003 0303 	and.w	r3, r3, #3
 800f75a:	2b00      	cmp	r3, #0
 800f75c:	d00e      	beq.n	800f77c <tcp_receive+0x8a0>
 800f75e:	2301      	movs	r3, #1
 800f760:	e00d      	b.n	800f77e <tcp_receive+0x8a2>
 800f762:	bf00      	nop
 800f764:	2000f220 	.word	0x2000f220
 800f768:	2000f200 	.word	0x2000f200
 800f76c:	2000f22a 	.word	0x2000f22a
 800f770:	0801684c 	.word	0x0801684c
 800f774:	08016bf4 	.word	0x08016bf4
 800f778:	08016898 	.word	0x08016898
 800f77c:	2300      	movs	r3, #0
 800f77e:	4423      	add	r3, r4
 800f780:	b29a      	uxth	r2, r3
 800f782:	4b98      	ldr	r3, [pc, #608]	; (800f9e4 <tcp_receive+0xb08>)
 800f784:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f788:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f78a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f78c:	681b      	ldr	r3, [r3, #0]
 800f78e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f790:	6938      	ldr	r0, [r7, #16]
 800f792:	f7fd fd36 	bl	800d202 <tcp_seg_free>
            while (next &&
 800f796:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f798:	2b00      	cmp	r3, #0
 800f79a:	d00e      	beq.n	800f7ba <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f79c:	4b91      	ldr	r3, [pc, #580]	; (800f9e4 <tcp_receive+0xb08>)
 800f79e:	881b      	ldrh	r3, [r3, #0]
 800f7a0:	461a      	mov	r2, r3
 800f7a2:	4b91      	ldr	r3, [pc, #580]	; (800f9e8 <tcp_receive+0xb0c>)
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	441a      	add	r2, r3
 800f7a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7aa:	68db      	ldr	r3, [r3, #12]
 800f7ac:	685b      	ldr	r3, [r3, #4]
 800f7ae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f7b0:	8909      	ldrh	r1, [r1, #8]
 800f7b2:	440b      	add	r3, r1
 800f7b4:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	da9a      	bge.n	800f6f0 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f7ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d059      	beq.n	800f874 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800f7c0:	4b88      	ldr	r3, [pc, #544]	; (800f9e4 <tcp_receive+0xb08>)
 800f7c2:	881b      	ldrh	r3, [r3, #0]
 800f7c4:	461a      	mov	r2, r3
 800f7c6:	4b88      	ldr	r3, [pc, #544]	; (800f9e8 <tcp_receive+0xb0c>)
 800f7c8:	681b      	ldr	r3, [r3, #0]
 800f7ca:	441a      	add	r2, r3
 800f7cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7ce:	68db      	ldr	r3, [r3, #12]
 800f7d0:	685b      	ldr	r3, [r3, #4]
 800f7d2:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	dd4d      	ble.n	800f874 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f7d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f7da:	68db      	ldr	r3, [r3, #12]
 800f7dc:	685b      	ldr	r3, [r3, #4]
 800f7de:	b29a      	uxth	r2, r3
 800f7e0:	4b81      	ldr	r3, [pc, #516]	; (800f9e8 <tcp_receive+0xb0c>)
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	b29b      	uxth	r3, r3
 800f7e6:	1ad3      	subs	r3, r2, r3
 800f7e8:	b29a      	uxth	r2, r3
 800f7ea:	4b80      	ldr	r3, [pc, #512]	; (800f9ec <tcp_receive+0xb10>)
 800f7ec:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f7ee:	4b7f      	ldr	r3, [pc, #508]	; (800f9ec <tcp_receive+0xb10>)
 800f7f0:	68db      	ldr	r3, [r3, #12]
 800f7f2:	899b      	ldrh	r3, [r3, #12]
 800f7f4:	b29b      	uxth	r3, r3
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	f7fa fe92 	bl	800a520 <lwip_htons>
 800f7fc:	4603      	mov	r3, r0
 800f7fe:	b2db      	uxtb	r3, r3
 800f800:	f003 0302 	and.w	r3, r3, #2
 800f804:	2b00      	cmp	r3, #0
 800f806:	d005      	beq.n	800f814 <tcp_receive+0x938>
                inseg.len -= 1;
 800f808:	4b78      	ldr	r3, [pc, #480]	; (800f9ec <tcp_receive+0xb10>)
 800f80a:	891b      	ldrh	r3, [r3, #8]
 800f80c:	3b01      	subs	r3, #1
 800f80e:	b29a      	uxth	r2, r3
 800f810:	4b76      	ldr	r3, [pc, #472]	; (800f9ec <tcp_receive+0xb10>)
 800f812:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f814:	4b75      	ldr	r3, [pc, #468]	; (800f9ec <tcp_receive+0xb10>)
 800f816:	685b      	ldr	r3, [r3, #4]
 800f818:	4a74      	ldr	r2, [pc, #464]	; (800f9ec <tcp_receive+0xb10>)
 800f81a:	8912      	ldrh	r2, [r2, #8]
 800f81c:	4611      	mov	r1, r2
 800f81e:	4618      	mov	r0, r3
 800f820:	f7fc f8ea 	bl	800b9f8 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f824:	4b71      	ldr	r3, [pc, #452]	; (800f9ec <tcp_receive+0xb10>)
 800f826:	891c      	ldrh	r4, [r3, #8]
 800f828:	4b70      	ldr	r3, [pc, #448]	; (800f9ec <tcp_receive+0xb10>)
 800f82a:	68db      	ldr	r3, [r3, #12]
 800f82c:	899b      	ldrh	r3, [r3, #12]
 800f82e:	b29b      	uxth	r3, r3
 800f830:	4618      	mov	r0, r3
 800f832:	f7fa fe75 	bl	800a520 <lwip_htons>
 800f836:	4603      	mov	r3, r0
 800f838:	b2db      	uxtb	r3, r3
 800f83a:	f003 0303 	and.w	r3, r3, #3
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d001      	beq.n	800f846 <tcp_receive+0x96a>
 800f842:	2301      	movs	r3, #1
 800f844:	e000      	b.n	800f848 <tcp_receive+0x96c>
 800f846:	2300      	movs	r3, #0
 800f848:	4423      	add	r3, r4
 800f84a:	b29a      	uxth	r2, r3
 800f84c:	4b65      	ldr	r3, [pc, #404]	; (800f9e4 <tcp_receive+0xb08>)
 800f84e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f850:	4b64      	ldr	r3, [pc, #400]	; (800f9e4 <tcp_receive+0xb08>)
 800f852:	881b      	ldrh	r3, [r3, #0]
 800f854:	461a      	mov	r2, r3
 800f856:	4b64      	ldr	r3, [pc, #400]	; (800f9e8 <tcp_receive+0xb0c>)
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	441a      	add	r2, r3
 800f85c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f85e:	68db      	ldr	r3, [r3, #12]
 800f860:	685b      	ldr	r3, [r3, #4]
 800f862:	429a      	cmp	r2, r3
 800f864:	d006      	beq.n	800f874 <tcp_receive+0x998>
 800f866:	4b62      	ldr	r3, [pc, #392]	; (800f9f0 <tcp_receive+0xb14>)
 800f868:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f86c:	4961      	ldr	r1, [pc, #388]	; (800f9f4 <tcp_receive+0xb18>)
 800f86e:	4862      	ldr	r0, [pc, #392]	; (800f9f8 <tcp_receive+0xb1c>)
 800f870:	f004 ff02 	bl	8014678 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f878:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f87a:	4b5a      	ldr	r3, [pc, #360]	; (800f9e4 <tcp_receive+0xb08>)
 800f87c:	881b      	ldrh	r3, [r3, #0]
 800f87e:	461a      	mov	r2, r3
 800f880:	4b59      	ldr	r3, [pc, #356]	; (800f9e8 <tcp_receive+0xb0c>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	441a      	add	r2, r3
 800f886:	687b      	ldr	r3, [r7, #4]
 800f888:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f88a:	687b      	ldr	r3, [r7, #4]
 800f88c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f88e:	4b55      	ldr	r3, [pc, #340]	; (800f9e4 <tcp_receive+0xb08>)
 800f890:	881b      	ldrh	r3, [r3, #0]
 800f892:	429a      	cmp	r2, r3
 800f894:	d206      	bcs.n	800f8a4 <tcp_receive+0x9c8>
 800f896:	4b56      	ldr	r3, [pc, #344]	; (800f9f0 <tcp_receive+0xb14>)
 800f898:	f240 6207 	movw	r2, #1543	; 0x607
 800f89c:	4957      	ldr	r1, [pc, #348]	; (800f9fc <tcp_receive+0xb20>)
 800f89e:	4856      	ldr	r0, [pc, #344]	; (800f9f8 <tcp_receive+0xb1c>)
 800f8a0:	f004 feea 	bl	8014678 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f8a8:	4b4e      	ldr	r3, [pc, #312]	; (800f9e4 <tcp_receive+0xb08>)
 800f8aa:	881b      	ldrh	r3, [r3, #0]
 800f8ac:	1ad3      	subs	r3, r2, r3
 800f8ae:	b29a      	uxth	r2, r3
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f8b4:	6878      	ldr	r0, [r7, #4]
 800f8b6:	f7fc ffc5 	bl	800c844 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f8ba:	4b4c      	ldr	r3, [pc, #304]	; (800f9ec <tcp_receive+0xb10>)
 800f8bc:	685b      	ldr	r3, [r3, #4]
 800f8be:	891b      	ldrh	r3, [r3, #8]
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d006      	beq.n	800f8d2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800f8c4:	4b49      	ldr	r3, [pc, #292]	; (800f9ec <tcp_receive+0xb10>)
 800f8c6:	685b      	ldr	r3, [r3, #4]
 800f8c8:	4a4d      	ldr	r2, [pc, #308]	; (800fa00 <tcp_receive+0xb24>)
 800f8ca:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f8cc:	4b47      	ldr	r3, [pc, #284]	; (800f9ec <tcp_receive+0xb10>)
 800f8ce:	2200      	movs	r2, #0
 800f8d0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f8d2:	4b46      	ldr	r3, [pc, #280]	; (800f9ec <tcp_receive+0xb10>)
 800f8d4:	68db      	ldr	r3, [r3, #12]
 800f8d6:	899b      	ldrh	r3, [r3, #12]
 800f8d8:	b29b      	uxth	r3, r3
 800f8da:	4618      	mov	r0, r3
 800f8dc:	f7fa fe20 	bl	800a520 <lwip_htons>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	b2db      	uxtb	r3, r3
 800f8e4:	f003 0301 	and.w	r3, r3, #1
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	f000 80b8 	beq.w	800fa5e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f8ee:	4b45      	ldr	r3, [pc, #276]	; (800fa04 <tcp_receive+0xb28>)
 800f8f0:	781b      	ldrb	r3, [r3, #0]
 800f8f2:	f043 0320 	orr.w	r3, r3, #32
 800f8f6:	b2da      	uxtb	r2, r3
 800f8f8:	4b42      	ldr	r3, [pc, #264]	; (800fa04 <tcp_receive+0xb28>)
 800f8fa:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f8fc:	e0af      	b.n	800fa5e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f902:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f908:	68db      	ldr	r3, [r3, #12]
 800f90a:	685b      	ldr	r3, [r3, #4]
 800f90c:	4a36      	ldr	r2, [pc, #216]	; (800f9e8 <tcp_receive+0xb0c>)
 800f90e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f910:	68bb      	ldr	r3, [r7, #8]
 800f912:	891b      	ldrh	r3, [r3, #8]
 800f914:	461c      	mov	r4, r3
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	68db      	ldr	r3, [r3, #12]
 800f91a:	899b      	ldrh	r3, [r3, #12]
 800f91c:	b29b      	uxth	r3, r3
 800f91e:	4618      	mov	r0, r3
 800f920:	f7fa fdfe 	bl	800a520 <lwip_htons>
 800f924:	4603      	mov	r3, r0
 800f926:	b2db      	uxtb	r3, r3
 800f928:	f003 0303 	and.w	r3, r3, #3
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d001      	beq.n	800f934 <tcp_receive+0xa58>
 800f930:	2301      	movs	r3, #1
 800f932:	e000      	b.n	800f936 <tcp_receive+0xa5a>
 800f934:	2300      	movs	r3, #0
 800f936:	191a      	adds	r2, r3, r4
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f93c:	441a      	add	r2, r3
 800f93e:	687b      	ldr	r3, [r7, #4]
 800f940:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f946:	461c      	mov	r4, r3
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	891b      	ldrh	r3, [r3, #8]
 800f94c:	461d      	mov	r5, r3
 800f94e:	68bb      	ldr	r3, [r7, #8]
 800f950:	68db      	ldr	r3, [r3, #12]
 800f952:	899b      	ldrh	r3, [r3, #12]
 800f954:	b29b      	uxth	r3, r3
 800f956:	4618      	mov	r0, r3
 800f958:	f7fa fde2 	bl	800a520 <lwip_htons>
 800f95c:	4603      	mov	r3, r0
 800f95e:	b2db      	uxtb	r3, r3
 800f960:	f003 0303 	and.w	r3, r3, #3
 800f964:	2b00      	cmp	r3, #0
 800f966:	d001      	beq.n	800f96c <tcp_receive+0xa90>
 800f968:	2301      	movs	r3, #1
 800f96a:	e000      	b.n	800f96e <tcp_receive+0xa92>
 800f96c:	2300      	movs	r3, #0
 800f96e:	442b      	add	r3, r5
 800f970:	429c      	cmp	r4, r3
 800f972:	d206      	bcs.n	800f982 <tcp_receive+0xaa6>
 800f974:	4b1e      	ldr	r3, [pc, #120]	; (800f9f0 <tcp_receive+0xb14>)
 800f976:	f240 622b 	movw	r2, #1579	; 0x62b
 800f97a:	4923      	ldr	r1, [pc, #140]	; (800fa08 <tcp_receive+0xb2c>)
 800f97c:	481e      	ldr	r0, [pc, #120]	; (800f9f8 <tcp_receive+0xb1c>)
 800f97e:	f004 fe7b 	bl	8014678 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f982:	68bb      	ldr	r3, [r7, #8]
 800f984:	891b      	ldrh	r3, [r3, #8]
 800f986:	461c      	mov	r4, r3
 800f988:	68bb      	ldr	r3, [r7, #8]
 800f98a:	68db      	ldr	r3, [r3, #12]
 800f98c:	899b      	ldrh	r3, [r3, #12]
 800f98e:	b29b      	uxth	r3, r3
 800f990:	4618      	mov	r0, r3
 800f992:	f7fa fdc5 	bl	800a520 <lwip_htons>
 800f996:	4603      	mov	r3, r0
 800f998:	b2db      	uxtb	r3, r3
 800f99a:	f003 0303 	and.w	r3, r3, #3
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	d001      	beq.n	800f9a6 <tcp_receive+0xaca>
 800f9a2:	2301      	movs	r3, #1
 800f9a4:	e000      	b.n	800f9a8 <tcp_receive+0xacc>
 800f9a6:	2300      	movs	r3, #0
 800f9a8:	1919      	adds	r1, r3, r4
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f9ae:	b28b      	uxth	r3, r1
 800f9b0:	1ad3      	subs	r3, r2, r3
 800f9b2:	b29a      	uxth	r2, r3
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f9b8:	6878      	ldr	r0, [r7, #4]
 800f9ba:	f7fc ff43 	bl	800c844 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f9be:	68bb      	ldr	r3, [r7, #8]
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	891b      	ldrh	r3, [r3, #8]
 800f9c4:	2b00      	cmp	r3, #0
 800f9c6:	d028      	beq.n	800fa1a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f9c8:	4b0d      	ldr	r3, [pc, #52]	; (800fa00 <tcp_receive+0xb24>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d01d      	beq.n	800fa0c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800f9d0:	4b0b      	ldr	r3, [pc, #44]	; (800fa00 <tcp_receive+0xb24>)
 800f9d2:	681a      	ldr	r2, [r3, #0]
 800f9d4:	68bb      	ldr	r3, [r7, #8]
 800f9d6:	685b      	ldr	r3, [r3, #4]
 800f9d8:	4619      	mov	r1, r3
 800f9da:	4610      	mov	r0, r2
 800f9dc:	f7fc fa60 	bl	800bea0 <pbuf_cat>
 800f9e0:	e018      	b.n	800fa14 <tcp_receive+0xb38>
 800f9e2:	bf00      	nop
 800f9e4:	2000f22a 	.word	0x2000f22a
 800f9e8:	2000f220 	.word	0x2000f220
 800f9ec:	2000f200 	.word	0x2000f200
 800f9f0:	0801684c 	.word	0x0801684c
 800f9f4:	08016c2c 	.word	0x08016c2c
 800f9f8:	08016898 	.word	0x08016898
 800f9fc:	08016c68 	.word	0x08016c68
 800fa00:	2000f230 	.word	0x2000f230
 800fa04:	2000f22d 	.word	0x2000f22d
 800fa08:	08016c88 	.word	0x08016c88
            } else {
              recv_data = cseg->p;
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	4a70      	ldr	r2, [pc, #448]	; (800fbd4 <tcp_receive+0xcf8>)
 800fa12:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800fa14:	68bb      	ldr	r3, [r7, #8]
 800fa16:	2200      	movs	r2, #0
 800fa18:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fa1a:	68bb      	ldr	r3, [r7, #8]
 800fa1c:	68db      	ldr	r3, [r3, #12]
 800fa1e:	899b      	ldrh	r3, [r3, #12]
 800fa20:	b29b      	uxth	r3, r3
 800fa22:	4618      	mov	r0, r3
 800fa24:	f7fa fd7c 	bl	800a520 <lwip_htons>
 800fa28:	4603      	mov	r3, r0
 800fa2a:	b2db      	uxtb	r3, r3
 800fa2c:	f003 0301 	and.w	r3, r3, #1
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d00d      	beq.n	800fa50 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800fa34:	4b68      	ldr	r3, [pc, #416]	; (800fbd8 <tcp_receive+0xcfc>)
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	f043 0320 	orr.w	r3, r3, #32
 800fa3c:	b2da      	uxtb	r2, r3
 800fa3e:	4b66      	ldr	r3, [pc, #408]	; (800fbd8 <tcp_receive+0xcfc>)
 800fa40:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	7d1b      	ldrb	r3, [r3, #20]
 800fa46:	2b04      	cmp	r3, #4
 800fa48:	d102      	bne.n	800fa50 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	2207      	movs	r2, #7
 800fa4e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800fa50:	68bb      	ldr	r3, [r7, #8]
 800fa52:	681a      	ldr	r2, [r3, #0]
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800fa58:	68b8      	ldr	r0, [r7, #8]
 800fa5a:	f7fd fbd2 	bl	800d202 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d008      	beq.n	800fa78 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fa6a:	68db      	ldr	r3, [r3, #12]
 800fa6c:	685a      	ldr	r2, [r3, #4]
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800fa72:	429a      	cmp	r2, r3
 800fa74:	f43f af43 	beq.w	800f8fe <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	8b5b      	ldrh	r3, [r3, #26]
 800fa7c:	f003 0301 	and.w	r3, r3, #1
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d00e      	beq.n	800faa2 <tcp_receive+0xbc6>
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	8b5b      	ldrh	r3, [r3, #26]
 800fa88:	f023 0301 	bic.w	r3, r3, #1
 800fa8c:	b29a      	uxth	r2, r3
 800fa8e:	687b      	ldr	r3, [r7, #4]
 800fa90:	835a      	strh	r2, [r3, #26]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	8b5b      	ldrh	r3, [r3, #26]
 800fa96:	f043 0302 	orr.w	r3, r3, #2
 800fa9a:	b29a      	uxth	r2, r3
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800faa0:	e188      	b.n	800fdb4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 800faa2:	687b      	ldr	r3, [r7, #4]
 800faa4:	8b5b      	ldrh	r3, [r3, #26]
 800faa6:	f043 0301 	orr.w	r3, r3, #1
 800faaa:	b29a      	uxth	r2, r3
 800faac:	687b      	ldr	r3, [r7, #4]
 800faae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800fab0:	e180      	b.n	800fdb4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800fab2:	687b      	ldr	r3, [r7, #4]
 800fab4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fab6:	2b00      	cmp	r3, #0
 800fab8:	d106      	bne.n	800fac8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800faba:	4848      	ldr	r0, [pc, #288]	; (800fbdc <tcp_receive+0xd00>)
 800fabc:	f7fd fbba 	bl	800d234 <tcp_seg_copy>
 800fac0:	4602      	mov	r2, r0
 800fac2:	687b      	ldr	r3, [r7, #4]
 800fac4:	675a      	str	r2, [r3, #116]	; 0x74
 800fac6:	e16d      	b.n	800fda4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800fac8:	2300      	movs	r3, #0
 800faca:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fad0:	63bb      	str	r3, [r7, #56]	; 0x38
 800fad2:	e157      	b.n	800fd84 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800fad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fad6:	68db      	ldr	r3, [r3, #12]
 800fad8:	685a      	ldr	r2, [r3, #4]
 800fada:	4b41      	ldr	r3, [pc, #260]	; (800fbe0 <tcp_receive+0xd04>)
 800fadc:	681b      	ldr	r3, [r3, #0]
 800fade:	429a      	cmp	r2, r3
 800fae0:	d11d      	bne.n	800fb1e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800fae2:	4b3e      	ldr	r3, [pc, #248]	; (800fbdc <tcp_receive+0xd00>)
 800fae4:	891a      	ldrh	r2, [r3, #8]
 800fae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fae8:	891b      	ldrh	r3, [r3, #8]
 800faea:	429a      	cmp	r2, r3
 800faec:	f240 814f 	bls.w	800fd8e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800faf0:	483a      	ldr	r0, [pc, #232]	; (800fbdc <tcp_receive+0xd00>)
 800faf2:	f7fd fb9f 	bl	800d234 <tcp_seg_copy>
 800faf6:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800faf8:	697b      	ldr	r3, [r7, #20]
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	f000 8149 	beq.w	800fd92 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800fb00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb02:	2b00      	cmp	r3, #0
 800fb04:	d003      	beq.n	800fb0e <tcp_receive+0xc32>
                    prev->next = cseg;
 800fb06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb08:	697a      	ldr	r2, [r7, #20]
 800fb0a:	601a      	str	r2, [r3, #0]
 800fb0c:	e002      	b.n	800fb14 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800fb0e:	687b      	ldr	r3, [r7, #4]
 800fb10:	697a      	ldr	r2, [r7, #20]
 800fb12:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800fb14:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb16:	6978      	ldr	r0, [r7, #20]
 800fb18:	f7ff f8dc 	bl	800ecd4 <tcp_oos_insert_segment>
                }
                break;
 800fb1c:	e139      	b.n	800fd92 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800fb1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb20:	2b00      	cmp	r3, #0
 800fb22:	d117      	bne.n	800fb54 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800fb24:	4b2e      	ldr	r3, [pc, #184]	; (800fbe0 <tcp_receive+0xd04>)
 800fb26:	681a      	ldr	r2, [r3, #0]
 800fb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb2a:	68db      	ldr	r3, [r3, #12]
 800fb2c:	685b      	ldr	r3, [r3, #4]
 800fb2e:	1ad3      	subs	r3, r2, r3
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	da57      	bge.n	800fbe4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fb34:	4829      	ldr	r0, [pc, #164]	; (800fbdc <tcp_receive+0xd00>)
 800fb36:	f7fd fb7d 	bl	800d234 <tcp_seg_copy>
 800fb3a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800fb3c:	69bb      	ldr	r3, [r7, #24]
 800fb3e:	2b00      	cmp	r3, #0
 800fb40:	f000 8129 	beq.w	800fd96 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800fb44:	687b      	ldr	r3, [r7, #4]
 800fb46:	69ba      	ldr	r2, [r7, #24]
 800fb48:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800fb4a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fb4c:	69b8      	ldr	r0, [r7, #24]
 800fb4e:	f7ff f8c1 	bl	800ecd4 <tcp_oos_insert_segment>
                  }
                  break;
 800fb52:	e120      	b.n	800fd96 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800fb54:	4b22      	ldr	r3, [pc, #136]	; (800fbe0 <tcp_receive+0xd04>)
 800fb56:	681a      	ldr	r2, [r3, #0]
 800fb58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb5a:	68db      	ldr	r3, [r3, #12]
 800fb5c:	685b      	ldr	r3, [r3, #4]
 800fb5e:	1ad3      	subs	r3, r2, r3
 800fb60:	3b01      	subs	r3, #1
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	db3e      	blt.n	800fbe4 <tcp_receive+0xd08>
 800fb66:	4b1e      	ldr	r3, [pc, #120]	; (800fbe0 <tcp_receive+0xd04>)
 800fb68:	681a      	ldr	r2, [r3, #0]
 800fb6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb6c:	68db      	ldr	r3, [r3, #12]
 800fb6e:	685b      	ldr	r3, [r3, #4]
 800fb70:	1ad3      	subs	r3, r2, r3
 800fb72:	3301      	adds	r3, #1
 800fb74:	2b00      	cmp	r3, #0
 800fb76:	dc35      	bgt.n	800fbe4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800fb78:	4818      	ldr	r0, [pc, #96]	; (800fbdc <tcp_receive+0xd00>)
 800fb7a:	f7fd fb5b 	bl	800d234 <tcp_seg_copy>
 800fb7e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800fb80:	69fb      	ldr	r3, [r7, #28]
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	f000 8109 	beq.w	800fd9a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800fb88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fb8a:	68db      	ldr	r3, [r3, #12]
 800fb8c:	685b      	ldr	r3, [r3, #4]
 800fb8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb90:	8912      	ldrh	r2, [r2, #8]
 800fb92:	441a      	add	r2, r3
 800fb94:	4b12      	ldr	r3, [pc, #72]	; (800fbe0 <tcp_receive+0xd04>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	1ad3      	subs	r3, r2, r3
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	dd12      	ble.n	800fbc4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800fb9e:	4b10      	ldr	r3, [pc, #64]	; (800fbe0 <tcp_receive+0xd04>)
 800fba0:	681b      	ldr	r3, [r3, #0]
 800fba2:	b29a      	uxth	r2, r3
 800fba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fba6:	68db      	ldr	r3, [r3, #12]
 800fba8:	685b      	ldr	r3, [r3, #4]
 800fbaa:	b29b      	uxth	r3, r3
 800fbac:	1ad3      	subs	r3, r2, r3
 800fbae:	b29a      	uxth	r2, r3
 800fbb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbb2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fbb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbb6:	685a      	ldr	r2, [r3, #4]
 800fbb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbba:	891b      	ldrh	r3, [r3, #8]
 800fbbc:	4619      	mov	r1, r3
 800fbbe:	4610      	mov	r0, r2
 800fbc0:	f7fb ff1a 	bl	800b9f8 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fbc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fbc6:	69fa      	ldr	r2, [r7, #28]
 800fbc8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fbca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fbcc:	69f8      	ldr	r0, [r7, #28]
 800fbce:	f7ff f881 	bl	800ecd4 <tcp_oos_insert_segment>
                  }
                  break;
 800fbd2:	e0e2      	b.n	800fd9a <tcp_receive+0xebe>
 800fbd4:	2000f230 	.word	0x2000f230
 800fbd8:	2000f22d 	.word	0x2000f22d
 800fbdc:	2000f200 	.word	0x2000f200
 800fbe0:	2000f220 	.word	0x2000f220
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fbe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbe6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fbe8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbea:	681b      	ldr	r3, [r3, #0]
 800fbec:	2b00      	cmp	r3, #0
 800fbee:	f040 80c6 	bne.w	800fd7e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fbf2:	4b80      	ldr	r3, [pc, #512]	; (800fdf4 <tcp_receive+0xf18>)
 800fbf4:	681a      	ldr	r2, [r3, #0]
 800fbf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbf8:	68db      	ldr	r3, [r3, #12]
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	f340 80bd 	ble.w	800fd7e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fc04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc06:	68db      	ldr	r3, [r3, #12]
 800fc08:	899b      	ldrh	r3, [r3, #12]
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	f7fa fc87 	bl	800a520 <lwip_htons>
 800fc12:	4603      	mov	r3, r0
 800fc14:	b2db      	uxtb	r3, r3
 800fc16:	f003 0301 	and.w	r3, r3, #1
 800fc1a:	2b00      	cmp	r3, #0
 800fc1c:	f040 80bf 	bne.w	800fd9e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fc20:	4875      	ldr	r0, [pc, #468]	; (800fdf8 <tcp_receive+0xf1c>)
 800fc22:	f7fd fb07 	bl	800d234 <tcp_seg_copy>
 800fc26:	4602      	mov	r2, r0
 800fc28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc2a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fc2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	2b00      	cmp	r3, #0
 800fc32:	f000 80b6 	beq.w	800fda2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fc36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc38:	68db      	ldr	r3, [r3, #12]
 800fc3a:	685b      	ldr	r3, [r3, #4]
 800fc3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fc3e:	8912      	ldrh	r2, [r2, #8]
 800fc40:	441a      	add	r2, r3
 800fc42:	4b6c      	ldr	r3, [pc, #432]	; (800fdf4 <tcp_receive+0xf18>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	1ad3      	subs	r3, r2, r3
 800fc48:	2b00      	cmp	r3, #0
 800fc4a:	dd12      	ble.n	800fc72 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800fc4c:	4b69      	ldr	r3, [pc, #420]	; (800fdf4 <tcp_receive+0xf18>)
 800fc4e:	681b      	ldr	r3, [r3, #0]
 800fc50:	b29a      	uxth	r2, r3
 800fc52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc54:	68db      	ldr	r3, [r3, #12]
 800fc56:	685b      	ldr	r3, [r3, #4]
 800fc58:	b29b      	uxth	r3, r3
 800fc5a:	1ad3      	subs	r3, r2, r3
 800fc5c:	b29a      	uxth	r2, r3
 800fc5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc60:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800fc62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc64:	685a      	ldr	r2, [r3, #4]
 800fc66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc68:	891b      	ldrh	r3, [r3, #8]
 800fc6a:	4619      	mov	r1, r3
 800fc6c:	4610      	mov	r0, r2
 800fc6e:	f7fb fec3 	bl	800b9f8 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800fc72:	4b62      	ldr	r3, [pc, #392]	; (800fdfc <tcp_receive+0xf20>)
 800fc74:	881b      	ldrh	r3, [r3, #0]
 800fc76:	461a      	mov	r2, r3
 800fc78:	4b5e      	ldr	r3, [pc, #376]	; (800fdf4 <tcp_receive+0xf18>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	441a      	add	r2, r3
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc82:	6879      	ldr	r1, [r7, #4]
 800fc84:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fc86:	440b      	add	r3, r1
 800fc88:	1ad3      	subs	r3, r2, r3
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	f340 8089 	ble.w	800fda2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fc90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc92:	681b      	ldr	r3, [r3, #0]
 800fc94:	68db      	ldr	r3, [r3, #12]
 800fc96:	899b      	ldrh	r3, [r3, #12]
 800fc98:	b29b      	uxth	r3, r3
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	f7fa fc40 	bl	800a520 <lwip_htons>
 800fca0:	4603      	mov	r3, r0
 800fca2:	b2db      	uxtb	r3, r3
 800fca4:	f003 0301 	and.w	r3, r3, #1
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d022      	beq.n	800fcf2 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fcac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	68db      	ldr	r3, [r3, #12]
 800fcb2:	899b      	ldrh	r3, [r3, #12]
 800fcb4:	b29b      	uxth	r3, r3
 800fcb6:	b21b      	sxth	r3, r3
 800fcb8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fcbc:	b21c      	sxth	r4, r3
 800fcbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcc0:	681b      	ldr	r3, [r3, #0]
 800fcc2:	68db      	ldr	r3, [r3, #12]
 800fcc4:	899b      	ldrh	r3, [r3, #12]
 800fcc6:	b29b      	uxth	r3, r3
 800fcc8:	4618      	mov	r0, r3
 800fcca:	f7fa fc29 	bl	800a520 <lwip_htons>
 800fcce:	4603      	mov	r3, r0
 800fcd0:	b2db      	uxtb	r3, r3
 800fcd2:	b29b      	uxth	r3, r3
 800fcd4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fcd8:	b29b      	uxth	r3, r3
 800fcda:	4618      	mov	r0, r3
 800fcdc:	f7fa fc20 	bl	800a520 <lwip_htons>
 800fce0:	4603      	mov	r3, r0
 800fce2:	b21b      	sxth	r3, r3
 800fce4:	4323      	orrs	r3, r4
 800fce6:	b21a      	sxth	r2, r3
 800fce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	68db      	ldr	r3, [r3, #12]
 800fcee:	b292      	uxth	r2, r2
 800fcf0:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcf6:	b29a      	uxth	r2, r3
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fcfc:	4413      	add	r3, r2
 800fcfe:	b299      	uxth	r1, r3
 800fd00:	4b3c      	ldr	r3, [pc, #240]	; (800fdf4 <tcp_receive+0xf18>)
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	b29a      	uxth	r2, r3
 800fd06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd08:	681b      	ldr	r3, [r3, #0]
 800fd0a:	1a8a      	subs	r2, r1, r2
 800fd0c:	b292      	uxth	r2, r2
 800fd0e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fd10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd12:	681b      	ldr	r3, [r3, #0]
 800fd14:	685a      	ldr	r2, [r3, #4]
 800fd16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd18:	681b      	ldr	r3, [r3, #0]
 800fd1a:	891b      	ldrh	r3, [r3, #8]
 800fd1c:	4619      	mov	r1, r3
 800fd1e:	4610      	mov	r0, r2
 800fd20:	f7fb fe6a 	bl	800b9f8 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd26:	681b      	ldr	r3, [r3, #0]
 800fd28:	891c      	ldrh	r4, [r3, #8]
 800fd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd2c:	681b      	ldr	r3, [r3, #0]
 800fd2e:	68db      	ldr	r3, [r3, #12]
 800fd30:	899b      	ldrh	r3, [r3, #12]
 800fd32:	b29b      	uxth	r3, r3
 800fd34:	4618      	mov	r0, r3
 800fd36:	f7fa fbf3 	bl	800a520 <lwip_htons>
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	b2db      	uxtb	r3, r3
 800fd3e:	f003 0303 	and.w	r3, r3, #3
 800fd42:	2b00      	cmp	r3, #0
 800fd44:	d001      	beq.n	800fd4a <tcp_receive+0xe6e>
 800fd46:	2301      	movs	r3, #1
 800fd48:	e000      	b.n	800fd4c <tcp_receive+0xe70>
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	4423      	add	r3, r4
 800fd4e:	b29a      	uxth	r2, r3
 800fd50:	4b2a      	ldr	r3, [pc, #168]	; (800fdfc <tcp_receive+0xf20>)
 800fd52:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fd54:	4b29      	ldr	r3, [pc, #164]	; (800fdfc <tcp_receive+0xf20>)
 800fd56:	881b      	ldrh	r3, [r3, #0]
 800fd58:	461a      	mov	r2, r3
 800fd5a:	4b26      	ldr	r3, [pc, #152]	; (800fdf4 <tcp_receive+0xf18>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	441a      	add	r2, r3
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd64:	6879      	ldr	r1, [r7, #4]
 800fd66:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fd68:	440b      	add	r3, r1
 800fd6a:	429a      	cmp	r2, r3
 800fd6c:	d019      	beq.n	800fda2 <tcp_receive+0xec6>
 800fd6e:	4b24      	ldr	r3, [pc, #144]	; (800fe00 <tcp_receive+0xf24>)
 800fd70:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800fd74:	4923      	ldr	r1, [pc, #140]	; (800fe04 <tcp_receive+0xf28>)
 800fd76:	4824      	ldr	r0, [pc, #144]	; (800fe08 <tcp_receive+0xf2c>)
 800fd78:	f004 fc7e 	bl	8014678 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fd7c:	e011      	b.n	800fda2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fd7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	63bb      	str	r3, [r7, #56]	; 0x38
 800fd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	f47f aea4 	bne.w	800fad4 <tcp_receive+0xbf8>
 800fd8c:	e00a      	b.n	800fda4 <tcp_receive+0xec8>
                break;
 800fd8e:	bf00      	nop
 800fd90:	e008      	b.n	800fda4 <tcp_receive+0xec8>
                break;
 800fd92:	bf00      	nop
 800fd94:	e006      	b.n	800fda4 <tcp_receive+0xec8>
                  break;
 800fd96:	bf00      	nop
 800fd98:	e004      	b.n	800fda4 <tcp_receive+0xec8>
                  break;
 800fd9a:	bf00      	nop
 800fd9c:	e002      	b.n	800fda4 <tcp_receive+0xec8>
                  break;
 800fd9e:	bf00      	nop
 800fda0:	e000      	b.n	800fda4 <tcp_receive+0xec8>
                break;
 800fda2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fda4:	6878      	ldr	r0, [r7, #4]
 800fda6:	f001 fa33 	bl	8011210 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fdaa:	e003      	b.n	800fdb4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	f001 fa2f 	bl	8011210 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fdb2:	e01a      	b.n	800fdea <tcp_receive+0xf0e>
 800fdb4:	e019      	b.n	800fdea <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fdb6:	4b0f      	ldr	r3, [pc, #60]	; (800fdf4 <tcp_receive+0xf18>)
 800fdb8:	681a      	ldr	r2, [r3, #0]
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdbe:	1ad3      	subs	r3, r2, r3
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	db0a      	blt.n	800fdda <tcp_receive+0xefe>
 800fdc4:	4b0b      	ldr	r3, [pc, #44]	; (800fdf4 <tcp_receive+0xf18>)
 800fdc6:	681a      	ldr	r2, [r3, #0]
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdcc:	6879      	ldr	r1, [r7, #4]
 800fdce:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fdd0:	440b      	add	r3, r1
 800fdd2:	1ad3      	subs	r3, r2, r3
 800fdd4:	3301      	adds	r3, #1
 800fdd6:	2b00      	cmp	r3, #0
 800fdd8:	dd07      	ble.n	800fdea <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	8b5b      	ldrh	r3, [r3, #26]
 800fdde:	f043 0302 	orr.w	r3, r3, #2
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fde8:	e7ff      	b.n	800fdea <tcp_receive+0xf0e>
 800fdea:	bf00      	nop
 800fdec:	3750      	adds	r7, #80	; 0x50
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bdb0      	pop	{r4, r5, r7, pc}
 800fdf2:	bf00      	nop
 800fdf4:	2000f220 	.word	0x2000f220
 800fdf8:	2000f200 	.word	0x2000f200
 800fdfc:	2000f22a 	.word	0x2000f22a
 800fe00:	0801684c 	.word	0x0801684c
 800fe04:	08016bf4 	.word	0x08016bf4
 800fe08:	08016898 	.word	0x08016898

0800fe0c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fe0c:	b480      	push	{r7}
 800fe0e:	b083      	sub	sp, #12
 800fe10:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fe12:	4b15      	ldr	r3, [pc, #84]	; (800fe68 <tcp_get_next_optbyte+0x5c>)
 800fe14:	881b      	ldrh	r3, [r3, #0]
 800fe16:	1c5a      	adds	r2, r3, #1
 800fe18:	b291      	uxth	r1, r2
 800fe1a:	4a13      	ldr	r2, [pc, #76]	; (800fe68 <tcp_get_next_optbyte+0x5c>)
 800fe1c:	8011      	strh	r1, [r2, #0]
 800fe1e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fe20:	4b12      	ldr	r3, [pc, #72]	; (800fe6c <tcp_get_next_optbyte+0x60>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d004      	beq.n	800fe32 <tcp_get_next_optbyte+0x26>
 800fe28:	4b11      	ldr	r3, [pc, #68]	; (800fe70 <tcp_get_next_optbyte+0x64>)
 800fe2a:	881b      	ldrh	r3, [r3, #0]
 800fe2c:	88fa      	ldrh	r2, [r7, #6]
 800fe2e:	429a      	cmp	r2, r3
 800fe30:	d208      	bcs.n	800fe44 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fe32:	4b10      	ldr	r3, [pc, #64]	; (800fe74 <tcp_get_next_optbyte+0x68>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	3314      	adds	r3, #20
 800fe38:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fe3a:	88fb      	ldrh	r3, [r7, #6]
 800fe3c:	683a      	ldr	r2, [r7, #0]
 800fe3e:	4413      	add	r3, r2
 800fe40:	781b      	ldrb	r3, [r3, #0]
 800fe42:	e00b      	b.n	800fe5c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fe44:	88fb      	ldrh	r3, [r7, #6]
 800fe46:	b2da      	uxtb	r2, r3
 800fe48:	4b09      	ldr	r3, [pc, #36]	; (800fe70 <tcp_get_next_optbyte+0x64>)
 800fe4a:	881b      	ldrh	r3, [r3, #0]
 800fe4c:	b2db      	uxtb	r3, r3
 800fe4e:	1ad3      	subs	r3, r2, r3
 800fe50:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fe52:	4b06      	ldr	r3, [pc, #24]	; (800fe6c <tcp_get_next_optbyte+0x60>)
 800fe54:	681a      	ldr	r2, [r3, #0]
 800fe56:	797b      	ldrb	r3, [r7, #5]
 800fe58:	4413      	add	r3, r2
 800fe5a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	370c      	adds	r7, #12
 800fe60:	46bd      	mov	sp, r7
 800fe62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe66:	4770      	bx	lr
 800fe68:	2000f21c 	.word	0x2000f21c
 800fe6c:	2000f218 	.word	0x2000f218
 800fe70:	2000f216 	.word	0x2000f216
 800fe74:	2000f210 	.word	0x2000f210

0800fe78 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fe78:	b580      	push	{r7, lr}
 800fe7a:	b084      	sub	sp, #16
 800fe7c:	af00      	add	r7, sp, #0
 800fe7e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	2b00      	cmp	r3, #0
 800fe84:	d106      	bne.n	800fe94 <tcp_parseopt+0x1c>
 800fe86:	4b32      	ldr	r3, [pc, #200]	; (800ff50 <tcp_parseopt+0xd8>)
 800fe88:	f240 727d 	movw	r2, #1917	; 0x77d
 800fe8c:	4931      	ldr	r1, [pc, #196]	; (800ff54 <tcp_parseopt+0xdc>)
 800fe8e:	4832      	ldr	r0, [pc, #200]	; (800ff58 <tcp_parseopt+0xe0>)
 800fe90:	f004 fbf2 	bl	8014678 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fe94:	4b31      	ldr	r3, [pc, #196]	; (800ff5c <tcp_parseopt+0xe4>)
 800fe96:	881b      	ldrh	r3, [r3, #0]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d055      	beq.n	800ff48 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fe9c:	4b30      	ldr	r3, [pc, #192]	; (800ff60 <tcp_parseopt+0xe8>)
 800fe9e:	2200      	movs	r2, #0
 800fea0:	801a      	strh	r2, [r3, #0]
 800fea2:	e045      	b.n	800ff30 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fea4:	f7ff ffb2 	bl	800fe0c <tcp_get_next_optbyte>
 800fea8:	4603      	mov	r3, r0
 800feaa:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800feac:	7bfb      	ldrb	r3, [r7, #15]
 800feae:	2b02      	cmp	r3, #2
 800feb0:	d006      	beq.n	800fec0 <tcp_parseopt+0x48>
 800feb2:	2b02      	cmp	r3, #2
 800feb4:	dc2b      	bgt.n	800ff0e <tcp_parseopt+0x96>
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d041      	beq.n	800ff3e <tcp_parseopt+0xc6>
 800feba:	2b01      	cmp	r3, #1
 800febc:	d127      	bne.n	800ff0e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800febe:	e037      	b.n	800ff30 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fec0:	f7ff ffa4 	bl	800fe0c <tcp_get_next_optbyte>
 800fec4:	4603      	mov	r3, r0
 800fec6:	2b04      	cmp	r3, #4
 800fec8:	d13b      	bne.n	800ff42 <tcp_parseopt+0xca>
 800feca:	4b25      	ldr	r3, [pc, #148]	; (800ff60 <tcp_parseopt+0xe8>)
 800fecc:	881b      	ldrh	r3, [r3, #0]
 800fece:	3301      	adds	r3, #1
 800fed0:	4a22      	ldr	r2, [pc, #136]	; (800ff5c <tcp_parseopt+0xe4>)
 800fed2:	8812      	ldrh	r2, [r2, #0]
 800fed4:	4293      	cmp	r3, r2
 800fed6:	da34      	bge.n	800ff42 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fed8:	f7ff ff98 	bl	800fe0c <tcp_get_next_optbyte>
 800fedc:	4603      	mov	r3, r0
 800fede:	b29b      	uxth	r3, r3
 800fee0:	021b      	lsls	r3, r3, #8
 800fee2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fee4:	f7ff ff92 	bl	800fe0c <tcp_get_next_optbyte>
 800fee8:	4603      	mov	r3, r0
 800feea:	b29a      	uxth	r2, r3
 800feec:	89bb      	ldrh	r3, [r7, #12]
 800feee:	4313      	orrs	r3, r2
 800fef0:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fef2:	89bb      	ldrh	r3, [r7, #12]
 800fef4:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fef8:	d804      	bhi.n	800ff04 <tcp_parseopt+0x8c>
 800fefa:	89bb      	ldrh	r3, [r7, #12]
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	d001      	beq.n	800ff04 <tcp_parseopt+0x8c>
 800ff00:	89ba      	ldrh	r2, [r7, #12]
 800ff02:	e001      	b.n	800ff08 <tcp_parseopt+0x90>
 800ff04:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800ff0c:	e010      	b.n	800ff30 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800ff0e:	f7ff ff7d 	bl	800fe0c <tcp_get_next_optbyte>
 800ff12:	4603      	mov	r3, r0
 800ff14:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800ff16:	7afb      	ldrb	r3, [r7, #11]
 800ff18:	2b01      	cmp	r3, #1
 800ff1a:	d914      	bls.n	800ff46 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800ff1c:	7afb      	ldrb	r3, [r7, #11]
 800ff1e:	b29a      	uxth	r2, r3
 800ff20:	4b0f      	ldr	r3, [pc, #60]	; (800ff60 <tcp_parseopt+0xe8>)
 800ff22:	881b      	ldrh	r3, [r3, #0]
 800ff24:	4413      	add	r3, r2
 800ff26:	b29b      	uxth	r3, r3
 800ff28:	3b02      	subs	r3, #2
 800ff2a:	b29a      	uxth	r2, r3
 800ff2c:	4b0c      	ldr	r3, [pc, #48]	; (800ff60 <tcp_parseopt+0xe8>)
 800ff2e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800ff30:	4b0b      	ldr	r3, [pc, #44]	; (800ff60 <tcp_parseopt+0xe8>)
 800ff32:	881a      	ldrh	r2, [r3, #0]
 800ff34:	4b09      	ldr	r3, [pc, #36]	; (800ff5c <tcp_parseopt+0xe4>)
 800ff36:	881b      	ldrh	r3, [r3, #0]
 800ff38:	429a      	cmp	r2, r3
 800ff3a:	d3b3      	bcc.n	800fea4 <tcp_parseopt+0x2c>
 800ff3c:	e004      	b.n	800ff48 <tcp_parseopt+0xd0>
          return;
 800ff3e:	bf00      	nop
 800ff40:	e002      	b.n	800ff48 <tcp_parseopt+0xd0>
            return;
 800ff42:	bf00      	nop
 800ff44:	e000      	b.n	800ff48 <tcp_parseopt+0xd0>
            return;
 800ff46:	bf00      	nop
      }
    }
  }
}
 800ff48:	3710      	adds	r7, #16
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	0801684c 	.word	0x0801684c
 800ff54:	08016cb0 	.word	0x08016cb0
 800ff58:	08016898 	.word	0x08016898
 800ff5c:	2000f214 	.word	0x2000f214
 800ff60:	2000f21c 	.word	0x2000f21c

0800ff64 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800ff64:	b480      	push	{r7}
 800ff66:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800ff68:	4b05      	ldr	r3, [pc, #20]	; (800ff80 <tcp_trigger_input_pcb_close+0x1c>)
 800ff6a:	781b      	ldrb	r3, [r3, #0]
 800ff6c:	f043 0310 	orr.w	r3, r3, #16
 800ff70:	b2da      	uxtb	r2, r3
 800ff72:	4b03      	ldr	r3, [pc, #12]	; (800ff80 <tcp_trigger_input_pcb_close+0x1c>)
 800ff74:	701a      	strb	r2, [r3, #0]
}
 800ff76:	bf00      	nop
 800ff78:	46bd      	mov	sp, r7
 800ff7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff7e:	4770      	bx	lr
 800ff80:	2000f22d 	.word	0x2000f22d

0800ff84 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800ff84:	b580      	push	{r7, lr}
 800ff86:	b084      	sub	sp, #16
 800ff88:	af00      	add	r7, sp, #0
 800ff8a:	60f8      	str	r0, [r7, #12]
 800ff8c:	60b9      	str	r1, [r7, #8]
 800ff8e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d00a      	beq.n	800ffac <tcp_route+0x28>
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	7a1b      	ldrb	r3, [r3, #8]
 800ff9a:	2b00      	cmp	r3, #0
 800ff9c:	d006      	beq.n	800ffac <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	7a1b      	ldrb	r3, [r3, #8]
 800ffa2:	4618      	mov	r0, r3
 800ffa4:	f7fb fb20 	bl	800b5e8 <netif_get_by_index>
 800ffa8:	4603      	mov	r3, r0
 800ffaa:	e003      	b.n	800ffb4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800ffac:	6878      	ldr	r0, [r7, #4]
 800ffae:	f002 fead 	bl	8012d0c <ip4_route>
 800ffb2:	4603      	mov	r3, r0
  }
}
 800ffb4:	4618      	mov	r0, r3
 800ffb6:	3710      	adds	r7, #16
 800ffb8:	46bd      	mov	sp, r7
 800ffba:	bd80      	pop	{r7, pc}

0800ffbc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800ffbc:	b590      	push	{r4, r7, lr}
 800ffbe:	b087      	sub	sp, #28
 800ffc0:	af00      	add	r7, sp, #0
 800ffc2:	60f8      	str	r0, [r7, #12]
 800ffc4:	60b9      	str	r1, [r7, #8]
 800ffc6:	603b      	str	r3, [r7, #0]
 800ffc8:	4613      	mov	r3, r2
 800ffca:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d105      	bne.n	800ffde <tcp_create_segment+0x22>
 800ffd2:	4b44      	ldr	r3, [pc, #272]	; (80100e4 <tcp_create_segment+0x128>)
 800ffd4:	22a3      	movs	r2, #163	; 0xa3
 800ffd6:	4944      	ldr	r1, [pc, #272]	; (80100e8 <tcp_create_segment+0x12c>)
 800ffd8:	4844      	ldr	r0, [pc, #272]	; (80100ec <tcp_create_segment+0x130>)
 800ffda:	f004 fb4d 	bl	8014678 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800ffde:	68bb      	ldr	r3, [r7, #8]
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d105      	bne.n	800fff0 <tcp_create_segment+0x34>
 800ffe4:	4b3f      	ldr	r3, [pc, #252]	; (80100e4 <tcp_create_segment+0x128>)
 800ffe6:	22a4      	movs	r2, #164	; 0xa4
 800ffe8:	4941      	ldr	r1, [pc, #260]	; (80100f0 <tcp_create_segment+0x134>)
 800ffea:	4840      	ldr	r0, [pc, #256]	; (80100ec <tcp_create_segment+0x130>)
 800ffec:	f004 fb44 	bl	8014678 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fff0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fff4:	009b      	lsls	r3, r3, #2
 800fff6:	b2db      	uxtb	r3, r3
 800fff8:	f003 0304 	and.w	r3, r3, #4
 800fffc:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fffe:	2003      	movs	r0, #3
 8010000:	f7fa ff66 	bl	800aed0 <memp_malloc>
 8010004:	6138      	str	r0, [r7, #16]
 8010006:	693b      	ldr	r3, [r7, #16]
 8010008:	2b00      	cmp	r3, #0
 801000a:	d104      	bne.n	8010016 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801000c:	68b8      	ldr	r0, [r7, #8]
 801000e:	f7fb fe79 	bl	800bd04 <pbuf_free>
    return NULL;
 8010012:	2300      	movs	r3, #0
 8010014:	e061      	b.n	80100da <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801001c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801001e:	693b      	ldr	r3, [r7, #16]
 8010020:	2200      	movs	r2, #0
 8010022:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010024:	693b      	ldr	r3, [r7, #16]
 8010026:	68ba      	ldr	r2, [r7, #8]
 8010028:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	891a      	ldrh	r2, [r3, #8]
 801002e:	7dfb      	ldrb	r3, [r7, #23]
 8010030:	b29b      	uxth	r3, r3
 8010032:	429a      	cmp	r2, r3
 8010034:	d205      	bcs.n	8010042 <tcp_create_segment+0x86>
 8010036:	4b2b      	ldr	r3, [pc, #172]	; (80100e4 <tcp_create_segment+0x128>)
 8010038:	22b0      	movs	r2, #176	; 0xb0
 801003a:	492e      	ldr	r1, [pc, #184]	; (80100f4 <tcp_create_segment+0x138>)
 801003c:	482b      	ldr	r0, [pc, #172]	; (80100ec <tcp_create_segment+0x130>)
 801003e:	f004 fb1b 	bl	8014678 <iprintf>
  seg->len = p->tot_len - optlen;
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	891a      	ldrh	r2, [r3, #8]
 8010046:	7dfb      	ldrb	r3, [r7, #23]
 8010048:	b29b      	uxth	r3, r3
 801004a:	1ad3      	subs	r3, r2, r3
 801004c:	b29a      	uxth	r2, r3
 801004e:	693b      	ldr	r3, [r7, #16]
 8010050:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010052:	2114      	movs	r1, #20
 8010054:	68b8      	ldr	r0, [r7, #8]
 8010056:	f7fb fdbf 	bl	800bbd8 <pbuf_add_header>
 801005a:	4603      	mov	r3, r0
 801005c:	2b00      	cmp	r3, #0
 801005e:	d004      	beq.n	801006a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010060:	6938      	ldr	r0, [r7, #16]
 8010062:	f7fd f8ce 	bl	800d202 <tcp_seg_free>
    return NULL;
 8010066:	2300      	movs	r3, #0
 8010068:	e037      	b.n	80100da <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801006a:	693b      	ldr	r3, [r7, #16]
 801006c:	685b      	ldr	r3, [r3, #4]
 801006e:	685a      	ldr	r2, [r3, #4]
 8010070:	693b      	ldr	r3, [r7, #16]
 8010072:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	8ada      	ldrh	r2, [r3, #22]
 8010078:	693b      	ldr	r3, [r7, #16]
 801007a:	68dc      	ldr	r4, [r3, #12]
 801007c:	4610      	mov	r0, r2
 801007e:	f7fa fa4f 	bl	800a520 <lwip_htons>
 8010082:	4603      	mov	r3, r0
 8010084:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010086:	68fb      	ldr	r3, [r7, #12]
 8010088:	8b1a      	ldrh	r2, [r3, #24]
 801008a:	693b      	ldr	r3, [r7, #16]
 801008c:	68dc      	ldr	r4, [r3, #12]
 801008e:	4610      	mov	r0, r2
 8010090:	f7fa fa46 	bl	800a520 <lwip_htons>
 8010094:	4603      	mov	r3, r0
 8010096:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010098:	693b      	ldr	r3, [r7, #16]
 801009a:	68dc      	ldr	r4, [r3, #12]
 801009c:	6838      	ldr	r0, [r7, #0]
 801009e:	f7fa fa54 	bl	800a54a <lwip_htonl>
 80100a2:	4603      	mov	r3, r0
 80100a4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80100a6:	7dfb      	ldrb	r3, [r7, #23]
 80100a8:	089b      	lsrs	r3, r3, #2
 80100aa:	b2db      	uxtb	r3, r3
 80100ac:	b29b      	uxth	r3, r3
 80100ae:	3305      	adds	r3, #5
 80100b0:	b29b      	uxth	r3, r3
 80100b2:	031b      	lsls	r3, r3, #12
 80100b4:	b29a      	uxth	r2, r3
 80100b6:	79fb      	ldrb	r3, [r7, #7]
 80100b8:	b29b      	uxth	r3, r3
 80100ba:	4313      	orrs	r3, r2
 80100bc:	b29a      	uxth	r2, r3
 80100be:	693b      	ldr	r3, [r7, #16]
 80100c0:	68dc      	ldr	r4, [r3, #12]
 80100c2:	4610      	mov	r0, r2
 80100c4:	f7fa fa2c 	bl	800a520 <lwip_htons>
 80100c8:	4603      	mov	r3, r0
 80100ca:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80100cc:	693b      	ldr	r3, [r7, #16]
 80100ce:	68db      	ldr	r3, [r3, #12]
 80100d0:	2200      	movs	r2, #0
 80100d2:	749a      	strb	r2, [r3, #18]
 80100d4:	2200      	movs	r2, #0
 80100d6:	74da      	strb	r2, [r3, #19]
  return seg;
 80100d8:	693b      	ldr	r3, [r7, #16]
}
 80100da:	4618      	mov	r0, r3
 80100dc:	371c      	adds	r7, #28
 80100de:	46bd      	mov	sp, r7
 80100e0:	bd90      	pop	{r4, r7, pc}
 80100e2:	bf00      	nop
 80100e4:	08016ccc 	.word	0x08016ccc
 80100e8:	08016d00 	.word	0x08016d00
 80100ec:	08016d20 	.word	0x08016d20
 80100f0:	08016d48 	.word	0x08016d48
 80100f4:	08016d6c 	.word	0x08016d6c

080100f8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80100f8:	b590      	push	{r4, r7, lr}
 80100fa:	b08b      	sub	sp, #44	; 0x2c
 80100fc:	af02      	add	r7, sp, #8
 80100fe:	6078      	str	r0, [r7, #4]
 8010100:	460b      	mov	r3, r1
 8010102:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8010104:	2300      	movs	r3, #0
 8010106:	61fb      	str	r3, [r7, #28]
 8010108:	2300      	movs	r3, #0
 801010a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801010c:	2300      	movs	r3, #0
 801010e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	2b00      	cmp	r3, #0
 8010114:	d106      	bne.n	8010124 <tcp_split_unsent_seg+0x2c>
 8010116:	4b95      	ldr	r3, [pc, #596]	; (801036c <tcp_split_unsent_seg+0x274>)
 8010118:	f240 324b 	movw	r2, #843	; 0x34b
 801011c:	4994      	ldr	r1, [pc, #592]	; (8010370 <tcp_split_unsent_seg+0x278>)
 801011e:	4895      	ldr	r0, [pc, #596]	; (8010374 <tcp_split_unsent_seg+0x27c>)
 8010120:	f004 faaa 	bl	8014678 <iprintf>

  useg = pcb->unsent;
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010128:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801012a:	697b      	ldr	r3, [r7, #20]
 801012c:	2b00      	cmp	r3, #0
 801012e:	d102      	bne.n	8010136 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8010130:	f04f 33ff 	mov.w	r3, #4294967295
 8010134:	e116      	b.n	8010364 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8010136:	887b      	ldrh	r3, [r7, #2]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d109      	bne.n	8010150 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801013c:	4b8b      	ldr	r3, [pc, #556]	; (801036c <tcp_split_unsent_seg+0x274>)
 801013e:	f240 3253 	movw	r2, #851	; 0x353
 8010142:	498d      	ldr	r1, [pc, #564]	; (8010378 <tcp_split_unsent_seg+0x280>)
 8010144:	488b      	ldr	r0, [pc, #556]	; (8010374 <tcp_split_unsent_seg+0x27c>)
 8010146:	f004 fa97 	bl	8014678 <iprintf>
    return ERR_VAL;
 801014a:	f06f 0305 	mvn.w	r3, #5
 801014e:	e109      	b.n	8010364 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8010150:	697b      	ldr	r3, [r7, #20]
 8010152:	891b      	ldrh	r3, [r3, #8]
 8010154:	887a      	ldrh	r2, [r7, #2]
 8010156:	429a      	cmp	r2, r3
 8010158:	d301      	bcc.n	801015e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801015a:	2300      	movs	r3, #0
 801015c:	e102      	b.n	8010364 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801015e:	687b      	ldr	r3, [r7, #4]
 8010160:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010162:	887a      	ldrh	r2, [r7, #2]
 8010164:	429a      	cmp	r2, r3
 8010166:	d906      	bls.n	8010176 <tcp_split_unsent_seg+0x7e>
 8010168:	4b80      	ldr	r3, [pc, #512]	; (801036c <tcp_split_unsent_seg+0x274>)
 801016a:	f240 325b 	movw	r2, #859	; 0x35b
 801016e:	4983      	ldr	r1, [pc, #524]	; (801037c <tcp_split_unsent_seg+0x284>)
 8010170:	4880      	ldr	r0, [pc, #512]	; (8010374 <tcp_split_unsent_seg+0x27c>)
 8010172:	f004 fa81 	bl	8014678 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 8010176:	697b      	ldr	r3, [r7, #20]
 8010178:	891b      	ldrh	r3, [r3, #8]
 801017a:	2b00      	cmp	r3, #0
 801017c:	d106      	bne.n	801018c <tcp_split_unsent_seg+0x94>
 801017e:	4b7b      	ldr	r3, [pc, #492]	; (801036c <tcp_split_unsent_seg+0x274>)
 8010180:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8010184:	497e      	ldr	r1, [pc, #504]	; (8010380 <tcp_split_unsent_seg+0x288>)
 8010186:	487b      	ldr	r0, [pc, #492]	; (8010374 <tcp_split_unsent_seg+0x27c>)
 8010188:	f004 fa76 	bl	8014678 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801018c:	697b      	ldr	r3, [r7, #20]
 801018e:	7a9b      	ldrb	r3, [r3, #10]
 8010190:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010192:	7bfb      	ldrb	r3, [r7, #15]
 8010194:	009b      	lsls	r3, r3, #2
 8010196:	b2db      	uxtb	r3, r3
 8010198:	f003 0304 	and.w	r3, r3, #4
 801019c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801019e:	697b      	ldr	r3, [r7, #20]
 80101a0:	891a      	ldrh	r2, [r3, #8]
 80101a2:	887b      	ldrh	r3, [r7, #2]
 80101a4:	1ad3      	subs	r3, r2, r3
 80101a6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80101a8:	7bbb      	ldrb	r3, [r7, #14]
 80101aa:	b29a      	uxth	r2, r3
 80101ac:	89bb      	ldrh	r3, [r7, #12]
 80101ae:	4413      	add	r3, r2
 80101b0:	b29b      	uxth	r3, r3
 80101b2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80101b6:	4619      	mov	r1, r3
 80101b8:	2036      	movs	r0, #54	; 0x36
 80101ba:	f7fb fabf 	bl	800b73c <pbuf_alloc>
 80101be:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80101c0:	693b      	ldr	r3, [r7, #16]
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	f000 80b7 	beq.w	8010336 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80101c8:	697b      	ldr	r3, [r7, #20]
 80101ca:	685b      	ldr	r3, [r3, #4]
 80101cc:	891a      	ldrh	r2, [r3, #8]
 80101ce:	697b      	ldr	r3, [r7, #20]
 80101d0:	891b      	ldrh	r3, [r3, #8]
 80101d2:	1ad3      	subs	r3, r2, r3
 80101d4:	b29a      	uxth	r2, r3
 80101d6:	887b      	ldrh	r3, [r7, #2]
 80101d8:	4413      	add	r3, r2
 80101da:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80101dc:	697b      	ldr	r3, [r7, #20]
 80101de:	6858      	ldr	r0, [r3, #4]
 80101e0:	693b      	ldr	r3, [r7, #16]
 80101e2:	685a      	ldr	r2, [r3, #4]
 80101e4:	7bbb      	ldrb	r3, [r7, #14]
 80101e6:	18d1      	adds	r1, r2, r3
 80101e8:	897b      	ldrh	r3, [r7, #10]
 80101ea:	89ba      	ldrh	r2, [r7, #12]
 80101ec:	f7fb ff80 	bl	800c0f0 <pbuf_copy_partial>
 80101f0:	4603      	mov	r3, r0
 80101f2:	461a      	mov	r2, r3
 80101f4:	89bb      	ldrh	r3, [r7, #12]
 80101f6:	4293      	cmp	r3, r2
 80101f8:	f040 809f 	bne.w	801033a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80101fc:	697b      	ldr	r3, [r7, #20]
 80101fe:	68db      	ldr	r3, [r3, #12]
 8010200:	899b      	ldrh	r3, [r3, #12]
 8010202:	b29b      	uxth	r3, r3
 8010204:	4618      	mov	r0, r3
 8010206:	f7fa f98b 	bl	800a520 <lwip_htons>
 801020a:	4603      	mov	r3, r0
 801020c:	b2db      	uxtb	r3, r3
 801020e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010212:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8010214:	2300      	movs	r3, #0
 8010216:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010218:	7efb      	ldrb	r3, [r7, #27]
 801021a:	f003 0308 	and.w	r3, r3, #8
 801021e:	2b00      	cmp	r3, #0
 8010220:	d007      	beq.n	8010232 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8010222:	7efb      	ldrb	r3, [r7, #27]
 8010224:	f023 0308 	bic.w	r3, r3, #8
 8010228:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801022a:	7ebb      	ldrb	r3, [r7, #26]
 801022c:	f043 0308 	orr.w	r3, r3, #8
 8010230:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8010232:	7efb      	ldrb	r3, [r7, #27]
 8010234:	f003 0301 	and.w	r3, r3, #1
 8010238:	2b00      	cmp	r3, #0
 801023a:	d007      	beq.n	801024c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801023c:	7efb      	ldrb	r3, [r7, #27]
 801023e:	f023 0301 	bic.w	r3, r3, #1
 8010242:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8010244:	7ebb      	ldrb	r3, [r7, #26]
 8010246:	f043 0301 	orr.w	r3, r3, #1
 801024a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	68db      	ldr	r3, [r3, #12]
 8010250:	685b      	ldr	r3, [r3, #4]
 8010252:	4618      	mov	r0, r3
 8010254:	f7fa f979 	bl	800a54a <lwip_htonl>
 8010258:	4602      	mov	r2, r0
 801025a:	887b      	ldrh	r3, [r7, #2]
 801025c:	18d1      	adds	r1, r2, r3
 801025e:	7eba      	ldrb	r2, [r7, #26]
 8010260:	7bfb      	ldrb	r3, [r7, #15]
 8010262:	9300      	str	r3, [sp, #0]
 8010264:	460b      	mov	r3, r1
 8010266:	6939      	ldr	r1, [r7, #16]
 8010268:	6878      	ldr	r0, [r7, #4]
 801026a:	f7ff fea7 	bl	800ffbc <tcp_create_segment>
 801026e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8010270:	69fb      	ldr	r3, [r7, #28]
 8010272:	2b00      	cmp	r3, #0
 8010274:	d063      	beq.n	801033e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8010276:	697b      	ldr	r3, [r7, #20]
 8010278:	685b      	ldr	r3, [r3, #4]
 801027a:	4618      	mov	r0, r3
 801027c:	f7fb fdd0 	bl	800be20 <pbuf_clen>
 8010280:	4603      	mov	r3, r0
 8010282:	461a      	mov	r2, r3
 8010284:	687b      	ldr	r3, [r7, #4]
 8010286:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801028a:	1a9b      	subs	r3, r3, r2
 801028c:	b29a      	uxth	r2, r3
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8010294:	697b      	ldr	r3, [r7, #20]
 8010296:	6858      	ldr	r0, [r3, #4]
 8010298:	697b      	ldr	r3, [r7, #20]
 801029a:	685b      	ldr	r3, [r3, #4]
 801029c:	891a      	ldrh	r2, [r3, #8]
 801029e:	89bb      	ldrh	r3, [r7, #12]
 80102a0:	1ad3      	subs	r3, r2, r3
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	4619      	mov	r1, r3
 80102a6:	f7fb fba7 	bl	800b9f8 <pbuf_realloc>
  useg->len -= remainder;
 80102aa:	697b      	ldr	r3, [r7, #20]
 80102ac:	891a      	ldrh	r2, [r3, #8]
 80102ae:	89bb      	ldrh	r3, [r7, #12]
 80102b0:	1ad3      	subs	r3, r2, r3
 80102b2:	b29a      	uxth	r2, r3
 80102b4:	697b      	ldr	r3, [r7, #20]
 80102b6:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80102b8:	697b      	ldr	r3, [r7, #20]
 80102ba:	68db      	ldr	r3, [r3, #12]
 80102bc:	899b      	ldrh	r3, [r3, #12]
 80102be:	b29c      	uxth	r4, r3
 80102c0:	7efb      	ldrb	r3, [r7, #27]
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	4618      	mov	r0, r3
 80102c6:	f7fa f92b 	bl	800a520 <lwip_htons>
 80102ca:	4603      	mov	r3, r0
 80102cc:	461a      	mov	r2, r3
 80102ce:	697b      	ldr	r3, [r7, #20]
 80102d0:	68db      	ldr	r3, [r3, #12]
 80102d2:	4322      	orrs	r2, r4
 80102d4:	b292      	uxth	r2, r2
 80102d6:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	685b      	ldr	r3, [r3, #4]
 80102dc:	4618      	mov	r0, r3
 80102de:	f7fb fd9f 	bl	800be20 <pbuf_clen>
 80102e2:	4603      	mov	r3, r0
 80102e4:	461a      	mov	r2, r3
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102ec:	4413      	add	r3, r2
 80102ee:	b29a      	uxth	r2, r3
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80102f6:	69fb      	ldr	r3, [r7, #28]
 80102f8:	685b      	ldr	r3, [r3, #4]
 80102fa:	4618      	mov	r0, r3
 80102fc:	f7fb fd90 	bl	800be20 <pbuf_clen>
 8010300:	4603      	mov	r3, r0
 8010302:	461a      	mov	r2, r3
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801030a:	4413      	add	r3, r2
 801030c:	b29a      	uxth	r2, r3
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8010314:	697b      	ldr	r3, [r7, #20]
 8010316:	681a      	ldr	r2, [r3, #0]
 8010318:	69fb      	ldr	r3, [r7, #28]
 801031a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801031c:	697b      	ldr	r3, [r7, #20]
 801031e:	69fa      	ldr	r2, [r7, #28]
 8010320:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8010322:	69fb      	ldr	r3, [r7, #28]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	2b00      	cmp	r3, #0
 8010328:	d103      	bne.n	8010332 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2200      	movs	r2, #0
 801032e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8010332:	2300      	movs	r3, #0
 8010334:	e016      	b.n	8010364 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8010336:	bf00      	nop
 8010338:	e002      	b.n	8010340 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801033a:	bf00      	nop
 801033c:	e000      	b.n	8010340 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801033e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010340:	69fb      	ldr	r3, [r7, #28]
 8010342:	2b00      	cmp	r3, #0
 8010344:	d006      	beq.n	8010354 <tcp_split_unsent_seg+0x25c>
 8010346:	4b09      	ldr	r3, [pc, #36]	; (801036c <tcp_split_unsent_seg+0x274>)
 8010348:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801034c:	490d      	ldr	r1, [pc, #52]	; (8010384 <tcp_split_unsent_seg+0x28c>)
 801034e:	4809      	ldr	r0, [pc, #36]	; (8010374 <tcp_split_unsent_seg+0x27c>)
 8010350:	f004 f992 	bl	8014678 <iprintf>
  if (p != NULL) {
 8010354:	693b      	ldr	r3, [r7, #16]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d002      	beq.n	8010360 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801035a:	6938      	ldr	r0, [r7, #16]
 801035c:	f7fb fcd2 	bl	800bd04 <pbuf_free>
  }

  return ERR_MEM;
 8010360:	f04f 33ff 	mov.w	r3, #4294967295
}
 8010364:	4618      	mov	r0, r3
 8010366:	3724      	adds	r7, #36	; 0x24
 8010368:	46bd      	mov	sp, r7
 801036a:	bd90      	pop	{r4, r7, pc}
 801036c:	08016ccc 	.word	0x08016ccc
 8010370:	08017060 	.word	0x08017060
 8010374:	08016d20 	.word	0x08016d20
 8010378:	08017084 	.word	0x08017084
 801037c:	080170a8 	.word	0x080170a8
 8010380:	080170b8 	.word	0x080170b8
 8010384:	080170c8 	.word	0x080170c8

08010388 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8010388:	b590      	push	{r4, r7, lr}
 801038a:	b085      	sub	sp, #20
 801038c:	af00      	add	r7, sp, #0
 801038e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	2b00      	cmp	r3, #0
 8010394:	d106      	bne.n	80103a4 <tcp_send_fin+0x1c>
 8010396:	4b21      	ldr	r3, [pc, #132]	; (801041c <tcp_send_fin+0x94>)
 8010398:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801039c:	4920      	ldr	r1, [pc, #128]	; (8010420 <tcp_send_fin+0x98>)
 801039e:	4821      	ldr	r0, [pc, #132]	; (8010424 <tcp_send_fin+0x9c>)
 80103a0:	f004 f96a 	bl	8014678 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d02e      	beq.n	801040a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80103b0:	60fb      	str	r3, [r7, #12]
 80103b2:	e002      	b.n	80103ba <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80103b4:	68fb      	ldr	r3, [r7, #12]
 80103b6:	681b      	ldr	r3, [r3, #0]
 80103b8:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	681b      	ldr	r3, [r3, #0]
 80103be:	2b00      	cmp	r3, #0
 80103c0:	d1f8      	bne.n	80103b4 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	68db      	ldr	r3, [r3, #12]
 80103c6:	899b      	ldrh	r3, [r3, #12]
 80103c8:	b29b      	uxth	r3, r3
 80103ca:	4618      	mov	r0, r3
 80103cc:	f7fa f8a8 	bl	800a520 <lwip_htons>
 80103d0:	4603      	mov	r3, r0
 80103d2:	b2db      	uxtb	r3, r3
 80103d4:	f003 0307 	and.w	r3, r3, #7
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d116      	bne.n	801040a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	68db      	ldr	r3, [r3, #12]
 80103e0:	899b      	ldrh	r3, [r3, #12]
 80103e2:	b29c      	uxth	r4, r3
 80103e4:	2001      	movs	r0, #1
 80103e6:	f7fa f89b 	bl	800a520 <lwip_htons>
 80103ea:	4603      	mov	r3, r0
 80103ec:	461a      	mov	r2, r3
 80103ee:	68fb      	ldr	r3, [r7, #12]
 80103f0:	68db      	ldr	r3, [r3, #12]
 80103f2:	4322      	orrs	r2, r4
 80103f4:	b292      	uxth	r2, r2
 80103f6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	8b5b      	ldrh	r3, [r3, #26]
 80103fc:	f043 0320 	orr.w	r3, r3, #32
 8010400:	b29a      	uxth	r2, r3
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8010406:	2300      	movs	r3, #0
 8010408:	e004      	b.n	8010414 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801040a:	2101      	movs	r1, #1
 801040c:	6878      	ldr	r0, [r7, #4]
 801040e:	f000 f80b 	bl	8010428 <tcp_enqueue_flags>
 8010412:	4603      	mov	r3, r0
}
 8010414:	4618      	mov	r0, r3
 8010416:	3714      	adds	r7, #20
 8010418:	46bd      	mov	sp, r7
 801041a:	bd90      	pop	{r4, r7, pc}
 801041c:	08016ccc 	.word	0x08016ccc
 8010420:	080170d4 	.word	0x080170d4
 8010424:	08016d20 	.word	0x08016d20

08010428 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010428:	b580      	push	{r7, lr}
 801042a:	b08a      	sub	sp, #40	; 0x28
 801042c:	af02      	add	r7, sp, #8
 801042e:	6078      	str	r0, [r7, #4]
 8010430:	460b      	mov	r3, r1
 8010432:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8010434:	2300      	movs	r3, #0
 8010436:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010438:	2300      	movs	r3, #0
 801043a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801043c:	78fb      	ldrb	r3, [r7, #3]
 801043e:	f003 0303 	and.w	r3, r3, #3
 8010442:	2b00      	cmp	r3, #0
 8010444:	d106      	bne.n	8010454 <tcp_enqueue_flags+0x2c>
 8010446:	4b67      	ldr	r3, [pc, #412]	; (80105e4 <tcp_enqueue_flags+0x1bc>)
 8010448:	f240 4211 	movw	r2, #1041	; 0x411
 801044c:	4966      	ldr	r1, [pc, #408]	; (80105e8 <tcp_enqueue_flags+0x1c0>)
 801044e:	4867      	ldr	r0, [pc, #412]	; (80105ec <tcp_enqueue_flags+0x1c4>)
 8010450:	f004 f912 	bl	8014678 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d106      	bne.n	8010468 <tcp_enqueue_flags+0x40>
 801045a:	4b62      	ldr	r3, [pc, #392]	; (80105e4 <tcp_enqueue_flags+0x1bc>)
 801045c:	f240 4213 	movw	r2, #1043	; 0x413
 8010460:	4963      	ldr	r1, [pc, #396]	; (80105f0 <tcp_enqueue_flags+0x1c8>)
 8010462:	4862      	ldr	r0, [pc, #392]	; (80105ec <tcp_enqueue_flags+0x1c4>)
 8010464:	f004 f908 	bl	8014678 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8010468:	78fb      	ldrb	r3, [r7, #3]
 801046a:	f003 0302 	and.w	r3, r3, #2
 801046e:	2b00      	cmp	r3, #0
 8010470:	d001      	beq.n	8010476 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8010472:	2301      	movs	r3, #1
 8010474:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010476:	7ffb      	ldrb	r3, [r7, #31]
 8010478:	009b      	lsls	r3, r3, #2
 801047a:	b2db      	uxtb	r3, r3
 801047c:	f003 0304 	and.w	r3, r3, #4
 8010480:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010482:	7dfb      	ldrb	r3, [r7, #23]
 8010484:	b29b      	uxth	r3, r3
 8010486:	f44f 7220 	mov.w	r2, #640	; 0x280
 801048a:	4619      	mov	r1, r3
 801048c:	2036      	movs	r0, #54	; 0x36
 801048e:	f7fb f955 	bl	800b73c <pbuf_alloc>
 8010492:	6138      	str	r0, [r7, #16]
 8010494:	693b      	ldr	r3, [r7, #16]
 8010496:	2b00      	cmp	r3, #0
 8010498:	d109      	bne.n	80104ae <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	8b5b      	ldrh	r3, [r3, #26]
 801049e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104a2:	b29a      	uxth	r2, r3
 80104a4:	687b      	ldr	r3, [r7, #4]
 80104a6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80104a8:	f04f 33ff 	mov.w	r3, #4294967295
 80104ac:	e095      	b.n	80105da <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80104ae:	693b      	ldr	r3, [r7, #16]
 80104b0:	895a      	ldrh	r2, [r3, #10]
 80104b2:	7dfb      	ldrb	r3, [r7, #23]
 80104b4:	b29b      	uxth	r3, r3
 80104b6:	429a      	cmp	r2, r3
 80104b8:	d206      	bcs.n	80104c8 <tcp_enqueue_flags+0xa0>
 80104ba:	4b4a      	ldr	r3, [pc, #296]	; (80105e4 <tcp_enqueue_flags+0x1bc>)
 80104bc:	f240 4239 	movw	r2, #1081	; 0x439
 80104c0:	494c      	ldr	r1, [pc, #304]	; (80105f4 <tcp_enqueue_flags+0x1cc>)
 80104c2:	484a      	ldr	r0, [pc, #296]	; (80105ec <tcp_enqueue_flags+0x1c4>)
 80104c4:	f004 f8d8 	bl	8014678 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80104cc:	78fa      	ldrb	r2, [r7, #3]
 80104ce:	7ffb      	ldrb	r3, [r7, #31]
 80104d0:	9300      	str	r3, [sp, #0]
 80104d2:	460b      	mov	r3, r1
 80104d4:	6939      	ldr	r1, [r7, #16]
 80104d6:	6878      	ldr	r0, [r7, #4]
 80104d8:	f7ff fd70 	bl	800ffbc <tcp_create_segment>
 80104dc:	60f8      	str	r0, [r7, #12]
 80104de:	68fb      	ldr	r3, [r7, #12]
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	d109      	bne.n	80104f8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80104e4:	687b      	ldr	r3, [r7, #4]
 80104e6:	8b5b      	ldrh	r3, [r3, #26]
 80104e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104ec:	b29a      	uxth	r2, r3
 80104ee:	687b      	ldr	r3, [r7, #4]
 80104f0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80104f2:	f04f 33ff 	mov.w	r3, #4294967295
 80104f6:	e070      	b.n	80105da <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80104f8:	68fb      	ldr	r3, [r7, #12]
 80104fa:	68db      	ldr	r3, [r3, #12]
 80104fc:	f003 0303 	and.w	r3, r3, #3
 8010500:	2b00      	cmp	r3, #0
 8010502:	d006      	beq.n	8010512 <tcp_enqueue_flags+0xea>
 8010504:	4b37      	ldr	r3, [pc, #220]	; (80105e4 <tcp_enqueue_flags+0x1bc>)
 8010506:	f240 4242 	movw	r2, #1090	; 0x442
 801050a:	493b      	ldr	r1, [pc, #236]	; (80105f8 <tcp_enqueue_flags+0x1d0>)
 801050c:	4837      	ldr	r0, [pc, #220]	; (80105ec <tcp_enqueue_flags+0x1c4>)
 801050e:	f004 f8b3 	bl	8014678 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	891b      	ldrh	r3, [r3, #8]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d006      	beq.n	8010528 <tcp_enqueue_flags+0x100>
 801051a:	4b32      	ldr	r3, [pc, #200]	; (80105e4 <tcp_enqueue_flags+0x1bc>)
 801051c:	f240 4243 	movw	r2, #1091	; 0x443
 8010520:	4936      	ldr	r1, [pc, #216]	; (80105fc <tcp_enqueue_flags+0x1d4>)
 8010522:	4832      	ldr	r0, [pc, #200]	; (80105ec <tcp_enqueue_flags+0x1c4>)
 8010524:	f004 f8a8 	bl	8014678 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801052c:	2b00      	cmp	r3, #0
 801052e:	d103      	bne.n	8010538 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	68fa      	ldr	r2, [r7, #12]
 8010534:	66da      	str	r2, [r3, #108]	; 0x6c
 8010536:	e00d      	b.n	8010554 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801053c:	61bb      	str	r3, [r7, #24]
 801053e:	e002      	b.n	8010546 <tcp_enqueue_flags+0x11e>
 8010540:	69bb      	ldr	r3, [r7, #24]
 8010542:	681b      	ldr	r3, [r3, #0]
 8010544:	61bb      	str	r3, [r7, #24]
 8010546:	69bb      	ldr	r3, [r7, #24]
 8010548:	681b      	ldr	r3, [r3, #0]
 801054a:	2b00      	cmp	r3, #0
 801054c:	d1f8      	bne.n	8010540 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801054e:	69bb      	ldr	r3, [r7, #24]
 8010550:	68fa      	ldr	r2, [r7, #12]
 8010552:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2200      	movs	r2, #0
 8010558:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801055c:	78fb      	ldrb	r3, [r7, #3]
 801055e:	f003 0302 	and.w	r3, r3, #2
 8010562:	2b00      	cmp	r3, #0
 8010564:	d104      	bne.n	8010570 <tcp_enqueue_flags+0x148>
 8010566:	78fb      	ldrb	r3, [r7, #3]
 8010568:	f003 0301 	and.w	r3, r3, #1
 801056c:	2b00      	cmp	r3, #0
 801056e:	d004      	beq.n	801057a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010574:	1c5a      	adds	r2, r3, #1
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801057a:	78fb      	ldrb	r3, [r7, #3]
 801057c:	f003 0301 	and.w	r3, r3, #1
 8010580:	2b00      	cmp	r3, #0
 8010582:	d006      	beq.n	8010592 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	8b5b      	ldrh	r3, [r3, #26]
 8010588:	f043 0320 	orr.w	r3, r3, #32
 801058c:	b29a      	uxth	r2, r3
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	685b      	ldr	r3, [r3, #4]
 8010596:	4618      	mov	r0, r3
 8010598:	f7fb fc42 	bl	800be20 <pbuf_clen>
 801059c:	4603      	mov	r3, r0
 801059e:	461a      	mov	r2, r3
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105a6:	4413      	add	r3, r2
 80105a8:	b29a      	uxth	r2, r3
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d00e      	beq.n	80105d8 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d10a      	bne.n	80105d8 <tcp_enqueue_flags+0x1b0>
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105c6:	2b00      	cmp	r3, #0
 80105c8:	d106      	bne.n	80105d8 <tcp_enqueue_flags+0x1b0>
 80105ca:	4b06      	ldr	r3, [pc, #24]	; (80105e4 <tcp_enqueue_flags+0x1bc>)
 80105cc:	f240 4265 	movw	r2, #1125	; 0x465
 80105d0:	490b      	ldr	r1, [pc, #44]	; (8010600 <tcp_enqueue_flags+0x1d8>)
 80105d2:	4806      	ldr	r0, [pc, #24]	; (80105ec <tcp_enqueue_flags+0x1c4>)
 80105d4:	f004 f850 	bl	8014678 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80105d8:	2300      	movs	r3, #0
}
 80105da:	4618      	mov	r0, r3
 80105dc:	3720      	adds	r7, #32
 80105de:	46bd      	mov	sp, r7
 80105e0:	bd80      	pop	{r7, pc}
 80105e2:	bf00      	nop
 80105e4:	08016ccc 	.word	0x08016ccc
 80105e8:	080170f0 	.word	0x080170f0
 80105ec:	08016d20 	.word	0x08016d20
 80105f0:	08017148 	.word	0x08017148
 80105f4:	08017168 	.word	0x08017168
 80105f8:	080171a4 	.word	0x080171a4
 80105fc:	080171bc 	.word	0x080171bc
 8010600:	080171e8 	.word	0x080171e8

08010604 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8010604:	b5b0      	push	{r4, r5, r7, lr}
 8010606:	b08a      	sub	sp, #40	; 0x28
 8010608:	af00      	add	r7, sp, #0
 801060a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	2b00      	cmp	r3, #0
 8010610:	d106      	bne.n	8010620 <tcp_output+0x1c>
 8010612:	4b8a      	ldr	r3, [pc, #552]	; (801083c <tcp_output+0x238>)
 8010614:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010618:	4989      	ldr	r1, [pc, #548]	; (8010840 <tcp_output+0x23c>)
 801061a:	488a      	ldr	r0, [pc, #552]	; (8010844 <tcp_output+0x240>)
 801061c:	f004 f82c 	bl	8014678 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	7d1b      	ldrb	r3, [r3, #20]
 8010624:	2b01      	cmp	r3, #1
 8010626:	d106      	bne.n	8010636 <tcp_output+0x32>
 8010628:	4b84      	ldr	r3, [pc, #528]	; (801083c <tcp_output+0x238>)
 801062a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801062e:	4986      	ldr	r1, [pc, #536]	; (8010848 <tcp_output+0x244>)
 8010630:	4884      	ldr	r0, [pc, #528]	; (8010844 <tcp_output+0x240>)
 8010632:	f004 f821 	bl	8014678 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8010636:	4b85      	ldr	r3, [pc, #532]	; (801084c <tcp_output+0x248>)
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	687a      	ldr	r2, [r7, #4]
 801063c:	429a      	cmp	r2, r3
 801063e:	d101      	bne.n	8010644 <tcp_output+0x40>
    return ERR_OK;
 8010640:	2300      	movs	r3, #0
 8010642:	e1ce      	b.n	80109e2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010650:	4293      	cmp	r3, r2
 8010652:	bf28      	it	cs
 8010654:	4613      	movcs	r3, r2
 8010656:	b29b      	uxth	r3, r3
 8010658:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801065a:	687b      	ldr	r3, [r7, #4]
 801065c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801065e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8010660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010662:	2b00      	cmp	r3, #0
 8010664:	d10b      	bne.n	801067e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8010666:	687b      	ldr	r3, [r7, #4]
 8010668:	8b5b      	ldrh	r3, [r3, #26]
 801066a:	f003 0302 	and.w	r3, r3, #2
 801066e:	2b00      	cmp	r3, #0
 8010670:	f000 81aa 	beq.w	80109c8 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8010674:	6878      	ldr	r0, [r7, #4]
 8010676:	f000 fdcb 	bl	8011210 <tcp_send_empty_ack>
 801067a:	4603      	mov	r3, r0
 801067c:	e1b1      	b.n	80109e2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801067e:	6879      	ldr	r1, [r7, #4]
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	3304      	adds	r3, #4
 8010684:	461a      	mov	r2, r3
 8010686:	6878      	ldr	r0, [r7, #4]
 8010688:	f7ff fc7c 	bl	800ff84 <tcp_route>
 801068c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801068e:	697b      	ldr	r3, [r7, #20]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d102      	bne.n	801069a <tcp_output+0x96>
    return ERR_RTE;
 8010694:	f06f 0303 	mvn.w	r3, #3
 8010698:	e1a3      	b.n	80109e2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	2b00      	cmp	r3, #0
 801069e:	d003      	beq.n	80106a8 <tcp_output+0xa4>
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	681b      	ldr	r3, [r3, #0]
 80106a4:	2b00      	cmp	r3, #0
 80106a6:	d111      	bne.n	80106cc <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 80106a8:	697b      	ldr	r3, [r7, #20]
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d002      	beq.n	80106b4 <tcp_output+0xb0>
 80106ae:	697b      	ldr	r3, [r7, #20]
 80106b0:	3304      	adds	r3, #4
 80106b2:	e000      	b.n	80106b6 <tcp_output+0xb2>
 80106b4:	2300      	movs	r3, #0
 80106b6:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80106b8:	693b      	ldr	r3, [r7, #16]
 80106ba:	2b00      	cmp	r3, #0
 80106bc:	d102      	bne.n	80106c4 <tcp_output+0xc0>
      return ERR_RTE;
 80106be:	f06f 0303 	mvn.w	r3, #3
 80106c2:	e18e      	b.n	80109e2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	681a      	ldr	r2, [r3, #0]
 80106c8:	687b      	ldr	r3, [r7, #4]
 80106ca:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80106cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ce:	68db      	ldr	r3, [r3, #12]
 80106d0:	685b      	ldr	r3, [r3, #4]
 80106d2:	4618      	mov	r0, r3
 80106d4:	f7f9 ff39 	bl	800a54a <lwip_htonl>
 80106d8:	4602      	mov	r2, r0
 80106da:	687b      	ldr	r3, [r7, #4]
 80106dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80106de:	1ad3      	subs	r3, r2, r3
 80106e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80106e2:	8912      	ldrh	r2, [r2, #8]
 80106e4:	4413      	add	r3, r2
 80106e6:	69ba      	ldr	r2, [r7, #24]
 80106e8:	429a      	cmp	r2, r3
 80106ea:	d227      	bcs.n	801073c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80106f2:	461a      	mov	r2, r3
 80106f4:	69bb      	ldr	r3, [r7, #24]
 80106f6:	4293      	cmp	r3, r2
 80106f8:	d114      	bne.n	8010724 <tcp_output+0x120>
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80106fe:	2b00      	cmp	r3, #0
 8010700:	d110      	bne.n	8010724 <tcp_output+0x120>
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010708:	2b00      	cmp	r3, #0
 801070a:	d10b      	bne.n	8010724 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	2200      	movs	r2, #0
 8010710:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8010714:	687b      	ldr	r3, [r7, #4]
 8010716:	2201      	movs	r2, #1
 8010718:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801071c:	687b      	ldr	r3, [r7, #4]
 801071e:	2200      	movs	r2, #0
 8010720:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	8b5b      	ldrh	r3, [r3, #26]
 8010728:	f003 0302 	and.w	r3, r3, #2
 801072c:	2b00      	cmp	r3, #0
 801072e:	f000 814d 	beq.w	80109cc <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f000 fd6c 	bl	8011210 <tcp_send_empty_ack>
 8010738:	4603      	mov	r3, r0
 801073a:	e152      	b.n	80109e2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801073c:	687b      	ldr	r3, [r7, #4]
 801073e:	2200      	movs	r2, #0
 8010740:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8010744:	687b      	ldr	r3, [r7, #4]
 8010746:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010748:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801074a:	6a3b      	ldr	r3, [r7, #32]
 801074c:	2b00      	cmp	r3, #0
 801074e:	f000 811c 	beq.w	801098a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8010752:	e002      	b.n	801075a <tcp_output+0x156>
 8010754:	6a3b      	ldr	r3, [r7, #32]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	623b      	str	r3, [r7, #32]
 801075a:	6a3b      	ldr	r3, [r7, #32]
 801075c:	681b      	ldr	r3, [r3, #0]
 801075e:	2b00      	cmp	r3, #0
 8010760:	d1f8      	bne.n	8010754 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8010762:	e112      	b.n	801098a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8010764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010766:	68db      	ldr	r3, [r3, #12]
 8010768:	899b      	ldrh	r3, [r3, #12]
 801076a:	b29b      	uxth	r3, r3
 801076c:	4618      	mov	r0, r3
 801076e:	f7f9 fed7 	bl	800a520 <lwip_htons>
 8010772:	4603      	mov	r3, r0
 8010774:	b2db      	uxtb	r3, r3
 8010776:	f003 0304 	and.w	r3, r3, #4
 801077a:	2b00      	cmp	r3, #0
 801077c:	d006      	beq.n	801078c <tcp_output+0x188>
 801077e:	4b2f      	ldr	r3, [pc, #188]	; (801083c <tcp_output+0x238>)
 8010780:	f240 5236 	movw	r2, #1334	; 0x536
 8010784:	4932      	ldr	r1, [pc, #200]	; (8010850 <tcp_output+0x24c>)
 8010786:	482f      	ldr	r0, [pc, #188]	; (8010844 <tcp_output+0x240>)
 8010788:	f003 ff76 	bl	8014678 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010790:	2b00      	cmp	r3, #0
 8010792:	d01f      	beq.n	80107d4 <tcp_output+0x1d0>
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	8b5b      	ldrh	r3, [r3, #26]
 8010798:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801079c:	2b00      	cmp	r3, #0
 801079e:	d119      	bne.n	80107d4 <tcp_output+0x1d0>
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	d00b      	beq.n	80107c0 <tcp_output+0x1bc>
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107ac:	681b      	ldr	r3, [r3, #0]
 80107ae:	2b00      	cmp	r3, #0
 80107b0:	d110      	bne.n	80107d4 <tcp_output+0x1d0>
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107b6:	891a      	ldrh	r2, [r3, #8]
 80107b8:	687b      	ldr	r3, [r7, #4]
 80107ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80107bc:	429a      	cmp	r2, r3
 80107be:	d209      	bcs.n	80107d4 <tcp_output+0x1d0>
 80107c0:	687b      	ldr	r3, [r7, #4]
 80107c2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80107c6:	2b00      	cmp	r3, #0
 80107c8:	d004      	beq.n	80107d4 <tcp_output+0x1d0>
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80107d0:	2b08      	cmp	r3, #8
 80107d2:	d901      	bls.n	80107d8 <tcp_output+0x1d4>
 80107d4:	2301      	movs	r3, #1
 80107d6:	e000      	b.n	80107da <tcp_output+0x1d6>
 80107d8:	2300      	movs	r3, #0
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d106      	bne.n	80107ec <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	8b5b      	ldrh	r3, [r3, #26]
 80107e2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	f000 80e4 	beq.w	80109b4 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	7d1b      	ldrb	r3, [r3, #20]
 80107f0:	2b02      	cmp	r3, #2
 80107f2:	d00d      	beq.n	8010810 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80107f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107f6:	68db      	ldr	r3, [r3, #12]
 80107f8:	899b      	ldrh	r3, [r3, #12]
 80107fa:	b29c      	uxth	r4, r3
 80107fc:	2010      	movs	r0, #16
 80107fe:	f7f9 fe8f 	bl	800a520 <lwip_htons>
 8010802:	4603      	mov	r3, r0
 8010804:	461a      	mov	r2, r3
 8010806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010808:	68db      	ldr	r3, [r3, #12]
 801080a:	4322      	orrs	r2, r4
 801080c:	b292      	uxth	r2, r2
 801080e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010810:	697a      	ldr	r2, [r7, #20]
 8010812:	6879      	ldr	r1, [r7, #4]
 8010814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010816:	f000 f909 	bl	8010a2c <tcp_output_segment>
 801081a:	4603      	mov	r3, r0
 801081c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801081e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d016      	beq.n	8010854 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	8b5b      	ldrh	r3, [r3, #26]
 801082a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801082e:	b29a      	uxth	r2, r3
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	835a      	strh	r2, [r3, #26]
      return err;
 8010834:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010838:	e0d3      	b.n	80109e2 <tcp_output+0x3de>
 801083a:	bf00      	nop
 801083c:	08016ccc 	.word	0x08016ccc
 8010840:	08017210 	.word	0x08017210
 8010844:	08016d20 	.word	0x08016d20
 8010848:	08017228 	.word	0x08017228
 801084c:	2000f234 	.word	0x2000f234
 8010850:	08017250 	.word	0x08017250
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8010854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010856:	681a      	ldr	r2, [r3, #0]
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	7d1b      	ldrb	r3, [r3, #20]
 8010860:	2b02      	cmp	r3, #2
 8010862:	d006      	beq.n	8010872 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	8b5b      	ldrh	r3, [r3, #26]
 8010868:	f023 0303 	bic.w	r3, r3, #3
 801086c:	b29a      	uxth	r2, r3
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010874:	68db      	ldr	r3, [r3, #12]
 8010876:	685b      	ldr	r3, [r3, #4]
 8010878:	4618      	mov	r0, r3
 801087a:	f7f9 fe66 	bl	800a54a <lwip_htonl>
 801087e:	4604      	mov	r4, r0
 8010880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010882:	891b      	ldrh	r3, [r3, #8]
 8010884:	461d      	mov	r5, r3
 8010886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010888:	68db      	ldr	r3, [r3, #12]
 801088a:	899b      	ldrh	r3, [r3, #12]
 801088c:	b29b      	uxth	r3, r3
 801088e:	4618      	mov	r0, r3
 8010890:	f7f9 fe46 	bl	800a520 <lwip_htons>
 8010894:	4603      	mov	r3, r0
 8010896:	b2db      	uxtb	r3, r3
 8010898:	f003 0303 	and.w	r3, r3, #3
 801089c:	2b00      	cmp	r3, #0
 801089e:	d001      	beq.n	80108a4 <tcp_output+0x2a0>
 80108a0:	2301      	movs	r3, #1
 80108a2:	e000      	b.n	80108a6 <tcp_output+0x2a2>
 80108a4:	2300      	movs	r3, #0
 80108a6:	442b      	add	r3, r5
 80108a8:	4423      	add	r3, r4
 80108aa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80108b0:	68bb      	ldr	r3, [r7, #8]
 80108b2:	1ad3      	subs	r3, r2, r3
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	da02      	bge.n	80108be <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	68ba      	ldr	r2, [r7, #8]
 80108bc:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80108be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c0:	891b      	ldrh	r3, [r3, #8]
 80108c2:	461c      	mov	r4, r3
 80108c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108c6:	68db      	ldr	r3, [r3, #12]
 80108c8:	899b      	ldrh	r3, [r3, #12]
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7f9 fe27 	bl	800a520 <lwip_htons>
 80108d2:	4603      	mov	r3, r0
 80108d4:	b2db      	uxtb	r3, r3
 80108d6:	f003 0303 	and.w	r3, r3, #3
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d001      	beq.n	80108e2 <tcp_output+0x2de>
 80108de:	2301      	movs	r3, #1
 80108e0:	e000      	b.n	80108e4 <tcp_output+0x2e0>
 80108e2:	2300      	movs	r3, #0
 80108e4:	4423      	add	r3, r4
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	d049      	beq.n	801097e <tcp_output+0x37a>
      seg->next = NULL;
 80108ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80108ec:	2200      	movs	r2, #0
 80108ee:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108f4:	2b00      	cmp	r3, #0
 80108f6:	d105      	bne.n	8010904 <tcp_output+0x300>
        pcb->unacked = seg;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80108fc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80108fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010900:	623b      	str	r3, [r7, #32]
 8010902:	e03f      	b.n	8010984 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8010904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010906:	68db      	ldr	r3, [r3, #12]
 8010908:	685b      	ldr	r3, [r3, #4]
 801090a:	4618      	mov	r0, r3
 801090c:	f7f9 fe1d 	bl	800a54a <lwip_htonl>
 8010910:	4604      	mov	r4, r0
 8010912:	6a3b      	ldr	r3, [r7, #32]
 8010914:	68db      	ldr	r3, [r3, #12]
 8010916:	685b      	ldr	r3, [r3, #4]
 8010918:	4618      	mov	r0, r3
 801091a:	f7f9 fe16 	bl	800a54a <lwip_htonl>
 801091e:	4603      	mov	r3, r0
 8010920:	1ae3      	subs	r3, r4, r3
 8010922:	2b00      	cmp	r3, #0
 8010924:	da24      	bge.n	8010970 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	3370      	adds	r3, #112	; 0x70
 801092a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801092c:	e002      	b.n	8010934 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801092e:	69fb      	ldr	r3, [r7, #28]
 8010930:	681b      	ldr	r3, [r3, #0]
 8010932:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010934:	69fb      	ldr	r3, [r7, #28]
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	2b00      	cmp	r3, #0
 801093a:	d011      	beq.n	8010960 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801093c:	69fb      	ldr	r3, [r7, #28]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	68db      	ldr	r3, [r3, #12]
 8010942:	685b      	ldr	r3, [r3, #4]
 8010944:	4618      	mov	r0, r3
 8010946:	f7f9 fe00 	bl	800a54a <lwip_htonl>
 801094a:	4604      	mov	r4, r0
 801094c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801094e:	68db      	ldr	r3, [r3, #12]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	4618      	mov	r0, r3
 8010954:	f7f9 fdf9 	bl	800a54a <lwip_htonl>
 8010958:	4603      	mov	r3, r0
 801095a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801095c:	2b00      	cmp	r3, #0
 801095e:	dbe6      	blt.n	801092e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8010960:	69fb      	ldr	r3, [r7, #28]
 8010962:	681a      	ldr	r2, [r3, #0]
 8010964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010966:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8010968:	69fb      	ldr	r3, [r7, #28]
 801096a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801096c:	601a      	str	r2, [r3, #0]
 801096e:	e009      	b.n	8010984 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8010970:	6a3b      	ldr	r3, [r7, #32]
 8010972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010974:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8010976:	6a3b      	ldr	r3, [r7, #32]
 8010978:	681b      	ldr	r3, [r3, #0]
 801097a:	623b      	str	r3, [r7, #32]
 801097c:	e002      	b.n	8010984 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801097e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010980:	f7fc fc3f 	bl	800d202 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010988:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801098a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801098c:	2b00      	cmp	r3, #0
 801098e:	d012      	beq.n	80109b6 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8010990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010992:	68db      	ldr	r3, [r3, #12]
 8010994:	685b      	ldr	r3, [r3, #4]
 8010996:	4618      	mov	r0, r3
 8010998:	f7f9 fdd7 	bl	800a54a <lwip_htonl>
 801099c:	4602      	mov	r2, r0
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80109a2:	1ad3      	subs	r3, r2, r3
 80109a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80109a6:	8912      	ldrh	r2, [r2, #8]
 80109a8:	4413      	add	r3, r2
  while (seg != NULL &&
 80109aa:	69ba      	ldr	r2, [r7, #24]
 80109ac:	429a      	cmp	r2, r3
 80109ae:	f4bf aed9 	bcs.w	8010764 <tcp_output+0x160>
 80109b2:	e000      	b.n	80109b6 <tcp_output+0x3b2>
      break;
 80109b4:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80109b6:	687b      	ldr	r3, [r7, #4]
 80109b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d108      	bne.n	80109d0 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	2200      	movs	r2, #0
 80109c2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80109c6:	e004      	b.n	80109d2 <tcp_output+0x3ce>
    goto output_done;
 80109c8:	bf00      	nop
 80109ca:	e002      	b.n	80109d2 <tcp_output+0x3ce>
    goto output_done;
 80109cc:	bf00      	nop
 80109ce:	e000      	b.n	80109d2 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80109d0:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	8b5b      	ldrh	r3, [r3, #26]
 80109d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80109da:	b29a      	uxth	r2, r3
 80109dc:	687b      	ldr	r3, [r7, #4]
 80109de:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80109e0:	2300      	movs	r3, #0
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	3728      	adds	r7, #40	; 0x28
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bdb0      	pop	{r4, r5, r7, pc}
 80109ea:	bf00      	nop

080109ec <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80109ec:	b580      	push	{r7, lr}
 80109ee:	b082      	sub	sp, #8
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d106      	bne.n	8010a08 <tcp_output_segment_busy+0x1c>
 80109fa:	4b09      	ldr	r3, [pc, #36]	; (8010a20 <tcp_output_segment_busy+0x34>)
 80109fc:	f240 529a 	movw	r2, #1434	; 0x59a
 8010a00:	4908      	ldr	r1, [pc, #32]	; (8010a24 <tcp_output_segment_busy+0x38>)
 8010a02:	4809      	ldr	r0, [pc, #36]	; (8010a28 <tcp_output_segment_busy+0x3c>)
 8010a04:	f003 fe38 	bl	8014678 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	685b      	ldr	r3, [r3, #4]
 8010a0c:	7b9b      	ldrb	r3, [r3, #14]
 8010a0e:	2b01      	cmp	r3, #1
 8010a10:	d001      	beq.n	8010a16 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8010a12:	2301      	movs	r3, #1
 8010a14:	e000      	b.n	8010a18 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8010a16:	2300      	movs	r3, #0
}
 8010a18:	4618      	mov	r0, r3
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	08016ccc 	.word	0x08016ccc
 8010a24:	08017268 	.word	0x08017268
 8010a28:	08016d20 	.word	0x08016d20

08010a2c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010a2c:	b5b0      	push	{r4, r5, r7, lr}
 8010a2e:	b08c      	sub	sp, #48	; 0x30
 8010a30:	af04      	add	r7, sp, #16
 8010a32:	60f8      	str	r0, [r7, #12]
 8010a34:	60b9      	str	r1, [r7, #8]
 8010a36:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010a38:	68fb      	ldr	r3, [r7, #12]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d106      	bne.n	8010a4c <tcp_output_segment+0x20>
 8010a3e:	4b63      	ldr	r3, [pc, #396]	; (8010bcc <tcp_output_segment+0x1a0>)
 8010a40:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8010a44:	4962      	ldr	r1, [pc, #392]	; (8010bd0 <tcp_output_segment+0x1a4>)
 8010a46:	4863      	ldr	r0, [pc, #396]	; (8010bd4 <tcp_output_segment+0x1a8>)
 8010a48:	f003 fe16 	bl	8014678 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d106      	bne.n	8010a60 <tcp_output_segment+0x34>
 8010a52:	4b5e      	ldr	r3, [pc, #376]	; (8010bcc <tcp_output_segment+0x1a0>)
 8010a54:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010a58:	495f      	ldr	r1, [pc, #380]	; (8010bd8 <tcp_output_segment+0x1ac>)
 8010a5a:	485e      	ldr	r0, [pc, #376]	; (8010bd4 <tcp_output_segment+0x1a8>)
 8010a5c:	f003 fe0c 	bl	8014678 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8010a60:	687b      	ldr	r3, [r7, #4]
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	d106      	bne.n	8010a74 <tcp_output_segment+0x48>
 8010a66:	4b59      	ldr	r3, [pc, #356]	; (8010bcc <tcp_output_segment+0x1a0>)
 8010a68:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8010a6c:	495b      	ldr	r1, [pc, #364]	; (8010bdc <tcp_output_segment+0x1b0>)
 8010a6e:	4859      	ldr	r0, [pc, #356]	; (8010bd4 <tcp_output_segment+0x1a8>)
 8010a70:	f003 fe02 	bl	8014678 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8010a74:	68f8      	ldr	r0, [r7, #12]
 8010a76:	f7ff ffb9 	bl	80109ec <tcp_output_segment_busy>
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	2b00      	cmp	r3, #0
 8010a7e:	d001      	beq.n	8010a84 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8010a80:	2300      	movs	r3, #0
 8010a82:	e09f      	b.n	8010bc4 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010a84:	68bb      	ldr	r3, [r7, #8]
 8010a86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	68dc      	ldr	r4, [r3, #12]
 8010a8c:	4610      	mov	r0, r2
 8010a8e:	f7f9 fd5c 	bl	800a54a <lwip_htonl>
 8010a92:	4603      	mov	r3, r0
 8010a94:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010a96:	68bb      	ldr	r3, [r7, #8]
 8010a98:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8010a9a:	68fb      	ldr	r3, [r7, #12]
 8010a9c:	68dc      	ldr	r4, [r3, #12]
 8010a9e:	4610      	mov	r0, r2
 8010aa0:	f7f9 fd3e 	bl	800a520 <lwip_htons>
 8010aa4:	4603      	mov	r3, r0
 8010aa6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010aa8:	68bb      	ldr	r3, [r7, #8]
 8010aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010aac:	68ba      	ldr	r2, [r7, #8]
 8010aae:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010ab0:	441a      	add	r2, r3
 8010ab2:	68bb      	ldr	r3, [r7, #8]
 8010ab4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8010ab6:	68fb      	ldr	r3, [r7, #12]
 8010ab8:	68db      	ldr	r3, [r3, #12]
 8010aba:	3314      	adds	r3, #20
 8010abc:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010abe:	68fb      	ldr	r3, [r7, #12]
 8010ac0:	7a9b      	ldrb	r3, [r3, #10]
 8010ac2:	f003 0301 	and.w	r3, r3, #1
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d015      	beq.n	8010af6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010aca:	68bb      	ldr	r3, [r7, #8]
 8010acc:	3304      	adds	r3, #4
 8010ace:	461a      	mov	r2, r3
 8010ad0:	6879      	ldr	r1, [r7, #4]
 8010ad2:	f44f 7006 	mov.w	r0, #536	; 0x218
 8010ad6:	f7fc fe8b 	bl	800d7f0 <tcp_eff_send_mss_netif>
 8010ada:	4603      	mov	r3, r0
 8010adc:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010ade:	8b7b      	ldrh	r3, [r7, #26]
 8010ae0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7f9 fd30 	bl	800a54a <lwip_htonl>
 8010aea:	4602      	mov	r2, r0
 8010aec:	69fb      	ldr	r3, [r7, #28]
 8010aee:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010af0:	69fb      	ldr	r3, [r7, #28]
 8010af2:	3304      	adds	r3, #4
 8010af4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8010af6:	68bb      	ldr	r3, [r7, #8]
 8010af8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	da02      	bge.n	8010b06 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010b00:	68bb      	ldr	r3, [r7, #8]
 8010b02:	2200      	movs	r2, #0
 8010b04:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8010b06:	68bb      	ldr	r3, [r7, #8]
 8010b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d10c      	bne.n	8010b28 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010b0e:	4b34      	ldr	r3, [pc, #208]	; (8010be0 <tcp_output_segment+0x1b4>)
 8010b10:	681a      	ldr	r2, [r3, #0]
 8010b12:	68bb      	ldr	r3, [r7, #8]
 8010b14:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8010b16:	68fb      	ldr	r3, [r7, #12]
 8010b18:	68db      	ldr	r3, [r3, #12]
 8010b1a:	685b      	ldr	r3, [r3, #4]
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7f9 fd14 	bl	800a54a <lwip_htonl>
 8010b22:	4602      	mov	r2, r0
 8010b24:	68bb      	ldr	r3, [r7, #8]
 8010b26:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010b28:	68fb      	ldr	r3, [r7, #12]
 8010b2a:	68da      	ldr	r2, [r3, #12]
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	685b      	ldr	r3, [r3, #4]
 8010b30:	685b      	ldr	r3, [r3, #4]
 8010b32:	1ad3      	subs	r3, r2, r3
 8010b34:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	685b      	ldr	r3, [r3, #4]
 8010b3a:	8959      	ldrh	r1, [r3, #10]
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	685b      	ldr	r3, [r3, #4]
 8010b40:	8b3a      	ldrh	r2, [r7, #24]
 8010b42:	1a8a      	subs	r2, r1, r2
 8010b44:	b292      	uxth	r2, r2
 8010b46:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8010b48:	68fb      	ldr	r3, [r7, #12]
 8010b4a:	685b      	ldr	r3, [r3, #4]
 8010b4c:	8919      	ldrh	r1, [r3, #8]
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	685b      	ldr	r3, [r3, #4]
 8010b52:	8b3a      	ldrh	r2, [r7, #24]
 8010b54:	1a8a      	subs	r2, r1, r2
 8010b56:	b292      	uxth	r2, r2
 8010b58:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8010b5a:	68fb      	ldr	r3, [r7, #12]
 8010b5c:	685b      	ldr	r3, [r3, #4]
 8010b5e:	68fa      	ldr	r2, [r7, #12]
 8010b60:	68d2      	ldr	r2, [r2, #12]
 8010b62:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8010b64:	68fb      	ldr	r3, [r7, #12]
 8010b66:	68db      	ldr	r3, [r3, #12]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	741a      	strb	r2, [r3, #16]
 8010b6c:	2200      	movs	r2, #0
 8010b6e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	68db      	ldr	r3, [r3, #12]
 8010b74:	f103 0214 	add.w	r2, r3, #20
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	7a9b      	ldrb	r3, [r3, #10]
 8010b7c:	009b      	lsls	r3, r3, #2
 8010b7e:	f003 0304 	and.w	r3, r3, #4
 8010b82:	4413      	add	r3, r2
 8010b84:	69fa      	ldr	r2, [r7, #28]
 8010b86:	429a      	cmp	r2, r3
 8010b88:	d006      	beq.n	8010b98 <tcp_output_segment+0x16c>
 8010b8a:	4b10      	ldr	r3, [pc, #64]	; (8010bcc <tcp_output_segment+0x1a0>)
 8010b8c:	f240 621c 	movw	r2, #1564	; 0x61c
 8010b90:	4914      	ldr	r1, [pc, #80]	; (8010be4 <tcp_output_segment+0x1b8>)
 8010b92:	4810      	ldr	r0, [pc, #64]	; (8010bd4 <tcp_output_segment+0x1a8>)
 8010b94:	f003 fd70 	bl	8014678 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8010b98:	68fb      	ldr	r3, [r7, #12]
 8010b9a:	6858      	ldr	r0, [r3, #4]
 8010b9c:	68b9      	ldr	r1, [r7, #8]
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	1d1c      	adds	r4, r3, #4
 8010ba2:	68bb      	ldr	r3, [r7, #8]
 8010ba4:	7add      	ldrb	r5, [r3, #11]
 8010ba6:	68bb      	ldr	r3, [r7, #8]
 8010ba8:	7a9b      	ldrb	r3, [r3, #10]
 8010baa:	687a      	ldr	r2, [r7, #4]
 8010bac:	9202      	str	r2, [sp, #8]
 8010bae:	2206      	movs	r2, #6
 8010bb0:	9201      	str	r2, [sp, #4]
 8010bb2:	9300      	str	r3, [sp, #0]
 8010bb4:	462b      	mov	r3, r5
 8010bb6:	4622      	mov	r2, r4
 8010bb8:	f002 fa66 	bl	8013088 <ip4_output_if>
 8010bbc:	4603      	mov	r3, r0
 8010bbe:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010bc0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010bc4:	4618      	mov	r0, r3
 8010bc6:	3720      	adds	r7, #32
 8010bc8:	46bd      	mov	sp, r7
 8010bca:	bdb0      	pop	{r4, r5, r7, pc}
 8010bcc:	08016ccc 	.word	0x08016ccc
 8010bd0:	08017290 	.word	0x08017290
 8010bd4:	08016d20 	.word	0x08016d20
 8010bd8:	080172b0 	.word	0x080172b0
 8010bdc:	080172d0 	.word	0x080172d0
 8010be0:	2000f1e8 	.word	0x2000f1e8
 8010be4:	080172f4 	.word	0x080172f4

08010be8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010be8:	b5b0      	push	{r4, r5, r7, lr}
 8010bea:	b084      	sub	sp, #16
 8010bec:	af00      	add	r7, sp, #0
 8010bee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d106      	bne.n	8010c04 <tcp_rexmit_rto_prepare+0x1c>
 8010bf6:	4b31      	ldr	r3, [pc, #196]	; (8010cbc <tcp_rexmit_rto_prepare+0xd4>)
 8010bf8:	f240 6263 	movw	r2, #1635	; 0x663
 8010bfc:	4930      	ldr	r1, [pc, #192]	; (8010cc0 <tcp_rexmit_rto_prepare+0xd8>)
 8010bfe:	4831      	ldr	r0, [pc, #196]	; (8010cc4 <tcp_rexmit_rto_prepare+0xdc>)
 8010c00:	f003 fd3a 	bl	8014678 <iprintf>

  if (pcb->unacked == NULL) {
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d102      	bne.n	8010c12 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010c0c:	f06f 0305 	mvn.w	r3, #5
 8010c10:	e050      	b.n	8010cb4 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010c16:	60fb      	str	r3, [r7, #12]
 8010c18:	e00b      	b.n	8010c32 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010c1a:	68f8      	ldr	r0, [r7, #12]
 8010c1c:	f7ff fee6 	bl	80109ec <tcp_output_segment_busy>
 8010c20:	4603      	mov	r3, r0
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d002      	beq.n	8010c2c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010c26:	f06f 0305 	mvn.w	r3, #5
 8010c2a:	e043      	b.n	8010cb4 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010c2c:	68fb      	ldr	r3, [r7, #12]
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	60fb      	str	r3, [r7, #12]
 8010c32:	68fb      	ldr	r3, [r7, #12]
 8010c34:	681b      	ldr	r3, [r3, #0]
 8010c36:	2b00      	cmp	r3, #0
 8010c38:	d1ef      	bne.n	8010c1a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010c3a:	68f8      	ldr	r0, [r7, #12]
 8010c3c:	f7ff fed6 	bl	80109ec <tcp_output_segment_busy>
 8010c40:	4603      	mov	r3, r0
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d002      	beq.n	8010c4c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010c46:	f06f 0305 	mvn.w	r3, #5
 8010c4a:	e033      	b.n	8010cb4 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	2200      	movs	r2, #0
 8010c60:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	8b5b      	ldrh	r3, [r3, #26]
 8010c66:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010c6a:	b29a      	uxth	r2, r3
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	68db      	ldr	r3, [r3, #12]
 8010c74:	685b      	ldr	r3, [r3, #4]
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7f9 fc67 	bl	800a54a <lwip_htonl>
 8010c7c:	4604      	mov	r4, r0
 8010c7e:	68fb      	ldr	r3, [r7, #12]
 8010c80:	891b      	ldrh	r3, [r3, #8]
 8010c82:	461d      	mov	r5, r3
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	68db      	ldr	r3, [r3, #12]
 8010c88:	899b      	ldrh	r3, [r3, #12]
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f7f9 fc47 	bl	800a520 <lwip_htons>
 8010c92:	4603      	mov	r3, r0
 8010c94:	b2db      	uxtb	r3, r3
 8010c96:	f003 0303 	and.w	r3, r3, #3
 8010c9a:	2b00      	cmp	r3, #0
 8010c9c:	d001      	beq.n	8010ca2 <tcp_rexmit_rto_prepare+0xba>
 8010c9e:	2301      	movs	r3, #1
 8010ca0:	e000      	b.n	8010ca4 <tcp_rexmit_rto_prepare+0xbc>
 8010ca2:	2300      	movs	r3, #0
 8010ca4:	442b      	add	r3, r5
 8010ca6:	18e2      	adds	r2, r4, r3
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	2200      	movs	r2, #0
 8010cb0:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010cb2:	2300      	movs	r3, #0
}
 8010cb4:	4618      	mov	r0, r3
 8010cb6:	3710      	adds	r7, #16
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bdb0      	pop	{r4, r5, r7, pc}
 8010cbc:	08016ccc 	.word	0x08016ccc
 8010cc0:	08017308 	.word	0x08017308
 8010cc4:	08016d20 	.word	0x08016d20

08010cc8 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d106      	bne.n	8010ce4 <tcp_rexmit_rto_commit+0x1c>
 8010cd6:	4b0d      	ldr	r3, [pc, #52]	; (8010d0c <tcp_rexmit_rto_commit+0x44>)
 8010cd8:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010cdc:	490c      	ldr	r1, [pc, #48]	; (8010d10 <tcp_rexmit_rto_commit+0x48>)
 8010cde:	480d      	ldr	r0, [pc, #52]	; (8010d14 <tcp_rexmit_rto_commit+0x4c>)
 8010ce0:	f003 fcca 	bl	8014678 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010cea:	2bff      	cmp	r3, #255	; 0xff
 8010cec:	d007      	beq.n	8010cfe <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010cee:	687b      	ldr	r3, [r7, #4]
 8010cf0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010cf4:	3301      	adds	r3, #1
 8010cf6:	b2da      	uxtb	r2, r3
 8010cf8:	687b      	ldr	r3, [r7, #4]
 8010cfa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010cfe:	6878      	ldr	r0, [r7, #4]
 8010d00:	f7ff fc80 	bl	8010604 <tcp_output>
}
 8010d04:	bf00      	nop
 8010d06:	3708      	adds	r7, #8
 8010d08:	46bd      	mov	sp, r7
 8010d0a:	bd80      	pop	{r7, pc}
 8010d0c:	08016ccc 	.word	0x08016ccc
 8010d10:	0801732c 	.word	0x0801732c
 8010d14:	08016d20 	.word	0x08016d20

08010d18 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010d18:	b580      	push	{r7, lr}
 8010d1a:	b082      	sub	sp, #8
 8010d1c:	af00      	add	r7, sp, #0
 8010d1e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010d20:	687b      	ldr	r3, [r7, #4]
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d106      	bne.n	8010d34 <tcp_rexmit_rto+0x1c>
 8010d26:	4b0a      	ldr	r3, [pc, #40]	; (8010d50 <tcp_rexmit_rto+0x38>)
 8010d28:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010d2c:	4909      	ldr	r1, [pc, #36]	; (8010d54 <tcp_rexmit_rto+0x3c>)
 8010d2e:	480a      	ldr	r0, [pc, #40]	; (8010d58 <tcp_rexmit_rto+0x40>)
 8010d30:	f003 fca2 	bl	8014678 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f7ff ff57 	bl	8010be8 <tcp_rexmit_rto_prepare>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	2b00      	cmp	r3, #0
 8010d3e:	d102      	bne.n	8010d46 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f7ff ffc1 	bl	8010cc8 <tcp_rexmit_rto_commit>
  }
}
 8010d46:	bf00      	nop
 8010d48:	3708      	adds	r7, #8
 8010d4a:	46bd      	mov	sp, r7
 8010d4c:	bd80      	pop	{r7, pc}
 8010d4e:	bf00      	nop
 8010d50:	08016ccc 	.word	0x08016ccc
 8010d54:	08017350 	.word	0x08017350
 8010d58:	08016d20 	.word	0x08016d20

08010d5c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010d5c:	b590      	push	{r4, r7, lr}
 8010d5e:	b085      	sub	sp, #20
 8010d60:	af00      	add	r7, sp, #0
 8010d62:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	d106      	bne.n	8010d78 <tcp_rexmit+0x1c>
 8010d6a:	4b2f      	ldr	r3, [pc, #188]	; (8010e28 <tcp_rexmit+0xcc>)
 8010d6c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010d70:	492e      	ldr	r1, [pc, #184]	; (8010e2c <tcp_rexmit+0xd0>)
 8010d72:	482f      	ldr	r0, [pc, #188]	; (8010e30 <tcp_rexmit+0xd4>)
 8010d74:	f003 fc80 	bl	8014678 <iprintf>

  if (pcb->unacked == NULL) {
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d7c:	2b00      	cmp	r3, #0
 8010d7e:	d102      	bne.n	8010d86 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010d80:	f06f 0305 	mvn.w	r3, #5
 8010d84:	e04c      	b.n	8010e20 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010d8a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010d8c:	68b8      	ldr	r0, [r7, #8]
 8010d8e:	f7ff fe2d 	bl	80109ec <tcp_output_segment_busy>
 8010d92:	4603      	mov	r3, r0
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d002      	beq.n	8010d9e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010d98:	f06f 0305 	mvn.w	r3, #5
 8010d9c:	e040      	b.n	8010e20 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	681a      	ldr	r2, [r3, #0]
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010da6:	687b      	ldr	r3, [r7, #4]
 8010da8:	336c      	adds	r3, #108	; 0x6c
 8010daa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010dac:	e002      	b.n	8010db4 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010dae:	68fb      	ldr	r3, [r7, #12]
 8010db0:	681b      	ldr	r3, [r3, #0]
 8010db2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010db4:	68fb      	ldr	r3, [r7, #12]
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	2b00      	cmp	r3, #0
 8010dba:	d011      	beq.n	8010de0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	681b      	ldr	r3, [r3, #0]
 8010dc0:	68db      	ldr	r3, [r3, #12]
 8010dc2:	685b      	ldr	r3, [r3, #4]
 8010dc4:	4618      	mov	r0, r3
 8010dc6:	f7f9 fbc0 	bl	800a54a <lwip_htonl>
 8010dca:	4604      	mov	r4, r0
 8010dcc:	68bb      	ldr	r3, [r7, #8]
 8010dce:	68db      	ldr	r3, [r3, #12]
 8010dd0:	685b      	ldr	r3, [r3, #4]
 8010dd2:	4618      	mov	r0, r3
 8010dd4:	f7f9 fbb9 	bl	800a54a <lwip_htonl>
 8010dd8:	4603      	mov	r3, r0
 8010dda:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	dbe6      	blt.n	8010dae <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	681a      	ldr	r2, [r3, #0]
 8010de4:	68bb      	ldr	r3, [r7, #8]
 8010de6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010de8:	68fb      	ldr	r3, [r7, #12]
 8010dea:	68ba      	ldr	r2, [r7, #8]
 8010dec:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010dee:	68bb      	ldr	r3, [r7, #8]
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d103      	bne.n	8010dfe <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	2200      	movs	r2, #0
 8010dfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010e04:	2bff      	cmp	r3, #255	; 0xff
 8010e06:	d007      	beq.n	8010e18 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010e0e:	3301      	adds	r3, #1
 8010e10:	b2da      	uxtb	r2, r3
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010e1e:	2300      	movs	r3, #0
}
 8010e20:	4618      	mov	r0, r3
 8010e22:	3714      	adds	r7, #20
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd90      	pop	{r4, r7, pc}
 8010e28:	08016ccc 	.word	0x08016ccc
 8010e2c:	0801736c 	.word	0x0801736c
 8010e30:	08016d20 	.word	0x08016d20

08010e34 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010e34:	b580      	push	{r7, lr}
 8010e36:	b082      	sub	sp, #8
 8010e38:	af00      	add	r7, sp, #0
 8010e3a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	2b00      	cmp	r3, #0
 8010e40:	d106      	bne.n	8010e50 <tcp_rexmit_fast+0x1c>
 8010e42:	4b2a      	ldr	r3, [pc, #168]	; (8010eec <tcp_rexmit_fast+0xb8>)
 8010e44:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010e48:	4929      	ldr	r1, [pc, #164]	; (8010ef0 <tcp_rexmit_fast+0xbc>)
 8010e4a:	482a      	ldr	r0, [pc, #168]	; (8010ef4 <tcp_rexmit_fast+0xc0>)
 8010e4c:	f003 fc14 	bl	8014678 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e54:	2b00      	cmp	r3, #0
 8010e56:	d045      	beq.n	8010ee4 <tcp_rexmit_fast+0xb0>
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	8b5b      	ldrh	r3, [r3, #26]
 8010e5c:	f003 0304 	and.w	r3, r3, #4
 8010e60:	2b00      	cmp	r3, #0
 8010e62:	d13f      	bne.n	8010ee4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f7ff ff79 	bl	8010d5c <tcp_rexmit>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d139      	bne.n	8010ee4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010e70:	687b      	ldr	r3, [r7, #4]
 8010e72:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010e7c:	4293      	cmp	r3, r2
 8010e7e:	bf28      	it	cs
 8010e80:	4613      	movcs	r3, r2
 8010e82:	b29b      	uxth	r3, r3
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	da00      	bge.n	8010e8a <tcp_rexmit_fast+0x56>
 8010e88:	3301      	adds	r3, #1
 8010e8a:	105b      	asrs	r3, r3, #1
 8010e8c:	b29a      	uxth	r2, r3
 8010e8e:	687b      	ldr	r3, [r7, #4]
 8010e90:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010e9a:	461a      	mov	r2, r3
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ea0:	005b      	lsls	r3, r3, #1
 8010ea2:	429a      	cmp	r2, r3
 8010ea4:	d206      	bcs.n	8010eb4 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010eaa:	005b      	lsls	r3, r3, #1
 8010eac:	b29a      	uxth	r2, r3
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010eb4:	687b      	ldr	r3, [r7, #4]
 8010eb6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010ebe:	4619      	mov	r1, r3
 8010ec0:	0049      	lsls	r1, r1, #1
 8010ec2:	440b      	add	r3, r1
 8010ec4:	b29b      	uxth	r3, r3
 8010ec6:	4413      	add	r3, r2
 8010ec8:	b29a      	uxth	r2, r3
 8010eca:	687b      	ldr	r3, [r7, #4]
 8010ecc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	8b5b      	ldrh	r3, [r3, #26]
 8010ed4:	f043 0304 	orr.w	r3, r3, #4
 8010ed8:	b29a      	uxth	r2, r3
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2200      	movs	r2, #0
 8010ee2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010ee4:	bf00      	nop
 8010ee6:	3708      	adds	r7, #8
 8010ee8:	46bd      	mov	sp, r7
 8010eea:	bd80      	pop	{r7, pc}
 8010eec:	08016ccc 	.word	0x08016ccc
 8010ef0:	08017384 	.word	0x08017384
 8010ef4:	08016d20 	.word	0x08016d20

08010ef8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010ef8:	b580      	push	{r7, lr}
 8010efa:	b086      	sub	sp, #24
 8010efc:	af00      	add	r7, sp, #0
 8010efe:	60f8      	str	r0, [r7, #12]
 8010f00:	607b      	str	r3, [r7, #4]
 8010f02:	460b      	mov	r3, r1
 8010f04:	817b      	strh	r3, [r7, #10]
 8010f06:	4613      	mov	r3, r2
 8010f08:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010f0a:	897a      	ldrh	r2, [r7, #10]
 8010f0c:	893b      	ldrh	r3, [r7, #8]
 8010f0e:	4413      	add	r3, r2
 8010f10:	b29b      	uxth	r3, r3
 8010f12:	3314      	adds	r3, #20
 8010f14:	b29b      	uxth	r3, r3
 8010f16:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010f1a:	4619      	mov	r1, r3
 8010f1c:	2022      	movs	r0, #34	; 0x22
 8010f1e:	f7fa fc0d 	bl	800b73c <pbuf_alloc>
 8010f22:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010f24:	697b      	ldr	r3, [r7, #20]
 8010f26:	2b00      	cmp	r3, #0
 8010f28:	d04d      	beq.n	8010fc6 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010f2a:	897b      	ldrh	r3, [r7, #10]
 8010f2c:	3313      	adds	r3, #19
 8010f2e:	697a      	ldr	r2, [r7, #20]
 8010f30:	8952      	ldrh	r2, [r2, #10]
 8010f32:	4293      	cmp	r3, r2
 8010f34:	db06      	blt.n	8010f44 <tcp_output_alloc_header_common+0x4c>
 8010f36:	4b26      	ldr	r3, [pc, #152]	; (8010fd0 <tcp_output_alloc_header_common+0xd8>)
 8010f38:	f240 7223 	movw	r2, #1827	; 0x723
 8010f3c:	4925      	ldr	r1, [pc, #148]	; (8010fd4 <tcp_output_alloc_header_common+0xdc>)
 8010f3e:	4826      	ldr	r0, [pc, #152]	; (8010fd8 <tcp_output_alloc_header_common+0xe0>)
 8010f40:	f003 fb9a 	bl	8014678 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010f44:	697b      	ldr	r3, [r7, #20]
 8010f46:	685b      	ldr	r3, [r3, #4]
 8010f48:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010f4a:	8c3b      	ldrh	r3, [r7, #32]
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	f7f9 fae7 	bl	800a520 <lwip_htons>
 8010f52:	4603      	mov	r3, r0
 8010f54:	461a      	mov	r2, r3
 8010f56:	693b      	ldr	r3, [r7, #16]
 8010f58:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010f5a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010f5c:	4618      	mov	r0, r3
 8010f5e:	f7f9 fadf 	bl	800a520 <lwip_htons>
 8010f62:	4603      	mov	r3, r0
 8010f64:	461a      	mov	r2, r3
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010f6a:	693b      	ldr	r3, [r7, #16]
 8010f6c:	687a      	ldr	r2, [r7, #4]
 8010f6e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010f70:	68f8      	ldr	r0, [r7, #12]
 8010f72:	f7f9 faea 	bl	800a54a <lwip_htonl>
 8010f76:	4602      	mov	r2, r0
 8010f78:	693b      	ldr	r3, [r7, #16]
 8010f7a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010f7c:	897b      	ldrh	r3, [r7, #10]
 8010f7e:	089b      	lsrs	r3, r3, #2
 8010f80:	b29b      	uxth	r3, r3
 8010f82:	3305      	adds	r3, #5
 8010f84:	b29b      	uxth	r3, r3
 8010f86:	031b      	lsls	r3, r3, #12
 8010f88:	b29a      	uxth	r2, r3
 8010f8a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010f8e:	b29b      	uxth	r3, r3
 8010f90:	4313      	orrs	r3, r2
 8010f92:	b29b      	uxth	r3, r3
 8010f94:	4618      	mov	r0, r3
 8010f96:	f7f9 fac3 	bl	800a520 <lwip_htons>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	461a      	mov	r2, r3
 8010f9e:	693b      	ldr	r3, [r7, #16]
 8010fa0:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010fa2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010fa4:	4618      	mov	r0, r3
 8010fa6:	f7f9 fabb 	bl	800a520 <lwip_htons>
 8010faa:	4603      	mov	r3, r0
 8010fac:	461a      	mov	r2, r3
 8010fae:	693b      	ldr	r3, [r7, #16]
 8010fb0:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010fb2:	693b      	ldr	r3, [r7, #16]
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	741a      	strb	r2, [r3, #16]
 8010fb8:	2200      	movs	r2, #0
 8010fba:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010fbc:	693b      	ldr	r3, [r7, #16]
 8010fbe:	2200      	movs	r2, #0
 8010fc0:	749a      	strb	r2, [r3, #18]
 8010fc2:	2200      	movs	r2, #0
 8010fc4:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010fc6:	697b      	ldr	r3, [r7, #20]
}
 8010fc8:	4618      	mov	r0, r3
 8010fca:	3718      	adds	r7, #24
 8010fcc:	46bd      	mov	sp, r7
 8010fce:	bd80      	pop	{r7, pc}
 8010fd0:	08016ccc 	.word	0x08016ccc
 8010fd4:	080173a4 	.word	0x080173a4
 8010fd8:	08016d20 	.word	0x08016d20

08010fdc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010fdc:	b5b0      	push	{r4, r5, r7, lr}
 8010fde:	b08a      	sub	sp, #40	; 0x28
 8010fe0:	af04      	add	r7, sp, #16
 8010fe2:	60f8      	str	r0, [r7, #12]
 8010fe4:	607b      	str	r3, [r7, #4]
 8010fe6:	460b      	mov	r3, r1
 8010fe8:	817b      	strh	r3, [r7, #10]
 8010fea:	4613      	mov	r3, r2
 8010fec:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	2b00      	cmp	r3, #0
 8010ff2:	d106      	bne.n	8011002 <tcp_output_alloc_header+0x26>
 8010ff4:	4b15      	ldr	r3, [pc, #84]	; (801104c <tcp_output_alloc_header+0x70>)
 8010ff6:	f240 7242 	movw	r2, #1858	; 0x742
 8010ffa:	4915      	ldr	r1, [pc, #84]	; (8011050 <tcp_output_alloc_header+0x74>)
 8010ffc:	4815      	ldr	r0, [pc, #84]	; (8011054 <tcp_output_alloc_header+0x78>)
 8010ffe:	f003 fb3b 	bl	8014678 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	8adb      	ldrh	r3, [r3, #22]
 801100a:	68fa      	ldr	r2, [r7, #12]
 801100c:	8b12      	ldrh	r2, [r2, #24]
 801100e:	68f9      	ldr	r1, [r7, #12]
 8011010:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8011012:	893d      	ldrh	r5, [r7, #8]
 8011014:	897c      	ldrh	r4, [r7, #10]
 8011016:	9103      	str	r1, [sp, #12]
 8011018:	2110      	movs	r1, #16
 801101a:	9102      	str	r1, [sp, #8]
 801101c:	9201      	str	r2, [sp, #4]
 801101e:	9300      	str	r3, [sp, #0]
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	462a      	mov	r2, r5
 8011024:	4621      	mov	r1, r4
 8011026:	f7ff ff67 	bl	8010ef8 <tcp_output_alloc_header_common>
 801102a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801102c:	697b      	ldr	r3, [r7, #20]
 801102e:	2b00      	cmp	r3, #0
 8011030:	d006      	beq.n	8011040 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8011032:	68fb      	ldr	r3, [r7, #12]
 8011034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011036:	68fa      	ldr	r2, [r7, #12]
 8011038:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801103a:	441a      	add	r2, r3
 801103c:	68fb      	ldr	r3, [r7, #12]
 801103e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8011040:	697b      	ldr	r3, [r7, #20]
}
 8011042:	4618      	mov	r0, r3
 8011044:	3718      	adds	r7, #24
 8011046:	46bd      	mov	sp, r7
 8011048:	bdb0      	pop	{r4, r5, r7, pc}
 801104a:	bf00      	nop
 801104c:	08016ccc 	.word	0x08016ccc
 8011050:	080173d4 	.word	0x080173d4
 8011054:	08016d20 	.word	0x08016d20

08011058 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8011058:	b580      	push	{r7, lr}
 801105a:	b088      	sub	sp, #32
 801105c:	af00      	add	r7, sp, #0
 801105e:	60f8      	str	r0, [r7, #12]
 8011060:	60b9      	str	r1, [r7, #8]
 8011062:	4611      	mov	r1, r2
 8011064:	461a      	mov	r2, r3
 8011066:	460b      	mov	r3, r1
 8011068:	71fb      	strb	r3, [r7, #7]
 801106a:	4613      	mov	r3, r2
 801106c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801106e:	2300      	movs	r3, #0
 8011070:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8011072:	68bb      	ldr	r3, [r7, #8]
 8011074:	2b00      	cmp	r3, #0
 8011076:	d106      	bne.n	8011086 <tcp_output_fill_options+0x2e>
 8011078:	4b13      	ldr	r3, [pc, #76]	; (80110c8 <tcp_output_fill_options+0x70>)
 801107a:	f240 7256 	movw	r2, #1878	; 0x756
 801107e:	4913      	ldr	r1, [pc, #76]	; (80110cc <tcp_output_fill_options+0x74>)
 8011080:	4813      	ldr	r0, [pc, #76]	; (80110d0 <tcp_output_fill_options+0x78>)
 8011082:	f003 faf9 	bl	8014678 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8011086:	68bb      	ldr	r3, [r7, #8]
 8011088:	685b      	ldr	r3, [r3, #4]
 801108a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801108c:	69bb      	ldr	r3, [r7, #24]
 801108e:	3314      	adds	r3, #20
 8011090:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8011092:	69bb      	ldr	r3, [r7, #24]
 8011094:	f103 0214 	add.w	r2, r3, #20
 8011098:	8bfb      	ldrh	r3, [r7, #30]
 801109a:	009b      	lsls	r3, r3, #2
 801109c:	4619      	mov	r1, r3
 801109e:	79fb      	ldrb	r3, [r7, #7]
 80110a0:	009b      	lsls	r3, r3, #2
 80110a2:	f003 0304 	and.w	r3, r3, #4
 80110a6:	440b      	add	r3, r1
 80110a8:	4413      	add	r3, r2
 80110aa:	697a      	ldr	r2, [r7, #20]
 80110ac:	429a      	cmp	r2, r3
 80110ae:	d006      	beq.n	80110be <tcp_output_fill_options+0x66>
 80110b0:	4b05      	ldr	r3, [pc, #20]	; (80110c8 <tcp_output_fill_options+0x70>)
 80110b2:	f240 7275 	movw	r2, #1909	; 0x775
 80110b6:	4907      	ldr	r1, [pc, #28]	; (80110d4 <tcp_output_fill_options+0x7c>)
 80110b8:	4805      	ldr	r0, [pc, #20]	; (80110d0 <tcp_output_fill_options+0x78>)
 80110ba:	f003 fadd 	bl	8014678 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80110be:	bf00      	nop
 80110c0:	3720      	adds	r7, #32
 80110c2:	46bd      	mov	sp, r7
 80110c4:	bd80      	pop	{r7, pc}
 80110c6:	bf00      	nop
 80110c8:	08016ccc 	.word	0x08016ccc
 80110cc:	080173fc 	.word	0x080173fc
 80110d0:	08016d20 	.word	0x08016d20
 80110d4:	080172f4 	.word	0x080172f4

080110d8 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b08a      	sub	sp, #40	; 0x28
 80110dc:	af04      	add	r7, sp, #16
 80110de:	60f8      	str	r0, [r7, #12]
 80110e0:	60b9      	str	r1, [r7, #8]
 80110e2:	607a      	str	r2, [r7, #4]
 80110e4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	2b00      	cmp	r3, #0
 80110ea:	d106      	bne.n	80110fa <tcp_output_control_segment+0x22>
 80110ec:	4b1c      	ldr	r3, [pc, #112]	; (8011160 <tcp_output_control_segment+0x88>)
 80110ee:	f240 7287 	movw	r2, #1927	; 0x787
 80110f2:	491c      	ldr	r1, [pc, #112]	; (8011164 <tcp_output_control_segment+0x8c>)
 80110f4:	481c      	ldr	r0, [pc, #112]	; (8011168 <tcp_output_control_segment+0x90>)
 80110f6:	f003 fabf 	bl	8014678 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80110fa:	683a      	ldr	r2, [r7, #0]
 80110fc:	6879      	ldr	r1, [r7, #4]
 80110fe:	68f8      	ldr	r0, [r7, #12]
 8011100:	f7fe ff40 	bl	800ff84 <tcp_route>
 8011104:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8011106:	693b      	ldr	r3, [r7, #16]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d102      	bne.n	8011112 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801110c:	23fc      	movs	r3, #252	; 0xfc
 801110e:	75fb      	strb	r3, [r7, #23]
 8011110:	e01c      	b.n	801114c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8011112:	68fb      	ldr	r3, [r7, #12]
 8011114:	2b00      	cmp	r3, #0
 8011116:	d006      	beq.n	8011126 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8011118:	68fb      	ldr	r3, [r7, #12]
 801111a:	7adb      	ldrb	r3, [r3, #11]
 801111c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801111e:	68fb      	ldr	r3, [r7, #12]
 8011120:	7a9b      	ldrb	r3, [r3, #10]
 8011122:	757b      	strb	r3, [r7, #21]
 8011124:	e003      	b.n	801112e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8011126:	23ff      	movs	r3, #255	; 0xff
 8011128:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801112a:	2300      	movs	r3, #0
 801112c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801112e:	7dba      	ldrb	r2, [r7, #22]
 8011130:	693b      	ldr	r3, [r7, #16]
 8011132:	9302      	str	r3, [sp, #8]
 8011134:	2306      	movs	r3, #6
 8011136:	9301      	str	r3, [sp, #4]
 8011138:	7d7b      	ldrb	r3, [r7, #21]
 801113a:	9300      	str	r3, [sp, #0]
 801113c:	4613      	mov	r3, r2
 801113e:	683a      	ldr	r2, [r7, #0]
 8011140:	6879      	ldr	r1, [r7, #4]
 8011142:	68b8      	ldr	r0, [r7, #8]
 8011144:	f001 ffa0 	bl	8013088 <ip4_output_if>
 8011148:	4603      	mov	r3, r0
 801114a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801114c:	68b8      	ldr	r0, [r7, #8]
 801114e:	f7fa fdd9 	bl	800bd04 <pbuf_free>
  return err;
 8011152:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011156:	4618      	mov	r0, r3
 8011158:	3718      	adds	r7, #24
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}
 801115e:	bf00      	nop
 8011160:	08016ccc 	.word	0x08016ccc
 8011164:	08017424 	.word	0x08017424
 8011168:	08016d20 	.word	0x08016d20

0801116c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801116c:	b590      	push	{r4, r7, lr}
 801116e:	b08b      	sub	sp, #44	; 0x2c
 8011170:	af04      	add	r7, sp, #16
 8011172:	60f8      	str	r0, [r7, #12]
 8011174:	60b9      	str	r1, [r7, #8]
 8011176:	607a      	str	r2, [r7, #4]
 8011178:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d106      	bne.n	801118e <tcp_rst+0x22>
 8011180:	4b1f      	ldr	r3, [pc, #124]	; (8011200 <tcp_rst+0x94>)
 8011182:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8011186:	491f      	ldr	r1, [pc, #124]	; (8011204 <tcp_rst+0x98>)
 8011188:	481f      	ldr	r0, [pc, #124]	; (8011208 <tcp_rst+0x9c>)
 801118a:	f003 fa75 	bl	8014678 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801118e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011190:	2b00      	cmp	r3, #0
 8011192:	d106      	bne.n	80111a2 <tcp_rst+0x36>
 8011194:	4b1a      	ldr	r3, [pc, #104]	; (8011200 <tcp_rst+0x94>)
 8011196:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801119a:	491c      	ldr	r1, [pc, #112]	; (801120c <tcp_rst+0xa0>)
 801119c:	481a      	ldr	r0, [pc, #104]	; (8011208 <tcp_rst+0x9c>)
 801119e:	f003 fa6b 	bl	8014678 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80111a2:	2300      	movs	r3, #0
 80111a4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80111a6:	f246 0308 	movw	r3, #24584	; 0x6008
 80111aa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80111ac:	7dfb      	ldrb	r3, [r7, #23]
 80111ae:	b29c      	uxth	r4, r3
 80111b0:	68b8      	ldr	r0, [r7, #8]
 80111b2:	f7f9 f9ca 	bl	800a54a <lwip_htonl>
 80111b6:	4602      	mov	r2, r0
 80111b8:	8abb      	ldrh	r3, [r7, #20]
 80111ba:	9303      	str	r3, [sp, #12]
 80111bc:	2314      	movs	r3, #20
 80111be:	9302      	str	r3, [sp, #8]
 80111c0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80111c2:	9301      	str	r3, [sp, #4]
 80111c4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80111c6:	9300      	str	r3, [sp, #0]
 80111c8:	4613      	mov	r3, r2
 80111ca:	2200      	movs	r2, #0
 80111cc:	4621      	mov	r1, r4
 80111ce:	6878      	ldr	r0, [r7, #4]
 80111d0:	f7ff fe92 	bl	8010ef8 <tcp_output_alloc_header_common>
 80111d4:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80111d6:	693b      	ldr	r3, [r7, #16]
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d00c      	beq.n	80111f6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80111dc:	7dfb      	ldrb	r3, [r7, #23]
 80111de:	2200      	movs	r2, #0
 80111e0:	6939      	ldr	r1, [r7, #16]
 80111e2:	68f8      	ldr	r0, [r7, #12]
 80111e4:	f7ff ff38 	bl	8011058 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80111e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80111ea:	683a      	ldr	r2, [r7, #0]
 80111ec:	6939      	ldr	r1, [r7, #16]
 80111ee:	68f8      	ldr	r0, [r7, #12]
 80111f0:	f7ff ff72 	bl	80110d8 <tcp_output_control_segment>
 80111f4:	e000      	b.n	80111f8 <tcp_rst+0x8c>
    return;
 80111f6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80111f8:	371c      	adds	r7, #28
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd90      	pop	{r4, r7, pc}
 80111fe:	bf00      	nop
 8011200:	08016ccc 	.word	0x08016ccc
 8011204:	08017450 	.word	0x08017450
 8011208:	08016d20 	.word	0x08016d20
 801120c:	0801746c 	.word	0x0801746c

08011210 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011210:	b590      	push	{r4, r7, lr}
 8011212:	b087      	sub	sp, #28
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011218:	2300      	movs	r3, #0
 801121a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801121c:	2300      	movs	r3, #0
 801121e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	2b00      	cmp	r3, #0
 8011224:	d106      	bne.n	8011234 <tcp_send_empty_ack+0x24>
 8011226:	4b28      	ldr	r3, [pc, #160]	; (80112c8 <tcp_send_empty_ack+0xb8>)
 8011228:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801122c:	4927      	ldr	r1, [pc, #156]	; (80112cc <tcp_send_empty_ack+0xbc>)
 801122e:	4828      	ldr	r0, [pc, #160]	; (80112d0 <tcp_send_empty_ack+0xc0>)
 8011230:	f003 fa22 	bl	8014678 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011234:	7dfb      	ldrb	r3, [r7, #23]
 8011236:	009b      	lsls	r3, r3, #2
 8011238:	b2db      	uxtb	r3, r3
 801123a:	f003 0304 	and.w	r3, r3, #4
 801123e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011240:	7d7b      	ldrb	r3, [r7, #21]
 8011242:	b29c      	uxth	r4, r3
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011248:	4618      	mov	r0, r3
 801124a:	f7f9 f97e 	bl	800a54a <lwip_htonl>
 801124e:	4603      	mov	r3, r0
 8011250:	2200      	movs	r2, #0
 8011252:	4621      	mov	r1, r4
 8011254:	6878      	ldr	r0, [r7, #4]
 8011256:	f7ff fec1 	bl	8010fdc <tcp_output_alloc_header>
 801125a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801125c:	693b      	ldr	r3, [r7, #16]
 801125e:	2b00      	cmp	r3, #0
 8011260:	d109      	bne.n	8011276 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011262:	687b      	ldr	r3, [r7, #4]
 8011264:	8b5b      	ldrh	r3, [r3, #26]
 8011266:	f043 0303 	orr.w	r3, r3, #3
 801126a:	b29a      	uxth	r2, r3
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011270:	f06f 0301 	mvn.w	r3, #1
 8011274:	e023      	b.n	80112be <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8011276:	7dbb      	ldrb	r3, [r7, #22]
 8011278:	7dfa      	ldrb	r2, [r7, #23]
 801127a:	6939      	ldr	r1, [r7, #16]
 801127c:	6878      	ldr	r0, [r7, #4]
 801127e:	f7ff feeb 	bl	8011058 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011282:	687a      	ldr	r2, [r7, #4]
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	3304      	adds	r3, #4
 8011288:	6939      	ldr	r1, [r7, #16]
 801128a:	6878      	ldr	r0, [r7, #4]
 801128c:	f7ff ff24 	bl	80110d8 <tcp_output_control_segment>
 8011290:	4603      	mov	r3, r0
 8011292:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8011294:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011298:	2b00      	cmp	r3, #0
 801129a:	d007      	beq.n	80112ac <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	8b5b      	ldrh	r3, [r3, #26]
 80112a0:	f043 0303 	orr.w	r3, r3, #3
 80112a4:	b29a      	uxth	r2, r3
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	835a      	strh	r2, [r3, #26]
 80112aa:	e006      	b.n	80112ba <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	8b5b      	ldrh	r3, [r3, #26]
 80112b0:	f023 0303 	bic.w	r3, r3, #3
 80112b4:	b29a      	uxth	r2, r3
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80112ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80112be:	4618      	mov	r0, r3
 80112c0:	371c      	adds	r7, #28
 80112c2:	46bd      	mov	sp, r7
 80112c4:	bd90      	pop	{r4, r7, pc}
 80112c6:	bf00      	nop
 80112c8:	08016ccc 	.word	0x08016ccc
 80112cc:	08017488 	.word	0x08017488
 80112d0:	08016d20 	.word	0x08016d20

080112d4 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80112d4:	b590      	push	{r4, r7, lr}
 80112d6:	b087      	sub	sp, #28
 80112d8:	af00      	add	r7, sp, #0
 80112da:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80112dc:	2300      	movs	r3, #0
 80112de:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80112e0:	687b      	ldr	r3, [r7, #4]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d106      	bne.n	80112f4 <tcp_keepalive+0x20>
 80112e6:	4b18      	ldr	r3, [pc, #96]	; (8011348 <tcp_keepalive+0x74>)
 80112e8:	f640 0224 	movw	r2, #2084	; 0x824
 80112ec:	4917      	ldr	r1, [pc, #92]	; (801134c <tcp_keepalive+0x78>)
 80112ee:	4818      	ldr	r0, [pc, #96]	; (8011350 <tcp_keepalive+0x7c>)
 80112f0:	f003 f9c2 	bl	8014678 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80112f4:	7dfb      	ldrb	r3, [r7, #23]
 80112f6:	b29c      	uxth	r4, r3
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80112fc:	3b01      	subs	r3, #1
 80112fe:	4618      	mov	r0, r3
 8011300:	f7f9 f923 	bl	800a54a <lwip_htonl>
 8011304:	4603      	mov	r3, r0
 8011306:	2200      	movs	r2, #0
 8011308:	4621      	mov	r1, r4
 801130a:	6878      	ldr	r0, [r7, #4]
 801130c:	f7ff fe66 	bl	8010fdc <tcp_output_alloc_header>
 8011310:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011312:	693b      	ldr	r3, [r7, #16]
 8011314:	2b00      	cmp	r3, #0
 8011316:	d102      	bne.n	801131e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011318:	f04f 33ff 	mov.w	r3, #4294967295
 801131c:	e010      	b.n	8011340 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801131e:	7dfb      	ldrb	r3, [r7, #23]
 8011320:	2200      	movs	r2, #0
 8011322:	6939      	ldr	r1, [r7, #16]
 8011324:	6878      	ldr	r0, [r7, #4]
 8011326:	f7ff fe97 	bl	8011058 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801132a:	687a      	ldr	r2, [r7, #4]
 801132c:	687b      	ldr	r3, [r7, #4]
 801132e:	3304      	adds	r3, #4
 8011330:	6939      	ldr	r1, [r7, #16]
 8011332:	6878      	ldr	r0, [r7, #4]
 8011334:	f7ff fed0 	bl	80110d8 <tcp_output_control_segment>
 8011338:	4603      	mov	r3, r0
 801133a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801133c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011340:	4618      	mov	r0, r3
 8011342:	371c      	adds	r7, #28
 8011344:	46bd      	mov	sp, r7
 8011346:	bd90      	pop	{r4, r7, pc}
 8011348:	08016ccc 	.word	0x08016ccc
 801134c:	080174a8 	.word	0x080174a8
 8011350:	08016d20 	.word	0x08016d20

08011354 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011354:	b590      	push	{r4, r7, lr}
 8011356:	b08b      	sub	sp, #44	; 0x2c
 8011358:	af00      	add	r7, sp, #0
 801135a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801135c:	2300      	movs	r3, #0
 801135e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	2b00      	cmp	r3, #0
 8011366:	d106      	bne.n	8011376 <tcp_zero_window_probe+0x22>
 8011368:	4b4c      	ldr	r3, [pc, #304]	; (801149c <tcp_zero_window_probe+0x148>)
 801136a:	f640 024f 	movw	r2, #2127	; 0x84f
 801136e:	494c      	ldr	r1, [pc, #304]	; (80114a0 <tcp_zero_window_probe+0x14c>)
 8011370:	484c      	ldr	r0, [pc, #304]	; (80114a4 <tcp_zero_window_probe+0x150>)
 8011372:	f003 f981 	bl	8014678 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801137a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801137c:	6a3b      	ldr	r3, [r7, #32]
 801137e:	2b00      	cmp	r3, #0
 8011380:	d101      	bne.n	8011386 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8011382:	2300      	movs	r3, #0
 8011384:	e086      	b.n	8011494 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8011386:	687b      	ldr	r3, [r7, #4]
 8011388:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801138c:	2bff      	cmp	r3, #255	; 0xff
 801138e:	d007      	beq.n	80113a0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8011390:	687b      	ldr	r3, [r7, #4]
 8011392:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011396:	3301      	adds	r3, #1
 8011398:	b2da      	uxtb	r2, r3
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80113a0:	6a3b      	ldr	r3, [r7, #32]
 80113a2:	68db      	ldr	r3, [r3, #12]
 80113a4:	899b      	ldrh	r3, [r3, #12]
 80113a6:	b29b      	uxth	r3, r3
 80113a8:	4618      	mov	r0, r3
 80113aa:	f7f9 f8b9 	bl	800a520 <lwip_htons>
 80113ae:	4603      	mov	r3, r0
 80113b0:	b2db      	uxtb	r3, r3
 80113b2:	f003 0301 	and.w	r3, r3, #1
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d005      	beq.n	80113c6 <tcp_zero_window_probe+0x72>
 80113ba:	6a3b      	ldr	r3, [r7, #32]
 80113bc:	891b      	ldrh	r3, [r3, #8]
 80113be:	2b00      	cmp	r3, #0
 80113c0:	d101      	bne.n	80113c6 <tcp_zero_window_probe+0x72>
 80113c2:	2301      	movs	r3, #1
 80113c4:	e000      	b.n	80113c8 <tcp_zero_window_probe+0x74>
 80113c6:	2300      	movs	r3, #0
 80113c8:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80113ca:	7ffb      	ldrb	r3, [r7, #31]
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	bf0c      	ite	eq
 80113d0:	2301      	moveq	r3, #1
 80113d2:	2300      	movne	r3, #0
 80113d4:	b2db      	uxtb	r3, r3
 80113d6:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80113d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80113dc:	b299      	uxth	r1, r3
 80113de:	6a3b      	ldr	r3, [r7, #32]
 80113e0:	68db      	ldr	r3, [r3, #12]
 80113e2:	685b      	ldr	r3, [r3, #4]
 80113e4:	8bba      	ldrh	r2, [r7, #28]
 80113e6:	6878      	ldr	r0, [r7, #4]
 80113e8:	f7ff fdf8 	bl	8010fdc <tcp_output_alloc_header>
 80113ec:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80113ee:	69bb      	ldr	r3, [r7, #24]
 80113f0:	2b00      	cmp	r3, #0
 80113f2:	d102      	bne.n	80113fa <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80113f4:	f04f 33ff 	mov.w	r3, #4294967295
 80113f8:	e04c      	b.n	8011494 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80113fa:	69bb      	ldr	r3, [r7, #24]
 80113fc:	685b      	ldr	r3, [r3, #4]
 80113fe:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011400:	7ffb      	ldrb	r3, [r7, #31]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d011      	beq.n	801142a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011406:	697b      	ldr	r3, [r7, #20]
 8011408:	899b      	ldrh	r3, [r3, #12]
 801140a:	b29b      	uxth	r3, r3
 801140c:	b21b      	sxth	r3, r3
 801140e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011412:	b21c      	sxth	r4, r3
 8011414:	2011      	movs	r0, #17
 8011416:	f7f9 f883 	bl	800a520 <lwip_htons>
 801141a:	4603      	mov	r3, r0
 801141c:	b21b      	sxth	r3, r3
 801141e:	4323      	orrs	r3, r4
 8011420:	b21b      	sxth	r3, r3
 8011422:	b29a      	uxth	r2, r3
 8011424:	697b      	ldr	r3, [r7, #20]
 8011426:	819a      	strh	r2, [r3, #12]
 8011428:	e010      	b.n	801144c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801142a:	69bb      	ldr	r3, [r7, #24]
 801142c:	685b      	ldr	r3, [r3, #4]
 801142e:	3314      	adds	r3, #20
 8011430:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011432:	6a3b      	ldr	r3, [r7, #32]
 8011434:	6858      	ldr	r0, [r3, #4]
 8011436:	6a3b      	ldr	r3, [r7, #32]
 8011438:	685b      	ldr	r3, [r3, #4]
 801143a:	891a      	ldrh	r2, [r3, #8]
 801143c:	6a3b      	ldr	r3, [r7, #32]
 801143e:	891b      	ldrh	r3, [r3, #8]
 8011440:	1ad3      	subs	r3, r2, r3
 8011442:	b29b      	uxth	r3, r3
 8011444:	2201      	movs	r2, #1
 8011446:	6939      	ldr	r1, [r7, #16]
 8011448:	f7fa fe52 	bl	800c0f0 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801144c:	6a3b      	ldr	r3, [r7, #32]
 801144e:	68db      	ldr	r3, [r3, #12]
 8011450:	685b      	ldr	r3, [r3, #4]
 8011452:	4618      	mov	r0, r3
 8011454:	f7f9 f879 	bl	800a54a <lwip_htonl>
 8011458:	4603      	mov	r3, r0
 801145a:	3301      	adds	r3, #1
 801145c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011462:	68fb      	ldr	r3, [r7, #12]
 8011464:	1ad3      	subs	r3, r2, r3
 8011466:	2b00      	cmp	r3, #0
 8011468:	da02      	bge.n	8011470 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	68fa      	ldr	r2, [r7, #12]
 801146e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011470:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011474:	2200      	movs	r2, #0
 8011476:	69b9      	ldr	r1, [r7, #24]
 8011478:	6878      	ldr	r0, [r7, #4]
 801147a:	f7ff fded 	bl	8011058 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801147e:	687a      	ldr	r2, [r7, #4]
 8011480:	687b      	ldr	r3, [r7, #4]
 8011482:	3304      	adds	r3, #4
 8011484:	69b9      	ldr	r1, [r7, #24]
 8011486:	6878      	ldr	r0, [r7, #4]
 8011488:	f7ff fe26 	bl	80110d8 <tcp_output_control_segment>
 801148c:	4603      	mov	r3, r0
 801148e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011490:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8011494:	4618      	mov	r0, r3
 8011496:	372c      	adds	r7, #44	; 0x2c
 8011498:	46bd      	mov	sp, r7
 801149a:	bd90      	pop	{r4, r7, pc}
 801149c:	08016ccc 	.word	0x08016ccc
 80114a0:	080174c4 	.word	0x080174c4
 80114a4:	08016d20 	.word	0x08016d20

080114a8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80114a8:	b580      	push	{r7, lr}
 80114aa:	b082      	sub	sp, #8
 80114ac:	af00      	add	r7, sp, #0
 80114ae:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80114b0:	f7fa ff0c 	bl	800c2cc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80114b4:	4b0a      	ldr	r3, [pc, #40]	; (80114e0 <tcpip_tcp_timer+0x38>)
 80114b6:	681b      	ldr	r3, [r3, #0]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	d103      	bne.n	80114c4 <tcpip_tcp_timer+0x1c>
 80114bc:	4b09      	ldr	r3, [pc, #36]	; (80114e4 <tcpip_tcp_timer+0x3c>)
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	2b00      	cmp	r3, #0
 80114c2:	d005      	beq.n	80114d0 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80114c4:	2200      	movs	r2, #0
 80114c6:	4908      	ldr	r1, [pc, #32]	; (80114e8 <tcpip_tcp_timer+0x40>)
 80114c8:	20fa      	movs	r0, #250	; 0xfa
 80114ca:	f000 f8f3 	bl	80116b4 <sys_timeout>
 80114ce:	e003      	b.n	80114d8 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80114d0:	4b06      	ldr	r3, [pc, #24]	; (80114ec <tcpip_tcp_timer+0x44>)
 80114d2:	2200      	movs	r2, #0
 80114d4:	601a      	str	r2, [r3, #0]
  }
}
 80114d6:	bf00      	nop
 80114d8:	bf00      	nop
 80114da:	3708      	adds	r7, #8
 80114dc:	46bd      	mov	sp, r7
 80114de:	bd80      	pop	{r7, pc}
 80114e0:	2000f1f4 	.word	0x2000f1f4
 80114e4:	2000f1f8 	.word	0x2000f1f8
 80114e8:	080114a9 	.word	0x080114a9
 80114ec:	2000f240 	.word	0x2000f240

080114f0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80114f0:	b580      	push	{r7, lr}
 80114f2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80114f4:	4b0a      	ldr	r3, [pc, #40]	; (8011520 <tcp_timer_needed+0x30>)
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	2b00      	cmp	r3, #0
 80114fa:	d10f      	bne.n	801151c <tcp_timer_needed+0x2c>
 80114fc:	4b09      	ldr	r3, [pc, #36]	; (8011524 <tcp_timer_needed+0x34>)
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	2b00      	cmp	r3, #0
 8011502:	d103      	bne.n	801150c <tcp_timer_needed+0x1c>
 8011504:	4b08      	ldr	r3, [pc, #32]	; (8011528 <tcp_timer_needed+0x38>)
 8011506:	681b      	ldr	r3, [r3, #0]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d007      	beq.n	801151c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801150c:	4b04      	ldr	r3, [pc, #16]	; (8011520 <tcp_timer_needed+0x30>)
 801150e:	2201      	movs	r2, #1
 8011510:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011512:	2200      	movs	r2, #0
 8011514:	4905      	ldr	r1, [pc, #20]	; (801152c <tcp_timer_needed+0x3c>)
 8011516:	20fa      	movs	r0, #250	; 0xfa
 8011518:	f000 f8cc 	bl	80116b4 <sys_timeout>
  }
}
 801151c:	bf00      	nop
 801151e:	bd80      	pop	{r7, pc}
 8011520:	2000f240 	.word	0x2000f240
 8011524:	2000f1f4 	.word	0x2000f1f4
 8011528:	2000f1f8 	.word	0x2000f1f8
 801152c:	080114a9 	.word	0x080114a9

08011530 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011530:	b580      	push	{r7, lr}
 8011532:	b086      	sub	sp, #24
 8011534:	af00      	add	r7, sp, #0
 8011536:	60f8      	str	r0, [r7, #12]
 8011538:	60b9      	str	r1, [r7, #8]
 801153a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801153c:	200a      	movs	r0, #10
 801153e:	f7f9 fcc7 	bl	800aed0 <memp_malloc>
 8011542:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8011544:	693b      	ldr	r3, [r7, #16]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d109      	bne.n	801155e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801154a:	693b      	ldr	r3, [r7, #16]
 801154c:	2b00      	cmp	r3, #0
 801154e:	d151      	bne.n	80115f4 <sys_timeout_abs+0xc4>
 8011550:	4b2a      	ldr	r3, [pc, #168]	; (80115fc <sys_timeout_abs+0xcc>)
 8011552:	22be      	movs	r2, #190	; 0xbe
 8011554:	492a      	ldr	r1, [pc, #168]	; (8011600 <sys_timeout_abs+0xd0>)
 8011556:	482b      	ldr	r0, [pc, #172]	; (8011604 <sys_timeout_abs+0xd4>)
 8011558:	f003 f88e 	bl	8014678 <iprintf>
    return;
 801155c:	e04a      	b.n	80115f4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	2200      	movs	r2, #0
 8011562:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8011564:	693b      	ldr	r3, [r7, #16]
 8011566:	68ba      	ldr	r2, [r7, #8]
 8011568:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801156a:	693b      	ldr	r3, [r7, #16]
 801156c:	687a      	ldr	r2, [r7, #4]
 801156e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8011570:	693b      	ldr	r3, [r7, #16]
 8011572:	68fa      	ldr	r2, [r7, #12]
 8011574:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8011576:	4b24      	ldr	r3, [pc, #144]	; (8011608 <sys_timeout_abs+0xd8>)
 8011578:	681b      	ldr	r3, [r3, #0]
 801157a:	2b00      	cmp	r3, #0
 801157c:	d103      	bne.n	8011586 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801157e:	4a22      	ldr	r2, [pc, #136]	; (8011608 <sys_timeout_abs+0xd8>)
 8011580:	693b      	ldr	r3, [r7, #16]
 8011582:	6013      	str	r3, [r2, #0]
    return;
 8011584:	e037      	b.n	80115f6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8011586:	693b      	ldr	r3, [r7, #16]
 8011588:	685a      	ldr	r2, [r3, #4]
 801158a:	4b1f      	ldr	r3, [pc, #124]	; (8011608 <sys_timeout_abs+0xd8>)
 801158c:	681b      	ldr	r3, [r3, #0]
 801158e:	685b      	ldr	r3, [r3, #4]
 8011590:	1ad3      	subs	r3, r2, r3
 8011592:	0fdb      	lsrs	r3, r3, #31
 8011594:	f003 0301 	and.w	r3, r3, #1
 8011598:	b2db      	uxtb	r3, r3
 801159a:	2b00      	cmp	r3, #0
 801159c:	d007      	beq.n	80115ae <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801159e:	4b1a      	ldr	r3, [pc, #104]	; (8011608 <sys_timeout_abs+0xd8>)
 80115a0:	681a      	ldr	r2, [r3, #0]
 80115a2:	693b      	ldr	r3, [r7, #16]
 80115a4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80115a6:	4a18      	ldr	r2, [pc, #96]	; (8011608 <sys_timeout_abs+0xd8>)
 80115a8:	693b      	ldr	r3, [r7, #16]
 80115aa:	6013      	str	r3, [r2, #0]
 80115ac:	e023      	b.n	80115f6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80115ae:	4b16      	ldr	r3, [pc, #88]	; (8011608 <sys_timeout_abs+0xd8>)
 80115b0:	681b      	ldr	r3, [r3, #0]
 80115b2:	617b      	str	r3, [r7, #20]
 80115b4:	e01a      	b.n	80115ec <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80115b6:	697b      	ldr	r3, [r7, #20]
 80115b8:	681b      	ldr	r3, [r3, #0]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	d00b      	beq.n	80115d6 <sys_timeout_abs+0xa6>
 80115be:	693b      	ldr	r3, [r7, #16]
 80115c0:	685a      	ldr	r2, [r3, #4]
 80115c2:	697b      	ldr	r3, [r7, #20]
 80115c4:	681b      	ldr	r3, [r3, #0]
 80115c6:	685b      	ldr	r3, [r3, #4]
 80115c8:	1ad3      	subs	r3, r2, r3
 80115ca:	0fdb      	lsrs	r3, r3, #31
 80115cc:	f003 0301 	and.w	r3, r3, #1
 80115d0:	b2db      	uxtb	r3, r3
 80115d2:	2b00      	cmp	r3, #0
 80115d4:	d007      	beq.n	80115e6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80115d6:	697b      	ldr	r3, [r7, #20]
 80115d8:	681a      	ldr	r2, [r3, #0]
 80115da:	693b      	ldr	r3, [r7, #16]
 80115dc:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80115de:	697b      	ldr	r3, [r7, #20]
 80115e0:	693a      	ldr	r2, [r7, #16]
 80115e2:	601a      	str	r2, [r3, #0]
        break;
 80115e4:	e007      	b.n	80115f6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80115e6:	697b      	ldr	r3, [r7, #20]
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	617b      	str	r3, [r7, #20]
 80115ec:	697b      	ldr	r3, [r7, #20]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d1e1      	bne.n	80115b6 <sys_timeout_abs+0x86>
 80115f2:	e000      	b.n	80115f6 <sys_timeout_abs+0xc6>
    return;
 80115f4:	bf00      	nop
      }
    }
  }
}
 80115f6:	3718      	adds	r7, #24
 80115f8:	46bd      	mov	sp, r7
 80115fa:	bd80      	pop	{r7, pc}
 80115fc:	080174e8 	.word	0x080174e8
 8011600:	0801751c 	.word	0x0801751c
 8011604:	0801755c 	.word	0x0801755c
 8011608:	2000f238 	.word	0x2000f238

0801160c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801160c:	b580      	push	{r7, lr}
 801160e:	b086      	sub	sp, #24
 8011610:	af00      	add	r7, sp, #0
 8011612:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011618:	697b      	ldr	r3, [r7, #20]
 801161a:	685b      	ldr	r3, [r3, #4]
 801161c:	4798      	blx	r3

  now = sys_now();
 801161e:	f7f4 fc5f 	bl	8005ee0 <sys_now>
 8011622:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8011624:	697b      	ldr	r3, [r7, #20]
 8011626:	681a      	ldr	r2, [r3, #0]
 8011628:	4b0f      	ldr	r3, [pc, #60]	; (8011668 <lwip_cyclic_timer+0x5c>)
 801162a:	681b      	ldr	r3, [r3, #0]
 801162c:	4413      	add	r3, r2
 801162e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011630:	68fa      	ldr	r2, [r7, #12]
 8011632:	693b      	ldr	r3, [r7, #16]
 8011634:	1ad3      	subs	r3, r2, r3
 8011636:	0fdb      	lsrs	r3, r3, #31
 8011638:	f003 0301 	and.w	r3, r3, #1
 801163c:	b2db      	uxtb	r3, r3
 801163e:	2b00      	cmp	r3, #0
 8011640:	d009      	beq.n	8011656 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8011642:	697b      	ldr	r3, [r7, #20]
 8011644:	681a      	ldr	r2, [r3, #0]
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	4413      	add	r3, r2
 801164a:	687a      	ldr	r2, [r7, #4]
 801164c:	4907      	ldr	r1, [pc, #28]	; (801166c <lwip_cyclic_timer+0x60>)
 801164e:	4618      	mov	r0, r3
 8011650:	f7ff ff6e 	bl	8011530 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8011654:	e004      	b.n	8011660 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8011656:	687a      	ldr	r2, [r7, #4]
 8011658:	4904      	ldr	r1, [pc, #16]	; (801166c <lwip_cyclic_timer+0x60>)
 801165a:	68f8      	ldr	r0, [r7, #12]
 801165c:	f7ff ff68 	bl	8011530 <sys_timeout_abs>
}
 8011660:	bf00      	nop
 8011662:	3718      	adds	r7, #24
 8011664:	46bd      	mov	sp, r7
 8011666:	bd80      	pop	{r7, pc}
 8011668:	2000f23c 	.word	0x2000f23c
 801166c:	0801160d 	.word	0x0801160d

08011670 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b082      	sub	sp, #8
 8011674:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011676:	2301      	movs	r3, #1
 8011678:	607b      	str	r3, [r7, #4]
 801167a:	e00e      	b.n	801169a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801167c:	4a0b      	ldr	r2, [pc, #44]	; (80116ac <sys_timeouts_init+0x3c>)
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011684:	687b      	ldr	r3, [r7, #4]
 8011686:	00db      	lsls	r3, r3, #3
 8011688:	4a08      	ldr	r2, [pc, #32]	; (80116ac <sys_timeouts_init+0x3c>)
 801168a:	4413      	add	r3, r2
 801168c:	461a      	mov	r2, r3
 801168e:	4908      	ldr	r1, [pc, #32]	; (80116b0 <sys_timeouts_init+0x40>)
 8011690:	f000 f810 	bl	80116b4 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	3301      	adds	r3, #1
 8011698:	607b      	str	r3, [r7, #4]
 801169a:	687b      	ldr	r3, [r7, #4]
 801169c:	2b02      	cmp	r3, #2
 801169e:	d9ed      	bls.n	801167c <sys_timeouts_init+0xc>
  }
}
 80116a0:	bf00      	nop
 80116a2:	bf00      	nop
 80116a4:	3708      	adds	r7, #8
 80116a6:	46bd      	mov	sp, r7
 80116a8:	bd80      	pop	{r7, pc}
 80116aa:	bf00      	nop
 80116ac:	08018138 	.word	0x08018138
 80116b0:	0801160d 	.word	0x0801160d

080116b4 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b086      	sub	sp, #24
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	60f8      	str	r0, [r7, #12]
 80116bc:	60b9      	str	r1, [r7, #8]
 80116be:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80116c0:	68fb      	ldr	r3, [r7, #12]
 80116c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80116c6:	d306      	bcc.n	80116d6 <sys_timeout+0x22>
 80116c8:	4b0a      	ldr	r3, [pc, #40]	; (80116f4 <sys_timeout+0x40>)
 80116ca:	f240 1229 	movw	r2, #297	; 0x129
 80116ce:	490a      	ldr	r1, [pc, #40]	; (80116f8 <sys_timeout+0x44>)
 80116d0:	480a      	ldr	r0, [pc, #40]	; (80116fc <sys_timeout+0x48>)
 80116d2:	f002 ffd1 	bl	8014678 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80116d6:	f7f4 fc03 	bl	8005ee0 <sys_now>
 80116da:	4602      	mov	r2, r0
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	4413      	add	r3, r2
 80116e0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80116e2:	687a      	ldr	r2, [r7, #4]
 80116e4:	68b9      	ldr	r1, [r7, #8]
 80116e6:	6978      	ldr	r0, [r7, #20]
 80116e8:	f7ff ff22 	bl	8011530 <sys_timeout_abs>
#endif
}
 80116ec:	bf00      	nop
 80116ee:	3718      	adds	r7, #24
 80116f0:	46bd      	mov	sp, r7
 80116f2:	bd80      	pop	{r7, pc}
 80116f4:	080174e8 	.word	0x080174e8
 80116f8:	08017584 	.word	0x08017584
 80116fc:	0801755c 	.word	0x0801755c

08011700 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011700:	b580      	push	{r7, lr}
 8011702:	b084      	sub	sp, #16
 8011704:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8011706:	f7f4 fbeb 	bl	8005ee0 <sys_now>
 801170a:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801170c:	4b17      	ldr	r3, [pc, #92]	; (801176c <sys_check_timeouts+0x6c>)
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8011712:	68bb      	ldr	r3, [r7, #8]
 8011714:	2b00      	cmp	r3, #0
 8011716:	d022      	beq.n	801175e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011718:	68bb      	ldr	r3, [r7, #8]
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	68fa      	ldr	r2, [r7, #12]
 801171e:	1ad3      	subs	r3, r2, r3
 8011720:	0fdb      	lsrs	r3, r3, #31
 8011722:	f003 0301 	and.w	r3, r3, #1
 8011726:	b2db      	uxtb	r3, r3
 8011728:	2b00      	cmp	r3, #0
 801172a:	d11a      	bne.n	8011762 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801172c:	68bb      	ldr	r3, [r7, #8]
 801172e:	681b      	ldr	r3, [r3, #0]
 8011730:	4a0e      	ldr	r2, [pc, #56]	; (801176c <sys_check_timeouts+0x6c>)
 8011732:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8011734:	68bb      	ldr	r3, [r7, #8]
 8011736:	689b      	ldr	r3, [r3, #8]
 8011738:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801173a:	68bb      	ldr	r3, [r7, #8]
 801173c:	68db      	ldr	r3, [r3, #12]
 801173e:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011740:	68bb      	ldr	r3, [r7, #8]
 8011742:	685b      	ldr	r3, [r3, #4]
 8011744:	4a0a      	ldr	r2, [pc, #40]	; (8011770 <sys_check_timeouts+0x70>)
 8011746:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8011748:	68b9      	ldr	r1, [r7, #8]
 801174a:	200a      	movs	r0, #10
 801174c:	f7f9 fc36 	bl	800afbc <memp_free>
    if (handler != NULL) {
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	2b00      	cmp	r3, #0
 8011754:	d0da      	beq.n	801170c <sys_check_timeouts+0xc>
      handler(arg);
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	6838      	ldr	r0, [r7, #0]
 801175a:	4798      	blx	r3
  do {
 801175c:	e7d6      	b.n	801170c <sys_check_timeouts+0xc>
      return;
 801175e:	bf00      	nop
 8011760:	e000      	b.n	8011764 <sys_check_timeouts+0x64>
      return;
 8011762:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8011764:	3710      	adds	r7, #16
 8011766:	46bd      	mov	sp, r7
 8011768:	bd80      	pop	{r7, pc}
 801176a:	bf00      	nop
 801176c:	2000f238 	.word	0x2000f238
 8011770:	2000f23c 	.word	0x2000f23c

08011774 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b082      	sub	sp, #8
 8011778:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801177a:	4b16      	ldr	r3, [pc, #88]	; (80117d4 <sys_timeouts_sleeptime+0x60>)
 801177c:	681b      	ldr	r3, [r3, #0]
 801177e:	2b00      	cmp	r3, #0
 8011780:	d102      	bne.n	8011788 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8011782:	f04f 33ff 	mov.w	r3, #4294967295
 8011786:	e020      	b.n	80117ca <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8011788:	f7f4 fbaa 	bl	8005ee0 <sys_now>
 801178c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801178e:	4b11      	ldr	r3, [pc, #68]	; (80117d4 <sys_timeouts_sleeptime+0x60>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	685a      	ldr	r2, [r3, #4]
 8011794:	687b      	ldr	r3, [r7, #4]
 8011796:	1ad3      	subs	r3, r2, r3
 8011798:	0fdb      	lsrs	r3, r3, #31
 801179a:	f003 0301 	and.w	r3, r3, #1
 801179e:	b2db      	uxtb	r3, r3
 80117a0:	2b00      	cmp	r3, #0
 80117a2:	d001      	beq.n	80117a8 <sys_timeouts_sleeptime+0x34>
    return 0;
 80117a4:	2300      	movs	r3, #0
 80117a6:	e010      	b.n	80117ca <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 80117a8:	4b0a      	ldr	r3, [pc, #40]	; (80117d4 <sys_timeouts_sleeptime+0x60>)
 80117aa:	681b      	ldr	r3, [r3, #0]
 80117ac:	685a      	ldr	r2, [r3, #4]
 80117ae:	687b      	ldr	r3, [r7, #4]
 80117b0:	1ad3      	subs	r3, r2, r3
 80117b2:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80117b4:	683b      	ldr	r3, [r7, #0]
 80117b6:	2b00      	cmp	r3, #0
 80117b8:	da06      	bge.n	80117c8 <sys_timeouts_sleeptime+0x54>
 80117ba:	4b07      	ldr	r3, [pc, #28]	; (80117d8 <sys_timeouts_sleeptime+0x64>)
 80117bc:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80117c0:	4906      	ldr	r1, [pc, #24]	; (80117dc <sys_timeouts_sleeptime+0x68>)
 80117c2:	4807      	ldr	r0, [pc, #28]	; (80117e0 <sys_timeouts_sleeptime+0x6c>)
 80117c4:	f002 ff58 	bl	8014678 <iprintf>
    return ret;
 80117c8:	683b      	ldr	r3, [r7, #0]
  }
}
 80117ca:	4618      	mov	r0, r3
 80117cc:	3708      	adds	r7, #8
 80117ce:	46bd      	mov	sp, r7
 80117d0:	bd80      	pop	{r7, pc}
 80117d2:	bf00      	nop
 80117d4:	2000f238 	.word	0x2000f238
 80117d8:	080174e8 	.word	0x080174e8
 80117dc:	080175bc 	.word	0x080175bc
 80117e0:	0801755c 	.word	0x0801755c

080117e4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80117e4:	b580      	push	{r7, lr}
 80117e6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80117e8:	f002 ff5e 	bl	80146a8 <rand>
 80117ec:	4603      	mov	r3, r0
 80117ee:	b29b      	uxth	r3, r3
 80117f0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80117f4:	b29b      	uxth	r3, r3
 80117f6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80117fa:	b29a      	uxth	r2, r3
 80117fc:	4b01      	ldr	r3, [pc, #4]	; (8011804 <udp_init+0x20>)
 80117fe:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011800:	bf00      	nop
 8011802:	bd80      	pop	{r7, pc}
 8011804:	2000002c 	.word	0x2000002c

08011808 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8011808:	b580      	push	{r7, lr}
 801180a:	b084      	sub	sp, #16
 801180c:	af00      	add	r7, sp, #0
 801180e:	60f8      	str	r0, [r7, #12]
 8011810:	60b9      	str	r1, [r7, #8]
 8011812:	4613      	mov	r3, r2
 8011814:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8011816:	68fb      	ldr	r3, [r7, #12]
 8011818:	2b00      	cmp	r3, #0
 801181a:	d105      	bne.n	8011828 <udp_input_local_match+0x20>
 801181c:	4b27      	ldr	r3, [pc, #156]	; (80118bc <udp_input_local_match+0xb4>)
 801181e:	2287      	movs	r2, #135	; 0x87
 8011820:	4927      	ldr	r1, [pc, #156]	; (80118c0 <udp_input_local_match+0xb8>)
 8011822:	4828      	ldr	r0, [pc, #160]	; (80118c4 <udp_input_local_match+0xbc>)
 8011824:	f002 ff28 	bl	8014678 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	2b00      	cmp	r3, #0
 801182c:	d105      	bne.n	801183a <udp_input_local_match+0x32>
 801182e:	4b23      	ldr	r3, [pc, #140]	; (80118bc <udp_input_local_match+0xb4>)
 8011830:	2288      	movs	r2, #136	; 0x88
 8011832:	4925      	ldr	r1, [pc, #148]	; (80118c8 <udp_input_local_match+0xc0>)
 8011834:	4823      	ldr	r0, [pc, #140]	; (80118c4 <udp_input_local_match+0xbc>)
 8011836:	f002 ff1f 	bl	8014678 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	7a1b      	ldrb	r3, [r3, #8]
 801183e:	2b00      	cmp	r3, #0
 8011840:	d00b      	beq.n	801185a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011842:	68fb      	ldr	r3, [r7, #12]
 8011844:	7a1a      	ldrb	r2, [r3, #8]
 8011846:	4b21      	ldr	r3, [pc, #132]	; (80118cc <udp_input_local_match+0xc4>)
 8011848:	685b      	ldr	r3, [r3, #4]
 801184a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801184e:	3301      	adds	r3, #1
 8011850:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011852:	429a      	cmp	r2, r3
 8011854:	d001      	beq.n	801185a <udp_input_local_match+0x52>
    return 0;
 8011856:	2300      	movs	r3, #0
 8011858:	e02b      	b.n	80118b2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801185a:	79fb      	ldrb	r3, [r7, #7]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d018      	beq.n	8011892 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011860:	68fb      	ldr	r3, [r7, #12]
 8011862:	2b00      	cmp	r3, #0
 8011864:	d013      	beq.n	801188e <udp_input_local_match+0x86>
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	681b      	ldr	r3, [r3, #0]
 801186a:	2b00      	cmp	r3, #0
 801186c:	d00f      	beq.n	801188e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801186e:	4b17      	ldr	r3, [pc, #92]	; (80118cc <udp_input_local_match+0xc4>)
 8011870:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011876:	d00a      	beq.n	801188e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	681a      	ldr	r2, [r3, #0]
 801187c:	4b13      	ldr	r3, [pc, #76]	; (80118cc <udp_input_local_match+0xc4>)
 801187e:	695b      	ldr	r3, [r3, #20]
 8011880:	405a      	eors	r2, r3
 8011882:	68bb      	ldr	r3, [r7, #8]
 8011884:	3308      	adds	r3, #8
 8011886:	681b      	ldr	r3, [r3, #0]
 8011888:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801188a:	2b00      	cmp	r3, #0
 801188c:	d110      	bne.n	80118b0 <udp_input_local_match+0xa8>
          return 1;
 801188e:	2301      	movs	r3, #1
 8011890:	e00f      	b.n	80118b2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011892:	68fb      	ldr	r3, [r7, #12]
 8011894:	2b00      	cmp	r3, #0
 8011896:	d009      	beq.n	80118ac <udp_input_local_match+0xa4>
 8011898:	68fb      	ldr	r3, [r7, #12]
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	2b00      	cmp	r3, #0
 801189e:	d005      	beq.n	80118ac <udp_input_local_match+0xa4>
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	681a      	ldr	r2, [r3, #0]
 80118a4:	4b09      	ldr	r3, [pc, #36]	; (80118cc <udp_input_local_match+0xc4>)
 80118a6:	695b      	ldr	r3, [r3, #20]
 80118a8:	429a      	cmp	r2, r3
 80118aa:	d101      	bne.n	80118b0 <udp_input_local_match+0xa8>
        return 1;
 80118ac:	2301      	movs	r3, #1
 80118ae:	e000      	b.n	80118b2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 80118b0:	2300      	movs	r3, #0
}
 80118b2:	4618      	mov	r0, r3
 80118b4:	3710      	adds	r7, #16
 80118b6:	46bd      	mov	sp, r7
 80118b8:	bd80      	pop	{r7, pc}
 80118ba:	bf00      	nop
 80118bc:	080175d0 	.word	0x080175d0
 80118c0:	08017600 	.word	0x08017600
 80118c4:	08017624 	.word	0x08017624
 80118c8:	0801764c 	.word	0x0801764c
 80118cc:	200098d4 	.word	0x200098d4

080118d0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80118d0:	b590      	push	{r4, r7, lr}
 80118d2:	b08d      	sub	sp, #52	; 0x34
 80118d4:	af02      	add	r7, sp, #8
 80118d6:	6078      	str	r0, [r7, #4]
 80118d8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80118da:	2300      	movs	r3, #0
 80118dc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80118de:	687b      	ldr	r3, [r7, #4]
 80118e0:	2b00      	cmp	r3, #0
 80118e2:	d105      	bne.n	80118f0 <udp_input+0x20>
 80118e4:	4b7c      	ldr	r3, [pc, #496]	; (8011ad8 <udp_input+0x208>)
 80118e6:	22cf      	movs	r2, #207	; 0xcf
 80118e8:	497c      	ldr	r1, [pc, #496]	; (8011adc <udp_input+0x20c>)
 80118ea:	487d      	ldr	r0, [pc, #500]	; (8011ae0 <udp_input+0x210>)
 80118ec:	f002 fec4 	bl	8014678 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80118f0:	683b      	ldr	r3, [r7, #0]
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d105      	bne.n	8011902 <udp_input+0x32>
 80118f6:	4b78      	ldr	r3, [pc, #480]	; (8011ad8 <udp_input+0x208>)
 80118f8:	22d0      	movs	r2, #208	; 0xd0
 80118fa:	497a      	ldr	r1, [pc, #488]	; (8011ae4 <udp_input+0x214>)
 80118fc:	4878      	ldr	r0, [pc, #480]	; (8011ae0 <udp_input+0x210>)
 80118fe:	f002 febb 	bl	8014678 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	895b      	ldrh	r3, [r3, #10]
 8011906:	2b07      	cmp	r3, #7
 8011908:	d803      	bhi.n	8011912 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801190a:	6878      	ldr	r0, [r7, #4]
 801190c:	f7fa f9fa 	bl	800bd04 <pbuf_free>
    goto end;
 8011910:	e0de      	b.n	8011ad0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	685b      	ldr	r3, [r3, #4]
 8011916:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8011918:	4b73      	ldr	r3, [pc, #460]	; (8011ae8 <udp_input+0x218>)
 801191a:	695b      	ldr	r3, [r3, #20]
 801191c:	4a72      	ldr	r2, [pc, #456]	; (8011ae8 <udp_input+0x218>)
 801191e:	6812      	ldr	r2, [r2, #0]
 8011920:	4611      	mov	r1, r2
 8011922:	4618      	mov	r0, r3
 8011924:	f001 fc88 	bl	8013238 <ip4_addr_isbroadcast_u32>
 8011928:	4603      	mov	r3, r0
 801192a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801192c:	697b      	ldr	r3, [r7, #20]
 801192e:	881b      	ldrh	r3, [r3, #0]
 8011930:	b29b      	uxth	r3, r3
 8011932:	4618      	mov	r0, r3
 8011934:	f7f8 fdf4 	bl	800a520 <lwip_htons>
 8011938:	4603      	mov	r3, r0
 801193a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801193c:	697b      	ldr	r3, [r7, #20]
 801193e:	885b      	ldrh	r3, [r3, #2]
 8011940:	b29b      	uxth	r3, r3
 8011942:	4618      	mov	r0, r3
 8011944:	f7f8 fdec 	bl	800a520 <lwip_htons>
 8011948:	4603      	mov	r3, r0
 801194a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801194c:	2300      	movs	r3, #0
 801194e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011950:	2300      	movs	r3, #0
 8011952:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8011954:	2300      	movs	r3, #0
 8011956:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011958:	4b64      	ldr	r3, [pc, #400]	; (8011aec <udp_input+0x21c>)
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	627b      	str	r3, [r7, #36]	; 0x24
 801195e:	e054      	b.n	8011a0a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011962:	8a5b      	ldrh	r3, [r3, #18]
 8011964:	89fa      	ldrh	r2, [r7, #14]
 8011966:	429a      	cmp	r2, r3
 8011968:	d14a      	bne.n	8011a00 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801196a:	7cfb      	ldrb	r3, [r7, #19]
 801196c:	461a      	mov	r2, r3
 801196e:	6839      	ldr	r1, [r7, #0]
 8011970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011972:	f7ff ff49 	bl	8011808 <udp_input_local_match>
 8011976:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011978:	2b00      	cmp	r3, #0
 801197a:	d041      	beq.n	8011a00 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801197c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801197e:	7c1b      	ldrb	r3, [r3, #16]
 8011980:	f003 0304 	and.w	r3, r3, #4
 8011984:	2b00      	cmp	r3, #0
 8011986:	d11d      	bne.n	80119c4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011988:	69fb      	ldr	r3, [r7, #28]
 801198a:	2b00      	cmp	r3, #0
 801198c:	d102      	bne.n	8011994 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801198e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011990:	61fb      	str	r3, [r7, #28]
 8011992:	e017      	b.n	80119c4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8011994:	7cfb      	ldrb	r3, [r7, #19]
 8011996:	2b00      	cmp	r3, #0
 8011998:	d014      	beq.n	80119c4 <udp_input+0xf4>
 801199a:	4b53      	ldr	r3, [pc, #332]	; (8011ae8 <udp_input+0x218>)
 801199c:	695b      	ldr	r3, [r3, #20]
 801199e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119a2:	d10f      	bne.n	80119c4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80119a4:	69fb      	ldr	r3, [r7, #28]
 80119a6:	681a      	ldr	r2, [r3, #0]
 80119a8:	683b      	ldr	r3, [r7, #0]
 80119aa:	3304      	adds	r3, #4
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	429a      	cmp	r2, r3
 80119b0:	d008      	beq.n	80119c4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80119b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119b4:	681a      	ldr	r2, [r3, #0]
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	3304      	adds	r3, #4
 80119ba:	681b      	ldr	r3, [r3, #0]
 80119bc:	429a      	cmp	r2, r3
 80119be:	d101      	bne.n	80119c4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80119c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80119c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119c6:	8a9b      	ldrh	r3, [r3, #20]
 80119c8:	8a3a      	ldrh	r2, [r7, #16]
 80119ca:	429a      	cmp	r2, r3
 80119cc:	d118      	bne.n	8011a00 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80119ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80119d2:	2b00      	cmp	r3, #0
 80119d4:	d005      	beq.n	80119e2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80119d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119d8:	685a      	ldr	r2, [r3, #4]
 80119da:	4b43      	ldr	r3, [pc, #268]	; (8011ae8 <udp_input+0x218>)
 80119dc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80119de:	429a      	cmp	r2, r3
 80119e0:	d10e      	bne.n	8011a00 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80119e2:	6a3b      	ldr	r3, [r7, #32]
 80119e4:	2b00      	cmp	r3, #0
 80119e6:	d014      	beq.n	8011a12 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80119e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119ea:	68da      	ldr	r2, [r3, #12]
 80119ec:	6a3b      	ldr	r3, [r7, #32]
 80119ee:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80119f0:	4b3e      	ldr	r3, [pc, #248]	; (8011aec <udp_input+0x21c>)
 80119f2:	681a      	ldr	r2, [r3, #0]
 80119f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119f6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80119f8:	4a3c      	ldr	r2, [pc, #240]	; (8011aec <udp_input+0x21c>)
 80119fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80119fc:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80119fe:	e008      	b.n	8011a12 <udp_input+0x142>
      }
    }

    prev = pcb;
 8011a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a02:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a06:	68db      	ldr	r3, [r3, #12]
 8011a08:	627b      	str	r3, [r7, #36]	; 0x24
 8011a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a0c:	2b00      	cmp	r3, #0
 8011a0e:	d1a7      	bne.n	8011960 <udp_input+0x90>
 8011a10:	e000      	b.n	8011a14 <udp_input+0x144>
        break;
 8011a12:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8011a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d101      	bne.n	8011a1e <udp_input+0x14e>
    pcb = uncon_pcb;
 8011a1a:	69fb      	ldr	r3, [r7, #28]
 8011a1c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8011a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a20:	2b00      	cmp	r3, #0
 8011a22:	d002      	beq.n	8011a2a <udp_input+0x15a>
    for_us = 1;
 8011a24:	2301      	movs	r3, #1
 8011a26:	76fb      	strb	r3, [r7, #27]
 8011a28:	e00a      	b.n	8011a40 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8011a2a:	683b      	ldr	r3, [r7, #0]
 8011a2c:	3304      	adds	r3, #4
 8011a2e:	681a      	ldr	r2, [r3, #0]
 8011a30:	4b2d      	ldr	r3, [pc, #180]	; (8011ae8 <udp_input+0x218>)
 8011a32:	695b      	ldr	r3, [r3, #20]
 8011a34:	429a      	cmp	r2, r3
 8011a36:	bf0c      	ite	eq
 8011a38:	2301      	moveq	r3, #1
 8011a3a:	2300      	movne	r3, #0
 8011a3c:	b2db      	uxtb	r3, r3
 8011a3e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011a40:	7efb      	ldrb	r3, [r7, #27]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	d041      	beq.n	8011aca <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8011a46:	2108      	movs	r1, #8
 8011a48:	6878      	ldr	r0, [r7, #4]
 8011a4a:	f7fa f8d5 	bl	800bbf8 <pbuf_remove_header>
 8011a4e:	4603      	mov	r3, r0
 8011a50:	2b00      	cmp	r3, #0
 8011a52:	d00a      	beq.n	8011a6a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8011a54:	4b20      	ldr	r3, [pc, #128]	; (8011ad8 <udp_input+0x208>)
 8011a56:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011a5a:	4925      	ldr	r1, [pc, #148]	; (8011af0 <udp_input+0x220>)
 8011a5c:	4820      	ldr	r0, [pc, #128]	; (8011ae0 <udp_input+0x210>)
 8011a5e:	f002 fe0b 	bl	8014678 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8011a62:	6878      	ldr	r0, [r7, #4]
 8011a64:	f7fa f94e 	bl	800bd04 <pbuf_free>
      goto end;
 8011a68:	e032      	b.n	8011ad0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	d012      	beq.n	8011a96 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a72:	699b      	ldr	r3, [r3, #24]
 8011a74:	2b00      	cmp	r3, #0
 8011a76:	d00a      	beq.n	8011a8e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7a:	699c      	ldr	r4, [r3, #24]
 8011a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a7e:	69d8      	ldr	r0, [r3, #28]
 8011a80:	8a3b      	ldrh	r3, [r7, #16]
 8011a82:	9300      	str	r3, [sp, #0]
 8011a84:	4b1b      	ldr	r3, [pc, #108]	; (8011af4 <udp_input+0x224>)
 8011a86:	687a      	ldr	r2, [r7, #4]
 8011a88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011a8a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011a8c:	e021      	b.n	8011ad2 <udp_input+0x202>
        pbuf_free(p);
 8011a8e:	6878      	ldr	r0, [r7, #4]
 8011a90:	f7fa f938 	bl	800bd04 <pbuf_free>
        goto end;
 8011a94:	e01c      	b.n	8011ad0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8011a96:	7cfb      	ldrb	r3, [r7, #19]
 8011a98:	2b00      	cmp	r3, #0
 8011a9a:	d112      	bne.n	8011ac2 <udp_input+0x1f2>
 8011a9c:	4b12      	ldr	r3, [pc, #72]	; (8011ae8 <udp_input+0x218>)
 8011a9e:	695b      	ldr	r3, [r3, #20]
 8011aa0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8011aa4:	2be0      	cmp	r3, #224	; 0xe0
 8011aa6:	d00c      	beq.n	8011ac2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011aa8:	4b0f      	ldr	r3, [pc, #60]	; (8011ae8 <udp_input+0x218>)
 8011aaa:	899b      	ldrh	r3, [r3, #12]
 8011aac:	3308      	adds	r3, #8
 8011aae:	b29b      	uxth	r3, r3
 8011ab0:	b21b      	sxth	r3, r3
 8011ab2:	4619      	mov	r1, r3
 8011ab4:	6878      	ldr	r0, [r7, #4]
 8011ab6:	f7fa f912 	bl	800bcde <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011aba:	2103      	movs	r1, #3
 8011abc:	6878      	ldr	r0, [r7, #4]
 8011abe:	f001 f89b 	bl	8012bf8 <icmp_dest_unreach>
      pbuf_free(p);
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f7fa f91e 	bl	800bd04 <pbuf_free>
  return;
 8011ac8:	e003      	b.n	8011ad2 <udp_input+0x202>
    pbuf_free(p);
 8011aca:	6878      	ldr	r0, [r7, #4]
 8011acc:	f7fa f91a 	bl	800bd04 <pbuf_free>
  return;
 8011ad0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8011ad2:	372c      	adds	r7, #44	; 0x2c
 8011ad4:	46bd      	mov	sp, r7
 8011ad6:	bd90      	pop	{r4, r7, pc}
 8011ad8:	080175d0 	.word	0x080175d0
 8011adc:	08017674 	.word	0x08017674
 8011ae0:	08017624 	.word	0x08017624
 8011ae4:	0801768c 	.word	0x0801768c
 8011ae8:	200098d4 	.word	0x200098d4
 8011aec:	2000f244 	.word	0x2000f244
 8011af0:	080176a8 	.word	0x080176a8
 8011af4:	200098e4 	.word	0x200098e4

08011af8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011af8:	b480      	push	{r7}
 8011afa:	b085      	sub	sp, #20
 8011afc:	af00      	add	r7, sp, #0
 8011afe:	6078      	str	r0, [r7, #4]
 8011b00:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d01e      	beq.n	8011b46 <udp_netif_ip_addr_changed+0x4e>
 8011b08:	687b      	ldr	r3, [r7, #4]
 8011b0a:	681b      	ldr	r3, [r3, #0]
 8011b0c:	2b00      	cmp	r3, #0
 8011b0e:	d01a      	beq.n	8011b46 <udp_netif_ip_addr_changed+0x4e>
 8011b10:	683b      	ldr	r3, [r7, #0]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d017      	beq.n	8011b46 <udp_netif_ip_addr_changed+0x4e>
 8011b16:	683b      	ldr	r3, [r7, #0]
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	2b00      	cmp	r3, #0
 8011b1c:	d013      	beq.n	8011b46 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011b1e:	4b0d      	ldr	r3, [pc, #52]	; (8011b54 <udp_netif_ip_addr_changed+0x5c>)
 8011b20:	681b      	ldr	r3, [r3, #0]
 8011b22:	60fb      	str	r3, [r7, #12]
 8011b24:	e00c      	b.n	8011b40 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011b26:	68fb      	ldr	r3, [r7, #12]
 8011b28:	681a      	ldr	r2, [r3, #0]
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	681b      	ldr	r3, [r3, #0]
 8011b2e:	429a      	cmp	r2, r3
 8011b30:	d103      	bne.n	8011b3a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011b32:	683b      	ldr	r3, [r7, #0]
 8011b34:	681a      	ldr	r2, [r3, #0]
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011b3a:	68fb      	ldr	r3, [r7, #12]
 8011b3c:	68db      	ldr	r3, [r3, #12]
 8011b3e:	60fb      	str	r3, [r7, #12]
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	d1ef      	bne.n	8011b26 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011b46:	bf00      	nop
 8011b48:	3714      	adds	r7, #20
 8011b4a:	46bd      	mov	sp, r7
 8011b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b50:	4770      	bx	lr
 8011b52:	bf00      	nop
 8011b54:	2000f244 	.word	0x2000f244

08011b58 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8011b58:	b580      	push	{r7, lr}
 8011b5a:	b082      	sub	sp, #8
 8011b5c:	af00      	add	r7, sp, #0
 8011b5e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8011b60:	4915      	ldr	r1, [pc, #84]	; (8011bb8 <etharp_free_entry+0x60>)
 8011b62:	687a      	ldr	r2, [r7, #4]
 8011b64:	4613      	mov	r3, r2
 8011b66:	005b      	lsls	r3, r3, #1
 8011b68:	4413      	add	r3, r2
 8011b6a:	00db      	lsls	r3, r3, #3
 8011b6c:	440b      	add	r3, r1
 8011b6e:	681b      	ldr	r3, [r3, #0]
 8011b70:	2b00      	cmp	r3, #0
 8011b72:	d013      	beq.n	8011b9c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8011b74:	4910      	ldr	r1, [pc, #64]	; (8011bb8 <etharp_free_entry+0x60>)
 8011b76:	687a      	ldr	r2, [r7, #4]
 8011b78:	4613      	mov	r3, r2
 8011b7a:	005b      	lsls	r3, r3, #1
 8011b7c:	4413      	add	r3, r2
 8011b7e:	00db      	lsls	r3, r3, #3
 8011b80:	440b      	add	r3, r1
 8011b82:	681b      	ldr	r3, [r3, #0]
 8011b84:	4618      	mov	r0, r3
 8011b86:	f7fa f8bd 	bl	800bd04 <pbuf_free>
    arp_table[i].q = NULL;
 8011b8a:	490b      	ldr	r1, [pc, #44]	; (8011bb8 <etharp_free_entry+0x60>)
 8011b8c:	687a      	ldr	r2, [r7, #4]
 8011b8e:	4613      	mov	r3, r2
 8011b90:	005b      	lsls	r3, r3, #1
 8011b92:	4413      	add	r3, r2
 8011b94:	00db      	lsls	r3, r3, #3
 8011b96:	440b      	add	r3, r1
 8011b98:	2200      	movs	r2, #0
 8011b9a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8011b9c:	4906      	ldr	r1, [pc, #24]	; (8011bb8 <etharp_free_entry+0x60>)
 8011b9e:	687a      	ldr	r2, [r7, #4]
 8011ba0:	4613      	mov	r3, r2
 8011ba2:	005b      	lsls	r3, r3, #1
 8011ba4:	4413      	add	r3, r2
 8011ba6:	00db      	lsls	r3, r3, #3
 8011ba8:	440b      	add	r3, r1
 8011baa:	3314      	adds	r3, #20
 8011bac:	2200      	movs	r2, #0
 8011bae:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8011bb0:	bf00      	nop
 8011bb2:	3708      	adds	r7, #8
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}
 8011bb8:	2000f248 	.word	0x2000f248

08011bbc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b082      	sub	sp, #8
 8011bc0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011bc2:	2300      	movs	r3, #0
 8011bc4:	607b      	str	r3, [r7, #4]
 8011bc6:	e096      	b.n	8011cf6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8011bc8:	494f      	ldr	r1, [pc, #316]	; (8011d08 <etharp_tmr+0x14c>)
 8011bca:	687a      	ldr	r2, [r7, #4]
 8011bcc:	4613      	mov	r3, r2
 8011bce:	005b      	lsls	r3, r3, #1
 8011bd0:	4413      	add	r3, r2
 8011bd2:	00db      	lsls	r3, r3, #3
 8011bd4:	440b      	add	r3, r1
 8011bd6:	3314      	adds	r3, #20
 8011bd8:	781b      	ldrb	r3, [r3, #0]
 8011bda:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8011bdc:	78fb      	ldrb	r3, [r7, #3]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	f000 8086 	beq.w	8011cf0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8011be4:	4948      	ldr	r1, [pc, #288]	; (8011d08 <etharp_tmr+0x14c>)
 8011be6:	687a      	ldr	r2, [r7, #4]
 8011be8:	4613      	mov	r3, r2
 8011bea:	005b      	lsls	r3, r3, #1
 8011bec:	4413      	add	r3, r2
 8011bee:	00db      	lsls	r3, r3, #3
 8011bf0:	440b      	add	r3, r1
 8011bf2:	3312      	adds	r3, #18
 8011bf4:	881b      	ldrh	r3, [r3, #0]
 8011bf6:	3301      	adds	r3, #1
 8011bf8:	b298      	uxth	r0, r3
 8011bfa:	4943      	ldr	r1, [pc, #268]	; (8011d08 <etharp_tmr+0x14c>)
 8011bfc:	687a      	ldr	r2, [r7, #4]
 8011bfe:	4613      	mov	r3, r2
 8011c00:	005b      	lsls	r3, r3, #1
 8011c02:	4413      	add	r3, r2
 8011c04:	00db      	lsls	r3, r3, #3
 8011c06:	440b      	add	r3, r1
 8011c08:	3312      	adds	r3, #18
 8011c0a:	4602      	mov	r2, r0
 8011c0c:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011c0e:	493e      	ldr	r1, [pc, #248]	; (8011d08 <etharp_tmr+0x14c>)
 8011c10:	687a      	ldr	r2, [r7, #4]
 8011c12:	4613      	mov	r3, r2
 8011c14:	005b      	lsls	r3, r3, #1
 8011c16:	4413      	add	r3, r2
 8011c18:	00db      	lsls	r3, r3, #3
 8011c1a:	440b      	add	r3, r1
 8011c1c:	3312      	adds	r3, #18
 8011c1e:	881b      	ldrh	r3, [r3, #0]
 8011c20:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8011c24:	d215      	bcs.n	8011c52 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011c26:	4938      	ldr	r1, [pc, #224]	; (8011d08 <etharp_tmr+0x14c>)
 8011c28:	687a      	ldr	r2, [r7, #4]
 8011c2a:	4613      	mov	r3, r2
 8011c2c:	005b      	lsls	r3, r3, #1
 8011c2e:	4413      	add	r3, r2
 8011c30:	00db      	lsls	r3, r3, #3
 8011c32:	440b      	add	r3, r1
 8011c34:	3314      	adds	r3, #20
 8011c36:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8011c38:	2b01      	cmp	r3, #1
 8011c3a:	d10e      	bne.n	8011c5a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8011c3c:	4932      	ldr	r1, [pc, #200]	; (8011d08 <etharp_tmr+0x14c>)
 8011c3e:	687a      	ldr	r2, [r7, #4]
 8011c40:	4613      	mov	r3, r2
 8011c42:	005b      	lsls	r3, r3, #1
 8011c44:	4413      	add	r3, r2
 8011c46:	00db      	lsls	r3, r3, #3
 8011c48:	440b      	add	r3, r1
 8011c4a:	3312      	adds	r3, #18
 8011c4c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8011c4e:	2b04      	cmp	r3, #4
 8011c50:	d903      	bls.n	8011c5a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8011c52:	6878      	ldr	r0, [r7, #4]
 8011c54:	f7ff ff80 	bl	8011b58 <etharp_free_entry>
 8011c58:	e04a      	b.n	8011cf0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8011c5a:	492b      	ldr	r1, [pc, #172]	; (8011d08 <etharp_tmr+0x14c>)
 8011c5c:	687a      	ldr	r2, [r7, #4]
 8011c5e:	4613      	mov	r3, r2
 8011c60:	005b      	lsls	r3, r3, #1
 8011c62:	4413      	add	r3, r2
 8011c64:	00db      	lsls	r3, r3, #3
 8011c66:	440b      	add	r3, r1
 8011c68:	3314      	adds	r3, #20
 8011c6a:	781b      	ldrb	r3, [r3, #0]
 8011c6c:	2b03      	cmp	r3, #3
 8011c6e:	d10a      	bne.n	8011c86 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8011c70:	4925      	ldr	r1, [pc, #148]	; (8011d08 <etharp_tmr+0x14c>)
 8011c72:	687a      	ldr	r2, [r7, #4]
 8011c74:	4613      	mov	r3, r2
 8011c76:	005b      	lsls	r3, r3, #1
 8011c78:	4413      	add	r3, r2
 8011c7a:	00db      	lsls	r3, r3, #3
 8011c7c:	440b      	add	r3, r1
 8011c7e:	3314      	adds	r3, #20
 8011c80:	2204      	movs	r2, #4
 8011c82:	701a      	strb	r2, [r3, #0]
 8011c84:	e034      	b.n	8011cf0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8011c86:	4920      	ldr	r1, [pc, #128]	; (8011d08 <etharp_tmr+0x14c>)
 8011c88:	687a      	ldr	r2, [r7, #4]
 8011c8a:	4613      	mov	r3, r2
 8011c8c:	005b      	lsls	r3, r3, #1
 8011c8e:	4413      	add	r3, r2
 8011c90:	00db      	lsls	r3, r3, #3
 8011c92:	440b      	add	r3, r1
 8011c94:	3314      	adds	r3, #20
 8011c96:	781b      	ldrb	r3, [r3, #0]
 8011c98:	2b04      	cmp	r3, #4
 8011c9a:	d10a      	bne.n	8011cb2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8011c9c:	491a      	ldr	r1, [pc, #104]	; (8011d08 <etharp_tmr+0x14c>)
 8011c9e:	687a      	ldr	r2, [r7, #4]
 8011ca0:	4613      	mov	r3, r2
 8011ca2:	005b      	lsls	r3, r3, #1
 8011ca4:	4413      	add	r3, r2
 8011ca6:	00db      	lsls	r3, r3, #3
 8011ca8:	440b      	add	r3, r1
 8011caa:	3314      	adds	r3, #20
 8011cac:	2202      	movs	r2, #2
 8011cae:	701a      	strb	r2, [r3, #0]
 8011cb0:	e01e      	b.n	8011cf0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8011cb2:	4915      	ldr	r1, [pc, #84]	; (8011d08 <etharp_tmr+0x14c>)
 8011cb4:	687a      	ldr	r2, [r7, #4]
 8011cb6:	4613      	mov	r3, r2
 8011cb8:	005b      	lsls	r3, r3, #1
 8011cba:	4413      	add	r3, r2
 8011cbc:	00db      	lsls	r3, r3, #3
 8011cbe:	440b      	add	r3, r1
 8011cc0:	3314      	adds	r3, #20
 8011cc2:	781b      	ldrb	r3, [r3, #0]
 8011cc4:	2b01      	cmp	r3, #1
 8011cc6:	d113      	bne.n	8011cf0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8011cc8:	490f      	ldr	r1, [pc, #60]	; (8011d08 <etharp_tmr+0x14c>)
 8011cca:	687a      	ldr	r2, [r7, #4]
 8011ccc:	4613      	mov	r3, r2
 8011cce:	005b      	lsls	r3, r3, #1
 8011cd0:	4413      	add	r3, r2
 8011cd2:	00db      	lsls	r3, r3, #3
 8011cd4:	440b      	add	r3, r1
 8011cd6:	3308      	adds	r3, #8
 8011cd8:	6818      	ldr	r0, [r3, #0]
 8011cda:	687a      	ldr	r2, [r7, #4]
 8011cdc:	4613      	mov	r3, r2
 8011cde:	005b      	lsls	r3, r3, #1
 8011ce0:	4413      	add	r3, r2
 8011ce2:	00db      	lsls	r3, r3, #3
 8011ce4:	4a08      	ldr	r2, [pc, #32]	; (8011d08 <etharp_tmr+0x14c>)
 8011ce6:	4413      	add	r3, r2
 8011ce8:	3304      	adds	r3, #4
 8011cea:	4619      	mov	r1, r3
 8011cec:	f000 fe6e 	bl	80129cc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011cf0:	687b      	ldr	r3, [r7, #4]
 8011cf2:	3301      	adds	r3, #1
 8011cf4:	607b      	str	r3, [r7, #4]
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	2b09      	cmp	r3, #9
 8011cfa:	f77f af65 	ble.w	8011bc8 <etharp_tmr+0xc>
      }
    }
  }
}
 8011cfe:	bf00      	nop
 8011d00:	bf00      	nop
 8011d02:	3708      	adds	r7, #8
 8011d04:	46bd      	mov	sp, r7
 8011d06:	bd80      	pop	{r7, pc}
 8011d08:	2000f248 	.word	0x2000f248

08011d0c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8011d0c:	b580      	push	{r7, lr}
 8011d0e:	b08a      	sub	sp, #40	; 0x28
 8011d10:	af00      	add	r7, sp, #0
 8011d12:	60f8      	str	r0, [r7, #12]
 8011d14:	460b      	mov	r3, r1
 8011d16:	607a      	str	r2, [r7, #4]
 8011d18:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8011d1a:	230a      	movs	r3, #10
 8011d1c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8011d1e:	230a      	movs	r3, #10
 8011d20:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8011d22:	230a      	movs	r3, #10
 8011d24:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8011d26:	2300      	movs	r3, #0
 8011d28:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8011d2a:	230a      	movs	r3, #10
 8011d2c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8011d2e:	2300      	movs	r3, #0
 8011d30:	83bb      	strh	r3, [r7, #28]
 8011d32:	2300      	movs	r3, #0
 8011d34:	837b      	strh	r3, [r7, #26]
 8011d36:	2300      	movs	r3, #0
 8011d38:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011d3a:	2300      	movs	r3, #0
 8011d3c:	843b      	strh	r3, [r7, #32]
 8011d3e:	e0ae      	b.n	8011e9e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8011d40:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d44:	49a6      	ldr	r1, [pc, #664]	; (8011fe0 <etharp_find_entry+0x2d4>)
 8011d46:	4613      	mov	r3, r2
 8011d48:	005b      	lsls	r3, r3, #1
 8011d4a:	4413      	add	r3, r2
 8011d4c:	00db      	lsls	r3, r3, #3
 8011d4e:	440b      	add	r3, r1
 8011d50:	3314      	adds	r3, #20
 8011d52:	781b      	ldrb	r3, [r3, #0]
 8011d54:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8011d56:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011d5a:	2b0a      	cmp	r3, #10
 8011d5c:	d105      	bne.n	8011d6a <etharp_find_entry+0x5e>
 8011d5e:	7dfb      	ldrb	r3, [r7, #23]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d102      	bne.n	8011d6a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8011d64:	8c3b      	ldrh	r3, [r7, #32]
 8011d66:	847b      	strh	r3, [r7, #34]	; 0x22
 8011d68:	e095      	b.n	8011e96 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8011d6a:	7dfb      	ldrb	r3, [r7, #23]
 8011d6c:	2b00      	cmp	r3, #0
 8011d6e:	f000 8092 	beq.w	8011e96 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8011d72:	7dfb      	ldrb	r3, [r7, #23]
 8011d74:	2b01      	cmp	r3, #1
 8011d76:	d009      	beq.n	8011d8c <etharp_find_entry+0x80>
 8011d78:	7dfb      	ldrb	r3, [r7, #23]
 8011d7a:	2b01      	cmp	r3, #1
 8011d7c:	d806      	bhi.n	8011d8c <etharp_find_entry+0x80>
 8011d7e:	4b99      	ldr	r3, [pc, #612]	; (8011fe4 <etharp_find_entry+0x2d8>)
 8011d80:	f240 1223 	movw	r2, #291	; 0x123
 8011d84:	4998      	ldr	r1, [pc, #608]	; (8011fe8 <etharp_find_entry+0x2dc>)
 8011d86:	4899      	ldr	r0, [pc, #612]	; (8011fec <etharp_find_entry+0x2e0>)
 8011d88:	f002 fc76 	bl	8014678 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8011d8c:	68fb      	ldr	r3, [r7, #12]
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d020      	beq.n	8011dd4 <etharp_find_entry+0xc8>
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	6819      	ldr	r1, [r3, #0]
 8011d96:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011d9a:	4891      	ldr	r0, [pc, #580]	; (8011fe0 <etharp_find_entry+0x2d4>)
 8011d9c:	4613      	mov	r3, r2
 8011d9e:	005b      	lsls	r3, r3, #1
 8011da0:	4413      	add	r3, r2
 8011da2:	00db      	lsls	r3, r3, #3
 8011da4:	4403      	add	r3, r0
 8011da6:	3304      	adds	r3, #4
 8011da8:	681b      	ldr	r3, [r3, #0]
 8011daa:	4299      	cmp	r1, r3
 8011dac:	d112      	bne.n	8011dd4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8011dae:	687b      	ldr	r3, [r7, #4]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d00c      	beq.n	8011dce <etharp_find_entry+0xc2>
 8011db4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011db8:	4989      	ldr	r1, [pc, #548]	; (8011fe0 <etharp_find_entry+0x2d4>)
 8011dba:	4613      	mov	r3, r2
 8011dbc:	005b      	lsls	r3, r3, #1
 8011dbe:	4413      	add	r3, r2
 8011dc0:	00db      	lsls	r3, r3, #3
 8011dc2:	440b      	add	r3, r1
 8011dc4:	3308      	adds	r3, #8
 8011dc6:	681b      	ldr	r3, [r3, #0]
 8011dc8:	687a      	ldr	r2, [r7, #4]
 8011dca:	429a      	cmp	r2, r3
 8011dcc:	d102      	bne.n	8011dd4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8011dce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011dd2:	e100      	b.n	8011fd6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8011dd4:	7dfb      	ldrb	r3, [r7, #23]
 8011dd6:	2b01      	cmp	r3, #1
 8011dd8:	d140      	bne.n	8011e5c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8011dda:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011dde:	4980      	ldr	r1, [pc, #512]	; (8011fe0 <etharp_find_entry+0x2d4>)
 8011de0:	4613      	mov	r3, r2
 8011de2:	005b      	lsls	r3, r3, #1
 8011de4:	4413      	add	r3, r2
 8011de6:	00db      	lsls	r3, r3, #3
 8011de8:	440b      	add	r3, r1
 8011dea:	681b      	ldr	r3, [r3, #0]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d01a      	beq.n	8011e26 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8011df0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011df4:	497a      	ldr	r1, [pc, #488]	; (8011fe0 <etharp_find_entry+0x2d4>)
 8011df6:	4613      	mov	r3, r2
 8011df8:	005b      	lsls	r3, r3, #1
 8011dfa:	4413      	add	r3, r2
 8011dfc:	00db      	lsls	r3, r3, #3
 8011dfe:	440b      	add	r3, r1
 8011e00:	3312      	adds	r3, #18
 8011e02:	881b      	ldrh	r3, [r3, #0]
 8011e04:	8bba      	ldrh	r2, [r7, #28]
 8011e06:	429a      	cmp	r2, r3
 8011e08:	d845      	bhi.n	8011e96 <etharp_find_entry+0x18a>
            old_queue = i;
 8011e0a:	8c3b      	ldrh	r3, [r7, #32]
 8011e0c:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8011e0e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e12:	4973      	ldr	r1, [pc, #460]	; (8011fe0 <etharp_find_entry+0x2d4>)
 8011e14:	4613      	mov	r3, r2
 8011e16:	005b      	lsls	r3, r3, #1
 8011e18:	4413      	add	r3, r2
 8011e1a:	00db      	lsls	r3, r3, #3
 8011e1c:	440b      	add	r3, r1
 8011e1e:	3312      	adds	r3, #18
 8011e20:	881b      	ldrh	r3, [r3, #0]
 8011e22:	83bb      	strh	r3, [r7, #28]
 8011e24:	e037      	b.n	8011e96 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8011e26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e2a:	496d      	ldr	r1, [pc, #436]	; (8011fe0 <etharp_find_entry+0x2d4>)
 8011e2c:	4613      	mov	r3, r2
 8011e2e:	005b      	lsls	r3, r3, #1
 8011e30:	4413      	add	r3, r2
 8011e32:	00db      	lsls	r3, r3, #3
 8011e34:	440b      	add	r3, r1
 8011e36:	3312      	adds	r3, #18
 8011e38:	881b      	ldrh	r3, [r3, #0]
 8011e3a:	8b7a      	ldrh	r2, [r7, #26]
 8011e3c:	429a      	cmp	r2, r3
 8011e3e:	d82a      	bhi.n	8011e96 <etharp_find_entry+0x18a>
            old_pending = i;
 8011e40:	8c3b      	ldrh	r3, [r7, #32]
 8011e42:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8011e44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e48:	4965      	ldr	r1, [pc, #404]	; (8011fe0 <etharp_find_entry+0x2d4>)
 8011e4a:	4613      	mov	r3, r2
 8011e4c:	005b      	lsls	r3, r3, #1
 8011e4e:	4413      	add	r3, r2
 8011e50:	00db      	lsls	r3, r3, #3
 8011e52:	440b      	add	r3, r1
 8011e54:	3312      	adds	r3, #18
 8011e56:	881b      	ldrh	r3, [r3, #0]
 8011e58:	837b      	strh	r3, [r7, #26]
 8011e5a:	e01c      	b.n	8011e96 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8011e5c:	7dfb      	ldrb	r3, [r7, #23]
 8011e5e:	2b01      	cmp	r3, #1
 8011e60:	d919      	bls.n	8011e96 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8011e62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e66:	495e      	ldr	r1, [pc, #376]	; (8011fe0 <etharp_find_entry+0x2d4>)
 8011e68:	4613      	mov	r3, r2
 8011e6a:	005b      	lsls	r3, r3, #1
 8011e6c:	4413      	add	r3, r2
 8011e6e:	00db      	lsls	r3, r3, #3
 8011e70:	440b      	add	r3, r1
 8011e72:	3312      	adds	r3, #18
 8011e74:	881b      	ldrh	r3, [r3, #0]
 8011e76:	8b3a      	ldrh	r2, [r7, #24]
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	d80c      	bhi.n	8011e96 <etharp_find_entry+0x18a>
            old_stable = i;
 8011e7c:	8c3b      	ldrh	r3, [r7, #32]
 8011e7e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8011e80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011e84:	4956      	ldr	r1, [pc, #344]	; (8011fe0 <etharp_find_entry+0x2d4>)
 8011e86:	4613      	mov	r3, r2
 8011e88:	005b      	lsls	r3, r3, #1
 8011e8a:	4413      	add	r3, r2
 8011e8c:	00db      	lsls	r3, r3, #3
 8011e8e:	440b      	add	r3, r1
 8011e90:	3312      	adds	r3, #18
 8011e92:	881b      	ldrh	r3, [r3, #0]
 8011e94:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8011e96:	8c3b      	ldrh	r3, [r7, #32]
 8011e98:	3301      	adds	r3, #1
 8011e9a:	b29b      	uxth	r3, r3
 8011e9c:	843b      	strh	r3, [r7, #32]
 8011e9e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011ea2:	2b09      	cmp	r3, #9
 8011ea4:	f77f af4c 	ble.w	8011d40 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8011ea8:	7afb      	ldrb	r3, [r7, #11]
 8011eaa:	f003 0302 	and.w	r3, r3, #2
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d108      	bne.n	8011ec4 <etharp_find_entry+0x1b8>
 8011eb2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011eb6:	2b0a      	cmp	r3, #10
 8011eb8:	d107      	bne.n	8011eca <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8011eba:	7afb      	ldrb	r3, [r7, #11]
 8011ebc:	f003 0301 	and.w	r3, r3, #1
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d102      	bne.n	8011eca <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8011ec4:	f04f 33ff 	mov.w	r3, #4294967295
 8011ec8:	e085      	b.n	8011fd6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8011eca:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8011ece:	2b09      	cmp	r3, #9
 8011ed0:	dc02      	bgt.n	8011ed8 <etharp_find_entry+0x1cc>
    i = empty;
 8011ed2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011ed4:	843b      	strh	r3, [r7, #32]
 8011ed6:	e039      	b.n	8011f4c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8011ed8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8011edc:	2b09      	cmp	r3, #9
 8011ede:	dc14      	bgt.n	8011f0a <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8011ee0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011ee2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8011ee4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011ee8:	493d      	ldr	r1, [pc, #244]	; (8011fe0 <etharp_find_entry+0x2d4>)
 8011eea:	4613      	mov	r3, r2
 8011eec:	005b      	lsls	r3, r3, #1
 8011eee:	4413      	add	r3, r2
 8011ef0:	00db      	lsls	r3, r3, #3
 8011ef2:	440b      	add	r3, r1
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d018      	beq.n	8011f2c <etharp_find_entry+0x220>
 8011efa:	4b3a      	ldr	r3, [pc, #232]	; (8011fe4 <etharp_find_entry+0x2d8>)
 8011efc:	f240 126d 	movw	r2, #365	; 0x16d
 8011f00:	493b      	ldr	r1, [pc, #236]	; (8011ff0 <etharp_find_entry+0x2e4>)
 8011f02:	483a      	ldr	r0, [pc, #232]	; (8011fec <etharp_find_entry+0x2e0>)
 8011f04:	f002 fbb8 	bl	8014678 <iprintf>
 8011f08:	e010      	b.n	8011f2c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8011f0a:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8011f0e:	2b09      	cmp	r3, #9
 8011f10:	dc02      	bgt.n	8011f18 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8011f12:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8011f14:	843b      	strh	r3, [r7, #32]
 8011f16:	e009      	b.n	8011f2c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8011f18:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8011f1c:	2b09      	cmp	r3, #9
 8011f1e:	dc02      	bgt.n	8011f26 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8011f20:	8bfb      	ldrh	r3, [r7, #30]
 8011f22:	843b      	strh	r3, [r7, #32]
 8011f24:	e002      	b.n	8011f2c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8011f26:	f04f 33ff 	mov.w	r3, #4294967295
 8011f2a:	e054      	b.n	8011fd6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011f2c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011f30:	2b09      	cmp	r3, #9
 8011f32:	dd06      	ble.n	8011f42 <etharp_find_entry+0x236>
 8011f34:	4b2b      	ldr	r3, [pc, #172]	; (8011fe4 <etharp_find_entry+0x2d8>)
 8011f36:	f240 127f 	movw	r2, #383	; 0x17f
 8011f3a:	492e      	ldr	r1, [pc, #184]	; (8011ff4 <etharp_find_entry+0x2e8>)
 8011f3c:	482b      	ldr	r0, [pc, #172]	; (8011fec <etharp_find_entry+0x2e0>)
 8011f3e:	f002 fb9b 	bl	8014678 <iprintf>
    etharp_free_entry(i);
 8011f42:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011f46:	4618      	mov	r0, r3
 8011f48:	f7ff fe06 	bl	8011b58 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8011f4c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8011f50:	2b09      	cmp	r3, #9
 8011f52:	dd06      	ble.n	8011f62 <etharp_find_entry+0x256>
 8011f54:	4b23      	ldr	r3, [pc, #140]	; (8011fe4 <etharp_find_entry+0x2d8>)
 8011f56:	f240 1283 	movw	r2, #387	; 0x183
 8011f5a:	4926      	ldr	r1, [pc, #152]	; (8011ff4 <etharp_find_entry+0x2e8>)
 8011f5c:	4823      	ldr	r0, [pc, #140]	; (8011fec <etharp_find_entry+0x2e0>)
 8011f5e:	f002 fb8b 	bl	8014678 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8011f62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f66:	491e      	ldr	r1, [pc, #120]	; (8011fe0 <etharp_find_entry+0x2d4>)
 8011f68:	4613      	mov	r3, r2
 8011f6a:	005b      	lsls	r3, r3, #1
 8011f6c:	4413      	add	r3, r2
 8011f6e:	00db      	lsls	r3, r3, #3
 8011f70:	440b      	add	r3, r1
 8011f72:	3314      	adds	r3, #20
 8011f74:	781b      	ldrb	r3, [r3, #0]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d006      	beq.n	8011f88 <etharp_find_entry+0x27c>
 8011f7a:	4b1a      	ldr	r3, [pc, #104]	; (8011fe4 <etharp_find_entry+0x2d8>)
 8011f7c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8011f80:	491d      	ldr	r1, [pc, #116]	; (8011ff8 <etharp_find_entry+0x2ec>)
 8011f82:	481a      	ldr	r0, [pc, #104]	; (8011fec <etharp_find_entry+0x2e0>)
 8011f84:	f002 fb78 	bl	8014678 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8011f88:	68fb      	ldr	r3, [r7, #12]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d00b      	beq.n	8011fa6 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8011f8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	6819      	ldr	r1, [r3, #0]
 8011f96:	4812      	ldr	r0, [pc, #72]	; (8011fe0 <etharp_find_entry+0x2d4>)
 8011f98:	4613      	mov	r3, r2
 8011f9a:	005b      	lsls	r3, r3, #1
 8011f9c:	4413      	add	r3, r2
 8011f9e:	00db      	lsls	r3, r3, #3
 8011fa0:	4403      	add	r3, r0
 8011fa2:	3304      	adds	r3, #4
 8011fa4:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8011fa6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011faa:	490d      	ldr	r1, [pc, #52]	; (8011fe0 <etharp_find_entry+0x2d4>)
 8011fac:	4613      	mov	r3, r2
 8011fae:	005b      	lsls	r3, r3, #1
 8011fb0:	4413      	add	r3, r2
 8011fb2:	00db      	lsls	r3, r3, #3
 8011fb4:	440b      	add	r3, r1
 8011fb6:	3312      	adds	r3, #18
 8011fb8:	2200      	movs	r2, #0
 8011fba:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8011fbc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8011fc0:	4907      	ldr	r1, [pc, #28]	; (8011fe0 <etharp_find_entry+0x2d4>)
 8011fc2:	4613      	mov	r3, r2
 8011fc4:	005b      	lsls	r3, r3, #1
 8011fc6:	4413      	add	r3, r2
 8011fc8:	00db      	lsls	r3, r3, #3
 8011fca:	440b      	add	r3, r1
 8011fcc:	3308      	adds	r3, #8
 8011fce:	687a      	ldr	r2, [r7, #4]
 8011fd0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8011fd2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	3728      	adds	r7, #40	; 0x28
 8011fda:	46bd      	mov	sp, r7
 8011fdc:	bd80      	pop	{r7, pc}
 8011fde:	bf00      	nop
 8011fe0:	2000f248 	.word	0x2000f248
 8011fe4:	08017934 	.word	0x08017934
 8011fe8:	0801796c 	.word	0x0801796c
 8011fec:	080179ac 	.word	0x080179ac
 8011ff0:	080179d4 	.word	0x080179d4
 8011ff4:	080179ec 	.word	0x080179ec
 8011ff8:	08017a00 	.word	0x08017a00

08011ffc <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8011ffc:	b580      	push	{r7, lr}
 8011ffe:	b088      	sub	sp, #32
 8012000:	af02      	add	r7, sp, #8
 8012002:	60f8      	str	r0, [r7, #12]
 8012004:	60b9      	str	r1, [r7, #8]
 8012006:	607a      	str	r2, [r7, #4]
 8012008:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8012010:	2b06      	cmp	r3, #6
 8012012:	d006      	beq.n	8012022 <etharp_update_arp_entry+0x26>
 8012014:	4b48      	ldr	r3, [pc, #288]	; (8012138 <etharp_update_arp_entry+0x13c>)
 8012016:	f240 12a9 	movw	r2, #425	; 0x1a9
 801201a:	4948      	ldr	r1, [pc, #288]	; (801213c <etharp_update_arp_entry+0x140>)
 801201c:	4848      	ldr	r0, [pc, #288]	; (8012140 <etharp_update_arp_entry+0x144>)
 801201e:	f002 fb2b 	bl	8014678 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8012022:	68bb      	ldr	r3, [r7, #8]
 8012024:	2b00      	cmp	r3, #0
 8012026:	d012      	beq.n	801204e <etharp_update_arp_entry+0x52>
 8012028:	68bb      	ldr	r3, [r7, #8]
 801202a:	681b      	ldr	r3, [r3, #0]
 801202c:	2b00      	cmp	r3, #0
 801202e:	d00e      	beq.n	801204e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8012030:	68bb      	ldr	r3, [r7, #8]
 8012032:	681b      	ldr	r3, [r3, #0]
 8012034:	68f9      	ldr	r1, [r7, #12]
 8012036:	4618      	mov	r0, r3
 8012038:	f001 f8fe 	bl	8013238 <ip4_addr_isbroadcast_u32>
 801203c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801203e:	2b00      	cmp	r3, #0
 8012040:	d105      	bne.n	801204e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8012042:	68bb      	ldr	r3, [r7, #8]
 8012044:	681b      	ldr	r3, [r3, #0]
 8012046:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801204a:	2be0      	cmp	r3, #224	; 0xe0
 801204c:	d102      	bne.n	8012054 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801204e:	f06f 030f 	mvn.w	r3, #15
 8012052:	e06c      	b.n	801212e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8012054:	78fb      	ldrb	r3, [r7, #3]
 8012056:	68fa      	ldr	r2, [r7, #12]
 8012058:	4619      	mov	r1, r3
 801205a:	68b8      	ldr	r0, [r7, #8]
 801205c:	f7ff fe56 	bl	8011d0c <etharp_find_entry>
 8012060:	4603      	mov	r3, r0
 8012062:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8012064:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8012068:	2b00      	cmp	r3, #0
 801206a:	da02      	bge.n	8012072 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801206c:	8afb      	ldrh	r3, [r7, #22]
 801206e:	b25b      	sxtb	r3, r3
 8012070:	e05d      	b.n	801212e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8012072:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012076:	4933      	ldr	r1, [pc, #204]	; (8012144 <etharp_update_arp_entry+0x148>)
 8012078:	4613      	mov	r3, r2
 801207a:	005b      	lsls	r3, r3, #1
 801207c:	4413      	add	r3, r2
 801207e:	00db      	lsls	r3, r3, #3
 8012080:	440b      	add	r3, r1
 8012082:	3314      	adds	r3, #20
 8012084:	2202      	movs	r2, #2
 8012086:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8012088:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801208c:	492d      	ldr	r1, [pc, #180]	; (8012144 <etharp_update_arp_entry+0x148>)
 801208e:	4613      	mov	r3, r2
 8012090:	005b      	lsls	r3, r3, #1
 8012092:	4413      	add	r3, r2
 8012094:	00db      	lsls	r3, r3, #3
 8012096:	440b      	add	r3, r1
 8012098:	3308      	adds	r3, #8
 801209a:	68fa      	ldr	r2, [r7, #12]
 801209c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801209e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80120a2:	4613      	mov	r3, r2
 80120a4:	005b      	lsls	r3, r3, #1
 80120a6:	4413      	add	r3, r2
 80120a8:	00db      	lsls	r3, r3, #3
 80120aa:	3308      	adds	r3, #8
 80120ac:	4a25      	ldr	r2, [pc, #148]	; (8012144 <etharp_update_arp_entry+0x148>)
 80120ae:	4413      	add	r3, r2
 80120b0:	3304      	adds	r3, #4
 80120b2:	2206      	movs	r2, #6
 80120b4:	6879      	ldr	r1, [r7, #4]
 80120b6:	4618      	mov	r0, r3
 80120b8:	f002 fa33 	bl	8014522 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80120bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80120c0:	4920      	ldr	r1, [pc, #128]	; (8012144 <etharp_update_arp_entry+0x148>)
 80120c2:	4613      	mov	r3, r2
 80120c4:	005b      	lsls	r3, r3, #1
 80120c6:	4413      	add	r3, r2
 80120c8:	00db      	lsls	r3, r3, #3
 80120ca:	440b      	add	r3, r1
 80120cc:	3312      	adds	r3, #18
 80120ce:	2200      	movs	r2, #0
 80120d0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80120d2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80120d6:	491b      	ldr	r1, [pc, #108]	; (8012144 <etharp_update_arp_entry+0x148>)
 80120d8:	4613      	mov	r3, r2
 80120da:	005b      	lsls	r3, r3, #1
 80120dc:	4413      	add	r3, r2
 80120de:	00db      	lsls	r3, r3, #3
 80120e0:	440b      	add	r3, r1
 80120e2:	681b      	ldr	r3, [r3, #0]
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d021      	beq.n	801212c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80120e8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80120ec:	4915      	ldr	r1, [pc, #84]	; (8012144 <etharp_update_arp_entry+0x148>)
 80120ee:	4613      	mov	r3, r2
 80120f0:	005b      	lsls	r3, r3, #1
 80120f2:	4413      	add	r3, r2
 80120f4:	00db      	lsls	r3, r3, #3
 80120f6:	440b      	add	r3, r1
 80120f8:	681b      	ldr	r3, [r3, #0]
 80120fa:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80120fc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8012100:	4910      	ldr	r1, [pc, #64]	; (8012144 <etharp_update_arp_entry+0x148>)
 8012102:	4613      	mov	r3, r2
 8012104:	005b      	lsls	r3, r3, #1
 8012106:	4413      	add	r3, r2
 8012108:	00db      	lsls	r3, r3, #3
 801210a:	440b      	add	r3, r1
 801210c:	2200      	movs	r2, #0
 801210e:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8012116:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801211a:	9300      	str	r3, [sp, #0]
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6939      	ldr	r1, [r7, #16]
 8012120:	68f8      	ldr	r0, [r7, #12]
 8012122:	f001 ff97 	bl	8014054 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8012126:	6938      	ldr	r0, [r7, #16]
 8012128:	f7f9 fdec 	bl	800bd04 <pbuf_free>
  }
  return ERR_OK;
 801212c:	2300      	movs	r3, #0
}
 801212e:	4618      	mov	r0, r3
 8012130:	3718      	adds	r7, #24
 8012132:	46bd      	mov	sp, r7
 8012134:	bd80      	pop	{r7, pc}
 8012136:	bf00      	nop
 8012138:	08017934 	.word	0x08017934
 801213c:	08017a2c 	.word	0x08017a2c
 8012140:	080179ac 	.word	0x080179ac
 8012144:	2000f248 	.word	0x2000f248

08012148 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8012150:	2300      	movs	r3, #0
 8012152:	60fb      	str	r3, [r7, #12]
 8012154:	e01e      	b.n	8012194 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8012156:	4913      	ldr	r1, [pc, #76]	; (80121a4 <etharp_cleanup_netif+0x5c>)
 8012158:	68fa      	ldr	r2, [r7, #12]
 801215a:	4613      	mov	r3, r2
 801215c:	005b      	lsls	r3, r3, #1
 801215e:	4413      	add	r3, r2
 8012160:	00db      	lsls	r3, r3, #3
 8012162:	440b      	add	r3, r1
 8012164:	3314      	adds	r3, #20
 8012166:	781b      	ldrb	r3, [r3, #0]
 8012168:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801216a:	7afb      	ldrb	r3, [r7, #11]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d00e      	beq.n	801218e <etharp_cleanup_netif+0x46>
 8012170:	490c      	ldr	r1, [pc, #48]	; (80121a4 <etharp_cleanup_netif+0x5c>)
 8012172:	68fa      	ldr	r2, [r7, #12]
 8012174:	4613      	mov	r3, r2
 8012176:	005b      	lsls	r3, r3, #1
 8012178:	4413      	add	r3, r2
 801217a:	00db      	lsls	r3, r3, #3
 801217c:	440b      	add	r3, r1
 801217e:	3308      	adds	r3, #8
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	687a      	ldr	r2, [r7, #4]
 8012184:	429a      	cmp	r2, r3
 8012186:	d102      	bne.n	801218e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8012188:	68f8      	ldr	r0, [r7, #12]
 801218a:	f7ff fce5 	bl	8011b58 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	3301      	adds	r3, #1
 8012192:	60fb      	str	r3, [r7, #12]
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	2b09      	cmp	r3, #9
 8012198:	dddd      	ble.n	8012156 <etharp_cleanup_netif+0xe>
    }
  }
}
 801219a:	bf00      	nop
 801219c:	bf00      	nop
 801219e:	3710      	adds	r7, #16
 80121a0:	46bd      	mov	sp, r7
 80121a2:	bd80      	pop	{r7, pc}
 80121a4:	2000f248 	.word	0x2000f248

080121a8 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80121a8:	b5b0      	push	{r4, r5, r7, lr}
 80121aa:	b08a      	sub	sp, #40	; 0x28
 80121ac:	af04      	add	r7, sp, #16
 80121ae:	6078      	str	r0, [r7, #4]
 80121b0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d107      	bne.n	80121c8 <etharp_input+0x20>
 80121b8:	4b3d      	ldr	r3, [pc, #244]	; (80122b0 <etharp_input+0x108>)
 80121ba:	f240 228a 	movw	r2, #650	; 0x28a
 80121be:	493d      	ldr	r1, [pc, #244]	; (80122b4 <etharp_input+0x10c>)
 80121c0:	483d      	ldr	r0, [pc, #244]	; (80122b8 <etharp_input+0x110>)
 80121c2:	f002 fa59 	bl	8014678 <iprintf>
 80121c6:	e06f      	b.n	80122a8 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	685b      	ldr	r3, [r3, #4]
 80121cc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80121ce:	693b      	ldr	r3, [r7, #16]
 80121d0:	881b      	ldrh	r3, [r3, #0]
 80121d2:	b29b      	uxth	r3, r3
 80121d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80121d8:	d10c      	bne.n	80121f4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80121da:	693b      	ldr	r3, [r7, #16]
 80121dc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80121de:	2b06      	cmp	r3, #6
 80121e0:	d108      	bne.n	80121f4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80121e2:	693b      	ldr	r3, [r7, #16]
 80121e4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80121e6:	2b04      	cmp	r3, #4
 80121e8:	d104      	bne.n	80121f4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80121ea:	693b      	ldr	r3, [r7, #16]
 80121ec:	885b      	ldrh	r3, [r3, #2]
 80121ee:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80121f0:	2b08      	cmp	r3, #8
 80121f2:	d003      	beq.n	80121fc <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80121f4:	6878      	ldr	r0, [r7, #4]
 80121f6:	f7f9 fd85 	bl	800bd04 <pbuf_free>
    return;
 80121fa:	e055      	b.n	80122a8 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80121fc:	693b      	ldr	r3, [r7, #16]
 80121fe:	330e      	adds	r3, #14
 8012200:	681b      	ldr	r3, [r3, #0]
 8012202:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8012204:	693b      	ldr	r3, [r7, #16]
 8012206:	3318      	adds	r3, #24
 8012208:	681b      	ldr	r3, [r3, #0]
 801220a:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801220c:	683b      	ldr	r3, [r7, #0]
 801220e:	3304      	adds	r3, #4
 8012210:	681b      	ldr	r3, [r3, #0]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d102      	bne.n	801221c <etharp_input+0x74>
    for_us = 0;
 8012216:	2300      	movs	r3, #0
 8012218:	75fb      	strb	r3, [r7, #23]
 801221a:	e009      	b.n	8012230 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801221c:	68ba      	ldr	r2, [r7, #8]
 801221e:	683b      	ldr	r3, [r7, #0]
 8012220:	3304      	adds	r3, #4
 8012222:	681b      	ldr	r3, [r3, #0]
 8012224:	429a      	cmp	r2, r3
 8012226:	bf0c      	ite	eq
 8012228:	2301      	moveq	r3, #1
 801222a:	2300      	movne	r3, #0
 801222c:	b2db      	uxtb	r3, r3
 801222e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8012230:	693b      	ldr	r3, [r7, #16]
 8012232:	f103 0208 	add.w	r2, r3, #8
 8012236:	7dfb      	ldrb	r3, [r7, #23]
 8012238:	2b00      	cmp	r3, #0
 801223a:	d001      	beq.n	8012240 <etharp_input+0x98>
 801223c:	2301      	movs	r3, #1
 801223e:	e000      	b.n	8012242 <etharp_input+0x9a>
 8012240:	2302      	movs	r3, #2
 8012242:	f107 010c 	add.w	r1, r7, #12
 8012246:	6838      	ldr	r0, [r7, #0]
 8012248:	f7ff fed8 	bl	8011ffc <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801224c:	693b      	ldr	r3, [r7, #16]
 801224e:	88db      	ldrh	r3, [r3, #6]
 8012250:	b29b      	uxth	r3, r3
 8012252:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012256:	d003      	beq.n	8012260 <etharp_input+0xb8>
 8012258:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801225c:	d01e      	beq.n	801229c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801225e:	e020      	b.n	80122a2 <etharp_input+0xfa>
      if (for_us) {
 8012260:	7dfb      	ldrb	r3, [r7, #23]
 8012262:	2b00      	cmp	r3, #0
 8012264:	d01c      	beq.n	80122a0 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8012266:	683b      	ldr	r3, [r7, #0]
 8012268:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801226c:	693b      	ldr	r3, [r7, #16]
 801226e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8012272:	683b      	ldr	r3, [r7, #0]
 8012274:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8012278:	683b      	ldr	r3, [r7, #0]
 801227a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801227c:	693a      	ldr	r2, [r7, #16]
 801227e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8012280:	2102      	movs	r1, #2
 8012282:	9103      	str	r1, [sp, #12]
 8012284:	f107 010c 	add.w	r1, r7, #12
 8012288:	9102      	str	r1, [sp, #8]
 801228a:	9201      	str	r2, [sp, #4]
 801228c:	9300      	str	r3, [sp, #0]
 801228e:	462b      	mov	r3, r5
 8012290:	4622      	mov	r2, r4
 8012292:	4601      	mov	r1, r0
 8012294:	6838      	ldr	r0, [r7, #0]
 8012296:	f000 faeb 	bl	8012870 <etharp_raw>
      break;
 801229a:	e001      	b.n	80122a0 <etharp_input+0xf8>
      break;
 801229c:	bf00      	nop
 801229e:	e000      	b.n	80122a2 <etharp_input+0xfa>
      break;
 80122a0:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80122a2:	6878      	ldr	r0, [r7, #4]
 80122a4:	f7f9 fd2e 	bl	800bd04 <pbuf_free>
}
 80122a8:	3718      	adds	r7, #24
 80122aa:	46bd      	mov	sp, r7
 80122ac:	bdb0      	pop	{r4, r5, r7, pc}
 80122ae:	bf00      	nop
 80122b0:	08017934 	.word	0x08017934
 80122b4:	08017a84 	.word	0x08017a84
 80122b8:	080179ac 	.word	0x080179ac

080122bc <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80122bc:	b580      	push	{r7, lr}
 80122be:	b086      	sub	sp, #24
 80122c0:	af02      	add	r7, sp, #8
 80122c2:	60f8      	str	r0, [r7, #12]
 80122c4:	60b9      	str	r1, [r7, #8]
 80122c6:	4613      	mov	r3, r2
 80122c8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80122ca:	79fa      	ldrb	r2, [r7, #7]
 80122cc:	4944      	ldr	r1, [pc, #272]	; (80123e0 <etharp_output_to_arp_index+0x124>)
 80122ce:	4613      	mov	r3, r2
 80122d0:	005b      	lsls	r3, r3, #1
 80122d2:	4413      	add	r3, r2
 80122d4:	00db      	lsls	r3, r3, #3
 80122d6:	440b      	add	r3, r1
 80122d8:	3314      	adds	r3, #20
 80122da:	781b      	ldrb	r3, [r3, #0]
 80122dc:	2b01      	cmp	r3, #1
 80122de:	d806      	bhi.n	80122ee <etharp_output_to_arp_index+0x32>
 80122e0:	4b40      	ldr	r3, [pc, #256]	; (80123e4 <etharp_output_to_arp_index+0x128>)
 80122e2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80122e6:	4940      	ldr	r1, [pc, #256]	; (80123e8 <etharp_output_to_arp_index+0x12c>)
 80122e8:	4840      	ldr	r0, [pc, #256]	; (80123ec <etharp_output_to_arp_index+0x130>)
 80122ea:	f002 f9c5 	bl	8014678 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80122ee:	79fa      	ldrb	r2, [r7, #7]
 80122f0:	493b      	ldr	r1, [pc, #236]	; (80123e0 <etharp_output_to_arp_index+0x124>)
 80122f2:	4613      	mov	r3, r2
 80122f4:	005b      	lsls	r3, r3, #1
 80122f6:	4413      	add	r3, r2
 80122f8:	00db      	lsls	r3, r3, #3
 80122fa:	440b      	add	r3, r1
 80122fc:	3314      	adds	r3, #20
 80122fe:	781b      	ldrb	r3, [r3, #0]
 8012300:	2b02      	cmp	r3, #2
 8012302:	d153      	bne.n	80123ac <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8012304:	79fa      	ldrb	r2, [r7, #7]
 8012306:	4936      	ldr	r1, [pc, #216]	; (80123e0 <etharp_output_to_arp_index+0x124>)
 8012308:	4613      	mov	r3, r2
 801230a:	005b      	lsls	r3, r3, #1
 801230c:	4413      	add	r3, r2
 801230e:	00db      	lsls	r3, r3, #3
 8012310:	440b      	add	r3, r1
 8012312:	3312      	adds	r3, #18
 8012314:	881b      	ldrh	r3, [r3, #0]
 8012316:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801231a:	d919      	bls.n	8012350 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801231c:	79fa      	ldrb	r2, [r7, #7]
 801231e:	4613      	mov	r3, r2
 8012320:	005b      	lsls	r3, r3, #1
 8012322:	4413      	add	r3, r2
 8012324:	00db      	lsls	r3, r3, #3
 8012326:	4a2e      	ldr	r2, [pc, #184]	; (80123e0 <etharp_output_to_arp_index+0x124>)
 8012328:	4413      	add	r3, r2
 801232a:	3304      	adds	r3, #4
 801232c:	4619      	mov	r1, r3
 801232e:	68f8      	ldr	r0, [r7, #12]
 8012330:	f000 fb4c 	bl	80129cc <etharp_request>
 8012334:	4603      	mov	r3, r0
 8012336:	2b00      	cmp	r3, #0
 8012338:	d138      	bne.n	80123ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801233a:	79fa      	ldrb	r2, [r7, #7]
 801233c:	4928      	ldr	r1, [pc, #160]	; (80123e0 <etharp_output_to_arp_index+0x124>)
 801233e:	4613      	mov	r3, r2
 8012340:	005b      	lsls	r3, r3, #1
 8012342:	4413      	add	r3, r2
 8012344:	00db      	lsls	r3, r3, #3
 8012346:	440b      	add	r3, r1
 8012348:	3314      	adds	r3, #20
 801234a:	2203      	movs	r2, #3
 801234c:	701a      	strb	r2, [r3, #0]
 801234e:	e02d      	b.n	80123ac <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8012350:	79fa      	ldrb	r2, [r7, #7]
 8012352:	4923      	ldr	r1, [pc, #140]	; (80123e0 <etharp_output_to_arp_index+0x124>)
 8012354:	4613      	mov	r3, r2
 8012356:	005b      	lsls	r3, r3, #1
 8012358:	4413      	add	r3, r2
 801235a:	00db      	lsls	r3, r3, #3
 801235c:	440b      	add	r3, r1
 801235e:	3312      	adds	r3, #18
 8012360:	881b      	ldrh	r3, [r3, #0]
 8012362:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8012366:	d321      	bcc.n	80123ac <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8012368:	79fa      	ldrb	r2, [r7, #7]
 801236a:	4613      	mov	r3, r2
 801236c:	005b      	lsls	r3, r3, #1
 801236e:	4413      	add	r3, r2
 8012370:	00db      	lsls	r3, r3, #3
 8012372:	4a1b      	ldr	r2, [pc, #108]	; (80123e0 <etharp_output_to_arp_index+0x124>)
 8012374:	4413      	add	r3, r2
 8012376:	1d19      	adds	r1, r3, #4
 8012378:	79fa      	ldrb	r2, [r7, #7]
 801237a:	4613      	mov	r3, r2
 801237c:	005b      	lsls	r3, r3, #1
 801237e:	4413      	add	r3, r2
 8012380:	00db      	lsls	r3, r3, #3
 8012382:	3308      	adds	r3, #8
 8012384:	4a16      	ldr	r2, [pc, #88]	; (80123e0 <etharp_output_to_arp_index+0x124>)
 8012386:	4413      	add	r3, r2
 8012388:	3304      	adds	r3, #4
 801238a:	461a      	mov	r2, r3
 801238c:	68f8      	ldr	r0, [r7, #12]
 801238e:	f000 fafb 	bl	8012988 <etharp_request_dst>
 8012392:	4603      	mov	r3, r0
 8012394:	2b00      	cmp	r3, #0
 8012396:	d109      	bne.n	80123ac <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8012398:	79fa      	ldrb	r2, [r7, #7]
 801239a:	4911      	ldr	r1, [pc, #68]	; (80123e0 <etharp_output_to_arp_index+0x124>)
 801239c:	4613      	mov	r3, r2
 801239e:	005b      	lsls	r3, r3, #1
 80123a0:	4413      	add	r3, r2
 80123a2:	00db      	lsls	r3, r3, #3
 80123a4:	440b      	add	r3, r1
 80123a6:	3314      	adds	r3, #20
 80123a8:	2203      	movs	r2, #3
 80123aa:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80123ac:	68fb      	ldr	r3, [r7, #12]
 80123ae:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80123b2:	79fa      	ldrb	r2, [r7, #7]
 80123b4:	4613      	mov	r3, r2
 80123b6:	005b      	lsls	r3, r3, #1
 80123b8:	4413      	add	r3, r2
 80123ba:	00db      	lsls	r3, r3, #3
 80123bc:	3308      	adds	r3, #8
 80123be:	4a08      	ldr	r2, [pc, #32]	; (80123e0 <etharp_output_to_arp_index+0x124>)
 80123c0:	4413      	add	r3, r2
 80123c2:	3304      	adds	r3, #4
 80123c4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80123c8:	9200      	str	r2, [sp, #0]
 80123ca:	460a      	mov	r2, r1
 80123cc:	68b9      	ldr	r1, [r7, #8]
 80123ce:	68f8      	ldr	r0, [r7, #12]
 80123d0:	f001 fe40 	bl	8014054 <ethernet_output>
 80123d4:	4603      	mov	r3, r0
}
 80123d6:	4618      	mov	r0, r3
 80123d8:	3710      	adds	r7, #16
 80123da:	46bd      	mov	sp, r7
 80123dc:	bd80      	pop	{r7, pc}
 80123de:	bf00      	nop
 80123e0:	2000f248 	.word	0x2000f248
 80123e4:	08017934 	.word	0x08017934
 80123e8:	08017aa4 	.word	0x08017aa4
 80123ec:	080179ac 	.word	0x080179ac

080123f0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b08a      	sub	sp, #40	; 0x28
 80123f4:	af02      	add	r7, sp, #8
 80123f6:	60f8      	str	r0, [r7, #12]
 80123f8:	60b9      	str	r1, [r7, #8]
 80123fa:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80123fc:	687b      	ldr	r3, [r7, #4]
 80123fe:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012400:	68fb      	ldr	r3, [r7, #12]
 8012402:	2b00      	cmp	r3, #0
 8012404:	d106      	bne.n	8012414 <etharp_output+0x24>
 8012406:	4b73      	ldr	r3, [pc, #460]	; (80125d4 <etharp_output+0x1e4>)
 8012408:	f240 321e 	movw	r2, #798	; 0x31e
 801240c:	4972      	ldr	r1, [pc, #456]	; (80125d8 <etharp_output+0x1e8>)
 801240e:	4873      	ldr	r0, [pc, #460]	; (80125dc <etharp_output+0x1ec>)
 8012410:	f002 f932 	bl	8014678 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8012414:	68bb      	ldr	r3, [r7, #8]
 8012416:	2b00      	cmp	r3, #0
 8012418:	d106      	bne.n	8012428 <etharp_output+0x38>
 801241a:	4b6e      	ldr	r3, [pc, #440]	; (80125d4 <etharp_output+0x1e4>)
 801241c:	f240 321f 	movw	r2, #799	; 0x31f
 8012420:	496f      	ldr	r1, [pc, #444]	; (80125e0 <etharp_output+0x1f0>)
 8012422:	486e      	ldr	r0, [pc, #440]	; (80125dc <etharp_output+0x1ec>)
 8012424:	f002 f928 	bl	8014678 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d106      	bne.n	801243c <etharp_output+0x4c>
 801242e:	4b69      	ldr	r3, [pc, #420]	; (80125d4 <etharp_output+0x1e4>)
 8012430:	f44f 7248 	mov.w	r2, #800	; 0x320
 8012434:	496b      	ldr	r1, [pc, #428]	; (80125e4 <etharp_output+0x1f4>)
 8012436:	4869      	ldr	r0, [pc, #420]	; (80125dc <etharp_output+0x1ec>)
 8012438:	f002 f91e 	bl	8014678 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	68f9      	ldr	r1, [r7, #12]
 8012442:	4618      	mov	r0, r3
 8012444:	f000 fef8 	bl	8013238 <ip4_addr_isbroadcast_u32>
 8012448:	4603      	mov	r3, r0
 801244a:	2b00      	cmp	r3, #0
 801244c:	d002      	beq.n	8012454 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801244e:	4b66      	ldr	r3, [pc, #408]	; (80125e8 <etharp_output+0x1f8>)
 8012450:	61fb      	str	r3, [r7, #28]
 8012452:	e0af      	b.n	80125b4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8012454:	687b      	ldr	r3, [r7, #4]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801245c:	2be0      	cmp	r3, #224	; 0xe0
 801245e:	d118      	bne.n	8012492 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8012460:	2301      	movs	r3, #1
 8012462:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8012464:	2300      	movs	r3, #0
 8012466:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8012468:	235e      	movs	r3, #94	; 0x5e
 801246a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	3301      	adds	r3, #1
 8012470:	781b      	ldrb	r3, [r3, #0]
 8012472:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012476:	b2db      	uxtb	r3, r3
 8012478:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	3302      	adds	r3, #2
 801247e:	781b      	ldrb	r3, [r3, #0]
 8012480:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	3303      	adds	r3, #3
 8012486:	781b      	ldrb	r3, [r3, #0]
 8012488:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801248a:	f107 0310 	add.w	r3, r7, #16
 801248e:	61fb      	str	r3, [r7, #28]
 8012490:	e090      	b.n	80125b4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8012492:	687b      	ldr	r3, [r7, #4]
 8012494:	681a      	ldr	r2, [r3, #0]
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	3304      	adds	r3, #4
 801249a:	681b      	ldr	r3, [r3, #0]
 801249c:	405a      	eors	r2, r3
 801249e:	68fb      	ldr	r3, [r7, #12]
 80124a0:	3308      	adds	r3, #8
 80124a2:	681b      	ldr	r3, [r3, #0]
 80124a4:	4013      	ands	r3, r2
 80124a6:	2b00      	cmp	r3, #0
 80124a8:	d012      	beq.n	80124d0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	681b      	ldr	r3, [r3, #0]
 80124ae:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80124b0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80124b4:	4293      	cmp	r3, r2
 80124b6:	d00b      	beq.n	80124d0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80124b8:	68fb      	ldr	r3, [r7, #12]
 80124ba:	330c      	adds	r3, #12
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d003      	beq.n	80124ca <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	330c      	adds	r3, #12
 80124c6:	61bb      	str	r3, [r7, #24]
 80124c8:	e002      	b.n	80124d0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80124ca:	f06f 0303 	mvn.w	r3, #3
 80124ce:	e07d      	b.n	80125cc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80124d0:	4b46      	ldr	r3, [pc, #280]	; (80125ec <etharp_output+0x1fc>)
 80124d2:	781b      	ldrb	r3, [r3, #0]
 80124d4:	4619      	mov	r1, r3
 80124d6:	4a46      	ldr	r2, [pc, #280]	; (80125f0 <etharp_output+0x200>)
 80124d8:	460b      	mov	r3, r1
 80124da:	005b      	lsls	r3, r3, #1
 80124dc:	440b      	add	r3, r1
 80124de:	00db      	lsls	r3, r3, #3
 80124e0:	4413      	add	r3, r2
 80124e2:	3314      	adds	r3, #20
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	2b01      	cmp	r3, #1
 80124e8:	d925      	bls.n	8012536 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80124ea:	4b40      	ldr	r3, [pc, #256]	; (80125ec <etharp_output+0x1fc>)
 80124ec:	781b      	ldrb	r3, [r3, #0]
 80124ee:	4619      	mov	r1, r3
 80124f0:	4a3f      	ldr	r2, [pc, #252]	; (80125f0 <etharp_output+0x200>)
 80124f2:	460b      	mov	r3, r1
 80124f4:	005b      	lsls	r3, r3, #1
 80124f6:	440b      	add	r3, r1
 80124f8:	00db      	lsls	r3, r3, #3
 80124fa:	4413      	add	r3, r2
 80124fc:	3308      	adds	r3, #8
 80124fe:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8012500:	68fa      	ldr	r2, [r7, #12]
 8012502:	429a      	cmp	r2, r3
 8012504:	d117      	bne.n	8012536 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8012506:	69bb      	ldr	r3, [r7, #24]
 8012508:	681a      	ldr	r2, [r3, #0]
 801250a:	4b38      	ldr	r3, [pc, #224]	; (80125ec <etharp_output+0x1fc>)
 801250c:	781b      	ldrb	r3, [r3, #0]
 801250e:	4618      	mov	r0, r3
 8012510:	4937      	ldr	r1, [pc, #220]	; (80125f0 <etharp_output+0x200>)
 8012512:	4603      	mov	r3, r0
 8012514:	005b      	lsls	r3, r3, #1
 8012516:	4403      	add	r3, r0
 8012518:	00db      	lsls	r3, r3, #3
 801251a:	440b      	add	r3, r1
 801251c:	3304      	adds	r3, #4
 801251e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8012520:	429a      	cmp	r2, r3
 8012522:	d108      	bne.n	8012536 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8012524:	4b31      	ldr	r3, [pc, #196]	; (80125ec <etharp_output+0x1fc>)
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	461a      	mov	r2, r3
 801252a:	68b9      	ldr	r1, [r7, #8]
 801252c:	68f8      	ldr	r0, [r7, #12]
 801252e:	f7ff fec5 	bl	80122bc <etharp_output_to_arp_index>
 8012532:	4603      	mov	r3, r0
 8012534:	e04a      	b.n	80125cc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8012536:	2300      	movs	r3, #0
 8012538:	75fb      	strb	r3, [r7, #23]
 801253a:	e031      	b.n	80125a0 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801253c:	7dfa      	ldrb	r2, [r7, #23]
 801253e:	492c      	ldr	r1, [pc, #176]	; (80125f0 <etharp_output+0x200>)
 8012540:	4613      	mov	r3, r2
 8012542:	005b      	lsls	r3, r3, #1
 8012544:	4413      	add	r3, r2
 8012546:	00db      	lsls	r3, r3, #3
 8012548:	440b      	add	r3, r1
 801254a:	3314      	adds	r3, #20
 801254c:	781b      	ldrb	r3, [r3, #0]
 801254e:	2b01      	cmp	r3, #1
 8012550:	d923      	bls.n	801259a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8012552:	7dfa      	ldrb	r2, [r7, #23]
 8012554:	4926      	ldr	r1, [pc, #152]	; (80125f0 <etharp_output+0x200>)
 8012556:	4613      	mov	r3, r2
 8012558:	005b      	lsls	r3, r3, #1
 801255a:	4413      	add	r3, r2
 801255c:	00db      	lsls	r3, r3, #3
 801255e:	440b      	add	r3, r1
 8012560:	3308      	adds	r3, #8
 8012562:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8012564:	68fa      	ldr	r2, [r7, #12]
 8012566:	429a      	cmp	r2, r3
 8012568:	d117      	bne.n	801259a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801256a:	69bb      	ldr	r3, [r7, #24]
 801256c:	6819      	ldr	r1, [r3, #0]
 801256e:	7dfa      	ldrb	r2, [r7, #23]
 8012570:	481f      	ldr	r0, [pc, #124]	; (80125f0 <etharp_output+0x200>)
 8012572:	4613      	mov	r3, r2
 8012574:	005b      	lsls	r3, r3, #1
 8012576:	4413      	add	r3, r2
 8012578:	00db      	lsls	r3, r3, #3
 801257a:	4403      	add	r3, r0
 801257c:	3304      	adds	r3, #4
 801257e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8012580:	4299      	cmp	r1, r3
 8012582:	d10a      	bne.n	801259a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8012584:	4a19      	ldr	r2, [pc, #100]	; (80125ec <etharp_output+0x1fc>)
 8012586:	7dfb      	ldrb	r3, [r7, #23]
 8012588:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801258a:	7dfb      	ldrb	r3, [r7, #23]
 801258c:	461a      	mov	r2, r3
 801258e:	68b9      	ldr	r1, [r7, #8]
 8012590:	68f8      	ldr	r0, [r7, #12]
 8012592:	f7ff fe93 	bl	80122bc <etharp_output_to_arp_index>
 8012596:	4603      	mov	r3, r0
 8012598:	e018      	b.n	80125cc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801259a:	7dfb      	ldrb	r3, [r7, #23]
 801259c:	3301      	adds	r3, #1
 801259e:	75fb      	strb	r3, [r7, #23]
 80125a0:	7dfb      	ldrb	r3, [r7, #23]
 80125a2:	2b09      	cmp	r3, #9
 80125a4:	d9ca      	bls.n	801253c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80125a6:	68ba      	ldr	r2, [r7, #8]
 80125a8:	69b9      	ldr	r1, [r7, #24]
 80125aa:	68f8      	ldr	r0, [r7, #12]
 80125ac:	f000 f822 	bl	80125f4 <etharp_query>
 80125b0:	4603      	mov	r3, r0
 80125b2:	e00b      	b.n	80125cc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80125b4:	68fb      	ldr	r3, [r7, #12]
 80125b6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80125ba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80125be:	9300      	str	r3, [sp, #0]
 80125c0:	69fb      	ldr	r3, [r7, #28]
 80125c2:	68b9      	ldr	r1, [r7, #8]
 80125c4:	68f8      	ldr	r0, [r7, #12]
 80125c6:	f001 fd45 	bl	8014054 <ethernet_output>
 80125ca:	4603      	mov	r3, r0
}
 80125cc:	4618      	mov	r0, r3
 80125ce:	3720      	adds	r7, #32
 80125d0:	46bd      	mov	sp, r7
 80125d2:	bd80      	pop	{r7, pc}
 80125d4:	08017934 	.word	0x08017934
 80125d8:	08017a84 	.word	0x08017a84
 80125dc:	080179ac 	.word	0x080179ac
 80125e0:	08017ad4 	.word	0x08017ad4
 80125e4:	08017a74 	.word	0x08017a74
 80125e8:	08018154 	.word	0x08018154
 80125ec:	2000f338 	.word	0x2000f338
 80125f0:	2000f248 	.word	0x2000f248

080125f4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80125f4:	b580      	push	{r7, lr}
 80125f6:	b08c      	sub	sp, #48	; 0x30
 80125f8:	af02      	add	r7, sp, #8
 80125fa:	60f8      	str	r0, [r7, #12]
 80125fc:	60b9      	str	r1, [r7, #8]
 80125fe:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	3326      	adds	r3, #38	; 0x26
 8012604:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8012606:	23ff      	movs	r3, #255	; 0xff
 8012608:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801260c:	2300      	movs	r3, #0
 801260e:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8012610:	68bb      	ldr	r3, [r7, #8]
 8012612:	681b      	ldr	r3, [r3, #0]
 8012614:	68f9      	ldr	r1, [r7, #12]
 8012616:	4618      	mov	r0, r3
 8012618:	f000 fe0e 	bl	8013238 <ip4_addr_isbroadcast_u32>
 801261c:	4603      	mov	r3, r0
 801261e:	2b00      	cmp	r3, #0
 8012620:	d10c      	bne.n	801263c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8012622:	68bb      	ldr	r3, [r7, #8]
 8012624:	681b      	ldr	r3, [r3, #0]
 8012626:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801262a:	2be0      	cmp	r3, #224	; 0xe0
 801262c:	d006      	beq.n	801263c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801262e:	68bb      	ldr	r3, [r7, #8]
 8012630:	2b00      	cmp	r3, #0
 8012632:	d003      	beq.n	801263c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8012634:	68bb      	ldr	r3, [r7, #8]
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d102      	bne.n	8012642 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801263c:	f06f 030f 	mvn.w	r3, #15
 8012640:	e101      	b.n	8012846 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8012642:	68fa      	ldr	r2, [r7, #12]
 8012644:	2101      	movs	r1, #1
 8012646:	68b8      	ldr	r0, [r7, #8]
 8012648:	f7ff fb60 	bl	8011d0c <etharp_find_entry>
 801264c:	4603      	mov	r3, r0
 801264e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8012650:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012654:	2b00      	cmp	r3, #0
 8012656:	da02      	bge.n	801265e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8012658:	8a7b      	ldrh	r3, [r7, #18]
 801265a:	b25b      	sxtb	r3, r3
 801265c:	e0f3      	b.n	8012846 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801265e:	8a7b      	ldrh	r3, [r7, #18]
 8012660:	2b7e      	cmp	r3, #126	; 0x7e
 8012662:	d906      	bls.n	8012672 <etharp_query+0x7e>
 8012664:	4b7a      	ldr	r3, [pc, #488]	; (8012850 <etharp_query+0x25c>)
 8012666:	f240 32c1 	movw	r2, #961	; 0x3c1
 801266a:	497a      	ldr	r1, [pc, #488]	; (8012854 <etharp_query+0x260>)
 801266c:	487a      	ldr	r0, [pc, #488]	; (8012858 <etharp_query+0x264>)
 801266e:	f002 f803 	bl	8014678 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8012672:	8a7b      	ldrh	r3, [r7, #18]
 8012674:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8012676:	7c7a      	ldrb	r2, [r7, #17]
 8012678:	4978      	ldr	r1, [pc, #480]	; (801285c <etharp_query+0x268>)
 801267a:	4613      	mov	r3, r2
 801267c:	005b      	lsls	r3, r3, #1
 801267e:	4413      	add	r3, r2
 8012680:	00db      	lsls	r3, r3, #3
 8012682:	440b      	add	r3, r1
 8012684:	3314      	adds	r3, #20
 8012686:	781b      	ldrb	r3, [r3, #0]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d115      	bne.n	80126b8 <etharp_query+0xc4>
    is_new_entry = 1;
 801268c:	2301      	movs	r3, #1
 801268e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8012690:	7c7a      	ldrb	r2, [r7, #17]
 8012692:	4972      	ldr	r1, [pc, #456]	; (801285c <etharp_query+0x268>)
 8012694:	4613      	mov	r3, r2
 8012696:	005b      	lsls	r3, r3, #1
 8012698:	4413      	add	r3, r2
 801269a:	00db      	lsls	r3, r3, #3
 801269c:	440b      	add	r3, r1
 801269e:	3314      	adds	r3, #20
 80126a0:	2201      	movs	r2, #1
 80126a2:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80126a4:	7c7a      	ldrb	r2, [r7, #17]
 80126a6:	496d      	ldr	r1, [pc, #436]	; (801285c <etharp_query+0x268>)
 80126a8:	4613      	mov	r3, r2
 80126aa:	005b      	lsls	r3, r3, #1
 80126ac:	4413      	add	r3, r2
 80126ae:	00db      	lsls	r3, r3, #3
 80126b0:	440b      	add	r3, r1
 80126b2:	3308      	adds	r3, #8
 80126b4:	68fa      	ldr	r2, [r7, #12]
 80126b6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80126b8:	7c7a      	ldrb	r2, [r7, #17]
 80126ba:	4968      	ldr	r1, [pc, #416]	; (801285c <etharp_query+0x268>)
 80126bc:	4613      	mov	r3, r2
 80126be:	005b      	lsls	r3, r3, #1
 80126c0:	4413      	add	r3, r2
 80126c2:	00db      	lsls	r3, r3, #3
 80126c4:	440b      	add	r3, r1
 80126c6:	3314      	adds	r3, #20
 80126c8:	781b      	ldrb	r3, [r3, #0]
 80126ca:	2b01      	cmp	r3, #1
 80126cc:	d011      	beq.n	80126f2 <etharp_query+0xfe>
 80126ce:	7c7a      	ldrb	r2, [r7, #17]
 80126d0:	4962      	ldr	r1, [pc, #392]	; (801285c <etharp_query+0x268>)
 80126d2:	4613      	mov	r3, r2
 80126d4:	005b      	lsls	r3, r3, #1
 80126d6:	4413      	add	r3, r2
 80126d8:	00db      	lsls	r3, r3, #3
 80126da:	440b      	add	r3, r1
 80126dc:	3314      	adds	r3, #20
 80126de:	781b      	ldrb	r3, [r3, #0]
 80126e0:	2b01      	cmp	r3, #1
 80126e2:	d806      	bhi.n	80126f2 <etharp_query+0xfe>
 80126e4:	4b5a      	ldr	r3, [pc, #360]	; (8012850 <etharp_query+0x25c>)
 80126e6:	f240 32cd 	movw	r2, #973	; 0x3cd
 80126ea:	495d      	ldr	r1, [pc, #372]	; (8012860 <etharp_query+0x26c>)
 80126ec:	485a      	ldr	r0, [pc, #360]	; (8012858 <etharp_query+0x264>)
 80126ee:	f001 ffc3 	bl	8014678 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80126f2:	6a3b      	ldr	r3, [r7, #32]
 80126f4:	2b00      	cmp	r3, #0
 80126f6:	d102      	bne.n	80126fe <etharp_query+0x10a>
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	2b00      	cmp	r3, #0
 80126fc:	d10c      	bne.n	8012718 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80126fe:	68b9      	ldr	r1, [r7, #8]
 8012700:	68f8      	ldr	r0, [r7, #12]
 8012702:	f000 f963 	bl	80129cc <etharp_request>
 8012706:	4603      	mov	r3, r0
 8012708:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	2b00      	cmp	r3, #0
 8012710:	d102      	bne.n	8012718 <etharp_query+0x124>
      return result;
 8012712:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012716:	e096      	b.n	8012846 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d106      	bne.n	801272c <etharp_query+0x138>
 801271e:	4b4c      	ldr	r3, [pc, #304]	; (8012850 <etharp_query+0x25c>)
 8012720:	f240 32e1 	movw	r2, #993	; 0x3e1
 8012724:	494f      	ldr	r1, [pc, #316]	; (8012864 <etharp_query+0x270>)
 8012726:	484c      	ldr	r0, [pc, #304]	; (8012858 <etharp_query+0x264>)
 8012728:	f001 ffa6 	bl	8014678 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801272c:	7c7a      	ldrb	r2, [r7, #17]
 801272e:	494b      	ldr	r1, [pc, #300]	; (801285c <etharp_query+0x268>)
 8012730:	4613      	mov	r3, r2
 8012732:	005b      	lsls	r3, r3, #1
 8012734:	4413      	add	r3, r2
 8012736:	00db      	lsls	r3, r3, #3
 8012738:	440b      	add	r3, r1
 801273a:	3314      	adds	r3, #20
 801273c:	781b      	ldrb	r3, [r3, #0]
 801273e:	2b01      	cmp	r3, #1
 8012740:	d917      	bls.n	8012772 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8012742:	4a49      	ldr	r2, [pc, #292]	; (8012868 <etharp_query+0x274>)
 8012744:	7c7b      	ldrb	r3, [r7, #17]
 8012746:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8012748:	7c7a      	ldrb	r2, [r7, #17]
 801274a:	4613      	mov	r3, r2
 801274c:	005b      	lsls	r3, r3, #1
 801274e:	4413      	add	r3, r2
 8012750:	00db      	lsls	r3, r3, #3
 8012752:	3308      	adds	r3, #8
 8012754:	4a41      	ldr	r2, [pc, #260]	; (801285c <etharp_query+0x268>)
 8012756:	4413      	add	r3, r2
 8012758:	3304      	adds	r3, #4
 801275a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801275e:	9200      	str	r2, [sp, #0]
 8012760:	697a      	ldr	r2, [r7, #20]
 8012762:	6879      	ldr	r1, [r7, #4]
 8012764:	68f8      	ldr	r0, [r7, #12]
 8012766:	f001 fc75 	bl	8014054 <ethernet_output>
 801276a:	4603      	mov	r3, r0
 801276c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012770:	e067      	b.n	8012842 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8012772:	7c7a      	ldrb	r2, [r7, #17]
 8012774:	4939      	ldr	r1, [pc, #228]	; (801285c <etharp_query+0x268>)
 8012776:	4613      	mov	r3, r2
 8012778:	005b      	lsls	r3, r3, #1
 801277a:	4413      	add	r3, r2
 801277c:	00db      	lsls	r3, r3, #3
 801277e:	440b      	add	r3, r1
 8012780:	3314      	adds	r3, #20
 8012782:	781b      	ldrb	r3, [r3, #0]
 8012784:	2b01      	cmp	r3, #1
 8012786:	d15c      	bne.n	8012842 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8012788:	2300      	movs	r3, #0
 801278a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8012790:	e01c      	b.n	80127cc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8012792:	69fb      	ldr	r3, [r7, #28]
 8012794:	895a      	ldrh	r2, [r3, #10]
 8012796:	69fb      	ldr	r3, [r7, #28]
 8012798:	891b      	ldrh	r3, [r3, #8]
 801279a:	429a      	cmp	r2, r3
 801279c:	d10a      	bne.n	80127b4 <etharp_query+0x1c0>
 801279e:	69fb      	ldr	r3, [r7, #28]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d006      	beq.n	80127b4 <etharp_query+0x1c0>
 80127a6:	4b2a      	ldr	r3, [pc, #168]	; (8012850 <etharp_query+0x25c>)
 80127a8:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80127ac:	492f      	ldr	r1, [pc, #188]	; (801286c <etharp_query+0x278>)
 80127ae:	482a      	ldr	r0, [pc, #168]	; (8012858 <etharp_query+0x264>)
 80127b0:	f001 ff62 	bl	8014678 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80127b4:	69fb      	ldr	r3, [r7, #28]
 80127b6:	7b1b      	ldrb	r3, [r3, #12]
 80127b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d002      	beq.n	80127c6 <etharp_query+0x1d2>
        copy_needed = 1;
 80127c0:	2301      	movs	r3, #1
 80127c2:	61bb      	str	r3, [r7, #24]
        break;
 80127c4:	e005      	b.n	80127d2 <etharp_query+0x1de>
      }
      p = p->next;
 80127c6:	69fb      	ldr	r3, [r7, #28]
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 80127cc:	69fb      	ldr	r3, [r7, #28]
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d1df      	bne.n	8012792 <etharp_query+0x19e>
    }
    if (copy_needed) {
 80127d2:	69bb      	ldr	r3, [r7, #24]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d007      	beq.n	80127e8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80127d8:	687a      	ldr	r2, [r7, #4]
 80127da:	f44f 7120 	mov.w	r1, #640	; 0x280
 80127de:	200e      	movs	r0, #14
 80127e0:	f7f9 fcf8 	bl	800c1d4 <pbuf_clone>
 80127e4:	61f8      	str	r0, [r7, #28]
 80127e6:	e004      	b.n	80127f2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80127ec:	69f8      	ldr	r0, [r7, #28]
 80127ee:	f7f9 fb2f 	bl	800be50 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80127f2:	69fb      	ldr	r3, [r7, #28]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d021      	beq.n	801283c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80127f8:	7c7a      	ldrb	r2, [r7, #17]
 80127fa:	4918      	ldr	r1, [pc, #96]	; (801285c <etharp_query+0x268>)
 80127fc:	4613      	mov	r3, r2
 80127fe:	005b      	lsls	r3, r3, #1
 8012800:	4413      	add	r3, r2
 8012802:	00db      	lsls	r3, r3, #3
 8012804:	440b      	add	r3, r1
 8012806:	681b      	ldr	r3, [r3, #0]
 8012808:	2b00      	cmp	r3, #0
 801280a:	d00a      	beq.n	8012822 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801280c:	7c7a      	ldrb	r2, [r7, #17]
 801280e:	4913      	ldr	r1, [pc, #76]	; (801285c <etharp_query+0x268>)
 8012810:	4613      	mov	r3, r2
 8012812:	005b      	lsls	r3, r3, #1
 8012814:	4413      	add	r3, r2
 8012816:	00db      	lsls	r3, r3, #3
 8012818:	440b      	add	r3, r1
 801281a:	681b      	ldr	r3, [r3, #0]
 801281c:	4618      	mov	r0, r3
 801281e:	f7f9 fa71 	bl	800bd04 <pbuf_free>
      }
      arp_table[i].q = p;
 8012822:	7c7a      	ldrb	r2, [r7, #17]
 8012824:	490d      	ldr	r1, [pc, #52]	; (801285c <etharp_query+0x268>)
 8012826:	4613      	mov	r3, r2
 8012828:	005b      	lsls	r3, r3, #1
 801282a:	4413      	add	r3, r2
 801282c:	00db      	lsls	r3, r3, #3
 801282e:	440b      	add	r3, r1
 8012830:	69fa      	ldr	r2, [r7, #28]
 8012832:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8012834:	2300      	movs	r3, #0
 8012836:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801283a:	e002      	b.n	8012842 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801283c:	23ff      	movs	r3, #255	; 0xff
 801283e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8012842:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8012846:	4618      	mov	r0, r3
 8012848:	3728      	adds	r7, #40	; 0x28
 801284a:	46bd      	mov	sp, r7
 801284c:	bd80      	pop	{r7, pc}
 801284e:	bf00      	nop
 8012850:	08017934 	.word	0x08017934
 8012854:	08017ae0 	.word	0x08017ae0
 8012858:	080179ac 	.word	0x080179ac
 801285c:	2000f248 	.word	0x2000f248
 8012860:	08017af0 	.word	0x08017af0
 8012864:	08017ad4 	.word	0x08017ad4
 8012868:	2000f338 	.word	0x2000f338
 801286c:	08017b18 	.word	0x08017b18

08012870 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8012870:	b580      	push	{r7, lr}
 8012872:	b08a      	sub	sp, #40	; 0x28
 8012874:	af02      	add	r7, sp, #8
 8012876:	60f8      	str	r0, [r7, #12]
 8012878:	60b9      	str	r1, [r7, #8]
 801287a:	607a      	str	r2, [r7, #4]
 801287c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801287e:	2300      	movs	r3, #0
 8012880:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8012882:	68fb      	ldr	r3, [r7, #12]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d106      	bne.n	8012896 <etharp_raw+0x26>
 8012888:	4b3a      	ldr	r3, [pc, #232]	; (8012974 <etharp_raw+0x104>)
 801288a:	f240 4257 	movw	r2, #1111	; 0x457
 801288e:	493a      	ldr	r1, [pc, #232]	; (8012978 <etharp_raw+0x108>)
 8012890:	483a      	ldr	r0, [pc, #232]	; (801297c <etharp_raw+0x10c>)
 8012892:	f001 fef1 	bl	8014678 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8012896:	f44f 7220 	mov.w	r2, #640	; 0x280
 801289a:	211c      	movs	r1, #28
 801289c:	200e      	movs	r0, #14
 801289e:	f7f8 ff4d 	bl	800b73c <pbuf_alloc>
 80128a2:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80128a4:	69bb      	ldr	r3, [r7, #24]
 80128a6:	2b00      	cmp	r3, #0
 80128a8:	d102      	bne.n	80128b0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80128aa:	f04f 33ff 	mov.w	r3, #4294967295
 80128ae:	e05d      	b.n	801296c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80128b0:	69bb      	ldr	r3, [r7, #24]
 80128b2:	895b      	ldrh	r3, [r3, #10]
 80128b4:	2b1b      	cmp	r3, #27
 80128b6:	d806      	bhi.n	80128c6 <etharp_raw+0x56>
 80128b8:	4b2e      	ldr	r3, [pc, #184]	; (8012974 <etharp_raw+0x104>)
 80128ba:	f240 4262 	movw	r2, #1122	; 0x462
 80128be:	4930      	ldr	r1, [pc, #192]	; (8012980 <etharp_raw+0x110>)
 80128c0:	482e      	ldr	r0, [pc, #184]	; (801297c <etharp_raw+0x10c>)
 80128c2:	f001 fed9 	bl	8014678 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80128c6:	69bb      	ldr	r3, [r7, #24]
 80128c8:	685b      	ldr	r3, [r3, #4]
 80128ca:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80128cc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80128ce:	4618      	mov	r0, r3
 80128d0:	f7f7 fe26 	bl	800a520 <lwip_htons>
 80128d4:	4603      	mov	r3, r0
 80128d6:	461a      	mov	r2, r3
 80128d8:	697b      	ldr	r3, [r7, #20]
 80128da:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80128dc:	68fb      	ldr	r3, [r7, #12]
 80128de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80128e2:	2b06      	cmp	r3, #6
 80128e4:	d006      	beq.n	80128f4 <etharp_raw+0x84>
 80128e6:	4b23      	ldr	r3, [pc, #140]	; (8012974 <etharp_raw+0x104>)
 80128e8:	f240 4269 	movw	r2, #1129	; 0x469
 80128ec:	4925      	ldr	r1, [pc, #148]	; (8012984 <etharp_raw+0x114>)
 80128ee:	4823      	ldr	r0, [pc, #140]	; (801297c <etharp_raw+0x10c>)
 80128f0:	f001 fec2 	bl	8014678 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80128f4:	697b      	ldr	r3, [r7, #20]
 80128f6:	3308      	adds	r3, #8
 80128f8:	2206      	movs	r2, #6
 80128fa:	6839      	ldr	r1, [r7, #0]
 80128fc:	4618      	mov	r0, r3
 80128fe:	f001 fe10 	bl	8014522 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8012902:	697b      	ldr	r3, [r7, #20]
 8012904:	3312      	adds	r3, #18
 8012906:	2206      	movs	r2, #6
 8012908:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801290a:	4618      	mov	r0, r3
 801290c:	f001 fe09 	bl	8014522 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8012910:	697b      	ldr	r3, [r7, #20]
 8012912:	330e      	adds	r3, #14
 8012914:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012916:	6812      	ldr	r2, [r2, #0]
 8012918:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801291a:	697b      	ldr	r3, [r7, #20]
 801291c:	3318      	adds	r3, #24
 801291e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012920:	6812      	ldr	r2, [r2, #0]
 8012922:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8012924:	697b      	ldr	r3, [r7, #20]
 8012926:	2200      	movs	r2, #0
 8012928:	701a      	strb	r2, [r3, #0]
 801292a:	2200      	movs	r2, #0
 801292c:	f042 0201 	orr.w	r2, r2, #1
 8012930:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8012932:	697b      	ldr	r3, [r7, #20]
 8012934:	2200      	movs	r2, #0
 8012936:	f042 0208 	orr.w	r2, r2, #8
 801293a:	709a      	strb	r2, [r3, #2]
 801293c:	2200      	movs	r2, #0
 801293e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8012940:	697b      	ldr	r3, [r7, #20]
 8012942:	2206      	movs	r2, #6
 8012944:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8012946:	697b      	ldr	r3, [r7, #20]
 8012948:	2204      	movs	r2, #4
 801294a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801294c:	f640 0306 	movw	r3, #2054	; 0x806
 8012950:	9300      	str	r3, [sp, #0]
 8012952:	687b      	ldr	r3, [r7, #4]
 8012954:	68ba      	ldr	r2, [r7, #8]
 8012956:	69b9      	ldr	r1, [r7, #24]
 8012958:	68f8      	ldr	r0, [r7, #12]
 801295a:	f001 fb7b 	bl	8014054 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801295e:	69b8      	ldr	r0, [r7, #24]
 8012960:	f7f9 f9d0 	bl	800bd04 <pbuf_free>
  p = NULL;
 8012964:	2300      	movs	r3, #0
 8012966:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8012968:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801296c:	4618      	mov	r0, r3
 801296e:	3720      	adds	r7, #32
 8012970:	46bd      	mov	sp, r7
 8012972:	bd80      	pop	{r7, pc}
 8012974:	08017934 	.word	0x08017934
 8012978:	08017a84 	.word	0x08017a84
 801297c:	080179ac 	.word	0x080179ac
 8012980:	08017b34 	.word	0x08017b34
 8012984:	08017b68 	.word	0x08017b68

08012988 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8012988:	b580      	push	{r7, lr}
 801298a:	b088      	sub	sp, #32
 801298c:	af04      	add	r7, sp, #16
 801298e:	60f8      	str	r0, [r7, #12]
 8012990:	60b9      	str	r1, [r7, #8]
 8012992:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8012994:	68fb      	ldr	r3, [r7, #12]
 8012996:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80129a0:	68fb      	ldr	r3, [r7, #12]
 80129a2:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80129a4:	2201      	movs	r2, #1
 80129a6:	9203      	str	r2, [sp, #12]
 80129a8:	68ba      	ldr	r2, [r7, #8]
 80129aa:	9202      	str	r2, [sp, #8]
 80129ac:	4a06      	ldr	r2, [pc, #24]	; (80129c8 <etharp_request_dst+0x40>)
 80129ae:	9201      	str	r2, [sp, #4]
 80129b0:	9300      	str	r3, [sp, #0]
 80129b2:	4603      	mov	r3, r0
 80129b4:	687a      	ldr	r2, [r7, #4]
 80129b6:	68f8      	ldr	r0, [r7, #12]
 80129b8:	f7ff ff5a 	bl	8012870 <etharp_raw>
 80129bc:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80129be:	4618      	mov	r0, r3
 80129c0:	3710      	adds	r7, #16
 80129c2:	46bd      	mov	sp, r7
 80129c4:	bd80      	pop	{r7, pc}
 80129c6:	bf00      	nop
 80129c8:	0801815c 	.word	0x0801815c

080129cc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80129cc:	b580      	push	{r7, lr}
 80129ce:	b082      	sub	sp, #8
 80129d0:	af00      	add	r7, sp, #0
 80129d2:	6078      	str	r0, [r7, #4]
 80129d4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80129d6:	4a05      	ldr	r2, [pc, #20]	; (80129ec <etharp_request+0x20>)
 80129d8:	6839      	ldr	r1, [r7, #0]
 80129da:	6878      	ldr	r0, [r7, #4]
 80129dc:	f7ff ffd4 	bl	8012988 <etharp_request_dst>
 80129e0:	4603      	mov	r3, r0
}
 80129e2:	4618      	mov	r0, r3
 80129e4:	3708      	adds	r7, #8
 80129e6:	46bd      	mov	sp, r7
 80129e8:	bd80      	pop	{r7, pc}
 80129ea:	bf00      	nop
 80129ec:	08018154 	.word	0x08018154

080129f0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b08e      	sub	sp, #56	; 0x38
 80129f4:	af04      	add	r7, sp, #16
 80129f6:	6078      	str	r0, [r7, #4]
 80129f8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80129fa:	4b79      	ldr	r3, [pc, #484]	; (8012be0 <icmp_input+0x1f0>)
 80129fc:	689b      	ldr	r3, [r3, #8]
 80129fe:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8012a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012a02:	781b      	ldrb	r3, [r3, #0]
 8012a04:	f003 030f 	and.w	r3, r3, #15
 8012a08:	b2db      	uxtb	r3, r3
 8012a0a:	009b      	lsls	r3, r3, #2
 8012a0c:	b2db      	uxtb	r3, r3
 8012a0e:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8012a10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a12:	2b13      	cmp	r3, #19
 8012a14:	f240 80cd 	bls.w	8012bb2 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	895b      	ldrh	r3, [r3, #10]
 8012a1c:	2b03      	cmp	r3, #3
 8012a1e:	f240 80ca 	bls.w	8012bb6 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	685b      	ldr	r3, [r3, #4]
 8012a26:	781b      	ldrb	r3, [r3, #0]
 8012a28:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8012a2c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	f000 80b7 	beq.w	8012ba4 <icmp_input+0x1b4>
 8012a36:	2b08      	cmp	r3, #8
 8012a38:	f040 80b7 	bne.w	8012baa <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8012a3c:	4b69      	ldr	r3, [pc, #420]	; (8012be4 <icmp_input+0x1f4>)
 8012a3e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012a40:	4b67      	ldr	r3, [pc, #412]	; (8012be0 <icmp_input+0x1f0>)
 8012a42:	695b      	ldr	r3, [r3, #20]
 8012a44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012a48:	2be0      	cmp	r3, #224	; 0xe0
 8012a4a:	f000 80bb 	beq.w	8012bc4 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8012a4e:	4b64      	ldr	r3, [pc, #400]	; (8012be0 <icmp_input+0x1f0>)
 8012a50:	695b      	ldr	r3, [r3, #20]
 8012a52:	4a63      	ldr	r2, [pc, #396]	; (8012be0 <icmp_input+0x1f0>)
 8012a54:	6812      	ldr	r2, [r2, #0]
 8012a56:	4611      	mov	r1, r2
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f000 fbed 	bl	8013238 <ip4_addr_isbroadcast_u32>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	2b00      	cmp	r3, #0
 8012a62:	f040 80b1 	bne.w	8012bc8 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	891b      	ldrh	r3, [r3, #8]
 8012a6a:	2b07      	cmp	r3, #7
 8012a6c:	f240 80a5 	bls.w	8012bba <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012a70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a72:	330e      	adds	r3, #14
 8012a74:	4619      	mov	r1, r3
 8012a76:	6878      	ldr	r0, [r7, #4]
 8012a78:	f7f9 f8ae 	bl	800bbd8 <pbuf_add_header>
 8012a7c:	4603      	mov	r3, r0
 8012a7e:	2b00      	cmp	r3, #0
 8012a80:	d04b      	beq.n	8012b1a <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	891a      	ldrh	r2, [r3, #8]
 8012a86:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012a88:	4413      	add	r3, r2
 8012a8a:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	891b      	ldrh	r3, [r3, #8]
 8012a90:	8b7a      	ldrh	r2, [r7, #26]
 8012a92:	429a      	cmp	r2, r3
 8012a94:	f0c0 809a 	bcc.w	8012bcc <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8012a98:	8b7b      	ldrh	r3, [r7, #26]
 8012a9a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012a9e:	4619      	mov	r1, r3
 8012aa0:	200e      	movs	r0, #14
 8012aa2:	f7f8 fe4b 	bl	800b73c <pbuf_alloc>
 8012aa6:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8012aa8:	697b      	ldr	r3, [r7, #20]
 8012aaa:	2b00      	cmp	r3, #0
 8012aac:	f000 8090 	beq.w	8012bd0 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8012ab0:	697b      	ldr	r3, [r7, #20]
 8012ab2:	895b      	ldrh	r3, [r3, #10]
 8012ab4:	461a      	mov	r2, r3
 8012ab6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ab8:	3308      	adds	r3, #8
 8012aba:	429a      	cmp	r2, r3
 8012abc:	d203      	bcs.n	8012ac6 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8012abe:	6978      	ldr	r0, [r7, #20]
 8012ac0:	f7f9 f920 	bl	800bd04 <pbuf_free>
          goto icmperr;
 8012ac4:	e085      	b.n	8012bd2 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8012ac6:	697b      	ldr	r3, [r7, #20]
 8012ac8:	685b      	ldr	r3, [r3, #4]
 8012aca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012acc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012ace:	4618      	mov	r0, r3
 8012ad0:	f001 fd27 	bl	8014522 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8012ad4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012ad6:	4619      	mov	r1, r3
 8012ad8:	6978      	ldr	r0, [r7, #20]
 8012ada:	f7f9 f88d 	bl	800bbf8 <pbuf_remove_header>
 8012ade:	4603      	mov	r3, r0
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d009      	beq.n	8012af8 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8012ae4:	4b40      	ldr	r3, [pc, #256]	; (8012be8 <icmp_input+0x1f8>)
 8012ae6:	22b6      	movs	r2, #182	; 0xb6
 8012ae8:	4940      	ldr	r1, [pc, #256]	; (8012bec <icmp_input+0x1fc>)
 8012aea:	4841      	ldr	r0, [pc, #260]	; (8012bf0 <icmp_input+0x200>)
 8012aec:	f001 fdc4 	bl	8014678 <iprintf>
          pbuf_free(r);
 8012af0:	6978      	ldr	r0, [r7, #20]
 8012af2:	f7f9 f907 	bl	800bd04 <pbuf_free>
          goto icmperr;
 8012af6:	e06c      	b.n	8012bd2 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8012af8:	6879      	ldr	r1, [r7, #4]
 8012afa:	6978      	ldr	r0, [r7, #20]
 8012afc:	f7f9 fa26 	bl	800bf4c <pbuf_copy>
 8012b00:	4603      	mov	r3, r0
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d003      	beq.n	8012b0e <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8012b06:	6978      	ldr	r0, [r7, #20]
 8012b08:	f7f9 f8fc 	bl	800bd04 <pbuf_free>
          goto icmperr;
 8012b0c:	e061      	b.n	8012bd2 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8012b0e:	6878      	ldr	r0, [r7, #4]
 8012b10:	f7f9 f8f8 	bl	800bd04 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8012b14:	697b      	ldr	r3, [r7, #20]
 8012b16:	607b      	str	r3, [r7, #4]
 8012b18:	e00f      	b.n	8012b3a <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8012b1a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b1c:	330e      	adds	r3, #14
 8012b1e:	4619      	mov	r1, r3
 8012b20:	6878      	ldr	r0, [r7, #4]
 8012b22:	f7f9 f869 	bl	800bbf8 <pbuf_remove_header>
 8012b26:	4603      	mov	r3, r0
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d006      	beq.n	8012b3a <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8012b2c:	4b2e      	ldr	r3, [pc, #184]	; (8012be8 <icmp_input+0x1f8>)
 8012b2e:	22c7      	movs	r2, #199	; 0xc7
 8012b30:	4930      	ldr	r1, [pc, #192]	; (8012bf4 <icmp_input+0x204>)
 8012b32:	482f      	ldr	r0, [pc, #188]	; (8012bf0 <icmp_input+0x200>)
 8012b34:	f001 fda0 	bl	8014678 <iprintf>
          goto icmperr;
 8012b38:	e04b      	b.n	8012bd2 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8012b3a:	687b      	ldr	r3, [r7, #4]
 8012b3c:	685b      	ldr	r3, [r3, #4]
 8012b3e:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8012b40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012b42:	4619      	mov	r1, r3
 8012b44:	6878      	ldr	r0, [r7, #4]
 8012b46:	f7f9 f847 	bl	800bbd8 <pbuf_add_header>
 8012b4a:	4603      	mov	r3, r0
 8012b4c:	2b00      	cmp	r3, #0
 8012b4e:	d12b      	bne.n	8012ba8 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	685b      	ldr	r3, [r3, #4]
 8012b54:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8012b56:	69fb      	ldr	r3, [r7, #28]
 8012b58:	681a      	ldr	r2, [r3, #0]
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8012b5e:	4b20      	ldr	r3, [pc, #128]	; (8012be0 <icmp_input+0x1f0>)
 8012b60:	691a      	ldr	r2, [r3, #16]
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8012b66:	693b      	ldr	r3, [r7, #16]
 8012b68:	2200      	movs	r2, #0
 8012b6a:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8012b6c:	693b      	ldr	r3, [r7, #16]
 8012b6e:	2200      	movs	r2, #0
 8012b70:	709a      	strb	r2, [r3, #2]
 8012b72:	2200      	movs	r2, #0
 8012b74:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	22ff      	movs	r2, #255	; 0xff
 8012b7a:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	2200      	movs	r2, #0
 8012b80:	729a      	strb	r2, [r3, #10]
 8012b82:	2200      	movs	r2, #0
 8012b84:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8012b86:	683b      	ldr	r3, [r7, #0]
 8012b88:	9302      	str	r3, [sp, #8]
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	9301      	str	r3, [sp, #4]
 8012b8e:	2300      	movs	r3, #0
 8012b90:	9300      	str	r3, [sp, #0]
 8012b92:	23ff      	movs	r3, #255	; 0xff
 8012b94:	2200      	movs	r2, #0
 8012b96:	69f9      	ldr	r1, [r7, #28]
 8012b98:	6878      	ldr	r0, [r7, #4]
 8012b9a:	f000 fa75 	bl	8013088 <ip4_output_if>
 8012b9e:	4603      	mov	r3, r0
 8012ba0:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8012ba2:	e001      	b.n	8012ba8 <icmp_input+0x1b8>
      break;
 8012ba4:	bf00      	nop
 8012ba6:	e000      	b.n	8012baa <icmp_input+0x1ba>
      break;
 8012ba8:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8012baa:	6878      	ldr	r0, [r7, #4]
 8012bac:	f7f9 f8aa 	bl	800bd04 <pbuf_free>
  return;
 8012bb0:	e013      	b.n	8012bda <icmp_input+0x1ea>
    goto lenerr;
 8012bb2:	bf00      	nop
 8012bb4:	e002      	b.n	8012bbc <icmp_input+0x1cc>
    goto lenerr;
 8012bb6:	bf00      	nop
 8012bb8:	e000      	b.n	8012bbc <icmp_input+0x1cc>
        goto lenerr;
 8012bba:	bf00      	nop
lenerr:
  pbuf_free(p);
 8012bbc:	6878      	ldr	r0, [r7, #4]
 8012bbe:	f7f9 f8a1 	bl	800bd04 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012bc2:	e00a      	b.n	8012bda <icmp_input+0x1ea>
        goto icmperr;
 8012bc4:	bf00      	nop
 8012bc6:	e004      	b.n	8012bd2 <icmp_input+0x1e2>
        goto icmperr;
 8012bc8:	bf00      	nop
 8012bca:	e002      	b.n	8012bd2 <icmp_input+0x1e2>
          goto icmperr;
 8012bcc:	bf00      	nop
 8012bce:	e000      	b.n	8012bd2 <icmp_input+0x1e2>
          goto icmperr;
 8012bd0:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8012bd2:	6878      	ldr	r0, [r7, #4]
 8012bd4:	f7f9 f896 	bl	800bd04 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8012bd8:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8012bda:	3728      	adds	r7, #40	; 0x28
 8012bdc:	46bd      	mov	sp, r7
 8012bde:	bd80      	pop	{r7, pc}
 8012be0:	200098d4 	.word	0x200098d4
 8012be4:	200098e8 	.word	0x200098e8
 8012be8:	08017bac 	.word	0x08017bac
 8012bec:	08017be4 	.word	0x08017be4
 8012bf0:	08017c1c 	.word	0x08017c1c
 8012bf4:	08017c44 	.word	0x08017c44

08012bf8 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8012bf8:	b580      	push	{r7, lr}
 8012bfa:	b082      	sub	sp, #8
 8012bfc:	af00      	add	r7, sp, #0
 8012bfe:	6078      	str	r0, [r7, #4]
 8012c00:	460b      	mov	r3, r1
 8012c02:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8012c04:	78fb      	ldrb	r3, [r7, #3]
 8012c06:	461a      	mov	r2, r3
 8012c08:	2103      	movs	r1, #3
 8012c0a:	6878      	ldr	r0, [r7, #4]
 8012c0c:	f000 f814 	bl	8012c38 <icmp_send_response>
}
 8012c10:	bf00      	nop
 8012c12:	3708      	adds	r7, #8
 8012c14:	46bd      	mov	sp, r7
 8012c16:	bd80      	pop	{r7, pc}

08012c18 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8012c18:	b580      	push	{r7, lr}
 8012c1a:	b082      	sub	sp, #8
 8012c1c:	af00      	add	r7, sp, #0
 8012c1e:	6078      	str	r0, [r7, #4]
 8012c20:	460b      	mov	r3, r1
 8012c22:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8012c24:	78fb      	ldrb	r3, [r7, #3]
 8012c26:	461a      	mov	r2, r3
 8012c28:	210b      	movs	r1, #11
 8012c2a:	6878      	ldr	r0, [r7, #4]
 8012c2c:	f000 f804 	bl	8012c38 <icmp_send_response>
}
 8012c30:	bf00      	nop
 8012c32:	3708      	adds	r7, #8
 8012c34:	46bd      	mov	sp, r7
 8012c36:	bd80      	pop	{r7, pc}

08012c38 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8012c38:	b580      	push	{r7, lr}
 8012c3a:	b08c      	sub	sp, #48	; 0x30
 8012c3c:	af04      	add	r7, sp, #16
 8012c3e:	6078      	str	r0, [r7, #4]
 8012c40:	460b      	mov	r3, r1
 8012c42:	70fb      	strb	r3, [r7, #3]
 8012c44:	4613      	mov	r3, r2
 8012c46:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8012c48:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012c4c:	2124      	movs	r1, #36	; 0x24
 8012c4e:	2022      	movs	r0, #34	; 0x22
 8012c50:	f7f8 fd74 	bl	800b73c <pbuf_alloc>
 8012c54:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8012c56:	69fb      	ldr	r3, [r7, #28]
 8012c58:	2b00      	cmp	r3, #0
 8012c5a:	d04c      	beq.n	8012cf6 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8012c5c:	69fb      	ldr	r3, [r7, #28]
 8012c5e:	895b      	ldrh	r3, [r3, #10]
 8012c60:	2b23      	cmp	r3, #35	; 0x23
 8012c62:	d806      	bhi.n	8012c72 <icmp_send_response+0x3a>
 8012c64:	4b26      	ldr	r3, [pc, #152]	; (8012d00 <icmp_send_response+0xc8>)
 8012c66:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8012c6a:	4926      	ldr	r1, [pc, #152]	; (8012d04 <icmp_send_response+0xcc>)
 8012c6c:	4826      	ldr	r0, [pc, #152]	; (8012d08 <icmp_send_response+0xd0>)
 8012c6e:	f001 fd03 	bl	8014678 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8012c72:	687b      	ldr	r3, [r7, #4]
 8012c74:	685b      	ldr	r3, [r3, #4]
 8012c76:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8012c78:	69fb      	ldr	r3, [r7, #28]
 8012c7a:	685b      	ldr	r3, [r3, #4]
 8012c7c:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8012c7e:	697b      	ldr	r3, [r7, #20]
 8012c80:	78fa      	ldrb	r2, [r7, #3]
 8012c82:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8012c84:	697b      	ldr	r3, [r7, #20]
 8012c86:	78ba      	ldrb	r2, [r7, #2]
 8012c88:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8012c8a:	697b      	ldr	r3, [r7, #20]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	711a      	strb	r2, [r3, #4]
 8012c90:	2200      	movs	r2, #0
 8012c92:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	2200      	movs	r2, #0
 8012c98:	719a      	strb	r2, [r3, #6]
 8012c9a:	2200      	movs	r2, #0
 8012c9c:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8012c9e:	69fb      	ldr	r3, [r7, #28]
 8012ca0:	685b      	ldr	r3, [r3, #4]
 8012ca2:	f103 0008 	add.w	r0, r3, #8
 8012ca6:	687b      	ldr	r3, [r7, #4]
 8012ca8:	685b      	ldr	r3, [r3, #4]
 8012caa:	221c      	movs	r2, #28
 8012cac:	4619      	mov	r1, r3
 8012cae:	f001 fc38 	bl	8014522 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8012cb2:	69bb      	ldr	r3, [r7, #24]
 8012cb4:	68db      	ldr	r3, [r3, #12]
 8012cb6:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8012cb8:	f107 030c 	add.w	r3, r7, #12
 8012cbc:	4618      	mov	r0, r3
 8012cbe:	f000 f825 	bl	8012d0c <ip4_route>
 8012cc2:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8012cc4:	693b      	ldr	r3, [r7, #16]
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d011      	beq.n	8012cee <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8012cca:	697b      	ldr	r3, [r7, #20]
 8012ccc:	2200      	movs	r2, #0
 8012cce:	709a      	strb	r2, [r3, #2]
 8012cd0:	2200      	movs	r2, #0
 8012cd2:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8012cd4:	f107 020c 	add.w	r2, r7, #12
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	9302      	str	r3, [sp, #8]
 8012cdc:	2301      	movs	r3, #1
 8012cde:	9301      	str	r3, [sp, #4]
 8012ce0:	2300      	movs	r3, #0
 8012ce2:	9300      	str	r3, [sp, #0]
 8012ce4:	23ff      	movs	r3, #255	; 0xff
 8012ce6:	2100      	movs	r1, #0
 8012ce8:	69f8      	ldr	r0, [r7, #28]
 8012cea:	f000 f9cd 	bl	8013088 <ip4_output_if>
  }
  pbuf_free(q);
 8012cee:	69f8      	ldr	r0, [r7, #28]
 8012cf0:	f7f9 f808 	bl	800bd04 <pbuf_free>
 8012cf4:	e000      	b.n	8012cf8 <icmp_send_response+0xc0>
    return;
 8012cf6:	bf00      	nop
}
 8012cf8:	3720      	adds	r7, #32
 8012cfa:	46bd      	mov	sp, r7
 8012cfc:	bd80      	pop	{r7, pc}
 8012cfe:	bf00      	nop
 8012d00:	08017bac 	.word	0x08017bac
 8012d04:	08017c78 	.word	0x08017c78
 8012d08:	08017c1c 	.word	0x08017c1c

08012d0c <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8012d0c:	b480      	push	{r7}
 8012d0e:	b085      	sub	sp, #20
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8012d14:	4b33      	ldr	r3, [pc, #204]	; (8012de4 <ip4_route+0xd8>)
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	60fb      	str	r3, [r7, #12]
 8012d1a:	e036      	b.n	8012d8a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d22:	f003 0301 	and.w	r3, r3, #1
 8012d26:	b2db      	uxtb	r3, r3
 8012d28:	2b00      	cmp	r3, #0
 8012d2a:	d02b      	beq.n	8012d84 <ip4_route+0x78>
 8012d2c:	68fb      	ldr	r3, [r7, #12]
 8012d2e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d32:	089b      	lsrs	r3, r3, #2
 8012d34:	f003 0301 	and.w	r3, r3, #1
 8012d38:	b2db      	uxtb	r3, r3
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d022      	beq.n	8012d84 <ip4_route+0x78>
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	3304      	adds	r3, #4
 8012d42:	681b      	ldr	r3, [r3, #0]
 8012d44:	2b00      	cmp	r3, #0
 8012d46:	d01d      	beq.n	8012d84 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	681a      	ldr	r2, [r3, #0]
 8012d4c:	68fb      	ldr	r3, [r7, #12]
 8012d4e:	3304      	adds	r3, #4
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	405a      	eors	r2, r3
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	3308      	adds	r3, #8
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	4013      	ands	r3, r2
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d101      	bne.n	8012d64 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	e038      	b.n	8012dd6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8012d64:	68fb      	ldr	r3, [r7, #12]
 8012d66:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d6a:	f003 0302 	and.w	r3, r3, #2
 8012d6e:	2b00      	cmp	r3, #0
 8012d70:	d108      	bne.n	8012d84 <ip4_route+0x78>
 8012d72:	687b      	ldr	r3, [r7, #4]
 8012d74:	681a      	ldr	r2, [r3, #0]
 8012d76:	68fb      	ldr	r3, [r7, #12]
 8012d78:	330c      	adds	r3, #12
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	429a      	cmp	r2, r3
 8012d7e:	d101      	bne.n	8012d84 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8012d80:	68fb      	ldr	r3, [r7, #12]
 8012d82:	e028      	b.n	8012dd6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	681b      	ldr	r3, [r3, #0]
 8012d88:	60fb      	str	r3, [r7, #12]
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d1c5      	bne.n	8012d1c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012d90:	4b15      	ldr	r3, [pc, #84]	; (8012de8 <ip4_route+0xdc>)
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d01a      	beq.n	8012dce <ip4_route+0xc2>
 8012d98:	4b13      	ldr	r3, [pc, #76]	; (8012de8 <ip4_route+0xdc>)
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012da0:	f003 0301 	and.w	r3, r3, #1
 8012da4:	2b00      	cmp	r3, #0
 8012da6:	d012      	beq.n	8012dce <ip4_route+0xc2>
 8012da8:	4b0f      	ldr	r3, [pc, #60]	; (8012de8 <ip4_route+0xdc>)
 8012daa:	681b      	ldr	r3, [r3, #0]
 8012dac:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012db0:	f003 0304 	and.w	r3, r3, #4
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d00a      	beq.n	8012dce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012db8:	4b0b      	ldr	r3, [pc, #44]	; (8012de8 <ip4_route+0xdc>)
 8012dba:	681b      	ldr	r3, [r3, #0]
 8012dbc:	3304      	adds	r3, #4
 8012dbe:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d004      	beq.n	8012dce <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8012dc4:	687b      	ldr	r3, [r7, #4]
 8012dc6:	681b      	ldr	r3, [r3, #0]
 8012dc8:	b2db      	uxtb	r3, r3
 8012dca:	2b7f      	cmp	r3, #127	; 0x7f
 8012dcc:	d101      	bne.n	8012dd2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8012dce:	2300      	movs	r3, #0
 8012dd0:	e001      	b.n	8012dd6 <ip4_route+0xca>
  }

  return netif_default;
 8012dd2:	4b05      	ldr	r3, [pc, #20]	; (8012de8 <ip4_route+0xdc>)
 8012dd4:	681b      	ldr	r3, [r3, #0]
}
 8012dd6:	4618      	mov	r0, r3
 8012dd8:	3714      	adds	r7, #20
 8012dda:	46bd      	mov	sp, r7
 8012ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012de0:	4770      	bx	lr
 8012de2:	bf00      	nop
 8012de4:	2000f1dc 	.word	0x2000f1dc
 8012de8:	2000f1e0 	.word	0x2000f1e0

08012dec <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b082      	sub	sp, #8
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012dfa:	f003 0301 	and.w	r3, r3, #1
 8012dfe:	b2db      	uxtb	r3, r3
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d016      	beq.n	8012e32 <ip4_input_accept+0x46>
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	3304      	adds	r3, #4
 8012e08:	681b      	ldr	r3, [r3, #0]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d011      	beq.n	8012e32 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012e0e:	4b0b      	ldr	r3, [pc, #44]	; (8012e3c <ip4_input_accept+0x50>)
 8012e10:	695a      	ldr	r2, [r3, #20]
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	3304      	adds	r3, #4
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	429a      	cmp	r2, r3
 8012e1a:	d008      	beq.n	8012e2e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8012e1c:	4b07      	ldr	r3, [pc, #28]	; (8012e3c <ip4_input_accept+0x50>)
 8012e1e:	695b      	ldr	r3, [r3, #20]
 8012e20:	6879      	ldr	r1, [r7, #4]
 8012e22:	4618      	mov	r0, r3
 8012e24:	f000 fa08 	bl	8013238 <ip4_addr_isbroadcast_u32>
 8012e28:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d001      	beq.n	8012e32 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8012e2e:	2301      	movs	r3, #1
 8012e30:	e000      	b.n	8012e34 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8012e32:	2300      	movs	r3, #0
}
 8012e34:	4618      	mov	r0, r3
 8012e36:	3708      	adds	r7, #8
 8012e38:	46bd      	mov	sp, r7
 8012e3a:	bd80      	pop	{r7, pc}
 8012e3c:	200098d4 	.word	0x200098d4

08012e40 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b086      	sub	sp, #24
 8012e44:	af00      	add	r7, sp, #0
 8012e46:	6078      	str	r0, [r7, #4]
 8012e48:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	685b      	ldr	r3, [r3, #4]
 8012e4e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8012e50:	697b      	ldr	r3, [r7, #20]
 8012e52:	781b      	ldrb	r3, [r3, #0]
 8012e54:	091b      	lsrs	r3, r3, #4
 8012e56:	b2db      	uxtb	r3, r3
 8012e58:	2b04      	cmp	r3, #4
 8012e5a:	d004      	beq.n	8012e66 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8012e5c:	6878      	ldr	r0, [r7, #4]
 8012e5e:	f7f8 ff51 	bl	800bd04 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8012e62:	2300      	movs	r3, #0
 8012e64:	e107      	b.n	8013076 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8012e66:	697b      	ldr	r3, [r7, #20]
 8012e68:	781b      	ldrb	r3, [r3, #0]
 8012e6a:	f003 030f 	and.w	r3, r3, #15
 8012e6e:	b2db      	uxtb	r3, r3
 8012e70:	009b      	lsls	r3, r3, #2
 8012e72:	b2db      	uxtb	r3, r3
 8012e74:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8012e76:	697b      	ldr	r3, [r7, #20]
 8012e78:	885b      	ldrh	r3, [r3, #2]
 8012e7a:	b29b      	uxth	r3, r3
 8012e7c:	4618      	mov	r0, r3
 8012e7e:	f7f7 fb4f 	bl	800a520 <lwip_htons>
 8012e82:	4603      	mov	r3, r0
 8012e84:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	891b      	ldrh	r3, [r3, #8]
 8012e8a:	89ba      	ldrh	r2, [r7, #12]
 8012e8c:	429a      	cmp	r2, r3
 8012e8e:	d204      	bcs.n	8012e9a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8012e90:	89bb      	ldrh	r3, [r7, #12]
 8012e92:	4619      	mov	r1, r3
 8012e94:	6878      	ldr	r0, [r7, #4]
 8012e96:	f7f8 fdaf 	bl	800b9f8 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	895b      	ldrh	r3, [r3, #10]
 8012e9e:	89fa      	ldrh	r2, [r7, #14]
 8012ea0:	429a      	cmp	r2, r3
 8012ea2:	d807      	bhi.n	8012eb4 <ip4_input+0x74>
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	891b      	ldrh	r3, [r3, #8]
 8012ea8:	89ba      	ldrh	r2, [r7, #12]
 8012eaa:	429a      	cmp	r2, r3
 8012eac:	d802      	bhi.n	8012eb4 <ip4_input+0x74>
 8012eae:	89fb      	ldrh	r3, [r7, #14]
 8012eb0:	2b13      	cmp	r3, #19
 8012eb2:	d804      	bhi.n	8012ebe <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8012eb4:	6878      	ldr	r0, [r7, #4]
 8012eb6:	f7f8 ff25 	bl	800bd04 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8012eba:	2300      	movs	r3, #0
 8012ebc:	e0db      	b.n	8013076 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8012ebe:	697b      	ldr	r3, [r7, #20]
 8012ec0:	691b      	ldr	r3, [r3, #16]
 8012ec2:	4a6f      	ldr	r2, [pc, #444]	; (8013080 <ip4_input+0x240>)
 8012ec4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8012ec6:	697b      	ldr	r3, [r7, #20]
 8012ec8:	68db      	ldr	r3, [r3, #12]
 8012eca:	4a6d      	ldr	r2, [pc, #436]	; (8013080 <ip4_input+0x240>)
 8012ecc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8012ece:	4b6c      	ldr	r3, [pc, #432]	; (8013080 <ip4_input+0x240>)
 8012ed0:	695b      	ldr	r3, [r3, #20]
 8012ed2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8012ed6:	2be0      	cmp	r3, #224	; 0xe0
 8012ed8:	d112      	bne.n	8012f00 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8012eda:	683b      	ldr	r3, [r7, #0]
 8012edc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012ee0:	f003 0301 	and.w	r3, r3, #1
 8012ee4:	b2db      	uxtb	r3, r3
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d007      	beq.n	8012efa <ip4_input+0xba>
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	3304      	adds	r3, #4
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	2b00      	cmp	r3, #0
 8012ef2:	d002      	beq.n	8012efa <ip4_input+0xba>
      netif = inp;
 8012ef4:	683b      	ldr	r3, [r7, #0]
 8012ef6:	613b      	str	r3, [r7, #16]
 8012ef8:	e02a      	b.n	8012f50 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012efa:	2300      	movs	r3, #0
 8012efc:	613b      	str	r3, [r7, #16]
 8012efe:	e027      	b.n	8012f50 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8012f00:	6838      	ldr	r0, [r7, #0]
 8012f02:	f7ff ff73 	bl	8012dec <ip4_input_accept>
 8012f06:	4603      	mov	r3, r0
 8012f08:	2b00      	cmp	r3, #0
 8012f0a:	d002      	beq.n	8012f12 <ip4_input+0xd2>
      netif = inp;
 8012f0c:	683b      	ldr	r3, [r7, #0]
 8012f0e:	613b      	str	r3, [r7, #16]
 8012f10:	e01e      	b.n	8012f50 <ip4_input+0x110>
    } else {
      netif = NULL;
 8012f12:	2300      	movs	r3, #0
 8012f14:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8012f16:	4b5a      	ldr	r3, [pc, #360]	; (8013080 <ip4_input+0x240>)
 8012f18:	695b      	ldr	r3, [r3, #20]
 8012f1a:	b2db      	uxtb	r3, r3
 8012f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8012f1e:	d017      	beq.n	8012f50 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8012f20:	4b58      	ldr	r3, [pc, #352]	; (8013084 <ip4_input+0x244>)
 8012f22:	681b      	ldr	r3, [r3, #0]
 8012f24:	613b      	str	r3, [r7, #16]
 8012f26:	e00e      	b.n	8012f46 <ip4_input+0x106>
          if (netif == inp) {
 8012f28:	693a      	ldr	r2, [r7, #16]
 8012f2a:	683b      	ldr	r3, [r7, #0]
 8012f2c:	429a      	cmp	r2, r3
 8012f2e:	d006      	beq.n	8012f3e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8012f30:	6938      	ldr	r0, [r7, #16]
 8012f32:	f7ff ff5b 	bl	8012dec <ip4_input_accept>
 8012f36:	4603      	mov	r3, r0
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	d108      	bne.n	8012f4e <ip4_input+0x10e>
 8012f3c:	e000      	b.n	8012f40 <ip4_input+0x100>
            continue;
 8012f3e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8012f40:	693b      	ldr	r3, [r7, #16]
 8012f42:	681b      	ldr	r3, [r3, #0]
 8012f44:	613b      	str	r3, [r7, #16]
 8012f46:	693b      	ldr	r3, [r7, #16]
 8012f48:	2b00      	cmp	r3, #0
 8012f4a:	d1ed      	bne.n	8012f28 <ip4_input+0xe8>
 8012f4c:	e000      	b.n	8012f50 <ip4_input+0x110>
            break;
 8012f4e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012f50:	4b4b      	ldr	r3, [pc, #300]	; (8013080 <ip4_input+0x240>)
 8012f52:	691b      	ldr	r3, [r3, #16]
 8012f54:	6839      	ldr	r1, [r7, #0]
 8012f56:	4618      	mov	r0, r3
 8012f58:	f000 f96e 	bl	8013238 <ip4_addr_isbroadcast_u32>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	2b00      	cmp	r3, #0
 8012f60:	d105      	bne.n	8012f6e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8012f62:	4b47      	ldr	r3, [pc, #284]	; (8013080 <ip4_input+0x240>)
 8012f64:	691b      	ldr	r3, [r3, #16]
 8012f66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8012f6a:	2be0      	cmp	r3, #224	; 0xe0
 8012f6c:	d104      	bne.n	8012f78 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8012f6e:	6878      	ldr	r0, [r7, #4]
 8012f70:	f7f8 fec8 	bl	800bd04 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8012f74:	2300      	movs	r3, #0
 8012f76:	e07e      	b.n	8013076 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8012f78:	693b      	ldr	r3, [r7, #16]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d104      	bne.n	8012f88 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8012f7e:	6878      	ldr	r0, [r7, #4]
 8012f80:	f7f8 fec0 	bl	800bd04 <pbuf_free>
    return ERR_OK;
 8012f84:	2300      	movs	r3, #0
 8012f86:	e076      	b.n	8013076 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8012f88:	697b      	ldr	r3, [r7, #20]
 8012f8a:	88db      	ldrh	r3, [r3, #6]
 8012f8c:	b29b      	uxth	r3, r3
 8012f8e:	461a      	mov	r2, r3
 8012f90:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8012f94:	4013      	ands	r3, r2
 8012f96:	2b00      	cmp	r3, #0
 8012f98:	d00b      	beq.n	8012fb2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8012f9a:	6878      	ldr	r0, [r7, #4]
 8012f9c:	f000 fc92 	bl	80138c4 <ip4_reass>
 8012fa0:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	2b00      	cmp	r3, #0
 8012fa6:	d101      	bne.n	8012fac <ip4_input+0x16c>
      return ERR_OK;
 8012fa8:	2300      	movs	r3, #0
 8012faa:	e064      	b.n	8013076 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	685b      	ldr	r3, [r3, #4]
 8012fb0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8012fb2:	4a33      	ldr	r2, [pc, #204]	; (8013080 <ip4_input+0x240>)
 8012fb4:	693b      	ldr	r3, [r7, #16]
 8012fb6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8012fb8:	4a31      	ldr	r2, [pc, #196]	; (8013080 <ip4_input+0x240>)
 8012fba:	683b      	ldr	r3, [r7, #0]
 8012fbc:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8012fbe:	4a30      	ldr	r2, [pc, #192]	; (8013080 <ip4_input+0x240>)
 8012fc0:	697b      	ldr	r3, [r7, #20]
 8012fc2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8012fc4:	697b      	ldr	r3, [r7, #20]
 8012fc6:	781b      	ldrb	r3, [r3, #0]
 8012fc8:	f003 030f 	and.w	r3, r3, #15
 8012fcc:	b2db      	uxtb	r3, r3
 8012fce:	009b      	lsls	r3, r3, #2
 8012fd0:	b2db      	uxtb	r3, r3
 8012fd2:	b29a      	uxth	r2, r3
 8012fd4:	4b2a      	ldr	r3, [pc, #168]	; (8013080 <ip4_input+0x240>)
 8012fd6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8012fd8:	89fb      	ldrh	r3, [r7, #14]
 8012fda:	4619      	mov	r1, r3
 8012fdc:	6878      	ldr	r0, [r7, #4]
 8012fde:	f7f8 fe0b 	bl	800bbf8 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8012fe2:	697b      	ldr	r3, [r7, #20]
 8012fe4:	7a5b      	ldrb	r3, [r3, #9]
 8012fe6:	2b11      	cmp	r3, #17
 8012fe8:	d006      	beq.n	8012ff8 <ip4_input+0x1b8>
 8012fea:	2b11      	cmp	r3, #17
 8012fec:	dc13      	bgt.n	8013016 <ip4_input+0x1d6>
 8012fee:	2b01      	cmp	r3, #1
 8012ff0:	d00c      	beq.n	801300c <ip4_input+0x1cc>
 8012ff2:	2b06      	cmp	r3, #6
 8012ff4:	d005      	beq.n	8013002 <ip4_input+0x1c2>
 8012ff6:	e00e      	b.n	8013016 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8012ff8:	6839      	ldr	r1, [r7, #0]
 8012ffa:	6878      	ldr	r0, [r7, #4]
 8012ffc:	f7fe fc68 	bl	80118d0 <udp_input>
        break;
 8013000:	e026      	b.n	8013050 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8013002:	6839      	ldr	r1, [r7, #0]
 8013004:	6878      	ldr	r0, [r7, #4]
 8013006:	f7fa fcb1 	bl	800d96c <tcp_input>
        break;
 801300a:	e021      	b.n	8013050 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801300c:	6839      	ldr	r1, [r7, #0]
 801300e:	6878      	ldr	r0, [r7, #4]
 8013010:	f7ff fcee 	bl	80129f0 <icmp_input>
        break;
 8013014:	e01c      	b.n	8013050 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013016:	4b1a      	ldr	r3, [pc, #104]	; (8013080 <ip4_input+0x240>)
 8013018:	695b      	ldr	r3, [r3, #20]
 801301a:	6939      	ldr	r1, [r7, #16]
 801301c:	4618      	mov	r0, r3
 801301e:	f000 f90b 	bl	8013238 <ip4_addr_isbroadcast_u32>
 8013022:	4603      	mov	r3, r0
 8013024:	2b00      	cmp	r3, #0
 8013026:	d10f      	bne.n	8013048 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8013028:	4b15      	ldr	r3, [pc, #84]	; (8013080 <ip4_input+0x240>)
 801302a:	695b      	ldr	r3, [r3, #20]
 801302c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8013030:	2be0      	cmp	r3, #224	; 0xe0
 8013032:	d009      	beq.n	8013048 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8013034:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8013038:	4619      	mov	r1, r3
 801303a:	6878      	ldr	r0, [r7, #4]
 801303c:	f7f8 fe4f 	bl	800bcde <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8013040:	2102      	movs	r1, #2
 8013042:	6878      	ldr	r0, [r7, #4]
 8013044:	f7ff fdd8 	bl	8012bf8 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8013048:	6878      	ldr	r0, [r7, #4]
 801304a:	f7f8 fe5b 	bl	800bd04 <pbuf_free>
        break;
 801304e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8013050:	4b0b      	ldr	r3, [pc, #44]	; (8013080 <ip4_input+0x240>)
 8013052:	2200      	movs	r2, #0
 8013054:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8013056:	4b0a      	ldr	r3, [pc, #40]	; (8013080 <ip4_input+0x240>)
 8013058:	2200      	movs	r2, #0
 801305a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801305c:	4b08      	ldr	r3, [pc, #32]	; (8013080 <ip4_input+0x240>)
 801305e:	2200      	movs	r2, #0
 8013060:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8013062:	4b07      	ldr	r3, [pc, #28]	; (8013080 <ip4_input+0x240>)
 8013064:	2200      	movs	r2, #0
 8013066:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8013068:	4b05      	ldr	r3, [pc, #20]	; (8013080 <ip4_input+0x240>)
 801306a:	2200      	movs	r2, #0
 801306c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801306e:	4b04      	ldr	r3, [pc, #16]	; (8013080 <ip4_input+0x240>)
 8013070:	2200      	movs	r2, #0
 8013072:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8013074:	2300      	movs	r3, #0
}
 8013076:	4618      	mov	r0, r3
 8013078:	3718      	adds	r7, #24
 801307a:	46bd      	mov	sp, r7
 801307c:	bd80      	pop	{r7, pc}
 801307e:	bf00      	nop
 8013080:	200098d4 	.word	0x200098d4
 8013084:	2000f1dc 	.word	0x2000f1dc

08013088 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8013088:	b580      	push	{r7, lr}
 801308a:	b08a      	sub	sp, #40	; 0x28
 801308c:	af04      	add	r7, sp, #16
 801308e:	60f8      	str	r0, [r7, #12]
 8013090:	60b9      	str	r1, [r7, #8]
 8013092:	607a      	str	r2, [r7, #4]
 8013094:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8013096:	68bb      	ldr	r3, [r7, #8]
 8013098:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	2b00      	cmp	r3, #0
 801309e:	d009      	beq.n	80130b4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80130a0:	68bb      	ldr	r3, [r7, #8]
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d003      	beq.n	80130ae <ip4_output_if+0x26>
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d102      	bne.n	80130b4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80130ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130b0:	3304      	adds	r3, #4
 80130b2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80130b4:	78fa      	ldrb	r2, [r7, #3]
 80130b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80130b8:	9302      	str	r3, [sp, #8]
 80130ba:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80130be:	9301      	str	r3, [sp, #4]
 80130c0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80130c4:	9300      	str	r3, [sp, #0]
 80130c6:	4613      	mov	r3, r2
 80130c8:	687a      	ldr	r2, [r7, #4]
 80130ca:	6979      	ldr	r1, [r7, #20]
 80130cc:	68f8      	ldr	r0, [r7, #12]
 80130ce:	f000 f805 	bl	80130dc <ip4_output_if_src>
 80130d2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80130d4:	4618      	mov	r0, r3
 80130d6:	3718      	adds	r7, #24
 80130d8:	46bd      	mov	sp, r7
 80130da:	bd80      	pop	{r7, pc}

080130dc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80130dc:	b580      	push	{r7, lr}
 80130de:	b088      	sub	sp, #32
 80130e0:	af00      	add	r7, sp, #0
 80130e2:	60f8      	str	r0, [r7, #12]
 80130e4:	60b9      	str	r1, [r7, #8]
 80130e6:	607a      	str	r2, [r7, #4]
 80130e8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80130ea:	68fb      	ldr	r3, [r7, #12]
 80130ec:	7b9b      	ldrb	r3, [r3, #14]
 80130ee:	2b01      	cmp	r3, #1
 80130f0:	d006      	beq.n	8013100 <ip4_output_if_src+0x24>
 80130f2:	4b4b      	ldr	r3, [pc, #300]	; (8013220 <ip4_output_if_src+0x144>)
 80130f4:	f44f 7255 	mov.w	r2, #852	; 0x354
 80130f8:	494a      	ldr	r1, [pc, #296]	; (8013224 <ip4_output_if_src+0x148>)
 80130fa:	484b      	ldr	r0, [pc, #300]	; (8013228 <ip4_output_if_src+0x14c>)
 80130fc:	f001 fabc 	bl	8014678 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d060      	beq.n	80131c8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8013106:	2314      	movs	r3, #20
 8013108:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801310a:	2114      	movs	r1, #20
 801310c:	68f8      	ldr	r0, [r7, #12]
 801310e:	f7f8 fd63 	bl	800bbd8 <pbuf_add_header>
 8013112:	4603      	mov	r3, r0
 8013114:	2b00      	cmp	r3, #0
 8013116:	d002      	beq.n	801311e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8013118:	f06f 0301 	mvn.w	r3, #1
 801311c:	e07c      	b.n	8013218 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	685b      	ldr	r3, [r3, #4]
 8013122:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	895b      	ldrh	r3, [r3, #10]
 8013128:	2b13      	cmp	r3, #19
 801312a:	d806      	bhi.n	801313a <ip4_output_if_src+0x5e>
 801312c:	4b3c      	ldr	r3, [pc, #240]	; (8013220 <ip4_output_if_src+0x144>)
 801312e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8013132:	493e      	ldr	r1, [pc, #248]	; (801322c <ip4_output_if_src+0x150>)
 8013134:	483c      	ldr	r0, [pc, #240]	; (8013228 <ip4_output_if_src+0x14c>)
 8013136:	f001 fa9f 	bl	8014678 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801313a:	69fb      	ldr	r3, [r7, #28]
 801313c:	78fa      	ldrb	r2, [r7, #3]
 801313e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8013140:	69fb      	ldr	r3, [r7, #28]
 8013142:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8013146:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	681a      	ldr	r2, [r3, #0]
 801314c:	69fb      	ldr	r3, [r7, #28]
 801314e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8013150:	8b7b      	ldrh	r3, [r7, #26]
 8013152:	089b      	lsrs	r3, r3, #2
 8013154:	b29b      	uxth	r3, r3
 8013156:	b2db      	uxtb	r3, r3
 8013158:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801315c:	b2da      	uxtb	r2, r3
 801315e:	69fb      	ldr	r3, [r7, #28]
 8013160:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8013162:	69fb      	ldr	r3, [r7, #28]
 8013164:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013168:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801316a:	68fb      	ldr	r3, [r7, #12]
 801316c:	891b      	ldrh	r3, [r3, #8]
 801316e:	4618      	mov	r0, r3
 8013170:	f7f7 f9d6 	bl	800a520 <lwip_htons>
 8013174:	4603      	mov	r3, r0
 8013176:	461a      	mov	r2, r3
 8013178:	69fb      	ldr	r3, [r7, #28]
 801317a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801317c:	69fb      	ldr	r3, [r7, #28]
 801317e:	2200      	movs	r2, #0
 8013180:	719a      	strb	r2, [r3, #6]
 8013182:	2200      	movs	r2, #0
 8013184:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8013186:	4b2a      	ldr	r3, [pc, #168]	; (8013230 <ip4_output_if_src+0x154>)
 8013188:	881b      	ldrh	r3, [r3, #0]
 801318a:	4618      	mov	r0, r3
 801318c:	f7f7 f9c8 	bl	800a520 <lwip_htons>
 8013190:	4603      	mov	r3, r0
 8013192:	461a      	mov	r2, r3
 8013194:	69fb      	ldr	r3, [r7, #28]
 8013196:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8013198:	4b25      	ldr	r3, [pc, #148]	; (8013230 <ip4_output_if_src+0x154>)
 801319a:	881b      	ldrh	r3, [r3, #0]
 801319c:	3301      	adds	r3, #1
 801319e:	b29a      	uxth	r2, r3
 80131a0:	4b23      	ldr	r3, [pc, #140]	; (8013230 <ip4_output_if_src+0x154>)
 80131a2:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80131a4:	68bb      	ldr	r3, [r7, #8]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d104      	bne.n	80131b4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80131aa:	4b22      	ldr	r3, [pc, #136]	; (8013234 <ip4_output_if_src+0x158>)
 80131ac:	681a      	ldr	r2, [r3, #0]
 80131ae:	69fb      	ldr	r3, [r7, #28]
 80131b0:	60da      	str	r2, [r3, #12]
 80131b2:	e003      	b.n	80131bc <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80131b4:	68bb      	ldr	r3, [r7, #8]
 80131b6:	681a      	ldr	r2, [r3, #0]
 80131b8:	69fb      	ldr	r3, [r7, #28]
 80131ba:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80131bc:	69fb      	ldr	r3, [r7, #28]
 80131be:	2200      	movs	r2, #0
 80131c0:	729a      	strb	r2, [r3, #10]
 80131c2:	2200      	movs	r2, #0
 80131c4:	72da      	strb	r2, [r3, #11]
 80131c6:	e00f      	b.n	80131e8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80131c8:	68fb      	ldr	r3, [r7, #12]
 80131ca:	895b      	ldrh	r3, [r3, #10]
 80131cc:	2b13      	cmp	r3, #19
 80131ce:	d802      	bhi.n	80131d6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80131d0:	f06f 0301 	mvn.w	r3, #1
 80131d4:	e020      	b.n	8013218 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80131d6:	68fb      	ldr	r3, [r7, #12]
 80131d8:	685b      	ldr	r3, [r3, #4]
 80131da:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80131dc:	69fb      	ldr	r3, [r7, #28]
 80131de:	691b      	ldr	r3, [r3, #16]
 80131e0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80131e2:	f107 0314 	add.w	r3, r7, #20
 80131e6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80131e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80131ec:	2b00      	cmp	r3, #0
 80131ee:	d00c      	beq.n	801320a <ip4_output_if_src+0x12e>
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	891a      	ldrh	r2, [r3, #8]
 80131f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80131f6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80131f8:	429a      	cmp	r2, r3
 80131fa:	d906      	bls.n	801320a <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80131fc:	687a      	ldr	r2, [r7, #4]
 80131fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8013200:	68f8      	ldr	r0, [r7, #12]
 8013202:	f000 fd53 	bl	8013cac <ip4_frag>
 8013206:	4603      	mov	r3, r0
 8013208:	e006      	b.n	8013218 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801320a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801320c:	695b      	ldr	r3, [r3, #20]
 801320e:	687a      	ldr	r2, [r7, #4]
 8013210:	68f9      	ldr	r1, [r7, #12]
 8013212:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013214:	4798      	blx	r3
 8013216:	4603      	mov	r3, r0
}
 8013218:	4618      	mov	r0, r3
 801321a:	3720      	adds	r7, #32
 801321c:	46bd      	mov	sp, r7
 801321e:	bd80      	pop	{r7, pc}
 8013220:	08017ca4 	.word	0x08017ca4
 8013224:	08017cd8 	.word	0x08017cd8
 8013228:	08017ce4 	.word	0x08017ce4
 801322c:	08017d0c 	.word	0x08017d0c
 8013230:	2000f33a 	.word	0x2000f33a
 8013234:	08018150 	.word	0x08018150

08013238 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8013238:	b480      	push	{r7}
 801323a:	b085      	sub	sp, #20
 801323c:	af00      	add	r7, sp, #0
 801323e:	6078      	str	r0, [r7, #4]
 8013240:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8013246:	687b      	ldr	r3, [r7, #4]
 8013248:	f1b3 3fff 	cmp.w	r3, #4294967295
 801324c:	d002      	beq.n	8013254 <ip4_addr_isbroadcast_u32+0x1c>
 801324e:	687b      	ldr	r3, [r7, #4]
 8013250:	2b00      	cmp	r3, #0
 8013252:	d101      	bne.n	8013258 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8013254:	2301      	movs	r3, #1
 8013256:	e02a      	b.n	80132ae <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801325e:	f003 0302 	and.w	r3, r3, #2
 8013262:	2b00      	cmp	r3, #0
 8013264:	d101      	bne.n	801326a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8013266:	2300      	movs	r3, #0
 8013268:	e021      	b.n	80132ae <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	3304      	adds	r3, #4
 801326e:	681b      	ldr	r3, [r3, #0]
 8013270:	687a      	ldr	r2, [r7, #4]
 8013272:	429a      	cmp	r2, r3
 8013274:	d101      	bne.n	801327a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8013276:	2300      	movs	r3, #0
 8013278:	e019      	b.n	80132ae <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801327a:	68fa      	ldr	r2, [r7, #12]
 801327c:	683b      	ldr	r3, [r7, #0]
 801327e:	3304      	adds	r3, #4
 8013280:	681b      	ldr	r3, [r3, #0]
 8013282:	405a      	eors	r2, r3
 8013284:	683b      	ldr	r3, [r7, #0]
 8013286:	3308      	adds	r3, #8
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	4013      	ands	r3, r2
 801328c:	2b00      	cmp	r3, #0
 801328e:	d10d      	bne.n	80132ac <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8013290:	683b      	ldr	r3, [r7, #0]
 8013292:	3308      	adds	r3, #8
 8013294:	681b      	ldr	r3, [r3, #0]
 8013296:	43da      	mvns	r2, r3
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	3308      	adds	r3, #8
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80132a4:	429a      	cmp	r2, r3
 80132a6:	d101      	bne.n	80132ac <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80132a8:	2301      	movs	r3, #1
 80132aa:	e000      	b.n	80132ae <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80132ac:	2300      	movs	r3, #0
  }
}
 80132ae:	4618      	mov	r0, r3
 80132b0:	3714      	adds	r7, #20
 80132b2:	46bd      	mov	sp, r7
 80132b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132b8:	4770      	bx	lr
	...

080132bc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b084      	sub	sp, #16
 80132c0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80132c2:	2300      	movs	r3, #0
 80132c4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80132c6:	4b12      	ldr	r3, [pc, #72]	; (8013310 <ip_reass_tmr+0x54>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80132cc:	e018      	b.n	8013300 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	7fdb      	ldrb	r3, [r3, #31]
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d00b      	beq.n	80132ee <ip_reass_tmr+0x32>
      r->timer--;
 80132d6:	68fb      	ldr	r3, [r7, #12]
 80132d8:	7fdb      	ldrb	r3, [r3, #31]
 80132da:	3b01      	subs	r3, #1
 80132dc:	b2da      	uxtb	r2, r3
 80132de:	68fb      	ldr	r3, [r7, #12]
 80132e0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80132e2:	68fb      	ldr	r3, [r7, #12]
 80132e4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	681b      	ldr	r3, [r3, #0]
 80132ea:	60fb      	str	r3, [r7, #12]
 80132ec:	e008      	b.n	8013300 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80132f8:	68b9      	ldr	r1, [r7, #8]
 80132fa:	6878      	ldr	r0, [r7, #4]
 80132fc:	f000 f80a 	bl	8013314 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8013300:	68fb      	ldr	r3, [r7, #12]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d1e3      	bne.n	80132ce <ip_reass_tmr+0x12>
    }
  }
}
 8013306:	bf00      	nop
 8013308:	bf00      	nop
 801330a:	3710      	adds	r7, #16
 801330c:	46bd      	mov	sp, r7
 801330e:	bd80      	pop	{r7, pc}
 8013310:	2000f33c 	.word	0x2000f33c

08013314 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013314:	b580      	push	{r7, lr}
 8013316:	b088      	sub	sp, #32
 8013318:	af00      	add	r7, sp, #0
 801331a:	6078      	str	r0, [r7, #4]
 801331c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801331e:	2300      	movs	r3, #0
 8013320:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8013322:	683a      	ldr	r2, [r7, #0]
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	429a      	cmp	r2, r3
 8013328:	d105      	bne.n	8013336 <ip_reass_free_complete_datagram+0x22>
 801332a:	4b45      	ldr	r3, [pc, #276]	; (8013440 <ip_reass_free_complete_datagram+0x12c>)
 801332c:	22ab      	movs	r2, #171	; 0xab
 801332e:	4945      	ldr	r1, [pc, #276]	; (8013444 <ip_reass_free_complete_datagram+0x130>)
 8013330:	4845      	ldr	r0, [pc, #276]	; (8013448 <ip_reass_free_complete_datagram+0x134>)
 8013332:	f001 f9a1 	bl	8014678 <iprintf>
  if (prev != NULL) {
 8013336:	683b      	ldr	r3, [r7, #0]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d00a      	beq.n	8013352 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801333c:	683b      	ldr	r3, [r7, #0]
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	687a      	ldr	r2, [r7, #4]
 8013342:	429a      	cmp	r2, r3
 8013344:	d005      	beq.n	8013352 <ip_reass_free_complete_datagram+0x3e>
 8013346:	4b3e      	ldr	r3, [pc, #248]	; (8013440 <ip_reass_free_complete_datagram+0x12c>)
 8013348:	22ad      	movs	r2, #173	; 0xad
 801334a:	4940      	ldr	r1, [pc, #256]	; (801344c <ip_reass_free_complete_datagram+0x138>)
 801334c:	483e      	ldr	r0, [pc, #248]	; (8013448 <ip_reass_free_complete_datagram+0x134>)
 801334e:	f001 f993 	bl	8014678 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	685b      	ldr	r3, [r3, #4]
 8013356:	685b      	ldr	r3, [r3, #4]
 8013358:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801335a:	697b      	ldr	r3, [r7, #20]
 801335c:	889b      	ldrh	r3, [r3, #4]
 801335e:	b29b      	uxth	r3, r3
 8013360:	2b00      	cmp	r3, #0
 8013362:	d12a      	bne.n	80133ba <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	685b      	ldr	r3, [r3, #4]
 8013368:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801336a:	697b      	ldr	r3, [r7, #20]
 801336c:	681a      	ldr	r2, [r3, #0]
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8013372:	69bb      	ldr	r3, [r7, #24]
 8013374:	6858      	ldr	r0, [r3, #4]
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	3308      	adds	r3, #8
 801337a:	2214      	movs	r2, #20
 801337c:	4619      	mov	r1, r3
 801337e:	f001 f8d0 	bl	8014522 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8013382:	2101      	movs	r1, #1
 8013384:	69b8      	ldr	r0, [r7, #24]
 8013386:	f7ff fc47 	bl	8012c18 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801338a:	69b8      	ldr	r0, [r7, #24]
 801338c:	f7f8 fd48 	bl	800be20 <pbuf_clen>
 8013390:	4603      	mov	r3, r0
 8013392:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8013394:	8bfa      	ldrh	r2, [r7, #30]
 8013396:	8a7b      	ldrh	r3, [r7, #18]
 8013398:	4413      	add	r3, r2
 801339a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801339e:	db05      	blt.n	80133ac <ip_reass_free_complete_datagram+0x98>
 80133a0:	4b27      	ldr	r3, [pc, #156]	; (8013440 <ip_reass_free_complete_datagram+0x12c>)
 80133a2:	22bc      	movs	r2, #188	; 0xbc
 80133a4:	492a      	ldr	r1, [pc, #168]	; (8013450 <ip_reass_free_complete_datagram+0x13c>)
 80133a6:	4828      	ldr	r0, [pc, #160]	; (8013448 <ip_reass_free_complete_datagram+0x134>)
 80133a8:	f001 f966 	bl	8014678 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80133ac:	8bfa      	ldrh	r2, [r7, #30]
 80133ae:	8a7b      	ldrh	r3, [r7, #18]
 80133b0:	4413      	add	r3, r2
 80133b2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80133b4:	69b8      	ldr	r0, [r7, #24]
 80133b6:	f7f8 fca5 	bl	800bd04 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	685b      	ldr	r3, [r3, #4]
 80133be:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80133c0:	e01f      	b.n	8013402 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80133c2:	69bb      	ldr	r3, [r7, #24]
 80133c4:	685b      	ldr	r3, [r3, #4]
 80133c6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80133c8:	69bb      	ldr	r3, [r7, #24]
 80133ca:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80133cc:	697b      	ldr	r3, [r7, #20]
 80133ce:	681b      	ldr	r3, [r3, #0]
 80133d0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80133d2:	68f8      	ldr	r0, [r7, #12]
 80133d4:	f7f8 fd24 	bl	800be20 <pbuf_clen>
 80133d8:	4603      	mov	r3, r0
 80133da:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80133dc:	8bfa      	ldrh	r2, [r7, #30]
 80133de:	8a7b      	ldrh	r3, [r7, #18]
 80133e0:	4413      	add	r3, r2
 80133e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133e6:	db05      	blt.n	80133f4 <ip_reass_free_complete_datagram+0xe0>
 80133e8:	4b15      	ldr	r3, [pc, #84]	; (8013440 <ip_reass_free_complete_datagram+0x12c>)
 80133ea:	22cc      	movs	r2, #204	; 0xcc
 80133ec:	4918      	ldr	r1, [pc, #96]	; (8013450 <ip_reass_free_complete_datagram+0x13c>)
 80133ee:	4816      	ldr	r0, [pc, #88]	; (8013448 <ip_reass_free_complete_datagram+0x134>)
 80133f0:	f001 f942 	bl	8014678 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80133f4:	8bfa      	ldrh	r2, [r7, #30]
 80133f6:	8a7b      	ldrh	r3, [r7, #18]
 80133f8:	4413      	add	r3, r2
 80133fa:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80133fc:	68f8      	ldr	r0, [r7, #12]
 80133fe:	f7f8 fc81 	bl	800bd04 <pbuf_free>
  while (p != NULL) {
 8013402:	69bb      	ldr	r3, [r7, #24]
 8013404:	2b00      	cmp	r3, #0
 8013406:	d1dc      	bne.n	80133c2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8013408:	6839      	ldr	r1, [r7, #0]
 801340a:	6878      	ldr	r0, [r7, #4]
 801340c:	f000 f8c2 	bl	8013594 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8013410:	4b10      	ldr	r3, [pc, #64]	; (8013454 <ip_reass_free_complete_datagram+0x140>)
 8013412:	881b      	ldrh	r3, [r3, #0]
 8013414:	8bfa      	ldrh	r2, [r7, #30]
 8013416:	429a      	cmp	r2, r3
 8013418:	d905      	bls.n	8013426 <ip_reass_free_complete_datagram+0x112>
 801341a:	4b09      	ldr	r3, [pc, #36]	; (8013440 <ip_reass_free_complete_datagram+0x12c>)
 801341c:	22d2      	movs	r2, #210	; 0xd2
 801341e:	490e      	ldr	r1, [pc, #56]	; (8013458 <ip_reass_free_complete_datagram+0x144>)
 8013420:	4809      	ldr	r0, [pc, #36]	; (8013448 <ip_reass_free_complete_datagram+0x134>)
 8013422:	f001 f929 	bl	8014678 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8013426:	4b0b      	ldr	r3, [pc, #44]	; (8013454 <ip_reass_free_complete_datagram+0x140>)
 8013428:	881a      	ldrh	r2, [r3, #0]
 801342a:	8bfb      	ldrh	r3, [r7, #30]
 801342c:	1ad3      	subs	r3, r2, r3
 801342e:	b29a      	uxth	r2, r3
 8013430:	4b08      	ldr	r3, [pc, #32]	; (8013454 <ip_reass_free_complete_datagram+0x140>)
 8013432:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8013434:	8bfb      	ldrh	r3, [r7, #30]
}
 8013436:	4618      	mov	r0, r3
 8013438:	3720      	adds	r7, #32
 801343a:	46bd      	mov	sp, r7
 801343c:	bd80      	pop	{r7, pc}
 801343e:	bf00      	nop
 8013440:	08017d3c 	.word	0x08017d3c
 8013444:	08017d78 	.word	0x08017d78
 8013448:	08017d84 	.word	0x08017d84
 801344c:	08017dac 	.word	0x08017dac
 8013450:	08017dc0 	.word	0x08017dc0
 8013454:	2000f340 	.word	0x2000f340
 8013458:	08017de0 	.word	0x08017de0

0801345c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801345c:	b580      	push	{r7, lr}
 801345e:	b08a      	sub	sp, #40	; 0x28
 8013460:	af00      	add	r7, sp, #0
 8013462:	6078      	str	r0, [r7, #4]
 8013464:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8013466:	2300      	movs	r3, #0
 8013468:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801346a:	2300      	movs	r3, #0
 801346c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801346e:	2300      	movs	r3, #0
 8013470:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8013472:	2300      	movs	r3, #0
 8013474:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8013476:	2300      	movs	r3, #0
 8013478:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801347a:	4b28      	ldr	r3, [pc, #160]	; (801351c <ip_reass_remove_oldest_datagram+0xc0>)
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8013480:	e030      	b.n	80134e4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8013482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013484:	695a      	ldr	r2, [r3, #20]
 8013486:	687b      	ldr	r3, [r7, #4]
 8013488:	68db      	ldr	r3, [r3, #12]
 801348a:	429a      	cmp	r2, r3
 801348c:	d10c      	bne.n	80134a8 <ip_reass_remove_oldest_datagram+0x4c>
 801348e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013490:	699a      	ldr	r2, [r3, #24]
 8013492:	687b      	ldr	r3, [r7, #4]
 8013494:	691b      	ldr	r3, [r3, #16]
 8013496:	429a      	cmp	r2, r3
 8013498:	d106      	bne.n	80134a8 <ip_reass_remove_oldest_datagram+0x4c>
 801349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801349c:	899a      	ldrh	r2, [r3, #12]
 801349e:	687b      	ldr	r3, [r7, #4]
 80134a0:	889b      	ldrh	r3, [r3, #4]
 80134a2:	b29b      	uxth	r3, r3
 80134a4:	429a      	cmp	r2, r3
 80134a6:	d014      	beq.n	80134d2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80134a8:	693b      	ldr	r3, [r7, #16]
 80134aa:	3301      	adds	r3, #1
 80134ac:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80134ae:	6a3b      	ldr	r3, [r7, #32]
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d104      	bne.n	80134be <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80134b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134b6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80134b8:	69fb      	ldr	r3, [r7, #28]
 80134ba:	61bb      	str	r3, [r7, #24]
 80134bc:	e009      	b.n	80134d2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80134be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134c0:	7fda      	ldrb	r2, [r3, #31]
 80134c2:	6a3b      	ldr	r3, [r7, #32]
 80134c4:	7fdb      	ldrb	r3, [r3, #31]
 80134c6:	429a      	cmp	r2, r3
 80134c8:	d803      	bhi.n	80134d2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80134ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134cc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80134ce:	69fb      	ldr	r3, [r7, #28]
 80134d0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80134d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d001      	beq.n	80134de <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80134da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134dc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80134de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e0:	681b      	ldr	r3, [r3, #0]
 80134e2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80134e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134e6:	2b00      	cmp	r3, #0
 80134e8:	d1cb      	bne.n	8013482 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80134ea:	6a3b      	ldr	r3, [r7, #32]
 80134ec:	2b00      	cmp	r3, #0
 80134ee:	d008      	beq.n	8013502 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80134f0:	69b9      	ldr	r1, [r7, #24]
 80134f2:	6a38      	ldr	r0, [r7, #32]
 80134f4:	f7ff ff0e 	bl	8013314 <ip_reass_free_complete_datagram>
 80134f8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80134fa:	697a      	ldr	r2, [r7, #20]
 80134fc:	68fb      	ldr	r3, [r7, #12]
 80134fe:	4413      	add	r3, r2
 8013500:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8013502:	697a      	ldr	r2, [r7, #20]
 8013504:	683b      	ldr	r3, [r7, #0]
 8013506:	429a      	cmp	r2, r3
 8013508:	da02      	bge.n	8013510 <ip_reass_remove_oldest_datagram+0xb4>
 801350a:	693b      	ldr	r3, [r7, #16]
 801350c:	2b01      	cmp	r3, #1
 801350e:	dcac      	bgt.n	801346a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8013510:	697b      	ldr	r3, [r7, #20]
}
 8013512:	4618      	mov	r0, r3
 8013514:	3728      	adds	r7, #40	; 0x28
 8013516:	46bd      	mov	sp, r7
 8013518:	bd80      	pop	{r7, pc}
 801351a:	bf00      	nop
 801351c:	2000f33c 	.word	0x2000f33c

08013520 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8013520:	b580      	push	{r7, lr}
 8013522:	b084      	sub	sp, #16
 8013524:	af00      	add	r7, sp, #0
 8013526:	6078      	str	r0, [r7, #4]
 8013528:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801352a:	2004      	movs	r0, #4
 801352c:	f7f7 fcd0 	bl	800aed0 <memp_malloc>
 8013530:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	2b00      	cmp	r3, #0
 8013536:	d110      	bne.n	801355a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8013538:	6839      	ldr	r1, [r7, #0]
 801353a:	6878      	ldr	r0, [r7, #4]
 801353c:	f7ff ff8e 	bl	801345c <ip_reass_remove_oldest_datagram>
 8013540:	4602      	mov	r2, r0
 8013542:	683b      	ldr	r3, [r7, #0]
 8013544:	4293      	cmp	r3, r2
 8013546:	dc03      	bgt.n	8013550 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8013548:	2004      	movs	r0, #4
 801354a:	f7f7 fcc1 	bl	800aed0 <memp_malloc>
 801354e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8013550:	68fb      	ldr	r3, [r7, #12]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d101      	bne.n	801355a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8013556:	2300      	movs	r3, #0
 8013558:	e016      	b.n	8013588 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801355a:	2220      	movs	r2, #32
 801355c:	2100      	movs	r1, #0
 801355e:	68f8      	ldr	r0, [r7, #12]
 8013560:	f000 ffed 	bl	801453e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8013564:	68fb      	ldr	r3, [r7, #12]
 8013566:	220f      	movs	r2, #15
 8013568:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801356a:	4b09      	ldr	r3, [pc, #36]	; (8013590 <ip_reass_enqueue_new_datagram+0x70>)
 801356c:	681a      	ldr	r2, [r3, #0]
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8013572:	4a07      	ldr	r2, [pc, #28]	; (8013590 <ip_reass_enqueue_new_datagram+0x70>)
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8013578:	68fb      	ldr	r3, [r7, #12]
 801357a:	3308      	adds	r3, #8
 801357c:	2214      	movs	r2, #20
 801357e:	6879      	ldr	r1, [r7, #4]
 8013580:	4618      	mov	r0, r3
 8013582:	f000 ffce 	bl	8014522 <memcpy>
  return ipr;
 8013586:	68fb      	ldr	r3, [r7, #12]
}
 8013588:	4618      	mov	r0, r3
 801358a:	3710      	adds	r7, #16
 801358c:	46bd      	mov	sp, r7
 801358e:	bd80      	pop	{r7, pc}
 8013590:	2000f33c 	.word	0x2000f33c

08013594 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b082      	sub	sp, #8
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
 801359c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801359e:	4b10      	ldr	r3, [pc, #64]	; (80135e0 <ip_reass_dequeue_datagram+0x4c>)
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	687a      	ldr	r2, [r7, #4]
 80135a4:	429a      	cmp	r2, r3
 80135a6:	d104      	bne.n	80135b2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	4a0c      	ldr	r2, [pc, #48]	; (80135e0 <ip_reass_dequeue_datagram+0x4c>)
 80135ae:	6013      	str	r3, [r2, #0]
 80135b0:	e00d      	b.n	80135ce <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80135b2:	683b      	ldr	r3, [r7, #0]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d106      	bne.n	80135c6 <ip_reass_dequeue_datagram+0x32>
 80135b8:	4b0a      	ldr	r3, [pc, #40]	; (80135e4 <ip_reass_dequeue_datagram+0x50>)
 80135ba:	f240 1245 	movw	r2, #325	; 0x145
 80135be:	490a      	ldr	r1, [pc, #40]	; (80135e8 <ip_reass_dequeue_datagram+0x54>)
 80135c0:	480a      	ldr	r0, [pc, #40]	; (80135ec <ip_reass_dequeue_datagram+0x58>)
 80135c2:	f001 f859 	bl	8014678 <iprintf>
    prev->next = ipr->next;
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	681a      	ldr	r2, [r3, #0]
 80135ca:	683b      	ldr	r3, [r7, #0]
 80135cc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80135ce:	6879      	ldr	r1, [r7, #4]
 80135d0:	2004      	movs	r0, #4
 80135d2:	f7f7 fcf3 	bl	800afbc <memp_free>
}
 80135d6:	bf00      	nop
 80135d8:	3708      	adds	r7, #8
 80135da:	46bd      	mov	sp, r7
 80135dc:	bd80      	pop	{r7, pc}
 80135de:	bf00      	nop
 80135e0:	2000f33c 	.word	0x2000f33c
 80135e4:	08017d3c 	.word	0x08017d3c
 80135e8:	08017e04 	.word	0x08017e04
 80135ec:	08017d84 	.word	0x08017d84

080135f0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80135f0:	b580      	push	{r7, lr}
 80135f2:	b08c      	sub	sp, #48	; 0x30
 80135f4:	af00      	add	r7, sp, #0
 80135f6:	60f8      	str	r0, [r7, #12]
 80135f8:	60b9      	str	r1, [r7, #8]
 80135fa:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80135fc:	2300      	movs	r3, #0
 80135fe:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8013600:	2301      	movs	r3, #1
 8013602:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8013604:	68bb      	ldr	r3, [r7, #8]
 8013606:	685b      	ldr	r3, [r3, #4]
 8013608:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801360a:	69fb      	ldr	r3, [r7, #28]
 801360c:	885b      	ldrh	r3, [r3, #2]
 801360e:	b29b      	uxth	r3, r3
 8013610:	4618      	mov	r0, r3
 8013612:	f7f6 ff85 	bl	800a520 <lwip_htons>
 8013616:	4603      	mov	r3, r0
 8013618:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801361a:	69fb      	ldr	r3, [r7, #28]
 801361c:	781b      	ldrb	r3, [r3, #0]
 801361e:	f003 030f 	and.w	r3, r3, #15
 8013622:	b2db      	uxtb	r3, r3
 8013624:	009b      	lsls	r3, r3, #2
 8013626:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8013628:	7e7b      	ldrb	r3, [r7, #25]
 801362a:	b29b      	uxth	r3, r3
 801362c:	8b7a      	ldrh	r2, [r7, #26]
 801362e:	429a      	cmp	r2, r3
 8013630:	d202      	bcs.n	8013638 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013632:	f04f 33ff 	mov.w	r3, #4294967295
 8013636:	e135      	b.n	80138a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8013638:	7e7b      	ldrb	r3, [r7, #25]
 801363a:	b29b      	uxth	r3, r3
 801363c:	8b7a      	ldrh	r2, [r7, #26]
 801363e:	1ad3      	subs	r3, r2, r3
 8013640:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8013642:	69fb      	ldr	r3, [r7, #28]
 8013644:	88db      	ldrh	r3, [r3, #6]
 8013646:	b29b      	uxth	r3, r3
 8013648:	4618      	mov	r0, r3
 801364a:	f7f6 ff69 	bl	800a520 <lwip_htons>
 801364e:	4603      	mov	r3, r0
 8013650:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013654:	b29b      	uxth	r3, r3
 8013656:	00db      	lsls	r3, r3, #3
 8013658:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801365a:	68bb      	ldr	r3, [r7, #8]
 801365c:	685b      	ldr	r3, [r3, #4]
 801365e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8013660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013662:	2200      	movs	r2, #0
 8013664:	701a      	strb	r2, [r3, #0]
 8013666:	2200      	movs	r2, #0
 8013668:	705a      	strb	r2, [r3, #1]
 801366a:	2200      	movs	r2, #0
 801366c:	709a      	strb	r2, [r3, #2]
 801366e:	2200      	movs	r2, #0
 8013670:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8013672:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013674:	8afa      	ldrh	r2, [r7, #22]
 8013676:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8013678:	8afa      	ldrh	r2, [r7, #22]
 801367a:	8b7b      	ldrh	r3, [r7, #26]
 801367c:	4413      	add	r3, r2
 801367e:	b29a      	uxth	r2, r3
 8013680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013682:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8013684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013686:	88db      	ldrh	r3, [r3, #6]
 8013688:	b29b      	uxth	r3, r3
 801368a:	8afa      	ldrh	r2, [r7, #22]
 801368c:	429a      	cmp	r2, r3
 801368e:	d902      	bls.n	8013696 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013690:	f04f 33ff 	mov.w	r3, #4294967295
 8013694:	e106      	b.n	80138a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8013696:	68fb      	ldr	r3, [r7, #12]
 8013698:	685b      	ldr	r3, [r3, #4]
 801369a:	627b      	str	r3, [r7, #36]	; 0x24
 801369c:	e068      	b.n	8013770 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80136a0:	685b      	ldr	r3, [r3, #4]
 80136a2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80136a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136a6:	889b      	ldrh	r3, [r3, #4]
 80136a8:	b29a      	uxth	r2, r3
 80136aa:	693b      	ldr	r3, [r7, #16]
 80136ac:	889b      	ldrh	r3, [r3, #4]
 80136ae:	b29b      	uxth	r3, r3
 80136b0:	429a      	cmp	r2, r3
 80136b2:	d235      	bcs.n	8013720 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80136b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80136b8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80136ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136bc:	2b00      	cmp	r3, #0
 80136be:	d020      	beq.n	8013702 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80136c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136c2:	889b      	ldrh	r3, [r3, #4]
 80136c4:	b29a      	uxth	r2, r3
 80136c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136c8:	88db      	ldrh	r3, [r3, #6]
 80136ca:	b29b      	uxth	r3, r3
 80136cc:	429a      	cmp	r2, r3
 80136ce:	d307      	bcc.n	80136e0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80136d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136d2:	88db      	ldrh	r3, [r3, #6]
 80136d4:	b29a      	uxth	r2, r3
 80136d6:	693b      	ldr	r3, [r7, #16]
 80136d8:	889b      	ldrh	r3, [r3, #4]
 80136da:	b29b      	uxth	r3, r3
 80136dc:	429a      	cmp	r2, r3
 80136de:	d902      	bls.n	80136e6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80136e0:	f04f 33ff 	mov.w	r3, #4294967295
 80136e4:	e0de      	b.n	80138a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80136e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136e8:	68ba      	ldr	r2, [r7, #8]
 80136ea:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80136ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80136ee:	88db      	ldrh	r3, [r3, #6]
 80136f0:	b29a      	uxth	r2, r3
 80136f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136f4:	889b      	ldrh	r3, [r3, #4]
 80136f6:	b29b      	uxth	r3, r3
 80136f8:	429a      	cmp	r2, r3
 80136fa:	d03d      	beq.n	8013778 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80136fc:	2300      	movs	r3, #0
 80136fe:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8013700:	e03a      	b.n	8013778 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8013702:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013704:	88db      	ldrh	r3, [r3, #6]
 8013706:	b29a      	uxth	r2, r3
 8013708:	693b      	ldr	r3, [r7, #16]
 801370a:	889b      	ldrh	r3, [r3, #4]
 801370c:	b29b      	uxth	r3, r3
 801370e:	429a      	cmp	r2, r3
 8013710:	d902      	bls.n	8013718 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013712:	f04f 33ff 	mov.w	r3, #4294967295
 8013716:	e0c5      	b.n	80138a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	68ba      	ldr	r2, [r7, #8]
 801371c:	605a      	str	r2, [r3, #4]
      break;
 801371e:	e02b      	b.n	8013778 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8013720:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013722:	889b      	ldrh	r3, [r3, #4]
 8013724:	b29a      	uxth	r2, r3
 8013726:	693b      	ldr	r3, [r7, #16]
 8013728:	889b      	ldrh	r3, [r3, #4]
 801372a:	b29b      	uxth	r3, r3
 801372c:	429a      	cmp	r2, r3
 801372e:	d102      	bne.n	8013736 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013730:	f04f 33ff 	mov.w	r3, #4294967295
 8013734:	e0b6      	b.n	80138a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8013736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013738:	889b      	ldrh	r3, [r3, #4]
 801373a:	b29a      	uxth	r2, r3
 801373c:	693b      	ldr	r3, [r7, #16]
 801373e:	88db      	ldrh	r3, [r3, #6]
 8013740:	b29b      	uxth	r3, r3
 8013742:	429a      	cmp	r2, r3
 8013744:	d202      	bcs.n	801374c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8013746:	f04f 33ff 	mov.w	r3, #4294967295
 801374a:	e0ab      	b.n	80138a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801374c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801374e:	2b00      	cmp	r3, #0
 8013750:	d009      	beq.n	8013766 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8013752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013754:	88db      	ldrh	r3, [r3, #6]
 8013756:	b29a      	uxth	r2, r3
 8013758:	693b      	ldr	r3, [r7, #16]
 801375a:	889b      	ldrh	r3, [r3, #4]
 801375c:	b29b      	uxth	r3, r3
 801375e:	429a      	cmp	r2, r3
 8013760:	d001      	beq.n	8013766 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8013762:	2300      	movs	r3, #0
 8013764:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8013766:	693b      	ldr	r3, [r7, #16]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801376c:	693b      	ldr	r3, [r7, #16]
 801376e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8013770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013772:	2b00      	cmp	r3, #0
 8013774:	d193      	bne.n	801369e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8013776:	e000      	b.n	801377a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8013778:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801377c:	2b00      	cmp	r3, #0
 801377e:	d12d      	bne.n	80137dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8013780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013782:	2b00      	cmp	r3, #0
 8013784:	d01c      	beq.n	80137c0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8013786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013788:	88db      	ldrh	r3, [r3, #6]
 801378a:	b29a      	uxth	r2, r3
 801378c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801378e:	889b      	ldrh	r3, [r3, #4]
 8013790:	b29b      	uxth	r3, r3
 8013792:	429a      	cmp	r2, r3
 8013794:	d906      	bls.n	80137a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8013796:	4b45      	ldr	r3, [pc, #276]	; (80138ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013798:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801379c:	4944      	ldr	r1, [pc, #272]	; (80138b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801379e:	4845      	ldr	r0, [pc, #276]	; (80138b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80137a0:	f000 ff6a 	bl	8014678 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80137a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137a6:	68ba      	ldr	r2, [r7, #8]
 80137a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80137aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137ac:	88db      	ldrh	r3, [r3, #6]
 80137ae:	b29a      	uxth	r2, r3
 80137b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80137b2:	889b      	ldrh	r3, [r3, #4]
 80137b4:	b29b      	uxth	r3, r3
 80137b6:	429a      	cmp	r2, r3
 80137b8:	d010      	beq.n	80137dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80137ba:	2300      	movs	r3, #0
 80137bc:	623b      	str	r3, [r7, #32]
 80137be:	e00d      	b.n	80137dc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80137c0:	68fb      	ldr	r3, [r7, #12]
 80137c2:	685b      	ldr	r3, [r3, #4]
 80137c4:	2b00      	cmp	r3, #0
 80137c6:	d006      	beq.n	80137d6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80137c8:	4b38      	ldr	r3, [pc, #224]	; (80138ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80137ca:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80137ce:	493a      	ldr	r1, [pc, #232]	; (80138b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80137d0:	4838      	ldr	r0, [pc, #224]	; (80138b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80137d2:	f000 ff51 	bl	8014678 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	68ba      	ldr	r2, [r7, #8]
 80137da:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	2b00      	cmp	r3, #0
 80137e0:	d105      	bne.n	80137ee <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80137e2:	68fb      	ldr	r3, [r7, #12]
 80137e4:	7f9b      	ldrb	r3, [r3, #30]
 80137e6:	f003 0301 	and.w	r3, r3, #1
 80137ea:	2b00      	cmp	r3, #0
 80137ec:	d059      	beq.n	80138a2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80137ee:	6a3b      	ldr	r3, [r7, #32]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d04f      	beq.n	8013894 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	685b      	ldr	r3, [r3, #4]
 80137f8:	2b00      	cmp	r3, #0
 80137fa:	d006      	beq.n	801380a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80137fc:	68fb      	ldr	r3, [r7, #12]
 80137fe:	685b      	ldr	r3, [r3, #4]
 8013800:	685b      	ldr	r3, [r3, #4]
 8013802:	889b      	ldrh	r3, [r3, #4]
 8013804:	b29b      	uxth	r3, r3
 8013806:	2b00      	cmp	r3, #0
 8013808:	d002      	beq.n	8013810 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801380a:	2300      	movs	r3, #0
 801380c:	623b      	str	r3, [r7, #32]
 801380e:	e041      	b.n	8013894 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8013810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013812:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8013814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013816:	681b      	ldr	r3, [r3, #0]
 8013818:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801381a:	e012      	b.n	8013842 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801381c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801381e:	685b      	ldr	r3, [r3, #4]
 8013820:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8013822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013824:	88db      	ldrh	r3, [r3, #6]
 8013826:	b29a      	uxth	r2, r3
 8013828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801382a:	889b      	ldrh	r3, [r3, #4]
 801382c:	b29b      	uxth	r3, r3
 801382e:	429a      	cmp	r2, r3
 8013830:	d002      	beq.n	8013838 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8013832:	2300      	movs	r3, #0
 8013834:	623b      	str	r3, [r7, #32]
            break;
 8013836:	e007      	b.n	8013848 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8013838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801383a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801383c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8013842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013844:	2b00      	cmp	r3, #0
 8013846:	d1e9      	bne.n	801381c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8013848:	6a3b      	ldr	r3, [r7, #32]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d022      	beq.n	8013894 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801384e:	68fb      	ldr	r3, [r7, #12]
 8013850:	685b      	ldr	r3, [r3, #4]
 8013852:	2b00      	cmp	r3, #0
 8013854:	d106      	bne.n	8013864 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8013856:	4b15      	ldr	r3, [pc, #84]	; (80138ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013858:	f240 12df 	movw	r2, #479	; 0x1df
 801385c:	4917      	ldr	r1, [pc, #92]	; (80138bc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801385e:	4815      	ldr	r0, [pc, #84]	; (80138b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013860:	f000 ff0a 	bl	8014678 <iprintf>
          LWIP_ASSERT("sanity check",
 8013864:	68fb      	ldr	r3, [r7, #12]
 8013866:	685b      	ldr	r3, [r3, #4]
 8013868:	685b      	ldr	r3, [r3, #4]
 801386a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801386c:	429a      	cmp	r2, r3
 801386e:	d106      	bne.n	801387e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8013870:	4b0e      	ldr	r3, [pc, #56]	; (80138ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013872:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8013876:	4911      	ldr	r1, [pc, #68]	; (80138bc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8013878:	480e      	ldr	r0, [pc, #56]	; (80138b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801387a:	f000 fefd 	bl	8014678 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801387e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013880:	681b      	ldr	r3, [r3, #0]
 8013882:	2b00      	cmp	r3, #0
 8013884:	d006      	beq.n	8013894 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8013886:	4b09      	ldr	r3, [pc, #36]	; (80138ac <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8013888:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801388c:	490c      	ldr	r1, [pc, #48]	; (80138c0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801388e:	4809      	ldr	r0, [pc, #36]	; (80138b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8013890:	f000 fef2 	bl	8014678 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8013894:	6a3b      	ldr	r3, [r7, #32]
 8013896:	2b00      	cmp	r3, #0
 8013898:	bf14      	ite	ne
 801389a:	2301      	movne	r3, #1
 801389c:	2300      	moveq	r3, #0
 801389e:	b2db      	uxtb	r3, r3
 80138a0:	e000      	b.n	80138a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80138a2:	2300      	movs	r3, #0
}
 80138a4:	4618      	mov	r0, r3
 80138a6:	3730      	adds	r7, #48	; 0x30
 80138a8:	46bd      	mov	sp, r7
 80138aa:	bd80      	pop	{r7, pc}
 80138ac:	08017d3c 	.word	0x08017d3c
 80138b0:	08017e20 	.word	0x08017e20
 80138b4:	08017d84 	.word	0x08017d84
 80138b8:	08017e40 	.word	0x08017e40
 80138bc:	08017e78 	.word	0x08017e78
 80138c0:	08017e88 	.word	0x08017e88

080138c4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b08e      	sub	sp, #56	; 0x38
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	685b      	ldr	r3, [r3, #4]
 80138d0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80138d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138d4:	781b      	ldrb	r3, [r3, #0]
 80138d6:	f003 030f 	and.w	r3, r3, #15
 80138da:	b2db      	uxtb	r3, r3
 80138dc:	009b      	lsls	r3, r3, #2
 80138de:	b2db      	uxtb	r3, r3
 80138e0:	2b14      	cmp	r3, #20
 80138e2:	f040 8171 	bne.w	8013bc8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80138e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138e8:	88db      	ldrh	r3, [r3, #6]
 80138ea:	b29b      	uxth	r3, r3
 80138ec:	4618      	mov	r0, r3
 80138ee:	f7f6 fe17 	bl	800a520 <lwip_htons>
 80138f2:	4603      	mov	r3, r0
 80138f4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80138f8:	b29b      	uxth	r3, r3
 80138fa:	00db      	lsls	r3, r3, #3
 80138fc:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80138fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013900:	885b      	ldrh	r3, [r3, #2]
 8013902:	b29b      	uxth	r3, r3
 8013904:	4618      	mov	r0, r3
 8013906:	f7f6 fe0b 	bl	800a520 <lwip_htons>
 801390a:	4603      	mov	r3, r0
 801390c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801390e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013910:	781b      	ldrb	r3, [r3, #0]
 8013912:	f003 030f 	and.w	r3, r3, #15
 8013916:	b2db      	uxtb	r3, r3
 8013918:	009b      	lsls	r3, r3, #2
 801391a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801391e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013922:	b29b      	uxth	r3, r3
 8013924:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013926:	429a      	cmp	r2, r3
 8013928:	f0c0 8150 	bcc.w	8013bcc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801392c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8013930:	b29b      	uxth	r3, r3
 8013932:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013934:	1ad3      	subs	r3, r2, r3
 8013936:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8013938:	6878      	ldr	r0, [r7, #4]
 801393a:	f7f8 fa71 	bl	800be20 <pbuf_clen>
 801393e:	4603      	mov	r3, r0
 8013940:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8013942:	4b8c      	ldr	r3, [pc, #560]	; (8013b74 <ip4_reass+0x2b0>)
 8013944:	881b      	ldrh	r3, [r3, #0]
 8013946:	461a      	mov	r2, r3
 8013948:	8c3b      	ldrh	r3, [r7, #32]
 801394a:	4413      	add	r3, r2
 801394c:	2b0a      	cmp	r3, #10
 801394e:	dd10      	ble.n	8013972 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8013950:	8c3b      	ldrh	r3, [r7, #32]
 8013952:	4619      	mov	r1, r3
 8013954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013956:	f7ff fd81 	bl	801345c <ip_reass_remove_oldest_datagram>
 801395a:	4603      	mov	r3, r0
 801395c:	2b00      	cmp	r3, #0
 801395e:	f000 8137 	beq.w	8013bd0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8013962:	4b84      	ldr	r3, [pc, #528]	; (8013b74 <ip4_reass+0x2b0>)
 8013964:	881b      	ldrh	r3, [r3, #0]
 8013966:	461a      	mov	r2, r3
 8013968:	8c3b      	ldrh	r3, [r7, #32]
 801396a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801396c:	2b0a      	cmp	r3, #10
 801396e:	f300 812f 	bgt.w	8013bd0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8013972:	4b81      	ldr	r3, [pc, #516]	; (8013b78 <ip4_reass+0x2b4>)
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	633b      	str	r3, [r7, #48]	; 0x30
 8013978:	e015      	b.n	80139a6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801397a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801397c:	695a      	ldr	r2, [r3, #20]
 801397e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013980:	68db      	ldr	r3, [r3, #12]
 8013982:	429a      	cmp	r2, r3
 8013984:	d10c      	bne.n	80139a0 <ip4_reass+0xdc>
 8013986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013988:	699a      	ldr	r2, [r3, #24]
 801398a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801398c:	691b      	ldr	r3, [r3, #16]
 801398e:	429a      	cmp	r2, r3
 8013990:	d106      	bne.n	80139a0 <ip4_reass+0xdc>
 8013992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013994:	899a      	ldrh	r2, [r3, #12]
 8013996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013998:	889b      	ldrh	r3, [r3, #4]
 801399a:	b29b      	uxth	r3, r3
 801399c:	429a      	cmp	r2, r3
 801399e:	d006      	beq.n	80139ae <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80139a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	633b      	str	r3, [r7, #48]	; 0x30
 80139a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d1e6      	bne.n	801397a <ip4_reass+0xb6>
 80139ac:	e000      	b.n	80139b0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80139ae:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80139b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b2:	2b00      	cmp	r3, #0
 80139b4:	d109      	bne.n	80139ca <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80139b6:	8c3b      	ldrh	r3, [r7, #32]
 80139b8:	4619      	mov	r1, r3
 80139ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80139bc:	f7ff fdb0 	bl	8013520 <ip_reass_enqueue_new_datagram>
 80139c0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80139c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139c4:	2b00      	cmp	r3, #0
 80139c6:	d11c      	bne.n	8013a02 <ip4_reass+0x13e>
      goto nullreturn;
 80139c8:	e105      	b.n	8013bd6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80139ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80139cc:	88db      	ldrh	r3, [r3, #6]
 80139ce:	b29b      	uxth	r3, r3
 80139d0:	4618      	mov	r0, r3
 80139d2:	f7f6 fda5 	bl	800a520 <lwip_htons>
 80139d6:	4603      	mov	r3, r0
 80139d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80139dc:	2b00      	cmp	r3, #0
 80139de:	d110      	bne.n	8013a02 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80139e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139e2:	89db      	ldrh	r3, [r3, #14]
 80139e4:	4618      	mov	r0, r3
 80139e6:	f7f6 fd9b 	bl	800a520 <lwip_htons>
 80139ea:	4603      	mov	r3, r0
 80139ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80139f0:	2b00      	cmp	r3, #0
 80139f2:	d006      	beq.n	8013a02 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80139f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139f6:	3308      	adds	r3, #8
 80139f8:	2214      	movs	r2, #20
 80139fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80139fc:	4618      	mov	r0, r3
 80139fe:	f000 fd90 	bl	8014522 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8013a02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013a04:	88db      	ldrh	r3, [r3, #6]
 8013a06:	b29b      	uxth	r3, r3
 8013a08:	f003 0320 	and.w	r3, r3, #32
 8013a0c:	2b00      	cmp	r3, #0
 8013a0e:	bf0c      	ite	eq
 8013a10:	2301      	moveq	r3, #1
 8013a12:	2300      	movne	r3, #0
 8013a14:	b2db      	uxtb	r3, r3
 8013a16:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8013a18:	69fb      	ldr	r3, [r7, #28]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d00e      	beq.n	8013a3c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8013a1e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013a20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a22:	4413      	add	r3, r2
 8013a24:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8013a26:	8b7a      	ldrh	r2, [r7, #26]
 8013a28:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013a2a:	429a      	cmp	r2, r3
 8013a2c:	f0c0 80a0 	bcc.w	8013b70 <ip4_reass+0x2ac>
 8013a30:	8b7b      	ldrh	r3, [r7, #26]
 8013a32:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8013a36:	4293      	cmp	r3, r2
 8013a38:	f200 809a 	bhi.w	8013b70 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8013a3c:	69fa      	ldr	r2, [r7, #28]
 8013a3e:	6879      	ldr	r1, [r7, #4]
 8013a40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013a42:	f7ff fdd5 	bl	80135f0 <ip_reass_chain_frag_into_datagram_and_validate>
 8013a46:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8013a48:	697b      	ldr	r3, [r7, #20]
 8013a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013a4e:	f000 809b 	beq.w	8013b88 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8013a52:	4b48      	ldr	r3, [pc, #288]	; (8013b74 <ip4_reass+0x2b0>)
 8013a54:	881a      	ldrh	r2, [r3, #0]
 8013a56:	8c3b      	ldrh	r3, [r7, #32]
 8013a58:	4413      	add	r3, r2
 8013a5a:	b29a      	uxth	r2, r3
 8013a5c:	4b45      	ldr	r3, [pc, #276]	; (8013b74 <ip4_reass+0x2b0>)
 8013a5e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8013a60:	69fb      	ldr	r3, [r7, #28]
 8013a62:	2b00      	cmp	r3, #0
 8013a64:	d00d      	beq.n	8013a82 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8013a66:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8013a68:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a6a:	4413      	add	r3, r2
 8013a6c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8013a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a70:	8a7a      	ldrh	r2, [r7, #18]
 8013a72:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8013a74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a76:	7f9b      	ldrb	r3, [r3, #30]
 8013a78:	f043 0301 	orr.w	r3, r3, #1
 8013a7c:	b2da      	uxtb	r2, r3
 8013a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a80:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8013a82:	697b      	ldr	r3, [r7, #20]
 8013a84:	2b01      	cmp	r3, #1
 8013a86:	d171      	bne.n	8013b6c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8013a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a8a:	8b9b      	ldrh	r3, [r3, #28]
 8013a8c:	3314      	adds	r3, #20
 8013a8e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8013a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a92:	685b      	ldr	r3, [r3, #4]
 8013a94:	685b      	ldr	r3, [r3, #4]
 8013a96:	681b      	ldr	r3, [r3, #0]
 8013a98:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8013a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	685b      	ldr	r3, [r3, #4]
 8013aa0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8013aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013aa4:	3308      	adds	r3, #8
 8013aa6:	2214      	movs	r2, #20
 8013aa8:	4619      	mov	r1, r3
 8013aaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8013aac:	f000 fd39 	bl	8014522 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8013ab0:	8a3b      	ldrh	r3, [r7, #16]
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f7f6 fd34 	bl	800a520 <lwip_htons>
 8013ab8:	4603      	mov	r3, r0
 8013aba:	461a      	mov	r2, r3
 8013abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013abe:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8013ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ac2:	2200      	movs	r2, #0
 8013ac4:	719a      	strb	r2, [r3, #6]
 8013ac6:	2200      	movs	r2, #0
 8013ac8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8013aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013acc:	2200      	movs	r2, #0
 8013ace:	729a      	strb	r2, [r3, #10]
 8013ad0:	2200      	movs	r2, #0
 8013ad2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8013ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ad6:	685b      	ldr	r3, [r3, #4]
 8013ad8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8013ada:	e00d      	b.n	8013af8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8013adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ade:	685b      	ldr	r3, [r3, #4]
 8013ae0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8013ae2:	2114      	movs	r1, #20
 8013ae4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8013ae6:	f7f8 f887 	bl	800bbf8 <pbuf_remove_header>
      pbuf_cat(p, r);
 8013aea:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013aec:	6878      	ldr	r0, [r7, #4]
 8013aee:	f7f8 f9d7 	bl	800bea0 <pbuf_cat>
      r = iprh->next_pbuf;
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	681b      	ldr	r3, [r3, #0]
 8013af6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8013af8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013afa:	2b00      	cmp	r3, #0
 8013afc:	d1ee      	bne.n	8013adc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8013afe:	4b1e      	ldr	r3, [pc, #120]	; (8013b78 <ip4_reass+0x2b4>)
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b04:	429a      	cmp	r2, r3
 8013b06:	d102      	bne.n	8013b0e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8013b08:	2300      	movs	r3, #0
 8013b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b0c:	e010      	b.n	8013b30 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013b0e:	4b1a      	ldr	r3, [pc, #104]	; (8013b78 <ip4_reass+0x2b4>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b14:	e007      	b.n	8013b26 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8013b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013b1c:	429a      	cmp	r2, r3
 8013b1e:	d006      	beq.n	8013b2e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8013b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b22:	681b      	ldr	r3, [r3, #0]
 8013b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013b26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013b28:	2b00      	cmp	r3, #0
 8013b2a:	d1f4      	bne.n	8013b16 <ip4_reass+0x252>
 8013b2c:	e000      	b.n	8013b30 <ip4_reass+0x26c>
          break;
 8013b2e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8013b30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013b32:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013b34:	f7ff fd2e 	bl	8013594 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8013b38:	6878      	ldr	r0, [r7, #4]
 8013b3a:	f7f8 f971 	bl	800be20 <pbuf_clen>
 8013b3e:	4603      	mov	r3, r0
 8013b40:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8013b42:	4b0c      	ldr	r3, [pc, #48]	; (8013b74 <ip4_reass+0x2b0>)
 8013b44:	881b      	ldrh	r3, [r3, #0]
 8013b46:	8c3a      	ldrh	r2, [r7, #32]
 8013b48:	429a      	cmp	r2, r3
 8013b4a:	d906      	bls.n	8013b5a <ip4_reass+0x296>
 8013b4c:	4b0b      	ldr	r3, [pc, #44]	; (8013b7c <ip4_reass+0x2b8>)
 8013b4e:	f240 229b 	movw	r2, #667	; 0x29b
 8013b52:	490b      	ldr	r1, [pc, #44]	; (8013b80 <ip4_reass+0x2bc>)
 8013b54:	480b      	ldr	r0, [pc, #44]	; (8013b84 <ip4_reass+0x2c0>)
 8013b56:	f000 fd8f 	bl	8014678 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8013b5a:	4b06      	ldr	r3, [pc, #24]	; (8013b74 <ip4_reass+0x2b0>)
 8013b5c:	881a      	ldrh	r2, [r3, #0]
 8013b5e:	8c3b      	ldrh	r3, [r7, #32]
 8013b60:	1ad3      	subs	r3, r2, r3
 8013b62:	b29a      	uxth	r2, r3
 8013b64:	4b03      	ldr	r3, [pc, #12]	; (8013b74 <ip4_reass+0x2b0>)
 8013b66:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	e038      	b.n	8013bde <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	e036      	b.n	8013bde <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8013b70:	bf00      	nop
 8013b72:	e00a      	b.n	8013b8a <ip4_reass+0x2c6>
 8013b74:	2000f340 	.word	0x2000f340
 8013b78:	2000f33c 	.word	0x2000f33c
 8013b7c:	08017d3c 	.word	0x08017d3c
 8013b80:	08017eac 	.word	0x08017eac
 8013b84:	08017d84 	.word	0x08017d84
    goto nullreturn_ipr;
 8013b88:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8013b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013b8c:	2b00      	cmp	r3, #0
 8013b8e:	d106      	bne.n	8013b9e <ip4_reass+0x2da>
 8013b90:	4b15      	ldr	r3, [pc, #84]	; (8013be8 <ip4_reass+0x324>)
 8013b92:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8013b96:	4915      	ldr	r1, [pc, #84]	; (8013bec <ip4_reass+0x328>)
 8013b98:	4815      	ldr	r0, [pc, #84]	; (8013bf0 <ip4_reass+0x32c>)
 8013b9a:	f000 fd6d 	bl	8014678 <iprintf>
  if (ipr->p == NULL) {
 8013b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ba0:	685b      	ldr	r3, [r3, #4]
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	d116      	bne.n	8013bd4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8013ba6:	4b13      	ldr	r3, [pc, #76]	; (8013bf4 <ip4_reass+0x330>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013bac:	429a      	cmp	r2, r3
 8013bae:	d006      	beq.n	8013bbe <ip4_reass+0x2fa>
 8013bb0:	4b0d      	ldr	r3, [pc, #52]	; (8013be8 <ip4_reass+0x324>)
 8013bb2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8013bb6:	4910      	ldr	r1, [pc, #64]	; (8013bf8 <ip4_reass+0x334>)
 8013bb8:	480d      	ldr	r0, [pc, #52]	; (8013bf0 <ip4_reass+0x32c>)
 8013bba:	f000 fd5d 	bl	8014678 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8013bbe:	2100      	movs	r1, #0
 8013bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013bc2:	f7ff fce7 	bl	8013594 <ip_reass_dequeue_datagram>
 8013bc6:	e006      	b.n	8013bd6 <ip4_reass+0x312>
    goto nullreturn;
 8013bc8:	bf00      	nop
 8013bca:	e004      	b.n	8013bd6 <ip4_reass+0x312>
    goto nullreturn;
 8013bcc:	bf00      	nop
 8013bce:	e002      	b.n	8013bd6 <ip4_reass+0x312>
      goto nullreturn;
 8013bd0:	bf00      	nop
 8013bd2:	e000      	b.n	8013bd6 <ip4_reass+0x312>
  }

nullreturn:
 8013bd4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8013bd6:	6878      	ldr	r0, [r7, #4]
 8013bd8:	f7f8 f894 	bl	800bd04 <pbuf_free>
  return NULL;
 8013bdc:	2300      	movs	r3, #0
}
 8013bde:	4618      	mov	r0, r3
 8013be0:	3738      	adds	r7, #56	; 0x38
 8013be2:	46bd      	mov	sp, r7
 8013be4:	bd80      	pop	{r7, pc}
 8013be6:	bf00      	nop
 8013be8:	08017d3c 	.word	0x08017d3c
 8013bec:	08017ec8 	.word	0x08017ec8
 8013bf0:	08017d84 	.word	0x08017d84
 8013bf4:	2000f33c 	.word	0x2000f33c
 8013bf8:	08017ed4 	.word	0x08017ed4

08013bfc <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8013c00:	2005      	movs	r0, #5
 8013c02:	f7f7 f965 	bl	800aed0 <memp_malloc>
 8013c06:	4603      	mov	r3, r0
}
 8013c08:	4618      	mov	r0, r3
 8013c0a:	bd80      	pop	{r7, pc}

08013c0c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8013c0c:	b580      	push	{r7, lr}
 8013c0e:	b082      	sub	sp, #8
 8013c10:	af00      	add	r7, sp, #0
 8013c12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8013c14:	687b      	ldr	r3, [r7, #4]
 8013c16:	2b00      	cmp	r3, #0
 8013c18:	d106      	bne.n	8013c28 <ip_frag_free_pbuf_custom_ref+0x1c>
 8013c1a:	4b07      	ldr	r3, [pc, #28]	; (8013c38 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8013c1c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8013c20:	4906      	ldr	r1, [pc, #24]	; (8013c3c <ip_frag_free_pbuf_custom_ref+0x30>)
 8013c22:	4807      	ldr	r0, [pc, #28]	; (8013c40 <ip_frag_free_pbuf_custom_ref+0x34>)
 8013c24:	f000 fd28 	bl	8014678 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8013c28:	6879      	ldr	r1, [r7, #4]
 8013c2a:	2005      	movs	r0, #5
 8013c2c:	f7f7 f9c6 	bl	800afbc <memp_free>
}
 8013c30:	bf00      	nop
 8013c32:	3708      	adds	r7, #8
 8013c34:	46bd      	mov	sp, r7
 8013c36:	bd80      	pop	{r7, pc}
 8013c38:	08017d3c 	.word	0x08017d3c
 8013c3c:	08017ef4 	.word	0x08017ef4
 8013c40:	08017d84 	.word	0x08017d84

08013c44 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8013c44:	b580      	push	{r7, lr}
 8013c46:	b084      	sub	sp, #16
 8013c48:	af00      	add	r7, sp, #0
 8013c4a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8013c4c:	687b      	ldr	r3, [r7, #4]
 8013c4e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d106      	bne.n	8013c64 <ipfrag_free_pbuf_custom+0x20>
 8013c56:	4b11      	ldr	r3, [pc, #68]	; (8013c9c <ipfrag_free_pbuf_custom+0x58>)
 8013c58:	f240 22ce 	movw	r2, #718	; 0x2ce
 8013c5c:	4910      	ldr	r1, [pc, #64]	; (8013ca0 <ipfrag_free_pbuf_custom+0x5c>)
 8013c5e:	4811      	ldr	r0, [pc, #68]	; (8013ca4 <ipfrag_free_pbuf_custom+0x60>)
 8013c60:	f000 fd0a 	bl	8014678 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8013c64:	68fa      	ldr	r2, [r7, #12]
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	429a      	cmp	r2, r3
 8013c6a:	d006      	beq.n	8013c7a <ipfrag_free_pbuf_custom+0x36>
 8013c6c:	4b0b      	ldr	r3, [pc, #44]	; (8013c9c <ipfrag_free_pbuf_custom+0x58>)
 8013c6e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8013c72:	490d      	ldr	r1, [pc, #52]	; (8013ca8 <ipfrag_free_pbuf_custom+0x64>)
 8013c74:	480b      	ldr	r0, [pc, #44]	; (8013ca4 <ipfrag_free_pbuf_custom+0x60>)
 8013c76:	f000 fcff 	bl	8014678 <iprintf>
  if (pcr->original != NULL) {
 8013c7a:	68fb      	ldr	r3, [r7, #12]
 8013c7c:	695b      	ldr	r3, [r3, #20]
 8013c7e:	2b00      	cmp	r3, #0
 8013c80:	d004      	beq.n	8013c8c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8013c82:	68fb      	ldr	r3, [r7, #12]
 8013c84:	695b      	ldr	r3, [r3, #20]
 8013c86:	4618      	mov	r0, r3
 8013c88:	f7f8 f83c 	bl	800bd04 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8013c8c:	68f8      	ldr	r0, [r7, #12]
 8013c8e:	f7ff ffbd 	bl	8013c0c <ip_frag_free_pbuf_custom_ref>
}
 8013c92:	bf00      	nop
 8013c94:	3710      	adds	r7, #16
 8013c96:	46bd      	mov	sp, r7
 8013c98:	bd80      	pop	{r7, pc}
 8013c9a:	bf00      	nop
 8013c9c:	08017d3c 	.word	0x08017d3c
 8013ca0:	08017f00 	.word	0x08017f00
 8013ca4:	08017d84 	.word	0x08017d84
 8013ca8:	08017f0c 	.word	0x08017f0c

08013cac <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8013cac:	b580      	push	{r7, lr}
 8013cae:	b094      	sub	sp, #80	; 0x50
 8013cb0:	af02      	add	r7, sp, #8
 8013cb2:	60f8      	str	r0, [r7, #12]
 8013cb4:	60b9      	str	r1, [r7, #8]
 8013cb6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8013cb8:	2300      	movs	r3, #0
 8013cba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8013cbe:	68bb      	ldr	r3, [r7, #8]
 8013cc0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013cc2:	3b14      	subs	r3, #20
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	da00      	bge.n	8013cca <ip4_frag+0x1e>
 8013cc8:	3307      	adds	r3, #7
 8013cca:	10db      	asrs	r3, r3, #3
 8013ccc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8013cce:	2314      	movs	r3, #20
 8013cd0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	685b      	ldr	r3, [r3, #4]
 8013cd6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8013cd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013cda:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8013cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013cde:	781b      	ldrb	r3, [r3, #0]
 8013ce0:	f003 030f 	and.w	r3, r3, #15
 8013ce4:	b2db      	uxtb	r3, r3
 8013ce6:	009b      	lsls	r3, r3, #2
 8013ce8:	b2db      	uxtb	r3, r3
 8013cea:	2b14      	cmp	r3, #20
 8013cec:	d002      	beq.n	8013cf4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8013cee:	f06f 0305 	mvn.w	r3, #5
 8013cf2:	e110      	b.n	8013f16 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	895b      	ldrh	r3, [r3, #10]
 8013cf8:	2b13      	cmp	r3, #19
 8013cfa:	d809      	bhi.n	8013d10 <ip4_frag+0x64>
 8013cfc:	4b88      	ldr	r3, [pc, #544]	; (8013f20 <ip4_frag+0x274>)
 8013cfe:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8013d02:	4988      	ldr	r1, [pc, #544]	; (8013f24 <ip4_frag+0x278>)
 8013d04:	4888      	ldr	r0, [pc, #544]	; (8013f28 <ip4_frag+0x27c>)
 8013d06:	f000 fcb7 	bl	8014678 <iprintf>
 8013d0a:	f06f 0305 	mvn.w	r3, #5
 8013d0e:	e102      	b.n	8013f16 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8013d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013d12:	88db      	ldrh	r3, [r3, #6]
 8013d14:	b29b      	uxth	r3, r3
 8013d16:	4618      	mov	r0, r3
 8013d18:	f7f6 fc02 	bl	800a520 <lwip_htons>
 8013d1c:	4603      	mov	r3, r0
 8013d1e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8013d20:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013d22:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013d26:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8013d2a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013d2c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8013d30:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	891b      	ldrh	r3, [r3, #8]
 8013d36:	3b14      	subs	r3, #20
 8013d38:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8013d3c:	e0e1      	b.n	8013f02 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8013d3e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013d40:	00db      	lsls	r3, r3, #3
 8013d42:	b29b      	uxth	r3, r3
 8013d44:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013d48:	4293      	cmp	r3, r2
 8013d4a:	bf28      	it	cs
 8013d4c:	4613      	movcs	r3, r2
 8013d4e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8013d50:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013d54:	2114      	movs	r1, #20
 8013d56:	200e      	movs	r0, #14
 8013d58:	f7f7 fcf0 	bl	800b73c <pbuf_alloc>
 8013d5c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8013d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	f000 80d5 	beq.w	8013f10 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8013d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d68:	895b      	ldrh	r3, [r3, #10]
 8013d6a:	2b13      	cmp	r3, #19
 8013d6c:	d806      	bhi.n	8013d7c <ip4_frag+0xd0>
 8013d6e:	4b6c      	ldr	r3, [pc, #432]	; (8013f20 <ip4_frag+0x274>)
 8013d70:	f44f 7249 	mov.w	r2, #804	; 0x324
 8013d74:	496d      	ldr	r1, [pc, #436]	; (8013f2c <ip4_frag+0x280>)
 8013d76:	486c      	ldr	r0, [pc, #432]	; (8013f28 <ip4_frag+0x27c>)
 8013d78:	f000 fc7e 	bl	8014678 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8013d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d7e:	685b      	ldr	r3, [r3, #4]
 8013d80:	2214      	movs	r2, #20
 8013d82:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8013d84:	4618      	mov	r0, r3
 8013d86:	f000 fbcc 	bl	8014522 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8013d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013d8c:	685b      	ldr	r3, [r3, #4]
 8013d8e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8013d90:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013d92:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8013d96:	e064      	b.n	8013e62 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8013d98:	68fb      	ldr	r3, [r7, #12]
 8013d9a:	895a      	ldrh	r2, [r3, #10]
 8013d9c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013d9e:	1ad3      	subs	r3, r2, r3
 8013da0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8013da2:	68fb      	ldr	r3, [r7, #12]
 8013da4:	895b      	ldrh	r3, [r3, #10]
 8013da6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013da8:	429a      	cmp	r2, r3
 8013daa:	d906      	bls.n	8013dba <ip4_frag+0x10e>
 8013dac:	4b5c      	ldr	r3, [pc, #368]	; (8013f20 <ip4_frag+0x274>)
 8013dae:	f240 322d 	movw	r2, #813	; 0x32d
 8013db2:	495f      	ldr	r1, [pc, #380]	; (8013f30 <ip4_frag+0x284>)
 8013db4:	485c      	ldr	r0, [pc, #368]	; (8013f28 <ip4_frag+0x27c>)
 8013db6:	f000 fc5f 	bl	8014678 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8013dba:	8bfa      	ldrh	r2, [r7, #30]
 8013dbc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013dc0:	4293      	cmp	r3, r2
 8013dc2:	bf28      	it	cs
 8013dc4:	4613      	movcs	r3, r2
 8013dc6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8013dca:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013dce:	2b00      	cmp	r3, #0
 8013dd0:	d105      	bne.n	8013dde <ip4_frag+0x132>
        poff = 0;
 8013dd2:	2300      	movs	r3, #0
 8013dd4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013dd6:	68fb      	ldr	r3, [r7, #12]
 8013dd8:	681b      	ldr	r3, [r3, #0]
 8013dda:	60fb      	str	r3, [r7, #12]
        continue;
 8013ddc:	e041      	b.n	8013e62 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8013dde:	f7ff ff0d 	bl	8013bfc <ip_frag_alloc_pbuf_custom_ref>
 8013de2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8013de4:	69bb      	ldr	r3, [r7, #24]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	d103      	bne.n	8013df2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8013dea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013dec:	f7f7 ff8a 	bl	800bd04 <pbuf_free>
        goto memerr;
 8013df0:	e08f      	b.n	8013f12 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013df2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8013df4:	68fb      	ldr	r3, [r7, #12]
 8013df6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8013df8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8013dfa:	4413      	add	r3, r2
 8013dfc:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8013e00:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8013e04:	9201      	str	r2, [sp, #4]
 8013e06:	9300      	str	r3, [sp, #0]
 8013e08:	4603      	mov	r3, r0
 8013e0a:	2241      	movs	r2, #65	; 0x41
 8013e0c:	2000      	movs	r0, #0
 8013e0e:	f7f7 fdbf 	bl	800b990 <pbuf_alloced_custom>
 8013e12:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8013e14:	697b      	ldr	r3, [r7, #20]
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d106      	bne.n	8013e28 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8013e1a:	69b8      	ldr	r0, [r7, #24]
 8013e1c:	f7ff fef6 	bl	8013c0c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8013e20:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e22:	f7f7 ff6f 	bl	800bd04 <pbuf_free>
        goto memerr;
 8013e26:	e074      	b.n	8013f12 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8013e28:	68f8      	ldr	r0, [r7, #12]
 8013e2a:	f7f8 f811 	bl	800be50 <pbuf_ref>
      pcr->original = p;
 8013e2e:	69bb      	ldr	r3, [r7, #24]
 8013e30:	68fa      	ldr	r2, [r7, #12]
 8013e32:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8013e34:	69bb      	ldr	r3, [r7, #24]
 8013e36:	4a3f      	ldr	r2, [pc, #252]	; (8013f34 <ip4_frag+0x288>)
 8013e38:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8013e3a:	6979      	ldr	r1, [r7, #20]
 8013e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e3e:	f7f8 f82f 	bl	800bea0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8013e42:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8013e46:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013e4a:	1ad3      	subs	r3, r2, r3
 8013e4c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8013e50:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d004      	beq.n	8013e62 <ip4_frag+0x1b6>
        poff = 0;
 8013e58:	2300      	movs	r3, #0
 8013e5a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8013e5c:	68fb      	ldr	r3, [r7, #12]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8013e62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d196      	bne.n	8013d98 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8013e6a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8013e6c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8013e70:	4413      	add	r3, r2
 8013e72:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8013e74:	68bb      	ldr	r3, [r7, #8]
 8013e76:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8013e78:	f1a3 0213 	sub.w	r2, r3, #19
 8013e7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013e80:	429a      	cmp	r2, r3
 8013e82:	bfcc      	ite	gt
 8013e84:	2301      	movgt	r3, #1
 8013e86:	2300      	movle	r3, #0
 8013e88:	b2db      	uxtb	r3, r3
 8013e8a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8013e8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8013e90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8013e94:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8013e96:	6a3b      	ldr	r3, [r7, #32]
 8013e98:	2b00      	cmp	r3, #0
 8013e9a:	d002      	beq.n	8013ea2 <ip4_frag+0x1f6>
 8013e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d003      	beq.n	8013eaa <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8013ea2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013ea4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8013ea8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8013eaa:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8013eac:	4618      	mov	r0, r3
 8013eae:	f7f6 fb37 	bl	800a520 <lwip_htons>
 8013eb2:	4603      	mov	r3, r0
 8013eb4:	461a      	mov	r2, r3
 8013eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013eb8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8013eba:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013ebc:	3314      	adds	r3, #20
 8013ebe:	b29b      	uxth	r3, r3
 8013ec0:	4618      	mov	r0, r3
 8013ec2:	f7f6 fb2d 	bl	800a520 <lwip_htons>
 8013ec6:	4603      	mov	r3, r0
 8013ec8:	461a      	mov	r2, r3
 8013eca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ecc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8013ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013ed0:	2200      	movs	r2, #0
 8013ed2:	729a      	strb	r2, [r3, #10]
 8013ed4:	2200      	movs	r2, #0
 8013ed6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8013ed8:	68bb      	ldr	r3, [r7, #8]
 8013eda:	695b      	ldr	r3, [r3, #20]
 8013edc:	687a      	ldr	r2, [r7, #4]
 8013ede:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013ee0:	68b8      	ldr	r0, [r7, #8]
 8013ee2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8013ee4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013ee6:	f7f7 ff0d 	bl	800bd04 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8013eea:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013eee:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013ef0:	1ad3      	subs	r3, r2, r3
 8013ef2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8013ef6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8013efa:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013efc:	4413      	add	r3, r2
 8013efe:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8013f02:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013f06:	2b00      	cmp	r3, #0
 8013f08:	f47f af19 	bne.w	8013d3e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8013f0c:	2300      	movs	r3, #0
 8013f0e:	e002      	b.n	8013f16 <ip4_frag+0x26a>
      goto memerr;
 8013f10:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8013f12:	f04f 33ff 	mov.w	r3, #4294967295
}
 8013f16:	4618      	mov	r0, r3
 8013f18:	3748      	adds	r7, #72	; 0x48
 8013f1a:	46bd      	mov	sp, r7
 8013f1c:	bd80      	pop	{r7, pc}
 8013f1e:	bf00      	nop
 8013f20:	08017d3c 	.word	0x08017d3c
 8013f24:	08017f18 	.word	0x08017f18
 8013f28:	08017d84 	.word	0x08017d84
 8013f2c:	08017f34 	.word	0x08017f34
 8013f30:	08017f54 	.word	0x08017f54
 8013f34:	08013c45 	.word	0x08013c45

08013f38 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8013f38:	b580      	push	{r7, lr}
 8013f3a:	b086      	sub	sp, #24
 8013f3c:	af00      	add	r7, sp, #0
 8013f3e:	6078      	str	r0, [r7, #4]
 8013f40:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8013f42:	230e      	movs	r3, #14
 8013f44:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8013f46:	687b      	ldr	r3, [r7, #4]
 8013f48:	895b      	ldrh	r3, [r3, #10]
 8013f4a:	2b0e      	cmp	r3, #14
 8013f4c:	d96e      	bls.n	801402c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	7bdb      	ldrb	r3, [r3, #15]
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d106      	bne.n	8013f64 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8013f56:	683b      	ldr	r3, [r7, #0]
 8013f58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013f5c:	3301      	adds	r3, #1
 8013f5e:	b2da      	uxtb	r2, r3
 8013f60:	687b      	ldr	r3, [r7, #4]
 8013f62:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	685b      	ldr	r3, [r3, #4]
 8013f68:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8013f6a:	693b      	ldr	r3, [r7, #16]
 8013f6c:	7b1a      	ldrb	r2, [r3, #12]
 8013f6e:	7b5b      	ldrb	r3, [r3, #13]
 8013f70:	021b      	lsls	r3, r3, #8
 8013f72:	4313      	orrs	r3, r2
 8013f74:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8013f76:	693b      	ldr	r3, [r7, #16]
 8013f78:	781b      	ldrb	r3, [r3, #0]
 8013f7a:	f003 0301 	and.w	r3, r3, #1
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d023      	beq.n	8013fca <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8013f82:	693b      	ldr	r3, [r7, #16]
 8013f84:	781b      	ldrb	r3, [r3, #0]
 8013f86:	2b01      	cmp	r3, #1
 8013f88:	d10f      	bne.n	8013faa <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013f8a:	693b      	ldr	r3, [r7, #16]
 8013f8c:	785b      	ldrb	r3, [r3, #1]
 8013f8e:	2b00      	cmp	r3, #0
 8013f90:	d11b      	bne.n	8013fca <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8013f92:	693b      	ldr	r3, [r7, #16]
 8013f94:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8013f96:	2b5e      	cmp	r3, #94	; 0x5e
 8013f98:	d117      	bne.n	8013fca <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	7b5b      	ldrb	r3, [r3, #13]
 8013f9e:	f043 0310 	orr.w	r3, r3, #16
 8013fa2:	b2da      	uxtb	r2, r3
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	735a      	strb	r2, [r3, #13]
 8013fa8:	e00f      	b.n	8013fca <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8013faa:	693b      	ldr	r3, [r7, #16]
 8013fac:	2206      	movs	r2, #6
 8013fae:	4928      	ldr	r1, [pc, #160]	; (8014050 <ethernet_input+0x118>)
 8013fb0:	4618      	mov	r0, r3
 8013fb2:	f000 faa6 	bl	8014502 <memcmp>
 8013fb6:	4603      	mov	r3, r0
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	d106      	bne.n	8013fca <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	7b5b      	ldrb	r3, [r3, #13]
 8013fc0:	f043 0308 	orr.w	r3, r3, #8
 8013fc4:	b2da      	uxtb	r2, r3
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8013fca:	89fb      	ldrh	r3, [r7, #14]
 8013fcc:	2b08      	cmp	r3, #8
 8013fce:	d003      	beq.n	8013fd8 <ethernet_input+0xa0>
 8013fd0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8013fd4:	d014      	beq.n	8014000 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8013fd6:	e032      	b.n	801403e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8013fd8:	683b      	ldr	r3, [r7, #0]
 8013fda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013fde:	f003 0308 	and.w	r3, r3, #8
 8013fe2:	2b00      	cmp	r3, #0
 8013fe4:	d024      	beq.n	8014030 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8013fe6:	8afb      	ldrh	r3, [r7, #22]
 8013fe8:	4619      	mov	r1, r3
 8013fea:	6878      	ldr	r0, [r7, #4]
 8013fec:	f7f7 fe04 	bl	800bbf8 <pbuf_remove_header>
 8013ff0:	4603      	mov	r3, r0
 8013ff2:	2b00      	cmp	r3, #0
 8013ff4:	d11e      	bne.n	8014034 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8013ff6:	6839      	ldr	r1, [r7, #0]
 8013ff8:	6878      	ldr	r0, [r7, #4]
 8013ffa:	f7fe ff21 	bl	8012e40 <ip4_input>
      break;
 8013ffe:	e013      	b.n	8014028 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8014000:	683b      	ldr	r3, [r7, #0]
 8014002:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014006:	f003 0308 	and.w	r3, r3, #8
 801400a:	2b00      	cmp	r3, #0
 801400c:	d014      	beq.n	8014038 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801400e:	8afb      	ldrh	r3, [r7, #22]
 8014010:	4619      	mov	r1, r3
 8014012:	6878      	ldr	r0, [r7, #4]
 8014014:	f7f7 fdf0 	bl	800bbf8 <pbuf_remove_header>
 8014018:	4603      	mov	r3, r0
 801401a:	2b00      	cmp	r3, #0
 801401c:	d10e      	bne.n	801403c <ethernet_input+0x104>
        etharp_input(p, netif);
 801401e:	6839      	ldr	r1, [r7, #0]
 8014020:	6878      	ldr	r0, [r7, #4]
 8014022:	f7fe f8c1 	bl	80121a8 <etharp_input>
      break;
 8014026:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8014028:	2300      	movs	r3, #0
 801402a:	e00c      	b.n	8014046 <ethernet_input+0x10e>
    goto free_and_return;
 801402c:	bf00      	nop
 801402e:	e006      	b.n	801403e <ethernet_input+0x106>
        goto free_and_return;
 8014030:	bf00      	nop
 8014032:	e004      	b.n	801403e <ethernet_input+0x106>
        goto free_and_return;
 8014034:	bf00      	nop
 8014036:	e002      	b.n	801403e <ethernet_input+0x106>
        goto free_and_return;
 8014038:	bf00      	nop
 801403a:	e000      	b.n	801403e <ethernet_input+0x106>
        goto free_and_return;
 801403c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801403e:	6878      	ldr	r0, [r7, #4]
 8014040:	f7f7 fe60 	bl	800bd04 <pbuf_free>
  return ERR_OK;
 8014044:	2300      	movs	r3, #0
}
 8014046:	4618      	mov	r0, r3
 8014048:	3718      	adds	r7, #24
 801404a:	46bd      	mov	sp, r7
 801404c:	bd80      	pop	{r7, pc}
 801404e:	bf00      	nop
 8014050:	08018154 	.word	0x08018154

08014054 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8014054:	b580      	push	{r7, lr}
 8014056:	b086      	sub	sp, #24
 8014058:	af00      	add	r7, sp, #0
 801405a:	60f8      	str	r0, [r7, #12]
 801405c:	60b9      	str	r1, [r7, #8]
 801405e:	607a      	str	r2, [r7, #4]
 8014060:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8014062:	8c3b      	ldrh	r3, [r7, #32]
 8014064:	4618      	mov	r0, r3
 8014066:	f7f6 fa5b 	bl	800a520 <lwip_htons>
 801406a:	4603      	mov	r3, r0
 801406c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801406e:	210e      	movs	r1, #14
 8014070:	68b8      	ldr	r0, [r7, #8]
 8014072:	f7f7 fdb1 	bl	800bbd8 <pbuf_add_header>
 8014076:	4603      	mov	r3, r0
 8014078:	2b00      	cmp	r3, #0
 801407a:	d125      	bne.n	80140c8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801407c:	68bb      	ldr	r3, [r7, #8]
 801407e:	685b      	ldr	r3, [r3, #4]
 8014080:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8014082:	693b      	ldr	r3, [r7, #16]
 8014084:	8afa      	ldrh	r2, [r7, #22]
 8014086:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8014088:	693b      	ldr	r3, [r7, #16]
 801408a:	2206      	movs	r2, #6
 801408c:	6839      	ldr	r1, [r7, #0]
 801408e:	4618      	mov	r0, r3
 8014090:	f000 fa47 	bl	8014522 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8014094:	693b      	ldr	r3, [r7, #16]
 8014096:	3306      	adds	r3, #6
 8014098:	2206      	movs	r2, #6
 801409a:	6879      	ldr	r1, [r7, #4]
 801409c:	4618      	mov	r0, r3
 801409e:	f000 fa40 	bl	8014522 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 80140a2:	68fb      	ldr	r3, [r7, #12]
 80140a4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80140a8:	2b06      	cmp	r3, #6
 80140aa:	d006      	beq.n	80140ba <ethernet_output+0x66>
 80140ac:	4b0a      	ldr	r3, [pc, #40]	; (80140d8 <ethernet_output+0x84>)
 80140ae:	f44f 7299 	mov.w	r2, #306	; 0x132
 80140b2:	490a      	ldr	r1, [pc, #40]	; (80140dc <ethernet_output+0x88>)
 80140b4:	480a      	ldr	r0, [pc, #40]	; (80140e0 <ethernet_output+0x8c>)
 80140b6:	f000 fadf 	bl	8014678 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80140ba:	68fb      	ldr	r3, [r7, #12]
 80140bc:	699b      	ldr	r3, [r3, #24]
 80140be:	68b9      	ldr	r1, [r7, #8]
 80140c0:	68f8      	ldr	r0, [r7, #12]
 80140c2:	4798      	blx	r3
 80140c4:	4603      	mov	r3, r0
 80140c6:	e002      	b.n	80140ce <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80140c8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80140ca:	f06f 0301 	mvn.w	r3, #1
}
 80140ce:	4618      	mov	r0, r3
 80140d0:	3718      	adds	r7, #24
 80140d2:	46bd      	mov	sp, r7
 80140d4:	bd80      	pop	{r7, pc}
 80140d6:	bf00      	nop
 80140d8:	08017f64 	.word	0x08017f64
 80140dc:	08017f9c 	.word	0x08017f9c
 80140e0:	08017fd0 	.word	0x08017fd0

080140e4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b082      	sub	sp, #8
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	6078      	str	r0, [r7, #4]
 80140ec:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80140ee:	683b      	ldr	r3, [r7, #0]
 80140f0:	2200      	movs	r2, #0
 80140f2:	2104      	movs	r1, #4
 80140f4:	4618      	mov	r0, r3
 80140f6:	f7f2 fd23 	bl	8006b40 <osMessageQueueNew>
 80140fa:	4602      	mov	r2, r0
 80140fc:	687b      	ldr	r3, [r7, #4]
 80140fe:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8014100:	687b      	ldr	r3, [r7, #4]
 8014102:	681b      	ldr	r3, [r3, #0]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d102      	bne.n	801410e <sys_mbox_new+0x2a>
    return ERR_MEM;
 8014108:	f04f 33ff 	mov.w	r3, #4294967295
 801410c:	e000      	b.n	8014110 <sys_mbox_new+0x2c>

  return ERR_OK;
 801410e:	2300      	movs	r3, #0
}
 8014110:	4618      	mov	r0, r3
 8014112:	3708      	adds	r7, #8
 8014114:	46bd      	mov	sp, r7
 8014116:	bd80      	pop	{r7, pc}

08014118 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8014118:	b580      	push	{r7, lr}
 801411a:	b084      	sub	sp, #16
 801411c:	af00      	add	r7, sp, #0
 801411e:	6078      	str	r0, [r7, #4]
 8014120:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 8014122:	687b      	ldr	r3, [r7, #4]
 8014124:	6818      	ldr	r0, [r3, #0]
 8014126:	4639      	mov	r1, r7
 8014128:	2300      	movs	r3, #0
 801412a:	2200      	movs	r2, #0
 801412c:	f7f2 fd8e 	bl	8006c4c <osMessageQueuePut>
 8014130:	4603      	mov	r3, r0
 8014132:	2b00      	cmp	r3, #0
 8014134:	d102      	bne.n	801413c <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 8014136:	2300      	movs	r3, #0
 8014138:	73fb      	strb	r3, [r7, #15]
 801413a:	e001      	b.n	8014140 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801413c:	23ff      	movs	r3, #255	; 0xff
 801413e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8014140:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014144:	4618      	mov	r0, r3
 8014146:	3710      	adds	r7, #16
 8014148:	46bd      	mov	sp, r7
 801414a:	bd80      	pop	{r7, pc}

0801414c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801414c:	b580      	push	{r7, lr}
 801414e:	b086      	sub	sp, #24
 8014150:	af00      	add	r7, sp, #0
 8014152:	60f8      	str	r0, [r7, #12]
 8014154:	60b9      	str	r1, [r7, #8]
 8014156:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8014158:	f7f2 f954 	bl	8006404 <osKernelGetTickCount>
 801415c:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	2b00      	cmp	r3, #0
 8014162:	d013      	beq.n	801418c <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 8014164:	68fb      	ldr	r3, [r7, #12]
 8014166:	6818      	ldr	r0, [r3, #0]
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	2200      	movs	r2, #0
 801416c:	68b9      	ldr	r1, [r7, #8]
 801416e:	f7f2 fde1 	bl	8006d34 <osMessageQueueGet>
 8014172:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 8014174:	693b      	ldr	r3, [r7, #16]
 8014176:	2b00      	cmp	r3, #0
 8014178:	d105      	bne.n	8014186 <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 801417a:	f7f2 f943 	bl	8006404 <osKernelGetTickCount>
 801417e:	4602      	mov	r2, r0
 8014180:	697b      	ldr	r3, [r7, #20]
 8014182:	1ad3      	subs	r3, r2, r3
 8014184:	e00f      	b.n	80141a6 <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8014186:	f04f 33ff 	mov.w	r3, #4294967295
 801418a:	e00c      	b.n	80141a6 <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	6818      	ldr	r0, [r3, #0]
 8014190:	f04f 33ff 	mov.w	r3, #4294967295
 8014194:	2200      	movs	r2, #0
 8014196:	68b9      	ldr	r1, [r7, #8]
 8014198:	f7f2 fdcc 	bl	8006d34 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 801419c:	f7f2 f932 	bl	8006404 <osKernelGetTickCount>
 80141a0:	4602      	mov	r2, r0
 80141a2:	697b      	ldr	r3, [r7, #20]
 80141a4:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 80141a6:	4618      	mov	r0, r3
 80141a8:	3718      	adds	r7, #24
 80141aa:	46bd      	mov	sp, r7
 80141ac:	bd80      	pop	{r7, pc}

080141ae <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80141ae:	b480      	push	{r7}
 80141b0:	b083      	sub	sp, #12
 80141b2:	af00      	add	r7, sp, #0
 80141b4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80141b6:	687b      	ldr	r3, [r7, #4]
 80141b8:	681b      	ldr	r3, [r3, #0]
 80141ba:	2b00      	cmp	r3, #0
 80141bc:	d101      	bne.n	80141c2 <sys_mbox_valid+0x14>
    return 0;
 80141be:	2300      	movs	r3, #0
 80141c0:	e000      	b.n	80141c4 <sys_mbox_valid+0x16>
  else
    return 1;
 80141c2:	2301      	movs	r3, #1
}
 80141c4:	4618      	mov	r0, r3
 80141c6:	370c      	adds	r7, #12
 80141c8:	46bd      	mov	sp, r7
 80141ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80141ce:	4770      	bx	lr

080141d0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 80141d0:	b580      	push	{r7, lr}
 80141d2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 80141d4:	2000      	movs	r0, #0
 80141d6:	f7f2 fa11 	bl	80065fc <osMutexNew>
 80141da:	4603      	mov	r3, r0
 80141dc:	4a01      	ldr	r2, [pc, #4]	; (80141e4 <sys_init+0x14>)
 80141de:	6013      	str	r3, [r2, #0]
#endif
}
 80141e0:	bf00      	nop
 80141e2:	bd80      	pop	{r7, pc}
 80141e4:	2000f344 	.word	0x2000f344

080141e8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80141e8:	b580      	push	{r7, lr}
 80141ea:	b082      	sub	sp, #8
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80141f0:	2000      	movs	r0, #0
 80141f2:	f7f2 fa03 	bl	80065fc <osMutexNew>
 80141f6:	4602      	mov	r2, r0
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80141fc:	687b      	ldr	r3, [r7, #4]
 80141fe:	681b      	ldr	r3, [r3, #0]
 8014200:	2b00      	cmp	r3, #0
 8014202:	d102      	bne.n	801420a <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8014204:	f04f 33ff 	mov.w	r3, #4294967295
 8014208:	e000      	b.n	801420c <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801420a:	2300      	movs	r3, #0
}
 801420c:	4618      	mov	r0, r3
 801420e:	3708      	adds	r7, #8
 8014210:	46bd      	mov	sp, r7
 8014212:	bd80      	pop	{r7, pc}

08014214 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8014214:	b580      	push	{r7, lr}
 8014216:	b082      	sub	sp, #8
 8014218:	af00      	add	r7, sp, #0
 801421a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	f04f 31ff 	mov.w	r1, #4294967295
 8014224:	4618      	mov	r0, r3
 8014226:	f7f2 fa83 	bl	8006730 <osMutexAcquire>
#endif
}
 801422a:	bf00      	nop
 801422c:	3708      	adds	r7, #8
 801422e:	46bd      	mov	sp, r7
 8014230:	bd80      	pop	{r7, pc}

08014232 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8014232:	b580      	push	{r7, lr}
 8014234:	b082      	sub	sp, #8
 8014236:	af00      	add	r7, sp, #0
 8014238:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	681b      	ldr	r3, [r3, #0]
 801423e:	4618      	mov	r0, r3
 8014240:	f7f2 fad4 	bl	80067ec <osMutexRelease>
}
 8014244:	bf00      	nop
 8014246:	3708      	adds	r7, #8
 8014248:	46bd      	mov	sp, r7
 801424a:	bd80      	pop	{r7, pc}

0801424c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801424c:	b580      	push	{r7, lr}
 801424e:	b08e      	sub	sp, #56	; 0x38
 8014250:	af00      	add	r7, sp, #0
 8014252:	60f8      	str	r0, [r7, #12]
 8014254:	60b9      	str	r1, [r7, #8]
 8014256:	607a      	str	r2, [r7, #4]
 8014258:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 801425a:	f107 0314 	add.w	r3, r7, #20
 801425e:	2224      	movs	r2, #36	; 0x24
 8014260:	2100      	movs	r1, #0
 8014262:	4618      	mov	r0, r3
 8014264:	f000 f96b 	bl	801453e <memset>
 8014268:	68fb      	ldr	r3, [r7, #12]
 801426a:	617b      	str	r3, [r7, #20]
 801426c:	683b      	ldr	r3, [r7, #0]
 801426e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014270:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014272:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8014274:	f107 0314 	add.w	r3, r7, #20
 8014278:	461a      	mov	r2, r3
 801427a:	6879      	ldr	r1, [r7, #4]
 801427c:	68b8      	ldr	r0, [r7, #8]
 801427e:	f7f2 f8e9 	bl	8006454 <osThreadNew>
 8014282:	4603      	mov	r3, r0
#endif
}
 8014284:	4618      	mov	r0, r3
 8014286:	3738      	adds	r7, #56	; 0x38
 8014288:	46bd      	mov	sp, r7
 801428a:	bd80      	pop	{r7, pc}

0801428c <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801428c:	b580      	push	{r7, lr}
 801428e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8014290:	4b04      	ldr	r3, [pc, #16]	; (80142a4 <sys_arch_protect+0x18>)
 8014292:	681b      	ldr	r3, [r3, #0]
 8014294:	f04f 31ff 	mov.w	r1, #4294967295
 8014298:	4618      	mov	r0, r3
 801429a:	f7f2 fa49 	bl	8006730 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 801429e:	2301      	movs	r3, #1
}
 80142a0:	4618      	mov	r0, r3
 80142a2:	bd80      	pop	{r7, pc}
 80142a4:	2000f344 	.word	0x2000f344

080142a8 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 80142a8:	b580      	push	{r7, lr}
 80142aa:	b082      	sub	sp, #8
 80142ac:	af00      	add	r7, sp, #0
 80142ae:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 80142b0:	4b04      	ldr	r3, [pc, #16]	; (80142c4 <sys_arch_unprotect+0x1c>)
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	4618      	mov	r0, r3
 80142b6:	f7f2 fa99 	bl	80067ec <osMutexRelease>
}
 80142ba:	bf00      	nop
 80142bc:	3708      	adds	r7, #8
 80142be:	46bd      	mov	sp, r7
 80142c0:	bd80      	pop	{r7, pc}
 80142c2:	bf00      	nop
 80142c4:	2000f344 	.word	0x2000f344

080142c8 <std>:
 80142c8:	2300      	movs	r3, #0
 80142ca:	b510      	push	{r4, lr}
 80142cc:	4604      	mov	r4, r0
 80142ce:	e9c0 3300 	strd	r3, r3, [r0]
 80142d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80142d6:	6083      	str	r3, [r0, #8]
 80142d8:	8181      	strh	r1, [r0, #12]
 80142da:	6643      	str	r3, [r0, #100]	; 0x64
 80142dc:	81c2      	strh	r2, [r0, #14]
 80142de:	6183      	str	r3, [r0, #24]
 80142e0:	4619      	mov	r1, r3
 80142e2:	2208      	movs	r2, #8
 80142e4:	305c      	adds	r0, #92	; 0x5c
 80142e6:	f000 f92a 	bl	801453e <memset>
 80142ea:	4b05      	ldr	r3, [pc, #20]	; (8014300 <std+0x38>)
 80142ec:	6263      	str	r3, [r4, #36]	; 0x24
 80142ee:	4b05      	ldr	r3, [pc, #20]	; (8014304 <std+0x3c>)
 80142f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80142f2:	4b05      	ldr	r3, [pc, #20]	; (8014308 <std+0x40>)
 80142f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80142f6:	4b05      	ldr	r3, [pc, #20]	; (801430c <std+0x44>)
 80142f8:	6224      	str	r4, [r4, #32]
 80142fa:	6323      	str	r3, [r4, #48]	; 0x30
 80142fc:	bd10      	pop	{r4, pc}
 80142fe:	bf00      	nop
 8014300:	08014819 	.word	0x08014819
 8014304:	0801483b 	.word	0x0801483b
 8014308:	08014873 	.word	0x08014873
 801430c:	08014897 	.word	0x08014897

08014310 <_cleanup_r>:
 8014310:	4901      	ldr	r1, [pc, #4]	; (8014318 <_cleanup_r+0x8>)
 8014312:	f000 b8af 	b.w	8014474 <_fwalk_reent>
 8014316:	bf00      	nop
 8014318:	08014a2d 	.word	0x08014a2d

0801431c <__sfmoreglue>:
 801431c:	b570      	push	{r4, r5, r6, lr}
 801431e:	2268      	movs	r2, #104	; 0x68
 8014320:	1e4d      	subs	r5, r1, #1
 8014322:	4355      	muls	r5, r2
 8014324:	460e      	mov	r6, r1
 8014326:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801432a:	f000 f931 	bl	8014590 <_malloc_r>
 801432e:	4604      	mov	r4, r0
 8014330:	b140      	cbz	r0, 8014344 <__sfmoreglue+0x28>
 8014332:	2100      	movs	r1, #0
 8014334:	e9c0 1600 	strd	r1, r6, [r0]
 8014338:	300c      	adds	r0, #12
 801433a:	60a0      	str	r0, [r4, #8]
 801433c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014340:	f000 f8fd 	bl	801453e <memset>
 8014344:	4620      	mov	r0, r4
 8014346:	bd70      	pop	{r4, r5, r6, pc}

08014348 <__sfp_lock_acquire>:
 8014348:	4801      	ldr	r0, [pc, #4]	; (8014350 <__sfp_lock_acquire+0x8>)
 801434a:	f000 b8d8 	b.w	80144fe <__retarget_lock_acquire_recursive>
 801434e:	bf00      	nop
 8014350:	2000f349 	.word	0x2000f349

08014354 <__sfp_lock_release>:
 8014354:	4801      	ldr	r0, [pc, #4]	; (801435c <__sfp_lock_release+0x8>)
 8014356:	f000 b8d3 	b.w	8014500 <__retarget_lock_release_recursive>
 801435a:	bf00      	nop
 801435c:	2000f349 	.word	0x2000f349

08014360 <__sinit_lock_acquire>:
 8014360:	4801      	ldr	r0, [pc, #4]	; (8014368 <__sinit_lock_acquire+0x8>)
 8014362:	f000 b8cc 	b.w	80144fe <__retarget_lock_acquire_recursive>
 8014366:	bf00      	nop
 8014368:	2000f34a 	.word	0x2000f34a

0801436c <__sinit_lock_release>:
 801436c:	4801      	ldr	r0, [pc, #4]	; (8014374 <__sinit_lock_release+0x8>)
 801436e:	f000 b8c7 	b.w	8014500 <__retarget_lock_release_recursive>
 8014372:	bf00      	nop
 8014374:	2000f34a 	.word	0x2000f34a

08014378 <__sinit>:
 8014378:	b510      	push	{r4, lr}
 801437a:	4604      	mov	r4, r0
 801437c:	f7ff fff0 	bl	8014360 <__sinit_lock_acquire>
 8014380:	69a3      	ldr	r3, [r4, #24]
 8014382:	b11b      	cbz	r3, 801438c <__sinit+0x14>
 8014384:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014388:	f7ff bff0 	b.w	801436c <__sinit_lock_release>
 801438c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014390:	6523      	str	r3, [r4, #80]	; 0x50
 8014392:	4b13      	ldr	r3, [pc, #76]	; (80143e0 <__sinit+0x68>)
 8014394:	4a13      	ldr	r2, [pc, #76]	; (80143e4 <__sinit+0x6c>)
 8014396:	681b      	ldr	r3, [r3, #0]
 8014398:	62a2      	str	r2, [r4, #40]	; 0x28
 801439a:	42a3      	cmp	r3, r4
 801439c:	bf04      	itt	eq
 801439e:	2301      	moveq	r3, #1
 80143a0:	61a3      	streq	r3, [r4, #24]
 80143a2:	4620      	mov	r0, r4
 80143a4:	f000 f820 	bl	80143e8 <__sfp>
 80143a8:	6060      	str	r0, [r4, #4]
 80143aa:	4620      	mov	r0, r4
 80143ac:	f000 f81c 	bl	80143e8 <__sfp>
 80143b0:	60a0      	str	r0, [r4, #8]
 80143b2:	4620      	mov	r0, r4
 80143b4:	f000 f818 	bl	80143e8 <__sfp>
 80143b8:	2200      	movs	r2, #0
 80143ba:	60e0      	str	r0, [r4, #12]
 80143bc:	2104      	movs	r1, #4
 80143be:	6860      	ldr	r0, [r4, #4]
 80143c0:	f7ff ff82 	bl	80142c8 <std>
 80143c4:	68a0      	ldr	r0, [r4, #8]
 80143c6:	2201      	movs	r2, #1
 80143c8:	2109      	movs	r1, #9
 80143ca:	f7ff ff7d 	bl	80142c8 <std>
 80143ce:	68e0      	ldr	r0, [r4, #12]
 80143d0:	2202      	movs	r2, #2
 80143d2:	2112      	movs	r1, #18
 80143d4:	f7ff ff78 	bl	80142c8 <std>
 80143d8:	2301      	movs	r3, #1
 80143da:	61a3      	str	r3, [r4, #24]
 80143dc:	e7d2      	b.n	8014384 <__sinit+0xc>
 80143de:	bf00      	nop
 80143e0:	080181c4 	.word	0x080181c4
 80143e4:	08014311 	.word	0x08014311

080143e8 <__sfp>:
 80143e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143ea:	4607      	mov	r7, r0
 80143ec:	f7ff ffac 	bl	8014348 <__sfp_lock_acquire>
 80143f0:	4b1e      	ldr	r3, [pc, #120]	; (801446c <__sfp+0x84>)
 80143f2:	681e      	ldr	r6, [r3, #0]
 80143f4:	69b3      	ldr	r3, [r6, #24]
 80143f6:	b913      	cbnz	r3, 80143fe <__sfp+0x16>
 80143f8:	4630      	mov	r0, r6
 80143fa:	f7ff ffbd 	bl	8014378 <__sinit>
 80143fe:	3648      	adds	r6, #72	; 0x48
 8014400:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014404:	3b01      	subs	r3, #1
 8014406:	d503      	bpl.n	8014410 <__sfp+0x28>
 8014408:	6833      	ldr	r3, [r6, #0]
 801440a:	b30b      	cbz	r3, 8014450 <__sfp+0x68>
 801440c:	6836      	ldr	r6, [r6, #0]
 801440e:	e7f7      	b.n	8014400 <__sfp+0x18>
 8014410:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014414:	b9d5      	cbnz	r5, 801444c <__sfp+0x64>
 8014416:	4b16      	ldr	r3, [pc, #88]	; (8014470 <__sfp+0x88>)
 8014418:	60e3      	str	r3, [r4, #12]
 801441a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801441e:	6665      	str	r5, [r4, #100]	; 0x64
 8014420:	f000 f86c 	bl	80144fc <__retarget_lock_init_recursive>
 8014424:	f7ff ff96 	bl	8014354 <__sfp_lock_release>
 8014428:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801442c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014430:	6025      	str	r5, [r4, #0]
 8014432:	61a5      	str	r5, [r4, #24]
 8014434:	2208      	movs	r2, #8
 8014436:	4629      	mov	r1, r5
 8014438:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801443c:	f000 f87f 	bl	801453e <memset>
 8014440:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014444:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014448:	4620      	mov	r0, r4
 801444a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801444c:	3468      	adds	r4, #104	; 0x68
 801444e:	e7d9      	b.n	8014404 <__sfp+0x1c>
 8014450:	2104      	movs	r1, #4
 8014452:	4638      	mov	r0, r7
 8014454:	f7ff ff62 	bl	801431c <__sfmoreglue>
 8014458:	4604      	mov	r4, r0
 801445a:	6030      	str	r0, [r6, #0]
 801445c:	2800      	cmp	r0, #0
 801445e:	d1d5      	bne.n	801440c <__sfp+0x24>
 8014460:	f7ff ff78 	bl	8014354 <__sfp_lock_release>
 8014464:	230c      	movs	r3, #12
 8014466:	603b      	str	r3, [r7, #0]
 8014468:	e7ee      	b.n	8014448 <__sfp+0x60>
 801446a:	bf00      	nop
 801446c:	080181c4 	.word	0x080181c4
 8014470:	ffff0001 	.word	0xffff0001

08014474 <_fwalk_reent>:
 8014474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014478:	4606      	mov	r6, r0
 801447a:	4688      	mov	r8, r1
 801447c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014480:	2700      	movs	r7, #0
 8014482:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014486:	f1b9 0901 	subs.w	r9, r9, #1
 801448a:	d505      	bpl.n	8014498 <_fwalk_reent+0x24>
 801448c:	6824      	ldr	r4, [r4, #0]
 801448e:	2c00      	cmp	r4, #0
 8014490:	d1f7      	bne.n	8014482 <_fwalk_reent+0xe>
 8014492:	4638      	mov	r0, r7
 8014494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014498:	89ab      	ldrh	r3, [r5, #12]
 801449a:	2b01      	cmp	r3, #1
 801449c:	d907      	bls.n	80144ae <_fwalk_reent+0x3a>
 801449e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80144a2:	3301      	adds	r3, #1
 80144a4:	d003      	beq.n	80144ae <_fwalk_reent+0x3a>
 80144a6:	4629      	mov	r1, r5
 80144a8:	4630      	mov	r0, r6
 80144aa:	47c0      	blx	r8
 80144ac:	4307      	orrs	r7, r0
 80144ae:	3568      	adds	r5, #104	; 0x68
 80144b0:	e7e9      	b.n	8014486 <_fwalk_reent+0x12>
	...

080144b4 <__libc_init_array>:
 80144b4:	b570      	push	{r4, r5, r6, lr}
 80144b6:	4d0d      	ldr	r5, [pc, #52]	; (80144ec <__libc_init_array+0x38>)
 80144b8:	4c0d      	ldr	r4, [pc, #52]	; (80144f0 <__libc_init_array+0x3c>)
 80144ba:	1b64      	subs	r4, r4, r5
 80144bc:	10a4      	asrs	r4, r4, #2
 80144be:	2600      	movs	r6, #0
 80144c0:	42a6      	cmp	r6, r4
 80144c2:	d109      	bne.n	80144d8 <__libc_init_array+0x24>
 80144c4:	4d0b      	ldr	r5, [pc, #44]	; (80144f4 <__libc_init_array+0x40>)
 80144c6:	4c0c      	ldr	r4, [pc, #48]	; (80144f8 <__libc_init_array+0x44>)
 80144c8:	f001 f802 	bl	80154d0 <_init>
 80144cc:	1b64      	subs	r4, r4, r5
 80144ce:	10a4      	asrs	r4, r4, #2
 80144d0:	2600      	movs	r6, #0
 80144d2:	42a6      	cmp	r6, r4
 80144d4:	d105      	bne.n	80144e2 <__libc_init_array+0x2e>
 80144d6:	bd70      	pop	{r4, r5, r6, pc}
 80144d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80144dc:	4798      	blx	r3
 80144de:	3601      	adds	r6, #1
 80144e0:	e7ee      	b.n	80144c0 <__libc_init_array+0xc>
 80144e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80144e6:	4798      	blx	r3
 80144e8:	3601      	adds	r6, #1
 80144ea:	e7f2      	b.n	80144d2 <__libc_init_array+0x1e>
 80144ec:	080182b4 	.word	0x080182b4
 80144f0:	080182b4 	.word	0x080182b4
 80144f4:	080182b4 	.word	0x080182b4
 80144f8:	080182b8 	.word	0x080182b8

080144fc <__retarget_lock_init_recursive>:
 80144fc:	4770      	bx	lr

080144fe <__retarget_lock_acquire_recursive>:
 80144fe:	4770      	bx	lr

08014500 <__retarget_lock_release_recursive>:
 8014500:	4770      	bx	lr

08014502 <memcmp>:
 8014502:	b510      	push	{r4, lr}
 8014504:	3901      	subs	r1, #1
 8014506:	4402      	add	r2, r0
 8014508:	4290      	cmp	r0, r2
 801450a:	d101      	bne.n	8014510 <memcmp+0xe>
 801450c:	2000      	movs	r0, #0
 801450e:	e005      	b.n	801451c <memcmp+0x1a>
 8014510:	7803      	ldrb	r3, [r0, #0]
 8014512:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8014516:	42a3      	cmp	r3, r4
 8014518:	d001      	beq.n	801451e <memcmp+0x1c>
 801451a:	1b18      	subs	r0, r3, r4
 801451c:	bd10      	pop	{r4, pc}
 801451e:	3001      	adds	r0, #1
 8014520:	e7f2      	b.n	8014508 <memcmp+0x6>

08014522 <memcpy>:
 8014522:	440a      	add	r2, r1
 8014524:	4291      	cmp	r1, r2
 8014526:	f100 33ff 	add.w	r3, r0, #4294967295
 801452a:	d100      	bne.n	801452e <memcpy+0xc>
 801452c:	4770      	bx	lr
 801452e:	b510      	push	{r4, lr}
 8014530:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014534:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014538:	4291      	cmp	r1, r2
 801453a:	d1f9      	bne.n	8014530 <memcpy+0xe>
 801453c:	bd10      	pop	{r4, pc}

0801453e <memset>:
 801453e:	4402      	add	r2, r0
 8014540:	4603      	mov	r3, r0
 8014542:	4293      	cmp	r3, r2
 8014544:	d100      	bne.n	8014548 <memset+0xa>
 8014546:	4770      	bx	lr
 8014548:	f803 1b01 	strb.w	r1, [r3], #1
 801454c:	e7f9      	b.n	8014542 <memset+0x4>
	...

08014550 <sbrk_aligned>:
 8014550:	b570      	push	{r4, r5, r6, lr}
 8014552:	4e0e      	ldr	r6, [pc, #56]	; (801458c <sbrk_aligned+0x3c>)
 8014554:	460c      	mov	r4, r1
 8014556:	6831      	ldr	r1, [r6, #0]
 8014558:	4605      	mov	r5, r0
 801455a:	b911      	cbnz	r1, 8014562 <sbrk_aligned+0x12>
 801455c:	f000 f94c 	bl	80147f8 <_sbrk_r>
 8014560:	6030      	str	r0, [r6, #0]
 8014562:	4621      	mov	r1, r4
 8014564:	4628      	mov	r0, r5
 8014566:	f000 f947 	bl	80147f8 <_sbrk_r>
 801456a:	1c43      	adds	r3, r0, #1
 801456c:	d00a      	beq.n	8014584 <sbrk_aligned+0x34>
 801456e:	1cc4      	adds	r4, r0, #3
 8014570:	f024 0403 	bic.w	r4, r4, #3
 8014574:	42a0      	cmp	r0, r4
 8014576:	d007      	beq.n	8014588 <sbrk_aligned+0x38>
 8014578:	1a21      	subs	r1, r4, r0
 801457a:	4628      	mov	r0, r5
 801457c:	f000 f93c 	bl	80147f8 <_sbrk_r>
 8014580:	3001      	adds	r0, #1
 8014582:	d101      	bne.n	8014588 <sbrk_aligned+0x38>
 8014584:	f04f 34ff 	mov.w	r4, #4294967295
 8014588:	4620      	mov	r0, r4
 801458a:	bd70      	pop	{r4, r5, r6, pc}
 801458c:	2000f350 	.word	0x2000f350

08014590 <_malloc_r>:
 8014590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014594:	1ccd      	adds	r5, r1, #3
 8014596:	f025 0503 	bic.w	r5, r5, #3
 801459a:	3508      	adds	r5, #8
 801459c:	2d0c      	cmp	r5, #12
 801459e:	bf38      	it	cc
 80145a0:	250c      	movcc	r5, #12
 80145a2:	2d00      	cmp	r5, #0
 80145a4:	4607      	mov	r7, r0
 80145a6:	db01      	blt.n	80145ac <_malloc_r+0x1c>
 80145a8:	42a9      	cmp	r1, r5
 80145aa:	d905      	bls.n	80145b8 <_malloc_r+0x28>
 80145ac:	230c      	movs	r3, #12
 80145ae:	603b      	str	r3, [r7, #0]
 80145b0:	2600      	movs	r6, #0
 80145b2:	4630      	mov	r0, r6
 80145b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80145b8:	4e2e      	ldr	r6, [pc, #184]	; (8014674 <_malloc_r+0xe4>)
 80145ba:	f000 fa9f 	bl	8014afc <__malloc_lock>
 80145be:	6833      	ldr	r3, [r6, #0]
 80145c0:	461c      	mov	r4, r3
 80145c2:	bb34      	cbnz	r4, 8014612 <_malloc_r+0x82>
 80145c4:	4629      	mov	r1, r5
 80145c6:	4638      	mov	r0, r7
 80145c8:	f7ff ffc2 	bl	8014550 <sbrk_aligned>
 80145cc:	1c43      	adds	r3, r0, #1
 80145ce:	4604      	mov	r4, r0
 80145d0:	d14d      	bne.n	801466e <_malloc_r+0xde>
 80145d2:	6834      	ldr	r4, [r6, #0]
 80145d4:	4626      	mov	r6, r4
 80145d6:	2e00      	cmp	r6, #0
 80145d8:	d140      	bne.n	801465c <_malloc_r+0xcc>
 80145da:	6823      	ldr	r3, [r4, #0]
 80145dc:	4631      	mov	r1, r6
 80145de:	4638      	mov	r0, r7
 80145e0:	eb04 0803 	add.w	r8, r4, r3
 80145e4:	f000 f908 	bl	80147f8 <_sbrk_r>
 80145e8:	4580      	cmp	r8, r0
 80145ea:	d13a      	bne.n	8014662 <_malloc_r+0xd2>
 80145ec:	6821      	ldr	r1, [r4, #0]
 80145ee:	3503      	adds	r5, #3
 80145f0:	1a6d      	subs	r5, r5, r1
 80145f2:	f025 0503 	bic.w	r5, r5, #3
 80145f6:	3508      	adds	r5, #8
 80145f8:	2d0c      	cmp	r5, #12
 80145fa:	bf38      	it	cc
 80145fc:	250c      	movcc	r5, #12
 80145fe:	4629      	mov	r1, r5
 8014600:	4638      	mov	r0, r7
 8014602:	f7ff ffa5 	bl	8014550 <sbrk_aligned>
 8014606:	3001      	adds	r0, #1
 8014608:	d02b      	beq.n	8014662 <_malloc_r+0xd2>
 801460a:	6823      	ldr	r3, [r4, #0]
 801460c:	442b      	add	r3, r5
 801460e:	6023      	str	r3, [r4, #0]
 8014610:	e00e      	b.n	8014630 <_malloc_r+0xa0>
 8014612:	6822      	ldr	r2, [r4, #0]
 8014614:	1b52      	subs	r2, r2, r5
 8014616:	d41e      	bmi.n	8014656 <_malloc_r+0xc6>
 8014618:	2a0b      	cmp	r2, #11
 801461a:	d916      	bls.n	801464a <_malloc_r+0xba>
 801461c:	1961      	adds	r1, r4, r5
 801461e:	42a3      	cmp	r3, r4
 8014620:	6025      	str	r5, [r4, #0]
 8014622:	bf18      	it	ne
 8014624:	6059      	strne	r1, [r3, #4]
 8014626:	6863      	ldr	r3, [r4, #4]
 8014628:	bf08      	it	eq
 801462a:	6031      	streq	r1, [r6, #0]
 801462c:	5162      	str	r2, [r4, r5]
 801462e:	604b      	str	r3, [r1, #4]
 8014630:	4638      	mov	r0, r7
 8014632:	f104 060b 	add.w	r6, r4, #11
 8014636:	f000 fa67 	bl	8014b08 <__malloc_unlock>
 801463a:	f026 0607 	bic.w	r6, r6, #7
 801463e:	1d23      	adds	r3, r4, #4
 8014640:	1af2      	subs	r2, r6, r3
 8014642:	d0b6      	beq.n	80145b2 <_malloc_r+0x22>
 8014644:	1b9b      	subs	r3, r3, r6
 8014646:	50a3      	str	r3, [r4, r2]
 8014648:	e7b3      	b.n	80145b2 <_malloc_r+0x22>
 801464a:	6862      	ldr	r2, [r4, #4]
 801464c:	42a3      	cmp	r3, r4
 801464e:	bf0c      	ite	eq
 8014650:	6032      	streq	r2, [r6, #0]
 8014652:	605a      	strne	r2, [r3, #4]
 8014654:	e7ec      	b.n	8014630 <_malloc_r+0xa0>
 8014656:	4623      	mov	r3, r4
 8014658:	6864      	ldr	r4, [r4, #4]
 801465a:	e7b2      	b.n	80145c2 <_malloc_r+0x32>
 801465c:	4634      	mov	r4, r6
 801465e:	6876      	ldr	r6, [r6, #4]
 8014660:	e7b9      	b.n	80145d6 <_malloc_r+0x46>
 8014662:	230c      	movs	r3, #12
 8014664:	603b      	str	r3, [r7, #0]
 8014666:	4638      	mov	r0, r7
 8014668:	f000 fa4e 	bl	8014b08 <__malloc_unlock>
 801466c:	e7a1      	b.n	80145b2 <_malloc_r+0x22>
 801466e:	6025      	str	r5, [r4, #0]
 8014670:	e7de      	b.n	8014630 <_malloc_r+0xa0>
 8014672:	bf00      	nop
 8014674:	2000f34c 	.word	0x2000f34c

08014678 <iprintf>:
 8014678:	b40f      	push	{r0, r1, r2, r3}
 801467a:	4b0a      	ldr	r3, [pc, #40]	; (80146a4 <iprintf+0x2c>)
 801467c:	b513      	push	{r0, r1, r4, lr}
 801467e:	681c      	ldr	r4, [r3, #0]
 8014680:	b124      	cbz	r4, 801468c <iprintf+0x14>
 8014682:	69a3      	ldr	r3, [r4, #24]
 8014684:	b913      	cbnz	r3, 801468c <iprintf+0x14>
 8014686:	4620      	mov	r0, r4
 8014688:	f7ff fe76 	bl	8014378 <__sinit>
 801468c:	ab05      	add	r3, sp, #20
 801468e:	9a04      	ldr	r2, [sp, #16]
 8014690:	68a1      	ldr	r1, [r4, #8]
 8014692:	9301      	str	r3, [sp, #4]
 8014694:	4620      	mov	r0, r4
 8014696:	f000 fab3 	bl	8014c00 <_vfiprintf_r>
 801469a:	b002      	add	sp, #8
 801469c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80146a0:	b004      	add	sp, #16
 80146a2:	4770      	bx	lr
 80146a4:	20000030 	.word	0x20000030

080146a8 <rand>:
 80146a8:	4b16      	ldr	r3, [pc, #88]	; (8014704 <rand+0x5c>)
 80146aa:	b510      	push	{r4, lr}
 80146ac:	681c      	ldr	r4, [r3, #0]
 80146ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80146b0:	b9b3      	cbnz	r3, 80146e0 <rand+0x38>
 80146b2:	2018      	movs	r0, #24
 80146b4:	f000 fa1a 	bl	8014aec <malloc>
 80146b8:	63a0      	str	r0, [r4, #56]	; 0x38
 80146ba:	b928      	cbnz	r0, 80146c8 <rand+0x20>
 80146bc:	4602      	mov	r2, r0
 80146be:	4b12      	ldr	r3, [pc, #72]	; (8014708 <rand+0x60>)
 80146c0:	4812      	ldr	r0, [pc, #72]	; (801470c <rand+0x64>)
 80146c2:	214e      	movs	r1, #78	; 0x4e
 80146c4:	f000 f8fe 	bl	80148c4 <__assert_func>
 80146c8:	4a11      	ldr	r2, [pc, #68]	; (8014710 <rand+0x68>)
 80146ca:	4b12      	ldr	r3, [pc, #72]	; (8014714 <rand+0x6c>)
 80146cc:	e9c0 2300 	strd	r2, r3, [r0]
 80146d0:	4b11      	ldr	r3, [pc, #68]	; (8014718 <rand+0x70>)
 80146d2:	6083      	str	r3, [r0, #8]
 80146d4:	230b      	movs	r3, #11
 80146d6:	8183      	strh	r3, [r0, #12]
 80146d8:	2201      	movs	r2, #1
 80146da:	2300      	movs	r3, #0
 80146dc:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80146e0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80146e2:	4a0e      	ldr	r2, [pc, #56]	; (801471c <rand+0x74>)
 80146e4:	6920      	ldr	r0, [r4, #16]
 80146e6:	6963      	ldr	r3, [r4, #20]
 80146e8:	490d      	ldr	r1, [pc, #52]	; (8014720 <rand+0x78>)
 80146ea:	4342      	muls	r2, r0
 80146ec:	fb01 2203 	mla	r2, r1, r3, r2
 80146f0:	fba0 0101 	umull	r0, r1, r0, r1
 80146f4:	1c43      	adds	r3, r0, #1
 80146f6:	eb42 0001 	adc.w	r0, r2, r1
 80146fa:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80146fe:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8014702:	bd10      	pop	{r4, pc}
 8014704:	20000030 	.word	0x20000030
 8014708:	080181c8 	.word	0x080181c8
 801470c:	080181df 	.word	0x080181df
 8014710:	abcd330e 	.word	0xabcd330e
 8014714:	e66d1234 	.word	0xe66d1234
 8014718:	0005deec 	.word	0x0005deec
 801471c:	5851f42d 	.word	0x5851f42d
 8014720:	4c957f2d 	.word	0x4c957f2d

08014724 <cleanup_glue>:
 8014724:	b538      	push	{r3, r4, r5, lr}
 8014726:	460c      	mov	r4, r1
 8014728:	6809      	ldr	r1, [r1, #0]
 801472a:	4605      	mov	r5, r0
 801472c:	b109      	cbz	r1, 8014732 <cleanup_glue+0xe>
 801472e:	f7ff fff9 	bl	8014724 <cleanup_glue>
 8014732:	4621      	mov	r1, r4
 8014734:	4628      	mov	r0, r5
 8014736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801473a:	f000 b9eb 	b.w	8014b14 <_free_r>
	...

08014740 <_reclaim_reent>:
 8014740:	4b2c      	ldr	r3, [pc, #176]	; (80147f4 <_reclaim_reent+0xb4>)
 8014742:	681b      	ldr	r3, [r3, #0]
 8014744:	4283      	cmp	r3, r0
 8014746:	b570      	push	{r4, r5, r6, lr}
 8014748:	4604      	mov	r4, r0
 801474a:	d051      	beq.n	80147f0 <_reclaim_reent+0xb0>
 801474c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 801474e:	b143      	cbz	r3, 8014762 <_reclaim_reent+0x22>
 8014750:	68db      	ldr	r3, [r3, #12]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d14a      	bne.n	80147ec <_reclaim_reent+0xac>
 8014756:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8014758:	6819      	ldr	r1, [r3, #0]
 801475a:	b111      	cbz	r1, 8014762 <_reclaim_reent+0x22>
 801475c:	4620      	mov	r0, r4
 801475e:	f000 f9d9 	bl	8014b14 <_free_r>
 8014762:	6961      	ldr	r1, [r4, #20]
 8014764:	b111      	cbz	r1, 801476c <_reclaim_reent+0x2c>
 8014766:	4620      	mov	r0, r4
 8014768:	f000 f9d4 	bl	8014b14 <_free_r>
 801476c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 801476e:	b111      	cbz	r1, 8014776 <_reclaim_reent+0x36>
 8014770:	4620      	mov	r0, r4
 8014772:	f000 f9cf 	bl	8014b14 <_free_r>
 8014776:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8014778:	b111      	cbz	r1, 8014780 <_reclaim_reent+0x40>
 801477a:	4620      	mov	r0, r4
 801477c:	f000 f9ca 	bl	8014b14 <_free_r>
 8014780:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8014782:	b111      	cbz	r1, 801478a <_reclaim_reent+0x4a>
 8014784:	4620      	mov	r0, r4
 8014786:	f000 f9c5 	bl	8014b14 <_free_r>
 801478a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 801478c:	b111      	cbz	r1, 8014794 <_reclaim_reent+0x54>
 801478e:	4620      	mov	r0, r4
 8014790:	f000 f9c0 	bl	8014b14 <_free_r>
 8014794:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8014796:	b111      	cbz	r1, 801479e <_reclaim_reent+0x5e>
 8014798:	4620      	mov	r0, r4
 801479a:	f000 f9bb 	bl	8014b14 <_free_r>
 801479e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80147a0:	b111      	cbz	r1, 80147a8 <_reclaim_reent+0x68>
 80147a2:	4620      	mov	r0, r4
 80147a4:	f000 f9b6 	bl	8014b14 <_free_r>
 80147a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80147aa:	b111      	cbz	r1, 80147b2 <_reclaim_reent+0x72>
 80147ac:	4620      	mov	r0, r4
 80147ae:	f000 f9b1 	bl	8014b14 <_free_r>
 80147b2:	69a3      	ldr	r3, [r4, #24]
 80147b4:	b1e3      	cbz	r3, 80147f0 <_reclaim_reent+0xb0>
 80147b6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80147b8:	4620      	mov	r0, r4
 80147ba:	4798      	blx	r3
 80147bc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80147be:	b1b9      	cbz	r1, 80147f0 <_reclaim_reent+0xb0>
 80147c0:	4620      	mov	r0, r4
 80147c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80147c6:	f7ff bfad 	b.w	8014724 <cleanup_glue>
 80147ca:	5949      	ldr	r1, [r1, r5]
 80147cc:	b941      	cbnz	r1, 80147e0 <_reclaim_reent+0xa0>
 80147ce:	3504      	adds	r5, #4
 80147d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80147d2:	2d80      	cmp	r5, #128	; 0x80
 80147d4:	68d9      	ldr	r1, [r3, #12]
 80147d6:	d1f8      	bne.n	80147ca <_reclaim_reent+0x8a>
 80147d8:	4620      	mov	r0, r4
 80147da:	f000 f99b 	bl	8014b14 <_free_r>
 80147de:	e7ba      	b.n	8014756 <_reclaim_reent+0x16>
 80147e0:	680e      	ldr	r6, [r1, #0]
 80147e2:	4620      	mov	r0, r4
 80147e4:	f000 f996 	bl	8014b14 <_free_r>
 80147e8:	4631      	mov	r1, r6
 80147ea:	e7ef      	b.n	80147cc <_reclaim_reent+0x8c>
 80147ec:	2500      	movs	r5, #0
 80147ee:	e7ef      	b.n	80147d0 <_reclaim_reent+0x90>
 80147f0:	bd70      	pop	{r4, r5, r6, pc}
 80147f2:	bf00      	nop
 80147f4:	20000030 	.word	0x20000030

080147f8 <_sbrk_r>:
 80147f8:	b538      	push	{r3, r4, r5, lr}
 80147fa:	4d06      	ldr	r5, [pc, #24]	; (8014814 <_sbrk_r+0x1c>)
 80147fc:	2300      	movs	r3, #0
 80147fe:	4604      	mov	r4, r0
 8014800:	4608      	mov	r0, r1
 8014802:	602b      	str	r3, [r5, #0]
 8014804:	f7ec fc3a 	bl	800107c <_sbrk>
 8014808:	1c43      	adds	r3, r0, #1
 801480a:	d102      	bne.n	8014812 <_sbrk_r+0x1a>
 801480c:	682b      	ldr	r3, [r5, #0]
 801480e:	b103      	cbz	r3, 8014812 <_sbrk_r+0x1a>
 8014810:	6023      	str	r3, [r4, #0]
 8014812:	bd38      	pop	{r3, r4, r5, pc}
 8014814:	2000f354 	.word	0x2000f354

08014818 <__sread>:
 8014818:	b510      	push	{r4, lr}
 801481a:	460c      	mov	r4, r1
 801481c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014820:	f000 fcb2 	bl	8015188 <_read_r>
 8014824:	2800      	cmp	r0, #0
 8014826:	bfab      	itete	ge
 8014828:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801482a:	89a3      	ldrhlt	r3, [r4, #12]
 801482c:	181b      	addge	r3, r3, r0
 801482e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014832:	bfac      	ite	ge
 8014834:	6563      	strge	r3, [r4, #84]	; 0x54
 8014836:	81a3      	strhlt	r3, [r4, #12]
 8014838:	bd10      	pop	{r4, pc}

0801483a <__swrite>:
 801483a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801483e:	461f      	mov	r7, r3
 8014840:	898b      	ldrh	r3, [r1, #12]
 8014842:	05db      	lsls	r3, r3, #23
 8014844:	4605      	mov	r5, r0
 8014846:	460c      	mov	r4, r1
 8014848:	4616      	mov	r6, r2
 801484a:	d505      	bpl.n	8014858 <__swrite+0x1e>
 801484c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014850:	2302      	movs	r3, #2
 8014852:	2200      	movs	r2, #0
 8014854:	f000 f938 	bl	8014ac8 <_lseek_r>
 8014858:	89a3      	ldrh	r3, [r4, #12]
 801485a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801485e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014862:	81a3      	strh	r3, [r4, #12]
 8014864:	4632      	mov	r2, r6
 8014866:	463b      	mov	r3, r7
 8014868:	4628      	mov	r0, r5
 801486a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801486e:	f000 b817 	b.w	80148a0 <_write_r>

08014872 <__sseek>:
 8014872:	b510      	push	{r4, lr}
 8014874:	460c      	mov	r4, r1
 8014876:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801487a:	f000 f925 	bl	8014ac8 <_lseek_r>
 801487e:	1c43      	adds	r3, r0, #1
 8014880:	89a3      	ldrh	r3, [r4, #12]
 8014882:	bf15      	itete	ne
 8014884:	6560      	strne	r0, [r4, #84]	; 0x54
 8014886:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801488a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801488e:	81a3      	strheq	r3, [r4, #12]
 8014890:	bf18      	it	ne
 8014892:	81a3      	strhne	r3, [r4, #12]
 8014894:	bd10      	pop	{r4, pc}

08014896 <__sclose>:
 8014896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801489a:	f000 b831 	b.w	8014900 <_close_r>
	...

080148a0 <_write_r>:
 80148a0:	b538      	push	{r3, r4, r5, lr}
 80148a2:	4d07      	ldr	r5, [pc, #28]	; (80148c0 <_write_r+0x20>)
 80148a4:	4604      	mov	r4, r0
 80148a6:	4608      	mov	r0, r1
 80148a8:	4611      	mov	r1, r2
 80148aa:	2200      	movs	r2, #0
 80148ac:	602a      	str	r2, [r5, #0]
 80148ae:	461a      	mov	r2, r3
 80148b0:	f7ec fb93 	bl	8000fda <_write>
 80148b4:	1c43      	adds	r3, r0, #1
 80148b6:	d102      	bne.n	80148be <_write_r+0x1e>
 80148b8:	682b      	ldr	r3, [r5, #0]
 80148ba:	b103      	cbz	r3, 80148be <_write_r+0x1e>
 80148bc:	6023      	str	r3, [r4, #0]
 80148be:	bd38      	pop	{r3, r4, r5, pc}
 80148c0:	2000f354 	.word	0x2000f354

080148c4 <__assert_func>:
 80148c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80148c6:	4614      	mov	r4, r2
 80148c8:	461a      	mov	r2, r3
 80148ca:	4b09      	ldr	r3, [pc, #36]	; (80148f0 <__assert_func+0x2c>)
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	4605      	mov	r5, r0
 80148d0:	68d8      	ldr	r0, [r3, #12]
 80148d2:	b14c      	cbz	r4, 80148e8 <__assert_func+0x24>
 80148d4:	4b07      	ldr	r3, [pc, #28]	; (80148f4 <__assert_func+0x30>)
 80148d6:	9100      	str	r1, [sp, #0]
 80148d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80148dc:	4906      	ldr	r1, [pc, #24]	; (80148f8 <__assert_func+0x34>)
 80148de:	462b      	mov	r3, r5
 80148e0:	f000 f8e0 	bl	8014aa4 <fiprintf>
 80148e4:	f000 fd22 	bl	801532c <abort>
 80148e8:	4b04      	ldr	r3, [pc, #16]	; (80148fc <__assert_func+0x38>)
 80148ea:	461c      	mov	r4, r3
 80148ec:	e7f3      	b.n	80148d6 <__assert_func+0x12>
 80148ee:	bf00      	nop
 80148f0:	20000030 	.word	0x20000030
 80148f4:	0801823a 	.word	0x0801823a
 80148f8:	08018247 	.word	0x08018247
 80148fc:	08018275 	.word	0x08018275

08014900 <_close_r>:
 8014900:	b538      	push	{r3, r4, r5, lr}
 8014902:	4d06      	ldr	r5, [pc, #24]	; (801491c <_close_r+0x1c>)
 8014904:	2300      	movs	r3, #0
 8014906:	4604      	mov	r4, r0
 8014908:	4608      	mov	r0, r1
 801490a:	602b      	str	r3, [r5, #0]
 801490c:	f7ec fb81 	bl	8001012 <_close>
 8014910:	1c43      	adds	r3, r0, #1
 8014912:	d102      	bne.n	801491a <_close_r+0x1a>
 8014914:	682b      	ldr	r3, [r5, #0]
 8014916:	b103      	cbz	r3, 801491a <_close_r+0x1a>
 8014918:	6023      	str	r3, [r4, #0]
 801491a:	bd38      	pop	{r3, r4, r5, pc}
 801491c:	2000f354 	.word	0x2000f354

08014920 <__sflush_r>:
 8014920:	898a      	ldrh	r2, [r1, #12]
 8014922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014926:	4605      	mov	r5, r0
 8014928:	0710      	lsls	r0, r2, #28
 801492a:	460c      	mov	r4, r1
 801492c:	d458      	bmi.n	80149e0 <__sflush_r+0xc0>
 801492e:	684b      	ldr	r3, [r1, #4]
 8014930:	2b00      	cmp	r3, #0
 8014932:	dc05      	bgt.n	8014940 <__sflush_r+0x20>
 8014934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014936:	2b00      	cmp	r3, #0
 8014938:	dc02      	bgt.n	8014940 <__sflush_r+0x20>
 801493a:	2000      	movs	r0, #0
 801493c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014942:	2e00      	cmp	r6, #0
 8014944:	d0f9      	beq.n	801493a <__sflush_r+0x1a>
 8014946:	2300      	movs	r3, #0
 8014948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801494c:	682f      	ldr	r7, [r5, #0]
 801494e:	602b      	str	r3, [r5, #0]
 8014950:	d032      	beq.n	80149b8 <__sflush_r+0x98>
 8014952:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014954:	89a3      	ldrh	r3, [r4, #12]
 8014956:	075a      	lsls	r2, r3, #29
 8014958:	d505      	bpl.n	8014966 <__sflush_r+0x46>
 801495a:	6863      	ldr	r3, [r4, #4]
 801495c:	1ac0      	subs	r0, r0, r3
 801495e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014960:	b10b      	cbz	r3, 8014966 <__sflush_r+0x46>
 8014962:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014964:	1ac0      	subs	r0, r0, r3
 8014966:	2300      	movs	r3, #0
 8014968:	4602      	mov	r2, r0
 801496a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801496c:	6a21      	ldr	r1, [r4, #32]
 801496e:	4628      	mov	r0, r5
 8014970:	47b0      	blx	r6
 8014972:	1c43      	adds	r3, r0, #1
 8014974:	89a3      	ldrh	r3, [r4, #12]
 8014976:	d106      	bne.n	8014986 <__sflush_r+0x66>
 8014978:	6829      	ldr	r1, [r5, #0]
 801497a:	291d      	cmp	r1, #29
 801497c:	d82c      	bhi.n	80149d8 <__sflush_r+0xb8>
 801497e:	4a2a      	ldr	r2, [pc, #168]	; (8014a28 <__sflush_r+0x108>)
 8014980:	40ca      	lsrs	r2, r1
 8014982:	07d6      	lsls	r6, r2, #31
 8014984:	d528      	bpl.n	80149d8 <__sflush_r+0xb8>
 8014986:	2200      	movs	r2, #0
 8014988:	6062      	str	r2, [r4, #4]
 801498a:	04d9      	lsls	r1, r3, #19
 801498c:	6922      	ldr	r2, [r4, #16]
 801498e:	6022      	str	r2, [r4, #0]
 8014990:	d504      	bpl.n	801499c <__sflush_r+0x7c>
 8014992:	1c42      	adds	r2, r0, #1
 8014994:	d101      	bne.n	801499a <__sflush_r+0x7a>
 8014996:	682b      	ldr	r3, [r5, #0]
 8014998:	b903      	cbnz	r3, 801499c <__sflush_r+0x7c>
 801499a:	6560      	str	r0, [r4, #84]	; 0x54
 801499c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801499e:	602f      	str	r7, [r5, #0]
 80149a0:	2900      	cmp	r1, #0
 80149a2:	d0ca      	beq.n	801493a <__sflush_r+0x1a>
 80149a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80149a8:	4299      	cmp	r1, r3
 80149aa:	d002      	beq.n	80149b2 <__sflush_r+0x92>
 80149ac:	4628      	mov	r0, r5
 80149ae:	f000 f8b1 	bl	8014b14 <_free_r>
 80149b2:	2000      	movs	r0, #0
 80149b4:	6360      	str	r0, [r4, #52]	; 0x34
 80149b6:	e7c1      	b.n	801493c <__sflush_r+0x1c>
 80149b8:	6a21      	ldr	r1, [r4, #32]
 80149ba:	2301      	movs	r3, #1
 80149bc:	4628      	mov	r0, r5
 80149be:	47b0      	blx	r6
 80149c0:	1c41      	adds	r1, r0, #1
 80149c2:	d1c7      	bne.n	8014954 <__sflush_r+0x34>
 80149c4:	682b      	ldr	r3, [r5, #0]
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d0c4      	beq.n	8014954 <__sflush_r+0x34>
 80149ca:	2b1d      	cmp	r3, #29
 80149cc:	d001      	beq.n	80149d2 <__sflush_r+0xb2>
 80149ce:	2b16      	cmp	r3, #22
 80149d0:	d101      	bne.n	80149d6 <__sflush_r+0xb6>
 80149d2:	602f      	str	r7, [r5, #0]
 80149d4:	e7b1      	b.n	801493a <__sflush_r+0x1a>
 80149d6:	89a3      	ldrh	r3, [r4, #12]
 80149d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80149dc:	81a3      	strh	r3, [r4, #12]
 80149de:	e7ad      	b.n	801493c <__sflush_r+0x1c>
 80149e0:	690f      	ldr	r7, [r1, #16]
 80149e2:	2f00      	cmp	r7, #0
 80149e4:	d0a9      	beq.n	801493a <__sflush_r+0x1a>
 80149e6:	0793      	lsls	r3, r2, #30
 80149e8:	680e      	ldr	r6, [r1, #0]
 80149ea:	bf08      	it	eq
 80149ec:	694b      	ldreq	r3, [r1, #20]
 80149ee:	600f      	str	r7, [r1, #0]
 80149f0:	bf18      	it	ne
 80149f2:	2300      	movne	r3, #0
 80149f4:	eba6 0807 	sub.w	r8, r6, r7
 80149f8:	608b      	str	r3, [r1, #8]
 80149fa:	f1b8 0f00 	cmp.w	r8, #0
 80149fe:	dd9c      	ble.n	801493a <__sflush_r+0x1a>
 8014a00:	6a21      	ldr	r1, [r4, #32]
 8014a02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014a04:	4643      	mov	r3, r8
 8014a06:	463a      	mov	r2, r7
 8014a08:	4628      	mov	r0, r5
 8014a0a:	47b0      	blx	r6
 8014a0c:	2800      	cmp	r0, #0
 8014a0e:	dc06      	bgt.n	8014a1e <__sflush_r+0xfe>
 8014a10:	89a3      	ldrh	r3, [r4, #12]
 8014a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a16:	81a3      	strh	r3, [r4, #12]
 8014a18:	f04f 30ff 	mov.w	r0, #4294967295
 8014a1c:	e78e      	b.n	801493c <__sflush_r+0x1c>
 8014a1e:	4407      	add	r7, r0
 8014a20:	eba8 0800 	sub.w	r8, r8, r0
 8014a24:	e7e9      	b.n	80149fa <__sflush_r+0xda>
 8014a26:	bf00      	nop
 8014a28:	20400001 	.word	0x20400001

08014a2c <_fflush_r>:
 8014a2c:	b538      	push	{r3, r4, r5, lr}
 8014a2e:	690b      	ldr	r3, [r1, #16]
 8014a30:	4605      	mov	r5, r0
 8014a32:	460c      	mov	r4, r1
 8014a34:	b913      	cbnz	r3, 8014a3c <_fflush_r+0x10>
 8014a36:	2500      	movs	r5, #0
 8014a38:	4628      	mov	r0, r5
 8014a3a:	bd38      	pop	{r3, r4, r5, pc}
 8014a3c:	b118      	cbz	r0, 8014a46 <_fflush_r+0x1a>
 8014a3e:	6983      	ldr	r3, [r0, #24]
 8014a40:	b90b      	cbnz	r3, 8014a46 <_fflush_r+0x1a>
 8014a42:	f7ff fc99 	bl	8014378 <__sinit>
 8014a46:	4b14      	ldr	r3, [pc, #80]	; (8014a98 <_fflush_r+0x6c>)
 8014a48:	429c      	cmp	r4, r3
 8014a4a:	d11b      	bne.n	8014a84 <_fflush_r+0x58>
 8014a4c:	686c      	ldr	r4, [r5, #4]
 8014a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014a52:	2b00      	cmp	r3, #0
 8014a54:	d0ef      	beq.n	8014a36 <_fflush_r+0xa>
 8014a56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014a58:	07d0      	lsls	r0, r2, #31
 8014a5a:	d404      	bmi.n	8014a66 <_fflush_r+0x3a>
 8014a5c:	0599      	lsls	r1, r3, #22
 8014a5e:	d402      	bmi.n	8014a66 <_fflush_r+0x3a>
 8014a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a62:	f7ff fd4c 	bl	80144fe <__retarget_lock_acquire_recursive>
 8014a66:	4628      	mov	r0, r5
 8014a68:	4621      	mov	r1, r4
 8014a6a:	f7ff ff59 	bl	8014920 <__sflush_r>
 8014a6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014a70:	07da      	lsls	r2, r3, #31
 8014a72:	4605      	mov	r5, r0
 8014a74:	d4e0      	bmi.n	8014a38 <_fflush_r+0xc>
 8014a76:	89a3      	ldrh	r3, [r4, #12]
 8014a78:	059b      	lsls	r3, r3, #22
 8014a7a:	d4dd      	bmi.n	8014a38 <_fflush_r+0xc>
 8014a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014a7e:	f7ff fd3f 	bl	8014500 <__retarget_lock_release_recursive>
 8014a82:	e7d9      	b.n	8014a38 <_fflush_r+0xc>
 8014a84:	4b05      	ldr	r3, [pc, #20]	; (8014a9c <_fflush_r+0x70>)
 8014a86:	429c      	cmp	r4, r3
 8014a88:	d101      	bne.n	8014a8e <_fflush_r+0x62>
 8014a8a:	68ac      	ldr	r4, [r5, #8]
 8014a8c:	e7df      	b.n	8014a4e <_fflush_r+0x22>
 8014a8e:	4b04      	ldr	r3, [pc, #16]	; (8014aa0 <_fflush_r+0x74>)
 8014a90:	429c      	cmp	r4, r3
 8014a92:	bf08      	it	eq
 8014a94:	68ec      	ldreq	r4, [r5, #12]
 8014a96:	e7da      	b.n	8014a4e <_fflush_r+0x22>
 8014a98:	08018184 	.word	0x08018184
 8014a9c:	080181a4 	.word	0x080181a4
 8014aa0:	08018164 	.word	0x08018164

08014aa4 <fiprintf>:
 8014aa4:	b40e      	push	{r1, r2, r3}
 8014aa6:	b503      	push	{r0, r1, lr}
 8014aa8:	4601      	mov	r1, r0
 8014aaa:	ab03      	add	r3, sp, #12
 8014aac:	4805      	ldr	r0, [pc, #20]	; (8014ac4 <fiprintf+0x20>)
 8014aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ab2:	6800      	ldr	r0, [r0, #0]
 8014ab4:	9301      	str	r3, [sp, #4]
 8014ab6:	f000 f8a3 	bl	8014c00 <_vfiprintf_r>
 8014aba:	b002      	add	sp, #8
 8014abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ac0:	b003      	add	sp, #12
 8014ac2:	4770      	bx	lr
 8014ac4:	20000030 	.word	0x20000030

08014ac8 <_lseek_r>:
 8014ac8:	b538      	push	{r3, r4, r5, lr}
 8014aca:	4d07      	ldr	r5, [pc, #28]	; (8014ae8 <_lseek_r+0x20>)
 8014acc:	4604      	mov	r4, r0
 8014ace:	4608      	mov	r0, r1
 8014ad0:	4611      	mov	r1, r2
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	602a      	str	r2, [r5, #0]
 8014ad6:	461a      	mov	r2, r3
 8014ad8:	f7ec fac2 	bl	8001060 <_lseek>
 8014adc:	1c43      	adds	r3, r0, #1
 8014ade:	d102      	bne.n	8014ae6 <_lseek_r+0x1e>
 8014ae0:	682b      	ldr	r3, [r5, #0]
 8014ae2:	b103      	cbz	r3, 8014ae6 <_lseek_r+0x1e>
 8014ae4:	6023      	str	r3, [r4, #0]
 8014ae6:	bd38      	pop	{r3, r4, r5, pc}
 8014ae8:	2000f354 	.word	0x2000f354

08014aec <malloc>:
 8014aec:	4b02      	ldr	r3, [pc, #8]	; (8014af8 <malloc+0xc>)
 8014aee:	4601      	mov	r1, r0
 8014af0:	6818      	ldr	r0, [r3, #0]
 8014af2:	f7ff bd4d 	b.w	8014590 <_malloc_r>
 8014af6:	bf00      	nop
 8014af8:	20000030 	.word	0x20000030

08014afc <__malloc_lock>:
 8014afc:	4801      	ldr	r0, [pc, #4]	; (8014b04 <__malloc_lock+0x8>)
 8014afe:	f7ff bcfe 	b.w	80144fe <__retarget_lock_acquire_recursive>
 8014b02:	bf00      	nop
 8014b04:	2000f348 	.word	0x2000f348

08014b08 <__malloc_unlock>:
 8014b08:	4801      	ldr	r0, [pc, #4]	; (8014b10 <__malloc_unlock+0x8>)
 8014b0a:	f7ff bcf9 	b.w	8014500 <__retarget_lock_release_recursive>
 8014b0e:	bf00      	nop
 8014b10:	2000f348 	.word	0x2000f348

08014b14 <_free_r>:
 8014b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014b16:	2900      	cmp	r1, #0
 8014b18:	d044      	beq.n	8014ba4 <_free_r+0x90>
 8014b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014b1e:	9001      	str	r0, [sp, #4]
 8014b20:	2b00      	cmp	r3, #0
 8014b22:	f1a1 0404 	sub.w	r4, r1, #4
 8014b26:	bfb8      	it	lt
 8014b28:	18e4      	addlt	r4, r4, r3
 8014b2a:	f7ff ffe7 	bl	8014afc <__malloc_lock>
 8014b2e:	4a1e      	ldr	r2, [pc, #120]	; (8014ba8 <_free_r+0x94>)
 8014b30:	9801      	ldr	r0, [sp, #4]
 8014b32:	6813      	ldr	r3, [r2, #0]
 8014b34:	b933      	cbnz	r3, 8014b44 <_free_r+0x30>
 8014b36:	6063      	str	r3, [r4, #4]
 8014b38:	6014      	str	r4, [r2, #0]
 8014b3a:	b003      	add	sp, #12
 8014b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014b40:	f7ff bfe2 	b.w	8014b08 <__malloc_unlock>
 8014b44:	42a3      	cmp	r3, r4
 8014b46:	d908      	bls.n	8014b5a <_free_r+0x46>
 8014b48:	6825      	ldr	r5, [r4, #0]
 8014b4a:	1961      	adds	r1, r4, r5
 8014b4c:	428b      	cmp	r3, r1
 8014b4e:	bf01      	itttt	eq
 8014b50:	6819      	ldreq	r1, [r3, #0]
 8014b52:	685b      	ldreq	r3, [r3, #4]
 8014b54:	1949      	addeq	r1, r1, r5
 8014b56:	6021      	streq	r1, [r4, #0]
 8014b58:	e7ed      	b.n	8014b36 <_free_r+0x22>
 8014b5a:	461a      	mov	r2, r3
 8014b5c:	685b      	ldr	r3, [r3, #4]
 8014b5e:	b10b      	cbz	r3, 8014b64 <_free_r+0x50>
 8014b60:	42a3      	cmp	r3, r4
 8014b62:	d9fa      	bls.n	8014b5a <_free_r+0x46>
 8014b64:	6811      	ldr	r1, [r2, #0]
 8014b66:	1855      	adds	r5, r2, r1
 8014b68:	42a5      	cmp	r5, r4
 8014b6a:	d10b      	bne.n	8014b84 <_free_r+0x70>
 8014b6c:	6824      	ldr	r4, [r4, #0]
 8014b6e:	4421      	add	r1, r4
 8014b70:	1854      	adds	r4, r2, r1
 8014b72:	42a3      	cmp	r3, r4
 8014b74:	6011      	str	r1, [r2, #0]
 8014b76:	d1e0      	bne.n	8014b3a <_free_r+0x26>
 8014b78:	681c      	ldr	r4, [r3, #0]
 8014b7a:	685b      	ldr	r3, [r3, #4]
 8014b7c:	6053      	str	r3, [r2, #4]
 8014b7e:	4421      	add	r1, r4
 8014b80:	6011      	str	r1, [r2, #0]
 8014b82:	e7da      	b.n	8014b3a <_free_r+0x26>
 8014b84:	d902      	bls.n	8014b8c <_free_r+0x78>
 8014b86:	230c      	movs	r3, #12
 8014b88:	6003      	str	r3, [r0, #0]
 8014b8a:	e7d6      	b.n	8014b3a <_free_r+0x26>
 8014b8c:	6825      	ldr	r5, [r4, #0]
 8014b8e:	1961      	adds	r1, r4, r5
 8014b90:	428b      	cmp	r3, r1
 8014b92:	bf04      	itt	eq
 8014b94:	6819      	ldreq	r1, [r3, #0]
 8014b96:	685b      	ldreq	r3, [r3, #4]
 8014b98:	6063      	str	r3, [r4, #4]
 8014b9a:	bf04      	itt	eq
 8014b9c:	1949      	addeq	r1, r1, r5
 8014b9e:	6021      	streq	r1, [r4, #0]
 8014ba0:	6054      	str	r4, [r2, #4]
 8014ba2:	e7ca      	b.n	8014b3a <_free_r+0x26>
 8014ba4:	b003      	add	sp, #12
 8014ba6:	bd30      	pop	{r4, r5, pc}
 8014ba8:	2000f34c 	.word	0x2000f34c

08014bac <__sfputc_r>:
 8014bac:	6893      	ldr	r3, [r2, #8]
 8014bae:	3b01      	subs	r3, #1
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	b410      	push	{r4}
 8014bb4:	6093      	str	r3, [r2, #8]
 8014bb6:	da08      	bge.n	8014bca <__sfputc_r+0x1e>
 8014bb8:	6994      	ldr	r4, [r2, #24]
 8014bba:	42a3      	cmp	r3, r4
 8014bbc:	db01      	blt.n	8014bc2 <__sfputc_r+0x16>
 8014bbe:	290a      	cmp	r1, #10
 8014bc0:	d103      	bne.n	8014bca <__sfputc_r+0x1e>
 8014bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014bc6:	f000 baf1 	b.w	80151ac <__swbuf_r>
 8014bca:	6813      	ldr	r3, [r2, #0]
 8014bcc:	1c58      	adds	r0, r3, #1
 8014bce:	6010      	str	r0, [r2, #0]
 8014bd0:	7019      	strb	r1, [r3, #0]
 8014bd2:	4608      	mov	r0, r1
 8014bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014bd8:	4770      	bx	lr

08014bda <__sfputs_r>:
 8014bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014bdc:	4606      	mov	r6, r0
 8014bde:	460f      	mov	r7, r1
 8014be0:	4614      	mov	r4, r2
 8014be2:	18d5      	adds	r5, r2, r3
 8014be4:	42ac      	cmp	r4, r5
 8014be6:	d101      	bne.n	8014bec <__sfputs_r+0x12>
 8014be8:	2000      	movs	r0, #0
 8014bea:	e007      	b.n	8014bfc <__sfputs_r+0x22>
 8014bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bf0:	463a      	mov	r2, r7
 8014bf2:	4630      	mov	r0, r6
 8014bf4:	f7ff ffda 	bl	8014bac <__sfputc_r>
 8014bf8:	1c43      	adds	r3, r0, #1
 8014bfa:	d1f3      	bne.n	8014be4 <__sfputs_r+0xa>
 8014bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014c00 <_vfiprintf_r>:
 8014c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014c04:	460d      	mov	r5, r1
 8014c06:	b09d      	sub	sp, #116	; 0x74
 8014c08:	4614      	mov	r4, r2
 8014c0a:	4698      	mov	r8, r3
 8014c0c:	4606      	mov	r6, r0
 8014c0e:	b118      	cbz	r0, 8014c18 <_vfiprintf_r+0x18>
 8014c10:	6983      	ldr	r3, [r0, #24]
 8014c12:	b90b      	cbnz	r3, 8014c18 <_vfiprintf_r+0x18>
 8014c14:	f7ff fbb0 	bl	8014378 <__sinit>
 8014c18:	4b89      	ldr	r3, [pc, #548]	; (8014e40 <_vfiprintf_r+0x240>)
 8014c1a:	429d      	cmp	r5, r3
 8014c1c:	d11b      	bne.n	8014c56 <_vfiprintf_r+0x56>
 8014c1e:	6875      	ldr	r5, [r6, #4]
 8014c20:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c22:	07d9      	lsls	r1, r3, #31
 8014c24:	d405      	bmi.n	8014c32 <_vfiprintf_r+0x32>
 8014c26:	89ab      	ldrh	r3, [r5, #12]
 8014c28:	059a      	lsls	r2, r3, #22
 8014c2a:	d402      	bmi.n	8014c32 <_vfiprintf_r+0x32>
 8014c2c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c2e:	f7ff fc66 	bl	80144fe <__retarget_lock_acquire_recursive>
 8014c32:	89ab      	ldrh	r3, [r5, #12]
 8014c34:	071b      	lsls	r3, r3, #28
 8014c36:	d501      	bpl.n	8014c3c <_vfiprintf_r+0x3c>
 8014c38:	692b      	ldr	r3, [r5, #16]
 8014c3a:	b9eb      	cbnz	r3, 8014c78 <_vfiprintf_r+0x78>
 8014c3c:	4629      	mov	r1, r5
 8014c3e:	4630      	mov	r0, r6
 8014c40:	f000 fb06 	bl	8015250 <__swsetup_r>
 8014c44:	b1c0      	cbz	r0, 8014c78 <_vfiprintf_r+0x78>
 8014c46:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c48:	07dc      	lsls	r4, r3, #31
 8014c4a:	d50e      	bpl.n	8014c6a <_vfiprintf_r+0x6a>
 8014c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8014c50:	b01d      	add	sp, #116	; 0x74
 8014c52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c56:	4b7b      	ldr	r3, [pc, #492]	; (8014e44 <_vfiprintf_r+0x244>)
 8014c58:	429d      	cmp	r5, r3
 8014c5a:	d101      	bne.n	8014c60 <_vfiprintf_r+0x60>
 8014c5c:	68b5      	ldr	r5, [r6, #8]
 8014c5e:	e7df      	b.n	8014c20 <_vfiprintf_r+0x20>
 8014c60:	4b79      	ldr	r3, [pc, #484]	; (8014e48 <_vfiprintf_r+0x248>)
 8014c62:	429d      	cmp	r5, r3
 8014c64:	bf08      	it	eq
 8014c66:	68f5      	ldreq	r5, [r6, #12]
 8014c68:	e7da      	b.n	8014c20 <_vfiprintf_r+0x20>
 8014c6a:	89ab      	ldrh	r3, [r5, #12]
 8014c6c:	0598      	lsls	r0, r3, #22
 8014c6e:	d4ed      	bmi.n	8014c4c <_vfiprintf_r+0x4c>
 8014c70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c72:	f7ff fc45 	bl	8014500 <__retarget_lock_release_recursive>
 8014c76:	e7e9      	b.n	8014c4c <_vfiprintf_r+0x4c>
 8014c78:	2300      	movs	r3, #0
 8014c7a:	9309      	str	r3, [sp, #36]	; 0x24
 8014c7c:	2320      	movs	r3, #32
 8014c7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8014c86:	2330      	movs	r3, #48	; 0x30
 8014c88:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014e4c <_vfiprintf_r+0x24c>
 8014c8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014c90:	f04f 0901 	mov.w	r9, #1
 8014c94:	4623      	mov	r3, r4
 8014c96:	469a      	mov	sl, r3
 8014c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014c9c:	b10a      	cbz	r2, 8014ca2 <_vfiprintf_r+0xa2>
 8014c9e:	2a25      	cmp	r2, #37	; 0x25
 8014ca0:	d1f9      	bne.n	8014c96 <_vfiprintf_r+0x96>
 8014ca2:	ebba 0b04 	subs.w	fp, sl, r4
 8014ca6:	d00b      	beq.n	8014cc0 <_vfiprintf_r+0xc0>
 8014ca8:	465b      	mov	r3, fp
 8014caa:	4622      	mov	r2, r4
 8014cac:	4629      	mov	r1, r5
 8014cae:	4630      	mov	r0, r6
 8014cb0:	f7ff ff93 	bl	8014bda <__sfputs_r>
 8014cb4:	3001      	adds	r0, #1
 8014cb6:	f000 80aa 	beq.w	8014e0e <_vfiprintf_r+0x20e>
 8014cba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014cbc:	445a      	add	r2, fp
 8014cbe:	9209      	str	r2, [sp, #36]	; 0x24
 8014cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8014cc4:	2b00      	cmp	r3, #0
 8014cc6:	f000 80a2 	beq.w	8014e0e <_vfiprintf_r+0x20e>
 8014cca:	2300      	movs	r3, #0
 8014ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8014cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014cd4:	f10a 0a01 	add.w	sl, sl, #1
 8014cd8:	9304      	str	r3, [sp, #16]
 8014cda:	9307      	str	r3, [sp, #28]
 8014cdc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014ce0:	931a      	str	r3, [sp, #104]	; 0x68
 8014ce2:	4654      	mov	r4, sl
 8014ce4:	2205      	movs	r2, #5
 8014ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cea:	4858      	ldr	r0, [pc, #352]	; (8014e4c <_vfiprintf_r+0x24c>)
 8014cec:	f7eb faa8 	bl	8000240 <memchr>
 8014cf0:	9a04      	ldr	r2, [sp, #16]
 8014cf2:	b9d8      	cbnz	r0, 8014d2c <_vfiprintf_r+0x12c>
 8014cf4:	06d1      	lsls	r1, r2, #27
 8014cf6:	bf44      	itt	mi
 8014cf8:	2320      	movmi	r3, #32
 8014cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014cfe:	0713      	lsls	r3, r2, #28
 8014d00:	bf44      	itt	mi
 8014d02:	232b      	movmi	r3, #43	; 0x2b
 8014d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014d08:	f89a 3000 	ldrb.w	r3, [sl]
 8014d0c:	2b2a      	cmp	r3, #42	; 0x2a
 8014d0e:	d015      	beq.n	8014d3c <_vfiprintf_r+0x13c>
 8014d10:	9a07      	ldr	r2, [sp, #28]
 8014d12:	4654      	mov	r4, sl
 8014d14:	2000      	movs	r0, #0
 8014d16:	f04f 0c0a 	mov.w	ip, #10
 8014d1a:	4621      	mov	r1, r4
 8014d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014d20:	3b30      	subs	r3, #48	; 0x30
 8014d22:	2b09      	cmp	r3, #9
 8014d24:	d94e      	bls.n	8014dc4 <_vfiprintf_r+0x1c4>
 8014d26:	b1b0      	cbz	r0, 8014d56 <_vfiprintf_r+0x156>
 8014d28:	9207      	str	r2, [sp, #28]
 8014d2a:	e014      	b.n	8014d56 <_vfiprintf_r+0x156>
 8014d2c:	eba0 0308 	sub.w	r3, r0, r8
 8014d30:	fa09 f303 	lsl.w	r3, r9, r3
 8014d34:	4313      	orrs	r3, r2
 8014d36:	9304      	str	r3, [sp, #16]
 8014d38:	46a2      	mov	sl, r4
 8014d3a:	e7d2      	b.n	8014ce2 <_vfiprintf_r+0xe2>
 8014d3c:	9b03      	ldr	r3, [sp, #12]
 8014d3e:	1d19      	adds	r1, r3, #4
 8014d40:	681b      	ldr	r3, [r3, #0]
 8014d42:	9103      	str	r1, [sp, #12]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	bfbb      	ittet	lt
 8014d48:	425b      	neglt	r3, r3
 8014d4a:	f042 0202 	orrlt.w	r2, r2, #2
 8014d4e:	9307      	strge	r3, [sp, #28]
 8014d50:	9307      	strlt	r3, [sp, #28]
 8014d52:	bfb8      	it	lt
 8014d54:	9204      	strlt	r2, [sp, #16]
 8014d56:	7823      	ldrb	r3, [r4, #0]
 8014d58:	2b2e      	cmp	r3, #46	; 0x2e
 8014d5a:	d10c      	bne.n	8014d76 <_vfiprintf_r+0x176>
 8014d5c:	7863      	ldrb	r3, [r4, #1]
 8014d5e:	2b2a      	cmp	r3, #42	; 0x2a
 8014d60:	d135      	bne.n	8014dce <_vfiprintf_r+0x1ce>
 8014d62:	9b03      	ldr	r3, [sp, #12]
 8014d64:	1d1a      	adds	r2, r3, #4
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	9203      	str	r2, [sp, #12]
 8014d6a:	2b00      	cmp	r3, #0
 8014d6c:	bfb8      	it	lt
 8014d6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014d72:	3402      	adds	r4, #2
 8014d74:	9305      	str	r3, [sp, #20]
 8014d76:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014e5c <_vfiprintf_r+0x25c>
 8014d7a:	7821      	ldrb	r1, [r4, #0]
 8014d7c:	2203      	movs	r2, #3
 8014d7e:	4650      	mov	r0, sl
 8014d80:	f7eb fa5e 	bl	8000240 <memchr>
 8014d84:	b140      	cbz	r0, 8014d98 <_vfiprintf_r+0x198>
 8014d86:	2340      	movs	r3, #64	; 0x40
 8014d88:	eba0 000a 	sub.w	r0, r0, sl
 8014d8c:	fa03 f000 	lsl.w	r0, r3, r0
 8014d90:	9b04      	ldr	r3, [sp, #16]
 8014d92:	4303      	orrs	r3, r0
 8014d94:	3401      	adds	r4, #1
 8014d96:	9304      	str	r3, [sp, #16]
 8014d98:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014d9c:	482c      	ldr	r0, [pc, #176]	; (8014e50 <_vfiprintf_r+0x250>)
 8014d9e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014da2:	2206      	movs	r2, #6
 8014da4:	f7eb fa4c 	bl	8000240 <memchr>
 8014da8:	2800      	cmp	r0, #0
 8014daa:	d03f      	beq.n	8014e2c <_vfiprintf_r+0x22c>
 8014dac:	4b29      	ldr	r3, [pc, #164]	; (8014e54 <_vfiprintf_r+0x254>)
 8014dae:	bb1b      	cbnz	r3, 8014df8 <_vfiprintf_r+0x1f8>
 8014db0:	9b03      	ldr	r3, [sp, #12]
 8014db2:	3307      	adds	r3, #7
 8014db4:	f023 0307 	bic.w	r3, r3, #7
 8014db8:	3308      	adds	r3, #8
 8014dba:	9303      	str	r3, [sp, #12]
 8014dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014dbe:	443b      	add	r3, r7
 8014dc0:	9309      	str	r3, [sp, #36]	; 0x24
 8014dc2:	e767      	b.n	8014c94 <_vfiprintf_r+0x94>
 8014dc4:	fb0c 3202 	mla	r2, ip, r2, r3
 8014dc8:	460c      	mov	r4, r1
 8014dca:	2001      	movs	r0, #1
 8014dcc:	e7a5      	b.n	8014d1a <_vfiprintf_r+0x11a>
 8014dce:	2300      	movs	r3, #0
 8014dd0:	3401      	adds	r4, #1
 8014dd2:	9305      	str	r3, [sp, #20]
 8014dd4:	4619      	mov	r1, r3
 8014dd6:	f04f 0c0a 	mov.w	ip, #10
 8014dda:	4620      	mov	r0, r4
 8014ddc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014de0:	3a30      	subs	r2, #48	; 0x30
 8014de2:	2a09      	cmp	r2, #9
 8014de4:	d903      	bls.n	8014dee <_vfiprintf_r+0x1ee>
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d0c5      	beq.n	8014d76 <_vfiprintf_r+0x176>
 8014dea:	9105      	str	r1, [sp, #20]
 8014dec:	e7c3      	b.n	8014d76 <_vfiprintf_r+0x176>
 8014dee:	fb0c 2101 	mla	r1, ip, r1, r2
 8014df2:	4604      	mov	r4, r0
 8014df4:	2301      	movs	r3, #1
 8014df6:	e7f0      	b.n	8014dda <_vfiprintf_r+0x1da>
 8014df8:	ab03      	add	r3, sp, #12
 8014dfa:	9300      	str	r3, [sp, #0]
 8014dfc:	462a      	mov	r2, r5
 8014dfe:	4b16      	ldr	r3, [pc, #88]	; (8014e58 <_vfiprintf_r+0x258>)
 8014e00:	a904      	add	r1, sp, #16
 8014e02:	4630      	mov	r0, r6
 8014e04:	f3af 8000 	nop.w
 8014e08:	4607      	mov	r7, r0
 8014e0a:	1c78      	adds	r0, r7, #1
 8014e0c:	d1d6      	bne.n	8014dbc <_vfiprintf_r+0x1bc>
 8014e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014e10:	07d9      	lsls	r1, r3, #31
 8014e12:	d405      	bmi.n	8014e20 <_vfiprintf_r+0x220>
 8014e14:	89ab      	ldrh	r3, [r5, #12]
 8014e16:	059a      	lsls	r2, r3, #22
 8014e18:	d402      	bmi.n	8014e20 <_vfiprintf_r+0x220>
 8014e1a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014e1c:	f7ff fb70 	bl	8014500 <__retarget_lock_release_recursive>
 8014e20:	89ab      	ldrh	r3, [r5, #12]
 8014e22:	065b      	lsls	r3, r3, #25
 8014e24:	f53f af12 	bmi.w	8014c4c <_vfiprintf_r+0x4c>
 8014e28:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014e2a:	e711      	b.n	8014c50 <_vfiprintf_r+0x50>
 8014e2c:	ab03      	add	r3, sp, #12
 8014e2e:	9300      	str	r3, [sp, #0]
 8014e30:	462a      	mov	r2, r5
 8014e32:	4b09      	ldr	r3, [pc, #36]	; (8014e58 <_vfiprintf_r+0x258>)
 8014e34:	a904      	add	r1, sp, #16
 8014e36:	4630      	mov	r0, r6
 8014e38:	f000 f880 	bl	8014f3c <_printf_i>
 8014e3c:	e7e4      	b.n	8014e08 <_vfiprintf_r+0x208>
 8014e3e:	bf00      	nop
 8014e40:	08018184 	.word	0x08018184
 8014e44:	080181a4 	.word	0x080181a4
 8014e48:	08018164 	.word	0x08018164
 8014e4c:	08018276 	.word	0x08018276
 8014e50:	08018280 	.word	0x08018280
 8014e54:	00000000 	.word	0x00000000
 8014e58:	08014bdb 	.word	0x08014bdb
 8014e5c:	0801827c 	.word	0x0801827c

08014e60 <_printf_common>:
 8014e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014e64:	4616      	mov	r6, r2
 8014e66:	4699      	mov	r9, r3
 8014e68:	688a      	ldr	r2, [r1, #8]
 8014e6a:	690b      	ldr	r3, [r1, #16]
 8014e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014e70:	4293      	cmp	r3, r2
 8014e72:	bfb8      	it	lt
 8014e74:	4613      	movlt	r3, r2
 8014e76:	6033      	str	r3, [r6, #0]
 8014e78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014e7c:	4607      	mov	r7, r0
 8014e7e:	460c      	mov	r4, r1
 8014e80:	b10a      	cbz	r2, 8014e86 <_printf_common+0x26>
 8014e82:	3301      	adds	r3, #1
 8014e84:	6033      	str	r3, [r6, #0]
 8014e86:	6823      	ldr	r3, [r4, #0]
 8014e88:	0699      	lsls	r1, r3, #26
 8014e8a:	bf42      	ittt	mi
 8014e8c:	6833      	ldrmi	r3, [r6, #0]
 8014e8e:	3302      	addmi	r3, #2
 8014e90:	6033      	strmi	r3, [r6, #0]
 8014e92:	6825      	ldr	r5, [r4, #0]
 8014e94:	f015 0506 	ands.w	r5, r5, #6
 8014e98:	d106      	bne.n	8014ea8 <_printf_common+0x48>
 8014e9a:	f104 0a19 	add.w	sl, r4, #25
 8014e9e:	68e3      	ldr	r3, [r4, #12]
 8014ea0:	6832      	ldr	r2, [r6, #0]
 8014ea2:	1a9b      	subs	r3, r3, r2
 8014ea4:	42ab      	cmp	r3, r5
 8014ea6:	dc26      	bgt.n	8014ef6 <_printf_common+0x96>
 8014ea8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014eac:	1e13      	subs	r3, r2, #0
 8014eae:	6822      	ldr	r2, [r4, #0]
 8014eb0:	bf18      	it	ne
 8014eb2:	2301      	movne	r3, #1
 8014eb4:	0692      	lsls	r2, r2, #26
 8014eb6:	d42b      	bmi.n	8014f10 <_printf_common+0xb0>
 8014eb8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014ebc:	4649      	mov	r1, r9
 8014ebe:	4638      	mov	r0, r7
 8014ec0:	47c0      	blx	r8
 8014ec2:	3001      	adds	r0, #1
 8014ec4:	d01e      	beq.n	8014f04 <_printf_common+0xa4>
 8014ec6:	6823      	ldr	r3, [r4, #0]
 8014ec8:	68e5      	ldr	r5, [r4, #12]
 8014eca:	6832      	ldr	r2, [r6, #0]
 8014ecc:	f003 0306 	and.w	r3, r3, #6
 8014ed0:	2b04      	cmp	r3, #4
 8014ed2:	bf08      	it	eq
 8014ed4:	1aad      	subeq	r5, r5, r2
 8014ed6:	68a3      	ldr	r3, [r4, #8]
 8014ed8:	6922      	ldr	r2, [r4, #16]
 8014eda:	bf0c      	ite	eq
 8014edc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014ee0:	2500      	movne	r5, #0
 8014ee2:	4293      	cmp	r3, r2
 8014ee4:	bfc4      	itt	gt
 8014ee6:	1a9b      	subgt	r3, r3, r2
 8014ee8:	18ed      	addgt	r5, r5, r3
 8014eea:	2600      	movs	r6, #0
 8014eec:	341a      	adds	r4, #26
 8014eee:	42b5      	cmp	r5, r6
 8014ef0:	d11a      	bne.n	8014f28 <_printf_common+0xc8>
 8014ef2:	2000      	movs	r0, #0
 8014ef4:	e008      	b.n	8014f08 <_printf_common+0xa8>
 8014ef6:	2301      	movs	r3, #1
 8014ef8:	4652      	mov	r2, sl
 8014efa:	4649      	mov	r1, r9
 8014efc:	4638      	mov	r0, r7
 8014efe:	47c0      	blx	r8
 8014f00:	3001      	adds	r0, #1
 8014f02:	d103      	bne.n	8014f0c <_printf_common+0xac>
 8014f04:	f04f 30ff 	mov.w	r0, #4294967295
 8014f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014f0c:	3501      	adds	r5, #1
 8014f0e:	e7c6      	b.n	8014e9e <_printf_common+0x3e>
 8014f10:	18e1      	adds	r1, r4, r3
 8014f12:	1c5a      	adds	r2, r3, #1
 8014f14:	2030      	movs	r0, #48	; 0x30
 8014f16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014f1a:	4422      	add	r2, r4
 8014f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014f24:	3302      	adds	r3, #2
 8014f26:	e7c7      	b.n	8014eb8 <_printf_common+0x58>
 8014f28:	2301      	movs	r3, #1
 8014f2a:	4622      	mov	r2, r4
 8014f2c:	4649      	mov	r1, r9
 8014f2e:	4638      	mov	r0, r7
 8014f30:	47c0      	blx	r8
 8014f32:	3001      	adds	r0, #1
 8014f34:	d0e6      	beq.n	8014f04 <_printf_common+0xa4>
 8014f36:	3601      	adds	r6, #1
 8014f38:	e7d9      	b.n	8014eee <_printf_common+0x8e>
	...

08014f3c <_printf_i>:
 8014f3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014f40:	7e0f      	ldrb	r7, [r1, #24]
 8014f42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014f44:	2f78      	cmp	r7, #120	; 0x78
 8014f46:	4691      	mov	r9, r2
 8014f48:	4680      	mov	r8, r0
 8014f4a:	460c      	mov	r4, r1
 8014f4c:	469a      	mov	sl, r3
 8014f4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014f52:	d807      	bhi.n	8014f64 <_printf_i+0x28>
 8014f54:	2f62      	cmp	r7, #98	; 0x62
 8014f56:	d80a      	bhi.n	8014f6e <_printf_i+0x32>
 8014f58:	2f00      	cmp	r7, #0
 8014f5a:	f000 80d8 	beq.w	801510e <_printf_i+0x1d2>
 8014f5e:	2f58      	cmp	r7, #88	; 0x58
 8014f60:	f000 80a3 	beq.w	80150aa <_printf_i+0x16e>
 8014f64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014f68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014f6c:	e03a      	b.n	8014fe4 <_printf_i+0xa8>
 8014f6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014f72:	2b15      	cmp	r3, #21
 8014f74:	d8f6      	bhi.n	8014f64 <_printf_i+0x28>
 8014f76:	a101      	add	r1, pc, #4	; (adr r1, 8014f7c <_printf_i+0x40>)
 8014f78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014f7c:	08014fd5 	.word	0x08014fd5
 8014f80:	08014fe9 	.word	0x08014fe9
 8014f84:	08014f65 	.word	0x08014f65
 8014f88:	08014f65 	.word	0x08014f65
 8014f8c:	08014f65 	.word	0x08014f65
 8014f90:	08014f65 	.word	0x08014f65
 8014f94:	08014fe9 	.word	0x08014fe9
 8014f98:	08014f65 	.word	0x08014f65
 8014f9c:	08014f65 	.word	0x08014f65
 8014fa0:	08014f65 	.word	0x08014f65
 8014fa4:	08014f65 	.word	0x08014f65
 8014fa8:	080150f5 	.word	0x080150f5
 8014fac:	08015019 	.word	0x08015019
 8014fb0:	080150d7 	.word	0x080150d7
 8014fb4:	08014f65 	.word	0x08014f65
 8014fb8:	08014f65 	.word	0x08014f65
 8014fbc:	08015117 	.word	0x08015117
 8014fc0:	08014f65 	.word	0x08014f65
 8014fc4:	08015019 	.word	0x08015019
 8014fc8:	08014f65 	.word	0x08014f65
 8014fcc:	08014f65 	.word	0x08014f65
 8014fd0:	080150df 	.word	0x080150df
 8014fd4:	682b      	ldr	r3, [r5, #0]
 8014fd6:	1d1a      	adds	r2, r3, #4
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	602a      	str	r2, [r5, #0]
 8014fdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014fe0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014fe4:	2301      	movs	r3, #1
 8014fe6:	e0a3      	b.n	8015130 <_printf_i+0x1f4>
 8014fe8:	6820      	ldr	r0, [r4, #0]
 8014fea:	6829      	ldr	r1, [r5, #0]
 8014fec:	0606      	lsls	r6, r0, #24
 8014fee:	f101 0304 	add.w	r3, r1, #4
 8014ff2:	d50a      	bpl.n	801500a <_printf_i+0xce>
 8014ff4:	680e      	ldr	r6, [r1, #0]
 8014ff6:	602b      	str	r3, [r5, #0]
 8014ff8:	2e00      	cmp	r6, #0
 8014ffa:	da03      	bge.n	8015004 <_printf_i+0xc8>
 8014ffc:	232d      	movs	r3, #45	; 0x2d
 8014ffe:	4276      	negs	r6, r6
 8015000:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015004:	485e      	ldr	r0, [pc, #376]	; (8015180 <_printf_i+0x244>)
 8015006:	230a      	movs	r3, #10
 8015008:	e019      	b.n	801503e <_printf_i+0x102>
 801500a:	680e      	ldr	r6, [r1, #0]
 801500c:	602b      	str	r3, [r5, #0]
 801500e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8015012:	bf18      	it	ne
 8015014:	b236      	sxthne	r6, r6
 8015016:	e7ef      	b.n	8014ff8 <_printf_i+0xbc>
 8015018:	682b      	ldr	r3, [r5, #0]
 801501a:	6820      	ldr	r0, [r4, #0]
 801501c:	1d19      	adds	r1, r3, #4
 801501e:	6029      	str	r1, [r5, #0]
 8015020:	0601      	lsls	r1, r0, #24
 8015022:	d501      	bpl.n	8015028 <_printf_i+0xec>
 8015024:	681e      	ldr	r6, [r3, #0]
 8015026:	e002      	b.n	801502e <_printf_i+0xf2>
 8015028:	0646      	lsls	r6, r0, #25
 801502a:	d5fb      	bpl.n	8015024 <_printf_i+0xe8>
 801502c:	881e      	ldrh	r6, [r3, #0]
 801502e:	4854      	ldr	r0, [pc, #336]	; (8015180 <_printf_i+0x244>)
 8015030:	2f6f      	cmp	r7, #111	; 0x6f
 8015032:	bf0c      	ite	eq
 8015034:	2308      	moveq	r3, #8
 8015036:	230a      	movne	r3, #10
 8015038:	2100      	movs	r1, #0
 801503a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801503e:	6865      	ldr	r5, [r4, #4]
 8015040:	60a5      	str	r5, [r4, #8]
 8015042:	2d00      	cmp	r5, #0
 8015044:	bfa2      	ittt	ge
 8015046:	6821      	ldrge	r1, [r4, #0]
 8015048:	f021 0104 	bicge.w	r1, r1, #4
 801504c:	6021      	strge	r1, [r4, #0]
 801504e:	b90e      	cbnz	r6, 8015054 <_printf_i+0x118>
 8015050:	2d00      	cmp	r5, #0
 8015052:	d04d      	beq.n	80150f0 <_printf_i+0x1b4>
 8015054:	4615      	mov	r5, r2
 8015056:	fbb6 f1f3 	udiv	r1, r6, r3
 801505a:	fb03 6711 	mls	r7, r3, r1, r6
 801505e:	5dc7      	ldrb	r7, [r0, r7]
 8015060:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015064:	4637      	mov	r7, r6
 8015066:	42bb      	cmp	r3, r7
 8015068:	460e      	mov	r6, r1
 801506a:	d9f4      	bls.n	8015056 <_printf_i+0x11a>
 801506c:	2b08      	cmp	r3, #8
 801506e:	d10b      	bne.n	8015088 <_printf_i+0x14c>
 8015070:	6823      	ldr	r3, [r4, #0]
 8015072:	07de      	lsls	r6, r3, #31
 8015074:	d508      	bpl.n	8015088 <_printf_i+0x14c>
 8015076:	6923      	ldr	r3, [r4, #16]
 8015078:	6861      	ldr	r1, [r4, #4]
 801507a:	4299      	cmp	r1, r3
 801507c:	bfde      	ittt	le
 801507e:	2330      	movle	r3, #48	; 0x30
 8015080:	f805 3c01 	strble.w	r3, [r5, #-1]
 8015084:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015088:	1b52      	subs	r2, r2, r5
 801508a:	6122      	str	r2, [r4, #16]
 801508c:	f8cd a000 	str.w	sl, [sp]
 8015090:	464b      	mov	r3, r9
 8015092:	aa03      	add	r2, sp, #12
 8015094:	4621      	mov	r1, r4
 8015096:	4640      	mov	r0, r8
 8015098:	f7ff fee2 	bl	8014e60 <_printf_common>
 801509c:	3001      	adds	r0, #1
 801509e:	d14c      	bne.n	801513a <_printf_i+0x1fe>
 80150a0:	f04f 30ff 	mov.w	r0, #4294967295
 80150a4:	b004      	add	sp, #16
 80150a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80150aa:	4835      	ldr	r0, [pc, #212]	; (8015180 <_printf_i+0x244>)
 80150ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80150b0:	6829      	ldr	r1, [r5, #0]
 80150b2:	6823      	ldr	r3, [r4, #0]
 80150b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80150b8:	6029      	str	r1, [r5, #0]
 80150ba:	061d      	lsls	r5, r3, #24
 80150bc:	d514      	bpl.n	80150e8 <_printf_i+0x1ac>
 80150be:	07df      	lsls	r7, r3, #31
 80150c0:	bf44      	itt	mi
 80150c2:	f043 0320 	orrmi.w	r3, r3, #32
 80150c6:	6023      	strmi	r3, [r4, #0]
 80150c8:	b91e      	cbnz	r6, 80150d2 <_printf_i+0x196>
 80150ca:	6823      	ldr	r3, [r4, #0]
 80150cc:	f023 0320 	bic.w	r3, r3, #32
 80150d0:	6023      	str	r3, [r4, #0]
 80150d2:	2310      	movs	r3, #16
 80150d4:	e7b0      	b.n	8015038 <_printf_i+0xfc>
 80150d6:	6823      	ldr	r3, [r4, #0]
 80150d8:	f043 0320 	orr.w	r3, r3, #32
 80150dc:	6023      	str	r3, [r4, #0]
 80150de:	2378      	movs	r3, #120	; 0x78
 80150e0:	4828      	ldr	r0, [pc, #160]	; (8015184 <_printf_i+0x248>)
 80150e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80150e6:	e7e3      	b.n	80150b0 <_printf_i+0x174>
 80150e8:	0659      	lsls	r1, r3, #25
 80150ea:	bf48      	it	mi
 80150ec:	b2b6      	uxthmi	r6, r6
 80150ee:	e7e6      	b.n	80150be <_printf_i+0x182>
 80150f0:	4615      	mov	r5, r2
 80150f2:	e7bb      	b.n	801506c <_printf_i+0x130>
 80150f4:	682b      	ldr	r3, [r5, #0]
 80150f6:	6826      	ldr	r6, [r4, #0]
 80150f8:	6961      	ldr	r1, [r4, #20]
 80150fa:	1d18      	adds	r0, r3, #4
 80150fc:	6028      	str	r0, [r5, #0]
 80150fe:	0635      	lsls	r5, r6, #24
 8015100:	681b      	ldr	r3, [r3, #0]
 8015102:	d501      	bpl.n	8015108 <_printf_i+0x1cc>
 8015104:	6019      	str	r1, [r3, #0]
 8015106:	e002      	b.n	801510e <_printf_i+0x1d2>
 8015108:	0670      	lsls	r0, r6, #25
 801510a:	d5fb      	bpl.n	8015104 <_printf_i+0x1c8>
 801510c:	8019      	strh	r1, [r3, #0]
 801510e:	2300      	movs	r3, #0
 8015110:	6123      	str	r3, [r4, #16]
 8015112:	4615      	mov	r5, r2
 8015114:	e7ba      	b.n	801508c <_printf_i+0x150>
 8015116:	682b      	ldr	r3, [r5, #0]
 8015118:	1d1a      	adds	r2, r3, #4
 801511a:	602a      	str	r2, [r5, #0]
 801511c:	681d      	ldr	r5, [r3, #0]
 801511e:	6862      	ldr	r2, [r4, #4]
 8015120:	2100      	movs	r1, #0
 8015122:	4628      	mov	r0, r5
 8015124:	f7eb f88c 	bl	8000240 <memchr>
 8015128:	b108      	cbz	r0, 801512e <_printf_i+0x1f2>
 801512a:	1b40      	subs	r0, r0, r5
 801512c:	6060      	str	r0, [r4, #4]
 801512e:	6863      	ldr	r3, [r4, #4]
 8015130:	6123      	str	r3, [r4, #16]
 8015132:	2300      	movs	r3, #0
 8015134:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015138:	e7a8      	b.n	801508c <_printf_i+0x150>
 801513a:	6923      	ldr	r3, [r4, #16]
 801513c:	462a      	mov	r2, r5
 801513e:	4649      	mov	r1, r9
 8015140:	4640      	mov	r0, r8
 8015142:	47d0      	blx	sl
 8015144:	3001      	adds	r0, #1
 8015146:	d0ab      	beq.n	80150a0 <_printf_i+0x164>
 8015148:	6823      	ldr	r3, [r4, #0]
 801514a:	079b      	lsls	r3, r3, #30
 801514c:	d413      	bmi.n	8015176 <_printf_i+0x23a>
 801514e:	68e0      	ldr	r0, [r4, #12]
 8015150:	9b03      	ldr	r3, [sp, #12]
 8015152:	4298      	cmp	r0, r3
 8015154:	bfb8      	it	lt
 8015156:	4618      	movlt	r0, r3
 8015158:	e7a4      	b.n	80150a4 <_printf_i+0x168>
 801515a:	2301      	movs	r3, #1
 801515c:	4632      	mov	r2, r6
 801515e:	4649      	mov	r1, r9
 8015160:	4640      	mov	r0, r8
 8015162:	47d0      	blx	sl
 8015164:	3001      	adds	r0, #1
 8015166:	d09b      	beq.n	80150a0 <_printf_i+0x164>
 8015168:	3501      	adds	r5, #1
 801516a:	68e3      	ldr	r3, [r4, #12]
 801516c:	9903      	ldr	r1, [sp, #12]
 801516e:	1a5b      	subs	r3, r3, r1
 8015170:	42ab      	cmp	r3, r5
 8015172:	dcf2      	bgt.n	801515a <_printf_i+0x21e>
 8015174:	e7eb      	b.n	801514e <_printf_i+0x212>
 8015176:	2500      	movs	r5, #0
 8015178:	f104 0619 	add.w	r6, r4, #25
 801517c:	e7f5      	b.n	801516a <_printf_i+0x22e>
 801517e:	bf00      	nop
 8015180:	08018287 	.word	0x08018287
 8015184:	08018298 	.word	0x08018298

08015188 <_read_r>:
 8015188:	b538      	push	{r3, r4, r5, lr}
 801518a:	4d07      	ldr	r5, [pc, #28]	; (80151a8 <_read_r+0x20>)
 801518c:	4604      	mov	r4, r0
 801518e:	4608      	mov	r0, r1
 8015190:	4611      	mov	r1, r2
 8015192:	2200      	movs	r2, #0
 8015194:	602a      	str	r2, [r5, #0]
 8015196:	461a      	mov	r2, r3
 8015198:	f7eb ff02 	bl	8000fa0 <_read>
 801519c:	1c43      	adds	r3, r0, #1
 801519e:	d102      	bne.n	80151a6 <_read_r+0x1e>
 80151a0:	682b      	ldr	r3, [r5, #0]
 80151a2:	b103      	cbz	r3, 80151a6 <_read_r+0x1e>
 80151a4:	6023      	str	r3, [r4, #0]
 80151a6:	bd38      	pop	{r3, r4, r5, pc}
 80151a8:	2000f354 	.word	0x2000f354

080151ac <__swbuf_r>:
 80151ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80151ae:	460e      	mov	r6, r1
 80151b0:	4614      	mov	r4, r2
 80151b2:	4605      	mov	r5, r0
 80151b4:	b118      	cbz	r0, 80151be <__swbuf_r+0x12>
 80151b6:	6983      	ldr	r3, [r0, #24]
 80151b8:	b90b      	cbnz	r3, 80151be <__swbuf_r+0x12>
 80151ba:	f7ff f8dd 	bl	8014378 <__sinit>
 80151be:	4b21      	ldr	r3, [pc, #132]	; (8015244 <__swbuf_r+0x98>)
 80151c0:	429c      	cmp	r4, r3
 80151c2:	d12b      	bne.n	801521c <__swbuf_r+0x70>
 80151c4:	686c      	ldr	r4, [r5, #4]
 80151c6:	69a3      	ldr	r3, [r4, #24]
 80151c8:	60a3      	str	r3, [r4, #8]
 80151ca:	89a3      	ldrh	r3, [r4, #12]
 80151cc:	071a      	lsls	r2, r3, #28
 80151ce:	d52f      	bpl.n	8015230 <__swbuf_r+0x84>
 80151d0:	6923      	ldr	r3, [r4, #16]
 80151d2:	b36b      	cbz	r3, 8015230 <__swbuf_r+0x84>
 80151d4:	6923      	ldr	r3, [r4, #16]
 80151d6:	6820      	ldr	r0, [r4, #0]
 80151d8:	1ac0      	subs	r0, r0, r3
 80151da:	6963      	ldr	r3, [r4, #20]
 80151dc:	b2f6      	uxtb	r6, r6
 80151de:	4283      	cmp	r3, r0
 80151e0:	4637      	mov	r7, r6
 80151e2:	dc04      	bgt.n	80151ee <__swbuf_r+0x42>
 80151e4:	4621      	mov	r1, r4
 80151e6:	4628      	mov	r0, r5
 80151e8:	f7ff fc20 	bl	8014a2c <_fflush_r>
 80151ec:	bb30      	cbnz	r0, 801523c <__swbuf_r+0x90>
 80151ee:	68a3      	ldr	r3, [r4, #8]
 80151f0:	3b01      	subs	r3, #1
 80151f2:	60a3      	str	r3, [r4, #8]
 80151f4:	6823      	ldr	r3, [r4, #0]
 80151f6:	1c5a      	adds	r2, r3, #1
 80151f8:	6022      	str	r2, [r4, #0]
 80151fa:	701e      	strb	r6, [r3, #0]
 80151fc:	6963      	ldr	r3, [r4, #20]
 80151fe:	3001      	adds	r0, #1
 8015200:	4283      	cmp	r3, r0
 8015202:	d004      	beq.n	801520e <__swbuf_r+0x62>
 8015204:	89a3      	ldrh	r3, [r4, #12]
 8015206:	07db      	lsls	r3, r3, #31
 8015208:	d506      	bpl.n	8015218 <__swbuf_r+0x6c>
 801520a:	2e0a      	cmp	r6, #10
 801520c:	d104      	bne.n	8015218 <__swbuf_r+0x6c>
 801520e:	4621      	mov	r1, r4
 8015210:	4628      	mov	r0, r5
 8015212:	f7ff fc0b 	bl	8014a2c <_fflush_r>
 8015216:	b988      	cbnz	r0, 801523c <__swbuf_r+0x90>
 8015218:	4638      	mov	r0, r7
 801521a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801521c:	4b0a      	ldr	r3, [pc, #40]	; (8015248 <__swbuf_r+0x9c>)
 801521e:	429c      	cmp	r4, r3
 8015220:	d101      	bne.n	8015226 <__swbuf_r+0x7a>
 8015222:	68ac      	ldr	r4, [r5, #8]
 8015224:	e7cf      	b.n	80151c6 <__swbuf_r+0x1a>
 8015226:	4b09      	ldr	r3, [pc, #36]	; (801524c <__swbuf_r+0xa0>)
 8015228:	429c      	cmp	r4, r3
 801522a:	bf08      	it	eq
 801522c:	68ec      	ldreq	r4, [r5, #12]
 801522e:	e7ca      	b.n	80151c6 <__swbuf_r+0x1a>
 8015230:	4621      	mov	r1, r4
 8015232:	4628      	mov	r0, r5
 8015234:	f000 f80c 	bl	8015250 <__swsetup_r>
 8015238:	2800      	cmp	r0, #0
 801523a:	d0cb      	beq.n	80151d4 <__swbuf_r+0x28>
 801523c:	f04f 37ff 	mov.w	r7, #4294967295
 8015240:	e7ea      	b.n	8015218 <__swbuf_r+0x6c>
 8015242:	bf00      	nop
 8015244:	08018184 	.word	0x08018184
 8015248:	080181a4 	.word	0x080181a4
 801524c:	08018164 	.word	0x08018164

08015250 <__swsetup_r>:
 8015250:	4b32      	ldr	r3, [pc, #200]	; (801531c <__swsetup_r+0xcc>)
 8015252:	b570      	push	{r4, r5, r6, lr}
 8015254:	681d      	ldr	r5, [r3, #0]
 8015256:	4606      	mov	r6, r0
 8015258:	460c      	mov	r4, r1
 801525a:	b125      	cbz	r5, 8015266 <__swsetup_r+0x16>
 801525c:	69ab      	ldr	r3, [r5, #24]
 801525e:	b913      	cbnz	r3, 8015266 <__swsetup_r+0x16>
 8015260:	4628      	mov	r0, r5
 8015262:	f7ff f889 	bl	8014378 <__sinit>
 8015266:	4b2e      	ldr	r3, [pc, #184]	; (8015320 <__swsetup_r+0xd0>)
 8015268:	429c      	cmp	r4, r3
 801526a:	d10f      	bne.n	801528c <__swsetup_r+0x3c>
 801526c:	686c      	ldr	r4, [r5, #4]
 801526e:	89a3      	ldrh	r3, [r4, #12]
 8015270:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8015274:	0719      	lsls	r1, r3, #28
 8015276:	d42c      	bmi.n	80152d2 <__swsetup_r+0x82>
 8015278:	06dd      	lsls	r5, r3, #27
 801527a:	d411      	bmi.n	80152a0 <__swsetup_r+0x50>
 801527c:	2309      	movs	r3, #9
 801527e:	6033      	str	r3, [r6, #0]
 8015280:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8015284:	81a3      	strh	r3, [r4, #12]
 8015286:	f04f 30ff 	mov.w	r0, #4294967295
 801528a:	e03e      	b.n	801530a <__swsetup_r+0xba>
 801528c:	4b25      	ldr	r3, [pc, #148]	; (8015324 <__swsetup_r+0xd4>)
 801528e:	429c      	cmp	r4, r3
 8015290:	d101      	bne.n	8015296 <__swsetup_r+0x46>
 8015292:	68ac      	ldr	r4, [r5, #8]
 8015294:	e7eb      	b.n	801526e <__swsetup_r+0x1e>
 8015296:	4b24      	ldr	r3, [pc, #144]	; (8015328 <__swsetup_r+0xd8>)
 8015298:	429c      	cmp	r4, r3
 801529a:	bf08      	it	eq
 801529c:	68ec      	ldreq	r4, [r5, #12]
 801529e:	e7e6      	b.n	801526e <__swsetup_r+0x1e>
 80152a0:	0758      	lsls	r0, r3, #29
 80152a2:	d512      	bpl.n	80152ca <__swsetup_r+0x7a>
 80152a4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80152a6:	b141      	cbz	r1, 80152ba <__swsetup_r+0x6a>
 80152a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80152ac:	4299      	cmp	r1, r3
 80152ae:	d002      	beq.n	80152b6 <__swsetup_r+0x66>
 80152b0:	4630      	mov	r0, r6
 80152b2:	f7ff fc2f 	bl	8014b14 <_free_r>
 80152b6:	2300      	movs	r3, #0
 80152b8:	6363      	str	r3, [r4, #52]	; 0x34
 80152ba:	89a3      	ldrh	r3, [r4, #12]
 80152bc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80152c0:	81a3      	strh	r3, [r4, #12]
 80152c2:	2300      	movs	r3, #0
 80152c4:	6063      	str	r3, [r4, #4]
 80152c6:	6923      	ldr	r3, [r4, #16]
 80152c8:	6023      	str	r3, [r4, #0]
 80152ca:	89a3      	ldrh	r3, [r4, #12]
 80152cc:	f043 0308 	orr.w	r3, r3, #8
 80152d0:	81a3      	strh	r3, [r4, #12]
 80152d2:	6923      	ldr	r3, [r4, #16]
 80152d4:	b94b      	cbnz	r3, 80152ea <__swsetup_r+0x9a>
 80152d6:	89a3      	ldrh	r3, [r4, #12]
 80152d8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80152dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80152e0:	d003      	beq.n	80152ea <__swsetup_r+0x9a>
 80152e2:	4621      	mov	r1, r4
 80152e4:	4630      	mov	r0, r6
 80152e6:	f000 f84d 	bl	8015384 <__smakebuf_r>
 80152ea:	89a0      	ldrh	r0, [r4, #12]
 80152ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80152f0:	f010 0301 	ands.w	r3, r0, #1
 80152f4:	d00a      	beq.n	801530c <__swsetup_r+0xbc>
 80152f6:	2300      	movs	r3, #0
 80152f8:	60a3      	str	r3, [r4, #8]
 80152fa:	6963      	ldr	r3, [r4, #20]
 80152fc:	425b      	negs	r3, r3
 80152fe:	61a3      	str	r3, [r4, #24]
 8015300:	6923      	ldr	r3, [r4, #16]
 8015302:	b943      	cbnz	r3, 8015316 <__swsetup_r+0xc6>
 8015304:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8015308:	d1ba      	bne.n	8015280 <__swsetup_r+0x30>
 801530a:	bd70      	pop	{r4, r5, r6, pc}
 801530c:	0781      	lsls	r1, r0, #30
 801530e:	bf58      	it	pl
 8015310:	6963      	ldrpl	r3, [r4, #20]
 8015312:	60a3      	str	r3, [r4, #8]
 8015314:	e7f4      	b.n	8015300 <__swsetup_r+0xb0>
 8015316:	2000      	movs	r0, #0
 8015318:	e7f7      	b.n	801530a <__swsetup_r+0xba>
 801531a:	bf00      	nop
 801531c:	20000030 	.word	0x20000030
 8015320:	08018184 	.word	0x08018184
 8015324:	080181a4 	.word	0x080181a4
 8015328:	08018164 	.word	0x08018164

0801532c <abort>:
 801532c:	b508      	push	{r3, lr}
 801532e:	2006      	movs	r0, #6
 8015330:	f000 f890 	bl	8015454 <raise>
 8015334:	2001      	movs	r0, #1
 8015336:	f7eb fe29 	bl	8000f8c <_exit>

0801533a <__swhatbuf_r>:
 801533a:	b570      	push	{r4, r5, r6, lr}
 801533c:	460e      	mov	r6, r1
 801533e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8015342:	2900      	cmp	r1, #0
 8015344:	b096      	sub	sp, #88	; 0x58
 8015346:	4614      	mov	r4, r2
 8015348:	461d      	mov	r5, r3
 801534a:	da08      	bge.n	801535e <__swhatbuf_r+0x24>
 801534c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015350:	2200      	movs	r2, #0
 8015352:	602a      	str	r2, [r5, #0]
 8015354:	061a      	lsls	r2, r3, #24
 8015356:	d410      	bmi.n	801537a <__swhatbuf_r+0x40>
 8015358:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801535c:	e00e      	b.n	801537c <__swhatbuf_r+0x42>
 801535e:	466a      	mov	r2, sp
 8015360:	f000 f894 	bl	801548c <_fstat_r>
 8015364:	2800      	cmp	r0, #0
 8015366:	dbf1      	blt.n	801534c <__swhatbuf_r+0x12>
 8015368:	9a01      	ldr	r2, [sp, #4]
 801536a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801536e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8015372:	425a      	negs	r2, r3
 8015374:	415a      	adcs	r2, r3
 8015376:	602a      	str	r2, [r5, #0]
 8015378:	e7ee      	b.n	8015358 <__swhatbuf_r+0x1e>
 801537a:	2340      	movs	r3, #64	; 0x40
 801537c:	2000      	movs	r0, #0
 801537e:	6023      	str	r3, [r4, #0]
 8015380:	b016      	add	sp, #88	; 0x58
 8015382:	bd70      	pop	{r4, r5, r6, pc}

08015384 <__smakebuf_r>:
 8015384:	898b      	ldrh	r3, [r1, #12]
 8015386:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015388:	079d      	lsls	r5, r3, #30
 801538a:	4606      	mov	r6, r0
 801538c:	460c      	mov	r4, r1
 801538e:	d507      	bpl.n	80153a0 <__smakebuf_r+0x1c>
 8015390:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015394:	6023      	str	r3, [r4, #0]
 8015396:	6123      	str	r3, [r4, #16]
 8015398:	2301      	movs	r3, #1
 801539a:	6163      	str	r3, [r4, #20]
 801539c:	b002      	add	sp, #8
 801539e:	bd70      	pop	{r4, r5, r6, pc}
 80153a0:	ab01      	add	r3, sp, #4
 80153a2:	466a      	mov	r2, sp
 80153a4:	f7ff ffc9 	bl	801533a <__swhatbuf_r>
 80153a8:	9900      	ldr	r1, [sp, #0]
 80153aa:	4605      	mov	r5, r0
 80153ac:	4630      	mov	r0, r6
 80153ae:	f7ff f8ef 	bl	8014590 <_malloc_r>
 80153b2:	b948      	cbnz	r0, 80153c8 <__smakebuf_r+0x44>
 80153b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80153b8:	059a      	lsls	r2, r3, #22
 80153ba:	d4ef      	bmi.n	801539c <__smakebuf_r+0x18>
 80153bc:	f023 0303 	bic.w	r3, r3, #3
 80153c0:	f043 0302 	orr.w	r3, r3, #2
 80153c4:	81a3      	strh	r3, [r4, #12]
 80153c6:	e7e3      	b.n	8015390 <__smakebuf_r+0xc>
 80153c8:	4b0d      	ldr	r3, [pc, #52]	; (8015400 <__smakebuf_r+0x7c>)
 80153ca:	62b3      	str	r3, [r6, #40]	; 0x28
 80153cc:	89a3      	ldrh	r3, [r4, #12]
 80153ce:	6020      	str	r0, [r4, #0]
 80153d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80153d4:	81a3      	strh	r3, [r4, #12]
 80153d6:	9b00      	ldr	r3, [sp, #0]
 80153d8:	6163      	str	r3, [r4, #20]
 80153da:	9b01      	ldr	r3, [sp, #4]
 80153dc:	6120      	str	r0, [r4, #16]
 80153de:	b15b      	cbz	r3, 80153f8 <__smakebuf_r+0x74>
 80153e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80153e4:	4630      	mov	r0, r6
 80153e6:	f000 f863 	bl	80154b0 <_isatty_r>
 80153ea:	b128      	cbz	r0, 80153f8 <__smakebuf_r+0x74>
 80153ec:	89a3      	ldrh	r3, [r4, #12]
 80153ee:	f023 0303 	bic.w	r3, r3, #3
 80153f2:	f043 0301 	orr.w	r3, r3, #1
 80153f6:	81a3      	strh	r3, [r4, #12]
 80153f8:	89a0      	ldrh	r0, [r4, #12]
 80153fa:	4305      	orrs	r5, r0
 80153fc:	81a5      	strh	r5, [r4, #12]
 80153fe:	e7cd      	b.n	801539c <__smakebuf_r+0x18>
 8015400:	08014311 	.word	0x08014311

08015404 <_raise_r>:
 8015404:	291f      	cmp	r1, #31
 8015406:	b538      	push	{r3, r4, r5, lr}
 8015408:	4604      	mov	r4, r0
 801540a:	460d      	mov	r5, r1
 801540c:	d904      	bls.n	8015418 <_raise_r+0x14>
 801540e:	2316      	movs	r3, #22
 8015410:	6003      	str	r3, [r0, #0]
 8015412:	f04f 30ff 	mov.w	r0, #4294967295
 8015416:	bd38      	pop	{r3, r4, r5, pc}
 8015418:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801541a:	b112      	cbz	r2, 8015422 <_raise_r+0x1e>
 801541c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015420:	b94b      	cbnz	r3, 8015436 <_raise_r+0x32>
 8015422:	4620      	mov	r0, r4
 8015424:	f000 f830 	bl	8015488 <_getpid_r>
 8015428:	462a      	mov	r2, r5
 801542a:	4601      	mov	r1, r0
 801542c:	4620      	mov	r0, r4
 801542e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015432:	f000 b817 	b.w	8015464 <_kill_r>
 8015436:	2b01      	cmp	r3, #1
 8015438:	d00a      	beq.n	8015450 <_raise_r+0x4c>
 801543a:	1c59      	adds	r1, r3, #1
 801543c:	d103      	bne.n	8015446 <_raise_r+0x42>
 801543e:	2316      	movs	r3, #22
 8015440:	6003      	str	r3, [r0, #0]
 8015442:	2001      	movs	r0, #1
 8015444:	e7e7      	b.n	8015416 <_raise_r+0x12>
 8015446:	2400      	movs	r4, #0
 8015448:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801544c:	4628      	mov	r0, r5
 801544e:	4798      	blx	r3
 8015450:	2000      	movs	r0, #0
 8015452:	e7e0      	b.n	8015416 <_raise_r+0x12>

08015454 <raise>:
 8015454:	4b02      	ldr	r3, [pc, #8]	; (8015460 <raise+0xc>)
 8015456:	4601      	mov	r1, r0
 8015458:	6818      	ldr	r0, [r3, #0]
 801545a:	f7ff bfd3 	b.w	8015404 <_raise_r>
 801545e:	bf00      	nop
 8015460:	20000030 	.word	0x20000030

08015464 <_kill_r>:
 8015464:	b538      	push	{r3, r4, r5, lr}
 8015466:	4d07      	ldr	r5, [pc, #28]	; (8015484 <_kill_r+0x20>)
 8015468:	2300      	movs	r3, #0
 801546a:	4604      	mov	r4, r0
 801546c:	4608      	mov	r0, r1
 801546e:	4611      	mov	r1, r2
 8015470:	602b      	str	r3, [r5, #0]
 8015472:	f7eb fd79 	bl	8000f68 <_kill>
 8015476:	1c43      	adds	r3, r0, #1
 8015478:	d102      	bne.n	8015480 <_kill_r+0x1c>
 801547a:	682b      	ldr	r3, [r5, #0]
 801547c:	b103      	cbz	r3, 8015480 <_kill_r+0x1c>
 801547e:	6023      	str	r3, [r4, #0]
 8015480:	bd38      	pop	{r3, r4, r5, pc}
 8015482:	bf00      	nop
 8015484:	2000f354 	.word	0x2000f354

08015488 <_getpid_r>:
 8015488:	f7eb bd66 	b.w	8000f58 <_getpid>

0801548c <_fstat_r>:
 801548c:	b538      	push	{r3, r4, r5, lr}
 801548e:	4d07      	ldr	r5, [pc, #28]	; (80154ac <_fstat_r+0x20>)
 8015490:	2300      	movs	r3, #0
 8015492:	4604      	mov	r4, r0
 8015494:	4608      	mov	r0, r1
 8015496:	4611      	mov	r1, r2
 8015498:	602b      	str	r3, [r5, #0]
 801549a:	f7eb fdc6 	bl	800102a <_fstat>
 801549e:	1c43      	adds	r3, r0, #1
 80154a0:	d102      	bne.n	80154a8 <_fstat_r+0x1c>
 80154a2:	682b      	ldr	r3, [r5, #0]
 80154a4:	b103      	cbz	r3, 80154a8 <_fstat_r+0x1c>
 80154a6:	6023      	str	r3, [r4, #0]
 80154a8:	bd38      	pop	{r3, r4, r5, pc}
 80154aa:	bf00      	nop
 80154ac:	2000f354 	.word	0x2000f354

080154b0 <_isatty_r>:
 80154b0:	b538      	push	{r3, r4, r5, lr}
 80154b2:	4d06      	ldr	r5, [pc, #24]	; (80154cc <_isatty_r+0x1c>)
 80154b4:	2300      	movs	r3, #0
 80154b6:	4604      	mov	r4, r0
 80154b8:	4608      	mov	r0, r1
 80154ba:	602b      	str	r3, [r5, #0]
 80154bc:	f7eb fdc5 	bl	800104a <_isatty>
 80154c0:	1c43      	adds	r3, r0, #1
 80154c2:	d102      	bne.n	80154ca <_isatty_r+0x1a>
 80154c4:	682b      	ldr	r3, [r5, #0]
 80154c6:	b103      	cbz	r3, 80154ca <_isatty_r+0x1a>
 80154c8:	6023      	str	r3, [r4, #0]
 80154ca:	bd38      	pop	{r3, r4, r5, pc}
 80154cc:	2000f354 	.word	0x2000f354

080154d0 <_init>:
 80154d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154d2:	bf00      	nop
 80154d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80154d6:	bc08      	pop	{r3}
 80154d8:	469e      	mov	lr, r3
 80154da:	4770      	bx	lr

080154dc <_fini>:
 80154dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80154de:	bf00      	nop
 80154e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80154e2:	bc08      	pop	{r3}
 80154e4:	469e      	mov	lr, r3
 80154e6:	4770      	bx	lr


MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a20  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  08005c20  08005c20  00015c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d58  08005d58  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005d58  08005d58  00015d58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d60  08005d60  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d60  08005d60  00015d60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d64  08005d64  00015d64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005d68  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004af0  20000074  08005ddc  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b64  08005ddc  00024b64  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000183bd  00000000  00000000  000200a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000307f  00000000  00000000  0003845f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001390  00000000  00000000  0003b4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001248  00000000  00000000  0003c870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003014  00000000  00000000  0003dab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001595a  00000000  00000000  00040acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00101653  00000000  00000000  00056426  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157a79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000554c  00000000  00000000  00157acc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000074 	.word	0x20000074
 800021c:	00000000 	.word	0x00000000
 8000220:	08005c08 	.word	0x08005c08

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000078 	.word	0x20000078
 800023c:	08005c08 	.word	0x08005c08

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000548:	f000 fb1b 	bl	8000b82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054c:	f000 f840 	bl	80005d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000550:	f000 f8e8 	bl	8000724 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000554:	f000 f8ac 	bl	80006b0 <MX_SPI1_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000558:	f001 febc 	bl	80022d4 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of blinkSemaphore */
  blinkSemaphoreHandle = osSemaphoreNew(1, 1, &blinkSemaphore_attributes);
 800055c:	4a11      	ldr	r2, [pc, #68]	; (80005a4 <main+0x60>)
 800055e:	2101      	movs	r1, #1
 8000560:	2001      	movs	r0, #1
 8000562:	f001 fff5 	bl	8002550 <osSemaphoreNew>
 8000566:	4603      	mov	r3, r0
 8000568:	4a0f      	ldr	r2, [pc, #60]	; (80005a8 <main+0x64>)
 800056a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800056c:	4a0f      	ldr	r2, [pc, #60]	; (80005ac <main+0x68>)
 800056e:	2100      	movs	r1, #0
 8000570:	480f      	ldr	r0, [pc, #60]	; (80005b0 <main+0x6c>)
 8000572:	f001 ff19 	bl	80023a8 <osThreadNew>
 8000576:	4603      	mov	r3, r0
 8000578:	4a0e      	ldr	r2, [pc, #56]	; (80005b4 <main+0x70>)
 800057a:	6013      	str	r3, [r2, #0]

  /* creation of taskBlu */
  taskBluHandle = osThreadNew(StartTaskBlu, NULL, &taskBlu_attributes);
 800057c:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <main+0x74>)
 800057e:	2100      	movs	r1, #0
 8000580:	480e      	ldr	r0, [pc, #56]	; (80005bc <main+0x78>)
 8000582:	f001 ff11 	bl	80023a8 <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a0d      	ldr	r2, [pc, #52]	; (80005c0 <main+0x7c>)
 800058a:	6013      	str	r3, [r2, #0]

  /* creation of taskRed */
  taskRedHandle = osThreadNew(StartTaskRed, NULL, &taskRed_attributes);
 800058c:	4a0d      	ldr	r2, [pc, #52]	; (80005c4 <main+0x80>)
 800058e:	2100      	movs	r1, #0
 8000590:	480d      	ldr	r0, [pc, #52]	; (80005c8 <main+0x84>)
 8000592:	f001 ff09 	bl	80023a8 <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a0c      	ldr	r2, [pc, #48]	; (80005cc <main+0x88>)
 800059a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800059c:	f001 fece 	bl	800233c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <main+0x5c>
 80005a2:	bf00      	nop
 80005a4:	08005cd0 	.word	0x08005cd0
 80005a8:	20000100 	.word	0x20000100
 80005ac:	08005c64 	.word	0x08005c64
 80005b0:	080007d5 	.word	0x080007d5
 80005b4:	200000f4 	.word	0x200000f4
 80005b8:	08005c88 	.word	0x08005c88
 80005bc:	080007e5 	.word	0x080007e5
 80005c0:	200000f8 	.word	0x200000f8
 80005c4:	08005cac 	.word	0x08005cac
 80005c8:	0800083d 	.word	0x0800083d
 80005cc:	200000fc 	.word	0x200000fc

080005d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b094      	sub	sp, #80	; 0x50
 80005d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d6:	f107 031c 	add.w	r3, r7, #28
 80005da:	2234      	movs	r2, #52	; 0x34
 80005dc:	2100      	movs	r1, #0
 80005de:	4618      	mov	r0, r3
 80005e0:	f005 fa48 	bl	8005a74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e4:	f107 0308 	add.w	r3, r7, #8
 80005e8:	2200      	movs	r2, #0
 80005ea:	601a      	str	r2, [r3, #0]
 80005ec:	605a      	str	r2, [r3, #4]
 80005ee:	609a      	str	r2, [r3, #8]
 80005f0:	60da      	str	r2, [r3, #12]
 80005f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f4:	4b2c      	ldr	r3, [pc, #176]	; (80006a8 <SystemClock_Config+0xd8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a2b      	ldr	r2, [pc, #172]	; (80006a8 <SystemClock_Config+0xd8>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b29      	ldr	r3, [pc, #164]	; (80006a8 <SystemClock_Config+0xd8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800060c:	4b27      	ldr	r3, [pc, #156]	; (80006ac <SystemClock_Config+0xdc>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000614:	4a25      	ldr	r2, [pc, #148]	; (80006ac <SystemClock_Config+0xdc>)
 8000616:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b23      	ldr	r3, [pc, #140]	; (80006ac <SystemClock_Config+0xdc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000624:	603b      	str	r3, [r7, #0]
 8000626:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000628:	2302      	movs	r3, #2
 800062a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000630:	2310      	movs	r3, #16
 8000632:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000634:	2302      	movs	r3, #2
 8000636:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000638:	2300      	movs	r3, #0
 800063a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800063c:	2308      	movs	r3, #8
 800063e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000640:	2360      	movs	r3, #96	; 0x60
 8000642:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000648:	2304      	movs	r3, #4
 800064a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800064c:	2302      	movs	r3, #2
 800064e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fdb9 	bl	80011cc <HAL_RCC_OscConfig>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000660:	f000 f92a 	bl	80008b8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000664:	f000 fd62 	bl	800112c <HAL_PWREx_EnableOverDrive>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800066e:	f000 f923 	bl	80008b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000672:	230f      	movs	r3, #15
 8000674:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000676:	2302      	movs	r3, #2
 8000678:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800067a:	2300      	movs	r3, #0
 800067c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000684:	2300      	movs	r3, #0
 8000686:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000688:	f107 0308 	add.w	r3, r7, #8
 800068c:	2103      	movs	r1, #3
 800068e:	4618      	mov	r0, r3
 8000690:	f001 f84a 	bl	8001728 <HAL_RCC_ClockConfig>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800069a:	f000 f90d 	bl	80008b8 <Error_Handler>
  }
}
 800069e:	bf00      	nop
 80006a0:	3750      	adds	r7, #80	; 0x50
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800
 80006ac:	40007000 	.word	0x40007000

080006b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80006b4:	4b19      	ldr	r3, [pc, #100]	; (800071c <MX_SPI1_Init+0x6c>)
 80006b6:	4a1a      	ldr	r2, [pc, #104]	; (8000720 <MX_SPI1_Init+0x70>)
 80006b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80006ba:	4b18      	ldr	r3, [pc, #96]	; (800071c <MX_SPI1_Init+0x6c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006c0:	4b16      	ldr	r3, [pc, #88]	; (800071c <MX_SPI1_Init+0x6c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80006c6:	4b15      	ldr	r3, [pc, #84]	; (800071c <MX_SPI1_Init+0x6c>)
 80006c8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80006cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006ce:	4b13      	ldr	r3, [pc, #76]	; (800071c <MX_SPI1_Init+0x6c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <MX_SPI1_Init+0x6c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006da:	4b10      	ldr	r3, [pc, #64]	; (800071c <MX_SPI1_Init+0x6c>)
 80006dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e2:	4b0e      	ldr	r3, [pc, #56]	; (800071c <MX_SPI1_Init+0x6c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e8:	4b0c      	ldr	r3, [pc, #48]	; (800071c <MX_SPI1_Init+0x6c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006ee:	4b0b      	ldr	r3, [pc, #44]	; (800071c <MX_SPI1_Init+0x6c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006f4:	4b09      	ldr	r3, [pc, #36]	; (800071c <MX_SPI1_Init+0x6c>)
 80006f6:	2207      	movs	r2, #7
 80006f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MX_SPI1_Init+0x6c>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MX_SPI1_Init+0x6c>)
 8000702:	2200      	movs	r2, #0
 8000704:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000706:	4805      	ldr	r0, [pc, #20]	; (800071c <MX_SPI1_Init+0x6c>)
 8000708:	f001 fa52 	bl	8001bb0 <HAL_SPI_Init>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000712:	f000 f8d1 	bl	80008b8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
 800071a:	bf00      	nop
 800071c:	20000090 	.word	0x20000090
 8000720:	40013000 	.word	0x40013000

08000724 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b08a      	sub	sp, #40	; 0x28
 8000728:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	2200      	movs	r2, #0
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	605a      	str	r2, [r3, #4]
 8000734:	609a      	str	r2, [r3, #8]
 8000736:	60da      	str	r2, [r3, #12]
 8000738:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800073a:	4b24      	ldr	r3, [pc, #144]	; (80007cc <MX_GPIO_Init+0xa8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073e:	4a23      	ldr	r2, [pc, #140]	; (80007cc <MX_GPIO_Init+0xa8>)
 8000740:	f043 0301 	orr.w	r3, r3, #1
 8000744:	6313      	str	r3, [r2, #48]	; 0x30
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_GPIO_Init+0xa8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074a:	f003 0301 	and.w	r3, r3, #1
 800074e:	613b      	str	r3, [r7, #16]
 8000750:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_GPIO_Init+0xa8>)
 8000754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000756:	4a1d      	ldr	r2, [pc, #116]	; (80007cc <MX_GPIO_Init+0xa8>)
 8000758:	f043 0302 	orr.w	r3, r3, #2
 800075c:	6313      	str	r3, [r2, #48]	; 0x30
 800075e:	4b1b      	ldr	r3, [pc, #108]	; (80007cc <MX_GPIO_Init+0xa8>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	f003 0302 	and.w	r3, r3, #2
 8000766:	60fb      	str	r3, [r7, #12]
 8000768:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <MX_GPIO_Init+0xa8>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a17      	ldr	r2, [pc, #92]	; (80007cc <MX_GPIO_Init+0xa8>)
 8000770:	f043 0308 	orr.w	r3, r3, #8
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_GPIO_Init+0xa8>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0308 	and.w	r3, r3, #8
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000782:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_GPIO_Init+0xa8>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a11      	ldr	r2, [pc, #68]	; (80007cc <MX_GPIO_Init+0xa8>)
 8000788:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_GPIO_Init+0xa8>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000796:	607b      	str	r3, [r7, #4]
 8000798:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	f244 0181 	movw	r1, #16513	; 0x4081
 80007a0:	480b      	ldr	r0, [pc, #44]	; (80007d0 <MX_GPIO_Init+0xac>)
 80007a2:	f000 fca9 	bl	80010f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14|GPIO_PIN_7;
 80007a6:	f244 0381 	movw	r3, #16513	; 0x4081
 80007aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	f107 0314 	add.w	r3, r7, #20
 80007bc:	4619      	mov	r1, r3
 80007be:	4804      	ldr	r0, [pc, #16]	; (80007d0 <MX_GPIO_Init+0xac>)
 80007c0:	f000 faee 	bl	8000da0 <HAL_GPIO_Init>

}
 80007c4:	bf00      	nop
 80007c6:	3728      	adds	r7, #40	; 0x28
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40023800 	.word	0x40023800
 80007d0:	40020400 	.word	0x40020400

080007d4 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 80007dc:	2001      	movs	r0, #1
 80007de:	f001 fe89 	bl	80024f4 <osDelay>
 80007e2:	e7fb      	b.n	80007dc <StartDefaultTask+0x8>

080007e4 <StartTaskBlu>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBlu */
void StartTaskBlu(void *argument)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBlu */
  /* Infinite loop */
  for(;;)
  {
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);		//Switch off Red LED
 80007ec:	2200      	movs	r2, #0
 80007ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007f2:	4810      	ldr	r0, [pc, #64]	; (8000834 <StartTaskBlu+0x50>)
 80007f4:	f000 fc80 	bl	80010f8 <HAL_GPIO_WritePin>
	//osDelay(1);
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);			//Switch ON  blu LED to indicate active task
 80007f8:	2201      	movs	r2, #1
 80007fa:	2180      	movs	r1, #128	; 0x80
 80007fc:	480d      	ldr	r0, [pc, #52]	; (8000834 <StartTaskBlu+0x50>)
 80007fe:	f000 fc7b 	bl	80010f8 <HAL_GPIO_WritePin>




	if( blinkSemaphoreHandle != NULL )
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <StartTaskBlu+0x54>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b00      	cmp	r3, #0
 8000808:	d0f0      	beq.n	80007ec <StartTaskBlu+0x8>
			    {
			        /* See if we can obtain the semaphore.  If the semaphore is not
			        available wait 10 ticks to see if it becomes free. */
			        if( osSemaphoreAcquire( blinkSemaphoreHandle, 10) == osOK )
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <StartTaskBlu+0x54>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	210a      	movs	r1, #10
 8000810:	4618      	mov	r0, r3
 8000812:	f001 ff39 	bl	8002688 <osSemaphoreAcquire>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d1e7      	bne.n	80007ec <StartTaskBlu+0x8>
			        {
			            /* We were able to obtain the semaphore and can now access the
			            shared resource. */

			        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);	//SEMAPHORE LED off
 800081c:	2200      	movs	r2, #0
 800081e:	2101      	movs	r1, #1
 8000820:	4804      	ldr	r0, [pc, #16]	; (8000834 <StartTaskBlu+0x50>)
 8000822:	f000 fc69 	bl	80010f8 <HAL_GPIO_WritePin>

			            /* We have finished accessing the shared resource.  Release the
			            semaphore. */
			        	osSemaphoreRelease( blinkSemaphoreHandle );
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <StartTaskBlu+0x54>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4618      	mov	r0, r3
 800082c:	f001 ff92 	bl	8002754 <osSemaphoreRelease>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);		//Switch off Red LED
 8000830:	e7dc      	b.n	80007ec <StartTaskBlu+0x8>
 8000832:	bf00      	nop
 8000834:	40020400 	.word	0x40020400
 8000838:	20000100 	.word	0x20000100

0800083c <StartTaskRed>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskRed */
void StartTaskRed(void *argument)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskRed */
  /* Infinite loop */
  for(;;)
  {
	  //osDelay(1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);		//Switch ON  Red LED to indicate active task
 8000844:	2201      	movs	r2, #1
 8000846:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800084a:	4810      	ldr	r0, [pc, #64]	; (800088c <StartTaskRed+0x50>)
 800084c:	f000 fc54 	bl	80010f8 <HAL_GPIO_WritePin>
		//osDelay(1);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);		//Switch off blu LED
 8000850:	2200      	movs	r2, #0
 8000852:	2180      	movs	r1, #128	; 0x80
 8000854:	480d      	ldr	r0, [pc, #52]	; (800088c <StartTaskRed+0x50>)
 8000856:	f000 fc4f 	bl	80010f8 <HAL_GPIO_WritePin>


		if( blinkSemaphoreHandle != NULL )
 800085a:	4b0d      	ldr	r3, [pc, #52]	; (8000890 <StartTaskRed+0x54>)
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	2b00      	cmp	r3, #0
 8000860:	d0f0      	beq.n	8000844 <StartTaskRed+0x8>
		    {
		        /* See if we can obtain the semaphore.  If the semaphore is not
		        available wait 10 ticks to see if it becomes free. */
		        if( osSemaphoreAcquire( blinkSemaphoreHandle, 10) == osOK )
 8000862:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <StartTaskRed+0x54>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	210a      	movs	r1, #10
 8000868:	4618      	mov	r0, r3
 800086a:	f001 ff0d 	bl	8002688 <osSemaphoreAcquire>
 800086e:	4603      	mov	r3, r0
 8000870:	2b00      	cmp	r3, #0
 8000872:	d1e7      	bne.n	8000844 <StartTaskRed+0x8>
		        {
		            /* We were able to obtain the semaphore and can now access the
		            shared resource. */

		        	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_SET);	//SEMAPHORE LED on
 8000874:	2201      	movs	r2, #1
 8000876:	2101      	movs	r1, #1
 8000878:	4804      	ldr	r0, [pc, #16]	; (800088c <StartTaskRed+0x50>)
 800087a:	f000 fc3d 	bl	80010f8 <HAL_GPIO_WritePin>

		            /* We have finished accessing the shared resource.  Release the
		            semaphore. */
		        	osSemaphoreRelease( blinkSemaphoreHandle );
 800087e:	4b04      	ldr	r3, [pc, #16]	; (8000890 <StartTaskRed+0x54>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f001 ff66 	bl	8002754 <osSemaphoreRelease>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_SET);		//Switch ON  Red LED to indicate active task
 8000888:	e7dc      	b.n	8000844 <StartTaskRed+0x8>
 800088a:	bf00      	nop
 800088c:	40020400 	.word	0x40020400
 8000890:	20000100 	.word	0x20000100

08000894 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4a04      	ldr	r2, [pc, #16]	; (80008b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d101      	bne.n	80008aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008a6:	f000 f979 	bl	8000b9c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40001000 	.word	0x40001000

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008bc:	b672      	cpsid	i
}
 80008be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <Error_Handler+0x8>
	...

080008c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <HAL_MspInit+0x4c>)
 80008cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ce:	4a10      	ldr	r2, [pc, #64]	; (8000910 <HAL_MspInit+0x4c>)
 80008d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d4:	6413      	str	r3, [r2, #64]	; 0x40
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <HAL_MspInit+0x4c>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e2:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <HAL_MspInit+0x4c>)
 80008e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e6:	4a0a      	ldr	r2, [pc, #40]	; (8000910 <HAL_MspInit+0x4c>)
 80008e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ec:	6453      	str	r3, [r2, #68]	; 0x44
 80008ee:	4b08      	ldr	r3, [pc, #32]	; (8000910 <HAL_MspInit+0x4c>)
 80008f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008f6:	603b      	str	r3, [r7, #0]
 80008f8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	210f      	movs	r1, #15
 80008fe:	f06f 0001 	mvn.w	r0, #1
 8000902:	f000 fa23 	bl	8000d4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40023800 	.word	0x40023800

08000914 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a25      	ldr	r2, [pc, #148]	; (80009c8 <HAL_SPI_MspInit+0xb4>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d144      	bne.n	80009c0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000936:	4b25      	ldr	r3, [pc, #148]	; (80009cc <HAL_SPI_MspInit+0xb8>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800093a:	4a24      	ldr	r2, [pc, #144]	; (80009cc <HAL_SPI_MspInit+0xb8>)
 800093c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000940:	6453      	str	r3, [r2, #68]	; 0x44
 8000942:	4b22      	ldr	r3, [pc, #136]	; (80009cc <HAL_SPI_MspInit+0xb8>)
 8000944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000946:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800094a:	613b      	str	r3, [r7, #16]
 800094c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800094e:	4b1f      	ldr	r3, [pc, #124]	; (80009cc <HAL_SPI_MspInit+0xb8>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a1e      	ldr	r2, [pc, #120]	; (80009cc <HAL_SPI_MspInit+0xb8>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b1c      	ldr	r3, [pc, #112]	; (80009cc <HAL_SPI_MspInit+0xb8>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000966:	4b19      	ldr	r3, [pc, #100]	; (80009cc <HAL_SPI_MspInit+0xb8>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	4a18      	ldr	r2, [pc, #96]	; (80009cc <HAL_SPI_MspInit+0xb8>)
 800096c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000970:	6313      	str	r3, [r2, #48]	; 0x30
 8000972:	4b16      	ldr	r3, [pc, #88]	; (80009cc <HAL_SPI_MspInit+0xb8>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800097a:	60bb      	str	r3, [r7, #8]
 800097c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    PG11     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800097e:	2380      	movs	r3, #128	; 0x80
 8000980:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000982:	2302      	movs	r3, #2
 8000984:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000986:	2300      	movs	r3, #0
 8000988:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800098a:	2303      	movs	r3, #3
 800098c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800098e:	2305      	movs	r3, #5
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	480d      	ldr	r0, [pc, #52]	; (80009d0 <HAL_SPI_MspInit+0xbc>)
 800099a:	f000 fa01 	bl	8000da0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800099e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80009a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a4:	2302      	movs	r3, #2
 80009a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ac:	2303      	movs	r3, #3
 80009ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80009b0:	2305      	movs	r3, #5
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009b4:	f107 0314 	add.w	r3, r7, #20
 80009b8:	4619      	mov	r1, r3
 80009ba:	4806      	ldr	r0, [pc, #24]	; (80009d4 <HAL_SPI_MspInit+0xc0>)
 80009bc:	f000 f9f0 	bl	8000da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009c0:	bf00      	nop
 80009c2:	3728      	adds	r7, #40	; 0x28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	40013000 	.word	0x40013000
 80009cc:	40023800 	.word	0x40023800
 80009d0:	40020c00 	.word	0x40020c00
 80009d4:	40021800 	.word	0x40021800

080009d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b08e      	sub	sp, #56	; 0x38
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009e0:	2300      	movs	r3, #0
 80009e2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009e4:	2300      	movs	r3, #0
 80009e6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009e8:	4b33      	ldr	r3, [pc, #204]	; (8000ab8 <HAL_InitTick+0xe0>)
 80009ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ec:	4a32      	ldr	r2, [pc, #200]	; (8000ab8 <HAL_InitTick+0xe0>)
 80009ee:	f043 0310 	orr.w	r3, r3, #16
 80009f2:	6413      	str	r3, [r2, #64]	; 0x40
 80009f4:	4b30      	ldr	r3, [pc, #192]	; (8000ab8 <HAL_InitTick+0xe0>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f8:	f003 0310 	and.w	r3, r3, #16
 80009fc:	60fb      	str	r3, [r7, #12]
 80009fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000a00:	f107 0210 	add.w	r2, r7, #16
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4611      	mov	r1, r2
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f001 f89e 	bl	8001b4c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a10:	6a3b      	ldr	r3, [r7, #32]
 8000a12:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d103      	bne.n	8000a22 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a1a:	f001 f883 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
 8000a1e:	6378      	str	r0, [r7, #52]	; 0x34
 8000a20:	e004      	b.n	8000a2c <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a22:	f001 f87f 	bl	8001b24 <HAL_RCC_GetPCLK1Freq>
 8000a26:	4603      	mov	r3, r0
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a2e:	4a23      	ldr	r2, [pc, #140]	; (8000abc <HAL_InitTick+0xe4>)
 8000a30:	fba2 2303 	umull	r2, r3, r2, r3
 8000a34:	0c9b      	lsrs	r3, r3, #18
 8000a36:	3b01      	subs	r3, #1
 8000a38:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a3a:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <HAL_InitTick+0xe8>)
 8000a3c:	4a21      	ldr	r2, [pc, #132]	; (8000ac4 <HAL_InitTick+0xec>)
 8000a3e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a40:	4b1f      	ldr	r3, [pc, #124]	; (8000ac0 <HAL_InitTick+0xe8>)
 8000a42:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a46:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a48:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <HAL_InitTick+0xe8>)
 8000a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a4c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a4e:	4b1c      	ldr	r3, [pc, #112]	; (8000ac0 <HAL_InitTick+0xe8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a54:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <HAL_InitTick+0xe8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a5a:	4b19      	ldr	r3, [pc, #100]	; (8000ac0 <HAL_InitTick+0xe8>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a60:	4817      	ldr	r0, [pc, #92]	; (8000ac0 <HAL_InitTick+0xe8>)
 8000a62:	f001 f950 	bl	8001d06 <HAL_TIM_Base_Init>
 8000a66:	4603      	mov	r3, r0
 8000a68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d11b      	bne.n	8000aac <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a74:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <HAL_InitTick+0xe8>)
 8000a76:	f001 f9a7 	bl	8001dc8 <HAL_TIM_Base_Start_IT>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a80:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d111      	bne.n	8000aac <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a88:	2036      	movs	r0, #54	; 0x36
 8000a8a:	f000 f97b 	bl	8000d84 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	2b0f      	cmp	r3, #15
 8000a92:	d808      	bhi.n	8000aa6 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a94:	2200      	movs	r2, #0
 8000a96:	6879      	ldr	r1, [r7, #4]
 8000a98:	2036      	movs	r0, #54	; 0x36
 8000a9a:	f000 f957 	bl	8000d4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a9e:	4a0a      	ldr	r2, [pc, #40]	; (8000ac8 <HAL_InitTick+0xf0>)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	e002      	b.n	8000aac <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000aac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3738      	adds	r7, #56	; 0x38
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	431bde83 	.word	0x431bde83
 8000ac0:	20000104 	.word	0x20000104
 8000ac4:	40001000 	.word	0x40001000
 8000ac8:	20000004 	.word	0x20000004

08000acc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <NMI_Handler+0x4>

08000ad2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad6:	e7fe      	b.n	8000ad6 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	e7fe      	b.n	8000adc <MemManage_Handler+0x4>

08000ade <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <BusFault_Handler+0x4>

08000ae4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ae8:	e7fe      	b.n	8000ae8 <UsageFault_Handler+0x4>

08000aea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aea:	b480      	push	{r7}
 8000aec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aee:	bf00      	nop
 8000af0:	46bd      	mov	sp, r7
 8000af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af6:	4770      	bx	lr

08000af8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000afc:	4802      	ldr	r0, [pc, #8]	; (8000b08 <TIM6_DAC_IRQHandler+0x10>)
 8000afe:	f001 f9db 	bl	8001eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b02:	bf00      	nop
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000104 	.word	0x20000104

08000b0c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b10:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <SystemInit+0x20>)
 8000b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b16:	4a05      	ldr	r2, [pc, #20]	; (8000b2c <SystemInit+0x20>)
 8000b18:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b1c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b34:	480d      	ldr	r0, [pc, #52]	; (8000b6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b36:	490e      	ldr	r1, [pc, #56]	; (8000b70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b38:	4a0e      	ldr	r2, [pc, #56]	; (8000b74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b3c:	e002      	b.n	8000b44 <LoopCopyDataInit>

08000b3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b42:	3304      	adds	r3, #4

08000b44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b48:	d3f9      	bcc.n	8000b3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b4a:	4a0b      	ldr	r2, [pc, #44]	; (8000b78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b4c:	4c0b      	ldr	r4, [pc, #44]	; (8000b7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b50:	e001      	b.n	8000b56 <LoopFillZerobss>

08000b52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b54:	3204      	adds	r2, #4

08000b56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b58:	d3fb      	bcc.n	8000b52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b5a:	f7ff ffd7 	bl	8000b0c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b5e:	f004 ff55 	bl	8005a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b62:	f7ff fcef 	bl	8000544 <main>
  bx  lr    
 8000b66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b68:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000b6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b70:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000b74:	08005d68 	.word	0x08005d68
  ldr r2, =_sbss
 8000b78:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000b7c:	20004b64 	.word	0x20004b64

08000b80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b80:	e7fe      	b.n	8000b80 <ADC_IRQHandler>

08000b82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b82:	b580      	push	{r7, lr}
 8000b84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b86:	2003      	movs	r0, #3
 8000b88:	f000 f8d5 	bl	8000d36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8c:	200f      	movs	r0, #15
 8000b8e:	f7ff ff23 	bl	80009d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b92:	f7ff fe97 	bl	80008c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b96:	2300      	movs	r3, #0
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	20000150 	.word	0x20000150

08000bc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bc8:	4b03      	ldr	r3, [pc, #12]	; (8000bd8 <HAL_GetTick+0x14>)
 8000bca:	681b      	ldr	r3, [r3, #0]
}
 8000bcc:	4618      	mov	r0, r3
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	20000150 	.word	0x20000150

08000bdc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	f003 0307 	and.w	r3, r3, #7
 8000bea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bec:	4b0b      	ldr	r3, [pc, #44]	; (8000c1c <__NVIC_SetPriorityGrouping+0x40>)
 8000bee:	68db      	ldr	r3, [r3, #12]
 8000bf0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bf2:	68ba      	ldr	r2, [r7, #8]
 8000bf4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c00:	68bb      	ldr	r3, [r7, #8]
 8000c02:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <__NVIC_SetPriorityGrouping+0x44>)
 8000c06:	4313      	orrs	r3, r2
 8000c08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c0a:	4a04      	ldr	r2, [pc, #16]	; (8000c1c <__NVIC_SetPriorityGrouping+0x40>)
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	60d3      	str	r3, [r2, #12]
}
 8000c10:	bf00      	nop
 8000c12:	3714      	adds	r7, #20
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000ed00 	.word	0xe000ed00
 8000c20:	05fa0000 	.word	0x05fa0000

08000c24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c28:	4b04      	ldr	r3, [pc, #16]	; (8000c3c <__NVIC_GetPriorityGrouping+0x18>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	0a1b      	lsrs	r3, r3, #8
 8000c2e:	f003 0307 	and.w	r3, r3, #7
}
 8000c32:	4618      	mov	r0, r3
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	db0b      	blt.n	8000c6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	f003 021f 	and.w	r2, r3, #31
 8000c58:	4907      	ldr	r1, [pc, #28]	; (8000c78 <__NVIC_EnableIRQ+0x38>)
 8000c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	2001      	movs	r0, #1
 8000c62:	fa00 f202 	lsl.w	r2, r0, r2
 8000c66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	370c      	adds	r7, #12
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop
 8000c78:	e000e100 	.word	0xe000e100

08000c7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b083      	sub	sp, #12
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	4603      	mov	r3, r0
 8000c84:	6039      	str	r1, [r7, #0]
 8000c86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	db0a      	blt.n	8000ca6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	b2da      	uxtb	r2, r3
 8000c94:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <__NVIC_SetPriority+0x4c>)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	0112      	lsls	r2, r2, #4
 8000c9c:	b2d2      	uxtb	r2, r2
 8000c9e:	440b      	add	r3, r1
 8000ca0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ca4:	e00a      	b.n	8000cbc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	b2da      	uxtb	r2, r3
 8000caa:	4908      	ldr	r1, [pc, #32]	; (8000ccc <__NVIC_SetPriority+0x50>)
 8000cac:	79fb      	ldrb	r3, [r7, #7]
 8000cae:	f003 030f 	and.w	r3, r3, #15
 8000cb2:	3b04      	subs	r3, #4
 8000cb4:	0112      	lsls	r2, r2, #4
 8000cb6:	b2d2      	uxtb	r2, r2
 8000cb8:	440b      	add	r3, r1
 8000cba:	761a      	strb	r2, [r3, #24]
}
 8000cbc:	bf00      	nop
 8000cbe:	370c      	adds	r7, #12
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr
 8000cc8:	e000e100 	.word	0xe000e100
 8000ccc:	e000ed00 	.word	0xe000ed00

08000cd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b089      	sub	sp, #36	; 0x24
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	60f8      	str	r0, [r7, #12]
 8000cd8:	60b9      	str	r1, [r7, #8]
 8000cda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cdc:	68fb      	ldr	r3, [r7, #12]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ce4:	69fb      	ldr	r3, [r7, #28]
 8000ce6:	f1c3 0307 	rsb	r3, r3, #7
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	bf28      	it	cs
 8000cee:	2304      	movcs	r3, #4
 8000cf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	2b06      	cmp	r3, #6
 8000cf8:	d902      	bls.n	8000d00 <NVIC_EncodePriority+0x30>
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	3b03      	subs	r3, #3
 8000cfe:	e000      	b.n	8000d02 <NVIC_EncodePriority+0x32>
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d04:	f04f 32ff 	mov.w	r2, #4294967295
 8000d08:	69bb      	ldr	r3, [r7, #24]
 8000d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0e:	43da      	mvns	r2, r3
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	401a      	ands	r2, r3
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d18:	f04f 31ff 	mov.w	r1, #4294967295
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d22:	43d9      	mvns	r1, r3
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d28:	4313      	orrs	r3, r2
         );
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	3724      	adds	r7, #36	; 0x24
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d3e:	6878      	ldr	r0, [r7, #4]
 8000d40:	f7ff ff4c 	bl	8000bdc <__NVIC_SetPriorityGrouping>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	4603      	mov	r3, r0
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d5e:	f7ff ff61 	bl	8000c24 <__NVIC_GetPriorityGrouping>
 8000d62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d64:	687a      	ldr	r2, [r7, #4]
 8000d66:	68b9      	ldr	r1, [r7, #8]
 8000d68:	6978      	ldr	r0, [r7, #20]
 8000d6a:	f7ff ffb1 	bl	8000cd0 <NVIC_EncodePriority>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d74:	4611      	mov	r1, r2
 8000d76:	4618      	mov	r0, r3
 8000d78:	f7ff ff80 	bl	8000c7c <__NVIC_SetPriority>
}
 8000d7c:	bf00      	nop
 8000d7e:	3718      	adds	r7, #24
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f7ff ff54 	bl	8000c40 <__NVIC_EnableIRQ>
}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b089      	sub	sp, #36	; 0x24
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000daa:	2300      	movs	r3, #0
 8000dac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
 8000dbe:	e175      	b.n	80010ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	697a      	ldr	r2, [r7, #20]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	f040 8164 	bne.w	80010a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f003 0303 	and.w	r3, r3, #3
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d005      	beq.n	8000df6 <HAL_GPIO_Init+0x56>
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f003 0303 	and.w	r3, r3, #3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d130      	bne.n	8000e58 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	2203      	movs	r2, #3
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43db      	mvns	r3, r3
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	68da      	ldr	r2, [r3, #12]
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	685b      	ldr	r3, [r3, #4]
 8000e40:	091b      	lsrs	r3, r3, #4
 8000e42:	f003 0201 	and.w	r2, r3, #1
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	2b03      	cmp	r3, #3
 8000e62:	d017      	beq.n	8000e94 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	68db      	ldr	r3, [r3, #12]
 8000e68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	005b      	lsls	r3, r3, #1
 8000e6e:	2203      	movs	r2, #3
 8000e70:	fa02 f303 	lsl.w	r3, r2, r3
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	69fb      	ldr	r3, [r7, #28]
 8000e82:	005b      	lsls	r3, r3, #1
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f003 0303 	and.w	r3, r3, #3
 8000e9c:	2b02      	cmp	r3, #2
 8000e9e:	d123      	bne.n	8000ee8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	08da      	lsrs	r2, r3, #3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3208      	adds	r2, #8
 8000ea8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	f003 0307 	and.w	r3, r3, #7
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	220f      	movs	r2, #15
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	691a      	ldr	r2, [r3, #16]
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	f003 0307 	and.w	r3, r3, #7
 8000ece:	009b      	lsls	r3, r3, #2
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000eda:	69fb      	ldr	r3, [r7, #28]
 8000edc:	08da      	lsrs	r2, r3, #3
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3208      	adds	r2, #8
 8000ee2:	69b9      	ldr	r1, [r7, #24]
 8000ee4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	69ba      	ldr	r2, [r7, #24]
 8000efc:	4013      	ands	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0203 	and.w	r2, r3, #3
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	005b      	lsls	r3, r3, #1
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4313      	orrs	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	69ba      	ldr	r2, [r7, #24]
 8000f1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	685b      	ldr	r3, [r3, #4]
 8000f20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f000 80be 	beq.w	80010a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f2a:	4b66      	ldr	r3, [pc, #408]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f2e:	4a65      	ldr	r2, [pc, #404]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8000f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f34:	6453      	str	r3, [r2, #68]	; 0x44
 8000f36:	4b63      	ldr	r3, [pc, #396]	; (80010c4 <HAL_GPIO_Init+0x324>)
 8000f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f42:	4a61      	ldr	r2, [pc, #388]	; (80010c8 <HAL_GPIO_Init+0x328>)
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	089b      	lsrs	r3, r3, #2
 8000f48:	3302      	adds	r3, #2
 8000f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f50:	69fb      	ldr	r3, [r7, #28]
 8000f52:	f003 0303 	and.w	r3, r3, #3
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	220f      	movs	r2, #15
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4013      	ands	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a58      	ldr	r2, [pc, #352]	; (80010cc <HAL_GPIO_Init+0x32c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d037      	beq.n	8000fde <HAL_GPIO_Init+0x23e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a57      	ldr	r2, [pc, #348]	; (80010d0 <HAL_GPIO_Init+0x330>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d031      	beq.n	8000fda <HAL_GPIO_Init+0x23a>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	4a56      	ldr	r2, [pc, #344]	; (80010d4 <HAL_GPIO_Init+0x334>)
 8000f7a:	4293      	cmp	r3, r2
 8000f7c:	d02b      	beq.n	8000fd6 <HAL_GPIO_Init+0x236>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4a55      	ldr	r2, [pc, #340]	; (80010d8 <HAL_GPIO_Init+0x338>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d025      	beq.n	8000fd2 <HAL_GPIO_Init+0x232>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	4a54      	ldr	r2, [pc, #336]	; (80010dc <HAL_GPIO_Init+0x33c>)
 8000f8a:	4293      	cmp	r3, r2
 8000f8c:	d01f      	beq.n	8000fce <HAL_GPIO_Init+0x22e>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	4a53      	ldr	r2, [pc, #332]	; (80010e0 <HAL_GPIO_Init+0x340>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d019      	beq.n	8000fca <HAL_GPIO_Init+0x22a>
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4a52      	ldr	r2, [pc, #328]	; (80010e4 <HAL_GPIO_Init+0x344>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d013      	beq.n	8000fc6 <HAL_GPIO_Init+0x226>
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a51      	ldr	r2, [pc, #324]	; (80010e8 <HAL_GPIO_Init+0x348>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d00d      	beq.n	8000fc2 <HAL_GPIO_Init+0x222>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a50      	ldr	r2, [pc, #320]	; (80010ec <HAL_GPIO_Init+0x34c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d007      	beq.n	8000fbe <HAL_GPIO_Init+0x21e>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a4f      	ldr	r2, [pc, #316]	; (80010f0 <HAL_GPIO_Init+0x350>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d101      	bne.n	8000fba <HAL_GPIO_Init+0x21a>
 8000fb6:	2309      	movs	r3, #9
 8000fb8:	e012      	b.n	8000fe0 <HAL_GPIO_Init+0x240>
 8000fba:	230a      	movs	r3, #10
 8000fbc:	e010      	b.n	8000fe0 <HAL_GPIO_Init+0x240>
 8000fbe:	2308      	movs	r3, #8
 8000fc0:	e00e      	b.n	8000fe0 <HAL_GPIO_Init+0x240>
 8000fc2:	2307      	movs	r3, #7
 8000fc4:	e00c      	b.n	8000fe0 <HAL_GPIO_Init+0x240>
 8000fc6:	2306      	movs	r3, #6
 8000fc8:	e00a      	b.n	8000fe0 <HAL_GPIO_Init+0x240>
 8000fca:	2305      	movs	r3, #5
 8000fcc:	e008      	b.n	8000fe0 <HAL_GPIO_Init+0x240>
 8000fce:	2304      	movs	r3, #4
 8000fd0:	e006      	b.n	8000fe0 <HAL_GPIO_Init+0x240>
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e004      	b.n	8000fe0 <HAL_GPIO_Init+0x240>
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	e002      	b.n	8000fe0 <HAL_GPIO_Init+0x240>
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e000      	b.n	8000fe0 <HAL_GPIO_Init+0x240>
 8000fde:	2300      	movs	r3, #0
 8000fe0:	69fa      	ldr	r2, [r7, #28]
 8000fe2:	f002 0203 	and.w	r2, r2, #3
 8000fe6:	0092      	lsls	r2, r2, #2
 8000fe8:	4093      	lsls	r3, r2
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4313      	orrs	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000ff0:	4935      	ldr	r1, [pc, #212]	; (80010c8 <HAL_GPIO_Init+0x328>)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	089b      	lsrs	r3, r3, #2
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	69ba      	ldr	r2, [r7, #24]
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffe:	4b3d      	ldr	r3, [pc, #244]	; (80010f4 <HAL_GPIO_Init+0x354>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	43db      	mvns	r3, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4013      	ands	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001016:	2b00      	cmp	r3, #0
 8001018:	d003      	beq.n	8001022 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800101a:	69ba      	ldr	r2, [r7, #24]
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001022:	4a34      	ldr	r2, [pc, #208]	; (80010f4 <HAL_GPIO_Init+0x354>)
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001028:	4b32      	ldr	r3, [pc, #200]	; (80010f4 <HAL_GPIO_Init+0x354>)
 800102a:	68db      	ldr	r3, [r3, #12]
 800102c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	685b      	ldr	r3, [r3, #4]
 800103c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001040:	2b00      	cmp	r3, #0
 8001042:	d003      	beq.n	800104c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800104c:	4a29      	ldr	r2, [pc, #164]	; (80010f4 <HAL_GPIO_Init+0x354>)
 800104e:	69bb      	ldr	r3, [r7, #24]
 8001050:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001052:	4b28      	ldr	r3, [pc, #160]	; (80010f4 <HAL_GPIO_Init+0x354>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	43db      	mvns	r3, r3
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	4013      	ands	r3, r2
 8001060:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800106a:	2b00      	cmp	r3, #0
 800106c:	d003      	beq.n	8001076 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	4313      	orrs	r3, r2
 8001074:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001076:	4a1f      	ldr	r2, [pc, #124]	; (80010f4 <HAL_GPIO_Init+0x354>)
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800107c:	4b1d      	ldr	r3, [pc, #116]	; (80010f4 <HAL_GPIO_Init+0x354>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	43db      	mvns	r3, r3
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	4013      	ands	r3, r2
 800108a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001098:	69ba      	ldr	r2, [r7, #24]
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	4313      	orrs	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010a0:	4a14      	ldr	r2, [pc, #80]	; (80010f4 <HAL_GPIO_Init+0x354>)
 80010a2:	69bb      	ldr	r3, [r7, #24]
 80010a4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	3301      	adds	r3, #1
 80010aa:	61fb      	str	r3, [r7, #28]
 80010ac:	69fb      	ldr	r3, [r7, #28]
 80010ae:	2b0f      	cmp	r3, #15
 80010b0:	f67f ae86 	bls.w	8000dc0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80010b4:	bf00      	nop
 80010b6:	bf00      	nop
 80010b8:	3724      	adds	r7, #36	; 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800
 80010c8:	40013800 	.word	0x40013800
 80010cc:	40020000 	.word	0x40020000
 80010d0:	40020400 	.word	0x40020400
 80010d4:	40020800 	.word	0x40020800
 80010d8:	40020c00 	.word	0x40020c00
 80010dc:	40021000 	.word	0x40021000
 80010e0:	40021400 	.word	0x40021400
 80010e4:	40021800 	.word	0x40021800
 80010e8:	40021c00 	.word	0x40021c00
 80010ec:	40022000 	.word	0x40022000
 80010f0:	40022400 	.word	0x40022400
 80010f4:	40013c00 	.word	0x40013c00

080010f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]
 8001100:	460b      	mov	r3, r1
 8001102:	807b      	strh	r3, [r7, #2]
 8001104:	4613      	mov	r3, r2
 8001106:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001108:	787b      	ldrb	r3, [r7, #1]
 800110a:	2b00      	cmp	r3, #0
 800110c:	d003      	beq.n	8001116 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800110e:	887a      	ldrh	r2, [r7, #2]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001114:	e003      	b.n	800111e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001116:	887b      	ldrh	r3, [r7, #2]
 8001118:	041a      	lsls	r2, r3, #16
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	619a      	str	r2, [r3, #24]
}
 800111e:	bf00      	nop
 8001120:	370c      	adds	r7, #12
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
	...

0800112c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	4a22      	ldr	r2, [pc, #136]	; (80011c4 <HAL_PWREx_EnableOverDrive+0x98>)
 800113c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001140:	6413      	str	r3, [r2, #64]	; 0x40
 8001142:	4b20      	ldr	r3, [pc, #128]	; (80011c4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800114a:	603b      	str	r3, [r7, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800114e:	4b1e      	ldr	r3, [pc, #120]	; (80011c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a1d      	ldr	r2, [pc, #116]	; (80011c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001158:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800115a:	f7ff fd33 	bl	8000bc4 <HAL_GetTick>
 800115e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001160:	e009      	b.n	8001176 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001162:	f7ff fd2f 	bl	8000bc4 <HAL_GetTick>
 8001166:	4602      	mov	r2, r0
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	1ad3      	subs	r3, r2, r3
 800116c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001170:	d901      	bls.n	8001176 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e022      	b.n	80011bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001176:	4b14      	ldr	r3, [pc, #80]	; (80011c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800117e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001182:	d1ee      	bne.n	8001162 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001184:	4b10      	ldr	r3, [pc, #64]	; (80011c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a0f      	ldr	r2, [pc, #60]	; (80011c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800118a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800118e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001190:	f7ff fd18 	bl	8000bc4 <HAL_GetTick>
 8001194:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001196:	e009      	b.n	80011ac <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001198:	f7ff fd14 	bl	8000bc4 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011a6:	d901      	bls.n	80011ac <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80011a8:	2303      	movs	r3, #3
 80011aa:	e007      	b.n	80011bc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80011ac:	4b06      	ldr	r3, [pc, #24]	; (80011c8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011b8:	d1ee      	bne.n	8001198 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80011ba:	2300      	movs	r3, #0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40023800 	.word	0x40023800
 80011c8:	40007000 	.word	0x40007000

080011cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80011d4:	2300      	movs	r3, #0
 80011d6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d101      	bne.n	80011e2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e29b      	b.n	800171a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f003 0301 	and.w	r3, r3, #1
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	f000 8087 	beq.w	80012fe <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80011f0:	4b96      	ldr	r3, [pc, #600]	; (800144c <HAL_RCC_OscConfig+0x280>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	f003 030c 	and.w	r3, r3, #12
 80011f8:	2b04      	cmp	r3, #4
 80011fa:	d00c      	beq.n	8001216 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011fc:	4b93      	ldr	r3, [pc, #588]	; (800144c <HAL_RCC_OscConfig+0x280>)
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 030c 	and.w	r3, r3, #12
 8001204:	2b08      	cmp	r3, #8
 8001206:	d112      	bne.n	800122e <HAL_RCC_OscConfig+0x62>
 8001208:	4b90      	ldr	r3, [pc, #576]	; (800144c <HAL_RCC_OscConfig+0x280>)
 800120a:	685b      	ldr	r3, [r3, #4]
 800120c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001214:	d10b      	bne.n	800122e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001216:	4b8d      	ldr	r3, [pc, #564]	; (800144c <HAL_RCC_OscConfig+0x280>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121e:	2b00      	cmp	r3, #0
 8001220:	d06c      	beq.n	80012fc <HAL_RCC_OscConfig+0x130>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d168      	bne.n	80012fc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e275      	b.n	800171a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	685b      	ldr	r3, [r3, #4]
 8001232:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001236:	d106      	bne.n	8001246 <HAL_RCC_OscConfig+0x7a>
 8001238:	4b84      	ldr	r3, [pc, #528]	; (800144c <HAL_RCC_OscConfig+0x280>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a83      	ldr	r2, [pc, #524]	; (800144c <HAL_RCC_OscConfig+0x280>)
 800123e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001242:	6013      	str	r3, [r2, #0]
 8001244:	e02e      	b.n	80012a4 <HAL_RCC_OscConfig+0xd8>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10c      	bne.n	8001268 <HAL_RCC_OscConfig+0x9c>
 800124e:	4b7f      	ldr	r3, [pc, #508]	; (800144c <HAL_RCC_OscConfig+0x280>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a7e      	ldr	r2, [pc, #504]	; (800144c <HAL_RCC_OscConfig+0x280>)
 8001254:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b7c      	ldr	r3, [pc, #496]	; (800144c <HAL_RCC_OscConfig+0x280>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a7b      	ldr	r2, [pc, #492]	; (800144c <HAL_RCC_OscConfig+0x280>)
 8001260:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e01d      	b.n	80012a4 <HAL_RCC_OscConfig+0xd8>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001270:	d10c      	bne.n	800128c <HAL_RCC_OscConfig+0xc0>
 8001272:	4b76      	ldr	r3, [pc, #472]	; (800144c <HAL_RCC_OscConfig+0x280>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a75      	ldr	r2, [pc, #468]	; (800144c <HAL_RCC_OscConfig+0x280>)
 8001278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	4b73      	ldr	r3, [pc, #460]	; (800144c <HAL_RCC_OscConfig+0x280>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4a72      	ldr	r2, [pc, #456]	; (800144c <HAL_RCC_OscConfig+0x280>)
 8001284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001288:	6013      	str	r3, [r2, #0]
 800128a:	e00b      	b.n	80012a4 <HAL_RCC_OscConfig+0xd8>
 800128c:	4b6f      	ldr	r3, [pc, #444]	; (800144c <HAL_RCC_OscConfig+0x280>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	4a6e      	ldr	r2, [pc, #440]	; (800144c <HAL_RCC_OscConfig+0x280>)
 8001292:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001296:	6013      	str	r3, [r2, #0]
 8001298:	4b6c      	ldr	r3, [pc, #432]	; (800144c <HAL_RCC_OscConfig+0x280>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a6b      	ldr	r2, [pc, #428]	; (800144c <HAL_RCC_OscConfig+0x280>)
 800129e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d013      	beq.n	80012d4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ac:	f7ff fc8a 	bl	8000bc4 <HAL_GetTick>
 80012b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012b2:	e008      	b.n	80012c6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012b4:	f7ff fc86 	bl	8000bc4 <HAL_GetTick>
 80012b8:	4602      	mov	r2, r0
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	2b64      	cmp	r3, #100	; 0x64
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e229      	b.n	800171a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012c6:	4b61      	ldr	r3, [pc, #388]	; (800144c <HAL_RCC_OscConfig+0x280>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0f0      	beq.n	80012b4 <HAL_RCC_OscConfig+0xe8>
 80012d2:	e014      	b.n	80012fe <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012d4:	f7ff fc76 	bl	8000bc4 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012da:	e008      	b.n	80012ee <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012dc:	f7ff fc72 	bl	8000bc4 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	2b64      	cmp	r3, #100	; 0x64
 80012e8:	d901      	bls.n	80012ee <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80012ea:	2303      	movs	r3, #3
 80012ec:	e215      	b.n	800171a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ee:	4b57      	ldr	r3, [pc, #348]	; (800144c <HAL_RCC_OscConfig+0x280>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d1f0      	bne.n	80012dc <HAL_RCC_OscConfig+0x110>
 80012fa:	e000      	b.n	80012fe <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	f003 0302 	and.w	r3, r3, #2
 8001306:	2b00      	cmp	r3, #0
 8001308:	d069      	beq.n	80013de <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800130a:	4b50      	ldr	r3, [pc, #320]	; (800144c <HAL_RCC_OscConfig+0x280>)
 800130c:	689b      	ldr	r3, [r3, #8]
 800130e:	f003 030c 	and.w	r3, r3, #12
 8001312:	2b00      	cmp	r3, #0
 8001314:	d00b      	beq.n	800132e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001316:	4b4d      	ldr	r3, [pc, #308]	; (800144c <HAL_RCC_OscConfig+0x280>)
 8001318:	689b      	ldr	r3, [r3, #8]
 800131a:	f003 030c 	and.w	r3, r3, #12
 800131e:	2b08      	cmp	r3, #8
 8001320:	d11c      	bne.n	800135c <HAL_RCC_OscConfig+0x190>
 8001322:	4b4a      	ldr	r3, [pc, #296]	; (800144c <HAL_RCC_OscConfig+0x280>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d116      	bne.n	800135c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800132e:	4b47      	ldr	r3, [pc, #284]	; (800144c <HAL_RCC_OscConfig+0x280>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d005      	beq.n	8001346 <HAL_RCC_OscConfig+0x17a>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d001      	beq.n	8001346 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e1e9      	b.n	800171a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001346:	4b41      	ldr	r3, [pc, #260]	; (800144c <HAL_RCC_OscConfig+0x280>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	493d      	ldr	r1, [pc, #244]	; (800144c <HAL_RCC_OscConfig+0x280>)
 8001356:	4313      	orrs	r3, r2
 8001358:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800135a:	e040      	b.n	80013de <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d023      	beq.n	80013ac <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001364:	4b39      	ldr	r3, [pc, #228]	; (800144c <HAL_RCC_OscConfig+0x280>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a38      	ldr	r2, [pc, #224]	; (800144c <HAL_RCC_OscConfig+0x280>)
 800136a:	f043 0301 	orr.w	r3, r3, #1
 800136e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fc28 	bl	8000bc4 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001378:	f7ff fc24 	bl	8000bc4 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b02      	cmp	r3, #2
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e1c7      	b.n	800171a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138a:	4b30      	ldr	r3, [pc, #192]	; (800144c <HAL_RCC_OscConfig+0x280>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d0f0      	beq.n	8001378 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b2d      	ldr	r3, [pc, #180]	; (800144c <HAL_RCC_OscConfig+0x280>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4929      	ldr	r1, [pc, #164]	; (800144c <HAL_RCC_OscConfig+0x280>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
 80013aa:	e018      	b.n	80013de <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ac:	4b27      	ldr	r3, [pc, #156]	; (800144c <HAL_RCC_OscConfig+0x280>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a26      	ldr	r2, [pc, #152]	; (800144c <HAL_RCC_OscConfig+0x280>)
 80013b2:	f023 0301 	bic.w	r3, r3, #1
 80013b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013b8:	f7ff fc04 	bl	8000bc4 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013c0:	f7ff fc00 	bl	8000bc4 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e1a3      	b.n	800171a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <HAL_RCC_OscConfig+0x280>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f003 0308 	and.w	r3, r3, #8
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d038      	beq.n	800145c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d019      	beq.n	8001426 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <HAL_RCC_OscConfig+0x280>)
 80013f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f6:	4a15      	ldr	r2, [pc, #84]	; (800144c <HAL_RCC_OscConfig+0x280>)
 80013f8:	f043 0301 	orr.w	r3, r3, #1
 80013fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013fe:	f7ff fbe1 	bl	8000bc4 <HAL_GetTick>
 8001402:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001404:	e008      	b.n	8001418 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001406:	f7ff fbdd 	bl	8000bc4 <HAL_GetTick>
 800140a:	4602      	mov	r2, r0
 800140c:	693b      	ldr	r3, [r7, #16]
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	2b02      	cmp	r3, #2
 8001412:	d901      	bls.n	8001418 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001414:	2303      	movs	r3, #3
 8001416:	e180      	b.n	800171a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001418:	4b0c      	ldr	r3, [pc, #48]	; (800144c <HAL_RCC_OscConfig+0x280>)
 800141a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800141c:	f003 0302 	and.w	r3, r3, #2
 8001420:	2b00      	cmp	r3, #0
 8001422:	d0f0      	beq.n	8001406 <HAL_RCC_OscConfig+0x23a>
 8001424:	e01a      	b.n	800145c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001426:	4b09      	ldr	r3, [pc, #36]	; (800144c <HAL_RCC_OscConfig+0x280>)
 8001428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142a:	4a08      	ldr	r2, [pc, #32]	; (800144c <HAL_RCC_OscConfig+0x280>)
 800142c:	f023 0301 	bic.w	r3, r3, #1
 8001430:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001432:	f7ff fbc7 	bl	8000bc4 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001438:	e00a      	b.n	8001450 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800143a:	f7ff fbc3 	bl	8000bc4 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d903      	bls.n	8001450 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e166      	b.n	800171a <HAL_RCC_OscConfig+0x54e>
 800144c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001450:	4b92      	ldr	r3, [pc, #584]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 8001452:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001454:	f003 0302 	and.w	r3, r3, #2
 8001458:	2b00      	cmp	r3, #0
 800145a:	d1ee      	bne.n	800143a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 0304 	and.w	r3, r3, #4
 8001464:	2b00      	cmp	r3, #0
 8001466:	f000 80a4 	beq.w	80015b2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800146a:	4b8c      	ldr	r3, [pc, #560]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 800146c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d10d      	bne.n	8001492 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001476:	4b89      	ldr	r3, [pc, #548]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 8001478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800147a:	4a88      	ldr	r2, [pc, #544]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 800147c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001480:	6413      	str	r3, [r2, #64]	; 0x40
 8001482:	4b86      	ldr	r3, [pc, #536]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	60bb      	str	r3, [r7, #8]
 800148c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800148e:	2301      	movs	r3, #1
 8001490:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001492:	4b83      	ldr	r3, [pc, #524]	; (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800149a:	2b00      	cmp	r3, #0
 800149c:	d118      	bne.n	80014d0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800149e:	4b80      	ldr	r3, [pc, #512]	; (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	4a7f      	ldr	r2, [pc, #508]	; (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 80014a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014aa:	f7ff fb8b 	bl	8000bc4 <HAL_GetTick>
 80014ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014b0:	e008      	b.n	80014c4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014b2:	f7ff fb87 	bl	8000bc4 <HAL_GetTick>
 80014b6:	4602      	mov	r2, r0
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	1ad3      	subs	r3, r2, r3
 80014bc:	2b64      	cmp	r3, #100	; 0x64
 80014be:	d901      	bls.n	80014c4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014c0:	2303      	movs	r3, #3
 80014c2:	e12a      	b.n	800171a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c4:	4b76      	ldr	r3, [pc, #472]	; (80016a0 <HAL_RCC_OscConfig+0x4d4>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d0f0      	beq.n	80014b2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d106      	bne.n	80014e6 <HAL_RCC_OscConfig+0x31a>
 80014d8:	4b70      	ldr	r3, [pc, #448]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 80014da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014dc:	4a6f      	ldr	r2, [pc, #444]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 80014de:	f043 0301 	orr.w	r3, r3, #1
 80014e2:	6713      	str	r3, [r2, #112]	; 0x70
 80014e4:	e02d      	b.n	8001542 <HAL_RCC_OscConfig+0x376>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x33c>
 80014ee:	4b6b      	ldr	r3, [pc, #428]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 80014f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f2:	4a6a      	ldr	r2, [pc, #424]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 80014f4:	f023 0301 	bic.w	r3, r3, #1
 80014f8:	6713      	str	r3, [r2, #112]	; 0x70
 80014fa:	4b68      	ldr	r3, [pc, #416]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 80014fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fe:	4a67      	ldr	r2, [pc, #412]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 8001500:	f023 0304 	bic.w	r3, r3, #4
 8001504:	6713      	str	r3, [r2, #112]	; 0x70
 8001506:	e01c      	b.n	8001542 <HAL_RCC_OscConfig+0x376>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	689b      	ldr	r3, [r3, #8]
 800150c:	2b05      	cmp	r3, #5
 800150e:	d10c      	bne.n	800152a <HAL_RCC_OscConfig+0x35e>
 8001510:	4b62      	ldr	r3, [pc, #392]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 8001512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001514:	4a61      	ldr	r2, [pc, #388]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 8001516:	f043 0304 	orr.w	r3, r3, #4
 800151a:	6713      	str	r3, [r2, #112]	; 0x70
 800151c:	4b5f      	ldr	r3, [pc, #380]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 800151e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001520:	4a5e      	ldr	r2, [pc, #376]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 8001522:	f043 0301 	orr.w	r3, r3, #1
 8001526:	6713      	str	r3, [r2, #112]	; 0x70
 8001528:	e00b      	b.n	8001542 <HAL_RCC_OscConfig+0x376>
 800152a:	4b5c      	ldr	r3, [pc, #368]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 800152c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152e:	4a5b      	ldr	r2, [pc, #364]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 8001530:	f023 0301 	bic.w	r3, r3, #1
 8001534:	6713      	str	r3, [r2, #112]	; 0x70
 8001536:	4b59      	ldr	r3, [pc, #356]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153a:	4a58      	ldr	r2, [pc, #352]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 800153c:	f023 0304 	bic.w	r3, r3, #4
 8001540:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d015      	beq.n	8001576 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800154a:	f7ff fb3b 	bl	8000bc4 <HAL_GetTick>
 800154e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001550:	e00a      	b.n	8001568 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001552:	f7ff fb37 	bl	8000bc4 <HAL_GetTick>
 8001556:	4602      	mov	r2, r0
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	1ad3      	subs	r3, r2, r3
 800155c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001560:	4293      	cmp	r3, r2
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e0d8      	b.n	800171a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001568:	4b4c      	ldr	r3, [pc, #304]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 800156a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800156c:	f003 0302 	and.w	r3, r3, #2
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0ee      	beq.n	8001552 <HAL_RCC_OscConfig+0x386>
 8001574:	e014      	b.n	80015a0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001576:	f7ff fb25 	bl	8000bc4 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800157c:	e00a      	b.n	8001594 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157e:	f7ff fb21 	bl	8000bc4 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	f241 3288 	movw	r2, #5000	; 0x1388
 800158c:	4293      	cmp	r3, r2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e0c2      	b.n	800171a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001594:	4b41      	ldr	r3, [pc, #260]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 8001596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1ee      	bne.n	800157e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015a0:	7dfb      	ldrb	r3, [r7, #23]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d105      	bne.n	80015b2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a6:	4b3d      	ldr	r3, [pc, #244]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a3c      	ldr	r2, [pc, #240]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 80015ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	f000 80ae 	beq.w	8001718 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015bc:	4b37      	ldr	r3, [pc, #220]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 80015be:	689b      	ldr	r3, [r3, #8]
 80015c0:	f003 030c 	and.w	r3, r3, #12
 80015c4:	2b08      	cmp	r3, #8
 80015c6:	d06d      	beq.n	80016a4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	699b      	ldr	r3, [r3, #24]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d14b      	bne.n	8001668 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015d0:	4b32      	ldr	r3, [pc, #200]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a31      	ldr	r2, [pc, #196]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 80015d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015dc:	f7ff faf2 	bl	8000bc4 <HAL_GetTick>
 80015e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015e2:	e008      	b.n	80015f6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e4:	f7ff faee 	bl	8000bc4 <HAL_GetTick>
 80015e8:	4602      	mov	r2, r0
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	1ad3      	subs	r3, r2, r3
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d901      	bls.n	80015f6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80015f2:	2303      	movs	r3, #3
 80015f4:	e091      	b.n	800171a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015f6:	4b29      	ldr	r3, [pc, #164]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1f0      	bne.n	80015e4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	69da      	ldr	r2, [r3, #28]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a1b      	ldr	r3, [r3, #32]
 800160a:	431a      	orrs	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001610:	019b      	lsls	r3, r3, #6
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001618:	085b      	lsrs	r3, r3, #1
 800161a:	3b01      	subs	r3, #1
 800161c:	041b      	lsls	r3, r3, #16
 800161e:	431a      	orrs	r2, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001624:	061b      	lsls	r3, r3, #24
 8001626:	431a      	orrs	r2, r3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	071b      	lsls	r3, r3, #28
 800162e:	491b      	ldr	r1, [pc, #108]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 8001630:	4313      	orrs	r3, r2
 8001632:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001634:	4b19      	ldr	r3, [pc, #100]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a18      	ldr	r2, [pc, #96]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 800163a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800163e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001640:	f7ff fac0 	bl	8000bc4 <HAL_GetTick>
 8001644:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001646:	e008      	b.n	800165a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001648:	f7ff fabc 	bl	8000bc4 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	693b      	ldr	r3, [r7, #16]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	2b02      	cmp	r3, #2
 8001654:	d901      	bls.n	800165a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001656:	2303      	movs	r3, #3
 8001658:	e05f      	b.n	800171a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165a:	4b10      	ldr	r3, [pc, #64]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d0f0      	beq.n	8001648 <HAL_RCC_OscConfig+0x47c>
 8001666:	e057      	b.n	8001718 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001668:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a0b      	ldr	r2, [pc, #44]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 800166e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001674:	f7ff faa6 	bl	8000bc4 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff faa2 	bl	8000bc4 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e045      	b.n	800171a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	4b03      	ldr	r3, [pc, #12]	; (800169c <HAL_RCC_OscConfig+0x4d0>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x4b0>
 800169a:	e03d      	b.n	8001718 <HAL_RCC_OscConfig+0x54c>
 800169c:	40023800 	.word	0x40023800
 80016a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80016a4:	4b1f      	ldr	r3, [pc, #124]	; (8001724 <HAL_RCC_OscConfig+0x558>)
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d030      	beq.n	8001714 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016bc:	429a      	cmp	r2, r3
 80016be:	d129      	bne.n	8001714 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d122      	bne.n	8001714 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016d4:	4013      	ands	r3, r2
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016dc:	4293      	cmp	r3, r2
 80016de:	d119      	bne.n	8001714 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ea:	085b      	lsrs	r3, r3, #1
 80016ec:	3b01      	subs	r3, #1
 80016ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016f0:	429a      	cmp	r2, r3
 80016f2:	d10f      	bne.n	8001714 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001700:	429a      	cmp	r2, r3
 8001702:	d107      	bne.n	8001714 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001710:	429a      	cmp	r2, r3
 8001712:	d001      	beq.n	8001718 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e000      	b.n	800171a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001718:	2300      	movs	r3, #0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	40023800 	.word	0x40023800

08001728 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
 8001730:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001732:	2300      	movs	r3, #0
 8001734:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d101      	bne.n	8001740 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
 800173e:	e0d0      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001740:	4b6a      	ldr	r3, [pc, #424]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f003 030f 	and.w	r3, r3, #15
 8001748:	683a      	ldr	r2, [r7, #0]
 800174a:	429a      	cmp	r2, r3
 800174c:	d910      	bls.n	8001770 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800174e:	4b67      	ldr	r3, [pc, #412]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f023 020f 	bic.w	r2, r3, #15
 8001756:	4965      	ldr	r1, [pc, #404]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b63      	ldr	r3, [pc, #396]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0b8      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d020      	beq.n	80017be <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001788:	4b59      	ldr	r3, [pc, #356]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4a58      	ldr	r2, [pc, #352]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 800178e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001792:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a0:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4a52      	ldr	r2, [pc, #328]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80017a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017aa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ac:	4b50      	ldr	r3, [pc, #320]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	494d      	ldr	r1, [pc, #308]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d040      	beq.n	800184c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d115      	bne.n	800180a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e07f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d107      	bne.n	80017fa <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	4b41      	ldr	r3, [pc, #260]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d109      	bne.n	800180a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017f6:	2301      	movs	r3, #1
 80017f8:	e073      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fa:	4b3d      	ldr	r3, [pc, #244]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d101      	bne.n	800180a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001806:	2301      	movs	r3, #1
 8001808:	e06b      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180a:	4b39      	ldr	r3, [pc, #228]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f023 0203 	bic.w	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	4936      	ldr	r1, [pc, #216]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 8001818:	4313      	orrs	r3, r2
 800181a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800181c:	f7ff f9d2 	bl	8000bc4 <HAL_GetTick>
 8001820:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001822:	e00a      	b.n	800183a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001824:	f7ff f9ce 	bl	8000bc4 <HAL_GetTick>
 8001828:	4602      	mov	r2, r0
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001832:	4293      	cmp	r3, r2
 8001834:	d901      	bls.n	800183a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e053      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183a:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 020c 	and.w	r2, r3, #12
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	429a      	cmp	r2, r3
 800184a:	d1eb      	bne.n	8001824 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f003 030f 	and.w	r3, r3, #15
 8001854:	683a      	ldr	r2, [r7, #0]
 8001856:	429a      	cmp	r2, r3
 8001858:	d210      	bcs.n	800187c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185a:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f023 020f 	bic.w	r2, r3, #15
 8001862:	4922      	ldr	r1, [pc, #136]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	4313      	orrs	r3, r2
 8001868:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <HAL_RCC_ClockConfig+0x1c4>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e032      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4916      	ldr	r1, [pc, #88]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	490e      	ldr	r1, [pc, #56]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018ba:	f000 f821 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 80018be:	4602      	mov	r2, r0
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_ClockConfig+0x1c8>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	490a      	ldr	r1, [pc, #40]	; (80018f4 <HAL_RCC_ClockConfig+0x1cc>)
 80018cc:	5ccb      	ldrb	r3, [r1, r3]
 80018ce:	fa22 f303 	lsr.w	r3, r2, r3
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <HAL_RCC_ClockConfig+0x1d0>)
 80018d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_RCC_ClockConfig+0x1d4>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f87c 	bl	80009d8 <HAL_InitTick>

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023c00 	.word	0x40023c00
 80018f0:	40023800 	.word	0x40023800
 80018f4:	08005ce0 	.word	0x08005ce0
 80018f8:	20000000 	.word	0x20000000
 80018fc:	20000004 	.word	0x20000004

08001900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001904:	b094      	sub	sp, #80	; 0x50
 8001906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001908:	2300      	movs	r3, #0
 800190a:	647b      	str	r3, [r7, #68]	; 0x44
 800190c:	2300      	movs	r3, #0
 800190e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001910:	2300      	movs	r3, #0
 8001912:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001918:	4b79      	ldr	r3, [pc, #484]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d00d      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x40>
 8001924:	2b08      	cmp	r3, #8
 8001926:	f200 80e1 	bhi.w	8001aec <HAL_RCC_GetSysClockFreq+0x1ec>
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x34>
 800192e:	2b04      	cmp	r3, #4
 8001930:	d003      	beq.n	800193a <HAL_RCC_GetSysClockFreq+0x3a>
 8001932:	e0db      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4b73      	ldr	r3, [pc, #460]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001936:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001938:	e0db      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800193a:	4b73      	ldr	r3, [pc, #460]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x208>)
 800193c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800193e:	e0d8      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001940:	4b6f      	ldr	r3, [pc, #444]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001948:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800194a:	4b6d      	ldr	r3, [pc, #436]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d063      	beq.n	8001a1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001956:	4b6a      	ldr	r3, [pc, #424]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	099b      	lsrs	r3, r3, #6
 800195c:	2200      	movs	r2, #0
 800195e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001960:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
 800196a:	2300      	movs	r3, #0
 800196c:	637b      	str	r3, [r7, #52]	; 0x34
 800196e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001972:	4622      	mov	r2, r4
 8001974:	462b      	mov	r3, r5
 8001976:	f04f 0000 	mov.w	r0, #0
 800197a:	f04f 0100 	mov.w	r1, #0
 800197e:	0159      	lsls	r1, r3, #5
 8001980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001984:	0150      	lsls	r0, r2, #5
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4621      	mov	r1, r4
 800198c:	1a51      	subs	r1, r2, r1
 800198e:	6139      	str	r1, [r7, #16]
 8001990:	4629      	mov	r1, r5
 8001992:	eb63 0301 	sbc.w	r3, r3, r1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019a4:	4659      	mov	r1, fp
 80019a6:	018b      	lsls	r3, r1, #6
 80019a8:	4651      	mov	r1, sl
 80019aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ae:	4651      	mov	r1, sl
 80019b0:	018a      	lsls	r2, r1, #6
 80019b2:	4651      	mov	r1, sl
 80019b4:	ebb2 0801 	subs.w	r8, r2, r1
 80019b8:	4659      	mov	r1, fp
 80019ba:	eb63 0901 	sbc.w	r9, r3, r1
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019d2:	4690      	mov	r8, r2
 80019d4:	4699      	mov	r9, r3
 80019d6:	4623      	mov	r3, r4
 80019d8:	eb18 0303 	adds.w	r3, r8, r3
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	462b      	mov	r3, r5
 80019e0:	eb49 0303 	adc.w	r3, r9, r3
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019f2:	4629      	mov	r1, r5
 80019f4:	024b      	lsls	r3, r1, #9
 80019f6:	4621      	mov	r1, r4
 80019f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019fc:	4621      	mov	r1, r4
 80019fe:	024a      	lsls	r2, r1, #9
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a06:	2200      	movs	r2, #0
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a10:	f7fe fc16 	bl	8000240 <__aeabi_uldivmod>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4613      	mov	r3, r2
 8001a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a1c:	e058      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a1e:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	099b      	lsrs	r3, r3, #6
 8001a24:	2200      	movs	r2, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	4611      	mov	r1, r2
 8001a2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a2e:	623b      	str	r3, [r7, #32]
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
 8001a34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a38:	4642      	mov	r2, r8
 8001a3a:	464b      	mov	r3, r9
 8001a3c:	f04f 0000 	mov.w	r0, #0
 8001a40:	f04f 0100 	mov.w	r1, #0
 8001a44:	0159      	lsls	r1, r3, #5
 8001a46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a4a:	0150      	lsls	r0, r2, #5
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4641      	mov	r1, r8
 8001a52:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a56:	4649      	mov	r1, r9
 8001a58:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a70:	ebb2 040a 	subs.w	r4, r2, sl
 8001a74:	eb63 050b 	sbc.w	r5, r3, fp
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	00eb      	lsls	r3, r5, #3
 8001a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a86:	00e2      	lsls	r2, r4, #3
 8001a88:	4614      	mov	r4, r2
 8001a8a:	461d      	mov	r5, r3
 8001a8c:	4643      	mov	r3, r8
 8001a8e:	18e3      	adds	r3, r4, r3
 8001a90:	603b      	str	r3, [r7, #0]
 8001a92:	464b      	mov	r3, r9
 8001a94:	eb45 0303 	adc.w	r3, r5, r3
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	028b      	lsls	r3, r1, #10
 8001aaa:	4621      	mov	r1, r4
 8001aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	028a      	lsls	r2, r1, #10
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aba:	2200      	movs	r2, #0
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	61fa      	str	r2, [r7, #28]
 8001ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ac4:	f7fe fbbc 	bl	8000240 <__aeabi_uldivmod>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4613      	mov	r3, r2
 8001ace:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	0c1b      	lsrs	r3, r3, #16
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	3301      	adds	r3, #1
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001ae0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aea:	e002      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3750      	adds	r7, #80	; 0x50
 8001af8:	46bd      	mov	sp, r7
 8001afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	00f42400 	.word	0x00f42400
 8001b08:	007a1200 	.word	0x007a1200

08001b0c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b10:	4b03      	ldr	r3, [pc, #12]	; (8001b20 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b12:	681b      	ldr	r3, [r3, #0]
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
 8001b1e:	bf00      	nop
 8001b20:	20000000 	.word	0x20000000

08001b24 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b28:	f7ff fff0 	bl	8001b0c <HAL_RCC_GetHCLKFreq>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b05      	ldr	r3, [pc, #20]	; (8001b44 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b30:	689b      	ldr	r3, [r3, #8]
 8001b32:	0a9b      	lsrs	r3, r3, #10
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	4903      	ldr	r1, [pc, #12]	; (8001b48 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3a:	5ccb      	ldrb	r3, [r1, r3]
 8001b3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40023800 	.word	0x40023800
 8001b48:	08005cf0 	.word	0x08005cf0

08001b4c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	220f      	movs	r2, #15
 8001b5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001b5c:	4b12      	ldr	r3, [pc, #72]	; (8001ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f003 0203 	and.w	r2, r3, #3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001b68:	4b0f      	ldr	r3, [pc, #60]	; (8001ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001b74:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001b80:	4b09      	ldr	r3, [pc, #36]	; (8001ba8 <HAL_RCC_GetClockConfig+0x5c>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	08db      	lsrs	r3, r3, #3
 8001b86:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001b8e:	4b07      	ldr	r3, [pc, #28]	; (8001bac <HAL_RCC_GetClockConfig+0x60>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 020f 	and.w	r2, r3, #15
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	601a      	str	r2, [r3, #0]
}
 8001b9a:	bf00      	nop
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	40023800 	.word	0x40023800
 8001bac:	40023c00 	.word	0x40023c00

08001bb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b084      	sub	sp, #16
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e09d      	b.n	8001cfe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d108      	bne.n	8001bdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001bd2:	d009      	beq.n	8001be8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	61da      	str	r2, [r3, #28]
 8001bda:	e005      	b.n	8001be8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2200      	movs	r2, #0
 8001be0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2200      	movs	r2, #0
 8001be6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2200      	movs	r2, #0
 8001bec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d106      	bne.n	8001c08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c02:	6878      	ldr	r0, [r7, #4]
 8001c04:	f7fe fe86 	bl	8000914 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c1e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001c28:	d902      	bls.n	8001c30 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	e002      	b.n	8001c36 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001c30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c34:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8001c3e:	d007      	beq.n	8001c50 <HAL_SPI_Init+0xa0>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001c48:	d002      	beq.n	8001c50 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	691b      	ldr	r3, [r3, #16]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	69db      	ldr	r3, [r3, #28]
 8001c84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6a1b      	ldr	r3, [r3, #32]
 8001c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c92:	ea42 0103 	orr.w	r1, r2, r3
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	0c1b      	lsrs	r3, r3, #16
 8001cac:	f003 0204 	and.w	r2, r3, #4
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cb4:	f003 0310 	and.w	r3, r3, #16
 8001cb8:	431a      	orrs	r2, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cbe:	f003 0308 	and.w	r3, r3, #8
 8001cc2:	431a      	orrs	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001ccc:	ea42 0103 	orr.w	r1, r2, r3
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	69da      	ldr	r2, [r3, #28]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3710      	adds	r7, #16
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b082      	sub	sp, #8
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d101      	bne.n	8001d18 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e049      	b.n	8001dac <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d106      	bne.n	8001d32 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 f841 	bl	8001db4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2202      	movs	r2, #2
 8001d36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681a      	ldr	r2, [r3, #0]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	3304      	adds	r3, #4
 8001d42:	4619      	mov	r1, r3
 8001d44:	4610      	mov	r0, r2
 8001d46:	f000 f9ff 	bl	8002148 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2201      	movs	r2, #1
 8001d66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2201      	movs	r2, #1
 8001d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2201      	movs	r2, #1
 8001d86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2201      	movs	r2, #1
 8001d8e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2201      	movs	r2, #1
 8001da6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001daa:	2300      	movs	r3, #0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3708      	adds	r7, #8
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b083      	sub	sp, #12
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b085      	sub	sp, #20
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d001      	beq.n	8001de0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e054      	b.n	8001e8a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2202      	movs	r2, #2
 8001de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	68da      	ldr	r2, [r3, #12]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f042 0201 	orr.w	r2, r2, #1
 8001df6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a26      	ldr	r2, [pc, #152]	; (8001e98 <HAL_TIM_Base_Start_IT+0xd0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d022      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e0a:	d01d      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a22      	ldr	r2, [pc, #136]	; (8001e9c <HAL_TIM_Base_Start_IT+0xd4>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d018      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a21      	ldr	r2, [pc, #132]	; (8001ea0 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d013      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a1f      	ldr	r2, [pc, #124]	; (8001ea4 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d00e      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ea8 <HAL_TIM_Base_Start_IT+0xe0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d009      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a1c      	ldr	r2, [pc, #112]	; (8001eac <HAL_TIM_Base_Start_IT+0xe4>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d004      	beq.n	8001e48 <HAL_TIM_Base_Start_IT+0x80>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a1b      	ldr	r2, [pc, #108]	; (8001eb0 <HAL_TIM_Base_Start_IT+0xe8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d115      	bne.n	8001e74 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <HAL_TIM_Base_Start_IT+0xec>)
 8001e50:	4013      	ands	r3, r2
 8001e52:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2b06      	cmp	r3, #6
 8001e58:	d015      	beq.n	8001e86 <HAL_TIM_Base_Start_IT+0xbe>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e60:	d011      	beq.n	8001e86 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681a      	ldr	r2, [r3, #0]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f042 0201 	orr.w	r2, r2, #1
 8001e70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e72:	e008      	b.n	8001e86 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f042 0201 	orr.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]
 8001e84:	e000      	b.n	8001e88 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e86:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3714      	adds	r7, #20
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	40010000 	.word	0x40010000
 8001e9c:	40000400 	.word	0x40000400
 8001ea0:	40000800 	.word	0x40000800
 8001ea4:	40000c00 	.word	0x40000c00
 8001ea8:	40010400 	.word	0x40010400
 8001eac:	40014000 	.word	0x40014000
 8001eb0:	40001800 	.word	0x40001800
 8001eb4:	00010007 	.word	0x00010007

08001eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	691b      	ldr	r3, [r3, #16]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d122      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b02      	cmp	r3, #2
 8001eda:	d11b      	bne.n	8001f14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f06f 0202 	mvn.w	r2, #2
 8001ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f000 f905 	bl	800210a <HAL_TIM_IC_CaptureCallback>
 8001f00:	e005      	b.n	8001f0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f000 f8f7 	bl	80020f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f908 	bl	800211e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2200      	movs	r2, #0
 8001f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	691b      	ldr	r3, [r3, #16]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b04      	cmp	r3, #4
 8001f20:	d122      	bne.n	8001f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	f003 0304 	and.w	r3, r3, #4
 8001f2c:	2b04      	cmp	r3, #4
 8001f2e:	d11b      	bne.n	8001f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f06f 0204 	mvn.w	r2, #4
 8001f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d003      	beq.n	8001f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f8db 	bl	800210a <HAL_TIM_IC_CaptureCallback>
 8001f54:	e005      	b.n	8001f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f000 f8cd 	bl	80020f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f000 f8de 	bl	800211e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2200      	movs	r2, #0
 8001f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	691b      	ldr	r3, [r3, #16]
 8001f6e:	f003 0308 	and.w	r3, r3, #8
 8001f72:	2b08      	cmp	r3, #8
 8001f74:	d122      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	f003 0308 	and.w	r3, r3, #8
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	d11b      	bne.n	8001fbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f06f 0208 	mvn.w	r2, #8
 8001f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2204      	movs	r2, #4
 8001f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	69db      	ldr	r3, [r3, #28]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d003      	beq.n	8001faa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f000 f8b1 	bl	800210a <HAL_TIM_IC_CaptureCallback>
 8001fa8:	e005      	b.n	8001fb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f8a3 	bl	80020f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fb0:	6878      	ldr	r0, [r7, #4]
 8001fb2:	f000 f8b4 	bl	800211e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2200      	movs	r2, #0
 8001fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	691b      	ldr	r3, [r3, #16]
 8001fc2:	f003 0310 	and.w	r3, r3, #16
 8001fc6:	2b10      	cmp	r3, #16
 8001fc8:	d122      	bne.n	8002010 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	68db      	ldr	r3, [r3, #12]
 8001fd0:	f003 0310 	and.w	r3, r3, #16
 8001fd4:	2b10      	cmp	r3, #16
 8001fd6:	d11b      	bne.n	8002010 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0210 	mvn.w	r2, #16
 8001fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2208      	movs	r2, #8
 8001fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d003      	beq.n	8001ffe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f000 f887 	bl	800210a <HAL_TIM_IC_CaptureCallback>
 8001ffc:	e005      	b.n	800200a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 f879 	bl	80020f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002004:	6878      	ldr	r0, [r7, #4]
 8002006:	f000 f88a 	bl	800211e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	2200      	movs	r2, #0
 800200e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b01      	cmp	r3, #1
 800201c:	d10e      	bne.n	800203c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68db      	ldr	r3, [r3, #12]
 8002024:	f003 0301 	and.w	r3, r3, #1
 8002028:	2b01      	cmp	r3, #1
 800202a:	d107      	bne.n	800203c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f06f 0201 	mvn.w	r2, #1
 8002034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f7fe fc2c 	bl	8000894 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	691b      	ldr	r3, [r3, #16]
 8002042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002046:	2b80      	cmp	r3, #128	; 0x80
 8002048:	d10e      	bne.n	8002068 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002054:	2b80      	cmp	r3, #128	; 0x80
 8002056:	d107      	bne.n	8002068 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f91a 	bl	800229c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002072:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002076:	d10e      	bne.n	8002096 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	68db      	ldr	r3, [r3, #12]
 800207e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002082:	2b80      	cmp	r3, #128	; 0x80
 8002084:	d107      	bne.n	8002096 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800208e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f000 f90d 	bl	80022b0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	691b      	ldr	r3, [r3, #16]
 800209c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a0:	2b40      	cmp	r3, #64	; 0x40
 80020a2:	d10e      	bne.n	80020c2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68db      	ldr	r3, [r3, #12]
 80020aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ae:	2b40      	cmp	r3, #64	; 0x40
 80020b0:	d107      	bne.n	80020c2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f000 f838 	bl	8002132 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	691b      	ldr	r3, [r3, #16]
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	2b20      	cmp	r3, #32
 80020ce:	d10e      	bne.n	80020ee <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68db      	ldr	r3, [r3, #12]
 80020d6:	f003 0320 	and.w	r3, r3, #32
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d107      	bne.n	80020ee <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f06f 0220 	mvn.w	r2, #32
 80020e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 f8cd 	bl	8002288 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020ee:	bf00      	nop
 80020f0:	3708      	adds	r7, #8
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020f6:	b480      	push	{r7}
 80020f8:	b083      	sub	sp, #12
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80020fe:	bf00      	nop
 8002100:	370c      	adds	r7, #12
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr

0800210a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800210a:	b480      	push	{r7}
 800210c:	b083      	sub	sp, #12
 800210e:	af00      	add	r7, sp, #0
 8002110:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002126:	bf00      	nop
 8002128:	370c      	adds	r7, #12
 800212a:	46bd      	mov	sp, r7
 800212c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002130:	4770      	bx	lr

08002132 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002132:	b480      	push	{r7}
 8002134:	b083      	sub	sp, #12
 8002136:	af00      	add	r7, sp, #0
 8002138:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a40      	ldr	r2, [pc, #256]	; (800225c <TIM_Base_SetConfig+0x114>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d013      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002166:	d00f      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	4a3d      	ldr	r2, [pc, #244]	; (8002260 <TIM_Base_SetConfig+0x118>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d00b      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	4a3c      	ldr	r2, [pc, #240]	; (8002264 <TIM_Base_SetConfig+0x11c>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d007      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	4a3b      	ldr	r2, [pc, #236]	; (8002268 <TIM_Base_SetConfig+0x120>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d003      	beq.n	8002188 <TIM_Base_SetConfig+0x40>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	4a3a      	ldr	r2, [pc, #232]	; (800226c <TIM_Base_SetConfig+0x124>)
 8002184:	4293      	cmp	r3, r2
 8002186:	d108      	bne.n	800219a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800218e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	4313      	orrs	r3, r2
 8002198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a2f      	ldr	r2, [pc, #188]	; (800225c <TIM_Base_SetConfig+0x114>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d02b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021a8:	d027      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	4a2c      	ldr	r2, [pc, #176]	; (8002260 <TIM_Base_SetConfig+0x118>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d023      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4a2b      	ldr	r2, [pc, #172]	; (8002264 <TIM_Base_SetConfig+0x11c>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d01f      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a2a      	ldr	r2, [pc, #168]	; (8002268 <TIM_Base_SetConfig+0x120>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d01b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a29      	ldr	r2, [pc, #164]	; (800226c <TIM_Base_SetConfig+0x124>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d017      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a28      	ldr	r2, [pc, #160]	; (8002270 <TIM_Base_SetConfig+0x128>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d013      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a27      	ldr	r2, [pc, #156]	; (8002274 <TIM_Base_SetConfig+0x12c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d00f      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a26      	ldr	r2, [pc, #152]	; (8002278 <TIM_Base_SetConfig+0x130>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d00b      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a25      	ldr	r2, [pc, #148]	; (800227c <TIM_Base_SetConfig+0x134>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d007      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a24      	ldr	r2, [pc, #144]	; (8002280 <TIM_Base_SetConfig+0x138>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d003      	beq.n	80021fa <TIM_Base_SetConfig+0xb2>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a23      	ldr	r2, [pc, #140]	; (8002284 <TIM_Base_SetConfig+0x13c>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d108      	bne.n	800220c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002200:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4313      	orrs	r3, r2
 800220a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	695b      	ldr	r3, [r3, #20]
 8002216:	4313      	orrs	r3, r2
 8002218:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	68fa      	ldr	r2, [r7, #12]
 800221e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	689a      	ldr	r2, [r3, #8]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	681a      	ldr	r2, [r3, #0]
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	4a0a      	ldr	r2, [pc, #40]	; (800225c <TIM_Base_SetConfig+0x114>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d003      	beq.n	8002240 <TIM_Base_SetConfig+0xf8>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4a0c      	ldr	r2, [pc, #48]	; (800226c <TIM_Base_SetConfig+0x124>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d103      	bne.n	8002248 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2201      	movs	r2, #1
 800224c:	615a      	str	r2, [r3, #20]
}
 800224e:	bf00      	nop
 8002250:	3714      	adds	r7, #20
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40010000 	.word	0x40010000
 8002260:	40000400 	.word	0x40000400
 8002264:	40000800 	.word	0x40000800
 8002268:	40000c00 	.word	0x40000c00
 800226c:	40010400 	.word	0x40010400
 8002270:	40014000 	.word	0x40014000
 8002274:	40014400 	.word	0x40014400
 8002278:	40014800 	.word	0x40014800
 800227c:	40001800 	.word	0x40001800
 8002280:	40001c00 	.word	0x40001c00
 8002284:	40002000 	.word	0x40002000

08002288 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
	...

080022d4 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80022da:	f3ef 8305 	mrs	r3, IPSR
 80022de:	60bb      	str	r3, [r7, #8]
  return(result);
 80022e0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10f      	bne.n	8002306 <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80022e6:	f3ef 8310 	mrs	r3, PRIMASK
 80022ea:	607b      	str	r3, [r7, #4]
  return(result);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d105      	bne.n	80022fe <osKernelInitialize+0x2a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80022f2:	f3ef 8311 	mrs	r3, BASEPRI
 80022f6:	603b      	str	r3, [r7, #0]
  return(result);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d007      	beq.n	800230e <osKernelInitialize+0x3a>
 80022fe:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <osKernelInitialize+0x64>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2b02      	cmp	r3, #2
 8002304:	d103      	bne.n	800230e <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8002306:	f06f 0305 	mvn.w	r3, #5
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	e00c      	b.n	8002328 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <osKernelInitialize+0x64>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d105      	bne.n	8002322 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8002316:	4b08      	ldr	r3, [pc, #32]	; (8002338 <osKernelInitialize+0x64>)
 8002318:	2201      	movs	r2, #1
 800231a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800231c:	2300      	movs	r3, #0
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	e002      	b.n	8002328 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002322:	f04f 33ff 	mov.w	r3, #4294967295
 8002326:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002328:	68fb      	ldr	r3, [r7, #12]
}
 800232a:	4618      	mov	r0, r3
 800232c:	3714      	adds	r7, #20
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000154 	.word	0x20000154

0800233c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002342:	f3ef 8305 	mrs	r3, IPSR
 8002346:	60bb      	str	r3, [r7, #8]
  return(result);
 8002348:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800234a:	2b00      	cmp	r3, #0
 800234c:	d10f      	bne.n	800236e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800234e:	f3ef 8310 	mrs	r3, PRIMASK
 8002352:	607b      	str	r3, [r7, #4]
  return(result);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800235a:	f3ef 8311 	mrs	r3, BASEPRI
 800235e:	603b      	str	r3, [r7, #0]
  return(result);
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d007      	beq.n	8002376 <osKernelStart+0x3a>
 8002366:	4b0f      	ldr	r3, [pc, #60]	; (80023a4 <osKernelStart+0x68>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d103      	bne.n	8002376 <osKernelStart+0x3a>
    stat = osErrorISR;
 800236e:	f06f 0305 	mvn.w	r3, #5
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	e010      	b.n	8002398 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 8002376:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <osKernelStart+0x68>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d109      	bne.n	8002392 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800237e:	f7ff ffa1 	bl	80022c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002382:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <osKernelStart+0x68>)
 8002384:	2202      	movs	r2, #2
 8002386:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8002388:	f001 fd70 	bl	8003e6c <vTaskStartScheduler>
      stat = osOK;
 800238c:	2300      	movs	r3, #0
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	e002      	b.n	8002398 <osKernelStart+0x5c>
    } else {
      stat = osError;
 8002392:	f04f 33ff 	mov.w	r3, #4294967295
 8002396:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8002398:	68fb      	ldr	r3, [r7, #12]
}
 800239a:	4618      	mov	r0, r3
 800239c:	3710      	adds	r7, #16
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	20000154 	.word	0x20000154

080023a8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b090      	sub	sp, #64	; 0x40
 80023ac:	af04      	add	r7, sp, #16
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023b8:	f3ef 8305 	mrs	r3, IPSR
 80023bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80023be:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	f040 808f 	bne.w	80024e4 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80023c6:	f3ef 8310 	mrs	r3, PRIMASK
 80023ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d105      	bne.n	80023de <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023d2:	f3ef 8311 	mrs	r3, BASEPRI
 80023d6:	617b      	str	r3, [r7, #20]
  return(result);
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d003      	beq.n	80023e6 <osThreadNew+0x3e>
 80023de:	4b44      	ldr	r3, [pc, #272]	; (80024f0 <osThreadNew+0x148>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d07e      	beq.n	80024e4 <osThreadNew+0x13c>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d07b      	beq.n	80024e4 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80023f0:	2318      	movs	r3, #24
 80023f2:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80023f4:	2300      	movs	r3, #0
 80023f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80023f8:	f04f 33ff 	mov.w	r3, #4294967295
 80023fc:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d045      	beq.n	8002490 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <osThreadNew+0x6a>
        name = attr->name;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	699b      	ldr	r3, [r3, #24]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d002      	beq.n	8002420 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002422:	2b00      	cmp	r3, #0
 8002424:	d008      	beq.n	8002438 <osThreadNew+0x90>
 8002426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002428:	2b38      	cmp	r3, #56	; 0x38
 800242a:	d805      	bhi.n	8002438 <osThreadNew+0x90>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0301 	and.w	r3, r3, #1
 8002434:	2b00      	cmp	r3, #0
 8002436:	d001      	beq.n	800243c <osThreadNew+0x94>
        return (NULL);
 8002438:	2300      	movs	r3, #0
 800243a:	e054      	b.n	80024e6 <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	695b      	ldr	r3, [r3, #20]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	695b      	ldr	r3, [r3, #20]
 8002448:	089b      	lsrs	r3, r3, #2
 800244a:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d00e      	beq.n	8002472 <osThreadNew+0xca>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2bbb      	cmp	r3, #187	; 0xbb
 800245a:	d90a      	bls.n	8002472 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002460:	2b00      	cmp	r3, #0
 8002462:	d006      	beq.n	8002472 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d002      	beq.n	8002472 <osThreadNew+0xca>
        mem = 1;
 800246c:	2301      	movs	r3, #1
 800246e:	623b      	str	r3, [r7, #32]
 8002470:	e010      	b.n	8002494 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d10c      	bne.n	8002494 <osThreadNew+0xec>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d108      	bne.n	8002494 <osThreadNew+0xec>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d104      	bne.n	8002494 <osThreadNew+0xec>
          mem = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	623b      	str	r3, [r7, #32]
 800248e:	e001      	b.n	8002494 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002494:	6a3b      	ldr	r3, [r7, #32]
 8002496:	2b01      	cmp	r3, #1
 8002498:	d110      	bne.n	80024bc <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800249e:	687a      	ldr	r2, [r7, #4]
 80024a0:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024a2:	9202      	str	r2, [sp, #8]
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a8:	9300      	str	r3, [sp, #0]
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024b0:	68f8      	ldr	r0, [r7, #12]
 80024b2:	f001 fae5 	bl	8003a80 <xTaskCreateStatic>
 80024b6:	4603      	mov	r3, r0
 80024b8:	613b      	str	r3, [r7, #16]
 80024ba:	e013      	b.n	80024e4 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 80024bc:	6a3b      	ldr	r3, [r7, #32]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d110      	bne.n	80024e4 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80024c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	f107 0310 	add.w	r3, r7, #16
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024d4:	68f8      	ldr	r0, [r7, #12]
 80024d6:	f001 fb36 	bl	8003b46 <xTaskCreate>
 80024da:	4603      	mov	r3, r0
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d001      	beq.n	80024e4 <osThreadNew+0x13c>
          hTask = NULL;
 80024e0:	2300      	movs	r3, #0
 80024e2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80024e4:	693b      	ldr	r3, [r7, #16]
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3730      	adds	r7, #48	; 0x30
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000154 	.word	0x20000154

080024f4 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b086      	sub	sp, #24
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80024fc:	f3ef 8305 	mrs	r3, IPSR
 8002500:	613b      	str	r3, [r7, #16]
  return(result);
 8002502:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002504:	2b00      	cmp	r3, #0
 8002506:	d10f      	bne.n	8002528 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002508:	f3ef 8310 	mrs	r3, PRIMASK
 800250c:	60fb      	str	r3, [r7, #12]
  return(result);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d105      	bne.n	8002520 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002514:	f3ef 8311 	mrs	r3, BASEPRI
 8002518:	60bb      	str	r3, [r7, #8]
  return(result);
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d007      	beq.n	8002530 <osDelay+0x3c>
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <osDelay+0x58>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d103      	bne.n	8002530 <osDelay+0x3c>
    stat = osErrorISR;
 8002528:	f06f 0305 	mvn.w	r3, #5
 800252c:	617b      	str	r3, [r7, #20]
 800252e:	e007      	b.n	8002540 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d002      	beq.n	8002540 <osDelay+0x4c>
      vTaskDelay(ticks);
 800253a:	6878      	ldr	r0, [r7, #4]
 800253c:	f001 fc60 	bl	8003e00 <vTaskDelay>
    }
  }

  return (stat);
 8002540:	697b      	ldr	r3, [r7, #20]
}
 8002542:	4618      	mov	r0, r3
 8002544:	3718      	adds	r7, #24
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000154 	.word	0x20000154

08002550 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8002550:	b580      	push	{r7, lr}
 8002552:	b08c      	sub	sp, #48	; 0x30
 8002554:	af02      	add	r7, sp, #8
 8002556:	60f8      	str	r0, [r7, #12]
 8002558:	60b9      	str	r1, [r7, #8]
 800255a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800255c:	2300      	movs	r3, #0
 800255e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002560:	f3ef 8305 	mrs	r3, IPSR
 8002564:	61bb      	str	r3, [r7, #24]
  return(result);
 8002566:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8002568:	2b00      	cmp	r3, #0
 800256a:	f040 8086 	bne.w	800267a <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800256e:	f3ef 8310 	mrs	r3, PRIMASK
 8002572:	617b      	str	r3, [r7, #20]
  return(result);
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d105      	bne.n	8002586 <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800257a:	f3ef 8311 	mrs	r3, BASEPRI
 800257e:	613b      	str	r3, [r7, #16]
  return(result);
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <osSemaphoreNew+0x3e>
 8002586:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <osSemaphoreNew+0x134>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d075      	beq.n	800267a <osSemaphoreNew+0x12a>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d072      	beq.n	800267a <osSemaphoreNew+0x12a>
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	429a      	cmp	r2, r3
 800259a:	d86e      	bhi.n	800267a <osSemaphoreNew+0x12a>
    mem = -1;
 800259c:	f04f 33ff 	mov.w	r3, #4294967295
 80025a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d015      	beq.n	80025d4 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d006      	beq.n	80025be <osSemaphoreNew+0x6e>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	2b4f      	cmp	r3, #79	; 0x4f
 80025b6:	d902      	bls.n	80025be <osSemaphoreNew+0x6e>
        mem = 1;
 80025b8:	2301      	movs	r3, #1
 80025ba:	623b      	str	r3, [r7, #32]
 80025bc:	e00c      	b.n	80025d8 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d108      	bne.n	80025d8 <osSemaphoreNew+0x88>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d104      	bne.n	80025d8 <osSemaphoreNew+0x88>
          mem = 0;
 80025ce:	2300      	movs	r3, #0
 80025d0:	623b      	str	r3, [r7, #32]
 80025d2:	e001      	b.n	80025d8 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 80025d4:	2300      	movs	r3, #0
 80025d6:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025de:	d04c      	beq.n	800267a <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d128      	bne.n	8002638 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 80025e6:	6a3b      	ldr	r3, [r7, #32]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d10a      	bne.n	8002602 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	2203      	movs	r2, #3
 80025f2:	9200      	str	r2, [sp, #0]
 80025f4:	2200      	movs	r2, #0
 80025f6:	2100      	movs	r1, #0
 80025f8:	2001      	movs	r0, #1
 80025fa:	f000 fa55 	bl	8002aa8 <xQueueGenericCreateStatic>
 80025fe:	6278      	str	r0, [r7, #36]	; 0x24
 8002600:	e005      	b.n	800260e <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8002602:	2203      	movs	r2, #3
 8002604:	2100      	movs	r1, #0
 8002606:	2001      	movs	r0, #1
 8002608:	f000 fad0 	bl	8002bac <xQueueGenericCreate>
 800260c:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	2b00      	cmp	r3, #0
 8002612:	d022      	beq.n	800265a <osSemaphoreNew+0x10a>
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d01f      	beq.n	800265a <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800261a:	2300      	movs	r3, #0
 800261c:	2200      	movs	r2, #0
 800261e:	2100      	movs	r1, #0
 8002620:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002622:	f000 fb9b 	bl	8002d5c <xQueueGenericSend>
 8002626:	4603      	mov	r3, r0
 8002628:	2b01      	cmp	r3, #1
 800262a:	d016      	beq.n	800265a <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800262c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800262e:	f001 f851 	bl	80036d4 <vQueueDelete>
            hSemaphore = NULL;
 8002632:	2300      	movs	r3, #0
 8002634:	627b      	str	r3, [r7, #36]	; 0x24
 8002636:	e010      	b.n	800265a <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 8002638:	6a3b      	ldr	r3, [r7, #32]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d108      	bne.n	8002650 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	461a      	mov	r2, r3
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f000 fb15 	bl	8002c76 <xQueueCreateCountingSemaphoreStatic>
 800264c:	6278      	str	r0, [r7, #36]	; 0x24
 800264e:	e004      	b.n	800265a <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002650:	68b9      	ldr	r1, [r7, #8]
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 fb4a 	bl	8002cec <xQueueCreateCountingSemaphore>
 8002658:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00c      	beq.n	800267a <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <osSemaphoreNew+0x11e>
          name = attr->name;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	e001      	b.n	8002672 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800266e:	2300      	movs	r3, #0
 8002670:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8002672:	69f9      	ldr	r1, [r7, #28]
 8002674:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002676:	f001 f97b 	bl	8003970 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800267a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800267c:	4618      	mov	r0, r3
 800267e:	3728      	adds	r7, #40	; 0x28
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	20000154 	.word	0x20000154

08002688 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8002688:	b580      	push	{r7, lr}
 800268a:	b088      	sub	sp, #32
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002696:	2300      	movs	r3, #0
 8002698:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800269a:	69bb      	ldr	r3, [r7, #24]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d103      	bne.n	80026a8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80026a0:	f06f 0303 	mvn.w	r3, #3
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	e04b      	b.n	8002740 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80026a8:	f3ef 8305 	mrs	r3, IPSR
 80026ac:	617b      	str	r3, [r7, #20]
  return(result);
 80026ae:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10f      	bne.n	80026d4 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80026b4:	f3ef 8310 	mrs	r3, PRIMASK
 80026b8:	613b      	str	r3, [r7, #16]
  return(result);
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d105      	bne.n	80026cc <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80026c0:	f3ef 8311 	mrs	r3, BASEPRI
 80026c4:	60fb      	str	r3, [r7, #12]
  return(result);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d026      	beq.n	800271a <osSemaphoreAcquire+0x92>
 80026cc:	4b1f      	ldr	r3, [pc, #124]	; (800274c <osSemaphoreAcquire+0xc4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d122      	bne.n	800271a <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d003      	beq.n	80026e2 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 80026da:	f06f 0303 	mvn.w	r3, #3
 80026de:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 80026e0:	e02d      	b.n	800273e <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80026e6:	f107 0308 	add.w	r3, r7, #8
 80026ea:	461a      	mov	r2, r3
 80026ec:	2100      	movs	r1, #0
 80026ee:	69b8      	ldr	r0, [r7, #24]
 80026f0:	f000 ff6a 	bl	80035c8 <xQueueReceiveFromISR>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d003      	beq.n	8002702 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 80026fa:	f06f 0302 	mvn.w	r3, #2
 80026fe:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8002700:	e01d      	b.n	800273e <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d01a      	beq.n	800273e <osSemaphoreAcquire+0xb6>
 8002708:	4b11      	ldr	r3, [pc, #68]	; (8002750 <osSemaphoreAcquire+0xc8>)
 800270a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	f3bf 8f4f 	dsb	sy
 8002714:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 8002718:	e011      	b.n	800273e <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800271a:	6839      	ldr	r1, [r7, #0]
 800271c:	69b8      	ldr	r0, [r7, #24]
 800271e:	f000 fe3f 	bl	80033a0 <xQueueSemaphoreTake>
 8002722:	4603      	mov	r3, r0
 8002724:	2b01      	cmp	r3, #1
 8002726:	d00b      	beq.n	8002740 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d003      	beq.n	8002736 <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800272e:	f06f 0301 	mvn.w	r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	e004      	b.n	8002740 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 8002736:	f06f 0302 	mvn.w	r3, #2
 800273a:	61fb      	str	r3, [r7, #28]
 800273c:	e000      	b.n	8002740 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800273e:	bf00      	nop
      }
    }
  }

  return (stat);
 8002740:	69fb      	ldr	r3, [r7, #28]
}
 8002742:	4618      	mov	r0, r3
 8002744:	3720      	adds	r7, #32
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20000154 	.word	0x20000154
 8002750:	e000ed04 	.word	0xe000ed04

08002754 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8002760:	2300      	movs	r3, #0
 8002762:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d103      	bne.n	8002772 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800276a:	f06f 0303 	mvn.w	r3, #3
 800276e:	61fb      	str	r3, [r7, #28]
 8002770:	e03e      	b.n	80027f0 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002772:	f3ef 8305 	mrs	r3, IPSR
 8002776:	617b      	str	r3, [r7, #20]
  return(result);
 8002778:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800277a:	2b00      	cmp	r3, #0
 800277c:	d10f      	bne.n	800279e <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800277e:	f3ef 8310 	mrs	r3, PRIMASK
 8002782:	613b      	str	r3, [r7, #16]
  return(result);
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d105      	bne.n	8002796 <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800278a:	f3ef 8311 	mrs	r3, BASEPRI
 800278e:	60fb      	str	r3, [r7, #12]
  return(result);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d01e      	beq.n	80027d4 <osSemaphoreRelease+0x80>
 8002796:	4b19      	ldr	r3, [pc, #100]	; (80027fc <osSemaphoreRelease+0xa8>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2b02      	cmp	r3, #2
 800279c:	d11a      	bne.n	80027d4 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800279e:	2300      	movs	r3, #0
 80027a0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80027a2:	f107 0308 	add.w	r3, r7, #8
 80027a6:	4619      	mov	r1, r3
 80027a8:	69b8      	ldr	r0, [r7, #24]
 80027aa:	f000 fc7d 	bl	80030a8 <xQueueGiveFromISR>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d003      	beq.n	80027bc <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 80027b4:	f06f 0302 	mvn.w	r3, #2
 80027b8:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80027ba:	e018      	b.n	80027ee <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d015      	beq.n	80027ee <osSemaphoreRelease+0x9a>
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <osSemaphoreRelease+0xac>)
 80027c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80027c8:	601a      	str	r2, [r3, #0]
 80027ca:	f3bf 8f4f 	dsb	sy
 80027ce:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80027d2:	e00c      	b.n	80027ee <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80027d4:	2300      	movs	r3, #0
 80027d6:	2200      	movs	r2, #0
 80027d8:	2100      	movs	r1, #0
 80027da:	69b8      	ldr	r0, [r7, #24]
 80027dc:	f000 fabe 	bl	8002d5c <xQueueGenericSend>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d004      	beq.n	80027f0 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 80027e6:	f06f 0302 	mvn.w	r3, #2
 80027ea:	61fb      	str	r3, [r7, #28]
 80027ec:	e000      	b.n	80027f0 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80027ee:	bf00      	nop
    }
  }

  return (stat);
 80027f0:	69fb      	ldr	r3, [r7, #28]
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3720      	adds	r7, #32
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20000154 	.word	0x20000154
 8002800:	e000ed04 	.word	0xe000ed04

08002804 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	4a07      	ldr	r2, [pc, #28]	; (8002830 <vApplicationGetIdleTaskMemory+0x2c>)
 8002814:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	4a06      	ldr	r2, [pc, #24]	; (8002834 <vApplicationGetIdleTaskMemory+0x30>)
 800281a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2280      	movs	r2, #128	; 0x80
 8002820:	601a      	str	r2, [r3, #0]
}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282c:	4770      	bx	lr
 800282e:	bf00      	nop
 8002830:	20000158 	.word	0x20000158
 8002834:	20000214 	.word	0x20000214

08002838 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002838:	b480      	push	{r7}
 800283a:	b085      	sub	sp, #20
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	4a07      	ldr	r2, [pc, #28]	; (8002864 <vApplicationGetTimerTaskMemory+0x2c>)
 8002848:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	4a06      	ldr	r2, [pc, #24]	; (8002868 <vApplicationGetTimerTaskMemory+0x30>)
 800284e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002856:	601a      	str	r2, [r3, #0]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	20000414 	.word	0x20000414
 8002868:	200004d0 	.word	0x200004d0

0800286c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800286c:	b480      	push	{r7}
 800286e:	b083      	sub	sp, #12
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	f103 0208 	add.w	r2, r3, #8
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f04f 32ff 	mov.w	r2, #4294967295
 8002884:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f103 0208 	add.w	r2, r3, #8
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	f103 0208 	add.w	r2, r3, #8
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80028a0:	bf00      	nop
 80028a2:	370c      	adds	r7, #12
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80028c6:	b480      	push	{r7}
 80028c8:	b085      	sub	sp, #20
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
 80028ce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	689a      	ldr	r2, [r3, #8]
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	683a      	ldr	r2, [r7, #0]
 80028f0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	1c5a      	adds	r2, r3, #1
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	601a      	str	r2, [r3, #0]
}
 8002902:	bf00      	nop
 8002904:	3714      	adds	r7, #20
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr

0800290e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800290e:	b480      	push	{r7}
 8002910:	b085      	sub	sp, #20
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
 8002916:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002924:	d103      	bne.n	800292e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	691b      	ldr	r3, [r3, #16]
 800292a:	60fb      	str	r3, [r7, #12]
 800292c:	e00c      	b.n	8002948 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	3308      	adds	r3, #8
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	e002      	b.n	800293c <vListInsert+0x2e>
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	685b      	ldr	r3, [r3, #4]
 800293a:	60fb      	str	r3, [r7, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	68ba      	ldr	r2, [r7, #8]
 8002944:	429a      	cmp	r2, r3
 8002946:	d2f6      	bcs.n	8002936 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	685a      	ldr	r2, [r3, #4]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	1c5a      	adds	r2, r3, #1
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	601a      	str	r2, [r3, #0]
}
 8002974:	bf00      	nop
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	691b      	ldr	r3, [r3, #16]
 800298c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6892      	ldr	r2, [r2, #8]
 8002996:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6852      	ldr	r2, [r2, #4]
 80029a0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d103      	bne.n	80029b4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689a      	ldr	r2, [r3, #8]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	1e5a      	subs	r2, r3, #1
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3714      	adds	r7, #20
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d10c      	bne.n	8002a02 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80029e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ec:	b672      	cpsid	i
 80029ee:	f383 8811 	msr	BASEPRI, r3
 80029f2:	f3bf 8f6f 	isb	sy
 80029f6:	f3bf 8f4f 	dsb	sy
 80029fa:	b662      	cpsie	i
 80029fc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80029fe:	bf00      	nop
 8002a00:	e7fe      	b.n	8002a00 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8002a02:	f002 fcf3 	bl	80053ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a0e:	68f9      	ldr	r1, [r7, #12]
 8002a10:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a12:	fb01 f303 	mul.w	r3, r1, r3
 8002a16:	441a      	add	r2, r3
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a32:	3b01      	subs	r3, #1
 8002a34:	68f9      	ldr	r1, [r7, #12]
 8002a36:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002a38:	fb01 f303 	mul.w	r3, r1, r3
 8002a3c:	441a      	add	r2, r3
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	22ff      	movs	r2, #255	; 0xff
 8002a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	22ff      	movs	r2, #255	; 0xff
 8002a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d114      	bne.n	8002a82 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	691b      	ldr	r3, [r3, #16]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01a      	beq.n	8002a96 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	3310      	adds	r3, #16
 8002a64:	4618      	mov	r0, r3
 8002a66:	f001 fca9 	bl	80043bc <xTaskRemoveFromEventList>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d012      	beq.n	8002a96 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002a70:	4b0c      	ldr	r3, [pc, #48]	; (8002aa4 <xQueueGenericReset+0xd0>)
 8002a72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	f3bf 8f4f 	dsb	sy
 8002a7c:	f3bf 8f6f 	isb	sy
 8002a80:	e009      	b.n	8002a96 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	3310      	adds	r3, #16
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fef0 	bl	800286c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	3324      	adds	r3, #36	; 0x24
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff feeb 	bl	800286c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002a96:	f002 fcdd 	bl	8005454 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002a9a:	2301      	movs	r3, #1
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	e000ed04 	.word	0xe000ed04

08002aa8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b08e      	sub	sp, #56	; 0x38
 8002aac:	af02      	add	r7, sp, #8
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10c      	bne.n	8002ad6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8002abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ac0:	b672      	cpsid	i
 8002ac2:	f383 8811 	msr	BASEPRI, r3
 8002ac6:	f3bf 8f6f 	isb	sy
 8002aca:	f3bf 8f4f 	dsb	sy
 8002ace:	b662      	cpsie	i
 8002ad0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002ad2:	bf00      	nop
 8002ad4:	e7fe      	b.n	8002ad4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d10c      	bne.n	8002af6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8002adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae0:	b672      	cpsid	i
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	b662      	cpsie	i
 8002af0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002af2:	bf00      	nop
 8002af4:	e7fe      	b.n	8002af4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d002      	beq.n	8002b02 <xQueueGenericCreateStatic+0x5a>
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <xQueueGenericCreateStatic+0x5e>
 8002b02:	2301      	movs	r3, #1
 8002b04:	e000      	b.n	8002b08 <xQueueGenericCreateStatic+0x60>
 8002b06:	2300      	movs	r3, #0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10c      	bne.n	8002b26 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8002b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b10:	b672      	cpsid	i
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	b662      	cpsie	i
 8002b20:	623b      	str	r3, [r7, #32]
}
 8002b22:	bf00      	nop
 8002b24:	e7fe      	b.n	8002b24 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d102      	bne.n	8002b32 <xQueueGenericCreateStatic+0x8a>
 8002b2c:	68bb      	ldr	r3, [r7, #8]
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <xQueueGenericCreateStatic+0x8e>
 8002b32:	2301      	movs	r3, #1
 8002b34:	e000      	b.n	8002b38 <xQueueGenericCreateStatic+0x90>
 8002b36:	2300      	movs	r3, #0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10c      	bne.n	8002b56 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8002b3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b40:	b672      	cpsid	i
 8002b42:	f383 8811 	msr	BASEPRI, r3
 8002b46:	f3bf 8f6f 	isb	sy
 8002b4a:	f3bf 8f4f 	dsb	sy
 8002b4e:	b662      	cpsie	i
 8002b50:	61fb      	str	r3, [r7, #28]
}
 8002b52:	bf00      	nop
 8002b54:	e7fe      	b.n	8002b54 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002b56:	2350      	movs	r3, #80	; 0x50
 8002b58:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b50      	cmp	r3, #80	; 0x50
 8002b5e:	d00c      	beq.n	8002b7a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8002b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b64:	b672      	cpsid	i
 8002b66:	f383 8811 	msr	BASEPRI, r3
 8002b6a:	f3bf 8f6f 	isb	sy
 8002b6e:	f3bf 8f4f 	dsb	sy
 8002b72:	b662      	cpsie	i
 8002b74:	61bb      	str	r3, [r7, #24]
}
 8002b76:	bf00      	nop
 8002b78:	e7fe      	b.n	8002b78 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002b7a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00d      	beq.n	8002ba2 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002b86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b8e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	68f8      	ldr	r0, [r7, #12]
 8002b9e:	f000 f847 	bl	8002c30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3730      	adds	r7, #48	; 0x30
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	4613      	mov	r3, r2
 8002bb8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d10c      	bne.n	8002bda <xQueueGenericCreate+0x2e>
	__asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc4:	b672      	cpsid	i
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	b662      	cpsie	i
 8002bd4:	613b      	str	r3, [r7, #16]
}
 8002bd6:	bf00      	nop
 8002bd8:	e7fe      	b.n	8002bd8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d102      	bne.n	8002be6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61fb      	str	r3, [r7, #28]
 8002be4:	e004      	b.n	8002bf0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	68ba      	ldr	r2, [r7, #8]
 8002bea:	fb02 f303 	mul.w	r3, r2, r3
 8002bee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	3350      	adds	r3, #80	; 0x50
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f002 fd25 	bl	8005644 <pvPortMalloc>
 8002bfa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d011      	beq.n	8002c26 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	3350      	adds	r3, #80	; 0x50
 8002c0a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c14:	79fa      	ldrb	r2, [r7, #7]
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	9300      	str	r3, [sp, #0]
 8002c1a:	4613      	mov	r3, r2
 8002c1c:	697a      	ldr	r2, [r7, #20]
 8002c1e:	68b9      	ldr	r1, [r7, #8]
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f000 f805 	bl	8002c30 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002c26:	69bb      	ldr	r3, [r7, #24]
	}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3720      	adds	r7, #32
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	60f8      	str	r0, [r7, #12]
 8002c38:	60b9      	str	r1, [r7, #8]
 8002c3a:	607a      	str	r2, [r7, #4]
 8002c3c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d103      	bne.n	8002c4c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e002      	b.n	8002c52 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	68fa      	ldr	r2, [r7, #12]
 8002c56:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002c58:	69bb      	ldr	r3, [r7, #24]
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c5e:	2101      	movs	r1, #1
 8002c60:	69b8      	ldr	r0, [r7, #24]
 8002c62:	f7ff feb7 	bl	80029d4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002c6e:	bf00      	nop
 8002c70:	3710      	adds	r7, #16
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b08a      	sub	sp, #40	; 0x28
 8002c7a:	af02      	add	r7, sp, #8
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d10c      	bne.n	8002ca2 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 8002c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c8c:	b672      	cpsid	i
 8002c8e:	f383 8811 	msr	BASEPRI, r3
 8002c92:	f3bf 8f6f 	isb	sy
 8002c96:	f3bf 8f4f 	dsb	sy
 8002c9a:	b662      	cpsie	i
 8002c9c:	61bb      	str	r3, [r7, #24]
}
 8002c9e:	bf00      	nop
 8002ca0:	e7fe      	b.n	8002ca0 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d90c      	bls.n	8002cc4 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 8002caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cae:	b672      	cpsid	i
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	b662      	cpsie	i
 8002cbe:	617b      	str	r3, [r7, #20]
}
 8002cc0:	bf00      	nop
 8002cc2:	e7fe      	b.n	8002cc2 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	9300      	str	r3, [sp, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	2100      	movs	r1, #0
 8002cce:	68f8      	ldr	r0, [r7, #12]
 8002cd0:	f7ff feea 	bl	8002aa8 <xQueueGenericCreateStatic>
 8002cd4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	68ba      	ldr	r2, [r7, #8]
 8002ce0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002ce2:	69fb      	ldr	r3, [r7, #28]
	}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3720      	adds	r7, #32
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10c      	bne.n	8002d16 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	b672      	cpsid	i
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	b662      	cpsie	i
 8002d10:	613b      	str	r3, [r7, #16]
}
 8002d12:	bf00      	nop
 8002d14:	e7fe      	b.n	8002d14 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002d16:	683a      	ldr	r2, [r7, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d90c      	bls.n	8002d38 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 8002d1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d22:	b672      	cpsid	i
 8002d24:	f383 8811 	msr	BASEPRI, r3
 8002d28:	f3bf 8f6f 	isb	sy
 8002d2c:	f3bf 8f4f 	dsb	sy
 8002d30:	b662      	cpsie	i
 8002d32:	60fb      	str	r3, [r7, #12]
}
 8002d34:	bf00      	nop
 8002d36:	e7fe      	b.n	8002d36 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002d38:	2202      	movs	r2, #2
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f7ff ff35 	bl	8002bac <xQueueGenericCreate>
 8002d42:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d002      	beq.n	8002d50 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002d50:	697b      	ldr	r3, [r7, #20]
	}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3718      	adds	r7, #24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08e      	sub	sp, #56	; 0x38
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d10c      	bne.n	8002d92 <xQueueGenericSend+0x36>
	__asm volatile
 8002d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7c:	b672      	cpsid	i
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	b662      	cpsie	i
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002d8e:	bf00      	nop
 8002d90:	e7fe      	b.n	8002d90 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d92:	68bb      	ldr	r3, [r7, #8]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d103      	bne.n	8002da0 <xQueueGenericSend+0x44>
 8002d98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d101      	bne.n	8002da4 <xQueueGenericSend+0x48>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e000      	b.n	8002da6 <xQueueGenericSend+0x4a>
 8002da4:	2300      	movs	r3, #0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d10c      	bne.n	8002dc4 <xQueueGenericSend+0x68>
	__asm volatile
 8002daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dae:	b672      	cpsid	i
 8002db0:	f383 8811 	msr	BASEPRI, r3
 8002db4:	f3bf 8f6f 	isb	sy
 8002db8:	f3bf 8f4f 	dsb	sy
 8002dbc:	b662      	cpsie	i
 8002dbe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002dc0:	bf00      	nop
 8002dc2:	e7fe      	b.n	8002dc2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	2b02      	cmp	r3, #2
 8002dc8:	d103      	bne.n	8002dd2 <xQueueGenericSend+0x76>
 8002dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dce:	2b01      	cmp	r3, #1
 8002dd0:	d101      	bne.n	8002dd6 <xQueueGenericSend+0x7a>
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e000      	b.n	8002dd8 <xQueueGenericSend+0x7c>
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d10c      	bne.n	8002df6 <xQueueGenericSend+0x9a>
	__asm volatile
 8002ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002de0:	b672      	cpsid	i
 8002de2:	f383 8811 	msr	BASEPRI, r3
 8002de6:	f3bf 8f6f 	isb	sy
 8002dea:	f3bf 8f4f 	dsb	sy
 8002dee:	b662      	cpsie	i
 8002df0:	623b      	str	r3, [r7, #32]
}
 8002df2:	bf00      	nop
 8002df4:	e7fe      	b.n	8002df4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002df6:	f001 fcab 	bl	8004750 <xTaskGetSchedulerState>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <xQueueGenericSend+0xaa>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <xQueueGenericSend+0xae>
 8002e06:	2301      	movs	r3, #1
 8002e08:	e000      	b.n	8002e0c <xQueueGenericSend+0xb0>
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d10c      	bne.n	8002e2a <xQueueGenericSend+0xce>
	__asm volatile
 8002e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e14:	b672      	cpsid	i
 8002e16:	f383 8811 	msr	BASEPRI, r3
 8002e1a:	f3bf 8f6f 	isb	sy
 8002e1e:	f3bf 8f4f 	dsb	sy
 8002e22:	b662      	cpsie	i
 8002e24:	61fb      	str	r3, [r7, #28]
}
 8002e26:	bf00      	nop
 8002e28:	e7fe      	b.n	8002e28 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e2a:	f002 fadf 	bl	80053ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e36:	429a      	cmp	r2, r3
 8002e38:	d302      	bcc.n	8002e40 <xQueueGenericSend+0xe4>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b02      	cmp	r3, #2
 8002e3e:	d129      	bne.n	8002e94 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002e40:	683a      	ldr	r2, [r7, #0]
 8002e42:	68b9      	ldr	r1, [r7, #8]
 8002e44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002e46:	f000 fc82 	bl	800374e <prvCopyDataToQueue>
 8002e4a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d010      	beq.n	8002e76 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e56:	3324      	adds	r3, #36	; 0x24
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f001 faaf 	bl	80043bc <xTaskRemoveFromEventList>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002e64:	4b3f      	ldr	r3, [pc, #252]	; (8002f64 <xQueueGenericSend+0x208>)
 8002e66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e6a:	601a      	str	r2, [r3, #0]
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	e00a      	b.n	8002e8c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002e76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002e7c:	4b39      	ldr	r3, [pc, #228]	; (8002f64 <xQueueGenericSend+0x208>)
 8002e7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e82:	601a      	str	r2, [r3, #0]
 8002e84:	f3bf 8f4f 	dsb	sy
 8002e88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002e8c:	f002 fae2 	bl	8005454 <vPortExitCritical>
				return pdPASS;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e063      	b.n	8002f5c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d103      	bne.n	8002ea2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e9a:	f002 fadb 	bl	8005454 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	e05c      	b.n	8002f5c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002ea2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d106      	bne.n	8002eb6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ea8:	f107 0314 	add.w	r3, r7, #20
 8002eac:	4618      	mov	r0, r3
 8002eae:	f001 faeb 	bl	8004488 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002eb6:	f002 facd 	bl	8005454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002eba:	f001 f84b 	bl	8003f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ebe:	f002 fa95 	bl	80053ec <vPortEnterCritical>
 8002ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ec8:	b25b      	sxtb	r3, r3
 8002eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ece:	d103      	bne.n	8002ed8 <xQueueGenericSend+0x17c>
 8002ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ede:	b25b      	sxtb	r3, r3
 8002ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ee4:	d103      	bne.n	8002eee <xQueueGenericSend+0x192>
 8002ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ee8:	2200      	movs	r2, #0
 8002eea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002eee:	f002 fab1 	bl	8005454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ef2:	1d3a      	adds	r2, r7, #4
 8002ef4:	f107 0314 	add.w	r3, r7, #20
 8002ef8:	4611      	mov	r1, r2
 8002efa:	4618      	mov	r0, r3
 8002efc:	f001 fada 	bl	80044b4 <xTaskCheckForTimeOut>
 8002f00:	4603      	mov	r3, r0
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d124      	bne.n	8002f50 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002f06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f08:	f000 fd19 	bl	800393e <prvIsQueueFull>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d018      	beq.n	8002f44 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002f12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f14:	3310      	adds	r3, #16
 8002f16:	687a      	ldr	r2, [r7, #4]
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 f9fa 	bl	8004314 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002f20:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f22:	f000 fca4 	bl	800386e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002f26:	f001 f823 	bl	8003f70 <xTaskResumeAll>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f47f af7c 	bne.w	8002e2a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8002f32:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <xQueueGenericSend+0x208>)
 8002f34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f38:	601a      	str	r2, [r3, #0]
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	f3bf 8f6f 	isb	sy
 8002f42:	e772      	b.n	8002e2a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002f44:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f46:	f000 fc92 	bl	800386e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f4a:	f001 f811 	bl	8003f70 <xTaskResumeAll>
 8002f4e:	e76c      	b.n	8002e2a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002f50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f52:	f000 fc8c 	bl	800386e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f56:	f001 f80b 	bl	8003f70 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002f5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3738      	adds	r7, #56	; 0x38
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	e000ed04 	.word	0xe000ed04

08002f68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b08e      	sub	sp, #56	; 0x38
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d10c      	bne.n	8002f9a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f84:	b672      	cpsid	i
 8002f86:	f383 8811 	msr	BASEPRI, r3
 8002f8a:	f3bf 8f6f 	isb	sy
 8002f8e:	f3bf 8f4f 	dsb	sy
 8002f92:	b662      	cpsie	i
 8002f94:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002f96:	bf00      	nop
 8002f98:	e7fe      	b.n	8002f98 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d103      	bne.n	8002fa8 <xQueueGenericSendFromISR+0x40>
 8002fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d101      	bne.n	8002fac <xQueueGenericSendFromISR+0x44>
 8002fa8:	2301      	movs	r3, #1
 8002faa:	e000      	b.n	8002fae <xQueueGenericSendFromISR+0x46>
 8002fac:	2300      	movs	r3, #0
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d10c      	bne.n	8002fcc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fb6:	b672      	cpsid	i
 8002fb8:	f383 8811 	msr	BASEPRI, r3
 8002fbc:	f3bf 8f6f 	isb	sy
 8002fc0:	f3bf 8f4f 	dsb	sy
 8002fc4:	b662      	cpsie	i
 8002fc6:	623b      	str	r3, [r7, #32]
}
 8002fc8:	bf00      	nop
 8002fca:	e7fe      	b.n	8002fca <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d103      	bne.n	8002fda <xQueueGenericSendFromISR+0x72>
 8002fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <xQueueGenericSendFromISR+0x76>
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e000      	b.n	8002fe0 <xQueueGenericSendFromISR+0x78>
 8002fde:	2300      	movs	r3, #0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10c      	bne.n	8002ffe <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8002fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fe8:	b672      	cpsid	i
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	b662      	cpsie	i
 8002ff8:	61fb      	str	r3, [r7, #28]
}
 8002ffa:	bf00      	nop
 8002ffc:	e7fe      	b.n	8002ffc <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002ffe:	f002 fadd 	bl	80055bc <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003002:	f3ef 8211 	mrs	r2, BASEPRI
 8003006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800300a:	b672      	cpsid	i
 800300c:	f383 8811 	msr	BASEPRI, r3
 8003010:	f3bf 8f6f 	isb	sy
 8003014:	f3bf 8f4f 	dsb	sy
 8003018:	b662      	cpsie	i
 800301a:	61ba      	str	r2, [r7, #24]
 800301c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800301e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003020:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302a:	429a      	cmp	r2, r3
 800302c:	d302      	bcc.n	8003034 <xQueueGenericSendFromISR+0xcc>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b02      	cmp	r3, #2
 8003032:	d12c      	bne.n	800308e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003034:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003036:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800303a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800303e:	683a      	ldr	r2, [r7, #0]
 8003040:	68b9      	ldr	r1, [r7, #8]
 8003042:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003044:	f000 fb83 	bl	800374e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003048:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800304c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003050:	d112      	bne.n	8003078 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	2b00      	cmp	r3, #0
 8003058:	d016      	beq.n	8003088 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800305a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800305c:	3324      	adds	r3, #36	; 0x24
 800305e:	4618      	mov	r0, r3
 8003060:	f001 f9ac 	bl	80043bc <xTaskRemoveFromEventList>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00e      	beq.n	8003088 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d00b      	beq.n	8003088 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2201      	movs	r2, #1
 8003074:	601a      	str	r2, [r3, #0]
 8003076:	e007      	b.n	8003088 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003078:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800307c:	3301      	adds	r3, #1
 800307e:	b2db      	uxtb	r3, r3
 8003080:	b25a      	sxtb	r2, r3
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003088:	2301      	movs	r3, #1
 800308a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800308c:	e001      	b.n	8003092 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800308e:	2300      	movs	r3, #0
 8003090:	637b      	str	r3, [r7, #52]	; 0x34
 8003092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003094:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800309c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800309e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80030a0:	4618      	mov	r0, r3
 80030a2:	3738      	adds	r7, #56	; 0x38
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}

080030a8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	b08e      	sub	sp, #56	; 0x38
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10c      	bne.n	80030d6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	b672      	cpsid	i
 80030c2:	f383 8811 	msr	BASEPRI, r3
 80030c6:	f3bf 8f6f 	isb	sy
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	b662      	cpsie	i
 80030d0:	623b      	str	r3, [r7, #32]
}
 80030d2:	bf00      	nop
 80030d4:	e7fe      	b.n	80030d4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80030d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00c      	beq.n	80030f8 <xQueueGiveFromISR+0x50>
	__asm volatile
 80030de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e2:	b672      	cpsid	i
 80030e4:	f383 8811 	msr	BASEPRI, r3
 80030e8:	f3bf 8f6f 	isb	sy
 80030ec:	f3bf 8f4f 	dsb	sy
 80030f0:	b662      	cpsie	i
 80030f2:	61fb      	str	r3, [r7, #28]
}
 80030f4:	bf00      	nop
 80030f6:	e7fe      	b.n	80030f6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80030f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d103      	bne.n	8003108 <xQueueGiveFromISR+0x60>
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <xQueueGiveFromISR+0x64>
 8003108:	2301      	movs	r3, #1
 800310a:	e000      	b.n	800310e <xQueueGiveFromISR+0x66>
 800310c:	2300      	movs	r3, #0
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10c      	bne.n	800312c <xQueueGiveFromISR+0x84>
	__asm volatile
 8003112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003116:	b672      	cpsid	i
 8003118:	f383 8811 	msr	BASEPRI, r3
 800311c:	f3bf 8f6f 	isb	sy
 8003120:	f3bf 8f4f 	dsb	sy
 8003124:	b662      	cpsie	i
 8003126:	61bb      	str	r3, [r7, #24]
}
 8003128:	bf00      	nop
 800312a:	e7fe      	b.n	800312a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800312c:	f002 fa46 	bl	80055bc <vPortValidateInterruptPriority>
	__asm volatile
 8003130:	f3ef 8211 	mrs	r2, BASEPRI
 8003134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003138:	b672      	cpsid	i
 800313a:	f383 8811 	msr	BASEPRI, r3
 800313e:	f3bf 8f6f 	isb	sy
 8003142:	f3bf 8f4f 	dsb	sy
 8003146:	b662      	cpsie	i
 8003148:	617a      	str	r2, [r7, #20]
 800314a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800314c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003154:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800315c:	429a      	cmp	r2, r3
 800315e:	d22b      	bcs.n	80031b8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003166:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800316a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800316c:	1c5a      	adds	r2, r3, #1
 800316e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003170:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003172:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317a:	d112      	bne.n	80031a2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800317c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800317e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003180:	2b00      	cmp	r3, #0
 8003182:	d016      	beq.n	80031b2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003186:	3324      	adds	r3, #36	; 0x24
 8003188:	4618      	mov	r0, r3
 800318a:	f001 f917 	bl	80043bc <xTaskRemoveFromEventList>
 800318e:	4603      	mov	r3, r0
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00e      	beq.n	80031b2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00b      	beq.n	80031b2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	2201      	movs	r2, #1
 800319e:	601a      	str	r2, [r3, #0]
 80031a0:	e007      	b.n	80031b2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80031a6:	3301      	adds	r3, #1
 80031a8:	b2db      	uxtb	r3, r3
 80031aa:	b25a      	sxtb	r2, r3
 80031ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80031b2:	2301      	movs	r3, #1
 80031b4:	637b      	str	r3, [r7, #52]	; 0x34
 80031b6:	e001      	b.n	80031bc <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031b8:	2300      	movs	r3, #0
 80031ba:	637b      	str	r3, [r7, #52]	; 0x34
 80031bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031be:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f383 8811 	msr	BASEPRI, r3
}
 80031c6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3738      	adds	r7, #56	; 0x38
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b08c      	sub	sp, #48	; 0x30
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80031e0:	2300      	movs	r3, #0
 80031e2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10c      	bne.n	8003208 <xQueueReceive+0x34>
	__asm volatile
 80031ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f2:	b672      	cpsid	i
 80031f4:	f383 8811 	msr	BASEPRI, r3
 80031f8:	f3bf 8f6f 	isb	sy
 80031fc:	f3bf 8f4f 	dsb	sy
 8003200:	b662      	cpsie	i
 8003202:	623b      	str	r3, [r7, #32]
}
 8003204:	bf00      	nop
 8003206:	e7fe      	b.n	8003206 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003208:	68bb      	ldr	r3, [r7, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d103      	bne.n	8003216 <xQueueReceive+0x42>
 800320e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <xQueueReceive+0x46>
 8003216:	2301      	movs	r3, #1
 8003218:	e000      	b.n	800321c <xQueueReceive+0x48>
 800321a:	2300      	movs	r3, #0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d10c      	bne.n	800323a <xQueueReceive+0x66>
	__asm volatile
 8003220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003224:	b672      	cpsid	i
 8003226:	f383 8811 	msr	BASEPRI, r3
 800322a:	f3bf 8f6f 	isb	sy
 800322e:	f3bf 8f4f 	dsb	sy
 8003232:	b662      	cpsie	i
 8003234:	61fb      	str	r3, [r7, #28]
}
 8003236:	bf00      	nop
 8003238:	e7fe      	b.n	8003238 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800323a:	f001 fa89 	bl	8004750 <xTaskGetSchedulerState>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d102      	bne.n	800324a <xQueueReceive+0x76>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d101      	bne.n	800324e <xQueueReceive+0x7a>
 800324a:	2301      	movs	r3, #1
 800324c:	e000      	b.n	8003250 <xQueueReceive+0x7c>
 800324e:	2300      	movs	r3, #0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10c      	bne.n	800326e <xQueueReceive+0x9a>
	__asm volatile
 8003254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003258:	b672      	cpsid	i
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	b662      	cpsie	i
 8003268:	61bb      	str	r3, [r7, #24]
}
 800326a:	bf00      	nop
 800326c:	e7fe      	b.n	800326c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800326e:	f002 f8bd 	bl	80053ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003276:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	2b00      	cmp	r3, #0
 800327c:	d01f      	beq.n	80032be <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003282:	f000 face 	bl	8003822 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003288:	1e5a      	subs	r2, r3, #1
 800328a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800328c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800328e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003290:	691b      	ldr	r3, [r3, #16]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00f      	beq.n	80032b6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003298:	3310      	adds	r3, #16
 800329a:	4618      	mov	r0, r3
 800329c:	f001 f88e 	bl	80043bc <xTaskRemoveFromEventList>
 80032a0:	4603      	mov	r3, r0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d007      	beq.n	80032b6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032a6:	4b3d      	ldr	r3, [pc, #244]	; (800339c <xQueueReceive+0x1c8>)
 80032a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80032ac:	601a      	str	r2, [r3, #0]
 80032ae:	f3bf 8f4f 	dsb	sy
 80032b2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032b6:	f002 f8cd 	bl	8005454 <vPortExitCritical>
				return pdPASS;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e069      	b.n	8003392 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d103      	bne.n	80032cc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032c4:	f002 f8c6 	bl	8005454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032c8:	2300      	movs	r3, #0
 80032ca:	e062      	b.n	8003392 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d106      	bne.n	80032e0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032d2:	f107 0310 	add.w	r3, r7, #16
 80032d6:	4618      	mov	r0, r3
 80032d8:	f001 f8d6 	bl	8004488 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032dc:	2301      	movs	r3, #1
 80032de:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032e0:	f002 f8b8 	bl	8005454 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032e4:	f000 fe36 	bl	8003f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032e8:	f002 f880 	bl	80053ec <vPortEnterCritical>
 80032ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032f2:	b25b      	sxtb	r3, r3
 80032f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f8:	d103      	bne.n	8003302 <xQueueReceive+0x12e>
 80032fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003308:	b25b      	sxtb	r3, r3
 800330a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330e:	d103      	bne.n	8003318 <xQueueReceive+0x144>
 8003310:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003312:	2200      	movs	r2, #0
 8003314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003318:	f002 f89c 	bl	8005454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800331c:	1d3a      	adds	r2, r7, #4
 800331e:	f107 0310 	add.w	r3, r7, #16
 8003322:	4611      	mov	r1, r2
 8003324:	4618      	mov	r0, r3
 8003326:	f001 f8c5 	bl	80044b4 <xTaskCheckForTimeOut>
 800332a:	4603      	mov	r3, r0
 800332c:	2b00      	cmp	r3, #0
 800332e:	d123      	bne.n	8003378 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003332:	f000 faee 	bl	8003912 <prvIsQueueEmpty>
 8003336:	4603      	mov	r3, r0
 8003338:	2b00      	cmp	r3, #0
 800333a:	d017      	beq.n	800336c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800333c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333e:	3324      	adds	r3, #36	; 0x24
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	4611      	mov	r1, r2
 8003344:	4618      	mov	r0, r3
 8003346:	f000 ffe5 	bl	8004314 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800334a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800334c:	f000 fa8f 	bl	800386e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003350:	f000 fe0e 	bl	8003f70 <xTaskResumeAll>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d189      	bne.n	800326e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800335a:	4b10      	ldr	r3, [pc, #64]	; (800339c <xQueueReceive+0x1c8>)
 800335c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003360:	601a      	str	r2, [r3, #0]
 8003362:	f3bf 8f4f 	dsb	sy
 8003366:	f3bf 8f6f 	isb	sy
 800336a:	e780      	b.n	800326e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800336c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800336e:	f000 fa7e 	bl	800386e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003372:	f000 fdfd 	bl	8003f70 <xTaskResumeAll>
 8003376:	e77a      	b.n	800326e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800337a:	f000 fa78 	bl	800386e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800337e:	f000 fdf7 	bl	8003f70 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003382:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003384:	f000 fac5 	bl	8003912 <prvIsQueueEmpty>
 8003388:	4603      	mov	r3, r0
 800338a:	2b00      	cmp	r3, #0
 800338c:	f43f af6f 	beq.w	800326e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003390:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003392:	4618      	mov	r0, r3
 8003394:	3730      	adds	r7, #48	; 0x30
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
 800339a:	bf00      	nop
 800339c:	e000ed04 	.word	0xe000ed04

080033a0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b08e      	sub	sp, #56	; 0x38
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80033aa:	2300      	movs	r3, #0
 80033ac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80033b2:	2300      	movs	r3, #0
 80033b4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80033b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10c      	bne.n	80033d6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 80033bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033c0:	b672      	cpsid	i
 80033c2:	f383 8811 	msr	BASEPRI, r3
 80033c6:	f3bf 8f6f 	isb	sy
 80033ca:	f3bf 8f4f 	dsb	sy
 80033ce:	b662      	cpsie	i
 80033d0:	623b      	str	r3, [r7, #32]
}
 80033d2:	bf00      	nop
 80033d4:	e7fe      	b.n	80033d4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80033d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00c      	beq.n	80033f8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 80033de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033e2:	b672      	cpsid	i
 80033e4:	f383 8811 	msr	BASEPRI, r3
 80033e8:	f3bf 8f6f 	isb	sy
 80033ec:	f3bf 8f4f 	dsb	sy
 80033f0:	b662      	cpsie	i
 80033f2:	61fb      	str	r3, [r7, #28]
}
 80033f4:	bf00      	nop
 80033f6:	e7fe      	b.n	80033f6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80033f8:	f001 f9aa 	bl	8004750 <xTaskGetSchedulerState>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d102      	bne.n	8003408 <xQueueSemaphoreTake+0x68>
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <xQueueSemaphoreTake+0x6c>
 8003408:	2301      	movs	r3, #1
 800340a:	e000      	b.n	800340e <xQueueSemaphoreTake+0x6e>
 800340c:	2300      	movs	r3, #0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10c      	bne.n	800342c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8003412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003416:	b672      	cpsid	i
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	b662      	cpsie	i
 8003426:	61bb      	str	r3, [r7, #24]
}
 8003428:	bf00      	nop
 800342a:	e7fe      	b.n	800342a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800342c:	f001 ffde 	bl	80053ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003434:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003438:	2b00      	cmp	r3, #0
 800343a:	d024      	beq.n	8003486 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800343c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800343e:	1e5a      	subs	r2, r3, #1
 8003440:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003442:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d104      	bne.n	8003456 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800344c:	f001 fafe 	bl	8004a4c <pvTaskIncrementMutexHeldCount>
 8003450:	4602      	mov	r2, r0
 8003452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003454:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00f      	beq.n	800347e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800345e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003460:	3310      	adds	r3, #16
 8003462:	4618      	mov	r0, r3
 8003464:	f000 ffaa 	bl	80043bc <xTaskRemoveFromEventList>
 8003468:	4603      	mov	r3, r0
 800346a:	2b00      	cmp	r3, #0
 800346c:	d007      	beq.n	800347e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800346e:	4b55      	ldr	r3, [pc, #340]	; (80035c4 <xQueueSemaphoreTake+0x224>)
 8003470:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003474:	601a      	str	r2, [r3, #0]
 8003476:	f3bf 8f4f 	dsb	sy
 800347a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800347e:	f001 ffe9 	bl	8005454 <vPortExitCritical>
				return pdPASS;
 8003482:	2301      	movs	r3, #1
 8003484:	e099      	b.n	80035ba <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d113      	bne.n	80034b4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800348c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00c      	beq.n	80034ac <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8003492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003496:	b672      	cpsid	i
 8003498:	f383 8811 	msr	BASEPRI, r3
 800349c:	f3bf 8f6f 	isb	sy
 80034a0:	f3bf 8f4f 	dsb	sy
 80034a4:	b662      	cpsie	i
 80034a6:	617b      	str	r3, [r7, #20]
}
 80034a8:	bf00      	nop
 80034aa:	e7fe      	b.n	80034aa <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80034ac:	f001 ffd2 	bl	8005454 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e082      	b.n	80035ba <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80034b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d106      	bne.n	80034c8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80034ba:	f107 030c 	add.w	r3, r7, #12
 80034be:	4618      	mov	r0, r3
 80034c0:	f000 ffe2 	bl	8004488 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80034c4:	2301      	movs	r3, #1
 80034c6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80034c8:	f001 ffc4 	bl	8005454 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80034cc:	f000 fd42 	bl	8003f54 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80034d0:	f001 ff8c 	bl	80053ec <vPortEnterCritical>
 80034d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80034da:	b25b      	sxtb	r3, r3
 80034dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034e0:	d103      	bne.n	80034ea <xQueueSemaphoreTake+0x14a>
 80034e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e4:	2200      	movs	r2, #0
 80034e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034f0:	b25b      	sxtb	r3, r3
 80034f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f6:	d103      	bne.n	8003500 <xQueueSemaphoreTake+0x160>
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fa:	2200      	movs	r2, #0
 80034fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003500:	f001 ffa8 	bl	8005454 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003504:	463a      	mov	r2, r7
 8003506:	f107 030c 	add.w	r3, r7, #12
 800350a:	4611      	mov	r1, r2
 800350c:	4618      	mov	r0, r3
 800350e:	f000 ffd1 	bl	80044b4 <xTaskCheckForTimeOut>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d132      	bne.n	800357e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003518:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800351a:	f000 f9fa 	bl	8003912 <prvIsQueueEmpty>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d026      	beq.n	8003572 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d109      	bne.n	8003540 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800352c:	f001 ff5e 	bl	80053ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003532:	689b      	ldr	r3, [r3, #8]
 8003534:	4618      	mov	r0, r3
 8003536:	f001 f929 	bl	800478c <xTaskPriorityInherit>
 800353a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800353c:	f001 ff8a 	bl	8005454 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003542:	3324      	adds	r3, #36	; 0x24
 8003544:	683a      	ldr	r2, [r7, #0]
 8003546:	4611      	mov	r1, r2
 8003548:	4618      	mov	r0, r3
 800354a:	f000 fee3 	bl	8004314 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800354e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003550:	f000 f98d 	bl	800386e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003554:	f000 fd0c 	bl	8003f70 <xTaskResumeAll>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	f47f af66 	bne.w	800342c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8003560:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <xQueueSemaphoreTake+0x224>)
 8003562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003566:	601a      	str	r2, [r3, #0]
 8003568:	f3bf 8f4f 	dsb	sy
 800356c:	f3bf 8f6f 	isb	sy
 8003570:	e75c      	b.n	800342c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003572:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003574:	f000 f97b 	bl	800386e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003578:	f000 fcfa 	bl	8003f70 <xTaskResumeAll>
 800357c:	e756      	b.n	800342c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800357e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003580:	f000 f975 	bl	800386e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003584:	f000 fcf4 	bl	8003f70 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003588:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800358a:	f000 f9c2 	bl	8003912 <prvIsQueueEmpty>
 800358e:	4603      	mov	r3, r0
 8003590:	2b00      	cmp	r3, #0
 8003592:	f43f af4b 	beq.w	800342c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00d      	beq.n	80035b8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800359c:	f001 ff26 	bl	80053ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80035a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035a2:	f000 f8bc 	bl	800371e <prvGetDisinheritPriorityAfterTimeout>
 80035a6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80035a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035ae:	4618      	mov	r0, r3
 80035b0:	f001 f9c6 	bl	8004940 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80035b4:	f001 ff4e 	bl	8005454 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80035b8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80035ba:	4618      	mov	r0, r3
 80035bc:	3738      	adds	r7, #56	; 0x38
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	e000ed04 	.word	0xe000ed04

080035c8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08e      	sub	sp, #56	; 0x38
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80035d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d10c      	bne.n	80035f8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 80035de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e2:	b672      	cpsid	i
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	b662      	cpsie	i
 80035f2:	623b      	str	r3, [r7, #32]
}
 80035f4:	bf00      	nop
 80035f6:	e7fe      	b.n	80035f6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d103      	bne.n	8003606 <xQueueReceiveFromISR+0x3e>
 80035fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	2b00      	cmp	r3, #0
 8003604:	d101      	bne.n	800360a <xQueueReceiveFromISR+0x42>
 8003606:	2301      	movs	r3, #1
 8003608:	e000      	b.n	800360c <xQueueReceiveFromISR+0x44>
 800360a:	2300      	movs	r3, #0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d10c      	bne.n	800362a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8003610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003614:	b672      	cpsid	i
 8003616:	f383 8811 	msr	BASEPRI, r3
 800361a:	f3bf 8f6f 	isb	sy
 800361e:	f3bf 8f4f 	dsb	sy
 8003622:	b662      	cpsie	i
 8003624:	61fb      	str	r3, [r7, #28]
}
 8003626:	bf00      	nop
 8003628:	e7fe      	b.n	8003628 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800362a:	f001 ffc7 	bl	80055bc <vPortValidateInterruptPriority>
	__asm volatile
 800362e:	f3ef 8211 	mrs	r2, BASEPRI
 8003632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003636:	b672      	cpsid	i
 8003638:	f383 8811 	msr	BASEPRI, r3
 800363c:	f3bf 8f6f 	isb	sy
 8003640:	f3bf 8f4f 	dsb	sy
 8003644:	b662      	cpsie	i
 8003646:	61ba      	str	r2, [r7, #24]
 8003648:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800364a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800364c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003652:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003654:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003656:	2b00      	cmp	r3, #0
 8003658:	d02f      	beq.n	80036ba <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003660:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003664:	68b9      	ldr	r1, [r7, #8]
 8003666:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003668:	f000 f8db 	bl	8003822 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800366c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800366e:	1e5a      	subs	r2, r3, #1
 8003670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003672:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003674:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003678:	f1b3 3fff 	cmp.w	r3, #4294967295
 800367c:	d112      	bne.n	80036a4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800367e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d016      	beq.n	80036b4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003688:	3310      	adds	r3, #16
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fe96 	bl	80043bc <xTaskRemoveFromEventList>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d00e      	beq.n	80036b4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d00b      	beq.n	80036b4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]
 80036a2:	e007      	b.n	80036b4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80036a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036a8:	3301      	adds	r3, #1
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	b25a      	sxtb	r2, r3
 80036ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80036b4:	2301      	movs	r3, #1
 80036b6:	637b      	str	r3, [r7, #52]	; 0x34
 80036b8:	e001      	b.n	80036be <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80036ba:	2300      	movs	r3, #0
 80036bc:	637b      	str	r3, [r7, #52]	; 0x34
 80036be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	f383 8811 	msr	BASEPRI, r3
}
 80036c8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80036ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3738      	adds	r7, #56	; 0x38
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d10c      	bne.n	8003700 <vQueueDelete+0x2c>
	__asm volatile
 80036e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ea:	b672      	cpsid	i
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	b662      	cpsie	i
 80036fa:	60bb      	str	r3, [r7, #8]
}
 80036fc:	bf00      	nop
 80036fe:	e7fe      	b.n	80036fe <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003700:	68f8      	ldr	r0, [r7, #12]
 8003702:	f000 f95f 	bl	80039c4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800370c:	2b00      	cmp	r3, #0
 800370e:	d102      	bne.n	8003716 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f002 f861 	bl	80057d8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003716:	bf00      	nop
 8003718:	3710      	adds	r7, #16
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800371e:	b480      	push	{r7}
 8003720:	b085      	sub	sp, #20
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	2b00      	cmp	r3, #0
 800372c:	d006      	beq.n	800373c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	e001      	b.n	8003740 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800373c:	2300      	movs	r3, #0
 800373e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003740:	68fb      	ldr	r3, [r7, #12]
	}
 8003742:	4618      	mov	r0, r3
 8003744:	3714      	adds	r7, #20
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003762:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10d      	bne.n	8003788 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d14d      	bne.n	8003810 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	4618      	mov	r0, r3
 800377a:	f001 f86f 	bl	800485c <xTaskPriorityDisinherit>
 800377e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2200      	movs	r2, #0
 8003784:	609a      	str	r2, [r3, #8]
 8003786:	e043      	b.n	8003810 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d119      	bne.n	80037c2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6858      	ldr	r0, [r3, #4]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003796:	461a      	mov	r2, r3
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	f002 f95d 	bl	8005a58 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	685a      	ldr	r2, [r3, #4]
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	441a      	add	r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	685a      	ldr	r2, [r3, #4]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d32b      	bcc.n	8003810 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	605a      	str	r2, [r3, #4]
 80037c0:	e026      	b.n	8003810 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	68d8      	ldr	r0, [r3, #12]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ca:	461a      	mov	r2, r3
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	f002 f943 	bl	8005a58 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	425b      	negs	r3, r3
 80037dc:	441a      	add	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	68da      	ldr	r2, [r3, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d207      	bcs.n	80037fe <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	689a      	ldr	r2, [r3, #8]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f6:	425b      	negs	r3, r3
 80037f8:	441a      	add	r2, r3
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d105      	bne.n	8003810 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d002      	beq.n	8003810 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	3b01      	subs	r3, #1
 800380e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	1c5a      	adds	r2, r3, #1
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003818:	697b      	ldr	r3, [r7, #20]
}
 800381a:	4618      	mov	r0, r3
 800381c:	3718      	adds	r7, #24
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b082      	sub	sp, #8
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003830:	2b00      	cmp	r3, #0
 8003832:	d018      	beq.n	8003866 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	68da      	ldr	r2, [r3, #12]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383c:	441a      	add	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	429a      	cmp	r2, r3
 800384c:	d303      	bcc.n	8003856 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	68d9      	ldr	r1, [r3, #12]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	461a      	mov	r2, r3
 8003860:	6838      	ldr	r0, [r7, #0]
 8003862:	f002 f8f9 	bl	8005a58 <memcpy>
	}
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800386e:	b580      	push	{r7, lr}
 8003870:	b084      	sub	sp, #16
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003876:	f001 fdb9 	bl	80053ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003880:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003882:	e011      	b.n	80038a8 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003888:	2b00      	cmp	r3, #0
 800388a:	d012      	beq.n	80038b2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3324      	adds	r3, #36	; 0x24
 8003890:	4618      	mov	r0, r3
 8003892:	f000 fd93 	bl	80043bc <xTaskRemoveFromEventList>
 8003896:	4603      	mov	r3, r0
 8003898:	2b00      	cmp	r3, #0
 800389a:	d001      	beq.n	80038a0 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800389c:	f000 fe70 	bl	8004580 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80038a0:	7bfb      	ldrb	r3, [r7, #15]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80038a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	dce9      	bgt.n	8003884 <prvUnlockQueue+0x16>
 80038b0:	e000      	b.n	80038b4 <prvUnlockQueue+0x46>
					break;
 80038b2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	22ff      	movs	r2, #255	; 0xff
 80038b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80038bc:	f001 fdca 	bl	8005454 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80038c0:	f001 fd94 	bl	80053ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80038ca:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038cc:	e011      	b.n	80038f2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	691b      	ldr	r3, [r3, #16]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d012      	beq.n	80038fc <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	3310      	adds	r3, #16
 80038da:	4618      	mov	r0, r3
 80038dc:	f000 fd6e 	bl	80043bc <xTaskRemoveFromEventList>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d001      	beq.n	80038ea <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80038e6:	f000 fe4b 	bl	8004580 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80038ea:	7bbb      	ldrb	r3, [r7, #14]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	dce9      	bgt.n	80038ce <prvUnlockQueue+0x60>
 80038fa:	e000      	b.n	80038fe <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038fc:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	22ff      	movs	r2, #255	; 0xff
 8003902:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003906:	f001 fda5 	bl	8005454 <vPortExitCritical>
}
 800390a:	bf00      	nop
 800390c:	3710      	adds	r7, #16
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}

08003912 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b084      	sub	sp, #16
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800391a:	f001 fd67 	bl	80053ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003922:	2b00      	cmp	r3, #0
 8003924:	d102      	bne.n	800392c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003926:	2301      	movs	r3, #1
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	e001      	b.n	8003930 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800392c:	2300      	movs	r3, #0
 800392e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003930:	f001 fd90 	bl	8005454 <vPortExitCritical>

	return xReturn;
 8003934:	68fb      	ldr	r3, [r7, #12]
}
 8003936:	4618      	mov	r0, r3
 8003938:	3710      	adds	r7, #16
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b084      	sub	sp, #16
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003946:	f001 fd51 	bl	80053ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003952:	429a      	cmp	r2, r3
 8003954:	d102      	bne.n	800395c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003956:	2301      	movs	r3, #1
 8003958:	60fb      	str	r3, [r7, #12]
 800395a:	e001      	b.n	8003960 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800395c:	2300      	movs	r3, #0
 800395e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003960:	f001 fd78 	bl	8005454 <vPortExitCritical>

	return xReturn;
 8003964:	68fb      	ldr	r3, [r7, #12]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3710      	adds	r7, #16
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
	...

08003970 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003970:	b480      	push	{r7}
 8003972:	b085      	sub	sp, #20
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800397a:	2300      	movs	r3, #0
 800397c:	60fb      	str	r3, [r7, #12]
 800397e:	e014      	b.n	80039aa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003980:	4a0f      	ldr	r2, [pc, #60]	; (80039c0 <vQueueAddToRegistry+0x50>)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10b      	bne.n	80039a4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800398c:	490c      	ldr	r1, [pc, #48]	; (80039c0 <vQueueAddToRegistry+0x50>)
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003996:	4a0a      	ldr	r2, [pc, #40]	; (80039c0 <vQueueAddToRegistry+0x50>)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	00db      	lsls	r3, r3, #3
 800399c:	4413      	add	r3, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80039a2:	e006      	b.n	80039b2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	3301      	adds	r3, #1
 80039a8:	60fb      	str	r3, [r7, #12]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b07      	cmp	r3, #7
 80039ae:	d9e7      	bls.n	8003980 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80039b0:	bf00      	nop
 80039b2:	bf00      	nop
 80039b4:	3714      	adds	r7, #20
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	200008d0 	.word	0x200008d0

080039c4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80039c4:	b480      	push	{r7}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039cc:	2300      	movs	r3, #0
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	e016      	b.n	8003a00 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80039d2:	4a10      	ldr	r2, [pc, #64]	; (8003a14 <vQueueUnregisterQueue+0x50>)
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	00db      	lsls	r3, r3, #3
 80039d8:	4413      	add	r3, r2
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	687a      	ldr	r2, [r7, #4]
 80039de:	429a      	cmp	r2, r3
 80039e0:	d10b      	bne.n	80039fa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80039e2:	4a0c      	ldr	r2, [pc, #48]	; (8003a14 <vQueueUnregisterQueue+0x50>)
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2100      	movs	r1, #0
 80039e8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80039ec:	4a09      	ldr	r2, [pc, #36]	; (8003a14 <vQueueUnregisterQueue+0x50>)
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	00db      	lsls	r3, r3, #3
 80039f2:	4413      	add	r3, r2
 80039f4:	2200      	movs	r2, #0
 80039f6:	605a      	str	r2, [r3, #4]
				break;
 80039f8:	e006      	b.n	8003a08 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3301      	adds	r3, #1
 80039fe:	60fb      	str	r3, [r7, #12]
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2b07      	cmp	r3, #7
 8003a04:	d9e5      	bls.n	80039d2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8003a06:	bf00      	nop
 8003a08:	bf00      	nop
 8003a0a:	3714      	adds	r7, #20
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a12:	4770      	bx	lr
 8003a14:	200008d0 	.word	0x200008d0

08003a18 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b086      	sub	sp, #24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003a28:	f001 fce0 	bl	80053ec <vPortEnterCritical>
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003a32:	b25b      	sxtb	r3, r3
 8003a34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a38:	d103      	bne.n	8003a42 <vQueueWaitForMessageRestricted+0x2a>
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003a48:	b25b      	sxtb	r3, r3
 8003a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a4e:	d103      	bne.n	8003a58 <vQueueWaitForMessageRestricted+0x40>
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a58:	f001 fcfc 	bl	8005454 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d106      	bne.n	8003a72 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	3324      	adds	r3, #36	; 0x24
 8003a68:	687a      	ldr	r2, [r7, #4]
 8003a6a:	68b9      	ldr	r1, [r7, #8]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f000 fc77 	bl	8004360 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003a72:	6978      	ldr	r0, [r7, #20]
 8003a74:	f7ff fefb 	bl	800386e <prvUnlockQueue>
	}
 8003a78:	bf00      	nop
 8003a7a:	3718      	adds	r7, #24
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08e      	sub	sp, #56	; 0x38
 8003a84:	af04      	add	r7, sp, #16
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d10c      	bne.n	8003aae <xTaskCreateStatic+0x2e>
	__asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	b672      	cpsid	i
 8003a9a:	f383 8811 	msr	BASEPRI, r3
 8003a9e:	f3bf 8f6f 	isb	sy
 8003aa2:	f3bf 8f4f 	dsb	sy
 8003aa6:	b662      	cpsie	i
 8003aa8:	623b      	str	r3, [r7, #32]
}
 8003aaa:	bf00      	nop
 8003aac:	e7fe      	b.n	8003aac <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8003aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10c      	bne.n	8003ace <xTaskCreateStatic+0x4e>
	__asm volatile
 8003ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ab8:	b672      	cpsid	i
 8003aba:	f383 8811 	msr	BASEPRI, r3
 8003abe:	f3bf 8f6f 	isb	sy
 8003ac2:	f3bf 8f4f 	dsb	sy
 8003ac6:	b662      	cpsie	i
 8003ac8:	61fb      	str	r3, [r7, #28]
}
 8003aca:	bf00      	nop
 8003acc:	e7fe      	b.n	8003acc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003ace:	23bc      	movs	r3, #188	; 0xbc
 8003ad0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	2bbc      	cmp	r3, #188	; 0xbc
 8003ad6:	d00c      	beq.n	8003af2 <xTaskCreateStatic+0x72>
	__asm volatile
 8003ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003adc:	b672      	cpsid	i
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	b662      	cpsie	i
 8003aec:	61bb      	str	r3, [r7, #24]
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003af2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d01e      	beq.n	8003b38 <xTaskCreateStatic+0xb8>
 8003afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d01b      	beq.n	8003b38 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b02:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b06:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b0c:	2202      	movs	r2, #2
 8003b0e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003b12:	2300      	movs	r3, #0
 8003b14:	9303      	str	r3, [sp, #12]
 8003b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b18:	9302      	str	r3, [sp, #8]
 8003b1a:	f107 0314 	add.w	r3, r7, #20
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	68b9      	ldr	r1, [r7, #8]
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 f850 	bl	8003bd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003b30:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003b32:	f000 f8f5 	bl	8003d20 <prvAddNewTaskToReadyList>
 8003b36:	e001      	b.n	8003b3c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003b3c:	697b      	ldr	r3, [r7, #20]
	}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3728      	adds	r7, #40	; 0x28
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}

08003b46 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003b46:	b580      	push	{r7, lr}
 8003b48:	b08c      	sub	sp, #48	; 0x30
 8003b4a:	af04      	add	r7, sp, #16
 8003b4c:	60f8      	str	r0, [r7, #12]
 8003b4e:	60b9      	str	r1, [r7, #8]
 8003b50:	603b      	str	r3, [r7, #0]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003b56:	88fb      	ldrh	r3, [r7, #6]
 8003b58:	009b      	lsls	r3, r3, #2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f001 fd72 	bl	8005644 <pvPortMalloc>
 8003b60:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00e      	beq.n	8003b86 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003b68:	20bc      	movs	r0, #188	; 0xbc
 8003b6a:	f001 fd6b 	bl	8005644 <pvPortMalloc>
 8003b6e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003b70:	69fb      	ldr	r3, [r7, #28]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d003      	beq.n	8003b7e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30
 8003b7c:	e005      	b.n	8003b8a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003b7e:	6978      	ldr	r0, [r7, #20]
 8003b80:	f001 fe2a 	bl	80057d8 <vPortFree>
 8003b84:	e001      	b.n	8003b8a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003b86:	2300      	movs	r3, #0
 8003b88:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d017      	beq.n	8003bc0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003b98:	88fa      	ldrh	r2, [r7, #6]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	9303      	str	r3, [sp, #12]
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	9302      	str	r3, [sp, #8]
 8003ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba4:	9301      	str	r3, [sp, #4]
 8003ba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba8:	9300      	str	r3, [sp, #0]
 8003baa:	683b      	ldr	r3, [r7, #0]
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f000 f80e 	bl	8003bd0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bb4:	69f8      	ldr	r0, [r7, #28]
 8003bb6:	f000 f8b3 	bl	8003d20 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	61bb      	str	r3, [r7, #24]
 8003bbe:	e002      	b.n	8003bc6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8003bc4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003bc6:	69bb      	ldr	r3, [r7, #24]
	}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3720      	adds	r7, #32
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}

08003bd0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b088      	sub	sp, #32
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	60f8      	str	r0, [r7, #12]
 8003bd8:	60b9      	str	r1, [r7, #8]
 8003bda:	607a      	str	r2, [r7, #4]
 8003bdc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003be0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	461a      	mov	r2, r3
 8003be8:	21a5      	movs	r1, #165	; 0xa5
 8003bea:	f001 ff43 	bl	8005a74 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8003bf8:	440b      	add	r3, r1
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4413      	add	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	f023 0307 	bic.w	r3, r3, #7
 8003c06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00c      	beq.n	8003c2c <prvInitialiseNewTask+0x5c>
	__asm volatile
 8003c12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c16:	b672      	cpsid	i
 8003c18:	f383 8811 	msr	BASEPRI, r3
 8003c1c:	f3bf 8f6f 	isb	sy
 8003c20:	f3bf 8f4f 	dsb	sy
 8003c24:	b662      	cpsie	i
 8003c26:	617b      	str	r3, [r7, #20]
}
 8003c28:	bf00      	nop
 8003c2a:	e7fe      	b.n	8003c2a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d01f      	beq.n	8003c72 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c32:	2300      	movs	r3, #0
 8003c34:	61fb      	str	r3, [r7, #28]
 8003c36:	e012      	b.n	8003c5e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	4413      	add	r3, r2
 8003c3e:	7819      	ldrb	r1, [r3, #0]
 8003c40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	4413      	add	r3, r2
 8003c46:	3334      	adds	r3, #52	; 0x34
 8003c48:	460a      	mov	r2, r1
 8003c4a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003c4c:	68ba      	ldr	r2, [r7, #8]
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	4413      	add	r3, r2
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d006      	beq.n	8003c66 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	3301      	adds	r3, #1
 8003c5c:	61fb      	str	r3, [r7, #28]
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	2b0f      	cmp	r3, #15
 8003c62:	d9e9      	bls.n	8003c38 <prvInitialiseNewTask+0x68>
 8003c64:	e000      	b.n	8003c68 <prvInitialiseNewTask+0x98>
			{
				break;
 8003c66:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003c68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003c70:	e003      	b.n	8003c7a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c74:	2200      	movs	r2, #0
 8003c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7c:	2b37      	cmp	r3, #55	; 0x37
 8003c7e:	d901      	bls.n	8003c84 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003c80:	2337      	movs	r3, #55	; 0x37
 8003c82:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c86:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c88:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003c8e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c92:	2200      	movs	r2, #0
 8003c94:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c98:	3304      	adds	r3, #4
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	f7fe fe06 	bl	80028ac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ca2:	3318      	adds	r3, #24
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f7fe fe01 	bl	80028ac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003caa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cae:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cb2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003cba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003cc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd2:	3354      	adds	r3, #84	; 0x54
 8003cd4:	2260      	movs	r2, #96	; 0x60
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f001 fecb 	bl	8005a74 <memset>
 8003cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce0:	4a0c      	ldr	r2, [pc, #48]	; (8003d14 <prvInitialiseNewTask+0x144>)
 8003ce2:	659a      	str	r2, [r3, #88]	; 0x58
 8003ce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce6:	4a0c      	ldr	r2, [pc, #48]	; (8003d18 <prvInitialiseNewTask+0x148>)
 8003ce8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003cea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cec:	4a0b      	ldr	r2, [pc, #44]	; (8003d1c <prvInitialiseNewTask+0x14c>)
 8003cee:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003cf0:	683a      	ldr	r2, [r7, #0]
 8003cf2:	68f9      	ldr	r1, [r7, #12]
 8003cf4:	69b8      	ldr	r0, [r7, #24]
 8003cf6:	f001 fa6d 	bl	80051d4 <pxPortInitialiseStack>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfe:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d0c:	bf00      	nop
 8003d0e:	3720      	adds	r7, #32
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}
 8003d14:	08005d18 	.word	0x08005d18
 8003d18:	08005d38 	.word	0x08005d38
 8003d1c:	08005cf8 	.word	0x08005cf8

08003d20 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d28:	f001 fb60 	bl	80053ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d2c:	4b2d      	ldr	r3, [pc, #180]	; (8003de4 <prvAddNewTaskToReadyList+0xc4>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	3301      	adds	r3, #1
 8003d32:	4a2c      	ldr	r2, [pc, #176]	; (8003de4 <prvAddNewTaskToReadyList+0xc4>)
 8003d34:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d36:	4b2c      	ldr	r3, [pc, #176]	; (8003de8 <prvAddNewTaskToReadyList+0xc8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d3e:	4a2a      	ldr	r2, [pc, #168]	; (8003de8 <prvAddNewTaskToReadyList+0xc8>)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d44:	4b27      	ldr	r3, [pc, #156]	; (8003de4 <prvAddNewTaskToReadyList+0xc4>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d110      	bne.n	8003d6e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d4c:	f000 fc3c 	bl	80045c8 <prvInitialiseTaskLists>
 8003d50:	e00d      	b.n	8003d6e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d52:	4b26      	ldr	r3, [pc, #152]	; (8003dec <prvAddNewTaskToReadyList+0xcc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d109      	bne.n	8003d6e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003d5a:	4b23      	ldr	r3, [pc, #140]	; (8003de8 <prvAddNewTaskToReadyList+0xc8>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d802      	bhi.n	8003d6e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003d68:	4a1f      	ldr	r2, [pc, #124]	; (8003de8 <prvAddNewTaskToReadyList+0xc8>)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003d6e:	4b20      	ldr	r3, [pc, #128]	; (8003df0 <prvAddNewTaskToReadyList+0xd0>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	3301      	adds	r3, #1
 8003d74:	4a1e      	ldr	r2, [pc, #120]	; (8003df0 <prvAddNewTaskToReadyList+0xd0>)
 8003d76:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003d78:	4b1d      	ldr	r3, [pc, #116]	; (8003df0 <prvAddNewTaskToReadyList+0xd0>)
 8003d7a:	681a      	ldr	r2, [r3, #0]
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d84:	4b1b      	ldr	r3, [pc, #108]	; (8003df4 <prvAddNewTaskToReadyList+0xd4>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d903      	bls.n	8003d94 <prvAddNewTaskToReadyList+0x74>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d90:	4a18      	ldr	r2, [pc, #96]	; (8003df4 <prvAddNewTaskToReadyList+0xd4>)
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4a15      	ldr	r2, [pc, #84]	; (8003df8 <prvAddNewTaskToReadyList+0xd8>)
 8003da2:	441a      	add	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	3304      	adds	r3, #4
 8003da8:	4619      	mov	r1, r3
 8003daa:	4610      	mov	r0, r2
 8003dac:	f7fe fd8b 	bl	80028c6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003db0:	f001 fb50 	bl	8005454 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003db4:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <prvAddNewTaskToReadyList+0xcc>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00e      	beq.n	8003dda <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003dbc:	4b0a      	ldr	r3, [pc, #40]	; (8003de8 <prvAddNewTaskToReadyList+0xc8>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d207      	bcs.n	8003dda <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003dca:	4b0c      	ldr	r3, [pc, #48]	; (8003dfc <prvAddNewTaskToReadyList+0xdc>)
 8003dcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000de4 	.word	0x20000de4
 8003de8:	20000910 	.word	0x20000910
 8003dec:	20000df0 	.word	0x20000df0
 8003df0:	20000e00 	.word	0x20000e00
 8003df4:	20000dec 	.word	0x20000dec
 8003df8:	20000914 	.word	0x20000914
 8003dfc:	e000ed04 	.word	0xe000ed04

08003e00 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b084      	sub	sp, #16
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d019      	beq.n	8003e46 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e12:	4b14      	ldr	r3, [pc, #80]	; (8003e64 <vTaskDelay+0x64>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00c      	beq.n	8003e34 <vTaskDelay+0x34>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e1e:	b672      	cpsid	i
 8003e20:	f383 8811 	msr	BASEPRI, r3
 8003e24:	f3bf 8f6f 	isb	sy
 8003e28:	f3bf 8f4f 	dsb	sy
 8003e2c:	b662      	cpsie	i
 8003e2e:	60bb      	str	r3, [r7, #8]
}
 8003e30:	bf00      	nop
 8003e32:	e7fe      	b.n	8003e32 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8003e34:	f000 f88e 	bl	8003f54 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e38:	2100      	movs	r1, #0
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fe1a 	bl	8004a74 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e40:	f000 f896 	bl	8003f70 <xTaskResumeAll>
 8003e44:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d107      	bne.n	8003e5c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8003e4c:	4b06      	ldr	r3, [pc, #24]	; (8003e68 <vTaskDelay+0x68>)
 8003e4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e52:	601a      	str	r2, [r3, #0]
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e5c:	bf00      	nop
 8003e5e:	3710      	adds	r7, #16
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	20000e0c 	.word	0x20000e0c
 8003e68:	e000ed04 	.word	0xe000ed04

08003e6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b08a      	sub	sp, #40	; 0x28
 8003e70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003e72:	2300      	movs	r3, #0
 8003e74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003e7a:	463a      	mov	r2, r7
 8003e7c:	1d39      	adds	r1, r7, #4
 8003e7e:	f107 0308 	add.w	r3, r7, #8
 8003e82:	4618      	mov	r0, r3
 8003e84:	f7fe fcbe 	bl	8002804 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003e88:	6839      	ldr	r1, [r7, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	68ba      	ldr	r2, [r7, #8]
 8003e8e:	9202      	str	r2, [sp, #8]
 8003e90:	9301      	str	r3, [sp, #4]
 8003e92:	2300      	movs	r3, #0
 8003e94:	9300      	str	r3, [sp, #0]
 8003e96:	2300      	movs	r3, #0
 8003e98:	460a      	mov	r2, r1
 8003e9a:	4926      	ldr	r1, [pc, #152]	; (8003f34 <vTaskStartScheduler+0xc8>)
 8003e9c:	4826      	ldr	r0, [pc, #152]	; (8003f38 <vTaskStartScheduler+0xcc>)
 8003e9e:	f7ff fdef 	bl	8003a80 <xTaskCreateStatic>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	4a25      	ldr	r2, [pc, #148]	; (8003f3c <vTaskStartScheduler+0xd0>)
 8003ea6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ea8:	4b24      	ldr	r3, [pc, #144]	; (8003f3c <vTaskStartScheduler+0xd0>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d002      	beq.n	8003eb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	617b      	str	r3, [r7, #20]
 8003eb4:	e001      	b.n	8003eba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d102      	bne.n	8003ec6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003ec0:	f000 fe2c 	bl	8004b1c <xTimerCreateTimerTask>
 8003ec4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	d11d      	bne.n	8003f08 <vTaskStartScheduler+0x9c>
	__asm volatile
 8003ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed0:	b672      	cpsid	i
 8003ed2:	f383 8811 	msr	BASEPRI, r3
 8003ed6:	f3bf 8f6f 	isb	sy
 8003eda:	f3bf 8f4f 	dsb	sy
 8003ede:	b662      	cpsie	i
 8003ee0:	613b      	str	r3, [r7, #16]
}
 8003ee2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003ee4:	4b16      	ldr	r3, [pc, #88]	; (8003f40 <vTaskStartScheduler+0xd4>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	3354      	adds	r3, #84	; 0x54
 8003eea:	4a16      	ldr	r2, [pc, #88]	; (8003f44 <vTaskStartScheduler+0xd8>)
 8003eec:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003eee:	4b16      	ldr	r3, [pc, #88]	; (8003f48 <vTaskStartScheduler+0xdc>)
 8003ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ef4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ef6:	4b15      	ldr	r3, [pc, #84]	; (8003f4c <vTaskStartScheduler+0xe0>)
 8003ef8:	2201      	movs	r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003efc:	4b14      	ldr	r3, [pc, #80]	; (8003f50 <vTaskStartScheduler+0xe4>)
 8003efe:	2200      	movs	r2, #0
 8003f00:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f02:	f001 f9f5 	bl	80052f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f06:	e010      	b.n	8003f2a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f0e:	d10c      	bne.n	8003f2a <vTaskStartScheduler+0xbe>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	b672      	cpsid	i
 8003f16:	f383 8811 	msr	BASEPRI, r3
 8003f1a:	f3bf 8f6f 	isb	sy
 8003f1e:	f3bf 8f4f 	dsb	sy
 8003f22:	b662      	cpsie	i
 8003f24:	60fb      	str	r3, [r7, #12]
}
 8003f26:	bf00      	nop
 8003f28:	e7fe      	b.n	8003f28 <vTaskStartScheduler+0xbc>
}
 8003f2a:	bf00      	nop
 8003f2c:	3718      	adds	r7, #24
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	08005c4c 	.word	0x08005c4c
 8003f38:	08004599 	.word	0x08004599
 8003f3c:	20000e08 	.word	0x20000e08
 8003f40:	20000910 	.word	0x20000910
 8003f44:	20000010 	.word	0x20000010
 8003f48:	20000e04 	.word	0x20000e04
 8003f4c:	20000df0 	.word	0x20000df0
 8003f50:	20000de8 	.word	0x20000de8

08003f54 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f54:	b480      	push	{r7}
 8003f56:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003f58:	4b04      	ldr	r3, [pc, #16]	; (8003f6c <vTaskSuspendAll+0x18>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3301      	adds	r3, #1
 8003f5e:	4a03      	ldr	r2, [pc, #12]	; (8003f6c <vTaskSuspendAll+0x18>)
 8003f60:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8003f62:	bf00      	nop
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr
 8003f6c:	20000e0c 	.word	0x20000e0c

08003f70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f7e:	4b43      	ldr	r3, [pc, #268]	; (800408c <xTaskResumeAll+0x11c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10c      	bne.n	8003fa0 <xTaskResumeAll+0x30>
	__asm volatile
 8003f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8a:	b672      	cpsid	i
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	b662      	cpsie	i
 8003f9a:	603b      	str	r3, [r7, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	e7fe      	b.n	8003f9e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fa0:	f001 fa24 	bl	80053ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003fa4:	4b39      	ldr	r3, [pc, #228]	; (800408c <xTaskResumeAll+0x11c>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	4a38      	ldr	r2, [pc, #224]	; (800408c <xTaskResumeAll+0x11c>)
 8003fac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fae:	4b37      	ldr	r3, [pc, #220]	; (800408c <xTaskResumeAll+0x11c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d162      	bne.n	800407c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fb6:	4b36      	ldr	r3, [pc, #216]	; (8004090 <xTaskResumeAll+0x120>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d05e      	beq.n	800407c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fbe:	e02f      	b.n	8004020 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fc0:	4b34      	ldr	r3, [pc, #208]	; (8004094 <xTaskResumeAll+0x124>)
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	68db      	ldr	r3, [r3, #12]
 8003fc6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	3318      	adds	r3, #24
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7fe fcd7 	bl	8002980 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	3304      	adds	r3, #4
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	f7fe fcd2 	bl	8002980 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fe0:	4b2d      	ldr	r3, [pc, #180]	; (8004098 <xTaskResumeAll+0x128>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d903      	bls.n	8003ff0 <xTaskResumeAll+0x80>
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fec:	4a2a      	ldr	r2, [pc, #168]	; (8004098 <xTaskResumeAll+0x128>)
 8003fee:	6013      	str	r3, [r2, #0]
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4413      	add	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4a27      	ldr	r2, [pc, #156]	; (800409c <xTaskResumeAll+0x12c>)
 8003ffe:	441a      	add	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	3304      	adds	r3, #4
 8004004:	4619      	mov	r1, r3
 8004006:	4610      	mov	r0, r2
 8004008:	f7fe fc5d 	bl	80028c6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004010:	4b23      	ldr	r3, [pc, #140]	; (80040a0 <xTaskResumeAll+0x130>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004016:	429a      	cmp	r2, r3
 8004018:	d302      	bcc.n	8004020 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800401a:	4b22      	ldr	r3, [pc, #136]	; (80040a4 <xTaskResumeAll+0x134>)
 800401c:	2201      	movs	r2, #1
 800401e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004020:	4b1c      	ldr	r3, [pc, #112]	; (8004094 <xTaskResumeAll+0x124>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1cb      	bne.n	8003fc0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800402e:	f000 fb6f 	bl	8004710 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004032:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <xTaskResumeAll+0x138>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d010      	beq.n	8004060 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800403e:	f000 f847 	bl	80040d0 <xTaskIncrementTick>
 8004042:	4603      	mov	r3, r0
 8004044:	2b00      	cmp	r3, #0
 8004046:	d002      	beq.n	800404e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 8004048:	4b16      	ldr	r3, [pc, #88]	; (80040a4 <xTaskResumeAll+0x134>)
 800404a:	2201      	movs	r2, #1
 800404c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	3b01      	subs	r3, #1
 8004052:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1f1      	bne.n	800403e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800405a:	4b13      	ldr	r3, [pc, #76]	; (80040a8 <xTaskResumeAll+0x138>)
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004060:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <xTaskResumeAll+0x134>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d009      	beq.n	800407c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004068:	2301      	movs	r3, #1
 800406a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800406c:	4b0f      	ldr	r3, [pc, #60]	; (80040ac <xTaskResumeAll+0x13c>)
 800406e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	f3bf 8f4f 	dsb	sy
 8004078:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800407c:	f001 f9ea 	bl	8005454 <vPortExitCritical>

	return xAlreadyYielded;
 8004080:	68bb      	ldr	r3, [r7, #8]
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}
 800408a:	bf00      	nop
 800408c:	20000e0c 	.word	0x20000e0c
 8004090:	20000de4 	.word	0x20000de4
 8004094:	20000da4 	.word	0x20000da4
 8004098:	20000dec 	.word	0x20000dec
 800409c:	20000914 	.word	0x20000914
 80040a0:	20000910 	.word	0x20000910
 80040a4:	20000df8 	.word	0x20000df8
 80040a8:	20000df4 	.word	0x20000df4
 80040ac:	e000ed04 	.word	0xe000ed04

080040b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <xTaskGetTickCount+0x1c>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80040bc:	687b      	ldr	r3, [r7, #4]
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	20000de8 	.word	0x20000de8

080040d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b086      	sub	sp, #24
 80040d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040da:	4b50      	ldr	r3, [pc, #320]	; (800421c <xTaskIncrementTick+0x14c>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f040 808b 	bne.w	80041fa <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040e4:	4b4e      	ldr	r3, [pc, #312]	; (8004220 <xTaskIncrementTick+0x150>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	3301      	adds	r3, #1
 80040ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040ec:	4a4c      	ldr	r2, [pc, #304]	; (8004220 <xTaskIncrementTick+0x150>)
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d122      	bne.n	800413e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80040f8:	4b4a      	ldr	r3, [pc, #296]	; (8004224 <xTaskIncrementTick+0x154>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d00c      	beq.n	800411c <xTaskIncrementTick+0x4c>
	__asm volatile
 8004102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004106:	b672      	cpsid	i
 8004108:	f383 8811 	msr	BASEPRI, r3
 800410c:	f3bf 8f6f 	isb	sy
 8004110:	f3bf 8f4f 	dsb	sy
 8004114:	b662      	cpsie	i
 8004116:	603b      	str	r3, [r7, #0]
}
 8004118:	bf00      	nop
 800411a:	e7fe      	b.n	800411a <xTaskIncrementTick+0x4a>
 800411c:	4b41      	ldr	r3, [pc, #260]	; (8004224 <xTaskIncrementTick+0x154>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	60fb      	str	r3, [r7, #12]
 8004122:	4b41      	ldr	r3, [pc, #260]	; (8004228 <xTaskIncrementTick+0x158>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a3f      	ldr	r2, [pc, #252]	; (8004224 <xTaskIncrementTick+0x154>)
 8004128:	6013      	str	r3, [r2, #0]
 800412a:	4a3f      	ldr	r2, [pc, #252]	; (8004228 <xTaskIncrementTick+0x158>)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6013      	str	r3, [r2, #0]
 8004130:	4b3e      	ldr	r3, [pc, #248]	; (800422c <xTaskIncrementTick+0x15c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	3301      	adds	r3, #1
 8004136:	4a3d      	ldr	r2, [pc, #244]	; (800422c <xTaskIncrementTick+0x15c>)
 8004138:	6013      	str	r3, [r2, #0]
 800413a:	f000 fae9 	bl	8004710 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800413e:	4b3c      	ldr	r3, [pc, #240]	; (8004230 <xTaskIncrementTick+0x160>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	429a      	cmp	r2, r3
 8004146:	d349      	bcc.n	80041dc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004148:	4b36      	ldr	r3, [pc, #216]	; (8004224 <xTaskIncrementTick+0x154>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	2b00      	cmp	r3, #0
 8004150:	d104      	bne.n	800415c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004152:	4b37      	ldr	r3, [pc, #220]	; (8004230 <xTaskIncrementTick+0x160>)
 8004154:	f04f 32ff 	mov.w	r2, #4294967295
 8004158:	601a      	str	r2, [r3, #0]
					break;
 800415a:	e03f      	b.n	80041dc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800415c:	4b31      	ldr	r3, [pc, #196]	; (8004224 <xTaskIncrementTick+0x154>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	68db      	ldr	r3, [r3, #12]
 8004162:	68db      	ldr	r3, [r3, #12]
 8004164:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800416c:	693a      	ldr	r2, [r7, #16]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	429a      	cmp	r2, r3
 8004172:	d203      	bcs.n	800417c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004174:	4a2e      	ldr	r2, [pc, #184]	; (8004230 <xTaskIncrementTick+0x160>)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800417a:	e02f      	b.n	80041dc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	3304      	adds	r3, #4
 8004180:	4618      	mov	r0, r3
 8004182:	f7fe fbfd 	bl	8002980 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418a:	2b00      	cmp	r3, #0
 800418c:	d004      	beq.n	8004198 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	3318      	adds	r3, #24
 8004192:	4618      	mov	r0, r3
 8004194:	f7fe fbf4 	bl	8002980 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419c:	4b25      	ldr	r3, [pc, #148]	; (8004234 <xTaskIncrementTick+0x164>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d903      	bls.n	80041ac <xTaskIncrementTick+0xdc>
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	4a22      	ldr	r2, [pc, #136]	; (8004234 <xTaskIncrementTick+0x164>)
 80041aa:	6013      	str	r3, [r2, #0]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b0:	4613      	mov	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4413      	add	r3, r2
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <xTaskIncrementTick+0x168>)
 80041ba:	441a      	add	r2, r3
 80041bc:	68bb      	ldr	r3, [r7, #8]
 80041be:	3304      	adds	r3, #4
 80041c0:	4619      	mov	r1, r3
 80041c2:	4610      	mov	r0, r2
 80041c4:	f7fe fb7f 	bl	80028c6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041cc:	4b1b      	ldr	r3, [pc, #108]	; (800423c <xTaskIncrementTick+0x16c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d3b8      	bcc.n	8004148 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80041d6:	2301      	movs	r3, #1
 80041d8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041da:	e7b5      	b.n	8004148 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041dc:	4b17      	ldr	r3, [pc, #92]	; (800423c <xTaskIncrementTick+0x16c>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041e2:	4915      	ldr	r1, [pc, #84]	; (8004238 <xTaskIncrementTick+0x168>)
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d907      	bls.n	8004204 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80041f4:	2301      	movs	r3, #1
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	e004      	b.n	8004204 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80041fa:	4b11      	ldr	r3, [pc, #68]	; (8004240 <xTaskIncrementTick+0x170>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	3301      	adds	r3, #1
 8004200:	4a0f      	ldr	r2, [pc, #60]	; (8004240 <xTaskIncrementTick+0x170>)
 8004202:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004204:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <xTaskIncrementTick+0x174>)
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d001      	beq.n	8004210 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800420c:	2301      	movs	r3, #1
 800420e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004210:	697b      	ldr	r3, [r7, #20]
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	20000e0c 	.word	0x20000e0c
 8004220:	20000de8 	.word	0x20000de8
 8004224:	20000d9c 	.word	0x20000d9c
 8004228:	20000da0 	.word	0x20000da0
 800422c:	20000dfc 	.word	0x20000dfc
 8004230:	20000e04 	.word	0x20000e04
 8004234:	20000dec 	.word	0x20000dec
 8004238:	20000914 	.word	0x20000914
 800423c:	20000910 	.word	0x20000910
 8004240:	20000df4 	.word	0x20000df4
 8004244:	20000df8 	.word	0x20000df8

08004248 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004248:	b480      	push	{r7}
 800424a:	b085      	sub	sp, #20
 800424c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800424e:	4b2b      	ldr	r3, [pc, #172]	; (80042fc <vTaskSwitchContext+0xb4>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d003      	beq.n	800425e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004256:	4b2a      	ldr	r3, [pc, #168]	; (8004300 <vTaskSwitchContext+0xb8>)
 8004258:	2201      	movs	r2, #1
 800425a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800425c:	e048      	b.n	80042f0 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800425e:	4b28      	ldr	r3, [pc, #160]	; (8004300 <vTaskSwitchContext+0xb8>)
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004264:	4b27      	ldr	r3, [pc, #156]	; (8004304 <vTaskSwitchContext+0xbc>)
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	60fb      	str	r3, [r7, #12]
 800426a:	e012      	b.n	8004292 <vTaskSwitchContext+0x4a>
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10c      	bne.n	800428c <vTaskSwitchContext+0x44>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	b672      	cpsid	i
 8004278:	f383 8811 	msr	BASEPRI, r3
 800427c:	f3bf 8f6f 	isb	sy
 8004280:	f3bf 8f4f 	dsb	sy
 8004284:	b662      	cpsie	i
 8004286:	607b      	str	r3, [r7, #4]
}
 8004288:	bf00      	nop
 800428a:	e7fe      	b.n	800428a <vTaskSwitchContext+0x42>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	3b01      	subs	r3, #1
 8004290:	60fb      	str	r3, [r7, #12]
 8004292:	491d      	ldr	r1, [pc, #116]	; (8004308 <vTaskSwitchContext+0xc0>)
 8004294:	68fa      	ldr	r2, [r7, #12]
 8004296:	4613      	mov	r3, r2
 8004298:	009b      	lsls	r3, r3, #2
 800429a:	4413      	add	r3, r2
 800429c:	009b      	lsls	r3, r3, #2
 800429e:	440b      	add	r3, r1
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d0e2      	beq.n	800426c <vTaskSwitchContext+0x24>
 80042a6:	68fa      	ldr	r2, [r7, #12]
 80042a8:	4613      	mov	r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4413      	add	r3, r2
 80042ae:	009b      	lsls	r3, r3, #2
 80042b0:	4a15      	ldr	r2, [pc, #84]	; (8004308 <vTaskSwitchContext+0xc0>)
 80042b2:	4413      	add	r3, r2
 80042b4:	60bb      	str	r3, [r7, #8]
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	605a      	str	r2, [r3, #4]
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	3308      	adds	r3, #8
 80042c8:	429a      	cmp	r2, r3
 80042ca:	d104      	bne.n	80042d6 <vTaskSwitchContext+0x8e>
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	685a      	ldr	r2, [r3, #4]
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	605a      	str	r2, [r3, #4]
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	4a0b      	ldr	r2, [pc, #44]	; (800430c <vTaskSwitchContext+0xc4>)
 80042de:	6013      	str	r3, [r2, #0]
 80042e0:	4a08      	ldr	r2, [pc, #32]	; (8004304 <vTaskSwitchContext+0xbc>)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80042e6:	4b09      	ldr	r3, [pc, #36]	; (800430c <vTaskSwitchContext+0xc4>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	3354      	adds	r3, #84	; 0x54
 80042ec:	4a08      	ldr	r2, [pc, #32]	; (8004310 <vTaskSwitchContext+0xc8>)
 80042ee:	6013      	str	r3, [r2, #0]
}
 80042f0:	bf00      	nop
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	20000e0c 	.word	0x20000e0c
 8004300:	20000df8 	.word	0x20000df8
 8004304:	20000dec 	.word	0x20000dec
 8004308:	20000914 	.word	0x20000914
 800430c:	20000910 	.word	0x20000910
 8004310:	20000010 	.word	0x20000010

08004314 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d10c      	bne.n	800433e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	b672      	cpsid	i
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	b662      	cpsie	i
 8004338:	60fb      	str	r3, [r7, #12]
}
 800433a:	bf00      	nop
 800433c:	e7fe      	b.n	800433c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800433e:	4b07      	ldr	r3, [pc, #28]	; (800435c <vTaskPlaceOnEventList+0x48>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	3318      	adds	r3, #24
 8004344:	4619      	mov	r1, r3
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fe fae1 	bl	800290e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800434c:	2101      	movs	r1, #1
 800434e:	6838      	ldr	r0, [r7, #0]
 8004350:	f000 fb90 	bl	8004a74 <prvAddCurrentTaskToDelayedList>
}
 8004354:	bf00      	nop
 8004356:	3710      	adds	r7, #16
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}
 800435c:	20000910 	.word	0x20000910

08004360 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10c      	bne.n	800438c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8004372:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004376:	b672      	cpsid	i
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	b662      	cpsie	i
 8004386:	617b      	str	r3, [r7, #20]
}
 8004388:	bf00      	nop
 800438a:	e7fe      	b.n	800438a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800438c:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <vTaskPlaceOnEventListRestricted+0x58>)
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3318      	adds	r3, #24
 8004392:	4619      	mov	r1, r3
 8004394:	68f8      	ldr	r0, [r7, #12]
 8004396:	f7fe fa96 	bl	80028c6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d002      	beq.n	80043a6 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 80043a0:	f04f 33ff 	mov.w	r3, #4294967295
 80043a4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	68b8      	ldr	r0, [r7, #8]
 80043aa:	f000 fb63 	bl	8004a74 <prvAddCurrentTaskToDelayedList>
	}
 80043ae:	bf00      	nop
 80043b0:	3718      	adds	r7, #24
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000910 	.word	0x20000910

080043bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	68db      	ldr	r3, [r3, #12]
 80043ca:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d10c      	bne.n	80043ec <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80043d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d6:	b672      	cpsid	i
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	b662      	cpsie	i
 80043e6:	60fb      	str	r3, [r7, #12]
}
 80043e8:	bf00      	nop
 80043ea:	e7fe      	b.n	80043ea <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	3318      	adds	r3, #24
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7fe fac5 	bl	8002980 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80043f6:	4b1e      	ldr	r3, [pc, #120]	; (8004470 <xTaskRemoveFromEventList+0xb4>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d11d      	bne.n	800443a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	3304      	adds	r3, #4
 8004402:	4618      	mov	r0, r3
 8004404:	f7fe fabc 	bl	8002980 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440c:	4b19      	ldr	r3, [pc, #100]	; (8004474 <xTaskRemoveFromEventList+0xb8>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	429a      	cmp	r2, r3
 8004412:	d903      	bls.n	800441c <xTaskRemoveFromEventList+0x60>
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004418:	4a16      	ldr	r2, [pc, #88]	; (8004474 <xTaskRemoveFromEventList+0xb8>)
 800441a:	6013      	str	r3, [r2, #0]
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004420:	4613      	mov	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	4413      	add	r3, r2
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4a13      	ldr	r2, [pc, #76]	; (8004478 <xTaskRemoveFromEventList+0xbc>)
 800442a:	441a      	add	r2, r3
 800442c:	693b      	ldr	r3, [r7, #16]
 800442e:	3304      	adds	r3, #4
 8004430:	4619      	mov	r1, r3
 8004432:	4610      	mov	r0, r2
 8004434:	f7fe fa47 	bl	80028c6 <vListInsertEnd>
 8004438:	e005      	b.n	8004446 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	3318      	adds	r3, #24
 800443e:	4619      	mov	r1, r3
 8004440:	480e      	ldr	r0, [pc, #56]	; (800447c <xTaskRemoveFromEventList+0xc0>)
 8004442:	f7fe fa40 	bl	80028c6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800444a:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <xTaskRemoveFromEventList+0xc4>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004450:	429a      	cmp	r2, r3
 8004452:	d905      	bls.n	8004460 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004454:	2301      	movs	r3, #1
 8004456:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004458:	4b0a      	ldr	r3, [pc, #40]	; (8004484 <xTaskRemoveFromEventList+0xc8>)
 800445a:	2201      	movs	r2, #1
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	e001      	b.n	8004464 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004464:	697b      	ldr	r3, [r7, #20]
}
 8004466:	4618      	mov	r0, r3
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	20000e0c 	.word	0x20000e0c
 8004474:	20000dec 	.word	0x20000dec
 8004478:	20000914 	.word	0x20000914
 800447c:	20000da4 	.word	0x20000da4
 8004480:	20000910 	.word	0x20000910
 8004484:	20000df8 	.word	0x20000df8

08004488 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004490:	4b06      	ldr	r3, [pc, #24]	; (80044ac <vTaskInternalSetTimeOutState+0x24>)
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004498:	4b05      	ldr	r3, [pc, #20]	; (80044b0 <vTaskInternalSetTimeOutState+0x28>)
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	605a      	str	r2, [r3, #4]
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr
 80044ac:	20000dfc 	.word	0x20000dfc
 80044b0:	20000de8 	.word	0x20000de8

080044b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10c      	bne.n	80044de <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 80044c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044c8:	b672      	cpsid	i
 80044ca:	f383 8811 	msr	BASEPRI, r3
 80044ce:	f3bf 8f6f 	isb	sy
 80044d2:	f3bf 8f4f 	dsb	sy
 80044d6:	b662      	cpsie	i
 80044d8:	613b      	str	r3, [r7, #16]
}
 80044da:	bf00      	nop
 80044dc:	e7fe      	b.n	80044dc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10c      	bne.n	80044fe <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	b672      	cpsid	i
 80044ea:	f383 8811 	msr	BASEPRI, r3
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	b662      	cpsie	i
 80044f8:	60fb      	str	r3, [r7, #12]
}
 80044fa:	bf00      	nop
 80044fc:	e7fe      	b.n	80044fc <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80044fe:	f000 ff75 	bl	80053ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004502:	4b1d      	ldr	r3, [pc, #116]	; (8004578 <xTaskCheckForTimeOut+0xc4>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800451a:	d102      	bne.n	8004522 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800451c:	2300      	movs	r3, #0
 800451e:	61fb      	str	r3, [r7, #28]
 8004520:	e023      	b.n	800456a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	4b15      	ldr	r3, [pc, #84]	; (800457c <xTaskCheckForTimeOut+0xc8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	429a      	cmp	r2, r3
 800452c:	d007      	beq.n	800453e <xTaskCheckForTimeOut+0x8a>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	69ba      	ldr	r2, [r7, #24]
 8004534:	429a      	cmp	r2, r3
 8004536:	d302      	bcc.n	800453e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004538:	2301      	movs	r3, #1
 800453a:	61fb      	str	r3, [r7, #28]
 800453c:	e015      	b.n	800456a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	429a      	cmp	r2, r3
 8004546:	d20b      	bcs.n	8004560 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	1ad2      	subs	r2, r2, r3
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004554:	6878      	ldr	r0, [r7, #4]
 8004556:	f7ff ff97 	bl	8004488 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800455a:	2300      	movs	r3, #0
 800455c:	61fb      	str	r3, [r7, #28]
 800455e:	e004      	b.n	800456a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	2200      	movs	r2, #0
 8004564:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004566:	2301      	movs	r3, #1
 8004568:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800456a:	f000 ff73 	bl	8005454 <vPortExitCritical>

	return xReturn;
 800456e:	69fb      	ldr	r3, [r7, #28]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3720      	adds	r7, #32
 8004574:	46bd      	mov	sp, r7
 8004576:	bd80      	pop	{r7, pc}
 8004578:	20000de8 	.word	0x20000de8
 800457c:	20000dfc 	.word	0x20000dfc

08004580 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004580:	b480      	push	{r7}
 8004582:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004584:	4b03      	ldr	r3, [pc, #12]	; (8004594 <vTaskMissedYield+0x14>)
 8004586:	2201      	movs	r2, #1
 8004588:	601a      	str	r2, [r3, #0]
}
 800458a:	bf00      	nop
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr
 8004594:	20000df8 	.word	0x20000df8

08004598 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b082      	sub	sp, #8
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80045a0:	f000 f852 	bl	8004648 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80045a4:	4b06      	ldr	r3, [pc, #24]	; (80045c0 <prvIdleTask+0x28>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d9f9      	bls.n	80045a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <prvIdleTask+0x2c>)
 80045ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b2:	601a      	str	r2, [r3, #0]
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80045bc:	e7f0      	b.n	80045a0 <prvIdleTask+0x8>
 80045be:	bf00      	nop
 80045c0:	20000914 	.word	0x20000914
 80045c4:	e000ed04 	.word	0xe000ed04

080045c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b082      	sub	sp, #8
 80045cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045ce:	2300      	movs	r3, #0
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	e00c      	b.n	80045ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	4613      	mov	r3, r2
 80045d8:	009b      	lsls	r3, r3, #2
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	4a12      	ldr	r2, [pc, #72]	; (8004628 <prvInitialiseTaskLists+0x60>)
 80045e0:	4413      	add	r3, r2
 80045e2:	4618      	mov	r0, r3
 80045e4:	f7fe f942 	bl	800286c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	3301      	adds	r3, #1
 80045ec:	607b      	str	r3, [r7, #4]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2b37      	cmp	r3, #55	; 0x37
 80045f2:	d9ef      	bls.n	80045d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80045f4:	480d      	ldr	r0, [pc, #52]	; (800462c <prvInitialiseTaskLists+0x64>)
 80045f6:	f7fe f939 	bl	800286c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80045fa:	480d      	ldr	r0, [pc, #52]	; (8004630 <prvInitialiseTaskLists+0x68>)
 80045fc:	f7fe f936 	bl	800286c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004600:	480c      	ldr	r0, [pc, #48]	; (8004634 <prvInitialiseTaskLists+0x6c>)
 8004602:	f7fe f933 	bl	800286c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004606:	480c      	ldr	r0, [pc, #48]	; (8004638 <prvInitialiseTaskLists+0x70>)
 8004608:	f7fe f930 	bl	800286c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800460c:	480b      	ldr	r0, [pc, #44]	; (800463c <prvInitialiseTaskLists+0x74>)
 800460e:	f7fe f92d 	bl	800286c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004612:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <prvInitialiseTaskLists+0x78>)
 8004614:	4a05      	ldr	r2, [pc, #20]	; (800462c <prvInitialiseTaskLists+0x64>)
 8004616:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004618:	4b0a      	ldr	r3, [pc, #40]	; (8004644 <prvInitialiseTaskLists+0x7c>)
 800461a:	4a05      	ldr	r2, [pc, #20]	; (8004630 <prvInitialiseTaskLists+0x68>)
 800461c:	601a      	str	r2, [r3, #0]
}
 800461e:	bf00      	nop
 8004620:	3708      	adds	r7, #8
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	20000914 	.word	0x20000914
 800462c:	20000d74 	.word	0x20000d74
 8004630:	20000d88 	.word	0x20000d88
 8004634:	20000da4 	.word	0x20000da4
 8004638:	20000db8 	.word	0x20000db8
 800463c:	20000dd0 	.word	0x20000dd0
 8004640:	20000d9c 	.word	0x20000d9c
 8004644:	20000da0 	.word	0x20000da0

08004648 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b082      	sub	sp, #8
 800464c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800464e:	e019      	b.n	8004684 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004650:	f000 fecc 	bl	80053ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004654:	4b10      	ldr	r3, [pc, #64]	; (8004698 <prvCheckTasksWaitingTermination+0x50>)
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	68db      	ldr	r3, [r3, #12]
 800465a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	3304      	adds	r3, #4
 8004660:	4618      	mov	r0, r3
 8004662:	f7fe f98d 	bl	8002980 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004666:	4b0d      	ldr	r3, [pc, #52]	; (800469c <prvCheckTasksWaitingTermination+0x54>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3b01      	subs	r3, #1
 800466c:	4a0b      	ldr	r2, [pc, #44]	; (800469c <prvCheckTasksWaitingTermination+0x54>)
 800466e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <prvCheckTasksWaitingTermination+0x58>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	3b01      	subs	r3, #1
 8004676:	4a0a      	ldr	r2, [pc, #40]	; (80046a0 <prvCheckTasksWaitingTermination+0x58>)
 8004678:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800467a:	f000 feeb 	bl	8005454 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f810 	bl	80046a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004684:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <prvCheckTasksWaitingTermination+0x58>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d1e1      	bne.n	8004650 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800468c:	bf00      	nop
 800468e:	bf00      	nop
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}
 8004696:	bf00      	nop
 8004698:	20000db8 	.word	0x20000db8
 800469c:	20000de4 	.word	0x20000de4
 80046a0:	20000dcc 	.word	0x20000dcc

080046a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3354      	adds	r3, #84	; 0x54
 80046b0:	4618      	mov	r0, r3
 80046b2:	f001 f9f5 	bl	8005aa0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d108      	bne.n	80046d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c4:	4618      	mov	r0, r3
 80046c6:	f001 f887 	bl	80057d8 <vPortFree>
				vPortFree( pxTCB );
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f001 f884 	bl	80057d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80046d0:	e01a      	b.n	8004708 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d103      	bne.n	80046e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f001 f87b 	bl	80057d8 <vPortFree>
	}
 80046e2:	e011      	b.n	8004708 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d00c      	beq.n	8004708 <prvDeleteTCB+0x64>
	__asm volatile
 80046ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f2:	b672      	cpsid	i
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	b662      	cpsie	i
 8004702:	60fb      	str	r3, [r7, #12]
}
 8004704:	bf00      	nop
 8004706:	e7fe      	b.n	8004706 <prvDeleteTCB+0x62>
	}
 8004708:	bf00      	nop
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004710:	b480      	push	{r7}
 8004712:	b083      	sub	sp, #12
 8004714:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004716:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <prvResetNextTaskUnblockTime+0x38>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d104      	bne.n	800472a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004720:	4b0a      	ldr	r3, [pc, #40]	; (800474c <prvResetNextTaskUnblockTime+0x3c>)
 8004722:	f04f 32ff 	mov.w	r2, #4294967295
 8004726:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004728:	e008      	b.n	800473c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800472a:	4b07      	ldr	r3, [pc, #28]	; (8004748 <prvResetNextTaskUnblockTime+0x38>)
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	68db      	ldr	r3, [r3, #12]
 8004730:	68db      	ldr	r3, [r3, #12]
 8004732:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	685b      	ldr	r3, [r3, #4]
 8004738:	4a04      	ldr	r2, [pc, #16]	; (800474c <prvResetNextTaskUnblockTime+0x3c>)
 800473a:	6013      	str	r3, [r2, #0]
}
 800473c:	bf00      	nop
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr
 8004748:	20000d9c 	.word	0x20000d9c
 800474c:	20000e04 	.word	0x20000e04

08004750 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004756:	4b0b      	ldr	r3, [pc, #44]	; (8004784 <xTaskGetSchedulerState+0x34>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d102      	bne.n	8004764 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800475e:	2301      	movs	r3, #1
 8004760:	607b      	str	r3, [r7, #4]
 8004762:	e008      	b.n	8004776 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004764:	4b08      	ldr	r3, [pc, #32]	; (8004788 <xTaskGetSchedulerState+0x38>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d102      	bne.n	8004772 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800476c:	2302      	movs	r3, #2
 800476e:	607b      	str	r3, [r7, #4]
 8004770:	e001      	b.n	8004776 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004772:	2300      	movs	r3, #0
 8004774:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004776:	687b      	ldr	r3, [r7, #4]
	}
 8004778:	4618      	mov	r0, r3
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr
 8004784:	20000df0 	.word	0x20000df0
 8004788:	20000e0c 	.word	0x20000e0c

0800478c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800478c:	b580      	push	{r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004798:	2300      	movs	r3, #0
 800479a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d051      	beq.n	8004846 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80047a2:	68bb      	ldr	r3, [r7, #8]
 80047a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a6:	4b2a      	ldr	r3, [pc, #168]	; (8004850 <xTaskPriorityInherit+0xc4>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d241      	bcs.n	8004834 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	db06      	blt.n	80047c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047b8:	4b25      	ldr	r3, [pc, #148]	; (8004850 <xTaskPriorityInherit+0xc4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	6959      	ldr	r1, [r3, #20]
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ce:	4613      	mov	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	4413      	add	r3, r2
 80047d4:	009b      	lsls	r3, r3, #2
 80047d6:	4a1f      	ldr	r2, [pc, #124]	; (8004854 <xTaskPriorityInherit+0xc8>)
 80047d8:	4413      	add	r3, r2
 80047da:	4299      	cmp	r1, r3
 80047dc:	d122      	bne.n	8004824 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	3304      	adds	r3, #4
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fe f8cc 	bl	8002980 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047e8:	4b19      	ldr	r3, [pc, #100]	; (8004850 <xTaskPriorityInherit+0xc4>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f6:	4b18      	ldr	r3, [pc, #96]	; (8004858 <xTaskPriorityInherit+0xcc>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d903      	bls.n	8004806 <xTaskPriorityInherit+0x7a>
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004802:	4a15      	ldr	r2, [pc, #84]	; (8004858 <xTaskPriorityInherit+0xcc>)
 8004804:	6013      	str	r3, [r2, #0]
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	4a10      	ldr	r2, [pc, #64]	; (8004854 <xTaskPriorityInherit+0xc8>)
 8004814:	441a      	add	r2, r3
 8004816:	68bb      	ldr	r3, [r7, #8]
 8004818:	3304      	adds	r3, #4
 800481a:	4619      	mov	r1, r3
 800481c:	4610      	mov	r0, r2
 800481e:	f7fe f852 	bl	80028c6 <vListInsertEnd>
 8004822:	e004      	b.n	800482e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004824:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <xTaskPriorityInherit+0xc4>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800482e:	2301      	movs	r3, #1
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	e008      	b.n	8004846 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004834:	68bb      	ldr	r3, [r7, #8]
 8004836:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004838:	4b05      	ldr	r3, [pc, #20]	; (8004850 <xTaskPriorityInherit+0xc4>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800483e:	429a      	cmp	r2, r3
 8004840:	d201      	bcs.n	8004846 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004842:	2301      	movs	r3, #1
 8004844:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004846:	68fb      	ldr	r3, [r7, #12]
	}
 8004848:	4618      	mov	r0, r3
 800484a:	3710      	adds	r7, #16
 800484c:	46bd      	mov	sp, r7
 800484e:	bd80      	pop	{r7, pc}
 8004850:	20000910 	.word	0x20000910
 8004854:	20000914 	.word	0x20000914
 8004858:	20000dec 	.word	0x20000dec

0800485c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004868:	2300      	movs	r3, #0
 800486a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d05a      	beq.n	8004928 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004872:	4b30      	ldr	r3, [pc, #192]	; (8004934 <xTaskPriorityDisinherit+0xd8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	693a      	ldr	r2, [r7, #16]
 8004878:	429a      	cmp	r2, r3
 800487a:	d00c      	beq.n	8004896 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800487c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004880:	b672      	cpsid	i
 8004882:	f383 8811 	msr	BASEPRI, r3
 8004886:	f3bf 8f6f 	isb	sy
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	b662      	cpsie	i
 8004890:	60fb      	str	r3, [r7, #12]
}
 8004892:	bf00      	nop
 8004894:	e7fe      	b.n	8004894 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800489a:	2b00      	cmp	r3, #0
 800489c:	d10c      	bne.n	80048b8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800489e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048a2:	b672      	cpsid	i
 80048a4:	f383 8811 	msr	BASEPRI, r3
 80048a8:	f3bf 8f6f 	isb	sy
 80048ac:	f3bf 8f4f 	dsb	sy
 80048b0:	b662      	cpsie	i
 80048b2:	60bb      	str	r3, [r7, #8]
}
 80048b4:	bf00      	nop
 80048b6:	e7fe      	b.n	80048b6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048bc:	1e5a      	subs	r2, r3, #1
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048ca:	429a      	cmp	r2, r3
 80048cc:	d02c      	beq.n	8004928 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d128      	bne.n	8004928 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	3304      	adds	r3, #4
 80048da:	4618      	mov	r0, r3
 80048dc:	f7fe f850 	bl	8002980 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048f8:	4b0f      	ldr	r3, [pc, #60]	; (8004938 <xTaskPriorityDisinherit+0xdc>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	429a      	cmp	r2, r3
 80048fe:	d903      	bls.n	8004908 <xTaskPriorityDisinherit+0xac>
 8004900:	693b      	ldr	r3, [r7, #16]
 8004902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004904:	4a0c      	ldr	r2, [pc, #48]	; (8004938 <xTaskPriorityDisinherit+0xdc>)
 8004906:	6013      	str	r3, [r2, #0]
 8004908:	693b      	ldr	r3, [r7, #16]
 800490a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800490c:	4613      	mov	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	4a09      	ldr	r2, [pc, #36]	; (800493c <xTaskPriorityDisinherit+0xe0>)
 8004916:	441a      	add	r2, r3
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	3304      	adds	r3, #4
 800491c:	4619      	mov	r1, r3
 800491e:	4610      	mov	r0, r2
 8004920:	f7fd ffd1 	bl	80028c6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004924:	2301      	movs	r3, #1
 8004926:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004928:	697b      	ldr	r3, [r7, #20]
	}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000910 	.word	0x20000910
 8004938:	20000dec 	.word	0x20000dec
 800493c:	20000914 	.word	0x20000914

08004940 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
 8004948:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800494e:	2301      	movs	r3, #1
 8004950:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d06e      	beq.n	8004a36 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10c      	bne.n	800497a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	b672      	cpsid	i
 8004966:	f383 8811 	msr	BASEPRI, r3
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	b662      	cpsie	i
 8004974:	60fb      	str	r3, [r7, #12]
}
 8004976:	bf00      	nop
 8004978:	e7fe      	b.n	8004978 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800497e:	683a      	ldr	r2, [r7, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d902      	bls.n	800498a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	61fb      	str	r3, [r7, #28]
 8004988:	e002      	b.n	8004990 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800498a:	69bb      	ldr	r3, [r7, #24]
 800498c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004994:	69fa      	ldr	r2, [r7, #28]
 8004996:	429a      	cmp	r2, r3
 8004998:	d04d      	beq.n	8004a36 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d148      	bne.n	8004a36 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80049a4:	4b26      	ldr	r3, [pc, #152]	; (8004a40 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d10c      	bne.n	80049c8 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	b672      	cpsid	i
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	b662      	cpsie	i
 80049c2:	60bb      	str	r3, [r7, #8]
}
 80049c4:	bf00      	nop
 80049c6:	e7fe      	b.n	80049c6 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	69fa      	ldr	r2, [r7, #28]
 80049d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	699b      	ldr	r3, [r3, #24]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	db04      	blt.n	80049e6 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80049dc:	69fb      	ldr	r3, [r7, #28]
 80049de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	6959      	ldr	r1, [r3, #20]
 80049ea:	693a      	ldr	r2, [r7, #16]
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4a13      	ldr	r2, [pc, #76]	; (8004a44 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80049f6:	4413      	add	r3, r2
 80049f8:	4299      	cmp	r1, r3
 80049fa:	d11c      	bne.n	8004a36 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049fc:	69bb      	ldr	r3, [r7, #24]
 80049fe:	3304      	adds	r3, #4
 8004a00:	4618      	mov	r0, r3
 8004a02:	f7fd ffbd 	bl	8002980 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a0a:	4b0f      	ldr	r3, [pc, #60]	; (8004a48 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d903      	bls.n	8004a1a <vTaskPriorityDisinheritAfterTimeout+0xda>
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a16:	4a0c      	ldr	r2, [pc, #48]	; (8004a48 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a1e:	4613      	mov	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	4413      	add	r3, r2
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4a07      	ldr	r2, [pc, #28]	; (8004a44 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8004a28:	441a      	add	r2, r3
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	3304      	adds	r3, #4
 8004a2e:	4619      	mov	r1, r3
 8004a30:	4610      	mov	r0, r2
 8004a32:	f7fd ff48 	bl	80028c6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a36:	bf00      	nop
 8004a38:	3720      	adds	r7, #32
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	20000910 	.word	0x20000910
 8004a44:	20000914 	.word	0x20000914
 8004a48:	20000dec 	.word	0x20000dec

08004a4c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004a50:	4b07      	ldr	r3, [pc, #28]	; (8004a70 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d004      	beq.n	8004a62 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004a5e:	3201      	adds	r2, #1
 8004a60:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004a62:	4b03      	ldr	r3, [pc, #12]	; (8004a70 <pvTaskIncrementMutexHeldCount+0x24>)
 8004a64:	681b      	ldr	r3, [r3, #0]
	}
 8004a66:	4618      	mov	r0, r3
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6e:	4770      	bx	lr
 8004a70:	20000910 	.word	0x20000910

08004a74 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b084      	sub	sp, #16
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004a7e:	4b21      	ldr	r3, [pc, #132]	; (8004b04 <prvAddCurrentTaskToDelayedList+0x90>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004a84:	4b20      	ldr	r3, [pc, #128]	; (8004b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3304      	adds	r3, #4
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	f7fd ff78 	bl	8002980 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a96:	d10a      	bne.n	8004aae <prvAddCurrentTaskToDelayedList+0x3a>
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d007      	beq.n	8004aae <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004a9e:	4b1a      	ldr	r3, [pc, #104]	; (8004b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	4819      	ldr	r0, [pc, #100]	; (8004b0c <prvAddCurrentTaskToDelayedList+0x98>)
 8004aa8:	f7fd ff0d 	bl	80028c6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004aac:	e026      	b.n	8004afc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	4413      	add	r3, r2
 8004ab4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004ab6:	4b14      	ldr	r3, [pc, #80]	; (8004b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	68ba      	ldr	r2, [r7, #8]
 8004abc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d209      	bcs.n	8004ada <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ac6:	4b12      	ldr	r3, [pc, #72]	; (8004b10 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	4b0f      	ldr	r3, [pc, #60]	; (8004b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	3304      	adds	r3, #4
 8004ad0:	4619      	mov	r1, r3
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	f7fd ff1b 	bl	800290e <vListInsert>
}
 8004ad8:	e010      	b.n	8004afc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004ada:	4b0e      	ldr	r3, [pc, #56]	; (8004b14 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	4b0a      	ldr	r3, [pc, #40]	; (8004b08 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	3304      	adds	r3, #4
 8004ae4:	4619      	mov	r1, r3
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	f7fd ff11 	bl	800290e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004aec:	4b0a      	ldr	r3, [pc, #40]	; (8004b18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d202      	bcs.n	8004afc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004af6:	4a08      	ldr	r2, [pc, #32]	; (8004b18 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	6013      	str	r3, [r2, #0]
}
 8004afc:	bf00      	nop
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}
 8004b04:	20000de8 	.word	0x20000de8
 8004b08:	20000910 	.word	0x20000910
 8004b0c:	20000dd0 	.word	0x20000dd0
 8004b10:	20000da0 	.word	0x20000da0
 8004b14:	20000d9c 	.word	0x20000d9c
 8004b18:	20000e04 	.word	0x20000e04

08004b1c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b08a      	sub	sp, #40	; 0x28
 8004b20:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004b22:	2300      	movs	r3, #0
 8004b24:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004b26:	f000 fb15 	bl	8005154 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004b2a:	4b1d      	ldr	r3, [pc, #116]	; (8004ba0 <xTimerCreateTimerTask+0x84>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d021      	beq.n	8004b76 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004b36:	2300      	movs	r3, #0
 8004b38:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004b3a:	1d3a      	adds	r2, r7, #4
 8004b3c:	f107 0108 	add.w	r1, r7, #8
 8004b40:	f107 030c 	add.w	r3, r7, #12
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7fd fe77 	bl	8002838 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004b4a:	6879      	ldr	r1, [r7, #4]
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	68fa      	ldr	r2, [r7, #12]
 8004b50:	9202      	str	r2, [sp, #8]
 8004b52:	9301      	str	r3, [sp, #4]
 8004b54:	2302      	movs	r3, #2
 8004b56:	9300      	str	r3, [sp, #0]
 8004b58:	2300      	movs	r3, #0
 8004b5a:	460a      	mov	r2, r1
 8004b5c:	4911      	ldr	r1, [pc, #68]	; (8004ba4 <xTimerCreateTimerTask+0x88>)
 8004b5e:	4812      	ldr	r0, [pc, #72]	; (8004ba8 <xTimerCreateTimerTask+0x8c>)
 8004b60:	f7fe ff8e 	bl	8003a80 <xTaskCreateStatic>
 8004b64:	4603      	mov	r3, r0
 8004b66:	4a11      	ldr	r2, [pc, #68]	; (8004bac <xTimerCreateTimerTask+0x90>)
 8004b68:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004b6a:	4b10      	ldr	r3, [pc, #64]	; (8004bac <xTimerCreateTimerTask+0x90>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004b72:	2301      	movs	r3, #1
 8004b74:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10c      	bne.n	8004b96 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	b672      	cpsid	i
 8004b82:	f383 8811 	msr	BASEPRI, r3
 8004b86:	f3bf 8f6f 	isb	sy
 8004b8a:	f3bf 8f4f 	dsb	sy
 8004b8e:	b662      	cpsie	i
 8004b90:	613b      	str	r3, [r7, #16]
}
 8004b92:	bf00      	nop
 8004b94:	e7fe      	b.n	8004b94 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8004b96:	697b      	ldr	r3, [r7, #20]
}
 8004b98:	4618      	mov	r0, r3
 8004b9a:	3718      	adds	r7, #24
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}
 8004ba0:	20000e40 	.word	0x20000e40
 8004ba4:	08005c54 	.word	0x08005c54
 8004ba8:	08004ced 	.word	0x08004ced
 8004bac:	20000e44 	.word	0x20000e44

08004bb0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	; 0x28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	60f8      	str	r0, [r7, #12]
 8004bb8:	60b9      	str	r1, [r7, #8]
 8004bba:	607a      	str	r2, [r7, #4]
 8004bbc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10c      	bne.n	8004be2 <xTimerGenericCommand+0x32>
	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	b672      	cpsid	i
 8004bce:	f383 8811 	msr	BASEPRI, r3
 8004bd2:	f3bf 8f6f 	isb	sy
 8004bd6:	f3bf 8f4f 	dsb	sy
 8004bda:	b662      	cpsie	i
 8004bdc:	623b      	str	r3, [r7, #32]
}
 8004bde:	bf00      	nop
 8004be0:	e7fe      	b.n	8004be0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004be2:	4b1a      	ldr	r3, [pc, #104]	; (8004c4c <xTimerGenericCommand+0x9c>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d02a      	beq.n	8004c40 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b05      	cmp	r3, #5
 8004bfa:	dc18      	bgt.n	8004c2e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004bfc:	f7ff fda8 	bl	8004750 <xTaskGetSchedulerState>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d109      	bne.n	8004c1a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004c06:	4b11      	ldr	r3, [pc, #68]	; (8004c4c <xTimerGenericCommand+0x9c>)
 8004c08:	6818      	ldr	r0, [r3, #0]
 8004c0a:	f107 0110 	add.w	r1, r7, #16
 8004c0e:	2300      	movs	r3, #0
 8004c10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c12:	f7fe f8a3 	bl	8002d5c <xQueueGenericSend>
 8004c16:	6278      	str	r0, [r7, #36]	; 0x24
 8004c18:	e012      	b.n	8004c40 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004c1a:	4b0c      	ldr	r3, [pc, #48]	; (8004c4c <xTimerGenericCommand+0x9c>)
 8004c1c:	6818      	ldr	r0, [r3, #0]
 8004c1e:	f107 0110 	add.w	r1, r7, #16
 8004c22:	2300      	movs	r3, #0
 8004c24:	2200      	movs	r2, #0
 8004c26:	f7fe f899 	bl	8002d5c <xQueueGenericSend>
 8004c2a:	6278      	str	r0, [r7, #36]	; 0x24
 8004c2c:	e008      	b.n	8004c40 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004c2e:	4b07      	ldr	r3, [pc, #28]	; (8004c4c <xTimerGenericCommand+0x9c>)
 8004c30:	6818      	ldr	r0, [r3, #0]
 8004c32:	f107 0110 	add.w	r1, r7, #16
 8004c36:	2300      	movs	r3, #0
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	f7fe f995 	bl	8002f68 <xQueueGenericSendFromISR>
 8004c3e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3728      	adds	r7, #40	; 0x28
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	20000e40 	.word	0x20000e40

08004c50 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af02      	add	r7, sp, #8
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c5a:	4b23      	ldr	r3, [pc, #140]	; (8004ce8 <prvProcessExpiredTimer+0x98>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	68db      	ldr	r3, [r3, #12]
 8004c60:	68db      	ldr	r3, [r3, #12]
 8004c62:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	3304      	adds	r3, #4
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fd fe89 	bl	8002980 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004c74:	f003 0304 	and.w	r3, r3, #4
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d024      	beq.n	8004cc6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	699a      	ldr	r2, [r3, #24]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	18d1      	adds	r1, r2, r3
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	683a      	ldr	r2, [r7, #0]
 8004c88:	6978      	ldr	r0, [r7, #20]
 8004c8a:	f000 f8d3 	bl	8004e34 <prvInsertTimerInActiveList>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d021      	beq.n	8004cd8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004c94:	2300      	movs	r3, #0
 8004c96:	9300      	str	r3, [sp, #0]
 8004c98:	2300      	movs	r3, #0
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	2100      	movs	r1, #0
 8004c9e:	6978      	ldr	r0, [r7, #20]
 8004ca0:	f7ff ff86 	bl	8004bb0 <xTimerGenericCommand>
 8004ca4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004ca6:	693b      	ldr	r3, [r7, #16]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d115      	bne.n	8004cd8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 8004cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb0:	b672      	cpsid	i
 8004cb2:	f383 8811 	msr	BASEPRI, r3
 8004cb6:	f3bf 8f6f 	isb	sy
 8004cba:	f3bf 8f4f 	dsb	sy
 8004cbe:	b662      	cpsie	i
 8004cc0:	60fb      	str	r3, [r7, #12]
}
 8004cc2:	bf00      	nop
 8004cc4:	e7fe      	b.n	8004cc4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ccc:	f023 0301 	bic.w	r3, r3, #1
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	6a1b      	ldr	r3, [r3, #32]
 8004cdc:	6978      	ldr	r0, [r7, #20]
 8004cde:	4798      	blx	r3
}
 8004ce0:	bf00      	nop
 8004ce2:	3718      	adds	r7, #24
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}
 8004ce8:	20000e38 	.word	0x20000e38

08004cec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004cf4:	f107 0308 	add.w	r3, r7, #8
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f000 f857 	bl	8004dac <prvGetNextExpireTime>
 8004cfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	4619      	mov	r1, r3
 8004d04:	68f8      	ldr	r0, [r7, #12]
 8004d06:	f000 f803 	bl	8004d10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004d0a:	f000 f8d5 	bl	8004eb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004d0e:	e7f1      	b.n	8004cf4 <prvTimerTask+0x8>

08004d10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004d1a:	f7ff f91b 	bl	8003f54 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004d1e:	f107 0308 	add.w	r3, r7, #8
 8004d22:	4618      	mov	r0, r3
 8004d24:	f000 f866 	bl	8004df4 <prvSampleTimeNow>
 8004d28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d130      	bne.n	8004d92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10a      	bne.n	8004d4c <prvProcessTimerOrBlockTask+0x3c>
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d806      	bhi.n	8004d4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004d3e:	f7ff f917 	bl	8003f70 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004d42:	68f9      	ldr	r1, [r7, #12]
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f7ff ff83 	bl	8004c50 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004d4a:	e024      	b.n	8004d96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d008      	beq.n	8004d64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004d52:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <prvProcessTimerOrBlockTask+0x90>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d101      	bne.n	8004d60 <prvProcessTimerOrBlockTask+0x50>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <prvProcessTimerOrBlockTask+0x52>
 8004d60:	2300      	movs	r3, #0
 8004d62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004d64:	4b0f      	ldr	r3, [pc, #60]	; (8004da4 <prvProcessTimerOrBlockTask+0x94>)
 8004d66:	6818      	ldr	r0, [r3, #0]
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	4619      	mov	r1, r3
 8004d72:	f7fe fe51 	bl	8003a18 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004d76:	f7ff f8fb 	bl	8003f70 <xTaskResumeAll>
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10a      	bne.n	8004d96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004d80:	4b09      	ldr	r3, [pc, #36]	; (8004da8 <prvProcessTimerOrBlockTask+0x98>)
 8004d82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	f3bf 8f4f 	dsb	sy
 8004d8c:	f3bf 8f6f 	isb	sy
}
 8004d90:	e001      	b.n	8004d96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004d92:	f7ff f8ed 	bl	8003f70 <xTaskResumeAll>
}
 8004d96:	bf00      	nop
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	20000e3c 	.word	0x20000e3c
 8004da4:	20000e40 	.word	0x20000e40
 8004da8:	e000ed04 	.word	0xe000ed04

08004dac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004dac:	b480      	push	{r7}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004db4:	4b0e      	ldr	r3, [pc, #56]	; (8004df0 <prvGetNextExpireTime+0x44>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <prvGetNextExpireTime+0x16>
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	e000      	b.n	8004dc4 <prvGetNextExpireTime+0x18>
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d105      	bne.n	8004ddc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004dd0:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <prvGetNextExpireTime+0x44>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	68db      	ldr	r3, [r3, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	60fb      	str	r3, [r7, #12]
 8004dda:	e001      	b.n	8004de0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004de0:	68fb      	ldr	r3, [r7, #12]
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	20000e38 	.word	0x20000e38

08004df4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b084      	sub	sp, #16
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004dfc:	f7ff f958 	bl	80040b0 <xTaskGetTickCount>
 8004e00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004e02:	4b0b      	ldr	r3, [pc, #44]	; (8004e30 <prvSampleTimeNow+0x3c>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	429a      	cmp	r2, r3
 8004e0a:	d205      	bcs.n	8004e18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004e0c:	f000 f93c 	bl	8005088 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	601a      	str	r2, [r3, #0]
 8004e16:	e002      	b.n	8004e1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004e1e:	4a04      	ldr	r2, [pc, #16]	; (8004e30 <prvSampleTimeNow+0x3c>)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004e24:	68fb      	ldr	r3, [r7, #12]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	20000e48 	.word	0x20000e48

08004e34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	60f8      	str	r0, [r7, #12]
 8004e3c:	60b9      	str	r1, [r7, #8]
 8004e3e:	607a      	str	r2, [r7, #4]
 8004e40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	68ba      	ldr	r2, [r7, #8]
 8004e4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004e52:	68ba      	ldr	r2, [r7, #8]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d812      	bhi.n	8004e80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	1ad2      	subs	r2, r2, r3
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	d302      	bcc.n	8004e6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004e68:	2301      	movs	r3, #1
 8004e6a:	617b      	str	r3, [r7, #20]
 8004e6c:	e01b      	b.n	8004ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004e6e:	4b10      	ldr	r3, [pc, #64]	; (8004eb0 <prvInsertTimerInActiveList+0x7c>)
 8004e70:	681a      	ldr	r2, [r3, #0]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	3304      	adds	r3, #4
 8004e76:	4619      	mov	r1, r3
 8004e78:	4610      	mov	r0, r2
 8004e7a:	f7fd fd48 	bl	800290e <vListInsert>
 8004e7e:	e012      	b.n	8004ea6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004e80:	687a      	ldr	r2, [r7, #4]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d206      	bcs.n	8004e96 <prvInsertTimerInActiveList+0x62>
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d302      	bcc.n	8004e96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004e90:	2301      	movs	r3, #1
 8004e92:	617b      	str	r3, [r7, #20]
 8004e94:	e007      	b.n	8004ea6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004e96:	4b07      	ldr	r3, [pc, #28]	; (8004eb4 <prvInsertTimerInActiveList+0x80>)
 8004e98:	681a      	ldr	r2, [r3, #0]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	4619      	mov	r1, r3
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	f7fd fd34 	bl	800290e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ea6:	697b      	ldr	r3, [r7, #20]
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3718      	adds	r7, #24
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	20000e3c 	.word	0x20000e3c
 8004eb4:	20000e38 	.word	0x20000e38

08004eb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b08e      	sub	sp, #56	; 0x38
 8004ebc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004ebe:	e0d0      	b.n	8005062 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	da1a      	bge.n	8004efc <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004ec6:	1d3b      	adds	r3, r7, #4
 8004ec8:	3304      	adds	r3, #4
 8004eca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10c      	bne.n	8004eec <prvProcessReceivedCommands+0x34>
	__asm volatile
 8004ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ed6:	b672      	cpsid	i
 8004ed8:	f383 8811 	msr	BASEPRI, r3
 8004edc:	f3bf 8f6f 	isb	sy
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	b662      	cpsie	i
 8004ee6:	61fb      	str	r3, [r7, #28]
}
 8004ee8:	bf00      	nop
 8004eea:	e7fe      	b.n	8004eea <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ef2:	6850      	ldr	r0, [r2, #4]
 8004ef4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ef6:	6892      	ldr	r2, [r2, #8]
 8004ef8:	4611      	mov	r1, r2
 8004efa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	f2c0 80ae 	blt.w	8005060 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0a:	695b      	ldr	r3, [r3, #20]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d004      	beq.n	8004f1a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f12:	3304      	adds	r3, #4
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fd fd33 	bl	8002980 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004f1a:	463b      	mov	r3, r7
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f7ff ff69 	bl	8004df4 <prvSampleTimeNow>
 8004f22:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2b09      	cmp	r3, #9
 8004f28:	f200 809b 	bhi.w	8005062 <prvProcessReceivedCommands+0x1aa>
 8004f2c:	a201      	add	r2, pc, #4	; (adr r2, 8004f34 <prvProcessReceivedCommands+0x7c>)
 8004f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f32:	bf00      	nop
 8004f34:	08004f5d 	.word	0x08004f5d
 8004f38:	08004f5d 	.word	0x08004f5d
 8004f3c:	08004f5d 	.word	0x08004f5d
 8004f40:	08004fd5 	.word	0x08004fd5
 8004f44:	08004fe9 	.word	0x08004fe9
 8004f48:	08005037 	.word	0x08005037
 8004f4c:	08004f5d 	.word	0x08004f5d
 8004f50:	08004f5d 	.word	0x08004f5d
 8004f54:	08004fd5 	.word	0x08004fd5
 8004f58:	08004fe9 	.word	0x08004fe9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f5e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f62:	f043 0301 	orr.w	r3, r3, #1
 8004f66:	b2da      	uxtb	r2, r3
 8004f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f6a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004f6e:	68ba      	ldr	r2, [r7, #8]
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	699b      	ldr	r3, [r3, #24]
 8004f74:	18d1      	adds	r1, r2, r3
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f7c:	f7ff ff5a 	bl	8004e34 <prvInsertTimerInActiveList>
 8004f80:	4603      	mov	r3, r0
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d06d      	beq.n	8005062 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f88:	6a1b      	ldr	r3, [r3, #32]
 8004f8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f8c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004f94:	f003 0304 	and.w	r3, r3, #4
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d062      	beq.n	8005062 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004f9c:	68ba      	ldr	r2, [r7, #8]
 8004f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fa0:	699b      	ldr	r3, [r3, #24]
 8004fa2:	441a      	add	r2, r3
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	9300      	str	r3, [sp, #0]
 8004fa8:	2300      	movs	r3, #0
 8004faa:	2100      	movs	r1, #0
 8004fac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fae:	f7ff fdff 	bl	8004bb0 <xTimerGenericCommand>
 8004fb2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004fb4:	6a3b      	ldr	r3, [r7, #32]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d153      	bne.n	8005062 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 8004fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fbe:	b672      	cpsid	i
 8004fc0:	f383 8811 	msr	BASEPRI, r3
 8004fc4:	f3bf 8f6f 	isb	sy
 8004fc8:	f3bf 8f4f 	dsb	sy
 8004fcc:	b662      	cpsie	i
 8004fce:	61bb      	str	r3, [r7, #24]
}
 8004fd0:	bf00      	nop
 8004fd2:	e7fe      	b.n	8004fd2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fda:	f023 0301 	bic.w	r3, r3, #1
 8004fde:	b2da      	uxtb	r2, r3
 8004fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004fe6:	e03c      	b.n	8005062 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004fee:	f043 0301 	orr.w	r3, r3, #1
 8004ff2:	b2da      	uxtb	r2, r3
 8004ff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004ffa:	68ba      	ldr	r2, [r7, #8]
 8004ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ffe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005000:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d10c      	bne.n	8005022 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 8005008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500c:	b672      	cpsid	i
 800500e:	f383 8811 	msr	BASEPRI, r3
 8005012:	f3bf 8f6f 	isb	sy
 8005016:	f3bf 8f4f 	dsb	sy
 800501a:	b662      	cpsie	i
 800501c:	617b      	str	r3, [r7, #20]
}
 800501e:	bf00      	nop
 8005020:	e7fe      	b.n	8005020 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005024:	699a      	ldr	r2, [r3, #24]
 8005026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005028:	18d1      	adds	r1, r2, r3
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800502e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005030:	f7ff ff00 	bl	8004e34 <prvInsertTimerInActiveList>
					break;
 8005034:	e015      	b.n	8005062 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005038:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d103      	bne.n	800504c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8005044:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005046:	f000 fbc7 	bl	80057d8 <vPortFree>
 800504a:	e00a      	b.n	8005062 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005052:	f023 0301 	bic.w	r3, r3, #1
 8005056:	b2da      	uxtb	r2, r3
 8005058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800505e:	e000      	b.n	8005062 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005060:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005062:	4b08      	ldr	r3, [pc, #32]	; (8005084 <prvProcessReceivedCommands+0x1cc>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	1d39      	adds	r1, r7, #4
 8005068:	2200      	movs	r2, #0
 800506a:	4618      	mov	r0, r3
 800506c:	f7fe f8b2 	bl	80031d4 <xQueueReceive>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	f47f af24 	bne.w	8004ec0 <prvProcessReceivedCommands+0x8>
	}
}
 8005078:	bf00      	nop
 800507a:	bf00      	nop
 800507c:	3730      	adds	r7, #48	; 0x30
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	20000e40 	.word	0x20000e40

08005088 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b088      	sub	sp, #32
 800508c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800508e:	e04a      	b.n	8005126 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005090:	4b2e      	ldr	r3, [pc, #184]	; (800514c <prvSwitchTimerLists+0xc4>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800509a:	4b2c      	ldr	r3, [pc, #176]	; (800514c <prvSwitchTimerLists+0xc4>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	3304      	adds	r3, #4
 80050a8:	4618      	mov	r0, r3
 80050aa:	f7fd fc69 	bl	8002980 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	6a1b      	ldr	r3, [r3, #32]
 80050b2:	68f8      	ldr	r0, [r7, #12]
 80050b4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050bc:	f003 0304 	and.w	r3, r3, #4
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d030      	beq.n	8005126 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	693a      	ldr	r2, [r7, #16]
 80050ca:	4413      	add	r3, r2
 80050cc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d90e      	bls.n	80050f4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	68ba      	ldr	r2, [r7, #8]
 80050da:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	68fa      	ldr	r2, [r7, #12]
 80050e0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80050e2:	4b1a      	ldr	r3, [pc, #104]	; (800514c <prvSwitchTimerLists+0xc4>)
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	3304      	adds	r3, #4
 80050ea:	4619      	mov	r1, r3
 80050ec:	4610      	mov	r0, r2
 80050ee:	f7fd fc0e 	bl	800290e <vListInsert>
 80050f2:	e018      	b.n	8005126 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80050f4:	2300      	movs	r3, #0
 80050f6:	9300      	str	r3, [sp, #0]
 80050f8:	2300      	movs	r3, #0
 80050fa:	693a      	ldr	r2, [r7, #16]
 80050fc:	2100      	movs	r1, #0
 80050fe:	68f8      	ldr	r0, [r7, #12]
 8005100:	f7ff fd56 	bl	8004bb0 <xTimerGenericCommand>
 8005104:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d10c      	bne.n	8005126 <prvSwitchTimerLists+0x9e>
	__asm volatile
 800510c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005110:	b672      	cpsid	i
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	b662      	cpsie	i
 8005120:	603b      	str	r3, [r7, #0]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005126:	4b09      	ldr	r3, [pc, #36]	; (800514c <prvSwitchTimerLists+0xc4>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1af      	bne.n	8005090 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005130:	4b06      	ldr	r3, [pc, #24]	; (800514c <prvSwitchTimerLists+0xc4>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005136:	4b06      	ldr	r3, [pc, #24]	; (8005150 <prvSwitchTimerLists+0xc8>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a04      	ldr	r2, [pc, #16]	; (800514c <prvSwitchTimerLists+0xc4>)
 800513c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800513e:	4a04      	ldr	r2, [pc, #16]	; (8005150 <prvSwitchTimerLists+0xc8>)
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	6013      	str	r3, [r2, #0]
}
 8005144:	bf00      	nop
 8005146:	3718      	adds	r7, #24
 8005148:	46bd      	mov	sp, r7
 800514a:	bd80      	pop	{r7, pc}
 800514c:	20000e38 	.word	0x20000e38
 8005150:	20000e3c 	.word	0x20000e3c

08005154 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b082      	sub	sp, #8
 8005158:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800515a:	f000 f947 	bl	80053ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800515e:	4b15      	ldr	r3, [pc, #84]	; (80051b4 <prvCheckForValidListAndQueue+0x60>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d120      	bne.n	80051a8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005166:	4814      	ldr	r0, [pc, #80]	; (80051b8 <prvCheckForValidListAndQueue+0x64>)
 8005168:	f7fd fb80 	bl	800286c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800516c:	4813      	ldr	r0, [pc, #76]	; (80051bc <prvCheckForValidListAndQueue+0x68>)
 800516e:	f7fd fb7d 	bl	800286c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005172:	4b13      	ldr	r3, [pc, #76]	; (80051c0 <prvCheckForValidListAndQueue+0x6c>)
 8005174:	4a10      	ldr	r2, [pc, #64]	; (80051b8 <prvCheckForValidListAndQueue+0x64>)
 8005176:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005178:	4b12      	ldr	r3, [pc, #72]	; (80051c4 <prvCheckForValidListAndQueue+0x70>)
 800517a:	4a10      	ldr	r2, [pc, #64]	; (80051bc <prvCheckForValidListAndQueue+0x68>)
 800517c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800517e:	2300      	movs	r3, #0
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	4b11      	ldr	r3, [pc, #68]	; (80051c8 <prvCheckForValidListAndQueue+0x74>)
 8005184:	4a11      	ldr	r2, [pc, #68]	; (80051cc <prvCheckForValidListAndQueue+0x78>)
 8005186:	2110      	movs	r1, #16
 8005188:	200a      	movs	r0, #10
 800518a:	f7fd fc8d 	bl	8002aa8 <xQueueGenericCreateStatic>
 800518e:	4603      	mov	r3, r0
 8005190:	4a08      	ldr	r2, [pc, #32]	; (80051b4 <prvCheckForValidListAndQueue+0x60>)
 8005192:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005194:	4b07      	ldr	r3, [pc, #28]	; (80051b4 <prvCheckForValidListAndQueue+0x60>)
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d005      	beq.n	80051a8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <prvCheckForValidListAndQueue+0x60>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	490b      	ldr	r1, [pc, #44]	; (80051d0 <prvCheckForValidListAndQueue+0x7c>)
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fe fbe4 	bl	8003970 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051a8:	f000 f954 	bl	8005454 <vPortExitCritical>
}
 80051ac:	bf00      	nop
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000e40 	.word	0x20000e40
 80051b8:	20000e10 	.word	0x20000e10
 80051bc:	20000e24 	.word	0x20000e24
 80051c0:	20000e38 	.word	0x20000e38
 80051c4:	20000e3c 	.word	0x20000e3c
 80051c8:	20000eec 	.word	0x20000eec
 80051cc:	20000e4c 	.word	0x20000e4c
 80051d0:	08005c5c 	.word	0x08005c5c

080051d4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	3b04      	subs	r3, #4
 80051e4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80051ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	3b04      	subs	r3, #4
 80051f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	f023 0201 	bic.w	r2, r3, #1
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	3b04      	subs	r3, #4
 8005202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005204:	4a0c      	ldr	r2, [pc, #48]	; (8005238 <pxPortInitialiseStack+0x64>)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	3b14      	subs	r3, #20
 800520e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	3b04      	subs	r3, #4
 800521a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f06f 0202 	mvn.w	r2, #2
 8005222:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	3b20      	subs	r3, #32
 8005228:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800522a:	68fb      	ldr	r3, [r7, #12]
}
 800522c:	4618      	mov	r0, r3
 800522e:	3714      	adds	r7, #20
 8005230:	46bd      	mov	sp, r7
 8005232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005236:	4770      	bx	lr
 8005238:	0800523d 	.word	0x0800523d

0800523c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005242:	2300      	movs	r3, #0
 8005244:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005246:	4b14      	ldr	r3, [pc, #80]	; (8005298 <prvTaskExitError+0x5c>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800524e:	d00c      	beq.n	800526a <prvTaskExitError+0x2e>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	b672      	cpsid	i
 8005256:	f383 8811 	msr	BASEPRI, r3
 800525a:	f3bf 8f6f 	isb	sy
 800525e:	f3bf 8f4f 	dsb	sy
 8005262:	b662      	cpsie	i
 8005264:	60fb      	str	r3, [r7, #12]
}
 8005266:	bf00      	nop
 8005268:	e7fe      	b.n	8005268 <prvTaskExitError+0x2c>
	__asm volatile
 800526a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526e:	b672      	cpsid	i
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	b662      	cpsie	i
 800527e:	60bb      	str	r3, [r7, #8]
}
 8005280:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005282:	bf00      	nop
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d0fc      	beq.n	8005284 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800528a:	bf00      	nop
 800528c:	bf00      	nop
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	2000000c 	.word	0x2000000c
 800529c:	00000000 	.word	0x00000000

080052a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80052a0:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <pxCurrentTCBConst2>)
 80052a2:	6819      	ldr	r1, [r3, #0]
 80052a4:	6808      	ldr	r0, [r1, #0]
 80052a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052aa:	f380 8809 	msr	PSP, r0
 80052ae:	f3bf 8f6f 	isb	sy
 80052b2:	f04f 0000 	mov.w	r0, #0
 80052b6:	f380 8811 	msr	BASEPRI, r0
 80052ba:	4770      	bx	lr
 80052bc:	f3af 8000 	nop.w

080052c0 <pxCurrentTCBConst2>:
 80052c0:	20000910 	.word	0x20000910
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80052c4:	bf00      	nop
 80052c6:	bf00      	nop

080052c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80052c8:	4808      	ldr	r0, [pc, #32]	; (80052ec <prvPortStartFirstTask+0x24>)
 80052ca:	6800      	ldr	r0, [r0, #0]
 80052cc:	6800      	ldr	r0, [r0, #0]
 80052ce:	f380 8808 	msr	MSP, r0
 80052d2:	f04f 0000 	mov.w	r0, #0
 80052d6:	f380 8814 	msr	CONTROL, r0
 80052da:	b662      	cpsie	i
 80052dc:	b661      	cpsie	f
 80052de:	f3bf 8f4f 	dsb	sy
 80052e2:	f3bf 8f6f 	isb	sy
 80052e6:	df00      	svc	0
 80052e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80052ea:	bf00      	nop
 80052ec:	e000ed08 	.word	0xe000ed08

080052f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80052f6:	4b37      	ldr	r3, [pc, #220]	; (80053d4 <xPortStartScheduler+0xe4>)
 80052f8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	22ff      	movs	r2, #255	; 0xff
 8005306:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	b2db      	uxtb	r3, r3
 800530e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005310:	78fb      	ldrb	r3, [r7, #3]
 8005312:	b2db      	uxtb	r3, r3
 8005314:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005318:	b2da      	uxtb	r2, r3
 800531a:	4b2f      	ldr	r3, [pc, #188]	; (80053d8 <xPortStartScheduler+0xe8>)
 800531c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800531e:	4b2f      	ldr	r3, [pc, #188]	; (80053dc <xPortStartScheduler+0xec>)
 8005320:	2207      	movs	r2, #7
 8005322:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005324:	e009      	b.n	800533a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005326:	4b2d      	ldr	r3, [pc, #180]	; (80053dc <xPortStartScheduler+0xec>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	3b01      	subs	r3, #1
 800532c:	4a2b      	ldr	r2, [pc, #172]	; (80053dc <xPortStartScheduler+0xec>)
 800532e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005330:	78fb      	ldrb	r3, [r7, #3]
 8005332:	b2db      	uxtb	r3, r3
 8005334:	005b      	lsls	r3, r3, #1
 8005336:	b2db      	uxtb	r3, r3
 8005338:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800533a:	78fb      	ldrb	r3, [r7, #3]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005342:	2b80      	cmp	r3, #128	; 0x80
 8005344:	d0ef      	beq.n	8005326 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005346:	4b25      	ldr	r3, [pc, #148]	; (80053dc <xPortStartScheduler+0xec>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f1c3 0307 	rsb	r3, r3, #7
 800534e:	2b04      	cmp	r3, #4
 8005350:	d00c      	beq.n	800536c <xPortStartScheduler+0x7c>
	__asm volatile
 8005352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005356:	b672      	cpsid	i
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	b662      	cpsie	i
 8005366:	60bb      	str	r3, [r7, #8]
}
 8005368:	bf00      	nop
 800536a:	e7fe      	b.n	800536a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800536c:	4b1b      	ldr	r3, [pc, #108]	; (80053dc <xPortStartScheduler+0xec>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	021b      	lsls	r3, r3, #8
 8005372:	4a1a      	ldr	r2, [pc, #104]	; (80053dc <xPortStartScheduler+0xec>)
 8005374:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005376:	4b19      	ldr	r3, [pc, #100]	; (80053dc <xPortStartScheduler+0xec>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800537e:	4a17      	ldr	r2, [pc, #92]	; (80053dc <xPortStartScheduler+0xec>)
 8005380:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	b2da      	uxtb	r2, r3
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800538a:	4b15      	ldr	r3, [pc, #84]	; (80053e0 <xPortStartScheduler+0xf0>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a14      	ldr	r2, [pc, #80]	; (80053e0 <xPortStartScheduler+0xf0>)
 8005390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005394:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005396:	4b12      	ldr	r3, [pc, #72]	; (80053e0 <xPortStartScheduler+0xf0>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a11      	ldr	r2, [pc, #68]	; (80053e0 <xPortStartScheduler+0xf0>)
 800539c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80053a0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80053a2:	f000 f8dd 	bl	8005560 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80053a6:	4b0f      	ldr	r3, [pc, #60]	; (80053e4 <xPortStartScheduler+0xf4>)
 80053a8:	2200      	movs	r2, #0
 80053aa:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80053ac:	f000 f8fc 	bl	80055a8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80053b0:	4b0d      	ldr	r3, [pc, #52]	; (80053e8 <xPortStartScheduler+0xf8>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	4a0c      	ldr	r2, [pc, #48]	; (80053e8 <xPortStartScheduler+0xf8>)
 80053b6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80053ba:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80053bc:	f7ff ff84 	bl	80052c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80053c0:	f7fe ff42 	bl	8004248 <vTaskSwitchContext>
	prvTaskExitError();
 80053c4:	f7ff ff3a 	bl	800523c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80053c8:	2300      	movs	r3, #0
}
 80053ca:	4618      	mov	r0, r3
 80053cc:	3710      	adds	r7, #16
 80053ce:	46bd      	mov	sp, r7
 80053d0:	bd80      	pop	{r7, pc}
 80053d2:	bf00      	nop
 80053d4:	e000e400 	.word	0xe000e400
 80053d8:	20000f3c 	.word	0x20000f3c
 80053dc:	20000f40 	.word	0x20000f40
 80053e0:	e000ed20 	.word	0xe000ed20
 80053e4:	2000000c 	.word	0x2000000c
 80053e8:	e000ef34 	.word	0xe000ef34

080053ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	b672      	cpsid	i
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	b662      	cpsie	i
 8005406:	607b      	str	r3, [r7, #4]
}
 8005408:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800540a:	4b10      	ldr	r3, [pc, #64]	; (800544c <vPortEnterCritical+0x60>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3301      	adds	r3, #1
 8005410:	4a0e      	ldr	r2, [pc, #56]	; (800544c <vPortEnterCritical+0x60>)
 8005412:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005414:	4b0d      	ldr	r3, [pc, #52]	; (800544c <vPortEnterCritical+0x60>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b01      	cmp	r3, #1
 800541a:	d111      	bne.n	8005440 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800541c:	4b0c      	ldr	r3, [pc, #48]	; (8005450 <vPortEnterCritical+0x64>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	b2db      	uxtb	r3, r3
 8005422:	2b00      	cmp	r3, #0
 8005424:	d00c      	beq.n	8005440 <vPortEnterCritical+0x54>
	__asm volatile
 8005426:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542a:	b672      	cpsid	i
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	b662      	cpsie	i
 800543a:	603b      	str	r3, [r7, #0]
}
 800543c:	bf00      	nop
 800543e:	e7fe      	b.n	800543e <vPortEnterCritical+0x52>
	}
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr
 800544c:	2000000c 	.word	0x2000000c
 8005450:	e000ed04 	.word	0xe000ed04

08005454 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800545a:	4b13      	ldr	r3, [pc, #76]	; (80054a8 <vPortExitCritical+0x54>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d10c      	bne.n	800547c <vPortExitCritical+0x28>
	__asm volatile
 8005462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005466:	b672      	cpsid	i
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	b662      	cpsie	i
 8005476:	607b      	str	r3, [r7, #4]
}
 8005478:	bf00      	nop
 800547a:	e7fe      	b.n	800547a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800547c:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <vPortExitCritical+0x54>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	3b01      	subs	r3, #1
 8005482:	4a09      	ldr	r2, [pc, #36]	; (80054a8 <vPortExitCritical+0x54>)
 8005484:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005486:	4b08      	ldr	r3, [pc, #32]	; (80054a8 <vPortExitCritical+0x54>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d105      	bne.n	800549a <vPortExitCritical+0x46>
 800548e:	2300      	movs	r3, #0
 8005490:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	f383 8811 	msr	BASEPRI, r3
}
 8005498:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800549a:	bf00      	nop
 800549c:	370c      	adds	r7, #12
 800549e:	46bd      	mov	sp, r7
 80054a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	2000000c 	.word	0x2000000c
 80054ac:	00000000 	.word	0x00000000

080054b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80054b0:	f3ef 8009 	mrs	r0, PSP
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	4b15      	ldr	r3, [pc, #84]	; (8005510 <pxCurrentTCBConst>)
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	f01e 0f10 	tst.w	lr, #16
 80054c0:	bf08      	it	eq
 80054c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80054c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054ca:	6010      	str	r0, [r2, #0]
 80054cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80054d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80054d4:	b672      	cpsid	i
 80054d6:	f380 8811 	msr	BASEPRI, r0
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	f3bf 8f6f 	isb	sy
 80054e2:	b662      	cpsie	i
 80054e4:	f7fe feb0 	bl	8004248 <vTaskSwitchContext>
 80054e8:	f04f 0000 	mov.w	r0, #0
 80054ec:	f380 8811 	msr	BASEPRI, r0
 80054f0:	bc09      	pop	{r0, r3}
 80054f2:	6819      	ldr	r1, [r3, #0]
 80054f4:	6808      	ldr	r0, [r1, #0]
 80054f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054fa:	f01e 0f10 	tst.w	lr, #16
 80054fe:	bf08      	it	eq
 8005500:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005504:	f380 8809 	msr	PSP, r0
 8005508:	f3bf 8f6f 	isb	sy
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop

08005510 <pxCurrentTCBConst>:
 8005510:	20000910 	.word	0x20000910
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005514:	bf00      	nop
 8005516:	bf00      	nop

08005518 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	b672      	cpsid	i
 8005524:	f383 8811 	msr	BASEPRI, r3
 8005528:	f3bf 8f6f 	isb	sy
 800552c:	f3bf 8f4f 	dsb	sy
 8005530:	b662      	cpsie	i
 8005532:	607b      	str	r3, [r7, #4]
}
 8005534:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005536:	f7fe fdcb 	bl	80040d0 <xTaskIncrementTick>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005540:	4b06      	ldr	r3, [pc, #24]	; (800555c <SysTick_Handler+0x44>)
 8005542:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005546:	601a      	str	r2, [r3, #0]
 8005548:	2300      	movs	r3, #0
 800554a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	f383 8811 	msr	BASEPRI, r3
}
 8005552:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005554:	bf00      	nop
 8005556:	3708      	adds	r7, #8
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	e000ed04 	.word	0xe000ed04

08005560 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005560:	b480      	push	{r7}
 8005562:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005564:	4b0b      	ldr	r3, [pc, #44]	; (8005594 <vPortSetupTimerInterrupt+0x34>)
 8005566:	2200      	movs	r2, #0
 8005568:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800556a:	4b0b      	ldr	r3, [pc, #44]	; (8005598 <vPortSetupTimerInterrupt+0x38>)
 800556c:	2200      	movs	r2, #0
 800556e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005570:	4b0a      	ldr	r3, [pc, #40]	; (800559c <vPortSetupTimerInterrupt+0x3c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a0a      	ldr	r2, [pc, #40]	; (80055a0 <vPortSetupTimerInterrupt+0x40>)
 8005576:	fba2 2303 	umull	r2, r3, r2, r3
 800557a:	08db      	lsrs	r3, r3, #3
 800557c:	4a09      	ldr	r2, [pc, #36]	; (80055a4 <vPortSetupTimerInterrupt+0x44>)
 800557e:	3b01      	subs	r3, #1
 8005580:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005582:	4b04      	ldr	r3, [pc, #16]	; (8005594 <vPortSetupTimerInterrupt+0x34>)
 8005584:	2207      	movs	r2, #7
 8005586:	601a      	str	r2, [r3, #0]
}
 8005588:	bf00      	nop
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	e000e010 	.word	0xe000e010
 8005598:	e000e018 	.word	0xe000e018
 800559c:	20000000 	.word	0x20000000
 80055a0:	cccccccd 	.word	0xcccccccd
 80055a4:	e000e014 	.word	0xe000e014

080055a8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80055a8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80055b8 <vPortEnableVFP+0x10>
 80055ac:	6801      	ldr	r1, [r0, #0]
 80055ae:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80055b2:	6001      	str	r1, [r0, #0]
 80055b4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80055b6:	bf00      	nop
 80055b8:	e000ed88 	.word	0xe000ed88

080055bc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80055c2:	f3ef 8305 	mrs	r3, IPSR
 80055c6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2b0f      	cmp	r3, #15
 80055cc:	d916      	bls.n	80055fc <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80055ce:	4a19      	ldr	r2, [pc, #100]	; (8005634 <vPortValidateInterruptPriority+0x78>)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	4413      	add	r3, r2
 80055d4:	781b      	ldrb	r3, [r3, #0]
 80055d6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80055d8:	4b17      	ldr	r3, [pc, #92]	; (8005638 <vPortValidateInterruptPriority+0x7c>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	7afa      	ldrb	r2, [r7, #11]
 80055de:	429a      	cmp	r2, r3
 80055e0:	d20c      	bcs.n	80055fc <vPortValidateInterruptPriority+0x40>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	b672      	cpsid	i
 80055e8:	f383 8811 	msr	BASEPRI, r3
 80055ec:	f3bf 8f6f 	isb	sy
 80055f0:	f3bf 8f4f 	dsb	sy
 80055f4:	b662      	cpsie	i
 80055f6:	607b      	str	r3, [r7, #4]
}
 80055f8:	bf00      	nop
 80055fa:	e7fe      	b.n	80055fa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80055fc:	4b0f      	ldr	r3, [pc, #60]	; (800563c <vPortValidateInterruptPriority+0x80>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005604:	4b0e      	ldr	r3, [pc, #56]	; (8005640 <vPortValidateInterruptPriority+0x84>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	429a      	cmp	r2, r3
 800560a:	d90c      	bls.n	8005626 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800560c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005610:	b672      	cpsid	i
 8005612:	f383 8811 	msr	BASEPRI, r3
 8005616:	f3bf 8f6f 	isb	sy
 800561a:	f3bf 8f4f 	dsb	sy
 800561e:	b662      	cpsie	i
 8005620:	603b      	str	r3, [r7, #0]
}
 8005622:	bf00      	nop
 8005624:	e7fe      	b.n	8005624 <vPortValidateInterruptPriority+0x68>
	}
 8005626:	bf00      	nop
 8005628:	3714      	adds	r7, #20
 800562a:	46bd      	mov	sp, r7
 800562c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005630:	4770      	bx	lr
 8005632:	bf00      	nop
 8005634:	e000e3f0 	.word	0xe000e3f0
 8005638:	20000f3c 	.word	0x20000f3c
 800563c:	e000ed0c 	.word	0xe000ed0c
 8005640:	20000f40 	.word	0x20000f40

08005644 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08a      	sub	sp, #40	; 0x28
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800564c:	2300      	movs	r3, #0
 800564e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005650:	f7fe fc80 	bl	8003f54 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005654:	4b5b      	ldr	r3, [pc, #364]	; (80057c4 <pvPortMalloc+0x180>)
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800565c:	f000 f91a 	bl	8005894 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005660:	4b59      	ldr	r3, [pc, #356]	; (80057c8 <pvPortMalloc+0x184>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	4013      	ands	r3, r2
 8005668:	2b00      	cmp	r3, #0
 800566a:	f040 8092 	bne.w	8005792 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d01f      	beq.n	80056b4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8005674:	2208      	movs	r2, #8
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4413      	add	r3, r2
 800567a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f003 0307 	and.w	r3, r3, #7
 8005682:	2b00      	cmp	r3, #0
 8005684:	d016      	beq.n	80056b4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f023 0307 	bic.w	r3, r3, #7
 800568c:	3308      	adds	r3, #8
 800568e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f003 0307 	and.w	r3, r3, #7
 8005696:	2b00      	cmp	r3, #0
 8005698:	d00c      	beq.n	80056b4 <pvPortMalloc+0x70>
	__asm volatile
 800569a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569e:	b672      	cpsid	i
 80056a0:	f383 8811 	msr	BASEPRI, r3
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	f3bf 8f4f 	dsb	sy
 80056ac:	b662      	cpsie	i
 80056ae:	617b      	str	r3, [r7, #20]
}
 80056b0:	bf00      	nop
 80056b2:	e7fe      	b.n	80056b2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d06b      	beq.n	8005792 <pvPortMalloc+0x14e>
 80056ba:	4b44      	ldr	r3, [pc, #272]	; (80057cc <pvPortMalloc+0x188>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d866      	bhi.n	8005792 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80056c4:	4b42      	ldr	r3, [pc, #264]	; (80057d0 <pvPortMalloc+0x18c>)
 80056c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80056c8:	4b41      	ldr	r3, [pc, #260]	; (80057d0 <pvPortMalloc+0x18c>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056ce:	e004      	b.n	80056da <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 80056d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d903      	bls.n	80056ec <pvPortMalloc+0xa8>
 80056e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d1f1      	bne.n	80056d0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80056ec:	4b35      	ldr	r3, [pc, #212]	; (80057c4 <pvPortMalloc+0x180>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d04d      	beq.n	8005792 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	2208      	movs	r2, #8
 80056fc:	4413      	add	r3, r2
 80056fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800570a:	685a      	ldr	r2, [r3, #4]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	1ad2      	subs	r2, r2, r3
 8005710:	2308      	movs	r3, #8
 8005712:	005b      	lsls	r3, r3, #1
 8005714:	429a      	cmp	r2, r3
 8005716:	d921      	bls.n	800575c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	4413      	add	r3, r2
 800571e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005720:	69bb      	ldr	r3, [r7, #24]
 8005722:	f003 0307 	and.w	r3, r3, #7
 8005726:	2b00      	cmp	r3, #0
 8005728:	d00c      	beq.n	8005744 <pvPortMalloc+0x100>
	__asm volatile
 800572a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572e:	b672      	cpsid	i
 8005730:	f383 8811 	msr	BASEPRI, r3
 8005734:	f3bf 8f6f 	isb	sy
 8005738:	f3bf 8f4f 	dsb	sy
 800573c:	b662      	cpsie	i
 800573e:	613b      	str	r3, [r7, #16]
}
 8005740:	bf00      	nop
 8005742:	e7fe      	b.n	8005742 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005746:	685a      	ldr	r2, [r3, #4]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	1ad2      	subs	r2, r2, r3
 800574c:	69bb      	ldr	r3, [r7, #24]
 800574e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005756:	69b8      	ldr	r0, [r7, #24]
 8005758:	f000 f8fe 	bl	8005958 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800575c:	4b1b      	ldr	r3, [pc, #108]	; (80057cc <pvPortMalloc+0x188>)
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	1ad3      	subs	r3, r2, r3
 8005766:	4a19      	ldr	r2, [pc, #100]	; (80057cc <pvPortMalloc+0x188>)
 8005768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800576a:	4b18      	ldr	r3, [pc, #96]	; (80057cc <pvPortMalloc+0x188>)
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b19      	ldr	r3, [pc, #100]	; (80057d4 <pvPortMalloc+0x190>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	429a      	cmp	r2, r3
 8005774:	d203      	bcs.n	800577e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005776:	4b15      	ldr	r3, [pc, #84]	; (80057cc <pvPortMalloc+0x188>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a16      	ldr	r2, [pc, #88]	; (80057d4 <pvPortMalloc+0x190>)
 800577c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800577e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005780:	685a      	ldr	r2, [r3, #4]
 8005782:	4b11      	ldr	r3, [pc, #68]	; (80057c8 <pvPortMalloc+0x184>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	431a      	orrs	r2, r3
 8005788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800578c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800578e:	2200      	movs	r2, #0
 8005790:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005792:	f7fe fbed 	bl	8003f70 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	f003 0307 	and.w	r3, r3, #7
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00c      	beq.n	80057ba <pvPortMalloc+0x176>
	__asm volatile
 80057a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057a4:	b672      	cpsid	i
 80057a6:	f383 8811 	msr	BASEPRI, r3
 80057aa:	f3bf 8f6f 	isb	sy
 80057ae:	f3bf 8f4f 	dsb	sy
 80057b2:	b662      	cpsie	i
 80057b4:	60fb      	str	r3, [r7, #12]
}
 80057b6:	bf00      	nop
 80057b8:	e7fe      	b.n	80057b8 <pvPortMalloc+0x174>
	return pvReturn;
 80057ba:	69fb      	ldr	r3, [r7, #28]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	3728      	adds	r7, #40	; 0x28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	bd80      	pop	{r7, pc}
 80057c4:	20004b4c 	.word	0x20004b4c
 80057c8:	20004b58 	.word	0x20004b58
 80057cc:	20004b50 	.word	0x20004b50
 80057d0:	20004b44 	.word	0x20004b44
 80057d4:	20004b54 	.word	0x20004b54

080057d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b086      	sub	sp, #24
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d04c      	beq.n	8005884 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80057ea:	2308      	movs	r3, #8
 80057ec:	425b      	negs	r3, r3
 80057ee:	697a      	ldr	r2, [r7, #20]
 80057f0:	4413      	add	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80057f4:	697b      	ldr	r3, [r7, #20]
 80057f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80057f8:	693b      	ldr	r3, [r7, #16]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	4b23      	ldr	r3, [pc, #140]	; (800588c <vPortFree+0xb4>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4013      	ands	r3, r2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10c      	bne.n	8005820 <vPortFree+0x48>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580a:	b672      	cpsid	i
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	b662      	cpsie	i
 800581a:	60fb      	str	r3, [r7, #12]
}
 800581c:	bf00      	nop
 800581e:	e7fe      	b.n	800581e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005820:	693b      	ldr	r3, [r7, #16]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00c      	beq.n	8005842 <vPortFree+0x6a>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582c:	b672      	cpsid	i
 800582e:	f383 8811 	msr	BASEPRI, r3
 8005832:	f3bf 8f6f 	isb	sy
 8005836:	f3bf 8f4f 	dsb	sy
 800583a:	b662      	cpsie	i
 800583c:	60bb      	str	r3, [r7, #8]
}
 800583e:	bf00      	nop
 8005840:	e7fe      	b.n	8005840 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	4b11      	ldr	r3, [pc, #68]	; (800588c <vPortFree+0xb4>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4013      	ands	r3, r2
 800584c:	2b00      	cmp	r3, #0
 800584e:	d019      	beq.n	8005884 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d115      	bne.n	8005884 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	685a      	ldr	r2, [r3, #4]
 800585c:	4b0b      	ldr	r3, [pc, #44]	; (800588c <vPortFree+0xb4>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	43db      	mvns	r3, r3
 8005862:	401a      	ands	r2, r3
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005868:	f7fe fb74 	bl	8003f54 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800586c:	693b      	ldr	r3, [r7, #16]
 800586e:	685a      	ldr	r2, [r3, #4]
 8005870:	4b07      	ldr	r3, [pc, #28]	; (8005890 <vPortFree+0xb8>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4413      	add	r3, r2
 8005876:	4a06      	ldr	r2, [pc, #24]	; (8005890 <vPortFree+0xb8>)
 8005878:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800587a:	6938      	ldr	r0, [r7, #16]
 800587c:	f000 f86c 	bl	8005958 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005880:	f7fe fb76 	bl	8003f70 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005884:	bf00      	nop
 8005886:	3718      	adds	r7, #24
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}
 800588c:	20004b58 	.word	0x20004b58
 8005890:	20004b50 	.word	0x20004b50

08005894 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800589a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800589e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80058a0:	4b27      	ldr	r3, [pc, #156]	; (8005940 <prvHeapInit+0xac>)
 80058a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f003 0307 	and.w	r3, r3, #7
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00c      	beq.n	80058c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3307      	adds	r3, #7
 80058b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0307 	bic.w	r3, r3, #7
 80058ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80058bc:	68ba      	ldr	r2, [r7, #8]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	4a1f      	ldr	r2, [pc, #124]	; (8005940 <prvHeapInit+0xac>)
 80058c4:	4413      	add	r3, r2
 80058c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80058cc:	4a1d      	ldr	r2, [pc, #116]	; (8005944 <prvHeapInit+0xb0>)
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80058d2:	4b1c      	ldr	r3, [pc, #112]	; (8005944 <prvHeapInit+0xb0>)
 80058d4:	2200      	movs	r2, #0
 80058d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	4413      	add	r3, r2
 80058de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80058e0:	2208      	movs	r2, #8
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	1a9b      	subs	r3, r3, r2
 80058e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0307 	bic.w	r3, r3, #7
 80058ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	4a15      	ldr	r2, [pc, #84]	; (8005948 <prvHeapInit+0xb4>)
 80058f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80058f6:	4b14      	ldr	r3, [pc, #80]	; (8005948 <prvHeapInit+0xb4>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2200      	movs	r2, #0
 80058fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80058fe:	4b12      	ldr	r3, [pc, #72]	; (8005948 <prvHeapInit+0xb4>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2200      	movs	r2, #0
 8005904:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68fa      	ldr	r2, [r7, #12]
 800590e:	1ad2      	subs	r2, r2, r3
 8005910:	683b      	ldr	r3, [r7, #0]
 8005912:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005914:	4b0c      	ldr	r3, [pc, #48]	; (8005948 <prvHeapInit+0xb4>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	4a0a      	ldr	r2, [pc, #40]	; (800594c <prvHeapInit+0xb8>)
 8005922:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	4a09      	ldr	r2, [pc, #36]	; (8005950 <prvHeapInit+0xbc>)
 800592a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800592c:	4b09      	ldr	r3, [pc, #36]	; (8005954 <prvHeapInit+0xc0>)
 800592e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005932:	601a      	str	r2, [r3, #0]
}
 8005934:	bf00      	nop
 8005936:	3714      	adds	r7, #20
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr
 8005940:	20000f44 	.word	0x20000f44
 8005944:	20004b44 	.word	0x20004b44
 8005948:	20004b4c 	.word	0x20004b4c
 800594c:	20004b54 	.word	0x20004b54
 8005950:	20004b50 	.word	0x20004b50
 8005954:	20004b58 	.word	0x20004b58

08005958 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005958:	b480      	push	{r7}
 800595a:	b085      	sub	sp, #20
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005960:	4b28      	ldr	r3, [pc, #160]	; (8005a04 <prvInsertBlockIntoFreeList+0xac>)
 8005962:	60fb      	str	r3, [r7, #12]
 8005964:	e002      	b.n	800596c <prvInsertBlockIntoFreeList+0x14>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60fb      	str	r3, [r7, #12]
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	687a      	ldr	r2, [r7, #4]
 8005972:	429a      	cmp	r2, r3
 8005974:	d8f7      	bhi.n	8005966 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	68ba      	ldr	r2, [r7, #8]
 8005980:	4413      	add	r3, r2
 8005982:	687a      	ldr	r2, [r7, #4]
 8005984:	429a      	cmp	r2, r3
 8005986:	d108      	bne.n	800599a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	685a      	ldr	r2, [r3, #4]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	441a      	add	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685b      	ldr	r3, [r3, #4]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	441a      	add	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d118      	bne.n	80059e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	4b15      	ldr	r3, [pc, #84]	; (8005a08 <prvInsertBlockIntoFreeList+0xb0>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d00d      	beq.n	80059d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685a      	ldr	r2, [r3, #4]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	685b      	ldr	r3, [r3, #4]
 80059c4:	441a      	add	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	601a      	str	r2, [r3, #0]
 80059d4:	e008      	b.n	80059e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80059d6:	4b0c      	ldr	r3, [pc, #48]	; (8005a08 <prvInsertBlockIntoFreeList+0xb0>)
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	e003      	b.n	80059e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80059e8:	68fa      	ldr	r2, [r7, #12]
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d002      	beq.n	80059f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80059f6:	bf00      	nop
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	20004b44 	.word	0x20004b44
 8005a08:	20004b4c 	.word	0x20004b4c

08005a0c <__libc_init_array>:
 8005a0c:	b570      	push	{r4, r5, r6, lr}
 8005a0e:	4d0d      	ldr	r5, [pc, #52]	; (8005a44 <__libc_init_array+0x38>)
 8005a10:	4c0d      	ldr	r4, [pc, #52]	; (8005a48 <__libc_init_array+0x3c>)
 8005a12:	1b64      	subs	r4, r4, r5
 8005a14:	10a4      	asrs	r4, r4, #2
 8005a16:	2600      	movs	r6, #0
 8005a18:	42a6      	cmp	r6, r4
 8005a1a:	d109      	bne.n	8005a30 <__libc_init_array+0x24>
 8005a1c:	4d0b      	ldr	r5, [pc, #44]	; (8005a4c <__libc_init_array+0x40>)
 8005a1e:	4c0c      	ldr	r4, [pc, #48]	; (8005a50 <__libc_init_array+0x44>)
 8005a20:	f000 f8f2 	bl	8005c08 <_init>
 8005a24:	1b64      	subs	r4, r4, r5
 8005a26:	10a4      	asrs	r4, r4, #2
 8005a28:	2600      	movs	r6, #0
 8005a2a:	42a6      	cmp	r6, r4
 8005a2c:	d105      	bne.n	8005a3a <__libc_init_array+0x2e>
 8005a2e:	bd70      	pop	{r4, r5, r6, pc}
 8005a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a34:	4798      	blx	r3
 8005a36:	3601      	adds	r6, #1
 8005a38:	e7ee      	b.n	8005a18 <__libc_init_array+0xc>
 8005a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a3e:	4798      	blx	r3
 8005a40:	3601      	adds	r6, #1
 8005a42:	e7f2      	b.n	8005a2a <__libc_init_array+0x1e>
 8005a44:	08005d60 	.word	0x08005d60
 8005a48:	08005d60 	.word	0x08005d60
 8005a4c:	08005d60 	.word	0x08005d60
 8005a50:	08005d64 	.word	0x08005d64

08005a54 <__retarget_lock_acquire_recursive>:
 8005a54:	4770      	bx	lr

08005a56 <__retarget_lock_release_recursive>:
 8005a56:	4770      	bx	lr

08005a58 <memcpy>:
 8005a58:	440a      	add	r2, r1
 8005a5a:	4291      	cmp	r1, r2
 8005a5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a60:	d100      	bne.n	8005a64 <memcpy+0xc>
 8005a62:	4770      	bx	lr
 8005a64:	b510      	push	{r4, lr}
 8005a66:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a6a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a6e:	4291      	cmp	r1, r2
 8005a70:	d1f9      	bne.n	8005a66 <memcpy+0xe>
 8005a72:	bd10      	pop	{r4, pc}

08005a74 <memset>:
 8005a74:	4402      	add	r2, r0
 8005a76:	4603      	mov	r3, r0
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d100      	bne.n	8005a7e <memset+0xa>
 8005a7c:	4770      	bx	lr
 8005a7e:	f803 1b01 	strb.w	r1, [r3], #1
 8005a82:	e7f9      	b.n	8005a78 <memset+0x4>

08005a84 <cleanup_glue>:
 8005a84:	b538      	push	{r3, r4, r5, lr}
 8005a86:	460c      	mov	r4, r1
 8005a88:	6809      	ldr	r1, [r1, #0]
 8005a8a:	4605      	mov	r5, r0
 8005a8c:	b109      	cbz	r1, 8005a92 <cleanup_glue+0xe>
 8005a8e:	f7ff fff9 	bl	8005a84 <cleanup_glue>
 8005a92:	4621      	mov	r1, r4
 8005a94:	4628      	mov	r0, r5
 8005a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005a9a:	f000 b869 	b.w	8005b70 <_free_r>
	...

08005aa0 <_reclaim_reent>:
 8005aa0:	4b2c      	ldr	r3, [pc, #176]	; (8005b54 <_reclaim_reent+0xb4>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4283      	cmp	r3, r0
 8005aa6:	b570      	push	{r4, r5, r6, lr}
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	d051      	beq.n	8005b50 <_reclaim_reent+0xb0>
 8005aac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005aae:	b143      	cbz	r3, 8005ac2 <_reclaim_reent+0x22>
 8005ab0:	68db      	ldr	r3, [r3, #12]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d14a      	bne.n	8005b4c <_reclaim_reent+0xac>
 8005ab6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005ab8:	6819      	ldr	r1, [r3, #0]
 8005aba:	b111      	cbz	r1, 8005ac2 <_reclaim_reent+0x22>
 8005abc:	4620      	mov	r0, r4
 8005abe:	f000 f857 	bl	8005b70 <_free_r>
 8005ac2:	6961      	ldr	r1, [r4, #20]
 8005ac4:	b111      	cbz	r1, 8005acc <_reclaim_reent+0x2c>
 8005ac6:	4620      	mov	r0, r4
 8005ac8:	f000 f852 	bl	8005b70 <_free_r>
 8005acc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005ace:	b111      	cbz	r1, 8005ad6 <_reclaim_reent+0x36>
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f000 f84d 	bl	8005b70 <_free_r>
 8005ad6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005ad8:	b111      	cbz	r1, 8005ae0 <_reclaim_reent+0x40>
 8005ada:	4620      	mov	r0, r4
 8005adc:	f000 f848 	bl	8005b70 <_free_r>
 8005ae0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005ae2:	b111      	cbz	r1, 8005aea <_reclaim_reent+0x4a>
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f000 f843 	bl	8005b70 <_free_r>
 8005aea:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005aec:	b111      	cbz	r1, 8005af4 <_reclaim_reent+0x54>
 8005aee:	4620      	mov	r0, r4
 8005af0:	f000 f83e 	bl	8005b70 <_free_r>
 8005af4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005af6:	b111      	cbz	r1, 8005afe <_reclaim_reent+0x5e>
 8005af8:	4620      	mov	r0, r4
 8005afa:	f000 f839 	bl	8005b70 <_free_r>
 8005afe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005b00:	b111      	cbz	r1, 8005b08 <_reclaim_reent+0x68>
 8005b02:	4620      	mov	r0, r4
 8005b04:	f000 f834 	bl	8005b70 <_free_r>
 8005b08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b0a:	b111      	cbz	r1, 8005b12 <_reclaim_reent+0x72>
 8005b0c:	4620      	mov	r0, r4
 8005b0e:	f000 f82f 	bl	8005b70 <_free_r>
 8005b12:	69a3      	ldr	r3, [r4, #24]
 8005b14:	b1e3      	cbz	r3, 8005b50 <_reclaim_reent+0xb0>
 8005b16:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005b18:	4620      	mov	r0, r4
 8005b1a:	4798      	blx	r3
 8005b1c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005b1e:	b1b9      	cbz	r1, 8005b50 <_reclaim_reent+0xb0>
 8005b20:	4620      	mov	r0, r4
 8005b22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005b26:	f7ff bfad 	b.w	8005a84 <cleanup_glue>
 8005b2a:	5949      	ldr	r1, [r1, r5]
 8005b2c:	b941      	cbnz	r1, 8005b40 <_reclaim_reent+0xa0>
 8005b2e:	3504      	adds	r5, #4
 8005b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b32:	2d80      	cmp	r5, #128	; 0x80
 8005b34:	68d9      	ldr	r1, [r3, #12]
 8005b36:	d1f8      	bne.n	8005b2a <_reclaim_reent+0x8a>
 8005b38:	4620      	mov	r0, r4
 8005b3a:	f000 f819 	bl	8005b70 <_free_r>
 8005b3e:	e7ba      	b.n	8005ab6 <_reclaim_reent+0x16>
 8005b40:	680e      	ldr	r6, [r1, #0]
 8005b42:	4620      	mov	r0, r4
 8005b44:	f000 f814 	bl	8005b70 <_free_r>
 8005b48:	4631      	mov	r1, r6
 8005b4a:	e7ef      	b.n	8005b2c <_reclaim_reent+0x8c>
 8005b4c:	2500      	movs	r5, #0
 8005b4e:	e7ef      	b.n	8005b30 <_reclaim_reent+0x90>
 8005b50:	bd70      	pop	{r4, r5, r6, pc}
 8005b52:	bf00      	nop
 8005b54:	20000010 	.word	0x20000010

08005b58 <__malloc_lock>:
 8005b58:	4801      	ldr	r0, [pc, #4]	; (8005b60 <__malloc_lock+0x8>)
 8005b5a:	f7ff bf7b 	b.w	8005a54 <__retarget_lock_acquire_recursive>
 8005b5e:	bf00      	nop
 8005b60:	20004b5c 	.word	0x20004b5c

08005b64 <__malloc_unlock>:
 8005b64:	4801      	ldr	r0, [pc, #4]	; (8005b6c <__malloc_unlock+0x8>)
 8005b66:	f7ff bf76 	b.w	8005a56 <__retarget_lock_release_recursive>
 8005b6a:	bf00      	nop
 8005b6c:	20004b5c 	.word	0x20004b5c

08005b70 <_free_r>:
 8005b70:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005b72:	2900      	cmp	r1, #0
 8005b74:	d044      	beq.n	8005c00 <_free_r+0x90>
 8005b76:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b7a:	9001      	str	r0, [sp, #4]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	f1a1 0404 	sub.w	r4, r1, #4
 8005b82:	bfb8      	it	lt
 8005b84:	18e4      	addlt	r4, r4, r3
 8005b86:	f7ff ffe7 	bl	8005b58 <__malloc_lock>
 8005b8a:	4a1e      	ldr	r2, [pc, #120]	; (8005c04 <_free_r+0x94>)
 8005b8c:	9801      	ldr	r0, [sp, #4]
 8005b8e:	6813      	ldr	r3, [r2, #0]
 8005b90:	b933      	cbnz	r3, 8005ba0 <_free_r+0x30>
 8005b92:	6063      	str	r3, [r4, #4]
 8005b94:	6014      	str	r4, [r2, #0]
 8005b96:	b003      	add	sp, #12
 8005b98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005b9c:	f7ff bfe2 	b.w	8005b64 <__malloc_unlock>
 8005ba0:	42a3      	cmp	r3, r4
 8005ba2:	d908      	bls.n	8005bb6 <_free_r+0x46>
 8005ba4:	6825      	ldr	r5, [r4, #0]
 8005ba6:	1961      	adds	r1, r4, r5
 8005ba8:	428b      	cmp	r3, r1
 8005baa:	bf01      	itttt	eq
 8005bac:	6819      	ldreq	r1, [r3, #0]
 8005bae:	685b      	ldreq	r3, [r3, #4]
 8005bb0:	1949      	addeq	r1, r1, r5
 8005bb2:	6021      	streq	r1, [r4, #0]
 8005bb4:	e7ed      	b.n	8005b92 <_free_r+0x22>
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	b10b      	cbz	r3, 8005bc0 <_free_r+0x50>
 8005bbc:	42a3      	cmp	r3, r4
 8005bbe:	d9fa      	bls.n	8005bb6 <_free_r+0x46>
 8005bc0:	6811      	ldr	r1, [r2, #0]
 8005bc2:	1855      	adds	r5, r2, r1
 8005bc4:	42a5      	cmp	r5, r4
 8005bc6:	d10b      	bne.n	8005be0 <_free_r+0x70>
 8005bc8:	6824      	ldr	r4, [r4, #0]
 8005bca:	4421      	add	r1, r4
 8005bcc:	1854      	adds	r4, r2, r1
 8005bce:	42a3      	cmp	r3, r4
 8005bd0:	6011      	str	r1, [r2, #0]
 8005bd2:	d1e0      	bne.n	8005b96 <_free_r+0x26>
 8005bd4:	681c      	ldr	r4, [r3, #0]
 8005bd6:	685b      	ldr	r3, [r3, #4]
 8005bd8:	6053      	str	r3, [r2, #4]
 8005bda:	4421      	add	r1, r4
 8005bdc:	6011      	str	r1, [r2, #0]
 8005bde:	e7da      	b.n	8005b96 <_free_r+0x26>
 8005be0:	d902      	bls.n	8005be8 <_free_r+0x78>
 8005be2:	230c      	movs	r3, #12
 8005be4:	6003      	str	r3, [r0, #0]
 8005be6:	e7d6      	b.n	8005b96 <_free_r+0x26>
 8005be8:	6825      	ldr	r5, [r4, #0]
 8005bea:	1961      	adds	r1, r4, r5
 8005bec:	428b      	cmp	r3, r1
 8005bee:	bf04      	itt	eq
 8005bf0:	6819      	ldreq	r1, [r3, #0]
 8005bf2:	685b      	ldreq	r3, [r3, #4]
 8005bf4:	6063      	str	r3, [r4, #4]
 8005bf6:	bf04      	itt	eq
 8005bf8:	1949      	addeq	r1, r1, r5
 8005bfa:	6021      	streq	r1, [r4, #0]
 8005bfc:	6054      	str	r4, [r2, #4]
 8005bfe:	e7ca      	b.n	8005b96 <_free_r+0x26>
 8005c00:	b003      	add	sp, #12
 8005c02:	bd30      	pop	{r4, r5, pc}
 8005c04:	20004b60 	.word	0x20004b60

08005c08 <_init>:
 8005c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c0a:	bf00      	nop
 8005c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c0e:	bc08      	pop	{r3}
 8005c10:	469e      	mov	lr, r3
 8005c12:	4770      	bx	lr

08005c14 <_fini>:
 8005c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c16:	bf00      	nop
 8005c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c1a:	bc08      	pop	{r3}
 8005c1c:	469e      	mov	lr, r3
 8005c1e:	4770      	bx	lr

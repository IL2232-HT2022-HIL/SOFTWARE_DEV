
MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000174b0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003178  080176b0  080176b0  000276b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a828  0801a828  000301d8  2**0
                  CONTENTS
  4 .ARM          00000008  0801a828  0801a828  0002a828  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a830  0801a830  000301d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a830  0801a830  0002a830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a834  0801a834  0002a834  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0801a838  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000098  0801a8d0  00030098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000138  0801a970  00030138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000f1d0  200001d8  0801aa10  000301d8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000f3a8  0801aa10  0003f3a8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003b3d6  00000000  00000000  00030206  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007f74  00000000  00000000  0006b5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002a88  00000000  00000000  00073550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000028e8  00000000  00000000  00075fd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000121c2  00000000  00000000  000788c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003f429  00000000  00000000  0008aa82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00128437  00000000  00000000  000c9eab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001f22e2  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000bbf0  00000000  00000000  001f2334  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d8 	.word	0x200001d8
 800021c:	00000000 	.word	0x00000000
 8000220:	08017698 	.word	0x08017698

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001dc 	.word	0x200001dc
 800023c:	08017698 	.word	0x08017698

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005e4:	b480      	push	{r7}
 80005e6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005e8:	f3bf 8f4f 	dsb	sy
}
 80005ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ee:	f3bf 8f6f 	isb	sy
}
 80005f2:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005f4:	4b0d      	ldr	r3, [pc, #52]	; (800062c <SCB_EnableICache+0x48>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000608:	4b08      	ldr	r3, [pc, #32]	; (800062c <SCB_EnableICache+0x48>)
 800060a:	695b      	ldr	r3, [r3, #20]
 800060c:	4a07      	ldr	r2, [pc, #28]	; (800062c <SCB_EnableICache+0x48>)
 800060e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000612:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000614:	f3bf 8f4f 	dsb	sy
}
 8000618:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800061a:	f3bf 8f6f 	isb	sy
}
 800061e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000620:	bf00      	nop
 8000622:	46bd      	mov	sp, r7
 8000624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000628:	4770      	bx	lr
 800062a:	bf00      	nop
 800062c:	e000ed00 	.word	0xe000ed00

08000630 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000636:	4b1f      	ldr	r3, [pc, #124]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000638:	2200      	movs	r2, #0
 800063a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800063e:	f3bf 8f4f 	dsb	sy
}
 8000642:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000644:	4b1b      	ldr	r3, [pc, #108]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000646:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800064a:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	0b5b      	lsrs	r3, r3, #13
 8000650:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000654:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	08db      	lsrs	r3, r3, #3
 800065a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800065e:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	015a      	lsls	r2, r3, #5
 8000664:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000668:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800066a:	68ba      	ldr	r2, [r7, #8]
 800066c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800066e:	4911      	ldr	r1, [pc, #68]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000670:	4313      	orrs	r3, r2
 8000672:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	1e5a      	subs	r2, r3, #1
 800067a:	60ba      	str	r2, [r7, #8]
 800067c:	2b00      	cmp	r3, #0
 800067e:	d1ef      	bne.n	8000660 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	1e5a      	subs	r2, r3, #1
 8000684:	60fa      	str	r2, [r7, #12]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d1e5      	bne.n	8000656 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800068a:	f3bf 8f4f 	dsb	sy
}
 800068e:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000692:	695b      	ldr	r3, [r3, #20]
 8000694:	4a07      	ldr	r2, [pc, #28]	; (80006b4 <SCB_EnableDCache+0x84>)
 8000696:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800069a:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800069c:	f3bf 8f4f 	dsb	sy
}
 80006a0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006a2:	f3bf 8f6f 	isb	sy
}
 80006a6:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80006a8:	bf00      	nop
 80006aa:	3714      	adds	r7, #20
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000ed00 	.word	0xe000ed00

080006b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 80006bc:	f7ff ff92 	bl	80005e4 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 80006c0:	f7ff ffb6 	bl	8000630 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006c4:	f000 feae 	bl	8001424 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c8:	f000 f81e 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006cc:	f000 f96a 	bl	80009a4 <MX_GPIO_Init>
  MX_SPI1_Init();
 80006d0:	f000 f8fe 	bl	80008d0 <MX_SPI1_Init>
  MX_CAN1_Init();
 80006d4:	f000 f888 	bl	80007e8 <MX_CAN1_Init>
  MX_I2C1_Init();
 80006d8:	f000 f8ba 	bl	8000850 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80006dc:	f000 f932 	bl	8000944 <MX_USART1_UART_Init>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80006e0:	f005 fd3a 	bl	8006158 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80006e4:	4a05      	ldr	r2, [pc, #20]	; (80006fc <main+0x44>)
 80006e6:	2100      	movs	r1, #0
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <main+0x48>)
 80006ea:	f005 fdc7 	bl	800627c <osThreadNew>
 80006ee:	4603      	mov	r3, r0
 80006f0:	4a04      	ldr	r2, [pc, #16]	; (8000704 <main+0x4c>)
 80006f2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006f4:	f005 fd64 	bl	80061c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <main+0x40>
 80006fa:	bf00      	nop
 80006fc:	0801a560 	.word	0x0801a560
 8000700:	08000a6d 	.word	0x08000a6d
 8000704:	2000035c 	.word	0x2000035c

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	; 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	2234      	movs	r2, #52	; 0x34
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f015 fff5 	bl	8016706 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	4b2c      	ldr	r3, [pc, #176]	; (80007e0 <SystemClock_Config+0xd8>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	4a2b      	ldr	r2, [pc, #172]	; (80007e0 <SystemClock_Config+0xd8>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	; 0x40
 8000738:	4b29      	ldr	r3, [pc, #164]	; (80007e0 <SystemClock_Config+0xd8>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000744:	4b27      	ldr	r3, [pc, #156]	; (80007e4 <SystemClock_Config+0xdc>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800074c:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <SystemClock_Config+0xdc>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <SystemClock_Config+0xdc>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	2302      	movs	r3, #2
 8000762:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	2302      	movs	r3, #2
 800076e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000770:	2300      	movs	r3, #0
 8000772:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000778:	2360      	movs	r3, #96	; 0x60
 800077a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000780:	2304      	movs	r3, #4
 8000782:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000784:	2302      	movs	r3, #2
 8000786:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4618      	mov	r0, r3
 800078e:	f002 fe6d 	bl	800346c <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000798:	f000 f984 	bl	8000aa4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800079c:	f002 fe16 	bl	80033cc <HAL_PWREx_EnableOverDrive>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80007a6:	f000 f97d 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007aa:	230f      	movs	r3, #15
 80007ac:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ae:	2302      	movs	r3, #2
 80007b0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007b2:	2300      	movs	r3, #0
 80007b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ba:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007bc:	2300      	movs	r3, #0
 80007be:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007c0:	f107 0308 	add.w	r3, r7, #8
 80007c4:	2103      	movs	r1, #3
 80007c6:	4618      	mov	r0, r3
 80007c8:	f003 f8fe 	bl	80039c8 <HAL_RCC_ClockConfig>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007d2:	f000 f967 	bl	8000aa4 <Error_Handler>
  }
}
 80007d6:	bf00      	nop
 80007d8:	3750      	adds	r7, #80	; 0x50
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800
 80007e4:	40007000 	.word	0x40007000

080007e8 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007ec:	4b16      	ldr	r3, [pc, #88]	; (8000848 <MX_CAN1_Init+0x60>)
 80007ee:	4a17      	ldr	r2, [pc, #92]	; (800084c <MX_CAN1_Init+0x64>)
 80007f0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007f2:	4b15      	ldr	r3, [pc, #84]	; (8000848 <MX_CAN1_Init+0x60>)
 80007f4:	2210      	movs	r2, #16
 80007f6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007f8:	4b13      	ldr	r3, [pc, #76]	; (8000848 <MX_CAN1_Init+0x60>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007fe:	4b12      	ldr	r3, [pc, #72]	; (8000848 <MX_CAN1_Init+0x60>)
 8000800:	2200      	movs	r2, #0
 8000802:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8000804:	4b10      	ldr	r3, [pc, #64]	; (8000848 <MX_CAN1_Init+0x60>)
 8000806:	2200      	movs	r2, #0
 8000808:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 800080a:	4b0f      	ldr	r3, [pc, #60]	; (8000848 <MX_CAN1_Init+0x60>)
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000810:	4b0d      	ldr	r3, [pc, #52]	; (8000848 <MX_CAN1_Init+0x60>)
 8000812:	2200      	movs	r2, #0
 8000814:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_CAN1_Init+0x60>)
 8000818:	2200      	movs	r2, #0
 800081a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <MX_CAN1_Init+0x60>)
 800081e:	2200      	movs	r2, #0
 8000820:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_CAN1_Init+0x60>)
 8000824:	2200      	movs	r2, #0
 8000826:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <MX_CAN1_Init+0x60>)
 800082a:	2200      	movs	r2, #0
 800082c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800082e:	4b06      	ldr	r3, [pc, #24]	; (8000848 <MX_CAN1_Init+0x60>)
 8000830:	2200      	movs	r2, #0
 8000832:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000834:	4804      	ldr	r0, [pc, #16]	; (8000848 <MX_CAN1_Init+0x60>)
 8000836:	f000 fe4f 	bl	80014d8 <HAL_CAN_Init>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000840:	f000 f930 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200001f4 	.word	0x200001f4
 800084c:	40006400 	.word	0x40006400

08000850 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000854:	4b1b      	ldr	r3, [pc, #108]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <MX_I2C1_Init+0x78>)
 8000858:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800085a:	4b1a      	ldr	r3, [pc, #104]	; (80008c4 <MX_I2C1_Init+0x74>)
 800085c:	4a1b      	ldr	r2, [pc, #108]	; (80008cc <MX_I2C1_Init+0x7c>)
 800085e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000860:	4b18      	ldr	r3, [pc, #96]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000862:	2200      	movs	r2, #0
 8000864:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000866:	4b17      	ldr	r3, [pc, #92]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000868:	2201      	movs	r2, #1
 800086a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800086c:	4b15      	ldr	r3, [pc, #84]	; (80008c4 <MX_I2C1_Init+0x74>)
 800086e:	2200      	movs	r2, #0
 8000870:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000872:	4b14      	ldr	r3, [pc, #80]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000874:	2200      	movs	r2, #0
 8000876:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000878:	4b12      	ldr	r3, [pc, #72]	; (80008c4 <MX_I2C1_Init+0x74>)
 800087a:	2200      	movs	r2, #0
 800087c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000880:	2200      	movs	r2, #0
 8000882:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000884:	4b0f      	ldr	r3, [pc, #60]	; (80008c4 <MX_I2C1_Init+0x74>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800088a:	480e      	ldr	r0, [pc, #56]	; (80008c4 <MX_I2C1_Init+0x74>)
 800088c:	f002 fc76 	bl	800317c <HAL_I2C_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000896:	f000 f905 	bl	8000aa4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800089a:	2100      	movs	r1, #0
 800089c:	4809      	ldr	r0, [pc, #36]	; (80008c4 <MX_I2C1_Init+0x74>)
 800089e:	f002 fcfd 	bl	800329c <HAL_I2CEx_ConfigAnalogFilter>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008a8:	f000 f8fc 	bl	8000aa4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ac:	2100      	movs	r1, #0
 80008ae:	4805      	ldr	r0, [pc, #20]	; (80008c4 <MX_I2C1_Init+0x74>)
 80008b0:	f002 fd3f 	bl	8003332 <HAL_I2CEx_ConfigDigitalFilter>
 80008b4:	4603      	mov	r3, r0
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d001      	beq.n	80008be <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008ba:	f000 f8f3 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008be:	bf00      	nop
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	2000021c 	.word	0x2000021c
 80008c8:	40005400 	.word	0x40005400
 80008cc:	20303e5d 	.word	0x20303e5d

080008d0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008d4:	4b19      	ldr	r3, [pc, #100]	; (800093c <MX_SPI1_Init+0x6c>)
 80008d6:	4a1a      	ldr	r2, [pc, #104]	; (8000940 <MX_SPI1_Init+0x70>)
 80008d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <MX_SPI1_Init+0x6c>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008e0:	4b16      	ldr	r3, [pc, #88]	; (800093c <MX_SPI1_Init+0x6c>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80008e6:	4b15      	ldr	r3, [pc, #84]	; (800093c <MX_SPI1_Init+0x6c>)
 80008e8:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008ec:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008ee:	4b13      	ldr	r3, [pc, #76]	; (800093c <MX_SPI1_Init+0x6c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_SPI1_Init+0x6c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008fa:	4b10      	ldr	r3, [pc, #64]	; (800093c <MX_SPI1_Init+0x6c>)
 80008fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000900:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000902:	4b0e      	ldr	r3, [pc, #56]	; (800093c <MX_SPI1_Init+0x6c>)
 8000904:	2200      	movs	r2, #0
 8000906:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_SPI1_Init+0x6c>)
 800090a:	2200      	movs	r2, #0
 800090c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800090e:	4b0b      	ldr	r3, [pc, #44]	; (800093c <MX_SPI1_Init+0x6c>)
 8000910:	2200      	movs	r2, #0
 8000912:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000914:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_SPI1_Init+0x6c>)
 8000916:	2207      	movs	r2, #7
 8000918:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800091a:	4b08      	ldr	r3, [pc, #32]	; (800093c <MX_SPI1_Init+0x6c>)
 800091c:	2200      	movs	r2, #0
 800091e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000920:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_SPI1_Init+0x6c>)
 8000922:	2200      	movs	r2, #0
 8000924:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000926:	4805      	ldr	r0, [pc, #20]	; (800093c <MX_SPI1_Init+0x6c>)
 8000928:	f003 fece 	bl	80046c8 <HAL_SPI_Init>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_SPI1_Init+0x66>
  {
    Error_Handler();
 8000932:	f000 f8b7 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000936:	bf00      	nop
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000270 	.word	0x20000270
 8000940:	40013000 	.word	0x40013000

08000944 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_USART1_UART_Init+0x58>)
 800094a:	4a15      	ldr	r2, [pc, #84]	; (80009a0 <MX_USART1_UART_Init+0x5c>)
 800094c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000950:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000958:	2200      	movs	r2, #0
 800095a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_USART1_UART_Init+0x58>)
 800095e:	2200      	movs	r2, #0
 8000960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000964:	2200      	movs	r2, #0
 8000966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_USART1_UART_Init+0x58>)
 800096a:	220c      	movs	r2, #12
 800096c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000970:	2200      	movs	r2, #0
 8000972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000976:	2200      	movs	r2, #0
 8000978:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_USART1_UART_Init+0x58>)
 800097c:	2200      	movs	r2, #0
 800097e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000982:	2200      	movs	r2, #0
 8000984:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_USART1_UART_Init+0x58>)
 8000988:	f004 fa28 	bl	8004ddc <HAL_UART_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000992:	f000 f887 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	200002d4 	.word	0x200002d4
 80009a0:	40011000 	.word	0x40011000

080009a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	; 0x28
 80009a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009aa:	f107 0314 	add.w	r3, r7, #20
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
 80009b8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ba:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	4a29      	ldr	r2, [pc, #164]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009c0:	f043 0304 	orr.w	r3, r3, #4
 80009c4:	6313      	str	r3, [r2, #48]	; 0x30
 80009c6:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ca:	f003 0304 	and.w	r3, r3, #4
 80009ce:	613b      	str	r3, [r7, #16]
 80009d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d2:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a23      	ldr	r2, [pc, #140]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ea:	4b1e      	ldr	r3, [pc, #120]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a1d      	ldr	r2, [pc, #116]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009f0:	f043 0302 	orr.w	r3, r3, #2
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b1b      	ldr	r3, [pc, #108]	; (8000a64 <MX_GPIO_Init+0xc0>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0302 	and.w	r3, r3, #2
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a02:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_GPIO_Init+0xc0>)
 8000a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a06:	4a17      	ldr	r2, [pc, #92]	; (8000a64 <MX_GPIO_Init+0xc0>)
 8000a08:	f043 0308 	orr.w	r3, r3, #8
 8000a0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_GPIO_Init+0xc0>)
 8000a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a12:	f003 0308 	and.w	r3, r3, #8
 8000a16:	607b      	str	r3, [r7, #4]
 8000a18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a1a:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <MX_GPIO_Init+0xc0>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a11      	ldr	r2, [pc, #68]	; (8000a64 <MX_GPIO_Init+0xc0>)
 8000a20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_GPIO_Init+0xc0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a2e:	603b      	str	r3, [r7, #0]
 8000a30:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_7, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000a38:	480b      	ldr	r0, [pc, #44]	; (8000a68 <MX_GPIO_Init+0xc4>)
 8000a3a:	f002 fb85 	bl	8003148 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB14 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_7;
 8000a3e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_GPIO_Init+0xc4>)
 8000a58:	f002 f9ca 	bl	8002df0 <HAL_GPIO_Init>

}
 8000a5c:	bf00      	nop
 8000a5e:	3728      	adds	r7, #40	; 0x28
 8000a60:	46bd      	mov	sp, r7
 8000a62:	bd80      	pop	{r7, pc}
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020400 	.word	0x40020400

08000a6c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a74:	f004 fe1a 	bl	80056ac <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000a78:	2001      	movs	r0, #1
 8000a7a:	f005 fca5 	bl	80063c8 <osDelay>
 8000a7e:	e7fb      	b.n	8000a78 <StartDefaultTask+0xc>

08000a80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d101      	bne.n	8000a96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a92:	f000 fcdd 	bl	8001450 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40001000 	.word	0x40001000

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	e7fe      	b.n	8000aac <Error_Handler+0x8>
	...

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <HAL_MspInit+0x4c>)
 8000ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aba:	4a10      	ldr	r2, [pc, #64]	; (8000afc <HAL_MspInit+0x4c>)
 8000abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <HAL_MspInit+0x4c>)
 8000ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <HAL_MspInit+0x4c>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_MspInit+0x4c>)
 8000ad4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_MspInit+0x4c>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	210f      	movs	r1, #15
 8000aea:	f06f 0001 	mvn.w	r0, #1
 8000aee:	f000 fea7 	bl	8001840 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a17      	ldr	r2, [pc, #92]	; (8000b7c <HAL_CAN_MspInit+0x7c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d128      	bne.n	8000b74 <HAL_CAN_MspInit+0x74>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000b22:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <HAL_CAN_MspInit+0x80>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a16      	ldr	r2, [pc, #88]	; (8000b80 <HAL_CAN_MspInit+0x80>)
 8000b28:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2e:	4b14      	ldr	r3, [pc, #80]	; (8000b80 <HAL_CAN_MspInit+0x80>)
 8000b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b36:	613b      	str	r3, [r7, #16]
 8000b38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3a:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <HAL_CAN_MspInit+0x80>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a10      	ldr	r2, [pc, #64]	; (8000b80 <HAL_CAN_MspInit+0x80>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b0e      	ldr	r3, [pc, #56]	; (8000b80 <HAL_CAN_MspInit+0x80>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000b52:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b60:	2303      	movs	r3, #3
 8000b62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000b64:	2309      	movs	r3, #9
 8000b66:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	4805      	ldr	r0, [pc, #20]	; (8000b84 <HAL_CAN_MspInit+0x84>)
 8000b70:	f002 f93e 	bl	8002df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8000b74:	bf00      	nop
 8000b76:	3728      	adds	r7, #40	; 0x28
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	40006400 	.word	0x40006400
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020000 	.word	0x40020000

08000b88 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b0ae      	sub	sp, #184	; 0xb8
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b90:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]
 8000b9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	2290      	movs	r2, #144	; 0x90
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f015 fdac 	bl	8016706 <memset>
  if(hi2c->Instance==I2C1)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a22      	ldr	r2, [pc, #136]	; (8000c3c <HAL_I2C_MspInit+0xb4>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d13c      	bne.n	8000c32 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000bb8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bbc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bc2:	f107 0314 	add.w	r3, r7, #20
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	f003 f956 	bl	8003e78 <HAL_RCCEx_PeriphCLKConfig>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000bd2:	f7ff ff67 	bl	8000aa4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bd6:	4b1a      	ldr	r3, [pc, #104]	; (8000c40 <HAL_I2C_MspInit+0xb8>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a19      	ldr	r2, [pc, #100]	; (8000c40 <HAL_I2C_MspInit+0xb8>)
 8000bdc:	f043 0302 	orr.w	r3, r3, #2
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b17      	ldr	r3, [pc, #92]	; (8000c40 <HAL_I2C_MspInit+0xb8>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0302 	and.w	r3, r3, #2
 8000bea:	613b      	str	r3, [r7, #16]
 8000bec:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8000bee:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bf2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf6:	2312      	movs	r3, #18
 8000bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c02:	2303      	movs	r3, #3
 8000c04:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c08:	2304      	movs	r3, #4
 8000c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c0e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c12:	4619      	mov	r1, r3
 8000c14:	480b      	ldr	r0, [pc, #44]	; (8000c44 <HAL_I2C_MspInit+0xbc>)
 8000c16:	f002 f8eb 	bl	8002df0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c1a:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <HAL_I2C_MspInit+0xb8>)
 8000c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c1e:	4a08      	ldr	r2, [pc, #32]	; (8000c40 <HAL_I2C_MspInit+0xb8>)
 8000c20:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c24:	6413      	str	r3, [r2, #64]	; 0x40
 8000c26:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <HAL_I2C_MspInit+0xb8>)
 8000c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c32:	bf00      	nop
 8000c34:	37b8      	adds	r7, #184	; 0xb8
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	40005400 	.word	0x40005400
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020400 	.word	0x40020400

08000c48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08a      	sub	sp, #40	; 0x28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c50:	f107 0314 	add.w	r3, r7, #20
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a25      	ldr	r2, [pc, #148]	; (8000cfc <HAL_SPI_MspInit+0xb4>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d143      	bne.n	8000cf2 <HAL_SPI_MspInit+0xaa>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000c6a:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <HAL_SPI_MspInit+0xb8>)
 8000c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6e:	4a24      	ldr	r2, [pc, #144]	; (8000d00 <HAL_SPI_MspInit+0xb8>)
 8000c70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c74:	6453      	str	r3, [r2, #68]	; 0x44
 8000c76:	4b22      	ldr	r3, [pc, #136]	; (8000d00 <HAL_SPI_MspInit+0xb8>)
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000c7e:	613b      	str	r3, [r7, #16]
 8000c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c82:	4b1f      	ldr	r3, [pc, #124]	; (8000d00 <HAL_SPI_MspInit+0xb8>)
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	4a1e      	ldr	r2, [pc, #120]	; (8000d00 <HAL_SPI_MspInit+0xb8>)
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_SPI_MspInit+0xb8>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c92:	f003 0301 	and.w	r3, r3, #1
 8000c96:	60fb      	str	r3, [r7, #12]
 8000c98:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_SPI_MspInit+0xb8>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a18      	ldr	r2, [pc, #96]	; (8000d00 <HAL_SPI_MspInit+0xb8>)
 8000ca0:	f043 0308 	orr.w	r3, r3, #8
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b16      	ldr	r3, [pc, #88]	; (8000d00 <HAL_SPI_MspInit+0xb8>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	60bb      	str	r3, [r7, #8]
 8000cb0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000cb2:	2360      	movs	r3, #96	; 0x60
 8000cb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000cc2:	2305      	movs	r3, #5
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	480d      	ldr	r0, [pc, #52]	; (8000d04 <HAL_SPI_MspInit+0xbc>)
 8000cce:	f002 f88f 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000cd2:	2380      	movs	r3, #128	; 0x80
 8000cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ce6:	f107 0314 	add.w	r3, r7, #20
 8000cea:	4619      	mov	r1, r3
 8000cec:	4806      	ldr	r0, [pc, #24]	; (8000d08 <HAL_SPI_MspInit+0xc0>)
 8000cee:	f002 f87f 	bl	8002df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40013000 	.word	0x40013000
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000
 8000d08:	40020c00 	.word	0x40020c00

08000d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b0ae      	sub	sp, #184	; 0xb8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	605a      	str	r2, [r3, #4]
 8000d1e:	609a      	str	r2, [r3, #8]
 8000d20:	60da      	str	r2, [r3, #12]
 8000d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2290      	movs	r2, #144	; 0x90
 8000d2a:	2100      	movs	r1, #0
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f015 fcea 	bl	8016706 <memset>
  if(huart->Instance==USART1)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4a32      	ldr	r2, [pc, #200]	; (8000e00 <HAL_UART_MspInit+0xf4>)
 8000d38:	4293      	cmp	r3, r2
 8000d3a:	d15d      	bne.n	8000df8 <HAL_UART_MspInit+0xec>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d3c:	2340      	movs	r3, #64	; 0x40
 8000d3e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d40:	2300      	movs	r3, #0
 8000d42:	65bb      	str	r3, [r7, #88]	; 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d44:	f107 0314 	add.w	r3, r7, #20
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f003 f895 	bl	8003e78 <HAL_RCCEx_PeriphCLKConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000d54:	f7ff fea6 	bl	8000aa4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d58:	4b2a      	ldr	r3, [pc, #168]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d5c:	4a29      	ldr	r2, [pc, #164]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d5e:	f043 0310 	orr.w	r3, r3, #16
 8000d62:	6453      	str	r3, [r2, #68]	; 0x44
 8000d64:	4b27      	ldr	r3, [pc, #156]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d68:	f003 0310 	and.w	r3, r3, #16
 8000d6c:	613b      	str	r3, [r7, #16]
 8000d6e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d70:	4b24      	ldr	r3, [pc, #144]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	4a23      	ldr	r2, [pc, #140]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d76:	f043 0302 	orr.w	r3, r3, #2
 8000d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7c:	4b21      	ldr	r3, [pc, #132]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	f003 0302 	and.w	r3, r3, #2
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d88:	4b1e      	ldr	r3, [pc, #120]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	4a1d      	ldr	r2, [pc, #116]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d8e:	f043 0301 	orr.w	r3, r3, #1
 8000d92:	6313      	str	r3, [r2, #48]	; 0x30
 8000d94:	4b1b      	ldr	r3, [pc, #108]	; (8000e04 <HAL_UART_MspInit+0xf8>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB15     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000da0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000da4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000da8:	2302      	movs	r3, #2
 8000daa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db4:	2303      	movs	r3, #3
 8000db6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000dba:	2304      	movs	r3, #4
 8000dbc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4810      	ldr	r0, [pc, #64]	; (8000e08 <HAL_UART_MspInit+0xfc>)
 8000dc8:	f002 f812 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000dd0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000de0:	2303      	movs	r3, #3
 8000de2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000de6:	2307      	movs	r3, #7
 8000de8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000df0:	4619      	mov	r1, r3
 8000df2:	4806      	ldr	r0, [pc, #24]	; (8000e0c <HAL_UART_MspInit+0x100>)
 8000df4:	f001 fffc 	bl	8002df0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000df8:	bf00      	nop
 8000dfa:	37b8      	adds	r7, #184	; 0xb8
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	40011000 	.word	0x40011000
 8000e04:	40023800 	.word	0x40023800
 8000e08:	40020400 	.word	0x40020400
 8000e0c:	40020000 	.word	0x40020000

08000e10 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08e      	sub	sp, #56	; 0x38
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e20:	4b33      	ldr	r3, [pc, #204]	; (8000ef0 <HAL_InitTick+0xe0>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	4a32      	ldr	r2, [pc, #200]	; (8000ef0 <HAL_InitTick+0xe0>)
 8000e26:	f043 0310 	orr.w	r3, r3, #16
 8000e2a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2c:	4b30      	ldr	r3, [pc, #192]	; (8000ef0 <HAL_InitTick+0xe0>)
 8000e2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e30:	f003 0310 	and.w	r3, r3, #16
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e38:	f107 0210 	add.w	r2, r7, #16
 8000e3c:	f107 0314 	add.w	r3, r7, #20
 8000e40:	4611      	mov	r1, r2
 8000e42:	4618      	mov	r0, r3
 8000e44:	f002 ffe6 	bl	8003e14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e48:	6a3b      	ldr	r3, [r7, #32]
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d103      	bne.n	8000e5a <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e52:	f002 ffb7 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 8000e56:	6378      	str	r0, [r7, #52]	; 0x34
 8000e58:	e004      	b.n	8000e64 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e5a:	f002 ffb3 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	005b      	lsls	r3, r3, #1
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e66:	4a23      	ldr	r2, [pc, #140]	; (8000ef4 <HAL_InitTick+0xe4>)
 8000e68:	fba2 2303 	umull	r2, r3, r2, r3
 8000e6c:	0c9b      	lsrs	r3, r3, #18
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000e72:	4b21      	ldr	r3, [pc, #132]	; (8000ef8 <HAL_InitTick+0xe8>)
 8000e74:	4a21      	ldr	r2, [pc, #132]	; (8000efc <HAL_InitTick+0xec>)
 8000e76:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000e78:	4b1f      	ldr	r3, [pc, #124]	; (8000ef8 <HAL_InitTick+0xe8>)
 8000e7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e7e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000e80:	4a1d      	ldr	r2, [pc, #116]	; (8000ef8 <HAL_InitTick+0xe8>)
 8000e82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e84:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000e86:	4b1c      	ldr	r3, [pc, #112]	; (8000ef8 <HAL_InitTick+0xe8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ef8 <HAL_InitTick+0xe8>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e92:	4b19      	ldr	r3, [pc, #100]	; (8000ef8 <HAL_InitTick+0xe8>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000e98:	4817      	ldr	r0, [pc, #92]	; (8000ef8 <HAL_InitTick+0xe8>)
 8000e9a:	f003 fcc0 	bl	800481e <HAL_TIM_Base_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ea4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d11b      	bne.n	8000ee4 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000eac:	4812      	ldr	r0, [pc, #72]	; (8000ef8 <HAL_InitTick+0xe8>)
 8000eae:	f003 fd17 	bl	80048e0 <HAL_TIM_Base_Start_IT>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000eb8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d111      	bne.n	8000ee4 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ec0:	2036      	movs	r0, #54	; 0x36
 8000ec2:	f000 fcd9 	bl	8001878 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d808      	bhi.n	8000ede <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	2036      	movs	r0, #54	; 0x36
 8000ed2:	f000 fcb5 	bl	8001840 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ed6:	4a0a      	ldr	r2, [pc, #40]	; (8000f00 <HAL_InitTick+0xf0>)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6013      	str	r3, [r2, #0]
 8000edc:	e002      	b.n	8000ee4 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000ee4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000ee8:	4618      	mov	r0, r3
 8000eea:	3738      	adds	r7, #56	; 0x38
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40023800 	.word	0x40023800
 8000ef4:	431bde83 	.word	0x431bde83
 8000ef8:	20000360 	.word	0x20000360
 8000efc:	40001000 	.word	0x40001000
 8000f00:	20000004 	.word	0x20000004

08000f04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <NMI_Handler+0x4>

08000f0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f0e:	e7fe      	b.n	8000f0e <HardFault_Handler+0x4>

08000f10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f14:	e7fe      	b.n	8000f14 <MemManage_Handler+0x4>

08000f16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <BusFault_Handler+0x4>

08000f1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f20:	e7fe      	b.n	8000f20 <UsageFault_Handler+0x4>

08000f22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f22:	b480      	push	{r7}
 8000f24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr

08000f30 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <TIM6_DAC_IRQHandler+0x10>)
 8000f36:	f003 fd4b 	bl	80049d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000360 	.word	0x20000360

08000f44 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000f48:	4802      	ldr	r0, [pc, #8]	; (8000f54 <ETH_IRQHandler+0x10>)
 8000f4a:	f001 f87d 	bl	8002048 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000f4e:	bf00      	nop
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	20004db0 	.word	0x20004db0

08000f58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
	return 1;
 8000f5c:	2301      	movs	r3, #1
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <_kill>:

int _kill(int pid, int sig)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000f72:	4b05      	ldr	r3, [pc, #20]	; (8000f88 <_kill+0x20>)
 8000f74:	2216      	movs	r2, #22
 8000f76:	601a      	str	r2, [r3, #0]
	return -1;
 8000f78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	370c      	adds	r7, #12
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	2000f3a4 	.word	0x2000f3a4

08000f8c <_exit>:

void _exit (int status)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000f94:	f04f 31ff 	mov.w	r1, #4294967295
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ffe5 	bl	8000f68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000f9e:	e7fe      	b.n	8000f9e <_exit+0x12>

08000fa0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	e00a      	b.n	8000fc8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fb2:	f3af 8000 	nop.w
 8000fb6:	4601      	mov	r1, r0
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1c5a      	adds	r2, r3, #1
 8000fbc:	60ba      	str	r2, [r7, #8]
 8000fbe:	b2ca      	uxtb	r2, r1
 8000fc0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dbf0      	blt.n	8000fb2 <_read+0x12>
	}

return len;
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	e009      	b.n	8001000 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	60ba      	str	r2, [r7, #8]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbf1      	blt.n	8000fec <_write+0x12>
	}
	return len;
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <_close>:

int _close(int file)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
	return -1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800103a:	605a      	str	r2, [r3, #4]
	return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_isatty>:

int _isatty(int file)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
	return 1;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
	return 0;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800107c:	b480      	push	{r7}
 800107e:	b087      	sub	sp, #28
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001084:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d205      	bcs.n	80010b8 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80010ac:	4b0e      	ldr	r3, [pc, #56]	; (80010e8 <_sbrk+0x6c>)
 80010ae:	220c      	movs	r2, #12
 80010b0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b2:	f04f 33ff 	mov.w	r3, #4294967295
 80010b6:	e009      	b.n	80010cc <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b8:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <_sbrk+0x64>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010be:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <_sbrk+0x64>)
 80010c0:	681a      	ldr	r2, [r3, #0]
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4413      	add	r3, r2
 80010c6:	4a06      	ldr	r2, [pc, #24]	; (80010e0 <_sbrk+0x64>)
 80010c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ca:	68fb      	ldr	r3, [r7, #12]
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	371c      	adds	r7, #28
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr
 80010d8:	20080000 	.word	0x20080000
 80010dc:	00000400 	.word	0x00000400
 80010e0:	200003ac 	.word	0x200003ac
 80010e4:	2000f3a8 	.word	0x2000f3a8
 80010e8:	2000f3a4 	.word	0x2000f3a4

080010ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010f0:	4b06      	ldr	r3, [pc, #24]	; (800110c <SystemInit+0x20>)
 80010f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f6:	4a05      	ldr	r2, [pc, #20]	; (800110c <SystemInit+0x20>)
 80010f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001108:	4770      	bx	lr
 800110a:	bf00      	nop
 800110c:	e000ed00 	.word	0xe000ed00

08001110 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001148 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001114:	480d      	ldr	r0, [pc, #52]	; (800114c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001116:	490e      	ldr	r1, [pc, #56]	; (8001150 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001118:	4a0e      	ldr	r2, [pc, #56]	; (8001154 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800111a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800111c:	e002      	b.n	8001124 <LoopCopyDataInit>

0800111e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001120:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001122:	3304      	adds	r3, #4

08001124 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001124:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001126:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001128:	d3f9      	bcc.n	800111e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800112a:	4a0b      	ldr	r2, [pc, #44]	; (8001158 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800112c:	4c0b      	ldr	r4, [pc, #44]	; (800115c <LoopFillZerobss+0x26>)
  movs r3, #0
 800112e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001130:	e001      	b.n	8001136 <LoopFillZerobss>

08001132 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001132:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001134:	3204      	adds	r2, #4

08001136 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001136:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001138:	d3fb      	bcc.n	8001132 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800113a:	f7ff ffd7 	bl	80010ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113e:	f015 fa9d 	bl	801667c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001142:	f7ff fab9 	bl	80006b8 <main>
  bx  lr    
 8001146:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001148:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800114c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001150:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8001154:	0801a838 	.word	0x0801a838
  ldr r2, =_sbss
 8001158:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 800115c:	2000f3a8 	.word	0x2000f3a8

08001160 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001160:	e7fe      	b.n	8001160 <ADC_IRQHandler>

08001162 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d00b      	beq.n	800118a <LAN8742_RegisterBusIO+0x28>
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <LAN8742_RegisterBusIO+0x28>
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d003      	beq.n	800118a <LAN8742_RegisterBusIO+0x28>
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691b      	ldr	r3, [r3, #16]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d102      	bne.n	8001190 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	e014      	b.n	80011ba <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	691a      	ldr	r2, [r3, #16]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	60fb      	str	r3, [r7, #12]
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d17c      	bne.n	80012e0 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d002      	beq.n	80011f4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2220      	movs	r2, #32
 80011f8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80011fa:	2300      	movs	r3, #0
 80011fc:	617b      	str	r3, [r7, #20]
 80011fe:	e01c      	b.n	800123a <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	695b      	ldr	r3, [r3, #20]
 8001204:	f107 0208 	add.w	r2, r7, #8
 8001208:	2112      	movs	r1, #18
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	4798      	blx	r3
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	da03      	bge.n	800121c <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001214:	f06f 0304 	mvn.w	r3, #4
 8001218:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800121a:	e00b      	b.n	8001234 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	f003 031f 	and.w	r3, r3, #31
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	429a      	cmp	r2, r3
 8001226:	d105      	bne.n	8001234 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	697a      	ldr	r2, [r7, #20]
 800122c:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
         break;
 8001232:	e005      	b.n	8001240 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	3301      	adds	r3, #1
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	2b1f      	cmp	r3, #31
 800123e:	d9df      	bls.n	8001200 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b1f      	cmp	r3, #31
 8001246:	d902      	bls.n	800124e <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8001248:	f06f 0302 	mvn.w	r3, #2
 800124c:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800124e:	693b      	ldr	r3, [r7, #16]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d145      	bne.n	80012e0 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	691b      	ldr	r3, [r3, #16]
 8001258:	687a      	ldr	r2, [r7, #4]
 800125a:	6810      	ldr	r0, [r2, #0]
 800125c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001260:	2100      	movs	r1, #0
 8001262:	4798      	blx	r3
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	db37      	blt.n	80012da <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	695b      	ldr	r3, [r3, #20]
 800126e:	687a      	ldr	r2, [r7, #4]
 8001270:	6810      	ldr	r0, [r2, #0]
 8001272:	f107 0208 	add.w	r2, r7, #8
 8001276:	2100      	movs	r1, #0
 8001278:	4798      	blx	r3
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	db28      	blt.n	80012d2 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	699b      	ldr	r3, [r3, #24]
 8001284:	4798      	blx	r3
 8001286:	4603      	mov	r3, r0
 8001288:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800128a:	e01c      	b.n	80012c6 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	4798      	blx	r3
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800129e:	d80e      	bhi.n	80012be <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	695b      	ldr	r3, [r3, #20]
 80012a4:	687a      	ldr	r2, [r7, #4]
 80012a6:	6810      	ldr	r0, [r2, #0]
 80012a8:	f107 0208 	add.w	r2, r7, #8
 80012ac:	2100      	movs	r1, #0
 80012ae:	4798      	blx	r3
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	da07      	bge.n	80012c6 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80012b6:	f06f 0304 	mvn.w	r3, #4
 80012ba:	613b      	str	r3, [r7, #16]
                 break;
 80012bc:	e010      	b.n	80012e0 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80012be:	f06f 0301 	mvn.w	r3, #1
 80012c2:	613b      	str	r3, [r7, #16]
               break;
 80012c4:	e00c      	b.n	80012e0 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1dd      	bne.n	800128c <LAN8742_Init+0xc6>
 80012d0:	e006      	b.n	80012e0 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80012d2:	f06f 0304 	mvn.w	r3, #4
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	e002      	b.n	80012e0 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80012da:	f06f 0303 	mvn.w	r3, #3
 80012de:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d112      	bne.n	800130c <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	699b      	ldr	r3, [r3, #24]
 80012ea:	4798      	blx	r3
 80012ec:	4603      	mov	r3, r0
 80012ee:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80012f0:	bf00      	nop
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	4798      	blx	r3
 80012f8:	4603      	mov	r3, r0
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	1ad3      	subs	r3, r2, r3
 8001300:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001304:	d9f5      	bls.n	80012f2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2201      	movs	r2, #1
 800130a:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800130c:	693b      	ldr	r3, [r7, #16]
 }
 800130e:	4618      	mov	r0, r3
 8001310:	3718      	adds	r7, #24
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	6810      	ldr	r0, [r2, #0]
 800132a:	f107 020c 	add.w	r2, r7, #12
 800132e:	2101      	movs	r1, #1
 8001330:	4798      	blx	r3
 8001332:	4603      	mov	r3, r0
 8001334:	2b00      	cmp	r3, #0
 8001336:	da02      	bge.n	800133e <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001338:	f06f 0304 	mvn.w	r3, #4
 800133c:	e06e      	b.n	800141c <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
 8001342:	687a      	ldr	r2, [r7, #4]
 8001344:	6810      	ldr	r0, [r2, #0]
 8001346:	f107 020c 	add.w	r2, r7, #12
 800134a:	2101      	movs	r1, #1
 800134c:	4798      	blx	r3
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	da02      	bge.n	800135a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001354:	f06f 0304 	mvn.w	r3, #4
 8001358:	e060      	b.n	800141c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	f003 0304 	and.w	r3, r3, #4
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001364:	2301      	movs	r3, #1
 8001366:	e059      	b.n	800141c <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	695b      	ldr	r3, [r3, #20]
 800136c:	687a      	ldr	r2, [r7, #4]
 800136e:	6810      	ldr	r0, [r2, #0]
 8001370:	f107 020c 	add.w	r2, r7, #12
 8001374:	2100      	movs	r1, #0
 8001376:	4798      	blx	r3
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	da02      	bge.n	8001384 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800137e:	f06f 0304 	mvn.w	r3, #4
 8001382:	e04b      	b.n	800141c <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d11b      	bne.n	80013c6 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <LAN8742_GetLinkState+0x90>
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d001      	beq.n	80013a6 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80013a2:	2302      	movs	r3, #2
 80013a4:	e03a      	b.n	800141c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e033      	b.n	800141c <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80013be:	2304      	movs	r3, #4
 80013c0:	e02c      	b.n	800141c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80013c2:	2305      	movs	r3, #5
 80013c4:	e02a      	b.n	800141c <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	695b      	ldr	r3, [r3, #20]
 80013ca:	687a      	ldr	r2, [r7, #4]
 80013cc:	6810      	ldr	r0, [r2, #0]
 80013ce:	f107 020c 	add.w	r2, r7, #12
 80013d2:	211f      	movs	r1, #31
 80013d4:	4798      	blx	r3
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da02      	bge.n	80013e2 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80013dc:	f06f 0304 	mvn.w	r3, #4
 80013e0:	e01c      	b.n	800141c <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80013ec:	2306      	movs	r3, #6
 80013ee:	e015      	b.n	800141c <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f003 031c 	and.w	r3, r3, #28
 80013f6:	2b18      	cmp	r3, #24
 80013f8:	d101      	bne.n	80013fe <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80013fa:	2302      	movs	r3, #2
 80013fc:	e00e      	b.n	800141c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	f003 031c 	and.w	r3, r3, #28
 8001404:	2b08      	cmp	r3, #8
 8001406:	d101      	bne.n	800140c <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8001408:	2303      	movs	r3, #3
 800140a:	e007      	b.n	800141c <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 031c 	and.w	r3, r3, #28
 8001412:	2b14      	cmp	r3, #20
 8001414:	d101      	bne.n	800141a <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8001416:	2304      	movs	r3, #4
 8001418:	e000      	b.n	800141c <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800141a:	2305      	movs	r3, #5
    }				
  }
}
 800141c:	4618      	mov	r0, r3
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}

08001424 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001428:	4b08      	ldr	r3, [pc, #32]	; (800144c <HAL_Init+0x28>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a07      	ldr	r2, [pc, #28]	; (800144c <HAL_Init+0x28>)
 800142e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001432:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001434:	2003      	movs	r0, #3
 8001436:	f000 f9f8 	bl	800182a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800143a:	200f      	movs	r0, #15
 800143c:	f7ff fce8 	bl	8000e10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001440:	f7ff fb36 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023c00 	.word	0x40023c00

08001450 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001454:	4b06      	ldr	r3, [pc, #24]	; (8001470 <HAL_IncTick+0x20>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	461a      	mov	r2, r3
 800145a:	4b06      	ldr	r3, [pc, #24]	; (8001474 <HAL_IncTick+0x24>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4413      	add	r3, r2
 8001460:	4a04      	ldr	r2, [pc, #16]	; (8001474 <HAL_IncTick+0x24>)
 8001462:	6013      	str	r3, [r2, #0]
}
 8001464:	bf00      	nop
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr
 800146e:	bf00      	nop
 8001470:	20000008 	.word	0x20000008
 8001474:	200003b0 	.word	0x200003b0

08001478 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  return uwTick;
 800147c:	4b03      	ldr	r3, [pc, #12]	; (800148c <HAL_GetTick+0x14>)
 800147e:	681b      	ldr	r3, [r3, #0]
}
 8001480:	4618      	mov	r0, r3
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
 800148a:	bf00      	nop
 800148c:	200003b0 	.word	0x200003b0

08001490 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001498:	f7ff ffee 	bl	8001478 <HAL_GetTick>
 800149c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014a8:	d005      	beq.n	80014b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014aa:	4b0a      	ldr	r3, [pc, #40]	; (80014d4 <HAL_Delay+0x44>)
 80014ac:	781b      	ldrb	r3, [r3, #0]
 80014ae:	461a      	mov	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4413      	add	r3, r2
 80014b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014b6:	bf00      	nop
 80014b8:	f7ff ffde 	bl	8001478 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	68fa      	ldr	r2, [r7, #12]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d8f7      	bhi.n	80014b8 <HAL_Delay+0x28>
  {
  }
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	20000008 	.word	0x20000008

080014d8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d101      	bne.n	80014ea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e0ed      	b.n	80016c6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d102      	bne.n	80014fc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80014f6:	6878      	ldr	r0, [r7, #4]
 80014f8:	f7ff fb02 	bl	8000b00 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 0201 	orr.w	r2, r2, #1
 800150a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800150c:	f7ff ffb4 	bl	8001478 <HAL_GetTick>
 8001510:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001512:	e012      	b.n	800153a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001514:	f7ff ffb0 	bl	8001478 <HAL_GetTick>
 8001518:	4602      	mov	r2, r0
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	2b0a      	cmp	r3, #10
 8001520:	d90b      	bls.n	800153a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001526:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2205      	movs	r2, #5
 8001532:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e0c5      	b.n	80016c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	f003 0301 	and.w	r3, r3, #1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d0e5      	beq.n	8001514 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0202 	bic.w	r2, r2, #2
 8001556:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001558:	f7ff ff8e 	bl	8001478 <HAL_GetTick>
 800155c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800155e:	e012      	b.n	8001586 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001560:	f7ff ff8a 	bl	8001478 <HAL_GetTick>
 8001564:	4602      	mov	r2, r0
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b0a      	cmp	r3, #10
 800156c:	d90b      	bls.n	8001586 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001572:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2205      	movs	r2, #5
 800157e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e09f      	b.n	80016c6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 0302 	and.w	r3, r3, #2
 8001590:	2b00      	cmp	r3, #0
 8001592:	d1e5      	bne.n	8001560 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	7e1b      	ldrb	r3, [r3, #24]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d108      	bne.n	80015ae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	681a      	ldr	r2, [r3, #0]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	e007      	b.n	80015be <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	7e5b      	ldrb	r3, [r3, #25]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d108      	bne.n	80015d8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	e007      	b.n	80015e8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80015e6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7e9b      	ldrb	r3, [r3, #26]
 80015ec:	2b01      	cmp	r3, #1
 80015ee:	d108      	bne.n	8001602 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 0220 	orr.w	r2, r2, #32
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	e007      	b.n	8001612 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0220 	bic.w	r2, r2, #32
 8001610:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	7edb      	ldrb	r3, [r3, #27]
 8001616:	2b01      	cmp	r3, #1
 8001618:	d108      	bne.n	800162c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0210 	bic.w	r2, r2, #16
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	e007      	b.n	800163c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681a      	ldr	r2, [r3, #0]
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f042 0210 	orr.w	r2, r2, #16
 800163a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	7f1b      	ldrb	r3, [r3, #28]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d108      	bne.n	8001656 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f042 0208 	orr.w	r2, r2, #8
 8001652:	601a      	str	r2, [r3, #0]
 8001654:	e007      	b.n	8001666 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	681a      	ldr	r2, [r3, #0]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f022 0208 	bic.w	r2, r2, #8
 8001664:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	7f5b      	ldrb	r3, [r3, #29]
 800166a:	2b01      	cmp	r3, #1
 800166c:	d108      	bne.n	8001680 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f042 0204 	orr.w	r2, r2, #4
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	e007      	b.n	8001690 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0204 	bic.w	r2, r2, #4
 800168e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	431a      	orrs	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	691b      	ldr	r3, [r3, #16]
 800169e:	431a      	orrs	r2, r3
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	ea42 0103 	orr.w	r1, r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	1e5a      	subs	r2, r3, #1
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <__NVIC_SetPriorityGrouping>:
{
 80016d0:	b480      	push	{r7}
 80016d2:	b085      	sub	sp, #20
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016e0:	4b0b      	ldr	r3, [pc, #44]	; (8001710 <__NVIC_SetPriorityGrouping+0x40>)
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016e6:	68ba      	ldr	r2, [r7, #8]
 80016e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016ec:	4013      	ands	r3, r2
 80016ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <__NVIC_SetPriorityGrouping+0x44>)
 80016fa:	4313      	orrs	r3, r2
 80016fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fe:	4a04      	ldr	r2, [pc, #16]	; (8001710 <__NVIC_SetPriorityGrouping+0x40>)
 8001700:	68bb      	ldr	r3, [r7, #8]
 8001702:	60d3      	str	r3, [r2, #12]
}
 8001704:	bf00      	nop
 8001706:	3714      	adds	r7, #20
 8001708:	46bd      	mov	sp, r7
 800170a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170e:	4770      	bx	lr
 8001710:	e000ed00 	.word	0xe000ed00
 8001714:	05fa0000 	.word	0x05fa0000

08001718 <__NVIC_GetPriorityGrouping>:
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800171c:	4b04      	ldr	r3, [pc, #16]	; (8001730 <__NVIC_GetPriorityGrouping+0x18>)
 800171e:	68db      	ldr	r3, [r3, #12]
 8001720:	0a1b      	lsrs	r3, r3, #8
 8001722:	f003 0307 	and.w	r3, r3, #7
}
 8001726:	4618      	mov	r0, r3
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr
 8001730:	e000ed00 	.word	0xe000ed00

08001734 <__NVIC_EnableIRQ>:
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	4603      	mov	r3, r0
 800173c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800173e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001742:	2b00      	cmp	r3, #0
 8001744:	db0b      	blt.n	800175e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	f003 021f 	and.w	r2, r3, #31
 800174c:	4907      	ldr	r1, [pc, #28]	; (800176c <__NVIC_EnableIRQ+0x38>)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	095b      	lsrs	r3, r3, #5
 8001754:	2001      	movs	r0, #1
 8001756:	fa00 f202 	lsl.w	r2, r0, r2
 800175a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800175e:	bf00      	nop
 8001760:	370c      	adds	r7, #12
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	e000e100 	.word	0xe000e100

08001770 <__NVIC_SetPriority>:
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	4603      	mov	r3, r0
 8001778:	6039      	str	r1, [r7, #0]
 800177a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800177c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001780:	2b00      	cmp	r3, #0
 8001782:	db0a      	blt.n	800179a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	b2da      	uxtb	r2, r3
 8001788:	490c      	ldr	r1, [pc, #48]	; (80017bc <__NVIC_SetPriority+0x4c>)
 800178a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800178e:	0112      	lsls	r2, r2, #4
 8001790:	b2d2      	uxtb	r2, r2
 8001792:	440b      	add	r3, r1
 8001794:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001798:	e00a      	b.n	80017b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	b2da      	uxtb	r2, r3
 800179e:	4908      	ldr	r1, [pc, #32]	; (80017c0 <__NVIC_SetPriority+0x50>)
 80017a0:	79fb      	ldrb	r3, [r7, #7]
 80017a2:	f003 030f 	and.w	r3, r3, #15
 80017a6:	3b04      	subs	r3, #4
 80017a8:	0112      	lsls	r2, r2, #4
 80017aa:	b2d2      	uxtb	r2, r2
 80017ac:	440b      	add	r3, r1
 80017ae:	761a      	strb	r2, [r3, #24]
}
 80017b0:	bf00      	nop
 80017b2:	370c      	adds	r7, #12
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000e100 	.word	0xe000e100
 80017c0:	e000ed00 	.word	0xe000ed00

080017c4 <NVIC_EncodePriority>:
{
 80017c4:	b480      	push	{r7}
 80017c6:	b089      	sub	sp, #36	; 0x24
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	f003 0307 	and.w	r3, r3, #7
 80017d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f1c3 0307 	rsb	r3, r3, #7
 80017de:	2b04      	cmp	r3, #4
 80017e0:	bf28      	it	cs
 80017e2:	2304      	movcs	r3, #4
 80017e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3304      	adds	r3, #4
 80017ea:	2b06      	cmp	r3, #6
 80017ec:	d902      	bls.n	80017f4 <NVIC_EncodePriority+0x30>
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	3b03      	subs	r3, #3
 80017f2:	e000      	b.n	80017f6 <NVIC_EncodePriority+0x32>
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f8:	f04f 32ff 	mov.w	r2, #4294967295
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001802:	43da      	mvns	r2, r3
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	401a      	ands	r2, r3
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800180c:	f04f 31ff 	mov.w	r1, #4294967295
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa01 f303 	lsl.w	r3, r1, r3
 8001816:	43d9      	mvns	r1, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800181c:	4313      	orrs	r3, r2
}
 800181e:	4618      	mov	r0, r3
 8001820:	3724      	adds	r7, #36	; 0x24
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ff4c 	bl	80016d0 <__NVIC_SetPriorityGrouping>
}
 8001838:	bf00      	nop
 800183a:	3708      	adds	r7, #8
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001840:	b580      	push	{r7, lr}
 8001842:	b086      	sub	sp, #24
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	60b9      	str	r1, [r7, #8]
 800184a:	607a      	str	r2, [r7, #4]
 800184c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800184e:	2300      	movs	r3, #0
 8001850:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001852:	f7ff ff61 	bl	8001718 <__NVIC_GetPriorityGrouping>
 8001856:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001858:	687a      	ldr	r2, [r7, #4]
 800185a:	68b9      	ldr	r1, [r7, #8]
 800185c:	6978      	ldr	r0, [r7, #20]
 800185e:	f7ff ffb1 	bl	80017c4 <NVIC_EncodePriority>
 8001862:	4602      	mov	r2, r0
 8001864:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001868:	4611      	mov	r1, r2
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff ff80 	bl	8001770 <__NVIC_SetPriority>
}
 8001870:	bf00      	nop
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b082      	sub	sp, #8
 800187c:	af00      	add	r7, sp, #0
 800187e:	4603      	mov	r3, r0
 8001880:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001886:	4618      	mov	r0, r3
 8001888:	f7ff ff54 	bl	8001734 <__NVIC_EnableIRQ>
}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e06a      	b.n	800197c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d106      	bne.n	80018be <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2223      	movs	r2, #35	; 0x23
 80018b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018b8:	6878      	ldr	r0, [r7, #4]
 80018ba:	f004 fa2d 	bl	8005d18 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018be:	4b31      	ldr	r3, [pc, #196]	; (8001984 <HAL_ETH_Init+0xf0>)
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	4a30      	ldr	r2, [pc, #192]	; (8001984 <HAL_ETH_Init+0xf0>)
 80018c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018c8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ca:	4b2e      	ldr	r3, [pc, #184]	; (8001984 <HAL_ETH_Init+0xf0>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018d2:	60bb      	str	r3, [r7, #8]
 80018d4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80018d6:	4b2c      	ldr	r3, [pc, #176]	; (8001988 <HAL_ETH_Init+0xf4>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4a2b      	ldr	r2, [pc, #172]	; (8001988 <HAL_ETH_Init+0xf4>)
 80018dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018e0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80018e2:	4b29      	ldr	r3, [pc, #164]	; (8001988 <HAL_ETH_Init+0xf4>)
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	4927      	ldr	r1, [pc, #156]	; (8001988 <HAL_ETH_Init+0xf4>)
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80018f0:	4b25      	ldr	r3, [pc, #148]	; (8001988 <HAL_ETH_Init+0xf4>)
 80018f2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6812      	ldr	r2, [r2, #0]
 8001902:	f043 0301 	orr.w	r3, r3, #1
 8001906:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800190a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800190c:	f7ff fdb4 	bl	8001478 <HAL_GetTick>
 8001910:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001912:	e011      	b.n	8001938 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001914:	f7ff fdb0 	bl	8001478 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001922:	d909      	bls.n	8001938 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2204      	movs	r2, #4
 8001928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	22e0      	movs	r2, #224	; 0xe0
 8001930:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e021      	b.n	800197c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1e4      	bne.n	8001914 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f000 ffac 	bl	80028a8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f001 f853 	bl	80029fc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001956:	6878      	ldr	r0, [r7, #4]
 8001958:	f001 f8a9 	bl	8002aae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	461a      	mov	r2, r3
 8001962:	2100      	movs	r1, #0
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f001 f811 	bl	800298c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2210      	movs	r2, #16
 8001976:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	4618      	mov	r0, r3
 800197e:	3710      	adds	r7, #16
 8001980:	46bd      	mov	sp, r7
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40023800 	.word	0x40023800
 8001988:	40013800 	.word	0x40013800

0800198c <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800199a:	2b10      	cmp	r3, #16
 800199c:	d150      	bne.n	8001a40 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2223      	movs	r2, #35	; 0x23
 80019a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2204      	movs	r2, #4
 80019aa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f000 fa7b 	bl	8001ea8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0208 	orr.w	r2, r2, #8
 80019c0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019ca:	2001      	movs	r0, #1
 80019cc:	f7ff fd60 	bl	8001490 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f042 0204 	orr.w	r2, r2, #4
 80019e6:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80019f0:	2001      	movs	r0, #1
 80019f2:	f7ff fd4d 	bl	8001490 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fdf3 	bl	80025ea <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a0c:	699b      	ldr	r3, [r3, #24]
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6812      	ldr	r2, [r2, #0]
 8001a12:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a1a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a24:	699b      	ldr	r3, [r3, #24]
 8001a26:	687a      	ldr	r2, [r7, #4]
 8001a28:	6812      	ldr	r2, [r2, #0]
 8001a2a:	f043 0302 	orr.w	r3, r3, #2
 8001a2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a32:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2223      	movs	r2, #35	; 0x23
 8001a38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	e000      	b.n	8001a42 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
  }
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
	...

08001a4c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a5a:	2b10      	cmp	r3, #16
 8001a5c:	d17b      	bne.n	8001b56 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	2223      	movs	r2, #35	; 0x23
 8001a62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2201      	movs	r2, #1
 8001a6a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8001a7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	4b35      	ldr	r3, [pc, #212]	; (8001b60 <HAL_ETH_Start_IT+0x114>)
 8001a8a:	430b      	orrs	r3, r1
 8001a8c:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8001aa0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2204      	movs	r2, #4
 8001aa8:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	f000 f9fc 	bl	8001ea8 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f042 0208 	orr.w	r2, r2, #8
 8001abe:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ac8:	2001      	movs	r0, #1
 8001aca:	f7ff fce1 	bl	8001490 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68fa      	ldr	r2, [r7, #12]
 8001ad4:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f042 0204 	orr.w	r2, r2, #4
 8001ae4:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001aee:	2001      	movs	r0, #1
 8001af0:	f7ff fcce 	bl	8001490 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f000 fd74 	bl	80025ea <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0a:	699b      	ldr	r3, [r3, #24]
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b14:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b18:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b22:	699b      	ldr	r3, [r3, #24]
 8001b24:	687a      	ldr	r2, [r7, #4]
 8001b26:	6812      	ldr	r2, [r2, #0]
 8001b28:	f043 0302 	orr.w	r3, r3, #2
 8001b2c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b30:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b3a:	69d9      	ldr	r1, [r3, #28]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_ETH_Start_IT+0x118>)
 8001b42:	430b      	orrs	r3, r1
 8001b44:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b48:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2223      	movs	r2, #35	; 0x23
 8001b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e000      	b.n	8001b58 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
  }
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3710      	adds	r7, #16
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	00020060 	.word	0x00020060
 8001b64:	0001a0c1 	.word	0x0001a0c1

08001b68 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b76:	2b23      	cmp	r3, #35	; 0x23
 8001b78:	d16e      	bne.n	8001c58 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2223      	movs	r2, #35	; 0x23
 8001b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b8a:	69d9      	ldr	r1, [r3, #28]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <HAL_ETH_Stop_IT+0xfc>)
 8001b92:	400b      	ands	r3, r1
 8001b94:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b98:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6812      	ldr	r2, [r2, #0]
 8001ba8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001bac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bb0:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	687a      	ldr	r2, [r7, #4]
 8001bbe:	6812      	ldr	r2, [r2, #0]
 8001bc0:	f023 0302 	bic.w	r3, r3, #2
 8001bc4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bc8:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f022 0204 	bic.w	r2, r2, #4
 8001bd8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001be2:	2001      	movs	r0, #1
 8001be4:	f7ff fc54 	bl	8001490 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	693a      	ldr	r2, [r7, #16]
 8001bee:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001bf0:	6878      	ldr	r0, [r7, #4]
 8001bf2:	f000 fcfa 	bl	80025ea <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0208 	bic.w	r2, r2, #8
 8001c04:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001c0e:	2001      	movs	r0, #1
 8001c10:	f7ff fc3e 	bl	8001490 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	693a      	ldr	r2, [r7, #16]
 8001c1a:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
 8001c20:	e00e      	b.n	8001c40 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	3212      	adds	r2, #18
 8001c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c2c:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	617b      	str	r3, [r7, #20]
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	2b03      	cmp	r3, #3
 8001c44:	d9ed      	bls.n	8001c22 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2210      	movs	r2, #16
 8001c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001c54:	2300      	movs	r3, #0
 8001c56:	e000      	b.n	8001c5a <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8001c58:	2301      	movs	r3, #1
  }
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	fffe5f3e 	.word	0xfffe5f3e

08001c68 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d109      	bne.n	8001c8c <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7e:	f043 0201 	orr.w	r2, r3, #1
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e045      	b.n	8001d18 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001c92:	2b23      	cmp	r3, #35	; 0x23
 8001c94:	d13f      	bne.n	8001d16 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	6839      	ldr	r1, [r7, #0]
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 ff70 	bl	8002b88 <ETH_Prepare_Tx_Descriptors>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d009      	beq.n	8001cc2 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cb4:	f043 0202 	orr.w	r2, r3, #2
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e02a      	b.n	8001d18 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 8001cc2:	f3bf 8f4f 	dsb	sy
}
 8001cc6:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ccc:	1c5a      	adds	r2, r3, #1
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	629a      	str	r2, [r3, #40]	; 0x28
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cd6:	2b03      	cmp	r3, #3
 8001cd8:	d904      	bls.n	8001ce4 <HAL_ETH_Transmit_IT+0x7c>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cde:	1f1a      	subs	r2, r3, #4
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cec:	695b      	ldr	r3, [r3, #20]
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d00d      	beq.n	8001d12 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001cfe:	461a      	mov	r2, r3
 8001d00:	2304      	movs	r3, #4
 8001d02:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	2300      	movs	r3, #0
 8001d10:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	e000      	b.n	8001d18 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
  }
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d109      	bne.n	8001d4c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d3e:	f043 0201 	orr.w	r2, r3, #1
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e0a8      	b.n	8001e9e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d52:	2b23      	cmp	r3, #35	; 0x23
 8001d54:	d001      	beq.n	8001d5a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e0a1      	b.n	8001e9e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	69fa      	ldr	r2, [r7, #28]
 8001d64:	3212      	adds	r2, #18
 8001d66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d6a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d70:	f1c3 0304 	rsb	r3, r3, #4
 8001d74:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001d76:	e06a      	b.n	8001e4e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d007      	beq.n	8001d94 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	699a      	ldr	r2, [r3, #24]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	69da      	ldr	r2, [r3, #28]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001d94:	69bb      	ldr	r3, [r7, #24]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d103      	bne.n	8001da8 <HAL_ETH_ReadData+0x88>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d040      	beq.n	8001e2a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	695b      	ldr	r3, [r3, #20]
 8001dc4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00c      	beq.n	8001dec <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001dd2:	69bb      	ldr	r3, [r7, #24]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	0c1b      	lsrs	r3, r3, #16
 8001dd8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001ddc:	3b04      	subs	r3, #4
 8001dde:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001de0:	69bb      	ldr	r3, [r7, #24]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	69bb      	ldr	r3, [r7, #24]
 8001df2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001e00:	69bb      	ldr	r3, [r7, #24]
 8001e02:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001e04:	461a      	mov	r2, r3
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	b29b      	uxth	r3, r3
 8001e0a:	f004 f951 	bl	80060b0 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e12:	1c5a      	adds	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	441a      	add	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	2200      	movs	r2, #0
 8001e28:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	61fb      	str	r3, [r7, #28]
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d902      	bls.n	8001e3c <HAL_ETH_ReadData+0x11c>
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	3b04      	subs	r3, #4
 8001e3a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	69fa      	ldr	r2, [r7, #28]
 8001e40:	3212      	adds	r2, #18
 8001e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e46:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	db06      	blt.n	8001e64 <HAL_ETH_ReadData+0x144>
 8001e56:	697a      	ldr	r2, [r7, #20]
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d202      	bcs.n	8001e64 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001e5e:	7bfb      	ldrb	r3, [r7, #15]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d089      	beq.n	8001d78 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	441a      	add	r2, r3
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d002      	beq.n	8001e7e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 f815 	bl	8001ea8 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d108      	bne.n	8001e9c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	e000      	b.n	8001e9e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3720      	adds	r7, #32
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}
	...

08001ea8 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b088      	sub	sp, #32
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ebc:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	69fa      	ldr	r2, [r7, #28]
 8001ec2:	3212      	adds	r2, #18
 8001ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ec8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001ece:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001ed0:	e040      	b.n	8001f54 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	6a1b      	ldr	r3, [r3, #32]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d112      	bne.n	8001f00 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001eda:	f107 030c 	add.w	r3, r7, #12
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f004 f8b6 	bl	8006050 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d102      	bne.n	8001ef0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001eea:	2300      	movs	r3, #0
 8001eec:	74fb      	strb	r3, [r7, #19]
 8001eee:	e007      	b.n	8001f00 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	461a      	mov	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001f00:	7cfb      	ldrb	r3, [r7, #19]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d026      	beq.n	8001f54 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d103      	bne.n	8001f16 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001f0e:	697b      	ldr	r3, [r7, #20]
 8001f10:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <ETH_UpdateDescriptor+0xe4>)
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	e003      	b.n	8001f1e <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001f1c:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001f1e:	f3bf 8f5f 	dmb	sy
}
 8001f22:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	3301      	adds	r3, #1
 8001f34:	61fb      	str	r3, [r7, #28]
 8001f36:	69fb      	ldr	r3, [r7, #28]
 8001f38:	2b03      	cmp	r3, #3
 8001f3a:	d902      	bls.n	8001f42 <ETH_UpdateDescriptor+0x9a>
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	3b04      	subs	r3, #4
 8001f40:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	69fa      	ldr	r2, [r7, #28]
 8001f46:	3212      	adds	r2, #18
 8001f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f4c:	617b      	str	r3, [r7, #20]
      desccount--;
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	3b01      	subs	r3, #1
 8001f52:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d002      	beq.n	8001f60 <ETH_UpdateDescriptor+0xb8>
 8001f5a:	7cfb      	ldrb	r3, [r7, #19]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d1b8      	bne.n	8001ed2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f64:	69ba      	ldr	r2, [r7, #24]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d00c      	beq.n	8001f84 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001f72:	461a      	mov	r2, r3
 8001f74:	2300      	movs	r3, #0
 8001f76:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	69fa      	ldr	r2, [r7, #28]
 8001f7c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	69ba      	ldr	r2, [r7, #24]
 8001f82:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001f84:	bf00      	nop
 8001f86:	3720      	adds	r7, #32
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	800045f8 	.word	0x800045f8

08001f90 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b086      	sub	sp, #24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3318      	adds	r3, #24
 8001f9c:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa8:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001faa:	2301      	movs	r3, #1
 8001fac:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001fae:	e03f      	b.n	8002030 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001fb4:	697b      	ldr	r3, [r7, #20]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001fba:	68ba      	ldr	r2, [r7, #8]
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	4413      	add	r3, r2
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d106      	bne.n	8001fd8 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001fca:	693b      	ldr	r3, [r7, #16]
 8001fcc:	3301      	adds	r3, #1
 8001fce:	f003 0303 	and.w	r3, r3, #3
 8001fd2:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001fd8:	7bbb      	ldrb	r3, [r7, #14]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d028      	beq.n	8002030 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68d9      	ldr	r1, [r3, #12]
 8001fe2:	693a      	ldr	r2, [r7, #16]
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	440b      	add	r3, r1
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	db1b      	blt.n	800202c <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	3304      	adds	r3, #4
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	4413      	add	r3, r2
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	4618      	mov	r0, r3
 8002002:	f004 f897 	bl	8006134 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	3304      	adds	r3, #4
 800200c:	009b      	lsls	r3, r3, #2
 800200e:	4413      	add	r3, r2
 8002010:	2200      	movs	r2, #0
 8002012:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	3301      	adds	r3, #1
 8002018:	f003 0303 	and.w	r3, r3, #3
 800201c:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800201e:	68bb      	ldr	r3, [r7, #8]
 8002020:	697a      	ldr	r2, [r7, #20]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	62da      	str	r2, [r3, #44]	; 0x2c
 800202a:	e001      	b.n	8002030 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800202c:	2300      	movs	r3, #0
 800202e:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d002      	beq.n	800203c <HAL_ETH_ReleaseTxPacket+0xac>
 8002036:	7bfb      	ldrb	r3, [r7, #15]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1b9      	bne.n	8001fb0 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800203c:	2300      	movs	r3, #0
}
 800203e:	4618      	mov	r0, r3
 8002040:	3718      	adds	r7, #24
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b082      	sub	sp, #8
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002058:	695b      	ldr	r3, [r3, #20]
 800205a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800205e:	2b40      	cmp	r3, #64	; 0x40
 8002060:	d112      	bne.n	8002088 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206a:	69db      	ldr	r3, [r3, #28]
 800206c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002070:	2b40      	cmp	r3, #64	; 0x40
 8002072:	d109      	bne.n	8002088 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207c:	461a      	mov	r2, r3
 800207e:	4b50      	ldr	r3, [pc, #320]	; (80021c0 <HAL_ETH_IRQHandler+0x178>)
 8002080:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f003 fbaa 	bl	80057dc <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	2b01      	cmp	r3, #1
 8002098:	d113      	bne.n	80020c2 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a2:	69db      	ldr	r3, [r3, #28]
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d10a      	bne.n	80020c2 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b4:	461a      	mov	r2, r3
 80020b6:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80020ba:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f003 fb9d 	bl	80057fc <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ca:	695b      	ldr	r3, [r3, #20]
 80020cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020d4:	d14c      	bne.n	8002170 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020de:	69db      	ldr	r3, [r3, #28]
 80020e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020e8:	d142      	bne.n	8002170 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f0:	f043 0208 	orr.w	r2, r3, #8
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002102:	695b      	ldr	r3, [r3, #20]
 8002104:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002108:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800210c:	d11a      	bne.n	8002144 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	4b2a      	ldr	r3, [pc, #168]	; (80021c4 <HAL_ETH_IRQHandler+0x17c>)
 800211a:	4013      	ands	r3, r2
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800212a:	69db      	ldr	r3, [r3, #28]
 800212c:	687a      	ldr	r2, [r7, #4]
 800212e:	6812      	ldr	r2, [r2, #0]
 8002130:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002134:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002138:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	22e0      	movs	r2, #224	; 0xe0
 800213e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002142:	e012      	b.n	800216a <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800214c:	695a      	ldr	r2, [r3, #20]
 800214e:	f248 6380 	movw	r3, #34432	; 0x8680
 8002152:	4013      	ands	r3, r2
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002162:	461a      	mov	r2, r3
 8002164:	f248 6380 	movw	r3, #34432	; 0x8680
 8002168:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f003 fb56 	bl	800581c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b08      	cmp	r3, #8
 800217c:	d10e      	bne.n	800219c <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002184:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f000 f81c 	bl	80021cc <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800219c:	4b0a      	ldr	r3, [pc, #40]	; (80021c8 <HAL_ETH_IRQHandler+0x180>)
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d006      	beq.n	80021b6 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <HAL_ETH_IRQHandler+0x180>)
 80021aa:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80021ae:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	f000 f815 	bl	80021e0 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80021b6:	bf00      	nop
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	00010040 	.word	0x00010040
 80021c4:	007e2000 	.word	0x007e2000
 80021c8:	40013c00 	.word	0x40013c00

080021cc <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80021d4:	bf00      	nop
 80021d6:	370c      	adds	r7, #12
 80021d8:	46bd      	mov	sp, r7
 80021da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021de:	4770      	bx	lr

080021e0 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
 8002200:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f003 031c 	and.w	r3, r3, #28
 8002210:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	02db      	lsls	r3, r3, #11
 8002216:	b29b      	uxth	r3, r3
 8002218:	697a      	ldr	r2, [r7, #20]
 800221a:	4313      	orrs	r3, r2
 800221c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	019b      	lsls	r3, r3, #6
 8002222:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002226:	697a      	ldr	r2, [r7, #20]
 8002228:	4313      	orrs	r3, r2
 800222a:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	f023 0302 	bic.w	r3, r3, #2
 8002232:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002244:	f7ff f918 	bl	8001478 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800224a:	e00d      	b.n	8002268 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800224c:	f7ff f914 	bl	8001478 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800225a:	d301      	bcc.n	8002260 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800225c:	2301      	movs	r3, #1
 800225e:	e010      	b.n	8002282 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1ec      	bne.n	800224c <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	695b      	ldr	r3, [r3, #20]
 8002278:	b29b      	uxth	r3, r3
 800227a:	461a      	mov	r2, r3
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800228a:	b580      	push	{r7, lr}
 800228c:	b086      	sub	sp, #24
 800228e:	af00      	add	r7, sp, #0
 8002290:	60f8      	str	r0, [r7, #12]
 8002292:	60b9      	str	r1, [r7, #8]
 8002294:	607a      	str	r2, [r7, #4]
 8002296:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f003 031c 	and.w	r3, r3, #28
 80022a6:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	02db      	lsls	r3, r3, #11
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	019b      	lsls	r3, r3, #6
 80022b8:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	4313      	orrs	r3, r2
 80022c0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	f043 0302 	orr.w	r3, r3, #2
 80022c8:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80022ca:	697b      	ldr	r3, [r7, #20]
 80022cc:	f043 0301 	orr.w	r3, r3, #1
 80022d0:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	b29a      	uxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80022e4:	f7ff f8c8 	bl	8001478 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80022ea:	e00d      	b.n	8002308 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80022ec:	f7ff f8c4 	bl	8001478 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022fa:	d301      	bcc.n	8002300 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e009      	b.n	8002314 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002308:	697b      	ldr	r3, [r7, #20]
 800230a:	f003 0301 	and.w	r3, r3, #1
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1ec      	bne.n	80022ec <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002312:	2300      	movs	r3, #0
}
 8002314:	4618      	mov	r0, r3
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}

0800231c <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d101      	bne.n	8002330 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e0d9      	b.n	80024e4 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	2b00      	cmp	r3, #0
 800233c:	bf14      	ite	ne
 800233e:	2301      	movne	r3, #1
 8002340:	2300      	moveq	r3, #0
 8002342:	b2db      	uxtb	r3, r3
 8002344:	461a      	mov	r2, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002364:	2b00      	cmp	r3, #0
 8002366:	bf0c      	ite	eq
 8002368:	2301      	moveq	r3, #1
 800236a:	2300      	movne	r3, #0
 800236c:	b2db      	uxtb	r3, r3
 800236e:	461a      	mov	r2, r3
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8002380:	2b00      	cmp	r3, #0
 8002382:	bf14      	ite	ne
 8002384:	2301      	movne	r3, #1
 8002386:	2300      	moveq	r3, #0
 8002388:	b2db      	uxtb	r3, r3
 800238a:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800239a:	2b00      	cmp	r3, #0
 800239c:	bf0c      	ite	eq
 800239e:	2301      	moveq	r3, #1
 80023a0:	2300      	movne	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf14      	ite	ne
 80023b8:	2301      	movne	r3, #1
 80023ba:	2300      	moveq	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	bf0c      	ite	eq
 80023ee:	2301      	moveq	r3, #1
 80023f0:	2300      	movne	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002404:	2b00      	cmp	r3, #0
 8002406:	bf0c      	ite	eq
 8002408:	2301      	moveq	r3, #1
 800240a:	2300      	movne	r3, #0
 800240c:	b2db      	uxtb	r3, r3
 800240e:	461a      	mov	r2, r3
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241e:	2b00      	cmp	r3, #0
 8002420:	bf14      	ite	ne
 8002422:	2301      	movne	r3, #1
 8002424:	2300      	moveq	r3, #0
 8002426:	b2db      	uxtb	r3, r3
 8002428:	461a      	mov	r2, r3
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002446:	2b00      	cmp	r3, #0
 8002448:	bf14      	ite	ne
 800244a:	2301      	movne	r3, #1
 800244c:	2300      	moveq	r3, #0
 800244e:	b2db      	uxtb	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	bf14      	ite	ne
 8002464:	2301      	movne	r3, #1
 8002466:	2300      	moveq	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	461a      	mov	r2, r3
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	699b      	ldr	r3, [r3, #24]
 8002478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247c:	2b00      	cmp	r3, #0
 800247e:	bf0c      	ite	eq
 8002480:	2301      	moveq	r3, #1
 8002482:	2300      	movne	r3, #0
 8002484:	b2db      	uxtb	r3, r3
 8002486:	461a      	mov	r2, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	699b      	ldr	r3, [r3, #24]
 80024a2:	0c1b      	lsrs	r3, r3, #16
 80024a4:	b29a      	uxth	r2, r3
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	699b      	ldr	r3, [r3, #24]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	bf14      	ite	ne
 80024b8:	2301      	movne	r3, #1
 80024ba:	2300      	moveq	r3, #0
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	461a      	mov	r2, r3
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	699b      	ldr	r3, [r3, #24]
 80024cc:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	bf14      	ite	ne
 80024d4:	2301      	movne	r3, #1
 80024d6:	2300      	moveq	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80024e2:	2300      	movs	r3, #0
}
 80024e4:	4618      	mov	r0, r3
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e00b      	b.n	800251c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800250a:	2b10      	cmp	r3, #16
 800250c:	d105      	bne.n	800251a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800250e:	6839      	ldr	r1, [r7, #0]
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f000 f88f 	bl	8002634 <ETH_SetMACConfig>

    return HAL_OK;
 8002516:	2300      	movs	r3, #0
 8002518:	e000      	b.n	800251c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
  }
}
 800251c:	4618      	mov	r0, r3
 800251e:	3708      	adds	r7, #8
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}

08002524 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b084      	sub	sp, #16
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f023 031c 	bic.w	r3, r3, #28
 800253a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800253c:	f001 fc36 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8002540:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	4a1d      	ldr	r2, [pc, #116]	; (80025bc <HAL_ETH_SetMDIOClockRange+0x98>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d908      	bls.n	800255c <HAL_ETH_SetMDIOClockRange+0x38>
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	4a1c      	ldr	r2, [pc, #112]	; (80025c0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d804      	bhi.n	800255c <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f043 0308 	orr.w	r3, r3, #8
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	e027      	b.n	80025ac <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800255c:	68bb      	ldr	r3, [r7, #8]
 800255e:	4a18      	ldr	r2, [pc, #96]	; (80025c0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d908      	bls.n	8002576 <HAL_ETH_SetMDIOClockRange+0x52>
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4a17      	ldr	r2, [pc, #92]	; (80025c4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d204      	bcs.n	8002576 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f043 030c 	orr.w	r3, r3, #12
 8002572:	60fb      	str	r3, [r7, #12]
 8002574:	e01a      	b.n	80025ac <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	4a12      	ldr	r2, [pc, #72]	; (80025c4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d303      	bcc.n	8002586 <HAL_ETH_SetMDIOClockRange+0x62>
 800257e:	68bb      	ldr	r3, [r7, #8]
 8002580:	4a11      	ldr	r2, [pc, #68]	; (80025c8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d911      	bls.n	80025aa <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	4a0f      	ldr	r2, [pc, #60]	; (80025c8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d908      	bls.n	80025a0 <HAL_ETH_SetMDIOClockRange+0x7c>
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	4a0e      	ldr	r2, [pc, #56]	; (80025cc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d804      	bhi.n	80025a0 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f043 0304 	orr.w	r3, r3, #4
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	e005      	b.n	80025ac <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f043 0310 	orr.w	r3, r3, #16
 80025a6:	60fb      	str	r3, [r7, #12]
 80025a8:	e000      	b.n	80025ac <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80025aa:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	68fa      	ldr	r2, [r7, #12]
 80025b2:	611a      	str	r2, [r3, #16]
}
 80025b4:	bf00      	nop
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	01312cff 	.word	0x01312cff
 80025c0:	02160ebf 	.word	0x02160ebf
 80025c4:	03938700 	.word	0x03938700
 80025c8:	05f5e0ff 	.word	0x05f5e0ff
 80025cc:	08f0d17f 	.word	0x08f0d17f

080025d0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80025ea:	b580      	push	{r7, lr}
 80025ec:	b084      	sub	sp, #16
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025fe:	699b      	ldr	r3, [r3, #24]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6812      	ldr	r2, [r2, #0]
 8002604:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002608:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800260c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002616:	699b      	ldr	r3, [r3, #24]
 8002618:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800261a:	2001      	movs	r0, #1
 800261c:	f7fe ff38 	bl	8001490 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800262a:	6193      	str	r3, [r2, #24]
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	4b51      	ldr	r3, [pc, #324]	; (8002790 <ETH_SetMACConfig+0x15c>)
 800264a:	4013      	ands	r3, r2
 800264c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	7c1b      	ldrb	r3, [r3, #16]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d102      	bne.n	800265c <ETH_SetMACConfig+0x28>
 8002656:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800265a:	e000      	b.n	800265e <ETH_SetMACConfig+0x2a>
 800265c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	7c5b      	ldrb	r3, [r3, #17]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d102      	bne.n	800266c <ETH_SetMACConfig+0x38>
 8002666:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800266a:	e000      	b.n	800266e <ETH_SetMACConfig+0x3a>
 800266c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800266e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002674:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	7fdb      	ldrb	r3, [r3, #31]
 800267a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800267c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002682:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	7f92      	ldrb	r2, [r2, #30]
 8002688:	2a00      	cmp	r2, #0
 800268a:	d102      	bne.n	8002692 <ETH_SetMACConfig+0x5e>
 800268c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002690:	e000      	b.n	8002694 <ETH_SetMACConfig+0x60>
 8002692:	2200      	movs	r2, #0
                        macconf->Speed |
 8002694:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	7f1b      	ldrb	r3, [r3, #28]
 800269a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800269c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026a2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	791b      	ldrb	r3, [r3, #4]
 80026a8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80026aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026ac:	683a      	ldr	r2, [r7, #0]
 80026ae:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026b2:	2a00      	cmp	r2, #0
 80026b4:	d102      	bne.n	80026bc <ETH_SetMACConfig+0x88>
 80026b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ba:	e000      	b.n	80026be <ETH_SetMACConfig+0x8a>
 80026bc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026be:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	7bdb      	ldrb	r3, [r3, #15]
 80026c4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026c6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026cc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026d4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026d6:	4313      	orrs	r3, r2
 80026d8:	68fa      	ldr	r2, [r7, #12]
 80026da:	4313      	orrs	r3, r2
 80026dc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68fa      	ldr	r2, [r7, #12]
 80026e4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026ee:	2001      	movs	r0, #1
 80026f0:	f7fe fece 	bl	8001490 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	699b      	ldr	r3, [r3, #24]
 8002702:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	f64f 7341 	movw	r3, #65345	; 0xff41
 800270a:	4013      	ands	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002712:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002714:	683a      	ldr	r2, [r7, #0]
 8002716:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800271a:	2a00      	cmp	r2, #0
 800271c:	d101      	bne.n	8002722 <ETH_SetMACConfig+0xee>
 800271e:	2280      	movs	r2, #128	; 0x80
 8002720:	e000      	b.n	8002724 <ETH_SetMACConfig+0xf0>
 8002722:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002724:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002726:	683b      	ldr	r3, [r7, #0]
 8002728:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800272a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800272c:	683a      	ldr	r2, [r7, #0]
 800272e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002732:	2a01      	cmp	r2, #1
 8002734:	d101      	bne.n	800273a <ETH_SetMACConfig+0x106>
 8002736:	2208      	movs	r2, #8
 8002738:	e000      	b.n	800273c <ETH_SetMACConfig+0x108>
 800273a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800273c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002744:	2a01      	cmp	r2, #1
 8002746:	d101      	bne.n	800274c <ETH_SetMACConfig+0x118>
 8002748:	2204      	movs	r2, #4
 800274a:	e000      	b.n	800274e <ETH_SetMACConfig+0x11a>
 800274c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800274e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002756:	2a01      	cmp	r2, #1
 8002758:	d101      	bne.n	800275e <ETH_SetMACConfig+0x12a>
 800275a:	2202      	movs	r2, #2
 800275c:	e000      	b.n	8002760 <ETH_SetMACConfig+0x12c>
 800275e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002760:	4313      	orrs	r3, r2
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	699b      	ldr	r3, [r3, #24]
 8002776:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002778:	2001      	movs	r0, #1
 800277a:	f7fe fe89 	bl	8001490 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68fa      	ldr	r2, [r7, #12]
 8002784:	619a      	str	r2, [r3, #24]
}
 8002786:	bf00      	nop
 8002788:	3710      	adds	r7, #16
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	ff20810f 	.word	0xff20810f

08002794 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b084      	sub	sp, #16
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027a6:	699b      	ldr	r3, [r3, #24]
 80027a8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027aa:	68fa      	ldr	r2, [r7, #12]
 80027ac:	4b3d      	ldr	r3, [pc, #244]	; (80028a4 <ETH_SetDMAConfig+0x110>)
 80027ae:	4013      	ands	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	7b1b      	ldrb	r3, [r3, #12]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d102      	bne.n	80027c0 <ETH_SetDMAConfig+0x2c>
 80027ba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027be:	e000      	b.n	80027c2 <ETH_SetDMAConfig+0x2e>
 80027c0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	7b5b      	ldrb	r3, [r3, #13]
 80027c6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027c8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	7f52      	ldrb	r2, [r2, #29]
 80027ce:	2a00      	cmp	r2, #0
 80027d0:	d102      	bne.n	80027d8 <ETH_SetDMAConfig+0x44>
 80027d2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027d6:	e000      	b.n	80027da <ETH_SetDMAConfig+0x46>
 80027d8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027da:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	7b9b      	ldrb	r3, [r3, #14]
 80027e0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027e2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80027e4:	683b      	ldr	r3, [r7, #0]
 80027e6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027e8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	7f1b      	ldrb	r3, [r3, #28]
 80027ee:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80027f0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	7f9b      	ldrb	r3, [r3, #30]
 80027f6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027f8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80027fe:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002806:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002808:	4313      	orrs	r3, r2
 800280a:	68fa      	ldr	r2, [r7, #12]
 800280c:	4313      	orrs	r3, r2
 800280e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002818:	461a      	mov	r2, r3
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800282a:	2001      	movs	r0, #1
 800282c:	f7fe fe30 	bl	8001490 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002838:	461a      	mov	r2, r3
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	791b      	ldrb	r3, [r3, #4]
 8002842:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002848:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800284e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002854:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800285c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800285e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002864:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002866:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800286c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6812      	ldr	r2, [r2, #0]
 8002872:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002876:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800287a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002888:	2001      	movs	r0, #1
 800288a:	f7fe fe01 	bl	8001490 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002896:	461a      	mov	r2, r3
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	6013      	str	r3, [r2, #0]
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	f8de3f23 	.word	0xf8de3f23

080028a8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b0a6      	sub	sp, #152	; 0x98
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80028b0:	2301      	movs	r3, #1
 80028b2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80028b6:	2301      	movs	r3, #1
 80028b8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80028bc:	2300      	movs	r3, #0
 80028be:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028c0:	2300      	movs	r3, #0
 80028c2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80028c6:	2301      	movs	r3, #1
 80028c8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80028d2:	2301      	movs	r3, #1
 80028d4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80028d8:	2300      	movs	r3, #0
 80028da:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028e4:	2300      	movs	r3, #0
 80028e6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80028e8:	2300      	movs	r3, #0
 80028ea:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80028f8:	2300      	movs	r3, #0
 80028fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80028fe:	2300      	movs	r3, #0
 8002900:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002904:	2300      	movs	r3, #0
 8002906:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800290a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800290e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002910:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002914:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002916:	2300      	movs	r3, #0
 8002918:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800291c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002920:	4619      	mov	r1, r3
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff fe86 	bl	8002634 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002928:	2301      	movs	r3, #1
 800292a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800292c:	2301      	movs	r3, #1
 800292e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002930:	2301      	movs	r3, #1
 8002932:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002936:	2301      	movs	r3, #1
 8002938:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800293e:	2300      	movs	r3, #0
 8002940:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002944:	2300      	movs	r3, #0
 8002946:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800294a:	2300      	movs	r3, #0
 800294c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800294e:	2301      	movs	r3, #1
 8002950:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002954:	2301      	movs	r3, #1
 8002956:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002958:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800295c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800295e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002962:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002964:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002968:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800296a:	2301      	movs	r3, #1
 800296c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002970:	2300      	movs	r3, #0
 8002972:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002974:	2300      	movs	r3, #0
 8002976:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002978:	f107 0308 	add.w	r3, r7, #8
 800297c:	4619      	mov	r1, r3
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff ff08 	bl	8002794 <ETH_SetDMAConfig>
}
 8002984:	bf00      	nop
 8002986:	3798      	adds	r7, #152	; 0x98
 8002988:	46bd      	mov	sp, r7
 800298a:	bd80      	pop	{r7, pc}

0800298c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	3305      	adds	r3, #5
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	021b      	lsls	r3, r3, #8
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	3204      	adds	r2, #4
 80029a4:	7812      	ldrb	r2, [r2, #0]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	4b11      	ldr	r3, [pc, #68]	; (80029f4 <ETH_MACAddressConfig+0x68>)
 80029ae:	4413      	add	r3, r2
 80029b0:	461a      	mov	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3303      	adds	r3, #3
 80029ba:	781b      	ldrb	r3, [r3, #0]
 80029bc:	061a      	lsls	r2, r3, #24
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	3302      	adds	r3, #2
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	041b      	lsls	r3, r3, #16
 80029c6:	431a      	orrs	r2, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3301      	adds	r3, #1
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	021b      	lsls	r3, r3, #8
 80029d0:	4313      	orrs	r3, r2
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	7812      	ldrb	r2, [r2, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <ETH_MACAddressConfig+0x6c>)
 80029de:	4413      	add	r3, r2
 80029e0:	461a      	mov	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	6013      	str	r3, [r2, #0]
}
 80029e6:	bf00      	nop
 80029e8:	371c      	adds	r7, #28
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr
 80029f2:	bf00      	nop
 80029f4:	40028040 	.word	0x40028040
 80029f8:	40028044 	.word	0x40028044

080029fc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b085      	sub	sp, #20
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	e03e      	b.n	8002a88 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	68d9      	ldr	r1, [r3, #12]
 8002a0e:	68fa      	ldr	r2, [r7, #12]
 8002a10:	4613      	mov	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	4413      	add	r3, r2
 8002a16:	00db      	lsls	r3, r3, #3
 8002a18:	440b      	add	r3, r1
 8002a1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2200      	movs	r2, #0
 8002a26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2200      	movs	r2, #0
 8002a32:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a34:	68b9      	ldr	r1, [r7, #8]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	3206      	adds	r2, #6
 8002a3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d80c      	bhi.n	8002a6c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	68d9      	ldr	r1, [r3, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	1c5a      	adds	r2, r3, #1
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4413      	add	r3, r2
 8002a60:	00db      	lsls	r3, r3, #3
 8002a62:	440b      	add	r3, r1
 8002a64:	461a      	mov	r2, r3
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	e004      	b.n	8002a76 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	461a      	mov	r2, r3
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	3301      	adds	r3, #1
 8002a86:	60fb      	str	r3, [r7, #12]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2b03      	cmp	r3, #3
 8002a8c:	d9bd      	bls.n	8002a0a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2200      	movs	r2, #0
 8002a92:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	68da      	ldr	r2, [r3, #12]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aa0:	611a      	str	r2, [r3, #16]
}
 8002aa2:	bf00      	nop
 8002aa4:	3714      	adds	r7, #20
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr

08002aae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002aae:	b480      	push	{r7}
 8002ab0:	b085      	sub	sp, #20
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]
 8002aba:	e046      	b.n	8002b4a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6919      	ldr	r1, [r3, #16]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	00db      	lsls	r3, r3, #3
 8002aca:	440b      	add	r3, r1
 8002acc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2200      	movs	r2, #0
 8002ade:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	2200      	movs	r2, #0
 8002af0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002af8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002b00:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68fa      	ldr	r2, [r7, #12]
 8002b14:	3212      	adds	r2, #18
 8002b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d80c      	bhi.n	8002b3a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6919      	ldr	r1, [r3, #16]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1c5a      	adds	r2, r3, #1
 8002b28:	4613      	mov	r3, r2
 8002b2a:	009b      	lsls	r3, r3, #2
 8002b2c:	4413      	add	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	440b      	add	r3, r1
 8002b32:	461a      	mov	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60da      	str	r2, [r3, #12]
 8002b38:	e004      	b.n	8002b44 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	68bb      	ldr	r3, [r7, #8]
 8002b42:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	3301      	adds	r3, #1
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d9b5      	bls.n	8002abc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b7a:	60da      	str	r2, [r3, #12]
}
 8002b7c:	bf00      	nop
 8002b7e:	3714      	adds	r7, #20
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b08d      	sub	sp, #52	; 0x34
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3318      	adds	r3, #24
 8002b98:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	691b      	ldr	r3, [r3, #16]
 8002ba4:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002bb2:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002bbe:	6a3b      	ldr	r3, [r7, #32]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002bc6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002bca:	d007      	beq.n	8002bdc <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd0:	3304      	adds	r3, #4
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	4413      	add	r3, r2
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d001      	beq.n	8002be0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e0ff      	b.n	8002de0 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8002be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be2:	3301      	adds	r3, #1
 8002be4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	461a      	mov	r2, r3
 8002bec:	6a3b      	ldr	r3, [r7, #32]
 8002bee:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002bf0:	6a3b      	ldr	r3, [r7, #32]
 8002bf2:	685a      	ldr	r2, [r3, #4]
 8002bf4:	4b7d      	ldr	r3, [pc, #500]	; (8002dec <ETH_Prepare_Tx_Descriptors+0x264>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	69fa      	ldr	r2, [r7, #28]
 8002bfa:	6852      	ldr	r2, [r2, #4]
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	6a3b      	ldr	r3, [r7, #32]
 8002c00:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002c02:	68bb      	ldr	r3, [r7, #8]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d008      	beq.n	8002c20 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	6a3b      	ldr	r3, [r7, #32]
 8002c1e:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002c20:	68bb      	ldr	r3, [r7, #8]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 0320 	and.w	r3, r3, #32
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d008      	beq.n	8002c3e <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002c2c:	6a3b      	ldr	r3, [r7, #32]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	691b      	ldr	r3, [r3, #16]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	6a3b      	ldr	r3, [r7, #32]
 8002c3c:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002c3e:	68bb      	ldr	r3, [r7, #8]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0304 	and.w	r3, r3, #4
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d005      	beq.n	8002c56 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002c52:	6a3b      	ldr	r3, [r7, #32]
 8002c54:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002c56:	6a3b      	ldr	r3, [r7, #32]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c5e:	6a3b      	ldr	r3, [r7, #32]
 8002c60:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002c62:	f3bf 8f5f 	dmb	sy
}
 8002c66:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c70:	6a3b      	ldr	r3, [r7, #32]
 8002c72:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002c74:	e082      	b.n	8002d7c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002c76:	6a3b      	ldr	r3, [r7, #32]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002c7e:	6a3b      	ldr	r3, [r7, #32]
 8002c80:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d006      	beq.n	8002c96 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c88:	6a3b      	ldr	r3, [r7, #32]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002c90:	6a3b      	ldr	r3, [r7, #32]
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	e005      	b.n	8002ca2 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002c9e:	6a3b      	ldr	r3, [r7, #32]
 8002ca0:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca4:	3301      	adds	r3, #1
 8002ca6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002caa:	2b03      	cmp	r3, #3
 8002cac:	d902      	bls.n	8002cb4 <ETH_Prepare_Tx_Descriptors+0x12c>
 8002cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cb0:	3b04      	subs	r3, #4
 8002cb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cbc:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002cc6:	6a3b      	ldr	r3, [r7, #32]
 8002cc8:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002cd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002cd6:	d007      	beq.n	8002ce8 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002cd8:	697a      	ldr	r2, [r7, #20]
 8002cda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cdc:	3304      	adds	r3, #4
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d029      	beq.n	8002d3c <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002cec:	697b      	ldr	r3, [r7, #20]
 8002cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cf4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8002cfa:	e019      	b.n	8002d30 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002cfc:	f3bf 8f5f 	dmb	sy
}
 8002d00:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d10:	3301      	adds	r3, #1
 8002d12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d16:	2b03      	cmp	r3, #3
 8002d18:	d902      	bls.n	8002d20 <ETH_Prepare_Tx_Descriptors+0x198>
 8002d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1c:	3b04      	subs	r3, #4
 8002d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d28:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2c:	3301      	adds	r3, #1
 8002d2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d30:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d3e1      	bcc.n	8002cfc <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8002d38:	2302      	movs	r3, #2
 8002d3a:	e051      	b.n	8002de0 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	3301      	adds	r3, #1
 8002d40:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002d42:	69fb      	ldr	r3, [r7, #28]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	6a3b      	ldr	r3, [r7, #32]
 8002d50:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002d52:	6a3b      	ldr	r3, [r7, #32]
 8002d54:	685a      	ldr	r2, [r3, #4]
 8002d56:	4b25      	ldr	r3, [pc, #148]	; (8002dec <ETH_Prepare_Tx_Descriptors+0x264>)
 8002d58:	4013      	ands	r3, r2
 8002d5a:	69fa      	ldr	r2, [r7, #28]
 8002d5c:	6852      	ldr	r2, [r2, #4]
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	6a3b      	ldr	r3, [r7, #32]
 8002d62:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	3301      	adds	r3, #1
 8002d68:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002d6a:	f3bf 8f5f 	dmb	sy
}
 8002d6e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002d70:	6a3b      	ldr	r3, [r7, #32]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d78:	6a3b      	ldr	r3, [r7, #32]
 8002d7a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	f47f af78 	bne.w	8002c76 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d006      	beq.n	8002d9a <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d8c:	6a3b      	ldr	r3, [r7, #32]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002d94:	6a3b      	ldr	r3, [r7, #32]
 8002d96:	601a      	str	r2, [r3, #0]
 8002d98:	e005      	b.n	8002da6 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002d9a:	6a3b      	ldr	r3, [r7, #32]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002da6:	6a3b      	ldr	r3, [r7, #32]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002dae:	6a3b      	ldr	r3, [r7, #32]
 8002db0:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002db6:	6979      	ldr	r1, [r7, #20]
 8002db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dba:	3304      	adds	r3, #4
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dc6:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002dc8:	b672      	cpsid	i
}
 8002dca:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	4413      	add	r3, r2
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002dda:	b662      	cpsie	i
}
 8002ddc:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002dde:	2300      	movs	r3, #0
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	3734      	adds	r7, #52	; 0x34
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr
 8002dec:	ffffe000 	.word	0xffffe000

08002df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b089      	sub	sp, #36	; 0x24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e02:	2300      	movs	r3, #0
 8002e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e06:	2300      	movs	r3, #0
 8002e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	61fb      	str	r3, [r7, #28]
 8002e0e:	e175      	b.n	80030fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e10:	2201      	movs	r2, #1
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	697a      	ldr	r2, [r7, #20]
 8002e20:	4013      	ands	r3, r2
 8002e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	697b      	ldr	r3, [r7, #20]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	f040 8164 	bne.w	80030f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f003 0303 	and.w	r3, r3, #3
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d005      	beq.n	8002e46 <HAL_GPIO_Init+0x56>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	d130      	bne.n	8002ea8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	2203      	movs	r2, #3
 8002e52:	fa02 f303 	lsl.w	r3, r2, r3
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4313      	orrs	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	43db      	mvns	r3, r3
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	4013      	ands	r3, r2
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 0201 	and.w	r2, r3, #1
 8002e96:	69fb      	ldr	r3, [r7, #28]
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	69ba      	ldr	r2, [r7, #24]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b03      	cmp	r3, #3
 8002eb2:	d017      	beq.n	8002ee4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	689a      	ldr	r2, [r3, #8]
 8002ed0:	69fb      	ldr	r3, [r7, #28]
 8002ed2:	005b      	lsls	r3, r3, #1
 8002ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4313      	orrs	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69ba      	ldr	r2, [r7, #24]
 8002ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ee4:	683b      	ldr	r3, [r7, #0]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	f003 0303 	and.w	r3, r3, #3
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d123      	bne.n	8002f38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002ef0:	69fb      	ldr	r3, [r7, #28]
 8002ef2:	08da      	lsrs	r2, r3, #3
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	3208      	adds	r2, #8
 8002ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002efe:	69fb      	ldr	r3, [r7, #28]
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	220f      	movs	r2, #15
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	691a      	ldr	r2, [r3, #16]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	08da      	lsrs	r2, r3, #3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	3208      	adds	r2, #8
 8002f32:	69b9      	ldr	r1, [r7, #24]
 8002f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	005b      	lsls	r3, r3, #1
 8002f42:	2203      	movs	r2, #3
 8002f44:	fa02 f303 	lsl.w	r3, r2, r3
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f003 0203 	and.w	r2, r3, #3
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4313      	orrs	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 80be 	beq.w	80030f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f7a:	4b66      	ldr	r3, [pc, #408]	; (8003114 <HAL_GPIO_Init+0x324>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	4a65      	ldr	r2, [pc, #404]	; (8003114 <HAL_GPIO_Init+0x324>)
 8002f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f84:	6453      	str	r3, [r2, #68]	; 0x44
 8002f86:	4b63      	ldr	r3, [pc, #396]	; (8003114 <HAL_GPIO_Init+0x324>)
 8002f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002f92:	4a61      	ldr	r2, [pc, #388]	; (8003118 <HAL_GPIO_Init+0x328>)
 8002f94:	69fb      	ldr	r3, [r7, #28]
 8002f96:	089b      	lsrs	r3, r3, #2
 8002f98:	3302      	adds	r3, #2
 8002f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	f003 0303 	and.w	r3, r3, #3
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	220f      	movs	r2, #15
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a58      	ldr	r2, [pc, #352]	; (800311c <HAL_GPIO_Init+0x32c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d037      	beq.n	800302e <HAL_GPIO_Init+0x23e>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a57      	ldr	r2, [pc, #348]	; (8003120 <HAL_GPIO_Init+0x330>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d031      	beq.n	800302a <HAL_GPIO_Init+0x23a>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a56      	ldr	r2, [pc, #344]	; (8003124 <HAL_GPIO_Init+0x334>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d02b      	beq.n	8003026 <HAL_GPIO_Init+0x236>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a55      	ldr	r2, [pc, #340]	; (8003128 <HAL_GPIO_Init+0x338>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d025      	beq.n	8003022 <HAL_GPIO_Init+0x232>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a54      	ldr	r2, [pc, #336]	; (800312c <HAL_GPIO_Init+0x33c>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d01f      	beq.n	800301e <HAL_GPIO_Init+0x22e>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a53      	ldr	r2, [pc, #332]	; (8003130 <HAL_GPIO_Init+0x340>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d019      	beq.n	800301a <HAL_GPIO_Init+0x22a>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a52      	ldr	r2, [pc, #328]	; (8003134 <HAL_GPIO_Init+0x344>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d013      	beq.n	8003016 <HAL_GPIO_Init+0x226>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	4a51      	ldr	r2, [pc, #324]	; (8003138 <HAL_GPIO_Init+0x348>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d00d      	beq.n	8003012 <HAL_GPIO_Init+0x222>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	4a50      	ldr	r2, [pc, #320]	; (800313c <HAL_GPIO_Init+0x34c>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d007      	beq.n	800300e <HAL_GPIO_Init+0x21e>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4a4f      	ldr	r2, [pc, #316]	; (8003140 <HAL_GPIO_Init+0x350>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d101      	bne.n	800300a <HAL_GPIO_Init+0x21a>
 8003006:	2309      	movs	r3, #9
 8003008:	e012      	b.n	8003030 <HAL_GPIO_Init+0x240>
 800300a:	230a      	movs	r3, #10
 800300c:	e010      	b.n	8003030 <HAL_GPIO_Init+0x240>
 800300e:	2308      	movs	r3, #8
 8003010:	e00e      	b.n	8003030 <HAL_GPIO_Init+0x240>
 8003012:	2307      	movs	r3, #7
 8003014:	e00c      	b.n	8003030 <HAL_GPIO_Init+0x240>
 8003016:	2306      	movs	r3, #6
 8003018:	e00a      	b.n	8003030 <HAL_GPIO_Init+0x240>
 800301a:	2305      	movs	r3, #5
 800301c:	e008      	b.n	8003030 <HAL_GPIO_Init+0x240>
 800301e:	2304      	movs	r3, #4
 8003020:	e006      	b.n	8003030 <HAL_GPIO_Init+0x240>
 8003022:	2303      	movs	r3, #3
 8003024:	e004      	b.n	8003030 <HAL_GPIO_Init+0x240>
 8003026:	2302      	movs	r3, #2
 8003028:	e002      	b.n	8003030 <HAL_GPIO_Init+0x240>
 800302a:	2301      	movs	r3, #1
 800302c:	e000      	b.n	8003030 <HAL_GPIO_Init+0x240>
 800302e:	2300      	movs	r3, #0
 8003030:	69fa      	ldr	r2, [r7, #28]
 8003032:	f002 0203 	and.w	r2, r2, #3
 8003036:	0092      	lsls	r2, r2, #2
 8003038:	4093      	lsls	r3, r2
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4313      	orrs	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003040:	4935      	ldr	r1, [pc, #212]	; (8003118 <HAL_GPIO_Init+0x328>)
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	089b      	lsrs	r3, r3, #2
 8003046:	3302      	adds	r3, #2
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800304e:	4b3d      	ldr	r3, [pc, #244]	; (8003144 <HAL_GPIO_Init+0x354>)
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	43db      	mvns	r3, r3
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	4013      	ands	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d003      	beq.n	8003072 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800306a:	69ba      	ldr	r2, [r7, #24]
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003072:	4a34      	ldr	r2, [pc, #208]	; (8003144 <HAL_GPIO_Init+0x354>)
 8003074:	69bb      	ldr	r3, [r7, #24]
 8003076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003078:	4b32      	ldr	r3, [pc, #200]	; (8003144 <HAL_GPIO_Init+0x354>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800307e:	693b      	ldr	r3, [r7, #16]
 8003080:	43db      	mvns	r3, r3
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	4013      	ands	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d003      	beq.n	800309c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800309c:	4a29      	ldr	r2, [pc, #164]	; (8003144 <HAL_GPIO_Init+0x354>)
 800309e:	69bb      	ldr	r3, [r7, #24]
 80030a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030a2:	4b28      	ldr	r3, [pc, #160]	; (8003144 <HAL_GPIO_Init+0x354>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	43db      	mvns	r3, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	4013      	ands	r3, r2
 80030b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d003      	beq.n	80030c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030be:	69ba      	ldr	r2, [r7, #24]
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030c6:	4a1f      	ldr	r2, [pc, #124]	; (8003144 <HAL_GPIO_Init+0x354>)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030cc:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <HAL_GPIO_Init+0x354>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	43db      	mvns	r3, r3
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	4013      	ands	r3, r2
 80030da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d003      	beq.n	80030f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	4313      	orrs	r3, r2
 80030ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80030f0:	4a14      	ldr	r2, [pc, #80]	; (8003144 <HAL_GPIO_Init+0x354>)
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	3301      	adds	r3, #1
 80030fa:	61fb      	str	r3, [r7, #28]
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	2b0f      	cmp	r3, #15
 8003100:	f67f ae86 	bls.w	8002e10 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003104:	bf00      	nop
 8003106:	bf00      	nop
 8003108:	3724      	adds	r7, #36	; 0x24
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr
 8003112:	bf00      	nop
 8003114:	40023800 	.word	0x40023800
 8003118:	40013800 	.word	0x40013800
 800311c:	40020000 	.word	0x40020000
 8003120:	40020400 	.word	0x40020400
 8003124:	40020800 	.word	0x40020800
 8003128:	40020c00 	.word	0x40020c00
 800312c:	40021000 	.word	0x40021000
 8003130:	40021400 	.word	0x40021400
 8003134:	40021800 	.word	0x40021800
 8003138:	40021c00 	.word	0x40021c00
 800313c:	40022000 	.word	0x40022000
 8003140:	40022400 	.word	0x40022400
 8003144:	40013c00 	.word	0x40013c00

08003148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	807b      	strh	r3, [r7, #2]
 8003154:	4613      	mov	r3, r2
 8003156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003158:	787b      	ldrb	r3, [r7, #1]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d003      	beq.n	8003166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800315e:	887a      	ldrh	r2, [r7, #2]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003164:	e003      	b.n	800316e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003166:	887b      	ldrh	r3, [r7, #2]
 8003168:	041a      	lsls	r2, r3, #16
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	619a      	str	r2, [r3, #24]
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d101      	bne.n	800318e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	e07f      	b.n	800328e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003194:	b2db      	uxtb	r3, r3
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2200      	movs	r2, #0
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80031a2:	6878      	ldr	r0, [r7, #4]
 80031a4:	f7fd fcf0 	bl	8000b88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2224      	movs	r2, #36	; 0x24
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f022 0201 	bic.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031cc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031dc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d107      	bne.n	80031f6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031f2:	609a      	str	r2, [r3, #8]
 80031f4:	e006      	b.n	8003204 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689a      	ldr	r2, [r3, #8]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003202:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	2b02      	cmp	r3, #2
 800320a:	d104      	bne.n	8003216 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003214:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6859      	ldr	r1, [r3, #4]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4b1d      	ldr	r3, [pc, #116]	; (8003298 <HAL_I2C_Init+0x11c>)
 8003222:	430b      	orrs	r3, r1
 8003224:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003234:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69d9      	ldr	r1, [r3, #28]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1a      	ldr	r2, [r3, #32]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	02008000 	.word	0x02008000

0800329c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
 80032a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	2b20      	cmp	r3, #32
 80032b0:	d138      	bne.n	8003324 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d101      	bne.n	80032c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80032bc:	2302      	movs	r3, #2
 80032be:	e032      	b.n	8003326 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2224      	movs	r2, #36	; 0x24
 80032cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681a      	ldr	r2, [r3, #0]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0201 	bic.w	r2, r2, #1
 80032de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80032ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	6819      	ldr	r1, [r3, #0]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2220      	movs	r2, #32
 8003314:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003320:	2300      	movs	r3, #0
 8003322:	e000      	b.n	8003326 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003324:	2302      	movs	r3, #2
  }
}
 8003326:	4618      	mov	r0, r3
 8003328:	370c      	adds	r7, #12
 800332a:	46bd      	mov	sp, r7
 800332c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003330:	4770      	bx	lr

08003332 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003332:	b480      	push	{r7}
 8003334:	b085      	sub	sp, #20
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003342:	b2db      	uxtb	r3, r3
 8003344:	2b20      	cmp	r3, #32
 8003346:	d139      	bne.n	80033bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003352:	2302      	movs	r3, #2
 8003354:	e033      	b.n	80033be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2201      	movs	r2, #1
 800335a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2224      	movs	r2, #36	; 0x24
 8003362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 0201 	bic.w	r2, r2, #1
 8003374:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003384:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f042 0201 	orr.w	r2, r2, #1
 80033a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2220      	movs	r2, #32
 80033ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80033b8:	2300      	movs	r3, #0
 80033ba:	e000      	b.n	80033be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80033bc:	2302      	movs	r3, #2
  }
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3714      	adds	r7, #20
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr
	...

080033cc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80033d6:	4b23      	ldr	r3, [pc, #140]	; (8003464 <HAL_PWREx_EnableOverDrive+0x98>)
 80033d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033da:	4a22      	ldr	r2, [pc, #136]	; (8003464 <HAL_PWREx_EnableOverDrive+0x98>)
 80033dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033e0:	6413      	str	r3, [r2, #64]	; 0x40
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_PWREx_EnableOverDrive+0x98>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033ea:	603b      	str	r3, [r7, #0]
 80033ec:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80033ee:	4b1e      	ldr	r3, [pc, #120]	; (8003468 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a1d      	ldr	r2, [pc, #116]	; (8003468 <HAL_PWREx_EnableOverDrive+0x9c>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80033fa:	f7fe f83d 	bl	8001478 <HAL_GetTick>
 80033fe:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003400:	e009      	b.n	8003416 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003402:	f7fe f839 	bl	8001478 <HAL_GetTick>
 8003406:	4602      	mov	r2, r0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003410:	d901      	bls.n	8003416 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e022      	b.n	800345c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003416:	4b14      	ldr	r3, [pc, #80]	; (8003468 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800341e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003422:	d1ee      	bne.n	8003402 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003424:	4b10      	ldr	r3, [pc, #64]	; (8003468 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a0f      	ldr	r2, [pc, #60]	; (8003468 <HAL_PWREx_EnableOverDrive+0x9c>)
 800342a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800342e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003430:	f7fe f822 	bl	8001478 <HAL_GetTick>
 8003434:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003436:	e009      	b.n	800344c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003438:	f7fe f81e 	bl	8001478 <HAL_GetTick>
 800343c:	4602      	mov	r2, r0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	1ad3      	subs	r3, r2, r3
 8003442:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003446:	d901      	bls.n	800344c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003448:	2303      	movs	r3, #3
 800344a:	e007      	b.n	800345c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800344c:	4b06      	ldr	r3, [pc, #24]	; (8003468 <HAL_PWREx_EnableOverDrive+0x9c>)
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003454:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003458:	d1ee      	bne.n	8003438 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40023800 	.word	0x40023800
 8003468:	40007000 	.word	0x40007000

0800346c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b086      	sub	sp, #24
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003474:	2300      	movs	r3, #0
 8003476:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800347e:	2301      	movs	r3, #1
 8003480:	e29b      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0301 	and.w	r3, r3, #1
 800348a:	2b00      	cmp	r3, #0
 800348c:	f000 8087 	beq.w	800359e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003490:	4b96      	ldr	r3, [pc, #600]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f003 030c 	and.w	r3, r3, #12
 8003498:	2b04      	cmp	r3, #4
 800349a:	d00c      	beq.n	80034b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800349c:	4b93      	ldr	r3, [pc, #588]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 030c 	and.w	r3, r3, #12
 80034a4:	2b08      	cmp	r3, #8
 80034a6:	d112      	bne.n	80034ce <HAL_RCC_OscConfig+0x62>
 80034a8:	4b90      	ldr	r3, [pc, #576]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034b4:	d10b      	bne.n	80034ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034b6:	4b8d      	ldr	r3, [pc, #564]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d06c      	beq.n	800359c <HAL_RCC_OscConfig+0x130>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d168      	bne.n	800359c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e275      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034d6:	d106      	bne.n	80034e6 <HAL_RCC_OscConfig+0x7a>
 80034d8:	4b84      	ldr	r3, [pc, #528]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a83      	ldr	r2, [pc, #524]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80034de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034e2:	6013      	str	r3, [r2, #0]
 80034e4:	e02e      	b.n	8003544 <HAL_RCC_OscConfig+0xd8>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10c      	bne.n	8003508 <HAL_RCC_OscConfig+0x9c>
 80034ee:	4b7f      	ldr	r3, [pc, #508]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4a7e      	ldr	r2, [pc, #504]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80034f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034f8:	6013      	str	r3, [r2, #0]
 80034fa:	4b7c      	ldr	r3, [pc, #496]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a7b      	ldr	r2, [pc, #492]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003500:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	e01d      	b.n	8003544 <HAL_RCC_OscConfig+0xd8>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003510:	d10c      	bne.n	800352c <HAL_RCC_OscConfig+0xc0>
 8003512:	4b76      	ldr	r3, [pc, #472]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a75      	ldr	r2, [pc, #468]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	4b73      	ldr	r3, [pc, #460]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a72      	ldr	r2, [pc, #456]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003528:	6013      	str	r3, [r2, #0]
 800352a:	e00b      	b.n	8003544 <HAL_RCC_OscConfig+0xd8>
 800352c:	4b6f      	ldr	r3, [pc, #444]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a6e      	ldr	r2, [pc, #440]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	4b6c      	ldr	r3, [pc, #432]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a6b      	ldr	r2, [pc, #428]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 800353e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003542:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d013      	beq.n	8003574 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fd ff94 	bl	8001478 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003554:	f7fd ff90 	bl	8001478 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b64      	cmp	r3, #100	; 0x64
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e229      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003566:	4b61      	ldr	r3, [pc, #388]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0xe8>
 8003572:	e014      	b.n	800359e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003574:	f7fd ff80 	bl	8001478 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800357c:	f7fd ff7c 	bl	8001478 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	; 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e215      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800358e:	4b57      	ldr	r3, [pc, #348]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x110>
 800359a:	e000      	b.n	800359e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800359c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d069      	beq.n	800367e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80035aa:	4b50      	ldr	r3, [pc, #320]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 030c 	and.w	r3, r3, #12
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00b      	beq.n	80035ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035b6:	4b4d      	ldr	r3, [pc, #308]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d11c      	bne.n	80035fc <HAL_RCC_OscConfig+0x190>
 80035c2:	4b4a      	ldr	r3, [pc, #296]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d116      	bne.n	80035fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ce:	4b47      	ldr	r3, [pc, #284]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d005      	beq.n	80035e6 <HAL_RCC_OscConfig+0x17a>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d001      	beq.n	80035e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e1e9      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e6:	4b41      	ldr	r3, [pc, #260]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	493d      	ldr	r1, [pc, #244]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fa:	e040      	b.n	800367e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d023      	beq.n	800364c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003604:	4b39      	ldr	r3, [pc, #228]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a38      	ldr	r2, [pc, #224]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 800360a:	f043 0301 	orr.w	r3, r3, #1
 800360e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003610:	f7fd ff32 	bl	8001478 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003618:	f7fd ff2e 	bl	8001478 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e1c7      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800362a:	4b30      	ldr	r3, [pc, #192]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d0f0      	beq.n	8003618 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003636:	4b2d      	ldr	r3, [pc, #180]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	691b      	ldr	r3, [r3, #16]
 8003642:	00db      	lsls	r3, r3, #3
 8003644:	4929      	ldr	r1, [pc, #164]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003646:	4313      	orrs	r3, r2
 8003648:	600b      	str	r3, [r1, #0]
 800364a:	e018      	b.n	800367e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800364c:	4b27      	ldr	r3, [pc, #156]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a26      	ldr	r2, [pc, #152]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003652:	f023 0301 	bic.w	r3, r3, #1
 8003656:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003658:	f7fd ff0e 	bl	8001478 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003660:	f7fd ff0a 	bl	8001478 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b02      	cmp	r3, #2
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e1a3      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003672:	4b1e      	ldr	r3, [pc, #120]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1f0      	bne.n	8003660 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f003 0308 	and.w	r3, r3, #8
 8003686:	2b00      	cmp	r3, #0
 8003688:	d038      	beq.n	80036fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695b      	ldr	r3, [r3, #20]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d019      	beq.n	80036c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003692:	4b16      	ldr	r3, [pc, #88]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003694:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003696:	4a15      	ldr	r2, [pc, #84]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800369e:	f7fd feeb 	bl	8001478 <HAL_GetTick>
 80036a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a4:	e008      	b.n	80036b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036a6:	f7fd fee7 	bl	8001478 <HAL_GetTick>
 80036aa:	4602      	mov	r2, r0
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	1ad3      	subs	r3, r2, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d901      	bls.n	80036b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036b4:	2303      	movs	r3, #3
 80036b6:	e180      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036b8:	4b0c      	ldr	r3, [pc, #48]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80036ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036bc:	f003 0302 	and.w	r3, r3, #2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d0f0      	beq.n	80036a6 <HAL_RCC_OscConfig+0x23a>
 80036c4:	e01a      	b.n	80036fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036c6:	4b09      	ldr	r3, [pc, #36]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80036c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ca:	4a08      	ldr	r2, [pc, #32]	; (80036ec <HAL_RCC_OscConfig+0x280>)
 80036cc:	f023 0301 	bic.w	r3, r3, #1
 80036d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d2:	f7fd fed1 	bl	8001478 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036da:	f7fd fecd 	bl	8001478 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d903      	bls.n	80036f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e166      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
 80036ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036f0:	4b92      	ldr	r3, [pc, #584]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80036f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1ee      	bne.n	80036da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f003 0304 	and.w	r3, r3, #4
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80a4 	beq.w	8003852 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800370a:	4b8c      	ldr	r3, [pc, #560]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10d      	bne.n	8003732 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003716:	4b89      	ldr	r3, [pc, #548]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	4a88      	ldr	r2, [pc, #544]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800371c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003720:	6413      	str	r3, [r2, #64]	; 0x40
 8003722:	4b86      	ldr	r3, [pc, #536]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800372a:	60bb      	str	r3, [r7, #8]
 800372c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800372e:	2301      	movs	r3, #1
 8003730:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003732:	4b83      	ldr	r3, [pc, #524]	; (8003940 <HAL_RCC_OscConfig+0x4d4>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800373a:	2b00      	cmp	r3, #0
 800373c:	d118      	bne.n	8003770 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800373e:	4b80      	ldr	r3, [pc, #512]	; (8003940 <HAL_RCC_OscConfig+0x4d4>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a7f      	ldr	r2, [pc, #508]	; (8003940 <HAL_RCC_OscConfig+0x4d4>)
 8003744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003748:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800374a:	f7fd fe95 	bl	8001478 <HAL_GetTick>
 800374e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003750:	e008      	b.n	8003764 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003752:	f7fd fe91 	bl	8001478 <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	2b64      	cmp	r3, #100	; 0x64
 800375e:	d901      	bls.n	8003764 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e12a      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003764:	4b76      	ldr	r3, [pc, #472]	; (8003940 <HAL_RCC_OscConfig+0x4d4>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376c:	2b00      	cmp	r3, #0
 800376e:	d0f0      	beq.n	8003752 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689b      	ldr	r3, [r3, #8]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d106      	bne.n	8003786 <HAL_RCC_OscConfig+0x31a>
 8003778:	4b70      	ldr	r3, [pc, #448]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800377a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800377c:	4a6f      	ldr	r2, [pc, #444]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800377e:	f043 0301 	orr.w	r3, r3, #1
 8003782:	6713      	str	r3, [r2, #112]	; 0x70
 8003784:	e02d      	b.n	80037e2 <HAL_RCC_OscConfig+0x376>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d10c      	bne.n	80037a8 <HAL_RCC_OscConfig+0x33c>
 800378e:	4b6b      	ldr	r3, [pc, #428]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	4a6a      	ldr	r2, [pc, #424]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003794:	f023 0301 	bic.w	r3, r3, #1
 8003798:	6713      	str	r3, [r2, #112]	; 0x70
 800379a:	4b68      	ldr	r3, [pc, #416]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	4a67      	ldr	r2, [pc, #412]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80037a0:	f023 0304 	bic.w	r3, r3, #4
 80037a4:	6713      	str	r3, [r2, #112]	; 0x70
 80037a6:	e01c      	b.n	80037e2 <HAL_RCC_OscConfig+0x376>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	2b05      	cmp	r3, #5
 80037ae:	d10c      	bne.n	80037ca <HAL_RCC_OscConfig+0x35e>
 80037b0:	4b62      	ldr	r3, [pc, #392]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80037b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b4:	4a61      	ldr	r2, [pc, #388]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80037b6:	f043 0304 	orr.w	r3, r3, #4
 80037ba:	6713      	str	r3, [r2, #112]	; 0x70
 80037bc:	4b5f      	ldr	r3, [pc, #380]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80037be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037c0:	4a5e      	ldr	r2, [pc, #376]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80037c2:	f043 0301 	orr.w	r3, r3, #1
 80037c6:	6713      	str	r3, [r2, #112]	; 0x70
 80037c8:	e00b      	b.n	80037e2 <HAL_RCC_OscConfig+0x376>
 80037ca:	4b5c      	ldr	r3, [pc, #368]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80037cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ce:	4a5b      	ldr	r2, [pc, #364]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	6713      	str	r3, [r2, #112]	; 0x70
 80037d6:	4b59      	ldr	r3, [pc, #356]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80037d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037da:	4a58      	ldr	r2, [pc, #352]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80037dc:	f023 0304 	bic.w	r3, r3, #4
 80037e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d015      	beq.n	8003816 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ea:	f7fd fe45 	bl	8001478 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f0:	e00a      	b.n	8003808 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f2:	f7fd fe41 	bl	8001478 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003800:	4293      	cmp	r3, r2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e0d8      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003808:	4b4c      	ldr	r3, [pc, #304]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0ee      	beq.n	80037f2 <HAL_RCC_OscConfig+0x386>
 8003814:	e014      	b.n	8003840 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003816:	f7fd fe2f 	bl	8001478 <HAL_GetTick>
 800381a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381c:	e00a      	b.n	8003834 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800381e:	f7fd fe2b 	bl	8001478 <HAL_GetTick>
 8003822:	4602      	mov	r2, r0
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	1ad3      	subs	r3, r2, r3
 8003828:	f241 3288 	movw	r2, #5000	; 0x1388
 800382c:	4293      	cmp	r3, r2
 800382e:	d901      	bls.n	8003834 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e0c2      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003834:	4b41      	ldr	r3, [pc, #260]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1ee      	bne.n	800381e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003840:	7dfb      	ldrb	r3, [r7, #23]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d105      	bne.n	8003852 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003846:	4b3d      	ldr	r3, [pc, #244]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384a:	4a3c      	ldr	r2, [pc, #240]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800384c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003850:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	f000 80ae 	beq.w	80039b8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800385c:	4b37      	ldr	r3, [pc, #220]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 030c 	and.w	r3, r3, #12
 8003864:	2b08      	cmp	r3, #8
 8003866:	d06d      	beq.n	8003944 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	2b02      	cmp	r3, #2
 800386e:	d14b      	bne.n	8003908 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003870:	4b32      	ldr	r3, [pc, #200]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4a31      	ldr	r2, [pc, #196]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800387a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800387c:	f7fd fdfc 	bl	8001478 <HAL_GetTick>
 8003880:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003882:	e008      	b.n	8003896 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003884:	f7fd fdf8 	bl	8001478 <HAL_GetTick>
 8003888:	4602      	mov	r2, r0
 800388a:	693b      	ldr	r3, [r7, #16]
 800388c:	1ad3      	subs	r3, r2, r3
 800388e:	2b02      	cmp	r3, #2
 8003890:	d901      	bls.n	8003896 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e091      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003896:	4b29      	ldr	r3, [pc, #164]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d1f0      	bne.n	8003884 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	431a      	orrs	r2, r3
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b0:	019b      	lsls	r3, r3, #6
 80038b2:	431a      	orrs	r2, r3
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b8:	085b      	lsrs	r3, r3, #1
 80038ba:	3b01      	subs	r3, #1
 80038bc:	041b      	lsls	r3, r3, #16
 80038be:	431a      	orrs	r2, r3
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c4:	061b      	lsls	r3, r3, #24
 80038c6:	431a      	orrs	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	071b      	lsls	r3, r3, #28
 80038ce:	491b      	ldr	r1, [pc, #108]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038d4:	4b19      	ldr	r3, [pc, #100]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a18      	ldr	r2, [pc, #96]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80038da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038e0:	f7fd fdca 	bl	8001478 <HAL_GetTick>
 80038e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e6:	e008      	b.n	80038fa <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038e8:	f7fd fdc6 	bl	8001478 <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d901      	bls.n	80038fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e05f      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038fa:	4b10      	ldr	r3, [pc, #64]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d0f0      	beq.n	80038e8 <HAL_RCC_OscConfig+0x47c>
 8003906:	e057      	b.n	80039b8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003908:	4b0c      	ldr	r3, [pc, #48]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a0b      	ldr	r2, [pc, #44]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 800390e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003912:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003914:	f7fd fdb0 	bl	8001478 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800391a:	e008      	b.n	800392e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800391c:	f7fd fdac 	bl	8001478 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d901      	bls.n	800392e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800392a:	2303      	movs	r3, #3
 800392c:	e045      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800392e:	4b03      	ldr	r3, [pc, #12]	; (800393c <HAL_RCC_OscConfig+0x4d0>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d1f0      	bne.n	800391c <HAL_RCC_OscConfig+0x4b0>
 800393a:	e03d      	b.n	80039b8 <HAL_RCC_OscConfig+0x54c>
 800393c:	40023800 	.word	0x40023800
 8003940:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003944:	4b1f      	ldr	r3, [pc, #124]	; (80039c4 <HAL_RCC_OscConfig+0x558>)
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d030      	beq.n	80039b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800395c:	429a      	cmp	r2, r3
 800395e:	d129      	bne.n	80039b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800396a:	429a      	cmp	r2, r3
 800396c:	d122      	bne.n	80039b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800396e:	68fa      	ldr	r2, [r7, #12]
 8003970:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003974:	4013      	ands	r3, r2
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800397a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800397c:	4293      	cmp	r3, r2
 800397e:	d119      	bne.n	80039b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	085b      	lsrs	r3, r3, #1
 800398c:	3b01      	subs	r3, #1
 800398e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d10f      	bne.n	80039b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d107      	bne.n	80039b4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d001      	beq.n	80039b8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e000      	b.n	80039ba <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3718      	adds	r7, #24
 80039be:	46bd      	mov	sp, r7
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	40023800 	.word	0x40023800

080039c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80039d2:	2300      	movs	r3, #0
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d101      	bne.n	80039e0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e0d0      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039e0:	4b6a      	ldr	r3, [pc, #424]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 030f 	and.w	r3, r3, #15
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d910      	bls.n	8003a10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b67      	ldr	r3, [pc, #412]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f023 020f 	bic.w	r2, r3, #15
 80039f6:	4965      	ldr	r1, [pc, #404]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039fe:	4b63      	ldr	r3, [pc, #396]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 030f 	and.w	r3, r3, #15
 8003a06:	683a      	ldr	r2, [r7, #0]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	d001      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0b8      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0302 	and.w	r3, r3, #2
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d020      	beq.n	8003a5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0304 	and.w	r3, r3, #4
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d005      	beq.n	8003a34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a28:	4b59      	ldr	r3, [pc, #356]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	4a58      	ldr	r2, [pc, #352]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0308 	and.w	r3, r3, #8
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a40:	4b53      	ldr	r3, [pc, #332]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a52      	ldr	r2, [pc, #328]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a4c:	4b50      	ldr	r3, [pc, #320]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	494d      	ldr	r1, [pc, #308]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d040      	beq.n	8003aec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	685b      	ldr	r3, [r3, #4]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	d107      	bne.n	8003a82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a72:	4b47      	ldr	r3, [pc, #284]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d115      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e07f      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b02      	cmp	r3, #2
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a8a:	4b41      	ldr	r3, [pc, #260]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d109      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e073      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a9a:	4b3d      	ldr	r3, [pc, #244]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0302 	and.w	r3, r3, #2
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e06b      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aaa:	4b39      	ldr	r3, [pc, #228]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f023 0203 	bic.w	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4936      	ldr	r1, [pc, #216]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003abc:	f7fd fcdc 	bl	8001478 <HAL_GetTick>
 8003ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac4:	f7fd fcd8 	bl	8001478 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e053      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	4b2d      	ldr	r3, [pc, #180]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 020c 	and.w	r2, r3, #12
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d1eb      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003aec:	4b27      	ldr	r3, [pc, #156]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d210      	bcs.n	8003b1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003afa:	4b24      	ldr	r3, [pc, #144]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f023 020f 	bic.w	r2, r3, #15
 8003b02:	4922      	ldr	r1, [pc, #136]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <HAL_RCC_ClockConfig+0x1c4>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f003 030f 	and.w	r3, r3, #15
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	d001      	beq.n	8003b1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e032      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d008      	beq.n	8003b3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b28:	4b19      	ldr	r3, [pc, #100]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4916      	ldr	r1, [pc, #88]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f003 0308 	and.w	r3, r3, #8
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d009      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003b46:	4b12      	ldr	r3, [pc, #72]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	691b      	ldr	r3, [r3, #16]
 8003b52:	00db      	lsls	r3, r3, #3
 8003b54:	490e      	ldr	r1, [pc, #56]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b5a:	f000 f821 	bl	8003ba0 <HAL_RCC_GetSysClockFreq>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	4b0b      	ldr	r3, [pc, #44]	; (8003b90 <HAL_RCC_ClockConfig+0x1c8>)
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	091b      	lsrs	r3, r3, #4
 8003b66:	f003 030f 	and.w	r3, r3, #15
 8003b6a:	490a      	ldr	r1, [pc, #40]	; (8003b94 <HAL_RCC_ClockConfig+0x1cc>)
 8003b6c:	5ccb      	ldrb	r3, [r1, r3]
 8003b6e:	fa22 f303 	lsr.w	r3, r2, r3
 8003b72:	4a09      	ldr	r2, [pc, #36]	; (8003b98 <HAL_RCC_ClockConfig+0x1d0>)
 8003b74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003b76:	4b09      	ldr	r3, [pc, #36]	; (8003b9c <HAL_RCC_ClockConfig+0x1d4>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7fd f948 	bl	8000e10 <HAL_InitTick>

  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	40023c00 	.word	0x40023c00
 8003b90:	40023800 	.word	0x40023800
 8003b94:	0801a584 	.word	0x0801a584
 8003b98:	20000000 	.word	0x20000000
 8003b9c:	20000004 	.word	0x20000004

08003ba0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ba0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ba4:	b094      	sub	sp, #80	; 0x50
 8003ba6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	647b      	str	r3, [r7, #68]	; 0x44
 8003bac:	2300      	movs	r3, #0
 8003bae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bb8:	4b79      	ldr	r3, [pc, #484]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	f003 030c 	and.w	r3, r3, #12
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d00d      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0x40>
 8003bc4:	2b08      	cmp	r3, #8
 8003bc6:	f200 80e1 	bhi.w	8003d8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d002      	beq.n	8003bd4 <HAL_RCC_GetSysClockFreq+0x34>
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d003      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0x3a>
 8003bd2:	e0db      	b.n	8003d8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bd4:	4b73      	ldr	r3, [pc, #460]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bd6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bd8:	e0db      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bda:	4b73      	ldr	r3, [pc, #460]	; (8003da8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bdc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003bde:	e0d8      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003be0:	4b6f      	ldr	r3, [pc, #444]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003bea:	4b6d      	ldr	r3, [pc, #436]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d063      	beq.n	8003cbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf6:	4b6a      	ldr	r3, [pc, #424]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	099b      	lsrs	r3, r3, #6
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c00:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c08:	633b      	str	r3, [r7, #48]	; 0x30
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	637b      	str	r3, [r7, #52]	; 0x34
 8003c0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003c12:	4622      	mov	r2, r4
 8003c14:	462b      	mov	r3, r5
 8003c16:	f04f 0000 	mov.w	r0, #0
 8003c1a:	f04f 0100 	mov.w	r1, #0
 8003c1e:	0159      	lsls	r1, r3, #5
 8003c20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c24:	0150      	lsls	r0, r2, #5
 8003c26:	4602      	mov	r2, r0
 8003c28:	460b      	mov	r3, r1
 8003c2a:	4621      	mov	r1, r4
 8003c2c:	1a51      	subs	r1, r2, r1
 8003c2e:	6139      	str	r1, [r7, #16]
 8003c30:	4629      	mov	r1, r5
 8003c32:	eb63 0301 	sbc.w	r3, r3, r1
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c44:	4659      	mov	r1, fp
 8003c46:	018b      	lsls	r3, r1, #6
 8003c48:	4651      	mov	r1, sl
 8003c4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c4e:	4651      	mov	r1, sl
 8003c50:	018a      	lsls	r2, r1, #6
 8003c52:	4651      	mov	r1, sl
 8003c54:	ebb2 0801 	subs.w	r8, r2, r1
 8003c58:	4659      	mov	r1, fp
 8003c5a:	eb63 0901 	sbc.w	r9, r3, r1
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c72:	4690      	mov	r8, r2
 8003c74:	4699      	mov	r9, r3
 8003c76:	4623      	mov	r3, r4
 8003c78:	eb18 0303 	adds.w	r3, r8, r3
 8003c7c:	60bb      	str	r3, [r7, #8]
 8003c7e:	462b      	mov	r3, r5
 8003c80:	eb49 0303 	adc.w	r3, r9, r3
 8003c84:	60fb      	str	r3, [r7, #12]
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c92:	4629      	mov	r1, r5
 8003c94:	024b      	lsls	r3, r1, #9
 8003c96:	4621      	mov	r1, r4
 8003c98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	024a      	lsls	r2, r1, #9
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003caa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cb0:	f7fc fb16 	bl	80002e0 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cbc:	e058      	b.n	8003d70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cbe:	4b38      	ldr	r3, [pc, #224]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	099b      	lsrs	r3, r3, #6
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	4611      	mov	r1, r2
 8003cca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003cce:	623b      	str	r3, [r7, #32]
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cd8:	4642      	mov	r2, r8
 8003cda:	464b      	mov	r3, r9
 8003cdc:	f04f 0000 	mov.w	r0, #0
 8003ce0:	f04f 0100 	mov.w	r1, #0
 8003ce4:	0159      	lsls	r1, r3, #5
 8003ce6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cea:	0150      	lsls	r0, r2, #5
 8003cec:	4602      	mov	r2, r0
 8003cee:	460b      	mov	r3, r1
 8003cf0:	4641      	mov	r1, r8
 8003cf2:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cf6:	4649      	mov	r1, r9
 8003cf8:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cfc:	f04f 0200 	mov.w	r2, #0
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d10:	ebb2 040a 	subs.w	r4, r2, sl
 8003d14:	eb63 050b 	sbc.w	r5, r3, fp
 8003d18:	f04f 0200 	mov.w	r2, #0
 8003d1c:	f04f 0300 	mov.w	r3, #0
 8003d20:	00eb      	lsls	r3, r5, #3
 8003d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d26:	00e2      	lsls	r2, r4, #3
 8003d28:	4614      	mov	r4, r2
 8003d2a:	461d      	mov	r5, r3
 8003d2c:	4643      	mov	r3, r8
 8003d2e:	18e3      	adds	r3, r4, r3
 8003d30:	603b      	str	r3, [r7, #0]
 8003d32:	464b      	mov	r3, r9
 8003d34:	eb45 0303 	adc.w	r3, r5, r3
 8003d38:	607b      	str	r3, [r7, #4]
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d46:	4629      	mov	r1, r5
 8003d48:	028b      	lsls	r3, r1, #10
 8003d4a:	4621      	mov	r1, r4
 8003d4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d50:	4621      	mov	r1, r4
 8003d52:	028a      	lsls	r2, r1, #10
 8003d54:	4610      	mov	r0, r2
 8003d56:	4619      	mov	r1, r3
 8003d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	61bb      	str	r3, [r7, #24]
 8003d5e:	61fa      	str	r2, [r7, #28]
 8003d60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d64:	f7fc fabc 	bl	80002e0 <__aeabi_uldivmod>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4613      	mov	r3, r2
 8003d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003d70:	4b0b      	ldr	r3, [pc, #44]	; (8003da0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	0c1b      	lsrs	r3, r3, #16
 8003d76:	f003 0303 	and.w	r3, r3, #3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003d80:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003d82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d8a:	e002      	b.n	8003d92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d8c:	4b05      	ldr	r3, [pc, #20]	; (8003da4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d8e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003d90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3750      	adds	r7, #80	; 0x50
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d9e:	bf00      	nop
 8003da0:	40023800 	.word	0x40023800
 8003da4:	00f42400 	.word	0x00f42400
 8003da8:	007a1200 	.word	0x007a1200

08003dac <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dac:	b480      	push	{r7}
 8003dae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003db0:	4b03      	ldr	r3, [pc, #12]	; (8003dc0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003db2:	681b      	ldr	r3, [r3, #0]
}
 8003db4:	4618      	mov	r0, r3
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	20000000 	.word	0x20000000

08003dc4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003dc8:	f7ff fff0 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dd0:	689b      	ldr	r3, [r3, #8]
 8003dd2:	0a9b      	lsrs	r3, r3, #10
 8003dd4:	f003 0307 	and.w	r3, r3, #7
 8003dd8:	4903      	ldr	r1, [pc, #12]	; (8003de8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003dda:	5ccb      	ldrb	r3, [r1, r3]
 8003ddc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	40023800 	.word	0x40023800
 8003de8:	0801a594 	.word	0x0801a594

08003dec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003df0:	f7ff ffdc 	bl	8003dac <HAL_RCC_GetHCLKFreq>
 8003df4:	4602      	mov	r2, r0
 8003df6:	4b05      	ldr	r3, [pc, #20]	; (8003e0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	0b5b      	lsrs	r3, r3, #13
 8003dfc:	f003 0307 	and.w	r3, r3, #7
 8003e00:	4903      	ldr	r1, [pc, #12]	; (8003e10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e02:	5ccb      	ldrb	r3, [r1, r3]
 8003e04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	bd80      	pop	{r7, pc}
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	0801a594 	.word	0x0801a594

08003e14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b083      	sub	sp, #12
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
 8003e1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	220f      	movs	r2, #15
 8003e22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e24:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f003 0203 	and.w	r2, r3, #3
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e30:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003e48:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <HAL_RCC_GetClockConfig+0x5c>)
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	08db      	lsrs	r3, r3, #3
 8003e4e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e56:	4b07      	ldr	r3, [pc, #28]	; (8003e74 <HAL_RCC_GetClockConfig+0x60>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 020f 	and.w	r2, r3, #15
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	601a      	str	r2, [r3, #0]
}
 8003e62:	bf00      	nop
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop
 8003e70:	40023800 	.word	0x40023800
 8003e74:	40023c00 	.word	0x40023c00

08003e78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b088      	sub	sp, #32
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003e84:	2300      	movs	r3, #0
 8003e86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003e88:	2300      	movs	r3, #0
 8003e8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003e90:	2300      	movs	r3, #0
 8003e92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f003 0301 	and.w	r3, r3, #1
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d012      	beq.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003ea0:	4b69      	ldr	r3, [pc, #420]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea2:	689b      	ldr	r3, [r3, #8]
 8003ea4:	4a68      	ldr	r2, [pc, #416]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003eaa:	6093      	str	r3, [r2, #8]
 8003eac:	4b66      	ldr	r3, [pc, #408]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb4:	4964      	ldr	r1, [pc, #400]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d017      	beq.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ed2:	4b5d      	ldr	r3, [pc, #372]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ed4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ed8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ee0:	4959      	ldr	r1, [pc, #356]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003eec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ef0:	d101      	bne.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d101      	bne.n	8003f02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003efe:	2301      	movs	r3, #1
 8003f00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d017      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003f0e:	4b4e      	ldr	r3, [pc, #312]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	494a      	ldr	r1, [pc, #296]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d101      	bne.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d001      	beq.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003f4a:	2301      	movs	r3, #1
 8003f4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 808b 	beq.w	8004072 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f5c:	4b3a      	ldr	r3, [pc, #232]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	4a39      	ldr	r2, [pc, #228]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f66:	6413      	str	r3, [r2, #64]	; 0x40
 8003f68:	4b37      	ldr	r3, [pc, #220]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f70:	60bb      	str	r3, [r7, #8]
 8003f72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003f74:	4b35      	ldr	r3, [pc, #212]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a34      	ldr	r2, [pc, #208]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f80:	f7fd fa7a 	bl	8001478 <HAL_GetTick>
 8003f84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f88:	f7fd fa76 	bl	8001478 <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b64      	cmp	r3, #100	; 0x64
 8003f94:	d901      	bls.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e38f      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003f9a:	4b2c      	ldr	r3, [pc, #176]	; (800404c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0f0      	beq.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003fa6:	4b28      	ldr	r3, [pc, #160]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003faa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d035      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fbe:	693a      	ldr	r2, [r7, #16]
 8003fc0:	429a      	cmp	r2, r3
 8003fc2:	d02e      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fc4:	4b20      	ldr	r3, [pc, #128]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fcc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fce:	4b1e      	ldr	r3, [pc, #120]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd2:	4a1d      	ldr	r2, [pc, #116]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fd8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fda:	4b1b      	ldr	r3, [pc, #108]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fde:	4a1a      	ldr	r2, [pc, #104]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fe4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003fe6:	4a18      	ldr	r2, [pc, #96]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fec:	4b16      	ldr	r3, [pc, #88]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d114      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ff8:	f7fd fa3e 	bl	8001478 <HAL_GetTick>
 8003ffc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ffe:	e00a      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004000:	f7fd fa3a 	bl	8001478 <HAL_GetTick>
 8004004:	4602      	mov	r2, r0
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	1ad3      	subs	r3, r2, r3
 800400a:	f241 3288 	movw	r2, #5000	; 0x1388
 800400e:	4293      	cmp	r3, r2
 8004010:	d901      	bls.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e351      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004016:	4b0c      	ldr	r3, [pc, #48]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401a:	f003 0302 	and.w	r3, r3, #2
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0ee      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004026:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800402a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800402e:	d111      	bne.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004030:	4b05      	ldr	r3, [pc, #20]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004032:	689b      	ldr	r3, [r3, #8]
 8004034:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800403c:	4b04      	ldr	r3, [pc, #16]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800403e:	400b      	ands	r3, r1
 8004040:	4901      	ldr	r1, [pc, #4]	; (8004048 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004042:	4313      	orrs	r3, r2
 8004044:	608b      	str	r3, [r1, #8]
 8004046:	e00b      	b.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004048:	40023800 	.word	0x40023800
 800404c:	40007000 	.word	0x40007000
 8004050:	0ffffcff 	.word	0x0ffffcff
 8004054:	4bac      	ldr	r3, [pc, #688]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4aab      	ldr	r2, [pc, #684]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800405a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800405e:	6093      	str	r3, [r2, #8]
 8004060:	4ba9      	ldr	r3, [pc, #676]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004062:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004068:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800406c:	49a6      	ldr	r1, [pc, #664]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406e:	4313      	orrs	r3, r2
 8004070:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 0310 	and.w	r3, r3, #16
 800407a:	2b00      	cmp	r3, #0
 800407c:	d010      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800407e:	4ba2      	ldr	r3, [pc, #648]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004080:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004084:	4aa0      	ldr	r2, [pc, #640]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800408a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800408e:	4b9e      	ldr	r3, [pc, #632]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004090:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	499b      	ldr	r1, [pc, #620]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409a:	4313      	orrs	r3, r2
 800409c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d00a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80040ac:	4b96      	ldr	r3, [pc, #600]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040ba:	4993      	ldr	r1, [pc, #588]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040bc:	4313      	orrs	r3, r2
 80040be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00a      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80040ce:	4b8e      	ldr	r3, [pc, #568]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040d4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040dc:	498a      	ldr	r1, [pc, #552]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040de:	4313      	orrs	r3, r2
 80040e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d00a      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040f0:	4b85      	ldr	r3, [pc, #532]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040fe:	4982      	ldr	r1, [pc, #520]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004100:	4313      	orrs	r3, r2
 8004102:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004112:	4b7d      	ldr	r3, [pc, #500]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004114:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004118:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004120:	4979      	ldr	r1, [pc, #484]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004122:	4313      	orrs	r3, r2
 8004124:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00a      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004134:	4b74      	ldr	r3, [pc, #464]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004136:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800413a:	f023 0203 	bic.w	r2, r3, #3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004142:	4971      	ldr	r1, [pc, #452]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004144:	4313      	orrs	r3, r2
 8004146:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004156:	4b6c      	ldr	r3, [pc, #432]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004158:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800415c:	f023 020c 	bic.w	r2, r3, #12
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004164:	4968      	ldr	r1, [pc, #416]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004178:	4b63      	ldr	r3, [pc, #396]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004186:	4960      	ldr	r1, [pc, #384]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800419a:	4b5b      	ldr	r3, [pc, #364]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800419c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041a8:	4957      	ldr	r1, [pc, #348]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041bc:	4b52      	ldr	r3, [pc, #328]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ca:	494f      	ldr	r1, [pc, #316]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80041de:	4b4a      	ldr	r3, [pc, #296]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ec:	4946      	ldr	r1, [pc, #280]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004200:	4b41      	ldr	r3, [pc, #260]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004206:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800420e:	493e      	ldr	r1, [pc, #248]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004222:	4b39      	ldr	r3, [pc, #228]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004228:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004230:	4935      	ldr	r1, [pc, #212]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004244:	4b30      	ldr	r3, [pc, #192]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004246:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800424a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004252:	492d      	ldr	r1, [pc, #180]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d011      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004266:	4b28      	ldr	r3, [pc, #160]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004268:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800426c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004274:	4924      	ldr	r1, [pc, #144]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004280:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004284:	d101      	bne.n	800428a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004286:	2301      	movs	r3, #1
 8004288:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004296:	2301      	movs	r3, #1
 8004298:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d00a      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042a6:	4b18      	ldr	r3, [pc, #96]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b4:	4914      	ldr	r1, [pc, #80]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042b6:	4313      	orrs	r3, r2
 80042b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00b      	beq.n	80042e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80042c8:	4b0f      	ldr	r3, [pc, #60]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042d8:	490b      	ldr	r1, [pc, #44]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042da:	4313      	orrs	r3, r2
 80042dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00f      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042fc:	4902      	ldr	r1, [pc, #8]	; (8004308 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004304:	e002      	b.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004306:	bf00      	nop
 8004308:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d00b      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004318:	4b8a      	ldr	r3, [pc, #552]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800431a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800431e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004328:	4986      	ldr	r1, [pc, #536]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800432a:	4313      	orrs	r3, r2
 800432c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004338:	2b00      	cmp	r3, #0
 800433a:	d00b      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800433c:	4b81      	ldr	r3, [pc, #516]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800433e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004342:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800434c:	497d      	ldr	r1, [pc, #500]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	2b01      	cmp	r3, #1
 8004358:	d006      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004362:	2b00      	cmp	r3, #0
 8004364:	f000 80d6 	beq.w	8004514 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004368:	4b76      	ldr	r3, [pc, #472]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a75      	ldr	r2, [pc, #468]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800436e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004372:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004374:	f7fd f880 	bl	8001478 <HAL_GetTick>
 8004378:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800437a:	e008      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800437c:	f7fd f87c 	bl	8001478 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e195      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800438e:	4b6d      	ldr	r3, [pc, #436]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d021      	beq.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x572>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d11d      	bne.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80043ae:	4b65      	ldr	r3, [pc, #404]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80043bc:	4b61      	ldr	r3, [pc, #388]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043c2:	0e1b      	lsrs	r3, r3, #24
 80043c4:	f003 030f 	and.w	r3, r3, #15
 80043c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	019a      	lsls	r2, r3, #6
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	041b      	lsls	r3, r3, #16
 80043d4:	431a      	orrs	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	061b      	lsls	r3, r3, #24
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	071b      	lsls	r3, r3, #28
 80043e2:	4958      	ldr	r1, [pc, #352]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d004      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043fe:	d00a      	beq.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004408:	2b00      	cmp	r3, #0
 800440a:	d02e      	beq.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004410:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004414:	d129      	bne.n	800446a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004416:	4b4b      	ldr	r3, [pc, #300]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004418:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800441c:	0c1b      	lsrs	r3, r3, #16
 800441e:	f003 0303 	and.w	r3, r3, #3
 8004422:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004424:	4b47      	ldr	r3, [pc, #284]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004426:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800442a:	0f1b      	lsrs	r3, r3, #28
 800442c:	f003 0307 	and.w	r3, r3, #7
 8004430:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	019a      	lsls	r2, r3, #6
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	041b      	lsls	r3, r3, #16
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	061b      	lsls	r3, r3, #24
 8004444:	431a      	orrs	r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	071b      	lsls	r3, r3, #28
 800444a:	493e      	ldr	r1, [pc, #248]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800444c:	4313      	orrs	r3, r2
 800444e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004452:	4b3c      	ldr	r3, [pc, #240]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004458:	f023 021f 	bic.w	r2, r3, #31
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	3b01      	subs	r3, #1
 8004462:	4938      	ldr	r1, [pc, #224]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d01d      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004476:	4b33      	ldr	r3, [pc, #204]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004478:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800447c:	0e1b      	lsrs	r3, r3, #24
 800447e:	f003 030f 	and.w	r3, r3, #15
 8004482:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004484:	4b2f      	ldr	r3, [pc, #188]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800448a:	0f1b      	lsrs	r3, r3, #28
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	019a      	lsls	r2, r3, #6
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	041b      	lsls	r3, r3, #16
 800449e:	431a      	orrs	r2, r3
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	061b      	lsls	r3, r3, #24
 80044a4:	431a      	orrs	r2, r3
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	071b      	lsls	r3, r3, #28
 80044aa:	4926      	ldr	r1, [pc, #152]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d011      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	019a      	lsls	r2, r3, #6
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	691b      	ldr	r3, [r3, #16]
 80044c8:	041b      	lsls	r3, r3, #16
 80044ca:	431a      	orrs	r2, r3
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	68db      	ldr	r3, [r3, #12]
 80044d0:	061b      	lsls	r3, r3, #24
 80044d2:	431a      	orrs	r2, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	071b      	lsls	r3, r3, #28
 80044da:	491a      	ldr	r1, [pc, #104]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044dc:	4313      	orrs	r3, r2
 80044de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044e2:	4b18      	ldr	r3, [pc, #96]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a17      	ldr	r2, [pc, #92]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80044e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80044ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ee:	f7fc ffc3 	bl	8001478 <HAL_GetTick>
 80044f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044f4:	e008      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80044f6:	f7fc ffbf 	bl	8001478 <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b64      	cmp	r3, #100	; 0x64
 8004502:	d901      	bls.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e0d8      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004508:	4b0e      	ldr	r3, [pc, #56]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d0f0      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2b01      	cmp	r3, #1
 8004518:	f040 80ce 	bne.w	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800451c:	4b09      	ldr	r3, [pc, #36]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a08      	ldr	r2, [pc, #32]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004522:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004526:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004528:	f7fc ffa6 	bl	8001478 <HAL_GetTick>
 800452c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800452e:	e00b      	b.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004530:	f7fc ffa2 	bl	8001478 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	2b64      	cmp	r3, #100	; 0x64
 800453c:	d904      	bls.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800453e:	2303      	movs	r3, #3
 8004540:	e0bb      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004542:	bf00      	nop
 8004544:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004548:	4b5e      	ldr	r3, [pc, #376]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004550:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004554:	d0ec      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004572:	2b00      	cmp	r3, #0
 8004574:	d02e      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	d12a      	bne.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800457e:	4b51      	ldr	r3, [pc, #324]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004584:	0c1b      	lsrs	r3, r3, #16
 8004586:	f003 0303 	and.w	r3, r3, #3
 800458a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800458c:	4b4d      	ldr	r3, [pc, #308]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800458e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004592:	0f1b      	lsrs	r3, r3, #28
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	019a      	lsls	r2, r3, #6
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	041b      	lsls	r3, r3, #16
 80045a4:	431a      	orrs	r2, r3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	061b      	lsls	r3, r3, #24
 80045ac:	431a      	orrs	r2, r3
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	071b      	lsls	r3, r3, #28
 80045b2:	4944      	ldr	r1, [pc, #272]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045b4:	4313      	orrs	r3, r2
 80045b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80045ba:	4b42      	ldr	r3, [pc, #264]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c8:	3b01      	subs	r3, #1
 80045ca:	021b      	lsls	r3, r3, #8
 80045cc:	493d      	ldr	r1, [pc, #244]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d022      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80045e8:	d11d      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80045ea:	4b36      	ldr	r3, [pc, #216]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f0:	0e1b      	lsrs	r3, r3, #24
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80045f8:	4b32      	ldr	r3, [pc, #200]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fe:	0f1b      	lsrs	r3, r3, #28
 8004600:	f003 0307 	and.w	r3, r3, #7
 8004604:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	019a      	lsls	r2, r3, #6
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	041b      	lsls	r3, r3, #16
 8004612:	431a      	orrs	r2, r3
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	061b      	lsls	r3, r3, #24
 8004618:	431a      	orrs	r2, r3
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	071b      	lsls	r3, r3, #28
 800461e:	4929      	ldr	r1, [pc, #164]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004620:	4313      	orrs	r3, r2
 8004622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d028      	beq.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004632:	4b24      	ldr	r3, [pc, #144]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004638:	0e1b      	lsrs	r3, r3, #24
 800463a:	f003 030f 	and.w	r3, r3, #15
 800463e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004640:	4b20      	ldr	r3, [pc, #128]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004646:	0c1b      	lsrs	r3, r3, #16
 8004648:	f003 0303 	and.w	r3, r3, #3
 800464c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	019a      	lsls	r2, r3, #6
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	041b      	lsls	r3, r3, #16
 8004658:	431a      	orrs	r2, r3
 800465a:	693b      	ldr	r3, [r7, #16]
 800465c:	061b      	lsls	r3, r3, #24
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	071b      	lsls	r3, r3, #28
 8004666:	4917      	ldr	r1, [pc, #92]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004668:	4313      	orrs	r3, r2
 800466a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800466e:	4b15      	ldr	r3, [pc, #84]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004674:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800467c:	4911      	ldr	r1, [pc, #68]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800467e:	4313      	orrs	r3, r2
 8004680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004684:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a0e      	ldr	r2, [pc, #56]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800468a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800468e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004690:	f7fc fef2 	bl	8001478 <HAL_GetTick>
 8004694:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004696:	e008      	b.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004698:	f7fc feee 	bl	8001478 <HAL_GetTick>
 800469c:	4602      	mov	r2, r0
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	2b64      	cmp	r3, #100	; 0x64
 80046a4:	d901      	bls.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80046a6:	2303      	movs	r3, #3
 80046a8:	e007      	b.n	80046ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80046b6:	d1ef      	bne.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80046b8:	2300      	movs	r3, #0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	40023800 	.word	0x40023800

080046c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e09d      	b.n	8004816 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d108      	bne.n	80046f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80046ea:	d009      	beq.n	8004700 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	61da      	str	r2, [r3, #28]
 80046f2:	e005      	b.n	8004700 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2200      	movs	r2, #0
 80046f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800470c:	b2db      	uxtb	r3, r3
 800470e:	2b00      	cmp	r3, #0
 8004710:	d106      	bne.n	8004720 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	f7fc fa94 	bl	8000c48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2202      	movs	r2, #2
 8004724:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004736:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	68db      	ldr	r3, [r3, #12]
 800473c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004740:	d902      	bls.n	8004748 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004742:	2300      	movs	r3, #0
 8004744:	60fb      	str	r3, [r7, #12]
 8004746:	e002      	b.n	800474e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800474c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004756:	d007      	beq.n	8004768 <HAL_SPI_Init+0xa0>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	68db      	ldr	r3, [r3, #12]
 800475c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004760:	d002      	beq.n	8004768 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004778:	431a      	orrs	r2, r3
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	431a      	orrs	r2, r3
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	695b      	ldr	r3, [r3, #20]
 8004788:	f003 0301 	and.w	r3, r3, #1
 800478c:	431a      	orrs	r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	699b      	ldr	r3, [r3, #24]
 8004792:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	69db      	ldr	r3, [r3, #28]
 800479c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80047a0:	431a      	orrs	r2, r3
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6a1b      	ldr	r3, [r3, #32]
 80047a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047aa:	ea42 0103 	orr.w	r1, r2, r3
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b2:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	430a      	orrs	r2, r1
 80047bc:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	699b      	ldr	r3, [r3, #24]
 80047c2:	0c1b      	lsrs	r3, r3, #16
 80047c4:	f003 0204 	and.w	r2, r3, #4
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	431a      	orrs	r2, r3
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047d6:	f003 0308 	and.w	r3, r3, #8
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80047e4:	ea42 0103 	orr.w	r1, r2, r3
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	69da      	ldr	r2, [r3, #28]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004804:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2200      	movs	r2, #0
 800480a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2201      	movs	r2, #1
 8004810:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800481e:	b580      	push	{r7, lr}
 8004820:	b082      	sub	sp, #8
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2b00      	cmp	r3, #0
 800482a:	d101      	bne.n	8004830 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e049      	b.n	80048c4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b00      	cmp	r3, #0
 800483a:	d106      	bne.n	800484a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f000 f841 	bl	80048cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	2202      	movs	r2, #2
 800484e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3304      	adds	r3, #4
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f000 f9ff 	bl	8004c60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2201      	movs	r2, #1
 8004866:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2201      	movs	r2, #1
 8004876:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2201      	movs	r2, #1
 800487e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2201      	movs	r2, #1
 8004886:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2201      	movs	r2, #1
 800488e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2201      	movs	r2, #1
 80048a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2201      	movs	r2, #1
 80048b6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr

080048e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d001      	beq.n	80048f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e054      	b.n	80049a2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2202      	movs	r2, #2
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68da      	ldr	r2, [r3, #12]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f042 0201 	orr.w	r2, r2, #1
 800490e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a26      	ldr	r2, [pc, #152]	; (80049b0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d022      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004922:	d01d      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a22      	ldr	r2, [pc, #136]	; (80049b4 <HAL_TIM_Base_Start_IT+0xd4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d018      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a21      	ldr	r2, [pc, #132]	; (80049b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d013      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a1f      	ldr	r2, [pc, #124]	; (80049bc <HAL_TIM_Base_Start_IT+0xdc>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00e      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a1e      	ldr	r2, [pc, #120]	; (80049c0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d009      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a1c      	ldr	r2, [pc, #112]	; (80049c4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d004      	beq.n	8004960 <HAL_TIM_Base_Start_IT+0x80>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1b      	ldr	r2, [pc, #108]	; (80049c8 <HAL_TIM_Base_Start_IT+0xe8>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d115      	bne.n	800498c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	689a      	ldr	r2, [r3, #8]
 8004966:	4b19      	ldr	r3, [pc, #100]	; (80049cc <HAL_TIM_Base_Start_IT+0xec>)
 8004968:	4013      	ands	r3, r2
 800496a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	2b06      	cmp	r3, #6
 8004970:	d015      	beq.n	800499e <HAL_TIM_Base_Start_IT+0xbe>
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004978:	d011      	beq.n	800499e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f042 0201 	orr.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498a:	e008      	b.n	800499e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	e000      	b.n	80049a0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800499e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3714      	adds	r7, #20
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr
 80049ae:	bf00      	nop
 80049b0:	40010000 	.word	0x40010000
 80049b4:	40000400 	.word	0x40000400
 80049b8:	40000800 	.word	0x40000800
 80049bc:	40000c00 	.word	0x40000c00
 80049c0:	40010400 	.word	0x40010400
 80049c4:	40014000 	.word	0x40014000
 80049c8:	40001800 	.word	0x40001800
 80049cc:	00010007 	.word	0x00010007

080049d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	691b      	ldr	r3, [r3, #16]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d122      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f003 0302 	and.w	r3, r3, #2
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d11b      	bne.n	8004a2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f06f 0202 	mvn.w	r2, #2
 80049fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2201      	movs	r2, #1
 8004a02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	699b      	ldr	r3, [r3, #24]
 8004a0a:	f003 0303 	and.w	r3, r3, #3
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d003      	beq.n	8004a1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a12:	6878      	ldr	r0, [r7, #4]
 8004a14:	f000 f905 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 8004a18:	e005      	b.n	8004a26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a1a:	6878      	ldr	r0, [r7, #4]
 8004a1c:	f000 f8f7 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f000 f908 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	691b      	ldr	r3, [r3, #16]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d122      	bne.n	8004a80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f003 0304 	and.w	r3, r3, #4
 8004a44:	2b04      	cmp	r3, #4
 8004a46:	d11b      	bne.n	8004a80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f06f 0204 	mvn.w	r2, #4
 8004a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2202      	movs	r2, #2
 8004a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d003      	beq.n	8004a6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f8db 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 8004a6c:	e005      	b.n	8004a7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f8cd 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f000 f8de 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d122      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f003 0308 	and.w	r3, r3, #8
 8004a98:	2b08      	cmp	r3, #8
 8004a9a:	d11b      	bne.n	8004ad4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f06f 0208 	mvn.w	r2, #8
 8004aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2204      	movs	r2, #4
 8004aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	69db      	ldr	r3, [r3, #28]
 8004ab2:	f003 0303 	and.w	r3, r3, #3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	f000 f8b1 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 8004ac0:	e005      	b.n	8004ace <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 f8a3 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f000 f8b4 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0310 	and.w	r3, r3, #16
 8004ade:	2b10      	cmp	r3, #16
 8004ae0:	d122      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	f003 0310 	and.w	r3, r3, #16
 8004aec:	2b10      	cmp	r3, #16
 8004aee:	d11b      	bne.n	8004b28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f06f 0210 	mvn.w	r2, #16
 8004af8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2208      	movs	r2, #8
 8004afe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	69db      	ldr	r3, [r3, #28]
 8004b06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d003      	beq.n	8004b16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0e:	6878      	ldr	r0, [r7, #4]
 8004b10:	f000 f887 	bl	8004c22 <HAL_TIM_IC_CaptureCallback>
 8004b14:	e005      	b.n	8004b22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f000 f879 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 f88a 	bl	8004c36 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	691b      	ldr	r3, [r3, #16]
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d10e      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	f003 0301 	and.w	r3, r3, #1
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d107      	bne.n	8004b54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f06f 0201 	mvn.w	r2, #1
 8004b4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f7fb ff96 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5e:	2b80      	cmp	r3, #128	; 0x80
 8004b60:	d10e      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68db      	ldr	r3, [r3, #12]
 8004b68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b6c:	2b80      	cmp	r3, #128	; 0x80
 8004b6e:	d107      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004b78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	f000 f91a 	bl	8004db4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b8e:	d10e      	bne.n	8004bae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68db      	ldr	r3, [r3, #12]
 8004b96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9a:	2b80      	cmp	r3, #128	; 0x80
 8004b9c:	d107      	bne.n	8004bae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004ba6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004ba8:	6878      	ldr	r0, [r7, #4]
 8004baa:	f000 f90d 	bl	8004dc8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bb8:	2b40      	cmp	r3, #64	; 0x40
 8004bba:	d10e      	bne.n	8004bda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	68db      	ldr	r3, [r3, #12]
 8004bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bc6:	2b40      	cmp	r3, #64	; 0x40
 8004bc8:	d107      	bne.n	8004bda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 f838 	bl	8004c4a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	691b      	ldr	r3, [r3, #16]
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d10e      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f003 0320 	and.w	r3, r3, #32
 8004bf2:	2b20      	cmp	r3, #32
 8004bf4:	d107      	bne.n	8004c06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f06f 0220 	mvn.w	r2, #32
 8004bfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 f8cd 	bl	8004da0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
	...

08004c60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
 8004c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	4a40      	ldr	r2, [pc, #256]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d013      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c7e:	d00f      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a3d      	ldr	r2, [pc, #244]	; (8004d78 <TIM_Base_SetConfig+0x118>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d00b      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	4a3c      	ldr	r2, [pc, #240]	; (8004d7c <TIM_Base_SetConfig+0x11c>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d007      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	4a3b      	ldr	r2, [pc, #236]	; (8004d80 <TIM_Base_SetConfig+0x120>)
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d003      	beq.n	8004ca0 <TIM_Base_SetConfig+0x40>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a3a      	ldr	r2, [pc, #232]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d108      	bne.n	8004cb2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ca6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a2f      	ldr	r2, [pc, #188]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d02b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc0:	d027      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a2c      	ldr	r2, [pc, #176]	; (8004d78 <TIM_Base_SetConfig+0x118>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d023      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a2b      	ldr	r2, [pc, #172]	; (8004d7c <TIM_Base_SetConfig+0x11c>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d01f      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	4a2a      	ldr	r2, [pc, #168]	; (8004d80 <TIM_Base_SetConfig+0x120>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d01b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a29      	ldr	r2, [pc, #164]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d017      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a28      	ldr	r2, [pc, #160]	; (8004d88 <TIM_Base_SetConfig+0x128>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d013      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a27      	ldr	r2, [pc, #156]	; (8004d8c <TIM_Base_SetConfig+0x12c>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d00f      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a26      	ldr	r2, [pc, #152]	; (8004d90 <TIM_Base_SetConfig+0x130>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d00b      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a25      	ldr	r2, [pc, #148]	; (8004d94 <TIM_Base_SetConfig+0x134>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d007      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a24      	ldr	r2, [pc, #144]	; (8004d98 <TIM_Base_SetConfig+0x138>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d003      	beq.n	8004d12 <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a23      	ldr	r2, [pc, #140]	; (8004d9c <TIM_Base_SetConfig+0x13c>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d108      	bne.n	8004d24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68db      	ldr	r3, [r3, #12]
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	695b      	ldr	r3, [r3, #20]
 8004d2e:	4313      	orrs	r3, r2
 8004d30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	689a      	ldr	r2, [r3, #8]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4a0a      	ldr	r2, [pc, #40]	; (8004d74 <TIM_Base_SetConfig+0x114>)
 8004d4c:	4293      	cmp	r3, r2
 8004d4e:	d003      	beq.n	8004d58 <TIM_Base_SetConfig+0xf8>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	4a0c      	ldr	r2, [pc, #48]	; (8004d84 <TIM_Base_SetConfig+0x124>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d103      	bne.n	8004d60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	691a      	ldr	r2, [r3, #16]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	615a      	str	r2, [r3, #20]
}
 8004d66:	bf00      	nop
 8004d68:	3714      	adds	r7, #20
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d70:	4770      	bx	lr
 8004d72:	bf00      	nop
 8004d74:	40010000 	.word	0x40010000
 8004d78:	40000400 	.word	0x40000400
 8004d7c:	40000800 	.word	0x40000800
 8004d80:	40000c00 	.word	0x40000c00
 8004d84:	40010400 	.word	0x40010400
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800
 8004d94:	40001800 	.word	0x40001800
 8004d98:	40001c00 	.word	0x40001c00
 8004d9c:	40002000 	.word	0x40002000

08004da0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004da8:	bf00      	nop
 8004daa:	370c      	adds	r7, #12
 8004dac:	46bd      	mov	sp, r7
 8004dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db2:	4770      	bx	lr

08004db4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004dbc:	bf00      	nop
 8004dbe:	370c      	adds	r7, #12
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr

08004dc8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b083      	sub	sp, #12
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004dd0:	bf00      	nop
 8004dd2:	370c      	adds	r7, #12
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dda:	4770      	bx	lr

08004ddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d101      	bne.n	8004dee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	e040      	b.n	8004e70 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d106      	bne.n	8004e04 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004dfe:	6878      	ldr	r0, [r7, #4]
 8004e00:	f7fb ff84 	bl	8000d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2224      	movs	r2, #36	; 0x24
 8004e08:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	681a      	ldr	r2, [r3, #0]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 0201 	bic.w	r2, r2, #1
 8004e18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f82c 	bl	8004e78 <UART_SetConfig>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d101      	bne.n	8004e2a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	e022      	b.n	8004e70 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 fa84 	bl	8005340 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	685a      	ldr	r2, [r3, #4]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004e46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689a      	ldr	r2, [r3, #8]
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004e56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f042 0201 	orr.w	r2, r2, #1
 8004e66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fb0b 	bl	8005484 <UART_CheckIdleState>
 8004e6e:	4603      	mov	r3, r0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3708      	adds	r7, #8
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b088      	sub	sp, #32
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004e80:	2300      	movs	r3, #0
 8004e82:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689a      	ldr	r2, [r3, #8]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	691b      	ldr	r3, [r3, #16]
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	431a      	orrs	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	69db      	ldr	r3, [r3, #28]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	4ba6      	ldr	r3, [pc, #664]	; (800513c <UART_SetConfig+0x2c4>)
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	6812      	ldr	r2, [r2, #0]
 8004eaa:	6979      	ldr	r1, [r7, #20]
 8004eac:	430b      	orrs	r3, r1
 8004eae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	68da      	ldr	r2, [r3, #12]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	699b      	ldr	r3, [r3, #24]
 8004eca:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a1b      	ldr	r3, [r3, #32]
 8004ed0:	697a      	ldr	r2, [r7, #20]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	430a      	orrs	r2, r1
 8004ee8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a94      	ldr	r2, [pc, #592]	; (8005140 <UART_SetConfig+0x2c8>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d120      	bne.n	8004f36 <UART_SetConfig+0xbe>
 8004ef4:	4b93      	ldr	r3, [pc, #588]	; (8005144 <UART_SetConfig+0x2cc>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d816      	bhi.n	8004f30 <UART_SetConfig+0xb8>
 8004f02:	a201      	add	r2, pc, #4	; (adr r2, 8004f08 <UART_SetConfig+0x90>)
 8004f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f08:	08004f19 	.word	0x08004f19
 8004f0c:	08004f25 	.word	0x08004f25
 8004f10:	08004f1f 	.word	0x08004f1f
 8004f14:	08004f2b 	.word	0x08004f2b
 8004f18:	2301      	movs	r3, #1
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	e150      	b.n	80051c0 <UART_SetConfig+0x348>
 8004f1e:	2302      	movs	r3, #2
 8004f20:	77fb      	strb	r3, [r7, #31]
 8004f22:	e14d      	b.n	80051c0 <UART_SetConfig+0x348>
 8004f24:	2304      	movs	r3, #4
 8004f26:	77fb      	strb	r3, [r7, #31]
 8004f28:	e14a      	b.n	80051c0 <UART_SetConfig+0x348>
 8004f2a:	2308      	movs	r3, #8
 8004f2c:	77fb      	strb	r3, [r7, #31]
 8004f2e:	e147      	b.n	80051c0 <UART_SetConfig+0x348>
 8004f30:	2310      	movs	r3, #16
 8004f32:	77fb      	strb	r3, [r7, #31]
 8004f34:	e144      	b.n	80051c0 <UART_SetConfig+0x348>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a83      	ldr	r2, [pc, #524]	; (8005148 <UART_SetConfig+0x2d0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d132      	bne.n	8004fa6 <UART_SetConfig+0x12e>
 8004f40:	4b80      	ldr	r3, [pc, #512]	; (8005144 <UART_SetConfig+0x2cc>)
 8004f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f46:	f003 030c 	and.w	r3, r3, #12
 8004f4a:	2b0c      	cmp	r3, #12
 8004f4c:	d828      	bhi.n	8004fa0 <UART_SetConfig+0x128>
 8004f4e:	a201      	add	r2, pc, #4	; (adr r2, 8004f54 <UART_SetConfig+0xdc>)
 8004f50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f54:	08004f89 	.word	0x08004f89
 8004f58:	08004fa1 	.word	0x08004fa1
 8004f5c:	08004fa1 	.word	0x08004fa1
 8004f60:	08004fa1 	.word	0x08004fa1
 8004f64:	08004f95 	.word	0x08004f95
 8004f68:	08004fa1 	.word	0x08004fa1
 8004f6c:	08004fa1 	.word	0x08004fa1
 8004f70:	08004fa1 	.word	0x08004fa1
 8004f74:	08004f8f 	.word	0x08004f8f
 8004f78:	08004fa1 	.word	0x08004fa1
 8004f7c:	08004fa1 	.word	0x08004fa1
 8004f80:	08004fa1 	.word	0x08004fa1
 8004f84:	08004f9b 	.word	0x08004f9b
 8004f88:	2300      	movs	r3, #0
 8004f8a:	77fb      	strb	r3, [r7, #31]
 8004f8c:	e118      	b.n	80051c0 <UART_SetConfig+0x348>
 8004f8e:	2302      	movs	r3, #2
 8004f90:	77fb      	strb	r3, [r7, #31]
 8004f92:	e115      	b.n	80051c0 <UART_SetConfig+0x348>
 8004f94:	2304      	movs	r3, #4
 8004f96:	77fb      	strb	r3, [r7, #31]
 8004f98:	e112      	b.n	80051c0 <UART_SetConfig+0x348>
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	77fb      	strb	r3, [r7, #31]
 8004f9e:	e10f      	b.n	80051c0 <UART_SetConfig+0x348>
 8004fa0:	2310      	movs	r3, #16
 8004fa2:	77fb      	strb	r3, [r7, #31]
 8004fa4:	e10c      	b.n	80051c0 <UART_SetConfig+0x348>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4a68      	ldr	r2, [pc, #416]	; (800514c <UART_SetConfig+0x2d4>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d120      	bne.n	8004ff2 <UART_SetConfig+0x17a>
 8004fb0:	4b64      	ldr	r3, [pc, #400]	; (8005144 <UART_SetConfig+0x2cc>)
 8004fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004fba:	2b30      	cmp	r3, #48	; 0x30
 8004fbc:	d013      	beq.n	8004fe6 <UART_SetConfig+0x16e>
 8004fbe:	2b30      	cmp	r3, #48	; 0x30
 8004fc0:	d814      	bhi.n	8004fec <UART_SetConfig+0x174>
 8004fc2:	2b20      	cmp	r3, #32
 8004fc4:	d009      	beq.n	8004fda <UART_SetConfig+0x162>
 8004fc6:	2b20      	cmp	r3, #32
 8004fc8:	d810      	bhi.n	8004fec <UART_SetConfig+0x174>
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d002      	beq.n	8004fd4 <UART_SetConfig+0x15c>
 8004fce:	2b10      	cmp	r3, #16
 8004fd0:	d006      	beq.n	8004fe0 <UART_SetConfig+0x168>
 8004fd2:	e00b      	b.n	8004fec <UART_SetConfig+0x174>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	77fb      	strb	r3, [r7, #31]
 8004fd8:	e0f2      	b.n	80051c0 <UART_SetConfig+0x348>
 8004fda:	2302      	movs	r3, #2
 8004fdc:	77fb      	strb	r3, [r7, #31]
 8004fde:	e0ef      	b.n	80051c0 <UART_SetConfig+0x348>
 8004fe0:	2304      	movs	r3, #4
 8004fe2:	77fb      	strb	r3, [r7, #31]
 8004fe4:	e0ec      	b.n	80051c0 <UART_SetConfig+0x348>
 8004fe6:	2308      	movs	r3, #8
 8004fe8:	77fb      	strb	r3, [r7, #31]
 8004fea:	e0e9      	b.n	80051c0 <UART_SetConfig+0x348>
 8004fec:	2310      	movs	r3, #16
 8004fee:	77fb      	strb	r3, [r7, #31]
 8004ff0:	e0e6      	b.n	80051c0 <UART_SetConfig+0x348>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a56      	ldr	r2, [pc, #344]	; (8005150 <UART_SetConfig+0x2d8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d120      	bne.n	800503e <UART_SetConfig+0x1c6>
 8004ffc:	4b51      	ldr	r3, [pc, #324]	; (8005144 <UART_SetConfig+0x2cc>)
 8004ffe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005002:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005006:	2bc0      	cmp	r3, #192	; 0xc0
 8005008:	d013      	beq.n	8005032 <UART_SetConfig+0x1ba>
 800500a:	2bc0      	cmp	r3, #192	; 0xc0
 800500c:	d814      	bhi.n	8005038 <UART_SetConfig+0x1c0>
 800500e:	2b80      	cmp	r3, #128	; 0x80
 8005010:	d009      	beq.n	8005026 <UART_SetConfig+0x1ae>
 8005012:	2b80      	cmp	r3, #128	; 0x80
 8005014:	d810      	bhi.n	8005038 <UART_SetConfig+0x1c0>
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <UART_SetConfig+0x1a8>
 800501a:	2b40      	cmp	r3, #64	; 0x40
 800501c:	d006      	beq.n	800502c <UART_SetConfig+0x1b4>
 800501e:	e00b      	b.n	8005038 <UART_SetConfig+0x1c0>
 8005020:	2300      	movs	r3, #0
 8005022:	77fb      	strb	r3, [r7, #31]
 8005024:	e0cc      	b.n	80051c0 <UART_SetConfig+0x348>
 8005026:	2302      	movs	r3, #2
 8005028:	77fb      	strb	r3, [r7, #31]
 800502a:	e0c9      	b.n	80051c0 <UART_SetConfig+0x348>
 800502c:	2304      	movs	r3, #4
 800502e:	77fb      	strb	r3, [r7, #31]
 8005030:	e0c6      	b.n	80051c0 <UART_SetConfig+0x348>
 8005032:	2308      	movs	r3, #8
 8005034:	77fb      	strb	r3, [r7, #31]
 8005036:	e0c3      	b.n	80051c0 <UART_SetConfig+0x348>
 8005038:	2310      	movs	r3, #16
 800503a:	77fb      	strb	r3, [r7, #31]
 800503c:	e0c0      	b.n	80051c0 <UART_SetConfig+0x348>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a44      	ldr	r2, [pc, #272]	; (8005154 <UART_SetConfig+0x2dc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d125      	bne.n	8005094 <UART_SetConfig+0x21c>
 8005048:	4b3e      	ldr	r3, [pc, #248]	; (8005144 <UART_SetConfig+0x2cc>)
 800504a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005052:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005056:	d017      	beq.n	8005088 <UART_SetConfig+0x210>
 8005058:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800505c:	d817      	bhi.n	800508e <UART_SetConfig+0x216>
 800505e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005062:	d00b      	beq.n	800507c <UART_SetConfig+0x204>
 8005064:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005068:	d811      	bhi.n	800508e <UART_SetConfig+0x216>
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <UART_SetConfig+0x1fe>
 800506e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005072:	d006      	beq.n	8005082 <UART_SetConfig+0x20a>
 8005074:	e00b      	b.n	800508e <UART_SetConfig+0x216>
 8005076:	2300      	movs	r3, #0
 8005078:	77fb      	strb	r3, [r7, #31]
 800507a:	e0a1      	b.n	80051c0 <UART_SetConfig+0x348>
 800507c:	2302      	movs	r3, #2
 800507e:	77fb      	strb	r3, [r7, #31]
 8005080:	e09e      	b.n	80051c0 <UART_SetConfig+0x348>
 8005082:	2304      	movs	r3, #4
 8005084:	77fb      	strb	r3, [r7, #31]
 8005086:	e09b      	b.n	80051c0 <UART_SetConfig+0x348>
 8005088:	2308      	movs	r3, #8
 800508a:	77fb      	strb	r3, [r7, #31]
 800508c:	e098      	b.n	80051c0 <UART_SetConfig+0x348>
 800508e:	2310      	movs	r3, #16
 8005090:	77fb      	strb	r3, [r7, #31]
 8005092:	e095      	b.n	80051c0 <UART_SetConfig+0x348>
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a2f      	ldr	r2, [pc, #188]	; (8005158 <UART_SetConfig+0x2e0>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d125      	bne.n	80050ea <UART_SetConfig+0x272>
 800509e:	4b29      	ldr	r3, [pc, #164]	; (8005144 <UART_SetConfig+0x2cc>)
 80050a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050a4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80050a8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050ac:	d017      	beq.n	80050de <UART_SetConfig+0x266>
 80050ae:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80050b2:	d817      	bhi.n	80050e4 <UART_SetConfig+0x26c>
 80050b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b8:	d00b      	beq.n	80050d2 <UART_SetConfig+0x25a>
 80050ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050be:	d811      	bhi.n	80050e4 <UART_SetConfig+0x26c>
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <UART_SetConfig+0x254>
 80050c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050c8:	d006      	beq.n	80050d8 <UART_SetConfig+0x260>
 80050ca:	e00b      	b.n	80050e4 <UART_SetConfig+0x26c>
 80050cc:	2301      	movs	r3, #1
 80050ce:	77fb      	strb	r3, [r7, #31]
 80050d0:	e076      	b.n	80051c0 <UART_SetConfig+0x348>
 80050d2:	2302      	movs	r3, #2
 80050d4:	77fb      	strb	r3, [r7, #31]
 80050d6:	e073      	b.n	80051c0 <UART_SetConfig+0x348>
 80050d8:	2304      	movs	r3, #4
 80050da:	77fb      	strb	r3, [r7, #31]
 80050dc:	e070      	b.n	80051c0 <UART_SetConfig+0x348>
 80050de:	2308      	movs	r3, #8
 80050e0:	77fb      	strb	r3, [r7, #31]
 80050e2:	e06d      	b.n	80051c0 <UART_SetConfig+0x348>
 80050e4:	2310      	movs	r3, #16
 80050e6:	77fb      	strb	r3, [r7, #31]
 80050e8:	e06a      	b.n	80051c0 <UART_SetConfig+0x348>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a1b      	ldr	r2, [pc, #108]	; (800515c <UART_SetConfig+0x2e4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d138      	bne.n	8005166 <UART_SetConfig+0x2ee>
 80050f4:	4b13      	ldr	r3, [pc, #76]	; (8005144 <UART_SetConfig+0x2cc>)
 80050f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050fa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80050fe:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005102:	d017      	beq.n	8005134 <UART_SetConfig+0x2bc>
 8005104:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005108:	d82a      	bhi.n	8005160 <UART_SetConfig+0x2e8>
 800510a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800510e:	d00b      	beq.n	8005128 <UART_SetConfig+0x2b0>
 8005110:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005114:	d824      	bhi.n	8005160 <UART_SetConfig+0x2e8>
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <UART_SetConfig+0x2aa>
 800511a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800511e:	d006      	beq.n	800512e <UART_SetConfig+0x2b6>
 8005120:	e01e      	b.n	8005160 <UART_SetConfig+0x2e8>
 8005122:	2300      	movs	r3, #0
 8005124:	77fb      	strb	r3, [r7, #31]
 8005126:	e04b      	b.n	80051c0 <UART_SetConfig+0x348>
 8005128:	2302      	movs	r3, #2
 800512a:	77fb      	strb	r3, [r7, #31]
 800512c:	e048      	b.n	80051c0 <UART_SetConfig+0x348>
 800512e:	2304      	movs	r3, #4
 8005130:	77fb      	strb	r3, [r7, #31]
 8005132:	e045      	b.n	80051c0 <UART_SetConfig+0x348>
 8005134:	2308      	movs	r3, #8
 8005136:	77fb      	strb	r3, [r7, #31]
 8005138:	e042      	b.n	80051c0 <UART_SetConfig+0x348>
 800513a:	bf00      	nop
 800513c:	efff69f3 	.word	0xefff69f3
 8005140:	40011000 	.word	0x40011000
 8005144:	40023800 	.word	0x40023800
 8005148:	40004400 	.word	0x40004400
 800514c:	40004800 	.word	0x40004800
 8005150:	40004c00 	.word	0x40004c00
 8005154:	40005000 	.word	0x40005000
 8005158:	40011400 	.word	0x40011400
 800515c:	40007800 	.word	0x40007800
 8005160:	2310      	movs	r3, #16
 8005162:	77fb      	strb	r3, [r7, #31]
 8005164:	e02c      	b.n	80051c0 <UART_SetConfig+0x348>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a72      	ldr	r2, [pc, #456]	; (8005334 <UART_SetConfig+0x4bc>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d125      	bne.n	80051bc <UART_SetConfig+0x344>
 8005170:	4b71      	ldr	r3, [pc, #452]	; (8005338 <UART_SetConfig+0x4c0>)
 8005172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005176:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800517a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800517e:	d017      	beq.n	80051b0 <UART_SetConfig+0x338>
 8005180:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005184:	d817      	bhi.n	80051b6 <UART_SetConfig+0x33e>
 8005186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800518a:	d00b      	beq.n	80051a4 <UART_SetConfig+0x32c>
 800518c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005190:	d811      	bhi.n	80051b6 <UART_SetConfig+0x33e>
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <UART_SetConfig+0x326>
 8005196:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800519a:	d006      	beq.n	80051aa <UART_SetConfig+0x332>
 800519c:	e00b      	b.n	80051b6 <UART_SetConfig+0x33e>
 800519e:	2300      	movs	r3, #0
 80051a0:	77fb      	strb	r3, [r7, #31]
 80051a2:	e00d      	b.n	80051c0 <UART_SetConfig+0x348>
 80051a4:	2302      	movs	r3, #2
 80051a6:	77fb      	strb	r3, [r7, #31]
 80051a8:	e00a      	b.n	80051c0 <UART_SetConfig+0x348>
 80051aa:	2304      	movs	r3, #4
 80051ac:	77fb      	strb	r3, [r7, #31]
 80051ae:	e007      	b.n	80051c0 <UART_SetConfig+0x348>
 80051b0:	2308      	movs	r3, #8
 80051b2:	77fb      	strb	r3, [r7, #31]
 80051b4:	e004      	b.n	80051c0 <UART_SetConfig+0x348>
 80051b6:	2310      	movs	r3, #16
 80051b8:	77fb      	strb	r3, [r7, #31]
 80051ba:	e001      	b.n	80051c0 <UART_SetConfig+0x348>
 80051bc:	2310      	movs	r3, #16
 80051be:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	69db      	ldr	r3, [r3, #28]
 80051c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80051c8:	d15b      	bne.n	8005282 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80051ca:	7ffb      	ldrb	r3, [r7, #31]
 80051cc:	2b08      	cmp	r3, #8
 80051ce:	d828      	bhi.n	8005222 <UART_SetConfig+0x3aa>
 80051d0:	a201      	add	r2, pc, #4	; (adr r2, 80051d8 <UART_SetConfig+0x360>)
 80051d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d6:	bf00      	nop
 80051d8:	080051fd 	.word	0x080051fd
 80051dc:	08005205 	.word	0x08005205
 80051e0:	0800520d 	.word	0x0800520d
 80051e4:	08005223 	.word	0x08005223
 80051e8:	08005213 	.word	0x08005213
 80051ec:	08005223 	.word	0x08005223
 80051f0:	08005223 	.word	0x08005223
 80051f4:	08005223 	.word	0x08005223
 80051f8:	0800521b 	.word	0x0800521b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051fc:	f7fe fde2 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 8005200:	61b8      	str	r0, [r7, #24]
        break;
 8005202:	e013      	b.n	800522c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005204:	f7fe fdf2 	bl	8003dec <HAL_RCC_GetPCLK2Freq>
 8005208:	61b8      	str	r0, [r7, #24]
        break;
 800520a:	e00f      	b.n	800522c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800520c:	4b4b      	ldr	r3, [pc, #300]	; (800533c <UART_SetConfig+0x4c4>)
 800520e:	61bb      	str	r3, [r7, #24]
        break;
 8005210:	e00c      	b.n	800522c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005212:	f7fe fcc5 	bl	8003ba0 <HAL_RCC_GetSysClockFreq>
 8005216:	61b8      	str	r0, [r7, #24]
        break;
 8005218:	e008      	b.n	800522c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800521a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800521e:	61bb      	str	r3, [r7, #24]
        break;
 8005220:	e004      	b.n	800522c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	77bb      	strb	r3, [r7, #30]
        break;
 800522a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800522c:	69bb      	ldr	r3, [r7, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d074      	beq.n	800531c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	005a      	lsls	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	441a      	add	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	fbb2 f3f3 	udiv	r3, r2, r3
 8005246:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005248:	693b      	ldr	r3, [r7, #16]
 800524a:	2b0f      	cmp	r3, #15
 800524c:	d916      	bls.n	800527c <UART_SetConfig+0x404>
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005254:	d212      	bcs.n	800527c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	b29b      	uxth	r3, r3
 800525a:	f023 030f 	bic.w	r3, r3, #15
 800525e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	085b      	lsrs	r3, r3, #1
 8005264:	b29b      	uxth	r3, r3
 8005266:	f003 0307 	and.w	r3, r3, #7
 800526a:	b29a      	uxth	r2, r3
 800526c:	89fb      	ldrh	r3, [r7, #14]
 800526e:	4313      	orrs	r3, r2
 8005270:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	89fa      	ldrh	r2, [r7, #14]
 8005278:	60da      	str	r2, [r3, #12]
 800527a:	e04f      	b.n	800531c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	77bb      	strb	r3, [r7, #30]
 8005280:	e04c      	b.n	800531c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005282:	7ffb      	ldrb	r3, [r7, #31]
 8005284:	2b08      	cmp	r3, #8
 8005286:	d828      	bhi.n	80052da <UART_SetConfig+0x462>
 8005288:	a201      	add	r2, pc, #4	; (adr r2, 8005290 <UART_SetConfig+0x418>)
 800528a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800528e:	bf00      	nop
 8005290:	080052b5 	.word	0x080052b5
 8005294:	080052bd 	.word	0x080052bd
 8005298:	080052c5 	.word	0x080052c5
 800529c:	080052db 	.word	0x080052db
 80052a0:	080052cb 	.word	0x080052cb
 80052a4:	080052db 	.word	0x080052db
 80052a8:	080052db 	.word	0x080052db
 80052ac:	080052db 	.word	0x080052db
 80052b0:	080052d3 	.word	0x080052d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80052b4:	f7fe fd86 	bl	8003dc4 <HAL_RCC_GetPCLK1Freq>
 80052b8:	61b8      	str	r0, [r7, #24]
        break;
 80052ba:	e013      	b.n	80052e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80052bc:	f7fe fd96 	bl	8003dec <HAL_RCC_GetPCLK2Freq>
 80052c0:	61b8      	str	r0, [r7, #24]
        break;
 80052c2:	e00f      	b.n	80052e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80052c4:	4b1d      	ldr	r3, [pc, #116]	; (800533c <UART_SetConfig+0x4c4>)
 80052c6:	61bb      	str	r3, [r7, #24]
        break;
 80052c8:	e00c      	b.n	80052e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80052ca:	f7fe fc69 	bl	8003ba0 <HAL_RCC_GetSysClockFreq>
 80052ce:	61b8      	str	r0, [r7, #24]
        break;
 80052d0:	e008      	b.n	80052e4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80052d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052d6:	61bb      	str	r3, [r7, #24]
        break;
 80052d8:	e004      	b.n	80052e4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80052de:	2301      	movs	r3, #1
 80052e0:	77bb      	strb	r3, [r7, #30]
        break;
 80052e2:	bf00      	nop
    }

    if (pclk != 0U)
 80052e4:	69bb      	ldr	r3, [r7, #24]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d018      	beq.n	800531c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	085a      	lsrs	r2, r3, #1
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	441a      	add	r2, r3
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052fc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	2b0f      	cmp	r3, #15
 8005302:	d909      	bls.n	8005318 <UART_SetConfig+0x4a0>
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800530a:	d205      	bcs.n	8005318 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	b29a      	uxth	r2, r3
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	60da      	str	r2, [r3, #12]
 8005316:	e001      	b.n	800531c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2200      	movs	r2, #0
 8005326:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005328:	7fbb      	ldrb	r3, [r7, #30]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3720      	adds	r7, #32
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40007c00 	.word	0x40007c00
 8005338:	40023800 	.word	0x40023800
 800533c:	00f42400 	.word	0x00f42400

08005340 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b00      	cmp	r3, #0
 8005352:	d00a      	beq.n	800536a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	430a      	orrs	r2, r1
 8005368:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	430a      	orrs	r2, r1
 800538a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005390:	f003 0304 	and.w	r3, r3, #4
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	430a      	orrs	r2, r1
 80053ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b2:	f003 0308 	and.w	r3, r3, #8
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	430a      	orrs	r2, r1
 80053ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d4:	f003 0310 	and.w	r3, r3, #16
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	430a      	orrs	r2, r1
 8005412:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d01a      	beq.n	8005456 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	430a      	orrs	r2, r1
 8005434:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800543e:	d10a      	bne.n	8005456 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	430a      	orrs	r2, r1
 8005454:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800545a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800545e:	2b00      	cmp	r3, #0
 8005460:	d00a      	beq.n	8005478 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	430a      	orrs	r2, r1
 8005476:	605a      	str	r2, [r3, #4]
  }
}
 8005478:	bf00      	nop
 800547a:	370c      	adds	r7, #12
 800547c:	46bd      	mov	sp, r7
 800547e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005482:	4770      	bx	lr

08005484 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b086      	sub	sp, #24
 8005488:	af02      	add	r7, sp, #8
 800548a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005494:	f7fb fff0 	bl	8001478 <HAL_GetTick>
 8005498:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0308 	and.w	r3, r3, #8
 80054a4:	2b08      	cmp	r3, #8
 80054a6:	d10e      	bne.n	80054c6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054ac:	9300      	str	r3, [sp, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2200      	movs	r2, #0
 80054b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 f831 	bl	800551e <UART_WaitOnFlagUntilTimeout>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d001      	beq.n	80054c6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054c2:	2303      	movs	r3, #3
 80054c4:	e027      	b.n	8005516 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 0304 	and.w	r3, r3, #4
 80054d0:	2b04      	cmp	r3, #4
 80054d2:	d10e      	bne.n	80054f2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054d4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	2200      	movs	r2, #0
 80054de:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f81b 	bl	800551e <UART_WaitOnFlagUntilTimeout>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	e011      	b.n	8005516 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2220      	movs	r2, #32
 80054fc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2200      	movs	r2, #0
 8005504:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005514:	2300      	movs	r3, #0
}
 8005516:	4618      	mov	r0, r3
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}

0800551e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800551e:	b580      	push	{r7, lr}
 8005520:	b09c      	sub	sp, #112	; 0x70
 8005522:	af00      	add	r7, sp, #0
 8005524:	60f8      	str	r0, [r7, #12]
 8005526:	60b9      	str	r1, [r7, #8]
 8005528:	603b      	str	r3, [r7, #0]
 800552a:	4613      	mov	r3, r2
 800552c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800552e:	e0a7      	b.n	8005680 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005530:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005532:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005536:	f000 80a3 	beq.w	8005680 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800553a:	f7fb ff9d 	bl	8001478 <HAL_GetTick>
 800553e:	4602      	mov	r2, r0
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	1ad3      	subs	r3, r2, r3
 8005544:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005546:	429a      	cmp	r2, r3
 8005548:	d302      	bcc.n	8005550 <UART_WaitOnFlagUntilTimeout+0x32>
 800554a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800554c:	2b00      	cmp	r3, #0
 800554e:	d13f      	bne.n	80055d0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005556:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005558:	e853 3f00 	ldrex	r3, [r3]
 800555c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800555e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005560:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005564:	667b      	str	r3, [r7, #100]	; 0x64
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	461a      	mov	r2, r3
 800556c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800556e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005570:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005572:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005574:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005576:	e841 2300 	strex	r3, r2, [r1]
 800557a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800557c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1e6      	bne.n	8005550 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3308      	adds	r3, #8
 8005588:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800558a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800558c:	e853 3f00 	ldrex	r3, [r3]
 8005590:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005594:	f023 0301 	bic.w	r3, r3, #1
 8005598:	663b      	str	r3, [r7, #96]	; 0x60
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	3308      	adds	r3, #8
 80055a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80055a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80055a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80055a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80055b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1e5      	bne.n	8005582 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	2220      	movs	r2, #32
 80055ba:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80055cc:	2303      	movs	r3, #3
 80055ce:	e068      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 0304 	and.w	r3, r3, #4
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d050      	beq.n	8005680 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	69db      	ldr	r3, [r3, #28]
 80055e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ec:	d148      	bne.n	8005680 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80055f6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005600:	e853 3f00 	ldrex	r3, [r3]
 8005604:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005608:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800560c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005616:	637b      	str	r3, [r7, #52]	; 0x34
 8005618:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800561c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800561e:	e841 2300 	strex	r3, r2, [r1]
 8005622:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005626:	2b00      	cmp	r3, #0
 8005628:	d1e6      	bne.n	80055f8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	3308      	adds	r3, #8
 8005630:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005632:	697b      	ldr	r3, [r7, #20]
 8005634:	e853 3f00 	ldrex	r3, [r3]
 8005638:	613b      	str	r3, [r7, #16]
   return(result);
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f023 0301 	bic.w	r3, r3, #1
 8005640:	66bb      	str	r3, [r7, #104]	; 0x68
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	3308      	adds	r3, #8
 8005648:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800564a:	623a      	str	r2, [r7, #32]
 800564c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	69f9      	ldr	r1, [r7, #28]
 8005650:	6a3a      	ldr	r2, [r7, #32]
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	61bb      	str	r3, [r7, #24]
   return(result);
 8005658:	69bb      	ldr	r3, [r7, #24]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e5      	bne.n	800562a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2220      	movs	r2, #32
 8005662:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2220      	movs	r2, #32
 8005668:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2220      	movs	r2, #32
 8005670:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800567c:	2303      	movs	r3, #3
 800567e:	e010      	b.n	80056a2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	69da      	ldr	r2, [r3, #28]
 8005686:	68bb      	ldr	r3, [r7, #8]
 8005688:	4013      	ands	r3, r2
 800568a:	68ba      	ldr	r2, [r7, #8]
 800568c:	429a      	cmp	r2, r3
 800568e:	bf0c      	ite	eq
 8005690:	2301      	moveq	r3, #1
 8005692:	2300      	movne	r3, #0
 8005694:	b2db      	uxtb	r3, r3
 8005696:	461a      	mov	r2, r3
 8005698:	79fb      	ldrb	r3, [r7, #7]
 800569a:	429a      	cmp	r2, r3
 800569c:	f43f af48 	beq.w	8005530 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80056a0:	2300      	movs	r3, #0
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3770      	adds	r7, #112	; 0x70
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af04      	add	r7, sp, #16
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80056b2:	2100      	movs	r1, #0
 80056b4:	2000      	movs	r0, #0
 80056b6:	f004 fdf9 	bl	800a2ac <tcpip_init>

  /* IP addresses initialization with DHCP (IPv4) */
  ipaddr.addr = 0;
 80056ba:	4b23      	ldr	r3, [pc, #140]	; (8005748 <MX_LWIP_Init+0x9c>)
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]
  netmask.addr = 0;
 80056c0:	4b22      	ldr	r3, [pc, #136]	; (800574c <MX_LWIP_Init+0xa0>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
  gw.addr = 0;
 80056c6:	4b22      	ldr	r3, [pc, #136]	; (8005750 <MX_LWIP_Init+0xa4>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80056cc:	4b21      	ldr	r3, [pc, #132]	; (8005754 <MX_LWIP_Init+0xa8>)
 80056ce:	9302      	str	r3, [sp, #8]
 80056d0:	4b21      	ldr	r3, [pc, #132]	; (8005758 <MX_LWIP_Init+0xac>)
 80056d2:	9301      	str	r3, [sp, #4]
 80056d4:	2300      	movs	r3, #0
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	4b1d      	ldr	r3, [pc, #116]	; (8005750 <MX_LWIP_Init+0xa4>)
 80056da:	4a1c      	ldr	r2, [pc, #112]	; (800574c <MX_LWIP_Init+0xa0>)
 80056dc:	491a      	ldr	r1, [pc, #104]	; (8005748 <MX_LWIP_Init+0x9c>)
 80056de:	481f      	ldr	r0, [pc, #124]	; (800575c <MX_LWIP_Init+0xb0>)
 80056e0:	f005 fbae 	bl	800ae40 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80056e4:	481d      	ldr	r0, [pc, #116]	; (800575c <MX_LWIP_Init+0xb0>)
 80056e6:	f005 fd65 	bl	800b1b4 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80056ea:	4b1c      	ldr	r3, [pc, #112]	; (800575c <MX_LWIP_Init+0xb0>)
 80056ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80056f0:	089b      	lsrs	r3, r3, #2
 80056f2:	f003 0301 	and.w	r3, r3, #1
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <MX_LWIP_Init+0x58>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80056fc:	4817      	ldr	r0, [pc, #92]	; (800575c <MX_LWIP_Init+0xb0>)
 80056fe:	f005 fd69 	bl	800b1d4 <netif_set_up>
 8005702:	e002      	b.n	800570a <MX_LWIP_Init+0x5e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8005704:	4815      	ldr	r0, [pc, #84]	; (800575c <MX_LWIP_Init+0xb0>)
 8005706:	f005 fdd1 	bl	800b2ac <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800570a:	4915      	ldr	r1, [pc, #84]	; (8005760 <MX_LWIP_Init+0xb4>)
 800570c:	4813      	ldr	r0, [pc, #76]	; (800575c <MX_LWIP_Init+0xb0>)
 800570e:	f005 fe67 	bl	800b3e0 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005712:	2224      	movs	r2, #36	; 0x24
 8005714:	2100      	movs	r1, #0
 8005716:	4813      	ldr	r0, [pc, #76]	; (8005764 <MX_LWIP_Init+0xb8>)
 8005718:	f010 fff5 	bl	8016706 <memset>
  attributes.name = "EthLink";
 800571c:	4b11      	ldr	r3, [pc, #68]	; (8005764 <MX_LWIP_Init+0xb8>)
 800571e:	4a12      	ldr	r2, [pc, #72]	; (8005768 <MX_LWIP_Init+0xbc>)
 8005720:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005722:	4b10      	ldr	r3, [pc, #64]	; (8005764 <MX_LWIP_Init+0xb8>)
 8005724:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005728:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 800572a:	4b0e      	ldr	r3, [pc, #56]	; (8005764 <MX_LWIP_Init+0xb8>)
 800572c:	2210      	movs	r2, #16
 800572e:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8005730:	4a0c      	ldr	r2, [pc, #48]	; (8005764 <MX_LWIP_Init+0xb8>)
 8005732:	490a      	ldr	r1, [pc, #40]	; (800575c <MX_LWIP_Init+0xb0>)
 8005734:	480d      	ldr	r0, [pc, #52]	; (800576c <MX_LWIP_Init+0xc0>)
 8005736:	f000 fda1 	bl	800627c <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

  /* Start DHCP negotiation for a network interface (IPv4) */
  dhcp_start(&gnetif);
 800573a:	4808      	ldr	r0, [pc, #32]	; (800575c <MX_LWIP_Init+0xb0>)
 800573c:	f00c ffb8 	bl	80126b0 <dhcp_start>

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8005740:	bf00      	nop
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
 8005746:	bf00      	nop
 8005748:	200003ec 	.word	0x200003ec
 800574c:	200003f0 	.word	0x200003f0
 8005750:	200003f4 	.word	0x200003f4
 8005754:	0800a1e9 	.word	0x0800a1e9
 8005758:	08005c6d 	.word	0x08005c6d
 800575c:	200003b4 	.word	0x200003b4
 8005760:	08005771 	.word	0x08005771
 8005764:	200003f8 	.word	0x200003f8
 8005768:	080176bc 	.word	0x080176bc
 800576c:	08005f35 	.word	0x08005f35

08005770 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8005784:	b480      	push	{r7}
 8005786:	b087      	sub	sp, #28
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
 800578c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 8005796:	2320      	movs	r3, #32
 8005798:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800579a:	f3bf 8f4f 	dsb	sy
}
 800579e:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 80057a0:	e00b      	b.n	80057ba <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 80057a2:	4a0d      	ldr	r2, [pc, #52]	; (80057d8 <SCB_InvalidateDCache_by_Addr+0x54>)
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	693a      	ldr	r2, [r7, #16]
 80057ae:	4413      	add	r3, r2
 80057b0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	1ad3      	subs	r3, r2, r3
 80057b8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	dcf0      	bgt.n	80057a2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 80057c0:	f3bf 8f4f 	dsb	sy
}
 80057c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80057c6:	f3bf 8f6f 	isb	sy
}
 80057ca:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 80057cc:	bf00      	nop
 80057ce:	371c      	adds	r7, #28
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr
 80057d8:	e000ed00 	.word	0xe000ed00

080057dc <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 80057e4:	4b04      	ldr	r3, [pc, #16]	; (80057f8 <HAL_ETH_RxCpltCallback+0x1c>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4618      	mov	r0, r3
 80057ea:	f001 f865 	bl	80068b8 <osSemaphoreRelease>
}
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20004da8 	.word	0x20004da8

080057fc <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8005804:	4b04      	ldr	r3, [pc, #16]	; (8005818 <HAL_ETH_TxCpltCallback+0x1c>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4618      	mov	r0, r3
 800580a:	f001 f855 	bl	80068b8 <osSemaphoreRelease>
}
 800580e:	bf00      	nop
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20004dac 	.word	0x20004dac

0800581c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b082      	sub	sp, #8
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8005824:	6878      	ldr	r0, [r7, #4]
 8005826:	f7fc fed3 	bl	80025d0 <HAL_ETH_GetDMAError>
 800582a:	4603      	mov	r3, r0
 800582c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005830:	2b80      	cmp	r3, #128	; 0x80
 8005832:	d104      	bne.n	800583e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8005834:	4b04      	ldr	r3, [pc, #16]	; (8005848 <HAL_ETH_ErrorCallback+0x2c>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	4618      	mov	r0, r3
 800583a:	f001 f83d 	bl	80068b8 <osSemaphoreRelease>
  }
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20004da8 	.word	0x20004da8

0800584c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b0aa      	sub	sp, #168	; 0xa8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8005854:	2300      	movs	r3, #0
 8005856:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 800585a:	2300      	movs	r3, #0
 800585c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8005860:	2300      	movs	r3, #0
 8005862:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8005866:	f107 0310 	add.w	r3, r7, #16
 800586a:	2264      	movs	r2, #100	; 0x64
 800586c:	2100      	movs	r1, #0
 800586e:	4618      	mov	r0, r3
 8005870:	f010 ff49 	bl	8016706 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8005874:	4b85      	ldr	r3, [pc, #532]	; (8005a8c <low_level_init+0x240>)
 8005876:	4a86      	ldr	r2, [pc, #536]	; (8005a90 <low_level_init+0x244>)
 8005878:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800587a:	2300      	movs	r3, #0
 800587c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800587e:	2380      	movs	r3, #128	; 0x80
 8005880:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8005882:	23e1      	movs	r3, #225	; 0xe1
 8005884:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8005886:	2300      	movs	r3, #0
 8005888:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800588a:	2300      	movs	r3, #0
 800588c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800588e:	2300      	movs	r3, #0
 8005890:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8005892:	4a7e      	ldr	r2, [pc, #504]	; (8005a8c <low_level_init+0x240>)
 8005894:	f107 0308 	add.w	r3, r7, #8
 8005898:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800589a:	4b7c      	ldr	r3, [pc, #496]	; (8005a8c <low_level_init+0x240>)
 800589c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80058a0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80058a2:	4b7a      	ldr	r3, [pc, #488]	; (8005a8c <low_level_init+0x240>)
 80058a4:	4a7b      	ldr	r2, [pc, #492]	; (8005a94 <low_level_init+0x248>)
 80058a6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80058a8:	4b78      	ldr	r3, [pc, #480]	; (8005a8c <low_level_init+0x240>)
 80058aa:	4a7b      	ldr	r2, [pc, #492]	; (8005a98 <low_level_init+0x24c>)
 80058ac:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 80058ae:	4b77      	ldr	r3, [pc, #476]	; (8005a8c <low_level_init+0x240>)
 80058b0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80058b4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 80058b6:	4875      	ldr	r0, [pc, #468]	; (8005a8c <low_level_init+0x240>)
 80058b8:	f7fb ffec 	bl	8001894 <HAL_ETH_Init>
 80058bc:	4603      	mov	r3, r0
 80058be:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80058c2:	2238      	movs	r2, #56	; 0x38
 80058c4:	2100      	movs	r1, #0
 80058c6:	4875      	ldr	r0, [pc, #468]	; (8005a9c <low_level_init+0x250>)
 80058c8:	f010 ff1d 	bl	8016706 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80058cc:	4b73      	ldr	r3, [pc, #460]	; (8005a9c <low_level_init+0x250>)
 80058ce:	2221      	movs	r2, #33	; 0x21
 80058d0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80058d2:	4b72      	ldr	r3, [pc, #456]	; (8005a9c <low_level_init+0x250>)
 80058d4:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80058d8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80058da:	4b70      	ldr	r3, [pc, #448]	; (8005a9c <low_level_init+0x250>)
 80058dc:	2200      	movs	r2, #0
 80058de:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 80058e0:	486f      	ldr	r0, [pc, #444]	; (8005aa0 <low_level_init+0x254>)
 80058e2:	f005 f967 	bl	800abb4 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2206      	movs	r2, #6
 80058ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80058ee:	4b67      	ldr	r3, [pc, #412]	; (8005a8c <low_level_init+0x240>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	781a      	ldrb	r2, [r3, #0]
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80058fa:	4b64      	ldr	r3, [pc, #400]	; (8005a8c <low_level_init+0x240>)
 80058fc:	685b      	ldr	r3, [r3, #4]
 80058fe:	785a      	ldrb	r2, [r3, #1]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8005906:	4b61      	ldr	r3, [pc, #388]	; (8005a8c <low_level_init+0x240>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	789a      	ldrb	r2, [r3, #2]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8005912:	4b5e      	ldr	r3, [pc, #376]	; (8005a8c <low_level_init+0x240>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	78da      	ldrb	r2, [r3, #3]
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800591e:	4b5b      	ldr	r3, [pc, #364]	; (8005a8c <low_level_init+0x240>)
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	791a      	ldrb	r2, [r3, #4]
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800592a:	4b58      	ldr	r3, [pc, #352]	; (8005a8c <low_level_init+0x240>)
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	795a      	ldrb	r2, [r3, #5]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800593c:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005944:	f043 030a 	orr.w	r3, r3, #10
 8005948:	b2da      	uxtb	r2, r3
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005950:	2200      	movs	r2, #0
 8005952:	2101      	movs	r1, #1
 8005954:	2001      	movs	r0, #1
 8005956:	f000 fead 	bl	80066b4 <osSemaphoreNew>
 800595a:	4603      	mov	r3, r0
 800595c:	4a51      	ldr	r2, [pc, #324]	; (8005aa4 <low_level_init+0x258>)
 800595e:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005960:	2200      	movs	r2, #0
 8005962:	2101      	movs	r1, #1
 8005964:	2001      	movs	r0, #1
 8005966:	f000 fea5 	bl	80066b4 <osSemaphoreNew>
 800596a:	4603      	mov	r3, r0
 800596c:	4a4e      	ldr	r2, [pc, #312]	; (8005aa8 <low_level_init+0x25c>)
 800596e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005970:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005974:	2224      	movs	r2, #36	; 0x24
 8005976:	2100      	movs	r1, #0
 8005978:	4618      	mov	r0, r3
 800597a:	f010 fec4 	bl	8016706 <memset>
  attributes.name = "EthIf";
 800597e:	4b4b      	ldr	r3, [pc, #300]	; (8005aac <low_level_init+0x260>)
 8005980:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005982:	f44f 73af 	mov.w	r3, #350	; 0x15e
 8005986:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 800598a:	2330      	movs	r3, #48	; 0x30
 800598c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005990:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005994:	461a      	mov	r2, r3
 8005996:	6879      	ldr	r1, [r7, #4]
 8005998:	4845      	ldr	r0, [pc, #276]	; (8005ab0 <low_level_init+0x264>)
 800599a:	f000 fc6f 	bl	800627c <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800599e:	4945      	ldr	r1, [pc, #276]	; (8005ab4 <low_level_init+0x268>)
 80059a0:	4845      	ldr	r0, [pc, #276]	; (8005ab8 <low_level_init+0x26c>)
 80059a2:	f7fb fbde 	bl	8001162 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 80059a6:	4844      	ldr	r0, [pc, #272]	; (8005ab8 <low_level_init+0x26c>)
 80059a8:	f7fb fc0d 	bl	80011c6 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 80059ac:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d164      	bne.n	8005a7e <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 80059b4:	4840      	ldr	r0, [pc, #256]	; (8005ab8 <low_level_init+0x26c>)
 80059b6:	f7fb fcae 	bl	8001316 <LAN8742_GetLinkState>
 80059ba:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 80059be:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059c2:	2b01      	cmp	r3, #1
 80059c4:	dc06      	bgt.n	80059d4 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f005 fcda 	bl	800b380 <netif_set_link_down>
      netif_set_down(netif);
 80059cc:	6878      	ldr	r0, [r7, #4]
 80059ce:	f005 fc6d 	bl	800b2ac <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 80059d2:	e056      	b.n	8005a82 <low_level_init+0x236>
      switch (PHYLinkState)
 80059d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80059d8:	3b02      	subs	r3, #2
 80059da:	2b03      	cmp	r3, #3
 80059dc:	d82a      	bhi.n	8005a34 <low_level_init+0x1e8>
 80059de:	a201      	add	r2, pc, #4	; (adr r2, 80059e4 <low_level_init+0x198>)
 80059e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e4:	080059f5 	.word	0x080059f5
 80059e8:	08005a07 	.word	0x08005a07
 80059ec:	08005a17 	.word	0x08005a17
 80059f0:	08005a27 	.word	0x08005a27
        duplex = ETH_FULLDUPLEX_MODE;
 80059f4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80059f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80059fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a00:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005a04:	e01f      	b.n	8005a46 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005a06:	2300      	movs	r3, #0
 8005a08:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8005a0c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a10:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005a14:	e017      	b.n	8005a46 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005a16:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005a24:	e00f      	b.n	8005a46 <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 8005a26:	2300      	movs	r3, #0
 8005a28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005a32:	e008      	b.n	8005a46 <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 8005a34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a38:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8005a3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005a40:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005a44:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 8005a46:	f107 0310 	add.w	r3, r7, #16
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	480f      	ldr	r0, [pc, #60]	; (8005a8c <low_level_init+0x240>)
 8005a4e:	f7fc fc65 	bl	800231c <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005a52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005a56:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 8005a58:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005a5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005a5e:	f107 0310 	add.w	r3, r7, #16
 8005a62:	4619      	mov	r1, r3
 8005a64:	4809      	ldr	r0, [pc, #36]	; (8005a8c <low_level_init+0x240>)
 8005a66:	f7fc fd43 	bl	80024f0 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005a6a:	4808      	ldr	r0, [pc, #32]	; (8005a8c <low_level_init+0x240>)
 8005a6c:	f7fb ffee 	bl	8001a4c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f005 fbaf 	bl	800b1d4 <netif_set_up>
    netif_set_link_up(netif);
 8005a76:	6878      	ldr	r0, [r7, #4]
 8005a78:	f005 fc4a 	bl	800b310 <netif_set_link_up>
}
 8005a7c:	e001      	b.n	8005a82 <low_level_init+0x236>
    Error_Handler();
 8005a7e:	f7fb f811 	bl	8000aa4 <Error_Handler>
}
 8005a82:	bf00      	nop
 8005a84:	37a8      	adds	r7, #168	; 0xa8
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
 8005a8a:	bf00      	nop
 8005a8c:	20004db0 	.word	0x20004db0
 8005a90:	40028000 	.word	0x40028000
 8005a94:	20000138 	.word	0x20000138
 8005a98:	20000098 	.word	0x20000098
 8005a9c:	20004e60 	.word	0x20004e60
 8005aa0:	0801a59c 	.word	0x0801a59c
 8005aa4:	20004da8 	.word	0x20004da8
 8005aa8:	20004dac 	.word	0x20004dac
 8005aac:	080176c4 	.word	0x080176c4
 8005ab0:	08005c19 	.word	0x08005c19
 8005ab4:	2000000c 	.word	0x2000000c
 8005ab8:	20004e98 	.word	0x20004e98

08005abc <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b092      	sub	sp, #72	; 0x48
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
 8005ac4:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 8005aca:	2300      	movs	r3, #0
 8005acc:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005ad4:	f107 030c 	add.w	r3, r7, #12
 8005ad8:	2230      	movs	r2, #48	; 0x30
 8005ada:	2100      	movs	r1, #0
 8005adc:	4618      	mov	r0, r3
 8005ade:	f010 fe12 	bl	8016706 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005ae2:	f107 030c 	add.w	r3, r7, #12
 8005ae6:	2230      	movs	r2, #48	; 0x30
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4618      	mov	r0, r3
 8005aec:	f010 fe0b 	bl	8016706 <memset>

  for(q = p; q != NULL; q = q->next)
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	643b      	str	r3, [r7, #64]	; 0x40
 8005af4:	e045      	b.n	8005b82 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8005af6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d902      	bls.n	8005b02 <low_level_output+0x46>
      return ERR_IF;
 8005afc:	f06f 030b 	mvn.w	r3, #11
 8005b00:	e065      	b.n	8005bce <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8005b02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b04:	6859      	ldr	r1, [r3, #4]
 8005b06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b08:	4613      	mov	r3, r2
 8005b0a:	005b      	lsls	r3, r3, #1
 8005b0c:	4413      	add	r3, r2
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	3348      	adds	r3, #72	; 0x48
 8005b12:	443b      	add	r3, r7
 8005b14:	3b3c      	subs	r3, #60	; 0x3c
 8005b16:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 8005b18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b1a:	895b      	ldrh	r3, [r3, #10]
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b20:	4613      	mov	r3, r2
 8005b22:	005b      	lsls	r3, r3, #1
 8005b24:	4413      	add	r3, r2
 8005b26:	009b      	lsls	r3, r3, #2
 8005b28:	3348      	adds	r3, #72	; 0x48
 8005b2a:	443b      	add	r3, r7
 8005b2c:	3b38      	subs	r3, #56	; 0x38
 8005b2e:	6019      	str	r1, [r3, #0]

    if(i>0)
 8005b30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d011      	beq.n	8005b5a <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 8005b36:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b38:	1e5a      	subs	r2, r3, #1
 8005b3a:	f107 000c 	add.w	r0, r7, #12
 8005b3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005b40:	460b      	mov	r3, r1
 8005b42:	005b      	lsls	r3, r3, #1
 8005b44:	440b      	add	r3, r1
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	18c1      	adds	r1, r0, r3
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	3348      	adds	r3, #72	; 0x48
 8005b54:	443b      	add	r3, r7
 8005b56:	3b34      	subs	r3, #52	; 0x34
 8005b58:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 8005b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d109      	bne.n	8005b76 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005b62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b64:	4613      	mov	r3, r2
 8005b66:	005b      	lsls	r3, r3, #1
 8005b68:	4413      	add	r3, r2
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	3348      	adds	r3, #72	; 0x48
 8005b6e:	443b      	add	r3, r7
 8005b70:	3b34      	subs	r3, #52	; 0x34
 8005b72:	2200      	movs	r2, #0
 8005b74:	601a      	str	r2, [r3, #0]
    }

    i++;
 8005b76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b78:	3301      	adds	r3, #1
 8005b7a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	643b      	str	r3, [r7, #64]	; 0x40
 8005b82:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1b6      	bne.n	8005af6 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	891b      	ldrh	r3, [r3, #8]
 8005b8c:	461a      	mov	r2, r3
 8005b8e:	4b12      	ldr	r3, [pc, #72]	; (8005bd8 <low_level_output+0x11c>)
 8005b90:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005b92:	4a11      	ldr	r2, [pc, #68]	; (8005bd8 <low_level_output+0x11c>)
 8005b94:	f107 030c 	add.w	r3, r7, #12
 8005b98:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 8005b9a:	4a0f      	ldr	r2, [pc, #60]	; (8005bd8 <low_level_output+0x11c>)
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005ba0:	6838      	ldr	r0, [r7, #0]
 8005ba2:	f006 f871 	bl	800bc88 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8005ba6:	490c      	ldr	r1, [pc, #48]	; (8005bd8 <low_level_output+0x11c>)
 8005ba8:	480c      	ldr	r0, [pc, #48]	; (8005bdc <low_level_output+0x120>)
 8005baa:	f7fc f85d 	bl	8001c68 <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005bae:	bf00      	nop
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	; (8005be0 <low_level_output+0x124>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8005bb8:	4618      	mov	r0, r3
 8005bba:	f000 fe17 	bl	80067ec <osSemaphoreAcquire>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d1f5      	bne.n	8005bb0 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005bc4:	4805      	ldr	r0, [pc, #20]	; (8005bdc <low_level_output+0x120>)
 8005bc6:	f7fc f9e3 	bl	8001f90 <HAL_ETH_ReleaseTxPacket>

  return errval;
 8005bca:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3748      	adds	r7, #72	; 0x48
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	bf00      	nop
 8005bd8:	20004e60 	.word	0x20004e60
 8005bdc:	20004db0 	.word	0x20004db0
 8005be0:	20004dac 	.word	0x20004dac

08005be4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b084      	sub	sp, #16
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005bec:	2300      	movs	r3, #0
 8005bee:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005bf0:	4b07      	ldr	r3, [pc, #28]	; (8005c10 <low_level_input+0x2c>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d105      	bne.n	8005c04 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8005bf8:	f107 030c 	add.w	r3, r7, #12
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4805      	ldr	r0, [pc, #20]	; (8005c14 <low_level_input+0x30>)
 8005c00:	f7fc f88e 	bl	8001d20 <HAL_ETH_ReadData>
  }

  return p;
 8005c04:	68fb      	ldr	r3, [r7, #12]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3710      	adds	r7, #16
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	20004da4 	.word	0x20004da4
 8005c14:	20004db0 	.word	0x20004db0

08005c18 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005c20:	2300      	movs	r3, #0
 8005c22:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005c28:	4b0f      	ldr	r3, [pc, #60]	; (8005c68 <ethernetif_input+0x50>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f04f 31ff 	mov.w	r1, #4294967295
 8005c30:	4618      	mov	r0, r3
 8005c32:	f000 fddb 	bl	80067ec <osSemaphoreAcquire>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1f5      	bne.n	8005c28 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005c3c:	68b8      	ldr	r0, [r7, #8]
 8005c3e:	f7ff ffd1 	bl	8005be4 <low_level_input>
 8005c42:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 8005c4a:	68bb      	ldr	r3, [r7, #8]
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	4798      	blx	r3
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 8005c5a:	68f8      	ldr	r0, [r7, #12]
 8005c5c:	f005 ff6e 	bl	800bb3c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1ea      	bne.n	8005c3c <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 8005c66:	e7df      	b.n	8005c28 <ethernetif_input+0x10>
 8005c68:	20004da8 	.word	0x20004da8

08005c6c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b082      	sub	sp, #8
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d106      	bne.n	8005c88 <ethernetif_init+0x1c>
 8005c7a:	4b0e      	ldr	r3, [pc, #56]	; (8005cb4 <ethernetif_init+0x48>)
 8005c7c:	f240 12f5 	movw	r2, #501	; 0x1f5
 8005c80:	490d      	ldr	r1, [pc, #52]	; (8005cb8 <ethernetif_init+0x4c>)
 8005c82:	480e      	ldr	r0, [pc, #56]	; (8005cbc <ethernetif_init+0x50>)
 8005c84:	f010 fddc 	bl	8016840 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2273      	movs	r2, #115	; 0x73
 8005c8c:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2274      	movs	r2, #116	; 0x74
 8005c94:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a09      	ldr	r2, [pc, #36]	; (8005cc0 <ethernetif_init+0x54>)
 8005c9c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	4a08      	ldr	r2, [pc, #32]	; (8005cc4 <ethernetif_init+0x58>)
 8005ca2:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff fdd1 	bl	800584c <low_level_init>

  return ERR_OK;
 8005caa:	2300      	movs	r3, #0
}
 8005cac:	4618      	mov	r0, r3
 8005cae:	3708      	adds	r7, #8
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	bd80      	pop	{r7, pc}
 8005cb4:	080176cc 	.word	0x080176cc
 8005cb8:	080176e8 	.word	0x080176e8
 8005cbc:	080176f8 	.word	0x080176f8
 8005cc0:	0801457d 	.word	0x0801457d
 8005cc4:	08005abd 	.word	0x08005abd

08005cc8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b084      	sub	sp, #16
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005cd4:	68f9      	ldr	r1, [r7, #12]
 8005cd6:	4809      	ldr	r0, [pc, #36]	; (8005cfc <pbuf_free_custom+0x34>)
 8005cd8:	f005 f85c 	bl	800ad94 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005cdc:	4b08      	ldr	r3, [pc, #32]	; (8005d00 <pbuf_free_custom+0x38>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d107      	bne.n	8005cf4 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005ce4:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <pbuf_free_custom+0x38>)
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 8005cea:	4b06      	ldr	r3, [pc, #24]	; (8005d04 <pbuf_free_custom+0x3c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 fde2 	bl	80068b8 <osSemaphoreRelease>
  }
}
 8005cf4:	bf00      	nop
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}
 8005cfc:	0801a59c 	.word	0x0801a59c
 8005d00:	20004da4 	.word	0x20004da4
 8005d04:	20004da8 	.word	0x20004da8

08005d08 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005d0c:	f7fb fbb4 	bl	8001478 <HAL_GetTick>
 8005d10:	4603      	mov	r3, r0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	bd80      	pop	{r7, pc}
	...

08005d18 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08e      	sub	sp, #56	; 0x38
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d24:	2200      	movs	r2, #0
 8005d26:	601a      	str	r2, [r3, #0]
 8005d28:	605a      	str	r2, [r3, #4]
 8005d2a:	609a      	str	r2, [r3, #8]
 8005d2c:	60da      	str	r2, [r3, #12]
 8005d2e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a52      	ldr	r2, [pc, #328]	; (8005e80 <HAL_ETH_MspInit+0x168>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	f040 809e 	bne.w	8005e78 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005d3c:	4b51      	ldr	r3, [pc, #324]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005d3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d40:	4a50      	ldr	r2, [pc, #320]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005d42:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d46:	6313      	str	r3, [r2, #48]	; 0x30
 8005d48:	4b4e      	ldr	r3, [pc, #312]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d50:	623b      	str	r3, [r7, #32]
 8005d52:	6a3b      	ldr	r3, [r7, #32]
 8005d54:	4b4b      	ldr	r3, [pc, #300]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d58:	4a4a      	ldr	r2, [pc, #296]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005d5a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d5e:	6313      	str	r3, [r2, #48]	; 0x30
 8005d60:	4b48      	ldr	r3, [pc, #288]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005d68:	61fb      	str	r3, [r7, #28]
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	4b45      	ldr	r3, [pc, #276]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d70:	4a44      	ldr	r2, [pc, #272]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005d72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005d76:	6313      	str	r3, [r2, #48]	; 0x30
 8005d78:	4b42      	ldr	r3, [pc, #264]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d80:	61bb      	str	r3, [r7, #24]
 8005d82:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d84:	4b3f      	ldr	r3, [pc, #252]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d88:	4a3e      	ldr	r2, [pc, #248]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005d8a:	f043 0304 	orr.w	r3, r3, #4
 8005d8e:	6313      	str	r3, [r2, #48]	; 0x30
 8005d90:	4b3c      	ldr	r3, [pc, #240]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d94:	f003 0304 	and.w	r3, r3, #4
 8005d98:	617b      	str	r3, [r7, #20]
 8005d9a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d9c:	4b39      	ldr	r3, [pc, #228]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005da0:	4a38      	ldr	r2, [pc, #224]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005da2:	f043 0301 	orr.w	r3, r3, #1
 8005da6:	6313      	str	r3, [r2, #48]	; 0x30
 8005da8:	4b36      	ldr	r3, [pc, #216]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005daa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dac:	f003 0301 	and.w	r3, r3, #1
 8005db0:	613b      	str	r3, [r7, #16]
 8005db2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005db4:	4b33      	ldr	r3, [pc, #204]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db8:	4a32      	ldr	r2, [pc, #200]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005dba:	f043 0302 	orr.w	r3, r3, #2
 8005dbe:	6313      	str	r3, [r2, #48]	; 0x30
 8005dc0:	4b30      	ldr	r3, [pc, #192]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	60fb      	str	r3, [r7, #12]
 8005dca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005dcc:	4b2d      	ldr	r3, [pc, #180]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd0:	4a2c      	ldr	r2, [pc, #176]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005dd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dd6:	6313      	str	r3, [r2, #48]	; 0x30
 8005dd8:	4b2a      	ldr	r3, [pc, #168]	; (8005e84 <HAL_ETH_MspInit+0x16c>)
 8005dda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ddc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005de0:	60bb      	str	r3, [r7, #8]
 8005de2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005de4:	2332      	movs	r3, #50	; 0x32
 8005de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005de8:	2302      	movs	r3, #2
 8005dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dec:	2300      	movs	r3, #0
 8005dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005df0:	2303      	movs	r3, #3
 8005df2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005df4:	230b      	movs	r3, #11
 8005df6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	4822      	ldr	r0, [pc, #136]	; (8005e88 <HAL_ETH_MspInit+0x170>)
 8005e00:	f7fc fff6 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005e04:	2386      	movs	r3, #134	; 0x86
 8005e06:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e08:	2302      	movs	r3, #2
 8005e0a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e10:	2303      	movs	r3, #3
 8005e12:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e14:	230b      	movs	r3, #11
 8005e16:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e1c:	4619      	mov	r1, r3
 8005e1e:	481b      	ldr	r0, [pc, #108]	; (8005e8c <HAL_ETH_MspInit+0x174>)
 8005e20:	f7fc ffe6 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8005e24:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e2a:	2302      	movs	r3, #2
 8005e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e32:	2303      	movs	r3, #3
 8005e34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e36:	230b      	movs	r3, #11
 8005e38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e3e:	4619      	mov	r1, r3
 8005e40:	4813      	ldr	r0, [pc, #76]	; (8005e90 <HAL_ETH_MspInit+0x178>)
 8005e42:	f7fc ffd5 	bl	8002df0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8005e46:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8005e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e4c:	2302      	movs	r3, #2
 8005e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e50:	2300      	movs	r3, #0
 8005e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e54:	2303      	movs	r3, #3
 8005e56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005e58:	230b      	movs	r3, #11
 8005e5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e60:	4619      	mov	r1, r3
 8005e62:	480c      	ldr	r0, [pc, #48]	; (8005e94 <HAL_ETH_MspInit+0x17c>)
 8005e64:	f7fc ffc4 	bl	8002df0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005e68:	2200      	movs	r2, #0
 8005e6a:	2105      	movs	r1, #5
 8005e6c:	203d      	movs	r0, #61	; 0x3d
 8005e6e:	f7fb fce7 	bl	8001840 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005e72:	203d      	movs	r0, #61	; 0x3d
 8005e74:	f7fb fd00 	bl	8001878 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005e78:	bf00      	nop
 8005e7a:	3738      	adds	r7, #56	; 0x38
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	40028000 	.word	0x40028000
 8005e84:	40023800 	.word	0x40023800
 8005e88:	40020800 	.word	0x40020800
 8005e8c:	40020000 	.word	0x40020000
 8005e90:	40020400 	.word	0x40020400
 8005e94:	40021800 	.word	0x40021800

08005e98 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005e9c:	4802      	ldr	r0, [pc, #8]	; (8005ea8 <ETH_PHY_IO_Init+0x10>)
 8005e9e:	f7fc fb41 	bl	8002524 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	bd80      	pop	{r7, pc}
 8005ea8:	20004db0 	.word	0x20004db0

08005eac <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005eac:	b480      	push	{r7}
 8005eae:	af00      	add	r7, sp, #0
  return 0;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68ba      	ldr	r2, [r7, #8]
 8005ecc:	68f9      	ldr	r1, [r7, #12]
 8005ece:	4807      	ldr	r0, [pc, #28]	; (8005eec <ETH_PHY_IO_ReadReg+0x30>)
 8005ed0:	f7fc f990 	bl	80021f4 <HAL_ETH_ReadPHYRegister>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d002      	beq.n	8005ee0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8005eda:	f04f 33ff 	mov.w	r3, #4294967295
 8005ede:	e000      	b.n	8005ee2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005ee0:	2300      	movs	r3, #0
}
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	3710      	adds	r7, #16
 8005ee6:	46bd      	mov	sp, r7
 8005ee8:	bd80      	pop	{r7, pc}
 8005eea:	bf00      	nop
 8005eec:	20004db0 	.word	0x20004db0

08005ef0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	68ba      	ldr	r2, [r7, #8]
 8005f00:	68f9      	ldr	r1, [r7, #12]
 8005f02:	4807      	ldr	r0, [pc, #28]	; (8005f20 <ETH_PHY_IO_WriteReg+0x30>)
 8005f04:	f7fc f9c1 	bl	800228a <HAL_ETH_WritePHYRegister>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d002      	beq.n	8005f14 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8005f0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005f12:	e000      	b.n	8005f16 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8005f14:	2300      	movs	r3, #0
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3710      	adds	r7, #16
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20004db0 	.word	0x20004db0

08005f24 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005f28:	f7fb faa6 	bl	8001478 <HAL_GetTick>
 8005f2c:	4603      	mov	r3, r0
}
 8005f2e:	4618      	mov	r0, r3
 8005f30:	bd80      	pop	{r7, pc}
	...

08005f34 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	b0a0      	sub	sp, #128	; 0x80
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8005f3c:	f107 0308 	add.w	r3, r7, #8
 8005f40:	2264      	movs	r2, #100	; 0x64
 8005f42:	2100      	movs	r1, #0
 8005f44:	4618      	mov	r0, r3
 8005f46:	f010 fbde 	bl	8016706 <memset>
  int32_t PHYLinkState = 0;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005f52:	2300      	movs	r3, #0
 8005f54:	67bb      	str	r3, [r7, #120]	; 0x78
 8005f56:	2300      	movs	r3, #0
 8005f58:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005f5e:	483a      	ldr	r0, [pc, #232]	; (8006048 <ethernet_link_thread+0x114>)
 8005f60:	f7fb f9d9 	bl	8001316 <LAN8742_GetLinkState>
 8005f64:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005f66:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f68:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f6c:	089b      	lsrs	r3, r3, #2
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	b2db      	uxtb	r3, r3
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d00c      	beq.n	8005f92 <ethernet_link_thread+0x5e>
 8005f78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	dc09      	bgt.n	8005f92 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 8005f7e:	4833      	ldr	r0, [pc, #204]	; (800604c <ethernet_link_thread+0x118>)
 8005f80:	f7fb fdf2 	bl	8001b68 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005f84:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f86:	f005 f991 	bl	800b2ac <netif_set_down>
    netif_set_link_down(netif);
 8005f8a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005f8c:	f005 f9f8 	bl	800b380 <netif_set_link_down>
 8005f90:	e055      	b.n	800603e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005f94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005f98:	f003 0304 	and.w	r3, r3, #4
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d14e      	bne.n	800603e <ethernet_link_thread+0x10a>
 8005fa0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	dd4b      	ble.n	800603e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005fa6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005fa8:	3b02      	subs	r3, #2
 8005faa:	2b03      	cmp	r3, #3
 8005fac:	d82a      	bhi.n	8006004 <ethernet_link_thread+0xd0>
 8005fae:	a201      	add	r2, pc, #4	; (adr r2, 8005fb4 <ethernet_link_thread+0x80>)
 8005fb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb4:	08005fc5 	.word	0x08005fc5
 8005fb8:	08005fd7 	.word	0x08005fd7
 8005fbc:	08005fe7 	.word	0x08005fe7
 8005fc0:	08005ff7 	.word	0x08005ff7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005fc4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fc8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005fca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005fce:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005fd4:	e017      	b.n	8006006 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8005fda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005fde:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005fe0:	2301      	movs	r3, #1
 8005fe2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005fe4:	e00f      	b.n	8006006 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8005fe6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005fea:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005fec:	2300      	movs	r3, #0
 8005fee:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8005ff4:	e007      	b.n	8006006 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8005ffe:	2301      	movs	r3, #1
 8006000:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8006002:	e000      	b.n	8006006 <ethernet_link_thread+0xd2>
    default:
      break;
 8006004:	bf00      	nop
    }

    if(linkchanged)
 8006006:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006008:	2b00      	cmp	r3, #0
 800600a:	d018      	beq.n	800603e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800600c:	f107 0308 	add.w	r3, r7, #8
 8006010:	4619      	mov	r1, r3
 8006012:	480e      	ldr	r0, [pc, #56]	; (800604c <ethernet_link_thread+0x118>)
 8006014:	f7fc f982 	bl	800231c <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8006018:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800601a:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800601c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800601e:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8006020:	f107 0308 	add.w	r3, r7, #8
 8006024:	4619      	mov	r1, r3
 8006026:	4809      	ldr	r0, [pc, #36]	; (800604c <ethernet_link_thread+0x118>)
 8006028:	f7fc fa62 	bl	80024f0 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800602c:	4807      	ldr	r0, [pc, #28]	; (800604c <ethernet_link_thread+0x118>)
 800602e:	f7fb fcad 	bl	800198c <HAL_ETH_Start>
      netif_set_up(netif);
 8006032:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006034:	f005 f8ce 	bl	800b1d4 <netif_set_up>
      netif_set_link_up(netif);
 8006038:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800603a:	f005 f969 	bl	800b310 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800603e:	2064      	movs	r0, #100	; 0x64
 8006040:	f000 f9c2 	bl	80063c8 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8006044:	e78b      	b.n	8005f5e <ethernet_link_thread+0x2a>
 8006046:	bf00      	nop
 8006048:	20004e98 	.word	0x20004e98
 800604c:	20004db0 	.word	0x20004db0

08006050 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af02      	add	r7, sp, #8
 8006056:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8006058:	4812      	ldr	r0, [pc, #72]	; (80060a4 <HAL_ETH_RxAllocateCallback+0x54>)
 800605a:	f004 fe27 	bl	800acac <memp_malloc_pool>
 800605e:	60f8      	str	r0, [r7, #12]
  if (p)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d014      	beq.n	8006090 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f103 0220 	add.w	r2, r3, #32
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	4a0d      	ldr	r2, [pc, #52]	; (80060a8 <HAL_ETH_RxAllocateCallback+0x58>)
 8006074:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800607e:	9201      	str	r2, [sp, #4]
 8006080:	9300      	str	r3, [sp, #0]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2241      	movs	r2, #65	; 0x41
 8006086:	2100      	movs	r1, #0
 8006088:	2000      	movs	r0, #0
 800608a:	f005 fb9d 	bl	800b7c8 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800608e:	e005      	b.n	800609c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8006090:	4b06      	ldr	r3, [pc, #24]	; (80060ac <HAL_ETH_RxAllocateCallback+0x5c>)
 8006092:	2201      	movs	r2, #1
 8006094:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	601a      	str	r2, [r3, #0]
}
 800609c:	bf00      	nop
 800609e:	3710      	adds	r7, #16
 80060a0:	46bd      	mov	sp, r7
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	0801a59c 	.word	0x0801a59c
 80060a8:	08005cc9 	.word	0x08005cc9
 80060ac:	20004da4 	.word	0x20004da4

080060b0 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	b088      	sub	sp, #32
 80060b4:	af00      	add	r7, sp, #0
 80060b6:	60f8      	str	r0, [r7, #12]
 80060b8:	60b9      	str	r1, [r7, #8]
 80060ba:	607a      	str	r2, [r7, #4]
 80060bc:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80060c6:	2300      	movs	r3, #0
 80060c8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	3b20      	subs	r3, #32
 80060ce:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	2200      	movs	r2, #0
 80060d4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80060d6:	69fb      	ldr	r3, [r7, #28]
 80060d8:	2200      	movs	r2, #0
 80060da:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	887a      	ldrh	r2, [r7, #2]
 80060e0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80060e2:	69bb      	ldr	r3, [r7, #24]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d103      	bne.n	80060f2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80060ea:	69bb      	ldr	r3, [r7, #24]
 80060ec:	69fa      	ldr	r2, [r7, #28]
 80060ee:	601a      	str	r2, [r3, #0]
 80060f0:	e003      	b.n	80060fa <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	69fa      	ldr	r2, [r7, #28]
 80060f8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	69fa      	ldr	r2, [r7, #28]
 80060fe:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	61fb      	str	r3, [r7, #28]
 8006106:	e009      	b.n	800611c <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8006108:	69fb      	ldr	r3, [r7, #28]
 800610a:	891a      	ldrh	r2, [r3, #8]
 800610c:	887b      	ldrh	r3, [r7, #2]
 800610e:	4413      	add	r3, r2
 8006110:	b29a      	uxth	r2, r3
 8006112:	69fb      	ldr	r3, [r7, #28]
 8006114:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8006116:	69fb      	ldr	r3, [r7, #28]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	61fb      	str	r3, [r7, #28]
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1f2      	bne.n	8006108 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8006122:	887b      	ldrh	r3, [r7, #2]
 8006124:	4619      	mov	r1, r3
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f7ff fb2c 	bl	8005784 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800612c:	bf00      	nop
 800612e:	3720      	adds	r7, #32
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f005 fcfd 	bl	800bb3c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8006142:	bf00      	nop
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800614a:	b480      	push	{r7}
 800614c:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800614e:	bf00      	nop
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr

08006158 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800615e:	f3ef 8305 	mrs	r3, IPSR
 8006162:	60bb      	str	r3, [r7, #8]
  return(result);
 8006164:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10f      	bne.n	800618a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800616a:	f3ef 8310 	mrs	r3, PRIMASK
 800616e:	607b      	str	r3, [r7, #4]
  return(result);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d105      	bne.n	8006182 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006176:	f3ef 8311 	mrs	r3, BASEPRI
 800617a:	603b      	str	r3, [r7, #0]
  return(result);
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d007      	beq.n	8006192 <osKernelInitialize+0x3a>
 8006182:	4b0e      	ldr	r3, [pc, #56]	; (80061bc <osKernelInitialize+0x64>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b02      	cmp	r3, #2
 8006188:	d103      	bne.n	8006192 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800618a:	f06f 0305 	mvn.w	r3, #5
 800618e:	60fb      	str	r3, [r7, #12]
 8006190:	e00c      	b.n	80061ac <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006192:	4b0a      	ldr	r3, [pc, #40]	; (80061bc <osKernelInitialize+0x64>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d105      	bne.n	80061a6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800619a:	4b08      	ldr	r3, [pc, #32]	; (80061bc <osKernelInitialize+0x64>)
 800619c:	2201      	movs	r2, #1
 800619e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80061a0:	2300      	movs	r3, #0
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	e002      	b.n	80061ac <osKernelInitialize+0x54>
    } else {
      stat = osError;
 80061a6:	f04f 33ff 	mov.w	r3, #4294967295
 80061aa:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80061ac:	68fb      	ldr	r3, [r7, #12]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	20004eb8 	.word	0x20004eb8

080061c0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061c6:	f3ef 8305 	mrs	r3, IPSR
 80061ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80061cc:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10f      	bne.n	80061f2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061d2:	f3ef 8310 	mrs	r3, PRIMASK
 80061d6:	607b      	str	r3, [r7, #4]
  return(result);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d105      	bne.n	80061ea <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80061de:	f3ef 8311 	mrs	r3, BASEPRI
 80061e2:	603b      	str	r3, [r7, #0]
  return(result);
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d007      	beq.n	80061fa <osKernelStart+0x3a>
 80061ea:	4b0f      	ldr	r3, [pc, #60]	; (8006228 <osKernelStart+0x68>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	d103      	bne.n	80061fa <osKernelStart+0x3a>
    stat = osErrorISR;
 80061f2:	f06f 0305 	mvn.w	r3, #5
 80061f6:	60fb      	str	r3, [r7, #12]
 80061f8:	e010      	b.n	800621c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 80061fa:	4b0b      	ldr	r3, [pc, #44]	; (8006228 <osKernelStart+0x68>)
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b01      	cmp	r3, #1
 8006200:	d109      	bne.n	8006216 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006202:	f7ff ffa2 	bl	800614a <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006206:	4b08      	ldr	r3, [pc, #32]	; (8006228 <osKernelStart+0x68>)
 8006208:	2202      	movs	r2, #2
 800620a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800620c:	f002 f906 	bl	800841c <vTaskStartScheduler>
      stat = osOK;
 8006210:	2300      	movs	r3, #0
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	e002      	b.n	800621c <osKernelStart+0x5c>
    } else {
      stat = osError;
 8006216:	f04f 33ff 	mov.w	r3, #4294967295
 800621a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800621c:	68fb      	ldr	r3, [r7, #12]
}
 800621e:	4618      	mov	r0, r3
 8006220:	3710      	adds	r7, #16
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	20004eb8 	.word	0x20004eb8

0800622c <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006232:	f3ef 8305 	mrs	r3, IPSR
 8006236:	60bb      	str	r3, [r7, #8]
  return(result);
 8006238:	68bb      	ldr	r3, [r7, #8]
  TickType_t ticks;

  if (IS_IRQ()) {
 800623a:	2b00      	cmp	r3, #0
 800623c:	d10f      	bne.n	800625e <osKernelGetTickCount+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800623e:	f3ef 8310 	mrs	r3, PRIMASK
 8006242:	607b      	str	r3, [r7, #4]
  return(result);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d105      	bne.n	8006256 <osKernelGetTickCount+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800624a:	f3ef 8311 	mrs	r3, BASEPRI
 800624e:	603b      	str	r3, [r7, #0]
  return(result);
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d007      	beq.n	8006266 <osKernelGetTickCount+0x3a>
 8006256:	4b08      	ldr	r3, [pc, #32]	; (8006278 <osKernelGetTickCount+0x4c>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b02      	cmp	r3, #2
 800625c:	d103      	bne.n	8006266 <osKernelGetTickCount+0x3a>
    ticks = xTaskGetTickCountFromISR();
 800625e:	f002 fa0f 	bl	8008680 <xTaskGetTickCountFromISR>
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	e002      	b.n	800626c <osKernelGetTickCount+0x40>
  } else {
    ticks = xTaskGetTickCount();
 8006266:	f002 f9fb 	bl	8008660 <xTaskGetTickCount>
 800626a:	60f8      	str	r0, [r7, #12]
  }

  return (ticks);
 800626c:	68fb      	ldr	r3, [r7, #12]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20004eb8 	.word	0x20004eb8

0800627c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800627c:	b580      	push	{r7, lr}
 800627e:	b090      	sub	sp, #64	; 0x40
 8006280:	af04      	add	r7, sp, #16
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006288:	2300      	movs	r3, #0
 800628a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800628c:	f3ef 8305 	mrs	r3, IPSR
 8006290:	61fb      	str	r3, [r7, #28]
  return(result);
 8006292:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 8006294:	2b00      	cmp	r3, #0
 8006296:	f040 808f 	bne.w	80063b8 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800629a:	f3ef 8310 	mrs	r3, PRIMASK
 800629e:	61bb      	str	r3, [r7, #24]
  return(result);
 80062a0:	69bb      	ldr	r3, [r7, #24]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d105      	bne.n	80062b2 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80062a6:	f3ef 8311 	mrs	r3, BASEPRI
 80062aa:	617b      	str	r3, [r7, #20]
  return(result);
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <osThreadNew+0x3e>
 80062b2:	4b44      	ldr	r3, [pc, #272]	; (80063c4 <osThreadNew+0x148>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b02      	cmp	r3, #2
 80062b8:	d07e      	beq.n	80063b8 <osThreadNew+0x13c>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d07b      	beq.n	80063b8 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 80062c0:	2380      	movs	r3, #128	; 0x80
 80062c2:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 80062c4:	2318      	movs	r3, #24
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 80062c8:	2300      	movs	r3, #0
 80062ca:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 80062cc:	f04f 33ff 	mov.w	r3, #4294967295
 80062d0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d045      	beq.n	8006364 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <osThreadNew+0x6a>
        name = attr->name;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	699b      	ldr	r3, [r3, #24]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80062f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d008      	beq.n	800630c <osThreadNew+0x90>
 80062fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062fc:	2b38      	cmp	r3, #56	; 0x38
 80062fe:	d805      	bhi.n	800630c <osThreadNew+0x90>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	f003 0301 	and.w	r3, r3, #1
 8006308:	2b00      	cmp	r3, #0
 800630a:	d001      	beq.n	8006310 <osThreadNew+0x94>
        return (NULL);
 800630c:	2300      	movs	r3, #0
 800630e:	e054      	b.n	80063ba <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	695b      	ldr	r3, [r3, #20]
 8006314:	2b00      	cmp	r3, #0
 8006316:	d003      	beq.n	8006320 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	695b      	ldr	r3, [r3, #20]
 800631c:	089b      	lsrs	r3, r3, #2
 800631e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d00e      	beq.n	8006346 <osThreadNew+0xca>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	2bbb      	cmp	r3, #187	; 0xbb
 800632e:	d90a      	bls.n	8006346 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006334:	2b00      	cmp	r3, #0
 8006336:	d006      	beq.n	8006346 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	695b      	ldr	r3, [r3, #20]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d002      	beq.n	8006346 <osThreadNew+0xca>
        mem = 1;
 8006340:	2301      	movs	r3, #1
 8006342:	623b      	str	r3, [r7, #32]
 8006344:	e010      	b.n	8006368 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10c      	bne.n	8006368 <osThreadNew+0xec>
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d108      	bne.n	8006368 <osThreadNew+0xec>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	691b      	ldr	r3, [r3, #16]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d104      	bne.n	8006368 <osThreadNew+0xec>
          mem = 0;
 800635e:	2300      	movs	r3, #0
 8006360:	623b      	str	r3, [r7, #32]
 8006362:	e001      	b.n	8006368 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 8006364:	2300      	movs	r3, #0
 8006366:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006368:	6a3b      	ldr	r3, [r7, #32]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d110      	bne.n	8006390 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006376:	9202      	str	r2, [sp, #8]
 8006378:	9301      	str	r3, [sp, #4]
 800637a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800637c:	9300      	str	r3, [sp, #0]
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f001 fe53 	bl	8008030 <xTaskCreateStatic>
 800638a:	4603      	mov	r3, r0
 800638c:	613b      	str	r3, [r7, #16]
 800638e:	e013      	b.n	80063b8 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d110      	bne.n	80063b8 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006398:	b29a      	uxth	r2, r3
 800639a:	f107 0310 	add.w	r3, r7, #16
 800639e:	9301      	str	r3, [sp, #4]
 80063a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a2:	9300      	str	r3, [sp, #0]
 80063a4:	68bb      	ldr	r3, [r7, #8]
 80063a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80063a8:	68f8      	ldr	r0, [r7, #12]
 80063aa:	f001 fea4 	bl	80080f6 <xTaskCreate>
 80063ae:	4603      	mov	r3, r0
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d001      	beq.n	80063b8 <osThreadNew+0x13c>
          hTask = NULL;
 80063b4:	2300      	movs	r3, #0
 80063b6:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 80063b8:	693b      	ldr	r3, [r7, #16]
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3730      	adds	r7, #48	; 0x30
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
 80063c2:	bf00      	nop
 80063c4:	20004eb8 	.word	0x20004eb8

080063c8 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b086      	sub	sp, #24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80063d0:	f3ef 8305 	mrs	r3, IPSR
 80063d4:	613b      	str	r3, [r7, #16]
  return(result);
 80063d6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d10f      	bne.n	80063fc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063dc:	f3ef 8310 	mrs	r3, PRIMASK
 80063e0:	60fb      	str	r3, [r7, #12]
  return(result);
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d105      	bne.n	80063f4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80063e8:	f3ef 8311 	mrs	r3, BASEPRI
 80063ec:	60bb      	str	r3, [r7, #8]
  return(result);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d007      	beq.n	8006404 <osDelay+0x3c>
 80063f4:	4b0a      	ldr	r3, [pc, #40]	; (8006420 <osDelay+0x58>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2b02      	cmp	r3, #2
 80063fa:	d103      	bne.n	8006404 <osDelay+0x3c>
    stat = osErrorISR;
 80063fc:	f06f 0305 	mvn.w	r3, #5
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	e007      	b.n	8006414 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8006404:	2300      	movs	r3, #0
 8006406:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d002      	beq.n	8006414 <osDelay+0x4c>
      vTaskDelay(ticks);
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f001 ffce 	bl	80083b0 <vTaskDelay>
    }
  }

  return (stat);
 8006414:	697b      	ldr	r3, [r7, #20]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3718      	adds	r7, #24
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}
 800641e:	bf00      	nop
 8006420:	20004eb8 	.word	0x20004eb8

08006424 <osMutexNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8006424:	b580      	push	{r7, lr}
 8006426:	b08a      	sub	sp, #40	; 0x28
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800642c:	2300      	movs	r3, #0
 800642e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006430:	f3ef 8305 	mrs	r3, IPSR
 8006434:	613b      	str	r3, [r7, #16]
  return(result);
 8006436:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ()) {
 8006438:	2b00      	cmp	r3, #0
 800643a:	f040 8085 	bne.w	8006548 <osMutexNew+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800643e:	f3ef 8310 	mrs	r3, PRIMASK
 8006442:	60fb      	str	r3, [r7, #12]
  return(result);
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d105      	bne.n	8006456 <osMutexNew+0x32>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800644a:	f3ef 8311 	mrs	r3, BASEPRI
 800644e:	60bb      	str	r3, [r7, #8]
  return(result);
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <osMutexNew+0x3a>
 8006456:	4b3f      	ldr	r3, [pc, #252]	; (8006554 <osMutexNew+0x130>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b02      	cmp	r3, #2
 800645c:	d074      	beq.n	8006548 <osMutexNew+0x124>
    if (attr != NULL) {
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d003      	beq.n	800646c <osMutexNew+0x48>
      type = attr->attr_bits;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	623b      	str	r3, [r7, #32]
 800646a:	e001      	b.n	8006470 <osMutexNew+0x4c>
    } else {
      type = 0U;
 800646c:	2300      	movs	r3, #0
 800646e:	623b      	str	r3, [r7, #32]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d002      	beq.n	8006480 <osMutexNew+0x5c>
      rmtx = 1U;
 800647a:	2301      	movs	r3, #1
 800647c:	61fb      	str	r3, [r7, #28]
 800647e:	e001      	b.n	8006484 <osMutexNew+0x60>
    } else {
      rmtx = 0U;
 8006480:	2300      	movs	r3, #0
 8006482:	61fb      	str	r3, [r7, #28]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8006484:	6a3b      	ldr	r3, [r7, #32]
 8006486:	f003 0308 	and.w	r3, r3, #8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d15c      	bne.n	8006548 <osMutexNew+0x124>
      mem = -1;
 800648e:	f04f 33ff 	mov.w	r3, #4294967295
 8006492:	61bb      	str	r3, [r7, #24]

      if (attr != NULL) {
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d015      	beq.n	80064c6 <osMutexNew+0xa2>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	689b      	ldr	r3, [r3, #8]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d006      	beq.n	80064b0 <osMutexNew+0x8c>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	2b4f      	cmp	r3, #79	; 0x4f
 80064a8:	d902      	bls.n	80064b0 <osMutexNew+0x8c>
          mem = 1;
 80064aa:	2301      	movs	r3, #1
 80064ac:	61bb      	str	r3, [r7, #24]
 80064ae:	e00c      	b.n	80064ca <osMutexNew+0xa6>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	689b      	ldr	r3, [r3, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d108      	bne.n	80064ca <osMutexNew+0xa6>
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68db      	ldr	r3, [r3, #12]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d104      	bne.n	80064ca <osMutexNew+0xa6>
            mem = 0;
 80064c0:	2300      	movs	r3, #0
 80064c2:	61bb      	str	r3, [r7, #24]
 80064c4:	e001      	b.n	80064ca <osMutexNew+0xa6>
          }
        }
      }
      else {
        mem = 0;
 80064c6:	2300      	movs	r3, #0
 80064c8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80064ca:	69bb      	ldr	r3, [r7, #24]
 80064cc:	2b01      	cmp	r3, #1
 80064ce:	d112      	bne.n	80064f6 <osMutexNew+0xd2>
        if (rmtx != 0U) {
 80064d0:	69fb      	ldr	r3, [r7, #28]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d007      	beq.n	80064e6 <osMutexNew+0xc2>
          hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	4619      	mov	r1, r3
 80064dc:	2004      	movs	r0, #4
 80064de:	f000 fe1a 	bl	8007116 <xQueueCreateMutexStatic>
 80064e2:	6278      	str	r0, [r7, #36]	; 0x24
 80064e4:	e016      	b.n	8006514 <osMutexNew+0xf0>
        }
        else {
          hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	4619      	mov	r1, r3
 80064ec:	2001      	movs	r0, #1
 80064ee:	f000 fe12 	bl	8007116 <xQueueCreateMutexStatic>
 80064f2:	6278      	str	r0, [r7, #36]	; 0x24
 80064f4:	e00e      	b.n	8006514 <osMutexNew+0xf0>
        }
      }
      else {
        if (mem == 0) {
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d10b      	bne.n	8006514 <osMutexNew+0xf0>
          if (rmtx != 0U) {
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d004      	beq.n	800650c <osMutexNew+0xe8>
            hMutex = xSemaphoreCreateRecursiveMutex ();
 8006502:	2004      	movs	r0, #4
 8006504:	f000 fdef 	bl	80070e6 <xQueueCreateMutex>
 8006508:	6278      	str	r0, [r7, #36]	; 0x24
 800650a:	e003      	b.n	8006514 <osMutexNew+0xf0>
          } else {
            hMutex = xSemaphoreCreateMutex ();
 800650c:	2001      	movs	r0, #1
 800650e:	f000 fdea 	bl	80070e6 <xQueueCreateMutex>
 8006512:	6278      	str	r0, [r7, #36]	; 0x24
          }
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8006514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006516:	2b00      	cmp	r3, #0
 8006518:	d00c      	beq.n	8006534 <osMutexNew+0x110>
        if (attr != NULL) {
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d003      	beq.n	8006528 <osMutexNew+0x104>
          name = attr->name;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	617b      	str	r3, [r7, #20]
 8006526:	e001      	b.n	800652c <osMutexNew+0x108>
        } else {
          name = NULL;
 8006528:	2300      	movs	r3, #0
 800652a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hMutex, name);
 800652c:	6979      	ldr	r1, [r7, #20]
 800652e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006530:	f001 fcf6 	bl	8007f20 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8006534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006536:	2b00      	cmp	r3, #0
 8006538:	d006      	beq.n	8006548 <osMutexNew+0x124>
 800653a:	69fb      	ldr	r3, [r7, #28]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <osMutexNew+0x124>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	f043 0301 	orr.w	r3, r3, #1
 8006546:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8006548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800654a:	4618      	mov	r0, r3
 800654c:	3728      	adds	r7, #40	; 0x28
 800654e:	46bd      	mov	sp, r7
 8006550:	bd80      	pop	{r7, pc}
 8006552:	bf00      	nop
 8006554:	20004eb8 	.word	0x20004eb8

08006558 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8006558:	b580      	push	{r7, lr}
 800655a:	b088      	sub	sp, #32
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f023 0301 	bic.w	r3, r3, #1
 8006568:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f003 0301 	and.w	r3, r3, #1
 8006570:	617b      	str	r3, [r7, #20]

  stat = osOK;
 8006572:	2300      	movs	r3, #0
 8006574:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006576:	f3ef 8305 	mrs	r3, IPSR
 800657a:	613b      	str	r3, [r7, #16]
  return(result);
 800657c:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 800657e:	2b00      	cmp	r3, #0
 8006580:	d10f      	bne.n	80065a2 <osMutexAcquire+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006582:	f3ef 8310 	mrs	r3, PRIMASK
 8006586:	60fb      	str	r3, [r7, #12]
  return(result);
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	2b00      	cmp	r3, #0
 800658c:	d105      	bne.n	800659a <osMutexAcquire+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800658e:	f3ef 8311 	mrs	r3, BASEPRI
 8006592:	60bb      	str	r3, [r7, #8]
  return(result);
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d007      	beq.n	80065aa <osMutexAcquire+0x52>
 800659a:	4b1d      	ldr	r3, [pc, #116]	; (8006610 <osMutexAcquire+0xb8>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	2b02      	cmp	r3, #2
 80065a0:	d103      	bne.n	80065aa <osMutexAcquire+0x52>
    stat = osErrorISR;
 80065a2:	f06f 0305 	mvn.w	r3, #5
 80065a6:	61fb      	str	r3, [r7, #28]
 80065a8:	e02c      	b.n	8006604 <osMutexAcquire+0xac>
  }
  else if (hMutex == NULL) {
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d103      	bne.n	80065b8 <osMutexAcquire+0x60>
    stat = osErrorParameter;
 80065b0:	f06f 0303 	mvn.w	r3, #3
 80065b4:	61fb      	str	r3, [r7, #28]
 80065b6:	e025      	b.n	8006604 <osMutexAcquire+0xac>
  }
  else {
    if (rmtx != 0U) {
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d011      	beq.n	80065e2 <osMutexAcquire+0x8a>
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80065be:	6839      	ldr	r1, [r7, #0]
 80065c0:	69b8      	ldr	r0, [r7, #24]
 80065c2:	f000 fdf9 	bl	80071b8 <xQueueTakeMutexRecursive>
 80065c6:	4603      	mov	r3, r0
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d01b      	beq.n	8006604 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d003      	beq.n	80065da <osMutexAcquire+0x82>
          stat = osErrorTimeout;
 80065d2:	f06f 0301 	mvn.w	r3, #1
 80065d6:	61fb      	str	r3, [r7, #28]
 80065d8:	e014      	b.n	8006604 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80065da:	f06f 0302 	mvn.w	r3, #2
 80065de:	61fb      	str	r3, [r7, #28]
 80065e0:	e010      	b.n	8006604 <osMutexAcquire+0xac>
        }
      }
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80065e2:	6839      	ldr	r1, [r7, #0]
 80065e4:	69b8      	ldr	r0, [r7, #24]
 80065e6:	f001 f9b3 	bl	8007950 <xQueueSemaphoreTake>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b01      	cmp	r3, #1
 80065ee:	d009      	beq.n	8006604 <osMutexAcquire+0xac>
        if (timeout != 0U) {
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <osMutexAcquire+0xa6>
          stat = osErrorTimeout;
 80065f6:	f06f 0301 	mvn.w	r3, #1
 80065fa:	61fb      	str	r3, [r7, #28]
 80065fc:	e002      	b.n	8006604 <osMutexAcquire+0xac>
        } else {
          stat = osErrorResource;
 80065fe:	f06f 0302 	mvn.w	r3, #2
 8006602:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006604:	69fb      	ldr	r3, [r7, #28]
}
 8006606:	4618      	mov	r0, r3
 8006608:	3720      	adds	r7, #32
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20004eb8 	.word	0x20004eb8

08006614 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f023 0301 	bic.w	r3, r3, #1
 8006622:	61bb      	str	r3, [r7, #24]

  rmtx = (uint32_t)mutex_id & 1U;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	f003 0301 	and.w	r3, r3, #1
 800662a:	617b      	str	r3, [r7, #20]

  stat = osOK;
 800662c:	2300      	movs	r3, #0
 800662e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006630:	f3ef 8305 	mrs	r3, IPSR
 8006634:	613b      	str	r3, [r7, #16]
  return(result);
 8006636:	693b      	ldr	r3, [r7, #16]

  if (IS_IRQ()) {
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10f      	bne.n	800665c <osMutexRelease+0x48>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800663c:	f3ef 8310 	mrs	r3, PRIMASK
 8006640:	60fb      	str	r3, [r7, #12]
  return(result);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d105      	bne.n	8006654 <osMutexRelease+0x40>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006648:	f3ef 8311 	mrs	r3, BASEPRI
 800664c:	60bb      	str	r3, [r7, #8]
  return(result);
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d007      	beq.n	8006664 <osMutexRelease+0x50>
 8006654:	4b16      	ldr	r3, [pc, #88]	; (80066b0 <osMutexRelease+0x9c>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	2b02      	cmp	r3, #2
 800665a:	d103      	bne.n	8006664 <osMutexRelease+0x50>
    stat = osErrorISR;
 800665c:	f06f 0305 	mvn.w	r3, #5
 8006660:	61fb      	str	r3, [r7, #28]
 8006662:	e01f      	b.n	80066a4 <osMutexRelease+0x90>
  }
  else if (hMutex == NULL) {
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d103      	bne.n	8006672 <osMutexRelease+0x5e>
    stat = osErrorParameter;
 800666a:	f06f 0303 	mvn.w	r3, #3
 800666e:	61fb      	str	r3, [r7, #28]
 8006670:	e018      	b.n	80066a4 <osMutexRelease+0x90>
  }
  else {
    if (rmtx != 0U) {
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d009      	beq.n	800668c <osMutexRelease+0x78>
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8006678:	69b8      	ldr	r0, [r7, #24]
 800667a:	f000 fd67 	bl	800714c <xQueueGiveMutexRecursive>
 800667e:	4603      	mov	r3, r0
 8006680:	2b01      	cmp	r3, #1
 8006682:	d00f      	beq.n	80066a4 <osMutexRelease+0x90>
        stat = osErrorResource;
 8006684:	f06f 0302 	mvn.w	r3, #2
 8006688:	61fb      	str	r3, [r7, #28]
 800668a:	e00b      	b.n	80066a4 <osMutexRelease+0x90>
      }
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800668c:	2300      	movs	r3, #0
 800668e:	2200      	movs	r2, #0
 8006690:	2100      	movs	r1, #0
 8006692:	69b8      	ldr	r0, [r7, #24]
 8006694:	f000 fe3a 	bl	800730c <xQueueGenericSend>
 8006698:	4603      	mov	r3, r0
 800669a:	2b01      	cmp	r3, #1
 800669c:	d002      	beq.n	80066a4 <osMutexRelease+0x90>
        stat = osErrorResource;
 800669e:	f06f 0302 	mvn.w	r3, #2
 80066a2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return (stat);
 80066a4:	69fb      	ldr	r3, [r7, #28]
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3720      	adds	r7, #32
 80066aa:	46bd      	mov	sp, r7
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20004eb8 	.word	0x20004eb8

080066b4 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b08c      	sub	sp, #48	; 0x30
 80066b8:	af02      	add	r7, sp, #8
 80066ba:	60f8      	str	r0, [r7, #12]
 80066bc:	60b9      	str	r1, [r7, #8]
 80066be:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80066c0:	2300      	movs	r3, #0
 80066c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80066c4:	f3ef 8305 	mrs	r3, IPSR
 80066c8:	61bb      	str	r3, [r7, #24]
  return(result);
 80066ca:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f040 8086 	bne.w	80067de <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066d2:	f3ef 8310 	mrs	r3, PRIMASK
 80066d6:	617b      	str	r3, [r7, #20]
  return(result);
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d105      	bne.n	80066ea <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80066de:	f3ef 8311 	mrs	r3, BASEPRI
 80066e2:	613b      	str	r3, [r7, #16]
  return(result);
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <osSemaphoreNew+0x3e>
 80066ea:	4b3f      	ldr	r3, [pc, #252]	; (80067e8 <osSemaphoreNew+0x134>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2b02      	cmp	r3, #2
 80066f0:	d075      	beq.n	80067de <osSemaphoreNew+0x12a>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d072      	beq.n	80067de <osSemaphoreNew+0x12a>
 80066f8:	68ba      	ldr	r2, [r7, #8]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	429a      	cmp	r2, r3
 80066fe:	d86e      	bhi.n	80067de <osSemaphoreNew+0x12a>
    mem = -1;
 8006700:	f04f 33ff 	mov.w	r3, #4294967295
 8006704:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2b00      	cmp	r3, #0
 800670a:	d015      	beq.n	8006738 <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d006      	beq.n	8006722 <osSemaphoreNew+0x6e>
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	2b4f      	cmp	r3, #79	; 0x4f
 800671a:	d902      	bls.n	8006722 <osSemaphoreNew+0x6e>
        mem = 1;
 800671c:	2301      	movs	r3, #1
 800671e:	623b      	str	r3, [r7, #32]
 8006720:	e00c      	b.n	800673c <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	2b00      	cmp	r3, #0
 8006728:	d108      	bne.n	800673c <osSemaphoreNew+0x88>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	2b00      	cmp	r3, #0
 8006730:	d104      	bne.n	800673c <osSemaphoreNew+0x88>
          mem = 0;
 8006732:	2300      	movs	r3, #0
 8006734:	623b      	str	r3, [r7, #32]
 8006736:	e001      	b.n	800673c <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 8006738:	2300      	movs	r3, #0
 800673a:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800673c:	6a3b      	ldr	r3, [r7, #32]
 800673e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006742:	d04c      	beq.n	80067de <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	2b01      	cmp	r3, #1
 8006748:	d128      	bne.n	800679c <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800674a:	6a3b      	ldr	r3, [r7, #32]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d10a      	bne.n	8006766 <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	2203      	movs	r2, #3
 8006756:	9200      	str	r2, [sp, #0]
 8006758:	2200      	movs	r2, #0
 800675a:	2100      	movs	r1, #0
 800675c:	2001      	movs	r0, #1
 800675e:	f000 fbc1 	bl	8006ee4 <xQueueGenericCreateStatic>
 8006762:	6278      	str	r0, [r7, #36]	; 0x24
 8006764:	e005      	b.n	8006772 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 8006766:	2203      	movs	r2, #3
 8006768:	2100      	movs	r1, #0
 800676a:	2001      	movs	r0, #1
 800676c:	f000 fc3c 	bl	8006fe8 <xQueueGenericCreate>
 8006770:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	2b00      	cmp	r3, #0
 8006776:	d022      	beq.n	80067be <osSemaphoreNew+0x10a>
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d01f      	beq.n	80067be <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800677e:	2300      	movs	r3, #0
 8006780:	2200      	movs	r2, #0
 8006782:	2100      	movs	r1, #0
 8006784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006786:	f000 fdc1 	bl	800730c <xQueueGenericSend>
 800678a:	4603      	mov	r3, r0
 800678c:	2b01      	cmp	r3, #1
 800678e:	d016      	beq.n	80067be <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 8006790:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006792:	f001 fa77 	bl	8007c84 <vQueueDelete>
            hSemaphore = NULL;
 8006796:	2300      	movs	r3, #0
 8006798:	627b      	str	r3, [r7, #36]	; 0x24
 800679a:	e010      	b.n	80067be <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800679c:	6a3b      	ldr	r3, [r7, #32]
 800679e:	2b01      	cmp	r3, #1
 80067a0:	d108      	bne.n	80067b4 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	461a      	mov	r2, r3
 80067a8:	68b9      	ldr	r1, [r7, #8]
 80067aa:	68f8      	ldr	r0, [r7, #12]
 80067ac:	f000 fd3c 	bl	8007228 <xQueueCreateCountingSemaphoreStatic>
 80067b0:	6278      	str	r0, [r7, #36]	; 0x24
 80067b2:	e004      	b.n	80067be <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80067b4:	68b9      	ldr	r1, [r7, #8]
 80067b6:	68f8      	ldr	r0, [r7, #12]
 80067b8:	f000 fd71 	bl	800729e <xQueueCreateCountingSemaphore>
 80067bc:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d00c      	beq.n	80067de <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <osSemaphoreNew+0x11e>
          name = attr->name;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	61fb      	str	r3, [r7, #28]
 80067d0:	e001      	b.n	80067d6 <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 80067d2:	2300      	movs	r3, #0
 80067d4:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80067d6:	69f9      	ldr	r1, [r7, #28]
 80067d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80067da:	f001 fba1 	bl	8007f20 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80067de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3728      	adds	r7, #40	; 0x28
 80067e4:	46bd      	mov	sp, r7
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20004eb8 	.word	0x20004eb8

080067ec <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80067fa:	2300      	movs	r3, #0
 80067fc:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80067fe:	69bb      	ldr	r3, [r7, #24]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d103      	bne.n	800680c <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8006804:	f06f 0303 	mvn.w	r3, #3
 8006808:	61fb      	str	r3, [r7, #28]
 800680a:	e04b      	b.n	80068a4 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800680c:	f3ef 8305 	mrs	r3, IPSR
 8006810:	617b      	str	r3, [r7, #20]
  return(result);
 8006812:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8006814:	2b00      	cmp	r3, #0
 8006816:	d10f      	bne.n	8006838 <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006818:	f3ef 8310 	mrs	r3, PRIMASK
 800681c:	613b      	str	r3, [r7, #16]
  return(result);
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d105      	bne.n	8006830 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006824:	f3ef 8311 	mrs	r3, BASEPRI
 8006828:	60fb      	str	r3, [r7, #12]
  return(result);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d026      	beq.n	800687e <osSemaphoreAcquire+0x92>
 8006830:	4b1f      	ldr	r3, [pc, #124]	; (80068b0 <osSemaphoreAcquire+0xc4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2b02      	cmp	r3, #2
 8006836:	d122      	bne.n	800687e <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800683e:	f06f 0303 	mvn.w	r3, #3
 8006842:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006844:	e02d      	b.n	80068a2 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 8006846:	2300      	movs	r3, #0
 8006848:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800684a:	f107 0308 	add.w	r3, r7, #8
 800684e:	461a      	mov	r2, r3
 8006850:	2100      	movs	r1, #0
 8006852:	69b8      	ldr	r0, [r7, #24]
 8006854:	f001 f990 	bl	8007b78 <xQueueReceiveFromISR>
 8006858:	4603      	mov	r3, r0
 800685a:	2b01      	cmp	r3, #1
 800685c:	d003      	beq.n	8006866 <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800685e:	f06f 0302 	mvn.w	r3, #2
 8006862:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 8006864:	e01d      	b.n	80068a2 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d01a      	beq.n	80068a2 <osSemaphoreAcquire+0xb6>
 800686c:	4b11      	ldr	r3, [pc, #68]	; (80068b4 <osSemaphoreAcquire+0xc8>)
 800686e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	f3bf 8f4f 	dsb	sy
 8006878:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800687c:	e011      	b.n	80068a2 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800687e:	6839      	ldr	r1, [r7, #0]
 8006880:	69b8      	ldr	r0, [r7, #24]
 8006882:	f001 f865 	bl	8007950 <xQueueSemaphoreTake>
 8006886:	4603      	mov	r3, r0
 8006888:	2b01      	cmp	r3, #1
 800688a:	d00b      	beq.n	80068a4 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d003      	beq.n	800689a <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 8006892:	f06f 0301 	mvn.w	r3, #1
 8006896:	61fb      	str	r3, [r7, #28]
 8006898:	e004      	b.n	80068a4 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800689a:	f06f 0302 	mvn.w	r3, #2
 800689e:	61fb      	str	r3, [r7, #28]
 80068a0:	e000      	b.n	80068a4 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 80068a2:	bf00      	nop
      }
    }
  }

  return (stat);
 80068a4:	69fb      	ldr	r3, [r7, #28]
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3720      	adds	r7, #32
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	20004eb8 	.word	0x20004eb8
 80068b4:	e000ed04 	.word	0xe000ed04

080068b8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b088      	sub	sp, #32
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80068c4:	2300      	movs	r3, #0
 80068c6:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d103      	bne.n	80068d6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80068ce:	f06f 0303 	mvn.w	r3, #3
 80068d2:	61fb      	str	r3, [r7, #28]
 80068d4:	e03e      	b.n	8006954 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80068d6:	f3ef 8305 	mrs	r3, IPSR
 80068da:	617b      	str	r3, [r7, #20]
  return(result);
 80068dc:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10f      	bne.n	8006902 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80068e2:	f3ef 8310 	mrs	r3, PRIMASK
 80068e6:	613b      	str	r3, [r7, #16]
  return(result);
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d105      	bne.n	80068fa <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80068ee:	f3ef 8311 	mrs	r3, BASEPRI
 80068f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d01e      	beq.n	8006938 <osSemaphoreRelease+0x80>
 80068fa:	4b19      	ldr	r3, [pc, #100]	; (8006960 <osSemaphoreRelease+0xa8>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d11a      	bne.n	8006938 <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 8006902:	2300      	movs	r3, #0
 8006904:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006906:	f107 0308 	add.w	r3, r7, #8
 800690a:	4619      	mov	r1, r3
 800690c:	69b8      	ldr	r0, [r7, #24]
 800690e:	f000 fea3 	bl	8007658 <xQueueGiveFromISR>
 8006912:	4603      	mov	r3, r0
 8006914:	2b01      	cmp	r3, #1
 8006916:	d003      	beq.n	8006920 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 8006918:	f06f 0302 	mvn.w	r3, #2
 800691c:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800691e:	e018      	b.n	8006952 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	2b00      	cmp	r3, #0
 8006924:	d015      	beq.n	8006952 <osSemaphoreRelease+0x9a>
 8006926:	4b0f      	ldr	r3, [pc, #60]	; (8006964 <osSemaphoreRelease+0xac>)
 8006928:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800692c:	601a      	str	r2, [r3, #0]
 800692e:	f3bf 8f4f 	dsb	sy
 8006932:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006936:	e00c      	b.n	8006952 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8006938:	2300      	movs	r3, #0
 800693a:	2200      	movs	r2, #0
 800693c:	2100      	movs	r1, #0
 800693e:	69b8      	ldr	r0, [r7, #24]
 8006940:	f000 fce4 	bl	800730c <xQueueGenericSend>
 8006944:	4603      	mov	r3, r0
 8006946:	2b01      	cmp	r3, #1
 8006948:	d004      	beq.n	8006954 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800694a:	f06f 0302 	mvn.w	r3, #2
 800694e:	61fb      	str	r3, [r7, #28]
 8006950:	e000      	b.n	8006954 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8006952:	bf00      	nop
    }
  }

  return (stat);
 8006954:	69fb      	ldr	r3, [r7, #28]
}
 8006956:	4618      	mov	r0, r3
 8006958:	3720      	adds	r7, #32
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	20004eb8 	.word	0x20004eb8
 8006964:	e000ed04 	.word	0xe000ed04

08006968 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8006968:	b580      	push	{r7, lr}
 800696a:	b08c      	sub	sp, #48	; 0x30
 800696c:	af02      	add	r7, sp, #8
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8006974:	2300      	movs	r3, #0
 8006976:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006978:	f3ef 8305 	mrs	r3, IPSR
 800697c:	61bb      	str	r3, [r7, #24]
  return(result);
 800697e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8006980:	2b00      	cmp	r3, #0
 8006982:	d16f      	bne.n	8006a64 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006984:	f3ef 8310 	mrs	r3, PRIMASK
 8006988:	617b      	str	r3, [r7, #20]
  return(result);
 800698a:	697b      	ldr	r3, [r7, #20]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d105      	bne.n	800699c <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006990:	f3ef 8311 	mrs	r3, BASEPRI
 8006994:	613b      	str	r3, [r7, #16]
  return(result);
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d003      	beq.n	80069a4 <osMessageQueueNew+0x3c>
 800699c:	4b34      	ldr	r3, [pc, #208]	; (8006a70 <osMessageQueueNew+0x108>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d05f      	beq.n	8006a64 <osMessageQueueNew+0xfc>
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d05c      	beq.n	8006a64 <osMessageQueueNew+0xfc>
 80069aa:	68bb      	ldr	r3, [r7, #8]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d059      	beq.n	8006a64 <osMessageQueueNew+0xfc>
    mem = -1;
 80069b0:	f04f 33ff 	mov.w	r3, #4294967295
 80069b4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d029      	beq.n	8006a10 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d012      	beq.n	80069ea <osMessageQueueNew+0x82>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	68db      	ldr	r3, [r3, #12]
 80069c8:	2b4f      	cmp	r3, #79	; 0x4f
 80069ca:	d90e      	bls.n	80069ea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d00a      	beq.n	80069ea <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	695a      	ldr	r2, [r3, #20]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	68b9      	ldr	r1, [r7, #8]
 80069dc:	fb01 f303 	mul.w	r3, r1, r3
 80069e0:	429a      	cmp	r2, r3
 80069e2:	d302      	bcc.n	80069ea <osMessageQueueNew+0x82>
        mem = 1;
 80069e4:	2301      	movs	r3, #1
 80069e6:	623b      	str	r3, [r7, #32]
 80069e8:	e014      	b.n	8006a14 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	689b      	ldr	r3, [r3, #8]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d110      	bne.n	8006a14 <osMessageQueueNew+0xac>
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d10c      	bne.n	8006a14 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d108      	bne.n	8006a14 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	695b      	ldr	r3, [r3, #20]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d104      	bne.n	8006a14 <osMessageQueueNew+0xac>
          mem = 0;
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	623b      	str	r3, [r7, #32]
 8006a0e:	e001      	b.n	8006a14 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8006a10:	2300      	movs	r3, #0
 8006a12:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8006a14:	6a3b      	ldr	r3, [r7, #32]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d10b      	bne.n	8006a32 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	691a      	ldr	r2, [r3, #16]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	689b      	ldr	r3, [r3, #8]
 8006a22:	2100      	movs	r1, #0
 8006a24:	9100      	str	r1, [sp, #0]
 8006a26:	68b9      	ldr	r1, [r7, #8]
 8006a28:	68f8      	ldr	r0, [r7, #12]
 8006a2a:	f000 fa5b 	bl	8006ee4 <xQueueGenericCreateStatic>
 8006a2e:	6278      	str	r0, [r7, #36]	; 0x24
 8006a30:	e008      	b.n	8006a44 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8006a32:	6a3b      	ldr	r3, [r7, #32]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d105      	bne.n	8006a44 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8006a38:	2200      	movs	r2, #0
 8006a3a:	68b9      	ldr	r1, [r7, #8]
 8006a3c:	68f8      	ldr	r0, [r7, #12]
 8006a3e:	f000 fad3 	bl	8006fe8 <xQueueGenericCreate>
 8006a42:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d00c      	beq.n	8006a64 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d003      	beq.n	8006a58 <osMessageQueueNew+0xf0>
        name = attr->name;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	61fb      	str	r3, [r7, #28]
 8006a56:	e001      	b.n	8006a5c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8006a58:	2300      	movs	r3, #0
 8006a5a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8006a5c:	69f9      	ldr	r1, [r7, #28]
 8006a5e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006a60:	f001 fa5e 	bl	8007f20 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3728      	adds	r7, #40	; 0x28
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	20004eb8 	.word	0x20004eb8

08006a74 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b08a      	sub	sp, #40	; 0x28
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	60f8      	str	r0, [r7, #12]
 8006a7c:	60b9      	str	r1, [r7, #8]
 8006a7e:	603b      	str	r3, [r7, #0]
 8006a80:	4613      	mov	r3, r2
 8006a82:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006a88:	2300      	movs	r3, #0
 8006a8a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006a8c:	f3ef 8305 	mrs	r3, IPSR
 8006a90:	61fb      	str	r3, [r7, #28]
  return(result);
 8006a92:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d10f      	bne.n	8006ab8 <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a98:	f3ef 8310 	mrs	r3, PRIMASK
 8006a9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d105      	bne.n	8006ab0 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006aa4:	f3ef 8311 	mrs	r3, BASEPRI
 8006aa8:	617b      	str	r3, [r7, #20]
  return(result);
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d02c      	beq.n	8006b0a <osMessageQueuePut+0x96>
 8006ab0:	4b28      	ldr	r3, [pc, #160]	; (8006b54 <osMessageQueuePut+0xe0>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d128      	bne.n	8006b0a <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ab8:	6a3b      	ldr	r3, [r7, #32]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d005      	beq.n	8006aca <osMessageQueuePut+0x56>
 8006abe:	68bb      	ldr	r3, [r7, #8]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d002      	beq.n	8006aca <osMessageQueuePut+0x56>
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d003      	beq.n	8006ad2 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 8006aca:	f06f 0303 	mvn.w	r3, #3
 8006ace:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006ad0:	e039      	b.n	8006b46 <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006ad6:	f107 0210 	add.w	r2, r7, #16
 8006ada:	2300      	movs	r3, #0
 8006adc:	68b9      	ldr	r1, [r7, #8]
 8006ade:	6a38      	ldr	r0, [r7, #32]
 8006ae0:	f000 fd1a 	bl	8007518 <xQueueGenericSendFromISR>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d003      	beq.n	8006af2 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 8006aea:	f06f 0302 	mvn.w	r3, #2
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006af0:	e029      	b.n	8006b46 <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d026      	beq.n	8006b46 <osMessageQueuePut+0xd2>
 8006af8:	4b17      	ldr	r3, [pc, #92]	; (8006b58 <osMessageQueuePut+0xe4>)
 8006afa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006afe:	601a      	str	r2, [r3, #0]
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b08:	e01d      	b.n	8006b46 <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006b0a:	6a3b      	ldr	r3, [r7, #32]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d002      	beq.n	8006b16 <osMessageQueuePut+0xa2>
 8006b10:	68bb      	ldr	r3, [r7, #8]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d103      	bne.n	8006b1e <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 8006b16:	f06f 0303 	mvn.w	r3, #3
 8006b1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1c:	e014      	b.n	8006b48 <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006b1e:	2300      	movs	r3, #0
 8006b20:	683a      	ldr	r2, [r7, #0]
 8006b22:	68b9      	ldr	r1, [r7, #8]
 8006b24:	6a38      	ldr	r0, [r7, #32]
 8006b26:	f000 fbf1 	bl	800730c <xQueueGenericSend>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d00b      	beq.n	8006b48 <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d003      	beq.n	8006b3e <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 8006b36:	f06f 0301 	mvn.w	r3, #1
 8006b3a:	627b      	str	r3, [r7, #36]	; 0x24
 8006b3c:	e004      	b.n	8006b48 <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 8006b3e:	f06f 0302 	mvn.w	r3, #2
 8006b42:	627b      	str	r3, [r7, #36]	; 0x24
 8006b44:	e000      	b.n	8006b48 <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b46:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3728      	adds	r7, #40	; 0x28
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}
 8006b52:	bf00      	nop
 8006b54:	20004eb8 	.word	0x20004eb8
 8006b58:	e000ed04 	.word	0xe000ed04

08006b5c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b08a      	sub	sp, #40	; 0x28
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	60f8      	str	r0, [r7, #12]
 8006b64:	60b9      	str	r1, [r7, #8]
 8006b66:	607a      	str	r2, [r7, #4]
 8006b68:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006b6e:	2300      	movs	r3, #0
 8006b70:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006b72:	f3ef 8305 	mrs	r3, IPSR
 8006b76:	61fb      	str	r3, [r7, #28]
  return(result);
 8006b78:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d10f      	bne.n	8006b9e <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b7e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b82:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b84:	69bb      	ldr	r3, [r7, #24]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d105      	bne.n	8006b96 <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8006b8a:	f3ef 8311 	mrs	r3, BASEPRI
 8006b8e:	617b      	str	r3, [r7, #20]
  return(result);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d02c      	beq.n	8006bf0 <osMessageQueueGet+0x94>
 8006b96:	4b28      	ldr	r3, [pc, #160]	; (8006c38 <osMessageQueueGet+0xdc>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	2b02      	cmp	r3, #2
 8006b9c:	d128      	bne.n	8006bf0 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006b9e:	6a3b      	ldr	r3, [r7, #32]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d005      	beq.n	8006bb0 <osMessageQueueGet+0x54>
 8006ba4:	68bb      	ldr	r3, [r7, #8]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d002      	beq.n	8006bb0 <osMessageQueueGet+0x54>
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d003      	beq.n	8006bb8 <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 8006bb0:	f06f 0303 	mvn.w	r3, #3
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006bb6:	e038      	b.n	8006c2a <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 8006bb8:	2300      	movs	r3, #0
 8006bba:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006bbc:	f107 0310 	add.w	r3, r7, #16
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	68b9      	ldr	r1, [r7, #8]
 8006bc4:	6a38      	ldr	r0, [r7, #32]
 8006bc6:	f000 ffd7 	bl	8007b78 <xQueueReceiveFromISR>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d003      	beq.n	8006bd8 <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 8006bd0:	f06f 0302 	mvn.w	r3, #2
 8006bd4:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006bd6:	e028      	b.n	8006c2a <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d025      	beq.n	8006c2a <osMessageQueueGet+0xce>
 8006bde:	4b17      	ldr	r3, [pc, #92]	; (8006c3c <osMessageQueueGet+0xe0>)
 8006be0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006be4:	601a      	str	r2, [r3, #0]
 8006be6:	f3bf 8f4f 	dsb	sy
 8006bea:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006bee:	e01c      	b.n	8006c2a <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006bf0:	6a3b      	ldr	r3, [r7, #32]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d002      	beq.n	8006bfc <osMessageQueueGet+0xa0>
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d103      	bne.n	8006c04 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 8006bfc:	f06f 0303 	mvn.w	r3, #3
 8006c00:	627b      	str	r3, [r7, #36]	; 0x24
 8006c02:	e013      	b.n	8006c2c <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	68b9      	ldr	r1, [r7, #8]
 8006c08:	6a38      	ldr	r0, [r7, #32]
 8006c0a:	f000 fdbb 	bl	8007784 <xQueueReceive>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d00b      	beq.n	8006c2c <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 8006c14:	683b      	ldr	r3, [r7, #0]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d003      	beq.n	8006c22 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 8006c1a:	f06f 0301 	mvn.w	r3, #1
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c20:	e004      	b.n	8006c2c <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 8006c22:	f06f 0302 	mvn.w	r3, #2
 8006c26:	627b      	str	r3, [r7, #36]	; 0x24
 8006c28:	e000      	b.n	8006c2c <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006c2a:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3728      	adds	r7, #40	; 0x28
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}
 8006c36:	bf00      	nop
 8006c38:	20004eb8 	.word	0x20004eb8
 8006c3c:	e000ed04 	.word	0xe000ed04

08006c40 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006c40:	b480      	push	{r7}
 8006c42:	b085      	sub	sp, #20
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	4a07      	ldr	r2, [pc, #28]	; (8006c6c <vApplicationGetIdleTaskMemory+0x2c>)
 8006c50:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8006c52:	68bb      	ldr	r3, [r7, #8]
 8006c54:	4a06      	ldr	r2, [pc, #24]	; (8006c70 <vApplicationGetIdleTaskMemory+0x30>)
 8006c56:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	2280      	movs	r2, #128	; 0x80
 8006c5c:	601a      	str	r2, [r3, #0]
}
 8006c5e:	bf00      	nop
 8006c60:	3714      	adds	r7, #20
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr
 8006c6a:	bf00      	nop
 8006c6c:	20004ebc 	.word	0x20004ebc
 8006c70:	20004f78 	.word	0x20004f78

08006c74 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006c74:	b480      	push	{r7}
 8006c76:	b085      	sub	sp, #20
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	4a07      	ldr	r2, [pc, #28]	; (8006ca0 <vApplicationGetTimerTaskMemory+0x2c>)
 8006c84:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	4a06      	ldr	r2, [pc, #24]	; (8006ca4 <vApplicationGetTimerTaskMemory+0x30>)
 8006c8a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c92:	601a      	str	r2, [r3, #0]
}
 8006c94:	bf00      	nop
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	20005178 	.word	0x20005178
 8006ca4:	20005234 	.word	0x20005234

08006ca8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b083      	sub	sp, #12
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f103 0208 	add.w	r2, r3, #8
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	f103 0208 	add.w	r2, r3, #8
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f103 0208 	add.w	r2, r3, #8
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b083      	sub	sp, #12
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006cf6:	bf00      	nop
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr

08006d02 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d02:	b480      	push	{r7}
 8006d04:	b085      	sub	sp, #20
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	6078      	str	r0, [r7, #4]
 8006d0a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	683b      	ldr	r3, [r7, #0]
 8006d1e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	689b      	ldr	r3, [r3, #8]
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	683a      	ldr	r2, [r7, #0]
 8006d2c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	687a      	ldr	r2, [r7, #4]
 8006d32:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	1c5a      	adds	r2, r3, #1
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	601a      	str	r2, [r3, #0]
}
 8006d3e:	bf00      	nop
 8006d40:	3714      	adds	r7, #20
 8006d42:	46bd      	mov	sp, r7
 8006d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d48:	4770      	bx	lr

08006d4a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006d4a:	b480      	push	{r7}
 8006d4c:	b085      	sub	sp, #20
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	6078      	str	r0, [r7, #4]
 8006d52:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d103      	bne.n	8006d6a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	691b      	ldr	r3, [r3, #16]
 8006d66:	60fb      	str	r3, [r7, #12]
 8006d68:	e00c      	b.n	8006d84 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	3308      	adds	r3, #8
 8006d6e:	60fb      	str	r3, [r7, #12]
 8006d70:	e002      	b.n	8006d78 <vListInsert+0x2e>
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	60fb      	str	r3, [r7, #12]
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68ba      	ldr	r2, [r7, #8]
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d2f6      	bcs.n	8006d72 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	685a      	ldr	r2, [r3, #4]
 8006d88:	683b      	ldr	r3, [r7, #0]
 8006d8a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	683a      	ldr	r2, [r7, #0]
 8006d92:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	683a      	ldr	r2, [r7, #0]
 8006d9e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	1c5a      	adds	r2, r3, #1
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	601a      	str	r2, [r3, #0]
}
 8006db0:	bf00      	nop
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006dbc:	b480      	push	{r7}
 8006dbe:	b085      	sub	sp, #20
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	691b      	ldr	r3, [r3, #16]
 8006dc8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	685b      	ldr	r3, [r3, #4]
 8006dce:	687a      	ldr	r2, [r7, #4]
 8006dd0:	6892      	ldr	r2, [r2, #8]
 8006dd2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	6852      	ldr	r2, [r2, #4]
 8006ddc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d103      	bne.n	8006df0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	689a      	ldr	r2, [r3, #8]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	1e5a      	subs	r2, r3, #1
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3714      	adds	r7, #20
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0e:	4770      	bx	lr

08006e10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d10c      	bne.n	8006e3e <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	b672      	cpsid	i
 8006e2a:	f383 8811 	msr	BASEPRI, r3
 8006e2e:	f3bf 8f6f 	isb	sy
 8006e32:	f3bf 8f4f 	dsb	sy
 8006e36:	b662      	cpsie	i
 8006e38:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006e3a:	bf00      	nop
 8006e3c:	e7fe      	b.n	8006e3c <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8006e3e:	f002 fdcd 	bl	80099dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681a      	ldr	r2, [r3, #0]
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e4a:	68f9      	ldr	r1, [r7, #12]
 8006e4c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e4e:	fb01 f303 	mul.w	r3, r1, r3
 8006e52:	441a      	add	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681a      	ldr	r2, [r3, #0]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006e6e:	3b01      	subs	r3, #1
 8006e70:	68f9      	ldr	r1, [r7, #12]
 8006e72:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006e74:	fb01 f303 	mul.w	r3, r1, r3
 8006e78:	441a      	add	r2, r3
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	22ff      	movs	r2, #255	; 0xff
 8006e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	22ff      	movs	r2, #255	; 0xff
 8006e8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d114      	bne.n	8006ebe <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d01a      	beq.n	8006ed2 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	3310      	adds	r3, #16
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f001 fd75 	bl	8008990 <xTaskRemoveFromEventList>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d012      	beq.n	8006ed2 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006eac:	4b0c      	ldr	r3, [pc, #48]	; (8006ee0 <xQueueGenericReset+0xd0>)
 8006eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb2:	601a      	str	r2, [r3, #0]
 8006eb4:	f3bf 8f4f 	dsb	sy
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	e009      	b.n	8006ed2 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	3310      	adds	r3, #16
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	f7ff fef0 	bl	8006ca8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3324      	adds	r3, #36	; 0x24
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f7ff feeb 	bl	8006ca8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006ed2:	f002 fdb7 	bl	8009a44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006ed6:	2301      	movs	r3, #1
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3710      	adds	r7, #16
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	e000ed04 	.word	0xe000ed04

08006ee4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b08e      	sub	sp, #56	; 0x38
 8006ee8:	af02      	add	r7, sp, #8
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
 8006ef0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d10c      	bne.n	8006f12 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8006ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006efc:	b672      	cpsid	i
 8006efe:	f383 8811 	msr	BASEPRI, r3
 8006f02:	f3bf 8f6f 	isb	sy
 8006f06:	f3bf 8f4f 	dsb	sy
 8006f0a:	b662      	cpsie	i
 8006f0c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006f0e:	bf00      	nop
 8006f10:	e7fe      	b.n	8006f10 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10c      	bne.n	8006f32 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8006f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f1c:	b672      	cpsid	i
 8006f1e:	f383 8811 	msr	BASEPRI, r3
 8006f22:	f3bf 8f6f 	isb	sy
 8006f26:	f3bf 8f4f 	dsb	sy
 8006f2a:	b662      	cpsie	i
 8006f2c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006f2e:	bf00      	nop
 8006f30:	e7fe      	b.n	8006f30 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d002      	beq.n	8006f3e <xQueueGenericCreateStatic+0x5a>
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d001      	beq.n	8006f42 <xQueueGenericCreateStatic+0x5e>
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e000      	b.n	8006f44 <xQueueGenericCreateStatic+0x60>
 8006f42:	2300      	movs	r3, #0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10c      	bne.n	8006f62 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4c:	b672      	cpsid	i
 8006f4e:	f383 8811 	msr	BASEPRI, r3
 8006f52:	f3bf 8f6f 	isb	sy
 8006f56:	f3bf 8f4f 	dsb	sy
 8006f5a:	b662      	cpsie	i
 8006f5c:	623b      	str	r3, [r7, #32]
}
 8006f5e:	bf00      	nop
 8006f60:	e7fe      	b.n	8006f60 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d102      	bne.n	8006f6e <xQueueGenericCreateStatic+0x8a>
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d101      	bne.n	8006f72 <xQueueGenericCreateStatic+0x8e>
 8006f6e:	2301      	movs	r3, #1
 8006f70:	e000      	b.n	8006f74 <xQueueGenericCreateStatic+0x90>
 8006f72:	2300      	movs	r3, #0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d10c      	bne.n	8006f92 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 8006f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f7c:	b672      	cpsid	i
 8006f7e:	f383 8811 	msr	BASEPRI, r3
 8006f82:	f3bf 8f6f 	isb	sy
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	b662      	cpsie	i
 8006f8c:	61fb      	str	r3, [r7, #28]
}
 8006f8e:	bf00      	nop
 8006f90:	e7fe      	b.n	8006f90 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006f92:	2350      	movs	r3, #80	; 0x50
 8006f94:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	2b50      	cmp	r3, #80	; 0x50
 8006f9a:	d00c      	beq.n	8006fb6 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa0:	b672      	cpsid	i
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	b662      	cpsie	i
 8006fb0:	61bb      	str	r3, [r7, #24]
}
 8006fb2:	bf00      	nop
 8006fb4:	e7fe      	b.n	8006fb4 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006fb6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00d      	beq.n	8006fde <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006fca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006fce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fd0:	9300      	str	r3, [sp, #0]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	68b9      	ldr	r1, [r7, #8]
 8006fd8:	68f8      	ldr	r0, [r7, #12]
 8006fda:	f000 f847 	bl	800706c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3730      	adds	r7, #48	; 0x30
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08a      	sub	sp, #40	; 0x28
 8006fec:	af02      	add	r7, sp, #8
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	4613      	mov	r3, r2
 8006ff4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d10c      	bne.n	8007016 <xQueueGenericCreate+0x2e>
	__asm volatile
 8006ffc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007000:	b672      	cpsid	i
 8007002:	f383 8811 	msr	BASEPRI, r3
 8007006:	f3bf 8f6f 	isb	sy
 800700a:	f3bf 8f4f 	dsb	sy
 800700e:	b662      	cpsie	i
 8007010:	613b      	str	r3, [r7, #16]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d102      	bne.n	8007022 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800701c:	2300      	movs	r3, #0
 800701e:	61fb      	str	r3, [r7, #28]
 8007020:	e004      	b.n	800702c <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	fb02 f303 	mul.w	r3, r2, r3
 800702a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	3350      	adds	r3, #80	; 0x50
 8007030:	4618      	mov	r0, r3
 8007032:	f002 fdff 	bl	8009c34 <pvPortMalloc>
 8007036:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d011      	beq.n	8007062 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800703e:	69bb      	ldr	r3, [r7, #24]
 8007040:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	3350      	adds	r3, #80	; 0x50
 8007046:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007048:	69bb      	ldr	r3, [r7, #24]
 800704a:	2200      	movs	r2, #0
 800704c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007050:	79fa      	ldrb	r2, [r7, #7]
 8007052:	69bb      	ldr	r3, [r7, #24]
 8007054:	9300      	str	r3, [sp, #0]
 8007056:	4613      	mov	r3, r2
 8007058:	697a      	ldr	r2, [r7, #20]
 800705a:	68b9      	ldr	r1, [r7, #8]
 800705c:	68f8      	ldr	r0, [r7, #12]
 800705e:	f000 f805 	bl	800706c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007062:	69bb      	ldr	r3, [r7, #24]
	}
 8007064:	4618      	mov	r0, r3
 8007066:	3720      	adds	r7, #32
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b084      	sub	sp, #16
 8007070:	af00      	add	r7, sp, #0
 8007072:	60f8      	str	r0, [r7, #12]
 8007074:	60b9      	str	r1, [r7, #8]
 8007076:	607a      	str	r2, [r7, #4]
 8007078:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d103      	bne.n	8007088 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007080:	69bb      	ldr	r3, [r7, #24]
 8007082:	69ba      	ldr	r2, [r7, #24]
 8007084:	601a      	str	r2, [r3, #0]
 8007086:	e002      	b.n	800708e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	687a      	ldr	r2, [r7, #4]
 800708c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800708e:	69bb      	ldr	r3, [r7, #24]
 8007090:	68fa      	ldr	r2, [r7, #12]
 8007092:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007094:	69bb      	ldr	r3, [r7, #24]
 8007096:	68ba      	ldr	r2, [r7, #8]
 8007098:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800709a:	2101      	movs	r1, #1
 800709c:	69b8      	ldr	r0, [r7, #24]
 800709e:	f7ff feb7 	bl	8006e10 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80070a2:	69bb      	ldr	r3, [r7, #24]
 80070a4:	78fa      	ldrb	r2, [r7, #3]
 80070a6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80070aa:	bf00      	nop
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b082      	sub	sp, #8
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00e      	beq.n	80070de <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2200      	movs	r2, #0
 80070c4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2200      	movs	r2, #0
 80070ca:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2200      	movs	r2, #0
 80070d0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80070d2:	2300      	movs	r3, #0
 80070d4:	2200      	movs	r2, #0
 80070d6:	2100      	movs	r1, #0
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f000 f917 	bl	800730c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80070de:	bf00      	nop
 80070e0:	3708      	adds	r7, #8
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b086      	sub	sp, #24
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	4603      	mov	r3, r0
 80070ee:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80070f0:	2301      	movs	r3, #1
 80070f2:	617b      	str	r3, [r7, #20]
 80070f4:	2300      	movs	r3, #0
 80070f6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80070f8:	79fb      	ldrb	r3, [r7, #7]
 80070fa:	461a      	mov	r2, r3
 80070fc:	6939      	ldr	r1, [r7, #16]
 80070fe:	6978      	ldr	r0, [r7, #20]
 8007100:	f7ff ff72 	bl	8006fe8 <xQueueGenericCreate>
 8007104:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f7ff ffd3 	bl	80070b2 <prvInitialiseMutex>

		return xNewQueue;
 800710c:	68fb      	ldr	r3, [r7, #12]
	}
 800710e:	4618      	mov	r0, r3
 8007110:	3718      	adds	r7, #24
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}

08007116 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8007116:	b580      	push	{r7, lr}
 8007118:	b088      	sub	sp, #32
 800711a:	af02      	add	r7, sp, #8
 800711c:	4603      	mov	r3, r0
 800711e:	6039      	str	r1, [r7, #0]
 8007120:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007122:	2301      	movs	r3, #1
 8007124:	617b      	str	r3, [r7, #20]
 8007126:	2300      	movs	r3, #0
 8007128:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800712a:	79fb      	ldrb	r3, [r7, #7]
 800712c:	9300      	str	r3, [sp, #0]
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	2200      	movs	r2, #0
 8007132:	6939      	ldr	r1, [r7, #16]
 8007134:	6978      	ldr	r0, [r7, #20]
 8007136:	f7ff fed5 	bl	8006ee4 <xQueueGenericCreateStatic>
 800713a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800713c:	68f8      	ldr	r0, [r7, #12]
 800713e:	f7ff ffb8 	bl	80070b2 <prvInitialiseMutex>

		return xNewQueue;
 8007142:	68fb      	ldr	r3, [r7, #12]
	}
 8007144:	4618      	mov	r0, r3
 8007146:	3718      	adds	r7, #24
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800714c:	b590      	push	{r4, r7, lr}
 800714e:	b087      	sub	sp, #28
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	2b00      	cmp	r3, #0
 800715c:	d10c      	bne.n	8007178 <xQueueGiveMutexRecursive+0x2c>
	__asm volatile
 800715e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007162:	b672      	cpsid	i
 8007164:	f383 8811 	msr	BASEPRI, r3
 8007168:	f3bf 8f6f 	isb	sy
 800716c:	f3bf 8f4f 	dsb	sy
 8007170:	b662      	cpsie	i
 8007172:	60fb      	str	r3, [r7, #12]
}
 8007174:	bf00      	nop
 8007176:	e7fe      	b.n	8007176 <xQueueGiveMutexRecursive+0x2a>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8007178:	693b      	ldr	r3, [r7, #16]
 800717a:	689c      	ldr	r4, [r3, #8]
 800717c:	f001 fdd2 	bl	8008d24 <xTaskGetCurrentTaskHandle>
 8007180:	4603      	mov	r3, r0
 8007182:	429c      	cmp	r4, r3
 8007184:	d111      	bne.n	80071aa <xQueueGiveMutexRecursive+0x5e>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	1e5a      	subs	r2, r3, #1
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d105      	bne.n	80071a4 <xQueueGiveMutexRecursive+0x58>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8007198:	2300      	movs	r3, #0
 800719a:	2200      	movs	r2, #0
 800719c:	2100      	movs	r1, #0
 800719e:	6938      	ldr	r0, [r7, #16]
 80071a0:	f000 f8b4 	bl	800730c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80071a4:	2301      	movs	r3, #1
 80071a6:	617b      	str	r3, [r7, #20]
 80071a8:	e001      	b.n	80071ae <xQueueGiveMutexRecursive+0x62>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80071aa:	2300      	movs	r3, #0
 80071ac:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80071ae:	697b      	ldr	r3, [r7, #20]
	}
 80071b0:	4618      	mov	r0, r3
 80071b2:	371c      	adds	r7, #28
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd90      	pop	{r4, r7, pc}

080071b8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80071b8:	b590      	push	{r4, r7, lr}
 80071ba:	b087      	sub	sp, #28
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d10c      	bne.n	80071e6 <xQueueTakeMutexRecursive+0x2e>
	__asm volatile
 80071cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071d0:	b672      	cpsid	i
 80071d2:	f383 8811 	msr	BASEPRI, r3
 80071d6:	f3bf 8f6f 	isb	sy
 80071da:	f3bf 8f4f 	dsb	sy
 80071de:	b662      	cpsie	i
 80071e0:	60fb      	str	r3, [r7, #12]
}
 80071e2:	bf00      	nop
 80071e4:	e7fe      	b.n	80071e4 <xQueueTakeMutexRecursive+0x2c>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	689c      	ldr	r4, [r3, #8]
 80071ea:	f001 fd9b 	bl	8008d24 <xTaskGetCurrentTaskHandle>
 80071ee:	4603      	mov	r3, r0
 80071f0:	429c      	cmp	r4, r3
 80071f2:	d107      	bne.n	8007204 <xQueueTakeMutexRecursive+0x4c>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	1c5a      	adds	r2, r3, #1
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80071fe:	2301      	movs	r3, #1
 8007200:	617b      	str	r3, [r7, #20]
 8007202:	e00c      	b.n	800721e <xQueueTakeMutexRecursive+0x66>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8007204:	6839      	ldr	r1, [r7, #0]
 8007206:	6938      	ldr	r0, [r7, #16]
 8007208:	f000 fba2 	bl	8007950 <xQueueSemaphoreTake>
 800720c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d004      	beq.n	800721e <xQueueTakeMutexRecursive+0x66>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	68db      	ldr	r3, [r3, #12]
 8007218:	1c5a      	adds	r2, r3, #1
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800721e:	697b      	ldr	r3, [r7, #20]
	}
 8007220:	4618      	mov	r0, r3
 8007222:	371c      	adds	r7, #28
 8007224:	46bd      	mov	sp, r7
 8007226:	bd90      	pop	{r4, r7, pc}

08007228 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08a      	sub	sp, #40	; 0x28
 800722c:	af02      	add	r7, sp, #8
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d10c      	bne.n	8007254 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800723a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800723e:	b672      	cpsid	i
 8007240:	f383 8811 	msr	BASEPRI, r3
 8007244:	f3bf 8f6f 	isb	sy
 8007248:	f3bf 8f4f 	dsb	sy
 800724c:	b662      	cpsie	i
 800724e:	61bb      	str	r3, [r7, #24]
}
 8007250:	bf00      	nop
 8007252:	e7fe      	b.n	8007252 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 8007254:	68ba      	ldr	r2, [r7, #8]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	429a      	cmp	r2, r3
 800725a:	d90c      	bls.n	8007276 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800725c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007260:	b672      	cpsid	i
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	b662      	cpsie	i
 8007270:	617b      	str	r3, [r7, #20]
}
 8007272:	bf00      	nop
 8007274:	e7fe      	b.n	8007274 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8007276:	2302      	movs	r3, #2
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2200      	movs	r2, #0
 800727e:	2100      	movs	r1, #0
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f7ff fe2f 	bl	8006ee4 <xQueueGenericCreateStatic>
 8007286:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	68ba      	ldr	r2, [r7, #8]
 8007292:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007294:	69fb      	ldr	r3, [r7, #28]
	}
 8007296:	4618      	mov	r0, r3
 8007298:	3720      	adds	r7, #32
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}

0800729e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800729e:	b580      	push	{r7, lr}
 80072a0:	b086      	sub	sp, #24
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d10c      	bne.n	80072c8 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 80072ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b2:	b672      	cpsid	i
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	b662      	cpsie	i
 80072c2:	613b      	str	r3, [r7, #16]
}
 80072c4:	bf00      	nop
 80072c6:	e7fe      	b.n	80072c6 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 80072c8:	683a      	ldr	r2, [r7, #0]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	429a      	cmp	r2, r3
 80072ce:	d90c      	bls.n	80072ea <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 80072d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d4:	b672      	cpsid	i
 80072d6:	f383 8811 	msr	BASEPRI, r3
 80072da:	f3bf 8f6f 	isb	sy
 80072de:	f3bf 8f4f 	dsb	sy
 80072e2:	b662      	cpsie	i
 80072e4:	60fb      	str	r3, [r7, #12]
}
 80072e6:	bf00      	nop
 80072e8:	e7fe      	b.n	80072e8 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80072ea:	2202      	movs	r2, #2
 80072ec:	2100      	movs	r1, #0
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f7ff fe7a 	bl	8006fe8 <xQueueGenericCreate>
 80072f4:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d002      	beq.n	8007302 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	683a      	ldr	r2, [r7, #0]
 8007300:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8007302:	697b      	ldr	r3, [r7, #20]
	}
 8007304:	4618      	mov	r0, r3
 8007306:	3718      	adds	r7, #24
 8007308:	46bd      	mov	sp, r7
 800730a:	bd80      	pop	{r7, pc}

0800730c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800730c:	b580      	push	{r7, lr}
 800730e:	b08e      	sub	sp, #56	; 0x38
 8007310:	af00      	add	r7, sp, #0
 8007312:	60f8      	str	r0, [r7, #12]
 8007314:	60b9      	str	r1, [r7, #8]
 8007316:	607a      	str	r2, [r7, #4]
 8007318:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800731a:	2300      	movs	r3, #0
 800731c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10c      	bne.n	8007342 <xQueueGenericSend+0x36>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	b672      	cpsid	i
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	b662      	cpsie	i
 800733c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800733e:	bf00      	nop
 8007340:	e7fe      	b.n	8007340 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d103      	bne.n	8007350 <xQueueGenericSend+0x44>
 8007348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800734a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <xQueueGenericSend+0x48>
 8007350:	2301      	movs	r3, #1
 8007352:	e000      	b.n	8007356 <xQueueGenericSend+0x4a>
 8007354:	2300      	movs	r3, #0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d10c      	bne.n	8007374 <xQueueGenericSend+0x68>
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735e:	b672      	cpsid	i
 8007360:	f383 8811 	msr	BASEPRI, r3
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	f3bf 8f4f 	dsb	sy
 800736c:	b662      	cpsie	i
 800736e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007370:	bf00      	nop
 8007372:	e7fe      	b.n	8007372 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2b02      	cmp	r3, #2
 8007378:	d103      	bne.n	8007382 <xQueueGenericSend+0x76>
 800737a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800737c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800737e:	2b01      	cmp	r3, #1
 8007380:	d101      	bne.n	8007386 <xQueueGenericSend+0x7a>
 8007382:	2301      	movs	r3, #1
 8007384:	e000      	b.n	8007388 <xQueueGenericSend+0x7c>
 8007386:	2300      	movs	r3, #0
 8007388:	2b00      	cmp	r3, #0
 800738a:	d10c      	bne.n	80073a6 <xQueueGenericSend+0x9a>
	__asm volatile
 800738c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007390:	b672      	cpsid	i
 8007392:	f383 8811 	msr	BASEPRI, r3
 8007396:	f3bf 8f6f 	isb	sy
 800739a:	f3bf 8f4f 	dsb	sy
 800739e:	b662      	cpsie	i
 80073a0:	623b      	str	r3, [r7, #32]
}
 80073a2:	bf00      	nop
 80073a4:	e7fe      	b.n	80073a4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80073a6:	f001 fccd 	bl	8008d44 <xTaskGetSchedulerState>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d102      	bne.n	80073b6 <xQueueGenericSend+0xaa>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d101      	bne.n	80073ba <xQueueGenericSend+0xae>
 80073b6:	2301      	movs	r3, #1
 80073b8:	e000      	b.n	80073bc <xQueueGenericSend+0xb0>
 80073ba:	2300      	movs	r3, #0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10c      	bne.n	80073da <xQueueGenericSend+0xce>
	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c4:	b672      	cpsid	i
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	b662      	cpsie	i
 80073d4:	61fb      	str	r3, [r7, #28]
}
 80073d6:	bf00      	nop
 80073d8:	e7fe      	b.n	80073d8 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80073da:	f002 faff 	bl	80099dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80073de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d302      	bcc.n	80073f0 <xQueueGenericSend+0xe4>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	2b02      	cmp	r3, #2
 80073ee:	d129      	bne.n	8007444 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80073f0:	683a      	ldr	r2, [r7, #0]
 80073f2:	68b9      	ldr	r1, [r7, #8]
 80073f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80073f6:	f000 fc82 	bl	8007cfe <prvCopyDataToQueue>
 80073fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	2b00      	cmp	r3, #0
 8007402:	d010      	beq.n	8007426 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007406:	3324      	adds	r3, #36	; 0x24
 8007408:	4618      	mov	r0, r3
 800740a:	f001 fac1 	bl	8008990 <xTaskRemoveFromEventList>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d013      	beq.n	800743c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007414:	4b3f      	ldr	r3, [pc, #252]	; (8007514 <xQueueGenericSend+0x208>)
 8007416:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800741a:	601a      	str	r2, [r3, #0]
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	f3bf 8f6f 	isb	sy
 8007424:	e00a      	b.n	800743c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007428:	2b00      	cmp	r3, #0
 800742a:	d007      	beq.n	800743c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800742c:	4b39      	ldr	r3, [pc, #228]	; (8007514 <xQueueGenericSend+0x208>)
 800742e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007432:	601a      	str	r2, [r3, #0]
 8007434:	f3bf 8f4f 	dsb	sy
 8007438:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800743c:	f002 fb02 	bl	8009a44 <vPortExitCritical>
				return pdPASS;
 8007440:	2301      	movs	r3, #1
 8007442:	e063      	b.n	800750c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d103      	bne.n	8007452 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800744a:	f002 fafb 	bl	8009a44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800744e:	2300      	movs	r3, #0
 8007450:	e05c      	b.n	800750c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007452:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007454:	2b00      	cmp	r3, #0
 8007456:	d106      	bne.n	8007466 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007458:	f107 0314 	add.w	r3, r7, #20
 800745c:	4618      	mov	r0, r3
 800745e:	f001 fafd 	bl	8008a5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007462:	2301      	movs	r3, #1
 8007464:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007466:	f002 faed 	bl	8009a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800746a:	f001 f84b 	bl	8008504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800746e:	f002 fab5 	bl	80099dc <vPortEnterCritical>
 8007472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007474:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007478:	b25b      	sxtb	r3, r3
 800747a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747e:	d103      	bne.n	8007488 <xQueueGenericSend+0x17c>
 8007480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007482:	2200      	movs	r2, #0
 8007484:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800748e:	b25b      	sxtb	r3, r3
 8007490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007494:	d103      	bne.n	800749e <xQueueGenericSend+0x192>
 8007496:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800749e:	f002 fad1 	bl	8009a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80074a2:	1d3a      	adds	r2, r7, #4
 80074a4:	f107 0314 	add.w	r3, r7, #20
 80074a8:	4611      	mov	r1, r2
 80074aa:	4618      	mov	r0, r3
 80074ac:	f001 faec 	bl	8008a88 <xTaskCheckForTimeOut>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d124      	bne.n	8007500 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80074b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074b8:	f000 fd19 	bl	8007eee <prvIsQueueFull>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d018      	beq.n	80074f4 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80074c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c4:	3310      	adds	r3, #16
 80074c6:	687a      	ldr	r2, [r7, #4]
 80074c8:	4611      	mov	r1, r2
 80074ca:	4618      	mov	r0, r3
 80074cc:	f001 fa0c 	bl	80088e8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80074d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074d2:	f000 fca4 	bl	8007e1e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80074d6:	f001 f823 	bl	8008520 <xTaskResumeAll>
 80074da:	4603      	mov	r3, r0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	f47f af7c 	bne.w	80073da <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 80074e2:	4b0c      	ldr	r3, [pc, #48]	; (8007514 <xQueueGenericSend+0x208>)
 80074e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074e8:	601a      	str	r2, [r3, #0]
 80074ea:	f3bf 8f4f 	dsb	sy
 80074ee:	f3bf 8f6f 	isb	sy
 80074f2:	e772      	b.n	80073da <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80074f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80074f6:	f000 fc92 	bl	8007e1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80074fa:	f001 f811 	bl	8008520 <xTaskResumeAll>
 80074fe:	e76c      	b.n	80073da <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007502:	f000 fc8c 	bl	8007e1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007506:	f001 f80b 	bl	8008520 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800750a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800750c:	4618      	mov	r0, r3
 800750e:	3738      	adds	r7, #56	; 0x38
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}
 8007514:	e000ed04 	.word	0xe000ed04

08007518 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b08e      	sub	sp, #56	; 0x38
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
 8007524:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800752a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752c:	2b00      	cmp	r3, #0
 800752e:	d10c      	bne.n	800754a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 8007530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007534:	b672      	cpsid	i
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	b662      	cpsie	i
 8007544:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d103      	bne.n	8007558 <xQueueGenericSendFromISR+0x40>
 8007550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007554:	2b00      	cmp	r3, #0
 8007556:	d101      	bne.n	800755c <xQueueGenericSendFromISR+0x44>
 8007558:	2301      	movs	r3, #1
 800755a:	e000      	b.n	800755e <xQueueGenericSendFromISR+0x46>
 800755c:	2300      	movs	r3, #0
 800755e:	2b00      	cmp	r3, #0
 8007560:	d10c      	bne.n	800757c <xQueueGenericSendFromISR+0x64>
	__asm volatile
 8007562:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007566:	b672      	cpsid	i
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	b662      	cpsie	i
 8007576:	623b      	str	r3, [r7, #32]
}
 8007578:	bf00      	nop
 800757a:	e7fe      	b.n	800757a <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800757c:	683b      	ldr	r3, [r7, #0]
 800757e:	2b02      	cmp	r3, #2
 8007580:	d103      	bne.n	800758a <xQueueGenericSendFromISR+0x72>
 8007582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007584:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007586:	2b01      	cmp	r3, #1
 8007588:	d101      	bne.n	800758e <xQueueGenericSendFromISR+0x76>
 800758a:	2301      	movs	r3, #1
 800758c:	e000      	b.n	8007590 <xQueueGenericSendFromISR+0x78>
 800758e:	2300      	movs	r3, #0
 8007590:	2b00      	cmp	r3, #0
 8007592:	d10c      	bne.n	80075ae <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8007594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007598:	b672      	cpsid	i
 800759a:	f383 8811 	msr	BASEPRI, r3
 800759e:	f3bf 8f6f 	isb	sy
 80075a2:	f3bf 8f4f 	dsb	sy
 80075a6:	b662      	cpsie	i
 80075a8:	61fb      	str	r3, [r7, #28]
}
 80075aa:	bf00      	nop
 80075ac:	e7fe      	b.n	80075ac <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075ae:	f002 fafd 	bl	8009bac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80075b2:	f3ef 8211 	mrs	r2, BASEPRI
 80075b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ba:	b672      	cpsid	i
 80075bc:	f383 8811 	msr	BASEPRI, r3
 80075c0:	f3bf 8f6f 	isb	sy
 80075c4:	f3bf 8f4f 	dsb	sy
 80075c8:	b662      	cpsie	i
 80075ca:	61ba      	str	r2, [r7, #24]
 80075cc:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80075ce:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075d0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80075d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80075d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075da:	429a      	cmp	r2, r3
 80075dc:	d302      	bcc.n	80075e4 <xQueueGenericSendFromISR+0xcc>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	2b02      	cmp	r3, #2
 80075e2:	d12c      	bne.n	800763e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80075e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	68b9      	ldr	r1, [r7, #8]
 80075f2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80075f4:	f000 fb83 	bl	8007cfe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80075f8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80075fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007600:	d112      	bne.n	8007628 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007606:	2b00      	cmp	r3, #0
 8007608:	d016      	beq.n	8007638 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800760a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760c:	3324      	adds	r3, #36	; 0x24
 800760e:	4618      	mov	r0, r3
 8007610:	f001 f9be 	bl	8008990 <xTaskRemoveFromEventList>
 8007614:	4603      	mov	r3, r0
 8007616:	2b00      	cmp	r3, #0
 8007618:	d00e      	beq.n	8007638 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2201      	movs	r2, #1
 8007624:	601a      	str	r2, [r3, #0]
 8007626:	e007      	b.n	8007638 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007628:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800762c:	3301      	adds	r3, #1
 800762e:	b2db      	uxtb	r3, r3
 8007630:	b25a      	sxtb	r2, r3
 8007632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007634:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007638:	2301      	movs	r3, #1
 800763a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800763c:	e001      	b.n	8007642 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800763e:	2300      	movs	r3, #0
 8007640:	637b      	str	r3, [r7, #52]	; 0x34
 8007642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007644:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800764c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800764e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007650:	4618      	mov	r0, r3
 8007652:	3738      	adds	r7, #56	; 0x38
 8007654:	46bd      	mov	sp, r7
 8007656:	bd80      	pop	{r7, pc}

08007658 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08e      	sub	sp, #56	; 0x38
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
 8007660:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007668:	2b00      	cmp	r3, #0
 800766a:	d10c      	bne.n	8007686 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800766c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007670:	b672      	cpsid	i
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	b662      	cpsie	i
 8007680:	623b      	str	r3, [r7, #32]
}
 8007682:	bf00      	nop
 8007684:	e7fe      	b.n	8007684 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00c      	beq.n	80076a8 <xQueueGiveFromISR+0x50>
	__asm volatile
 800768e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007692:	b672      	cpsid	i
 8007694:	f383 8811 	msr	BASEPRI, r3
 8007698:	f3bf 8f6f 	isb	sy
 800769c:	f3bf 8f4f 	dsb	sy
 80076a0:	b662      	cpsie	i
 80076a2:	61fb      	str	r3, [r7, #28]
}
 80076a4:	bf00      	nop
 80076a6:	e7fe      	b.n	80076a6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80076a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d103      	bne.n	80076b8 <xQueueGiveFromISR+0x60>
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d101      	bne.n	80076bc <xQueueGiveFromISR+0x64>
 80076b8:	2301      	movs	r3, #1
 80076ba:	e000      	b.n	80076be <xQueueGiveFromISR+0x66>
 80076bc:	2300      	movs	r3, #0
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d10c      	bne.n	80076dc <xQueueGiveFromISR+0x84>
	__asm volatile
 80076c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076c6:	b672      	cpsid	i
 80076c8:	f383 8811 	msr	BASEPRI, r3
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	b662      	cpsie	i
 80076d6:	61bb      	str	r3, [r7, #24]
}
 80076d8:	bf00      	nop
 80076da:	e7fe      	b.n	80076da <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80076dc:	f002 fa66 	bl	8009bac <vPortValidateInterruptPriority>
	__asm volatile
 80076e0:	f3ef 8211 	mrs	r2, BASEPRI
 80076e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e8:	b672      	cpsid	i
 80076ea:	f383 8811 	msr	BASEPRI, r3
 80076ee:	f3bf 8f6f 	isb	sy
 80076f2:	f3bf 8f4f 	dsb	sy
 80076f6:	b662      	cpsie	i
 80076f8:	617a      	str	r2, [r7, #20]
 80076fa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80076fc:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80076fe:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007704:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800770a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800770c:	429a      	cmp	r2, r3
 800770e:	d22b      	bcs.n	8007768 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007712:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	1c5a      	adds	r2, r3, #1
 800771e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007720:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007722:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800772a:	d112      	bne.n	8007752 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800772c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800772e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007730:	2b00      	cmp	r3, #0
 8007732:	d016      	beq.n	8007762 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007734:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007736:	3324      	adds	r3, #36	; 0x24
 8007738:	4618      	mov	r0, r3
 800773a:	f001 f929 	bl	8008990 <xTaskRemoveFromEventList>
 800773e:	4603      	mov	r3, r0
 8007740:	2b00      	cmp	r3, #0
 8007742:	d00e      	beq.n	8007762 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007744:	683b      	ldr	r3, [r7, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d00b      	beq.n	8007762 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2201      	movs	r2, #1
 800774e:	601a      	str	r2, [r3, #0]
 8007750:	e007      	b.n	8007762 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007752:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007756:	3301      	adds	r3, #1
 8007758:	b2db      	uxtb	r3, r3
 800775a:	b25a      	sxtb	r2, r3
 800775c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800775e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007762:	2301      	movs	r3, #1
 8007764:	637b      	str	r3, [r7, #52]	; 0x34
 8007766:	e001      	b.n	800776c <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007768:	2300      	movs	r3, #0
 800776a:	637b      	str	r3, [r7, #52]	; 0x34
 800776c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800776e:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	f383 8811 	msr	BASEPRI, r3
}
 8007776:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800777a:	4618      	mov	r0, r3
 800777c:	3738      	adds	r7, #56	; 0x38
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}
	...

08007784 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b08c      	sub	sp, #48	; 0x30
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007790:	2300      	movs	r3, #0
 8007792:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779a:	2b00      	cmp	r3, #0
 800779c:	d10c      	bne.n	80077b8 <xQueueReceive+0x34>
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a2:	b672      	cpsid	i
 80077a4:	f383 8811 	msr	BASEPRI, r3
 80077a8:	f3bf 8f6f 	isb	sy
 80077ac:	f3bf 8f4f 	dsb	sy
 80077b0:	b662      	cpsie	i
 80077b2:	623b      	str	r3, [r7, #32]
}
 80077b4:	bf00      	nop
 80077b6:	e7fe      	b.n	80077b6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d103      	bne.n	80077c6 <xQueueReceive+0x42>
 80077be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <xQueueReceive+0x46>
 80077c6:	2301      	movs	r3, #1
 80077c8:	e000      	b.n	80077cc <xQueueReceive+0x48>
 80077ca:	2300      	movs	r3, #0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d10c      	bne.n	80077ea <xQueueReceive+0x66>
	__asm volatile
 80077d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d4:	b672      	cpsid	i
 80077d6:	f383 8811 	msr	BASEPRI, r3
 80077da:	f3bf 8f6f 	isb	sy
 80077de:	f3bf 8f4f 	dsb	sy
 80077e2:	b662      	cpsie	i
 80077e4:	61fb      	str	r3, [r7, #28]
}
 80077e6:	bf00      	nop
 80077e8:	e7fe      	b.n	80077e8 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077ea:	f001 faab 	bl	8008d44 <xTaskGetSchedulerState>
 80077ee:	4603      	mov	r3, r0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d102      	bne.n	80077fa <xQueueReceive+0x76>
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <xQueueReceive+0x7a>
 80077fa:	2301      	movs	r3, #1
 80077fc:	e000      	b.n	8007800 <xQueueReceive+0x7c>
 80077fe:	2300      	movs	r3, #0
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10c      	bne.n	800781e <xQueueReceive+0x9a>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	b672      	cpsid	i
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	b662      	cpsie	i
 8007818:	61bb      	str	r3, [r7, #24]
}
 800781a:	bf00      	nop
 800781c:	e7fe      	b.n	800781c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800781e:	f002 f8dd 	bl	80099dc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007826:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800782a:	2b00      	cmp	r3, #0
 800782c:	d01f      	beq.n	800786e <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800782e:	68b9      	ldr	r1, [r7, #8]
 8007830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007832:	f000 face 	bl	8007dd2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007838:	1e5a      	subs	r2, r3, #1
 800783a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800783e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007840:	691b      	ldr	r3, [r3, #16]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00f      	beq.n	8007866 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007848:	3310      	adds	r3, #16
 800784a:	4618      	mov	r0, r3
 800784c:	f001 f8a0 	bl	8008990 <xTaskRemoveFromEventList>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d007      	beq.n	8007866 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007856:	4b3d      	ldr	r3, [pc, #244]	; (800794c <xQueueReceive+0x1c8>)
 8007858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800785c:	601a      	str	r2, [r3, #0]
 800785e:	f3bf 8f4f 	dsb	sy
 8007862:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007866:	f002 f8ed 	bl	8009a44 <vPortExitCritical>
				return pdPASS;
 800786a:	2301      	movs	r3, #1
 800786c:	e069      	b.n	8007942 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d103      	bne.n	800787c <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007874:	f002 f8e6 	bl	8009a44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007878:	2300      	movs	r3, #0
 800787a:	e062      	b.n	8007942 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	2b00      	cmp	r3, #0
 8007880:	d106      	bne.n	8007890 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007882:	f107 0310 	add.w	r3, r7, #16
 8007886:	4618      	mov	r0, r3
 8007888:	f001 f8e8 	bl	8008a5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800788c:	2301      	movs	r3, #1
 800788e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007890:	f002 f8d8 	bl	8009a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007894:	f000 fe36 	bl	8008504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007898:	f002 f8a0 	bl	80099dc <vPortEnterCritical>
 800789c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800789e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80078a2:	b25b      	sxtb	r3, r3
 80078a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078a8:	d103      	bne.n	80078b2 <xQueueReceive+0x12e>
 80078aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ac:	2200      	movs	r2, #0
 80078ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80078b8:	b25b      	sxtb	r3, r3
 80078ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078be:	d103      	bne.n	80078c8 <xQueueReceive+0x144>
 80078c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80078c8:	f002 f8bc 	bl	8009a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078cc:	1d3a      	adds	r2, r7, #4
 80078ce:	f107 0310 	add.w	r3, r7, #16
 80078d2:	4611      	mov	r1, r2
 80078d4:	4618      	mov	r0, r3
 80078d6:	f001 f8d7 	bl	8008a88 <xTaskCheckForTimeOut>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d123      	bne.n	8007928 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80078e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078e2:	f000 faee 	bl	8007ec2 <prvIsQueueEmpty>
 80078e6:	4603      	mov	r3, r0
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d017      	beq.n	800791c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80078ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ee:	3324      	adds	r3, #36	; 0x24
 80078f0:	687a      	ldr	r2, [r7, #4]
 80078f2:	4611      	mov	r1, r2
 80078f4:	4618      	mov	r0, r3
 80078f6:	f000 fff7 	bl	80088e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80078fa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80078fc:	f000 fa8f 	bl	8007e1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007900:	f000 fe0e 	bl	8008520 <xTaskResumeAll>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d189      	bne.n	800781e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800790a:	4b10      	ldr	r3, [pc, #64]	; (800794c <xQueueReceive+0x1c8>)
 800790c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007910:	601a      	str	r2, [r3, #0]
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	f3bf 8f6f 	isb	sy
 800791a:	e780      	b.n	800781e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800791c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800791e:	f000 fa7e 	bl	8007e1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007922:	f000 fdfd 	bl	8008520 <xTaskResumeAll>
 8007926:	e77a      	b.n	800781e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800792a:	f000 fa78 	bl	8007e1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800792e:	f000 fdf7 	bl	8008520 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007932:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007934:	f000 fac5 	bl	8007ec2 <prvIsQueueEmpty>
 8007938:	4603      	mov	r3, r0
 800793a:	2b00      	cmp	r3, #0
 800793c:	f43f af6f 	beq.w	800781e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007940:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007942:	4618      	mov	r0, r3
 8007944:	3730      	adds	r7, #48	; 0x30
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}
 800794a:	bf00      	nop
 800794c:	e000ed04 	.word	0xe000ed04

08007950 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8007950:	b580      	push	{r7, lr}
 8007952:	b08e      	sub	sp, #56	; 0x38
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
 8007958:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800795a:	2300      	movs	r3, #0
 800795c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8007962:	2300      	movs	r3, #0
 8007964:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007968:	2b00      	cmp	r3, #0
 800796a:	d10c      	bne.n	8007986 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800796c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007970:	b672      	cpsid	i
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	b662      	cpsie	i
 8007980:	623b      	str	r3, [r7, #32]
}
 8007982:	bf00      	nop
 8007984:	e7fe      	b.n	8007984 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00c      	beq.n	80079a8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800798e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007992:	b672      	cpsid	i
 8007994:	f383 8811 	msr	BASEPRI, r3
 8007998:	f3bf 8f6f 	isb	sy
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	b662      	cpsie	i
 80079a2:	61fb      	str	r3, [r7, #28]
}
 80079a4:	bf00      	nop
 80079a6:	e7fe      	b.n	80079a6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80079a8:	f001 f9cc 	bl	8008d44 <xTaskGetSchedulerState>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d102      	bne.n	80079b8 <xQueueSemaphoreTake+0x68>
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <xQueueSemaphoreTake+0x6c>
 80079b8:	2301      	movs	r3, #1
 80079ba:	e000      	b.n	80079be <xQueueSemaphoreTake+0x6e>
 80079bc:	2300      	movs	r3, #0
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d10c      	bne.n	80079dc <xQueueSemaphoreTake+0x8c>
	__asm volatile
 80079c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c6:	b672      	cpsid	i
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	b662      	cpsie	i
 80079d6:	61bb      	str	r3, [r7, #24]
}
 80079d8:	bf00      	nop
 80079da:	e7fe      	b.n	80079da <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80079dc:	f001 fffe 	bl	80099dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80079e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80079e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d024      	beq.n	8007a36 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80079ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ee:	1e5a      	subs	r2, r3, #1
 80079f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d104      	bne.n	8007a06 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80079fc:	f001 fb20 	bl	8009040 <pvTaskIncrementMutexHeldCount>
 8007a00:	4602      	mov	r2, r0
 8007a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a04:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d00f      	beq.n	8007a2e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a10:	3310      	adds	r3, #16
 8007a12:	4618      	mov	r0, r3
 8007a14:	f000 ffbc 	bl	8008990 <xTaskRemoveFromEventList>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d007      	beq.n	8007a2e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007a1e:	4b55      	ldr	r3, [pc, #340]	; (8007b74 <xQueueSemaphoreTake+0x224>)
 8007a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007a2e:	f002 f809 	bl	8009a44 <vPortExitCritical>
				return pdPASS;
 8007a32:	2301      	movs	r3, #1
 8007a34:	e099      	b.n	8007b6a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d113      	bne.n	8007a64 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8007a3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d00c      	beq.n	8007a5c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8007a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a46:	b672      	cpsid	i
 8007a48:	f383 8811 	msr	BASEPRI, r3
 8007a4c:	f3bf 8f6f 	isb	sy
 8007a50:	f3bf 8f4f 	dsb	sy
 8007a54:	b662      	cpsie	i
 8007a56:	617b      	str	r3, [r7, #20]
}
 8007a58:	bf00      	nop
 8007a5a:	e7fe      	b.n	8007a5a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8007a5c:	f001 fff2 	bl	8009a44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007a60:	2300      	movs	r3, #0
 8007a62:	e082      	b.n	8007b6a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d106      	bne.n	8007a78 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007a6a:	f107 030c 	add.w	r3, r7, #12
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 fff4 	bl	8008a5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a74:	2301      	movs	r3, #1
 8007a76:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a78:	f001 ffe4 	bl	8009a44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a7c:	f000 fd42 	bl	8008504 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a80:	f001 ffac 	bl	80099dc <vPortEnterCritical>
 8007a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007a8a:	b25b      	sxtb	r3, r3
 8007a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a90:	d103      	bne.n	8007a9a <xQueueSemaphoreTake+0x14a>
 8007a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a94:	2200      	movs	r2, #0
 8007a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007aa0:	b25b      	sxtb	r3, r3
 8007aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aa6:	d103      	bne.n	8007ab0 <xQueueSemaphoreTake+0x160>
 8007aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ab0:	f001 ffc8 	bl	8009a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007ab4:	463a      	mov	r2, r7
 8007ab6:	f107 030c 	add.w	r3, r7, #12
 8007aba:	4611      	mov	r1, r2
 8007abc:	4618      	mov	r0, r3
 8007abe:	f000 ffe3 	bl	8008a88 <xTaskCheckForTimeOut>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d132      	bne.n	8007b2e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007ac8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007aca:	f000 f9fa 	bl	8007ec2 <prvIsQueueEmpty>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d026      	beq.n	8007b22 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d109      	bne.n	8007af0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8007adc:	f001 ff7e 	bl	80099dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ae2:	689b      	ldr	r3, [r3, #8]
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	f001 f94b 	bl	8008d80 <xTaskPriorityInherit>
 8007aea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8007aec:	f001 ffaa 	bl	8009a44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af2:	3324      	adds	r3, #36	; 0x24
 8007af4:	683a      	ldr	r2, [r7, #0]
 8007af6:	4611      	mov	r1, r2
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 fef5 	bl	80088e8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007afe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b00:	f000 f98d 	bl	8007e1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007b04:	f000 fd0c 	bl	8008520 <xTaskResumeAll>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f47f af66 	bne.w	80079dc <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8007b10:	4b18      	ldr	r3, [pc, #96]	; (8007b74 <xQueueSemaphoreTake+0x224>)
 8007b12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b16:	601a      	str	r2, [r3, #0]
 8007b18:	f3bf 8f4f 	dsb	sy
 8007b1c:	f3bf 8f6f 	isb	sy
 8007b20:	e75c      	b.n	80079dc <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8007b22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b24:	f000 f97b 	bl	8007e1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007b28:	f000 fcfa 	bl	8008520 <xTaskResumeAll>
 8007b2c:	e756      	b.n	80079dc <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8007b2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b30:	f000 f975 	bl	8007e1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007b34:	f000 fcf4 	bl	8008520 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007b38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b3a:	f000 f9c2 	bl	8007ec2 <prvIsQueueEmpty>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f43f af4b 	beq.w	80079dc <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8007b46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d00d      	beq.n	8007b68 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8007b4c:	f001 ff46 	bl	80099dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8007b50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007b52:	f000 f8bc 	bl	8007cce <prvGetDisinheritPriorityAfterTimeout>
 8007b56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8007b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f001 f9e8 	bl	8008f34 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8007b64:	f001 ff6e 	bl	8009a44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007b68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3738      	adds	r7, #56	; 0x38
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	e000ed04 	.word	0xe000ed04

08007b78 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b08e      	sub	sp, #56	; 0x38
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d10c      	bne.n	8007ba8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8007b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b92:	b672      	cpsid	i
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	b662      	cpsie	i
 8007ba2:	623b      	str	r3, [r7, #32]
}
 8007ba4:	bf00      	nop
 8007ba6:	e7fe      	b.n	8007ba6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d103      	bne.n	8007bb6 <xQueueReceiveFromISR+0x3e>
 8007bae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d101      	bne.n	8007bba <xQueueReceiveFromISR+0x42>
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e000      	b.n	8007bbc <xQueueReceiveFromISR+0x44>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d10c      	bne.n	8007bda <xQueueReceiveFromISR+0x62>
	__asm volatile
 8007bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc4:	b672      	cpsid	i
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	b662      	cpsie	i
 8007bd4:	61fb      	str	r3, [r7, #28]
}
 8007bd6:	bf00      	nop
 8007bd8:	e7fe      	b.n	8007bd8 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007bda:	f001 ffe7 	bl	8009bac <vPortValidateInterruptPriority>
	__asm volatile
 8007bde:	f3ef 8211 	mrs	r2, BASEPRI
 8007be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be6:	b672      	cpsid	i
 8007be8:	f383 8811 	msr	BASEPRI, r3
 8007bec:	f3bf 8f6f 	isb	sy
 8007bf0:	f3bf 8f4f 	dsb	sy
 8007bf4:	b662      	cpsie	i
 8007bf6:	61ba      	str	r2, [r7, #24]
 8007bf8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8007bfa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c02:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d02f      	beq.n	8007c6a <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8007c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c0c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007c14:	68b9      	ldr	r1, [r7, #8]
 8007c16:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c18:	f000 f8db 	bl	8007dd2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c1e:	1e5a      	subs	r2, r3, #1
 8007c20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c22:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8007c24:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007c28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c2c:	d112      	bne.n	8007c54 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d016      	beq.n	8007c64 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c38:	3310      	adds	r3, #16
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f000 fea8 	bl	8008990 <xTaskRemoveFromEventList>
 8007c40:	4603      	mov	r3, r0
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d00e      	beq.n	8007c64 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d00b      	beq.n	8007c64 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2201      	movs	r2, #1
 8007c50:	601a      	str	r2, [r3, #0]
 8007c52:	e007      	b.n	8007c64 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8007c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007c58:	3301      	adds	r3, #1
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	b25a      	sxtb	r2, r3
 8007c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8007c64:	2301      	movs	r3, #1
 8007c66:	637b      	str	r3, [r7, #52]	; 0x34
 8007c68:	e001      	b.n	8007c6e <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	637b      	str	r3, [r7, #52]	; 0x34
 8007c6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c70:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	f383 8811 	msr	BASEPRI, r3
}
 8007c78:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3738      	adds	r7, #56	; 0x38
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b084      	sub	sp, #16
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d10c      	bne.n	8007cb0 <vQueueDelete+0x2c>
	__asm volatile
 8007c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c9a:	b672      	cpsid	i
 8007c9c:	f383 8811 	msr	BASEPRI, r3
 8007ca0:	f3bf 8f6f 	isb	sy
 8007ca4:	f3bf 8f4f 	dsb	sy
 8007ca8:	b662      	cpsie	i
 8007caa:	60bb      	str	r3, [r7, #8]
}
 8007cac:	bf00      	nop
 8007cae:	e7fe      	b.n	8007cae <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8007cb0:	68f8      	ldr	r0, [r7, #12]
 8007cb2:	f000 f95f 	bl	8007f74 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d102      	bne.n	8007cc6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 8007cc0:	68f8      	ldr	r0, [r7, #12]
 8007cc2:	f002 f881 	bl	8009dc8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8007cc6:	bf00      	nop
 8007cc8:	3710      	adds	r7, #16
 8007cca:	46bd      	mov	sp, r7
 8007ccc:	bd80      	pop	{r7, pc}

08007cce <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8007cce:	b480      	push	{r7}
 8007cd0:	b085      	sub	sp, #20
 8007cd2:	af00      	add	r7, sp, #0
 8007cd4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d006      	beq.n	8007cec <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8007ce8:	60fb      	str	r3, [r7, #12]
 8007cea:	e001      	b.n	8007cf0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8007cec:	2300      	movs	r3, #0
 8007cee:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
	}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	3714      	adds	r7, #20
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007cfe:	b580      	push	{r7, lr}
 8007d00:	b086      	sub	sp, #24
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	60f8      	str	r0, [r7, #12]
 8007d06:	60b9      	str	r1, [r7, #8]
 8007d08:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d12:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d10d      	bne.n	8007d38 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d14d      	bne.n	8007dc0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f001 f891 	bl	8008e50 <xTaskPriorityDisinherit>
 8007d2e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	2200      	movs	r2, #0
 8007d34:	609a      	str	r2, [r3, #8]
 8007d36:	e043      	b.n	8007dc0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d119      	bne.n	8007d72 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	6858      	ldr	r0, [r3, #4]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d46:	461a      	mov	r2, r3
 8007d48:	68b9      	ldr	r1, [r7, #8]
 8007d4a:	f00e fcce 	bl	80166ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	685a      	ldr	r2, [r3, #4]
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d56:	441a      	add	r2, r3
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	685a      	ldr	r2, [r3, #4]
 8007d60:	68fb      	ldr	r3, [r7, #12]
 8007d62:	689b      	ldr	r3, [r3, #8]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d32b      	bcc.n	8007dc0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	605a      	str	r2, [r3, #4]
 8007d70:	e026      	b.n	8007dc0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	68d8      	ldr	r0, [r3, #12]
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7a:	461a      	mov	r2, r3
 8007d7c:	68b9      	ldr	r1, [r7, #8]
 8007d7e:	f00e fcb4 	bl	80166ea <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	68da      	ldr	r2, [r3, #12]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d8a:	425b      	negs	r3, r3
 8007d8c:	441a      	add	r2, r3
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	68da      	ldr	r2, [r3, #12]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d207      	bcs.n	8007dae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	689a      	ldr	r2, [r3, #8]
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da6:	425b      	negs	r3, r3
 8007da8:	441a      	add	r2, r3
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	2b02      	cmp	r3, #2
 8007db2:	d105      	bne.n	8007dc0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d002      	beq.n	8007dc0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	3b01      	subs	r3, #1
 8007dbe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	1c5a      	adds	r2, r3, #1
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007dc8:	697b      	ldr	r3, [r7, #20]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3718      	adds	r7, #24
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b082      	sub	sp, #8
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d018      	beq.n	8007e16 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	68da      	ldr	r2, [r3, #12]
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dec:	441a      	add	r2, r3
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	68da      	ldr	r2, [r3, #12]
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	689b      	ldr	r3, [r3, #8]
 8007dfa:	429a      	cmp	r2, r3
 8007dfc:	d303      	bcc.n	8007e06 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681a      	ldr	r2, [r3, #0]
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68d9      	ldr	r1, [r3, #12]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0e:	461a      	mov	r2, r3
 8007e10:	6838      	ldr	r0, [r7, #0]
 8007e12:	f00e fc6a 	bl	80166ea <memcpy>
	}
}
 8007e16:	bf00      	nop
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007e26:	f001 fdd9 	bl	80099dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007e30:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e32:	e011      	b.n	8007e58 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d012      	beq.n	8007e62 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	3324      	adds	r3, #36	; 0x24
 8007e40:	4618      	mov	r0, r3
 8007e42:	f000 fda5 	bl	8008990 <xTaskRemoveFromEventList>
 8007e46:	4603      	mov	r3, r0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d001      	beq.n	8007e50 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007e4c:	f000 fe82 	bl	8008b54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007e50:	7bfb      	ldrb	r3, [r7, #15]
 8007e52:	3b01      	subs	r3, #1
 8007e54:	b2db      	uxtb	r3, r3
 8007e56:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007e58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	dce9      	bgt.n	8007e34 <prvUnlockQueue+0x16>
 8007e60:	e000      	b.n	8007e64 <prvUnlockQueue+0x46>
					break;
 8007e62:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	22ff      	movs	r2, #255	; 0xff
 8007e68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007e6c:	f001 fdea 	bl	8009a44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007e70:	f001 fdb4 	bl	80099dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007e7a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e7c:	e011      	b.n	8007ea2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	691b      	ldr	r3, [r3, #16]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d012      	beq.n	8007eac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	3310      	adds	r3, #16
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	f000 fd80 	bl	8008990 <xTaskRemoveFromEventList>
 8007e90:	4603      	mov	r3, r0
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d001      	beq.n	8007e9a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e96:	f000 fe5d 	bl	8008b54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e9a:	7bbb      	ldrb	r3, [r7, #14]
 8007e9c:	3b01      	subs	r3, #1
 8007e9e:	b2db      	uxtb	r3, r3
 8007ea0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007ea2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	dce9      	bgt.n	8007e7e <prvUnlockQueue+0x60>
 8007eaa:	e000      	b.n	8007eae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007eac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	22ff      	movs	r2, #255	; 0xff
 8007eb2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007eb6:	f001 fdc5 	bl	8009a44 <vPortExitCritical>
}
 8007eba:	bf00      	nop
 8007ebc:	3710      	adds	r7, #16
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}

08007ec2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007ec2:	b580      	push	{r7, lr}
 8007ec4:	b084      	sub	sp, #16
 8007ec6:	af00      	add	r7, sp, #0
 8007ec8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007eca:	f001 fd87 	bl	80099dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d102      	bne.n	8007edc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	60fb      	str	r3, [r7, #12]
 8007eda:	e001      	b.n	8007ee0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007edc:	2300      	movs	r3, #0
 8007ede:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ee0:	f001 fdb0 	bl	8009a44 <vPortExitCritical>

	return xReturn;
 8007ee4:	68fb      	ldr	r3, [r7, #12]
}
 8007ee6:	4618      	mov	r0, r3
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}

08007eee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007eee:	b580      	push	{r7, lr}
 8007ef0:	b084      	sub	sp, #16
 8007ef2:	af00      	add	r7, sp, #0
 8007ef4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ef6:	f001 fd71 	bl	80099dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f02:	429a      	cmp	r2, r3
 8007f04:	d102      	bne.n	8007f0c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007f06:	2301      	movs	r3, #1
 8007f08:	60fb      	str	r3, [r7, #12]
 8007f0a:	e001      	b.n	8007f10 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007f10:	f001 fd98 	bl	8009a44 <vPortExitCritical>

	return xReturn;
 8007f14:	68fb      	ldr	r3, [r7, #12]
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3710      	adds	r7, #16
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}
	...

08007f20 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
 8007f2e:	e014      	b.n	8007f5a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007f30:	4a0f      	ldr	r2, [pc, #60]	; (8007f70 <vQueueAddToRegistry+0x50>)
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d10b      	bne.n	8007f54 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007f3c:	490c      	ldr	r1, [pc, #48]	; (8007f70 <vQueueAddToRegistry+0x50>)
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007f46:	4a0a      	ldr	r2, [pc, #40]	; (8007f70 <vQueueAddToRegistry+0x50>)
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	00db      	lsls	r3, r3, #3
 8007f4c:	4413      	add	r3, r2
 8007f4e:	687a      	ldr	r2, [r7, #4]
 8007f50:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007f52:	e006      	b.n	8007f62 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	3301      	adds	r3, #1
 8007f58:	60fb      	str	r3, [r7, #12]
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	2b07      	cmp	r3, #7
 8007f5e:	d9e7      	bls.n	8007f30 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007f60:	bf00      	nop
 8007f62:	bf00      	nop
 8007f64:	3714      	adds	r7, #20
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	20005634 	.word	0x20005634

08007f74 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	60fb      	str	r3, [r7, #12]
 8007f80:	e016      	b.n	8007fb0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8007f82:	4a10      	ldr	r2, [pc, #64]	; (8007fc4 <vQueueUnregisterQueue+0x50>)
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	00db      	lsls	r3, r3, #3
 8007f88:	4413      	add	r3, r2
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	687a      	ldr	r2, [r7, #4]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d10b      	bne.n	8007faa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8007f92:	4a0c      	ldr	r2, [pc, #48]	; (8007fc4 <vQueueUnregisterQueue+0x50>)
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2100      	movs	r1, #0
 8007f98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007f9c:	4a09      	ldr	r2, [pc, #36]	; (8007fc4 <vQueueUnregisterQueue+0x50>)
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	00db      	lsls	r3, r3, #3
 8007fa2:	4413      	add	r3, r2
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	605a      	str	r2, [r3, #4]
				break;
 8007fa8:	e006      	b.n	8007fb8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	3301      	adds	r3, #1
 8007fae:	60fb      	str	r3, [r7, #12]
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2b07      	cmp	r3, #7
 8007fb4:	d9e5      	bls.n	8007f82 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8007fb6:	bf00      	nop
 8007fb8:	bf00      	nop
 8007fba:	3714      	adds	r7, #20
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	20005634 	.word	0x20005634

08007fc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b086      	sub	sp, #24
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	60f8      	str	r0, [r7, #12]
 8007fd0:	60b9      	str	r1, [r7, #8]
 8007fd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007fd8:	f001 fd00 	bl	80099dc <vPortEnterCritical>
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007fe2:	b25b      	sxtb	r3, r3
 8007fe4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fe8:	d103      	bne.n	8007ff2 <vQueueWaitForMessageRestricted+0x2a>
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	2200      	movs	r2, #0
 8007fee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ff8:	b25b      	sxtb	r3, r3
 8007ffa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ffe:	d103      	bne.n	8008008 <vQueueWaitForMessageRestricted+0x40>
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	2200      	movs	r2, #0
 8008004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008008:	f001 fd1c 	bl	8009a44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008010:	2b00      	cmp	r3, #0
 8008012:	d106      	bne.n	8008022 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	3324      	adds	r3, #36	; 0x24
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	68b9      	ldr	r1, [r7, #8]
 800801c:	4618      	mov	r0, r3
 800801e:	f000 fc89 	bl	8008934 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008022:	6978      	ldr	r0, [r7, #20]
 8008024:	f7ff fefb 	bl	8007e1e <prvUnlockQueue>
	}
 8008028:	bf00      	nop
 800802a:	3718      	adds	r7, #24
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}

08008030 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008030:	b580      	push	{r7, lr}
 8008032:	b08e      	sub	sp, #56	; 0x38
 8008034:	af04      	add	r7, sp, #16
 8008036:	60f8      	str	r0, [r7, #12]
 8008038:	60b9      	str	r1, [r7, #8]
 800803a:	607a      	str	r2, [r7, #4]
 800803c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800803e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008040:	2b00      	cmp	r3, #0
 8008042:	d10c      	bne.n	800805e <xTaskCreateStatic+0x2e>
	__asm volatile
 8008044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008048:	b672      	cpsid	i
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	b662      	cpsie	i
 8008058:	623b      	str	r3, [r7, #32]
}
 800805a:	bf00      	nop
 800805c:	e7fe      	b.n	800805c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800805e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008060:	2b00      	cmp	r3, #0
 8008062:	d10c      	bne.n	800807e <xTaskCreateStatic+0x4e>
	__asm volatile
 8008064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008068:	b672      	cpsid	i
 800806a:	f383 8811 	msr	BASEPRI, r3
 800806e:	f3bf 8f6f 	isb	sy
 8008072:	f3bf 8f4f 	dsb	sy
 8008076:	b662      	cpsie	i
 8008078:	61fb      	str	r3, [r7, #28]
}
 800807a:	bf00      	nop
 800807c:	e7fe      	b.n	800807c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800807e:	23bc      	movs	r3, #188	; 0xbc
 8008080:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008082:	693b      	ldr	r3, [r7, #16]
 8008084:	2bbc      	cmp	r3, #188	; 0xbc
 8008086:	d00c      	beq.n	80080a2 <xTaskCreateStatic+0x72>
	__asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800808c:	b672      	cpsid	i
 800808e:	f383 8811 	msr	BASEPRI, r3
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	f3bf 8f4f 	dsb	sy
 800809a:	b662      	cpsie	i
 800809c:	61bb      	str	r3, [r7, #24]
}
 800809e:	bf00      	nop
 80080a0:	e7fe      	b.n	80080a0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80080a2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80080a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d01e      	beq.n	80080e8 <xTaskCreateStatic+0xb8>
 80080aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d01b      	beq.n	80080e8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80080b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080b8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	2202      	movs	r2, #2
 80080be:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80080c2:	2300      	movs	r3, #0
 80080c4:	9303      	str	r3, [sp, #12]
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c8:	9302      	str	r3, [sp, #8]
 80080ca:	f107 0314 	add.w	r3, r7, #20
 80080ce:	9301      	str	r3, [sp, #4]
 80080d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080d2:	9300      	str	r3, [sp, #0]
 80080d4:	683b      	ldr	r3, [r7, #0]
 80080d6:	687a      	ldr	r2, [r7, #4]
 80080d8:	68b9      	ldr	r1, [r7, #8]
 80080da:	68f8      	ldr	r0, [r7, #12]
 80080dc:	f000 f850 	bl	8008180 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80080e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80080e2:	f000 f8f5 	bl	80082d0 <prvAddNewTaskToReadyList>
 80080e6:	e001      	b.n	80080ec <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 80080e8:	2300      	movs	r3, #0
 80080ea:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80080ec:	697b      	ldr	r3, [r7, #20]
	}
 80080ee:	4618      	mov	r0, r3
 80080f0:	3728      	adds	r7, #40	; 0x28
 80080f2:	46bd      	mov	sp, r7
 80080f4:	bd80      	pop	{r7, pc}

080080f6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80080f6:	b580      	push	{r7, lr}
 80080f8:	b08c      	sub	sp, #48	; 0x30
 80080fa:	af04      	add	r7, sp, #16
 80080fc:	60f8      	str	r0, [r7, #12]
 80080fe:	60b9      	str	r1, [r7, #8]
 8008100:	603b      	str	r3, [r7, #0]
 8008102:	4613      	mov	r3, r2
 8008104:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008106:	88fb      	ldrh	r3, [r7, #6]
 8008108:	009b      	lsls	r3, r3, #2
 800810a:	4618      	mov	r0, r3
 800810c:	f001 fd92 	bl	8009c34 <pvPortMalloc>
 8008110:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d00e      	beq.n	8008136 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008118:	20bc      	movs	r0, #188	; 0xbc
 800811a:	f001 fd8b 	bl	8009c34 <pvPortMalloc>
 800811e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d003      	beq.n	800812e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	697a      	ldr	r2, [r7, #20]
 800812a:	631a      	str	r2, [r3, #48]	; 0x30
 800812c:	e005      	b.n	800813a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800812e:	6978      	ldr	r0, [r7, #20]
 8008130:	f001 fe4a 	bl	8009dc8 <vPortFree>
 8008134:	e001      	b.n	800813a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008136:	2300      	movs	r3, #0
 8008138:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800813a:	69fb      	ldr	r3, [r7, #28]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d017      	beq.n	8008170 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008140:	69fb      	ldr	r3, [r7, #28]
 8008142:	2200      	movs	r2, #0
 8008144:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008148:	88fa      	ldrh	r2, [r7, #6]
 800814a:	2300      	movs	r3, #0
 800814c:	9303      	str	r3, [sp, #12]
 800814e:	69fb      	ldr	r3, [r7, #28]
 8008150:	9302      	str	r3, [sp, #8]
 8008152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008154:	9301      	str	r3, [sp, #4]
 8008156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008158:	9300      	str	r3, [sp, #0]
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	68b9      	ldr	r1, [r7, #8]
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 f80e 	bl	8008180 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008164:	69f8      	ldr	r0, [r7, #28]
 8008166:	f000 f8b3 	bl	80082d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800816a:	2301      	movs	r3, #1
 800816c:	61bb      	str	r3, [r7, #24]
 800816e:	e002      	b.n	8008176 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008170:	f04f 33ff 	mov.w	r3, #4294967295
 8008174:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008176:	69bb      	ldr	r3, [r7, #24]
	}
 8008178:	4618      	mov	r0, r3
 800817a:	3720      	adds	r7, #32
 800817c:	46bd      	mov	sp, r7
 800817e:	bd80      	pop	{r7, pc}

08008180 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b088      	sub	sp, #32
 8008184:	af00      	add	r7, sp, #0
 8008186:	60f8      	str	r0, [r7, #12]
 8008188:	60b9      	str	r1, [r7, #8]
 800818a:	607a      	str	r2, [r7, #4]
 800818c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800818e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008190:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	009b      	lsls	r3, r3, #2
 8008196:	461a      	mov	r2, r3
 8008198:	21a5      	movs	r1, #165	; 0xa5
 800819a:	f00e fab4 	bl	8016706 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800819e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081a2:	6879      	ldr	r1, [r7, #4]
 80081a4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80081a8:	440b      	add	r3, r1
 80081aa:	009b      	lsls	r3, r3, #2
 80081ac:	4413      	add	r3, r2
 80081ae:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80081b0:	69bb      	ldr	r3, [r7, #24]
 80081b2:	f023 0307 	bic.w	r3, r3, #7
 80081b6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80081b8:	69bb      	ldr	r3, [r7, #24]
 80081ba:	f003 0307 	and.w	r3, r3, #7
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d00c      	beq.n	80081dc <prvInitialiseNewTask+0x5c>
	__asm volatile
 80081c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c6:	b672      	cpsid	i
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	b662      	cpsie	i
 80081d6:	617b      	str	r3, [r7, #20]
}
 80081d8:	bf00      	nop
 80081da:	e7fe      	b.n	80081da <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80081dc:	68bb      	ldr	r3, [r7, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d01f      	beq.n	8008222 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80081e2:	2300      	movs	r3, #0
 80081e4:	61fb      	str	r3, [r7, #28]
 80081e6:	e012      	b.n	800820e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80081e8:	68ba      	ldr	r2, [r7, #8]
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	4413      	add	r3, r2
 80081ee:	7819      	ldrb	r1, [r3, #0]
 80081f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	4413      	add	r3, r2
 80081f6:	3334      	adds	r3, #52	; 0x34
 80081f8:	460a      	mov	r2, r1
 80081fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80081fc:	68ba      	ldr	r2, [r7, #8]
 80081fe:	69fb      	ldr	r3, [r7, #28]
 8008200:	4413      	add	r3, r2
 8008202:	781b      	ldrb	r3, [r3, #0]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d006      	beq.n	8008216 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008208:	69fb      	ldr	r3, [r7, #28]
 800820a:	3301      	adds	r3, #1
 800820c:	61fb      	str	r3, [r7, #28]
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	2b0f      	cmp	r3, #15
 8008212:	d9e9      	bls.n	80081e8 <prvInitialiseNewTask+0x68>
 8008214:	e000      	b.n	8008218 <prvInitialiseNewTask+0x98>
			{
				break;
 8008216:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800821a:	2200      	movs	r2, #0
 800821c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008220:	e003      	b.n	800822a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	2200      	movs	r2, #0
 8008226:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800822a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800822c:	2b37      	cmp	r3, #55	; 0x37
 800822e:	d901      	bls.n	8008234 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008230:	2337      	movs	r3, #55	; 0x37
 8008232:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008236:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008238:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800823a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800823c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800823e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008242:	2200      	movs	r2, #0
 8008244:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008248:	3304      	adds	r3, #4
 800824a:	4618      	mov	r0, r3
 800824c:	f7fe fd4c 	bl	8006ce8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008252:	3318      	adds	r3, #24
 8008254:	4618      	mov	r0, r3
 8008256:	f7fe fd47 	bl	8006ce8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800825e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008262:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008268:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800826e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008272:	2200      	movs	r2, #0
 8008274:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	2200      	movs	r2, #0
 800827c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008282:	3354      	adds	r3, #84	; 0x54
 8008284:	2260      	movs	r2, #96	; 0x60
 8008286:	2100      	movs	r1, #0
 8008288:	4618      	mov	r0, r3
 800828a:	f00e fa3c 	bl	8016706 <memset>
 800828e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008290:	4a0c      	ldr	r2, [pc, #48]	; (80082c4 <prvInitialiseNewTask+0x144>)
 8008292:	659a      	str	r2, [r3, #88]	; 0x58
 8008294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008296:	4a0c      	ldr	r2, [pc, #48]	; (80082c8 <prvInitialiseNewTask+0x148>)
 8008298:	65da      	str	r2, [r3, #92]	; 0x5c
 800829a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800829c:	4a0b      	ldr	r2, [pc, #44]	; (80082cc <prvInitialiseNewTask+0x14c>)
 800829e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80082a0:	683a      	ldr	r2, [r7, #0]
 80082a2:	68f9      	ldr	r1, [r7, #12]
 80082a4:	69b8      	ldr	r0, [r7, #24]
 80082a6:	f001 fa8f 	bl	80097c8 <pxPortInitialiseStack>
 80082aa:	4602      	mov	r2, r0
 80082ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80082b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d002      	beq.n	80082bc <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80082b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80082ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082bc:	bf00      	nop
 80082be:	3720      	adds	r7, #32
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	0801a700 	.word	0x0801a700
 80082c8:	0801a720 	.word	0x0801a720
 80082cc:	0801a6e0 	.word	0x0801a6e0

080082d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80082d8:	f001 fb80 	bl	80099dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80082dc:	4b2d      	ldr	r3, [pc, #180]	; (8008394 <prvAddNewTaskToReadyList+0xc4>)
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	3301      	adds	r3, #1
 80082e2:	4a2c      	ldr	r2, [pc, #176]	; (8008394 <prvAddNewTaskToReadyList+0xc4>)
 80082e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80082e6:	4b2c      	ldr	r3, [pc, #176]	; (8008398 <prvAddNewTaskToReadyList+0xc8>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d109      	bne.n	8008302 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80082ee:	4a2a      	ldr	r2, [pc, #168]	; (8008398 <prvAddNewTaskToReadyList+0xc8>)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80082f4:	4b27      	ldr	r3, [pc, #156]	; (8008394 <prvAddNewTaskToReadyList+0xc4>)
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d110      	bne.n	800831e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80082fc:	f000 fc4e 	bl	8008b9c <prvInitialiseTaskLists>
 8008300:	e00d      	b.n	800831e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008302:	4b26      	ldr	r3, [pc, #152]	; (800839c <prvAddNewTaskToReadyList+0xcc>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	2b00      	cmp	r3, #0
 8008308:	d109      	bne.n	800831e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800830a:	4b23      	ldr	r3, [pc, #140]	; (8008398 <prvAddNewTaskToReadyList+0xc8>)
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008314:	429a      	cmp	r2, r3
 8008316:	d802      	bhi.n	800831e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008318:	4a1f      	ldr	r2, [pc, #124]	; (8008398 <prvAddNewTaskToReadyList+0xc8>)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800831e:	4b20      	ldr	r3, [pc, #128]	; (80083a0 <prvAddNewTaskToReadyList+0xd0>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	3301      	adds	r3, #1
 8008324:	4a1e      	ldr	r2, [pc, #120]	; (80083a0 <prvAddNewTaskToReadyList+0xd0>)
 8008326:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008328:	4b1d      	ldr	r3, [pc, #116]	; (80083a0 <prvAddNewTaskToReadyList+0xd0>)
 800832a:	681a      	ldr	r2, [r3, #0]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008334:	4b1b      	ldr	r3, [pc, #108]	; (80083a4 <prvAddNewTaskToReadyList+0xd4>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	429a      	cmp	r2, r3
 800833a:	d903      	bls.n	8008344 <prvAddNewTaskToReadyList+0x74>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008340:	4a18      	ldr	r2, [pc, #96]	; (80083a4 <prvAddNewTaskToReadyList+0xd4>)
 8008342:	6013      	str	r3, [r2, #0]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008348:	4613      	mov	r3, r2
 800834a:	009b      	lsls	r3, r3, #2
 800834c:	4413      	add	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4a15      	ldr	r2, [pc, #84]	; (80083a8 <prvAddNewTaskToReadyList+0xd8>)
 8008352:	441a      	add	r2, r3
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	3304      	adds	r3, #4
 8008358:	4619      	mov	r1, r3
 800835a:	4610      	mov	r0, r2
 800835c:	f7fe fcd1 	bl	8006d02 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008360:	f001 fb70 	bl	8009a44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008364:	4b0d      	ldr	r3, [pc, #52]	; (800839c <prvAddNewTaskToReadyList+0xcc>)
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d00e      	beq.n	800838a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800836c:	4b0a      	ldr	r3, [pc, #40]	; (8008398 <prvAddNewTaskToReadyList+0xc8>)
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008376:	429a      	cmp	r2, r3
 8008378:	d207      	bcs.n	800838a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800837a:	4b0c      	ldr	r3, [pc, #48]	; (80083ac <prvAddNewTaskToReadyList+0xdc>)
 800837c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008380:	601a      	str	r2, [r3, #0]
 8008382:	f3bf 8f4f 	dsb	sy
 8008386:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800838a:	bf00      	nop
 800838c:	3708      	adds	r7, #8
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}
 8008392:	bf00      	nop
 8008394:	20005b48 	.word	0x20005b48
 8008398:	20005674 	.word	0x20005674
 800839c:	20005b54 	.word	0x20005b54
 80083a0:	20005b64 	.word	0x20005b64
 80083a4:	20005b50 	.word	0x20005b50
 80083a8:	20005678 	.word	0x20005678
 80083ac:	e000ed04 	.word	0xe000ed04

080083b0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80083b0:	b580      	push	{r7, lr}
 80083b2:	b084      	sub	sp, #16
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80083b8:	2300      	movs	r3, #0
 80083ba:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d019      	beq.n	80083f6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80083c2:	4b14      	ldr	r3, [pc, #80]	; (8008414 <vTaskDelay+0x64>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00c      	beq.n	80083e4 <vTaskDelay+0x34>
	__asm volatile
 80083ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ce:	b672      	cpsid	i
 80083d0:	f383 8811 	msr	BASEPRI, r3
 80083d4:	f3bf 8f6f 	isb	sy
 80083d8:	f3bf 8f4f 	dsb	sy
 80083dc:	b662      	cpsie	i
 80083de:	60bb      	str	r3, [r7, #8]
}
 80083e0:	bf00      	nop
 80083e2:	e7fe      	b.n	80083e2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80083e4:	f000 f88e 	bl	8008504 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80083e8:	2100      	movs	r1, #0
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 fe3c 	bl	8009068 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80083f0:	f000 f896 	bl	8008520 <xTaskResumeAll>
 80083f4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d107      	bne.n	800840c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 80083fc:	4b06      	ldr	r3, [pc, #24]	; (8008418 <vTaskDelay+0x68>)
 80083fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008402:	601a      	str	r2, [r3, #0]
 8008404:	f3bf 8f4f 	dsb	sy
 8008408:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800840c:	bf00      	nop
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}
 8008414:	20005b70 	.word	0x20005b70
 8008418:	e000ed04 	.word	0xe000ed04

0800841c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b08a      	sub	sp, #40	; 0x28
 8008420:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008422:	2300      	movs	r3, #0
 8008424:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008426:	2300      	movs	r3, #0
 8008428:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800842a:	463a      	mov	r2, r7
 800842c:	1d39      	adds	r1, r7, #4
 800842e:	f107 0308 	add.w	r3, r7, #8
 8008432:	4618      	mov	r0, r3
 8008434:	f7fe fc04 	bl	8006c40 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008438:	6839      	ldr	r1, [r7, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	68ba      	ldr	r2, [r7, #8]
 800843e:	9202      	str	r2, [sp, #8]
 8008440:	9301      	str	r3, [sp, #4]
 8008442:	2300      	movs	r3, #0
 8008444:	9300      	str	r3, [sp, #0]
 8008446:	2300      	movs	r3, #0
 8008448:	460a      	mov	r2, r1
 800844a:	4926      	ldr	r1, [pc, #152]	; (80084e4 <vTaskStartScheduler+0xc8>)
 800844c:	4826      	ldr	r0, [pc, #152]	; (80084e8 <vTaskStartScheduler+0xcc>)
 800844e:	f7ff fdef 	bl	8008030 <xTaskCreateStatic>
 8008452:	4603      	mov	r3, r0
 8008454:	4a25      	ldr	r2, [pc, #148]	; (80084ec <vTaskStartScheduler+0xd0>)
 8008456:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008458:	4b24      	ldr	r3, [pc, #144]	; (80084ec <vTaskStartScheduler+0xd0>)
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d002      	beq.n	8008466 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008460:	2301      	movs	r3, #1
 8008462:	617b      	str	r3, [r7, #20]
 8008464:	e001      	b.n	800846a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008466:	2300      	movs	r3, #0
 8008468:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800846a:	697b      	ldr	r3, [r7, #20]
 800846c:	2b01      	cmp	r3, #1
 800846e:	d102      	bne.n	8008476 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008470:	f000 fe4e 	bl	8009110 <xTimerCreateTimerTask>
 8008474:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d11d      	bne.n	80084b8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800847c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008480:	b672      	cpsid	i
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	b662      	cpsie	i
 8008490:	613b      	str	r3, [r7, #16]
}
 8008492:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008494:	4b16      	ldr	r3, [pc, #88]	; (80084f0 <vTaskStartScheduler+0xd4>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	3354      	adds	r3, #84	; 0x54
 800849a:	4a16      	ldr	r2, [pc, #88]	; (80084f4 <vTaskStartScheduler+0xd8>)
 800849c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800849e:	4b16      	ldr	r3, [pc, #88]	; (80084f8 <vTaskStartScheduler+0xdc>)
 80084a0:	f04f 32ff 	mov.w	r2, #4294967295
 80084a4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80084a6:	4b15      	ldr	r3, [pc, #84]	; (80084fc <vTaskStartScheduler+0xe0>)
 80084a8:	2201      	movs	r2, #1
 80084aa:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80084ac:	4b14      	ldr	r3, [pc, #80]	; (8008500 <vTaskStartScheduler+0xe4>)
 80084ae:	2200      	movs	r2, #0
 80084b0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80084b2:	f001 fa15 	bl	80098e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80084b6:	e010      	b.n	80084da <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084be:	d10c      	bne.n	80084da <vTaskStartScheduler+0xbe>
	__asm volatile
 80084c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084c4:	b672      	cpsid	i
 80084c6:	f383 8811 	msr	BASEPRI, r3
 80084ca:	f3bf 8f6f 	isb	sy
 80084ce:	f3bf 8f4f 	dsb	sy
 80084d2:	b662      	cpsie	i
 80084d4:	60fb      	str	r3, [r7, #12]
}
 80084d6:	bf00      	nop
 80084d8:	e7fe      	b.n	80084d8 <vTaskStartScheduler+0xbc>
}
 80084da:	bf00      	nop
 80084dc:	3718      	adds	r7, #24
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	08017720 	.word	0x08017720
 80084e8:	08008b6d 	.word	0x08008b6d
 80084ec:	20005b6c 	.word	0x20005b6c
 80084f0:	20005674 	.word	0x20005674
 80084f4:	20000034 	.word	0x20000034
 80084f8:	20005b68 	.word	0x20005b68
 80084fc:	20005b54 	.word	0x20005b54
 8008500:	20005b4c 	.word	0x20005b4c

08008504 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008504:	b480      	push	{r7}
 8008506:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8008508:	4b04      	ldr	r3, [pc, #16]	; (800851c <vTaskSuspendAll+0x18>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3301      	adds	r3, #1
 800850e:	4a03      	ldr	r2, [pc, #12]	; (800851c <vTaskSuspendAll+0x18>)
 8008510:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8008512:	bf00      	nop
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr
 800851c:	20005b70 	.word	0x20005b70

08008520 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008526:	2300      	movs	r3, #0
 8008528:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800852a:	2300      	movs	r3, #0
 800852c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800852e:	4b43      	ldr	r3, [pc, #268]	; (800863c <xTaskResumeAll+0x11c>)
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	2b00      	cmp	r3, #0
 8008534:	d10c      	bne.n	8008550 <xTaskResumeAll+0x30>
	__asm volatile
 8008536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800853a:	b672      	cpsid	i
 800853c:	f383 8811 	msr	BASEPRI, r3
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	f3bf 8f4f 	dsb	sy
 8008548:	b662      	cpsie	i
 800854a:	603b      	str	r3, [r7, #0]
}
 800854c:	bf00      	nop
 800854e:	e7fe      	b.n	800854e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008550:	f001 fa44 	bl	80099dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008554:	4b39      	ldr	r3, [pc, #228]	; (800863c <xTaskResumeAll+0x11c>)
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	3b01      	subs	r3, #1
 800855a:	4a38      	ldr	r2, [pc, #224]	; (800863c <xTaskResumeAll+0x11c>)
 800855c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800855e:	4b37      	ldr	r3, [pc, #220]	; (800863c <xTaskResumeAll+0x11c>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d162      	bne.n	800862c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008566:	4b36      	ldr	r3, [pc, #216]	; (8008640 <xTaskResumeAll+0x120>)
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d05e      	beq.n	800862c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800856e:	e02f      	b.n	80085d0 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008570:	4b34      	ldr	r3, [pc, #208]	; (8008644 <xTaskResumeAll+0x124>)
 8008572:	68db      	ldr	r3, [r3, #12]
 8008574:	68db      	ldr	r3, [r3, #12]
 8008576:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	3318      	adds	r3, #24
 800857c:	4618      	mov	r0, r3
 800857e:	f7fe fc1d 	bl	8006dbc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	3304      	adds	r3, #4
 8008586:	4618      	mov	r0, r3
 8008588:	f7fe fc18 	bl	8006dbc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008590:	4b2d      	ldr	r3, [pc, #180]	; (8008648 <xTaskResumeAll+0x128>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	429a      	cmp	r2, r3
 8008596:	d903      	bls.n	80085a0 <xTaskResumeAll+0x80>
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800859c:	4a2a      	ldr	r2, [pc, #168]	; (8008648 <xTaskResumeAll+0x128>)
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a4:	4613      	mov	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	4413      	add	r3, r2
 80085aa:	009b      	lsls	r3, r3, #2
 80085ac:	4a27      	ldr	r2, [pc, #156]	; (800864c <xTaskResumeAll+0x12c>)
 80085ae:	441a      	add	r2, r3
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	3304      	adds	r3, #4
 80085b4:	4619      	mov	r1, r3
 80085b6:	4610      	mov	r0, r2
 80085b8:	f7fe fba3 	bl	8006d02 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085c0:	4b23      	ldr	r3, [pc, #140]	; (8008650 <xTaskResumeAll+0x130>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085c6:	429a      	cmp	r2, r3
 80085c8:	d302      	bcc.n	80085d0 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 80085ca:	4b22      	ldr	r3, [pc, #136]	; (8008654 <xTaskResumeAll+0x134>)
 80085cc:	2201      	movs	r2, #1
 80085ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80085d0:	4b1c      	ldr	r3, [pc, #112]	; (8008644 <xTaskResumeAll+0x124>)
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d1cb      	bne.n	8008570 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80085de:	f000 fb81 	bl	8008ce4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80085e2:	4b1d      	ldr	r3, [pc, #116]	; (8008658 <xTaskResumeAll+0x138>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d010      	beq.n	8008610 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80085ee:	f000 f859 	bl	80086a4 <xTaskIncrementTick>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d002      	beq.n	80085fe <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 80085f8:	4b16      	ldr	r3, [pc, #88]	; (8008654 <xTaskResumeAll+0x134>)
 80085fa:	2201      	movs	r2, #1
 80085fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	3b01      	subs	r3, #1
 8008602:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1f1      	bne.n	80085ee <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800860a:	4b13      	ldr	r3, [pc, #76]	; (8008658 <xTaskResumeAll+0x138>)
 800860c:	2200      	movs	r2, #0
 800860e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008610:	4b10      	ldr	r3, [pc, #64]	; (8008654 <xTaskResumeAll+0x134>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d009      	beq.n	800862c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008618:	2301      	movs	r3, #1
 800861a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800861c:	4b0f      	ldr	r3, [pc, #60]	; (800865c <xTaskResumeAll+0x13c>)
 800861e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008622:	601a      	str	r2, [r3, #0]
 8008624:	f3bf 8f4f 	dsb	sy
 8008628:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800862c:	f001 fa0a 	bl	8009a44 <vPortExitCritical>

	return xAlreadyYielded;
 8008630:	68bb      	ldr	r3, [r7, #8]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}
 800863a:	bf00      	nop
 800863c:	20005b70 	.word	0x20005b70
 8008640:	20005b48 	.word	0x20005b48
 8008644:	20005b08 	.word	0x20005b08
 8008648:	20005b50 	.word	0x20005b50
 800864c:	20005678 	.word	0x20005678
 8008650:	20005674 	.word	0x20005674
 8008654:	20005b5c 	.word	0x20005b5c
 8008658:	20005b58 	.word	0x20005b58
 800865c:	e000ed04 	.word	0xe000ed04

08008660 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008660:	b480      	push	{r7}
 8008662:	b083      	sub	sp, #12
 8008664:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008666:	4b05      	ldr	r3, [pc, #20]	; (800867c <xTaskGetTickCount+0x1c>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800866c:	687b      	ldr	r3, [r7, #4]
}
 800866e:	4618      	mov	r0, r3
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr
 800867a:	bf00      	nop
 800867c:	20005b4c 	.word	0x20005b4c

08008680 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008680:	b580      	push	{r7, lr}
 8008682:	b082      	sub	sp, #8
 8008684:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008686:	f001 fa91 	bl	8009bac <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800868a:	2300      	movs	r3, #0
 800868c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800868e:	4b04      	ldr	r3, [pc, #16]	; (80086a0 <xTaskGetTickCountFromISR+0x20>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008694:	683b      	ldr	r3, [r7, #0]
}
 8008696:	4618      	mov	r0, r3
 8008698:	3708      	adds	r7, #8
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}
 800869e:	bf00      	nop
 80086a0:	20005b4c 	.word	0x20005b4c

080086a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80086aa:	2300      	movs	r3, #0
 80086ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086ae:	4b50      	ldr	r3, [pc, #320]	; (80087f0 <xTaskIncrementTick+0x14c>)
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	f040 808b 	bne.w	80087ce <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80086b8:	4b4e      	ldr	r3, [pc, #312]	; (80087f4 <xTaskIncrementTick+0x150>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	3301      	adds	r3, #1
 80086be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80086c0:	4a4c      	ldr	r2, [pc, #304]	; (80087f4 <xTaskIncrementTick+0x150>)
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80086c6:	693b      	ldr	r3, [r7, #16]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d122      	bne.n	8008712 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80086cc:	4b4a      	ldr	r3, [pc, #296]	; (80087f8 <xTaskIncrementTick+0x154>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d00c      	beq.n	80086f0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086da:	b672      	cpsid	i
 80086dc:	f383 8811 	msr	BASEPRI, r3
 80086e0:	f3bf 8f6f 	isb	sy
 80086e4:	f3bf 8f4f 	dsb	sy
 80086e8:	b662      	cpsie	i
 80086ea:	603b      	str	r3, [r7, #0]
}
 80086ec:	bf00      	nop
 80086ee:	e7fe      	b.n	80086ee <xTaskIncrementTick+0x4a>
 80086f0:	4b41      	ldr	r3, [pc, #260]	; (80087f8 <xTaskIncrementTick+0x154>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	60fb      	str	r3, [r7, #12]
 80086f6:	4b41      	ldr	r3, [pc, #260]	; (80087fc <xTaskIncrementTick+0x158>)
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	4a3f      	ldr	r2, [pc, #252]	; (80087f8 <xTaskIncrementTick+0x154>)
 80086fc:	6013      	str	r3, [r2, #0]
 80086fe:	4a3f      	ldr	r2, [pc, #252]	; (80087fc <xTaskIncrementTick+0x158>)
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	6013      	str	r3, [r2, #0]
 8008704:	4b3e      	ldr	r3, [pc, #248]	; (8008800 <xTaskIncrementTick+0x15c>)
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	3301      	adds	r3, #1
 800870a:	4a3d      	ldr	r2, [pc, #244]	; (8008800 <xTaskIncrementTick+0x15c>)
 800870c:	6013      	str	r3, [r2, #0]
 800870e:	f000 fae9 	bl	8008ce4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008712:	4b3c      	ldr	r3, [pc, #240]	; (8008804 <xTaskIncrementTick+0x160>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	693a      	ldr	r2, [r7, #16]
 8008718:	429a      	cmp	r2, r3
 800871a:	d349      	bcc.n	80087b0 <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800871c:	4b36      	ldr	r3, [pc, #216]	; (80087f8 <xTaskIncrementTick+0x154>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d104      	bne.n	8008730 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008726:	4b37      	ldr	r3, [pc, #220]	; (8008804 <xTaskIncrementTick+0x160>)
 8008728:	f04f 32ff 	mov.w	r2, #4294967295
 800872c:	601a      	str	r2, [r3, #0]
					break;
 800872e:	e03f      	b.n	80087b0 <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008730:	4b31      	ldr	r3, [pc, #196]	; (80087f8 <xTaskIncrementTick+0x154>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	68db      	ldr	r3, [r3, #12]
 8008738:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008740:	693a      	ldr	r2, [r7, #16]
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	429a      	cmp	r2, r3
 8008746:	d203      	bcs.n	8008750 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008748:	4a2e      	ldr	r2, [pc, #184]	; (8008804 <xTaskIncrementTick+0x160>)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800874e:	e02f      	b.n	80087b0 <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	3304      	adds	r3, #4
 8008754:	4618      	mov	r0, r3
 8008756:	f7fe fb31 	bl	8006dbc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800875a:	68bb      	ldr	r3, [r7, #8]
 800875c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875e:	2b00      	cmp	r3, #0
 8008760:	d004      	beq.n	800876c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008762:	68bb      	ldr	r3, [r7, #8]
 8008764:	3318      	adds	r3, #24
 8008766:	4618      	mov	r0, r3
 8008768:	f7fe fb28 	bl	8006dbc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800876c:	68bb      	ldr	r3, [r7, #8]
 800876e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008770:	4b25      	ldr	r3, [pc, #148]	; (8008808 <xTaskIncrementTick+0x164>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	429a      	cmp	r2, r3
 8008776:	d903      	bls.n	8008780 <xTaskIncrementTick+0xdc>
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877c:	4a22      	ldr	r2, [pc, #136]	; (8008808 <xTaskIncrementTick+0x164>)
 800877e:	6013      	str	r3, [r2, #0]
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008784:	4613      	mov	r3, r2
 8008786:	009b      	lsls	r3, r3, #2
 8008788:	4413      	add	r3, r2
 800878a:	009b      	lsls	r3, r3, #2
 800878c:	4a1f      	ldr	r2, [pc, #124]	; (800880c <xTaskIncrementTick+0x168>)
 800878e:	441a      	add	r2, r3
 8008790:	68bb      	ldr	r3, [r7, #8]
 8008792:	3304      	adds	r3, #4
 8008794:	4619      	mov	r1, r3
 8008796:	4610      	mov	r0, r2
 8008798:	f7fe fab3 	bl	8006d02 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800879c:	68bb      	ldr	r3, [r7, #8]
 800879e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a0:	4b1b      	ldr	r3, [pc, #108]	; (8008810 <xTaskIncrementTick+0x16c>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087a6:	429a      	cmp	r2, r3
 80087a8:	d3b8      	bcc.n	800871c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80087aa:	2301      	movs	r3, #1
 80087ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087ae:	e7b5      	b.n	800871c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80087b0:	4b17      	ldr	r3, [pc, #92]	; (8008810 <xTaskIncrementTick+0x16c>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087b6:	4915      	ldr	r1, [pc, #84]	; (800880c <xTaskIncrementTick+0x168>)
 80087b8:	4613      	mov	r3, r2
 80087ba:	009b      	lsls	r3, r3, #2
 80087bc:	4413      	add	r3, r2
 80087be:	009b      	lsls	r3, r3, #2
 80087c0:	440b      	add	r3, r1
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	2b01      	cmp	r3, #1
 80087c6:	d907      	bls.n	80087d8 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 80087c8:	2301      	movs	r3, #1
 80087ca:	617b      	str	r3, [r7, #20]
 80087cc:	e004      	b.n	80087d8 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80087ce:	4b11      	ldr	r3, [pc, #68]	; (8008814 <xTaskIncrementTick+0x170>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	3301      	adds	r3, #1
 80087d4:	4a0f      	ldr	r2, [pc, #60]	; (8008814 <xTaskIncrementTick+0x170>)
 80087d6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80087d8:	4b0f      	ldr	r3, [pc, #60]	; (8008818 <xTaskIncrementTick+0x174>)
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 80087e0:	2301      	movs	r3, #1
 80087e2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80087e4:	697b      	ldr	r3, [r7, #20]
}
 80087e6:	4618      	mov	r0, r3
 80087e8:	3718      	adds	r7, #24
 80087ea:	46bd      	mov	sp, r7
 80087ec:	bd80      	pop	{r7, pc}
 80087ee:	bf00      	nop
 80087f0:	20005b70 	.word	0x20005b70
 80087f4:	20005b4c 	.word	0x20005b4c
 80087f8:	20005b00 	.word	0x20005b00
 80087fc:	20005b04 	.word	0x20005b04
 8008800:	20005b60 	.word	0x20005b60
 8008804:	20005b68 	.word	0x20005b68
 8008808:	20005b50 	.word	0x20005b50
 800880c:	20005678 	.word	0x20005678
 8008810:	20005674 	.word	0x20005674
 8008814:	20005b58 	.word	0x20005b58
 8008818:	20005b5c 	.word	0x20005b5c

0800881c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800881c:	b480      	push	{r7}
 800881e:	b085      	sub	sp, #20
 8008820:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008822:	4b2b      	ldr	r3, [pc, #172]	; (80088d0 <vTaskSwitchContext+0xb4>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d003      	beq.n	8008832 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800882a:	4b2a      	ldr	r3, [pc, #168]	; (80088d4 <vTaskSwitchContext+0xb8>)
 800882c:	2201      	movs	r2, #1
 800882e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008830:	e048      	b.n	80088c4 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 8008832:	4b28      	ldr	r3, [pc, #160]	; (80088d4 <vTaskSwitchContext+0xb8>)
 8008834:	2200      	movs	r2, #0
 8008836:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008838:	4b27      	ldr	r3, [pc, #156]	; (80088d8 <vTaskSwitchContext+0xbc>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	60fb      	str	r3, [r7, #12]
 800883e:	e012      	b.n	8008866 <vTaskSwitchContext+0x4a>
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10c      	bne.n	8008860 <vTaskSwitchContext+0x44>
	__asm volatile
 8008846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800884a:	b672      	cpsid	i
 800884c:	f383 8811 	msr	BASEPRI, r3
 8008850:	f3bf 8f6f 	isb	sy
 8008854:	f3bf 8f4f 	dsb	sy
 8008858:	b662      	cpsie	i
 800885a:	607b      	str	r3, [r7, #4]
}
 800885c:	bf00      	nop
 800885e:	e7fe      	b.n	800885e <vTaskSwitchContext+0x42>
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3b01      	subs	r3, #1
 8008864:	60fb      	str	r3, [r7, #12]
 8008866:	491d      	ldr	r1, [pc, #116]	; (80088dc <vTaskSwitchContext+0xc0>)
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	4613      	mov	r3, r2
 800886c:	009b      	lsls	r3, r3, #2
 800886e:	4413      	add	r3, r2
 8008870:	009b      	lsls	r3, r3, #2
 8008872:	440b      	add	r3, r1
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d0e2      	beq.n	8008840 <vTaskSwitchContext+0x24>
 800887a:	68fa      	ldr	r2, [r7, #12]
 800887c:	4613      	mov	r3, r2
 800887e:	009b      	lsls	r3, r3, #2
 8008880:	4413      	add	r3, r2
 8008882:	009b      	lsls	r3, r3, #2
 8008884:	4a15      	ldr	r2, [pc, #84]	; (80088dc <vTaskSwitchContext+0xc0>)
 8008886:	4413      	add	r3, r2
 8008888:	60bb      	str	r3, [r7, #8]
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	685a      	ldr	r2, [r3, #4]
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	605a      	str	r2, [r3, #4]
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	685a      	ldr	r2, [r3, #4]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	3308      	adds	r3, #8
 800889c:	429a      	cmp	r2, r3
 800889e:	d104      	bne.n	80088aa <vTaskSwitchContext+0x8e>
 80088a0:	68bb      	ldr	r3, [r7, #8]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	685a      	ldr	r2, [r3, #4]
 80088a6:	68bb      	ldr	r3, [r7, #8]
 80088a8:	605a      	str	r2, [r3, #4]
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	685b      	ldr	r3, [r3, #4]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	4a0b      	ldr	r2, [pc, #44]	; (80088e0 <vTaskSwitchContext+0xc4>)
 80088b2:	6013      	str	r3, [r2, #0]
 80088b4:	4a08      	ldr	r2, [pc, #32]	; (80088d8 <vTaskSwitchContext+0xbc>)
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80088ba:	4b09      	ldr	r3, [pc, #36]	; (80088e0 <vTaskSwitchContext+0xc4>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	3354      	adds	r3, #84	; 0x54
 80088c0:	4a08      	ldr	r2, [pc, #32]	; (80088e4 <vTaskSwitchContext+0xc8>)
 80088c2:	6013      	str	r3, [r2, #0]
}
 80088c4:	bf00      	nop
 80088c6:	3714      	adds	r7, #20
 80088c8:	46bd      	mov	sp, r7
 80088ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ce:	4770      	bx	lr
 80088d0:	20005b70 	.word	0x20005b70
 80088d4:	20005b5c 	.word	0x20005b5c
 80088d8:	20005b50 	.word	0x20005b50
 80088dc:	20005678 	.word	0x20005678
 80088e0:	20005674 	.word	0x20005674
 80088e4:	20000034 	.word	0x20000034

080088e8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b084      	sub	sp, #16
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d10c      	bne.n	8008912 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80088f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088fc:	b672      	cpsid	i
 80088fe:	f383 8811 	msr	BASEPRI, r3
 8008902:	f3bf 8f6f 	isb	sy
 8008906:	f3bf 8f4f 	dsb	sy
 800890a:	b662      	cpsie	i
 800890c:	60fb      	str	r3, [r7, #12]
}
 800890e:	bf00      	nop
 8008910:	e7fe      	b.n	8008910 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008912:	4b07      	ldr	r3, [pc, #28]	; (8008930 <vTaskPlaceOnEventList+0x48>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3318      	adds	r3, #24
 8008918:	4619      	mov	r1, r3
 800891a:	6878      	ldr	r0, [r7, #4]
 800891c:	f7fe fa15 	bl	8006d4a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008920:	2101      	movs	r1, #1
 8008922:	6838      	ldr	r0, [r7, #0]
 8008924:	f000 fba0 	bl	8009068 <prvAddCurrentTaskToDelayedList>
}
 8008928:	bf00      	nop
 800892a:	3710      	adds	r7, #16
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}
 8008930:	20005674 	.word	0x20005674

08008934 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008934:	b580      	push	{r7, lr}
 8008936:	b086      	sub	sp, #24
 8008938:	af00      	add	r7, sp, #0
 800893a:	60f8      	str	r0, [r7, #12]
 800893c:	60b9      	str	r1, [r7, #8]
 800893e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d10c      	bne.n	8008960 <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 8008946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800894a:	b672      	cpsid	i
 800894c:	f383 8811 	msr	BASEPRI, r3
 8008950:	f3bf 8f6f 	isb	sy
 8008954:	f3bf 8f4f 	dsb	sy
 8008958:	b662      	cpsie	i
 800895a:	617b      	str	r3, [r7, #20]
}
 800895c:	bf00      	nop
 800895e:	e7fe      	b.n	800895e <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008960:	4b0a      	ldr	r3, [pc, #40]	; (800898c <vTaskPlaceOnEventListRestricted+0x58>)
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	3318      	adds	r3, #24
 8008966:	4619      	mov	r1, r3
 8008968:	68f8      	ldr	r0, [r7, #12]
 800896a:	f7fe f9ca 	bl	8006d02 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d002      	beq.n	800897a <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 8008974:	f04f 33ff 	mov.w	r3, #4294967295
 8008978:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800897a:	6879      	ldr	r1, [r7, #4]
 800897c:	68b8      	ldr	r0, [r7, #8]
 800897e:	f000 fb73 	bl	8009068 <prvAddCurrentTaskToDelayedList>
	}
 8008982:	bf00      	nop
 8008984:	3718      	adds	r7, #24
 8008986:	46bd      	mov	sp, r7
 8008988:	bd80      	pop	{r7, pc}
 800898a:	bf00      	nop
 800898c:	20005674 	.word	0x20005674

08008990 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b086      	sub	sp, #24
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	68db      	ldr	r3, [r3, #12]
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80089a0:	693b      	ldr	r3, [r7, #16]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d10c      	bne.n	80089c0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 80089a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089aa:	b672      	cpsid	i
 80089ac:	f383 8811 	msr	BASEPRI, r3
 80089b0:	f3bf 8f6f 	isb	sy
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	b662      	cpsie	i
 80089ba:	60fb      	str	r3, [r7, #12]
}
 80089bc:	bf00      	nop
 80089be:	e7fe      	b.n	80089be <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80089c0:	693b      	ldr	r3, [r7, #16]
 80089c2:	3318      	adds	r3, #24
 80089c4:	4618      	mov	r0, r3
 80089c6:	f7fe f9f9 	bl	8006dbc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089ca:	4b1e      	ldr	r3, [pc, #120]	; (8008a44 <xTaskRemoveFromEventList+0xb4>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d11d      	bne.n	8008a0e <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	3304      	adds	r3, #4
 80089d6:	4618      	mov	r0, r3
 80089d8:	f7fe f9f0 	bl	8006dbc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089e0:	4b19      	ldr	r3, [pc, #100]	; (8008a48 <xTaskRemoveFromEventList+0xb8>)
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d903      	bls.n	80089f0 <xTaskRemoveFromEventList+0x60>
 80089e8:	693b      	ldr	r3, [r7, #16]
 80089ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ec:	4a16      	ldr	r2, [pc, #88]	; (8008a48 <xTaskRemoveFromEventList+0xb8>)
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	693b      	ldr	r3, [r7, #16]
 80089f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089f4:	4613      	mov	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	4413      	add	r3, r2
 80089fa:	009b      	lsls	r3, r3, #2
 80089fc:	4a13      	ldr	r2, [pc, #76]	; (8008a4c <xTaskRemoveFromEventList+0xbc>)
 80089fe:	441a      	add	r2, r3
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	3304      	adds	r3, #4
 8008a04:	4619      	mov	r1, r3
 8008a06:	4610      	mov	r0, r2
 8008a08:	f7fe f97b 	bl	8006d02 <vListInsertEnd>
 8008a0c:	e005      	b.n	8008a1a <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	3318      	adds	r3, #24
 8008a12:	4619      	mov	r1, r3
 8008a14:	480e      	ldr	r0, [pc, #56]	; (8008a50 <xTaskRemoveFromEventList+0xc0>)
 8008a16:	f7fe f974 	bl	8006d02 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1e:	4b0d      	ldr	r3, [pc, #52]	; (8008a54 <xTaskRemoveFromEventList+0xc4>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a24:	429a      	cmp	r2, r3
 8008a26:	d905      	bls.n	8008a34 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a2c:	4b0a      	ldr	r3, [pc, #40]	; (8008a58 <xTaskRemoveFromEventList+0xc8>)
 8008a2e:	2201      	movs	r2, #1
 8008a30:	601a      	str	r2, [r3, #0]
 8008a32:	e001      	b.n	8008a38 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 8008a34:	2300      	movs	r3, #0
 8008a36:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008a38:	697b      	ldr	r3, [r7, #20]
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3718      	adds	r7, #24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	bd80      	pop	{r7, pc}
 8008a42:	bf00      	nop
 8008a44:	20005b70 	.word	0x20005b70
 8008a48:	20005b50 	.word	0x20005b50
 8008a4c:	20005678 	.word	0x20005678
 8008a50:	20005b08 	.word	0x20005b08
 8008a54:	20005674 	.word	0x20005674
 8008a58:	20005b5c 	.word	0x20005b5c

08008a5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a5c:	b480      	push	{r7}
 8008a5e:	b083      	sub	sp, #12
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a64:	4b06      	ldr	r3, [pc, #24]	; (8008a80 <vTaskInternalSetTimeOutState+0x24>)
 8008a66:	681a      	ldr	r2, [r3, #0]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a6c:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <vTaskInternalSetTimeOutState+0x28>)
 8008a6e:	681a      	ldr	r2, [r3, #0]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	605a      	str	r2, [r3, #4]
}
 8008a74:	bf00      	nop
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	20005b60 	.word	0x20005b60
 8008a84:	20005b4c 	.word	0x20005b4c

08008a88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b088      	sub	sp, #32
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
 8008a90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d10c      	bne.n	8008ab2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8008a98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a9c:	b672      	cpsid	i
 8008a9e:	f383 8811 	msr	BASEPRI, r3
 8008aa2:	f3bf 8f6f 	isb	sy
 8008aa6:	f3bf 8f4f 	dsb	sy
 8008aaa:	b662      	cpsie	i
 8008aac:	613b      	str	r3, [r7, #16]
}
 8008aae:	bf00      	nop
 8008ab0:	e7fe      	b.n	8008ab0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8008ab2:	683b      	ldr	r3, [r7, #0]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d10c      	bne.n	8008ad2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8008ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008abc:	b672      	cpsid	i
 8008abe:	f383 8811 	msr	BASEPRI, r3
 8008ac2:	f3bf 8f6f 	isb	sy
 8008ac6:	f3bf 8f4f 	dsb	sy
 8008aca:	b662      	cpsie	i
 8008acc:	60fb      	str	r3, [r7, #12]
}
 8008ace:	bf00      	nop
 8008ad0:	e7fe      	b.n	8008ad0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8008ad2:	f000 ff83 	bl	80099dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ad6:	4b1d      	ldr	r3, [pc, #116]	; (8008b4c <xTaskCheckForTimeOut+0xc4>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	685b      	ldr	r3, [r3, #4]
 8008ae0:	69ba      	ldr	r2, [r7, #24]
 8008ae2:	1ad3      	subs	r3, r2, r3
 8008ae4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008aee:	d102      	bne.n	8008af6 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008af0:	2300      	movs	r3, #0
 8008af2:	61fb      	str	r3, [r7, #28]
 8008af4:	e023      	b.n	8008b3e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681a      	ldr	r2, [r3, #0]
 8008afa:	4b15      	ldr	r3, [pc, #84]	; (8008b50 <xTaskCheckForTimeOut+0xc8>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d007      	beq.n	8008b12 <xTaskCheckForTimeOut+0x8a>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	429a      	cmp	r2, r3
 8008b0a:	d302      	bcc.n	8008b12 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	61fb      	str	r3, [r7, #28]
 8008b10:	e015      	b.n	8008b3e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	697a      	ldr	r2, [r7, #20]
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d20b      	bcs.n	8008b34 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	681a      	ldr	r2, [r3, #0]
 8008b20:	697b      	ldr	r3, [r7, #20]
 8008b22:	1ad2      	subs	r2, r2, r3
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b28:	6878      	ldr	r0, [r7, #4]
 8008b2a:	f7ff ff97 	bl	8008a5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	61fb      	str	r3, [r7, #28]
 8008b32:	e004      	b.n	8008b3e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b34:	683b      	ldr	r3, [r7, #0]
 8008b36:	2200      	movs	r2, #0
 8008b38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008b3e:	f000 ff81 	bl	8009a44 <vPortExitCritical>

	return xReturn;
 8008b42:	69fb      	ldr	r3, [r7, #28]
}
 8008b44:	4618      	mov	r0, r3
 8008b46:	3720      	adds	r7, #32
 8008b48:	46bd      	mov	sp, r7
 8008b4a:	bd80      	pop	{r7, pc}
 8008b4c:	20005b4c 	.word	0x20005b4c
 8008b50:	20005b60 	.word	0x20005b60

08008b54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b54:	b480      	push	{r7}
 8008b56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b58:	4b03      	ldr	r3, [pc, #12]	; (8008b68 <vTaskMissedYield+0x14>)
 8008b5a:	2201      	movs	r2, #1
 8008b5c:	601a      	str	r2, [r3, #0]
}
 8008b5e:	bf00      	nop
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr
 8008b68:	20005b5c 	.word	0x20005b5c

08008b6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b74:	f000 f852 	bl	8008c1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b78:	4b06      	ldr	r3, [pc, #24]	; (8008b94 <prvIdleTask+0x28>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d9f9      	bls.n	8008b74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b80:	4b05      	ldr	r3, [pc, #20]	; (8008b98 <prvIdleTask+0x2c>)
 8008b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b86:	601a      	str	r2, [r3, #0]
 8008b88:	f3bf 8f4f 	dsb	sy
 8008b8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008b90:	e7f0      	b.n	8008b74 <prvIdleTask+0x8>
 8008b92:	bf00      	nop
 8008b94:	20005678 	.word	0x20005678
 8008b98:	e000ed04 	.word	0xe000ed04

08008b9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	607b      	str	r3, [r7, #4]
 8008ba6:	e00c      	b.n	8008bc2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	4613      	mov	r3, r2
 8008bac:	009b      	lsls	r3, r3, #2
 8008bae:	4413      	add	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4a12      	ldr	r2, [pc, #72]	; (8008bfc <prvInitialiseTaskLists+0x60>)
 8008bb4:	4413      	add	r3, r2
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	f7fe f876 	bl	8006ca8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	3301      	adds	r3, #1
 8008bc0:	607b      	str	r3, [r7, #4]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2b37      	cmp	r3, #55	; 0x37
 8008bc6:	d9ef      	bls.n	8008ba8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008bc8:	480d      	ldr	r0, [pc, #52]	; (8008c00 <prvInitialiseTaskLists+0x64>)
 8008bca:	f7fe f86d 	bl	8006ca8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008bce:	480d      	ldr	r0, [pc, #52]	; (8008c04 <prvInitialiseTaskLists+0x68>)
 8008bd0:	f7fe f86a 	bl	8006ca8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008bd4:	480c      	ldr	r0, [pc, #48]	; (8008c08 <prvInitialiseTaskLists+0x6c>)
 8008bd6:	f7fe f867 	bl	8006ca8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008bda:	480c      	ldr	r0, [pc, #48]	; (8008c0c <prvInitialiseTaskLists+0x70>)
 8008bdc:	f7fe f864 	bl	8006ca8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008be0:	480b      	ldr	r0, [pc, #44]	; (8008c10 <prvInitialiseTaskLists+0x74>)
 8008be2:	f7fe f861 	bl	8006ca8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008be6:	4b0b      	ldr	r3, [pc, #44]	; (8008c14 <prvInitialiseTaskLists+0x78>)
 8008be8:	4a05      	ldr	r2, [pc, #20]	; (8008c00 <prvInitialiseTaskLists+0x64>)
 8008bea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008bec:	4b0a      	ldr	r3, [pc, #40]	; (8008c18 <prvInitialiseTaskLists+0x7c>)
 8008bee:	4a05      	ldr	r2, [pc, #20]	; (8008c04 <prvInitialiseTaskLists+0x68>)
 8008bf0:	601a      	str	r2, [r3, #0]
}
 8008bf2:	bf00      	nop
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}
 8008bfa:	bf00      	nop
 8008bfc:	20005678 	.word	0x20005678
 8008c00:	20005ad8 	.word	0x20005ad8
 8008c04:	20005aec 	.word	0x20005aec
 8008c08:	20005b08 	.word	0x20005b08
 8008c0c:	20005b1c 	.word	0x20005b1c
 8008c10:	20005b34 	.word	0x20005b34
 8008c14:	20005b00 	.word	0x20005b00
 8008c18:	20005b04 	.word	0x20005b04

08008c1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c22:	e019      	b.n	8008c58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008c24:	f000 feda 	bl	80099dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c28:	4b10      	ldr	r3, [pc, #64]	; (8008c6c <prvCheckTasksWaitingTermination+0x50>)
 8008c2a:	68db      	ldr	r3, [r3, #12]
 8008c2c:	68db      	ldr	r3, [r3, #12]
 8008c2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	3304      	adds	r3, #4
 8008c34:	4618      	mov	r0, r3
 8008c36:	f7fe f8c1 	bl	8006dbc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c3a:	4b0d      	ldr	r3, [pc, #52]	; (8008c70 <prvCheckTasksWaitingTermination+0x54>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3b01      	subs	r3, #1
 8008c40:	4a0b      	ldr	r2, [pc, #44]	; (8008c70 <prvCheckTasksWaitingTermination+0x54>)
 8008c42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c44:	4b0b      	ldr	r3, [pc, #44]	; (8008c74 <prvCheckTasksWaitingTermination+0x58>)
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	3b01      	subs	r3, #1
 8008c4a:	4a0a      	ldr	r2, [pc, #40]	; (8008c74 <prvCheckTasksWaitingTermination+0x58>)
 8008c4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008c4e:	f000 fef9 	bl	8009a44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c52:	6878      	ldr	r0, [r7, #4]
 8008c54:	f000 f810 	bl	8008c78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c58:	4b06      	ldr	r3, [pc, #24]	; (8008c74 <prvCheckTasksWaitingTermination+0x58>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d1e1      	bne.n	8008c24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c60:	bf00      	nop
 8008c62:	bf00      	nop
 8008c64:	3708      	adds	r7, #8
 8008c66:	46bd      	mov	sp, r7
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	20005b1c 	.word	0x20005b1c
 8008c70:	20005b48 	.word	0x20005b48
 8008c74:	20005b30 	.word	0x20005b30

08008c78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c78:	b580      	push	{r7, lr}
 8008c7a:	b084      	sub	sp, #16
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	3354      	adds	r3, #84	; 0x54
 8008c84:	4618      	mov	r0, r3
 8008c86:	f00d fe3f 	bl	8016908 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d108      	bne.n	8008ca6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f001 f895 	bl	8009dc8 <vPortFree>
				vPortFree( pxTCB );
 8008c9e:	6878      	ldr	r0, [r7, #4]
 8008ca0:	f001 f892 	bl	8009dc8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008ca4:	e01a      	b.n	8008cdc <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008cac:	2b01      	cmp	r3, #1
 8008cae:	d103      	bne.n	8008cb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f001 f889 	bl	8009dc8 <vPortFree>
	}
 8008cb6:	e011      	b.n	8008cdc <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008cbe:	2b02      	cmp	r3, #2
 8008cc0:	d00c      	beq.n	8008cdc <prvDeleteTCB+0x64>
	__asm volatile
 8008cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cc6:	b672      	cpsid	i
 8008cc8:	f383 8811 	msr	BASEPRI, r3
 8008ccc:	f3bf 8f6f 	isb	sy
 8008cd0:	f3bf 8f4f 	dsb	sy
 8008cd4:	b662      	cpsie	i
 8008cd6:	60fb      	str	r3, [r7, #12]
}
 8008cd8:	bf00      	nop
 8008cda:	e7fe      	b.n	8008cda <prvDeleteTCB+0x62>
	}
 8008cdc:	bf00      	nop
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b083      	sub	sp, #12
 8008ce8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cea:	4b0c      	ldr	r3, [pc, #48]	; (8008d1c <prvResetNextTaskUnblockTime+0x38>)
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d104      	bne.n	8008cfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008cf4:	4b0a      	ldr	r3, [pc, #40]	; (8008d20 <prvResetNextTaskUnblockTime+0x3c>)
 8008cf6:	f04f 32ff 	mov.w	r2, #4294967295
 8008cfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008cfc:	e008      	b.n	8008d10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cfe:	4b07      	ldr	r3, [pc, #28]	; (8008d1c <prvResetNextTaskUnblockTime+0x38>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	68db      	ldr	r3, [r3, #12]
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	4a04      	ldr	r2, [pc, #16]	; (8008d20 <prvResetNextTaskUnblockTime+0x3c>)
 8008d0e:	6013      	str	r3, [r2, #0]
}
 8008d10:	bf00      	nop
 8008d12:	370c      	adds	r7, #12
 8008d14:	46bd      	mov	sp, r7
 8008d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1a:	4770      	bx	lr
 8008d1c:	20005b00 	.word	0x20005b00
 8008d20:	20005b68 	.word	0x20005b68

08008d24 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8008d2a:	4b05      	ldr	r3, [pc, #20]	; (8008d40 <xTaskGetCurrentTaskHandle+0x1c>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008d30:	687b      	ldr	r3, [r7, #4]
	}
 8008d32:	4618      	mov	r0, r3
 8008d34:	370c      	adds	r7, #12
 8008d36:	46bd      	mov	sp, r7
 8008d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3c:	4770      	bx	lr
 8008d3e:	bf00      	nop
 8008d40:	20005674 	.word	0x20005674

08008d44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008d4a:	4b0b      	ldr	r3, [pc, #44]	; (8008d78 <xTaskGetSchedulerState+0x34>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d102      	bne.n	8008d58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008d52:	2301      	movs	r3, #1
 8008d54:	607b      	str	r3, [r7, #4]
 8008d56:	e008      	b.n	8008d6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d58:	4b08      	ldr	r3, [pc, #32]	; (8008d7c <xTaskGetSchedulerState+0x38>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d102      	bne.n	8008d66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008d60:	2302      	movs	r3, #2
 8008d62:	607b      	str	r3, [r7, #4]
 8008d64:	e001      	b.n	8008d6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008d66:	2300      	movs	r3, #0
 8008d68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008d6a:	687b      	ldr	r3, [r7, #4]
	}
 8008d6c:	4618      	mov	r0, r3
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr
 8008d78:	20005b54 	.word	0x20005b54
 8008d7c:	20005b70 	.word	0x20005b70

08008d80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008d80:	b580      	push	{r7, lr}
 8008d82:	b084      	sub	sp, #16
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d051      	beq.n	8008e3a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008d96:	68bb      	ldr	r3, [r7, #8]
 8008d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d9a:	4b2a      	ldr	r3, [pc, #168]	; (8008e44 <xTaskPriorityInherit+0xc4>)
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d241      	bcs.n	8008e28 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	699b      	ldr	r3, [r3, #24]
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	db06      	blt.n	8008dba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dac:	4b25      	ldr	r3, [pc, #148]	; (8008e44 <xTaskPriorityInherit+0xc4>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008db2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008db6:	68bb      	ldr	r3, [r7, #8]
 8008db8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008dba:	68bb      	ldr	r3, [r7, #8]
 8008dbc:	6959      	ldr	r1, [r3, #20]
 8008dbe:	68bb      	ldr	r3, [r7, #8]
 8008dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dc2:	4613      	mov	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	4413      	add	r3, r2
 8008dc8:	009b      	lsls	r3, r3, #2
 8008dca:	4a1f      	ldr	r2, [pc, #124]	; (8008e48 <xTaskPriorityInherit+0xc8>)
 8008dcc:	4413      	add	r3, r2
 8008dce:	4299      	cmp	r1, r3
 8008dd0:	d122      	bne.n	8008e18 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008dd2:	68bb      	ldr	r3, [r7, #8]
 8008dd4:	3304      	adds	r3, #4
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	f7fd fff0 	bl	8006dbc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008ddc:	4b19      	ldr	r3, [pc, #100]	; (8008e44 <xTaskPriorityInherit+0xc4>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dea:	4b18      	ldr	r3, [pc, #96]	; (8008e4c <xTaskPriorityInherit+0xcc>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	429a      	cmp	r2, r3
 8008df0:	d903      	bls.n	8008dfa <xTaskPriorityInherit+0x7a>
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df6:	4a15      	ldr	r2, [pc, #84]	; (8008e4c <xTaskPriorityInherit+0xcc>)
 8008df8:	6013      	str	r3, [r2, #0]
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dfe:	4613      	mov	r3, r2
 8008e00:	009b      	lsls	r3, r3, #2
 8008e02:	4413      	add	r3, r2
 8008e04:	009b      	lsls	r3, r3, #2
 8008e06:	4a10      	ldr	r2, [pc, #64]	; (8008e48 <xTaskPriorityInherit+0xc8>)
 8008e08:	441a      	add	r2, r3
 8008e0a:	68bb      	ldr	r3, [r7, #8]
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	4619      	mov	r1, r3
 8008e10:	4610      	mov	r0, r2
 8008e12:	f7fd ff76 	bl	8006d02 <vListInsertEnd>
 8008e16:	e004      	b.n	8008e22 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008e18:	4b0a      	ldr	r3, [pc, #40]	; (8008e44 <xTaskPriorityInherit+0xc4>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008e22:	2301      	movs	r3, #1
 8008e24:	60fb      	str	r3, [r7, #12]
 8008e26:	e008      	b.n	8008e3a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008e2c:	4b05      	ldr	r3, [pc, #20]	; (8008e44 <xTaskPriorityInherit+0xc4>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d201      	bcs.n	8008e3a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008e36:	2301      	movs	r3, #1
 8008e38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
	}
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	3710      	adds	r7, #16
 8008e40:	46bd      	mov	sp, r7
 8008e42:	bd80      	pop	{r7, pc}
 8008e44:	20005674 	.word	0x20005674
 8008e48:	20005678 	.word	0x20005678
 8008e4c:	20005b50 	.word	0x20005b50

08008e50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	b086      	sub	sp, #24
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d05a      	beq.n	8008f1c <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008e66:	4b30      	ldr	r3, [pc, #192]	; (8008f28 <xTaskPriorityDisinherit+0xd8>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	693a      	ldr	r2, [r7, #16]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d00c      	beq.n	8008e8a <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8008e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e74:	b672      	cpsid	i
 8008e76:	f383 8811 	msr	BASEPRI, r3
 8008e7a:	f3bf 8f6f 	isb	sy
 8008e7e:	f3bf 8f4f 	dsb	sy
 8008e82:	b662      	cpsie	i
 8008e84:	60fb      	str	r3, [r7, #12]
}
 8008e86:	bf00      	nop
 8008e88:	e7fe      	b.n	8008e88 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d10c      	bne.n	8008eac <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8008e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e96:	b672      	cpsid	i
 8008e98:	f383 8811 	msr	BASEPRI, r3
 8008e9c:	f3bf 8f6f 	isb	sy
 8008ea0:	f3bf 8f4f 	dsb	sy
 8008ea4:	b662      	cpsie	i
 8008ea6:	60bb      	str	r3, [r7, #8]
}
 8008ea8:	bf00      	nop
 8008eaa:	e7fe      	b.n	8008eaa <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008eb0:	1e5a      	subs	r2, r3, #1
 8008eb2:	693b      	ldr	r3, [r7, #16]
 8008eb4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008eb6:	693b      	ldr	r3, [r7, #16]
 8008eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eba:	693b      	ldr	r3, [r7, #16]
 8008ebc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d02c      	beq.n	8008f1c <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d128      	bne.n	8008f1c <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	3304      	adds	r3, #4
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fd ff74 	bl	8006dbc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008edc:	693b      	ldr	r3, [r7, #16]
 8008ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eec:	4b0f      	ldr	r3, [pc, #60]	; (8008f2c <xTaskPriorityDisinherit+0xdc>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	429a      	cmp	r2, r3
 8008ef2:	d903      	bls.n	8008efc <xTaskPriorityDisinherit+0xac>
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef8:	4a0c      	ldr	r2, [pc, #48]	; (8008f2c <xTaskPriorityDisinherit+0xdc>)
 8008efa:	6013      	str	r3, [r2, #0]
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f00:	4613      	mov	r3, r2
 8008f02:	009b      	lsls	r3, r3, #2
 8008f04:	4413      	add	r3, r2
 8008f06:	009b      	lsls	r3, r3, #2
 8008f08:	4a09      	ldr	r2, [pc, #36]	; (8008f30 <xTaskPriorityDisinherit+0xe0>)
 8008f0a:	441a      	add	r2, r3
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	3304      	adds	r3, #4
 8008f10:	4619      	mov	r1, r3
 8008f12:	4610      	mov	r0, r2
 8008f14:	f7fd fef5 	bl	8006d02 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008f1c:	697b      	ldr	r3, [r7, #20]
	}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3718      	adds	r7, #24
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20005674 	.word	0x20005674
 8008f2c:	20005b50 	.word	0x20005b50
 8008f30:	20005678 	.word	0x20005678

08008f34 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b088      	sub	sp, #32
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
 8008f3c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008f42:	2301      	movs	r3, #1
 8008f44:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d06e      	beq.n	800902a <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d10c      	bne.n	8008f6e <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8008f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f58:	b672      	cpsid	i
 8008f5a:	f383 8811 	msr	BASEPRI, r3
 8008f5e:	f3bf 8f6f 	isb	sy
 8008f62:	f3bf 8f4f 	dsb	sy
 8008f66:	b662      	cpsie	i
 8008f68:	60fb      	str	r3, [r7, #12]
}
 8008f6a:	bf00      	nop
 8008f6c:	e7fe      	b.n	8008f6c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f72:	683a      	ldr	r2, [r7, #0]
 8008f74:	429a      	cmp	r2, r3
 8008f76:	d902      	bls.n	8008f7e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	61fb      	str	r3, [r7, #28]
 8008f7c:	e002      	b.n	8008f84 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008f84:	69bb      	ldr	r3, [r7, #24]
 8008f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f88:	69fa      	ldr	r2, [r7, #28]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d04d      	beq.n	800902a <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f92:	697a      	ldr	r2, [r7, #20]
 8008f94:	429a      	cmp	r2, r3
 8008f96:	d148      	bne.n	800902a <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008f98:	4b26      	ldr	r3, [pc, #152]	; (8009034 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	d10c      	bne.n	8008fbc <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 8008fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa6:	b672      	cpsid	i
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	b662      	cpsie	i
 8008fb6:	60bb      	str	r3, [r7, #8]
}
 8008fb8:	bf00      	nop
 8008fba:	e7fe      	b.n	8008fba <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8008fc2:	69bb      	ldr	r3, [r7, #24]
 8008fc4:	69fa      	ldr	r2, [r7, #28]
 8008fc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008fc8:	69bb      	ldr	r3, [r7, #24]
 8008fca:	699b      	ldr	r3, [r3, #24]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	db04      	blt.n	8008fda <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008fd6:	69bb      	ldr	r3, [r7, #24]
 8008fd8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008fda:	69bb      	ldr	r3, [r7, #24]
 8008fdc:	6959      	ldr	r1, [r3, #20]
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	4613      	mov	r3, r2
 8008fe2:	009b      	lsls	r3, r3, #2
 8008fe4:	4413      	add	r3, r2
 8008fe6:	009b      	lsls	r3, r3, #2
 8008fe8:	4a13      	ldr	r2, [pc, #76]	; (8009038 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8008fea:	4413      	add	r3, r2
 8008fec:	4299      	cmp	r1, r3
 8008fee:	d11c      	bne.n	800902a <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ff0:	69bb      	ldr	r3, [r7, #24]
 8008ff2:	3304      	adds	r3, #4
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	f7fd fee1 	bl	8006dbc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008ffa:	69bb      	ldr	r3, [r7, #24]
 8008ffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ffe:	4b0f      	ldr	r3, [pc, #60]	; (800903c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	429a      	cmp	r2, r3
 8009004:	d903      	bls.n	800900e <vTaskPriorityDisinheritAfterTimeout+0xda>
 8009006:	69bb      	ldr	r3, [r7, #24]
 8009008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800900a:	4a0c      	ldr	r2, [pc, #48]	; (800903c <vTaskPriorityDisinheritAfterTimeout+0x108>)
 800900c:	6013      	str	r3, [r2, #0]
 800900e:	69bb      	ldr	r3, [r7, #24]
 8009010:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009012:	4613      	mov	r3, r2
 8009014:	009b      	lsls	r3, r3, #2
 8009016:	4413      	add	r3, r2
 8009018:	009b      	lsls	r3, r3, #2
 800901a:	4a07      	ldr	r2, [pc, #28]	; (8009038 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800901c:	441a      	add	r2, r3
 800901e:	69bb      	ldr	r3, [r7, #24]
 8009020:	3304      	adds	r3, #4
 8009022:	4619      	mov	r1, r3
 8009024:	4610      	mov	r0, r2
 8009026:	f7fd fe6c 	bl	8006d02 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800902a:	bf00      	nop
 800902c:	3720      	adds	r7, #32
 800902e:	46bd      	mov	sp, r7
 8009030:	bd80      	pop	{r7, pc}
 8009032:	bf00      	nop
 8009034:	20005674 	.word	0x20005674
 8009038:	20005678 	.word	0x20005678
 800903c:	20005b50 	.word	0x20005b50

08009040 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009040:	b480      	push	{r7}
 8009042:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009044:	4b07      	ldr	r3, [pc, #28]	; (8009064 <pvTaskIncrementMutexHeldCount+0x24>)
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d004      	beq.n	8009056 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800904c:	4b05      	ldr	r3, [pc, #20]	; (8009064 <pvTaskIncrementMutexHeldCount+0x24>)
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009052:	3201      	adds	r2, #1
 8009054:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8009056:	4b03      	ldr	r3, [pc, #12]	; (8009064 <pvTaskIncrementMutexHeldCount+0x24>)
 8009058:	681b      	ldr	r3, [r3, #0]
	}
 800905a:	4618      	mov	r0, r3
 800905c:	46bd      	mov	sp, r7
 800905e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009062:	4770      	bx	lr
 8009064:	20005674 	.word	0x20005674

08009068 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b084      	sub	sp, #16
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009072:	4b21      	ldr	r3, [pc, #132]	; (80090f8 <prvAddCurrentTaskToDelayedList+0x90>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009078:	4b20      	ldr	r3, [pc, #128]	; (80090fc <prvAddCurrentTaskToDelayedList+0x94>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3304      	adds	r3, #4
 800907e:	4618      	mov	r0, r3
 8009080:	f7fd fe9c 	bl	8006dbc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800908a:	d10a      	bne.n	80090a2 <prvAddCurrentTaskToDelayedList+0x3a>
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d007      	beq.n	80090a2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009092:	4b1a      	ldr	r3, [pc, #104]	; (80090fc <prvAddCurrentTaskToDelayedList+0x94>)
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	3304      	adds	r3, #4
 8009098:	4619      	mov	r1, r3
 800909a:	4819      	ldr	r0, [pc, #100]	; (8009100 <prvAddCurrentTaskToDelayedList+0x98>)
 800909c:	f7fd fe31 	bl	8006d02 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090a0:	e026      	b.n	80090f0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090a2:	68fa      	ldr	r2, [r7, #12]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4413      	add	r3, r2
 80090a8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090aa:	4b14      	ldr	r3, [pc, #80]	; (80090fc <prvAddCurrentTaskToDelayedList+0x94>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68ba      	ldr	r2, [r7, #8]
 80090b0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80090b2:	68ba      	ldr	r2, [r7, #8]
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d209      	bcs.n	80090ce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090ba:	4b12      	ldr	r3, [pc, #72]	; (8009104 <prvAddCurrentTaskToDelayedList+0x9c>)
 80090bc:	681a      	ldr	r2, [r3, #0]
 80090be:	4b0f      	ldr	r3, [pc, #60]	; (80090fc <prvAddCurrentTaskToDelayedList+0x94>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	3304      	adds	r3, #4
 80090c4:	4619      	mov	r1, r3
 80090c6:	4610      	mov	r0, r2
 80090c8:	f7fd fe3f 	bl	8006d4a <vListInsert>
}
 80090cc:	e010      	b.n	80090f0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090ce:	4b0e      	ldr	r3, [pc, #56]	; (8009108 <prvAddCurrentTaskToDelayedList+0xa0>)
 80090d0:	681a      	ldr	r2, [r3, #0]
 80090d2:	4b0a      	ldr	r3, [pc, #40]	; (80090fc <prvAddCurrentTaskToDelayedList+0x94>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	3304      	adds	r3, #4
 80090d8:	4619      	mov	r1, r3
 80090da:	4610      	mov	r0, r2
 80090dc:	f7fd fe35 	bl	8006d4a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80090e0:	4b0a      	ldr	r3, [pc, #40]	; (800910c <prvAddCurrentTaskToDelayedList+0xa4>)
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	68ba      	ldr	r2, [r7, #8]
 80090e6:	429a      	cmp	r2, r3
 80090e8:	d202      	bcs.n	80090f0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80090ea:	4a08      	ldr	r2, [pc, #32]	; (800910c <prvAddCurrentTaskToDelayedList+0xa4>)
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	6013      	str	r3, [r2, #0]
}
 80090f0:	bf00      	nop
 80090f2:	3710      	adds	r7, #16
 80090f4:	46bd      	mov	sp, r7
 80090f6:	bd80      	pop	{r7, pc}
 80090f8:	20005b4c 	.word	0x20005b4c
 80090fc:	20005674 	.word	0x20005674
 8009100:	20005b34 	.word	0x20005b34
 8009104:	20005b04 	.word	0x20005b04
 8009108:	20005b00 	.word	0x20005b00
 800910c:	20005b68 	.word	0x20005b68

08009110 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b08a      	sub	sp, #40	; 0x28
 8009114:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009116:	2300      	movs	r3, #0
 8009118:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800911a:	f000 fb15 	bl	8009748 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800911e:	4b1d      	ldr	r3, [pc, #116]	; (8009194 <xTimerCreateTimerTask+0x84>)
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d021      	beq.n	800916a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009126:	2300      	movs	r3, #0
 8009128:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800912a:	2300      	movs	r3, #0
 800912c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800912e:	1d3a      	adds	r2, r7, #4
 8009130:	f107 0108 	add.w	r1, r7, #8
 8009134:	f107 030c 	add.w	r3, r7, #12
 8009138:	4618      	mov	r0, r3
 800913a:	f7fd fd9b 	bl	8006c74 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800913e:	6879      	ldr	r1, [r7, #4]
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	68fa      	ldr	r2, [r7, #12]
 8009144:	9202      	str	r2, [sp, #8]
 8009146:	9301      	str	r3, [sp, #4]
 8009148:	2302      	movs	r3, #2
 800914a:	9300      	str	r3, [sp, #0]
 800914c:	2300      	movs	r3, #0
 800914e:	460a      	mov	r2, r1
 8009150:	4911      	ldr	r1, [pc, #68]	; (8009198 <xTimerCreateTimerTask+0x88>)
 8009152:	4812      	ldr	r0, [pc, #72]	; (800919c <xTimerCreateTimerTask+0x8c>)
 8009154:	f7fe ff6c 	bl	8008030 <xTaskCreateStatic>
 8009158:	4603      	mov	r3, r0
 800915a:	4a11      	ldr	r2, [pc, #68]	; (80091a0 <xTimerCreateTimerTask+0x90>)
 800915c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800915e:	4b10      	ldr	r3, [pc, #64]	; (80091a0 <xTimerCreateTimerTask+0x90>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009166:	2301      	movs	r3, #1
 8009168:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800916a:	697b      	ldr	r3, [r7, #20]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d10c      	bne.n	800918a <xTimerCreateTimerTask+0x7a>
	__asm volatile
 8009170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009174:	b672      	cpsid	i
 8009176:	f383 8811 	msr	BASEPRI, r3
 800917a:	f3bf 8f6f 	isb	sy
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	b662      	cpsie	i
 8009184:	613b      	str	r3, [r7, #16]
}
 8009186:	bf00      	nop
 8009188:	e7fe      	b.n	8009188 <xTimerCreateTimerTask+0x78>
	return xReturn;
 800918a:	697b      	ldr	r3, [r7, #20]
}
 800918c:	4618      	mov	r0, r3
 800918e:	3718      	adds	r7, #24
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}
 8009194:	20005ba4 	.word	0x20005ba4
 8009198:	08017728 	.word	0x08017728
 800919c:	080092e1 	.word	0x080092e1
 80091a0:	20005ba8 	.word	0x20005ba8

080091a4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80091a4:	b580      	push	{r7, lr}
 80091a6:	b08a      	sub	sp, #40	; 0x28
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	60f8      	str	r0, [r7, #12]
 80091ac:	60b9      	str	r1, [r7, #8]
 80091ae:	607a      	str	r2, [r7, #4]
 80091b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80091b2:	2300      	movs	r3, #0
 80091b4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d10c      	bne.n	80091d6 <xTimerGenericCommand+0x32>
	__asm volatile
 80091bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c0:	b672      	cpsid	i
 80091c2:	f383 8811 	msr	BASEPRI, r3
 80091c6:	f3bf 8f6f 	isb	sy
 80091ca:	f3bf 8f4f 	dsb	sy
 80091ce:	b662      	cpsie	i
 80091d0:	623b      	str	r3, [r7, #32]
}
 80091d2:	bf00      	nop
 80091d4:	e7fe      	b.n	80091d4 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80091d6:	4b1a      	ldr	r3, [pc, #104]	; (8009240 <xTimerGenericCommand+0x9c>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d02a      	beq.n	8009234 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	2b05      	cmp	r3, #5
 80091ee:	dc18      	bgt.n	8009222 <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80091f0:	f7ff fda8 	bl	8008d44 <xTaskGetSchedulerState>
 80091f4:	4603      	mov	r3, r0
 80091f6:	2b02      	cmp	r3, #2
 80091f8:	d109      	bne.n	800920e <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80091fa:	4b11      	ldr	r3, [pc, #68]	; (8009240 <xTimerGenericCommand+0x9c>)
 80091fc:	6818      	ldr	r0, [r3, #0]
 80091fe:	f107 0110 	add.w	r1, r7, #16
 8009202:	2300      	movs	r3, #0
 8009204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009206:	f7fe f881 	bl	800730c <xQueueGenericSend>
 800920a:	6278      	str	r0, [r7, #36]	; 0x24
 800920c:	e012      	b.n	8009234 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800920e:	4b0c      	ldr	r3, [pc, #48]	; (8009240 <xTimerGenericCommand+0x9c>)
 8009210:	6818      	ldr	r0, [r3, #0]
 8009212:	f107 0110 	add.w	r1, r7, #16
 8009216:	2300      	movs	r3, #0
 8009218:	2200      	movs	r2, #0
 800921a:	f7fe f877 	bl	800730c <xQueueGenericSend>
 800921e:	6278      	str	r0, [r7, #36]	; 0x24
 8009220:	e008      	b.n	8009234 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009222:	4b07      	ldr	r3, [pc, #28]	; (8009240 <xTimerGenericCommand+0x9c>)
 8009224:	6818      	ldr	r0, [r3, #0]
 8009226:	f107 0110 	add.w	r1, r7, #16
 800922a:	2300      	movs	r3, #0
 800922c:	683a      	ldr	r2, [r7, #0]
 800922e:	f7fe f973 	bl	8007518 <xQueueGenericSendFromISR>
 8009232:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009236:	4618      	mov	r0, r3
 8009238:	3728      	adds	r7, #40	; 0x28
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	20005ba4 	.word	0x20005ba4

08009244 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b088      	sub	sp, #32
 8009248:	af02      	add	r7, sp, #8
 800924a:	6078      	str	r0, [r7, #4]
 800924c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800924e:	4b23      	ldr	r3, [pc, #140]	; (80092dc <prvProcessExpiredTimer+0x98>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68db      	ldr	r3, [r3, #12]
 8009254:	68db      	ldr	r3, [r3, #12]
 8009256:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009258:	697b      	ldr	r3, [r7, #20]
 800925a:	3304      	adds	r3, #4
 800925c:	4618      	mov	r0, r3
 800925e:	f7fd fdad 	bl	8006dbc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009262:	697b      	ldr	r3, [r7, #20]
 8009264:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009268:	f003 0304 	and.w	r3, r3, #4
 800926c:	2b00      	cmp	r3, #0
 800926e:	d024      	beq.n	80092ba <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009270:	697b      	ldr	r3, [r7, #20]
 8009272:	699a      	ldr	r2, [r3, #24]
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	18d1      	adds	r1, r2, r3
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	683a      	ldr	r2, [r7, #0]
 800927c:	6978      	ldr	r0, [r7, #20]
 800927e:	f000 f8d3 	bl	8009428 <prvInsertTimerInActiveList>
 8009282:	4603      	mov	r3, r0
 8009284:	2b00      	cmp	r3, #0
 8009286:	d021      	beq.n	80092cc <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009288:	2300      	movs	r3, #0
 800928a:	9300      	str	r3, [sp, #0]
 800928c:	2300      	movs	r3, #0
 800928e:	687a      	ldr	r2, [r7, #4]
 8009290:	2100      	movs	r1, #0
 8009292:	6978      	ldr	r0, [r7, #20]
 8009294:	f7ff ff86 	bl	80091a4 <xTimerGenericCommand>
 8009298:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d115      	bne.n	80092cc <prvProcessExpiredTimer+0x88>
	__asm volatile
 80092a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092a4:	b672      	cpsid	i
 80092a6:	f383 8811 	msr	BASEPRI, r3
 80092aa:	f3bf 8f6f 	isb	sy
 80092ae:	f3bf 8f4f 	dsb	sy
 80092b2:	b662      	cpsie	i
 80092b4:	60fb      	str	r3, [r7, #12]
}
 80092b6:	bf00      	nop
 80092b8:	e7fe      	b.n	80092b8 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092c0:	f023 0301 	bic.w	r3, r3, #1
 80092c4:	b2da      	uxtb	r2, r3
 80092c6:	697b      	ldr	r3, [r7, #20]
 80092c8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092cc:	697b      	ldr	r3, [r7, #20]
 80092ce:	6a1b      	ldr	r3, [r3, #32]
 80092d0:	6978      	ldr	r0, [r7, #20]
 80092d2:	4798      	blx	r3
}
 80092d4:	bf00      	nop
 80092d6:	3718      	adds	r7, #24
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	20005b9c 	.word	0x20005b9c

080092e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b084      	sub	sp, #16
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80092e8:	f107 0308 	add.w	r3, r7, #8
 80092ec:	4618      	mov	r0, r3
 80092ee:	f000 f857 	bl	80093a0 <prvGetNextExpireTime>
 80092f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	4619      	mov	r1, r3
 80092f8:	68f8      	ldr	r0, [r7, #12]
 80092fa:	f000 f803 	bl	8009304 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80092fe:	f000 f8d5 	bl	80094ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009302:	e7f1      	b.n	80092e8 <prvTimerTask+0x8>

08009304 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
 800930c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800930e:	f7ff f8f9 	bl	8008504 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009312:	f107 0308 	add.w	r3, r7, #8
 8009316:	4618      	mov	r0, r3
 8009318:	f000 f866 	bl	80093e8 <prvSampleTimeNow>
 800931c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d130      	bne.n	8009386 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10a      	bne.n	8009340 <prvProcessTimerOrBlockTask+0x3c>
 800932a:	687a      	ldr	r2, [r7, #4]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	429a      	cmp	r2, r3
 8009330:	d806      	bhi.n	8009340 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009332:	f7ff f8f5 	bl	8008520 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009336:	68f9      	ldr	r1, [r7, #12]
 8009338:	6878      	ldr	r0, [r7, #4]
 800933a:	f7ff ff83 	bl	8009244 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800933e:	e024      	b.n	800938a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009340:	683b      	ldr	r3, [r7, #0]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d008      	beq.n	8009358 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009346:	4b13      	ldr	r3, [pc, #76]	; (8009394 <prvProcessTimerOrBlockTask+0x90>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	2b00      	cmp	r3, #0
 800934e:	d101      	bne.n	8009354 <prvProcessTimerOrBlockTask+0x50>
 8009350:	2301      	movs	r3, #1
 8009352:	e000      	b.n	8009356 <prvProcessTimerOrBlockTask+0x52>
 8009354:	2300      	movs	r3, #0
 8009356:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009358:	4b0f      	ldr	r3, [pc, #60]	; (8009398 <prvProcessTimerOrBlockTask+0x94>)
 800935a:	6818      	ldr	r0, [r3, #0]
 800935c:	687a      	ldr	r2, [r7, #4]
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	1ad3      	subs	r3, r2, r3
 8009362:	683a      	ldr	r2, [r7, #0]
 8009364:	4619      	mov	r1, r3
 8009366:	f7fe fe2f 	bl	8007fc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800936a:	f7ff f8d9 	bl	8008520 <xTaskResumeAll>
 800936e:	4603      	mov	r3, r0
 8009370:	2b00      	cmp	r3, #0
 8009372:	d10a      	bne.n	800938a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009374:	4b09      	ldr	r3, [pc, #36]	; (800939c <prvProcessTimerOrBlockTask+0x98>)
 8009376:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800937a:	601a      	str	r2, [r3, #0]
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	f3bf 8f6f 	isb	sy
}
 8009384:	e001      	b.n	800938a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009386:	f7ff f8cb 	bl	8008520 <xTaskResumeAll>
}
 800938a:	bf00      	nop
 800938c:	3710      	adds	r7, #16
 800938e:	46bd      	mov	sp, r7
 8009390:	bd80      	pop	{r7, pc}
 8009392:	bf00      	nop
 8009394:	20005ba0 	.word	0x20005ba0
 8009398:	20005ba4 	.word	0x20005ba4
 800939c:	e000ed04 	.word	0xe000ed04

080093a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80093a8:	4b0e      	ldr	r3, [pc, #56]	; (80093e4 <prvGetNextExpireTime+0x44>)
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d101      	bne.n	80093b6 <prvGetNextExpireTime+0x16>
 80093b2:	2201      	movs	r2, #1
 80093b4:	e000      	b.n	80093b8 <prvGetNextExpireTime+0x18>
 80093b6:	2200      	movs	r2, #0
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d105      	bne.n	80093d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093c4:	4b07      	ldr	r3, [pc, #28]	; (80093e4 <prvGetNextExpireTime+0x44>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	60fb      	str	r3, [r7, #12]
 80093ce:	e001      	b.n	80093d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80093d0:	2300      	movs	r3, #0
 80093d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80093d4:	68fb      	ldr	r3, [r7, #12]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	20005b9c 	.word	0x20005b9c

080093e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b084      	sub	sp, #16
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80093f0:	f7ff f936 	bl	8008660 <xTaskGetTickCount>
 80093f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80093f6:	4b0b      	ldr	r3, [pc, #44]	; (8009424 <prvSampleTimeNow+0x3c>)
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	68fa      	ldr	r2, [r7, #12]
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d205      	bcs.n	800940c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009400:	f000 f93c 	bl	800967c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2201      	movs	r2, #1
 8009408:	601a      	str	r2, [r3, #0]
 800940a:	e002      	b.n	8009412 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2200      	movs	r2, #0
 8009410:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009412:	4a04      	ldr	r2, [pc, #16]	; (8009424 <prvSampleTimeNow+0x3c>)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009418:	68fb      	ldr	r3, [r7, #12]
}
 800941a:	4618      	mov	r0, r3
 800941c:	3710      	adds	r7, #16
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}
 8009422:	bf00      	nop
 8009424:	20005bac 	.word	0x20005bac

08009428 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009428:	b580      	push	{r7, lr}
 800942a:	b086      	sub	sp, #24
 800942c:	af00      	add	r7, sp, #0
 800942e:	60f8      	str	r0, [r7, #12]
 8009430:	60b9      	str	r1, [r7, #8]
 8009432:	607a      	str	r2, [r7, #4]
 8009434:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009436:	2300      	movs	r3, #0
 8009438:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	68ba      	ldr	r2, [r7, #8]
 800943e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	68fa      	ldr	r2, [r7, #12]
 8009444:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009446:	68ba      	ldr	r2, [r7, #8]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	429a      	cmp	r2, r3
 800944c:	d812      	bhi.n	8009474 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	1ad2      	subs	r2, r2, r3
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	699b      	ldr	r3, [r3, #24]
 8009458:	429a      	cmp	r2, r3
 800945a:	d302      	bcc.n	8009462 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800945c:	2301      	movs	r3, #1
 800945e:	617b      	str	r3, [r7, #20]
 8009460:	e01b      	b.n	800949a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009462:	4b10      	ldr	r3, [pc, #64]	; (80094a4 <prvInsertTimerInActiveList+0x7c>)
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	3304      	adds	r3, #4
 800946a:	4619      	mov	r1, r3
 800946c:	4610      	mov	r0, r2
 800946e:	f7fd fc6c 	bl	8006d4a <vListInsert>
 8009472:	e012      	b.n	800949a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	429a      	cmp	r2, r3
 800947a:	d206      	bcs.n	800948a <prvInsertTimerInActiveList+0x62>
 800947c:	68ba      	ldr	r2, [r7, #8]
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	429a      	cmp	r2, r3
 8009482:	d302      	bcc.n	800948a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009484:	2301      	movs	r3, #1
 8009486:	617b      	str	r3, [r7, #20]
 8009488:	e007      	b.n	800949a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800948a:	4b07      	ldr	r3, [pc, #28]	; (80094a8 <prvInsertTimerInActiveList+0x80>)
 800948c:	681a      	ldr	r2, [r3, #0]
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	3304      	adds	r3, #4
 8009492:	4619      	mov	r1, r3
 8009494:	4610      	mov	r0, r2
 8009496:	f7fd fc58 	bl	8006d4a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800949a:	697b      	ldr	r3, [r7, #20]
}
 800949c:	4618      	mov	r0, r3
 800949e:	3718      	adds	r7, #24
 80094a0:	46bd      	mov	sp, r7
 80094a2:	bd80      	pop	{r7, pc}
 80094a4:	20005ba0 	.word	0x20005ba0
 80094a8:	20005b9c 	.word	0x20005b9c

080094ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80094ac:	b580      	push	{r7, lr}
 80094ae:	b08e      	sub	sp, #56	; 0x38
 80094b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094b2:	e0d0      	b.n	8009656 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	da1a      	bge.n	80094f0 <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80094ba:	1d3b      	adds	r3, r7, #4
 80094bc:	3304      	adds	r3, #4
 80094be:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80094c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d10c      	bne.n	80094e0 <prvProcessReceivedCommands+0x34>
	__asm volatile
 80094c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094ca:	b672      	cpsid	i
 80094cc:	f383 8811 	msr	BASEPRI, r3
 80094d0:	f3bf 8f6f 	isb	sy
 80094d4:	f3bf 8f4f 	dsb	sy
 80094d8:	b662      	cpsie	i
 80094da:	61fb      	str	r3, [r7, #28]
}
 80094dc:	bf00      	nop
 80094de:	e7fe      	b.n	80094de <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80094e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094e6:	6850      	ldr	r0, [r2, #4]
 80094e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094ea:	6892      	ldr	r2, [r2, #8]
 80094ec:	4611      	mov	r1, r2
 80094ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	f2c0 80ae 	blt.w	8009654 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80094fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094fe:	695b      	ldr	r3, [r3, #20]
 8009500:	2b00      	cmp	r3, #0
 8009502:	d004      	beq.n	800950e <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009506:	3304      	adds	r3, #4
 8009508:	4618      	mov	r0, r3
 800950a:	f7fd fc57 	bl	8006dbc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800950e:	463b      	mov	r3, r7
 8009510:	4618      	mov	r0, r3
 8009512:	f7ff ff69 	bl	80093e8 <prvSampleTimeNow>
 8009516:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	2b09      	cmp	r3, #9
 800951c:	f200 809b 	bhi.w	8009656 <prvProcessReceivedCommands+0x1aa>
 8009520:	a201      	add	r2, pc, #4	; (adr r2, 8009528 <prvProcessReceivedCommands+0x7c>)
 8009522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009526:	bf00      	nop
 8009528:	08009551 	.word	0x08009551
 800952c:	08009551 	.word	0x08009551
 8009530:	08009551 	.word	0x08009551
 8009534:	080095c9 	.word	0x080095c9
 8009538:	080095dd 	.word	0x080095dd
 800953c:	0800962b 	.word	0x0800962b
 8009540:	08009551 	.word	0x08009551
 8009544:	08009551 	.word	0x08009551
 8009548:	080095c9 	.word	0x080095c9
 800954c:	080095dd 	.word	0x080095dd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009552:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009556:	f043 0301 	orr.w	r3, r3, #1
 800955a:	b2da      	uxtb	r2, r3
 800955c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800955e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009562:	68ba      	ldr	r2, [r7, #8]
 8009564:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009566:	699b      	ldr	r3, [r3, #24]
 8009568:	18d1      	adds	r1, r2, r3
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800956e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009570:	f7ff ff5a 	bl	8009428 <prvInsertTimerInActiveList>
 8009574:	4603      	mov	r3, r0
 8009576:	2b00      	cmp	r3, #0
 8009578:	d06d      	beq.n	8009656 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800957a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957c:	6a1b      	ldr	r3, [r3, #32]
 800957e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009580:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009584:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009588:	f003 0304 	and.w	r3, r3, #4
 800958c:	2b00      	cmp	r3, #0
 800958e:	d062      	beq.n	8009656 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009590:	68ba      	ldr	r2, [r7, #8]
 8009592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009594:	699b      	ldr	r3, [r3, #24]
 8009596:	441a      	add	r2, r3
 8009598:	2300      	movs	r3, #0
 800959a:	9300      	str	r3, [sp, #0]
 800959c:	2300      	movs	r3, #0
 800959e:	2100      	movs	r1, #0
 80095a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095a2:	f7ff fdff 	bl	80091a4 <xTimerGenericCommand>
 80095a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80095a8:	6a3b      	ldr	r3, [r7, #32]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d153      	bne.n	8009656 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80095ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095b2:	b672      	cpsid	i
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	b662      	cpsie	i
 80095c2:	61bb      	str	r3, [r7, #24]
}
 80095c4:	bf00      	nop
 80095c6:	e7fe      	b.n	80095c6 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095ce:	f023 0301 	bic.w	r3, r3, #1
 80095d2:	b2da      	uxtb	r2, r3
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80095da:	e03c      	b.n	8009656 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80095dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095de:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095e2:	f043 0301 	orr.w	r3, r3, #1
 80095e6:	b2da      	uxtb	r2, r3
 80095e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095ea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80095ee:	68ba      	ldr	r2, [r7, #8]
 80095f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80095f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f6:	699b      	ldr	r3, [r3, #24]
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d10c      	bne.n	8009616 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80095fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009600:	b672      	cpsid	i
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	b662      	cpsie	i
 8009610:	617b      	str	r3, [r7, #20]
}
 8009612:	bf00      	nop
 8009614:	e7fe      	b.n	8009614 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009618:	699a      	ldr	r2, [r3, #24]
 800961a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800961c:	18d1      	adds	r1, r2, r3
 800961e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009622:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009624:	f7ff ff00 	bl	8009428 <prvInsertTimerInActiveList>
					break;
 8009628:	e015      	b.n	8009656 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800962a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800962c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009630:	f003 0302 	and.w	r3, r3, #2
 8009634:	2b00      	cmp	r3, #0
 8009636:	d103      	bne.n	8009640 <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8009638:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800963a:	f000 fbc5 	bl	8009dc8 <vPortFree>
 800963e:	e00a      	b.n	8009656 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009646:	f023 0301 	bic.w	r3, r3, #1
 800964a:	b2da      	uxtb	r2, r3
 800964c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800964e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009652:	e000      	b.n	8009656 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009654:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009656:	4b08      	ldr	r3, [pc, #32]	; (8009678 <prvProcessReceivedCommands+0x1cc>)
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	1d39      	adds	r1, r7, #4
 800965c:	2200      	movs	r2, #0
 800965e:	4618      	mov	r0, r3
 8009660:	f7fe f890 	bl	8007784 <xQueueReceive>
 8009664:	4603      	mov	r3, r0
 8009666:	2b00      	cmp	r3, #0
 8009668:	f47f af24 	bne.w	80094b4 <prvProcessReceivedCommands+0x8>
	}
}
 800966c:	bf00      	nop
 800966e:	bf00      	nop
 8009670:	3730      	adds	r7, #48	; 0x30
 8009672:	46bd      	mov	sp, r7
 8009674:	bd80      	pop	{r7, pc}
 8009676:	bf00      	nop
 8009678:	20005ba4 	.word	0x20005ba4

0800967c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b088      	sub	sp, #32
 8009680:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009682:	e04a      	b.n	800971a <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009684:	4b2e      	ldr	r3, [pc, #184]	; (8009740 <prvSwitchTimerLists+0xc4>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	68db      	ldr	r3, [r3, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800968e:	4b2c      	ldr	r3, [pc, #176]	; (8009740 <prvSwitchTimerLists+0xc4>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	68db      	ldr	r3, [r3, #12]
 8009694:	68db      	ldr	r3, [r3, #12]
 8009696:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	3304      	adds	r3, #4
 800969c:	4618      	mov	r0, r3
 800969e:	f7fd fb8d 	bl	8006dbc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	6a1b      	ldr	r3, [r3, #32]
 80096a6:	68f8      	ldr	r0, [r7, #12]
 80096a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096b0:	f003 0304 	and.w	r3, r3, #4
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d030      	beq.n	800971a <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	699b      	ldr	r3, [r3, #24]
 80096bc:	693a      	ldr	r2, [r7, #16]
 80096be:	4413      	add	r3, r2
 80096c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80096c2:	68ba      	ldr	r2, [r7, #8]
 80096c4:	693b      	ldr	r3, [r7, #16]
 80096c6:	429a      	cmp	r2, r3
 80096c8:	d90e      	bls.n	80096e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	68ba      	ldr	r2, [r7, #8]
 80096ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096d6:	4b1a      	ldr	r3, [pc, #104]	; (8009740 <prvSwitchTimerLists+0xc4>)
 80096d8:	681a      	ldr	r2, [r3, #0]
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	3304      	adds	r3, #4
 80096de:	4619      	mov	r1, r3
 80096e0:	4610      	mov	r0, r2
 80096e2:	f7fd fb32 	bl	8006d4a <vListInsert>
 80096e6:	e018      	b.n	800971a <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096e8:	2300      	movs	r3, #0
 80096ea:	9300      	str	r3, [sp, #0]
 80096ec:	2300      	movs	r3, #0
 80096ee:	693a      	ldr	r2, [r7, #16]
 80096f0:	2100      	movs	r1, #0
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f7ff fd56 	bl	80091a4 <xTimerGenericCommand>
 80096f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d10c      	bne.n	800971a <prvSwitchTimerLists+0x9e>
	__asm volatile
 8009700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009704:	b672      	cpsid	i
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	b662      	cpsie	i
 8009714:	603b      	str	r3, [r7, #0]
}
 8009716:	bf00      	nop
 8009718:	e7fe      	b.n	8009718 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800971a:	4b09      	ldr	r3, [pc, #36]	; (8009740 <prvSwitchTimerLists+0xc4>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d1af      	bne.n	8009684 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009724:	4b06      	ldr	r3, [pc, #24]	; (8009740 <prvSwitchTimerLists+0xc4>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800972a:	4b06      	ldr	r3, [pc, #24]	; (8009744 <prvSwitchTimerLists+0xc8>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a04      	ldr	r2, [pc, #16]	; (8009740 <prvSwitchTimerLists+0xc4>)
 8009730:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009732:	4a04      	ldr	r2, [pc, #16]	; (8009744 <prvSwitchTimerLists+0xc8>)
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	6013      	str	r3, [r2, #0]
}
 8009738:	bf00      	nop
 800973a:	3718      	adds	r7, #24
 800973c:	46bd      	mov	sp, r7
 800973e:	bd80      	pop	{r7, pc}
 8009740:	20005b9c 	.word	0x20005b9c
 8009744:	20005ba0 	.word	0x20005ba0

08009748 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800974e:	f000 f945 	bl	80099dc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009752:	4b15      	ldr	r3, [pc, #84]	; (80097a8 <prvCheckForValidListAndQueue+0x60>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d120      	bne.n	800979c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800975a:	4814      	ldr	r0, [pc, #80]	; (80097ac <prvCheckForValidListAndQueue+0x64>)
 800975c:	f7fd faa4 	bl	8006ca8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009760:	4813      	ldr	r0, [pc, #76]	; (80097b0 <prvCheckForValidListAndQueue+0x68>)
 8009762:	f7fd faa1 	bl	8006ca8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009766:	4b13      	ldr	r3, [pc, #76]	; (80097b4 <prvCheckForValidListAndQueue+0x6c>)
 8009768:	4a10      	ldr	r2, [pc, #64]	; (80097ac <prvCheckForValidListAndQueue+0x64>)
 800976a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800976c:	4b12      	ldr	r3, [pc, #72]	; (80097b8 <prvCheckForValidListAndQueue+0x70>)
 800976e:	4a10      	ldr	r2, [pc, #64]	; (80097b0 <prvCheckForValidListAndQueue+0x68>)
 8009770:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009772:	2300      	movs	r3, #0
 8009774:	9300      	str	r3, [sp, #0]
 8009776:	4b11      	ldr	r3, [pc, #68]	; (80097bc <prvCheckForValidListAndQueue+0x74>)
 8009778:	4a11      	ldr	r2, [pc, #68]	; (80097c0 <prvCheckForValidListAndQueue+0x78>)
 800977a:	2110      	movs	r1, #16
 800977c:	200a      	movs	r0, #10
 800977e:	f7fd fbb1 	bl	8006ee4 <xQueueGenericCreateStatic>
 8009782:	4603      	mov	r3, r0
 8009784:	4a08      	ldr	r2, [pc, #32]	; (80097a8 <prvCheckForValidListAndQueue+0x60>)
 8009786:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009788:	4b07      	ldr	r3, [pc, #28]	; (80097a8 <prvCheckForValidListAndQueue+0x60>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d005      	beq.n	800979c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009790:	4b05      	ldr	r3, [pc, #20]	; (80097a8 <prvCheckForValidListAndQueue+0x60>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	490b      	ldr	r1, [pc, #44]	; (80097c4 <prvCheckForValidListAndQueue+0x7c>)
 8009796:	4618      	mov	r0, r3
 8009798:	f7fe fbc2 	bl	8007f20 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800979c:	f000 f952 	bl	8009a44 <vPortExitCritical>
}
 80097a0:	bf00      	nop
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	20005ba4 	.word	0x20005ba4
 80097ac:	20005b74 	.word	0x20005b74
 80097b0:	20005b88 	.word	0x20005b88
 80097b4:	20005b9c 	.word	0x20005b9c
 80097b8:	20005ba0 	.word	0x20005ba0
 80097bc:	20005c50 	.word	0x20005c50
 80097c0:	20005bb0 	.word	0x20005bb0
 80097c4:	08017730 	.word	0x08017730

080097c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b085      	sub	sp, #20
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	3b04      	subs	r3, #4
 80097d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80097e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	3b04      	subs	r3, #4
 80097e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	f023 0201 	bic.w	r2, r3, #1
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3b04      	subs	r3, #4
 80097f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097f8:	4a0c      	ldr	r2, [pc, #48]	; (800982c <pxPortInitialiseStack+0x64>)
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	3b14      	subs	r3, #20
 8009802:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800980a:	68fb      	ldr	r3, [r7, #12]
 800980c:	3b04      	subs	r3, #4
 800980e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	f06f 0202 	mvn.w	r2, #2
 8009816:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	3b20      	subs	r3, #32
 800981c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800981e:	68fb      	ldr	r3, [r7, #12]
}
 8009820:	4618      	mov	r0, r3
 8009822:	3714      	adds	r7, #20
 8009824:	46bd      	mov	sp, r7
 8009826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982a:	4770      	bx	lr
 800982c:	08009831 	.word	0x08009831

08009830 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009830:	b480      	push	{r7}
 8009832:	b085      	sub	sp, #20
 8009834:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009836:	2300      	movs	r3, #0
 8009838:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800983a:	4b14      	ldr	r3, [pc, #80]	; (800988c <prvTaskExitError+0x5c>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009842:	d00c      	beq.n	800985e <prvTaskExitError+0x2e>
	__asm volatile
 8009844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009848:	b672      	cpsid	i
 800984a:	f383 8811 	msr	BASEPRI, r3
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	b662      	cpsie	i
 8009858:	60fb      	str	r3, [r7, #12]
}
 800985a:	bf00      	nop
 800985c:	e7fe      	b.n	800985c <prvTaskExitError+0x2c>
	__asm volatile
 800985e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009862:	b672      	cpsid	i
 8009864:	f383 8811 	msr	BASEPRI, r3
 8009868:	f3bf 8f6f 	isb	sy
 800986c:	f3bf 8f4f 	dsb	sy
 8009870:	b662      	cpsie	i
 8009872:	60bb      	str	r3, [r7, #8]
}
 8009874:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009876:	bf00      	nop
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2b00      	cmp	r3, #0
 800987c:	d0fc      	beq.n	8009878 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800987e:	bf00      	nop
 8009880:	bf00      	nop
 8009882:	3714      	adds	r7, #20
 8009884:	46bd      	mov	sp, r7
 8009886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800988a:	4770      	bx	lr
 800988c:	20000020 	.word	0x20000020

08009890 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009890:	4b07      	ldr	r3, [pc, #28]	; (80098b0 <pxCurrentTCBConst2>)
 8009892:	6819      	ldr	r1, [r3, #0]
 8009894:	6808      	ldr	r0, [r1, #0]
 8009896:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989a:	f380 8809 	msr	PSP, r0
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f04f 0000 	mov.w	r0, #0
 80098a6:	f380 8811 	msr	BASEPRI, r0
 80098aa:	4770      	bx	lr
 80098ac:	f3af 8000 	nop.w

080098b0 <pxCurrentTCBConst2>:
 80098b0:	20005674 	.word	0x20005674
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80098b4:	bf00      	nop
 80098b6:	bf00      	nop

080098b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80098b8:	4808      	ldr	r0, [pc, #32]	; (80098dc <prvPortStartFirstTask+0x24>)
 80098ba:	6800      	ldr	r0, [r0, #0]
 80098bc:	6800      	ldr	r0, [r0, #0]
 80098be:	f380 8808 	msr	MSP, r0
 80098c2:	f04f 0000 	mov.w	r0, #0
 80098c6:	f380 8814 	msr	CONTROL, r0
 80098ca:	b662      	cpsie	i
 80098cc:	b661      	cpsie	f
 80098ce:	f3bf 8f4f 	dsb	sy
 80098d2:	f3bf 8f6f 	isb	sy
 80098d6:	df00      	svc	0
 80098d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80098da:	bf00      	nop
 80098dc:	e000ed08 	.word	0xe000ed08

080098e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80098e6:	4b37      	ldr	r3, [pc, #220]	; (80099c4 <xPortStartScheduler+0xe4>)
 80098e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	781b      	ldrb	r3, [r3, #0]
 80098ee:	b2db      	uxtb	r3, r3
 80098f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80098f2:	68fb      	ldr	r3, [r7, #12]
 80098f4:	22ff      	movs	r2, #255	; 0xff
 80098f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	781b      	ldrb	r3, [r3, #0]
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009900:	78fb      	ldrb	r3, [r7, #3]
 8009902:	b2db      	uxtb	r3, r3
 8009904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009908:	b2da      	uxtb	r2, r3
 800990a:	4b2f      	ldr	r3, [pc, #188]	; (80099c8 <xPortStartScheduler+0xe8>)
 800990c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800990e:	4b2f      	ldr	r3, [pc, #188]	; (80099cc <xPortStartScheduler+0xec>)
 8009910:	2207      	movs	r2, #7
 8009912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009914:	e009      	b.n	800992a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8009916:	4b2d      	ldr	r3, [pc, #180]	; (80099cc <xPortStartScheduler+0xec>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	3b01      	subs	r3, #1
 800991c:	4a2b      	ldr	r2, [pc, #172]	; (80099cc <xPortStartScheduler+0xec>)
 800991e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009920:	78fb      	ldrb	r3, [r7, #3]
 8009922:	b2db      	uxtb	r3, r3
 8009924:	005b      	lsls	r3, r3, #1
 8009926:	b2db      	uxtb	r3, r3
 8009928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800992a:	78fb      	ldrb	r3, [r7, #3]
 800992c:	b2db      	uxtb	r3, r3
 800992e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009932:	2b80      	cmp	r3, #128	; 0x80
 8009934:	d0ef      	beq.n	8009916 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009936:	4b25      	ldr	r3, [pc, #148]	; (80099cc <xPortStartScheduler+0xec>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f1c3 0307 	rsb	r3, r3, #7
 800993e:	2b04      	cmp	r3, #4
 8009940:	d00c      	beq.n	800995c <xPortStartScheduler+0x7c>
	__asm volatile
 8009942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009946:	b672      	cpsid	i
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	b662      	cpsie	i
 8009956:	60bb      	str	r3, [r7, #8]
}
 8009958:	bf00      	nop
 800995a:	e7fe      	b.n	800995a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800995c:	4b1b      	ldr	r3, [pc, #108]	; (80099cc <xPortStartScheduler+0xec>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	021b      	lsls	r3, r3, #8
 8009962:	4a1a      	ldr	r2, [pc, #104]	; (80099cc <xPortStartScheduler+0xec>)
 8009964:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009966:	4b19      	ldr	r3, [pc, #100]	; (80099cc <xPortStartScheduler+0xec>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800996e:	4a17      	ldr	r2, [pc, #92]	; (80099cc <xPortStartScheduler+0xec>)
 8009970:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	b2da      	uxtb	r2, r3
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800997a:	4b15      	ldr	r3, [pc, #84]	; (80099d0 <xPortStartScheduler+0xf0>)
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4a14      	ldr	r2, [pc, #80]	; (80099d0 <xPortStartScheduler+0xf0>)
 8009980:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009984:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009986:	4b12      	ldr	r3, [pc, #72]	; (80099d0 <xPortStartScheduler+0xf0>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	4a11      	ldr	r2, [pc, #68]	; (80099d0 <xPortStartScheduler+0xf0>)
 800998c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009990:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009992:	f000 f8dd 	bl	8009b50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009996:	4b0f      	ldr	r3, [pc, #60]	; (80099d4 <xPortStartScheduler+0xf4>)
 8009998:	2200      	movs	r2, #0
 800999a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800999c:	f000 f8fc 	bl	8009b98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099a0:	4b0d      	ldr	r3, [pc, #52]	; (80099d8 <xPortStartScheduler+0xf8>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a0c      	ldr	r2, [pc, #48]	; (80099d8 <xPortStartScheduler+0xf8>)
 80099a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80099aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80099ac:	f7ff ff84 	bl	80098b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80099b0:	f7fe ff34 	bl	800881c <vTaskSwitchContext>
	prvTaskExitError();
 80099b4:	f7ff ff3c 	bl	8009830 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80099b8:	2300      	movs	r3, #0
}
 80099ba:	4618      	mov	r0, r3
 80099bc:	3710      	adds	r7, #16
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	e000e400 	.word	0xe000e400
 80099c8:	20005ca0 	.word	0x20005ca0
 80099cc:	20005ca4 	.word	0x20005ca4
 80099d0:	e000ed20 	.word	0xe000ed20
 80099d4:	20000020 	.word	0x20000020
 80099d8:	e000ef34 	.word	0xe000ef34

080099dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80099dc:	b480      	push	{r7}
 80099de:	b083      	sub	sp, #12
 80099e0:	af00      	add	r7, sp, #0
	__asm volatile
 80099e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099e6:	b672      	cpsid	i
 80099e8:	f383 8811 	msr	BASEPRI, r3
 80099ec:	f3bf 8f6f 	isb	sy
 80099f0:	f3bf 8f4f 	dsb	sy
 80099f4:	b662      	cpsie	i
 80099f6:	607b      	str	r3, [r7, #4]
}
 80099f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80099fa:	4b10      	ldr	r3, [pc, #64]	; (8009a3c <vPortEnterCritical+0x60>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	3301      	adds	r3, #1
 8009a00:	4a0e      	ldr	r2, [pc, #56]	; (8009a3c <vPortEnterCritical+0x60>)
 8009a02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a04:	4b0d      	ldr	r3, [pc, #52]	; (8009a3c <vPortEnterCritical+0x60>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d111      	bne.n	8009a30 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a0c:	4b0c      	ldr	r3, [pc, #48]	; (8009a40 <vPortEnterCritical+0x64>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	b2db      	uxtb	r3, r3
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d00c      	beq.n	8009a30 <vPortEnterCritical+0x54>
	__asm volatile
 8009a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1a:	b672      	cpsid	i
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	b662      	cpsie	i
 8009a2a:	603b      	str	r3, [r7, #0]
}
 8009a2c:	bf00      	nop
 8009a2e:	e7fe      	b.n	8009a2e <vPortEnterCritical+0x52>
	}
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr
 8009a3c:	20000020 	.word	0x20000020
 8009a40:	e000ed04 	.word	0xe000ed04

08009a44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009a4a:	4b13      	ldr	r3, [pc, #76]	; (8009a98 <vPortExitCritical+0x54>)
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d10c      	bne.n	8009a6c <vPortExitCritical+0x28>
	__asm volatile
 8009a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a56:	b672      	cpsid	i
 8009a58:	f383 8811 	msr	BASEPRI, r3
 8009a5c:	f3bf 8f6f 	isb	sy
 8009a60:	f3bf 8f4f 	dsb	sy
 8009a64:	b662      	cpsie	i
 8009a66:	607b      	str	r3, [r7, #4]
}
 8009a68:	bf00      	nop
 8009a6a:	e7fe      	b.n	8009a6a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8009a6c:	4b0a      	ldr	r3, [pc, #40]	; (8009a98 <vPortExitCritical+0x54>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	3b01      	subs	r3, #1
 8009a72:	4a09      	ldr	r2, [pc, #36]	; (8009a98 <vPortExitCritical+0x54>)
 8009a74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009a76:	4b08      	ldr	r3, [pc, #32]	; (8009a98 <vPortExitCritical+0x54>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d105      	bne.n	8009a8a <vPortExitCritical+0x46>
 8009a7e:	2300      	movs	r3, #0
 8009a80:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	f383 8811 	msr	BASEPRI, r3
}
 8009a88:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009a8a:	bf00      	nop
 8009a8c:	370c      	adds	r7, #12
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	20000020 	.word	0x20000020
 8009a9c:	00000000 	.word	0x00000000

08009aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009aa0:	f3ef 8009 	mrs	r0, PSP
 8009aa4:	f3bf 8f6f 	isb	sy
 8009aa8:	4b15      	ldr	r3, [pc, #84]	; (8009b00 <pxCurrentTCBConst>)
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	f01e 0f10 	tst.w	lr, #16
 8009ab0:	bf08      	it	eq
 8009ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aba:	6010      	str	r0, [r2, #0]
 8009abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009ac4:	b672      	cpsid	i
 8009ac6:	f380 8811 	msr	BASEPRI, r0
 8009aca:	f3bf 8f4f 	dsb	sy
 8009ace:	f3bf 8f6f 	isb	sy
 8009ad2:	b662      	cpsie	i
 8009ad4:	f7fe fea2 	bl	800881c <vTaskSwitchContext>
 8009ad8:	f04f 0000 	mov.w	r0, #0
 8009adc:	f380 8811 	msr	BASEPRI, r0
 8009ae0:	bc09      	pop	{r0, r3}
 8009ae2:	6819      	ldr	r1, [r3, #0]
 8009ae4:	6808      	ldr	r0, [r1, #0]
 8009ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aea:	f01e 0f10 	tst.w	lr, #16
 8009aee:	bf08      	it	eq
 8009af0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009af4:	f380 8809 	msr	PSP, r0
 8009af8:	f3bf 8f6f 	isb	sy
 8009afc:	4770      	bx	lr
 8009afe:	bf00      	nop

08009b00 <pxCurrentTCBConst>:
 8009b00:	20005674 	.word	0x20005674
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop

08009b08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b082      	sub	sp, #8
 8009b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	b672      	cpsid	i
 8009b14:	f383 8811 	msr	BASEPRI, r3
 8009b18:	f3bf 8f6f 	isb	sy
 8009b1c:	f3bf 8f4f 	dsb	sy
 8009b20:	b662      	cpsie	i
 8009b22:	607b      	str	r3, [r7, #4]
}
 8009b24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b26:	f7fe fdbd 	bl	80086a4 <xTaskIncrementTick>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d003      	beq.n	8009b38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b30:	4b06      	ldr	r3, [pc, #24]	; (8009b4c <SysTick_Handler+0x44>)
 8009b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b36:	601a      	str	r2, [r3, #0]
 8009b38:	2300      	movs	r3, #0
 8009b3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b3c:	683b      	ldr	r3, [r7, #0]
 8009b3e:	f383 8811 	msr	BASEPRI, r3
}
 8009b42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009b44:	bf00      	nop
 8009b46:	3708      	adds	r7, #8
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	bd80      	pop	{r7, pc}
 8009b4c:	e000ed04 	.word	0xe000ed04

08009b50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009b50:	b480      	push	{r7}
 8009b52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009b54:	4b0b      	ldr	r3, [pc, #44]	; (8009b84 <vPortSetupTimerInterrupt+0x34>)
 8009b56:	2200      	movs	r2, #0
 8009b58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009b5a:	4b0b      	ldr	r3, [pc, #44]	; (8009b88 <vPortSetupTimerInterrupt+0x38>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009b60:	4b0a      	ldr	r3, [pc, #40]	; (8009b8c <vPortSetupTimerInterrupt+0x3c>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	4a0a      	ldr	r2, [pc, #40]	; (8009b90 <vPortSetupTimerInterrupt+0x40>)
 8009b66:	fba2 2303 	umull	r2, r3, r2, r3
 8009b6a:	099b      	lsrs	r3, r3, #6
 8009b6c:	4a09      	ldr	r2, [pc, #36]	; (8009b94 <vPortSetupTimerInterrupt+0x44>)
 8009b6e:	3b01      	subs	r3, #1
 8009b70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009b72:	4b04      	ldr	r3, [pc, #16]	; (8009b84 <vPortSetupTimerInterrupt+0x34>)
 8009b74:	2207      	movs	r2, #7
 8009b76:	601a      	str	r2, [r3, #0]
}
 8009b78:	bf00      	nop
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b80:	4770      	bx	lr
 8009b82:	bf00      	nop
 8009b84:	e000e010 	.word	0xe000e010
 8009b88:	e000e018 	.word	0xe000e018
 8009b8c:	20000000 	.word	0x20000000
 8009b90:	10624dd3 	.word	0x10624dd3
 8009b94:	e000e014 	.word	0xe000e014

08009b98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009b98:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009ba8 <vPortEnableVFP+0x10>
 8009b9c:	6801      	ldr	r1, [r0, #0]
 8009b9e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009ba2:	6001      	str	r1, [r0, #0]
 8009ba4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009ba6:	bf00      	nop
 8009ba8:	e000ed88 	.word	0xe000ed88

08009bac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009bac:	b480      	push	{r7}
 8009bae:	b085      	sub	sp, #20
 8009bb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009bb2:	f3ef 8305 	mrs	r3, IPSR
 8009bb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	2b0f      	cmp	r3, #15
 8009bbc:	d916      	bls.n	8009bec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009bbe:	4a19      	ldr	r2, [pc, #100]	; (8009c24 <vPortValidateInterruptPriority+0x78>)
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	4413      	add	r3, r2
 8009bc4:	781b      	ldrb	r3, [r3, #0]
 8009bc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009bc8:	4b17      	ldr	r3, [pc, #92]	; (8009c28 <vPortValidateInterruptPriority+0x7c>)
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	7afa      	ldrb	r2, [r7, #11]
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d20c      	bcs.n	8009bec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8009bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bd6:	b672      	cpsid	i
 8009bd8:	f383 8811 	msr	BASEPRI, r3
 8009bdc:	f3bf 8f6f 	isb	sy
 8009be0:	f3bf 8f4f 	dsb	sy
 8009be4:	b662      	cpsie	i
 8009be6:	607b      	str	r3, [r7, #4]
}
 8009be8:	bf00      	nop
 8009bea:	e7fe      	b.n	8009bea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009bec:	4b0f      	ldr	r3, [pc, #60]	; (8009c2c <vPortValidateInterruptPriority+0x80>)
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009bf4:	4b0e      	ldr	r3, [pc, #56]	; (8009c30 <vPortValidateInterruptPriority+0x84>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	429a      	cmp	r2, r3
 8009bfa:	d90c      	bls.n	8009c16 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8009bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c00:	b672      	cpsid	i
 8009c02:	f383 8811 	msr	BASEPRI, r3
 8009c06:	f3bf 8f6f 	isb	sy
 8009c0a:	f3bf 8f4f 	dsb	sy
 8009c0e:	b662      	cpsie	i
 8009c10:	603b      	str	r3, [r7, #0]
}
 8009c12:	bf00      	nop
 8009c14:	e7fe      	b.n	8009c14 <vPortValidateInterruptPriority+0x68>
	}
 8009c16:	bf00      	nop
 8009c18:	3714      	adds	r7, #20
 8009c1a:	46bd      	mov	sp, r7
 8009c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c20:	4770      	bx	lr
 8009c22:	bf00      	nop
 8009c24:	e000e3f0 	.word	0xe000e3f0
 8009c28:	20005ca0 	.word	0x20005ca0
 8009c2c:	e000ed0c 	.word	0xe000ed0c
 8009c30:	20005ca4 	.word	0x20005ca4

08009c34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b08a      	sub	sp, #40	; 0x28
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c40:	f7fe fc60 	bl	8008504 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c44:	4b5b      	ldr	r3, [pc, #364]	; (8009db4 <pvPortMalloc+0x180>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d101      	bne.n	8009c50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009c4c:	f000 f91a 	bl	8009e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009c50:	4b59      	ldr	r3, [pc, #356]	; (8009db8 <pvPortMalloc+0x184>)
 8009c52:	681a      	ldr	r2, [r3, #0]
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	4013      	ands	r3, r2
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	f040 8092 	bne.w	8009d82 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d01f      	beq.n	8009ca4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8009c64:	2208      	movs	r2, #8
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	4413      	add	r3, r2
 8009c6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f003 0307 	and.w	r3, r3, #7
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d016      	beq.n	8009ca4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	f023 0307 	bic.w	r3, r3, #7
 8009c7c:	3308      	adds	r3, #8
 8009c7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f003 0307 	and.w	r3, r3, #7
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d00c      	beq.n	8009ca4 <pvPortMalloc+0x70>
	__asm volatile
 8009c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8e:	b672      	cpsid	i
 8009c90:	f383 8811 	msr	BASEPRI, r3
 8009c94:	f3bf 8f6f 	isb	sy
 8009c98:	f3bf 8f4f 	dsb	sy
 8009c9c:	b662      	cpsie	i
 8009c9e:	617b      	str	r3, [r7, #20]
}
 8009ca0:	bf00      	nop
 8009ca2:	e7fe      	b.n	8009ca2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d06b      	beq.n	8009d82 <pvPortMalloc+0x14e>
 8009caa:	4b44      	ldr	r3, [pc, #272]	; (8009dbc <pvPortMalloc+0x188>)
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	687a      	ldr	r2, [r7, #4]
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d866      	bhi.n	8009d82 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009cb4:	4b42      	ldr	r3, [pc, #264]	; (8009dc0 <pvPortMalloc+0x18c>)
 8009cb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009cb8:	4b41      	ldr	r3, [pc, #260]	; (8009dc0 <pvPortMalloc+0x18c>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cbe:	e004      	b.n	8009cca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8009cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ccc:	685b      	ldr	r3, [r3, #4]
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d903      	bls.n	8009cdc <pvPortMalloc+0xa8>
 8009cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d1f1      	bne.n	8009cc0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009cdc:	4b35      	ldr	r3, [pc, #212]	; (8009db4 <pvPortMalloc+0x180>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ce2:	429a      	cmp	r2, r3
 8009ce4:	d04d      	beq.n	8009d82 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009ce6:	6a3b      	ldr	r3, [r7, #32]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	2208      	movs	r2, #8
 8009cec:	4413      	add	r3, r2
 8009cee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cf2:	681a      	ldr	r2, [r3, #0]
 8009cf4:	6a3b      	ldr	r3, [r7, #32]
 8009cf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfa:	685a      	ldr	r2, [r3, #4]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	1ad2      	subs	r2, r2, r3
 8009d00:	2308      	movs	r3, #8
 8009d02:	005b      	lsls	r3, r3, #1
 8009d04:	429a      	cmp	r2, r3
 8009d06:	d921      	bls.n	8009d4c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	4413      	add	r3, r2
 8009d0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d10:	69bb      	ldr	r3, [r7, #24]
 8009d12:	f003 0307 	and.w	r3, r3, #7
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	d00c      	beq.n	8009d34 <pvPortMalloc+0x100>
	__asm volatile
 8009d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d1e:	b672      	cpsid	i
 8009d20:	f383 8811 	msr	BASEPRI, r3
 8009d24:	f3bf 8f6f 	isb	sy
 8009d28:	f3bf 8f4f 	dsb	sy
 8009d2c:	b662      	cpsie	i
 8009d2e:	613b      	str	r3, [r7, #16]
}
 8009d30:	bf00      	nop
 8009d32:	e7fe      	b.n	8009d32 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d36:	685a      	ldr	r2, [r3, #4]
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	1ad2      	subs	r2, r2, r3
 8009d3c:	69bb      	ldr	r3, [r7, #24]
 8009d3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	687a      	ldr	r2, [r7, #4]
 8009d44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d46:	69b8      	ldr	r0, [r7, #24]
 8009d48:	f000 f8fe 	bl	8009f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d4c:	4b1b      	ldr	r3, [pc, #108]	; (8009dbc <pvPortMalloc+0x188>)
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	1ad3      	subs	r3, r2, r3
 8009d56:	4a19      	ldr	r2, [pc, #100]	; (8009dbc <pvPortMalloc+0x188>)
 8009d58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009d5a:	4b18      	ldr	r3, [pc, #96]	; (8009dbc <pvPortMalloc+0x188>)
 8009d5c:	681a      	ldr	r2, [r3, #0]
 8009d5e:	4b19      	ldr	r3, [pc, #100]	; (8009dc4 <pvPortMalloc+0x190>)
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	429a      	cmp	r2, r3
 8009d64:	d203      	bcs.n	8009d6e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009d66:	4b15      	ldr	r3, [pc, #84]	; (8009dbc <pvPortMalloc+0x188>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a16      	ldr	r2, [pc, #88]	; (8009dc4 <pvPortMalloc+0x190>)
 8009d6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d70:	685a      	ldr	r2, [r3, #4]
 8009d72:	4b11      	ldr	r3, [pc, #68]	; (8009db8 <pvPortMalloc+0x184>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	431a      	orrs	r2, r3
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009d7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7e:	2200      	movs	r2, #0
 8009d80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009d82:	f7fe fbcd 	bl	8008520 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d86:	69fb      	ldr	r3, [r7, #28]
 8009d88:	f003 0307 	and.w	r3, r3, #7
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d00c      	beq.n	8009daa <pvPortMalloc+0x176>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	b672      	cpsid	i
 8009d96:	f383 8811 	msr	BASEPRI, r3
 8009d9a:	f3bf 8f6f 	isb	sy
 8009d9e:	f3bf 8f4f 	dsb	sy
 8009da2:	b662      	cpsie	i
 8009da4:	60fb      	str	r3, [r7, #12]
}
 8009da6:	bf00      	nop
 8009da8:	e7fe      	b.n	8009da8 <pvPortMalloc+0x174>
	return pvReturn;
 8009daa:	69fb      	ldr	r3, [r7, #28]
}
 8009dac:	4618      	mov	r0, r3
 8009dae:	3728      	adds	r7, #40	; 0x28
 8009db0:	46bd      	mov	sp, r7
 8009db2:	bd80      	pop	{r7, pc}
 8009db4:	200098b0 	.word	0x200098b0
 8009db8:	200098bc 	.word	0x200098bc
 8009dbc:	200098b4 	.word	0x200098b4
 8009dc0:	200098a8 	.word	0x200098a8
 8009dc4:	200098b8 	.word	0x200098b8

08009dc8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b086      	sub	sp, #24
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d04c      	beq.n	8009e74 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009dda:	2308      	movs	r3, #8
 8009ddc:	425b      	negs	r3, r3
 8009dde:	697a      	ldr	r2, [r7, #20]
 8009de0:	4413      	add	r3, r2
 8009de2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009de8:	693b      	ldr	r3, [r7, #16]
 8009dea:	685a      	ldr	r2, [r3, #4]
 8009dec:	4b23      	ldr	r3, [pc, #140]	; (8009e7c <vPortFree+0xb4>)
 8009dee:	681b      	ldr	r3, [r3, #0]
 8009df0:	4013      	ands	r3, r2
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10c      	bne.n	8009e10 <vPortFree+0x48>
	__asm volatile
 8009df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dfa:	b672      	cpsid	i
 8009dfc:	f383 8811 	msr	BASEPRI, r3
 8009e00:	f3bf 8f6f 	isb	sy
 8009e04:	f3bf 8f4f 	dsb	sy
 8009e08:	b662      	cpsie	i
 8009e0a:	60fb      	str	r3, [r7, #12]
}
 8009e0c:	bf00      	nop
 8009e0e:	e7fe      	b.n	8009e0e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e10:	693b      	ldr	r3, [r7, #16]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d00c      	beq.n	8009e32 <vPortFree+0x6a>
	__asm volatile
 8009e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e1c:	b672      	cpsid	i
 8009e1e:	f383 8811 	msr	BASEPRI, r3
 8009e22:	f3bf 8f6f 	isb	sy
 8009e26:	f3bf 8f4f 	dsb	sy
 8009e2a:	b662      	cpsie	i
 8009e2c:	60bb      	str	r3, [r7, #8]
}
 8009e2e:	bf00      	nop
 8009e30:	e7fe      	b.n	8009e30 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	685a      	ldr	r2, [r3, #4]
 8009e36:	4b11      	ldr	r3, [pc, #68]	; (8009e7c <vPortFree+0xb4>)
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4013      	ands	r3, r2
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d019      	beq.n	8009e74 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d115      	bne.n	8009e74 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	685a      	ldr	r2, [r3, #4]
 8009e4c:	4b0b      	ldr	r3, [pc, #44]	; (8009e7c <vPortFree+0xb4>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	43db      	mvns	r3, r3
 8009e52:	401a      	ands	r2, r3
 8009e54:	693b      	ldr	r3, [r7, #16]
 8009e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009e58:	f7fe fb54 	bl	8008504 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009e5c:	693b      	ldr	r3, [r7, #16]
 8009e5e:	685a      	ldr	r2, [r3, #4]
 8009e60:	4b07      	ldr	r3, [pc, #28]	; (8009e80 <vPortFree+0xb8>)
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4413      	add	r3, r2
 8009e66:	4a06      	ldr	r2, [pc, #24]	; (8009e80 <vPortFree+0xb8>)
 8009e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009e6a:	6938      	ldr	r0, [r7, #16]
 8009e6c:	f000 f86c 	bl	8009f48 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8009e70:	f7fe fb56 	bl	8008520 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009e74:	bf00      	nop
 8009e76:	3718      	adds	r7, #24
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	200098bc 	.word	0x200098bc
 8009e80:	200098b4 	.word	0x200098b4

08009e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009e84:	b480      	push	{r7}
 8009e86:	b085      	sub	sp, #20
 8009e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009e8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8009e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009e90:	4b27      	ldr	r3, [pc, #156]	; (8009f30 <prvHeapInit+0xac>)
 8009e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	f003 0307 	and.w	r3, r3, #7
 8009e9a:	2b00      	cmp	r3, #0
 8009e9c:	d00c      	beq.n	8009eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	3307      	adds	r3, #7
 8009ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f023 0307 	bic.w	r3, r3, #7
 8009eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009eac:	68ba      	ldr	r2, [r7, #8]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	1ad3      	subs	r3, r2, r3
 8009eb2:	4a1f      	ldr	r2, [pc, #124]	; (8009f30 <prvHeapInit+0xac>)
 8009eb4:	4413      	add	r3, r2
 8009eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009ebc:	4a1d      	ldr	r2, [pc, #116]	; (8009f34 <prvHeapInit+0xb0>)
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009ec2:	4b1c      	ldr	r3, [pc, #112]	; (8009f34 <prvHeapInit+0xb0>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	68ba      	ldr	r2, [r7, #8]
 8009ecc:	4413      	add	r3, r2
 8009ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009ed0:	2208      	movs	r2, #8
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	1a9b      	subs	r3, r3, r2
 8009ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f023 0307 	bic.w	r3, r3, #7
 8009ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	4a15      	ldr	r2, [pc, #84]	; (8009f38 <prvHeapInit+0xb4>)
 8009ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009ee6:	4b14      	ldr	r3, [pc, #80]	; (8009f38 <prvHeapInit+0xb4>)
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	2200      	movs	r2, #0
 8009eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009eee:	4b12      	ldr	r3, [pc, #72]	; (8009f38 <prvHeapInit+0xb4>)
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	2200      	movs	r2, #0
 8009ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009efa:	683b      	ldr	r3, [r7, #0]
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	1ad2      	subs	r2, r2, r3
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f04:	4b0c      	ldr	r3, [pc, #48]	; (8009f38 <prvHeapInit+0xb4>)
 8009f06:	681a      	ldr	r2, [r3, #0]
 8009f08:	683b      	ldr	r3, [r7, #0]
 8009f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f0c:	683b      	ldr	r3, [r7, #0]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	4a0a      	ldr	r2, [pc, #40]	; (8009f3c <prvHeapInit+0xb8>)
 8009f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f14:	683b      	ldr	r3, [r7, #0]
 8009f16:	685b      	ldr	r3, [r3, #4]
 8009f18:	4a09      	ldr	r2, [pc, #36]	; (8009f40 <prvHeapInit+0xbc>)
 8009f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f1c:	4b09      	ldr	r3, [pc, #36]	; (8009f44 <prvHeapInit+0xc0>)
 8009f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f22:	601a      	str	r2, [r3, #0]
}
 8009f24:	bf00      	nop
 8009f26:	3714      	adds	r7, #20
 8009f28:	46bd      	mov	sp, r7
 8009f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2e:	4770      	bx	lr
 8009f30:	20005ca8 	.word	0x20005ca8
 8009f34:	200098a8 	.word	0x200098a8
 8009f38:	200098b0 	.word	0x200098b0
 8009f3c:	200098b8 	.word	0x200098b8
 8009f40:	200098b4 	.word	0x200098b4
 8009f44:	200098bc 	.word	0x200098bc

08009f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009f50:	4b28      	ldr	r3, [pc, #160]	; (8009ff4 <prvInsertBlockIntoFreeList+0xac>)
 8009f52:	60fb      	str	r3, [r7, #12]
 8009f54:	e002      	b.n	8009f5c <prvInsertBlockIntoFreeList+0x14>
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	60fb      	str	r3, [r7, #12]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d8f7      	bhi.n	8009f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	68ba      	ldr	r2, [r7, #8]
 8009f70:	4413      	add	r3, r2
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d108      	bne.n	8009f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	685a      	ldr	r2, [r3, #4]
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	685b      	ldr	r3, [r3, #4]
 8009f80:	441a      	add	r2, r3
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	685b      	ldr	r3, [r3, #4]
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	441a      	add	r2, r3
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	429a      	cmp	r2, r3
 8009f9c:	d118      	bne.n	8009fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	4b15      	ldr	r3, [pc, #84]	; (8009ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d00d      	beq.n	8009fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	685a      	ldr	r2, [r3, #4]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	685b      	ldr	r3, [r3, #4]
 8009fb4:	441a      	add	r2, r3
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	601a      	str	r2, [r3, #0]
 8009fc4:	e008      	b.n	8009fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009fc6:	4b0c      	ldr	r3, [pc, #48]	; (8009ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	601a      	str	r2, [r3, #0]
 8009fce:	e003      	b.n	8009fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681a      	ldr	r2, [r3, #0]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009fd8:	68fa      	ldr	r2, [r7, #12]
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d002      	beq.n	8009fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009fe6:	bf00      	nop
 8009fe8:	3714      	adds	r7, #20
 8009fea:	46bd      	mov	sp, r7
 8009fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff0:	4770      	bx	lr
 8009ff2:	bf00      	nop
 8009ff4:	200098a8 	.word	0x200098a8
 8009ff8:	200098b0 	.word	0x200098b0

08009ffc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800a006:	f007 fae1 	bl	80115cc <sys_timeouts_sleeptime>
 800a00a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a012:	d10b      	bne.n	800a02c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800a014:	4813      	ldr	r0, [pc, #76]	; (800a064 <tcpip_timeouts_mbox_fetch+0x68>)
 800a016:	f00c f9f0 	bl	80163fa <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800a01a:	2200      	movs	r2, #0
 800a01c:	6839      	ldr	r1, [r7, #0]
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f00c f978 	bl	8016314 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800a024:	480f      	ldr	r0, [pc, #60]	; (800a064 <tcpip_timeouts_mbox_fetch+0x68>)
 800a026:	f00c f9d9 	bl	80163dc <sys_mutex_lock>
    return;
 800a02a:	e018      	b.n	800a05e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d102      	bne.n	800a038 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800a032:	f007 fa91 	bl	8011558 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a036:	e7e6      	b.n	800a006 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800a038:	480a      	ldr	r0, [pc, #40]	; (800a064 <tcpip_timeouts_mbox_fetch+0x68>)
 800a03a:	f00c f9de 	bl	80163fa <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800a03e:	68fa      	ldr	r2, [r7, #12]
 800a040:	6839      	ldr	r1, [r7, #0]
 800a042:	6878      	ldr	r0, [r7, #4]
 800a044:	f00c f966 	bl	8016314 <sys_arch_mbox_fetch>
 800a048:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800a04a:	4806      	ldr	r0, [pc, #24]	; (800a064 <tcpip_timeouts_mbox_fetch+0x68>)
 800a04c:	f00c f9c6 	bl	80163dc <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a056:	d102      	bne.n	800a05e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800a058:	f007 fa7e 	bl	8011558 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800a05c:	e7d3      	b.n	800a006 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800a05e:	3710      	adds	r7, #16
 800a060:	46bd      	mov	sp, r7
 800a062:	bd80      	pop	{r7, pc}
 800a064:	200098cc 	.word	0x200098cc

0800a068 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800a070:	4810      	ldr	r0, [pc, #64]	; (800a0b4 <tcpip_thread+0x4c>)
 800a072:	f00c f9b3 	bl	80163dc <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800a076:	4b10      	ldr	r3, [pc, #64]	; (800a0b8 <tcpip_thread+0x50>)
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d005      	beq.n	800a08a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800a07e:	4b0e      	ldr	r3, [pc, #56]	; (800a0b8 <tcpip_thread+0x50>)
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	4a0e      	ldr	r2, [pc, #56]	; (800a0bc <tcpip_thread+0x54>)
 800a084:	6812      	ldr	r2, [r2, #0]
 800a086:	4610      	mov	r0, r2
 800a088:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a08a:	f107 030c 	add.w	r3, r7, #12
 800a08e:	4619      	mov	r1, r3
 800a090:	480b      	ldr	r0, [pc, #44]	; (800a0c0 <tcpip_thread+0x58>)
 800a092:	f7ff ffb3 	bl	8009ffc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d106      	bne.n	800a0aa <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a09c:	4b09      	ldr	r3, [pc, #36]	; (800a0c4 <tcpip_thread+0x5c>)
 800a09e:	2291      	movs	r2, #145	; 0x91
 800a0a0:	4909      	ldr	r1, [pc, #36]	; (800a0c8 <tcpip_thread+0x60>)
 800a0a2:	480a      	ldr	r0, [pc, #40]	; (800a0cc <tcpip_thread+0x64>)
 800a0a4:	f00c fbcc 	bl	8016840 <iprintf>
      continue;
 800a0a8:	e003      	b.n	800a0b2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f000 f80f 	bl	800a0d0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800a0b2:	e7ea      	b.n	800a08a <tcpip_thread+0x22>
 800a0b4:	200098cc 	.word	0x200098cc
 800a0b8:	200098c0 	.word	0x200098c0
 800a0bc:	200098c4 	.word	0x200098c4
 800a0c0:	200098c8 	.word	0x200098c8
 800a0c4:	08017738 	.word	0x08017738
 800a0c8:	08017768 	.word	0x08017768
 800a0cc:	08017788 	.word	0x08017788

0800a0d0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	781b      	ldrb	r3, [r3, #0]
 800a0dc:	2b02      	cmp	r3, #2
 800a0de:	d026      	beq.n	800a12e <tcpip_thread_handle_msg+0x5e>
 800a0e0:	2b02      	cmp	r3, #2
 800a0e2:	dc2b      	bgt.n	800a13c <tcpip_thread_handle_msg+0x6c>
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d002      	beq.n	800a0ee <tcpip_thread_handle_msg+0x1e>
 800a0e8:	2b01      	cmp	r3, #1
 800a0ea:	d015      	beq.n	800a118 <tcpip_thread_handle_msg+0x48>
 800a0ec:	e026      	b.n	800a13c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68db      	ldr	r3, [r3, #12]
 800a0f2:	687a      	ldr	r2, [r7, #4]
 800a0f4:	6850      	ldr	r0, [r2, #4]
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	6892      	ldr	r2, [r2, #8]
 800a0fa:	4611      	mov	r1, r2
 800a0fc:	4798      	blx	r3
 800a0fe:	4603      	mov	r3, r0
 800a100:	2b00      	cmp	r3, #0
 800a102:	d004      	beq.n	800a10e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	685b      	ldr	r3, [r3, #4]
 800a108:	4618      	mov	r0, r3
 800a10a:	f001 fd17 	bl	800bb3c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a10e:	6879      	ldr	r1, [r7, #4]
 800a110:	2009      	movs	r0, #9
 800a112:	f000 fe63 	bl	800addc <memp_free>
      break;
 800a116:	e018      	b.n	800a14a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	685b      	ldr	r3, [r3, #4]
 800a11c:	687a      	ldr	r2, [r7, #4]
 800a11e:	6892      	ldr	r2, [r2, #8]
 800a120:	4610      	mov	r0, r2
 800a122:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800a124:	6879      	ldr	r1, [r7, #4]
 800a126:	2008      	movs	r0, #8
 800a128:	f000 fe58 	bl	800addc <memp_free>
      break;
 800a12c:	e00d      	b.n	800a14a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	687a      	ldr	r2, [r7, #4]
 800a134:	6892      	ldr	r2, [r2, #8]
 800a136:	4610      	mov	r0, r2
 800a138:	4798      	blx	r3
      break;
 800a13a:	e006      	b.n	800a14a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800a13c:	4b05      	ldr	r3, [pc, #20]	; (800a154 <tcpip_thread_handle_msg+0x84>)
 800a13e:	22cf      	movs	r2, #207	; 0xcf
 800a140:	4905      	ldr	r1, [pc, #20]	; (800a158 <tcpip_thread_handle_msg+0x88>)
 800a142:	4806      	ldr	r0, [pc, #24]	; (800a15c <tcpip_thread_handle_msg+0x8c>)
 800a144:	f00c fb7c 	bl	8016840 <iprintf>
      break;
 800a148:	bf00      	nop
  }
}
 800a14a:	bf00      	nop
 800a14c:	3708      	adds	r7, #8
 800a14e:	46bd      	mov	sp, r7
 800a150:	bd80      	pop	{r7, pc}
 800a152:	bf00      	nop
 800a154:	08017738 	.word	0x08017738
 800a158:	08017768 	.word	0x08017768
 800a15c:	08017788 	.word	0x08017788

0800a160 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b086      	sub	sp, #24
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a16c:	481a      	ldr	r0, [pc, #104]	; (800a1d8 <tcpip_inpkt+0x78>)
 800a16e:	f00c f902 	bl	8016376 <sys_mbox_valid>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d105      	bne.n	800a184 <tcpip_inpkt+0x24>
 800a178:	4b18      	ldr	r3, [pc, #96]	; (800a1dc <tcpip_inpkt+0x7c>)
 800a17a:	22fc      	movs	r2, #252	; 0xfc
 800a17c:	4918      	ldr	r1, [pc, #96]	; (800a1e0 <tcpip_inpkt+0x80>)
 800a17e:	4819      	ldr	r0, [pc, #100]	; (800a1e4 <tcpip_inpkt+0x84>)
 800a180:	f00c fb5e 	bl	8016840 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800a184:	2009      	movs	r0, #9
 800a186:	f000 fdb3 	bl	800acf0 <memp_malloc>
 800a18a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800a18c:	697b      	ldr	r3, [r7, #20]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d102      	bne.n	800a198 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800a192:	f04f 33ff 	mov.w	r3, #4294967295
 800a196:	e01a      	b.n	800a1ce <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800a198:	697b      	ldr	r3, [r7, #20]
 800a19a:	2200      	movs	r2, #0
 800a19c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800a1a4:	697b      	ldr	r3, [r7, #20]
 800a1a6:	68ba      	ldr	r2, [r7, #8]
 800a1a8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800a1aa:	697b      	ldr	r3, [r7, #20]
 800a1ac:	687a      	ldr	r2, [r7, #4]
 800a1ae:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a1b0:	6979      	ldr	r1, [r7, #20]
 800a1b2:	4809      	ldr	r0, [pc, #36]	; (800a1d8 <tcpip_inpkt+0x78>)
 800a1b4:	f00c f894 	bl	80162e0 <sys_mbox_trypost>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d006      	beq.n	800a1cc <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800a1be:	6979      	ldr	r1, [r7, #20]
 800a1c0:	2009      	movs	r0, #9
 800a1c2:	f000 fe0b 	bl	800addc <memp_free>
    return ERR_MEM;
 800a1c6:	f04f 33ff 	mov.w	r3, #4294967295
 800a1ca:	e000      	b.n	800a1ce <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800a1cc:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800a1ce:	4618      	mov	r0, r3
 800a1d0:	3718      	adds	r7, #24
 800a1d2:	46bd      	mov	sp, r7
 800a1d4:	bd80      	pop	{r7, pc}
 800a1d6:	bf00      	nop
 800a1d8:	200098c8 	.word	0x200098c8
 800a1dc:	08017738 	.word	0x08017738
 800a1e0:	080177b0 	.word	0x080177b0
 800a1e4:	08017788 	.word	0x08017788

0800a1e8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b082      	sub	sp, #8
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a1f8:	f003 0318 	and.w	r3, r3, #24
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d006      	beq.n	800a20e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800a200:	4a08      	ldr	r2, [pc, #32]	; (800a224 <tcpip_input+0x3c>)
 800a202:	6839      	ldr	r1, [r7, #0]
 800a204:	6878      	ldr	r0, [r7, #4]
 800a206:	f7ff ffab 	bl	800a160 <tcpip_inpkt>
 800a20a:	4603      	mov	r3, r0
 800a20c:	e005      	b.n	800a21a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800a20e:	4a06      	ldr	r2, [pc, #24]	; (800a228 <tcpip_input+0x40>)
 800a210:	6839      	ldr	r1, [r7, #0]
 800a212:	6878      	ldr	r0, [r7, #4]
 800a214:	f7ff ffa4 	bl	800a160 <tcpip_inpkt>
 800a218:	4603      	mov	r3, r0
}
 800a21a:	4618      	mov	r0, r3
 800a21c:	3708      	adds	r7, #8
 800a21e:	46bd      	mov	sp, r7
 800a220:	bd80      	pop	{r7, pc}
 800a222:	bf00      	nop
 800a224:	08016101 	.word	0x08016101
 800a228:	08014fcd 	.word	0x08014fcd

0800a22c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800a236:	4819      	ldr	r0, [pc, #100]	; (800a29c <tcpip_try_callback+0x70>)
 800a238:	f00c f89d 	bl	8016376 <sys_mbox_valid>
 800a23c:	4603      	mov	r3, r0
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d106      	bne.n	800a250 <tcpip_try_callback+0x24>
 800a242:	4b17      	ldr	r3, [pc, #92]	; (800a2a0 <tcpip_try_callback+0x74>)
 800a244:	f240 125d 	movw	r2, #349	; 0x15d
 800a248:	4916      	ldr	r1, [pc, #88]	; (800a2a4 <tcpip_try_callback+0x78>)
 800a24a:	4817      	ldr	r0, [pc, #92]	; (800a2a8 <tcpip_try_callback+0x7c>)
 800a24c:	f00c faf8 	bl	8016840 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800a250:	2008      	movs	r0, #8
 800a252:	f000 fd4d 	bl	800acf0 <memp_malloc>
 800a256:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d102      	bne.n	800a264 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800a25e:	f04f 33ff 	mov.w	r3, #4294967295
 800a262:	e017      	b.n	800a294 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	2201      	movs	r2, #1
 800a268:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	683a      	ldr	r2, [r7, #0]
 800a274:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800a276:	68f9      	ldr	r1, [r7, #12]
 800a278:	4808      	ldr	r0, [pc, #32]	; (800a29c <tcpip_try_callback+0x70>)
 800a27a:	f00c f831 	bl	80162e0 <sys_mbox_trypost>
 800a27e:	4603      	mov	r3, r0
 800a280:	2b00      	cmp	r3, #0
 800a282:	d006      	beq.n	800a292 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800a284:	68f9      	ldr	r1, [r7, #12]
 800a286:	2008      	movs	r0, #8
 800a288:	f000 fda8 	bl	800addc <memp_free>
    return ERR_MEM;
 800a28c:	f04f 33ff 	mov.w	r3, #4294967295
 800a290:	e000      	b.n	800a294 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3710      	adds	r7, #16
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	200098c8 	.word	0x200098c8
 800a2a0:	08017738 	.word	0x08017738
 800a2a4:	080177b0 	.word	0x080177b0
 800a2a8:	08017788 	.word	0x08017788

0800a2ac <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800a2ac:	b580      	push	{r7, lr}
 800a2ae:	b084      	sub	sp, #16
 800a2b0:	af02      	add	r7, sp, #8
 800a2b2:	6078      	str	r0, [r7, #4]
 800a2b4:	6039      	str	r1, [r7, #0]
  lwip_init();
 800a2b6:	f000 f871 	bl	800a39c <lwip_init>

  tcpip_init_done = initfunc;
 800a2ba:	4a17      	ldr	r2, [pc, #92]	; (800a318 <tcpip_init+0x6c>)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800a2c0:	4a16      	ldr	r2, [pc, #88]	; (800a31c <tcpip_init+0x70>)
 800a2c2:	683b      	ldr	r3, [r7, #0]
 800a2c4:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800a2c6:	2106      	movs	r1, #6
 800a2c8:	4815      	ldr	r0, [pc, #84]	; (800a320 <tcpip_init+0x74>)
 800a2ca:	f00b ffef 	bl	80162ac <sys_mbox_new>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d006      	beq.n	800a2e2 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800a2d4:	4b13      	ldr	r3, [pc, #76]	; (800a324 <tcpip_init+0x78>)
 800a2d6:	f240 2261 	movw	r2, #609	; 0x261
 800a2da:	4913      	ldr	r1, [pc, #76]	; (800a328 <tcpip_init+0x7c>)
 800a2dc:	4813      	ldr	r0, [pc, #76]	; (800a32c <tcpip_init+0x80>)
 800a2de:	f00c faaf 	bl	8016840 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800a2e2:	4813      	ldr	r0, [pc, #76]	; (800a330 <tcpip_init+0x84>)
 800a2e4:	f00c f864 	bl	80163b0 <sys_mutex_new>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d006      	beq.n	800a2fc <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800a2ee:	4b0d      	ldr	r3, [pc, #52]	; (800a324 <tcpip_init+0x78>)
 800a2f0:	f240 2265 	movw	r2, #613	; 0x265
 800a2f4:	490f      	ldr	r1, [pc, #60]	; (800a334 <tcpip_init+0x88>)
 800a2f6:	480d      	ldr	r0, [pc, #52]	; (800a32c <tcpip_init+0x80>)
 800a2f8:	f00c faa2 	bl	8016840 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800a2fc:	2318      	movs	r3, #24
 800a2fe:	9300      	str	r3, [sp, #0]
 800a300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a304:	2200      	movs	r2, #0
 800a306:	490c      	ldr	r1, [pc, #48]	; (800a338 <tcpip_init+0x8c>)
 800a308:	480c      	ldr	r0, [pc, #48]	; (800a33c <tcpip_init+0x90>)
 800a30a:	f00c f883 	bl	8016414 <sys_thread_new>
}
 800a30e:	bf00      	nop
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	200098c0 	.word	0x200098c0
 800a31c:	200098c4 	.word	0x200098c4
 800a320:	200098c8 	.word	0x200098c8
 800a324:	08017738 	.word	0x08017738
 800a328:	080177c0 	.word	0x080177c0
 800a32c:	08017788 	.word	0x08017788
 800a330:	200098cc 	.word	0x200098cc
 800a334:	080177e4 	.word	0x080177e4
 800a338:	0800a069 	.word	0x0800a069
 800a33c:	08017808 	.word	0x08017808

0800a340 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a340:	b480      	push	{r7}
 800a342:	b083      	sub	sp, #12
 800a344:	af00      	add	r7, sp, #0
 800a346:	4603      	mov	r3, r0
 800a348:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a34a:	88fb      	ldrh	r3, [r7, #6]
 800a34c:	021b      	lsls	r3, r3, #8
 800a34e:	b21a      	sxth	r2, r3
 800a350:	88fb      	ldrh	r3, [r7, #6]
 800a352:	0a1b      	lsrs	r3, r3, #8
 800a354:	b29b      	uxth	r3, r3
 800a356:	b21b      	sxth	r3, r3
 800a358:	4313      	orrs	r3, r2
 800a35a:	b21b      	sxth	r3, r3
 800a35c:	b29b      	uxth	r3, r3
}
 800a35e:	4618      	mov	r0, r3
 800a360:	370c      	adds	r7, #12
 800a362:	46bd      	mov	sp, r7
 800a364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a368:	4770      	bx	lr

0800a36a <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a36a:	b480      	push	{r7}
 800a36c:	b083      	sub	sp, #12
 800a36e:	af00      	add	r7, sp, #0
 800a370:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	061a      	lsls	r2, r3, #24
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	021b      	lsls	r3, r3, #8
 800a37a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a37e:	431a      	orrs	r2, r3
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	0a1b      	lsrs	r3, r3, #8
 800a384:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a388:	431a      	orrs	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	0e1b      	lsrs	r3, r3, #24
 800a38e:	4313      	orrs	r3, r2
}
 800a390:	4618      	mov	r0, r3
 800a392:	370c      	adds	r7, #12
 800a394:	46bd      	mov	sp, r7
 800a396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39a:	4770      	bx	lr

0800a39c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800a3a2:	2300      	movs	r3, #0
 800a3a4:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800a3a6:	f00b fff7 	bl	8016398 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800a3aa:	f000 f8d5 	bl	800a558 <mem_init>
  memp_init();
 800a3ae:	f000 fc31 	bl	800ac14 <memp_init>
  pbuf_init();
  netif_init();
 800a3b2:	f000 fd3d 	bl	800ae30 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800a3b6:	f007 f941 	bl	801163c <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800a3ba:	f001 fe69 	bl	800c090 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800a3be:	f007 f883 	bl	80114c8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800a3c2:	bf00      	nop
 800a3c4:	3708      	adds	r7, #8
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	bd80      	pop	{r7, pc}
	...

0800a3cc <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800a3cc:	b480      	push	{r7}
 800a3ce:	b083      	sub	sp, #12
 800a3d0:	af00      	add	r7, sp, #0
 800a3d2:	4603      	mov	r3, r0
 800a3d4:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800a3d6:	4b05      	ldr	r3, [pc, #20]	; (800a3ec <ptr_to_mem+0x20>)
 800a3d8:	681a      	ldr	r2, [r3, #0]
 800a3da:	88fb      	ldrh	r3, [r7, #6]
 800a3dc:	4413      	add	r3, r2
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	2000c0fc 	.word	0x2000c0fc

0800a3f0 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800a3f8:	4b05      	ldr	r3, [pc, #20]	; (800a410 <mem_to_ptr+0x20>)
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	687a      	ldr	r2, [r7, #4]
 800a3fe:	1ad3      	subs	r3, r2, r3
 800a400:	b29b      	uxth	r3, r3
}
 800a402:	4618      	mov	r0, r3
 800a404:	370c      	adds	r7, #12
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	2000c0fc 	.word	0x2000c0fc

0800a414 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800a414:	b590      	push	{r4, r7, lr}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800a41c:	4b45      	ldr	r3, [pc, #276]	; (800a534 <plug_holes+0x120>)
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	687a      	ldr	r2, [r7, #4]
 800a422:	429a      	cmp	r2, r3
 800a424:	d206      	bcs.n	800a434 <plug_holes+0x20>
 800a426:	4b44      	ldr	r3, [pc, #272]	; (800a538 <plug_holes+0x124>)
 800a428:	f240 12df 	movw	r2, #479	; 0x1df
 800a42c:	4943      	ldr	r1, [pc, #268]	; (800a53c <plug_holes+0x128>)
 800a42e:	4844      	ldr	r0, [pc, #272]	; (800a540 <plug_holes+0x12c>)
 800a430:	f00c fa06 	bl	8016840 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800a434:	4b43      	ldr	r3, [pc, #268]	; (800a544 <plug_holes+0x130>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	687a      	ldr	r2, [r7, #4]
 800a43a:	429a      	cmp	r2, r3
 800a43c:	d306      	bcc.n	800a44c <plug_holes+0x38>
 800a43e:	4b3e      	ldr	r3, [pc, #248]	; (800a538 <plug_holes+0x124>)
 800a440:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800a444:	4940      	ldr	r1, [pc, #256]	; (800a548 <plug_holes+0x134>)
 800a446:	483e      	ldr	r0, [pc, #248]	; (800a540 <plug_holes+0x12c>)
 800a448:	f00c f9fa 	bl	8016840 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	791b      	ldrb	r3, [r3, #4]
 800a450:	2b00      	cmp	r3, #0
 800a452:	d006      	beq.n	800a462 <plug_holes+0x4e>
 800a454:	4b38      	ldr	r3, [pc, #224]	; (800a538 <plug_holes+0x124>)
 800a456:	f240 12e1 	movw	r2, #481	; 0x1e1
 800a45a:	493c      	ldr	r1, [pc, #240]	; (800a54c <plug_holes+0x138>)
 800a45c:	4838      	ldr	r0, [pc, #224]	; (800a540 <plug_holes+0x12c>)
 800a45e:	f00c f9ef 	bl	8016840 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	881b      	ldrh	r3, [r3, #0]
 800a466:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a46a:	d906      	bls.n	800a47a <plug_holes+0x66>
 800a46c:	4b32      	ldr	r3, [pc, #200]	; (800a538 <plug_holes+0x124>)
 800a46e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800a472:	4937      	ldr	r1, [pc, #220]	; (800a550 <plug_holes+0x13c>)
 800a474:	4832      	ldr	r0, [pc, #200]	; (800a540 <plug_holes+0x12c>)
 800a476:	f00c f9e3 	bl	8016840 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	881b      	ldrh	r3, [r3, #0]
 800a47e:	4618      	mov	r0, r3
 800a480:	f7ff ffa4 	bl	800a3cc <ptr_to_mem>
 800a484:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800a486:	687a      	ldr	r2, [r7, #4]
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	429a      	cmp	r2, r3
 800a48c:	d024      	beq.n	800a4d8 <plug_holes+0xc4>
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	791b      	ldrb	r3, [r3, #4]
 800a492:	2b00      	cmp	r3, #0
 800a494:	d120      	bne.n	800a4d8 <plug_holes+0xc4>
 800a496:	4b2b      	ldr	r3, [pc, #172]	; (800a544 <plug_holes+0x130>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	429a      	cmp	r2, r3
 800a49e:	d01b      	beq.n	800a4d8 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800a4a0:	4b2c      	ldr	r3, [pc, #176]	; (800a554 <plug_holes+0x140>)
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	68fa      	ldr	r2, [r7, #12]
 800a4a6:	429a      	cmp	r2, r3
 800a4a8:	d102      	bne.n	800a4b0 <plug_holes+0x9c>
      lfree = mem;
 800a4aa:	4a2a      	ldr	r2, [pc, #168]	; (800a554 <plug_holes+0x140>)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	881a      	ldrh	r2, [r3, #0]
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	881b      	ldrh	r3, [r3, #0]
 800a4bc:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a4c0:	d00a      	beq.n	800a4d8 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	881b      	ldrh	r3, [r3, #0]
 800a4c6:	4618      	mov	r0, r3
 800a4c8:	f7ff ff80 	bl	800a3cc <ptr_to_mem>
 800a4cc:	4604      	mov	r4, r0
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f7ff ff8e 	bl	800a3f0 <mem_to_ptr>
 800a4d4:	4603      	mov	r3, r0
 800a4d6:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	885b      	ldrh	r3, [r3, #2]
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7ff ff75 	bl	800a3cc <ptr_to_mem>
 800a4e2:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d01f      	beq.n	800a52c <plug_holes+0x118>
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	791b      	ldrb	r3, [r3, #4]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d11b      	bne.n	800a52c <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800a4f4:	4b17      	ldr	r3, [pc, #92]	; (800a554 <plug_holes+0x140>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d102      	bne.n	800a504 <plug_holes+0xf0>
      lfree = pmem;
 800a4fe:	4a15      	ldr	r2, [pc, #84]	; (800a554 <plug_holes+0x140>)
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	881a      	ldrh	r2, [r3, #0]
 800a508:	68bb      	ldr	r3, [r7, #8]
 800a50a:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	881b      	ldrh	r3, [r3, #0]
 800a510:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a514:	d00a      	beq.n	800a52c <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	881b      	ldrh	r3, [r3, #0]
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7ff ff56 	bl	800a3cc <ptr_to_mem>
 800a520:	4604      	mov	r4, r0
 800a522:	68b8      	ldr	r0, [r7, #8]
 800a524:	f7ff ff64 	bl	800a3f0 <mem_to_ptr>
 800a528:	4603      	mov	r3, r0
 800a52a:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800a52c:	bf00      	nop
 800a52e:	3714      	adds	r7, #20
 800a530:	46bd      	mov	sp, r7
 800a532:	bd90      	pop	{r4, r7, pc}
 800a534:	2000c0fc 	.word	0x2000c0fc
 800a538:	08017818 	.word	0x08017818
 800a53c:	08017848 	.word	0x08017848
 800a540:	08017860 	.word	0x08017860
 800a544:	2000c100 	.word	0x2000c100
 800a548:	08017888 	.word	0x08017888
 800a54c:	080178a4 	.word	0x080178a4
 800a550:	080178c0 	.word	0x080178c0
 800a554:	2000c108 	.word	0x2000c108

0800a558 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b082      	sub	sp, #8
 800a55c:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800a55e:	4b1f      	ldr	r3, [pc, #124]	; (800a5dc <mem_init+0x84>)
 800a560:	3303      	adds	r3, #3
 800a562:	f023 0303 	bic.w	r3, r3, #3
 800a566:	461a      	mov	r2, r3
 800a568:	4b1d      	ldr	r3, [pc, #116]	; (800a5e0 <mem_init+0x88>)
 800a56a:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800a56c:	4b1c      	ldr	r3, [pc, #112]	; (800a5e0 <mem_init+0x88>)
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a578:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2200      	movs	r2, #0
 800a57e:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2200      	movs	r2, #0
 800a584:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800a586:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800a58a:	f7ff ff1f 	bl	800a3cc <ptr_to_mem>
 800a58e:	4603      	mov	r3, r0
 800a590:	4a14      	ldr	r2, [pc, #80]	; (800a5e4 <mem_init+0x8c>)
 800a592:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800a594:	4b13      	ldr	r3, [pc, #76]	; (800a5e4 <mem_init+0x8c>)
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	2201      	movs	r2, #1
 800a59a:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800a59c:	4b11      	ldr	r3, [pc, #68]	; (800a5e4 <mem_init+0x8c>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a5a4:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800a5a6:	4b0f      	ldr	r3, [pc, #60]	; (800a5e4 <mem_init+0x8c>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800a5ae:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800a5b0:	4b0b      	ldr	r3, [pc, #44]	; (800a5e0 <mem_init+0x88>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a0c      	ldr	r2, [pc, #48]	; (800a5e8 <mem_init+0x90>)
 800a5b6:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800a5b8:	480c      	ldr	r0, [pc, #48]	; (800a5ec <mem_init+0x94>)
 800a5ba:	f00b fef9 	bl	80163b0 <sys_mutex_new>
 800a5be:	4603      	mov	r3, r0
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d006      	beq.n	800a5d2 <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800a5c4:	4b0a      	ldr	r3, [pc, #40]	; (800a5f0 <mem_init+0x98>)
 800a5c6:	f240 221f 	movw	r2, #543	; 0x21f
 800a5ca:	490a      	ldr	r1, [pc, #40]	; (800a5f4 <mem_init+0x9c>)
 800a5cc:	480a      	ldr	r0, [pc, #40]	; (800a5f8 <mem_init+0xa0>)
 800a5ce:	f00c f937 	bl	8016840 <iprintf>
  }
}
 800a5d2:	bf00      	nop
 800a5d4:	3708      	adds	r7, #8
 800a5d6:	46bd      	mov	sp, r7
 800a5d8:	bd80      	pop	{r7, pc}
 800a5da:	bf00      	nop
 800a5dc:	200098e8 	.word	0x200098e8
 800a5e0:	2000c0fc 	.word	0x2000c0fc
 800a5e4:	2000c100 	.word	0x2000c100
 800a5e8:	2000c108 	.word	0x2000c108
 800a5ec:	2000c104 	.word	0x2000c104
 800a5f0:	08017818 	.word	0x08017818
 800a5f4:	080178ec 	.word	0x080178ec
 800a5f8:	08017860 	.word	0x08017860

0800a5fc <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
 800a602:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7ff fef3 	bl	800a3f0 <mem_to_ptr>
 800a60a:	4603      	mov	r3, r0
 800a60c:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	881b      	ldrh	r3, [r3, #0]
 800a612:	4618      	mov	r0, r3
 800a614:	f7ff feda 	bl	800a3cc <ptr_to_mem>
 800a618:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	885b      	ldrh	r3, [r3, #2]
 800a61e:	4618      	mov	r0, r3
 800a620:	f7ff fed4 	bl	800a3cc <ptr_to_mem>
 800a624:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	881b      	ldrh	r3, [r3, #0]
 800a62a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a62e:	d818      	bhi.n	800a662 <mem_link_valid+0x66>
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	885b      	ldrh	r3, [r3, #2]
 800a634:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a638:	d813      	bhi.n	800a662 <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800a63e:	8afa      	ldrh	r2, [r7, #22]
 800a640:	429a      	cmp	r2, r3
 800a642:	d004      	beq.n	800a64e <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	881b      	ldrh	r3, [r3, #0]
 800a648:	8afa      	ldrh	r2, [r7, #22]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d109      	bne.n	800a662 <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a64e:	4b08      	ldr	r3, [pc, #32]	; (800a670 <mem_link_valid+0x74>)
 800a650:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800a652:	693a      	ldr	r2, [r7, #16]
 800a654:	429a      	cmp	r2, r3
 800a656:	d006      	beq.n	800a666 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800a658:	693b      	ldr	r3, [r7, #16]
 800a65a:	885b      	ldrh	r3, [r3, #2]
 800a65c:	8afa      	ldrh	r2, [r7, #22]
 800a65e:	429a      	cmp	r2, r3
 800a660:	d001      	beq.n	800a666 <mem_link_valid+0x6a>
    return 0;
 800a662:	2300      	movs	r3, #0
 800a664:	e000      	b.n	800a668 <mem_link_valid+0x6c>
  }
  return 1;
 800a666:	2301      	movs	r3, #1
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3718      	adds	r7, #24
 800a66c:	46bd      	mov	sp, r7
 800a66e:	bd80      	pop	{r7, pc}
 800a670:	2000c100 	.word	0x2000c100

0800a674 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800a674:	b580      	push	{r7, lr}
 800a676:	b088      	sub	sp, #32
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d070      	beq.n	800a764 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f003 0303 	and.w	r3, r3, #3
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00d      	beq.n	800a6a8 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800a68c:	4b37      	ldr	r3, [pc, #220]	; (800a76c <mem_free+0xf8>)
 800a68e:	f240 2273 	movw	r2, #627	; 0x273
 800a692:	4937      	ldr	r1, [pc, #220]	; (800a770 <mem_free+0xfc>)
 800a694:	4837      	ldr	r0, [pc, #220]	; (800a774 <mem_free+0x100>)
 800a696:	f00c f8d3 	bl	8016840 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a69a:	f00b fedb 	bl	8016454 <sys_arch_protect>
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	68f8      	ldr	r0, [r7, #12]
 800a6a2:	f00b fee5 	bl	8016470 <sys_arch_unprotect>
    return;
 800a6a6:	e05e      	b.n	800a766 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	3b08      	subs	r3, #8
 800a6ac:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800a6ae:	4b32      	ldr	r3, [pc, #200]	; (800a778 <mem_free+0x104>)
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	69fa      	ldr	r2, [r7, #28]
 800a6b4:	429a      	cmp	r2, r3
 800a6b6:	d306      	bcc.n	800a6c6 <mem_free+0x52>
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f103 020c 	add.w	r2, r3, #12
 800a6be:	4b2f      	ldr	r3, [pc, #188]	; (800a77c <mem_free+0x108>)
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	d90d      	bls.n	800a6e2 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800a6c6:	4b29      	ldr	r3, [pc, #164]	; (800a76c <mem_free+0xf8>)
 800a6c8:	f240 227f 	movw	r2, #639	; 0x27f
 800a6cc:	492c      	ldr	r1, [pc, #176]	; (800a780 <mem_free+0x10c>)
 800a6ce:	4829      	ldr	r0, [pc, #164]	; (800a774 <mem_free+0x100>)
 800a6d0:	f00c f8b6 	bl	8016840 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a6d4:	f00b febe 	bl	8016454 <sys_arch_protect>
 800a6d8:	6138      	str	r0, [r7, #16]
 800a6da:	6938      	ldr	r0, [r7, #16]
 800a6dc:	f00b fec8 	bl	8016470 <sys_arch_unprotect>
    return;
 800a6e0:	e041      	b.n	800a766 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a6e2:	4828      	ldr	r0, [pc, #160]	; (800a784 <mem_free+0x110>)
 800a6e4:	f00b fe7a 	bl	80163dc <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800a6e8:	69fb      	ldr	r3, [r7, #28]
 800a6ea:	791b      	ldrb	r3, [r3, #4]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d110      	bne.n	800a712 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800a6f0:	4b1e      	ldr	r3, [pc, #120]	; (800a76c <mem_free+0xf8>)
 800a6f2:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800a6f6:	4924      	ldr	r1, [pc, #144]	; (800a788 <mem_free+0x114>)
 800a6f8:	481e      	ldr	r0, [pc, #120]	; (800a774 <mem_free+0x100>)
 800a6fa:	f00c f8a1 	bl	8016840 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a6fe:	4821      	ldr	r0, [pc, #132]	; (800a784 <mem_free+0x110>)
 800a700:	f00b fe7b 	bl	80163fa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a704:	f00b fea6 	bl	8016454 <sys_arch_protect>
 800a708:	6178      	str	r0, [r7, #20]
 800a70a:	6978      	ldr	r0, [r7, #20]
 800a70c:	f00b feb0 	bl	8016470 <sys_arch_unprotect>
    return;
 800a710:	e029      	b.n	800a766 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800a712:	69f8      	ldr	r0, [r7, #28]
 800a714:	f7ff ff72 	bl	800a5fc <mem_link_valid>
 800a718:	4603      	mov	r3, r0
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d110      	bne.n	800a740 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800a71e:	4b13      	ldr	r3, [pc, #76]	; (800a76c <mem_free+0xf8>)
 800a720:	f240 2295 	movw	r2, #661	; 0x295
 800a724:	4919      	ldr	r1, [pc, #100]	; (800a78c <mem_free+0x118>)
 800a726:	4813      	ldr	r0, [pc, #76]	; (800a774 <mem_free+0x100>)
 800a728:	f00c f88a 	bl	8016840 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800a72c:	4815      	ldr	r0, [pc, #84]	; (800a784 <mem_free+0x110>)
 800a72e:	f00b fe64 	bl	80163fa <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a732:	f00b fe8f 	bl	8016454 <sys_arch_protect>
 800a736:	61b8      	str	r0, [r7, #24]
 800a738:	69b8      	ldr	r0, [r7, #24]
 800a73a:	f00b fe99 	bl	8016470 <sys_arch_unprotect>
    return;
 800a73e:	e012      	b.n	800a766 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800a740:	69fb      	ldr	r3, [r7, #28]
 800a742:	2200      	movs	r2, #0
 800a744:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800a746:	4b12      	ldr	r3, [pc, #72]	; (800a790 <mem_free+0x11c>)
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	69fa      	ldr	r2, [r7, #28]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d202      	bcs.n	800a756 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800a750:	4a0f      	ldr	r2, [pc, #60]	; (800a790 <mem_free+0x11c>)
 800a752:	69fb      	ldr	r3, [r7, #28]
 800a754:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800a756:	69f8      	ldr	r0, [r7, #28]
 800a758:	f7ff fe5c 	bl	800a414 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a75c:	4809      	ldr	r0, [pc, #36]	; (800a784 <mem_free+0x110>)
 800a75e:	f00b fe4c 	bl	80163fa <sys_mutex_unlock>
 800a762:	e000      	b.n	800a766 <mem_free+0xf2>
    return;
 800a764:	bf00      	nop
}
 800a766:	3720      	adds	r7, #32
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	08017818 	.word	0x08017818
 800a770:	08017908 	.word	0x08017908
 800a774:	08017860 	.word	0x08017860
 800a778:	2000c0fc 	.word	0x2000c0fc
 800a77c:	2000c100 	.word	0x2000c100
 800a780:	0801792c 	.word	0x0801792c
 800a784:	2000c104 	.word	0x2000c104
 800a788:	08017948 	.word	0x08017948
 800a78c:	08017970 	.word	0x08017970
 800a790:	2000c108 	.word	0x2000c108

0800a794 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b088      	sub	sp, #32
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
 800a79c:	460b      	mov	r3, r1
 800a79e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800a7a0:	887b      	ldrh	r3, [r7, #2]
 800a7a2:	3303      	adds	r3, #3
 800a7a4:	b29b      	uxth	r3, r3
 800a7a6:	f023 0303 	bic.w	r3, r3, #3
 800a7aa:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800a7ac:	8bfb      	ldrh	r3, [r7, #30]
 800a7ae:	2b0b      	cmp	r3, #11
 800a7b0:	d801      	bhi.n	800a7b6 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800a7b2:	230c      	movs	r3, #12
 800a7b4:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800a7b6:	8bfb      	ldrh	r3, [r7, #30]
 800a7b8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a7bc:	d803      	bhi.n	800a7c6 <mem_trim+0x32>
 800a7be:	8bfa      	ldrh	r2, [r7, #30]
 800a7c0:	887b      	ldrh	r3, [r7, #2]
 800a7c2:	429a      	cmp	r2, r3
 800a7c4:	d201      	bcs.n	800a7ca <mem_trim+0x36>
    return NULL;
 800a7c6:	2300      	movs	r3, #0
 800a7c8:	e0d8      	b.n	800a97c <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800a7ca:	4b6e      	ldr	r3, [pc, #440]	; (800a984 <mem_trim+0x1f0>)
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	687a      	ldr	r2, [r7, #4]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d304      	bcc.n	800a7de <mem_trim+0x4a>
 800a7d4:	4b6c      	ldr	r3, [pc, #432]	; (800a988 <mem_trim+0x1f4>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	687a      	ldr	r2, [r7, #4]
 800a7da:	429a      	cmp	r2, r3
 800a7dc:	d306      	bcc.n	800a7ec <mem_trim+0x58>
 800a7de:	4b6b      	ldr	r3, [pc, #428]	; (800a98c <mem_trim+0x1f8>)
 800a7e0:	f240 22d1 	movw	r2, #721	; 0x2d1
 800a7e4:	496a      	ldr	r1, [pc, #424]	; (800a990 <mem_trim+0x1fc>)
 800a7e6:	486b      	ldr	r0, [pc, #428]	; (800a994 <mem_trim+0x200>)
 800a7e8:	f00c f82a 	bl	8016840 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800a7ec:	4b65      	ldr	r3, [pc, #404]	; (800a984 <mem_trim+0x1f0>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	687a      	ldr	r2, [r7, #4]
 800a7f2:	429a      	cmp	r2, r3
 800a7f4:	d304      	bcc.n	800a800 <mem_trim+0x6c>
 800a7f6:	4b64      	ldr	r3, [pc, #400]	; (800a988 <mem_trim+0x1f4>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	429a      	cmp	r2, r3
 800a7fe:	d307      	bcc.n	800a810 <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800a800:	f00b fe28 	bl	8016454 <sys_arch_protect>
 800a804:	60b8      	str	r0, [r7, #8]
 800a806:	68b8      	ldr	r0, [r7, #8]
 800a808:	f00b fe32 	bl	8016470 <sys_arch_unprotect>
    return rmem;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	e0b5      	b.n	800a97c <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	3b08      	subs	r3, #8
 800a814:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800a816:	69b8      	ldr	r0, [r7, #24]
 800a818:	f7ff fdea 	bl	800a3f0 <mem_to_ptr>
 800a81c:	4603      	mov	r3, r0
 800a81e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800a820:	69bb      	ldr	r3, [r7, #24]
 800a822:	881a      	ldrh	r2, [r3, #0]
 800a824:	8afb      	ldrh	r3, [r7, #22]
 800a826:	1ad3      	subs	r3, r2, r3
 800a828:	b29b      	uxth	r3, r3
 800a82a:	3b08      	subs	r3, #8
 800a82c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800a82e:	8bfa      	ldrh	r2, [r7, #30]
 800a830:	8abb      	ldrh	r3, [r7, #20]
 800a832:	429a      	cmp	r2, r3
 800a834:	d906      	bls.n	800a844 <mem_trim+0xb0>
 800a836:	4b55      	ldr	r3, [pc, #340]	; (800a98c <mem_trim+0x1f8>)
 800a838:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800a83c:	4956      	ldr	r1, [pc, #344]	; (800a998 <mem_trim+0x204>)
 800a83e:	4855      	ldr	r0, [pc, #340]	; (800a994 <mem_trim+0x200>)
 800a840:	f00b fffe 	bl	8016840 <iprintf>
  if (newsize > size) {
 800a844:	8bfa      	ldrh	r2, [r7, #30]
 800a846:	8abb      	ldrh	r3, [r7, #20]
 800a848:	429a      	cmp	r2, r3
 800a84a:	d901      	bls.n	800a850 <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800a84c:	2300      	movs	r3, #0
 800a84e:	e095      	b.n	800a97c <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800a850:	8bfa      	ldrh	r2, [r7, #30]
 800a852:	8abb      	ldrh	r3, [r7, #20]
 800a854:	429a      	cmp	r2, r3
 800a856:	d101      	bne.n	800a85c <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	e08f      	b.n	800a97c <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800a85c:	484f      	ldr	r0, [pc, #316]	; (800a99c <mem_trim+0x208>)
 800a85e:	f00b fdbd 	bl	80163dc <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800a862:	69bb      	ldr	r3, [r7, #24]
 800a864:	881b      	ldrh	r3, [r3, #0]
 800a866:	4618      	mov	r0, r3
 800a868:	f7ff fdb0 	bl	800a3cc <ptr_to_mem>
 800a86c:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	791b      	ldrb	r3, [r3, #4]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d13f      	bne.n	800a8f6 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	881b      	ldrh	r3, [r3, #0]
 800a87a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a87e:	d106      	bne.n	800a88e <mem_trim+0xfa>
 800a880:	4b42      	ldr	r3, [pc, #264]	; (800a98c <mem_trim+0x1f8>)
 800a882:	f240 22f5 	movw	r2, #757	; 0x2f5
 800a886:	4946      	ldr	r1, [pc, #280]	; (800a9a0 <mem_trim+0x20c>)
 800a888:	4842      	ldr	r0, [pc, #264]	; (800a994 <mem_trim+0x200>)
 800a88a:	f00b ffd9 	bl	8016840 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800a88e:	693b      	ldr	r3, [r7, #16]
 800a890:	881b      	ldrh	r3, [r3, #0]
 800a892:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a894:	8afa      	ldrh	r2, [r7, #22]
 800a896:	8bfb      	ldrh	r3, [r7, #30]
 800a898:	4413      	add	r3, r2
 800a89a:	b29b      	uxth	r3, r3
 800a89c:	3308      	adds	r3, #8
 800a89e:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800a8a0:	4b40      	ldr	r3, [pc, #256]	; (800a9a4 <mem_trim+0x210>)
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	693a      	ldr	r2, [r7, #16]
 800a8a6:	429a      	cmp	r2, r3
 800a8a8:	d106      	bne.n	800a8b8 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800a8aa:	89fb      	ldrh	r3, [r7, #14]
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7ff fd8d 	bl	800a3cc <ptr_to_mem>
 800a8b2:	4603      	mov	r3, r0
 800a8b4:	4a3b      	ldr	r2, [pc, #236]	; (800a9a4 <mem_trim+0x210>)
 800a8b6:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800a8b8:	89fb      	ldrh	r3, [r7, #14]
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f7ff fd86 	bl	800a3cc <ptr_to_mem>
 800a8c0:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800a8c2:	693b      	ldr	r3, [r7, #16]
 800a8c4:	2200      	movs	r2, #0
 800a8c6:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800a8c8:	693b      	ldr	r3, [r7, #16]
 800a8ca:	89ba      	ldrh	r2, [r7, #12]
 800a8cc:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	8afa      	ldrh	r2, [r7, #22]
 800a8d2:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800a8d4:	69bb      	ldr	r3, [r7, #24]
 800a8d6:	89fa      	ldrh	r2, [r7, #14]
 800a8d8:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a8da:	693b      	ldr	r3, [r7, #16]
 800a8dc:	881b      	ldrh	r3, [r3, #0]
 800a8de:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a8e2:	d047      	beq.n	800a974 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a8e4:	693b      	ldr	r3, [r7, #16]
 800a8e6:	881b      	ldrh	r3, [r3, #0]
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	f7ff fd6f 	bl	800a3cc <ptr_to_mem>
 800a8ee:	4602      	mov	r2, r0
 800a8f0:	89fb      	ldrh	r3, [r7, #14]
 800a8f2:	8053      	strh	r3, [r2, #2]
 800a8f4:	e03e      	b.n	800a974 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800a8f6:	8bfb      	ldrh	r3, [r7, #30]
 800a8f8:	f103 0214 	add.w	r2, r3, #20
 800a8fc:	8abb      	ldrh	r3, [r7, #20]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d838      	bhi.n	800a974 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800a902:	8afa      	ldrh	r2, [r7, #22]
 800a904:	8bfb      	ldrh	r3, [r7, #30]
 800a906:	4413      	add	r3, r2
 800a908:	b29b      	uxth	r3, r3
 800a90a:	3308      	adds	r3, #8
 800a90c:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800a90e:	69bb      	ldr	r3, [r7, #24]
 800a910:	881b      	ldrh	r3, [r3, #0]
 800a912:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a916:	d106      	bne.n	800a926 <mem_trim+0x192>
 800a918:	4b1c      	ldr	r3, [pc, #112]	; (800a98c <mem_trim+0x1f8>)
 800a91a:	f240 3216 	movw	r2, #790	; 0x316
 800a91e:	4920      	ldr	r1, [pc, #128]	; (800a9a0 <mem_trim+0x20c>)
 800a920:	481c      	ldr	r0, [pc, #112]	; (800a994 <mem_trim+0x200>)
 800a922:	f00b ff8d 	bl	8016840 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800a926:	89fb      	ldrh	r3, [r7, #14]
 800a928:	4618      	mov	r0, r3
 800a92a:	f7ff fd4f 	bl	800a3cc <ptr_to_mem>
 800a92e:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800a930:	4b1c      	ldr	r3, [pc, #112]	; (800a9a4 <mem_trim+0x210>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	429a      	cmp	r2, r3
 800a938:	d202      	bcs.n	800a940 <mem_trim+0x1ac>
      lfree = mem2;
 800a93a:	4a1a      	ldr	r2, [pc, #104]	; (800a9a4 <mem_trim+0x210>)
 800a93c:	693b      	ldr	r3, [r7, #16]
 800a93e:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800a940:	693b      	ldr	r3, [r7, #16]
 800a942:	2200      	movs	r2, #0
 800a944:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800a946:	69bb      	ldr	r3, [r7, #24]
 800a948:	881a      	ldrh	r2, [r3, #0]
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800a94e:	693b      	ldr	r3, [r7, #16]
 800a950:	8afa      	ldrh	r2, [r7, #22]
 800a952:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800a954:	69bb      	ldr	r3, [r7, #24]
 800a956:	89fa      	ldrh	r2, [r7, #14]
 800a958:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800a95a:	693b      	ldr	r3, [r7, #16]
 800a95c:	881b      	ldrh	r3, [r3, #0]
 800a95e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a962:	d007      	beq.n	800a974 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	881b      	ldrh	r3, [r3, #0]
 800a968:	4618      	mov	r0, r3
 800a96a:	f7ff fd2f 	bl	800a3cc <ptr_to_mem>
 800a96e:	4602      	mov	r2, r0
 800a970:	89fb      	ldrh	r3, [r7, #14]
 800a972:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800a974:	4809      	ldr	r0, [pc, #36]	; (800a99c <mem_trim+0x208>)
 800a976:	f00b fd40 	bl	80163fa <sys_mutex_unlock>
  return rmem;
 800a97a:	687b      	ldr	r3, [r7, #4]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3720      	adds	r7, #32
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	2000c0fc 	.word	0x2000c0fc
 800a988:	2000c100 	.word	0x2000c100
 800a98c:	08017818 	.word	0x08017818
 800a990:	080179a4 	.word	0x080179a4
 800a994:	08017860 	.word	0x08017860
 800a998:	080179bc 	.word	0x080179bc
 800a99c:	2000c104 	.word	0x2000c104
 800a9a0:	080179dc 	.word	0x080179dc
 800a9a4:	2000c108 	.word	0x2000c108

0800a9a8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800a9a8:	b580      	push	{r7, lr}
 800a9aa:	b088      	sub	sp, #32
 800a9ac:	af00      	add	r7, sp, #0
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800a9b2:	88fb      	ldrh	r3, [r7, #6]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d101      	bne.n	800a9bc <mem_malloc+0x14>
    return NULL;
 800a9b8:	2300      	movs	r3, #0
 800a9ba:	e0e2      	b.n	800ab82 <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800a9bc:	88fb      	ldrh	r3, [r7, #6]
 800a9be:	3303      	adds	r3, #3
 800a9c0:	b29b      	uxth	r3, r3
 800a9c2:	f023 0303 	bic.w	r3, r3, #3
 800a9c6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800a9c8:	8bbb      	ldrh	r3, [r7, #28]
 800a9ca:	2b0b      	cmp	r3, #11
 800a9cc:	d801      	bhi.n	800a9d2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800a9ce:	230c      	movs	r3, #12
 800a9d0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800a9d2:	8bbb      	ldrh	r3, [r7, #28]
 800a9d4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800a9d8:	d803      	bhi.n	800a9e2 <mem_malloc+0x3a>
 800a9da:	8bba      	ldrh	r2, [r7, #28]
 800a9dc:	88fb      	ldrh	r3, [r7, #6]
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d201      	bcs.n	800a9e6 <mem_malloc+0x3e>
    return NULL;
 800a9e2:	2300      	movs	r3, #0
 800a9e4:	e0cd      	b.n	800ab82 <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800a9e6:	4869      	ldr	r0, [pc, #420]	; (800ab8c <mem_malloc+0x1e4>)
 800a9e8:	f00b fcf8 	bl	80163dc <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800a9ec:	4b68      	ldr	r3, [pc, #416]	; (800ab90 <mem_malloc+0x1e8>)
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	f7ff fcfd 	bl	800a3f0 <mem_to_ptr>
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	83fb      	strh	r3, [r7, #30]
 800a9fa:	e0b7      	b.n	800ab6c <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800a9fc:	8bfb      	ldrh	r3, [r7, #30]
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7ff fce4 	bl	800a3cc <ptr_to_mem>
 800aa04:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	791b      	ldrb	r3, [r3, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	f040 80a7 	bne.w	800ab5e <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	881b      	ldrh	r3, [r3, #0]
 800aa14:	461a      	mov	r2, r3
 800aa16:	8bfb      	ldrh	r3, [r7, #30]
 800aa18:	1ad3      	subs	r3, r2, r3
 800aa1a:	f1a3 0208 	sub.w	r2, r3, #8
 800aa1e:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800aa20:	429a      	cmp	r2, r3
 800aa22:	f0c0 809c 	bcc.w	800ab5e <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800aa26:	697b      	ldr	r3, [r7, #20]
 800aa28:	881b      	ldrh	r3, [r3, #0]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	8bfb      	ldrh	r3, [r7, #30]
 800aa2e:	1ad3      	subs	r3, r2, r3
 800aa30:	f1a3 0208 	sub.w	r2, r3, #8
 800aa34:	8bbb      	ldrh	r3, [r7, #28]
 800aa36:	3314      	adds	r3, #20
 800aa38:	429a      	cmp	r2, r3
 800aa3a:	d333      	bcc.n	800aaa4 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800aa3c:	8bfa      	ldrh	r2, [r7, #30]
 800aa3e:	8bbb      	ldrh	r3, [r7, #28]
 800aa40:	4413      	add	r3, r2
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	3308      	adds	r3, #8
 800aa46:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800aa48:	8a7b      	ldrh	r3, [r7, #18]
 800aa4a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800aa4e:	d106      	bne.n	800aa5e <mem_malloc+0xb6>
 800aa50:	4b50      	ldr	r3, [pc, #320]	; (800ab94 <mem_malloc+0x1ec>)
 800aa52:	f240 3287 	movw	r2, #903	; 0x387
 800aa56:	4950      	ldr	r1, [pc, #320]	; (800ab98 <mem_malloc+0x1f0>)
 800aa58:	4850      	ldr	r0, [pc, #320]	; (800ab9c <mem_malloc+0x1f4>)
 800aa5a:	f00b fef1 	bl	8016840 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800aa5e:	8a7b      	ldrh	r3, [r7, #18]
 800aa60:	4618      	mov	r0, r3
 800aa62:	f7ff fcb3 	bl	800a3cc <ptr_to_mem>
 800aa66:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	2200      	movs	r2, #0
 800aa6c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800aa6e:	697b      	ldr	r3, [r7, #20]
 800aa70:	881a      	ldrh	r2, [r3, #0]
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	8bfa      	ldrh	r2, [r7, #30]
 800aa7a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	8a7a      	ldrh	r2, [r7, #18]
 800aa80:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	2201      	movs	r2, #1
 800aa86:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	881b      	ldrh	r3, [r3, #0]
 800aa8c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800aa90:	d00b      	beq.n	800aaaa <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	881b      	ldrh	r3, [r3, #0]
 800aa96:	4618      	mov	r0, r3
 800aa98:	f7ff fc98 	bl	800a3cc <ptr_to_mem>
 800aa9c:	4602      	mov	r2, r0
 800aa9e:	8a7b      	ldrh	r3, [r7, #18]
 800aaa0:	8053      	strh	r3, [r2, #2]
 800aaa2:	e002      	b.n	800aaaa <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	2201      	movs	r2, #1
 800aaa8:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800aaaa:	4b39      	ldr	r3, [pc, #228]	; (800ab90 <mem_malloc+0x1e8>)
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	697a      	ldr	r2, [r7, #20]
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d127      	bne.n	800ab04 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800aab4:	4b36      	ldr	r3, [pc, #216]	; (800ab90 <mem_malloc+0x1e8>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800aaba:	e005      	b.n	800aac8 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800aabc:	69bb      	ldr	r3, [r7, #24]
 800aabe:	881b      	ldrh	r3, [r3, #0]
 800aac0:	4618      	mov	r0, r3
 800aac2:	f7ff fc83 	bl	800a3cc <ptr_to_mem>
 800aac6:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800aac8:	69bb      	ldr	r3, [r7, #24]
 800aaca:	791b      	ldrb	r3, [r3, #4]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d004      	beq.n	800aada <mem_malloc+0x132>
 800aad0:	4b33      	ldr	r3, [pc, #204]	; (800aba0 <mem_malloc+0x1f8>)
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	69ba      	ldr	r2, [r7, #24]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d1f0      	bne.n	800aabc <mem_malloc+0x114>
          }
          lfree = cur;
 800aada:	4a2d      	ldr	r2, [pc, #180]	; (800ab90 <mem_malloc+0x1e8>)
 800aadc:	69bb      	ldr	r3, [r7, #24]
 800aade:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800aae0:	4b2b      	ldr	r3, [pc, #172]	; (800ab90 <mem_malloc+0x1e8>)
 800aae2:	681a      	ldr	r2, [r3, #0]
 800aae4:	4b2e      	ldr	r3, [pc, #184]	; (800aba0 <mem_malloc+0x1f8>)
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	429a      	cmp	r2, r3
 800aaea:	d00b      	beq.n	800ab04 <mem_malloc+0x15c>
 800aaec:	4b28      	ldr	r3, [pc, #160]	; (800ab90 <mem_malloc+0x1e8>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	791b      	ldrb	r3, [r3, #4]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d006      	beq.n	800ab04 <mem_malloc+0x15c>
 800aaf6:	4b27      	ldr	r3, [pc, #156]	; (800ab94 <mem_malloc+0x1ec>)
 800aaf8:	f240 32b5 	movw	r2, #949	; 0x3b5
 800aafc:	4929      	ldr	r1, [pc, #164]	; (800aba4 <mem_malloc+0x1fc>)
 800aafe:	4827      	ldr	r0, [pc, #156]	; (800ab9c <mem_malloc+0x1f4>)
 800ab00:	f00b fe9e 	bl	8016840 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800ab04:	4821      	ldr	r0, [pc, #132]	; (800ab8c <mem_malloc+0x1e4>)
 800ab06:	f00b fc78 	bl	80163fa <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ab0a:	8bba      	ldrh	r2, [r7, #28]
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	4413      	add	r3, r2
 800ab10:	3308      	adds	r3, #8
 800ab12:	4a23      	ldr	r2, [pc, #140]	; (800aba0 <mem_malloc+0x1f8>)
 800ab14:	6812      	ldr	r2, [r2, #0]
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d906      	bls.n	800ab28 <mem_malloc+0x180>
 800ab1a:	4b1e      	ldr	r3, [pc, #120]	; (800ab94 <mem_malloc+0x1ec>)
 800ab1c:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ab20:	4921      	ldr	r1, [pc, #132]	; (800aba8 <mem_malloc+0x200>)
 800ab22:	481e      	ldr	r0, [pc, #120]	; (800ab9c <mem_malloc+0x1f4>)
 800ab24:	f00b fe8c 	bl	8016840 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ab28:	697b      	ldr	r3, [r7, #20]
 800ab2a:	f003 0303 	and.w	r3, r3, #3
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d006      	beq.n	800ab40 <mem_malloc+0x198>
 800ab32:	4b18      	ldr	r3, [pc, #96]	; (800ab94 <mem_malloc+0x1ec>)
 800ab34:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ab38:	491c      	ldr	r1, [pc, #112]	; (800abac <mem_malloc+0x204>)
 800ab3a:	4818      	ldr	r0, [pc, #96]	; (800ab9c <mem_malloc+0x1f4>)
 800ab3c:	f00b fe80 	bl	8016840 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	f003 0303 	and.w	r3, r3, #3
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d006      	beq.n	800ab58 <mem_malloc+0x1b0>
 800ab4a:	4b12      	ldr	r3, [pc, #72]	; (800ab94 <mem_malloc+0x1ec>)
 800ab4c:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ab50:	4917      	ldr	r1, [pc, #92]	; (800abb0 <mem_malloc+0x208>)
 800ab52:	4812      	ldr	r0, [pc, #72]	; (800ab9c <mem_malloc+0x1f4>)
 800ab54:	f00b fe74 	bl	8016840 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	3308      	adds	r3, #8
 800ab5c:	e011      	b.n	800ab82 <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800ab5e:	8bfb      	ldrh	r3, [r7, #30]
 800ab60:	4618      	mov	r0, r3
 800ab62:	f7ff fc33 	bl	800a3cc <ptr_to_mem>
 800ab66:	4603      	mov	r3, r0
 800ab68:	881b      	ldrh	r3, [r3, #0]
 800ab6a:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ab6c:	8bfa      	ldrh	r2, [r7, #30]
 800ab6e:	8bbb      	ldrh	r3, [r7, #28]
 800ab70:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800ab74:	429a      	cmp	r2, r3
 800ab76:	f4ff af41 	bcc.w	800a9fc <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800ab7a:	4804      	ldr	r0, [pc, #16]	; (800ab8c <mem_malloc+0x1e4>)
 800ab7c:	f00b fc3d 	bl	80163fa <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800ab80:	2300      	movs	r3, #0
}
 800ab82:	4618      	mov	r0, r3
 800ab84:	3720      	adds	r7, #32
 800ab86:	46bd      	mov	sp, r7
 800ab88:	bd80      	pop	{r7, pc}
 800ab8a:	bf00      	nop
 800ab8c:	2000c104 	.word	0x2000c104
 800ab90:	2000c108 	.word	0x2000c108
 800ab94:	08017818 	.word	0x08017818
 800ab98:	080179dc 	.word	0x080179dc
 800ab9c:	08017860 	.word	0x08017860
 800aba0:	2000c100 	.word	0x2000c100
 800aba4:	080179f0 	.word	0x080179f0
 800aba8:	08017a0c 	.word	0x08017a0c
 800abac:	08017a3c 	.word	0x08017a3c
 800abb0:	08017a6c 	.word	0x08017a6c

0800abb4 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800abb4:	b480      	push	{r7}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	689b      	ldr	r3, [r3, #8]
 800abc0:	2200      	movs	r2, #0
 800abc2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	685b      	ldr	r3, [r3, #4]
 800abc8:	3303      	adds	r3, #3
 800abca:	f023 0303 	bic.w	r3, r3, #3
 800abce:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800abd0:	2300      	movs	r3, #0
 800abd2:	60fb      	str	r3, [r7, #12]
 800abd4:	e011      	b.n	800abfa <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	689b      	ldr	r3, [r3, #8]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	68bb      	ldr	r3, [r7, #8]
 800abde:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	689b      	ldr	r3, [r3, #8]
 800abe4:	68ba      	ldr	r2, [r7, #8]
 800abe6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	881b      	ldrh	r3, [r3, #0]
 800abec:	461a      	mov	r2, r3
 800abee:	68bb      	ldr	r3, [r7, #8]
 800abf0:	4413      	add	r3, r2
 800abf2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	3301      	adds	r3, #1
 800abf8:	60fb      	str	r3, [r7, #12]
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	885b      	ldrh	r3, [r3, #2]
 800abfe:	461a      	mov	r2, r3
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	4293      	cmp	r3, r2
 800ac04:	dbe7      	blt.n	800abd6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ac06:	bf00      	nop
 800ac08:	bf00      	nop
 800ac0a:	3714      	adds	r7, #20
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr

0800ac14 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ac14:	b580      	push	{r7, lr}
 800ac16:	b082      	sub	sp, #8
 800ac18:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	80fb      	strh	r3, [r7, #6]
 800ac1e:	e009      	b.n	800ac34 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ac20:	88fb      	ldrh	r3, [r7, #6]
 800ac22:	4a08      	ldr	r2, [pc, #32]	; (800ac44 <memp_init+0x30>)
 800ac24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7ff ffc3 	bl	800abb4 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ac2e:	88fb      	ldrh	r3, [r7, #6]
 800ac30:	3301      	adds	r3, #1
 800ac32:	80fb      	strh	r3, [r7, #6]
 800ac34:	88fb      	ldrh	r3, [r7, #6]
 800ac36:	2b0c      	cmp	r3, #12
 800ac38:	d9f2      	bls.n	800ac20 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ac3a:	bf00      	nop
 800ac3c:	bf00      	nop
 800ac3e:	3708      	adds	r7, #8
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	0801a644 	.word	0x0801a644

0800ac48 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ac48:	b580      	push	{r7, lr}
 800ac4a:	b084      	sub	sp, #16
 800ac4c:	af00      	add	r7, sp, #0
 800ac4e:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800ac50:	f00b fc00 	bl	8016454 <sys_arch_protect>
 800ac54:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	689b      	ldr	r3, [r3, #8]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d015      	beq.n	800ac90 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	689b      	ldr	r3, [r3, #8]
 800ac68:	68ba      	ldr	r2, [r7, #8]
 800ac6a:	6812      	ldr	r2, [r2, #0]
 800ac6c:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	f003 0303 	and.w	r3, r3, #3
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d006      	beq.n	800ac86 <do_memp_malloc_pool+0x3e>
 800ac78:	4b09      	ldr	r3, [pc, #36]	; (800aca0 <do_memp_malloc_pool+0x58>)
 800ac7a:	f44f 728c 	mov.w	r2, #280	; 0x118
 800ac7e:	4909      	ldr	r1, [pc, #36]	; (800aca4 <do_memp_malloc_pool+0x5c>)
 800ac80:	4809      	ldr	r0, [pc, #36]	; (800aca8 <do_memp_malloc_pool+0x60>)
 800ac82:	f00b fddd 	bl	8016840 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ac86:	68f8      	ldr	r0, [r7, #12]
 800ac88:	f00b fbf2 	bl	8016470 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800ac8c:	68bb      	ldr	r3, [r7, #8]
 800ac8e:	e003      	b.n	800ac98 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800ac90:	68f8      	ldr	r0, [r7, #12]
 800ac92:	f00b fbed 	bl	8016470 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800ac96:	2300      	movs	r3, #0
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	3710      	adds	r7, #16
 800ac9c:	46bd      	mov	sp, r7
 800ac9e:	bd80      	pop	{r7, pc}
 800aca0:	08017a90 	.word	0x08017a90
 800aca4:	08017ac0 	.word	0x08017ac0
 800aca8:	08017ae4 	.word	0x08017ae4

0800acac <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b082      	sub	sp, #8
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d106      	bne.n	800acc8 <memp_malloc_pool+0x1c>
 800acba:	4b0a      	ldr	r3, [pc, #40]	; (800ace4 <memp_malloc_pool+0x38>)
 800acbc:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800acc0:	4909      	ldr	r1, [pc, #36]	; (800ace8 <memp_malloc_pool+0x3c>)
 800acc2:	480a      	ldr	r0, [pc, #40]	; (800acec <memp_malloc_pool+0x40>)
 800acc4:	f00b fdbc 	bl	8016840 <iprintf>
  if (desc == NULL) {
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2b00      	cmp	r3, #0
 800accc:	d101      	bne.n	800acd2 <memp_malloc_pool+0x26>
    return NULL;
 800acce:	2300      	movs	r3, #0
 800acd0:	e003      	b.n	800acda <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800acd2:	6878      	ldr	r0, [r7, #4]
 800acd4:	f7ff ffb8 	bl	800ac48 <do_memp_malloc_pool>
 800acd8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800acda:	4618      	mov	r0, r3
 800acdc:	3708      	adds	r7, #8
 800acde:	46bd      	mov	sp, r7
 800ace0:	bd80      	pop	{r7, pc}
 800ace2:	bf00      	nop
 800ace4:	08017a90 	.word	0x08017a90
 800ace8:	08017b0c 	.word	0x08017b0c
 800acec:	08017ae4 	.word	0x08017ae4

0800acf0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	4603      	mov	r3, r0
 800acf8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800acfa:	79fb      	ldrb	r3, [r7, #7]
 800acfc:	2b0c      	cmp	r3, #12
 800acfe:	d908      	bls.n	800ad12 <memp_malloc+0x22>
 800ad00:	4b0a      	ldr	r3, [pc, #40]	; (800ad2c <memp_malloc+0x3c>)
 800ad02:	f240 1257 	movw	r2, #343	; 0x157
 800ad06:	490a      	ldr	r1, [pc, #40]	; (800ad30 <memp_malloc+0x40>)
 800ad08:	480a      	ldr	r0, [pc, #40]	; (800ad34 <memp_malloc+0x44>)
 800ad0a:	f00b fd99 	bl	8016840 <iprintf>
 800ad0e:	2300      	movs	r3, #0
 800ad10:	e008      	b.n	800ad24 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ad12:	79fb      	ldrb	r3, [r7, #7]
 800ad14:	4a08      	ldr	r2, [pc, #32]	; (800ad38 <memp_malloc+0x48>)
 800ad16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad1a:	4618      	mov	r0, r3
 800ad1c:	f7ff ff94 	bl	800ac48 <do_memp_malloc_pool>
 800ad20:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ad22:	68fb      	ldr	r3, [r7, #12]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3710      	adds	r7, #16
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	08017a90 	.word	0x08017a90
 800ad30:	08017b20 	.word	0x08017b20
 800ad34:	08017ae4 	.word	0x08017ae4
 800ad38:	0801a644 	.word	0x0801a644

0800ad3c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	f003 0303 	and.w	r3, r3, #3
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d006      	beq.n	800ad5e <do_memp_free_pool+0x22>
 800ad50:	4b0d      	ldr	r3, [pc, #52]	; (800ad88 <do_memp_free_pool+0x4c>)
 800ad52:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ad56:	490d      	ldr	r1, [pc, #52]	; (800ad8c <do_memp_free_pool+0x50>)
 800ad58:	480d      	ldr	r0, [pc, #52]	; (800ad90 <do_memp_free_pool+0x54>)
 800ad5a:	f00b fd71 	bl	8016840 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ad62:	f00b fb77 	bl	8016454 <sys_arch_protect>
 800ad66:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	681a      	ldr	r2, [r3, #0]
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	689b      	ldr	r3, [r3, #8]
 800ad76:	68fa      	ldr	r2, [r7, #12]
 800ad78:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800ad7a:	68b8      	ldr	r0, [r7, #8]
 800ad7c:	f00b fb78 	bl	8016470 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800ad80:	bf00      	nop
 800ad82:	3710      	adds	r7, #16
 800ad84:	46bd      	mov	sp, r7
 800ad86:	bd80      	pop	{r7, pc}
 800ad88:	08017a90 	.word	0x08017a90
 800ad8c:	08017b40 	.word	0x08017b40
 800ad90:	08017ae4 	.word	0x08017ae4

0800ad94 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ad94:	b580      	push	{r7, lr}
 800ad96:	b082      	sub	sp, #8
 800ad98:	af00      	add	r7, sp, #0
 800ad9a:	6078      	str	r0, [r7, #4]
 800ad9c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d106      	bne.n	800adb2 <memp_free_pool+0x1e>
 800ada4:	4b0a      	ldr	r3, [pc, #40]	; (800add0 <memp_free_pool+0x3c>)
 800ada6:	f240 1295 	movw	r2, #405	; 0x195
 800adaa:	490a      	ldr	r1, [pc, #40]	; (800add4 <memp_free_pool+0x40>)
 800adac:	480a      	ldr	r0, [pc, #40]	; (800add8 <memp_free_pool+0x44>)
 800adae:	f00b fd47 	bl	8016840 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d007      	beq.n	800adc8 <memp_free_pool+0x34>
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	2b00      	cmp	r3, #0
 800adbc:	d004      	beq.n	800adc8 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800adbe:	6839      	ldr	r1, [r7, #0]
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f7ff ffbb 	bl	800ad3c <do_memp_free_pool>
 800adc6:	e000      	b.n	800adca <memp_free_pool+0x36>
    return;
 800adc8:	bf00      	nop
}
 800adca:	3708      	adds	r7, #8
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}
 800add0:	08017a90 	.word	0x08017a90
 800add4:	08017b0c 	.word	0x08017b0c
 800add8:	08017ae4 	.word	0x08017ae4

0800addc <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	4603      	mov	r3, r0
 800ade4:	6039      	str	r1, [r7, #0]
 800ade6:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800ade8:	79fb      	ldrb	r3, [r7, #7]
 800adea:	2b0c      	cmp	r3, #12
 800adec:	d907      	bls.n	800adfe <memp_free+0x22>
 800adee:	4b0c      	ldr	r3, [pc, #48]	; (800ae20 <memp_free+0x44>)
 800adf0:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800adf4:	490b      	ldr	r1, [pc, #44]	; (800ae24 <memp_free+0x48>)
 800adf6:	480c      	ldr	r0, [pc, #48]	; (800ae28 <memp_free+0x4c>)
 800adf8:	f00b fd22 	bl	8016840 <iprintf>
 800adfc:	e00c      	b.n	800ae18 <memp_free+0x3c>

  if (mem == NULL) {
 800adfe:	683b      	ldr	r3, [r7, #0]
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d008      	beq.n	800ae16 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800ae04:	79fb      	ldrb	r3, [r7, #7]
 800ae06:	4a09      	ldr	r2, [pc, #36]	; (800ae2c <memp_free+0x50>)
 800ae08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ae0c:	6839      	ldr	r1, [r7, #0]
 800ae0e:	4618      	mov	r0, r3
 800ae10:	f7ff ff94 	bl	800ad3c <do_memp_free_pool>
 800ae14:	e000      	b.n	800ae18 <memp_free+0x3c>
    return;
 800ae16:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800ae18:	3708      	adds	r7, #8
 800ae1a:	46bd      	mov	sp, r7
 800ae1c:	bd80      	pop	{r7, pc}
 800ae1e:	bf00      	nop
 800ae20:	08017a90 	.word	0x08017a90
 800ae24:	08017b60 	.word	0x08017b60
 800ae28:	08017ae4 	.word	0x08017ae4
 800ae2c:	0801a644 	.word	0x0801a644

0800ae30 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800ae30:	b480      	push	{r7}
 800ae32:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800ae34:	bf00      	nop
 800ae36:	46bd      	mov	sp, r7
 800ae38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae3c:	4770      	bx	lr
	...

0800ae40 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b086      	sub	sp, #24
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	60f8      	str	r0, [r7, #12]
 800ae48:	60b9      	str	r1, [r7, #8]
 800ae4a:	607a      	str	r2, [r7, #4]
 800ae4c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d108      	bne.n	800ae66 <netif_add+0x26>
 800ae54:	4b5b      	ldr	r3, [pc, #364]	; (800afc4 <netif_add+0x184>)
 800ae56:	f240 1227 	movw	r2, #295	; 0x127
 800ae5a:	495b      	ldr	r1, [pc, #364]	; (800afc8 <netif_add+0x188>)
 800ae5c:	485b      	ldr	r0, [pc, #364]	; (800afcc <netif_add+0x18c>)
 800ae5e:	f00b fcef 	bl	8016840 <iprintf>
 800ae62:	2300      	movs	r3, #0
 800ae64:	e0a9      	b.n	800afba <netif_add+0x17a>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800ae66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d108      	bne.n	800ae7e <netif_add+0x3e>
 800ae6c:	4b55      	ldr	r3, [pc, #340]	; (800afc4 <netif_add+0x184>)
 800ae6e:	f44f 7294 	mov.w	r2, #296	; 0x128
 800ae72:	4957      	ldr	r1, [pc, #348]	; (800afd0 <netif_add+0x190>)
 800ae74:	4855      	ldr	r0, [pc, #340]	; (800afcc <netif_add+0x18c>)
 800ae76:	f00b fce3 	bl	8016840 <iprintf>
 800ae7a:	2300      	movs	r3, #0
 800ae7c:	e09d      	b.n	800afba <netif_add+0x17a>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800ae7e:	68bb      	ldr	r3, [r7, #8]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d101      	bne.n	800ae88 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800ae84:	4b53      	ldr	r3, [pc, #332]	; (800afd4 <netif_add+0x194>)
 800ae86:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d101      	bne.n	800ae92 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800ae8e:	4b51      	ldr	r3, [pc, #324]	; (800afd4 <netif_add+0x194>)
 800ae90:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d101      	bne.n	800ae9c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800ae98:	4b4e      	ldr	r3, [pc, #312]	; (800afd4 <netif_add+0x194>)
 800ae9a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	2200      	movs	r2, #0
 800aea0:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	2200      	movs	r2, #0
 800aea6:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	4a49      	ldr	r2, [pc, #292]	; (800afd8 <netif_add+0x198>)
 800aeb2:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	2200      	movs	r2, #0
 800aeb8:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	2200      	movs	r2, #0
 800aebe:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#ifdef netif_get_client_data
  memset(netif->client_data, 0, sizeof(netif->client_data));
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	3324      	adds	r3, #36	; 0x24
 800aec6:	2204      	movs	r2, #4
 800aec8:	2100      	movs	r1, #0
 800aeca:	4618      	mov	r0, r3
 800aecc:	f00b fc1b 	bl	8016706 <memset>
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	6a3a      	ldr	r2, [r7, #32]
 800aeda:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800aedc:	4b3f      	ldr	r3, [pc, #252]	; (800afdc <netif_add+0x19c>)
 800aede:	781a      	ldrb	r2, [r3, #0]
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aeea:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	687a      	ldr	r2, [r7, #4]
 800aef0:	68b9      	ldr	r1, [r7, #8]
 800aef2:	68f8      	ldr	r0, [r7, #12]
 800aef4:	f000 f914 	bl	800b120 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800aef8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aefa:	68f8      	ldr	r0, [r7, #12]
 800aefc:	4798      	blx	r3
 800aefe:	4603      	mov	r3, r0
 800af00:	2b00      	cmp	r3, #0
 800af02:	d001      	beq.n	800af08 <netif_add+0xc8>
    return NULL;
 800af04:	2300      	movs	r3, #0
 800af06:	e058      	b.n	800afba <netif_add+0x17a>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800af0e:	2bff      	cmp	r3, #255	; 0xff
 800af10:	d103      	bne.n	800af1a <netif_add+0xda>
        netif->num = 0;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 800af1a:	2300      	movs	r3, #0
 800af1c:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800af1e:	4b30      	ldr	r3, [pc, #192]	; (800afe0 <netif_add+0x1a0>)
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	617b      	str	r3, [r7, #20]
 800af24:	e02b      	b.n	800af7e <netif_add+0x13e>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800af26:	697a      	ldr	r2, [r7, #20]
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	429a      	cmp	r2, r3
 800af2c:	d106      	bne.n	800af3c <netif_add+0xfc>
 800af2e:	4b25      	ldr	r3, [pc, #148]	; (800afc4 <netif_add+0x184>)
 800af30:	f240 128b 	movw	r2, #395	; 0x18b
 800af34:	492b      	ldr	r1, [pc, #172]	; (800afe4 <netif_add+0x1a4>)
 800af36:	4825      	ldr	r0, [pc, #148]	; (800afcc <netif_add+0x18c>)
 800af38:	f00b fc82 	bl	8016840 <iprintf>
        num_netifs++;
 800af3c:	693b      	ldr	r3, [r7, #16]
 800af3e:	3301      	adds	r3, #1
 800af40:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	2bff      	cmp	r3, #255	; 0xff
 800af46:	dd06      	ble.n	800af56 <netif_add+0x116>
 800af48:	4b1e      	ldr	r3, [pc, #120]	; (800afc4 <netif_add+0x184>)
 800af4a:	f240 128d 	movw	r2, #397	; 0x18d
 800af4e:	4926      	ldr	r1, [pc, #152]	; (800afe8 <netif_add+0x1a8>)
 800af50:	481e      	ldr	r0, [pc, #120]	; (800afcc <netif_add+0x18c>)
 800af52:	f00b fc75 	bl	8016840 <iprintf>
        if (netif2->num == netif->num) {
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800af62:	429a      	cmp	r2, r3
 800af64:	d108      	bne.n	800af78 <netif_add+0x138>
          netif->num++;
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800af6c:	3301      	adds	r3, #1
 800af6e:	b2da      	uxtb	r2, r3
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 800af76:	e005      	b.n	800af84 <netif_add+0x144>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800af78:	697b      	ldr	r3, [r7, #20]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	617b      	str	r3, [r7, #20]
 800af7e:	697b      	ldr	r3, [r7, #20]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d1d0      	bne.n	800af26 <netif_add+0xe6>
        }
      }
    } while (netif2 != NULL);
 800af84:	697b      	ldr	r3, [r7, #20]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1be      	bne.n	800af08 <netif_add+0xc8>
  }
  if (netif->num == 254) {
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800af90:	2bfe      	cmp	r3, #254	; 0xfe
 800af92:	d103      	bne.n	800af9c <netif_add+0x15c>
    netif_num = 0;
 800af94:	4b11      	ldr	r3, [pc, #68]	; (800afdc <netif_add+0x19c>)
 800af96:	2200      	movs	r2, #0
 800af98:	701a      	strb	r2, [r3, #0]
 800af9a:	e006      	b.n	800afaa <netif_add+0x16a>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800afa2:	3301      	adds	r3, #1
 800afa4:	b2da      	uxtb	r2, r3
 800afa6:	4b0d      	ldr	r3, [pc, #52]	; (800afdc <netif_add+0x19c>)
 800afa8:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800afaa:	4b0d      	ldr	r3, [pc, #52]	; (800afe0 <netif_add+0x1a0>)
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800afb2:	4a0b      	ldr	r2, [pc, #44]	; (800afe0 <netif_add+0x1a0>)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800afb8:	68fb      	ldr	r3, [r7, #12]
}
 800afba:	4618      	mov	r0, r3
 800afbc:	3718      	adds	r7, #24
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	08017b7c 	.word	0x08017b7c
 800afc8:	08017c10 	.word	0x08017c10
 800afcc:	08017bcc 	.word	0x08017bcc
 800afd0:	08017c2c 	.word	0x08017c2c
 800afd4:	0801a6c8 	.word	0x0801a6c8
 800afd8:	0800b403 	.word	0x0800b403
 800afdc:	2000f200 	.word	0x2000f200
 800afe0:	2000f1f8 	.word	0x2000f1f8
 800afe4:	08017c50 	.word	0x08017c50
 800afe8:	08017c64 	.word	0x08017c64

0800afec <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800aff6:	6839      	ldr	r1, [r7, #0]
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f002 fb91 	bl	800d720 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800affe:	6839      	ldr	r1, [r7, #0]
 800b000:	6878      	ldr	r0, [r7, #4]
 800b002:	f006 ffa7 	bl	8011f54 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b006:	bf00      	nop
 800b008:	3708      	adds	r7, #8
 800b00a:	46bd      	mov	sp, r7
 800b00c:	bd80      	pop	{r7, pc}
	...

0800b010 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d106      	bne.n	800b030 <netif_do_set_ipaddr+0x20>
 800b022:	4b1d      	ldr	r3, [pc, #116]	; (800b098 <netif_do_set_ipaddr+0x88>)
 800b024:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b028:	491c      	ldr	r1, [pc, #112]	; (800b09c <netif_do_set_ipaddr+0x8c>)
 800b02a:	481d      	ldr	r0, [pc, #116]	; (800b0a0 <netif_do_set_ipaddr+0x90>)
 800b02c:	f00b fc08 	bl	8016840 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d106      	bne.n	800b044 <netif_do_set_ipaddr+0x34>
 800b036:	4b18      	ldr	r3, [pc, #96]	; (800b098 <netif_do_set_ipaddr+0x88>)
 800b038:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b03c:	4917      	ldr	r1, [pc, #92]	; (800b09c <netif_do_set_ipaddr+0x8c>)
 800b03e:	4818      	ldr	r0, [pc, #96]	; (800b0a0 <netif_do_set_ipaddr+0x90>)
 800b040:	f00b fbfe 	bl	8016840 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	681a      	ldr	r2, [r3, #0]
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	3304      	adds	r3, #4
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	429a      	cmp	r2, r3
 800b050:	d01c      	beq.n	800b08c <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	3304      	adds	r3, #4
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b062:	f107 0314 	add.w	r3, r7, #20
 800b066:	4619      	mov	r1, r3
 800b068:	6878      	ldr	r0, [r7, #4]
 800b06a:	f7ff ffbf 	bl	800afec <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	2b00      	cmp	r3, #0
 800b072:	d002      	beq.n	800b07a <netif_do_set_ipaddr+0x6a>
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	e000      	b.n	800b07c <netif_do_set_ipaddr+0x6c>
 800b07a:	2300      	movs	r3, #0
 800b07c:	68fa      	ldr	r2, [r7, #12]
 800b07e:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b080:	2101      	movs	r1, #1
 800b082:	68f8      	ldr	r0, [r7, #12]
 800b084:	f000 f8d2 	bl	800b22c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800b088:	2301      	movs	r3, #1
 800b08a:	e000      	b.n	800b08e <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800b08c:	2300      	movs	r3, #0
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3718      	adds	r7, #24
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	08017b7c 	.word	0x08017b7c
 800b09c:	08017c94 	.word	0x08017c94
 800b0a0:	08017bcc 	.word	0x08017bcc

0800b0a4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b085      	sub	sp, #20
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b0b0:	68bb      	ldr	r3, [r7, #8]
 800b0b2:	681a      	ldr	r2, [r3, #0]
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	3308      	adds	r3, #8
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	429a      	cmp	r2, r3
 800b0bc:	d00a      	beq.n	800b0d4 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b0be:	68bb      	ldr	r3, [r7, #8]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d002      	beq.n	800b0ca <netif_do_set_netmask+0x26>
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	e000      	b.n	800b0cc <netif_do_set_netmask+0x28>
 800b0ca:	2300      	movs	r3, #0
 800b0cc:	68fa      	ldr	r2, [r7, #12]
 800b0ce:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b0d0:	2301      	movs	r3, #1
 800b0d2:	e000      	b.n	800b0d6 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3714      	adds	r7, #20
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e0:	4770      	bx	lr

0800b0e2 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b0e2:	b480      	push	{r7}
 800b0e4:	b085      	sub	sp, #20
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	60f8      	str	r0, [r7, #12]
 800b0ea:	60b9      	str	r1, [r7, #8]
 800b0ec:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	681a      	ldr	r2, [r3, #0]
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	330c      	adds	r3, #12
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	429a      	cmp	r2, r3
 800b0fa:	d00a      	beq.n	800b112 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d002      	beq.n	800b108 <netif_do_set_gw+0x26>
 800b102:	68bb      	ldr	r3, [r7, #8]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	e000      	b.n	800b10a <netif_do_set_gw+0x28>
 800b108:	2300      	movs	r3, #0
 800b10a:	68fa      	ldr	r2, [r7, #12]
 800b10c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b10e:	2301      	movs	r3, #1
 800b110:	e000      	b.n	800b114 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	3714      	adds	r7, #20
 800b118:	46bd      	mov	sp, r7
 800b11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b11e:	4770      	bx	lr

0800b120 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b088      	sub	sp, #32
 800b124:	af00      	add	r7, sp, #0
 800b126:	60f8      	str	r0, [r7, #12]
 800b128:	60b9      	str	r1, [r7, #8]
 800b12a:	607a      	str	r2, [r7, #4]
 800b12c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b12e:	2300      	movs	r3, #0
 800b130:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b132:	2300      	movs	r3, #0
 800b134:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b136:	68bb      	ldr	r3, [r7, #8]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d101      	bne.n	800b140 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b13c:	4b1c      	ldr	r3, [pc, #112]	; (800b1b0 <netif_set_addr+0x90>)
 800b13e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d101      	bne.n	800b14a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b146:	4b1a      	ldr	r3, [pc, #104]	; (800b1b0 <netif_set_addr+0x90>)
 800b148:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d101      	bne.n	800b154 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b150:	4b17      	ldr	r3, [pc, #92]	; (800b1b0 <netif_set_addr+0x90>)
 800b152:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b154:	68bb      	ldr	r3, [r7, #8]
 800b156:	2b00      	cmp	r3, #0
 800b158:	d003      	beq.n	800b162 <netif_set_addr+0x42>
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d101      	bne.n	800b166 <netif_set_addr+0x46>
 800b162:	2301      	movs	r3, #1
 800b164:	e000      	b.n	800b168 <netif_set_addr+0x48>
 800b166:	2300      	movs	r3, #0
 800b168:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	2b00      	cmp	r3, #0
 800b16e:	d006      	beq.n	800b17e <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b170:	f107 0310 	add.w	r3, r7, #16
 800b174:	461a      	mov	r2, r3
 800b176:	68b9      	ldr	r1, [r7, #8]
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f7ff ff49 	bl	800b010 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b17e:	69fa      	ldr	r2, [r7, #28]
 800b180:	6879      	ldr	r1, [r7, #4]
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	f7ff ff8e 	bl	800b0a4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b188:	69ba      	ldr	r2, [r7, #24]
 800b18a:	6839      	ldr	r1, [r7, #0]
 800b18c:	68f8      	ldr	r0, [r7, #12]
 800b18e:	f7ff ffa8 	bl	800b0e2 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b192:	697b      	ldr	r3, [r7, #20]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d106      	bne.n	800b1a6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b198:	f107 0310 	add.w	r3, r7, #16
 800b19c:	461a      	mov	r2, r3
 800b19e:	68b9      	ldr	r1, [r7, #8]
 800b1a0:	68f8      	ldr	r0, [r7, #12]
 800b1a2:	f7ff ff35 	bl	800b010 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b1a6:	bf00      	nop
 800b1a8:	3720      	adds	r7, #32
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	bd80      	pop	{r7, pc}
 800b1ae:	bf00      	nop
 800b1b0:	0801a6c8 	.word	0x0801a6c8

0800b1b4 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b1b4:	b480      	push	{r7}
 800b1b6:	b083      	sub	sp, #12
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b1bc:	4a04      	ldr	r2, [pc, #16]	; (800b1d0 <netif_set_default+0x1c>)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b1c2:	bf00      	nop
 800b1c4:	370c      	adds	r7, #12
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1cc:	4770      	bx	lr
 800b1ce:	bf00      	nop
 800b1d0:	2000f1fc 	.word	0x2000f1fc

0800b1d4 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	b082      	sub	sp, #8
 800b1d8:	af00      	add	r7, sp, #0
 800b1da:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d107      	bne.n	800b1f2 <netif_set_up+0x1e>
 800b1e2:	4b0f      	ldr	r3, [pc, #60]	; (800b220 <netif_set_up+0x4c>)
 800b1e4:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b1e8:	490e      	ldr	r1, [pc, #56]	; (800b224 <netif_set_up+0x50>)
 800b1ea:	480f      	ldr	r0, [pc, #60]	; (800b228 <netif_set_up+0x54>)
 800b1ec:	f00b fb28 	bl	8016840 <iprintf>
 800b1f0:	e013      	b.n	800b21a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b1f8:	f003 0301 	and.w	r3, r3, #1
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10c      	bne.n	800b21a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b206:	f043 0301 	orr.w	r3, r3, #1
 800b20a:	b2da      	uxtb	r2, r3
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b212:	2103      	movs	r1, #3
 800b214:	6878      	ldr	r0, [r7, #4]
 800b216:	f000 f809 	bl	800b22c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b21a:	3708      	adds	r7, #8
 800b21c:	46bd      	mov	sp, r7
 800b21e:	bd80      	pop	{r7, pc}
 800b220:	08017b7c 	.word	0x08017b7c
 800b224:	08017d04 	.word	0x08017d04
 800b228:	08017bcc 	.word	0x08017bcc

0800b22c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
 800b234:	460b      	mov	r3, r1
 800b236:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d106      	bne.n	800b24c <netif_issue_reports+0x20>
 800b23e:	4b18      	ldr	r3, [pc, #96]	; (800b2a0 <netif_issue_reports+0x74>)
 800b240:	f240 326d 	movw	r2, #877	; 0x36d
 800b244:	4917      	ldr	r1, [pc, #92]	; (800b2a4 <netif_issue_reports+0x78>)
 800b246:	4818      	ldr	r0, [pc, #96]	; (800b2a8 <netif_issue_reports+0x7c>)
 800b248:	f00b fafa 	bl	8016840 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b252:	f003 0304 	and.w	r3, r3, #4
 800b256:	2b00      	cmp	r3, #0
 800b258:	d01e      	beq.n	800b298 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b260:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b264:	2b00      	cmp	r3, #0
 800b266:	d017      	beq.n	800b298 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b268:	78fb      	ldrb	r3, [r7, #3]
 800b26a:	f003 0301 	and.w	r3, r3, #1
 800b26e:	2b00      	cmp	r3, #0
 800b270:	d013      	beq.n	800b29a <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	3304      	adds	r3, #4
 800b276:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b278:	2b00      	cmp	r3, #0
 800b27a:	d00e      	beq.n	800b29a <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b282:	f003 0308 	and.w	r3, r3, #8
 800b286:	2b00      	cmp	r3, #0
 800b288:	d007      	beq.n	800b29a <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	3304      	adds	r3, #4
 800b28e:	4619      	mov	r1, r3
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f009 fc61 	bl	8014b58 <etharp_request>
 800b296:	e000      	b.n	800b29a <netif_issue_reports+0x6e>
    return;
 800b298:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b29a:	3708      	adds	r7, #8
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}
 800b2a0:	08017b7c 	.word	0x08017b7c
 800b2a4:	08017d20 	.word	0x08017d20
 800b2a8:	08017bcc 	.word	0x08017bcc

0800b2ac <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b2ac:	b580      	push	{r7, lr}
 800b2ae:	b082      	sub	sp, #8
 800b2b0:	af00      	add	r7, sp, #0
 800b2b2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d107      	bne.n	800b2ca <netif_set_down+0x1e>
 800b2ba:	4b12      	ldr	r3, [pc, #72]	; (800b304 <netif_set_down+0x58>)
 800b2bc:	f240 329b 	movw	r2, #923	; 0x39b
 800b2c0:	4911      	ldr	r1, [pc, #68]	; (800b308 <netif_set_down+0x5c>)
 800b2c2:	4812      	ldr	r0, [pc, #72]	; (800b30c <netif_set_down+0x60>)
 800b2c4:	f00b fabc 	bl	8016840 <iprintf>
 800b2c8:	e019      	b.n	800b2fe <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b2d0:	f003 0301 	and.w	r3, r3, #1
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d012      	beq.n	800b2fe <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b2de:	f023 0301 	bic.w	r3, r3, #1
 800b2e2:	b2da      	uxtb	r2, r3
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b2f0:	f003 0308 	and.w	r3, r3, #8
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d002      	beq.n	800b2fe <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f008 ffe7 	bl	80142cc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800b2fe:	3708      	adds	r7, #8
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}
 800b304:	08017b7c 	.word	0x08017b7c
 800b308:	08017d44 	.word	0x08017d44
 800b30c:	08017bcc 	.word	0x08017bcc

0800b310 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d107      	bne.n	800b32e <netif_set_link_up+0x1e>
 800b31e:	4b15      	ldr	r3, [pc, #84]	; (800b374 <netif_set_link_up+0x64>)
 800b320:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800b324:	4914      	ldr	r1, [pc, #80]	; (800b378 <netif_set_link_up+0x68>)
 800b326:	4815      	ldr	r0, [pc, #84]	; (800b37c <netif_set_link_up+0x6c>)
 800b328:	f00b fa8a 	bl	8016840 <iprintf>
 800b32c:	e01e      	b.n	800b36c <netif_set_link_up+0x5c>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b334:	f003 0304 	and.w	r3, r3, #4
 800b338:	2b00      	cmp	r3, #0
 800b33a:	d117      	bne.n	800b36c <netif_set_link_up+0x5c>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b342:	f043 0304 	orr.w	r3, r3, #4
 800b346:	b2da      	uxtb	r2, r3
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_DHCP
    dhcp_network_changed(netif);
 800b34e:	6878      	ldr	r0, [r7, #4]
 800b350:	f007 fa2c 	bl	80127ac <dhcp_network_changed>

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b354:	2103      	movs	r1, #3
 800b356:	6878      	ldr	r0, [r7, #4]
 800b358:	f7ff ff68 	bl	800b22c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	69db      	ldr	r3, [r3, #28]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d003      	beq.n	800b36c <netif_set_link_up+0x5c>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	69db      	ldr	r3, [r3, #28]
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b36c:	3708      	adds	r7, #8
 800b36e:	46bd      	mov	sp, r7
 800b370:	bd80      	pop	{r7, pc}
 800b372:	bf00      	nop
 800b374:	08017b7c 	.word	0x08017b7c
 800b378:	08017d64 	.word	0x08017d64
 800b37c:	08017bcc 	.word	0x08017bcc

0800b380 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b082      	sub	sp, #8
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d107      	bne.n	800b39e <netif_set_link_down+0x1e>
 800b38e:	4b11      	ldr	r3, [pc, #68]	; (800b3d4 <netif_set_link_down+0x54>)
 800b390:	f240 4206 	movw	r2, #1030	; 0x406
 800b394:	4910      	ldr	r1, [pc, #64]	; (800b3d8 <netif_set_link_down+0x58>)
 800b396:	4811      	ldr	r0, [pc, #68]	; (800b3dc <netif_set_link_down+0x5c>)
 800b398:	f00b fa52 	bl	8016840 <iprintf>
 800b39c:	e017      	b.n	800b3ce <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b3a4:	f003 0304 	and.w	r3, r3, #4
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d010      	beq.n	800b3ce <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800b3b2:	f023 0304 	bic.w	r3, r3, #4
 800b3b6:	b2da      	uxtb	r2, r3
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	69db      	ldr	r3, [r3, #28]
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	d003      	beq.n	800b3ce <netif_set_link_down+0x4e>
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	69db      	ldr	r3, [r3, #28]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800b3ce:	3708      	adds	r7, #8
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}
 800b3d4:	08017b7c 	.word	0x08017b7c
 800b3d8:	08017d88 	.word	0x08017d88
 800b3dc:	08017bcc 	.word	0x08017bcc

0800b3e0 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
 800b3e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d002      	beq.n	800b3f6 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	683a      	ldr	r2, [r7, #0]
 800b3f4:	61da      	str	r2, [r3, #28]
  }
}
 800b3f6:	bf00      	nop
 800b3f8:	370c      	adds	r7, #12
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b400:	4770      	bx	lr

0800b402 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800b402:	b480      	push	{r7}
 800b404:	b085      	sub	sp, #20
 800b406:	af00      	add	r7, sp, #0
 800b408:	60f8      	str	r0, [r7, #12]
 800b40a:	60b9      	str	r1, [r7, #8]
 800b40c:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800b40e:	f06f 030b 	mvn.w	r3, #11
}
 800b412:	4618      	mov	r0, r3
 800b414:	3714      	adds	r7, #20
 800b416:	46bd      	mov	sp, r7
 800b418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41c:	4770      	bx	lr
	...

0800b420 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800b420:	b480      	push	{r7}
 800b422:	b085      	sub	sp, #20
 800b424:	af00      	add	r7, sp, #0
 800b426:	4603      	mov	r3, r0
 800b428:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800b42a:	79fb      	ldrb	r3, [r7, #7]
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d013      	beq.n	800b458 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800b430:	4b0d      	ldr	r3, [pc, #52]	; (800b468 <netif_get_by_index+0x48>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	60fb      	str	r3, [r7, #12]
 800b436:	e00c      	b.n	800b452 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800b43e:	3301      	adds	r3, #1
 800b440:	b2db      	uxtb	r3, r3
 800b442:	79fa      	ldrb	r2, [r7, #7]
 800b444:	429a      	cmp	r2, r3
 800b446:	d101      	bne.n	800b44c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	e006      	b.n	800b45a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	60fb      	str	r3, [r7, #12]
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d1ef      	bne.n	800b438 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800b458:	2300      	movs	r3, #0
}
 800b45a:	4618      	mov	r0, r3
 800b45c:	3714      	adds	r7, #20
 800b45e:	46bd      	mov	sp, r7
 800b460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b464:	4770      	bx	lr
 800b466:	bf00      	nop
 800b468:	2000f1f8 	.word	0x2000f1f8

0800b46c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b082      	sub	sp, #8
 800b470:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800b472:	f00a ffef 	bl	8016454 <sys_arch_protect>
 800b476:	6038      	str	r0, [r7, #0]
 800b478:	4b0d      	ldr	r3, [pc, #52]	; (800b4b0 <pbuf_free_ooseq+0x44>)
 800b47a:	2200      	movs	r2, #0
 800b47c:	701a      	strb	r2, [r3, #0]
 800b47e:	6838      	ldr	r0, [r7, #0]
 800b480:	f00a fff6 	bl	8016470 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b484:	4b0b      	ldr	r3, [pc, #44]	; (800b4b4 <pbuf_free_ooseq+0x48>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	607b      	str	r3, [r7, #4]
 800b48a:	e00a      	b.n	800b4a2 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b490:	2b00      	cmp	r3, #0
 800b492:	d003      	beq.n	800b49c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f002 f981 	bl	800d79c <tcp_free_ooseq>
      return;
 800b49a:	e005      	b.n	800b4a8 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	68db      	ldr	r3, [r3, #12]
 800b4a0:	607b      	str	r3, [r7, #4]
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d1f1      	bne.n	800b48c <pbuf_free_ooseq+0x20>
    }
  }
}
 800b4a8:	3708      	adds	r7, #8
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	bd80      	pop	{r7, pc}
 800b4ae:	bf00      	nop
 800b4b0:	2000f201 	.word	0x2000f201
 800b4b4:	2000f210 	.word	0x2000f210

0800b4b8 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800b4b8:	b580      	push	{r7, lr}
 800b4ba:	b082      	sub	sp, #8
 800b4bc:	af00      	add	r7, sp, #0
 800b4be:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800b4c0:	f7ff ffd4 	bl	800b46c <pbuf_free_ooseq>
}
 800b4c4:	bf00      	nop
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}

0800b4cc <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800b4cc:	b580      	push	{r7, lr}
 800b4ce:	b082      	sub	sp, #8
 800b4d0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800b4d2:	f00a ffbf 	bl	8016454 <sys_arch_protect>
 800b4d6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800b4d8:	4b0f      	ldr	r3, [pc, #60]	; (800b518 <pbuf_pool_is_empty+0x4c>)
 800b4da:	781b      	ldrb	r3, [r3, #0]
 800b4dc:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800b4de:	4b0e      	ldr	r3, [pc, #56]	; (800b518 <pbuf_pool_is_empty+0x4c>)
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f00a ffc3 	bl	8016470 <sys_arch_unprotect>

  if (!queued) {
 800b4ea:	78fb      	ldrb	r3, [r7, #3]
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d10f      	bne.n	800b510 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800b4f0:	2100      	movs	r1, #0
 800b4f2:	480a      	ldr	r0, [pc, #40]	; (800b51c <pbuf_pool_is_empty+0x50>)
 800b4f4:	f7fe fe9a 	bl	800a22c <tcpip_try_callback>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d008      	beq.n	800b510 <pbuf_pool_is_empty+0x44>
 800b4fe:	f00a ffa9 	bl	8016454 <sys_arch_protect>
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	4b04      	ldr	r3, [pc, #16]	; (800b518 <pbuf_pool_is_empty+0x4c>)
 800b506:	2200      	movs	r2, #0
 800b508:	701a      	strb	r2, [r3, #0]
 800b50a:	6878      	ldr	r0, [r7, #4]
 800b50c:	f00a ffb0 	bl	8016470 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800b510:	bf00      	nop
 800b512:	3708      	adds	r7, #8
 800b514:	46bd      	mov	sp, r7
 800b516:	bd80      	pop	{r7, pc}
 800b518:	2000f201 	.word	0x2000f201
 800b51c:	0800b4b9 	.word	0x0800b4b9

0800b520 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800b520:	b480      	push	{r7}
 800b522:	b085      	sub	sp, #20
 800b524:	af00      	add	r7, sp, #0
 800b526:	60f8      	str	r0, [r7, #12]
 800b528:	60b9      	str	r1, [r7, #8]
 800b52a:	4611      	mov	r1, r2
 800b52c:	461a      	mov	r2, r3
 800b52e:	460b      	mov	r3, r1
 800b530:	80fb      	strh	r3, [r7, #6]
 800b532:	4613      	mov	r3, r2
 800b534:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	2200      	movs	r2, #0
 800b53a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	68ba      	ldr	r2, [r7, #8]
 800b540:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	88fa      	ldrh	r2, [r7, #6]
 800b546:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	88ba      	ldrh	r2, [r7, #4]
 800b54c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800b54e:	8b3b      	ldrh	r3, [r7, #24]
 800b550:	b2da      	uxtb	r2, r3
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	7f3a      	ldrb	r2, [r7, #28]
 800b55a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	2201      	movs	r2, #1
 800b560:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2200      	movs	r2, #0
 800b566:	73da      	strb	r2, [r3, #15]
}
 800b568:	bf00      	nop
 800b56a:	3714      	adds	r7, #20
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr

0800b574 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800b574:	b580      	push	{r7, lr}
 800b576:	b08c      	sub	sp, #48	; 0x30
 800b578:	af02      	add	r7, sp, #8
 800b57a:	4603      	mov	r3, r0
 800b57c:	71fb      	strb	r3, [r7, #7]
 800b57e:	460b      	mov	r3, r1
 800b580:	80bb      	strh	r3, [r7, #4]
 800b582:	4613      	mov	r3, r2
 800b584:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800b586:	79fb      	ldrb	r3, [r7, #7]
 800b588:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800b58a:	887b      	ldrh	r3, [r7, #2]
 800b58c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b590:	d07f      	beq.n	800b692 <pbuf_alloc+0x11e>
 800b592:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800b596:	f300 80c8 	bgt.w	800b72a <pbuf_alloc+0x1b6>
 800b59a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b59e:	d010      	beq.n	800b5c2 <pbuf_alloc+0x4e>
 800b5a0:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800b5a4:	f300 80c1 	bgt.w	800b72a <pbuf_alloc+0x1b6>
 800b5a8:	2b01      	cmp	r3, #1
 800b5aa:	d002      	beq.n	800b5b2 <pbuf_alloc+0x3e>
 800b5ac:	2b41      	cmp	r3, #65	; 0x41
 800b5ae:	f040 80bc 	bne.w	800b72a <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800b5b2:	887a      	ldrh	r2, [r7, #2]
 800b5b4:	88bb      	ldrh	r3, [r7, #4]
 800b5b6:	4619      	mov	r1, r3
 800b5b8:	2000      	movs	r0, #0
 800b5ba:	f000 f8d1 	bl	800b760 <pbuf_alloc_reference>
 800b5be:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800b5c0:	e0bd      	b.n	800b73e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800b5c6:	2300      	movs	r3, #0
 800b5c8:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800b5ca:	88bb      	ldrh	r3, [r7, #4]
 800b5cc:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800b5ce:	200c      	movs	r0, #12
 800b5d0:	f7ff fb8e 	bl	800acf0 <memp_malloc>
 800b5d4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800b5d6:	693b      	ldr	r3, [r7, #16]
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d109      	bne.n	800b5f0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800b5dc:	f7ff ff76 	bl	800b4cc <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800b5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d002      	beq.n	800b5ec <pbuf_alloc+0x78>
            pbuf_free(p);
 800b5e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b5e8:	f000 faa8 	bl	800bb3c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	e0a7      	b.n	800b740 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800b5f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b5f2:	3303      	adds	r3, #3
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	f023 0303 	bic.w	r3, r3, #3
 800b5fa:	b29b      	uxth	r3, r3
 800b5fc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800b600:	b29b      	uxth	r3, r3
 800b602:	8b7a      	ldrh	r2, [r7, #26]
 800b604:	4293      	cmp	r3, r2
 800b606:	bf28      	it	cs
 800b608:	4613      	movcs	r3, r2
 800b60a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800b60c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b60e:	3310      	adds	r3, #16
 800b610:	693a      	ldr	r2, [r7, #16]
 800b612:	4413      	add	r3, r2
 800b614:	3303      	adds	r3, #3
 800b616:	f023 0303 	bic.w	r3, r3, #3
 800b61a:	4618      	mov	r0, r3
 800b61c:	89f9      	ldrh	r1, [r7, #14]
 800b61e:	8b7a      	ldrh	r2, [r7, #26]
 800b620:	2300      	movs	r3, #0
 800b622:	9301      	str	r3, [sp, #4]
 800b624:	887b      	ldrh	r3, [r7, #2]
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	460b      	mov	r3, r1
 800b62a:	4601      	mov	r1, r0
 800b62c:	6938      	ldr	r0, [r7, #16]
 800b62e:	f7ff ff77 	bl	800b520 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800b632:	693b      	ldr	r3, [r7, #16]
 800b634:	685b      	ldr	r3, [r3, #4]
 800b636:	f003 0303 	and.w	r3, r3, #3
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d006      	beq.n	800b64c <pbuf_alloc+0xd8>
 800b63e:	4b42      	ldr	r3, [pc, #264]	; (800b748 <pbuf_alloc+0x1d4>)
 800b640:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b644:	4941      	ldr	r1, [pc, #260]	; (800b74c <pbuf_alloc+0x1d8>)
 800b646:	4842      	ldr	r0, [pc, #264]	; (800b750 <pbuf_alloc+0x1dc>)
 800b648:	f00b f8fa 	bl	8016840 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800b64c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b64e:	3303      	adds	r3, #3
 800b650:	f023 0303 	bic.w	r3, r3, #3
 800b654:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800b658:	d106      	bne.n	800b668 <pbuf_alloc+0xf4>
 800b65a:	4b3b      	ldr	r3, [pc, #236]	; (800b748 <pbuf_alloc+0x1d4>)
 800b65c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800b660:	493c      	ldr	r1, [pc, #240]	; (800b754 <pbuf_alloc+0x1e0>)
 800b662:	483b      	ldr	r0, [pc, #236]	; (800b750 <pbuf_alloc+0x1dc>)
 800b664:	f00b f8ec 	bl	8016840 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800b668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d102      	bne.n	800b674 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800b66e:	693b      	ldr	r3, [r7, #16]
 800b670:	627b      	str	r3, [r7, #36]	; 0x24
 800b672:	e002      	b.n	800b67a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	693a      	ldr	r2, [r7, #16]
 800b678:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800b67a:	693b      	ldr	r3, [r7, #16]
 800b67c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800b67e:	8b7a      	ldrh	r2, [r7, #26]
 800b680:	89fb      	ldrh	r3, [r7, #14]
 800b682:	1ad3      	subs	r3, r2, r3
 800b684:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800b686:	2300      	movs	r3, #0
 800b688:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800b68a:	8b7b      	ldrh	r3, [r7, #26]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d19e      	bne.n	800b5ce <pbuf_alloc+0x5a>
      break;
 800b690:	e055      	b.n	800b73e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800b692:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b694:	3303      	adds	r3, #3
 800b696:	b29b      	uxth	r3, r3
 800b698:	f023 0303 	bic.w	r3, r3, #3
 800b69c:	b29a      	uxth	r2, r3
 800b69e:	88bb      	ldrh	r3, [r7, #4]
 800b6a0:	3303      	adds	r3, #3
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	f023 0303 	bic.w	r3, r3, #3
 800b6a8:	b29b      	uxth	r3, r3
 800b6aa:	4413      	add	r3, r2
 800b6ac:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800b6ae:	8b3b      	ldrh	r3, [r7, #24]
 800b6b0:	3310      	adds	r3, #16
 800b6b2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b6b4:	8b3a      	ldrh	r2, [r7, #24]
 800b6b6:	88bb      	ldrh	r3, [r7, #4]
 800b6b8:	3303      	adds	r3, #3
 800b6ba:	f023 0303 	bic.w	r3, r3, #3
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d306      	bcc.n	800b6d0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800b6c2:	8afa      	ldrh	r2, [r7, #22]
 800b6c4:	88bb      	ldrh	r3, [r7, #4]
 800b6c6:	3303      	adds	r3, #3
 800b6c8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	d201      	bcs.n	800b6d4 <pbuf_alloc+0x160>
        return NULL;
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	e035      	b.n	800b740 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800b6d4:	8afb      	ldrh	r3, [r7, #22]
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7ff f966 	bl	800a9a8 <mem_malloc>
 800b6dc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800b6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d101      	bne.n	800b6e8 <pbuf_alloc+0x174>
        return NULL;
 800b6e4:	2300      	movs	r3, #0
 800b6e6:	e02b      	b.n	800b740 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800b6e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800b6ea:	3310      	adds	r3, #16
 800b6ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ee:	4413      	add	r3, r2
 800b6f0:	3303      	adds	r3, #3
 800b6f2:	f023 0303 	bic.w	r3, r3, #3
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	88b9      	ldrh	r1, [r7, #4]
 800b6fa:	88ba      	ldrh	r2, [r7, #4]
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	9301      	str	r3, [sp, #4]
 800b700:	887b      	ldrh	r3, [r7, #2]
 800b702:	9300      	str	r3, [sp, #0]
 800b704:	460b      	mov	r3, r1
 800b706:	4601      	mov	r1, r0
 800b708:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b70a:	f7ff ff09 	bl	800b520 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800b70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b710:	685b      	ldr	r3, [r3, #4]
 800b712:	f003 0303 	and.w	r3, r3, #3
 800b716:	2b00      	cmp	r3, #0
 800b718:	d010      	beq.n	800b73c <pbuf_alloc+0x1c8>
 800b71a:	4b0b      	ldr	r3, [pc, #44]	; (800b748 <pbuf_alloc+0x1d4>)
 800b71c:	f44f 7291 	mov.w	r2, #290	; 0x122
 800b720:	490d      	ldr	r1, [pc, #52]	; (800b758 <pbuf_alloc+0x1e4>)
 800b722:	480b      	ldr	r0, [pc, #44]	; (800b750 <pbuf_alloc+0x1dc>)
 800b724:	f00b f88c 	bl	8016840 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800b728:	e008      	b.n	800b73c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800b72a:	4b07      	ldr	r3, [pc, #28]	; (800b748 <pbuf_alloc+0x1d4>)
 800b72c:	f240 1227 	movw	r2, #295	; 0x127
 800b730:	490a      	ldr	r1, [pc, #40]	; (800b75c <pbuf_alloc+0x1e8>)
 800b732:	4807      	ldr	r0, [pc, #28]	; (800b750 <pbuf_alloc+0x1dc>)
 800b734:	f00b f884 	bl	8016840 <iprintf>
      return NULL;
 800b738:	2300      	movs	r3, #0
 800b73a:	e001      	b.n	800b740 <pbuf_alloc+0x1cc>
      break;
 800b73c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800b73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b740:	4618      	mov	r0, r3
 800b742:	3728      	adds	r7, #40	; 0x28
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	08017dac 	.word	0x08017dac
 800b74c:	08017ddc 	.word	0x08017ddc
 800b750:	08017e0c 	.word	0x08017e0c
 800b754:	08017e34 	.word	0x08017e34
 800b758:	08017e68 	.word	0x08017e68
 800b75c:	08017e94 	.word	0x08017e94

0800b760 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b086      	sub	sp, #24
 800b764:	af02      	add	r7, sp, #8
 800b766:	6078      	str	r0, [r7, #4]
 800b768:	460b      	mov	r3, r1
 800b76a:	807b      	strh	r3, [r7, #2]
 800b76c:	4613      	mov	r3, r2
 800b76e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800b770:	883b      	ldrh	r3, [r7, #0]
 800b772:	2b41      	cmp	r3, #65	; 0x41
 800b774:	d009      	beq.n	800b78a <pbuf_alloc_reference+0x2a>
 800b776:	883b      	ldrh	r3, [r7, #0]
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d006      	beq.n	800b78a <pbuf_alloc_reference+0x2a>
 800b77c:	4b0f      	ldr	r3, [pc, #60]	; (800b7bc <pbuf_alloc_reference+0x5c>)
 800b77e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800b782:	490f      	ldr	r1, [pc, #60]	; (800b7c0 <pbuf_alloc_reference+0x60>)
 800b784:	480f      	ldr	r0, [pc, #60]	; (800b7c4 <pbuf_alloc_reference+0x64>)
 800b786:	f00b f85b 	bl	8016840 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800b78a:	200b      	movs	r0, #11
 800b78c:	f7ff fab0 	bl	800acf0 <memp_malloc>
 800b790:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2b00      	cmp	r3, #0
 800b796:	d101      	bne.n	800b79c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800b798:	2300      	movs	r3, #0
 800b79a:	e00b      	b.n	800b7b4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800b79c:	8879      	ldrh	r1, [r7, #2]
 800b79e:	887a      	ldrh	r2, [r7, #2]
 800b7a0:	2300      	movs	r3, #0
 800b7a2:	9301      	str	r3, [sp, #4]
 800b7a4:	883b      	ldrh	r3, [r7, #0]
 800b7a6:	9300      	str	r3, [sp, #0]
 800b7a8:	460b      	mov	r3, r1
 800b7aa:	6879      	ldr	r1, [r7, #4]
 800b7ac:	68f8      	ldr	r0, [r7, #12]
 800b7ae:	f7ff feb7 	bl	800b520 <pbuf_init_alloced_pbuf>
  return p;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3710      	adds	r7, #16
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	bd80      	pop	{r7, pc}
 800b7bc:	08017dac 	.word	0x08017dac
 800b7c0:	08017eb0 	.word	0x08017eb0
 800b7c4:	08017e0c 	.word	0x08017e0c

0800b7c8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b088      	sub	sp, #32
 800b7cc:	af02      	add	r7, sp, #8
 800b7ce:	607b      	str	r3, [r7, #4]
 800b7d0:	4603      	mov	r3, r0
 800b7d2:	73fb      	strb	r3, [r7, #15]
 800b7d4:	460b      	mov	r3, r1
 800b7d6:	81bb      	strh	r3, [r7, #12]
 800b7d8:	4613      	mov	r3, r2
 800b7da:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800b7dc:	7bfb      	ldrb	r3, [r7, #15]
 800b7de:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800b7e0:	8a7b      	ldrh	r3, [r7, #18]
 800b7e2:	3303      	adds	r3, #3
 800b7e4:	f023 0203 	bic.w	r2, r3, #3
 800b7e8:	89bb      	ldrh	r3, [r7, #12]
 800b7ea:	441a      	add	r2, r3
 800b7ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d901      	bls.n	800b7f6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	e018      	b.n	800b828 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800b7f6:	6a3b      	ldr	r3, [r7, #32]
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d007      	beq.n	800b80c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800b7fc:	8a7b      	ldrh	r3, [r7, #18]
 800b7fe:	3303      	adds	r3, #3
 800b800:	f023 0303 	bic.w	r3, r3, #3
 800b804:	6a3a      	ldr	r2, [r7, #32]
 800b806:	4413      	add	r3, r2
 800b808:	617b      	str	r3, [r7, #20]
 800b80a:	e001      	b.n	800b810 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800b80c:	2300      	movs	r3, #0
 800b80e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	89b9      	ldrh	r1, [r7, #12]
 800b814:	89ba      	ldrh	r2, [r7, #12]
 800b816:	2302      	movs	r3, #2
 800b818:	9301      	str	r3, [sp, #4]
 800b81a:	897b      	ldrh	r3, [r7, #10]
 800b81c:	9300      	str	r3, [sp, #0]
 800b81e:	460b      	mov	r3, r1
 800b820:	6979      	ldr	r1, [r7, #20]
 800b822:	f7ff fe7d 	bl	800b520 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800b826:	687b      	ldr	r3, [r7, #4]
}
 800b828:	4618      	mov	r0, r3
 800b82a:	3718      	adds	r7, #24
 800b82c:	46bd      	mov	sp, r7
 800b82e:	bd80      	pop	{r7, pc}

0800b830 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800b830:	b580      	push	{r7, lr}
 800b832:	b084      	sub	sp, #16
 800b834:	af00      	add	r7, sp, #0
 800b836:	6078      	str	r0, [r7, #4]
 800b838:	460b      	mov	r3, r1
 800b83a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d106      	bne.n	800b850 <pbuf_realloc+0x20>
 800b842:	4b3a      	ldr	r3, [pc, #232]	; (800b92c <pbuf_realloc+0xfc>)
 800b844:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b848:	4939      	ldr	r1, [pc, #228]	; (800b930 <pbuf_realloc+0x100>)
 800b84a:	483a      	ldr	r0, [pc, #232]	; (800b934 <pbuf_realloc+0x104>)
 800b84c:	f00a fff8 	bl	8016840 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	891b      	ldrh	r3, [r3, #8]
 800b854:	887a      	ldrh	r2, [r7, #2]
 800b856:	429a      	cmp	r2, r3
 800b858:	d263      	bcs.n	800b922 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	891a      	ldrh	r2, [r3, #8]
 800b85e:	887b      	ldrh	r3, [r7, #2]
 800b860:	1ad3      	subs	r3, r2, r3
 800b862:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800b864:	887b      	ldrh	r3, [r7, #2]
 800b866:	817b      	strh	r3, [r7, #10]
  q = p;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800b86c:	e018      	b.n	800b8a0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	895b      	ldrh	r3, [r3, #10]
 800b872:	897a      	ldrh	r2, [r7, #10]
 800b874:	1ad3      	subs	r3, r2, r3
 800b876:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	891a      	ldrh	r2, [r3, #8]
 800b87c:	893b      	ldrh	r3, [r7, #8]
 800b87e:	1ad3      	subs	r3, r2, r3
 800b880:	b29a      	uxth	r2, r3
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800b886:	68fb      	ldr	r3, [r7, #12]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d106      	bne.n	800b8a0 <pbuf_realloc+0x70>
 800b892:	4b26      	ldr	r3, [pc, #152]	; (800b92c <pbuf_realloc+0xfc>)
 800b894:	f240 12af 	movw	r2, #431	; 0x1af
 800b898:	4927      	ldr	r1, [pc, #156]	; (800b938 <pbuf_realloc+0x108>)
 800b89a:	4826      	ldr	r0, [pc, #152]	; (800b934 <pbuf_realloc+0x104>)
 800b89c:	f00a ffd0 	bl	8016840 <iprintf>
  while (rem_len > q->len) {
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	895b      	ldrh	r3, [r3, #10]
 800b8a4:	897a      	ldrh	r2, [r7, #10]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d8e1      	bhi.n	800b86e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	7b1b      	ldrb	r3, [r3, #12]
 800b8ae:	f003 030f 	and.w	r3, r3, #15
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d121      	bne.n	800b8fa <pbuf_realloc+0xca>
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	895b      	ldrh	r3, [r3, #10]
 800b8ba:	897a      	ldrh	r2, [r7, #10]
 800b8bc:	429a      	cmp	r2, r3
 800b8be:	d01c      	beq.n	800b8fa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	7b5b      	ldrb	r3, [r3, #13]
 800b8c4:	f003 0302 	and.w	r3, r3, #2
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d116      	bne.n	800b8fa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	685a      	ldr	r2, [r3, #4]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	1ad3      	subs	r3, r2, r3
 800b8d4:	b29a      	uxth	r2, r3
 800b8d6:	897b      	ldrh	r3, [r7, #10]
 800b8d8:	4413      	add	r3, r2
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	4619      	mov	r1, r3
 800b8de:	68f8      	ldr	r0, [r7, #12]
 800b8e0:	f7fe ff58 	bl	800a794 <mem_trim>
 800b8e4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d106      	bne.n	800b8fa <pbuf_realloc+0xca>
 800b8ec:	4b0f      	ldr	r3, [pc, #60]	; (800b92c <pbuf_realloc+0xfc>)
 800b8ee:	f240 12bd 	movw	r2, #445	; 0x1bd
 800b8f2:	4912      	ldr	r1, [pc, #72]	; (800b93c <pbuf_realloc+0x10c>)
 800b8f4:	480f      	ldr	r0, [pc, #60]	; (800b934 <pbuf_realloc+0x104>)
 800b8f6:	f00a ffa3 	bl	8016840 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	897a      	ldrh	r2, [r7, #10]
 800b8fe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800b900:	68fb      	ldr	r3, [r7, #12]
 800b902:	895a      	ldrh	r2, [r3, #10]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	d004      	beq.n	800b91a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4618      	mov	r0, r3
 800b916:	f000 f911 	bl	800bb3c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	2200      	movs	r2, #0
 800b91e:	601a      	str	r2, [r3, #0]
 800b920:	e000      	b.n	800b924 <pbuf_realloc+0xf4>
    return;
 800b922:	bf00      	nop

}
 800b924:	3710      	adds	r7, #16
 800b926:	46bd      	mov	sp, r7
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	bf00      	nop
 800b92c:	08017dac 	.word	0x08017dac
 800b930:	08017ec4 	.word	0x08017ec4
 800b934:	08017e0c 	.word	0x08017e0c
 800b938:	08017edc 	.word	0x08017edc
 800b93c:	08017ef4 	.word	0x08017ef4

0800b940 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800b940:	b580      	push	{r7, lr}
 800b942:	b086      	sub	sp, #24
 800b944:	af00      	add	r7, sp, #0
 800b946:	60f8      	str	r0, [r7, #12]
 800b948:	60b9      	str	r1, [r7, #8]
 800b94a:	4613      	mov	r3, r2
 800b94c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d106      	bne.n	800b962 <pbuf_add_header_impl+0x22>
 800b954:	4b2b      	ldr	r3, [pc, #172]	; (800ba04 <pbuf_add_header_impl+0xc4>)
 800b956:	f240 12df 	movw	r2, #479	; 0x1df
 800b95a:	492b      	ldr	r1, [pc, #172]	; (800ba08 <pbuf_add_header_impl+0xc8>)
 800b95c:	482b      	ldr	r0, [pc, #172]	; (800ba0c <pbuf_add_header_impl+0xcc>)
 800b95e:	f00a ff6f 	bl	8016840 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800b962:	68fb      	ldr	r3, [r7, #12]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d003      	beq.n	800b970 <pbuf_add_header_impl+0x30>
 800b968:	68bb      	ldr	r3, [r7, #8]
 800b96a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b96e:	d301      	bcc.n	800b974 <pbuf_add_header_impl+0x34>
    return 1;
 800b970:	2301      	movs	r3, #1
 800b972:	e043      	b.n	800b9fc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800b974:	68bb      	ldr	r3, [r7, #8]
 800b976:	2b00      	cmp	r3, #0
 800b978:	d101      	bne.n	800b97e <pbuf_add_header_impl+0x3e>
    return 0;
 800b97a:	2300      	movs	r3, #0
 800b97c:	e03e      	b.n	800b9fc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800b97e:	68bb      	ldr	r3, [r7, #8]
 800b980:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	891a      	ldrh	r2, [r3, #8]
 800b986:	8a7b      	ldrh	r3, [r7, #18]
 800b988:	4413      	add	r3, r2
 800b98a:	b29b      	uxth	r3, r3
 800b98c:	8a7a      	ldrh	r2, [r7, #18]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d901      	bls.n	800b996 <pbuf_add_header_impl+0x56>
    return 1;
 800b992:	2301      	movs	r3, #1
 800b994:	e032      	b.n	800b9fc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800b996:	68fb      	ldr	r3, [r7, #12]
 800b998:	7b1b      	ldrb	r3, [r3, #12]
 800b99a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800b99c:	8a3b      	ldrh	r3, [r7, #16]
 800b99e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9a2:	2b00      	cmp	r3, #0
 800b9a4:	d00c      	beq.n	800b9c0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	685a      	ldr	r2, [r3, #4]
 800b9aa:	68bb      	ldr	r3, [r7, #8]
 800b9ac:	425b      	negs	r3, r3
 800b9ae:	4413      	add	r3, r2
 800b9b0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	3310      	adds	r3, #16
 800b9b6:	697a      	ldr	r2, [r7, #20]
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d20d      	bcs.n	800b9d8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	e01d      	b.n	800b9fc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800b9c0:	79fb      	ldrb	r3, [r7, #7]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d006      	beq.n	800b9d4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	685a      	ldr	r2, [r3, #4]
 800b9ca:	68bb      	ldr	r3, [r7, #8]
 800b9cc:	425b      	negs	r3, r3
 800b9ce:	4413      	add	r3, r2
 800b9d0:	617b      	str	r3, [r7, #20]
 800b9d2:	e001      	b.n	800b9d8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800b9d4:	2301      	movs	r3, #1
 800b9d6:	e011      	b.n	800b9fc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	697a      	ldr	r2, [r7, #20]
 800b9dc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	895a      	ldrh	r2, [r3, #10]
 800b9e2:	8a7b      	ldrh	r3, [r7, #18]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	b29a      	uxth	r2, r3
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	891a      	ldrh	r2, [r3, #8]
 800b9f0:	8a7b      	ldrh	r3, [r7, #18]
 800b9f2:	4413      	add	r3, r2
 800b9f4:	b29a      	uxth	r2, r3
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	811a      	strh	r2, [r3, #8]


  return 0;
 800b9fa:	2300      	movs	r3, #0
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3718      	adds	r7, #24
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}
 800ba04:	08017dac 	.word	0x08017dac
 800ba08:	08017f10 	.word	0x08017f10
 800ba0c:	08017e0c 	.word	0x08017e0c

0800ba10 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b082      	sub	sp, #8
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	6839      	ldr	r1, [r7, #0]
 800ba1e:	6878      	ldr	r0, [r7, #4]
 800ba20:	f7ff ff8e 	bl	800b940 <pbuf_add_header_impl>
 800ba24:	4603      	mov	r3, r0
}
 800ba26:	4618      	mov	r0, r3
 800ba28:	3708      	adds	r7, #8
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	bd80      	pop	{r7, pc}
	...

0800ba30 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b084      	sub	sp, #16
 800ba34:	af00      	add	r7, sp, #0
 800ba36:	6078      	str	r0, [r7, #4]
 800ba38:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d106      	bne.n	800ba4e <pbuf_remove_header+0x1e>
 800ba40:	4b20      	ldr	r3, [pc, #128]	; (800bac4 <pbuf_remove_header+0x94>)
 800ba42:	f240 224b 	movw	r2, #587	; 0x24b
 800ba46:	4920      	ldr	r1, [pc, #128]	; (800bac8 <pbuf_remove_header+0x98>)
 800ba48:	4820      	ldr	r0, [pc, #128]	; (800bacc <pbuf_remove_header+0x9c>)
 800ba4a:	f00a fef9 	bl	8016840 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d003      	beq.n	800ba5c <pbuf_remove_header+0x2c>
 800ba54:	683b      	ldr	r3, [r7, #0]
 800ba56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba5a:	d301      	bcc.n	800ba60 <pbuf_remove_header+0x30>
    return 1;
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	e02c      	b.n	800baba <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d101      	bne.n	800ba6a <pbuf_remove_header+0x3a>
    return 0;
 800ba66:	2300      	movs	r3, #0
 800ba68:	e027      	b.n	800baba <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	895b      	ldrh	r3, [r3, #10]
 800ba72:	89fa      	ldrh	r2, [r7, #14]
 800ba74:	429a      	cmp	r2, r3
 800ba76:	d908      	bls.n	800ba8a <pbuf_remove_header+0x5a>
 800ba78:	4b12      	ldr	r3, [pc, #72]	; (800bac4 <pbuf_remove_header+0x94>)
 800ba7a:	f240 2255 	movw	r2, #597	; 0x255
 800ba7e:	4914      	ldr	r1, [pc, #80]	; (800bad0 <pbuf_remove_header+0xa0>)
 800ba80:	4812      	ldr	r0, [pc, #72]	; (800bacc <pbuf_remove_header+0x9c>)
 800ba82:	f00a fedd 	bl	8016840 <iprintf>
 800ba86:	2301      	movs	r3, #1
 800ba88:	e017      	b.n	800baba <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	685b      	ldr	r3, [r3, #4]
 800ba8e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	685a      	ldr	r2, [r3, #4]
 800ba94:	683b      	ldr	r3, [r7, #0]
 800ba96:	441a      	add	r2, r3
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	895a      	ldrh	r2, [r3, #10]
 800baa0:	89fb      	ldrh	r3, [r7, #14]
 800baa2:	1ad3      	subs	r3, r2, r3
 800baa4:	b29a      	uxth	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	891a      	ldrh	r2, [r3, #8]
 800baae:	89fb      	ldrh	r3, [r7, #14]
 800bab0:	1ad3      	subs	r3, r2, r3
 800bab2:	b29a      	uxth	r2, r3
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800bab8:	2300      	movs	r3, #0
}
 800baba:	4618      	mov	r0, r3
 800babc:	3710      	adds	r7, #16
 800babe:	46bd      	mov	sp, r7
 800bac0:	bd80      	pop	{r7, pc}
 800bac2:	bf00      	nop
 800bac4:	08017dac 	.word	0x08017dac
 800bac8:	08017f10 	.word	0x08017f10
 800bacc:	08017e0c 	.word	0x08017e0c
 800bad0:	08017f1c 	.word	0x08017f1c

0800bad4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b082      	sub	sp, #8
 800bad8:	af00      	add	r7, sp, #0
 800bada:	6078      	str	r0, [r7, #4]
 800badc:	460b      	mov	r3, r1
 800bade:	807b      	strh	r3, [r7, #2]
 800bae0:	4613      	mov	r3, r2
 800bae2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800bae4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	da08      	bge.n	800bafe <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800baec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800baf0:	425b      	negs	r3, r3
 800baf2:	4619      	mov	r1, r3
 800baf4:	6878      	ldr	r0, [r7, #4]
 800baf6:	f7ff ff9b 	bl	800ba30 <pbuf_remove_header>
 800bafa:	4603      	mov	r3, r0
 800bafc:	e007      	b.n	800bb0e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800bafe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb02:	787a      	ldrb	r2, [r7, #1]
 800bb04:	4619      	mov	r1, r3
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f7ff ff1a 	bl	800b940 <pbuf_add_header_impl>
 800bb0c:	4603      	mov	r3, r0
  }
}
 800bb0e:	4618      	mov	r0, r3
 800bb10:	3708      	adds	r7, #8
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}

0800bb16 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800bb16:	b580      	push	{r7, lr}
 800bb18:	b082      	sub	sp, #8
 800bb1a:	af00      	add	r7, sp, #0
 800bb1c:	6078      	str	r0, [r7, #4]
 800bb1e:	460b      	mov	r3, r1
 800bb20:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800bb22:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800bb26:	2201      	movs	r2, #1
 800bb28:	4619      	mov	r1, r3
 800bb2a:	6878      	ldr	r0, [r7, #4]
 800bb2c:	f7ff ffd2 	bl	800bad4 <pbuf_header_impl>
 800bb30:	4603      	mov	r3, r0
}
 800bb32:	4618      	mov	r0, r3
 800bb34:	3708      	adds	r7, #8
 800bb36:	46bd      	mov	sp, r7
 800bb38:	bd80      	pop	{r7, pc}
	...

0800bb3c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b088      	sub	sp, #32
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d10b      	bne.n	800bb62 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d106      	bne.n	800bb5e <pbuf_free+0x22>
 800bb50:	4b3b      	ldr	r3, [pc, #236]	; (800bc40 <pbuf_free+0x104>)
 800bb52:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800bb56:	493b      	ldr	r1, [pc, #236]	; (800bc44 <pbuf_free+0x108>)
 800bb58:	483b      	ldr	r0, [pc, #236]	; (800bc48 <pbuf_free+0x10c>)
 800bb5a:	f00a fe71 	bl	8016840 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	e069      	b.n	800bc36 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800bb62:	2300      	movs	r3, #0
 800bb64:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800bb66:	e062      	b.n	800bc2e <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800bb68:	f00a fc74 	bl	8016454 <sys_arch_protect>
 800bb6c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	7b9b      	ldrb	r3, [r3, #14]
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d106      	bne.n	800bb84 <pbuf_free+0x48>
 800bb76:	4b32      	ldr	r3, [pc, #200]	; (800bc40 <pbuf_free+0x104>)
 800bb78:	f240 22f1 	movw	r2, #753	; 0x2f1
 800bb7c:	4933      	ldr	r1, [pc, #204]	; (800bc4c <pbuf_free+0x110>)
 800bb7e:	4832      	ldr	r0, [pc, #200]	; (800bc48 <pbuf_free+0x10c>)
 800bb80:	f00a fe5e 	bl	8016840 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	7b9b      	ldrb	r3, [r3, #14]
 800bb88:	3b01      	subs	r3, #1
 800bb8a:	b2da      	uxtb	r2, r3
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	739a      	strb	r2, [r3, #14]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	7b9b      	ldrb	r3, [r3, #14]
 800bb94:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800bb96:	69b8      	ldr	r0, [r7, #24]
 800bb98:	f00a fc6a 	bl	8016470 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800bb9c:	7dfb      	ldrb	r3, [r7, #23]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d143      	bne.n	800bc2a <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	7b1b      	ldrb	r3, [r3, #12]
 800bbac:	f003 030f 	and.w	r3, r3, #15
 800bbb0:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	7b5b      	ldrb	r3, [r3, #13]
 800bbb6:	f003 0302 	and.w	r3, r3, #2
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d011      	beq.n	800bbe2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800bbc2:	68bb      	ldr	r3, [r7, #8]
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d106      	bne.n	800bbd8 <pbuf_free+0x9c>
 800bbca:	4b1d      	ldr	r3, [pc, #116]	; (800bc40 <pbuf_free+0x104>)
 800bbcc:	f240 22ff 	movw	r2, #767	; 0x2ff
 800bbd0:	491f      	ldr	r1, [pc, #124]	; (800bc50 <pbuf_free+0x114>)
 800bbd2:	481d      	ldr	r0, [pc, #116]	; (800bc48 <pbuf_free+0x10c>)
 800bbd4:	f00a fe34 	bl	8016840 <iprintf>
        pc->custom_free_function(p);
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	691b      	ldr	r3, [r3, #16]
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	4798      	blx	r3
 800bbe0:	e01d      	b.n	800bc1e <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800bbe2:	7bfb      	ldrb	r3, [r7, #15]
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	d104      	bne.n	800bbf2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800bbe8:	6879      	ldr	r1, [r7, #4]
 800bbea:	200c      	movs	r0, #12
 800bbec:	f7ff f8f6 	bl	800addc <memp_free>
 800bbf0:	e015      	b.n	800bc1e <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800bbf2:	7bfb      	ldrb	r3, [r7, #15]
 800bbf4:	2b01      	cmp	r3, #1
 800bbf6:	d104      	bne.n	800bc02 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800bbf8:	6879      	ldr	r1, [r7, #4]
 800bbfa:	200b      	movs	r0, #11
 800bbfc:	f7ff f8ee 	bl	800addc <memp_free>
 800bc00:	e00d      	b.n	800bc1e <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800bc02:	7bfb      	ldrb	r3, [r7, #15]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d103      	bne.n	800bc10 <pbuf_free+0xd4>
          mem_free(p);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f7fe fd33 	bl	800a674 <mem_free>
 800bc0e:	e006      	b.n	800bc1e <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800bc10:	4b0b      	ldr	r3, [pc, #44]	; (800bc40 <pbuf_free+0x104>)
 800bc12:	f240 320f 	movw	r2, #783	; 0x30f
 800bc16:	490f      	ldr	r1, [pc, #60]	; (800bc54 <pbuf_free+0x118>)
 800bc18:	480b      	ldr	r0, [pc, #44]	; (800bc48 <pbuf_free+0x10c>)
 800bc1a:	f00a fe11 	bl	8016840 <iprintf>
        }
      }
      count++;
 800bc1e:	7ffb      	ldrb	r3, [r7, #31]
 800bc20:	3301      	adds	r3, #1
 800bc22:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800bc24:	693b      	ldr	r3, [r7, #16]
 800bc26:	607b      	str	r3, [r7, #4]
 800bc28:	e001      	b.n	800bc2e <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800bc2a:	2300      	movs	r3, #0
 800bc2c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d199      	bne.n	800bb68 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800bc34:	7ffb      	ldrb	r3, [r7, #31]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3720      	adds	r7, #32
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	08017dac 	.word	0x08017dac
 800bc44:	08017f10 	.word	0x08017f10
 800bc48:	08017e0c 	.word	0x08017e0c
 800bc4c:	08017f3c 	.word	0x08017f3c
 800bc50:	08017f54 	.word	0x08017f54
 800bc54:	08017f78 	.word	0x08017f78

0800bc58 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b085      	sub	sp, #20
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800bc60:	2300      	movs	r3, #0
 800bc62:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800bc64:	e005      	b.n	800bc72 <pbuf_clen+0x1a>
    ++len;
 800bc66:	89fb      	ldrh	r3, [r7, #14]
 800bc68:	3301      	adds	r3, #1
 800bc6a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d1f6      	bne.n	800bc66 <pbuf_clen+0xe>
  }
  return len;
 800bc78:	89fb      	ldrh	r3, [r7, #14]
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	3714      	adds	r7, #20
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr
	...

0800bc88 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b084      	sub	sp, #16
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d016      	beq.n	800bcc4 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800bc96:	f00a fbdd 	bl	8016454 <sys_arch_protect>
 800bc9a:	60f8      	str	r0, [r7, #12]
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	7b9b      	ldrb	r3, [r3, #14]
 800bca0:	3301      	adds	r3, #1
 800bca2:	b2da      	uxtb	r2, r3
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	739a      	strb	r2, [r3, #14]
 800bca8:	68f8      	ldr	r0, [r7, #12]
 800bcaa:	f00a fbe1 	bl	8016470 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	7b9b      	ldrb	r3, [r3, #14]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d106      	bne.n	800bcc4 <pbuf_ref+0x3c>
 800bcb6:	4b05      	ldr	r3, [pc, #20]	; (800bccc <pbuf_ref+0x44>)
 800bcb8:	f240 3242 	movw	r2, #834	; 0x342
 800bcbc:	4904      	ldr	r1, [pc, #16]	; (800bcd0 <pbuf_ref+0x48>)
 800bcbe:	4805      	ldr	r0, [pc, #20]	; (800bcd4 <pbuf_ref+0x4c>)
 800bcc0:	f00a fdbe 	bl	8016840 <iprintf>
  }
}
 800bcc4:	bf00      	nop
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	08017dac 	.word	0x08017dac
 800bcd0:	08017f8c 	.word	0x08017f8c
 800bcd4:	08017e0c 	.word	0x08017e0c

0800bcd8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800bcd8:	b580      	push	{r7, lr}
 800bcda:	b084      	sub	sp, #16
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
 800bce0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	d002      	beq.n	800bcee <pbuf_cat+0x16>
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	2b00      	cmp	r3, #0
 800bcec:	d107      	bne.n	800bcfe <pbuf_cat+0x26>
 800bcee:	4b20      	ldr	r3, [pc, #128]	; (800bd70 <pbuf_cat+0x98>)
 800bcf0:	f240 3259 	movw	r2, #857	; 0x359
 800bcf4:	491f      	ldr	r1, [pc, #124]	; (800bd74 <pbuf_cat+0x9c>)
 800bcf6:	4820      	ldr	r0, [pc, #128]	; (800bd78 <pbuf_cat+0xa0>)
 800bcf8:	f00a fda2 	bl	8016840 <iprintf>
 800bcfc:	e034      	b.n	800bd68 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	60fb      	str	r3, [r7, #12]
 800bd02:	e00a      	b.n	800bd1a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	891a      	ldrh	r2, [r3, #8]
 800bd08:	683b      	ldr	r3, [r7, #0]
 800bd0a:	891b      	ldrh	r3, [r3, #8]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	60fb      	str	r3, [r7, #12]
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d1f0      	bne.n	800bd04 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	891a      	ldrh	r2, [r3, #8]
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	895b      	ldrh	r3, [r3, #10]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d006      	beq.n	800bd3c <pbuf_cat+0x64>
 800bd2e:	4b10      	ldr	r3, [pc, #64]	; (800bd70 <pbuf_cat+0x98>)
 800bd30:	f240 3262 	movw	r2, #866	; 0x362
 800bd34:	4911      	ldr	r1, [pc, #68]	; (800bd7c <pbuf_cat+0xa4>)
 800bd36:	4810      	ldr	r0, [pc, #64]	; (800bd78 <pbuf_cat+0xa0>)
 800bd38:	f00a fd82 	bl	8016840 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d006      	beq.n	800bd52 <pbuf_cat+0x7a>
 800bd44:	4b0a      	ldr	r3, [pc, #40]	; (800bd70 <pbuf_cat+0x98>)
 800bd46:	f240 3263 	movw	r2, #867	; 0x363
 800bd4a:	490d      	ldr	r1, [pc, #52]	; (800bd80 <pbuf_cat+0xa8>)
 800bd4c:	480a      	ldr	r0, [pc, #40]	; (800bd78 <pbuf_cat+0xa0>)
 800bd4e:	f00a fd77 	bl	8016840 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	891a      	ldrh	r2, [r3, #8]
 800bd56:	683b      	ldr	r3, [r7, #0]
 800bd58:	891b      	ldrh	r3, [r3, #8]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800bd62:	68fb      	ldr	r3, [r7, #12]
 800bd64:	683a      	ldr	r2, [r7, #0]
 800bd66:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800bd68:	3710      	adds	r7, #16
 800bd6a:	46bd      	mov	sp, r7
 800bd6c:	bd80      	pop	{r7, pc}
 800bd6e:	bf00      	nop
 800bd70:	08017dac 	.word	0x08017dac
 800bd74:	08017fa0 	.word	0x08017fa0
 800bd78:	08017e0c 	.word	0x08017e0c
 800bd7c:	08017fd8 	.word	0x08017fd8
 800bd80:	08018008 	.word	0x08018008

0800bd84 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b082      	sub	sp, #8
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	6078      	str	r0, [r7, #4]
 800bd8c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800bd8e:	6839      	ldr	r1, [r7, #0]
 800bd90:	6878      	ldr	r0, [r7, #4]
 800bd92:	f7ff ffa1 	bl	800bcd8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800bd96:	6838      	ldr	r0, [r7, #0]
 800bd98:	f7ff ff76 	bl	800bc88 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800bd9c:	bf00      	nop
 800bd9e:	3708      	adds	r7, #8
 800bda0:	46bd      	mov	sp, r7
 800bda2:	bd80      	pop	{r7, pc}

0800bda4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800bda4:	b580      	push	{r7, lr}
 800bda6:	b086      	sub	sp, #24
 800bda8:	af00      	add	r7, sp, #0
 800bdaa:	6078      	str	r0, [r7, #4]
 800bdac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	617b      	str	r3, [r7, #20]
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d008      	beq.n	800bdce <pbuf_copy+0x2a>
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d005      	beq.n	800bdce <pbuf_copy+0x2a>
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	891a      	ldrh	r2, [r3, #8]
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	891b      	ldrh	r3, [r3, #8]
 800bdca:	429a      	cmp	r2, r3
 800bdcc:	d209      	bcs.n	800bde2 <pbuf_copy+0x3e>
 800bdce:	4b57      	ldr	r3, [pc, #348]	; (800bf2c <pbuf_copy+0x188>)
 800bdd0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800bdd4:	4956      	ldr	r1, [pc, #344]	; (800bf30 <pbuf_copy+0x18c>)
 800bdd6:	4857      	ldr	r0, [pc, #348]	; (800bf34 <pbuf_copy+0x190>)
 800bdd8:	f00a fd32 	bl	8016840 <iprintf>
 800bddc:	f06f 030f 	mvn.w	r3, #15
 800bde0:	e09f      	b.n	800bf22 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	895b      	ldrh	r3, [r3, #10]
 800bde6:	461a      	mov	r2, r3
 800bde8:	697b      	ldr	r3, [r7, #20]
 800bdea:	1ad2      	subs	r2, r2, r3
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	895b      	ldrh	r3, [r3, #10]
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	693b      	ldr	r3, [r7, #16]
 800bdf4:	1acb      	subs	r3, r1, r3
 800bdf6:	429a      	cmp	r2, r3
 800bdf8:	d306      	bcc.n	800be08 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800bdfa:	683b      	ldr	r3, [r7, #0]
 800bdfc:	895b      	ldrh	r3, [r3, #10]
 800bdfe:	461a      	mov	r2, r3
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	1ad3      	subs	r3, r2, r3
 800be04:	60fb      	str	r3, [r7, #12]
 800be06:	e005      	b.n	800be14 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	895b      	ldrh	r3, [r3, #10]
 800be0c:	461a      	mov	r2, r3
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	1ad3      	subs	r3, r2, r3
 800be12:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	685a      	ldr	r2, [r3, #4]
 800be18:	697b      	ldr	r3, [r7, #20]
 800be1a:	18d0      	adds	r0, r2, r3
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	685a      	ldr	r2, [r3, #4]
 800be20:	693b      	ldr	r3, [r7, #16]
 800be22:	4413      	add	r3, r2
 800be24:	68fa      	ldr	r2, [r7, #12]
 800be26:	4619      	mov	r1, r3
 800be28:	f00a fc5f 	bl	80166ea <memcpy>
    offset_to += len;
 800be2c:	697a      	ldr	r2, [r7, #20]
 800be2e:	68fb      	ldr	r3, [r7, #12]
 800be30:	4413      	add	r3, r2
 800be32:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800be34:	693a      	ldr	r2, [r7, #16]
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	4413      	add	r3, r2
 800be3a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	895b      	ldrh	r3, [r3, #10]
 800be40:	461a      	mov	r2, r3
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	4293      	cmp	r3, r2
 800be46:	d906      	bls.n	800be56 <pbuf_copy+0xb2>
 800be48:	4b38      	ldr	r3, [pc, #224]	; (800bf2c <pbuf_copy+0x188>)
 800be4a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800be4e:	493a      	ldr	r1, [pc, #232]	; (800bf38 <pbuf_copy+0x194>)
 800be50:	4838      	ldr	r0, [pc, #224]	; (800bf34 <pbuf_copy+0x190>)
 800be52:	f00a fcf5 	bl	8016840 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800be56:	683b      	ldr	r3, [r7, #0]
 800be58:	895b      	ldrh	r3, [r3, #10]
 800be5a:	461a      	mov	r2, r3
 800be5c:	693b      	ldr	r3, [r7, #16]
 800be5e:	4293      	cmp	r3, r2
 800be60:	d906      	bls.n	800be70 <pbuf_copy+0xcc>
 800be62:	4b32      	ldr	r3, [pc, #200]	; (800bf2c <pbuf_copy+0x188>)
 800be64:	f240 32da 	movw	r2, #986	; 0x3da
 800be68:	4934      	ldr	r1, [pc, #208]	; (800bf3c <pbuf_copy+0x198>)
 800be6a:	4832      	ldr	r0, [pc, #200]	; (800bf34 <pbuf_copy+0x190>)
 800be6c:	f00a fce8 	bl	8016840 <iprintf>
    if (offset_from >= p_from->len) {
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	895b      	ldrh	r3, [r3, #10]
 800be74:	461a      	mov	r2, r3
 800be76:	693b      	ldr	r3, [r7, #16]
 800be78:	4293      	cmp	r3, r2
 800be7a:	d304      	bcc.n	800be86 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800be7c:	2300      	movs	r3, #0
 800be7e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800be80:	683b      	ldr	r3, [r7, #0]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	895b      	ldrh	r3, [r3, #10]
 800be8a:	461a      	mov	r2, r3
 800be8c:	697b      	ldr	r3, [r7, #20]
 800be8e:	4293      	cmp	r3, r2
 800be90:	d114      	bne.n	800bebc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800be92:	2300      	movs	r3, #0
 800be94:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d10c      	bne.n	800bebc <pbuf_copy+0x118>
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d009      	beq.n	800bebc <pbuf_copy+0x118>
 800bea8:	4b20      	ldr	r3, [pc, #128]	; (800bf2c <pbuf_copy+0x188>)
 800beaa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800beae:	4924      	ldr	r1, [pc, #144]	; (800bf40 <pbuf_copy+0x19c>)
 800beb0:	4820      	ldr	r0, [pc, #128]	; (800bf34 <pbuf_copy+0x190>)
 800beb2:	f00a fcc5 	bl	8016840 <iprintf>
 800beb6:	f06f 030f 	mvn.w	r3, #15
 800beba:	e032      	b.n	800bf22 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800bebc:	683b      	ldr	r3, [r7, #0]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d013      	beq.n	800beea <pbuf_copy+0x146>
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	895a      	ldrh	r2, [r3, #10]
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	891b      	ldrh	r3, [r3, #8]
 800beca:	429a      	cmp	r2, r3
 800becc:	d10d      	bne.n	800beea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800bece:	683b      	ldr	r3, [r7, #0]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d009      	beq.n	800beea <pbuf_copy+0x146>
 800bed6:	4b15      	ldr	r3, [pc, #84]	; (800bf2c <pbuf_copy+0x188>)
 800bed8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800bedc:	4919      	ldr	r1, [pc, #100]	; (800bf44 <pbuf_copy+0x1a0>)
 800bede:	4815      	ldr	r0, [pc, #84]	; (800bf34 <pbuf_copy+0x190>)
 800bee0:	f00a fcae 	bl	8016840 <iprintf>
 800bee4:	f06f 0305 	mvn.w	r3, #5
 800bee8:	e01b      	b.n	800bf22 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2b00      	cmp	r3, #0
 800beee:	d013      	beq.n	800bf18 <pbuf_copy+0x174>
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	895a      	ldrh	r2, [r3, #10]
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	891b      	ldrh	r3, [r3, #8]
 800bef8:	429a      	cmp	r2, r3
 800befa:	d10d      	bne.n	800bf18 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d009      	beq.n	800bf18 <pbuf_copy+0x174>
 800bf04:	4b09      	ldr	r3, [pc, #36]	; (800bf2c <pbuf_copy+0x188>)
 800bf06:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800bf0a:	490e      	ldr	r1, [pc, #56]	; (800bf44 <pbuf_copy+0x1a0>)
 800bf0c:	4809      	ldr	r0, [pc, #36]	; (800bf34 <pbuf_copy+0x190>)
 800bf0e:	f00a fc97 	bl	8016840 <iprintf>
 800bf12:	f06f 0305 	mvn.w	r3, #5
 800bf16:	e004      	b.n	800bf22 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	2b00      	cmp	r3, #0
 800bf1c:	f47f af61 	bne.w	800bde2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800bf20:	2300      	movs	r3, #0
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3718      	adds	r7, #24
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bd80      	pop	{r7, pc}
 800bf2a:	bf00      	nop
 800bf2c:	08017dac 	.word	0x08017dac
 800bf30:	08018054 	.word	0x08018054
 800bf34:	08017e0c 	.word	0x08017e0c
 800bf38:	08018084 	.word	0x08018084
 800bf3c:	0801809c 	.word	0x0801809c
 800bf40:	080180b8 	.word	0x080180b8
 800bf44:	080180c8 	.word	0x080180c8

0800bf48 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b088      	sub	sp, #32
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	60f8      	str	r0, [r7, #12]
 800bf50:	60b9      	str	r1, [r7, #8]
 800bf52:	4611      	mov	r1, r2
 800bf54:	461a      	mov	r2, r3
 800bf56:	460b      	mov	r3, r1
 800bf58:	80fb      	strh	r3, [r7, #6]
 800bf5a:	4613      	mov	r3, r2
 800bf5c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800bf5e:	2300      	movs	r3, #0
 800bf60:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800bf62:	2300      	movs	r3, #0
 800bf64:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d108      	bne.n	800bf7e <pbuf_copy_partial+0x36>
 800bf6c:	4b2b      	ldr	r3, [pc, #172]	; (800c01c <pbuf_copy_partial+0xd4>)
 800bf6e:	f240 420a 	movw	r2, #1034	; 0x40a
 800bf72:	492b      	ldr	r1, [pc, #172]	; (800c020 <pbuf_copy_partial+0xd8>)
 800bf74:	482b      	ldr	r0, [pc, #172]	; (800c024 <pbuf_copy_partial+0xdc>)
 800bf76:	f00a fc63 	bl	8016840 <iprintf>
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	e04a      	b.n	800c014 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d108      	bne.n	800bf96 <pbuf_copy_partial+0x4e>
 800bf84:	4b25      	ldr	r3, [pc, #148]	; (800c01c <pbuf_copy_partial+0xd4>)
 800bf86:	f240 420b 	movw	r2, #1035	; 0x40b
 800bf8a:	4927      	ldr	r1, [pc, #156]	; (800c028 <pbuf_copy_partial+0xe0>)
 800bf8c:	4825      	ldr	r0, [pc, #148]	; (800c024 <pbuf_copy_partial+0xdc>)
 800bf8e:	f00a fc57 	bl	8016840 <iprintf>
 800bf92:	2300      	movs	r3, #0
 800bf94:	e03e      	b.n	800c014 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	61fb      	str	r3, [r7, #28]
 800bf9a:	e034      	b.n	800c006 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800bf9c:	88bb      	ldrh	r3, [r7, #4]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	d00a      	beq.n	800bfb8 <pbuf_copy_partial+0x70>
 800bfa2:	69fb      	ldr	r3, [r7, #28]
 800bfa4:	895b      	ldrh	r3, [r3, #10]
 800bfa6:	88ba      	ldrh	r2, [r7, #4]
 800bfa8:	429a      	cmp	r2, r3
 800bfaa:	d305      	bcc.n	800bfb8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800bfac:	69fb      	ldr	r3, [r7, #28]
 800bfae:	895b      	ldrh	r3, [r3, #10]
 800bfb0:	88ba      	ldrh	r2, [r7, #4]
 800bfb2:	1ad3      	subs	r3, r2, r3
 800bfb4:	80bb      	strh	r3, [r7, #4]
 800bfb6:	e023      	b.n	800c000 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800bfb8:	69fb      	ldr	r3, [r7, #28]
 800bfba:	895a      	ldrh	r2, [r3, #10]
 800bfbc:	88bb      	ldrh	r3, [r7, #4]
 800bfbe:	1ad3      	subs	r3, r2, r3
 800bfc0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800bfc2:	8b3a      	ldrh	r2, [r7, #24]
 800bfc4:	88fb      	ldrh	r3, [r7, #6]
 800bfc6:	429a      	cmp	r2, r3
 800bfc8:	d901      	bls.n	800bfce <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800bfca:	88fb      	ldrh	r3, [r7, #6]
 800bfcc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800bfce:	8b7b      	ldrh	r3, [r7, #26]
 800bfd0:	68ba      	ldr	r2, [r7, #8]
 800bfd2:	18d0      	adds	r0, r2, r3
 800bfd4:	69fb      	ldr	r3, [r7, #28]
 800bfd6:	685a      	ldr	r2, [r3, #4]
 800bfd8:	88bb      	ldrh	r3, [r7, #4]
 800bfda:	4413      	add	r3, r2
 800bfdc:	8b3a      	ldrh	r2, [r7, #24]
 800bfde:	4619      	mov	r1, r3
 800bfe0:	f00a fb83 	bl	80166ea <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800bfe4:	8afa      	ldrh	r2, [r7, #22]
 800bfe6:	8b3b      	ldrh	r3, [r7, #24]
 800bfe8:	4413      	add	r3, r2
 800bfea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800bfec:	8b7a      	ldrh	r2, [r7, #26]
 800bfee:	8b3b      	ldrh	r3, [r7, #24]
 800bff0:	4413      	add	r3, r2
 800bff2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800bff4:	88fa      	ldrh	r2, [r7, #6]
 800bff6:	8b3b      	ldrh	r3, [r7, #24]
 800bff8:	1ad3      	subs	r3, r2, r3
 800bffa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800bffc:	2300      	movs	r3, #0
 800bffe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c000:	69fb      	ldr	r3, [r7, #28]
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	61fb      	str	r3, [r7, #28]
 800c006:	88fb      	ldrh	r3, [r7, #6]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d002      	beq.n	800c012 <pbuf_copy_partial+0xca>
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d1c4      	bne.n	800bf9c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c012:	8afb      	ldrh	r3, [r7, #22]
}
 800c014:	4618      	mov	r0, r3
 800c016:	3720      	adds	r7, #32
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}
 800c01c:	08017dac 	.word	0x08017dac
 800c020:	080180f4 	.word	0x080180f4
 800c024:	08017e0c 	.word	0x08017e0c
 800c028:	08018114 	.word	0x08018114

0800c02c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c02c:	b580      	push	{r7, lr}
 800c02e:	b084      	sub	sp, #16
 800c030:	af00      	add	r7, sp, #0
 800c032:	4603      	mov	r3, r0
 800c034:	603a      	str	r2, [r7, #0]
 800c036:	71fb      	strb	r3, [r7, #7]
 800c038:	460b      	mov	r3, r1
 800c03a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	8919      	ldrh	r1, [r3, #8]
 800c040:	88ba      	ldrh	r2, [r7, #4]
 800c042:	79fb      	ldrb	r3, [r7, #7]
 800c044:	4618      	mov	r0, r3
 800c046:	f7ff fa95 	bl	800b574 <pbuf_alloc>
 800c04a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d101      	bne.n	800c056 <pbuf_clone+0x2a>
    return NULL;
 800c052:	2300      	movs	r3, #0
 800c054:	e011      	b.n	800c07a <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c056:	6839      	ldr	r1, [r7, #0]
 800c058:	68f8      	ldr	r0, [r7, #12]
 800c05a:	f7ff fea3 	bl	800bda4 <pbuf_copy>
 800c05e:	4603      	mov	r3, r0
 800c060:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c062:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d006      	beq.n	800c078 <pbuf_clone+0x4c>
 800c06a:	4b06      	ldr	r3, [pc, #24]	; (800c084 <pbuf_clone+0x58>)
 800c06c:	f240 5224 	movw	r2, #1316	; 0x524
 800c070:	4905      	ldr	r1, [pc, #20]	; (800c088 <pbuf_clone+0x5c>)
 800c072:	4806      	ldr	r0, [pc, #24]	; (800c08c <pbuf_clone+0x60>)
 800c074:	f00a fbe4 	bl	8016840 <iprintf>
  return q;
 800c078:	68fb      	ldr	r3, [r7, #12]
}
 800c07a:	4618      	mov	r0, r3
 800c07c:	3710      	adds	r7, #16
 800c07e:	46bd      	mov	sp, r7
 800c080:	bd80      	pop	{r7, pc}
 800c082:	bf00      	nop
 800c084:	08017dac 	.word	0x08017dac
 800c088:	08018220 	.word	0x08018220
 800c08c:	08017e0c 	.word	0x08017e0c

0800c090 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800c090:	b580      	push	{r7, lr}
 800c092:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800c094:	f00a fbec 	bl	8016870 <rand>
 800c098:	4603      	mov	r3, r0
 800c09a:	b29b      	uxth	r3, r3
 800c09c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c0a0:	b29b      	uxth	r3, r3
 800c0a2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800c0a6:	b29a      	uxth	r2, r3
 800c0a8:	4b01      	ldr	r3, [pc, #4]	; (800c0b0 <tcp_init+0x20>)
 800c0aa:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800c0ac:	bf00      	nop
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	20000024 	.word	0x20000024

0800c0b4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b082      	sub	sp, #8
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	7d1b      	ldrb	r3, [r3, #20]
 800c0c0:	2b01      	cmp	r3, #1
 800c0c2:	d105      	bne.n	800c0d0 <tcp_free+0x1c>
 800c0c4:	4b06      	ldr	r3, [pc, #24]	; (800c0e0 <tcp_free+0x2c>)
 800c0c6:	22d4      	movs	r2, #212	; 0xd4
 800c0c8:	4906      	ldr	r1, [pc, #24]	; (800c0e4 <tcp_free+0x30>)
 800c0ca:	4807      	ldr	r0, [pc, #28]	; (800c0e8 <tcp_free+0x34>)
 800c0cc:	f00a fbb8 	bl	8016840 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800c0d0:	6879      	ldr	r1, [r7, #4]
 800c0d2:	2001      	movs	r0, #1
 800c0d4:	f7fe fe82 	bl	800addc <memp_free>
}
 800c0d8:	bf00      	nop
 800c0da:	3708      	adds	r7, #8
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd80      	pop	{r7, pc}
 800c0e0:	080182ac 	.word	0x080182ac
 800c0e4:	080182dc 	.word	0x080182dc
 800c0e8:	080182f0 	.word	0x080182f0

0800c0ec <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b082      	sub	sp, #8
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	7d1b      	ldrb	r3, [r3, #20]
 800c0f8:	2b01      	cmp	r3, #1
 800c0fa:	d105      	bne.n	800c108 <tcp_free_listen+0x1c>
 800c0fc:	4b06      	ldr	r3, [pc, #24]	; (800c118 <tcp_free_listen+0x2c>)
 800c0fe:	22df      	movs	r2, #223	; 0xdf
 800c100:	4906      	ldr	r1, [pc, #24]	; (800c11c <tcp_free_listen+0x30>)
 800c102:	4807      	ldr	r0, [pc, #28]	; (800c120 <tcp_free_listen+0x34>)
 800c104:	f00a fb9c 	bl	8016840 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800c108:	6879      	ldr	r1, [r7, #4]
 800c10a:	2002      	movs	r0, #2
 800c10c:	f7fe fe66 	bl	800addc <memp_free>
}
 800c110:	bf00      	nop
 800c112:	3708      	adds	r7, #8
 800c114:	46bd      	mov	sp, r7
 800c116:	bd80      	pop	{r7, pc}
 800c118:	080182ac 	.word	0x080182ac
 800c11c:	08018318 	.word	0x08018318
 800c120:	080182f0 	.word	0x080182f0

0800c124 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800c128:	f000 fea2 	bl	800ce70 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800c12c:	4b07      	ldr	r3, [pc, #28]	; (800c14c <tcp_tmr+0x28>)
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	3301      	adds	r3, #1
 800c132:	b2da      	uxtb	r2, r3
 800c134:	4b05      	ldr	r3, [pc, #20]	; (800c14c <tcp_tmr+0x28>)
 800c136:	701a      	strb	r2, [r3, #0]
 800c138:	4b04      	ldr	r3, [pc, #16]	; (800c14c <tcp_tmr+0x28>)
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	f003 0301 	and.w	r3, r3, #1
 800c140:	2b00      	cmp	r3, #0
 800c142:	d001      	beq.n	800c148 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800c144:	f000 fb54 	bl	800c7f0 <tcp_slowtmr>
  }
}
 800c148:	bf00      	nop
 800c14a:	bd80      	pop	{r7, pc}
 800c14c:	2000f219 	.word	0x2000f219

0800c150 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b084      	sub	sp, #16
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
 800c158:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d105      	bne.n	800c16c <tcp_remove_listener+0x1c>
 800c160:	4b0d      	ldr	r3, [pc, #52]	; (800c198 <tcp_remove_listener+0x48>)
 800c162:	22ff      	movs	r2, #255	; 0xff
 800c164:	490d      	ldr	r1, [pc, #52]	; (800c19c <tcp_remove_listener+0x4c>)
 800c166:	480e      	ldr	r0, [pc, #56]	; (800c1a0 <tcp_remove_listener+0x50>)
 800c168:	f00a fb6a 	bl	8016840 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	60fb      	str	r3, [r7, #12]
 800c170:	e00a      	b.n	800c188 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800c172:	68fb      	ldr	r3, [r7, #12]
 800c174:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c176:	683a      	ldr	r2, [r7, #0]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d102      	bne.n	800c182 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	2200      	movs	r2, #0
 800c180:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	68db      	ldr	r3, [r3, #12]
 800c186:	60fb      	str	r3, [r7, #12]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d1f1      	bne.n	800c172 <tcp_remove_listener+0x22>
    }
  }
}
 800c18e:	bf00      	nop
 800c190:	bf00      	nop
 800c192:	3710      	adds	r7, #16
 800c194:	46bd      	mov	sp, r7
 800c196:	bd80      	pop	{r7, pc}
 800c198:	080182ac 	.word	0x080182ac
 800c19c:	08018334 	.word	0x08018334
 800c1a0:	080182f0 	.word	0x080182f0

0800c1a4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d106      	bne.n	800c1c0 <tcp_listen_closed+0x1c>
 800c1b2:	4b14      	ldr	r3, [pc, #80]	; (800c204 <tcp_listen_closed+0x60>)
 800c1b4:	f240 1211 	movw	r2, #273	; 0x111
 800c1b8:	4913      	ldr	r1, [pc, #76]	; (800c208 <tcp_listen_closed+0x64>)
 800c1ba:	4814      	ldr	r0, [pc, #80]	; (800c20c <tcp_listen_closed+0x68>)
 800c1bc:	f00a fb40 	bl	8016840 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	7d1b      	ldrb	r3, [r3, #20]
 800c1c4:	2b01      	cmp	r3, #1
 800c1c6:	d006      	beq.n	800c1d6 <tcp_listen_closed+0x32>
 800c1c8:	4b0e      	ldr	r3, [pc, #56]	; (800c204 <tcp_listen_closed+0x60>)
 800c1ca:	f44f 7289 	mov.w	r2, #274	; 0x112
 800c1ce:	4910      	ldr	r1, [pc, #64]	; (800c210 <tcp_listen_closed+0x6c>)
 800c1d0:	480e      	ldr	r0, [pc, #56]	; (800c20c <tcp_listen_closed+0x68>)
 800c1d2:	f00a fb35 	bl	8016840 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	60fb      	str	r3, [r7, #12]
 800c1da:	e00b      	b.n	800c1f4 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800c1dc:	4a0d      	ldr	r2, [pc, #52]	; (800c214 <tcp_listen_closed+0x70>)
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	6879      	ldr	r1, [r7, #4]
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f7ff ffb1 	bl	800c150 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	3301      	adds	r3, #1
 800c1f2:	60fb      	str	r3, [r7, #12]
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	2b03      	cmp	r3, #3
 800c1f8:	d9f0      	bls.n	800c1dc <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800c1fa:	bf00      	nop
 800c1fc:	bf00      	nop
 800c1fe:	3710      	adds	r7, #16
 800c200:	46bd      	mov	sp, r7
 800c202:	bd80      	pop	{r7, pc}
 800c204:	080182ac 	.word	0x080182ac
 800c208:	0801835c 	.word	0x0801835c
 800c20c:	080182f0 	.word	0x080182f0
 800c210:	08018368 	.word	0x08018368
 800c214:	0801a690 	.word	0x0801a690

0800c218 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800c218:	b5b0      	push	{r4, r5, r7, lr}
 800c21a:	b088      	sub	sp, #32
 800c21c:	af04      	add	r7, sp, #16
 800c21e:	6078      	str	r0, [r7, #4]
 800c220:	460b      	mov	r3, r1
 800c222:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d106      	bne.n	800c238 <tcp_close_shutdown+0x20>
 800c22a:	4b63      	ldr	r3, [pc, #396]	; (800c3b8 <tcp_close_shutdown+0x1a0>)
 800c22c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800c230:	4962      	ldr	r1, [pc, #392]	; (800c3bc <tcp_close_shutdown+0x1a4>)
 800c232:	4863      	ldr	r0, [pc, #396]	; (800c3c0 <tcp_close_shutdown+0x1a8>)
 800c234:	f00a fb04 	bl	8016840 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800c238:	78fb      	ldrb	r3, [r7, #3]
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d066      	beq.n	800c30c <tcp_close_shutdown+0xf4>
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	7d1b      	ldrb	r3, [r3, #20]
 800c242:	2b04      	cmp	r3, #4
 800c244:	d003      	beq.n	800c24e <tcp_close_shutdown+0x36>
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	7d1b      	ldrb	r3, [r3, #20]
 800c24a:	2b07      	cmp	r3, #7
 800c24c:	d15e      	bne.n	800c30c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c252:	2b00      	cmp	r3, #0
 800c254:	d104      	bne.n	800c260 <tcp_close_shutdown+0x48>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c25a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c25e:	d055      	beq.n	800c30c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	8b5b      	ldrh	r3, [r3, #26]
 800c264:	f003 0310 	and.w	r3, r3, #16
 800c268:	2b00      	cmp	r3, #0
 800c26a:	d106      	bne.n	800c27a <tcp_close_shutdown+0x62>
 800c26c:	4b52      	ldr	r3, [pc, #328]	; (800c3b8 <tcp_close_shutdown+0x1a0>)
 800c26e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800c272:	4954      	ldr	r1, [pc, #336]	; (800c3c4 <tcp_close_shutdown+0x1ac>)
 800c274:	4852      	ldr	r0, [pc, #328]	; (800c3c0 <tcp_close_shutdown+0x1a8>)
 800c276:	f00a fae3 	bl	8016840 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800c282:	687d      	ldr	r5, [r7, #4]
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	3304      	adds	r3, #4
 800c288:	687a      	ldr	r2, [r7, #4]
 800c28a:	8ad2      	ldrh	r2, [r2, #22]
 800c28c:	6879      	ldr	r1, [r7, #4]
 800c28e:	8b09      	ldrh	r1, [r1, #24]
 800c290:	9102      	str	r1, [sp, #8]
 800c292:	9201      	str	r2, [sp, #4]
 800c294:	9300      	str	r3, [sp, #0]
 800c296:	462b      	mov	r3, r5
 800c298:	4622      	mov	r2, r4
 800c29a:	4601      	mov	r1, r0
 800c29c:	6878      	ldr	r0, [r7, #4]
 800c29e:	f004 fe91 	bl	8010fc4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800c2a2:	6878      	ldr	r0, [r7, #4]
 800c2a4:	f001 f8c6 	bl	800d434 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800c2a8:	4b47      	ldr	r3, [pc, #284]	; (800c3c8 <tcp_close_shutdown+0x1b0>)
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	687a      	ldr	r2, [r7, #4]
 800c2ae:	429a      	cmp	r2, r3
 800c2b0:	d105      	bne.n	800c2be <tcp_close_shutdown+0xa6>
 800c2b2:	4b45      	ldr	r3, [pc, #276]	; (800c3c8 <tcp_close_shutdown+0x1b0>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	68db      	ldr	r3, [r3, #12]
 800c2b8:	4a43      	ldr	r2, [pc, #268]	; (800c3c8 <tcp_close_shutdown+0x1b0>)
 800c2ba:	6013      	str	r3, [r2, #0]
 800c2bc:	e013      	b.n	800c2e6 <tcp_close_shutdown+0xce>
 800c2be:	4b42      	ldr	r3, [pc, #264]	; (800c3c8 <tcp_close_shutdown+0x1b0>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	60fb      	str	r3, [r7, #12]
 800c2c4:	e00c      	b.n	800c2e0 <tcp_close_shutdown+0xc8>
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	68db      	ldr	r3, [r3, #12]
 800c2ca:	687a      	ldr	r2, [r7, #4]
 800c2cc:	429a      	cmp	r2, r3
 800c2ce:	d104      	bne.n	800c2da <tcp_close_shutdown+0xc2>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	68da      	ldr	r2, [r3, #12]
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	60da      	str	r2, [r3, #12]
 800c2d8:	e005      	b.n	800c2e6 <tcp_close_shutdown+0xce>
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	68db      	ldr	r3, [r3, #12]
 800c2de:	60fb      	str	r3, [r7, #12]
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d1ef      	bne.n	800c2c6 <tcp_close_shutdown+0xae>
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	2200      	movs	r2, #0
 800c2ea:	60da      	str	r2, [r3, #12]
 800c2ec:	4b37      	ldr	r3, [pc, #220]	; (800c3cc <tcp_close_shutdown+0x1b4>)
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800c2f2:	4b37      	ldr	r3, [pc, #220]	; (800c3d0 <tcp_close_shutdown+0x1b8>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	687a      	ldr	r2, [r7, #4]
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d102      	bne.n	800c302 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800c2fc:	f003 fd5e 	bl	800fdbc <tcp_trigger_input_pcb_close>
 800c300:	e002      	b.n	800c308 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800c302:	6878      	ldr	r0, [r7, #4]
 800c304:	f7ff fed6 	bl	800c0b4 <tcp_free>
      }
      return ERR_OK;
 800c308:	2300      	movs	r3, #0
 800c30a:	e050      	b.n	800c3ae <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	7d1b      	ldrb	r3, [r3, #20]
 800c310:	2b02      	cmp	r3, #2
 800c312:	d03b      	beq.n	800c38c <tcp_close_shutdown+0x174>
 800c314:	2b02      	cmp	r3, #2
 800c316:	dc44      	bgt.n	800c3a2 <tcp_close_shutdown+0x18a>
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d002      	beq.n	800c322 <tcp_close_shutdown+0x10a>
 800c31c:	2b01      	cmp	r3, #1
 800c31e:	d02a      	beq.n	800c376 <tcp_close_shutdown+0x15e>
 800c320:	e03f      	b.n	800c3a2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	8adb      	ldrh	r3, [r3, #22]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d021      	beq.n	800c36e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c32a:	4b2a      	ldr	r3, [pc, #168]	; (800c3d4 <tcp_close_shutdown+0x1bc>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	687a      	ldr	r2, [r7, #4]
 800c330:	429a      	cmp	r2, r3
 800c332:	d105      	bne.n	800c340 <tcp_close_shutdown+0x128>
 800c334:	4b27      	ldr	r3, [pc, #156]	; (800c3d4 <tcp_close_shutdown+0x1bc>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	4a26      	ldr	r2, [pc, #152]	; (800c3d4 <tcp_close_shutdown+0x1bc>)
 800c33c:	6013      	str	r3, [r2, #0]
 800c33e:	e013      	b.n	800c368 <tcp_close_shutdown+0x150>
 800c340:	4b24      	ldr	r3, [pc, #144]	; (800c3d4 <tcp_close_shutdown+0x1bc>)
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	60bb      	str	r3, [r7, #8]
 800c346:	e00c      	b.n	800c362 <tcp_close_shutdown+0x14a>
 800c348:	68bb      	ldr	r3, [r7, #8]
 800c34a:	68db      	ldr	r3, [r3, #12]
 800c34c:	687a      	ldr	r2, [r7, #4]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d104      	bne.n	800c35c <tcp_close_shutdown+0x144>
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	68da      	ldr	r2, [r3, #12]
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	60da      	str	r2, [r3, #12]
 800c35a:	e005      	b.n	800c368 <tcp_close_shutdown+0x150>
 800c35c:	68bb      	ldr	r3, [r7, #8]
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	60bb      	str	r3, [r7, #8]
 800c362:	68bb      	ldr	r3, [r7, #8]
 800c364:	2b00      	cmp	r3, #0
 800c366:	d1ef      	bne.n	800c348 <tcp_close_shutdown+0x130>
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2200      	movs	r2, #0
 800c36c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f7ff fea0 	bl	800c0b4 <tcp_free>
      break;
 800c374:	e01a      	b.n	800c3ac <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800c376:	6878      	ldr	r0, [r7, #4]
 800c378:	f7ff ff14 	bl	800c1a4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800c37c:	6879      	ldr	r1, [r7, #4]
 800c37e:	4816      	ldr	r0, [pc, #88]	; (800c3d8 <tcp_close_shutdown+0x1c0>)
 800c380:	f001 f8a8 	bl	800d4d4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800c384:	6878      	ldr	r0, [r7, #4]
 800c386:	f7ff feb1 	bl	800c0ec <tcp_free_listen>
      break;
 800c38a:	e00f      	b.n	800c3ac <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c38c:	6879      	ldr	r1, [r7, #4]
 800c38e:	480e      	ldr	r0, [pc, #56]	; (800c3c8 <tcp_close_shutdown+0x1b0>)
 800c390:	f001 f8a0 	bl	800d4d4 <tcp_pcb_remove>
 800c394:	4b0d      	ldr	r3, [pc, #52]	; (800c3cc <tcp_close_shutdown+0x1b4>)
 800c396:	2201      	movs	r2, #1
 800c398:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800c39a:	6878      	ldr	r0, [r7, #4]
 800c39c:	f7ff fe8a 	bl	800c0b4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800c3a0:	e004      	b.n	800c3ac <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f81a 	bl	800c3dc <tcp_close_shutdown_fin>
 800c3a8:	4603      	mov	r3, r0
 800c3aa:	e000      	b.n	800c3ae <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800c3ac:	2300      	movs	r3, #0
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3710      	adds	r7, #16
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bdb0      	pop	{r4, r5, r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	080182ac 	.word	0x080182ac
 800c3bc:	08018380 	.word	0x08018380
 800c3c0:	080182f0 	.word	0x080182f0
 800c3c4:	080183a0 	.word	0x080183a0
 800c3c8:	2000f210 	.word	0x2000f210
 800c3cc:	2000f218 	.word	0x2000f218
 800c3d0:	2000f250 	.word	0x2000f250
 800c3d4:	2000f208 	.word	0x2000f208
 800c3d8:	2000f20c 	.word	0x2000f20c

0800c3dc <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800c3dc:	b580      	push	{r7, lr}
 800c3de:	b084      	sub	sp, #16
 800c3e0:	af00      	add	r7, sp, #0
 800c3e2:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d106      	bne.n	800c3f8 <tcp_close_shutdown_fin+0x1c>
 800c3ea:	4b2e      	ldr	r3, [pc, #184]	; (800c4a4 <tcp_close_shutdown_fin+0xc8>)
 800c3ec:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800c3f0:	492d      	ldr	r1, [pc, #180]	; (800c4a8 <tcp_close_shutdown_fin+0xcc>)
 800c3f2:	482e      	ldr	r0, [pc, #184]	; (800c4ac <tcp_close_shutdown_fin+0xd0>)
 800c3f4:	f00a fa24 	bl	8016840 <iprintf>

  switch (pcb->state) {
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	7d1b      	ldrb	r3, [r3, #20]
 800c3fc:	2b07      	cmp	r3, #7
 800c3fe:	d020      	beq.n	800c442 <tcp_close_shutdown_fin+0x66>
 800c400:	2b07      	cmp	r3, #7
 800c402:	dc2b      	bgt.n	800c45c <tcp_close_shutdown_fin+0x80>
 800c404:	2b03      	cmp	r3, #3
 800c406:	d002      	beq.n	800c40e <tcp_close_shutdown_fin+0x32>
 800c408:	2b04      	cmp	r3, #4
 800c40a:	d00d      	beq.n	800c428 <tcp_close_shutdown_fin+0x4c>
 800c40c:	e026      	b.n	800c45c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800c40e:	6878      	ldr	r0, [r7, #4]
 800c410:	f003 fee6 	bl	80101e0 <tcp_send_fin>
 800c414:	4603      	mov	r3, r0
 800c416:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c418:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	d11f      	bne.n	800c460 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800c420:	687b      	ldr	r3, [r7, #4]
 800c422:	2205      	movs	r2, #5
 800c424:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c426:	e01b      	b.n	800c460 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f003 fed9 	bl	80101e0 <tcp_send_fin>
 800c42e:	4603      	mov	r3, r0
 800c430:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c436:	2b00      	cmp	r3, #0
 800c438:	d114      	bne.n	800c464 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2205      	movs	r2, #5
 800c43e:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c440:	e010      	b.n	800c464 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800c442:	6878      	ldr	r0, [r7, #4]
 800c444:	f003 fecc 	bl	80101e0 <tcp_send_fin>
 800c448:	4603      	mov	r3, r0
 800c44a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800c44c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d109      	bne.n	800c468 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2209      	movs	r2, #9
 800c458:	751a      	strb	r2, [r3, #20]
      }
      break;
 800c45a:	e005      	b.n	800c468 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800c45c:	2300      	movs	r3, #0
 800c45e:	e01c      	b.n	800c49a <tcp_close_shutdown_fin+0xbe>
      break;
 800c460:	bf00      	nop
 800c462:	e002      	b.n	800c46a <tcp_close_shutdown_fin+0x8e>
      break;
 800c464:	bf00      	nop
 800c466:	e000      	b.n	800c46a <tcp_close_shutdown_fin+0x8e>
      break;
 800c468:	bf00      	nop
  }

  if (err == ERR_OK) {
 800c46a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d103      	bne.n	800c47a <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800c472:	6878      	ldr	r0, [r7, #4]
 800c474:	f003 fff2 	bl	801045c <tcp_output>
 800c478:	e00d      	b.n	800c496 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800c47a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c47e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c482:	d108      	bne.n	800c496 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	8b5b      	ldrh	r3, [r3, #26]
 800c488:	f043 0308 	orr.w	r3, r3, #8
 800c48c:	b29a      	uxth	r2, r3
 800c48e:	687b      	ldr	r3, [r7, #4]
 800c490:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800c492:	2300      	movs	r3, #0
 800c494:	e001      	b.n	800c49a <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800c496:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	3710      	adds	r7, #16
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	080182ac 	.word	0x080182ac
 800c4a8:	0801835c 	.word	0x0801835c
 800c4ac:	080182f0 	.word	0x080182f0

0800c4b0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d109      	bne.n	800c4d2 <tcp_close+0x22>
 800c4be:	4b0f      	ldr	r3, [pc, #60]	; (800c4fc <tcp_close+0x4c>)
 800c4c0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800c4c4:	490e      	ldr	r1, [pc, #56]	; (800c500 <tcp_close+0x50>)
 800c4c6:	480f      	ldr	r0, [pc, #60]	; (800c504 <tcp_close+0x54>)
 800c4c8:	f00a f9ba 	bl	8016840 <iprintf>
 800c4cc:	f06f 030f 	mvn.w	r3, #15
 800c4d0:	e00f      	b.n	800c4f2 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	7d1b      	ldrb	r3, [r3, #20]
 800c4d6:	2b01      	cmp	r3, #1
 800c4d8:	d006      	beq.n	800c4e8 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	8b5b      	ldrh	r3, [r3, #26]
 800c4de:	f043 0310 	orr.w	r3, r3, #16
 800c4e2:	b29a      	uxth	r2, r3
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800c4e8:	2101      	movs	r1, #1
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f7ff fe94 	bl	800c218 <tcp_close_shutdown>
 800c4f0:	4603      	mov	r3, r0
}
 800c4f2:	4618      	mov	r0, r3
 800c4f4:	3708      	adds	r7, #8
 800c4f6:	46bd      	mov	sp, r7
 800c4f8:	bd80      	pop	{r7, pc}
 800c4fa:	bf00      	nop
 800c4fc:	080182ac 	.word	0x080182ac
 800c500:	080183bc 	.word	0x080183bc
 800c504:	080182f0 	.word	0x080182f0

0800c508 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b08e      	sub	sp, #56	; 0x38
 800c50c:	af04      	add	r7, sp, #16
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d107      	bne.n	800c528 <tcp_abandon+0x20>
 800c518:	4b52      	ldr	r3, [pc, #328]	; (800c664 <tcp_abandon+0x15c>)
 800c51a:	f240 223d 	movw	r2, #573	; 0x23d
 800c51e:	4952      	ldr	r1, [pc, #328]	; (800c668 <tcp_abandon+0x160>)
 800c520:	4852      	ldr	r0, [pc, #328]	; (800c66c <tcp_abandon+0x164>)
 800c522:	f00a f98d 	bl	8016840 <iprintf>
 800c526:	e099      	b.n	800c65c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	7d1b      	ldrb	r3, [r3, #20]
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d106      	bne.n	800c53e <tcp_abandon+0x36>
 800c530:	4b4c      	ldr	r3, [pc, #304]	; (800c664 <tcp_abandon+0x15c>)
 800c532:	f44f 7210 	mov.w	r2, #576	; 0x240
 800c536:	494e      	ldr	r1, [pc, #312]	; (800c670 <tcp_abandon+0x168>)
 800c538:	484c      	ldr	r0, [pc, #304]	; (800c66c <tcp_abandon+0x164>)
 800c53a:	f00a f981 	bl	8016840 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	7d1b      	ldrb	r3, [r3, #20]
 800c542:	2b0a      	cmp	r3, #10
 800c544:	d107      	bne.n	800c556 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800c546:	6879      	ldr	r1, [r7, #4]
 800c548:	484a      	ldr	r0, [pc, #296]	; (800c674 <tcp_abandon+0x16c>)
 800c54a:	f000 ffc3 	bl	800d4d4 <tcp_pcb_remove>
    tcp_free(pcb);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f7ff fdb0 	bl	800c0b4 <tcp_free>
 800c554:	e082      	b.n	800c65c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800c556:	2300      	movs	r3, #0
 800c558:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800c55a:	2300      	movs	r3, #0
 800c55c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c562:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c568:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c570:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	691b      	ldr	r3, [r3, #16]
 800c576:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	7d1b      	ldrb	r3, [r3, #20]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d126      	bne.n	800c5ce <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	8adb      	ldrh	r3, [r3, #22]
 800c584:	2b00      	cmp	r3, #0
 800c586:	d02e      	beq.n	800c5e6 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800c588:	4b3b      	ldr	r3, [pc, #236]	; (800c678 <tcp_abandon+0x170>)
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	687a      	ldr	r2, [r7, #4]
 800c58e:	429a      	cmp	r2, r3
 800c590:	d105      	bne.n	800c59e <tcp_abandon+0x96>
 800c592:	4b39      	ldr	r3, [pc, #228]	; (800c678 <tcp_abandon+0x170>)
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	4a37      	ldr	r2, [pc, #220]	; (800c678 <tcp_abandon+0x170>)
 800c59a:	6013      	str	r3, [r2, #0]
 800c59c:	e013      	b.n	800c5c6 <tcp_abandon+0xbe>
 800c59e:	4b36      	ldr	r3, [pc, #216]	; (800c678 <tcp_abandon+0x170>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	61fb      	str	r3, [r7, #28]
 800c5a4:	e00c      	b.n	800c5c0 <tcp_abandon+0xb8>
 800c5a6:	69fb      	ldr	r3, [r7, #28]
 800c5a8:	68db      	ldr	r3, [r3, #12]
 800c5aa:	687a      	ldr	r2, [r7, #4]
 800c5ac:	429a      	cmp	r2, r3
 800c5ae:	d104      	bne.n	800c5ba <tcp_abandon+0xb2>
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	68da      	ldr	r2, [r3, #12]
 800c5b4:	69fb      	ldr	r3, [r7, #28]
 800c5b6:	60da      	str	r2, [r3, #12]
 800c5b8:	e005      	b.n	800c5c6 <tcp_abandon+0xbe>
 800c5ba:	69fb      	ldr	r3, [r7, #28]
 800c5bc:	68db      	ldr	r3, [r3, #12]
 800c5be:	61fb      	str	r3, [r7, #28]
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d1ef      	bne.n	800c5a6 <tcp_abandon+0x9e>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	60da      	str	r2, [r3, #12]
 800c5cc:	e00b      	b.n	800c5e6 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	8adb      	ldrh	r3, [r3, #22]
 800c5d6:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800c5d8:	6879      	ldr	r1, [r7, #4]
 800c5da:	4828      	ldr	r0, [pc, #160]	; (800c67c <tcp_abandon+0x174>)
 800c5dc:	f000 ff7a 	bl	800d4d4 <tcp_pcb_remove>
 800c5e0:	4b27      	ldr	r3, [pc, #156]	; (800c680 <tcp_abandon+0x178>)
 800c5e2:	2201      	movs	r2, #1
 800c5e4:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d004      	beq.n	800c5f8 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	f000 fd1c 	bl	800d030 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d004      	beq.n	800c60a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c604:	4618      	mov	r0, r3
 800c606:	f000 fd13 	bl	800d030 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d004      	beq.n	800c61c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c616:	4618      	mov	r0, r3
 800c618:	f000 fd0a 	bl	800d030 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800c61c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d00e      	beq.n	800c640 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800c622:	6879      	ldr	r1, [r7, #4]
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	3304      	adds	r3, #4
 800c628:	687a      	ldr	r2, [r7, #4]
 800c62a:	8b12      	ldrh	r2, [r2, #24]
 800c62c:	9202      	str	r2, [sp, #8]
 800c62e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800c630:	9201      	str	r2, [sp, #4]
 800c632:	9300      	str	r3, [sp, #0]
 800c634:	460b      	mov	r3, r1
 800c636:	697a      	ldr	r2, [r7, #20]
 800c638:	69b9      	ldr	r1, [r7, #24]
 800c63a:	6878      	ldr	r0, [r7, #4]
 800c63c:	f004 fcc2 	bl	8010fc4 <tcp_rst>
    }
    last_state = pcb->state;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	7d1b      	ldrb	r3, [r3, #20]
 800c644:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f7ff fd34 	bl	800c0b4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d004      	beq.n	800c65c <tcp_abandon+0x154>
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	f06f 010c 	mvn.w	r1, #12
 800c658:	68f8      	ldr	r0, [r7, #12]
 800c65a:	4798      	blx	r3
  }
}
 800c65c:	3728      	adds	r7, #40	; 0x28
 800c65e:	46bd      	mov	sp, r7
 800c660:	bd80      	pop	{r7, pc}
 800c662:	bf00      	nop
 800c664:	080182ac 	.word	0x080182ac
 800c668:	080183f0 	.word	0x080183f0
 800c66c:	080182f0 	.word	0x080182f0
 800c670:	0801840c 	.word	0x0801840c
 800c674:	2000f214 	.word	0x2000f214
 800c678:	2000f208 	.word	0x2000f208
 800c67c:	2000f210 	.word	0x2000f210
 800c680:	2000f218 	.word	0x2000f218

0800c684 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b082      	sub	sp, #8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800c68c:	2101      	movs	r1, #1
 800c68e:	6878      	ldr	r0, [r7, #4]
 800c690:	f7ff ff3a 	bl	800c508 <tcp_abandon>
}
 800c694:	bf00      	nop
 800c696:	3708      	adds	r7, #8
 800c698:	46bd      	mov	sp, r7
 800c69a:	bd80      	pop	{r7, pc}

0800c69c <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800c69c:	b580      	push	{r7, lr}
 800c69e:	b084      	sub	sp, #16
 800c6a0:	af00      	add	r7, sp, #0
 800c6a2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d106      	bne.n	800c6b8 <tcp_update_rcv_ann_wnd+0x1c>
 800c6aa:	4b25      	ldr	r3, [pc, #148]	; (800c740 <tcp_update_rcv_ann_wnd+0xa4>)
 800c6ac:	f240 32a6 	movw	r2, #934	; 0x3a6
 800c6b0:	4924      	ldr	r1, [pc, #144]	; (800c744 <tcp_update_rcv_ann_wnd+0xa8>)
 800c6b2:	4825      	ldr	r0, [pc, #148]	; (800c748 <tcp_update_rcv_ann_wnd+0xac>)
 800c6b4:	f00a f8c4 	bl	8016840 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6bc:	687a      	ldr	r2, [r7, #4]
 800c6be:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800c6c0:	4413      	add	r3, r2
 800c6c2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6c8:	687a      	ldr	r2, [r7, #4]
 800c6ca:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800c6cc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800c6d0:	bf28      	it	cs
 800c6d2:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800c6d6:	b292      	uxth	r2, r2
 800c6d8:	4413      	add	r3, r2
 800c6da:	68fa      	ldr	r2, [r7, #12]
 800c6dc:	1ad3      	subs	r3, r2, r3
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	db08      	blt.n	800c6f4 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800c6e2:	687b      	ldr	r3, [r7, #4]
 800c6e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6ee:	68fa      	ldr	r2, [r7, #12]
 800c6f0:	1ad3      	subs	r3, r2, r3
 800c6f2:	e020      	b.n	800c736 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6fc:	1ad3      	subs	r3, r2, r3
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	dd03      	ble.n	800c70a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	2200      	movs	r2, #0
 800c706:	855a      	strh	r2, [r3, #42]	; 0x2a
 800c708:	e014      	b.n	800c734 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c712:	1ad3      	subs	r3, r2, r3
 800c714:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800c716:	68bb      	ldr	r3, [r7, #8]
 800c718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c71c:	d306      	bcc.n	800c72c <tcp_update_rcv_ann_wnd+0x90>
 800c71e:	4b08      	ldr	r3, [pc, #32]	; (800c740 <tcp_update_rcv_ann_wnd+0xa4>)
 800c720:	f240 32b6 	movw	r2, #950	; 0x3b6
 800c724:	4909      	ldr	r1, [pc, #36]	; (800c74c <tcp_update_rcv_ann_wnd+0xb0>)
 800c726:	4808      	ldr	r0, [pc, #32]	; (800c748 <tcp_update_rcv_ann_wnd+0xac>)
 800c728:	f00a f88a 	bl	8016840 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	b29a      	uxth	r2, r3
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800c734:	2300      	movs	r3, #0
  }
}
 800c736:	4618      	mov	r0, r3
 800c738:	3710      	adds	r7, #16
 800c73a:	46bd      	mov	sp, r7
 800c73c:	bd80      	pop	{r7, pc}
 800c73e:	bf00      	nop
 800c740:	080182ac 	.word	0x080182ac
 800c744:	08018508 	.word	0x08018508
 800c748:	080182f0 	.word	0x080182f0
 800c74c:	0801852c 	.word	0x0801852c

0800c750 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b084      	sub	sp, #16
 800c754:	af00      	add	r7, sp, #0
 800c756:	6078      	str	r0, [r7, #4]
 800c758:	460b      	mov	r3, r1
 800c75a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d107      	bne.n	800c772 <tcp_recved+0x22>
 800c762:	4b1f      	ldr	r3, [pc, #124]	; (800c7e0 <tcp_recved+0x90>)
 800c764:	f240 32cf 	movw	r2, #975	; 0x3cf
 800c768:	491e      	ldr	r1, [pc, #120]	; (800c7e4 <tcp_recved+0x94>)
 800c76a:	481f      	ldr	r0, [pc, #124]	; (800c7e8 <tcp_recved+0x98>)
 800c76c:	f00a f868 	bl	8016840 <iprintf>
 800c770:	e032      	b.n	800c7d8 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	7d1b      	ldrb	r3, [r3, #20]
 800c776:	2b01      	cmp	r3, #1
 800c778:	d106      	bne.n	800c788 <tcp_recved+0x38>
 800c77a:	4b19      	ldr	r3, [pc, #100]	; (800c7e0 <tcp_recved+0x90>)
 800c77c:	f240 32d2 	movw	r2, #978	; 0x3d2
 800c780:	491a      	ldr	r1, [pc, #104]	; (800c7ec <tcp_recved+0x9c>)
 800c782:	4819      	ldr	r0, [pc, #100]	; (800c7e8 <tcp_recved+0x98>)
 800c784:	f00a f85c 	bl	8016840 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800c788:	687b      	ldr	r3, [r7, #4]
 800c78a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800c78c:	887b      	ldrh	r3, [r7, #2]
 800c78e:	4413      	add	r3, r2
 800c790:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800c792:	89fb      	ldrh	r3, [r7, #14]
 800c794:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800c798:	d804      	bhi.n	800c7a4 <tcp_recved+0x54>
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800c79e:	89fa      	ldrh	r2, [r7, #14]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d204      	bcs.n	800c7ae <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800c7aa:	851a      	strh	r2, [r3, #40]	; 0x28
 800c7ac:	e002      	b.n	800c7b4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	89fa      	ldrh	r2, [r7, #14]
 800c7b2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f7ff ff71 	bl	800c69c <tcp_update_rcv_ann_wnd>
 800c7ba:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800c7c2:	d309      	bcc.n	800c7d8 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	8b5b      	ldrh	r3, [r3, #26]
 800c7c8:	f043 0302 	orr.w	r3, r3, #2
 800c7cc:	b29a      	uxth	r2, r3
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800c7d2:	6878      	ldr	r0, [r7, #4]
 800c7d4:	f003 fe42 	bl	801045c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}
 800c7de:	bf00      	nop
 800c7e0:	080182ac 	.word	0x080182ac
 800c7e4:	08018548 	.word	0x08018548
 800c7e8:	080182f0 	.word	0x080182f0
 800c7ec:	08018560 	.word	0x08018560

0800c7f0 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800c7f0:	b5b0      	push	{r4, r5, r7, lr}
 800c7f2:	b090      	sub	sp, #64	; 0x40
 800c7f4:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800c7fc:	4b94      	ldr	r3, [pc, #592]	; (800ca50 <tcp_slowtmr+0x260>)
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	3301      	adds	r3, #1
 800c802:	4a93      	ldr	r2, [pc, #588]	; (800ca50 <tcp_slowtmr+0x260>)
 800c804:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800c806:	4b93      	ldr	r3, [pc, #588]	; (800ca54 <tcp_slowtmr+0x264>)
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	3301      	adds	r3, #1
 800c80c:	b2da      	uxtb	r2, r3
 800c80e:	4b91      	ldr	r3, [pc, #580]	; (800ca54 <tcp_slowtmr+0x264>)
 800c810:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800c812:	2300      	movs	r3, #0
 800c814:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800c816:	4b90      	ldr	r3, [pc, #576]	; (800ca58 <tcp_slowtmr+0x268>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800c81c:	e29d      	b.n	800cd5a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800c81e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c820:	7d1b      	ldrb	r3, [r3, #20]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d106      	bne.n	800c834 <tcp_slowtmr+0x44>
 800c826:	4b8d      	ldr	r3, [pc, #564]	; (800ca5c <tcp_slowtmr+0x26c>)
 800c828:	f240 42be 	movw	r2, #1214	; 0x4be
 800c82c:	498c      	ldr	r1, [pc, #560]	; (800ca60 <tcp_slowtmr+0x270>)
 800c82e:	488d      	ldr	r0, [pc, #564]	; (800ca64 <tcp_slowtmr+0x274>)
 800c830:	f00a f806 	bl	8016840 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800c834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c836:	7d1b      	ldrb	r3, [r3, #20]
 800c838:	2b01      	cmp	r3, #1
 800c83a:	d106      	bne.n	800c84a <tcp_slowtmr+0x5a>
 800c83c:	4b87      	ldr	r3, [pc, #540]	; (800ca5c <tcp_slowtmr+0x26c>)
 800c83e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800c842:	4989      	ldr	r1, [pc, #548]	; (800ca68 <tcp_slowtmr+0x278>)
 800c844:	4887      	ldr	r0, [pc, #540]	; (800ca64 <tcp_slowtmr+0x274>)
 800c846:	f009 fffb 	bl	8016840 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800c84a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c84c:	7d1b      	ldrb	r3, [r3, #20]
 800c84e:	2b0a      	cmp	r3, #10
 800c850:	d106      	bne.n	800c860 <tcp_slowtmr+0x70>
 800c852:	4b82      	ldr	r3, [pc, #520]	; (800ca5c <tcp_slowtmr+0x26c>)
 800c854:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800c858:	4984      	ldr	r1, [pc, #528]	; (800ca6c <tcp_slowtmr+0x27c>)
 800c85a:	4882      	ldr	r0, [pc, #520]	; (800ca64 <tcp_slowtmr+0x274>)
 800c85c:	f009 fff0 	bl	8016840 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800c860:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c862:	7f9a      	ldrb	r2, [r3, #30]
 800c864:	4b7b      	ldr	r3, [pc, #492]	; (800ca54 <tcp_slowtmr+0x264>)
 800c866:	781b      	ldrb	r3, [r3, #0]
 800c868:	429a      	cmp	r2, r3
 800c86a:	d105      	bne.n	800c878 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800c86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c86e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800c870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c872:	68db      	ldr	r3, [r3, #12]
 800c874:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800c876:	e270      	b.n	800cd5a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800c878:	4b76      	ldr	r3, [pc, #472]	; (800ca54 <tcp_slowtmr+0x264>)
 800c87a:	781a      	ldrb	r2, [r3, #0]
 800c87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87e:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800c880:	2300      	movs	r3, #0
 800c882:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800c886:	2300      	movs	r3, #0
 800c888:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800c88c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c88e:	7d1b      	ldrb	r3, [r3, #20]
 800c890:	2b02      	cmp	r3, #2
 800c892:	d10a      	bne.n	800c8aa <tcp_slowtmr+0xba>
 800c894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c896:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c89a:	2b05      	cmp	r3, #5
 800c89c:	d905      	bls.n	800c8aa <tcp_slowtmr+0xba>
      ++pcb_remove;
 800c89e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8a2:	3301      	adds	r3, #1
 800c8a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c8a8:	e11e      	b.n	800cae8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800c8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ac:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8b0:	2b0b      	cmp	r3, #11
 800c8b2:	d905      	bls.n	800c8c0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800c8b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c8be:	e113      	b.n	800cae8 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800c8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d075      	beq.n	800c9b6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800c8ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d006      	beq.n	800c8e0 <tcp_slowtmr+0xf0>
 800c8d2:	4b62      	ldr	r3, [pc, #392]	; (800ca5c <tcp_slowtmr+0x26c>)
 800c8d4:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800c8d8:	4965      	ldr	r1, [pc, #404]	; (800ca70 <tcp_slowtmr+0x280>)
 800c8da:	4862      	ldr	r0, [pc, #392]	; (800ca64 <tcp_slowtmr+0x274>)
 800c8dc:	f009 ffb0 	bl	8016840 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800c8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d106      	bne.n	800c8f6 <tcp_slowtmr+0x106>
 800c8e8:	4b5c      	ldr	r3, [pc, #368]	; (800ca5c <tcp_slowtmr+0x26c>)
 800c8ea:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800c8ee:	4961      	ldr	r1, [pc, #388]	; (800ca74 <tcp_slowtmr+0x284>)
 800c8f0:	485c      	ldr	r0, [pc, #368]	; (800ca64 <tcp_slowtmr+0x274>)
 800c8f2:	f009 ffa5 	bl	8016840 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800c8f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800c8fc:	2b0b      	cmp	r3, #11
 800c8fe:	d905      	bls.n	800c90c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800c900:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c904:	3301      	adds	r3, #1
 800c906:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800c90a:	e0ed      	b.n	800cae8 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800c90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c912:	3b01      	subs	r3, #1
 800c914:	4a58      	ldr	r2, [pc, #352]	; (800ca78 <tcp_slowtmr+0x288>)
 800c916:	5cd3      	ldrb	r3, [r2, r3]
 800c918:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800c91a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c91c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c920:	7c7a      	ldrb	r2, [r7, #17]
 800c922:	429a      	cmp	r2, r3
 800c924:	d907      	bls.n	800c936 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800c926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c928:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c92c:	3301      	adds	r3, #1
 800c92e:	b2da      	uxtb	r2, r3
 800c930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c932:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800c936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c938:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800c93c:	7c7a      	ldrb	r2, [r7, #17]
 800c93e:	429a      	cmp	r2, r3
 800c940:	f200 80d2 	bhi.w	800cae8 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800c944:	2301      	movs	r3, #1
 800c946:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800c948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d108      	bne.n	800c964 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800c952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c954:	f004 fc2a 	bl	80111ac <tcp_zero_window_probe>
 800c958:	4603      	mov	r3, r0
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d014      	beq.n	800c988 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800c95e:	2300      	movs	r3, #0
 800c960:	623b      	str	r3, [r7, #32]
 800c962:	e011      	b.n	800c988 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800c964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c966:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800c96a:	4619      	mov	r1, r3
 800c96c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c96e:	f003 faef 	bl	800ff50 <tcp_split_unsent_seg>
 800c972:	4603      	mov	r3, r0
 800c974:	2b00      	cmp	r3, #0
 800c976:	d107      	bne.n	800c988 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800c978:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c97a:	f003 fd6f 	bl	801045c <tcp_output>
 800c97e:	4603      	mov	r3, r0
 800c980:	2b00      	cmp	r3, #0
 800c982:	d101      	bne.n	800c988 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800c984:	2300      	movs	r3, #0
 800c986:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800c988:	6a3b      	ldr	r3, [r7, #32]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f000 80ac 	beq.w	800cae8 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800c990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c992:	2200      	movs	r2, #0
 800c994:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800c998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c99a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c99e:	2b06      	cmp	r3, #6
 800c9a0:	f200 80a2 	bhi.w	800cae8 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800c9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800c9aa:	3301      	adds	r3, #1
 800c9ac:	b2da      	uxtb	r2, r3
 800c9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800c9b4:	e098      	b.n	800cae8 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800c9b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9b8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	db0f      	blt.n	800c9e0 <tcp_slowtmr+0x1f0>
 800c9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c9c6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800c9ca:	4293      	cmp	r3, r2
 800c9cc:	d008      	beq.n	800c9e0 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800c9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9d0:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800c9d4:	b29b      	uxth	r3, r3
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	b29b      	uxth	r3, r3
 800c9da:	b21a      	sxth	r2, r3
 800c9dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9de:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800c9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e2:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800c9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9e8:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	db7b      	blt.n	800cae8 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800c9f0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c9f2:	f004 f825 	bl	8010a40 <tcp_rexmit_rto_prepare>
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d007      	beq.n	800ca0c <tcp_slowtmr+0x21c>
 800c9fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d171      	bne.n	800cae8 <tcp_slowtmr+0x2f8>
 800ca04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d06d      	beq.n	800cae8 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800ca0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca0e:	7d1b      	ldrb	r3, [r3, #20]
 800ca10:	2b02      	cmp	r3, #2
 800ca12:	d03a      	beq.n	800ca8a <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800ca14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca16:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca1a:	2b0c      	cmp	r3, #12
 800ca1c:	bf28      	it	cs
 800ca1e:	230c      	movcs	r3, #12
 800ca20:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800ca22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca24:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ca28:	10db      	asrs	r3, r3, #3
 800ca2a:	b21b      	sxth	r3, r3
 800ca2c:	461a      	mov	r2, r3
 800ca2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca30:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ca34:	4413      	add	r3, r2
 800ca36:	7efa      	ldrb	r2, [r7, #27]
 800ca38:	4910      	ldr	r1, [pc, #64]	; (800ca7c <tcp_slowtmr+0x28c>)
 800ca3a:	5c8a      	ldrb	r2, [r1, r2]
 800ca3c:	4093      	lsls	r3, r2
 800ca3e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800ca40:	697b      	ldr	r3, [r7, #20]
 800ca42:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800ca46:	4293      	cmp	r3, r2
 800ca48:	dc1a      	bgt.n	800ca80 <tcp_slowtmr+0x290>
 800ca4a:	697b      	ldr	r3, [r7, #20]
 800ca4c:	b21a      	sxth	r2, r3
 800ca4e:	e019      	b.n	800ca84 <tcp_slowtmr+0x294>
 800ca50:	2000f204 	.word	0x2000f204
 800ca54:	2000f21a 	.word	0x2000f21a
 800ca58:	2000f210 	.word	0x2000f210
 800ca5c:	080182ac 	.word	0x080182ac
 800ca60:	080185f0 	.word	0x080185f0
 800ca64:	080182f0 	.word	0x080182f0
 800ca68:	0801861c 	.word	0x0801861c
 800ca6c:	08018648 	.word	0x08018648
 800ca70:	08018678 	.word	0x08018678
 800ca74:	080186ac 	.word	0x080186ac
 800ca78:	0801a688 	.word	0x0801a688
 800ca7c:	0801a678 	.word	0x0801a678
 800ca80:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800ca84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca86:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800ca8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca8c:	2200      	movs	r2, #0
 800ca8e:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800ca90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca92:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ca96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca98:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ca9c:	4293      	cmp	r3, r2
 800ca9e:	bf28      	it	cs
 800caa0:	4613      	movcs	r3, r2
 800caa2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800caa4:	8a7b      	ldrh	r3, [r7, #18]
 800caa6:	085b      	lsrs	r3, r3, #1
 800caa8:	b29a      	uxth	r2, r3
 800caaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caac:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800cab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800cab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cab8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800caba:	005b      	lsls	r3, r3, #1
 800cabc:	b29b      	uxth	r3, r3
 800cabe:	429a      	cmp	r2, r3
 800cac0:	d206      	bcs.n	800cad0 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800cac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cac4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800cac6:	005b      	lsls	r3, r3, #1
 800cac8:	b29a      	uxth	r2, r3
 800caca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cacc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800cad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad2:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800cad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cad6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800cada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cadc:	2200      	movs	r2, #0
 800cade:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800cae2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cae4:	f004 f81c 	bl	8010b20 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800cae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caea:	7d1b      	ldrb	r3, [r3, #20]
 800caec:	2b06      	cmp	r3, #6
 800caee:	d111      	bne.n	800cb14 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800caf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800caf2:	8b5b      	ldrh	r3, [r3, #26]
 800caf4:	f003 0310 	and.w	r3, r3, #16
 800caf8:	2b00      	cmp	r3, #0
 800cafa:	d00b      	beq.n	800cb14 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cafc:	4b9c      	ldr	r3, [pc, #624]	; (800cd70 <tcp_slowtmr+0x580>)
 800cafe:	681a      	ldr	r2, [r3, #0]
 800cb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb02:	6a1b      	ldr	r3, [r3, #32]
 800cb04:	1ad3      	subs	r3, r2, r3
 800cb06:	2b28      	cmp	r3, #40	; 0x28
 800cb08:	d904      	bls.n	800cb14 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800cb0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb0e:	3301      	adds	r3, #1
 800cb10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb16:	7a5b      	ldrb	r3, [r3, #9]
 800cb18:	f003 0308 	and.w	r3, r3, #8
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d04a      	beq.n	800cbb6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800cb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb22:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800cb24:	2b04      	cmp	r3, #4
 800cb26:	d003      	beq.n	800cb30 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800cb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb2a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800cb2c:	2b07      	cmp	r3, #7
 800cb2e:	d142      	bne.n	800cbb6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb30:	4b8f      	ldr	r3, [pc, #572]	; (800cd70 <tcp_slowtmr+0x580>)
 800cb32:	681a      	ldr	r2, [r3, #0]
 800cb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb36:	6a1b      	ldr	r3, [r3, #32]
 800cb38:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800cb3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb3c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cb40:	4b8c      	ldr	r3, [pc, #560]	; (800cd74 <tcp_slowtmr+0x584>)
 800cb42:	440b      	add	r3, r1
 800cb44:	498c      	ldr	r1, [pc, #560]	; (800cd78 <tcp_slowtmr+0x588>)
 800cb46:	fba1 1303 	umull	r1, r3, r1, r3
 800cb4a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb4c:	429a      	cmp	r2, r3
 800cb4e:	d90a      	bls.n	800cb66 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800cb50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cb54:	3301      	adds	r3, #1
 800cb56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800cb5a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cb5e:	3301      	adds	r3, #1
 800cb60:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800cb64:	e027      	b.n	800cbb6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb66:	4b82      	ldr	r3, [pc, #520]	; (800cd70 <tcp_slowtmr+0x580>)
 800cb68:	681a      	ldr	r2, [r3, #0]
 800cb6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb6c:	6a1b      	ldr	r3, [r3, #32]
 800cb6e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800cb70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb72:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800cb76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb78:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cb7c:	4618      	mov	r0, r3
 800cb7e:	4b7f      	ldr	r3, [pc, #508]	; (800cd7c <tcp_slowtmr+0x58c>)
 800cb80:	fb00 f303 	mul.w	r3, r0, r3
 800cb84:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800cb86:	497c      	ldr	r1, [pc, #496]	; (800cd78 <tcp_slowtmr+0x588>)
 800cb88:	fba1 1303 	umull	r1, r3, r1, r3
 800cb8c:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cb8e:	429a      	cmp	r2, r3
 800cb90:	d911      	bls.n	800cbb6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800cb92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cb94:	f004 faca 	bl	801112c <tcp_keepalive>
 800cb98:	4603      	mov	r3, r0
 800cb9a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800cb9e:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d107      	bne.n	800cbb6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800cba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cba8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800cbac:	3301      	adds	r3, #1
 800cbae:	b2da      	uxtb	r2, r3
 800cbb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800cbb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d011      	beq.n	800cbe2 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800cbbe:	4b6c      	ldr	r3, [pc, #432]	; (800cd70 <tcp_slowtmr+0x580>)
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbc4:	6a1b      	ldr	r3, [r3, #32]
 800cbc6:	1ad2      	subs	r2, r2, r3
 800cbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbca:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800cbce:	4619      	mov	r1, r3
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	005b      	lsls	r3, r3, #1
 800cbd4:	440b      	add	r3, r1
 800cbd6:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d302      	bcc.n	800cbe2 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800cbdc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cbde:	f000 fddd 	bl	800d79c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800cbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe4:	7d1b      	ldrb	r3, [r3, #20]
 800cbe6:	2b03      	cmp	r3, #3
 800cbe8:	d10b      	bne.n	800cc02 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800cbea:	4b61      	ldr	r3, [pc, #388]	; (800cd70 <tcp_slowtmr+0x580>)
 800cbec:	681a      	ldr	r2, [r3, #0]
 800cbee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf0:	6a1b      	ldr	r3, [r3, #32]
 800cbf2:	1ad3      	subs	r3, r2, r3
 800cbf4:	2b28      	cmp	r3, #40	; 0x28
 800cbf6:	d904      	bls.n	800cc02 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800cbf8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cbfc:	3301      	adds	r3, #1
 800cbfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800cc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc04:	7d1b      	ldrb	r3, [r3, #20]
 800cc06:	2b09      	cmp	r3, #9
 800cc08:	d10b      	bne.n	800cc22 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cc0a:	4b59      	ldr	r3, [pc, #356]	; (800cd70 <tcp_slowtmr+0x580>)
 800cc0c:	681a      	ldr	r2, [r3, #0]
 800cc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc10:	6a1b      	ldr	r3, [r3, #32]
 800cc12:	1ad3      	subs	r3, r2, r3
 800cc14:	2bf0      	cmp	r3, #240	; 0xf0
 800cc16:	d904      	bls.n	800cc22 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800cc18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc1c:	3301      	adds	r3, #1
 800cc1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cc22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d060      	beq.n	800ccec <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800cc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cc30:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800cc32:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cc34:	f000 fbfe 	bl	800d434 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800cc38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d010      	beq.n	800cc60 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800cc3e:	4b50      	ldr	r3, [pc, #320]	; (800cd80 <tcp_slowtmr+0x590>)
 800cc40:	681b      	ldr	r3, [r3, #0]
 800cc42:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d106      	bne.n	800cc56 <tcp_slowtmr+0x466>
 800cc48:	4b4e      	ldr	r3, [pc, #312]	; (800cd84 <tcp_slowtmr+0x594>)
 800cc4a:	f240 526d 	movw	r2, #1389	; 0x56d
 800cc4e:	494e      	ldr	r1, [pc, #312]	; (800cd88 <tcp_slowtmr+0x598>)
 800cc50:	484e      	ldr	r0, [pc, #312]	; (800cd8c <tcp_slowtmr+0x59c>)
 800cc52:	f009 fdf5 	bl	8016840 <iprintf>
        prev->next = pcb->next;
 800cc56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc58:	68da      	ldr	r2, [r3, #12]
 800cc5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc5c:	60da      	str	r2, [r3, #12]
 800cc5e:	e00f      	b.n	800cc80 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800cc60:	4b47      	ldr	r3, [pc, #284]	; (800cd80 <tcp_slowtmr+0x590>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d006      	beq.n	800cc78 <tcp_slowtmr+0x488>
 800cc6a:	4b46      	ldr	r3, [pc, #280]	; (800cd84 <tcp_slowtmr+0x594>)
 800cc6c:	f240 5271 	movw	r2, #1393	; 0x571
 800cc70:	4947      	ldr	r1, [pc, #284]	; (800cd90 <tcp_slowtmr+0x5a0>)
 800cc72:	4846      	ldr	r0, [pc, #280]	; (800cd8c <tcp_slowtmr+0x59c>)
 800cc74:	f009 fde4 	bl	8016840 <iprintf>
        tcp_active_pcbs = pcb->next;
 800cc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc7a:	68db      	ldr	r3, [r3, #12]
 800cc7c:	4a40      	ldr	r2, [pc, #256]	; (800cd80 <tcp_slowtmr+0x590>)
 800cc7e:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800cc80:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	d013      	beq.n	800ccb0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8a:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cc8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc8e:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cc90:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800cc92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc94:	3304      	adds	r3, #4
 800cc96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc98:	8ad2      	ldrh	r2, [r2, #22]
 800cc9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800cc9c:	8b09      	ldrh	r1, [r1, #24]
 800cc9e:	9102      	str	r1, [sp, #8]
 800cca0:	9201      	str	r2, [sp, #4]
 800cca2:	9300      	str	r3, [sp, #0]
 800cca4:	462b      	mov	r3, r5
 800cca6:	4622      	mov	r2, r4
 800cca8:	4601      	mov	r1, r0
 800ccaa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ccac:	f004 f98a 	bl	8010fc4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800ccb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb2:	691b      	ldr	r3, [r3, #16]
 800ccb4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800ccb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccb8:	7d1b      	ldrb	r3, [r3, #20]
 800ccba:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800ccbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccbe:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800ccc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccc2:	68db      	ldr	r3, [r3, #12]
 800ccc4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ccc6:	6838      	ldr	r0, [r7, #0]
 800ccc8:	f7ff f9f4 	bl	800c0b4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800cccc:	4b31      	ldr	r3, [pc, #196]	; (800cd94 <tcp_slowtmr+0x5a4>)
 800ccce:	2200      	movs	r2, #0
 800ccd0:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d004      	beq.n	800cce2 <tcp_slowtmr+0x4f2>
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	f06f 010c 	mvn.w	r1, #12
 800ccde:	68b8      	ldr	r0, [r7, #8]
 800cce0:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800cce2:	4b2c      	ldr	r3, [pc, #176]	; (800cd94 <tcp_slowtmr+0x5a4>)
 800cce4:	781b      	ldrb	r3, [r3, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d037      	beq.n	800cd5a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800ccea:	e592      	b.n	800c812 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800ccec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccee:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ccf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccf2:	68db      	ldr	r3, [r3, #12]
 800ccf4:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800ccf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf8:	7f1b      	ldrb	r3, [r3, #28]
 800ccfa:	3301      	adds	r3, #1
 800ccfc:	b2da      	uxtb	r2, r3
 800ccfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd00:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800cd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd04:	7f1a      	ldrb	r2, [r3, #28]
 800cd06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd08:	7f5b      	ldrb	r3, [r3, #29]
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d325      	bcc.n	800cd5a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800cd0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd10:	2200      	movs	r2, #0
 800cd12:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800cd14:	4b1f      	ldr	r3, [pc, #124]	; (800cd94 <tcp_slowtmr+0x5a4>)
 800cd16:	2200      	movs	r2, #0
 800cd18:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800cd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d00b      	beq.n	800cd3c <tcp_slowtmr+0x54c>
 800cd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cd2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cd2c:	6912      	ldr	r2, [r2, #16]
 800cd2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cd30:	4610      	mov	r0, r2
 800cd32:	4798      	blx	r3
 800cd34:	4603      	mov	r3, r0
 800cd36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800cd3a:	e002      	b.n	800cd42 <tcp_slowtmr+0x552>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800cd42:	4b14      	ldr	r3, [pc, #80]	; (800cd94 <tcp_slowtmr+0x5a4>)
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	2b00      	cmp	r3, #0
 800cd48:	d000      	beq.n	800cd4c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800cd4a:	e562      	b.n	800c812 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800cd4c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	d102      	bne.n	800cd5a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800cd54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cd56:	f003 fb81 	bl	801045c <tcp_output>
  while (pcb != NULL) {
 800cd5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	f47f ad5e 	bne.w	800c81e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800cd62:	2300      	movs	r3, #0
 800cd64:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800cd66:	4b0c      	ldr	r3, [pc, #48]	; (800cd98 <tcp_slowtmr+0x5a8>)
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800cd6c:	e069      	b.n	800ce42 <tcp_slowtmr+0x652>
 800cd6e:	bf00      	nop
 800cd70:	2000f204 	.word	0x2000f204
 800cd74:	000a4cb8 	.word	0x000a4cb8
 800cd78:	10624dd3 	.word	0x10624dd3
 800cd7c:	000124f8 	.word	0x000124f8
 800cd80:	2000f210 	.word	0x2000f210
 800cd84:	080182ac 	.word	0x080182ac
 800cd88:	080186e4 	.word	0x080186e4
 800cd8c:	080182f0 	.word	0x080182f0
 800cd90:	08018710 	.word	0x08018710
 800cd94:	2000f218 	.word	0x2000f218
 800cd98:	2000f214 	.word	0x2000f214
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800cd9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd9e:	7d1b      	ldrb	r3, [r3, #20]
 800cda0:	2b0a      	cmp	r3, #10
 800cda2:	d006      	beq.n	800cdb2 <tcp_slowtmr+0x5c2>
 800cda4:	4b2b      	ldr	r3, [pc, #172]	; (800ce54 <tcp_slowtmr+0x664>)
 800cda6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800cdaa:	492b      	ldr	r1, [pc, #172]	; (800ce58 <tcp_slowtmr+0x668>)
 800cdac:	482b      	ldr	r0, [pc, #172]	; (800ce5c <tcp_slowtmr+0x66c>)
 800cdae:	f009 fd47 	bl	8016840 <iprintf>
    pcb_remove = 0;
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800cdb8:	4b29      	ldr	r3, [pc, #164]	; (800ce60 <tcp_slowtmr+0x670>)
 800cdba:	681a      	ldr	r2, [r3, #0]
 800cdbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdbe:	6a1b      	ldr	r3, [r3, #32]
 800cdc0:	1ad3      	subs	r3, r2, r3
 800cdc2:	2bf0      	cmp	r3, #240	; 0xf0
 800cdc4:	d904      	bls.n	800cdd0 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800cdc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdca:	3301      	adds	r3, #1
 800cdcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800cdd0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	d02f      	beq.n	800ce38 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800cdd8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cdda:	f000 fb2b 	bl	800d434 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800cdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d010      	beq.n	800ce06 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800cde4:	4b1f      	ldr	r3, [pc, #124]	; (800ce64 <tcp_slowtmr+0x674>)
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d106      	bne.n	800cdfc <tcp_slowtmr+0x60c>
 800cdee:	4b19      	ldr	r3, [pc, #100]	; (800ce54 <tcp_slowtmr+0x664>)
 800cdf0:	f240 52af 	movw	r2, #1455	; 0x5af
 800cdf4:	491c      	ldr	r1, [pc, #112]	; (800ce68 <tcp_slowtmr+0x678>)
 800cdf6:	4819      	ldr	r0, [pc, #100]	; (800ce5c <tcp_slowtmr+0x66c>)
 800cdf8:	f009 fd22 	bl	8016840 <iprintf>
        prev->next = pcb->next;
 800cdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfe:	68da      	ldr	r2, [r3, #12]
 800ce00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce02:	60da      	str	r2, [r3, #12]
 800ce04:	e00f      	b.n	800ce26 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800ce06:	4b17      	ldr	r3, [pc, #92]	; (800ce64 <tcp_slowtmr+0x674>)
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ce0c:	429a      	cmp	r2, r3
 800ce0e:	d006      	beq.n	800ce1e <tcp_slowtmr+0x62e>
 800ce10:	4b10      	ldr	r3, [pc, #64]	; (800ce54 <tcp_slowtmr+0x664>)
 800ce12:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800ce16:	4915      	ldr	r1, [pc, #84]	; (800ce6c <tcp_slowtmr+0x67c>)
 800ce18:	4810      	ldr	r0, [pc, #64]	; (800ce5c <tcp_slowtmr+0x66c>)
 800ce1a:	f009 fd11 	bl	8016840 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800ce1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce20:	68db      	ldr	r3, [r3, #12]
 800ce22:	4a10      	ldr	r2, [pc, #64]	; (800ce64 <tcp_slowtmr+0x674>)
 800ce24:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800ce26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce28:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800ce2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2c:	68db      	ldr	r3, [r3, #12]
 800ce2e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800ce30:	69f8      	ldr	r0, [r7, #28]
 800ce32:	f7ff f93f 	bl	800c0b4 <tcp_free>
 800ce36:	e004      	b.n	800ce42 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800ce38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800ce3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce3e:	68db      	ldr	r3, [r3, #12]
 800ce40:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800ce42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce44:	2b00      	cmp	r3, #0
 800ce46:	d1a9      	bne.n	800cd9c <tcp_slowtmr+0x5ac>
    }
  }
}
 800ce48:	bf00      	nop
 800ce4a:	bf00      	nop
 800ce4c:	3730      	adds	r7, #48	; 0x30
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bdb0      	pop	{r4, r5, r7, pc}
 800ce52:	bf00      	nop
 800ce54:	080182ac 	.word	0x080182ac
 800ce58:	0801873c 	.word	0x0801873c
 800ce5c:	080182f0 	.word	0x080182f0
 800ce60:	2000f204 	.word	0x2000f204
 800ce64:	2000f214 	.word	0x2000f214
 800ce68:	0801876c 	.word	0x0801876c
 800ce6c:	08018794 	.word	0x08018794

0800ce70 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ce70:	b580      	push	{r7, lr}
 800ce72:	b082      	sub	sp, #8
 800ce74:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ce76:	4b2d      	ldr	r3, [pc, #180]	; (800cf2c <tcp_fasttmr+0xbc>)
 800ce78:	781b      	ldrb	r3, [r3, #0]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	b2da      	uxtb	r2, r3
 800ce7e:	4b2b      	ldr	r3, [pc, #172]	; (800cf2c <tcp_fasttmr+0xbc>)
 800ce80:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ce82:	4b2b      	ldr	r3, [pc, #172]	; (800cf30 <tcp_fasttmr+0xc0>)
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ce88:	e048      	b.n	800cf1c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	7f9a      	ldrb	r2, [r3, #30]
 800ce8e:	4b27      	ldr	r3, [pc, #156]	; (800cf2c <tcp_fasttmr+0xbc>)
 800ce90:	781b      	ldrb	r3, [r3, #0]
 800ce92:	429a      	cmp	r2, r3
 800ce94:	d03f      	beq.n	800cf16 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ce96:	4b25      	ldr	r3, [pc, #148]	; (800cf2c <tcp_fasttmr+0xbc>)
 800ce98:	781a      	ldrb	r2, [r3, #0]
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	8b5b      	ldrh	r3, [r3, #26]
 800cea2:	f003 0301 	and.w	r3, r3, #1
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d010      	beq.n	800cecc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	8b5b      	ldrh	r3, [r3, #26]
 800ceae:	f043 0302 	orr.w	r3, r3, #2
 800ceb2:	b29a      	uxth	r2, r3
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ceb8:	6878      	ldr	r0, [r7, #4]
 800ceba:	f003 facf 	bl	801045c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	8b5b      	ldrh	r3, [r3, #26]
 800cec2:	f023 0303 	bic.w	r3, r3, #3
 800cec6:	b29a      	uxth	r2, r3
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	8b5b      	ldrh	r3, [r3, #26]
 800ced0:	f003 0308 	and.w	r3, r3, #8
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d009      	beq.n	800ceec <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	8b5b      	ldrh	r3, [r3, #26]
 800cedc:	f023 0308 	bic.w	r3, r3, #8
 800cee0:	b29a      	uxth	r2, r3
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800cee6:	6878      	ldr	r0, [r7, #4]
 800cee8:	f7ff fa78 	bl	800c3dc <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	68db      	ldr	r3, [r3, #12]
 800cef0:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d00a      	beq.n	800cf10 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800cefa:	4b0e      	ldr	r3, [pc, #56]	; (800cf34 <tcp_fasttmr+0xc4>)
 800cefc:	2200      	movs	r2, #0
 800cefe:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800cf00:	6878      	ldr	r0, [r7, #4]
 800cf02:	f000 f819 	bl	800cf38 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800cf06:	4b0b      	ldr	r3, [pc, #44]	; (800cf34 <tcp_fasttmr+0xc4>)
 800cf08:	781b      	ldrb	r3, [r3, #0]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d000      	beq.n	800cf10 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800cf0e:	e7b8      	b.n	800ce82 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	607b      	str	r3, [r7, #4]
 800cf14:	e002      	b.n	800cf1c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800cf16:	687b      	ldr	r3, [r7, #4]
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d1b3      	bne.n	800ce8a <tcp_fasttmr+0x1a>
    }
  }
}
 800cf22:	bf00      	nop
 800cf24:	bf00      	nop
 800cf26:	3708      	adds	r7, #8
 800cf28:	46bd      	mov	sp, r7
 800cf2a:	bd80      	pop	{r7, pc}
 800cf2c:	2000f21a 	.word	0x2000f21a
 800cf30:	2000f210 	.word	0x2000f210
 800cf34:	2000f218 	.word	0x2000f218

0800cf38 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800cf38:	b590      	push	{r4, r7, lr}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	2b00      	cmp	r3, #0
 800cf44:	d109      	bne.n	800cf5a <tcp_process_refused_data+0x22>
 800cf46:	4b37      	ldr	r3, [pc, #220]	; (800d024 <tcp_process_refused_data+0xec>)
 800cf48:	f240 6209 	movw	r2, #1545	; 0x609
 800cf4c:	4936      	ldr	r1, [pc, #216]	; (800d028 <tcp_process_refused_data+0xf0>)
 800cf4e:	4837      	ldr	r0, [pc, #220]	; (800d02c <tcp_process_refused_data+0xf4>)
 800cf50:	f009 fc76 	bl	8016840 <iprintf>
 800cf54:	f06f 030f 	mvn.w	r3, #15
 800cf58:	e060      	b.n	800d01c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf5e:	7b5b      	ldrb	r3, [r3, #13]
 800cf60:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cf66:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	2200      	movs	r2, #0
 800cf6c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00b      	beq.n	800cf90 <tcp_process_refused_data+0x58>
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	6918      	ldr	r0, [r3, #16]
 800cf82:	2300      	movs	r3, #0
 800cf84:	68ba      	ldr	r2, [r7, #8]
 800cf86:	6879      	ldr	r1, [r7, #4]
 800cf88:	47a0      	blx	r4
 800cf8a:	4603      	mov	r3, r0
 800cf8c:	73fb      	strb	r3, [r7, #15]
 800cf8e:	e007      	b.n	800cfa0 <tcp_process_refused_data+0x68>
 800cf90:	2300      	movs	r3, #0
 800cf92:	68ba      	ldr	r2, [r7, #8]
 800cf94:	6879      	ldr	r1, [r7, #4]
 800cf96:	2000      	movs	r0, #0
 800cf98:	f000 f8a4 	bl	800d0e4 <tcp_recv_null>
 800cf9c:	4603      	mov	r3, r0
 800cf9e:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cfa0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d12a      	bne.n	800cffe <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800cfa8:	7bbb      	ldrb	r3, [r7, #14]
 800cfaa:	f003 0320 	and.w	r3, r3, #32
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d033      	beq.n	800d01a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfb6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cfba:	d005      	beq.n	800cfc8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cfc0:	3301      	adds	r3, #1
 800cfc2:	b29a      	uxth	r2, r3
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d00b      	beq.n	800cfea <tcp_process_refused_data+0xb2>
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	6918      	ldr	r0, [r3, #16]
 800cfdc:	2300      	movs	r3, #0
 800cfde:	2200      	movs	r2, #0
 800cfe0:	6879      	ldr	r1, [r7, #4]
 800cfe2:	47a0      	blx	r4
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	73fb      	strb	r3, [r7, #15]
 800cfe8:	e001      	b.n	800cfee <tcp_process_refused_data+0xb6>
 800cfea:	2300      	movs	r3, #0
 800cfec:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800cfee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cff2:	f113 0f0d 	cmn.w	r3, #13
 800cff6:	d110      	bne.n	800d01a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800cff8:	f06f 030c 	mvn.w	r3, #12
 800cffc:	e00e      	b.n	800d01c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800cffe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d002:	f113 0f0d 	cmn.w	r3, #13
 800d006:	d102      	bne.n	800d00e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800d008:	f06f 030c 	mvn.w	r3, #12
 800d00c:	e006      	b.n	800d01c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800d00e:	687b      	ldr	r3, [r7, #4]
 800d010:	68ba      	ldr	r2, [r7, #8]
 800d012:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800d014:	f06f 0304 	mvn.w	r3, #4
 800d018:	e000      	b.n	800d01c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800d01a:	2300      	movs	r3, #0
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3714      	adds	r7, #20
 800d020:	46bd      	mov	sp, r7
 800d022:	bd90      	pop	{r4, r7, pc}
 800d024:	080182ac 	.word	0x080182ac
 800d028:	080187bc 	.word	0x080187bc
 800d02c:	080182f0 	.word	0x080182f0

0800d030 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800d030:	b580      	push	{r7, lr}
 800d032:	b084      	sub	sp, #16
 800d034:	af00      	add	r7, sp, #0
 800d036:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800d038:	e007      	b.n	800d04a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800d040:	6878      	ldr	r0, [r7, #4]
 800d042:	f000 f80a 	bl	800d05a <tcp_seg_free>
    seg = next;
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	d1f4      	bne.n	800d03a <tcp_segs_free+0xa>
  }
}
 800d050:	bf00      	nop
 800d052:	bf00      	nop
 800d054:	3710      	adds	r7, #16
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}

0800d05a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800d05a:	b580      	push	{r7, lr}
 800d05c:	b082      	sub	sp, #8
 800d05e:	af00      	add	r7, sp, #0
 800d060:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d00c      	beq.n	800d082 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	685b      	ldr	r3, [r3, #4]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d004      	beq.n	800d07a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	685b      	ldr	r3, [r3, #4]
 800d074:	4618      	mov	r0, r3
 800d076:	f7fe fd61 	bl	800bb3c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800d07a:	6879      	ldr	r1, [r7, #4]
 800d07c:	2003      	movs	r0, #3
 800d07e:	f7fd fead 	bl	800addc <memp_free>
  }
}
 800d082:	bf00      	nop
 800d084:	3708      	adds	r7, #8
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
	...

0800d08c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800d08c:	b580      	push	{r7, lr}
 800d08e:	b084      	sub	sp, #16
 800d090:	af00      	add	r7, sp, #0
 800d092:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2b00      	cmp	r3, #0
 800d098:	d106      	bne.n	800d0a8 <tcp_seg_copy+0x1c>
 800d09a:	4b0f      	ldr	r3, [pc, #60]	; (800d0d8 <tcp_seg_copy+0x4c>)
 800d09c:	f240 6282 	movw	r2, #1666	; 0x682
 800d0a0:	490e      	ldr	r1, [pc, #56]	; (800d0dc <tcp_seg_copy+0x50>)
 800d0a2:	480f      	ldr	r0, [pc, #60]	; (800d0e0 <tcp_seg_copy+0x54>)
 800d0a4:	f009 fbcc 	bl	8016840 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800d0a8:	2003      	movs	r0, #3
 800d0aa:	f7fd fe21 	bl	800acf0 <memp_malloc>
 800d0ae:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d101      	bne.n	800d0ba <tcp_seg_copy+0x2e>
    return NULL;
 800d0b6:	2300      	movs	r3, #0
 800d0b8:	e00a      	b.n	800d0d0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800d0ba:	2210      	movs	r2, #16
 800d0bc:	6879      	ldr	r1, [r7, #4]
 800d0be:	68f8      	ldr	r0, [r7, #12]
 800d0c0:	f009 fb13 	bl	80166ea <memcpy>
  pbuf_ref(cseg->p);
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	685b      	ldr	r3, [r3, #4]
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7fe fddd 	bl	800bc88 <pbuf_ref>
  return cseg;
 800d0ce:	68fb      	ldr	r3, [r7, #12]
}
 800d0d0:	4618      	mov	r0, r3
 800d0d2:	3710      	adds	r7, #16
 800d0d4:	46bd      	mov	sp, r7
 800d0d6:	bd80      	pop	{r7, pc}
 800d0d8:	080182ac 	.word	0x080182ac
 800d0dc:	08018800 	.word	0x08018800
 800d0e0:	080182f0 	.word	0x080182f0

0800d0e4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800d0e4:	b580      	push	{r7, lr}
 800d0e6:	b084      	sub	sp, #16
 800d0e8:	af00      	add	r7, sp, #0
 800d0ea:	60f8      	str	r0, [r7, #12]
 800d0ec:	60b9      	str	r1, [r7, #8]
 800d0ee:	607a      	str	r2, [r7, #4]
 800d0f0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800d0f2:	68bb      	ldr	r3, [r7, #8]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d109      	bne.n	800d10c <tcp_recv_null+0x28>
 800d0f8:	4b12      	ldr	r3, [pc, #72]	; (800d144 <tcp_recv_null+0x60>)
 800d0fa:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800d0fe:	4912      	ldr	r1, [pc, #72]	; (800d148 <tcp_recv_null+0x64>)
 800d100:	4812      	ldr	r0, [pc, #72]	; (800d14c <tcp_recv_null+0x68>)
 800d102:	f009 fb9d 	bl	8016840 <iprintf>
 800d106:	f06f 030f 	mvn.w	r3, #15
 800d10a:	e016      	b.n	800d13a <tcp_recv_null+0x56>

  if (p != NULL) {
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d009      	beq.n	800d126 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	891b      	ldrh	r3, [r3, #8]
 800d116:	4619      	mov	r1, r3
 800d118:	68b8      	ldr	r0, [r7, #8]
 800d11a:	f7ff fb19 	bl	800c750 <tcp_recved>
    pbuf_free(p);
 800d11e:	6878      	ldr	r0, [r7, #4]
 800d120:	f7fe fd0c 	bl	800bb3c <pbuf_free>
 800d124:	e008      	b.n	800d138 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800d126:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d104      	bne.n	800d138 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800d12e:	68b8      	ldr	r0, [r7, #8]
 800d130:	f7ff f9be 	bl	800c4b0 <tcp_close>
 800d134:	4603      	mov	r3, r0
 800d136:	e000      	b.n	800d13a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800d138:	2300      	movs	r3, #0
}
 800d13a:	4618      	mov	r0, r3
 800d13c:	3710      	adds	r7, #16
 800d13e:	46bd      	mov	sp, r7
 800d140:	bd80      	pop	{r7, pc}
 800d142:	bf00      	nop
 800d144:	080182ac 	.word	0x080182ac
 800d148:	0801881c 	.word	0x0801881c
 800d14c:	080182f0 	.word	0x080182f0

0800d150 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800d150:	b580      	push	{r7, lr}
 800d152:	b086      	sub	sp, #24
 800d154:	af00      	add	r7, sp, #0
 800d156:	4603      	mov	r3, r0
 800d158:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800d15a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800d15e:	2b00      	cmp	r3, #0
 800d160:	db01      	blt.n	800d166 <tcp_kill_prio+0x16>
 800d162:	79fb      	ldrb	r3, [r7, #7]
 800d164:	e000      	b.n	800d168 <tcp_kill_prio+0x18>
 800d166:	237f      	movs	r3, #127	; 0x7f
 800d168:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800d16a:	7afb      	ldrb	r3, [r7, #11]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d034      	beq.n	800d1da <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800d170:	7afb      	ldrb	r3, [r7, #11]
 800d172:	3b01      	subs	r3, #1
 800d174:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800d176:	2300      	movs	r3, #0
 800d178:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d17a:	2300      	movs	r3, #0
 800d17c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d17e:	4b19      	ldr	r3, [pc, #100]	; (800d1e4 <tcp_kill_prio+0x94>)
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	617b      	str	r3, [r7, #20]
 800d184:	e01f      	b.n	800d1c6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800d186:	697b      	ldr	r3, [r7, #20]
 800d188:	7d5b      	ldrb	r3, [r3, #21]
 800d18a:	7afa      	ldrb	r2, [r7, #11]
 800d18c:	429a      	cmp	r2, r3
 800d18e:	d80c      	bhi.n	800d1aa <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d190:	697b      	ldr	r3, [r7, #20]
 800d192:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800d194:	7afa      	ldrb	r2, [r7, #11]
 800d196:	429a      	cmp	r2, r3
 800d198:	d112      	bne.n	800d1c0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800d19a:	4b13      	ldr	r3, [pc, #76]	; (800d1e8 <tcp_kill_prio+0x98>)
 800d19c:	681a      	ldr	r2, [r3, #0]
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	6a1b      	ldr	r3, [r3, #32]
 800d1a2:	1ad3      	subs	r3, r2, r3
 800d1a4:	68fa      	ldr	r2, [r7, #12]
 800d1a6:	429a      	cmp	r2, r3
 800d1a8:	d80a      	bhi.n	800d1c0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800d1aa:	4b0f      	ldr	r3, [pc, #60]	; (800d1e8 <tcp_kill_prio+0x98>)
 800d1ac:	681a      	ldr	r2, [r3, #0]
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	6a1b      	ldr	r3, [r3, #32]
 800d1b2:	1ad3      	subs	r3, r2, r3
 800d1b4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800d1b6:	697b      	ldr	r3, [r7, #20]
 800d1b8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	7d5b      	ldrb	r3, [r3, #21]
 800d1be:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d1c0:	697b      	ldr	r3, [r7, #20]
 800d1c2:	68db      	ldr	r3, [r3, #12]
 800d1c4:	617b      	str	r3, [r7, #20]
 800d1c6:	697b      	ldr	r3, [r7, #20]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d1dc      	bne.n	800d186 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800d1cc:	693b      	ldr	r3, [r7, #16]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d004      	beq.n	800d1dc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d1d2:	6938      	ldr	r0, [r7, #16]
 800d1d4:	f7ff fa56 	bl	800c684 <tcp_abort>
 800d1d8:	e000      	b.n	800d1dc <tcp_kill_prio+0x8c>
    return;
 800d1da:	bf00      	nop
  }
}
 800d1dc:	3718      	adds	r7, #24
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	2000f210 	.word	0x2000f210
 800d1e8:	2000f204 	.word	0x2000f204

0800d1ec <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800d1ec:	b580      	push	{r7, lr}
 800d1ee:	b086      	sub	sp, #24
 800d1f0:	af00      	add	r7, sp, #0
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800d1f6:	79fb      	ldrb	r3, [r7, #7]
 800d1f8:	2b08      	cmp	r3, #8
 800d1fa:	d009      	beq.n	800d210 <tcp_kill_state+0x24>
 800d1fc:	79fb      	ldrb	r3, [r7, #7]
 800d1fe:	2b09      	cmp	r3, #9
 800d200:	d006      	beq.n	800d210 <tcp_kill_state+0x24>
 800d202:	4b1a      	ldr	r3, [pc, #104]	; (800d26c <tcp_kill_state+0x80>)
 800d204:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800d208:	4919      	ldr	r1, [pc, #100]	; (800d270 <tcp_kill_state+0x84>)
 800d20a:	481a      	ldr	r0, [pc, #104]	; (800d274 <tcp_kill_state+0x88>)
 800d20c:	f009 fb18 	bl	8016840 <iprintf>

  inactivity = 0;
 800d210:	2300      	movs	r3, #0
 800d212:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800d214:	2300      	movs	r3, #0
 800d216:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d218:	4b17      	ldr	r3, [pc, #92]	; (800d278 <tcp_kill_state+0x8c>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	617b      	str	r3, [r7, #20]
 800d21e:	e017      	b.n	800d250 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800d220:	697b      	ldr	r3, [r7, #20]
 800d222:	7d1b      	ldrb	r3, [r3, #20]
 800d224:	79fa      	ldrb	r2, [r7, #7]
 800d226:	429a      	cmp	r2, r3
 800d228:	d10f      	bne.n	800d24a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d22a:	4b14      	ldr	r3, [pc, #80]	; (800d27c <tcp_kill_state+0x90>)
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	6a1b      	ldr	r3, [r3, #32]
 800d232:	1ad3      	subs	r3, r2, r3
 800d234:	68fa      	ldr	r2, [r7, #12]
 800d236:	429a      	cmp	r2, r3
 800d238:	d807      	bhi.n	800d24a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800d23a:	4b10      	ldr	r3, [pc, #64]	; (800d27c <tcp_kill_state+0x90>)
 800d23c:	681a      	ldr	r2, [r3, #0]
 800d23e:	697b      	ldr	r3, [r7, #20]
 800d240:	6a1b      	ldr	r3, [r3, #32]
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800d246:	697b      	ldr	r3, [r7, #20]
 800d248:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d24a:	697b      	ldr	r3, [r7, #20]
 800d24c:	68db      	ldr	r3, [r3, #12]
 800d24e:	617b      	str	r3, [r7, #20]
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d1e4      	bne.n	800d220 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800d256:	693b      	ldr	r3, [r7, #16]
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d003      	beq.n	800d264 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800d25c:	2100      	movs	r1, #0
 800d25e:	6938      	ldr	r0, [r7, #16]
 800d260:	f7ff f952 	bl	800c508 <tcp_abandon>
  }
}
 800d264:	bf00      	nop
 800d266:	3718      	adds	r7, #24
 800d268:	46bd      	mov	sp, r7
 800d26a:	bd80      	pop	{r7, pc}
 800d26c:	080182ac 	.word	0x080182ac
 800d270:	08018838 	.word	0x08018838
 800d274:	080182f0 	.word	0x080182f0
 800d278:	2000f210 	.word	0x2000f210
 800d27c:	2000f204 	.word	0x2000f204

0800d280 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b084      	sub	sp, #16
 800d284:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800d286:	2300      	movs	r3, #0
 800d288:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800d28a:	2300      	movs	r3, #0
 800d28c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d28e:	4b12      	ldr	r3, [pc, #72]	; (800d2d8 <tcp_kill_timewait+0x58>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	60fb      	str	r3, [r7, #12]
 800d294:	e012      	b.n	800d2bc <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800d296:	4b11      	ldr	r3, [pc, #68]	; (800d2dc <tcp_kill_timewait+0x5c>)
 800d298:	681a      	ldr	r2, [r3, #0]
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	6a1b      	ldr	r3, [r3, #32]
 800d29e:	1ad3      	subs	r3, r2, r3
 800d2a0:	687a      	ldr	r2, [r7, #4]
 800d2a2:	429a      	cmp	r2, r3
 800d2a4:	d807      	bhi.n	800d2b6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800d2a6:	4b0d      	ldr	r3, [pc, #52]	; (800d2dc <tcp_kill_timewait+0x5c>)
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	6a1b      	ldr	r3, [r3, #32]
 800d2ae:	1ad3      	subs	r3, r2, r3
 800d2b0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	68db      	ldr	r3, [r3, #12]
 800d2ba:	60fb      	str	r3, [r7, #12]
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d1e9      	bne.n	800d296 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d002      	beq.n	800d2ce <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800d2c8:	68b8      	ldr	r0, [r7, #8]
 800d2ca:	f7ff f9db 	bl	800c684 <tcp_abort>
  }
}
 800d2ce:	bf00      	nop
 800d2d0:	3710      	adds	r7, #16
 800d2d2:	46bd      	mov	sp, r7
 800d2d4:	bd80      	pop	{r7, pc}
 800d2d6:	bf00      	nop
 800d2d8:	2000f214 	.word	0x2000f214
 800d2dc:	2000f204 	.word	0x2000f204

0800d2e0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800d2e0:	b580      	push	{r7, lr}
 800d2e2:	b082      	sub	sp, #8
 800d2e4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800d2e6:	4b10      	ldr	r3, [pc, #64]	; (800d328 <tcp_handle_closepend+0x48>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800d2ec:	e014      	b.n	800d318 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	68db      	ldr	r3, [r3, #12]
 800d2f2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	8b5b      	ldrh	r3, [r3, #26]
 800d2f8:	f003 0308 	and.w	r3, r3, #8
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d009      	beq.n	800d314 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800d300:	687b      	ldr	r3, [r7, #4]
 800d302:	8b5b      	ldrh	r3, [r3, #26]
 800d304:	f023 0308 	bic.w	r3, r3, #8
 800d308:	b29a      	uxth	r2, r3
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800d30e:	6878      	ldr	r0, [r7, #4]
 800d310:	f7ff f864 	bl	800c3dc <tcp_close_shutdown_fin>
    }
    pcb = next;
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2b00      	cmp	r3, #0
 800d31c:	d1e7      	bne.n	800d2ee <tcp_handle_closepend+0xe>
  }
}
 800d31e:	bf00      	nop
 800d320:	bf00      	nop
 800d322:	3708      	adds	r7, #8
 800d324:	46bd      	mov	sp, r7
 800d326:	bd80      	pop	{r7, pc}
 800d328:	2000f210 	.word	0x2000f210

0800d32c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800d32c:	b580      	push	{r7, lr}
 800d32e:	b084      	sub	sp, #16
 800d330:	af00      	add	r7, sp, #0
 800d332:	4603      	mov	r3, r0
 800d334:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d336:	2001      	movs	r0, #1
 800d338:	f7fd fcda 	bl	800acf0 <memp_malloc>
 800d33c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	2b00      	cmp	r3, #0
 800d342:	d126      	bne.n	800d392 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800d344:	f7ff ffcc 	bl	800d2e0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800d348:	f7ff ff9a 	bl	800d280 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d34c:	2001      	movs	r0, #1
 800d34e:	f7fd fccf 	bl	800acf0 <memp_malloc>
 800d352:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800d354:	68fb      	ldr	r3, [r7, #12]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d11b      	bne.n	800d392 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800d35a:	2009      	movs	r0, #9
 800d35c:	f7ff ff46 	bl	800d1ec <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d360:	2001      	movs	r0, #1
 800d362:	f7fd fcc5 	bl	800acf0 <memp_malloc>
 800d366:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800d368:	68fb      	ldr	r3, [r7, #12]
 800d36a:	2b00      	cmp	r3, #0
 800d36c:	d111      	bne.n	800d392 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800d36e:	2008      	movs	r0, #8
 800d370:	f7ff ff3c 	bl	800d1ec <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d374:	2001      	movs	r0, #1
 800d376:	f7fd fcbb 	bl	800acf0 <memp_malloc>
 800d37a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d107      	bne.n	800d392 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800d382:	79fb      	ldrb	r3, [r7, #7]
 800d384:	4618      	mov	r0, r3
 800d386:	f7ff fee3 	bl	800d150 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800d38a:	2001      	movs	r0, #1
 800d38c:	f7fd fcb0 	bl	800acf0 <memp_malloc>
 800d390:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	2b00      	cmp	r3, #0
 800d396:	d03f      	beq.n	800d418 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800d398:	229c      	movs	r2, #156	; 0x9c
 800d39a:	2100      	movs	r1, #0
 800d39c:	68f8      	ldr	r0, [r7, #12]
 800d39e:	f009 f9b2 	bl	8016706 <memset>
    pcb->prio = prio;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	79fa      	ldrb	r2, [r7, #7]
 800d3a6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d3ae:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d3b8:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d3ba:	68fb      	ldr	r3, [r7, #12]
 800d3bc:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800d3c2:	68fb      	ldr	r3, [r7, #12]
 800d3c4:	22ff      	movs	r2, #255	; 0xff
 800d3c6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800d3c8:	68fb      	ldr	r3, [r7, #12]
 800d3ca:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d3ce:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800d3d0:	68fb      	ldr	r3, [r7, #12]
 800d3d2:	2206      	movs	r2, #6
 800d3d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	2206      	movs	r2, #6
 800d3dc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800d3de:	68fb      	ldr	r3, [r7, #12]
 800d3e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d3e4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	2201      	movs	r2, #1
 800d3ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800d3ee:	4b0d      	ldr	r3, [pc, #52]	; (800d424 <tcp_alloc+0xf8>)
 800d3f0:	681a      	ldr	r2, [r3, #0]
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800d3f6:	4b0c      	ldr	r3, [pc, #48]	; (800d428 <tcp_alloc+0xfc>)
 800d3f8:	781a      	ldrb	r2, [r3, #0]
 800d3fa:	68fb      	ldr	r3, [r7, #12]
 800d3fc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d404:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	4a08      	ldr	r2, [pc, #32]	; (800d42c <tcp_alloc+0x100>)
 800d40c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	4a07      	ldr	r2, [pc, #28]	; (800d430 <tcp_alloc+0x104>)
 800d414:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800d418:	68fb      	ldr	r3, [r7, #12]
}
 800d41a:	4618      	mov	r0, r3
 800d41c:	3710      	adds	r7, #16
 800d41e:	46bd      	mov	sp, r7
 800d420:	bd80      	pop	{r7, pc}
 800d422:	bf00      	nop
 800d424:	2000f204 	.word	0x2000f204
 800d428:	2000f21a 	.word	0x2000f21a
 800d42c:	0800d0e5 	.word	0x0800d0e5
 800d430:	006ddd00 	.word	0x006ddd00

0800d434 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800d434:	b580      	push	{r7, lr}
 800d436:	b082      	sub	sp, #8
 800d438:	af00      	add	r7, sp, #0
 800d43a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	2b00      	cmp	r3, #0
 800d440:	d107      	bne.n	800d452 <tcp_pcb_purge+0x1e>
 800d442:	4b21      	ldr	r3, [pc, #132]	; (800d4c8 <tcp_pcb_purge+0x94>)
 800d444:	f640 0251 	movw	r2, #2129	; 0x851
 800d448:	4920      	ldr	r1, [pc, #128]	; (800d4cc <tcp_pcb_purge+0x98>)
 800d44a:	4821      	ldr	r0, [pc, #132]	; (800d4d0 <tcp_pcb_purge+0x9c>)
 800d44c:	f009 f9f8 	bl	8016840 <iprintf>
 800d450:	e037      	b.n	800d4c2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	7d1b      	ldrb	r3, [r3, #20]
 800d456:	2b00      	cmp	r3, #0
 800d458:	d033      	beq.n	800d4c2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800d45e:	2b0a      	cmp	r3, #10
 800d460:	d02f      	beq.n	800d4c2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800d466:	2b01      	cmp	r3, #1
 800d468:	d02b      	beq.n	800d4c2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d007      	beq.n	800d482 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d476:	4618      	mov	r0, r3
 800d478:	f7fe fb60 	bl	800bb3c <pbuf_free>
      pcb->refused_data = NULL;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d486:	2b00      	cmp	r3, #0
 800d488:	d002      	beq.n	800d490 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800d48a:	6878      	ldr	r0, [r7, #4]
 800d48c:	f000 f986 	bl	800d79c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800d490:	687b      	ldr	r3, [r7, #4]
 800d492:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d496:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d49c:	4618      	mov	r0, r3
 800d49e:	f7ff fdc7 	bl	800d030 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d4a6:	4618      	mov	r0, r3
 800d4a8:	f7ff fdc2 	bl	800d030 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	66da      	str	r2, [r3, #108]	; 0x6c
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	2200      	movs	r2, #0
 800d4be:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800d4c2:	3708      	adds	r7, #8
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	080182ac 	.word	0x080182ac
 800d4cc:	080188f8 	.word	0x080188f8
 800d4d0:	080182f0 	.word	0x080182f0

0800d4d4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b084      	sub	sp, #16
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800d4de:	683b      	ldr	r3, [r7, #0]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d106      	bne.n	800d4f2 <tcp_pcb_remove+0x1e>
 800d4e4:	4b3e      	ldr	r3, [pc, #248]	; (800d5e0 <tcp_pcb_remove+0x10c>)
 800d4e6:	f640 0283 	movw	r2, #2179	; 0x883
 800d4ea:	493e      	ldr	r1, [pc, #248]	; (800d5e4 <tcp_pcb_remove+0x110>)
 800d4ec:	483e      	ldr	r0, [pc, #248]	; (800d5e8 <tcp_pcb_remove+0x114>)
 800d4ee:	f009 f9a7 	bl	8016840 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d106      	bne.n	800d506 <tcp_pcb_remove+0x32>
 800d4f8:	4b39      	ldr	r3, [pc, #228]	; (800d5e0 <tcp_pcb_remove+0x10c>)
 800d4fa:	f640 0284 	movw	r2, #2180	; 0x884
 800d4fe:	493b      	ldr	r1, [pc, #236]	; (800d5ec <tcp_pcb_remove+0x118>)
 800d500:	4839      	ldr	r0, [pc, #228]	; (800d5e8 <tcp_pcb_remove+0x114>)
 800d502:	f009 f99d 	bl	8016840 <iprintf>

  TCP_RMV(pcblist, pcb);
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	683a      	ldr	r2, [r7, #0]
 800d50c:	429a      	cmp	r2, r3
 800d50e:	d105      	bne.n	800d51c <tcp_pcb_remove+0x48>
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	68da      	ldr	r2, [r3, #12]
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	601a      	str	r2, [r3, #0]
 800d51a:	e013      	b.n	800d544 <tcp_pcb_remove+0x70>
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	60fb      	str	r3, [r7, #12]
 800d522:	e00c      	b.n	800d53e <tcp_pcb_remove+0x6a>
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	68db      	ldr	r3, [r3, #12]
 800d528:	683a      	ldr	r2, [r7, #0]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d104      	bne.n	800d538 <tcp_pcb_remove+0x64>
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	68da      	ldr	r2, [r3, #12]
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	60da      	str	r2, [r3, #12]
 800d536:	e005      	b.n	800d544 <tcp_pcb_remove+0x70>
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	68db      	ldr	r3, [r3, #12]
 800d53c:	60fb      	str	r3, [r7, #12]
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d1ef      	bne.n	800d524 <tcp_pcb_remove+0x50>
 800d544:	683b      	ldr	r3, [r7, #0]
 800d546:	2200      	movs	r2, #0
 800d548:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800d54a:	6838      	ldr	r0, [r7, #0]
 800d54c:	f7ff ff72 	bl	800d434 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800d550:	683b      	ldr	r3, [r7, #0]
 800d552:	7d1b      	ldrb	r3, [r3, #20]
 800d554:	2b0a      	cmp	r3, #10
 800d556:	d013      	beq.n	800d580 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800d558:	683b      	ldr	r3, [r7, #0]
 800d55a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800d55c:	2b01      	cmp	r3, #1
 800d55e:	d00f      	beq.n	800d580 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800d560:	683b      	ldr	r3, [r7, #0]
 800d562:	8b5b      	ldrh	r3, [r3, #26]
 800d564:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d009      	beq.n	800d580 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800d56c:	683b      	ldr	r3, [r7, #0]
 800d56e:	8b5b      	ldrh	r3, [r3, #26]
 800d570:	f043 0302 	orr.w	r3, r3, #2
 800d574:	b29a      	uxth	r2, r3
 800d576:	683b      	ldr	r3, [r7, #0]
 800d578:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d57a:	6838      	ldr	r0, [r7, #0]
 800d57c:	f002 ff6e 	bl	801045c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	7d1b      	ldrb	r3, [r3, #20]
 800d584:	2b01      	cmp	r3, #1
 800d586:	d020      	beq.n	800d5ca <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800d588:	683b      	ldr	r3, [r7, #0]
 800d58a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d006      	beq.n	800d59e <tcp_pcb_remove+0xca>
 800d590:	4b13      	ldr	r3, [pc, #76]	; (800d5e0 <tcp_pcb_remove+0x10c>)
 800d592:	f640 0293 	movw	r2, #2195	; 0x893
 800d596:	4916      	ldr	r1, [pc, #88]	; (800d5f0 <tcp_pcb_remove+0x11c>)
 800d598:	4813      	ldr	r0, [pc, #76]	; (800d5e8 <tcp_pcb_remove+0x114>)
 800d59a:	f009 f951 	bl	8016840 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800d59e:	683b      	ldr	r3, [r7, #0]
 800d5a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d006      	beq.n	800d5b4 <tcp_pcb_remove+0xe0>
 800d5a6:	4b0e      	ldr	r3, [pc, #56]	; (800d5e0 <tcp_pcb_remove+0x10c>)
 800d5a8:	f640 0294 	movw	r2, #2196	; 0x894
 800d5ac:	4911      	ldr	r1, [pc, #68]	; (800d5f4 <tcp_pcb_remove+0x120>)
 800d5ae:	480e      	ldr	r0, [pc, #56]	; (800d5e8 <tcp_pcb_remove+0x114>)
 800d5b0:	f009 f946 	bl	8016840 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800d5b4:	683b      	ldr	r3, [r7, #0]
 800d5b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d006      	beq.n	800d5ca <tcp_pcb_remove+0xf6>
 800d5bc:	4b08      	ldr	r3, [pc, #32]	; (800d5e0 <tcp_pcb_remove+0x10c>)
 800d5be:	f640 0296 	movw	r2, #2198	; 0x896
 800d5c2:	490d      	ldr	r1, [pc, #52]	; (800d5f8 <tcp_pcb_remove+0x124>)
 800d5c4:	4808      	ldr	r0, [pc, #32]	; (800d5e8 <tcp_pcb_remove+0x114>)
 800d5c6:	f009 f93b 	bl	8016840 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800d5ca:	683b      	ldr	r3, [r7, #0]
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	2200      	movs	r2, #0
 800d5d4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800d5d6:	bf00      	nop
 800d5d8:	3710      	adds	r7, #16
 800d5da:	46bd      	mov	sp, r7
 800d5dc:	bd80      	pop	{r7, pc}
 800d5de:	bf00      	nop
 800d5e0:	080182ac 	.word	0x080182ac
 800d5e4:	08018914 	.word	0x08018914
 800d5e8:	080182f0 	.word	0x080182f0
 800d5ec:	08018930 	.word	0x08018930
 800d5f0:	08018950 	.word	0x08018950
 800d5f4:	08018968 	.word	0x08018968
 800d5f8:	08018984 	.word	0x08018984

0800d5fc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800d5fc:	b580      	push	{r7, lr}
 800d5fe:	b082      	sub	sp, #8
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d106      	bne.n	800d618 <tcp_next_iss+0x1c>
 800d60a:	4b0a      	ldr	r3, [pc, #40]	; (800d634 <tcp_next_iss+0x38>)
 800d60c:	f640 02af 	movw	r2, #2223	; 0x8af
 800d610:	4909      	ldr	r1, [pc, #36]	; (800d638 <tcp_next_iss+0x3c>)
 800d612:	480a      	ldr	r0, [pc, #40]	; (800d63c <tcp_next_iss+0x40>)
 800d614:	f009 f914 	bl	8016840 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800d618:	4b09      	ldr	r3, [pc, #36]	; (800d640 <tcp_next_iss+0x44>)
 800d61a:	681a      	ldr	r2, [r3, #0]
 800d61c:	4b09      	ldr	r3, [pc, #36]	; (800d644 <tcp_next_iss+0x48>)
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	4413      	add	r3, r2
 800d622:	4a07      	ldr	r2, [pc, #28]	; (800d640 <tcp_next_iss+0x44>)
 800d624:	6013      	str	r3, [r2, #0]
  return iss;
 800d626:	4b06      	ldr	r3, [pc, #24]	; (800d640 <tcp_next_iss+0x44>)
 800d628:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800d62a:	4618      	mov	r0, r3
 800d62c:	3708      	adds	r7, #8
 800d62e:	46bd      	mov	sp, r7
 800d630:	bd80      	pop	{r7, pc}
 800d632:	bf00      	nop
 800d634:	080182ac 	.word	0x080182ac
 800d638:	0801899c 	.word	0x0801899c
 800d63c:	080182f0 	.word	0x080182f0
 800d640:	20000028 	.word	0x20000028
 800d644:	2000f204 	.word	0x2000f204

0800d648 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b086      	sub	sp, #24
 800d64c:	af00      	add	r7, sp, #0
 800d64e:	4603      	mov	r3, r0
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
 800d654:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	2b00      	cmp	r3, #0
 800d65a:	d106      	bne.n	800d66a <tcp_eff_send_mss_netif+0x22>
 800d65c:	4b14      	ldr	r3, [pc, #80]	; (800d6b0 <tcp_eff_send_mss_netif+0x68>)
 800d65e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800d662:	4914      	ldr	r1, [pc, #80]	; (800d6b4 <tcp_eff_send_mss_netif+0x6c>)
 800d664:	4814      	ldr	r0, [pc, #80]	; (800d6b8 <tcp_eff_send_mss_netif+0x70>)
 800d666:	f009 f8eb 	bl	8016840 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d101      	bne.n	800d674 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800d670:	89fb      	ldrh	r3, [r7, #14]
 800d672:	e019      	b.n	800d6a8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800d674:	68bb      	ldr	r3, [r7, #8]
 800d676:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d678:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800d67a:	8afb      	ldrh	r3, [r7, #22]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d012      	beq.n	800d6a6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800d680:	2328      	movs	r3, #40	; 0x28
 800d682:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800d684:	8afa      	ldrh	r2, [r7, #22]
 800d686:	8abb      	ldrh	r3, [r7, #20]
 800d688:	429a      	cmp	r2, r3
 800d68a:	d904      	bls.n	800d696 <tcp_eff_send_mss_netif+0x4e>
 800d68c:	8afa      	ldrh	r2, [r7, #22]
 800d68e:	8abb      	ldrh	r3, [r7, #20]
 800d690:	1ad3      	subs	r3, r2, r3
 800d692:	b29b      	uxth	r3, r3
 800d694:	e000      	b.n	800d698 <tcp_eff_send_mss_netif+0x50>
 800d696:	2300      	movs	r3, #0
 800d698:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800d69a:	8a7a      	ldrh	r2, [r7, #18]
 800d69c:	89fb      	ldrh	r3, [r7, #14]
 800d69e:	4293      	cmp	r3, r2
 800d6a0:	bf28      	it	cs
 800d6a2:	4613      	movcs	r3, r2
 800d6a4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800d6a6:	89fb      	ldrh	r3, [r7, #14]
}
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	3718      	adds	r7, #24
 800d6ac:	46bd      	mov	sp, r7
 800d6ae:	bd80      	pop	{r7, pc}
 800d6b0:	080182ac 	.word	0x080182ac
 800d6b4:	080189b8 	.word	0x080189b8
 800d6b8:	080182f0 	.word	0x080182f0

0800d6bc <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b084      	sub	sp, #16
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	6078      	str	r0, [r7, #4]
 800d6c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800d6c6:	683b      	ldr	r3, [r7, #0]
 800d6c8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800d6ca:	687b      	ldr	r3, [r7, #4]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d119      	bne.n	800d704 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800d6d0:	4b10      	ldr	r3, [pc, #64]	; (800d714 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800d6d2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800d6d6:	4910      	ldr	r1, [pc, #64]	; (800d718 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800d6d8:	4810      	ldr	r0, [pc, #64]	; (800d71c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800d6da:	f009 f8b1 	bl	8016840 <iprintf>

  while (pcb != NULL) {
 800d6de:	e011      	b.n	800d704 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	681a      	ldr	r2, [r3, #0]
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	681b      	ldr	r3, [r3, #0]
 800d6e8:	429a      	cmp	r2, r3
 800d6ea:	d108      	bne.n	800d6fe <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	68db      	ldr	r3, [r3, #12]
 800d6f0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800d6f2:	68f8      	ldr	r0, [r7, #12]
 800d6f4:	f7fe ffc6 	bl	800c684 <tcp_abort>
      pcb = next;
 800d6f8:	68bb      	ldr	r3, [r7, #8]
 800d6fa:	60fb      	str	r3, [r7, #12]
 800d6fc:	e002      	b.n	800d704 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800d6fe:	68fb      	ldr	r3, [r7, #12]
 800d700:	68db      	ldr	r3, [r3, #12]
 800d702:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d1ea      	bne.n	800d6e0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800d70a:	bf00      	nop
 800d70c:	bf00      	nop
 800d70e:	3710      	adds	r7, #16
 800d710:	46bd      	mov	sp, r7
 800d712:	bd80      	pop	{r7, pc}
 800d714:	080182ac 	.word	0x080182ac
 800d718:	080189e0 	.word	0x080189e0
 800d71c:	080182f0 	.word	0x080182f0

0800d720 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800d720:	b580      	push	{r7, lr}
 800d722:	b084      	sub	sp, #16
 800d724:	af00      	add	r7, sp, #0
 800d726:	6078      	str	r0, [r7, #4]
 800d728:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800d72a:	687b      	ldr	r3, [r7, #4]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d02a      	beq.n	800d786 <tcp_netif_ip_addr_changed+0x66>
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d026      	beq.n	800d786 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800d738:	4b15      	ldr	r3, [pc, #84]	; (800d790 <tcp_netif_ip_addr_changed+0x70>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	4619      	mov	r1, r3
 800d73e:	6878      	ldr	r0, [r7, #4]
 800d740:	f7ff ffbc 	bl	800d6bc <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800d744:	4b13      	ldr	r3, [pc, #76]	; (800d794 <tcp_netif_ip_addr_changed+0x74>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	4619      	mov	r1, r3
 800d74a:	6878      	ldr	r0, [r7, #4]
 800d74c:	f7ff ffb6 	bl	800d6bc <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d017      	beq.n	800d786 <tcp_netif_ip_addr_changed+0x66>
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d013      	beq.n	800d786 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d75e:	4b0e      	ldr	r3, [pc, #56]	; (800d798 <tcp_netif_ip_addr_changed+0x78>)
 800d760:	681b      	ldr	r3, [r3, #0]
 800d762:	60fb      	str	r3, [r7, #12]
 800d764:	e00c      	b.n	800d780 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	681a      	ldr	r2, [r3, #0]
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	429a      	cmp	r2, r3
 800d770:	d103      	bne.n	800d77a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	681a      	ldr	r2, [r3, #0]
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	68db      	ldr	r3, [r3, #12]
 800d77e:	60fb      	str	r3, [r7, #12]
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2b00      	cmp	r3, #0
 800d784:	d1ef      	bne.n	800d766 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800d786:	bf00      	nop
 800d788:	3710      	adds	r7, #16
 800d78a:	46bd      	mov	sp, r7
 800d78c:	bd80      	pop	{r7, pc}
 800d78e:	bf00      	nop
 800d790:	2000f210 	.word	0x2000f210
 800d794:	2000f208 	.word	0x2000f208
 800d798:	2000f20c 	.word	0x2000f20c

0800d79c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800d79c:	b580      	push	{r7, lr}
 800d79e:	b082      	sub	sp, #8
 800d7a0:	af00      	add	r7, sp, #0
 800d7a2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d007      	beq.n	800d7bc <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d7b0:	4618      	mov	r0, r3
 800d7b2:	f7ff fc3d 	bl	800d030 <tcp_segs_free>
    pcb->ooseq = NULL;
 800d7b6:	687b      	ldr	r3, [r7, #4]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800d7bc:	bf00      	nop
 800d7be:	3708      	adds	r7, #8
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800d7c4:	b590      	push	{r4, r7, lr}
 800d7c6:	b08d      	sub	sp, #52	; 0x34
 800d7c8:	af04      	add	r7, sp, #16
 800d7ca:	6078      	str	r0, [r7, #4]
 800d7cc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d105      	bne.n	800d7e0 <tcp_input+0x1c>
 800d7d4:	4b9b      	ldr	r3, [pc, #620]	; (800da44 <tcp_input+0x280>)
 800d7d6:	2283      	movs	r2, #131	; 0x83
 800d7d8:	499b      	ldr	r1, [pc, #620]	; (800da48 <tcp_input+0x284>)
 800d7da:	489c      	ldr	r0, [pc, #624]	; (800da4c <tcp_input+0x288>)
 800d7dc:	f009 f830 	bl	8016840 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800d7e0:	687b      	ldr	r3, [r7, #4]
 800d7e2:	685b      	ldr	r3, [r3, #4]
 800d7e4:	4a9a      	ldr	r2, [pc, #616]	; (800da50 <tcp_input+0x28c>)
 800d7e6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	895b      	ldrh	r3, [r3, #10]
 800d7ec:	2b13      	cmp	r3, #19
 800d7ee:	f240 83d1 	bls.w	800df94 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d7f2:	4b98      	ldr	r3, [pc, #608]	; (800da54 <tcp_input+0x290>)
 800d7f4:	695b      	ldr	r3, [r3, #20]
 800d7f6:	4a97      	ldr	r2, [pc, #604]	; (800da54 <tcp_input+0x290>)
 800d7f8:	6812      	ldr	r2, [r2, #0]
 800d7fa:	4611      	mov	r1, r2
 800d7fc:	4618      	mov	r0, r3
 800d7fe:	f007 fdff 	bl	8015400 <ip4_addr_isbroadcast_u32>
 800d802:	4603      	mov	r3, r0
 800d804:	2b00      	cmp	r3, #0
 800d806:	f040 83c7 	bne.w	800df98 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800d80a:	4b92      	ldr	r3, [pc, #584]	; (800da54 <tcp_input+0x290>)
 800d80c:	695b      	ldr	r3, [r3, #20]
 800d80e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800d812:	2be0      	cmp	r3, #224	; 0xe0
 800d814:	f000 83c0 	beq.w	800df98 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800d818:	4b8d      	ldr	r3, [pc, #564]	; (800da50 <tcp_input+0x28c>)
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	899b      	ldrh	r3, [r3, #12]
 800d81e:	b29b      	uxth	r3, r3
 800d820:	4618      	mov	r0, r3
 800d822:	f7fc fd8d 	bl	800a340 <lwip_htons>
 800d826:	4603      	mov	r3, r0
 800d828:	0b1b      	lsrs	r3, r3, #12
 800d82a:	b29b      	uxth	r3, r3
 800d82c:	b2db      	uxtb	r3, r3
 800d82e:	009b      	lsls	r3, r3, #2
 800d830:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800d832:	7cbb      	ldrb	r3, [r7, #18]
 800d834:	2b13      	cmp	r3, #19
 800d836:	f240 83b1 	bls.w	800df9c <tcp_input+0x7d8>
 800d83a:	7cbb      	ldrb	r3, [r7, #18]
 800d83c:	b29a      	uxth	r2, r3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	891b      	ldrh	r3, [r3, #8]
 800d842:	429a      	cmp	r2, r3
 800d844:	f200 83aa 	bhi.w	800df9c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800d848:	7cbb      	ldrb	r3, [r7, #18]
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	3b14      	subs	r3, #20
 800d84e:	b29a      	uxth	r2, r3
 800d850:	4b81      	ldr	r3, [pc, #516]	; (800da58 <tcp_input+0x294>)
 800d852:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800d854:	4b81      	ldr	r3, [pc, #516]	; (800da5c <tcp_input+0x298>)
 800d856:	2200      	movs	r2, #0
 800d858:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	895a      	ldrh	r2, [r3, #10]
 800d85e:	7cbb      	ldrb	r3, [r7, #18]
 800d860:	b29b      	uxth	r3, r3
 800d862:	429a      	cmp	r2, r3
 800d864:	d309      	bcc.n	800d87a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800d866:	4b7c      	ldr	r3, [pc, #496]	; (800da58 <tcp_input+0x294>)
 800d868:	881a      	ldrh	r2, [r3, #0]
 800d86a:	4b7d      	ldr	r3, [pc, #500]	; (800da60 <tcp_input+0x29c>)
 800d86c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800d86e:	7cbb      	ldrb	r3, [r7, #18]
 800d870:	4619      	mov	r1, r3
 800d872:	6878      	ldr	r0, [r7, #4]
 800d874:	f7fe f8dc 	bl	800ba30 <pbuf_remove_header>
 800d878:	e04e      	b.n	800d918 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d105      	bne.n	800d88e <tcp_input+0xca>
 800d882:	4b70      	ldr	r3, [pc, #448]	; (800da44 <tcp_input+0x280>)
 800d884:	22c2      	movs	r2, #194	; 0xc2
 800d886:	4977      	ldr	r1, [pc, #476]	; (800da64 <tcp_input+0x2a0>)
 800d888:	4870      	ldr	r0, [pc, #448]	; (800da4c <tcp_input+0x288>)
 800d88a:	f008 ffd9 	bl	8016840 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800d88e:	2114      	movs	r1, #20
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7fe f8cd 	bl	800ba30 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	895a      	ldrh	r2, [r3, #10]
 800d89a:	4b71      	ldr	r3, [pc, #452]	; (800da60 <tcp_input+0x29c>)
 800d89c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800d89e:	4b6e      	ldr	r3, [pc, #440]	; (800da58 <tcp_input+0x294>)
 800d8a0:	881a      	ldrh	r2, [r3, #0]
 800d8a2:	4b6f      	ldr	r3, [pc, #444]	; (800da60 <tcp_input+0x29c>)
 800d8a4:	881b      	ldrh	r3, [r3, #0]
 800d8a6:	1ad3      	subs	r3, r2, r3
 800d8a8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800d8aa:	4b6d      	ldr	r3, [pc, #436]	; (800da60 <tcp_input+0x29c>)
 800d8ac:	881b      	ldrh	r3, [r3, #0]
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f7fe f8bd 	bl	800ba30 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	895b      	ldrh	r3, [r3, #10]
 800d8bc:	8a3a      	ldrh	r2, [r7, #16]
 800d8be:	429a      	cmp	r2, r3
 800d8c0:	f200 836e 	bhi.w	800dfa0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	685b      	ldr	r3, [r3, #4]
 800d8ca:	4a64      	ldr	r2, [pc, #400]	; (800da5c <tcp_input+0x298>)
 800d8cc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	8a3a      	ldrh	r2, [r7, #16]
 800d8d4:	4611      	mov	r1, r2
 800d8d6:	4618      	mov	r0, r3
 800d8d8:	f7fe f8aa 	bl	800ba30 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	891a      	ldrh	r2, [r3, #8]
 800d8e0:	8a3b      	ldrh	r3, [r7, #16]
 800d8e2:	1ad3      	subs	r3, r2, r3
 800d8e4:	b29a      	uxth	r2, r3
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	895b      	ldrh	r3, [r3, #10]
 800d8ee:	2b00      	cmp	r3, #0
 800d8f0:	d005      	beq.n	800d8fe <tcp_input+0x13a>
 800d8f2:	4b54      	ldr	r3, [pc, #336]	; (800da44 <tcp_input+0x280>)
 800d8f4:	22df      	movs	r2, #223	; 0xdf
 800d8f6:	495c      	ldr	r1, [pc, #368]	; (800da68 <tcp_input+0x2a4>)
 800d8f8:	4854      	ldr	r0, [pc, #336]	; (800da4c <tcp_input+0x288>)
 800d8fa:	f008 ffa1 	bl	8016840 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	891a      	ldrh	r2, [r3, #8]
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	891b      	ldrh	r3, [r3, #8]
 800d908:	429a      	cmp	r2, r3
 800d90a:	d005      	beq.n	800d918 <tcp_input+0x154>
 800d90c:	4b4d      	ldr	r3, [pc, #308]	; (800da44 <tcp_input+0x280>)
 800d90e:	22e0      	movs	r2, #224	; 0xe0
 800d910:	4956      	ldr	r1, [pc, #344]	; (800da6c <tcp_input+0x2a8>)
 800d912:	484e      	ldr	r0, [pc, #312]	; (800da4c <tcp_input+0x288>)
 800d914:	f008 ff94 	bl	8016840 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800d918:	4b4d      	ldr	r3, [pc, #308]	; (800da50 <tcp_input+0x28c>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	881b      	ldrh	r3, [r3, #0]
 800d91e:	b29b      	uxth	r3, r3
 800d920:	4a4b      	ldr	r2, [pc, #300]	; (800da50 <tcp_input+0x28c>)
 800d922:	6814      	ldr	r4, [r2, #0]
 800d924:	4618      	mov	r0, r3
 800d926:	f7fc fd0b 	bl	800a340 <lwip_htons>
 800d92a:	4603      	mov	r3, r0
 800d92c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800d92e:	4b48      	ldr	r3, [pc, #288]	; (800da50 <tcp_input+0x28c>)
 800d930:	681b      	ldr	r3, [r3, #0]
 800d932:	885b      	ldrh	r3, [r3, #2]
 800d934:	b29b      	uxth	r3, r3
 800d936:	4a46      	ldr	r2, [pc, #280]	; (800da50 <tcp_input+0x28c>)
 800d938:	6814      	ldr	r4, [r2, #0]
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7fc fd00 	bl	800a340 <lwip_htons>
 800d940:	4603      	mov	r3, r0
 800d942:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800d944:	4b42      	ldr	r3, [pc, #264]	; (800da50 <tcp_input+0x28c>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	685b      	ldr	r3, [r3, #4]
 800d94a:	4a41      	ldr	r2, [pc, #260]	; (800da50 <tcp_input+0x28c>)
 800d94c:	6814      	ldr	r4, [r2, #0]
 800d94e:	4618      	mov	r0, r3
 800d950:	f7fc fd0b 	bl	800a36a <lwip_htonl>
 800d954:	4603      	mov	r3, r0
 800d956:	6063      	str	r3, [r4, #4]
 800d958:	6863      	ldr	r3, [r4, #4]
 800d95a:	4a45      	ldr	r2, [pc, #276]	; (800da70 <tcp_input+0x2ac>)
 800d95c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800d95e:	4b3c      	ldr	r3, [pc, #240]	; (800da50 <tcp_input+0x28c>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	689b      	ldr	r3, [r3, #8]
 800d964:	4a3a      	ldr	r2, [pc, #232]	; (800da50 <tcp_input+0x28c>)
 800d966:	6814      	ldr	r4, [r2, #0]
 800d968:	4618      	mov	r0, r3
 800d96a:	f7fc fcfe 	bl	800a36a <lwip_htonl>
 800d96e:	4603      	mov	r3, r0
 800d970:	60a3      	str	r3, [r4, #8]
 800d972:	68a3      	ldr	r3, [r4, #8]
 800d974:	4a3f      	ldr	r2, [pc, #252]	; (800da74 <tcp_input+0x2b0>)
 800d976:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800d978:	4b35      	ldr	r3, [pc, #212]	; (800da50 <tcp_input+0x28c>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	89db      	ldrh	r3, [r3, #14]
 800d97e:	b29b      	uxth	r3, r3
 800d980:	4a33      	ldr	r2, [pc, #204]	; (800da50 <tcp_input+0x28c>)
 800d982:	6814      	ldr	r4, [r2, #0]
 800d984:	4618      	mov	r0, r3
 800d986:	f7fc fcdb 	bl	800a340 <lwip_htons>
 800d98a:	4603      	mov	r3, r0
 800d98c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800d98e:	4b30      	ldr	r3, [pc, #192]	; (800da50 <tcp_input+0x28c>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	899b      	ldrh	r3, [r3, #12]
 800d994:	b29b      	uxth	r3, r3
 800d996:	4618      	mov	r0, r3
 800d998:	f7fc fcd2 	bl	800a340 <lwip_htons>
 800d99c:	4603      	mov	r3, r0
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d9a4:	b2da      	uxtb	r2, r3
 800d9a6:	4b34      	ldr	r3, [pc, #208]	; (800da78 <tcp_input+0x2b4>)
 800d9a8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	891a      	ldrh	r2, [r3, #8]
 800d9ae:	4b33      	ldr	r3, [pc, #204]	; (800da7c <tcp_input+0x2b8>)
 800d9b0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800d9b2:	4b31      	ldr	r3, [pc, #196]	; (800da78 <tcp_input+0x2b4>)
 800d9b4:	781b      	ldrb	r3, [r3, #0]
 800d9b6:	f003 0303 	and.w	r3, r3, #3
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d00c      	beq.n	800d9d8 <tcp_input+0x214>
    tcplen++;
 800d9be:	4b2f      	ldr	r3, [pc, #188]	; (800da7c <tcp_input+0x2b8>)
 800d9c0:	881b      	ldrh	r3, [r3, #0]
 800d9c2:	3301      	adds	r3, #1
 800d9c4:	b29a      	uxth	r2, r3
 800d9c6:	4b2d      	ldr	r3, [pc, #180]	; (800da7c <tcp_input+0x2b8>)
 800d9c8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	891a      	ldrh	r2, [r3, #8]
 800d9ce:	4b2b      	ldr	r3, [pc, #172]	; (800da7c <tcp_input+0x2b8>)
 800d9d0:	881b      	ldrh	r3, [r3, #0]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	f200 82e6 	bhi.w	800dfa4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800d9d8:	2300      	movs	r3, #0
 800d9da:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800d9dc:	4b28      	ldr	r3, [pc, #160]	; (800da80 <tcp_input+0x2bc>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	61fb      	str	r3, [r7, #28]
 800d9e2:	e09d      	b.n	800db20 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800d9e4:	69fb      	ldr	r3, [r7, #28]
 800d9e6:	7d1b      	ldrb	r3, [r3, #20]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d105      	bne.n	800d9f8 <tcp_input+0x234>
 800d9ec:	4b15      	ldr	r3, [pc, #84]	; (800da44 <tcp_input+0x280>)
 800d9ee:	22fb      	movs	r2, #251	; 0xfb
 800d9f0:	4924      	ldr	r1, [pc, #144]	; (800da84 <tcp_input+0x2c0>)
 800d9f2:	4816      	ldr	r0, [pc, #88]	; (800da4c <tcp_input+0x288>)
 800d9f4:	f008 ff24 	bl	8016840 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800d9f8:	69fb      	ldr	r3, [r7, #28]
 800d9fa:	7d1b      	ldrb	r3, [r3, #20]
 800d9fc:	2b0a      	cmp	r3, #10
 800d9fe:	d105      	bne.n	800da0c <tcp_input+0x248>
 800da00:	4b10      	ldr	r3, [pc, #64]	; (800da44 <tcp_input+0x280>)
 800da02:	22fc      	movs	r2, #252	; 0xfc
 800da04:	4920      	ldr	r1, [pc, #128]	; (800da88 <tcp_input+0x2c4>)
 800da06:	4811      	ldr	r0, [pc, #68]	; (800da4c <tcp_input+0x288>)
 800da08:	f008 ff1a 	bl	8016840 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800da0c:	69fb      	ldr	r3, [r7, #28]
 800da0e:	7d1b      	ldrb	r3, [r3, #20]
 800da10:	2b01      	cmp	r3, #1
 800da12:	d105      	bne.n	800da20 <tcp_input+0x25c>
 800da14:	4b0b      	ldr	r3, [pc, #44]	; (800da44 <tcp_input+0x280>)
 800da16:	22fd      	movs	r2, #253	; 0xfd
 800da18:	491c      	ldr	r1, [pc, #112]	; (800da8c <tcp_input+0x2c8>)
 800da1a:	480c      	ldr	r0, [pc, #48]	; (800da4c <tcp_input+0x288>)
 800da1c:	f008 ff10 	bl	8016840 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da20:	69fb      	ldr	r3, [r7, #28]
 800da22:	7a1b      	ldrb	r3, [r3, #8]
 800da24:	2b00      	cmp	r3, #0
 800da26:	d033      	beq.n	800da90 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800da28:	69fb      	ldr	r3, [r7, #28]
 800da2a:	7a1a      	ldrb	r2, [r3, #8]
 800da2c:	4b09      	ldr	r3, [pc, #36]	; (800da54 <tcp_input+0x290>)
 800da2e:	685b      	ldr	r3, [r3, #4]
 800da30:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800da34:	3301      	adds	r3, #1
 800da36:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800da38:	429a      	cmp	r2, r3
 800da3a:	d029      	beq.n	800da90 <tcp_input+0x2cc>
      prev = pcb;
 800da3c:	69fb      	ldr	r3, [r7, #28]
 800da3e:	61bb      	str	r3, [r7, #24]
      continue;
 800da40:	e06b      	b.n	800db1a <tcp_input+0x356>
 800da42:	bf00      	nop
 800da44:	08018a14 	.word	0x08018a14
 800da48:	08018a48 	.word	0x08018a48
 800da4c:	08018a60 	.word	0x08018a60
 800da50:	2000f22c 	.word	0x2000f22c
 800da54:	200098d0 	.word	0x200098d0
 800da58:	2000f230 	.word	0x2000f230
 800da5c:	2000f234 	.word	0x2000f234
 800da60:	2000f232 	.word	0x2000f232
 800da64:	08018a88 	.word	0x08018a88
 800da68:	08018a98 	.word	0x08018a98
 800da6c:	08018aa4 	.word	0x08018aa4
 800da70:	2000f23c 	.word	0x2000f23c
 800da74:	2000f240 	.word	0x2000f240
 800da78:	2000f248 	.word	0x2000f248
 800da7c:	2000f246 	.word	0x2000f246
 800da80:	2000f210 	.word	0x2000f210
 800da84:	08018ac4 	.word	0x08018ac4
 800da88:	08018aec 	.word	0x08018aec
 800da8c:	08018b18 	.word	0x08018b18
    }

    if (pcb->remote_port == tcphdr->src &&
 800da90:	69fb      	ldr	r3, [r7, #28]
 800da92:	8b1a      	ldrh	r2, [r3, #24]
 800da94:	4b72      	ldr	r3, [pc, #456]	; (800dc60 <tcp_input+0x49c>)
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	881b      	ldrh	r3, [r3, #0]
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	429a      	cmp	r2, r3
 800da9e:	d13a      	bne.n	800db16 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800daa0:	69fb      	ldr	r3, [r7, #28]
 800daa2:	8ada      	ldrh	r2, [r3, #22]
 800daa4:	4b6e      	ldr	r3, [pc, #440]	; (800dc60 <tcp_input+0x49c>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	885b      	ldrh	r3, [r3, #2]
 800daaa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800daac:	429a      	cmp	r2, r3
 800daae:	d132      	bne.n	800db16 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dab0:	69fb      	ldr	r3, [r7, #28]
 800dab2:	685a      	ldr	r2, [r3, #4]
 800dab4:	4b6b      	ldr	r3, [pc, #428]	; (800dc64 <tcp_input+0x4a0>)
 800dab6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800dab8:	429a      	cmp	r2, r3
 800daba:	d12c      	bne.n	800db16 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800dabc:	69fb      	ldr	r3, [r7, #28]
 800dabe:	681a      	ldr	r2, [r3, #0]
 800dac0:	4b68      	ldr	r3, [pc, #416]	; (800dc64 <tcp_input+0x4a0>)
 800dac2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dac4:	429a      	cmp	r2, r3
 800dac6:	d126      	bne.n	800db16 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800dac8:	69fb      	ldr	r3, [r7, #28]
 800daca:	68db      	ldr	r3, [r3, #12]
 800dacc:	69fa      	ldr	r2, [r7, #28]
 800dace:	429a      	cmp	r2, r3
 800dad0:	d106      	bne.n	800dae0 <tcp_input+0x31c>
 800dad2:	4b65      	ldr	r3, [pc, #404]	; (800dc68 <tcp_input+0x4a4>)
 800dad4:	f240 120d 	movw	r2, #269	; 0x10d
 800dad8:	4964      	ldr	r1, [pc, #400]	; (800dc6c <tcp_input+0x4a8>)
 800dada:	4865      	ldr	r0, [pc, #404]	; (800dc70 <tcp_input+0x4ac>)
 800dadc:	f008 feb0 	bl	8016840 <iprintf>
      if (prev != NULL) {
 800dae0:	69bb      	ldr	r3, [r7, #24]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d00a      	beq.n	800dafc <tcp_input+0x338>
        prev->next = pcb->next;
 800dae6:	69fb      	ldr	r3, [r7, #28]
 800dae8:	68da      	ldr	r2, [r3, #12]
 800daea:	69bb      	ldr	r3, [r7, #24]
 800daec:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800daee:	4b61      	ldr	r3, [pc, #388]	; (800dc74 <tcp_input+0x4b0>)
 800daf0:	681a      	ldr	r2, [r3, #0]
 800daf2:	69fb      	ldr	r3, [r7, #28]
 800daf4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800daf6:	4a5f      	ldr	r2, [pc, #380]	; (800dc74 <tcp_input+0x4b0>)
 800daf8:	69fb      	ldr	r3, [r7, #28]
 800dafa:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800dafc:	69fb      	ldr	r3, [r7, #28]
 800dafe:	68db      	ldr	r3, [r3, #12]
 800db00:	69fa      	ldr	r2, [r7, #28]
 800db02:	429a      	cmp	r2, r3
 800db04:	d111      	bne.n	800db2a <tcp_input+0x366>
 800db06:	4b58      	ldr	r3, [pc, #352]	; (800dc68 <tcp_input+0x4a4>)
 800db08:	f240 1215 	movw	r2, #277	; 0x115
 800db0c:	495a      	ldr	r1, [pc, #360]	; (800dc78 <tcp_input+0x4b4>)
 800db0e:	4858      	ldr	r0, [pc, #352]	; (800dc70 <tcp_input+0x4ac>)
 800db10:	f008 fe96 	bl	8016840 <iprintf>
      break;
 800db14:	e009      	b.n	800db2a <tcp_input+0x366>
    }
    prev = pcb;
 800db16:	69fb      	ldr	r3, [r7, #28]
 800db18:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800db1a:	69fb      	ldr	r3, [r7, #28]
 800db1c:	68db      	ldr	r3, [r3, #12]
 800db1e:	61fb      	str	r3, [r7, #28]
 800db20:	69fb      	ldr	r3, [r7, #28]
 800db22:	2b00      	cmp	r3, #0
 800db24:	f47f af5e 	bne.w	800d9e4 <tcp_input+0x220>
 800db28:	e000      	b.n	800db2c <tcp_input+0x368>
      break;
 800db2a:	bf00      	nop
  }

  if (pcb == NULL) {
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	2b00      	cmp	r3, #0
 800db30:	f040 80aa 	bne.w	800dc88 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800db34:	4b51      	ldr	r3, [pc, #324]	; (800dc7c <tcp_input+0x4b8>)
 800db36:	681b      	ldr	r3, [r3, #0]
 800db38:	61fb      	str	r3, [r7, #28]
 800db3a:	e03f      	b.n	800dbbc <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800db3c:	69fb      	ldr	r3, [r7, #28]
 800db3e:	7d1b      	ldrb	r3, [r3, #20]
 800db40:	2b0a      	cmp	r3, #10
 800db42:	d006      	beq.n	800db52 <tcp_input+0x38e>
 800db44:	4b48      	ldr	r3, [pc, #288]	; (800dc68 <tcp_input+0x4a4>)
 800db46:	f240 121f 	movw	r2, #287	; 0x11f
 800db4a:	494d      	ldr	r1, [pc, #308]	; (800dc80 <tcp_input+0x4bc>)
 800db4c:	4848      	ldr	r0, [pc, #288]	; (800dc70 <tcp_input+0x4ac>)
 800db4e:	f008 fe77 	bl	8016840 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db52:	69fb      	ldr	r3, [r7, #28]
 800db54:	7a1b      	ldrb	r3, [r3, #8]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d009      	beq.n	800db6e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	7a1a      	ldrb	r2, [r3, #8]
 800db5e:	4b41      	ldr	r3, [pc, #260]	; (800dc64 <tcp_input+0x4a0>)
 800db60:	685b      	ldr	r3, [r3, #4]
 800db62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800db66:	3301      	adds	r3, #1
 800db68:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d122      	bne.n	800dbb4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800db6e:	69fb      	ldr	r3, [r7, #28]
 800db70:	8b1a      	ldrh	r2, [r3, #24]
 800db72:	4b3b      	ldr	r3, [pc, #236]	; (800dc60 <tcp_input+0x49c>)
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	881b      	ldrh	r3, [r3, #0]
 800db78:	b29b      	uxth	r3, r3
 800db7a:	429a      	cmp	r2, r3
 800db7c:	d11b      	bne.n	800dbb6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800db7e:	69fb      	ldr	r3, [r7, #28]
 800db80:	8ada      	ldrh	r2, [r3, #22]
 800db82:	4b37      	ldr	r3, [pc, #220]	; (800dc60 <tcp_input+0x49c>)
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	885b      	ldrh	r3, [r3, #2]
 800db88:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800db8a:	429a      	cmp	r2, r3
 800db8c:	d113      	bne.n	800dbb6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800db8e:	69fb      	ldr	r3, [r7, #28]
 800db90:	685a      	ldr	r2, [r3, #4]
 800db92:	4b34      	ldr	r3, [pc, #208]	; (800dc64 <tcp_input+0x4a0>)
 800db94:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800db96:	429a      	cmp	r2, r3
 800db98:	d10d      	bne.n	800dbb6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800db9a:	69fb      	ldr	r3, [r7, #28]
 800db9c:	681a      	ldr	r2, [r3, #0]
 800db9e:	4b31      	ldr	r3, [pc, #196]	; (800dc64 <tcp_input+0x4a0>)
 800dba0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800dba2:	429a      	cmp	r2, r3
 800dba4:	d107      	bne.n	800dbb6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800dba6:	69f8      	ldr	r0, [r7, #28]
 800dba8:	f000 fb56 	bl	800e258 <tcp_timewait_input>
        }
        pbuf_free(p);
 800dbac:	6878      	ldr	r0, [r7, #4]
 800dbae:	f7fd ffc5 	bl	800bb3c <pbuf_free>
        return;
 800dbb2:	e1fd      	b.n	800dfb0 <tcp_input+0x7ec>
        continue;
 800dbb4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	68db      	ldr	r3, [r3, #12]
 800dbba:	61fb      	str	r3, [r7, #28]
 800dbbc:	69fb      	ldr	r3, [r7, #28]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d1bc      	bne.n	800db3c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800dbc2:	2300      	movs	r3, #0
 800dbc4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dbc6:	4b2f      	ldr	r3, [pc, #188]	; (800dc84 <tcp_input+0x4c0>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	617b      	str	r3, [r7, #20]
 800dbcc:	e02a      	b.n	800dc24 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dbce:	697b      	ldr	r3, [r7, #20]
 800dbd0:	7a1b      	ldrb	r3, [r3, #8]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d00c      	beq.n	800dbf0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	7a1a      	ldrb	r2, [r3, #8]
 800dbda:	4b22      	ldr	r3, [pc, #136]	; (800dc64 <tcp_input+0x4a0>)
 800dbdc:	685b      	ldr	r3, [r3, #4]
 800dbde:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d002      	beq.n	800dbf0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800dbea:	697b      	ldr	r3, [r7, #20]
 800dbec:	61bb      	str	r3, [r7, #24]
        continue;
 800dbee:	e016      	b.n	800dc1e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800dbf0:	697b      	ldr	r3, [r7, #20]
 800dbf2:	8ada      	ldrh	r2, [r3, #22]
 800dbf4:	4b1a      	ldr	r3, [pc, #104]	; (800dc60 <tcp_input+0x49c>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	885b      	ldrh	r3, [r3, #2]
 800dbfa:	b29b      	uxth	r3, r3
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d10c      	bne.n	800dc1a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	681a      	ldr	r2, [r3, #0]
 800dc04:	4b17      	ldr	r3, [pc, #92]	; (800dc64 <tcp_input+0x4a0>)
 800dc06:	695b      	ldr	r3, [r3, #20]
 800dc08:	429a      	cmp	r2, r3
 800dc0a:	d00f      	beq.n	800dc2c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800dc0c:	697b      	ldr	r3, [r7, #20]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d00d      	beq.n	800dc2e <tcp_input+0x46a>
 800dc12:	697b      	ldr	r3, [r7, #20]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d009      	beq.n	800dc2e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800dc1a:	697b      	ldr	r3, [r7, #20]
 800dc1c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	68db      	ldr	r3, [r3, #12]
 800dc22:	617b      	str	r3, [r7, #20]
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	2b00      	cmp	r3, #0
 800dc28:	d1d1      	bne.n	800dbce <tcp_input+0x40a>
 800dc2a:	e000      	b.n	800dc2e <tcp_input+0x46a>
            break;
 800dc2c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800dc2e:	697b      	ldr	r3, [r7, #20]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d029      	beq.n	800dc88 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800dc34:	69bb      	ldr	r3, [r7, #24]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d00a      	beq.n	800dc50 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800dc3a:	697b      	ldr	r3, [r7, #20]
 800dc3c:	68da      	ldr	r2, [r3, #12]
 800dc3e:	69bb      	ldr	r3, [r7, #24]
 800dc40:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800dc42:	4b10      	ldr	r3, [pc, #64]	; (800dc84 <tcp_input+0x4c0>)
 800dc44:	681a      	ldr	r2, [r3, #0]
 800dc46:	697b      	ldr	r3, [r7, #20]
 800dc48:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800dc4a:	4a0e      	ldr	r2, [pc, #56]	; (800dc84 <tcp_input+0x4c0>)
 800dc4c:	697b      	ldr	r3, [r7, #20]
 800dc4e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800dc50:	6978      	ldr	r0, [r7, #20]
 800dc52:	f000 fa03 	bl	800e05c <tcp_listen_input>
      }
      pbuf_free(p);
 800dc56:	6878      	ldr	r0, [r7, #4]
 800dc58:	f7fd ff70 	bl	800bb3c <pbuf_free>
      return;
 800dc5c:	e1a8      	b.n	800dfb0 <tcp_input+0x7ec>
 800dc5e:	bf00      	nop
 800dc60:	2000f22c 	.word	0x2000f22c
 800dc64:	200098d0 	.word	0x200098d0
 800dc68:	08018a14 	.word	0x08018a14
 800dc6c:	08018b40 	.word	0x08018b40
 800dc70:	08018a60 	.word	0x08018a60
 800dc74:	2000f210 	.word	0x2000f210
 800dc78:	08018b6c 	.word	0x08018b6c
 800dc7c:	2000f214 	.word	0x2000f214
 800dc80:	08018b98 	.word	0x08018b98
 800dc84:	2000f20c 	.word	0x2000f20c
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800dc88:	69fb      	ldr	r3, [r7, #28]
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	f000 8158 	beq.w	800df40 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800dc90:	4b95      	ldr	r3, [pc, #596]	; (800dee8 <tcp_input+0x724>)
 800dc92:	2200      	movs	r2, #0
 800dc94:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	891a      	ldrh	r2, [r3, #8]
 800dc9a:	4b93      	ldr	r3, [pc, #588]	; (800dee8 <tcp_input+0x724>)
 800dc9c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800dc9e:	4a92      	ldr	r2, [pc, #584]	; (800dee8 <tcp_input+0x724>)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800dca4:	4b91      	ldr	r3, [pc, #580]	; (800deec <tcp_input+0x728>)
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	4a8f      	ldr	r2, [pc, #572]	; (800dee8 <tcp_input+0x724>)
 800dcaa:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800dcac:	4b90      	ldr	r3, [pc, #576]	; (800def0 <tcp_input+0x72c>)
 800dcae:	2200      	movs	r2, #0
 800dcb0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800dcb2:	4b90      	ldr	r3, [pc, #576]	; (800def4 <tcp_input+0x730>)
 800dcb4:	2200      	movs	r2, #0
 800dcb6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800dcb8:	4b8f      	ldr	r3, [pc, #572]	; (800def8 <tcp_input+0x734>)
 800dcba:	2200      	movs	r2, #0
 800dcbc:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800dcbe:	4b8f      	ldr	r3, [pc, #572]	; (800defc <tcp_input+0x738>)
 800dcc0:	781b      	ldrb	r3, [r3, #0]
 800dcc2:	f003 0308 	and.w	r3, r3, #8
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d006      	beq.n	800dcd8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	7b5b      	ldrb	r3, [r3, #13]
 800dcce:	f043 0301 	orr.w	r3, r3, #1
 800dcd2:	b2da      	uxtb	r2, r3
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800dcd8:	69fb      	ldr	r3, [r7, #28]
 800dcda:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d017      	beq.n	800dd10 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dce0:	69f8      	ldr	r0, [r7, #28]
 800dce2:	f7ff f929 	bl	800cf38 <tcp_process_refused_data>
 800dce6:	4603      	mov	r3, r0
 800dce8:	f113 0f0d 	cmn.w	r3, #13
 800dcec:	d007      	beq.n	800dcfe <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dcee:	69fb      	ldr	r3, [r7, #28]
 800dcf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800dcf2:	2b00      	cmp	r3, #0
 800dcf4:	d00c      	beq.n	800dd10 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800dcf6:	4b82      	ldr	r3, [pc, #520]	; (800df00 <tcp_input+0x73c>)
 800dcf8:	881b      	ldrh	r3, [r3, #0]
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d008      	beq.n	800dd10 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800dcfe:	69fb      	ldr	r3, [r7, #28]
 800dd00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	f040 80e3 	bne.w	800dece <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800dd08:	69f8      	ldr	r0, [r7, #28]
 800dd0a:	f003 f9ad 	bl	8011068 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800dd0e:	e0de      	b.n	800dece <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800dd10:	4a7c      	ldr	r2, [pc, #496]	; (800df04 <tcp_input+0x740>)
 800dd12:	69fb      	ldr	r3, [r7, #28]
 800dd14:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800dd16:	69f8      	ldr	r0, [r7, #28]
 800dd18:	f000 fb18 	bl	800e34c <tcp_process>
 800dd1c:	4603      	mov	r3, r0
 800dd1e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800dd20:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd24:	f113 0f0d 	cmn.w	r3, #13
 800dd28:	f000 80d3 	beq.w	800ded2 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800dd2c:	4b71      	ldr	r3, [pc, #452]	; (800def4 <tcp_input+0x730>)
 800dd2e:	781b      	ldrb	r3, [r3, #0]
 800dd30:	f003 0308 	and.w	r3, r3, #8
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d015      	beq.n	800dd64 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d008      	beq.n	800dd54 <tcp_input+0x590>
 800dd42:	69fb      	ldr	r3, [r7, #28]
 800dd44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd48:	69fa      	ldr	r2, [r7, #28]
 800dd4a:	6912      	ldr	r2, [r2, #16]
 800dd4c:	f06f 010d 	mvn.w	r1, #13
 800dd50:	4610      	mov	r0, r2
 800dd52:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800dd54:	69f9      	ldr	r1, [r7, #28]
 800dd56:	486c      	ldr	r0, [pc, #432]	; (800df08 <tcp_input+0x744>)
 800dd58:	f7ff fbbc 	bl	800d4d4 <tcp_pcb_remove>
        tcp_free(pcb);
 800dd5c:	69f8      	ldr	r0, [r7, #28]
 800dd5e:	f7fe f9a9 	bl	800c0b4 <tcp_free>
 800dd62:	e0da      	b.n	800df1a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800dd64:	2300      	movs	r3, #0
 800dd66:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800dd68:	4b63      	ldr	r3, [pc, #396]	; (800def8 <tcp_input+0x734>)
 800dd6a:	881b      	ldrh	r3, [r3, #0]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d01d      	beq.n	800ddac <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800dd70:	4b61      	ldr	r3, [pc, #388]	; (800def8 <tcp_input+0x734>)
 800dd72:	881b      	ldrh	r3, [r3, #0]
 800dd74:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800dd76:	69fb      	ldr	r3, [r7, #28]
 800dd78:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d00a      	beq.n	800dd96 <tcp_input+0x5d2>
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd86:	69fa      	ldr	r2, [r7, #28]
 800dd88:	6910      	ldr	r0, [r2, #16]
 800dd8a:	89fa      	ldrh	r2, [r7, #14]
 800dd8c:	69f9      	ldr	r1, [r7, #28]
 800dd8e:	4798      	blx	r3
 800dd90:	4603      	mov	r3, r0
 800dd92:	74fb      	strb	r3, [r7, #19]
 800dd94:	e001      	b.n	800dd9a <tcp_input+0x5d6>
 800dd96:	2300      	movs	r3, #0
 800dd98:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800dd9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800dd9e:	f113 0f0d 	cmn.w	r3, #13
 800dda2:	f000 8098 	beq.w	800ded6 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800dda6:	4b54      	ldr	r3, [pc, #336]	; (800def8 <tcp_input+0x734>)
 800dda8:	2200      	movs	r2, #0
 800ddaa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ddac:	69f8      	ldr	r0, [r7, #28]
 800ddae:	f000 f915 	bl	800dfdc <tcp_input_delayed_close>
 800ddb2:	4603      	mov	r3, r0
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	f040 8090 	bne.w	800deda <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ddba:	4b4d      	ldr	r3, [pc, #308]	; (800def0 <tcp_input+0x72c>)
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d041      	beq.n	800de46 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ddc2:	69fb      	ldr	r3, [r7, #28]
 800ddc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d006      	beq.n	800ddd8 <tcp_input+0x614>
 800ddca:	4b50      	ldr	r3, [pc, #320]	; (800df0c <tcp_input+0x748>)
 800ddcc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ddd0:	494f      	ldr	r1, [pc, #316]	; (800df10 <tcp_input+0x74c>)
 800ddd2:	4850      	ldr	r0, [pc, #320]	; (800df14 <tcp_input+0x750>)
 800ddd4:	f008 fd34 	bl	8016840 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ddd8:	69fb      	ldr	r3, [r7, #28]
 800ddda:	8b5b      	ldrh	r3, [r3, #26]
 800dddc:	f003 0310 	and.w	r3, r3, #16
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d008      	beq.n	800ddf6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800dde4:	4b42      	ldr	r3, [pc, #264]	; (800def0 <tcp_input+0x72c>)
 800dde6:	681b      	ldr	r3, [r3, #0]
 800dde8:	4618      	mov	r0, r3
 800ddea:	f7fd fea7 	bl	800bb3c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ddee:	69f8      	ldr	r0, [r7, #28]
 800ddf0:	f7fe fc48 	bl	800c684 <tcp_abort>
            goto aborted;
 800ddf4:	e091      	b.n	800df1a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ddf6:	69fb      	ldr	r3, [r7, #28]
 800ddf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d00c      	beq.n	800de1a <tcp_input+0x656>
 800de00:	69fb      	ldr	r3, [r7, #28]
 800de02:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800de06:	69fb      	ldr	r3, [r7, #28]
 800de08:	6918      	ldr	r0, [r3, #16]
 800de0a:	4b39      	ldr	r3, [pc, #228]	; (800def0 <tcp_input+0x72c>)
 800de0c:	681a      	ldr	r2, [r3, #0]
 800de0e:	2300      	movs	r3, #0
 800de10:	69f9      	ldr	r1, [r7, #28]
 800de12:	47a0      	blx	r4
 800de14:	4603      	mov	r3, r0
 800de16:	74fb      	strb	r3, [r7, #19]
 800de18:	e008      	b.n	800de2c <tcp_input+0x668>
 800de1a:	4b35      	ldr	r3, [pc, #212]	; (800def0 <tcp_input+0x72c>)
 800de1c:	681a      	ldr	r2, [r3, #0]
 800de1e:	2300      	movs	r3, #0
 800de20:	69f9      	ldr	r1, [r7, #28]
 800de22:	2000      	movs	r0, #0
 800de24:	f7ff f95e 	bl	800d0e4 <tcp_recv_null>
 800de28:	4603      	mov	r3, r0
 800de2a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800de2c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de30:	f113 0f0d 	cmn.w	r3, #13
 800de34:	d053      	beq.n	800dede <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800de36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d003      	beq.n	800de46 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800de3e:	4b2c      	ldr	r3, [pc, #176]	; (800def0 <tcp_input+0x72c>)
 800de40:	681a      	ldr	r2, [r3, #0]
 800de42:	69fb      	ldr	r3, [r7, #28]
 800de44:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800de46:	4b2b      	ldr	r3, [pc, #172]	; (800def4 <tcp_input+0x730>)
 800de48:	781b      	ldrb	r3, [r3, #0]
 800de4a:	f003 0320 	and.w	r3, r3, #32
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d030      	beq.n	800deb4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800de52:	69fb      	ldr	r3, [r7, #28]
 800de54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de56:	2b00      	cmp	r3, #0
 800de58:	d009      	beq.n	800de6e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800de5a:	69fb      	ldr	r3, [r7, #28]
 800de5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de5e:	7b5a      	ldrb	r2, [r3, #13]
 800de60:	69fb      	ldr	r3, [r7, #28]
 800de62:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800de64:	f042 0220 	orr.w	r2, r2, #32
 800de68:	b2d2      	uxtb	r2, r2
 800de6a:	735a      	strb	r2, [r3, #13]
 800de6c:	e022      	b.n	800deb4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800de6e:	69fb      	ldr	r3, [r7, #28]
 800de70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de72:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800de76:	d005      	beq.n	800de84 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800de78:	69fb      	ldr	r3, [r7, #28]
 800de7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800de7c:	3301      	adds	r3, #1
 800de7e:	b29a      	uxth	r2, r3
 800de80:	69fb      	ldr	r3, [r7, #28]
 800de82:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800de84:	69fb      	ldr	r3, [r7, #28]
 800de86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d00b      	beq.n	800dea6 <tcp_input+0x6e2>
 800de8e:	69fb      	ldr	r3, [r7, #28]
 800de90:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800de94:	69fb      	ldr	r3, [r7, #28]
 800de96:	6918      	ldr	r0, [r3, #16]
 800de98:	2300      	movs	r3, #0
 800de9a:	2200      	movs	r2, #0
 800de9c:	69f9      	ldr	r1, [r7, #28]
 800de9e:	47a0      	blx	r4
 800dea0:	4603      	mov	r3, r0
 800dea2:	74fb      	strb	r3, [r7, #19]
 800dea4:	e001      	b.n	800deaa <tcp_input+0x6e6>
 800dea6:	2300      	movs	r3, #0
 800dea8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800deaa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800deae:	f113 0f0d 	cmn.w	r3, #13
 800deb2:	d016      	beq.n	800dee2 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800deb4:	4b13      	ldr	r3, [pc, #76]	; (800df04 <tcp_input+0x740>)
 800deb6:	2200      	movs	r2, #0
 800deb8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800deba:	69f8      	ldr	r0, [r7, #28]
 800debc:	f000 f88e 	bl	800dfdc <tcp_input_delayed_close>
 800dec0:	4603      	mov	r3, r0
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	d128      	bne.n	800df18 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800dec6:	69f8      	ldr	r0, [r7, #28]
 800dec8:	f002 fac8 	bl	801045c <tcp_output>
 800decc:	e025      	b.n	800df1a <tcp_input+0x756>
        goto aborted;
 800dece:	bf00      	nop
 800ded0:	e023      	b.n	800df1a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ded2:	bf00      	nop
 800ded4:	e021      	b.n	800df1a <tcp_input+0x756>
              goto aborted;
 800ded6:	bf00      	nop
 800ded8:	e01f      	b.n	800df1a <tcp_input+0x756>
          goto aborted;
 800deda:	bf00      	nop
 800dedc:	e01d      	b.n	800df1a <tcp_input+0x756>
            goto aborted;
 800dede:	bf00      	nop
 800dee0:	e01b      	b.n	800df1a <tcp_input+0x756>
              goto aborted;
 800dee2:	bf00      	nop
 800dee4:	e019      	b.n	800df1a <tcp_input+0x756>
 800dee6:	bf00      	nop
 800dee8:	2000f21c 	.word	0x2000f21c
 800deec:	2000f22c 	.word	0x2000f22c
 800def0:	2000f24c 	.word	0x2000f24c
 800def4:	2000f249 	.word	0x2000f249
 800def8:	2000f244 	.word	0x2000f244
 800defc:	2000f248 	.word	0x2000f248
 800df00:	2000f246 	.word	0x2000f246
 800df04:	2000f250 	.word	0x2000f250
 800df08:	2000f210 	.word	0x2000f210
 800df0c:	08018a14 	.word	0x08018a14
 800df10:	08018bc8 	.word	0x08018bc8
 800df14:	08018a60 	.word	0x08018a60
          goto aborted;
 800df18:	bf00      	nop
    tcp_input_pcb = NULL;
 800df1a:	4b27      	ldr	r3, [pc, #156]	; (800dfb8 <tcp_input+0x7f4>)
 800df1c:	2200      	movs	r2, #0
 800df1e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800df20:	4b26      	ldr	r3, [pc, #152]	; (800dfbc <tcp_input+0x7f8>)
 800df22:	2200      	movs	r2, #0
 800df24:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800df26:	4b26      	ldr	r3, [pc, #152]	; (800dfc0 <tcp_input+0x7fc>)
 800df28:	685b      	ldr	r3, [r3, #4]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d03f      	beq.n	800dfae <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800df2e:	4b24      	ldr	r3, [pc, #144]	; (800dfc0 <tcp_input+0x7fc>)
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	4618      	mov	r0, r3
 800df34:	f7fd fe02 	bl	800bb3c <pbuf_free>
      inseg.p = NULL;
 800df38:	4b21      	ldr	r3, [pc, #132]	; (800dfc0 <tcp_input+0x7fc>)
 800df3a:	2200      	movs	r2, #0
 800df3c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800df3e:	e036      	b.n	800dfae <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800df40:	4b20      	ldr	r3, [pc, #128]	; (800dfc4 <tcp_input+0x800>)
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	899b      	ldrh	r3, [r3, #12]
 800df46:	b29b      	uxth	r3, r3
 800df48:	4618      	mov	r0, r3
 800df4a:	f7fc f9f9 	bl	800a340 <lwip_htons>
 800df4e:	4603      	mov	r3, r0
 800df50:	b2db      	uxtb	r3, r3
 800df52:	f003 0304 	and.w	r3, r3, #4
 800df56:	2b00      	cmp	r3, #0
 800df58:	d118      	bne.n	800df8c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df5a:	4b1b      	ldr	r3, [pc, #108]	; (800dfc8 <tcp_input+0x804>)
 800df5c:	6819      	ldr	r1, [r3, #0]
 800df5e:	4b1b      	ldr	r3, [pc, #108]	; (800dfcc <tcp_input+0x808>)
 800df60:	881b      	ldrh	r3, [r3, #0]
 800df62:	461a      	mov	r2, r3
 800df64:	4b1a      	ldr	r3, [pc, #104]	; (800dfd0 <tcp_input+0x80c>)
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df6a:	4b16      	ldr	r3, [pc, #88]	; (800dfc4 <tcp_input+0x800>)
 800df6c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df6e:	885b      	ldrh	r3, [r3, #2]
 800df70:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800df72:	4a14      	ldr	r2, [pc, #80]	; (800dfc4 <tcp_input+0x800>)
 800df74:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800df76:	8812      	ldrh	r2, [r2, #0]
 800df78:	b292      	uxth	r2, r2
 800df7a:	9202      	str	r2, [sp, #8]
 800df7c:	9301      	str	r3, [sp, #4]
 800df7e:	4b15      	ldr	r3, [pc, #84]	; (800dfd4 <tcp_input+0x810>)
 800df80:	9300      	str	r3, [sp, #0]
 800df82:	4b15      	ldr	r3, [pc, #84]	; (800dfd8 <tcp_input+0x814>)
 800df84:	4602      	mov	r2, r0
 800df86:	2000      	movs	r0, #0
 800df88:	f003 f81c 	bl	8010fc4 <tcp_rst>
    pbuf_free(p);
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f7fd fdd5 	bl	800bb3c <pbuf_free>
  return;
 800df92:	e00c      	b.n	800dfae <tcp_input+0x7ea>
    goto dropped;
 800df94:	bf00      	nop
 800df96:	e006      	b.n	800dfa6 <tcp_input+0x7e2>
    goto dropped;
 800df98:	bf00      	nop
 800df9a:	e004      	b.n	800dfa6 <tcp_input+0x7e2>
    goto dropped;
 800df9c:	bf00      	nop
 800df9e:	e002      	b.n	800dfa6 <tcp_input+0x7e2>
      goto dropped;
 800dfa0:	bf00      	nop
 800dfa2:	e000      	b.n	800dfa6 <tcp_input+0x7e2>
      goto dropped;
 800dfa4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800dfa6:	6878      	ldr	r0, [r7, #4]
 800dfa8:	f7fd fdc8 	bl	800bb3c <pbuf_free>
 800dfac:	e000      	b.n	800dfb0 <tcp_input+0x7ec>
  return;
 800dfae:	bf00      	nop
}
 800dfb0:	3724      	adds	r7, #36	; 0x24
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd90      	pop	{r4, r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	2000f250 	.word	0x2000f250
 800dfbc:	2000f24c 	.word	0x2000f24c
 800dfc0:	2000f21c 	.word	0x2000f21c
 800dfc4:	2000f22c 	.word	0x2000f22c
 800dfc8:	2000f240 	.word	0x2000f240
 800dfcc:	2000f246 	.word	0x2000f246
 800dfd0:	2000f23c 	.word	0x2000f23c
 800dfd4:	200098e0 	.word	0x200098e0
 800dfd8:	200098e4 	.word	0x200098e4

0800dfdc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800dfdc:	b580      	push	{r7, lr}
 800dfde:	b082      	sub	sp, #8
 800dfe0:	af00      	add	r7, sp, #0
 800dfe2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d106      	bne.n	800dff8 <tcp_input_delayed_close+0x1c>
 800dfea:	4b17      	ldr	r3, [pc, #92]	; (800e048 <tcp_input_delayed_close+0x6c>)
 800dfec:	f240 225a 	movw	r2, #602	; 0x25a
 800dff0:	4916      	ldr	r1, [pc, #88]	; (800e04c <tcp_input_delayed_close+0x70>)
 800dff2:	4817      	ldr	r0, [pc, #92]	; (800e050 <tcp_input_delayed_close+0x74>)
 800dff4:	f008 fc24 	bl	8016840 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800dff8:	4b16      	ldr	r3, [pc, #88]	; (800e054 <tcp_input_delayed_close+0x78>)
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	f003 0310 	and.w	r3, r3, #16
 800e000:	2b00      	cmp	r3, #0
 800e002:	d01c      	beq.n	800e03e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	8b5b      	ldrh	r3, [r3, #26]
 800e008:	f003 0310 	and.w	r3, r3, #16
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d10d      	bne.n	800e02c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e016:	2b00      	cmp	r3, #0
 800e018:	d008      	beq.n	800e02c <tcp_input_delayed_close+0x50>
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e020:	687a      	ldr	r2, [r7, #4]
 800e022:	6912      	ldr	r2, [r2, #16]
 800e024:	f06f 010e 	mvn.w	r1, #14
 800e028:	4610      	mov	r0, r2
 800e02a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e02c:	6879      	ldr	r1, [r7, #4]
 800e02e:	480a      	ldr	r0, [pc, #40]	; (800e058 <tcp_input_delayed_close+0x7c>)
 800e030:	f7ff fa50 	bl	800d4d4 <tcp_pcb_remove>
    tcp_free(pcb);
 800e034:	6878      	ldr	r0, [r7, #4]
 800e036:	f7fe f83d 	bl	800c0b4 <tcp_free>
    return 1;
 800e03a:	2301      	movs	r3, #1
 800e03c:	e000      	b.n	800e040 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800e03e:	2300      	movs	r3, #0
}
 800e040:	4618      	mov	r0, r3
 800e042:	3708      	adds	r7, #8
 800e044:	46bd      	mov	sp, r7
 800e046:	bd80      	pop	{r7, pc}
 800e048:	08018a14 	.word	0x08018a14
 800e04c:	08018be4 	.word	0x08018be4
 800e050:	08018a60 	.word	0x08018a60
 800e054:	2000f249 	.word	0x2000f249
 800e058:	2000f210 	.word	0x2000f210

0800e05c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800e05c:	b590      	push	{r4, r7, lr}
 800e05e:	b08b      	sub	sp, #44	; 0x2c
 800e060:	af04      	add	r7, sp, #16
 800e062:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800e064:	4b6f      	ldr	r3, [pc, #444]	; (800e224 <tcp_listen_input+0x1c8>)
 800e066:	781b      	ldrb	r3, [r3, #0]
 800e068:	f003 0304 	and.w	r3, r3, #4
 800e06c:	2b00      	cmp	r3, #0
 800e06e:	f040 80d2 	bne.w	800e216 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d106      	bne.n	800e086 <tcp_listen_input+0x2a>
 800e078:	4b6b      	ldr	r3, [pc, #428]	; (800e228 <tcp_listen_input+0x1cc>)
 800e07a:	f240 2281 	movw	r2, #641	; 0x281
 800e07e:	496b      	ldr	r1, [pc, #428]	; (800e22c <tcp_listen_input+0x1d0>)
 800e080:	486b      	ldr	r0, [pc, #428]	; (800e230 <tcp_listen_input+0x1d4>)
 800e082:	f008 fbdd 	bl	8016840 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800e086:	4b67      	ldr	r3, [pc, #412]	; (800e224 <tcp_listen_input+0x1c8>)
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	f003 0310 	and.w	r3, r3, #16
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d019      	beq.n	800e0c6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e092:	4b68      	ldr	r3, [pc, #416]	; (800e234 <tcp_listen_input+0x1d8>)
 800e094:	6819      	ldr	r1, [r3, #0]
 800e096:	4b68      	ldr	r3, [pc, #416]	; (800e238 <tcp_listen_input+0x1dc>)
 800e098:	881b      	ldrh	r3, [r3, #0]
 800e09a:	461a      	mov	r2, r3
 800e09c:	4b67      	ldr	r3, [pc, #412]	; (800e23c <tcp_listen_input+0x1e0>)
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e0a2:	4b67      	ldr	r3, [pc, #412]	; (800e240 <tcp_listen_input+0x1e4>)
 800e0a4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0a6:	885b      	ldrh	r3, [r3, #2]
 800e0a8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e0aa:	4a65      	ldr	r2, [pc, #404]	; (800e240 <tcp_listen_input+0x1e4>)
 800e0ac:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e0ae:	8812      	ldrh	r2, [r2, #0]
 800e0b0:	b292      	uxth	r2, r2
 800e0b2:	9202      	str	r2, [sp, #8]
 800e0b4:	9301      	str	r3, [sp, #4]
 800e0b6:	4b63      	ldr	r3, [pc, #396]	; (800e244 <tcp_listen_input+0x1e8>)
 800e0b8:	9300      	str	r3, [sp, #0]
 800e0ba:	4b63      	ldr	r3, [pc, #396]	; (800e248 <tcp_listen_input+0x1ec>)
 800e0bc:	4602      	mov	r2, r0
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f002 ff80 	bl	8010fc4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800e0c4:	e0a9      	b.n	800e21a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800e0c6:	4b57      	ldr	r3, [pc, #348]	; (800e224 <tcp_listen_input+0x1c8>)
 800e0c8:	781b      	ldrb	r3, [r3, #0]
 800e0ca:	f003 0302 	and.w	r3, r3, #2
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	f000 80a3 	beq.w	800e21a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	7d5b      	ldrb	r3, [r3, #21]
 800e0d8:	4618      	mov	r0, r3
 800e0da:	f7ff f927 	bl	800d32c <tcp_alloc>
 800e0de:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	2b00      	cmp	r3, #0
 800e0e4:	d111      	bne.n	800e10a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e0e6:	687b      	ldr	r3, [r7, #4]
 800e0e8:	699b      	ldr	r3, [r3, #24]
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d00a      	beq.n	800e104 <tcp_listen_input+0xa8>
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	699b      	ldr	r3, [r3, #24]
 800e0f2:	687a      	ldr	r2, [r7, #4]
 800e0f4:	6910      	ldr	r0, [r2, #16]
 800e0f6:	f04f 32ff 	mov.w	r2, #4294967295
 800e0fa:	2100      	movs	r1, #0
 800e0fc:	4798      	blx	r3
 800e0fe:	4603      	mov	r3, r0
 800e100:	73bb      	strb	r3, [r7, #14]
      return;
 800e102:	e08b      	b.n	800e21c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800e104:	23f0      	movs	r3, #240	; 0xf0
 800e106:	73bb      	strb	r3, [r7, #14]
      return;
 800e108:	e088      	b.n	800e21c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800e10a:	4b50      	ldr	r3, [pc, #320]	; (800e24c <tcp_listen_input+0x1f0>)
 800e10c:	695a      	ldr	r2, [r3, #20]
 800e10e:	697b      	ldr	r3, [r7, #20]
 800e110:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800e112:	4b4e      	ldr	r3, [pc, #312]	; (800e24c <tcp_listen_input+0x1f0>)
 800e114:	691a      	ldr	r2, [r3, #16]
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	8ada      	ldrh	r2, [r3, #22]
 800e11e:	697b      	ldr	r3, [r7, #20]
 800e120:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800e122:	4b47      	ldr	r3, [pc, #284]	; (800e240 <tcp_listen_input+0x1e4>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	881b      	ldrh	r3, [r3, #0]
 800e128:	b29a      	uxth	r2, r3
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800e12e:	697b      	ldr	r3, [r7, #20]
 800e130:	2203      	movs	r2, #3
 800e132:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800e134:	4b41      	ldr	r3, [pc, #260]	; (800e23c <tcp_listen_input+0x1e0>)
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	1c5a      	adds	r2, r3, #1
 800e13a:	697b      	ldr	r3, [r7, #20]
 800e13c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800e13e:	697b      	ldr	r3, [r7, #20]
 800e140:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e142:	697b      	ldr	r3, [r7, #20]
 800e144:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800e146:	6978      	ldr	r0, [r7, #20]
 800e148:	f7ff fa58 	bl	800d5fc <tcp_next_iss>
 800e14c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800e14e:	697b      	ldr	r3, [r7, #20]
 800e150:	693a      	ldr	r2, [r7, #16]
 800e152:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800e154:	697b      	ldr	r3, [r7, #20]
 800e156:	693a      	ldr	r2, [r7, #16]
 800e158:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800e15a:	697b      	ldr	r3, [r7, #20]
 800e15c:	693a      	ldr	r2, [r7, #16]
 800e15e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800e160:	697b      	ldr	r3, [r7, #20]
 800e162:	693a      	ldr	r2, [r7, #16]
 800e164:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800e166:	4b35      	ldr	r3, [pc, #212]	; (800e23c <tcp_listen_input+0x1e0>)
 800e168:	681b      	ldr	r3, [r3, #0]
 800e16a:	1e5a      	subs	r2, r3, #1
 800e16c:	697b      	ldr	r3, [r7, #20]
 800e16e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800e170:	687b      	ldr	r3, [r7, #4]
 800e172:	691a      	ldr	r2, [r3, #16]
 800e174:	697b      	ldr	r3, [r7, #20]
 800e176:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800e178:	697b      	ldr	r3, [r7, #20]
 800e17a:	687a      	ldr	r2, [r7, #4]
 800e17c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	7a5b      	ldrb	r3, [r3, #9]
 800e182:	f003 030c 	and.w	r3, r3, #12
 800e186:	b2da      	uxtb	r2, r3
 800e188:	697b      	ldr	r3, [r7, #20]
 800e18a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	7a1a      	ldrb	r2, [r3, #8]
 800e190:	697b      	ldr	r3, [r7, #20]
 800e192:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800e194:	4b2e      	ldr	r3, [pc, #184]	; (800e250 <tcp_listen_input+0x1f4>)
 800e196:	681a      	ldr	r2, [r3, #0]
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	60da      	str	r2, [r3, #12]
 800e19c:	4a2c      	ldr	r2, [pc, #176]	; (800e250 <tcp_listen_input+0x1f4>)
 800e19e:	697b      	ldr	r3, [r7, #20]
 800e1a0:	6013      	str	r3, [r2, #0]
 800e1a2:	f003 f8d1 	bl	8011348 <tcp_timer_needed>
 800e1a6:	4b2b      	ldr	r3, [pc, #172]	; (800e254 <tcp_listen_input+0x1f8>)
 800e1a8:	2201      	movs	r2, #1
 800e1aa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800e1ac:	6978      	ldr	r0, [r7, #20]
 800e1ae:	f001 fd8f 	bl	800fcd0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800e1b2:	4b23      	ldr	r3, [pc, #140]	; (800e240 <tcp_listen_input+0x1e4>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	89db      	ldrh	r3, [r3, #14]
 800e1b8:	b29a      	uxth	r2, r3
 800e1ba:	697b      	ldr	r3, [r7, #20]
 800e1bc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800e1c0:	697b      	ldr	r3, [r7, #20]
 800e1c2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e1c6:	697b      	ldr	r3, [r7, #20]
 800e1c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800e1cc:	697b      	ldr	r3, [r7, #20]
 800e1ce:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e1d0:	697b      	ldr	r3, [r7, #20]
 800e1d2:	3304      	adds	r3, #4
 800e1d4:	4618      	mov	r0, r3
 800e1d6:	f006 fe5f 	bl	8014e98 <ip4_route>
 800e1da:	4601      	mov	r1, r0
 800e1dc:	697b      	ldr	r3, [r7, #20]
 800e1de:	3304      	adds	r3, #4
 800e1e0:	461a      	mov	r2, r3
 800e1e2:	4620      	mov	r0, r4
 800e1e4:	f7ff fa30 	bl	800d648 <tcp_eff_send_mss_netif>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	461a      	mov	r2, r3
 800e1ec:	697b      	ldr	r3, [r7, #20]
 800e1ee:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800e1f0:	2112      	movs	r1, #18
 800e1f2:	6978      	ldr	r0, [r7, #20]
 800e1f4:	f002 f844 	bl	8010280 <tcp_enqueue_flags>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800e1fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d004      	beq.n	800e20e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800e204:	2100      	movs	r1, #0
 800e206:	6978      	ldr	r0, [r7, #20]
 800e208:	f7fe f97e 	bl	800c508 <tcp_abandon>
      return;
 800e20c:	e006      	b.n	800e21c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800e20e:	6978      	ldr	r0, [r7, #20]
 800e210:	f002 f924 	bl	801045c <tcp_output>
  return;
 800e214:	e001      	b.n	800e21a <tcp_listen_input+0x1be>
    return;
 800e216:	bf00      	nop
 800e218:	e000      	b.n	800e21c <tcp_listen_input+0x1c0>
  return;
 800e21a:	bf00      	nop
}
 800e21c:	371c      	adds	r7, #28
 800e21e:	46bd      	mov	sp, r7
 800e220:	bd90      	pop	{r4, r7, pc}
 800e222:	bf00      	nop
 800e224:	2000f248 	.word	0x2000f248
 800e228:	08018a14 	.word	0x08018a14
 800e22c:	08018c0c 	.word	0x08018c0c
 800e230:	08018a60 	.word	0x08018a60
 800e234:	2000f240 	.word	0x2000f240
 800e238:	2000f246 	.word	0x2000f246
 800e23c:	2000f23c 	.word	0x2000f23c
 800e240:	2000f22c 	.word	0x2000f22c
 800e244:	200098e0 	.word	0x200098e0
 800e248:	200098e4 	.word	0x200098e4
 800e24c:	200098d0 	.word	0x200098d0
 800e250:	2000f210 	.word	0x2000f210
 800e254:	2000f218 	.word	0x2000f218

0800e258 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b086      	sub	sp, #24
 800e25c:	af04      	add	r7, sp, #16
 800e25e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800e260:	4b2f      	ldr	r3, [pc, #188]	; (800e320 <tcp_timewait_input+0xc8>)
 800e262:	781b      	ldrb	r3, [r3, #0]
 800e264:	f003 0304 	and.w	r3, r3, #4
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d153      	bne.n	800e314 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d106      	bne.n	800e280 <tcp_timewait_input+0x28>
 800e272:	4b2c      	ldr	r3, [pc, #176]	; (800e324 <tcp_timewait_input+0xcc>)
 800e274:	f240 22ee 	movw	r2, #750	; 0x2ee
 800e278:	492b      	ldr	r1, [pc, #172]	; (800e328 <tcp_timewait_input+0xd0>)
 800e27a:	482c      	ldr	r0, [pc, #176]	; (800e32c <tcp_timewait_input+0xd4>)
 800e27c:	f008 fae0 	bl	8016840 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800e280:	4b27      	ldr	r3, [pc, #156]	; (800e320 <tcp_timewait_input+0xc8>)
 800e282:	781b      	ldrb	r3, [r3, #0]
 800e284:	f003 0302 	and.w	r3, r3, #2
 800e288:	2b00      	cmp	r3, #0
 800e28a:	d02a      	beq.n	800e2e2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800e28c:	4b28      	ldr	r3, [pc, #160]	; (800e330 <tcp_timewait_input+0xd8>)
 800e28e:	681a      	ldr	r2, [r3, #0]
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e294:	1ad3      	subs	r3, r2, r3
 800e296:	2b00      	cmp	r3, #0
 800e298:	db2d      	blt.n	800e2f6 <tcp_timewait_input+0x9e>
 800e29a:	4b25      	ldr	r3, [pc, #148]	; (800e330 <tcp_timewait_input+0xd8>)
 800e29c:	681a      	ldr	r2, [r3, #0]
 800e29e:	687b      	ldr	r3, [r7, #4]
 800e2a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e2a2:	6879      	ldr	r1, [r7, #4]
 800e2a4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e2a6:	440b      	add	r3, r1
 800e2a8:	1ad3      	subs	r3, r2, r3
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	dc23      	bgt.n	800e2f6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2ae:	4b21      	ldr	r3, [pc, #132]	; (800e334 <tcp_timewait_input+0xdc>)
 800e2b0:	6819      	ldr	r1, [r3, #0]
 800e2b2:	4b21      	ldr	r3, [pc, #132]	; (800e338 <tcp_timewait_input+0xe0>)
 800e2b4:	881b      	ldrh	r3, [r3, #0]
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	4b1d      	ldr	r3, [pc, #116]	; (800e330 <tcp_timewait_input+0xd8>)
 800e2ba:	681b      	ldr	r3, [r3, #0]
 800e2bc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2be:	4b1f      	ldr	r3, [pc, #124]	; (800e33c <tcp_timewait_input+0xe4>)
 800e2c0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2c2:	885b      	ldrh	r3, [r3, #2]
 800e2c4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e2c6:	4a1d      	ldr	r2, [pc, #116]	; (800e33c <tcp_timewait_input+0xe4>)
 800e2c8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e2ca:	8812      	ldrh	r2, [r2, #0]
 800e2cc:	b292      	uxth	r2, r2
 800e2ce:	9202      	str	r2, [sp, #8]
 800e2d0:	9301      	str	r3, [sp, #4]
 800e2d2:	4b1b      	ldr	r3, [pc, #108]	; (800e340 <tcp_timewait_input+0xe8>)
 800e2d4:	9300      	str	r3, [sp, #0]
 800e2d6:	4b1b      	ldr	r3, [pc, #108]	; (800e344 <tcp_timewait_input+0xec>)
 800e2d8:	4602      	mov	r2, r0
 800e2da:	6878      	ldr	r0, [r7, #4]
 800e2dc:	f002 fe72 	bl	8010fc4 <tcp_rst>
      return;
 800e2e0:	e01b      	b.n	800e31a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800e2e2:	4b0f      	ldr	r3, [pc, #60]	; (800e320 <tcp_timewait_input+0xc8>)
 800e2e4:	781b      	ldrb	r3, [r3, #0]
 800e2e6:	f003 0301 	and.w	r3, r3, #1
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d003      	beq.n	800e2f6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800e2ee:	4b16      	ldr	r3, [pc, #88]	; (800e348 <tcp_timewait_input+0xf0>)
 800e2f0:	681a      	ldr	r2, [r3, #0]
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800e2f6:	4b10      	ldr	r3, [pc, #64]	; (800e338 <tcp_timewait_input+0xe0>)
 800e2f8:	881b      	ldrh	r3, [r3, #0]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d00c      	beq.n	800e318 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	8b5b      	ldrh	r3, [r3, #26]
 800e302:	f043 0302 	orr.w	r3, r3, #2
 800e306:	b29a      	uxth	r2, r3
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e30c:	6878      	ldr	r0, [r7, #4]
 800e30e:	f002 f8a5 	bl	801045c <tcp_output>
  }
  return;
 800e312:	e001      	b.n	800e318 <tcp_timewait_input+0xc0>
    return;
 800e314:	bf00      	nop
 800e316:	e000      	b.n	800e31a <tcp_timewait_input+0xc2>
  return;
 800e318:	bf00      	nop
}
 800e31a:	3708      	adds	r7, #8
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}
 800e320:	2000f248 	.word	0x2000f248
 800e324:	08018a14 	.word	0x08018a14
 800e328:	08018c2c 	.word	0x08018c2c
 800e32c:	08018a60 	.word	0x08018a60
 800e330:	2000f23c 	.word	0x2000f23c
 800e334:	2000f240 	.word	0x2000f240
 800e338:	2000f246 	.word	0x2000f246
 800e33c:	2000f22c 	.word	0x2000f22c
 800e340:	200098e0 	.word	0x200098e0
 800e344:	200098e4 	.word	0x200098e4
 800e348:	2000f204 	.word	0x2000f204

0800e34c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800e34c:	b590      	push	{r4, r7, lr}
 800e34e:	b08d      	sub	sp, #52	; 0x34
 800e350:	af04      	add	r7, sp, #16
 800e352:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800e354:	2300      	movs	r3, #0
 800e356:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800e358:	2300      	movs	r3, #0
 800e35a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d106      	bne.n	800e370 <tcp_process+0x24>
 800e362:	4b9d      	ldr	r3, [pc, #628]	; (800e5d8 <tcp_process+0x28c>)
 800e364:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800e368:	499c      	ldr	r1, [pc, #624]	; (800e5dc <tcp_process+0x290>)
 800e36a:	489d      	ldr	r0, [pc, #628]	; (800e5e0 <tcp_process+0x294>)
 800e36c:	f008 fa68 	bl	8016840 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800e370:	4b9c      	ldr	r3, [pc, #624]	; (800e5e4 <tcp_process+0x298>)
 800e372:	781b      	ldrb	r3, [r3, #0]
 800e374:	f003 0304 	and.w	r3, r3, #4
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d04e      	beq.n	800e41a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	7d1b      	ldrb	r3, [r3, #20]
 800e380:	2b02      	cmp	r3, #2
 800e382:	d108      	bne.n	800e396 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e388:	4b97      	ldr	r3, [pc, #604]	; (800e5e8 <tcp_process+0x29c>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	429a      	cmp	r2, r3
 800e38e:	d123      	bne.n	800e3d8 <tcp_process+0x8c>
        acceptable = 1;
 800e390:	2301      	movs	r3, #1
 800e392:	76fb      	strb	r3, [r7, #27]
 800e394:	e020      	b.n	800e3d8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e39a:	4b94      	ldr	r3, [pc, #592]	; (800e5ec <tcp_process+0x2a0>)
 800e39c:	681b      	ldr	r3, [r3, #0]
 800e39e:	429a      	cmp	r2, r3
 800e3a0:	d102      	bne.n	800e3a8 <tcp_process+0x5c>
        acceptable = 1;
 800e3a2:	2301      	movs	r3, #1
 800e3a4:	76fb      	strb	r3, [r7, #27]
 800e3a6:	e017      	b.n	800e3d8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800e3a8:	4b90      	ldr	r3, [pc, #576]	; (800e5ec <tcp_process+0x2a0>)
 800e3aa:	681a      	ldr	r2, [r3, #0]
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3b0:	1ad3      	subs	r3, r2, r3
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	db10      	blt.n	800e3d8 <tcp_process+0x8c>
 800e3b6:	4b8d      	ldr	r3, [pc, #564]	; (800e5ec <tcp_process+0x2a0>)
 800e3b8:	681a      	ldr	r2, [r3, #0]
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e3be:	6879      	ldr	r1, [r7, #4]
 800e3c0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800e3c2:	440b      	add	r3, r1
 800e3c4:	1ad3      	subs	r3, r2, r3
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	dc06      	bgt.n	800e3d8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	8b5b      	ldrh	r3, [r3, #26]
 800e3ce:	f043 0302 	orr.w	r3, r3, #2
 800e3d2:	b29a      	uxth	r2, r3
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800e3d8:	7efb      	ldrb	r3, [r7, #27]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d01b      	beq.n	800e416 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	7d1b      	ldrb	r3, [r3, #20]
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d106      	bne.n	800e3f4 <tcp_process+0xa8>
 800e3e6:	4b7c      	ldr	r3, [pc, #496]	; (800e5d8 <tcp_process+0x28c>)
 800e3e8:	f44f 724e 	mov.w	r2, #824	; 0x338
 800e3ec:	4980      	ldr	r1, [pc, #512]	; (800e5f0 <tcp_process+0x2a4>)
 800e3ee:	487c      	ldr	r0, [pc, #496]	; (800e5e0 <tcp_process+0x294>)
 800e3f0:	f008 fa26 	bl	8016840 <iprintf>
      recv_flags |= TF_RESET;
 800e3f4:	4b7f      	ldr	r3, [pc, #508]	; (800e5f4 <tcp_process+0x2a8>)
 800e3f6:	781b      	ldrb	r3, [r3, #0]
 800e3f8:	f043 0308 	orr.w	r3, r3, #8
 800e3fc:	b2da      	uxtb	r2, r3
 800e3fe:	4b7d      	ldr	r3, [pc, #500]	; (800e5f4 <tcp_process+0x2a8>)
 800e400:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	8b5b      	ldrh	r3, [r3, #26]
 800e406:	f023 0301 	bic.w	r3, r3, #1
 800e40a:	b29a      	uxth	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800e410:	f06f 030d 	mvn.w	r3, #13
 800e414:	e37a      	b.n	800eb0c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800e416:	2300      	movs	r3, #0
 800e418:	e378      	b.n	800eb0c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800e41a:	4b72      	ldr	r3, [pc, #456]	; (800e5e4 <tcp_process+0x298>)
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	f003 0302 	and.w	r3, r3, #2
 800e422:	2b00      	cmp	r3, #0
 800e424:	d010      	beq.n	800e448 <tcp_process+0xfc>
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	7d1b      	ldrb	r3, [r3, #20]
 800e42a:	2b02      	cmp	r3, #2
 800e42c:	d00c      	beq.n	800e448 <tcp_process+0xfc>
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	7d1b      	ldrb	r3, [r3, #20]
 800e432:	2b03      	cmp	r3, #3
 800e434:	d008      	beq.n	800e448 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800e436:	687b      	ldr	r3, [r7, #4]
 800e438:	8b5b      	ldrh	r3, [r3, #26]
 800e43a:	f043 0302 	orr.w	r3, r3, #2
 800e43e:	b29a      	uxth	r2, r3
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800e444:	2300      	movs	r3, #0
 800e446:	e361      	b.n	800eb0c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	8b5b      	ldrh	r3, [r3, #26]
 800e44c:	f003 0310 	and.w	r3, r3, #16
 800e450:	2b00      	cmp	r3, #0
 800e452:	d103      	bne.n	800e45c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800e454:	4b68      	ldr	r3, [pc, #416]	; (800e5f8 <tcp_process+0x2ac>)
 800e456:	681a      	ldr	r2, [r3, #0]
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800e45c:	687b      	ldr	r3, [r7, #4]
 800e45e:	2200      	movs	r2, #0
 800e460:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	2200      	movs	r2, #0
 800e468:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800e46c:	6878      	ldr	r0, [r7, #4]
 800e46e:	f001 fc2f 	bl	800fcd0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	7d1b      	ldrb	r3, [r3, #20]
 800e476:	3b02      	subs	r3, #2
 800e478:	2b07      	cmp	r3, #7
 800e47a:	f200 8337 	bhi.w	800eaec <tcp_process+0x7a0>
 800e47e:	a201      	add	r2, pc, #4	; (adr r2, 800e484 <tcp_process+0x138>)
 800e480:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e484:	0800e4a5 	.word	0x0800e4a5
 800e488:	0800e6d5 	.word	0x0800e6d5
 800e48c:	0800e84d 	.word	0x0800e84d
 800e490:	0800e877 	.word	0x0800e877
 800e494:	0800e99b 	.word	0x0800e99b
 800e498:	0800e84d 	.word	0x0800e84d
 800e49c:	0800ea27 	.word	0x0800ea27
 800e4a0:	0800eab7 	.word	0x0800eab7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800e4a4:	4b4f      	ldr	r3, [pc, #316]	; (800e5e4 <tcp_process+0x298>)
 800e4a6:	781b      	ldrb	r3, [r3, #0]
 800e4a8:	f003 0310 	and.w	r3, r3, #16
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	f000 80e4 	beq.w	800e67a <tcp_process+0x32e>
 800e4b2:	4b4c      	ldr	r3, [pc, #304]	; (800e5e4 <tcp_process+0x298>)
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	f003 0302 	and.w	r3, r3, #2
 800e4ba:	2b00      	cmp	r3, #0
 800e4bc:	f000 80dd 	beq.w	800e67a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e4c4:	1c5a      	adds	r2, r3, #1
 800e4c6:	4b48      	ldr	r3, [pc, #288]	; (800e5e8 <tcp_process+0x29c>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	429a      	cmp	r2, r3
 800e4cc:	f040 80d5 	bne.w	800e67a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800e4d0:	4b46      	ldr	r3, [pc, #280]	; (800e5ec <tcp_process+0x2a0>)
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	1c5a      	adds	r2, r3, #1
 800e4d6:	687b      	ldr	r3, [r7, #4]
 800e4d8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e4de:	687b      	ldr	r3, [r7, #4]
 800e4e0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800e4e2:	4b41      	ldr	r3, [pc, #260]	; (800e5e8 <tcp_process+0x29c>)
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800e4ea:	4b44      	ldr	r3, [pc, #272]	; (800e5fc <tcp_process+0x2b0>)
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	89db      	ldrh	r3, [r3, #14]
 800e4f0:	b29a      	uxth	r2, r3
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800e504:	4b39      	ldr	r3, [pc, #228]	; (800e5ec <tcp_process+0x2a0>)
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	1e5a      	subs	r2, r3, #1
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2204      	movs	r2, #4
 800e512:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	3304      	adds	r3, #4
 800e51c:	4618      	mov	r0, r3
 800e51e:	f006 fcbb 	bl	8014e98 <ip4_route>
 800e522:	4601      	mov	r1, r0
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	3304      	adds	r3, #4
 800e528:	461a      	mov	r2, r3
 800e52a:	4620      	mov	r0, r4
 800e52c:	f7ff f88c 	bl	800d648 <tcp_eff_send_mss_netif>
 800e530:	4603      	mov	r3, r0
 800e532:	461a      	mov	r2, r3
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e53c:	009a      	lsls	r2, r3, #2
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e542:	005b      	lsls	r3, r3, #1
 800e544:	f241 111c 	movw	r1, #4380	; 0x111c
 800e548:	428b      	cmp	r3, r1
 800e54a:	bf38      	it	cc
 800e54c:	460b      	movcc	r3, r1
 800e54e:	429a      	cmp	r2, r3
 800e550:	d204      	bcs.n	800e55c <tcp_process+0x210>
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e556:	009b      	lsls	r3, r3, #2
 800e558:	b29b      	uxth	r3, r3
 800e55a:	e00d      	b.n	800e578 <tcp_process+0x22c>
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e560:	005b      	lsls	r3, r3, #1
 800e562:	f241 121c 	movw	r2, #4380	; 0x111c
 800e566:	4293      	cmp	r3, r2
 800e568:	d904      	bls.n	800e574 <tcp_process+0x228>
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e56e:	005b      	lsls	r3, r3, #1
 800e570:	b29b      	uxth	r3, r3
 800e572:	e001      	b.n	800e578 <tcp_process+0x22c>
 800e574:	f241 131c 	movw	r3, #4380	; 0x111c
 800e578:	687a      	ldr	r2, [r7, #4]
 800e57a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e584:	2b00      	cmp	r3, #0
 800e586:	d106      	bne.n	800e596 <tcp_process+0x24a>
 800e588:	4b13      	ldr	r3, [pc, #76]	; (800e5d8 <tcp_process+0x28c>)
 800e58a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800e58e:	491c      	ldr	r1, [pc, #112]	; (800e600 <tcp_process+0x2b4>)
 800e590:	4813      	ldr	r0, [pc, #76]	; (800e5e0 <tcp_process+0x294>)
 800e592:	f008 f955 	bl	8016840 <iprintf>
        --pcb->snd_queuelen;
 800e596:	687b      	ldr	r3, [r7, #4]
 800e598:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800e59c:	3b01      	subs	r3, #1
 800e59e:	b29a      	uxth	r2, r3
 800e5a0:	687b      	ldr	r3, [r7, #4]
 800e5a2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5aa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800e5ac:	69fb      	ldr	r3, [r7, #28]
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d12a      	bne.n	800e608 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5b6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800e5b8:	69fb      	ldr	r3, [r7, #28]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d106      	bne.n	800e5cc <tcp_process+0x280>
 800e5be:	4b06      	ldr	r3, [pc, #24]	; (800e5d8 <tcp_process+0x28c>)
 800e5c0:	f44f 725d 	mov.w	r2, #884	; 0x374
 800e5c4:	490f      	ldr	r1, [pc, #60]	; (800e604 <tcp_process+0x2b8>)
 800e5c6:	4806      	ldr	r0, [pc, #24]	; (800e5e0 <tcp_process+0x294>)
 800e5c8:	f008 f93a 	bl	8016840 <iprintf>
          pcb->unsent = rseg->next;
 800e5cc:	69fb      	ldr	r3, [r7, #28]
 800e5ce:	681a      	ldr	r2, [r3, #0]
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	66da      	str	r2, [r3, #108]	; 0x6c
 800e5d4:	e01c      	b.n	800e610 <tcp_process+0x2c4>
 800e5d6:	bf00      	nop
 800e5d8:	08018a14 	.word	0x08018a14
 800e5dc:	08018c4c 	.word	0x08018c4c
 800e5e0:	08018a60 	.word	0x08018a60
 800e5e4:	2000f248 	.word	0x2000f248
 800e5e8:	2000f240 	.word	0x2000f240
 800e5ec:	2000f23c 	.word	0x2000f23c
 800e5f0:	08018c68 	.word	0x08018c68
 800e5f4:	2000f249 	.word	0x2000f249
 800e5f8:	2000f204 	.word	0x2000f204
 800e5fc:	2000f22c 	.word	0x2000f22c
 800e600:	08018c88 	.word	0x08018c88
 800e604:	08018ca0 	.word	0x08018ca0
        } else {
          pcb->unacked = rseg->next;
 800e608:	69fb      	ldr	r3, [r7, #28]
 800e60a:	681a      	ldr	r2, [r3, #0]
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800e610:	69f8      	ldr	r0, [r7, #28]
 800e612:	f7fe fd22 	bl	800d05a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e61a:	2b00      	cmp	r3, #0
 800e61c:	d104      	bne.n	800e628 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e624:	861a      	strh	r2, [r3, #48]	; 0x30
 800e626:	e006      	b.n	800e636 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	2200      	movs	r2, #0
 800e62c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800e62e:	687b      	ldr	r3, [r7, #4]
 800e630:	2200      	movs	r2, #0
 800e632:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d00a      	beq.n	800e656 <tcp_process+0x30a>
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e646:	687a      	ldr	r2, [r7, #4]
 800e648:	6910      	ldr	r0, [r2, #16]
 800e64a:	2200      	movs	r2, #0
 800e64c:	6879      	ldr	r1, [r7, #4]
 800e64e:	4798      	blx	r3
 800e650:	4603      	mov	r3, r0
 800e652:	76bb      	strb	r3, [r7, #26]
 800e654:	e001      	b.n	800e65a <tcp_process+0x30e>
 800e656:	2300      	movs	r3, #0
 800e658:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800e65a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e65e:	f113 0f0d 	cmn.w	r3, #13
 800e662:	d102      	bne.n	800e66a <tcp_process+0x31e>
          return ERR_ABRT;
 800e664:	f06f 030c 	mvn.w	r3, #12
 800e668:	e250      	b.n	800eb0c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800e66a:	687b      	ldr	r3, [r7, #4]
 800e66c:	8b5b      	ldrh	r3, [r3, #26]
 800e66e:	f043 0302 	orr.w	r3, r3, #2
 800e672:	b29a      	uxth	r2, r3
 800e674:	687b      	ldr	r3, [r7, #4]
 800e676:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800e678:	e23a      	b.n	800eaf0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800e67a:	4b98      	ldr	r3, [pc, #608]	; (800e8dc <tcp_process+0x590>)
 800e67c:	781b      	ldrb	r3, [r3, #0]
 800e67e:	f003 0310 	and.w	r3, r3, #16
 800e682:	2b00      	cmp	r3, #0
 800e684:	f000 8234 	beq.w	800eaf0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e688:	4b95      	ldr	r3, [pc, #596]	; (800e8e0 <tcp_process+0x594>)
 800e68a:	6819      	ldr	r1, [r3, #0]
 800e68c:	4b95      	ldr	r3, [pc, #596]	; (800e8e4 <tcp_process+0x598>)
 800e68e:	881b      	ldrh	r3, [r3, #0]
 800e690:	461a      	mov	r2, r3
 800e692:	4b95      	ldr	r3, [pc, #596]	; (800e8e8 <tcp_process+0x59c>)
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e698:	4b94      	ldr	r3, [pc, #592]	; (800e8ec <tcp_process+0x5a0>)
 800e69a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e69c:	885b      	ldrh	r3, [r3, #2]
 800e69e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e6a0:	4a92      	ldr	r2, [pc, #584]	; (800e8ec <tcp_process+0x5a0>)
 800e6a2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e6a4:	8812      	ldrh	r2, [r2, #0]
 800e6a6:	b292      	uxth	r2, r2
 800e6a8:	9202      	str	r2, [sp, #8]
 800e6aa:	9301      	str	r3, [sp, #4]
 800e6ac:	4b90      	ldr	r3, [pc, #576]	; (800e8f0 <tcp_process+0x5a4>)
 800e6ae:	9300      	str	r3, [sp, #0]
 800e6b0:	4b90      	ldr	r3, [pc, #576]	; (800e8f4 <tcp_process+0x5a8>)
 800e6b2:	4602      	mov	r2, r0
 800e6b4:	6878      	ldr	r0, [r7, #4]
 800e6b6:	f002 fc85 	bl	8010fc4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e6c0:	2b05      	cmp	r3, #5
 800e6c2:	f200 8215 	bhi.w	800eaf0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	2200      	movs	r2, #0
 800e6ca:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800e6cc:	6878      	ldr	r0, [r7, #4]
 800e6ce:	f002 fa4f 	bl	8010b70 <tcp_rexmit_rto>
      break;
 800e6d2:	e20d      	b.n	800eaf0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800e6d4:	4b81      	ldr	r3, [pc, #516]	; (800e8dc <tcp_process+0x590>)
 800e6d6:	781b      	ldrb	r3, [r3, #0]
 800e6d8:	f003 0310 	and.w	r3, r3, #16
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	f000 80a1 	beq.w	800e824 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800e6e2:	4b7f      	ldr	r3, [pc, #508]	; (800e8e0 <tcp_process+0x594>)
 800e6e4:	681a      	ldr	r2, [r3, #0]
 800e6e6:	687b      	ldr	r3, [r7, #4]
 800e6e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e6ea:	1ad3      	subs	r3, r2, r3
 800e6ec:	3b01      	subs	r3, #1
 800e6ee:	2b00      	cmp	r3, #0
 800e6f0:	db7e      	blt.n	800e7f0 <tcp_process+0x4a4>
 800e6f2:	4b7b      	ldr	r3, [pc, #492]	; (800e8e0 <tcp_process+0x594>)
 800e6f4:	681a      	ldr	r2, [r3, #0]
 800e6f6:	687b      	ldr	r3, [r7, #4]
 800e6f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6fa:	1ad3      	subs	r3, r2, r3
 800e6fc:	2b00      	cmp	r3, #0
 800e6fe:	dc77      	bgt.n	800e7f0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	2204      	movs	r2, #4
 800e704:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e70a:	2b00      	cmp	r3, #0
 800e70c:	d102      	bne.n	800e714 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800e70e:	23fa      	movs	r3, #250	; 0xfa
 800e710:	76bb      	strb	r3, [r7, #26]
 800e712:	e01d      	b.n	800e750 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800e714:	687b      	ldr	r3, [r7, #4]
 800e716:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e718:	699b      	ldr	r3, [r3, #24]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d106      	bne.n	800e72c <tcp_process+0x3e0>
 800e71e:	4b76      	ldr	r3, [pc, #472]	; (800e8f8 <tcp_process+0x5ac>)
 800e720:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800e724:	4975      	ldr	r1, [pc, #468]	; (800e8fc <tcp_process+0x5b0>)
 800e726:	4876      	ldr	r0, [pc, #472]	; (800e900 <tcp_process+0x5b4>)
 800e728:	f008 f88a 	bl	8016840 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e730:	699b      	ldr	r3, [r3, #24]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d00a      	beq.n	800e74c <tcp_process+0x400>
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e73a:	699b      	ldr	r3, [r3, #24]
 800e73c:	687a      	ldr	r2, [r7, #4]
 800e73e:	6910      	ldr	r0, [r2, #16]
 800e740:	2200      	movs	r2, #0
 800e742:	6879      	ldr	r1, [r7, #4]
 800e744:	4798      	blx	r3
 800e746:	4603      	mov	r3, r0
 800e748:	76bb      	strb	r3, [r7, #26]
 800e74a:	e001      	b.n	800e750 <tcp_process+0x404>
 800e74c:	23f0      	movs	r3, #240	; 0xf0
 800e74e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800e750:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e754:	2b00      	cmp	r3, #0
 800e756:	d00a      	beq.n	800e76e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800e758:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800e75c:	f113 0f0d 	cmn.w	r3, #13
 800e760:	d002      	beq.n	800e768 <tcp_process+0x41c>
              tcp_abort(pcb);
 800e762:	6878      	ldr	r0, [r7, #4]
 800e764:	f7fd ff8e 	bl	800c684 <tcp_abort>
            }
            return ERR_ABRT;
 800e768:	f06f 030c 	mvn.w	r3, #12
 800e76c:	e1ce      	b.n	800eb0c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f000 fae0 	bl	800ed34 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800e774:	4b63      	ldr	r3, [pc, #396]	; (800e904 <tcp_process+0x5b8>)
 800e776:	881b      	ldrh	r3, [r3, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d005      	beq.n	800e788 <tcp_process+0x43c>
            recv_acked--;
 800e77c:	4b61      	ldr	r3, [pc, #388]	; (800e904 <tcp_process+0x5b8>)
 800e77e:	881b      	ldrh	r3, [r3, #0]
 800e780:	3b01      	subs	r3, #1
 800e782:	b29a      	uxth	r2, r3
 800e784:	4b5f      	ldr	r3, [pc, #380]	; (800e904 <tcp_process+0x5b8>)
 800e786:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e78c:	009a      	lsls	r2, r3, #2
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e792:	005b      	lsls	r3, r3, #1
 800e794:	f241 111c 	movw	r1, #4380	; 0x111c
 800e798:	428b      	cmp	r3, r1
 800e79a:	bf38      	it	cc
 800e79c:	460b      	movcc	r3, r1
 800e79e:	429a      	cmp	r2, r3
 800e7a0:	d204      	bcs.n	800e7ac <tcp_process+0x460>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7a6:	009b      	lsls	r3, r3, #2
 800e7a8:	b29b      	uxth	r3, r3
 800e7aa:	e00d      	b.n	800e7c8 <tcp_process+0x47c>
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7b0:	005b      	lsls	r3, r3, #1
 800e7b2:	f241 121c 	movw	r2, #4380	; 0x111c
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d904      	bls.n	800e7c4 <tcp_process+0x478>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e7be:	005b      	lsls	r3, r3, #1
 800e7c0:	b29b      	uxth	r3, r3
 800e7c2:	e001      	b.n	800e7c8 <tcp_process+0x47c>
 800e7c4:	f241 131c 	movw	r3, #4380	; 0x111c
 800e7c8:	687a      	ldr	r2, [r7, #4]
 800e7ca:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800e7ce:	4b4e      	ldr	r3, [pc, #312]	; (800e908 <tcp_process+0x5bc>)
 800e7d0:	781b      	ldrb	r3, [r3, #0]
 800e7d2:	f003 0320 	and.w	r3, r3, #32
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d037      	beq.n	800e84a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	8b5b      	ldrh	r3, [r3, #26]
 800e7de:	f043 0302 	orr.w	r3, r3, #2
 800e7e2:	b29a      	uxth	r2, r3
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800e7e8:	687b      	ldr	r3, [r7, #4]
 800e7ea:	2207      	movs	r2, #7
 800e7ec:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800e7ee:	e02c      	b.n	800e84a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e7f0:	4b3b      	ldr	r3, [pc, #236]	; (800e8e0 <tcp_process+0x594>)
 800e7f2:	6819      	ldr	r1, [r3, #0]
 800e7f4:	4b3b      	ldr	r3, [pc, #236]	; (800e8e4 <tcp_process+0x598>)
 800e7f6:	881b      	ldrh	r3, [r3, #0]
 800e7f8:	461a      	mov	r2, r3
 800e7fa:	4b3b      	ldr	r3, [pc, #236]	; (800e8e8 <tcp_process+0x59c>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e800:	4b3a      	ldr	r3, [pc, #232]	; (800e8ec <tcp_process+0x5a0>)
 800e802:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e804:	885b      	ldrh	r3, [r3, #2]
 800e806:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800e808:	4a38      	ldr	r2, [pc, #224]	; (800e8ec <tcp_process+0x5a0>)
 800e80a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800e80c:	8812      	ldrh	r2, [r2, #0]
 800e80e:	b292      	uxth	r2, r2
 800e810:	9202      	str	r2, [sp, #8]
 800e812:	9301      	str	r3, [sp, #4]
 800e814:	4b36      	ldr	r3, [pc, #216]	; (800e8f0 <tcp_process+0x5a4>)
 800e816:	9300      	str	r3, [sp, #0]
 800e818:	4b36      	ldr	r3, [pc, #216]	; (800e8f4 <tcp_process+0x5a8>)
 800e81a:	4602      	mov	r2, r0
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f002 fbd1 	bl	8010fc4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800e822:	e167      	b.n	800eaf4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800e824:	4b2d      	ldr	r3, [pc, #180]	; (800e8dc <tcp_process+0x590>)
 800e826:	781b      	ldrb	r3, [r3, #0]
 800e828:	f003 0302 	and.w	r3, r3, #2
 800e82c:	2b00      	cmp	r3, #0
 800e82e:	f000 8161 	beq.w	800eaf4 <tcp_process+0x7a8>
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e836:	1e5a      	subs	r2, r3, #1
 800e838:	4b2b      	ldr	r3, [pc, #172]	; (800e8e8 <tcp_process+0x59c>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	429a      	cmp	r2, r3
 800e83e:	f040 8159 	bne.w	800eaf4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800e842:	6878      	ldr	r0, [r7, #4]
 800e844:	f002 f9b6 	bl	8010bb4 <tcp_rexmit>
      break;
 800e848:	e154      	b.n	800eaf4 <tcp_process+0x7a8>
 800e84a:	e153      	b.n	800eaf4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800e84c:	6878      	ldr	r0, [r7, #4]
 800e84e:	f000 fa71 	bl	800ed34 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800e852:	4b2d      	ldr	r3, [pc, #180]	; (800e908 <tcp_process+0x5bc>)
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	f003 0320 	and.w	r3, r3, #32
 800e85a:	2b00      	cmp	r3, #0
 800e85c:	f000 814c 	beq.w	800eaf8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	8b5b      	ldrh	r3, [r3, #26]
 800e864:	f043 0302 	orr.w	r3, r3, #2
 800e868:	b29a      	uxth	r2, r3
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	2207      	movs	r2, #7
 800e872:	751a      	strb	r2, [r3, #20]
      }
      break;
 800e874:	e140      	b.n	800eaf8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800e876:	6878      	ldr	r0, [r7, #4]
 800e878:	f000 fa5c 	bl	800ed34 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e87c:	4b22      	ldr	r3, [pc, #136]	; (800e908 <tcp_process+0x5bc>)
 800e87e:	781b      	ldrb	r3, [r3, #0]
 800e880:	f003 0320 	and.w	r3, r3, #32
 800e884:	2b00      	cmp	r3, #0
 800e886:	d071      	beq.n	800e96c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e888:	4b14      	ldr	r3, [pc, #80]	; (800e8dc <tcp_process+0x590>)
 800e88a:	781b      	ldrb	r3, [r3, #0]
 800e88c:	f003 0310 	and.w	r3, r3, #16
 800e890:	2b00      	cmp	r3, #0
 800e892:	d060      	beq.n	800e956 <tcp_process+0x60a>
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e898:	4b11      	ldr	r3, [pc, #68]	; (800e8e0 <tcp_process+0x594>)
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d15a      	bne.n	800e956 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e8a4:	2b00      	cmp	r3, #0
 800e8a6:	d156      	bne.n	800e956 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	8b5b      	ldrh	r3, [r3, #26]
 800e8ac:	f043 0302 	orr.w	r3, r3, #2
 800e8b0:	b29a      	uxth	r2, r3
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800e8b6:	6878      	ldr	r0, [r7, #4]
 800e8b8:	f7fe fdbc 	bl	800d434 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800e8bc:	4b13      	ldr	r3, [pc, #76]	; (800e90c <tcp_process+0x5c0>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	687a      	ldr	r2, [r7, #4]
 800e8c2:	429a      	cmp	r2, r3
 800e8c4:	d105      	bne.n	800e8d2 <tcp_process+0x586>
 800e8c6:	4b11      	ldr	r3, [pc, #68]	; (800e90c <tcp_process+0x5c0>)
 800e8c8:	681b      	ldr	r3, [r3, #0]
 800e8ca:	68db      	ldr	r3, [r3, #12]
 800e8cc:	4a0f      	ldr	r2, [pc, #60]	; (800e90c <tcp_process+0x5c0>)
 800e8ce:	6013      	str	r3, [r2, #0]
 800e8d0:	e02e      	b.n	800e930 <tcp_process+0x5e4>
 800e8d2:	4b0e      	ldr	r3, [pc, #56]	; (800e90c <tcp_process+0x5c0>)
 800e8d4:	681b      	ldr	r3, [r3, #0]
 800e8d6:	617b      	str	r3, [r7, #20]
 800e8d8:	e027      	b.n	800e92a <tcp_process+0x5de>
 800e8da:	bf00      	nop
 800e8dc:	2000f248 	.word	0x2000f248
 800e8e0:	2000f240 	.word	0x2000f240
 800e8e4:	2000f246 	.word	0x2000f246
 800e8e8:	2000f23c 	.word	0x2000f23c
 800e8ec:	2000f22c 	.word	0x2000f22c
 800e8f0:	200098e0 	.word	0x200098e0
 800e8f4:	200098e4 	.word	0x200098e4
 800e8f8:	08018a14 	.word	0x08018a14
 800e8fc:	08018cb4 	.word	0x08018cb4
 800e900:	08018a60 	.word	0x08018a60
 800e904:	2000f244 	.word	0x2000f244
 800e908:	2000f249 	.word	0x2000f249
 800e90c:	2000f210 	.word	0x2000f210
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	68db      	ldr	r3, [r3, #12]
 800e914:	687a      	ldr	r2, [r7, #4]
 800e916:	429a      	cmp	r2, r3
 800e918:	d104      	bne.n	800e924 <tcp_process+0x5d8>
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	68da      	ldr	r2, [r3, #12]
 800e91e:	697b      	ldr	r3, [r7, #20]
 800e920:	60da      	str	r2, [r3, #12]
 800e922:	e005      	b.n	800e930 <tcp_process+0x5e4>
 800e924:	697b      	ldr	r3, [r7, #20]
 800e926:	68db      	ldr	r3, [r3, #12]
 800e928:	617b      	str	r3, [r7, #20]
 800e92a:	697b      	ldr	r3, [r7, #20]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d1ef      	bne.n	800e910 <tcp_process+0x5c4>
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2200      	movs	r2, #0
 800e934:	60da      	str	r2, [r3, #12]
 800e936:	4b77      	ldr	r3, [pc, #476]	; (800eb14 <tcp_process+0x7c8>)
 800e938:	2201      	movs	r2, #1
 800e93a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	220a      	movs	r2, #10
 800e940:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800e942:	4b75      	ldr	r3, [pc, #468]	; (800eb18 <tcp_process+0x7cc>)
 800e944:	681a      	ldr	r2, [r3, #0]
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	60da      	str	r2, [r3, #12]
 800e94a:	4a73      	ldr	r2, [pc, #460]	; (800eb18 <tcp_process+0x7cc>)
 800e94c:	687b      	ldr	r3, [r7, #4]
 800e94e:	6013      	str	r3, [r2, #0]
 800e950:	f002 fcfa 	bl	8011348 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800e954:	e0d2      	b.n	800eafc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	8b5b      	ldrh	r3, [r3, #26]
 800e95a:	f043 0302 	orr.w	r3, r3, #2
 800e95e:	b29a      	uxth	r2, r3
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	2208      	movs	r2, #8
 800e968:	751a      	strb	r2, [r3, #20]
      break;
 800e96a:	e0c7      	b.n	800eafc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e96c:	4b6b      	ldr	r3, [pc, #428]	; (800eb1c <tcp_process+0x7d0>)
 800e96e:	781b      	ldrb	r3, [r3, #0]
 800e970:	f003 0310 	and.w	r3, r3, #16
 800e974:	2b00      	cmp	r3, #0
 800e976:	f000 80c1 	beq.w	800eafc <tcp_process+0x7b0>
 800e97a:	687b      	ldr	r3, [r7, #4]
 800e97c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e97e:	4b68      	ldr	r3, [pc, #416]	; (800eb20 <tcp_process+0x7d4>)
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	429a      	cmp	r2, r3
 800e984:	f040 80ba 	bne.w	800eafc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800e988:	687b      	ldr	r3, [r7, #4]
 800e98a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f040 80b5 	bne.w	800eafc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2206      	movs	r2, #6
 800e996:	751a      	strb	r2, [r3, #20]
      break;
 800e998:	e0b0      	b.n	800eafc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800e99a:	6878      	ldr	r0, [r7, #4]
 800e99c:	f000 f9ca 	bl	800ed34 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800e9a0:	4b60      	ldr	r3, [pc, #384]	; (800eb24 <tcp_process+0x7d8>)
 800e9a2:	781b      	ldrb	r3, [r3, #0]
 800e9a4:	f003 0320 	and.w	r3, r3, #32
 800e9a8:	2b00      	cmp	r3, #0
 800e9aa:	f000 80a9 	beq.w	800eb00 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	8b5b      	ldrh	r3, [r3, #26]
 800e9b2:	f043 0302 	orr.w	r3, r3, #2
 800e9b6:	b29a      	uxth	r2, r3
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800e9bc:	6878      	ldr	r0, [r7, #4]
 800e9be:	f7fe fd39 	bl	800d434 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800e9c2:	4b59      	ldr	r3, [pc, #356]	; (800eb28 <tcp_process+0x7dc>)
 800e9c4:	681b      	ldr	r3, [r3, #0]
 800e9c6:	687a      	ldr	r2, [r7, #4]
 800e9c8:	429a      	cmp	r2, r3
 800e9ca:	d105      	bne.n	800e9d8 <tcp_process+0x68c>
 800e9cc:	4b56      	ldr	r3, [pc, #344]	; (800eb28 <tcp_process+0x7dc>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	68db      	ldr	r3, [r3, #12]
 800e9d2:	4a55      	ldr	r2, [pc, #340]	; (800eb28 <tcp_process+0x7dc>)
 800e9d4:	6013      	str	r3, [r2, #0]
 800e9d6:	e013      	b.n	800ea00 <tcp_process+0x6b4>
 800e9d8:	4b53      	ldr	r3, [pc, #332]	; (800eb28 <tcp_process+0x7dc>)
 800e9da:	681b      	ldr	r3, [r3, #0]
 800e9dc:	613b      	str	r3, [r7, #16]
 800e9de:	e00c      	b.n	800e9fa <tcp_process+0x6ae>
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	68db      	ldr	r3, [r3, #12]
 800e9e4:	687a      	ldr	r2, [r7, #4]
 800e9e6:	429a      	cmp	r2, r3
 800e9e8:	d104      	bne.n	800e9f4 <tcp_process+0x6a8>
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	68da      	ldr	r2, [r3, #12]
 800e9ee:	693b      	ldr	r3, [r7, #16]
 800e9f0:	60da      	str	r2, [r3, #12]
 800e9f2:	e005      	b.n	800ea00 <tcp_process+0x6b4>
 800e9f4:	693b      	ldr	r3, [r7, #16]
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	613b      	str	r3, [r7, #16]
 800e9fa:	693b      	ldr	r3, [r7, #16]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d1ef      	bne.n	800e9e0 <tcp_process+0x694>
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	2200      	movs	r2, #0
 800ea04:	60da      	str	r2, [r3, #12]
 800ea06:	4b43      	ldr	r3, [pc, #268]	; (800eb14 <tcp_process+0x7c8>)
 800ea08:	2201      	movs	r2, #1
 800ea0a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	220a      	movs	r2, #10
 800ea10:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800ea12:	4b41      	ldr	r3, [pc, #260]	; (800eb18 <tcp_process+0x7cc>)
 800ea14:	681a      	ldr	r2, [r3, #0]
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	60da      	str	r2, [r3, #12]
 800ea1a:	4a3f      	ldr	r2, [pc, #252]	; (800eb18 <tcp_process+0x7cc>)
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6013      	str	r3, [r2, #0]
 800ea20:	f002 fc92 	bl	8011348 <tcp_timer_needed>
      }
      break;
 800ea24:	e06c      	b.n	800eb00 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800ea26:	6878      	ldr	r0, [r7, #4]
 800ea28:	f000 f984 	bl	800ed34 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800ea2c:	4b3b      	ldr	r3, [pc, #236]	; (800eb1c <tcp_process+0x7d0>)
 800ea2e:	781b      	ldrb	r3, [r3, #0]
 800ea30:	f003 0310 	and.w	r3, r3, #16
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	d065      	beq.n	800eb04 <tcp_process+0x7b8>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800ea3c:	4b38      	ldr	r3, [pc, #224]	; (800eb20 <tcp_process+0x7d4>)
 800ea3e:	681b      	ldr	r3, [r3, #0]
 800ea40:	429a      	cmp	r2, r3
 800ea42:	d15f      	bne.n	800eb04 <tcp_process+0x7b8>
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d15b      	bne.n	800eb04 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f7fe fcf1 	bl	800d434 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800ea52:	4b35      	ldr	r3, [pc, #212]	; (800eb28 <tcp_process+0x7dc>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	687a      	ldr	r2, [r7, #4]
 800ea58:	429a      	cmp	r2, r3
 800ea5a:	d105      	bne.n	800ea68 <tcp_process+0x71c>
 800ea5c:	4b32      	ldr	r3, [pc, #200]	; (800eb28 <tcp_process+0x7dc>)
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	68db      	ldr	r3, [r3, #12]
 800ea62:	4a31      	ldr	r2, [pc, #196]	; (800eb28 <tcp_process+0x7dc>)
 800ea64:	6013      	str	r3, [r2, #0]
 800ea66:	e013      	b.n	800ea90 <tcp_process+0x744>
 800ea68:	4b2f      	ldr	r3, [pc, #188]	; (800eb28 <tcp_process+0x7dc>)
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	60fb      	str	r3, [r7, #12]
 800ea6e:	e00c      	b.n	800ea8a <tcp_process+0x73e>
 800ea70:	68fb      	ldr	r3, [r7, #12]
 800ea72:	68db      	ldr	r3, [r3, #12]
 800ea74:	687a      	ldr	r2, [r7, #4]
 800ea76:	429a      	cmp	r2, r3
 800ea78:	d104      	bne.n	800ea84 <tcp_process+0x738>
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	68da      	ldr	r2, [r3, #12]
 800ea7e:	68fb      	ldr	r3, [r7, #12]
 800ea80:	60da      	str	r2, [r3, #12]
 800ea82:	e005      	b.n	800ea90 <tcp_process+0x744>
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	68db      	ldr	r3, [r3, #12]
 800ea88:	60fb      	str	r3, [r7, #12]
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d1ef      	bne.n	800ea70 <tcp_process+0x724>
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2200      	movs	r2, #0
 800ea94:	60da      	str	r2, [r3, #12]
 800ea96:	4b1f      	ldr	r3, [pc, #124]	; (800eb14 <tcp_process+0x7c8>)
 800ea98:	2201      	movs	r2, #1
 800ea9a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	220a      	movs	r2, #10
 800eaa0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800eaa2:	4b1d      	ldr	r3, [pc, #116]	; (800eb18 <tcp_process+0x7cc>)
 800eaa4:	681a      	ldr	r2, [r3, #0]
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	60da      	str	r2, [r3, #12]
 800eaaa:	4a1b      	ldr	r2, [pc, #108]	; (800eb18 <tcp_process+0x7cc>)
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6013      	str	r3, [r2, #0]
 800eab0:	f002 fc4a 	bl	8011348 <tcp_timer_needed>
      }
      break;
 800eab4:	e026      	b.n	800eb04 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800eab6:	6878      	ldr	r0, [r7, #4]
 800eab8:	f000 f93c 	bl	800ed34 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800eabc:	4b17      	ldr	r3, [pc, #92]	; (800eb1c <tcp_process+0x7d0>)
 800eabe:	781b      	ldrb	r3, [r3, #0]
 800eac0:	f003 0310 	and.w	r3, r3, #16
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d01f      	beq.n	800eb08 <tcp_process+0x7bc>
 800eac8:	687b      	ldr	r3, [r7, #4]
 800eaca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800eacc:	4b14      	ldr	r3, [pc, #80]	; (800eb20 <tcp_process+0x7d4>)
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	d119      	bne.n	800eb08 <tcp_process+0x7bc>
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d115      	bne.n	800eb08 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800eadc:	4b11      	ldr	r3, [pc, #68]	; (800eb24 <tcp_process+0x7d8>)
 800eade:	781b      	ldrb	r3, [r3, #0]
 800eae0:	f043 0310 	orr.w	r3, r3, #16
 800eae4:	b2da      	uxtb	r2, r3
 800eae6:	4b0f      	ldr	r3, [pc, #60]	; (800eb24 <tcp_process+0x7d8>)
 800eae8:	701a      	strb	r2, [r3, #0]
      }
      break;
 800eaea:	e00d      	b.n	800eb08 <tcp_process+0x7bc>
    default:
      break;
 800eaec:	bf00      	nop
 800eaee:	e00c      	b.n	800eb0a <tcp_process+0x7be>
      break;
 800eaf0:	bf00      	nop
 800eaf2:	e00a      	b.n	800eb0a <tcp_process+0x7be>
      break;
 800eaf4:	bf00      	nop
 800eaf6:	e008      	b.n	800eb0a <tcp_process+0x7be>
      break;
 800eaf8:	bf00      	nop
 800eafa:	e006      	b.n	800eb0a <tcp_process+0x7be>
      break;
 800eafc:	bf00      	nop
 800eafe:	e004      	b.n	800eb0a <tcp_process+0x7be>
      break;
 800eb00:	bf00      	nop
 800eb02:	e002      	b.n	800eb0a <tcp_process+0x7be>
      break;
 800eb04:	bf00      	nop
 800eb06:	e000      	b.n	800eb0a <tcp_process+0x7be>
      break;
 800eb08:	bf00      	nop
  }
  return ERR_OK;
 800eb0a:	2300      	movs	r3, #0
}
 800eb0c:	4618      	mov	r0, r3
 800eb0e:	3724      	adds	r7, #36	; 0x24
 800eb10:	46bd      	mov	sp, r7
 800eb12:	bd90      	pop	{r4, r7, pc}
 800eb14:	2000f218 	.word	0x2000f218
 800eb18:	2000f214 	.word	0x2000f214
 800eb1c:	2000f248 	.word	0x2000f248
 800eb20:	2000f240 	.word	0x2000f240
 800eb24:	2000f249 	.word	0x2000f249
 800eb28:	2000f210 	.word	0x2000f210

0800eb2c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800eb2c:	b590      	push	{r4, r7, lr}
 800eb2e:	b085      	sub	sp, #20
 800eb30:	af00      	add	r7, sp, #0
 800eb32:	6078      	str	r0, [r7, #4]
 800eb34:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d106      	bne.n	800eb4a <tcp_oos_insert_segment+0x1e>
 800eb3c:	4b3b      	ldr	r3, [pc, #236]	; (800ec2c <tcp_oos_insert_segment+0x100>)
 800eb3e:	f240 421f 	movw	r2, #1055	; 0x41f
 800eb42:	493b      	ldr	r1, [pc, #236]	; (800ec30 <tcp_oos_insert_segment+0x104>)
 800eb44:	483b      	ldr	r0, [pc, #236]	; (800ec34 <tcp_oos_insert_segment+0x108>)
 800eb46:	f007 fe7b 	bl	8016840 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800eb4a:	687b      	ldr	r3, [r7, #4]
 800eb4c:	68db      	ldr	r3, [r3, #12]
 800eb4e:	899b      	ldrh	r3, [r3, #12]
 800eb50:	b29b      	uxth	r3, r3
 800eb52:	4618      	mov	r0, r3
 800eb54:	f7fb fbf4 	bl	800a340 <lwip_htons>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	b2db      	uxtb	r3, r3
 800eb5c:	f003 0301 	and.w	r3, r3, #1
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d028      	beq.n	800ebb6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800eb64:	6838      	ldr	r0, [r7, #0]
 800eb66:	f7fe fa63 	bl	800d030 <tcp_segs_free>
    next = NULL;
 800eb6a:	2300      	movs	r3, #0
 800eb6c:	603b      	str	r3, [r7, #0]
 800eb6e:	e056      	b.n	800ec1e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800eb70:	683b      	ldr	r3, [r7, #0]
 800eb72:	68db      	ldr	r3, [r3, #12]
 800eb74:	899b      	ldrh	r3, [r3, #12]
 800eb76:	b29b      	uxth	r3, r3
 800eb78:	4618      	mov	r0, r3
 800eb7a:	f7fb fbe1 	bl	800a340 <lwip_htons>
 800eb7e:	4603      	mov	r3, r0
 800eb80:	b2db      	uxtb	r3, r3
 800eb82:	f003 0301 	and.w	r3, r3, #1
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d00d      	beq.n	800eba6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	68db      	ldr	r3, [r3, #12]
 800eb8e:	899b      	ldrh	r3, [r3, #12]
 800eb90:	b29c      	uxth	r4, r3
 800eb92:	2001      	movs	r0, #1
 800eb94:	f7fb fbd4 	bl	800a340 <lwip_htons>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	461a      	mov	r2, r3
 800eb9c:	687b      	ldr	r3, [r7, #4]
 800eb9e:	68db      	ldr	r3, [r3, #12]
 800eba0:	4322      	orrs	r2, r4
 800eba2:	b292      	uxth	r2, r2
 800eba4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800eba6:	683b      	ldr	r3, [r7, #0]
 800eba8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800ebb0:	68f8      	ldr	r0, [r7, #12]
 800ebb2:	f7fe fa52 	bl	800d05a <tcp_seg_free>
    while (next &&
 800ebb6:	683b      	ldr	r3, [r7, #0]
 800ebb8:	2b00      	cmp	r3, #0
 800ebba:	d00e      	beq.n	800ebda <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	891b      	ldrh	r3, [r3, #8]
 800ebc0:	461a      	mov	r2, r3
 800ebc2:	4b1d      	ldr	r3, [pc, #116]	; (800ec38 <tcp_oos_insert_segment+0x10c>)
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	441a      	add	r2, r3
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	68db      	ldr	r3, [r3, #12]
 800ebcc:	685b      	ldr	r3, [r3, #4]
 800ebce:	6839      	ldr	r1, [r7, #0]
 800ebd0:	8909      	ldrh	r1, [r1, #8]
 800ebd2:	440b      	add	r3, r1
 800ebd4:	1ad3      	subs	r3, r2, r3
    while (next &&
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	daca      	bge.n	800eb70 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	2b00      	cmp	r3, #0
 800ebde:	d01e      	beq.n	800ec1e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	891b      	ldrh	r3, [r3, #8]
 800ebe4:	461a      	mov	r2, r3
 800ebe6:	4b14      	ldr	r3, [pc, #80]	; (800ec38 <tcp_oos_insert_segment+0x10c>)
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	441a      	add	r2, r3
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	68db      	ldr	r3, [r3, #12]
 800ebf0:	685b      	ldr	r3, [r3, #4]
 800ebf2:	1ad3      	subs	r3, r2, r3
    if (next &&
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	dd12      	ble.n	800ec1e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800ebf8:	683b      	ldr	r3, [r7, #0]
 800ebfa:	68db      	ldr	r3, [r3, #12]
 800ebfc:	685b      	ldr	r3, [r3, #4]
 800ebfe:	b29a      	uxth	r2, r3
 800ec00:	4b0d      	ldr	r3, [pc, #52]	; (800ec38 <tcp_oos_insert_segment+0x10c>)
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	b29b      	uxth	r3, r3
 800ec06:	1ad3      	subs	r3, r2, r3
 800ec08:	b29a      	uxth	r2, r3
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	685a      	ldr	r2, [r3, #4]
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	891b      	ldrh	r3, [r3, #8]
 800ec16:	4619      	mov	r1, r3
 800ec18:	4610      	mov	r0, r2
 800ec1a:	f7fc fe09 	bl	800b830 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	683a      	ldr	r2, [r7, #0]
 800ec22:	601a      	str	r2, [r3, #0]
}
 800ec24:	bf00      	nop
 800ec26:	3714      	adds	r7, #20
 800ec28:	46bd      	mov	sp, r7
 800ec2a:	bd90      	pop	{r4, r7, pc}
 800ec2c:	08018a14 	.word	0x08018a14
 800ec30:	08018cd4 	.word	0x08018cd4
 800ec34:	08018a60 	.word	0x08018a60
 800ec38:	2000f23c 	.word	0x2000f23c

0800ec3c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800ec3c:	b5b0      	push	{r4, r5, r7, lr}
 800ec3e:	b086      	sub	sp, #24
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	60f8      	str	r0, [r7, #12]
 800ec44:	60b9      	str	r1, [r7, #8]
 800ec46:	607a      	str	r2, [r7, #4]
 800ec48:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800ec4a:	e03e      	b.n	800ecca <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800ec4c:	68bb      	ldr	r3, [r7, #8]
 800ec4e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800ec56:	697b      	ldr	r3, [r7, #20]
 800ec58:	685b      	ldr	r3, [r3, #4]
 800ec5a:	4618      	mov	r0, r3
 800ec5c:	f7fc fffc 	bl	800bc58 <pbuf_clen>
 800ec60:	4603      	mov	r3, r0
 800ec62:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ec6a:	8a7a      	ldrh	r2, [r7, #18]
 800ec6c:	429a      	cmp	r2, r3
 800ec6e:	d906      	bls.n	800ec7e <tcp_free_acked_segments+0x42>
 800ec70:	4b2a      	ldr	r3, [pc, #168]	; (800ed1c <tcp_free_acked_segments+0xe0>)
 800ec72:	f240 4257 	movw	r2, #1111	; 0x457
 800ec76:	492a      	ldr	r1, [pc, #168]	; (800ed20 <tcp_free_acked_segments+0xe4>)
 800ec78:	482a      	ldr	r0, [pc, #168]	; (800ed24 <tcp_free_acked_segments+0xe8>)
 800ec7a:	f007 fde1 	bl	8016840 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800ec84:	8a7b      	ldrh	r3, [r7, #18]
 800ec86:	1ad3      	subs	r3, r2, r3
 800ec88:	b29a      	uxth	r2, r3
 800ec8a:	68fb      	ldr	r3, [r7, #12]
 800ec8c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	891a      	ldrh	r2, [r3, #8]
 800ec94:	4b24      	ldr	r3, [pc, #144]	; (800ed28 <tcp_free_acked_segments+0xec>)
 800ec96:	881b      	ldrh	r3, [r3, #0]
 800ec98:	4413      	add	r3, r2
 800ec9a:	b29a      	uxth	r2, r3
 800ec9c:	4b22      	ldr	r3, [pc, #136]	; (800ed28 <tcp_free_acked_segments+0xec>)
 800ec9e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800eca0:	6978      	ldr	r0, [r7, #20]
 800eca2:	f7fe f9da 	bl	800d05a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d00c      	beq.n	800ecca <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800ecb0:	68bb      	ldr	r3, [r7, #8]
 800ecb2:	2b00      	cmp	r3, #0
 800ecb4:	d109      	bne.n	800ecca <tcp_free_acked_segments+0x8e>
 800ecb6:	683b      	ldr	r3, [r7, #0]
 800ecb8:	2b00      	cmp	r3, #0
 800ecba:	d106      	bne.n	800ecca <tcp_free_acked_segments+0x8e>
 800ecbc:	4b17      	ldr	r3, [pc, #92]	; (800ed1c <tcp_free_acked_segments+0xe0>)
 800ecbe:	f240 4261 	movw	r2, #1121	; 0x461
 800ecc2:	491a      	ldr	r1, [pc, #104]	; (800ed2c <tcp_free_acked_segments+0xf0>)
 800ecc4:	4817      	ldr	r0, [pc, #92]	; (800ed24 <tcp_free_acked_segments+0xe8>)
 800ecc6:	f007 fdbb 	bl	8016840 <iprintf>
  while (seg_list != NULL &&
 800ecca:	68bb      	ldr	r3, [r7, #8]
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d020      	beq.n	800ed12 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	685b      	ldr	r3, [r3, #4]
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	f7fb fb47 	bl	800a36a <lwip_htonl>
 800ecdc:	4604      	mov	r4, r0
 800ecde:	68bb      	ldr	r3, [r7, #8]
 800ece0:	891b      	ldrh	r3, [r3, #8]
 800ece2:	461d      	mov	r5, r3
 800ece4:	68bb      	ldr	r3, [r7, #8]
 800ece6:	68db      	ldr	r3, [r3, #12]
 800ece8:	899b      	ldrh	r3, [r3, #12]
 800ecea:	b29b      	uxth	r3, r3
 800ecec:	4618      	mov	r0, r3
 800ecee:	f7fb fb27 	bl	800a340 <lwip_htons>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	b2db      	uxtb	r3, r3
 800ecf6:	f003 0303 	and.w	r3, r3, #3
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d001      	beq.n	800ed02 <tcp_free_acked_segments+0xc6>
 800ecfe:	2301      	movs	r3, #1
 800ed00:	e000      	b.n	800ed04 <tcp_free_acked_segments+0xc8>
 800ed02:	2300      	movs	r3, #0
 800ed04:	442b      	add	r3, r5
 800ed06:	18e2      	adds	r2, r4, r3
 800ed08:	4b09      	ldr	r3, [pc, #36]	; (800ed30 <tcp_free_acked_segments+0xf4>)
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	dd9c      	ble.n	800ec4c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800ed12:	68bb      	ldr	r3, [r7, #8]
}
 800ed14:	4618      	mov	r0, r3
 800ed16:	3718      	adds	r7, #24
 800ed18:	46bd      	mov	sp, r7
 800ed1a:	bdb0      	pop	{r4, r5, r7, pc}
 800ed1c:	08018a14 	.word	0x08018a14
 800ed20:	08018cfc 	.word	0x08018cfc
 800ed24:	08018a60 	.word	0x08018a60
 800ed28:	2000f244 	.word	0x2000f244
 800ed2c:	08018d24 	.word	0x08018d24
 800ed30:	2000f240 	.word	0x2000f240

0800ed34 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800ed34:	b5b0      	push	{r4, r5, r7, lr}
 800ed36:	b094      	sub	sp, #80	; 0x50
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800ed3c:	2300      	movs	r3, #0
 800ed3e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	d106      	bne.n	800ed54 <tcp_receive+0x20>
 800ed46:	4b91      	ldr	r3, [pc, #580]	; (800ef8c <tcp_receive+0x258>)
 800ed48:	f240 427b 	movw	r2, #1147	; 0x47b
 800ed4c:	4990      	ldr	r1, [pc, #576]	; (800ef90 <tcp_receive+0x25c>)
 800ed4e:	4891      	ldr	r0, [pc, #580]	; (800ef94 <tcp_receive+0x260>)
 800ed50:	f007 fd76 	bl	8016840 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	7d1b      	ldrb	r3, [r3, #20]
 800ed58:	2b03      	cmp	r3, #3
 800ed5a:	d806      	bhi.n	800ed6a <tcp_receive+0x36>
 800ed5c:	4b8b      	ldr	r3, [pc, #556]	; (800ef8c <tcp_receive+0x258>)
 800ed5e:	f240 427c 	movw	r2, #1148	; 0x47c
 800ed62:	498d      	ldr	r1, [pc, #564]	; (800ef98 <tcp_receive+0x264>)
 800ed64:	488b      	ldr	r0, [pc, #556]	; (800ef94 <tcp_receive+0x260>)
 800ed66:	f007 fd6b 	bl	8016840 <iprintf>

  if (flags & TCP_ACK) {
 800ed6a:	4b8c      	ldr	r3, [pc, #560]	; (800ef9c <tcp_receive+0x268>)
 800ed6c:	781b      	ldrb	r3, [r3, #0]
 800ed6e:	f003 0310 	and.w	r3, r3, #16
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	f000 8264 	beq.w	800f240 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ed7e:	461a      	mov	r2, r3
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ed84:	4413      	add	r3, r2
 800ed86:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed8c:	4b84      	ldr	r3, [pc, #528]	; (800efa0 <tcp_receive+0x26c>)
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	1ad3      	subs	r3, r2, r3
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	db1b      	blt.n	800edce <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ed9a:	4b81      	ldr	r3, [pc, #516]	; (800efa0 <tcp_receive+0x26c>)
 800ed9c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800ed9e:	429a      	cmp	r2, r3
 800eda0:	d106      	bne.n	800edb0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800eda2:	687b      	ldr	r3, [r7, #4]
 800eda4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800eda6:	4b7f      	ldr	r3, [pc, #508]	; (800efa4 <tcp_receive+0x270>)
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	1ad3      	subs	r3, r2, r3
 800edac:	2b00      	cmp	r3, #0
 800edae:	db0e      	blt.n	800edce <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800edb4:	4b7b      	ldr	r3, [pc, #492]	; (800efa4 <tcp_receive+0x270>)
 800edb6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800edb8:	429a      	cmp	r2, r3
 800edba:	d125      	bne.n	800ee08 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800edbc:	4b7a      	ldr	r3, [pc, #488]	; (800efa8 <tcp_receive+0x274>)
 800edbe:	681b      	ldr	r3, [r3, #0]
 800edc0:	89db      	ldrh	r3, [r3, #14]
 800edc2:	b29a      	uxth	r2, r3
 800edc4:	687b      	ldr	r3, [r7, #4]
 800edc6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800edca:	429a      	cmp	r2, r3
 800edcc:	d91c      	bls.n	800ee08 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800edce:	4b76      	ldr	r3, [pc, #472]	; (800efa8 <tcp_receive+0x274>)
 800edd0:	681b      	ldr	r3, [r3, #0]
 800edd2:	89db      	ldrh	r3, [r3, #14]
 800edd4:	b29a      	uxth	r2, r3
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ede8:	429a      	cmp	r2, r3
 800edea:	d205      	bcs.n	800edf8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800edf8:	4b69      	ldr	r3, [pc, #420]	; (800efa0 <tcp_receive+0x26c>)
 800edfa:	681a      	ldr	r2, [r3, #0]
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800ee00:	4b68      	ldr	r3, [pc, #416]	; (800efa4 <tcp_receive+0x270>)
 800ee02:	681a      	ldr	r2, [r3, #0]
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800ee08:	4b66      	ldr	r3, [pc, #408]	; (800efa4 <tcp_receive+0x270>)
 800ee0a:	681a      	ldr	r2, [r3, #0]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee10:	1ad3      	subs	r3, r2, r3
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	dc58      	bgt.n	800eec8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800ee16:	4b65      	ldr	r3, [pc, #404]	; (800efac <tcp_receive+0x278>)
 800ee18:	881b      	ldrh	r3, [r3, #0]
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d14b      	bne.n	800eeb6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ee22:	687a      	ldr	r2, [r7, #4]
 800ee24:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800ee28:	4413      	add	r3, r2
 800ee2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ee2c:	429a      	cmp	r2, r3
 800ee2e:	d142      	bne.n	800eeb6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800ee30:	687b      	ldr	r3, [r7, #4]
 800ee32:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	db3d      	blt.n	800eeb6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ee3e:	4b59      	ldr	r3, [pc, #356]	; (800efa4 <tcp_receive+0x270>)
 800ee40:	681b      	ldr	r3, [r3, #0]
 800ee42:	429a      	cmp	r2, r3
 800ee44:	d137      	bne.n	800eeb6 <tcp_receive+0x182>
              found_dupack = 1;
 800ee46:	2301      	movs	r3, #1
 800ee48:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800ee4a:	687b      	ldr	r3, [r7, #4]
 800ee4c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee50:	2bff      	cmp	r3, #255	; 0xff
 800ee52:	d007      	beq.n	800ee64 <tcp_receive+0x130>
                ++pcb->dupacks;
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee5a:	3301      	adds	r3, #1
 800ee5c:	b2da      	uxtb	r2, r3
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800ee6a:	2b03      	cmp	r3, #3
 800ee6c:	d91b      	bls.n	800eea6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ee6e:	687b      	ldr	r3, [r7, #4]
 800ee70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee78:	4413      	add	r3, r2
 800ee7a:	b29a      	uxth	r2, r3
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ee82:	429a      	cmp	r2, r3
 800ee84:	d30a      	bcc.n	800ee9c <tcp_receive+0x168>
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ee90:	4413      	add	r3, r2
 800ee92:	b29a      	uxth	r2, r3
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ee9a:	e004      	b.n	800eea6 <tcp_receive+0x172>
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800eea2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800eeac:	2b02      	cmp	r3, #2
 800eeae:	d902      	bls.n	800eeb6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800eeb0:	6878      	ldr	r0, [r7, #4]
 800eeb2:	f001 feeb 	bl	8010c8c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800eeb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800eeb8:	2b00      	cmp	r3, #0
 800eeba:	f040 8161 	bne.w	800f180 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	2200      	movs	r2, #0
 800eec2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800eec6:	e15b      	b.n	800f180 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800eec8:	4b36      	ldr	r3, [pc, #216]	; (800efa4 <tcp_receive+0x270>)
 800eeca:	681a      	ldr	r2, [r3, #0]
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eed0:	1ad3      	subs	r3, r2, r3
 800eed2:	3b01      	subs	r3, #1
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	f2c0 814e 	blt.w	800f176 <tcp_receive+0x442>
 800eeda:	4b32      	ldr	r3, [pc, #200]	; (800efa4 <tcp_receive+0x270>)
 800eedc:	681a      	ldr	r2, [r3, #0]
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eee2:	1ad3      	subs	r3, r2, r3
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	f300 8146 	bgt.w	800f176 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	8b5b      	ldrh	r3, [r3, #26]
 800eeee:	f003 0304 	and.w	r3, r3, #4
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d010      	beq.n	800ef18 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	8b5b      	ldrh	r3, [r3, #26]
 800eefa:	f023 0304 	bic.w	r3, r3, #4
 800eefe:	b29a      	uxth	r2, r3
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	2200      	movs	r2, #0
 800ef14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800ef26:	10db      	asrs	r3, r3, #3
 800ef28:	b21b      	sxth	r3, r3
 800ef2a:	b29a      	uxth	r2, r3
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800ef32:	b29b      	uxth	r3, r3
 800ef34:	4413      	add	r3, r2
 800ef36:	b29b      	uxth	r3, r3
 800ef38:	b21a      	sxth	r2, r3
 800ef3a:	687b      	ldr	r3, [r7, #4]
 800ef3c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800ef40:	4b18      	ldr	r3, [pc, #96]	; (800efa4 <tcp_receive+0x270>)
 800ef42:	681b      	ldr	r3, [r3, #0]
 800ef44:	b29a      	uxth	r2, r3
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef4a:	b29b      	uxth	r3, r3
 800ef4c:	1ad3      	subs	r3, r2, r3
 800ef4e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	2200      	movs	r2, #0
 800ef54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800ef58:	4b12      	ldr	r3, [pc, #72]	; (800efa4 <tcp_receive+0x270>)
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	7d1b      	ldrb	r3, [r3, #20]
 800ef64:	2b03      	cmp	r3, #3
 800ef66:	f240 8097 	bls.w	800f098 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d245      	bcs.n	800f006 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	8b5b      	ldrh	r3, [r3, #26]
 800ef7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ef82:	2b00      	cmp	r3, #0
 800ef84:	d014      	beq.n	800efb0 <tcp_receive+0x27c>
 800ef86:	2301      	movs	r3, #1
 800ef88:	e013      	b.n	800efb2 <tcp_receive+0x27e>
 800ef8a:	bf00      	nop
 800ef8c:	08018a14 	.word	0x08018a14
 800ef90:	08018d44 	.word	0x08018d44
 800ef94:	08018a60 	.word	0x08018a60
 800ef98:	08018d60 	.word	0x08018d60
 800ef9c:	2000f248 	.word	0x2000f248
 800efa0:	2000f23c 	.word	0x2000f23c
 800efa4:	2000f240 	.word	0x2000f240
 800efa8:	2000f22c 	.word	0x2000f22c
 800efac:	2000f246 	.word	0x2000f246
 800efb0:	2302      	movs	r3, #2
 800efb2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800efb6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800efba:	b29a      	uxth	r2, r3
 800efbc:	687b      	ldr	r3, [r7, #4]
 800efbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800efc0:	fb12 f303 	smulbb	r3, r2, r3
 800efc4:	b29b      	uxth	r3, r3
 800efc6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800efc8:	4293      	cmp	r3, r2
 800efca:	bf28      	it	cs
 800efcc:	4613      	movcs	r3, r2
 800efce:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800efd6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800efd8:	4413      	add	r3, r2
 800efda:	b29a      	uxth	r2, r3
 800efdc:	687b      	ldr	r3, [r7, #4]
 800efde:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800efe2:	429a      	cmp	r2, r3
 800efe4:	d309      	bcc.n	800effa <tcp_receive+0x2c6>
 800efe6:	687b      	ldr	r3, [r7, #4]
 800efe8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800efec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800efee:	4413      	add	r3, r2
 800eff0:	b29a      	uxth	r2, r3
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800eff8:	e04e      	b.n	800f098 <tcp_receive+0x364>
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f000:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f004:	e048      	b.n	800f098 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800f006:	687b      	ldr	r3, [r7, #4]
 800f008:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f00c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f00e:	4413      	add	r3, r2
 800f010:	b29a      	uxth	r2, r3
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800f018:	429a      	cmp	r2, r3
 800f01a:	d309      	bcc.n	800f030 <tcp_receive+0x2fc>
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f022:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800f024:	4413      	add	r3, r2
 800f026:	b29a      	uxth	r2, r3
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800f02e:	e004      	b.n	800f03a <tcp_receive+0x306>
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f036:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f040:	687b      	ldr	r3, [r7, #4]
 800f042:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f046:	429a      	cmp	r2, r3
 800f048:	d326      	bcc.n	800f098 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f056:	1ad3      	subs	r3, r2, r3
 800f058:	b29a      	uxth	r2, r3
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f06a:	4413      	add	r3, r2
 800f06c:	b29a      	uxth	r2, r3
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f074:	429a      	cmp	r2, r3
 800f076:	d30a      	bcc.n	800f08e <tcp_receive+0x35a>
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f082:	4413      	add	r3, r2
 800f084:	b29a      	uxth	r2, r3
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f08c:	e004      	b.n	800f098 <tcp_receive+0x364>
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f094:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800f098:	687b      	ldr	r3, [r7, #4]
 800f09a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0a0:	4a98      	ldr	r2, [pc, #608]	; (800f304 <tcp_receive+0x5d0>)
 800f0a2:	6878      	ldr	r0, [r7, #4]
 800f0a4:	f7ff fdca 	bl	800ec3c <tcp_free_acked_segments>
 800f0a8:	4602      	mov	r2, r0
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 800f0b2:	687b      	ldr	r3, [r7, #4]
 800f0b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0b6:	4a94      	ldr	r2, [pc, #592]	; (800f308 <tcp_receive+0x5d4>)
 800f0b8:	6878      	ldr	r0, [r7, #4]
 800f0ba:	f7ff fdbf 	bl	800ec3c <tcp_free_acked_segments>
 800f0be:	4602      	mov	r2, r0
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d104      	bne.n	800f0d6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0d2:	861a      	strh	r2, [r3, #48]	; 0x30
 800f0d4:	e002      	b.n	800f0dc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	2200      	movs	r2, #0
 800f0e0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d103      	bne.n	800f0f2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2200      	movs	r2, #0
 800f0ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 800f0f8:	4b84      	ldr	r3, [pc, #528]	; (800f30c <tcp_receive+0x5d8>)
 800f0fa:	881b      	ldrh	r3, [r3, #0]
 800f0fc:	4413      	add	r3, r2
 800f0fe:	b29a      	uxth	r2, r3
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	8b5b      	ldrh	r3, [r3, #26]
 800f10a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d035      	beq.n	800f17e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f116:	2b00      	cmp	r3, #0
 800f118:	d118      	bne.n	800f14c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 800f11a:	687b      	ldr	r3, [r7, #4]
 800f11c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00c      	beq.n	800f13c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f12a:	68db      	ldr	r3, [r3, #12]
 800f12c:	685b      	ldr	r3, [r3, #4]
 800f12e:	4618      	mov	r0, r3
 800f130:	f7fb f91b 	bl	800a36a <lwip_htonl>
 800f134:	4603      	mov	r3, r0
 800f136:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 800f138:	2b00      	cmp	r3, #0
 800f13a:	dc20      	bgt.n	800f17e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	8b5b      	ldrh	r3, [r3, #26]
 800f140:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f144:	b29a      	uxth	r2, r3
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f14a:	e018      	b.n	800f17e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f154:	68db      	ldr	r3, [r3, #12]
 800f156:	685b      	ldr	r3, [r3, #4]
 800f158:	4618      	mov	r0, r3
 800f15a:	f7fb f906 	bl	800a36a <lwip_htonl>
 800f15e:	4603      	mov	r3, r0
 800f160:	1ae3      	subs	r3, r4, r3
 800f162:	2b00      	cmp	r3, #0
 800f164:	dc0b      	bgt.n	800f17e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	8b5b      	ldrh	r3, [r3, #26]
 800f16a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f16e:	b29a      	uxth	r2, r3
 800f170:	687b      	ldr	r3, [r7, #4]
 800f172:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f174:	e003      	b.n	800f17e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800f176:	6878      	ldr	r0, [r7, #4]
 800f178:	f001 ff76 	bl	8011068 <tcp_send_empty_ack>
 800f17c:	e000      	b.n	800f180 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f17e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f184:	2b00      	cmp	r3, #0
 800f186:	d05b      	beq.n	800f240 <tcp_receive+0x50c>
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f18c:	4b60      	ldr	r3, [pc, #384]	; (800f310 <tcp_receive+0x5dc>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	1ad3      	subs	r3, r2, r3
 800f192:	2b00      	cmp	r3, #0
 800f194:	da54      	bge.n	800f240 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800f196:	4b5f      	ldr	r3, [pc, #380]	; (800f314 <tcp_receive+0x5e0>)
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	b29a      	uxth	r2, r3
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f1a0:	b29b      	uxth	r3, r3
 800f1a2:	1ad3      	subs	r3, r2, r3
 800f1a4:	b29b      	uxth	r3, r3
 800f1a6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 800f1aa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f1b4:	10db      	asrs	r3, r3, #3
 800f1b6:	b21b      	sxth	r3, r3
 800f1b8:	b29b      	uxth	r3, r3
 800f1ba:	1ad3      	subs	r3, r2, r3
 800f1bc:	b29b      	uxth	r3, r3
 800f1be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f1c8:	b29a      	uxth	r2, r3
 800f1ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f1ce:	4413      	add	r3, r2
 800f1d0:	b29b      	uxth	r3, r3
 800f1d2:	b21a      	sxth	r2, r3
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800f1d8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 800f1dc:	2b00      	cmp	r3, #0
 800f1de:	da05      	bge.n	800f1ec <tcp_receive+0x4b8>
        m = (s16_t) - m;
 800f1e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f1e4:	425b      	negs	r3, r3
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 800f1ec:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800f1f0:	687b      	ldr	r3, [r7, #4]
 800f1f2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f1f6:	109b      	asrs	r3, r3, #2
 800f1f8:	b21b      	sxth	r3, r3
 800f1fa:	b29b      	uxth	r3, r3
 800f1fc:	1ad3      	subs	r3, r2, r3
 800f1fe:	b29b      	uxth	r3, r3
 800f200:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f20a:	b29a      	uxth	r2, r3
 800f20c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800f210:	4413      	add	r3, r2
 800f212:	b29b      	uxth	r3, r3
 800f214:	b21a      	sxth	r2, r3
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f220:	10db      	asrs	r3, r3, #3
 800f222:	b21b      	sxth	r3, r3
 800f224:	b29a      	uxth	r2, r3
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f22c:	b29b      	uxth	r3, r3
 800f22e:	4413      	add	r3, r2
 800f230:	b29b      	uxth	r3, r3
 800f232:	b21a      	sxth	r2, r3
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	2200      	movs	r2, #0
 800f23e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800f240:	4b35      	ldr	r3, [pc, #212]	; (800f318 <tcp_receive+0x5e4>)
 800f242:	881b      	ldrh	r3, [r3, #0]
 800f244:	2b00      	cmp	r3, #0
 800f246:	f000 84e2 	beq.w	800fc0e <tcp_receive+0xeda>
 800f24a:	687b      	ldr	r3, [r7, #4]
 800f24c:	7d1b      	ldrb	r3, [r3, #20]
 800f24e:	2b06      	cmp	r3, #6
 800f250:	f200 84dd 	bhi.w	800fc0e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f258:	4b30      	ldr	r3, [pc, #192]	; (800f31c <tcp_receive+0x5e8>)
 800f25a:	681b      	ldr	r3, [r3, #0]
 800f25c:	1ad3      	subs	r3, r2, r3
 800f25e:	3b01      	subs	r3, #1
 800f260:	2b00      	cmp	r3, #0
 800f262:	f2c0 808f 	blt.w	800f384 <tcp_receive+0x650>
 800f266:	687b      	ldr	r3, [r7, #4]
 800f268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f26a:	4b2b      	ldr	r3, [pc, #172]	; (800f318 <tcp_receive+0x5e4>)
 800f26c:	881b      	ldrh	r3, [r3, #0]
 800f26e:	4619      	mov	r1, r3
 800f270:	4b2a      	ldr	r3, [pc, #168]	; (800f31c <tcp_receive+0x5e8>)
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	440b      	add	r3, r1
 800f276:	1ad3      	subs	r3, r2, r3
 800f278:	3301      	adds	r3, #1
 800f27a:	2b00      	cmp	r3, #0
 800f27c:	f300 8082 	bgt.w	800f384 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800f280:	4b27      	ldr	r3, [pc, #156]	; (800f320 <tcp_receive+0x5ec>)
 800f282:	685b      	ldr	r3, [r3, #4]
 800f284:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f28a:	4b24      	ldr	r3, [pc, #144]	; (800f31c <tcp_receive+0x5e8>)
 800f28c:	681b      	ldr	r3, [r3, #0]
 800f28e:	1ad3      	subs	r3, r2, r3
 800f290:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800f292:	4b23      	ldr	r3, [pc, #140]	; (800f320 <tcp_receive+0x5ec>)
 800f294:	685b      	ldr	r3, [r3, #4]
 800f296:	2b00      	cmp	r3, #0
 800f298:	d106      	bne.n	800f2a8 <tcp_receive+0x574>
 800f29a:	4b22      	ldr	r3, [pc, #136]	; (800f324 <tcp_receive+0x5f0>)
 800f29c:	f240 5294 	movw	r2, #1428	; 0x594
 800f2a0:	4921      	ldr	r1, [pc, #132]	; (800f328 <tcp_receive+0x5f4>)
 800f2a2:	4822      	ldr	r0, [pc, #136]	; (800f32c <tcp_receive+0x5f8>)
 800f2a4:	f007 facc 	bl	8016840 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 800f2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2aa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800f2ae:	4293      	cmp	r3, r2
 800f2b0:	d906      	bls.n	800f2c0 <tcp_receive+0x58c>
 800f2b2:	4b1c      	ldr	r3, [pc, #112]	; (800f324 <tcp_receive+0x5f0>)
 800f2b4:	f240 5295 	movw	r2, #1429	; 0x595
 800f2b8:	491d      	ldr	r1, [pc, #116]	; (800f330 <tcp_receive+0x5fc>)
 800f2ba:	481c      	ldr	r0, [pc, #112]	; (800f32c <tcp_receive+0x5f8>)
 800f2bc:	f007 fac0 	bl	8016840 <iprintf>
      off = (u16_t)off32;
 800f2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2c2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800f2c6:	4b16      	ldr	r3, [pc, #88]	; (800f320 <tcp_receive+0x5ec>)
 800f2c8:	685b      	ldr	r3, [r3, #4]
 800f2ca:	891b      	ldrh	r3, [r3, #8]
 800f2cc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f2d0:	429a      	cmp	r2, r3
 800f2d2:	d906      	bls.n	800f2e2 <tcp_receive+0x5ae>
 800f2d4:	4b13      	ldr	r3, [pc, #76]	; (800f324 <tcp_receive+0x5f0>)
 800f2d6:	f240 5297 	movw	r2, #1431	; 0x597
 800f2da:	4916      	ldr	r1, [pc, #88]	; (800f334 <tcp_receive+0x600>)
 800f2dc:	4813      	ldr	r0, [pc, #76]	; (800f32c <tcp_receive+0x5f8>)
 800f2de:	f007 faaf 	bl	8016840 <iprintf>
      inseg.len -= off;
 800f2e2:	4b0f      	ldr	r3, [pc, #60]	; (800f320 <tcp_receive+0x5ec>)
 800f2e4:	891a      	ldrh	r2, [r3, #8]
 800f2e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f2ea:	1ad3      	subs	r3, r2, r3
 800f2ec:	b29a      	uxth	r2, r3
 800f2ee:	4b0c      	ldr	r3, [pc, #48]	; (800f320 <tcp_receive+0x5ec>)
 800f2f0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800f2f2:	4b0b      	ldr	r3, [pc, #44]	; (800f320 <tcp_receive+0x5ec>)
 800f2f4:	685b      	ldr	r3, [r3, #4]
 800f2f6:	891a      	ldrh	r2, [r3, #8]
 800f2f8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f2fc:	1ad3      	subs	r3, r2, r3
 800f2fe:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 800f300:	e02a      	b.n	800f358 <tcp_receive+0x624>
 800f302:	bf00      	nop
 800f304:	08018d7c 	.word	0x08018d7c
 800f308:	08018d84 	.word	0x08018d84
 800f30c:	2000f244 	.word	0x2000f244
 800f310:	2000f240 	.word	0x2000f240
 800f314:	2000f204 	.word	0x2000f204
 800f318:	2000f246 	.word	0x2000f246
 800f31c:	2000f23c 	.word	0x2000f23c
 800f320:	2000f21c 	.word	0x2000f21c
 800f324:	08018a14 	.word	0x08018a14
 800f328:	08018d8c 	.word	0x08018d8c
 800f32c:	08018a60 	.word	0x08018a60
 800f330:	08018d9c 	.word	0x08018d9c
 800f334:	08018dac 	.word	0x08018dac
        off -= p->len;
 800f338:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f33a:	895b      	ldrh	r3, [r3, #10]
 800f33c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f340:	1ad3      	subs	r3, r2, r3
 800f342:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 800f346:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f348:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800f34a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 800f34c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f34e:	2200      	movs	r2, #0
 800f350:	815a      	strh	r2, [r3, #10]
        p = p->next;
 800f352:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 800f358:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f35a:	895b      	ldrh	r3, [r3, #10]
 800f35c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 800f360:	429a      	cmp	r2, r3
 800f362:	d8e9      	bhi.n	800f338 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 800f364:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800f368:	4619      	mov	r1, r3
 800f36a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800f36c:	f7fc fb60 	bl	800ba30 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800f370:	687b      	ldr	r3, [r7, #4]
 800f372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f374:	4a91      	ldr	r2, [pc, #580]	; (800f5bc <tcp_receive+0x888>)
 800f376:	6013      	str	r3, [r2, #0]
 800f378:	4b91      	ldr	r3, [pc, #580]	; (800f5c0 <tcp_receive+0x88c>)
 800f37a:	68db      	ldr	r3, [r3, #12]
 800f37c:	4a8f      	ldr	r2, [pc, #572]	; (800f5bc <tcp_receive+0x888>)
 800f37e:	6812      	ldr	r2, [r2, #0]
 800f380:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800f382:	e00d      	b.n	800f3a0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800f384:	4b8d      	ldr	r3, [pc, #564]	; (800f5bc <tcp_receive+0x888>)
 800f386:	681a      	ldr	r2, [r3, #0]
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f38c:	1ad3      	subs	r3, r2, r3
 800f38e:	2b00      	cmp	r3, #0
 800f390:	da06      	bge.n	800f3a0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	8b5b      	ldrh	r3, [r3, #26]
 800f396:	f043 0302 	orr.w	r3, r3, #2
 800f39a:	b29a      	uxth	r2, r3
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f3a0:	4b86      	ldr	r3, [pc, #536]	; (800f5bc <tcp_receive+0x888>)
 800f3a2:	681a      	ldr	r2, [r3, #0]
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3a8:	1ad3      	subs	r3, r2, r3
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	f2c0 842a 	blt.w	800fc04 <tcp_receive+0xed0>
 800f3b0:	4b82      	ldr	r3, [pc, #520]	; (800f5bc <tcp_receive+0x888>)
 800f3b2:	681a      	ldr	r2, [r3, #0]
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f3b8:	6879      	ldr	r1, [r7, #4]
 800f3ba:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f3bc:	440b      	add	r3, r1
 800f3be:	1ad3      	subs	r3, r2, r3
 800f3c0:	3301      	adds	r3, #1
 800f3c2:	2b00      	cmp	r3, #0
 800f3c4:	f300 841e 	bgt.w	800fc04 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f3cc:	4b7b      	ldr	r3, [pc, #492]	; (800f5bc <tcp_receive+0x888>)
 800f3ce:	681b      	ldr	r3, [r3, #0]
 800f3d0:	429a      	cmp	r2, r3
 800f3d2:	f040 829a 	bne.w	800f90a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800f3d6:	4b7a      	ldr	r3, [pc, #488]	; (800f5c0 <tcp_receive+0x88c>)
 800f3d8:	891c      	ldrh	r4, [r3, #8]
 800f3da:	4b79      	ldr	r3, [pc, #484]	; (800f5c0 <tcp_receive+0x88c>)
 800f3dc:	68db      	ldr	r3, [r3, #12]
 800f3de:	899b      	ldrh	r3, [r3, #12]
 800f3e0:	b29b      	uxth	r3, r3
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f7fa ffac 	bl	800a340 <lwip_htons>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	b2db      	uxtb	r3, r3
 800f3ec:	f003 0303 	and.w	r3, r3, #3
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d001      	beq.n	800f3f8 <tcp_receive+0x6c4>
 800f3f4:	2301      	movs	r3, #1
 800f3f6:	e000      	b.n	800f3fa <tcp_receive+0x6c6>
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	4423      	add	r3, r4
 800f3fc:	b29a      	uxth	r2, r3
 800f3fe:	4b71      	ldr	r3, [pc, #452]	; (800f5c4 <tcp_receive+0x890>)
 800f400:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800f402:	687b      	ldr	r3, [r7, #4]
 800f404:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f406:	4b6f      	ldr	r3, [pc, #444]	; (800f5c4 <tcp_receive+0x890>)
 800f408:	881b      	ldrh	r3, [r3, #0]
 800f40a:	429a      	cmp	r2, r3
 800f40c:	d275      	bcs.n	800f4fa <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f40e:	4b6c      	ldr	r3, [pc, #432]	; (800f5c0 <tcp_receive+0x88c>)
 800f410:	68db      	ldr	r3, [r3, #12]
 800f412:	899b      	ldrh	r3, [r3, #12]
 800f414:	b29b      	uxth	r3, r3
 800f416:	4618      	mov	r0, r3
 800f418:	f7fa ff92 	bl	800a340 <lwip_htons>
 800f41c:	4603      	mov	r3, r0
 800f41e:	b2db      	uxtb	r3, r3
 800f420:	f003 0301 	and.w	r3, r3, #1
 800f424:	2b00      	cmp	r3, #0
 800f426:	d01f      	beq.n	800f468 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800f428:	4b65      	ldr	r3, [pc, #404]	; (800f5c0 <tcp_receive+0x88c>)
 800f42a:	68db      	ldr	r3, [r3, #12]
 800f42c:	899b      	ldrh	r3, [r3, #12]
 800f42e:	b29b      	uxth	r3, r3
 800f430:	b21b      	sxth	r3, r3
 800f432:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800f436:	b21c      	sxth	r4, r3
 800f438:	4b61      	ldr	r3, [pc, #388]	; (800f5c0 <tcp_receive+0x88c>)
 800f43a:	68db      	ldr	r3, [r3, #12]
 800f43c:	899b      	ldrh	r3, [r3, #12]
 800f43e:	b29b      	uxth	r3, r3
 800f440:	4618      	mov	r0, r3
 800f442:	f7fa ff7d 	bl	800a340 <lwip_htons>
 800f446:	4603      	mov	r3, r0
 800f448:	b2db      	uxtb	r3, r3
 800f44a:	b29b      	uxth	r3, r3
 800f44c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800f450:	b29b      	uxth	r3, r3
 800f452:	4618      	mov	r0, r3
 800f454:	f7fa ff74 	bl	800a340 <lwip_htons>
 800f458:	4603      	mov	r3, r0
 800f45a:	b21b      	sxth	r3, r3
 800f45c:	4323      	orrs	r3, r4
 800f45e:	b21a      	sxth	r2, r3
 800f460:	4b57      	ldr	r3, [pc, #348]	; (800f5c0 <tcp_receive+0x88c>)
 800f462:	68db      	ldr	r3, [r3, #12]
 800f464:	b292      	uxth	r2, r2
 800f466:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f46c:	4b54      	ldr	r3, [pc, #336]	; (800f5c0 <tcp_receive+0x88c>)
 800f46e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f470:	4b53      	ldr	r3, [pc, #332]	; (800f5c0 <tcp_receive+0x88c>)
 800f472:	68db      	ldr	r3, [r3, #12]
 800f474:	899b      	ldrh	r3, [r3, #12]
 800f476:	b29b      	uxth	r3, r3
 800f478:	4618      	mov	r0, r3
 800f47a:	f7fa ff61 	bl	800a340 <lwip_htons>
 800f47e:	4603      	mov	r3, r0
 800f480:	b2db      	uxtb	r3, r3
 800f482:	f003 0302 	and.w	r3, r3, #2
 800f486:	2b00      	cmp	r3, #0
 800f488:	d005      	beq.n	800f496 <tcp_receive+0x762>
            inseg.len -= 1;
 800f48a:	4b4d      	ldr	r3, [pc, #308]	; (800f5c0 <tcp_receive+0x88c>)
 800f48c:	891b      	ldrh	r3, [r3, #8]
 800f48e:	3b01      	subs	r3, #1
 800f490:	b29a      	uxth	r2, r3
 800f492:	4b4b      	ldr	r3, [pc, #300]	; (800f5c0 <tcp_receive+0x88c>)
 800f494:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800f496:	4b4a      	ldr	r3, [pc, #296]	; (800f5c0 <tcp_receive+0x88c>)
 800f498:	685b      	ldr	r3, [r3, #4]
 800f49a:	4a49      	ldr	r2, [pc, #292]	; (800f5c0 <tcp_receive+0x88c>)
 800f49c:	8912      	ldrh	r2, [r2, #8]
 800f49e:	4611      	mov	r1, r2
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7fc f9c5 	bl	800b830 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800f4a6:	4b46      	ldr	r3, [pc, #280]	; (800f5c0 <tcp_receive+0x88c>)
 800f4a8:	891c      	ldrh	r4, [r3, #8]
 800f4aa:	4b45      	ldr	r3, [pc, #276]	; (800f5c0 <tcp_receive+0x88c>)
 800f4ac:	68db      	ldr	r3, [r3, #12]
 800f4ae:	899b      	ldrh	r3, [r3, #12]
 800f4b0:	b29b      	uxth	r3, r3
 800f4b2:	4618      	mov	r0, r3
 800f4b4:	f7fa ff44 	bl	800a340 <lwip_htons>
 800f4b8:	4603      	mov	r3, r0
 800f4ba:	b2db      	uxtb	r3, r3
 800f4bc:	f003 0303 	and.w	r3, r3, #3
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d001      	beq.n	800f4c8 <tcp_receive+0x794>
 800f4c4:	2301      	movs	r3, #1
 800f4c6:	e000      	b.n	800f4ca <tcp_receive+0x796>
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	4423      	add	r3, r4
 800f4cc:	b29a      	uxth	r2, r3
 800f4ce:	4b3d      	ldr	r3, [pc, #244]	; (800f5c4 <tcp_receive+0x890>)
 800f4d0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800f4d2:	4b3c      	ldr	r3, [pc, #240]	; (800f5c4 <tcp_receive+0x890>)
 800f4d4:	881b      	ldrh	r3, [r3, #0]
 800f4d6:	461a      	mov	r2, r3
 800f4d8:	4b38      	ldr	r3, [pc, #224]	; (800f5bc <tcp_receive+0x888>)
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	441a      	add	r2, r3
 800f4de:	687b      	ldr	r3, [r7, #4]
 800f4e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4e2:	6879      	ldr	r1, [r7, #4]
 800f4e4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f4e6:	440b      	add	r3, r1
 800f4e8:	429a      	cmp	r2, r3
 800f4ea:	d006      	beq.n	800f4fa <tcp_receive+0x7c6>
 800f4ec:	4b36      	ldr	r3, [pc, #216]	; (800f5c8 <tcp_receive+0x894>)
 800f4ee:	f240 52cb 	movw	r2, #1483	; 0x5cb
 800f4f2:	4936      	ldr	r1, [pc, #216]	; (800f5cc <tcp_receive+0x898>)
 800f4f4:	4836      	ldr	r0, [pc, #216]	; (800f5d0 <tcp_receive+0x89c>)
 800f4f6:	f007 f9a3 	bl	8016840 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	f000 80e7 	beq.w	800f6d2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f504:	4b2e      	ldr	r3, [pc, #184]	; (800f5c0 <tcp_receive+0x88c>)
 800f506:	68db      	ldr	r3, [r3, #12]
 800f508:	899b      	ldrh	r3, [r3, #12]
 800f50a:	b29b      	uxth	r3, r3
 800f50c:	4618      	mov	r0, r3
 800f50e:	f7fa ff17 	bl	800a340 <lwip_htons>
 800f512:	4603      	mov	r3, r0
 800f514:	b2db      	uxtb	r3, r3
 800f516:	f003 0301 	and.w	r3, r3, #1
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d010      	beq.n	800f540 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800f51e:	e00a      	b.n	800f536 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f524:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f52a:	681a      	ldr	r2, [r3, #0]
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 800f530:	68f8      	ldr	r0, [r7, #12]
 800f532:	f7fd fd92 	bl	800d05a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f53a:	2b00      	cmp	r3, #0
 800f53c:	d1f0      	bne.n	800f520 <tcp_receive+0x7ec>
 800f53e:	e0c8      	b.n	800f6d2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f544:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800f546:	e052      	b.n	800f5ee <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f54a:	68db      	ldr	r3, [r3, #12]
 800f54c:	899b      	ldrh	r3, [r3, #12]
 800f54e:	b29b      	uxth	r3, r3
 800f550:	4618      	mov	r0, r3
 800f552:	f7fa fef5 	bl	800a340 <lwip_htons>
 800f556:	4603      	mov	r3, r0
 800f558:	b2db      	uxtb	r3, r3
 800f55a:	f003 0301 	and.w	r3, r3, #1
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d03d      	beq.n	800f5de <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800f562:	4b17      	ldr	r3, [pc, #92]	; (800f5c0 <tcp_receive+0x88c>)
 800f564:	68db      	ldr	r3, [r3, #12]
 800f566:	899b      	ldrh	r3, [r3, #12]
 800f568:	b29b      	uxth	r3, r3
 800f56a:	4618      	mov	r0, r3
 800f56c:	f7fa fee8 	bl	800a340 <lwip_htons>
 800f570:	4603      	mov	r3, r0
 800f572:	b2db      	uxtb	r3, r3
 800f574:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800f578:	2b00      	cmp	r3, #0
 800f57a:	d130      	bne.n	800f5de <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800f57c:	4b10      	ldr	r3, [pc, #64]	; (800f5c0 <tcp_receive+0x88c>)
 800f57e:	68db      	ldr	r3, [r3, #12]
 800f580:	899b      	ldrh	r3, [r3, #12]
 800f582:	b29c      	uxth	r4, r3
 800f584:	2001      	movs	r0, #1
 800f586:	f7fa fedb 	bl	800a340 <lwip_htons>
 800f58a:	4603      	mov	r3, r0
 800f58c:	461a      	mov	r2, r3
 800f58e:	4b0c      	ldr	r3, [pc, #48]	; (800f5c0 <tcp_receive+0x88c>)
 800f590:	68db      	ldr	r3, [r3, #12]
 800f592:	4322      	orrs	r2, r4
 800f594:	b292      	uxth	r2, r2
 800f596:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800f598:	4b09      	ldr	r3, [pc, #36]	; (800f5c0 <tcp_receive+0x88c>)
 800f59a:	891c      	ldrh	r4, [r3, #8]
 800f59c:	4b08      	ldr	r3, [pc, #32]	; (800f5c0 <tcp_receive+0x88c>)
 800f59e:	68db      	ldr	r3, [r3, #12]
 800f5a0:	899b      	ldrh	r3, [r3, #12]
 800f5a2:	b29b      	uxth	r3, r3
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	f7fa fecb 	bl	800a340 <lwip_htons>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	b2db      	uxtb	r3, r3
 800f5ae:	f003 0303 	and.w	r3, r3, #3
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d00e      	beq.n	800f5d4 <tcp_receive+0x8a0>
 800f5b6:	2301      	movs	r3, #1
 800f5b8:	e00d      	b.n	800f5d6 <tcp_receive+0x8a2>
 800f5ba:	bf00      	nop
 800f5bc:	2000f23c 	.word	0x2000f23c
 800f5c0:	2000f21c 	.word	0x2000f21c
 800f5c4:	2000f246 	.word	0x2000f246
 800f5c8:	08018a14 	.word	0x08018a14
 800f5cc:	08018dbc 	.word	0x08018dbc
 800f5d0:	08018a60 	.word	0x08018a60
 800f5d4:	2300      	movs	r3, #0
 800f5d6:	4423      	add	r3, r4
 800f5d8:	b29a      	uxth	r2, r3
 800f5da:	4b98      	ldr	r3, [pc, #608]	; (800f83c <tcp_receive+0xb08>)
 800f5dc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 800f5de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5e0:	613b      	str	r3, [r7, #16]
              next = next->next;
 800f5e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 800f5e8:	6938      	ldr	r0, [r7, #16]
 800f5ea:	f7fd fd36 	bl	800d05a <tcp_seg_free>
            while (next &&
 800f5ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d00e      	beq.n	800f612 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 800f5f4:	4b91      	ldr	r3, [pc, #580]	; (800f83c <tcp_receive+0xb08>)
 800f5f6:	881b      	ldrh	r3, [r3, #0]
 800f5f8:	461a      	mov	r2, r3
 800f5fa:	4b91      	ldr	r3, [pc, #580]	; (800f840 <tcp_receive+0xb0c>)
 800f5fc:	681b      	ldr	r3, [r3, #0]
 800f5fe:	441a      	add	r2, r3
 800f600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f602:	68db      	ldr	r3, [r3, #12]
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f608:	8909      	ldrh	r1, [r1, #8]
 800f60a:	440b      	add	r3, r1
 800f60c:	1ad3      	subs	r3, r2, r3
            while (next &&
 800f60e:	2b00      	cmp	r3, #0
 800f610:	da9a      	bge.n	800f548 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 800f612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f614:	2b00      	cmp	r3, #0
 800f616:	d059      	beq.n	800f6cc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 800f618:	4b88      	ldr	r3, [pc, #544]	; (800f83c <tcp_receive+0xb08>)
 800f61a:	881b      	ldrh	r3, [r3, #0]
 800f61c:	461a      	mov	r2, r3
 800f61e:	4b88      	ldr	r3, [pc, #544]	; (800f840 <tcp_receive+0xb0c>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	441a      	add	r2, r3
 800f624:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f626:	68db      	ldr	r3, [r3, #12]
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	1ad3      	subs	r3, r2, r3
            if (next &&
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	dd4d      	ble.n	800f6cc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 800f630:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f632:	68db      	ldr	r3, [r3, #12]
 800f634:	685b      	ldr	r3, [r3, #4]
 800f636:	b29a      	uxth	r2, r3
 800f638:	4b81      	ldr	r3, [pc, #516]	; (800f840 <tcp_receive+0xb0c>)
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	b29b      	uxth	r3, r3
 800f63e:	1ad3      	subs	r3, r2, r3
 800f640:	b29a      	uxth	r2, r3
 800f642:	4b80      	ldr	r3, [pc, #512]	; (800f844 <tcp_receive+0xb10>)
 800f644:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800f646:	4b7f      	ldr	r3, [pc, #508]	; (800f844 <tcp_receive+0xb10>)
 800f648:	68db      	ldr	r3, [r3, #12]
 800f64a:	899b      	ldrh	r3, [r3, #12]
 800f64c:	b29b      	uxth	r3, r3
 800f64e:	4618      	mov	r0, r3
 800f650:	f7fa fe76 	bl	800a340 <lwip_htons>
 800f654:	4603      	mov	r3, r0
 800f656:	b2db      	uxtb	r3, r3
 800f658:	f003 0302 	and.w	r3, r3, #2
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d005      	beq.n	800f66c <tcp_receive+0x938>
                inseg.len -= 1;
 800f660:	4b78      	ldr	r3, [pc, #480]	; (800f844 <tcp_receive+0xb10>)
 800f662:	891b      	ldrh	r3, [r3, #8]
 800f664:	3b01      	subs	r3, #1
 800f666:	b29a      	uxth	r2, r3
 800f668:	4b76      	ldr	r3, [pc, #472]	; (800f844 <tcp_receive+0xb10>)
 800f66a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 800f66c:	4b75      	ldr	r3, [pc, #468]	; (800f844 <tcp_receive+0xb10>)
 800f66e:	685b      	ldr	r3, [r3, #4]
 800f670:	4a74      	ldr	r2, [pc, #464]	; (800f844 <tcp_receive+0xb10>)
 800f672:	8912      	ldrh	r2, [r2, #8]
 800f674:	4611      	mov	r1, r2
 800f676:	4618      	mov	r0, r3
 800f678:	f7fc f8da 	bl	800b830 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 800f67c:	4b71      	ldr	r3, [pc, #452]	; (800f844 <tcp_receive+0xb10>)
 800f67e:	891c      	ldrh	r4, [r3, #8]
 800f680:	4b70      	ldr	r3, [pc, #448]	; (800f844 <tcp_receive+0xb10>)
 800f682:	68db      	ldr	r3, [r3, #12]
 800f684:	899b      	ldrh	r3, [r3, #12]
 800f686:	b29b      	uxth	r3, r3
 800f688:	4618      	mov	r0, r3
 800f68a:	f7fa fe59 	bl	800a340 <lwip_htons>
 800f68e:	4603      	mov	r3, r0
 800f690:	b2db      	uxtb	r3, r3
 800f692:	f003 0303 	and.w	r3, r3, #3
 800f696:	2b00      	cmp	r3, #0
 800f698:	d001      	beq.n	800f69e <tcp_receive+0x96a>
 800f69a:	2301      	movs	r3, #1
 800f69c:	e000      	b.n	800f6a0 <tcp_receive+0x96c>
 800f69e:	2300      	movs	r3, #0
 800f6a0:	4423      	add	r3, r4
 800f6a2:	b29a      	uxth	r2, r3
 800f6a4:	4b65      	ldr	r3, [pc, #404]	; (800f83c <tcp_receive+0xb08>)
 800f6a6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 800f6a8:	4b64      	ldr	r3, [pc, #400]	; (800f83c <tcp_receive+0xb08>)
 800f6aa:	881b      	ldrh	r3, [r3, #0]
 800f6ac:	461a      	mov	r2, r3
 800f6ae:	4b64      	ldr	r3, [pc, #400]	; (800f840 <tcp_receive+0xb0c>)
 800f6b0:	681b      	ldr	r3, [r3, #0]
 800f6b2:	441a      	add	r2, r3
 800f6b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f6b6:	68db      	ldr	r3, [r3, #12]
 800f6b8:	685b      	ldr	r3, [r3, #4]
 800f6ba:	429a      	cmp	r2, r3
 800f6bc:	d006      	beq.n	800f6cc <tcp_receive+0x998>
 800f6be:	4b62      	ldr	r3, [pc, #392]	; (800f848 <tcp_receive+0xb14>)
 800f6c0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800f6c4:	4961      	ldr	r1, [pc, #388]	; (800f84c <tcp_receive+0xb18>)
 800f6c6:	4862      	ldr	r0, [pc, #392]	; (800f850 <tcp_receive+0xb1c>)
 800f6c8:	f007 f8ba 	bl	8016840 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 800f6cc:	687b      	ldr	r3, [r7, #4]
 800f6ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800f6d0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 800f6d2:	4b5a      	ldr	r3, [pc, #360]	; (800f83c <tcp_receive+0xb08>)
 800f6d4:	881b      	ldrh	r3, [r3, #0]
 800f6d6:	461a      	mov	r2, r3
 800f6d8:	4b59      	ldr	r3, [pc, #356]	; (800f840 <tcp_receive+0xb0c>)
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	441a      	add	r2, r3
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f6e6:	4b55      	ldr	r3, [pc, #340]	; (800f83c <tcp_receive+0xb08>)
 800f6e8:	881b      	ldrh	r3, [r3, #0]
 800f6ea:	429a      	cmp	r2, r3
 800f6ec:	d206      	bcs.n	800f6fc <tcp_receive+0x9c8>
 800f6ee:	4b56      	ldr	r3, [pc, #344]	; (800f848 <tcp_receive+0xb14>)
 800f6f0:	f240 6207 	movw	r2, #1543	; 0x607
 800f6f4:	4957      	ldr	r1, [pc, #348]	; (800f854 <tcp_receive+0xb20>)
 800f6f6:	4856      	ldr	r0, [pc, #344]	; (800f850 <tcp_receive+0xb1c>)
 800f6f8:	f007 f8a2 	bl	8016840 <iprintf>
        pcb->rcv_wnd -= tcplen;
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f700:	4b4e      	ldr	r3, [pc, #312]	; (800f83c <tcp_receive+0xb08>)
 800f702:	881b      	ldrh	r3, [r3, #0]
 800f704:	1ad3      	subs	r3, r2, r3
 800f706:	b29a      	uxth	r2, r3
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f7fc ffc5 	bl	800c69c <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 800f712:	4b4c      	ldr	r3, [pc, #304]	; (800f844 <tcp_receive+0xb10>)
 800f714:	685b      	ldr	r3, [r3, #4]
 800f716:	891b      	ldrh	r3, [r3, #8]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d006      	beq.n	800f72a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 800f71c:	4b49      	ldr	r3, [pc, #292]	; (800f844 <tcp_receive+0xb10>)
 800f71e:	685b      	ldr	r3, [r3, #4]
 800f720:	4a4d      	ldr	r2, [pc, #308]	; (800f858 <tcp_receive+0xb24>)
 800f722:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 800f724:	4b47      	ldr	r3, [pc, #284]	; (800f844 <tcp_receive+0xb10>)
 800f726:	2200      	movs	r2, #0
 800f728:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800f72a:	4b46      	ldr	r3, [pc, #280]	; (800f844 <tcp_receive+0xb10>)
 800f72c:	68db      	ldr	r3, [r3, #12]
 800f72e:	899b      	ldrh	r3, [r3, #12]
 800f730:	b29b      	uxth	r3, r3
 800f732:	4618      	mov	r0, r3
 800f734:	f7fa fe04 	bl	800a340 <lwip_htons>
 800f738:	4603      	mov	r3, r0
 800f73a:	b2db      	uxtb	r3, r3
 800f73c:	f003 0301 	and.w	r3, r3, #1
 800f740:	2b00      	cmp	r3, #0
 800f742:	f000 80b8 	beq.w	800f8b6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 800f746:	4b45      	ldr	r3, [pc, #276]	; (800f85c <tcp_receive+0xb28>)
 800f748:	781b      	ldrb	r3, [r3, #0]
 800f74a:	f043 0320 	orr.w	r3, r3, #32
 800f74e:	b2da      	uxtb	r2, r3
 800f750:	4b42      	ldr	r3, [pc, #264]	; (800f85c <tcp_receive+0xb28>)
 800f752:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 800f754:	e0af      	b.n	800f8b6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f75a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f760:	68db      	ldr	r3, [r3, #12]
 800f762:	685b      	ldr	r3, [r3, #4]
 800f764:	4a36      	ldr	r2, [pc, #216]	; (800f840 <tcp_receive+0xb0c>)
 800f766:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 800f768:	68bb      	ldr	r3, [r7, #8]
 800f76a:	891b      	ldrh	r3, [r3, #8]
 800f76c:	461c      	mov	r4, r3
 800f76e:	68bb      	ldr	r3, [r7, #8]
 800f770:	68db      	ldr	r3, [r3, #12]
 800f772:	899b      	ldrh	r3, [r3, #12]
 800f774:	b29b      	uxth	r3, r3
 800f776:	4618      	mov	r0, r3
 800f778:	f7fa fde2 	bl	800a340 <lwip_htons>
 800f77c:	4603      	mov	r3, r0
 800f77e:	b2db      	uxtb	r3, r3
 800f780:	f003 0303 	and.w	r3, r3, #3
 800f784:	2b00      	cmp	r3, #0
 800f786:	d001      	beq.n	800f78c <tcp_receive+0xa58>
 800f788:	2301      	movs	r3, #1
 800f78a:	e000      	b.n	800f78e <tcp_receive+0xa5a>
 800f78c:	2300      	movs	r3, #0
 800f78e:	191a      	adds	r2, r3, r4
 800f790:	687b      	ldr	r3, [r7, #4]
 800f792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f794:	441a      	add	r2, r3
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800f79e:	461c      	mov	r4, r3
 800f7a0:	68bb      	ldr	r3, [r7, #8]
 800f7a2:	891b      	ldrh	r3, [r3, #8]
 800f7a4:	461d      	mov	r5, r3
 800f7a6:	68bb      	ldr	r3, [r7, #8]
 800f7a8:	68db      	ldr	r3, [r3, #12]
 800f7aa:	899b      	ldrh	r3, [r3, #12]
 800f7ac:	b29b      	uxth	r3, r3
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	f7fa fdc6 	bl	800a340 <lwip_htons>
 800f7b4:	4603      	mov	r3, r0
 800f7b6:	b2db      	uxtb	r3, r3
 800f7b8:	f003 0303 	and.w	r3, r3, #3
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d001      	beq.n	800f7c4 <tcp_receive+0xa90>
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	e000      	b.n	800f7c6 <tcp_receive+0xa92>
 800f7c4:	2300      	movs	r3, #0
 800f7c6:	442b      	add	r3, r5
 800f7c8:	429c      	cmp	r4, r3
 800f7ca:	d206      	bcs.n	800f7da <tcp_receive+0xaa6>
 800f7cc:	4b1e      	ldr	r3, [pc, #120]	; (800f848 <tcp_receive+0xb14>)
 800f7ce:	f240 622b 	movw	r2, #1579	; 0x62b
 800f7d2:	4923      	ldr	r1, [pc, #140]	; (800f860 <tcp_receive+0xb2c>)
 800f7d4:	481e      	ldr	r0, [pc, #120]	; (800f850 <tcp_receive+0xb1c>)
 800f7d6:	f007 f833 	bl	8016840 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 800f7da:	68bb      	ldr	r3, [r7, #8]
 800f7dc:	891b      	ldrh	r3, [r3, #8]
 800f7de:	461c      	mov	r4, r3
 800f7e0:	68bb      	ldr	r3, [r7, #8]
 800f7e2:	68db      	ldr	r3, [r3, #12]
 800f7e4:	899b      	ldrh	r3, [r3, #12]
 800f7e6:	b29b      	uxth	r3, r3
 800f7e8:	4618      	mov	r0, r3
 800f7ea:	f7fa fda9 	bl	800a340 <lwip_htons>
 800f7ee:	4603      	mov	r3, r0
 800f7f0:	b2db      	uxtb	r3, r3
 800f7f2:	f003 0303 	and.w	r3, r3, #3
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	d001      	beq.n	800f7fe <tcp_receive+0xaca>
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	e000      	b.n	800f800 <tcp_receive+0xacc>
 800f7fe:	2300      	movs	r3, #0
 800f800:	1919      	adds	r1, r3, r4
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800f806:	b28b      	uxth	r3, r1
 800f808:	1ad3      	subs	r3, r2, r3
 800f80a:	b29a      	uxth	r2, r3
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 800f810:	6878      	ldr	r0, [r7, #4]
 800f812:	f7fc ff43 	bl	800c69c <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	685b      	ldr	r3, [r3, #4]
 800f81a:	891b      	ldrh	r3, [r3, #8]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d028      	beq.n	800f872 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 800f820:	4b0d      	ldr	r3, [pc, #52]	; (800f858 <tcp_receive+0xb24>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	2b00      	cmp	r3, #0
 800f826:	d01d      	beq.n	800f864 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 800f828:	4b0b      	ldr	r3, [pc, #44]	; (800f858 <tcp_receive+0xb24>)
 800f82a:	681a      	ldr	r2, [r3, #0]
 800f82c:	68bb      	ldr	r3, [r7, #8]
 800f82e:	685b      	ldr	r3, [r3, #4]
 800f830:	4619      	mov	r1, r3
 800f832:	4610      	mov	r0, r2
 800f834:	f7fc fa50 	bl	800bcd8 <pbuf_cat>
 800f838:	e018      	b.n	800f86c <tcp_receive+0xb38>
 800f83a:	bf00      	nop
 800f83c:	2000f246 	.word	0x2000f246
 800f840:	2000f23c 	.word	0x2000f23c
 800f844:	2000f21c 	.word	0x2000f21c
 800f848:	08018a14 	.word	0x08018a14
 800f84c:	08018df4 	.word	0x08018df4
 800f850:	08018a60 	.word	0x08018a60
 800f854:	08018e30 	.word	0x08018e30
 800f858:	2000f24c 	.word	0x2000f24c
 800f85c:	2000f249 	.word	0x2000f249
 800f860:	08018e50 	.word	0x08018e50
            } else {
              recv_data = cseg->p;
 800f864:	68bb      	ldr	r3, [r7, #8]
 800f866:	685b      	ldr	r3, [r3, #4]
 800f868:	4a70      	ldr	r2, [pc, #448]	; (800fa2c <tcp_receive+0xcf8>)
 800f86a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	2200      	movs	r2, #0
 800f870:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f872:	68bb      	ldr	r3, [r7, #8]
 800f874:	68db      	ldr	r3, [r3, #12]
 800f876:	899b      	ldrh	r3, [r3, #12]
 800f878:	b29b      	uxth	r3, r3
 800f87a:	4618      	mov	r0, r3
 800f87c:	f7fa fd60 	bl	800a340 <lwip_htons>
 800f880:	4603      	mov	r3, r0
 800f882:	b2db      	uxtb	r3, r3
 800f884:	f003 0301 	and.w	r3, r3, #1
 800f888:	2b00      	cmp	r3, #0
 800f88a:	d00d      	beq.n	800f8a8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 800f88c:	4b68      	ldr	r3, [pc, #416]	; (800fa30 <tcp_receive+0xcfc>)
 800f88e:	781b      	ldrb	r3, [r3, #0]
 800f890:	f043 0320 	orr.w	r3, r3, #32
 800f894:	b2da      	uxtb	r2, r3
 800f896:	4b66      	ldr	r3, [pc, #408]	; (800fa30 <tcp_receive+0xcfc>)
 800f898:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 800f89a:	687b      	ldr	r3, [r7, #4]
 800f89c:	7d1b      	ldrb	r3, [r3, #20]
 800f89e:	2b04      	cmp	r3, #4
 800f8a0:	d102      	bne.n	800f8a8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2207      	movs	r2, #7
 800f8a6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 800f8a8:	68bb      	ldr	r3, [r7, #8]
 800f8aa:	681a      	ldr	r2, [r3, #0]
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 800f8b0:	68b8      	ldr	r0, [r7, #8]
 800f8b2:	f7fd fbd2 	bl	800d05a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 800f8b6:	687b      	ldr	r3, [r7, #4]
 800f8b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d008      	beq.n	800f8d0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 800f8be:	687b      	ldr	r3, [r7, #4]
 800f8c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f8c2:	68db      	ldr	r3, [r3, #12]
 800f8c4:	685a      	ldr	r2, [r3, #4]
 800f8c6:	687b      	ldr	r3, [r7, #4]
 800f8c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 800f8ca:	429a      	cmp	r2, r3
 800f8cc:	f43f af43 	beq.w	800f756 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	8b5b      	ldrh	r3, [r3, #26]
 800f8d4:	f003 0301 	and.w	r3, r3, #1
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d00e      	beq.n	800f8fa <tcp_receive+0xbc6>
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	8b5b      	ldrh	r3, [r3, #26]
 800f8e0:	f023 0301 	bic.w	r3, r3, #1
 800f8e4:	b29a      	uxth	r2, r3
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	835a      	strh	r2, [r3, #26]
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	8b5b      	ldrh	r3, [r3, #26]
 800f8ee:	f043 0302 	orr.w	r3, r3, #2
 800f8f2:	b29a      	uxth	r2, r3
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f8f8:	e188      	b.n	800fc0c <tcp_receive+0xed8>
        tcp_ack(pcb);
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	8b5b      	ldrh	r3, [r3, #26]
 800f8fe:	f043 0301 	orr.w	r3, r3, #1
 800f902:	b29a      	uxth	r2, r3
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 800f908:	e180      	b.n	800fc0c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 800f90a:	687b      	ldr	r3, [r7, #4]
 800f90c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d106      	bne.n	800f920 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 800f912:	4848      	ldr	r0, [pc, #288]	; (800fa34 <tcp_receive+0xd00>)
 800f914:	f7fd fbba 	bl	800d08c <tcp_seg_copy>
 800f918:	4602      	mov	r2, r0
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	675a      	str	r2, [r3, #116]	; 0x74
 800f91e:	e16d      	b.n	800fbfc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 800f920:	2300      	movs	r3, #0
 800f922:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800f924:	687b      	ldr	r3, [r7, #4]
 800f926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f928:	63bb      	str	r3, [r7, #56]	; 0x38
 800f92a:	e157      	b.n	800fbdc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 800f92c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f92e:	68db      	ldr	r3, [r3, #12]
 800f930:	685a      	ldr	r2, [r3, #4]
 800f932:	4b41      	ldr	r3, [pc, #260]	; (800fa38 <tcp_receive+0xd04>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	429a      	cmp	r2, r3
 800f938:	d11d      	bne.n	800f976 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 800f93a:	4b3e      	ldr	r3, [pc, #248]	; (800fa34 <tcp_receive+0xd00>)
 800f93c:	891a      	ldrh	r2, [r3, #8]
 800f93e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f940:	891b      	ldrh	r3, [r3, #8]
 800f942:	429a      	cmp	r2, r3
 800f944:	f240 814f 	bls.w	800fbe6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f948:	483a      	ldr	r0, [pc, #232]	; (800fa34 <tcp_receive+0xd00>)
 800f94a:	f7fd fb9f 	bl	800d08c <tcp_seg_copy>
 800f94e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 800f950:	697b      	ldr	r3, [r7, #20]
 800f952:	2b00      	cmp	r3, #0
 800f954:	f000 8149 	beq.w	800fbea <tcp_receive+0xeb6>
                  if (prev != NULL) {
 800f958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f95a:	2b00      	cmp	r3, #0
 800f95c:	d003      	beq.n	800f966 <tcp_receive+0xc32>
                    prev->next = cseg;
 800f95e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f960:	697a      	ldr	r2, [r7, #20]
 800f962:	601a      	str	r2, [r3, #0]
 800f964:	e002      	b.n	800f96c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	697a      	ldr	r2, [r7, #20]
 800f96a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 800f96c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f96e:	6978      	ldr	r0, [r7, #20]
 800f970:	f7ff f8dc 	bl	800eb2c <tcp_oos_insert_segment>
                }
                break;
 800f974:	e139      	b.n	800fbea <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 800f976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d117      	bne.n	800f9ac <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 800f97c:	4b2e      	ldr	r3, [pc, #184]	; (800fa38 <tcp_receive+0xd04>)
 800f97e:	681a      	ldr	r2, [r3, #0]
 800f980:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f982:	68db      	ldr	r3, [r3, #12]
 800f984:	685b      	ldr	r3, [r3, #4]
 800f986:	1ad3      	subs	r3, r2, r3
 800f988:	2b00      	cmp	r3, #0
 800f98a:	da57      	bge.n	800fa3c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f98c:	4829      	ldr	r0, [pc, #164]	; (800fa34 <tcp_receive+0xd00>)
 800f98e:	f7fd fb7d 	bl	800d08c <tcp_seg_copy>
 800f992:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 800f994:	69bb      	ldr	r3, [r7, #24]
 800f996:	2b00      	cmp	r3, #0
 800f998:	f000 8129 	beq.w	800fbee <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 800f99c:	687b      	ldr	r3, [r7, #4]
 800f99e:	69ba      	ldr	r2, [r7, #24]
 800f9a0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 800f9a2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800f9a4:	69b8      	ldr	r0, [r7, #24]
 800f9a6:	f7ff f8c1 	bl	800eb2c <tcp_oos_insert_segment>
                  }
                  break;
 800f9aa:	e120      	b.n	800fbee <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 800f9ac:	4b22      	ldr	r3, [pc, #136]	; (800fa38 <tcp_receive+0xd04>)
 800f9ae:	681a      	ldr	r2, [r3, #0]
 800f9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9b2:	68db      	ldr	r3, [r3, #12]
 800f9b4:	685b      	ldr	r3, [r3, #4]
 800f9b6:	1ad3      	subs	r3, r2, r3
 800f9b8:	3b01      	subs	r3, #1
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	db3e      	blt.n	800fa3c <tcp_receive+0xd08>
 800f9be:	4b1e      	ldr	r3, [pc, #120]	; (800fa38 <tcp_receive+0xd04>)
 800f9c0:	681a      	ldr	r2, [r3, #0]
 800f9c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f9c4:	68db      	ldr	r3, [r3, #12]
 800f9c6:	685b      	ldr	r3, [r3, #4]
 800f9c8:	1ad3      	subs	r3, r2, r3
 800f9ca:	3301      	adds	r3, #1
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	dc35      	bgt.n	800fa3c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 800f9d0:	4818      	ldr	r0, [pc, #96]	; (800fa34 <tcp_receive+0xd00>)
 800f9d2:	f7fd fb5b 	bl	800d08c <tcp_seg_copy>
 800f9d6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 800f9d8:	69fb      	ldr	r3, [r7, #28]
 800f9da:	2b00      	cmp	r3, #0
 800f9dc:	f000 8109 	beq.w	800fbf2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 800f9e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9e2:	68db      	ldr	r3, [r3, #12]
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f9e8:	8912      	ldrh	r2, [r2, #8]
 800f9ea:	441a      	add	r2, r3
 800f9ec:	4b12      	ldr	r3, [pc, #72]	; (800fa38 <tcp_receive+0xd04>)
 800f9ee:	681b      	ldr	r3, [r3, #0]
 800f9f0:	1ad3      	subs	r3, r2, r3
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	dd12      	ble.n	800fa1c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 800f9f6:	4b10      	ldr	r3, [pc, #64]	; (800fa38 <tcp_receive+0xd04>)
 800f9f8:	681b      	ldr	r3, [r3, #0]
 800f9fa:	b29a      	uxth	r2, r3
 800f9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f9fe:	68db      	ldr	r3, [r3, #12]
 800fa00:	685b      	ldr	r3, [r3, #4]
 800fa02:	b29b      	uxth	r3, r3
 800fa04:	1ad3      	subs	r3, r2, r3
 800fa06:	b29a      	uxth	r2, r3
 800fa08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa0a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 800fa0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa0e:	685a      	ldr	r2, [r3, #4]
 800fa10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa12:	891b      	ldrh	r3, [r3, #8]
 800fa14:	4619      	mov	r1, r3
 800fa16:	4610      	mov	r0, r2
 800fa18:	f7fb ff0a 	bl	800b830 <pbuf_realloc>
                    }
                    prev->next = cseg;
 800fa1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa1e:	69fa      	ldr	r2, [r7, #28]
 800fa20:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 800fa22:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800fa24:	69f8      	ldr	r0, [r7, #28]
 800fa26:	f7ff f881 	bl	800eb2c <tcp_oos_insert_segment>
                  }
                  break;
 800fa2a:	e0e2      	b.n	800fbf2 <tcp_receive+0xebe>
 800fa2c:	2000f24c 	.word	0x2000f24c
 800fa30:	2000f249 	.word	0x2000f249
 800fa34:	2000f21c 	.word	0x2000f21c
 800fa38:	2000f23c 	.word	0x2000f23c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 800fa3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa3e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 800fa40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	f040 80c6 	bne.w	800fbd6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 800fa4a:	4b80      	ldr	r3, [pc, #512]	; (800fc4c <tcp_receive+0xf18>)
 800fa4c:	681a      	ldr	r2, [r3, #0]
 800fa4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa50:	68db      	ldr	r3, [r3, #12]
 800fa52:	685b      	ldr	r3, [r3, #4]
 800fa54:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	f340 80bd 	ble.w	800fbd6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fa5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa5e:	68db      	ldr	r3, [r3, #12]
 800fa60:	899b      	ldrh	r3, [r3, #12]
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	4618      	mov	r0, r3
 800fa66:	f7fa fc6b 	bl	800a340 <lwip_htons>
 800fa6a:	4603      	mov	r3, r0
 800fa6c:	b2db      	uxtb	r3, r3
 800fa6e:	f003 0301 	and.w	r3, r3, #1
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	f040 80bf 	bne.w	800fbf6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 800fa78:	4875      	ldr	r0, [pc, #468]	; (800fc50 <tcp_receive+0xf1c>)
 800fa7a:	f7fd fb07 	bl	800d08c <tcp_seg_copy>
 800fa7e:	4602      	mov	r2, r0
 800fa80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa82:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 800fa84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	f000 80b6 	beq.w	800fbfa <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 800fa8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa90:	68db      	ldr	r3, [r3, #12]
 800fa92:	685b      	ldr	r3, [r3, #4]
 800fa94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fa96:	8912      	ldrh	r2, [r2, #8]
 800fa98:	441a      	add	r2, r3
 800fa9a:	4b6c      	ldr	r3, [pc, #432]	; (800fc4c <tcp_receive+0xf18>)
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	1ad3      	subs	r3, r2, r3
 800faa0:	2b00      	cmp	r3, #0
 800faa2:	dd12      	ble.n	800faca <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 800faa4:	4b69      	ldr	r3, [pc, #420]	; (800fc4c <tcp_receive+0xf18>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	b29a      	uxth	r2, r3
 800faaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faac:	68db      	ldr	r3, [r3, #12]
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	b29b      	uxth	r3, r3
 800fab2:	1ad3      	subs	r3, r2, r3
 800fab4:	b29a      	uxth	r2, r3
 800fab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fab8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 800faba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fabc:	685a      	ldr	r2, [r3, #4]
 800fabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fac0:	891b      	ldrh	r3, [r3, #8]
 800fac2:	4619      	mov	r1, r3
 800fac4:	4610      	mov	r0, r2
 800fac6:	f7fb feb3 	bl	800b830 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 800faca:	4b62      	ldr	r3, [pc, #392]	; (800fc54 <tcp_receive+0xf20>)
 800facc:	881b      	ldrh	r3, [r3, #0]
 800face:	461a      	mov	r2, r3
 800fad0:	4b5e      	ldr	r3, [pc, #376]	; (800fc4c <tcp_receive+0xf18>)
 800fad2:	681b      	ldr	r3, [r3, #0]
 800fad4:	441a      	add	r2, r3
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fada:	6879      	ldr	r1, [r7, #4]
 800fadc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fade:	440b      	add	r3, r1
 800fae0:	1ad3      	subs	r3, r2, r3
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	f340 8089 	ble.w	800fbfa <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 800fae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	68db      	ldr	r3, [r3, #12]
 800faee:	899b      	ldrh	r3, [r3, #12]
 800faf0:	b29b      	uxth	r3, r3
 800faf2:	4618      	mov	r0, r3
 800faf4:	f7fa fc24 	bl	800a340 <lwip_htons>
 800faf8:	4603      	mov	r3, r0
 800fafa:	b2db      	uxtb	r3, r3
 800fafc:	f003 0301 	and.w	r3, r3, #1
 800fb00:	2b00      	cmp	r3, #0
 800fb02:	d022      	beq.n	800fb4a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 800fb04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb06:	681b      	ldr	r3, [r3, #0]
 800fb08:	68db      	ldr	r3, [r3, #12]
 800fb0a:	899b      	ldrh	r3, [r3, #12]
 800fb0c:	b29b      	uxth	r3, r3
 800fb0e:	b21b      	sxth	r3, r3
 800fb10:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fb14:	b21c      	sxth	r4, r3
 800fb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	68db      	ldr	r3, [r3, #12]
 800fb1c:	899b      	ldrh	r3, [r3, #12]
 800fb1e:	b29b      	uxth	r3, r3
 800fb20:	4618      	mov	r0, r3
 800fb22:	f7fa fc0d 	bl	800a340 <lwip_htons>
 800fb26:	4603      	mov	r3, r0
 800fb28:	b2db      	uxtb	r3, r3
 800fb2a:	b29b      	uxth	r3, r3
 800fb2c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fb30:	b29b      	uxth	r3, r3
 800fb32:	4618      	mov	r0, r3
 800fb34:	f7fa fc04 	bl	800a340 <lwip_htons>
 800fb38:	4603      	mov	r3, r0
 800fb3a:	b21b      	sxth	r3, r3
 800fb3c:	4323      	orrs	r3, r4
 800fb3e:	b21a      	sxth	r2, r3
 800fb40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb42:	681b      	ldr	r3, [r3, #0]
 800fb44:	68db      	ldr	r3, [r3, #12]
 800fb46:	b292      	uxth	r2, r2
 800fb48:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fb4e:	b29a      	uxth	r2, r3
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fb54:	4413      	add	r3, r2
 800fb56:	b299      	uxth	r1, r3
 800fb58:	4b3c      	ldr	r3, [pc, #240]	; (800fc4c <tcp_receive+0xf18>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	b29a      	uxth	r2, r3
 800fb5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb60:	681b      	ldr	r3, [r3, #0]
 800fb62:	1a8a      	subs	r2, r1, r2
 800fb64:	b292      	uxth	r2, r2
 800fb66:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 800fb68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb6a:	681b      	ldr	r3, [r3, #0]
 800fb6c:	685a      	ldr	r2, [r3, #4]
 800fb6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb70:	681b      	ldr	r3, [r3, #0]
 800fb72:	891b      	ldrh	r3, [r3, #8]
 800fb74:	4619      	mov	r1, r3
 800fb76:	4610      	mov	r0, r2
 800fb78:	f7fb fe5a 	bl	800b830 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 800fb7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	891c      	ldrh	r4, [r3, #8]
 800fb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	68db      	ldr	r3, [r3, #12]
 800fb88:	899b      	ldrh	r3, [r3, #12]
 800fb8a:	b29b      	uxth	r3, r3
 800fb8c:	4618      	mov	r0, r3
 800fb8e:	f7fa fbd7 	bl	800a340 <lwip_htons>
 800fb92:	4603      	mov	r3, r0
 800fb94:	b2db      	uxtb	r3, r3
 800fb96:	f003 0303 	and.w	r3, r3, #3
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d001      	beq.n	800fba2 <tcp_receive+0xe6e>
 800fb9e:	2301      	movs	r3, #1
 800fba0:	e000      	b.n	800fba4 <tcp_receive+0xe70>
 800fba2:	2300      	movs	r3, #0
 800fba4:	4423      	add	r3, r4
 800fba6:	b29a      	uxth	r2, r3
 800fba8:	4b2a      	ldr	r3, [pc, #168]	; (800fc54 <tcp_receive+0xf20>)
 800fbaa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800fbac:	4b29      	ldr	r3, [pc, #164]	; (800fc54 <tcp_receive+0xf20>)
 800fbae:	881b      	ldrh	r3, [r3, #0]
 800fbb0:	461a      	mov	r2, r3
 800fbb2:	4b26      	ldr	r3, [pc, #152]	; (800fc4c <tcp_receive+0xf18>)
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	441a      	add	r2, r3
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbbc:	6879      	ldr	r1, [r7, #4]
 800fbbe:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fbc0:	440b      	add	r3, r1
 800fbc2:	429a      	cmp	r2, r3
 800fbc4:	d019      	beq.n	800fbfa <tcp_receive+0xec6>
 800fbc6:	4b24      	ldr	r3, [pc, #144]	; (800fc58 <tcp_receive+0xf24>)
 800fbc8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 800fbcc:	4923      	ldr	r1, [pc, #140]	; (800fc5c <tcp_receive+0xf28>)
 800fbce:	4824      	ldr	r0, [pc, #144]	; (800fc60 <tcp_receive+0xf2c>)
 800fbd0:	f006 fe36 	bl	8016840 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 800fbd4:	e011      	b.n	800fbfa <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 800fbd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	63bb      	str	r3, [r7, #56]	; 0x38
 800fbdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	f47f aea4 	bne.w	800f92c <tcp_receive+0xbf8>
 800fbe4:	e00a      	b.n	800fbfc <tcp_receive+0xec8>
                break;
 800fbe6:	bf00      	nop
 800fbe8:	e008      	b.n	800fbfc <tcp_receive+0xec8>
                break;
 800fbea:	bf00      	nop
 800fbec:	e006      	b.n	800fbfc <tcp_receive+0xec8>
                  break;
 800fbee:	bf00      	nop
 800fbf0:	e004      	b.n	800fbfc <tcp_receive+0xec8>
                  break;
 800fbf2:	bf00      	nop
 800fbf4:	e002      	b.n	800fbfc <tcp_receive+0xec8>
                  break;
 800fbf6:	bf00      	nop
 800fbf8:	e000      	b.n	800fbfc <tcp_receive+0xec8>
                break;
 800fbfa:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 800fbfc:	6878      	ldr	r0, [r7, #4]
 800fbfe:	f001 fa33 	bl	8011068 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 800fc02:	e003      	b.n	800fc0c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 800fc04:	6878      	ldr	r0, [r7, #4]
 800fc06:	f001 fa2f 	bl	8011068 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fc0a:	e01a      	b.n	800fc42 <tcp_receive+0xf0e>
 800fc0c:	e019      	b.n	800fc42 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 800fc0e:	4b0f      	ldr	r3, [pc, #60]	; (800fc4c <tcp_receive+0xf18>)
 800fc10:	681a      	ldr	r2, [r3, #0]
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc16:	1ad3      	subs	r3, r2, r3
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	db0a      	blt.n	800fc32 <tcp_receive+0xefe>
 800fc1c:	4b0b      	ldr	r3, [pc, #44]	; (800fc4c <tcp_receive+0xf18>)
 800fc1e:	681a      	ldr	r2, [r3, #0]
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc24:	6879      	ldr	r1, [r7, #4]
 800fc26:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fc28:	440b      	add	r3, r1
 800fc2a:	1ad3      	subs	r3, r2, r3
 800fc2c:	3301      	adds	r3, #1
 800fc2e:	2b00      	cmp	r3, #0
 800fc30:	dd07      	ble.n	800fc42 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	8b5b      	ldrh	r3, [r3, #26]
 800fc36:	f043 0302 	orr.w	r3, r3, #2
 800fc3a:	b29a      	uxth	r2, r3
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 800fc40:	e7ff      	b.n	800fc42 <tcp_receive+0xf0e>
 800fc42:	bf00      	nop
 800fc44:	3750      	adds	r7, #80	; 0x50
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bdb0      	pop	{r4, r5, r7, pc}
 800fc4a:	bf00      	nop
 800fc4c:	2000f23c 	.word	0x2000f23c
 800fc50:	2000f21c 	.word	0x2000f21c
 800fc54:	2000f246 	.word	0x2000f246
 800fc58:	08018a14 	.word	0x08018a14
 800fc5c:	08018dbc 	.word	0x08018dbc
 800fc60:	08018a60 	.word	0x08018a60

0800fc64 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 800fc64:	b480      	push	{r7}
 800fc66:	b083      	sub	sp, #12
 800fc68:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 800fc6a:	4b15      	ldr	r3, [pc, #84]	; (800fcc0 <tcp_get_next_optbyte+0x5c>)
 800fc6c:	881b      	ldrh	r3, [r3, #0]
 800fc6e:	1c5a      	adds	r2, r3, #1
 800fc70:	b291      	uxth	r1, r2
 800fc72:	4a13      	ldr	r2, [pc, #76]	; (800fcc0 <tcp_get_next_optbyte+0x5c>)
 800fc74:	8011      	strh	r1, [r2, #0]
 800fc76:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 800fc78:	4b12      	ldr	r3, [pc, #72]	; (800fcc4 <tcp_get_next_optbyte+0x60>)
 800fc7a:	681b      	ldr	r3, [r3, #0]
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	d004      	beq.n	800fc8a <tcp_get_next_optbyte+0x26>
 800fc80:	4b11      	ldr	r3, [pc, #68]	; (800fcc8 <tcp_get_next_optbyte+0x64>)
 800fc82:	881b      	ldrh	r3, [r3, #0]
 800fc84:	88fa      	ldrh	r2, [r7, #6]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d208      	bcs.n	800fc9c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 800fc8a:	4b10      	ldr	r3, [pc, #64]	; (800fccc <tcp_get_next_optbyte+0x68>)
 800fc8c:	681b      	ldr	r3, [r3, #0]
 800fc8e:	3314      	adds	r3, #20
 800fc90:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 800fc92:	88fb      	ldrh	r3, [r7, #6]
 800fc94:	683a      	ldr	r2, [r7, #0]
 800fc96:	4413      	add	r3, r2
 800fc98:	781b      	ldrb	r3, [r3, #0]
 800fc9a:	e00b      	b.n	800fcb4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 800fc9c:	88fb      	ldrh	r3, [r7, #6]
 800fc9e:	b2da      	uxtb	r2, r3
 800fca0:	4b09      	ldr	r3, [pc, #36]	; (800fcc8 <tcp_get_next_optbyte+0x64>)
 800fca2:	881b      	ldrh	r3, [r3, #0]
 800fca4:	b2db      	uxtb	r3, r3
 800fca6:	1ad3      	subs	r3, r2, r3
 800fca8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 800fcaa:	4b06      	ldr	r3, [pc, #24]	; (800fcc4 <tcp_get_next_optbyte+0x60>)
 800fcac:	681a      	ldr	r2, [r3, #0]
 800fcae:	797b      	ldrb	r3, [r7, #5]
 800fcb0:	4413      	add	r3, r2
 800fcb2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800fcb4:	4618      	mov	r0, r3
 800fcb6:	370c      	adds	r7, #12
 800fcb8:	46bd      	mov	sp, r7
 800fcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcbe:	4770      	bx	lr
 800fcc0:	2000f238 	.word	0x2000f238
 800fcc4:	2000f234 	.word	0x2000f234
 800fcc8:	2000f232 	.word	0x2000f232
 800fccc:	2000f22c 	.word	0x2000f22c

0800fcd0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b084      	sub	sp, #16
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d106      	bne.n	800fcec <tcp_parseopt+0x1c>
 800fcde:	4b32      	ldr	r3, [pc, #200]	; (800fda8 <tcp_parseopt+0xd8>)
 800fce0:	f240 727d 	movw	r2, #1917	; 0x77d
 800fce4:	4931      	ldr	r1, [pc, #196]	; (800fdac <tcp_parseopt+0xdc>)
 800fce6:	4832      	ldr	r0, [pc, #200]	; (800fdb0 <tcp_parseopt+0xe0>)
 800fce8:	f006 fdaa 	bl	8016840 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 800fcec:	4b31      	ldr	r3, [pc, #196]	; (800fdb4 <tcp_parseopt+0xe4>)
 800fcee:	881b      	ldrh	r3, [r3, #0]
 800fcf0:	2b00      	cmp	r3, #0
 800fcf2:	d055      	beq.n	800fda0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fcf4:	4b30      	ldr	r3, [pc, #192]	; (800fdb8 <tcp_parseopt+0xe8>)
 800fcf6:	2200      	movs	r2, #0
 800fcf8:	801a      	strh	r2, [r3, #0]
 800fcfa:	e045      	b.n	800fd88 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 800fcfc:	f7ff ffb2 	bl	800fc64 <tcp_get_next_optbyte>
 800fd00:	4603      	mov	r3, r0
 800fd02:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 800fd04:	7bfb      	ldrb	r3, [r7, #15]
 800fd06:	2b02      	cmp	r3, #2
 800fd08:	d006      	beq.n	800fd18 <tcp_parseopt+0x48>
 800fd0a:	2b02      	cmp	r3, #2
 800fd0c:	dc2b      	bgt.n	800fd66 <tcp_parseopt+0x96>
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d041      	beq.n	800fd96 <tcp_parseopt+0xc6>
 800fd12:	2b01      	cmp	r3, #1
 800fd14:	d127      	bne.n	800fd66 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 800fd16:	e037      	b.n	800fd88 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 800fd18:	f7ff ffa4 	bl	800fc64 <tcp_get_next_optbyte>
 800fd1c:	4603      	mov	r3, r0
 800fd1e:	2b04      	cmp	r3, #4
 800fd20:	d13b      	bne.n	800fd9a <tcp_parseopt+0xca>
 800fd22:	4b25      	ldr	r3, [pc, #148]	; (800fdb8 <tcp_parseopt+0xe8>)
 800fd24:	881b      	ldrh	r3, [r3, #0]
 800fd26:	3301      	adds	r3, #1
 800fd28:	4a22      	ldr	r2, [pc, #136]	; (800fdb4 <tcp_parseopt+0xe4>)
 800fd2a:	8812      	ldrh	r2, [r2, #0]
 800fd2c:	4293      	cmp	r3, r2
 800fd2e:	da34      	bge.n	800fd9a <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 800fd30:	f7ff ff98 	bl	800fc64 <tcp_get_next_optbyte>
 800fd34:	4603      	mov	r3, r0
 800fd36:	b29b      	uxth	r3, r3
 800fd38:	021b      	lsls	r3, r3, #8
 800fd3a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 800fd3c:	f7ff ff92 	bl	800fc64 <tcp_get_next_optbyte>
 800fd40:	4603      	mov	r3, r0
 800fd42:	b29a      	uxth	r2, r3
 800fd44:	89bb      	ldrh	r3, [r7, #12]
 800fd46:	4313      	orrs	r3, r2
 800fd48:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 800fd4a:	89bb      	ldrh	r3, [r7, #12]
 800fd4c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800fd50:	d804      	bhi.n	800fd5c <tcp_parseopt+0x8c>
 800fd52:	89bb      	ldrh	r3, [r7, #12]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d001      	beq.n	800fd5c <tcp_parseopt+0x8c>
 800fd58:	89ba      	ldrh	r2, [r7, #12]
 800fd5a:	e001      	b.n	800fd60 <tcp_parseopt+0x90>
 800fd5c:	f44f 7206 	mov.w	r2, #536	; 0x218
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 800fd64:	e010      	b.n	800fd88 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 800fd66:	f7ff ff7d 	bl	800fc64 <tcp_get_next_optbyte>
 800fd6a:	4603      	mov	r3, r0
 800fd6c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 800fd6e:	7afb      	ldrb	r3, [r7, #11]
 800fd70:	2b01      	cmp	r3, #1
 800fd72:	d914      	bls.n	800fd9e <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 800fd74:	7afb      	ldrb	r3, [r7, #11]
 800fd76:	b29a      	uxth	r2, r3
 800fd78:	4b0f      	ldr	r3, [pc, #60]	; (800fdb8 <tcp_parseopt+0xe8>)
 800fd7a:	881b      	ldrh	r3, [r3, #0]
 800fd7c:	4413      	add	r3, r2
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	3b02      	subs	r3, #2
 800fd82:	b29a      	uxth	r2, r3
 800fd84:	4b0c      	ldr	r3, [pc, #48]	; (800fdb8 <tcp_parseopt+0xe8>)
 800fd86:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 800fd88:	4b0b      	ldr	r3, [pc, #44]	; (800fdb8 <tcp_parseopt+0xe8>)
 800fd8a:	881a      	ldrh	r2, [r3, #0]
 800fd8c:	4b09      	ldr	r3, [pc, #36]	; (800fdb4 <tcp_parseopt+0xe4>)
 800fd8e:	881b      	ldrh	r3, [r3, #0]
 800fd90:	429a      	cmp	r2, r3
 800fd92:	d3b3      	bcc.n	800fcfc <tcp_parseopt+0x2c>
 800fd94:	e004      	b.n	800fda0 <tcp_parseopt+0xd0>
          return;
 800fd96:	bf00      	nop
 800fd98:	e002      	b.n	800fda0 <tcp_parseopt+0xd0>
            return;
 800fd9a:	bf00      	nop
 800fd9c:	e000      	b.n	800fda0 <tcp_parseopt+0xd0>
            return;
 800fd9e:	bf00      	nop
      }
    }
  }
}
 800fda0:	3710      	adds	r7, #16
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}
 800fda6:	bf00      	nop
 800fda8:	08018a14 	.word	0x08018a14
 800fdac:	08018e78 	.word	0x08018e78
 800fdb0:	08018a60 	.word	0x08018a60
 800fdb4:	2000f230 	.word	0x2000f230
 800fdb8:	2000f238 	.word	0x2000f238

0800fdbc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 800fdbc:	b480      	push	{r7}
 800fdbe:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 800fdc0:	4b05      	ldr	r3, [pc, #20]	; (800fdd8 <tcp_trigger_input_pcb_close+0x1c>)
 800fdc2:	781b      	ldrb	r3, [r3, #0]
 800fdc4:	f043 0310 	orr.w	r3, r3, #16
 800fdc8:	b2da      	uxtb	r2, r3
 800fdca:	4b03      	ldr	r3, [pc, #12]	; (800fdd8 <tcp_trigger_input_pcb_close+0x1c>)
 800fdcc:	701a      	strb	r2, [r3, #0]
}
 800fdce:	bf00      	nop
 800fdd0:	46bd      	mov	sp, r7
 800fdd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdd6:	4770      	bx	lr
 800fdd8:	2000f249 	.word	0x2000f249

0800fddc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 800fddc:	b580      	push	{r7, lr}
 800fdde:	b084      	sub	sp, #16
 800fde0:	af00      	add	r7, sp, #0
 800fde2:	60f8      	str	r0, [r7, #12]
 800fde4:	60b9      	str	r1, [r7, #8]
 800fde6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d00a      	beq.n	800fe04 <tcp_route+0x28>
 800fdee:	68fb      	ldr	r3, [r7, #12]
 800fdf0:	7a1b      	ldrb	r3, [r3, #8]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d006      	beq.n	800fe04 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 800fdf6:	68fb      	ldr	r3, [r7, #12]
 800fdf8:	7a1b      	ldrb	r3, [r3, #8]
 800fdfa:	4618      	mov	r0, r3
 800fdfc:	f7fb fb10 	bl	800b420 <netif_get_by_index>
 800fe00:	4603      	mov	r3, r0
 800fe02:	e003      	b.n	800fe0c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 800fe04:	6878      	ldr	r0, [r7, #4]
 800fe06:	f005 f847 	bl	8014e98 <ip4_route>
 800fe0a:	4603      	mov	r3, r0
  }
}
 800fe0c:	4618      	mov	r0, r3
 800fe0e:	3710      	adds	r7, #16
 800fe10:	46bd      	mov	sp, r7
 800fe12:	bd80      	pop	{r7, pc}

0800fe14 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 800fe14:	b590      	push	{r4, r7, lr}
 800fe16:	b087      	sub	sp, #28
 800fe18:	af00      	add	r7, sp, #0
 800fe1a:	60f8      	str	r0, [r7, #12]
 800fe1c:	60b9      	str	r1, [r7, #8]
 800fe1e:	603b      	str	r3, [r7, #0]
 800fe20:	4613      	mov	r3, r2
 800fe22:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2b00      	cmp	r3, #0
 800fe28:	d105      	bne.n	800fe36 <tcp_create_segment+0x22>
 800fe2a:	4b44      	ldr	r3, [pc, #272]	; (800ff3c <tcp_create_segment+0x128>)
 800fe2c:	22a3      	movs	r2, #163	; 0xa3
 800fe2e:	4944      	ldr	r1, [pc, #272]	; (800ff40 <tcp_create_segment+0x12c>)
 800fe30:	4844      	ldr	r0, [pc, #272]	; (800ff44 <tcp_create_segment+0x130>)
 800fe32:	f006 fd05 	bl	8016840 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 800fe36:	68bb      	ldr	r3, [r7, #8]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d105      	bne.n	800fe48 <tcp_create_segment+0x34>
 800fe3c:	4b3f      	ldr	r3, [pc, #252]	; (800ff3c <tcp_create_segment+0x128>)
 800fe3e:	22a4      	movs	r2, #164	; 0xa4
 800fe40:	4941      	ldr	r1, [pc, #260]	; (800ff48 <tcp_create_segment+0x134>)
 800fe42:	4840      	ldr	r0, [pc, #256]	; (800ff44 <tcp_create_segment+0x130>)
 800fe44:	f006 fcfc 	bl	8016840 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 800fe48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800fe4c:	009b      	lsls	r3, r3, #2
 800fe4e:	b2db      	uxtb	r3, r3
 800fe50:	f003 0304 	and.w	r3, r3, #4
 800fe54:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 800fe56:	2003      	movs	r0, #3
 800fe58:	f7fa ff4a 	bl	800acf0 <memp_malloc>
 800fe5c:	6138      	str	r0, [r7, #16]
 800fe5e:	693b      	ldr	r3, [r7, #16]
 800fe60:	2b00      	cmp	r3, #0
 800fe62:	d104      	bne.n	800fe6e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 800fe64:	68b8      	ldr	r0, [r7, #8]
 800fe66:	f7fb fe69 	bl	800bb3c <pbuf_free>
    return NULL;
 800fe6a:	2300      	movs	r3, #0
 800fe6c:	e061      	b.n	800ff32 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 800fe6e:	693b      	ldr	r3, [r7, #16]
 800fe70:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800fe74:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 800fe76:	693b      	ldr	r3, [r7, #16]
 800fe78:	2200      	movs	r2, #0
 800fe7a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 800fe7c:	693b      	ldr	r3, [r7, #16]
 800fe7e:	68ba      	ldr	r2, [r7, #8]
 800fe80:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	891a      	ldrh	r2, [r3, #8]
 800fe86:	7dfb      	ldrb	r3, [r7, #23]
 800fe88:	b29b      	uxth	r3, r3
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	d205      	bcs.n	800fe9a <tcp_create_segment+0x86>
 800fe8e:	4b2b      	ldr	r3, [pc, #172]	; (800ff3c <tcp_create_segment+0x128>)
 800fe90:	22b0      	movs	r2, #176	; 0xb0
 800fe92:	492e      	ldr	r1, [pc, #184]	; (800ff4c <tcp_create_segment+0x138>)
 800fe94:	482b      	ldr	r0, [pc, #172]	; (800ff44 <tcp_create_segment+0x130>)
 800fe96:	f006 fcd3 	bl	8016840 <iprintf>
  seg->len = p->tot_len - optlen;
 800fe9a:	68bb      	ldr	r3, [r7, #8]
 800fe9c:	891a      	ldrh	r2, [r3, #8]
 800fe9e:	7dfb      	ldrb	r3, [r7, #23]
 800fea0:	b29b      	uxth	r3, r3
 800fea2:	1ad3      	subs	r3, r2, r3
 800fea4:	b29a      	uxth	r2, r3
 800fea6:	693b      	ldr	r3, [r7, #16]
 800fea8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 800feaa:	2114      	movs	r1, #20
 800feac:	68b8      	ldr	r0, [r7, #8]
 800feae:	f7fb fdaf 	bl	800ba10 <pbuf_add_header>
 800feb2:	4603      	mov	r3, r0
 800feb4:	2b00      	cmp	r3, #0
 800feb6:	d004      	beq.n	800fec2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 800feb8:	6938      	ldr	r0, [r7, #16]
 800feba:	f7fd f8ce 	bl	800d05a <tcp_seg_free>
    return NULL;
 800febe:	2300      	movs	r3, #0
 800fec0:	e037      	b.n	800ff32 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 800fec2:	693b      	ldr	r3, [r7, #16]
 800fec4:	685b      	ldr	r3, [r3, #4]
 800fec6:	685a      	ldr	r2, [r3, #4]
 800fec8:	693b      	ldr	r3, [r7, #16]
 800feca:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 800fecc:	68fb      	ldr	r3, [r7, #12]
 800fece:	8ada      	ldrh	r2, [r3, #22]
 800fed0:	693b      	ldr	r3, [r7, #16]
 800fed2:	68dc      	ldr	r4, [r3, #12]
 800fed4:	4610      	mov	r0, r2
 800fed6:	f7fa fa33 	bl	800a340 <lwip_htons>
 800feda:	4603      	mov	r3, r0
 800fedc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 800fede:	68fb      	ldr	r3, [r7, #12]
 800fee0:	8b1a      	ldrh	r2, [r3, #24]
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	68dc      	ldr	r4, [r3, #12]
 800fee6:	4610      	mov	r0, r2
 800fee8:	f7fa fa2a 	bl	800a340 <lwip_htons>
 800feec:	4603      	mov	r3, r0
 800feee:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	68dc      	ldr	r4, [r3, #12]
 800fef4:	6838      	ldr	r0, [r7, #0]
 800fef6:	f7fa fa38 	bl	800a36a <lwip_htonl>
 800fefa:	4603      	mov	r3, r0
 800fefc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 800fefe:	7dfb      	ldrb	r3, [r7, #23]
 800ff00:	089b      	lsrs	r3, r3, #2
 800ff02:	b2db      	uxtb	r3, r3
 800ff04:	b29b      	uxth	r3, r3
 800ff06:	3305      	adds	r3, #5
 800ff08:	b29b      	uxth	r3, r3
 800ff0a:	031b      	lsls	r3, r3, #12
 800ff0c:	b29a      	uxth	r2, r3
 800ff0e:	79fb      	ldrb	r3, [r7, #7]
 800ff10:	b29b      	uxth	r3, r3
 800ff12:	4313      	orrs	r3, r2
 800ff14:	b29a      	uxth	r2, r3
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	68dc      	ldr	r4, [r3, #12]
 800ff1a:	4610      	mov	r0, r2
 800ff1c:	f7fa fa10 	bl	800a340 <lwip_htons>
 800ff20:	4603      	mov	r3, r0
 800ff22:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 800ff24:	693b      	ldr	r3, [r7, #16]
 800ff26:	68db      	ldr	r3, [r3, #12]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	749a      	strb	r2, [r3, #18]
 800ff2c:	2200      	movs	r2, #0
 800ff2e:	74da      	strb	r2, [r3, #19]
  return seg;
 800ff30:	693b      	ldr	r3, [r7, #16]
}
 800ff32:	4618      	mov	r0, r3
 800ff34:	371c      	adds	r7, #28
 800ff36:	46bd      	mov	sp, r7
 800ff38:	bd90      	pop	{r4, r7, pc}
 800ff3a:	bf00      	nop
 800ff3c:	08018e94 	.word	0x08018e94
 800ff40:	08018ec8 	.word	0x08018ec8
 800ff44:	08018ee8 	.word	0x08018ee8
 800ff48:	08018f10 	.word	0x08018f10
 800ff4c:	08018f34 	.word	0x08018f34

0800ff50 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 800ff50:	b590      	push	{r4, r7, lr}
 800ff52:	b08b      	sub	sp, #44	; 0x2c
 800ff54:	af02      	add	r7, sp, #8
 800ff56:	6078      	str	r0, [r7, #4]
 800ff58:	460b      	mov	r3, r1
 800ff5a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	61fb      	str	r3, [r7, #28]
 800ff60:	2300      	movs	r3, #0
 800ff62:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800ff64:	2300      	movs	r3, #0
 800ff66:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 800ff68:	687b      	ldr	r3, [r7, #4]
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d106      	bne.n	800ff7c <tcp_split_unsent_seg+0x2c>
 800ff6e:	4b95      	ldr	r3, [pc, #596]	; (80101c4 <tcp_split_unsent_seg+0x274>)
 800ff70:	f240 324b 	movw	r2, #843	; 0x34b
 800ff74:	4994      	ldr	r1, [pc, #592]	; (80101c8 <tcp_split_unsent_seg+0x278>)
 800ff76:	4895      	ldr	r0, [pc, #596]	; (80101cc <tcp_split_unsent_seg+0x27c>)
 800ff78:	f006 fc62 	bl	8016840 <iprintf>

  useg = pcb->unsent;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ff80:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 800ff82:	697b      	ldr	r3, [r7, #20]
 800ff84:	2b00      	cmp	r3, #0
 800ff86:	d102      	bne.n	800ff8e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 800ff88:	f04f 33ff 	mov.w	r3, #4294967295
 800ff8c:	e116      	b.n	80101bc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 800ff8e:	887b      	ldrh	r3, [r7, #2]
 800ff90:	2b00      	cmp	r3, #0
 800ff92:	d109      	bne.n	800ffa8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 800ff94:	4b8b      	ldr	r3, [pc, #556]	; (80101c4 <tcp_split_unsent_seg+0x274>)
 800ff96:	f240 3253 	movw	r2, #851	; 0x353
 800ff9a:	498d      	ldr	r1, [pc, #564]	; (80101d0 <tcp_split_unsent_seg+0x280>)
 800ff9c:	488b      	ldr	r0, [pc, #556]	; (80101cc <tcp_split_unsent_seg+0x27c>)
 800ff9e:	f006 fc4f 	bl	8016840 <iprintf>
    return ERR_VAL;
 800ffa2:	f06f 0305 	mvn.w	r3, #5
 800ffa6:	e109      	b.n	80101bc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	891b      	ldrh	r3, [r3, #8]
 800ffac:	887a      	ldrh	r2, [r7, #2]
 800ffae:	429a      	cmp	r2, r3
 800ffb0:	d301      	bcc.n	800ffb6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 800ffb2:	2300      	movs	r3, #0
 800ffb4:	e102      	b.n	80101bc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffba:	887a      	ldrh	r2, [r7, #2]
 800ffbc:	429a      	cmp	r2, r3
 800ffbe:	d906      	bls.n	800ffce <tcp_split_unsent_seg+0x7e>
 800ffc0:	4b80      	ldr	r3, [pc, #512]	; (80101c4 <tcp_split_unsent_seg+0x274>)
 800ffc2:	f240 325b 	movw	r2, #859	; 0x35b
 800ffc6:	4983      	ldr	r1, [pc, #524]	; (80101d4 <tcp_split_unsent_seg+0x284>)
 800ffc8:	4880      	ldr	r0, [pc, #512]	; (80101cc <tcp_split_unsent_seg+0x27c>)
 800ffca:	f006 fc39 	bl	8016840 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 800ffce:	697b      	ldr	r3, [r7, #20]
 800ffd0:	891b      	ldrh	r3, [r3, #8]
 800ffd2:	2b00      	cmp	r3, #0
 800ffd4:	d106      	bne.n	800ffe4 <tcp_split_unsent_seg+0x94>
 800ffd6:	4b7b      	ldr	r3, [pc, #492]	; (80101c4 <tcp_split_unsent_seg+0x274>)
 800ffd8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 800ffdc:	497e      	ldr	r1, [pc, #504]	; (80101d8 <tcp_split_unsent_seg+0x288>)
 800ffde:	487b      	ldr	r0, [pc, #492]	; (80101cc <tcp_split_unsent_seg+0x27c>)
 800ffe0:	f006 fc2e 	bl	8016840 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 800ffe4:	697b      	ldr	r3, [r7, #20]
 800ffe6:	7a9b      	ldrb	r3, [r3, #10]
 800ffe8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 800ffea:	7bfb      	ldrb	r3, [r7, #15]
 800ffec:	009b      	lsls	r3, r3, #2
 800ffee:	b2db      	uxtb	r3, r3
 800fff0:	f003 0304 	and.w	r3, r3, #4
 800fff4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 800fff6:	697b      	ldr	r3, [r7, #20]
 800fff8:	891a      	ldrh	r2, [r3, #8]
 800fffa:	887b      	ldrh	r3, [r7, #2]
 800fffc:	1ad3      	subs	r3, r2, r3
 800fffe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8010000:	7bbb      	ldrb	r3, [r7, #14]
 8010002:	b29a      	uxth	r2, r3
 8010004:	89bb      	ldrh	r3, [r7, #12]
 8010006:	4413      	add	r3, r2
 8010008:	b29b      	uxth	r3, r3
 801000a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801000e:	4619      	mov	r1, r3
 8010010:	2036      	movs	r0, #54	; 0x36
 8010012:	f7fb faaf 	bl	800b574 <pbuf_alloc>
 8010016:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010018:	693b      	ldr	r3, [r7, #16]
 801001a:	2b00      	cmp	r3, #0
 801001c:	f000 80b7 	beq.w	801018e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8010020:	697b      	ldr	r3, [r7, #20]
 8010022:	685b      	ldr	r3, [r3, #4]
 8010024:	891a      	ldrh	r2, [r3, #8]
 8010026:	697b      	ldr	r3, [r7, #20]
 8010028:	891b      	ldrh	r3, [r3, #8]
 801002a:	1ad3      	subs	r3, r2, r3
 801002c:	b29a      	uxth	r2, r3
 801002e:	887b      	ldrh	r3, [r7, #2]
 8010030:	4413      	add	r3, r2
 8010032:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8010034:	697b      	ldr	r3, [r7, #20]
 8010036:	6858      	ldr	r0, [r3, #4]
 8010038:	693b      	ldr	r3, [r7, #16]
 801003a:	685a      	ldr	r2, [r3, #4]
 801003c:	7bbb      	ldrb	r3, [r7, #14]
 801003e:	18d1      	adds	r1, r2, r3
 8010040:	897b      	ldrh	r3, [r7, #10]
 8010042:	89ba      	ldrh	r2, [r7, #12]
 8010044:	f7fb ff80 	bl	800bf48 <pbuf_copy_partial>
 8010048:	4603      	mov	r3, r0
 801004a:	461a      	mov	r2, r3
 801004c:	89bb      	ldrh	r3, [r7, #12]
 801004e:	4293      	cmp	r3, r2
 8010050:	f040 809f 	bne.w	8010192 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8010054:	697b      	ldr	r3, [r7, #20]
 8010056:	68db      	ldr	r3, [r3, #12]
 8010058:	899b      	ldrh	r3, [r3, #12]
 801005a:	b29b      	uxth	r3, r3
 801005c:	4618      	mov	r0, r3
 801005e:	f7fa f96f 	bl	800a340 <lwip_htons>
 8010062:	4603      	mov	r3, r0
 8010064:	b2db      	uxtb	r3, r3
 8010066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801006a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801006c:	2300      	movs	r3, #0
 801006e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8010070:	7efb      	ldrb	r3, [r7, #27]
 8010072:	f003 0308 	and.w	r3, r3, #8
 8010076:	2b00      	cmp	r3, #0
 8010078:	d007      	beq.n	801008a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801007a:	7efb      	ldrb	r3, [r7, #27]
 801007c:	f023 0308 	bic.w	r3, r3, #8
 8010080:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8010082:	7ebb      	ldrb	r3, [r7, #26]
 8010084:	f043 0308 	orr.w	r3, r3, #8
 8010088:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801008a:	7efb      	ldrb	r3, [r7, #27]
 801008c:	f003 0301 	and.w	r3, r3, #1
 8010090:	2b00      	cmp	r3, #0
 8010092:	d007      	beq.n	80100a4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8010094:	7efb      	ldrb	r3, [r7, #27]
 8010096:	f023 0301 	bic.w	r3, r3, #1
 801009a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801009c:	7ebb      	ldrb	r3, [r7, #26]
 801009e:	f043 0301 	orr.w	r3, r3, #1
 80100a2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80100a4:	697b      	ldr	r3, [r7, #20]
 80100a6:	68db      	ldr	r3, [r3, #12]
 80100a8:	685b      	ldr	r3, [r3, #4]
 80100aa:	4618      	mov	r0, r3
 80100ac:	f7fa f95d 	bl	800a36a <lwip_htonl>
 80100b0:	4602      	mov	r2, r0
 80100b2:	887b      	ldrh	r3, [r7, #2]
 80100b4:	18d1      	adds	r1, r2, r3
 80100b6:	7eba      	ldrb	r2, [r7, #26]
 80100b8:	7bfb      	ldrb	r3, [r7, #15]
 80100ba:	9300      	str	r3, [sp, #0]
 80100bc:	460b      	mov	r3, r1
 80100be:	6939      	ldr	r1, [r7, #16]
 80100c0:	6878      	ldr	r0, [r7, #4]
 80100c2:	f7ff fea7 	bl	800fe14 <tcp_create_segment>
 80100c6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80100c8:	69fb      	ldr	r3, [r7, #28]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d063      	beq.n	8010196 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80100ce:	697b      	ldr	r3, [r7, #20]
 80100d0:	685b      	ldr	r3, [r3, #4]
 80100d2:	4618      	mov	r0, r3
 80100d4:	f7fb fdc0 	bl	800bc58 <pbuf_clen>
 80100d8:	4603      	mov	r3, r0
 80100da:	461a      	mov	r2, r3
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80100e2:	1a9b      	subs	r3, r3, r2
 80100e4:	b29a      	uxth	r2, r3
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80100ec:	697b      	ldr	r3, [r7, #20]
 80100ee:	6858      	ldr	r0, [r3, #4]
 80100f0:	697b      	ldr	r3, [r7, #20]
 80100f2:	685b      	ldr	r3, [r3, #4]
 80100f4:	891a      	ldrh	r2, [r3, #8]
 80100f6:	89bb      	ldrh	r3, [r7, #12]
 80100f8:	1ad3      	subs	r3, r2, r3
 80100fa:	b29b      	uxth	r3, r3
 80100fc:	4619      	mov	r1, r3
 80100fe:	f7fb fb97 	bl	800b830 <pbuf_realloc>
  useg->len -= remainder;
 8010102:	697b      	ldr	r3, [r7, #20]
 8010104:	891a      	ldrh	r2, [r3, #8]
 8010106:	89bb      	ldrh	r3, [r7, #12]
 8010108:	1ad3      	subs	r3, r2, r3
 801010a:	b29a      	uxth	r2, r3
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8010110:	697b      	ldr	r3, [r7, #20]
 8010112:	68db      	ldr	r3, [r3, #12]
 8010114:	899b      	ldrh	r3, [r3, #12]
 8010116:	b29c      	uxth	r4, r3
 8010118:	7efb      	ldrb	r3, [r7, #27]
 801011a:	b29b      	uxth	r3, r3
 801011c:	4618      	mov	r0, r3
 801011e:	f7fa f90f 	bl	800a340 <lwip_htons>
 8010122:	4603      	mov	r3, r0
 8010124:	461a      	mov	r2, r3
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	68db      	ldr	r3, [r3, #12]
 801012a:	4322      	orrs	r2, r4
 801012c:	b292      	uxth	r2, r2
 801012e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8010130:	697b      	ldr	r3, [r7, #20]
 8010132:	685b      	ldr	r3, [r3, #4]
 8010134:	4618      	mov	r0, r3
 8010136:	f7fb fd8f 	bl	800bc58 <pbuf_clen>
 801013a:	4603      	mov	r3, r0
 801013c:	461a      	mov	r2, r3
 801013e:	687b      	ldr	r3, [r7, #4]
 8010140:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010144:	4413      	add	r3, r2
 8010146:	b29a      	uxth	r2, r3
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801014e:	69fb      	ldr	r3, [r7, #28]
 8010150:	685b      	ldr	r3, [r3, #4]
 8010152:	4618      	mov	r0, r3
 8010154:	f7fb fd80 	bl	800bc58 <pbuf_clen>
 8010158:	4603      	mov	r3, r0
 801015a:	461a      	mov	r2, r3
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010162:	4413      	add	r3, r2
 8010164:	b29a      	uxth	r2, r3
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801016c:	697b      	ldr	r3, [r7, #20]
 801016e:	681a      	ldr	r2, [r3, #0]
 8010170:	69fb      	ldr	r3, [r7, #28]
 8010172:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8010174:	697b      	ldr	r3, [r7, #20]
 8010176:	69fa      	ldr	r2, [r7, #28]
 8010178:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801017a:	69fb      	ldr	r3, [r7, #28]
 801017c:	681b      	ldr	r3, [r3, #0]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d103      	bne.n	801018a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	2200      	movs	r2, #0
 8010186:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801018a:	2300      	movs	r3, #0
 801018c:	e016      	b.n	80101bc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801018e:	bf00      	nop
 8010190:	e002      	b.n	8010198 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010192:	bf00      	nop
 8010194:	e000      	b.n	8010198 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8010196:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8010198:	69fb      	ldr	r3, [r7, #28]
 801019a:	2b00      	cmp	r3, #0
 801019c:	d006      	beq.n	80101ac <tcp_split_unsent_seg+0x25c>
 801019e:	4b09      	ldr	r3, [pc, #36]	; (80101c4 <tcp_split_unsent_seg+0x274>)
 80101a0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80101a4:	490d      	ldr	r1, [pc, #52]	; (80101dc <tcp_split_unsent_seg+0x28c>)
 80101a6:	4809      	ldr	r0, [pc, #36]	; (80101cc <tcp_split_unsent_seg+0x27c>)
 80101a8:	f006 fb4a 	bl	8016840 <iprintf>
  if (p != NULL) {
 80101ac:	693b      	ldr	r3, [r7, #16]
 80101ae:	2b00      	cmp	r3, #0
 80101b0:	d002      	beq.n	80101b8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80101b2:	6938      	ldr	r0, [r7, #16]
 80101b4:	f7fb fcc2 	bl	800bb3c <pbuf_free>
  }

  return ERR_MEM;
 80101b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80101bc:	4618      	mov	r0, r3
 80101be:	3724      	adds	r7, #36	; 0x24
 80101c0:	46bd      	mov	sp, r7
 80101c2:	bd90      	pop	{r4, r7, pc}
 80101c4:	08018e94 	.word	0x08018e94
 80101c8:	08019228 	.word	0x08019228
 80101cc:	08018ee8 	.word	0x08018ee8
 80101d0:	0801924c 	.word	0x0801924c
 80101d4:	08019270 	.word	0x08019270
 80101d8:	08019280 	.word	0x08019280
 80101dc:	08019290 	.word	0x08019290

080101e0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80101e0:	b590      	push	{r4, r7, lr}
 80101e2:	b085      	sub	sp, #20
 80101e4:	af00      	add	r7, sp, #0
 80101e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d106      	bne.n	80101fc <tcp_send_fin+0x1c>
 80101ee:	4b21      	ldr	r3, [pc, #132]	; (8010274 <tcp_send_fin+0x94>)
 80101f0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80101f4:	4920      	ldr	r1, [pc, #128]	; (8010278 <tcp_send_fin+0x98>)
 80101f6:	4821      	ldr	r0, [pc, #132]	; (801027c <tcp_send_fin+0x9c>)
 80101f8:	f006 fb22 	bl	8016840 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010200:	2b00      	cmp	r3, #0
 8010202:	d02e      	beq.n	8010262 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010208:	60fb      	str	r3, [r7, #12]
 801020a:	e002      	b.n	8010212 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801020c:	68fb      	ldr	r3, [r7, #12]
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	681b      	ldr	r3, [r3, #0]
 8010216:	2b00      	cmp	r3, #0
 8010218:	d1f8      	bne.n	801020c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	68db      	ldr	r3, [r3, #12]
 801021e:	899b      	ldrh	r3, [r3, #12]
 8010220:	b29b      	uxth	r3, r3
 8010222:	4618      	mov	r0, r3
 8010224:	f7fa f88c 	bl	800a340 <lwip_htons>
 8010228:	4603      	mov	r3, r0
 801022a:	b2db      	uxtb	r3, r3
 801022c:	f003 0307 	and.w	r3, r3, #7
 8010230:	2b00      	cmp	r3, #0
 8010232:	d116      	bne.n	8010262 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010234:	68fb      	ldr	r3, [r7, #12]
 8010236:	68db      	ldr	r3, [r3, #12]
 8010238:	899b      	ldrh	r3, [r3, #12]
 801023a:	b29c      	uxth	r4, r3
 801023c:	2001      	movs	r0, #1
 801023e:	f7fa f87f 	bl	800a340 <lwip_htons>
 8010242:	4603      	mov	r3, r0
 8010244:	461a      	mov	r2, r3
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	68db      	ldr	r3, [r3, #12]
 801024a:	4322      	orrs	r2, r4
 801024c:	b292      	uxth	r2, r2
 801024e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	8b5b      	ldrh	r3, [r3, #26]
 8010254:	f043 0320 	orr.w	r3, r3, #32
 8010258:	b29a      	uxth	r2, r3
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801025e:	2300      	movs	r3, #0
 8010260:	e004      	b.n	801026c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8010262:	2101      	movs	r1, #1
 8010264:	6878      	ldr	r0, [r7, #4]
 8010266:	f000 f80b 	bl	8010280 <tcp_enqueue_flags>
 801026a:	4603      	mov	r3, r0
}
 801026c:	4618      	mov	r0, r3
 801026e:	3714      	adds	r7, #20
 8010270:	46bd      	mov	sp, r7
 8010272:	bd90      	pop	{r4, r7, pc}
 8010274:	08018e94 	.word	0x08018e94
 8010278:	0801929c 	.word	0x0801929c
 801027c:	08018ee8 	.word	0x08018ee8

08010280 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b08a      	sub	sp, #40	; 0x28
 8010284:	af02      	add	r7, sp, #8
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	460b      	mov	r3, r1
 801028a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801028c:	2300      	movs	r3, #0
 801028e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8010290:	2300      	movs	r3, #0
 8010292:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8010294:	78fb      	ldrb	r3, [r7, #3]
 8010296:	f003 0303 	and.w	r3, r3, #3
 801029a:	2b00      	cmp	r3, #0
 801029c:	d106      	bne.n	80102ac <tcp_enqueue_flags+0x2c>
 801029e:	4b67      	ldr	r3, [pc, #412]	; (801043c <tcp_enqueue_flags+0x1bc>)
 80102a0:	f240 4211 	movw	r2, #1041	; 0x411
 80102a4:	4966      	ldr	r1, [pc, #408]	; (8010440 <tcp_enqueue_flags+0x1c0>)
 80102a6:	4867      	ldr	r0, [pc, #412]	; (8010444 <tcp_enqueue_flags+0x1c4>)
 80102a8:	f006 faca 	bl	8016840 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80102ac:	687b      	ldr	r3, [r7, #4]
 80102ae:	2b00      	cmp	r3, #0
 80102b0:	d106      	bne.n	80102c0 <tcp_enqueue_flags+0x40>
 80102b2:	4b62      	ldr	r3, [pc, #392]	; (801043c <tcp_enqueue_flags+0x1bc>)
 80102b4:	f240 4213 	movw	r2, #1043	; 0x413
 80102b8:	4963      	ldr	r1, [pc, #396]	; (8010448 <tcp_enqueue_flags+0x1c8>)
 80102ba:	4862      	ldr	r0, [pc, #392]	; (8010444 <tcp_enqueue_flags+0x1c4>)
 80102bc:	f006 fac0 	bl	8016840 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80102c0:	78fb      	ldrb	r3, [r7, #3]
 80102c2:	f003 0302 	and.w	r3, r3, #2
 80102c6:	2b00      	cmp	r3, #0
 80102c8:	d001      	beq.n	80102ce <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80102ca:	2301      	movs	r3, #1
 80102cc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80102ce:	7ffb      	ldrb	r3, [r7, #31]
 80102d0:	009b      	lsls	r3, r3, #2
 80102d2:	b2db      	uxtb	r3, r3
 80102d4:	f003 0304 	and.w	r3, r3, #4
 80102d8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80102da:	7dfb      	ldrb	r3, [r7, #23]
 80102dc:	b29b      	uxth	r3, r3
 80102de:	f44f 7220 	mov.w	r2, #640	; 0x280
 80102e2:	4619      	mov	r1, r3
 80102e4:	2036      	movs	r0, #54	; 0x36
 80102e6:	f7fb f945 	bl	800b574 <pbuf_alloc>
 80102ea:	6138      	str	r0, [r7, #16]
 80102ec:	693b      	ldr	r3, [r7, #16]
 80102ee:	2b00      	cmp	r3, #0
 80102f0:	d109      	bne.n	8010306 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	8b5b      	ldrh	r3, [r3, #26]
 80102f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80102fa:	b29a      	uxth	r2, r3
 80102fc:	687b      	ldr	r3, [r7, #4]
 80102fe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8010300:	f04f 33ff 	mov.w	r3, #4294967295
 8010304:	e095      	b.n	8010432 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8010306:	693b      	ldr	r3, [r7, #16]
 8010308:	895a      	ldrh	r2, [r3, #10]
 801030a:	7dfb      	ldrb	r3, [r7, #23]
 801030c:	b29b      	uxth	r3, r3
 801030e:	429a      	cmp	r2, r3
 8010310:	d206      	bcs.n	8010320 <tcp_enqueue_flags+0xa0>
 8010312:	4b4a      	ldr	r3, [pc, #296]	; (801043c <tcp_enqueue_flags+0x1bc>)
 8010314:	f240 4239 	movw	r2, #1081	; 0x439
 8010318:	494c      	ldr	r1, [pc, #304]	; (801044c <tcp_enqueue_flags+0x1cc>)
 801031a:	484a      	ldr	r0, [pc, #296]	; (8010444 <tcp_enqueue_flags+0x1c4>)
 801031c:	f006 fa90 	bl	8016840 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8010324:	78fa      	ldrb	r2, [r7, #3]
 8010326:	7ffb      	ldrb	r3, [r7, #31]
 8010328:	9300      	str	r3, [sp, #0]
 801032a:	460b      	mov	r3, r1
 801032c:	6939      	ldr	r1, [r7, #16]
 801032e:	6878      	ldr	r0, [r7, #4]
 8010330:	f7ff fd70 	bl	800fe14 <tcp_create_segment>
 8010334:	60f8      	str	r0, [r7, #12]
 8010336:	68fb      	ldr	r3, [r7, #12]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d109      	bne.n	8010350 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	8b5b      	ldrh	r3, [r3, #26]
 8010340:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010344:	b29a      	uxth	r2, r3
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801034a:	f04f 33ff 	mov.w	r3, #4294967295
 801034e:	e070      	b.n	8010432 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	68db      	ldr	r3, [r3, #12]
 8010354:	f003 0303 	and.w	r3, r3, #3
 8010358:	2b00      	cmp	r3, #0
 801035a:	d006      	beq.n	801036a <tcp_enqueue_flags+0xea>
 801035c:	4b37      	ldr	r3, [pc, #220]	; (801043c <tcp_enqueue_flags+0x1bc>)
 801035e:	f240 4242 	movw	r2, #1090	; 0x442
 8010362:	493b      	ldr	r1, [pc, #236]	; (8010450 <tcp_enqueue_flags+0x1d0>)
 8010364:	4837      	ldr	r0, [pc, #220]	; (8010444 <tcp_enqueue_flags+0x1c4>)
 8010366:	f006 fa6b 	bl	8016840 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801036a:	68fb      	ldr	r3, [r7, #12]
 801036c:	891b      	ldrh	r3, [r3, #8]
 801036e:	2b00      	cmp	r3, #0
 8010370:	d006      	beq.n	8010380 <tcp_enqueue_flags+0x100>
 8010372:	4b32      	ldr	r3, [pc, #200]	; (801043c <tcp_enqueue_flags+0x1bc>)
 8010374:	f240 4243 	movw	r2, #1091	; 0x443
 8010378:	4936      	ldr	r1, [pc, #216]	; (8010454 <tcp_enqueue_flags+0x1d4>)
 801037a:	4832      	ldr	r0, [pc, #200]	; (8010444 <tcp_enqueue_flags+0x1c4>)
 801037c:	f006 fa60 	bl	8016840 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8010380:	687b      	ldr	r3, [r7, #4]
 8010382:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010384:	2b00      	cmp	r3, #0
 8010386:	d103      	bne.n	8010390 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	68fa      	ldr	r2, [r7, #12]
 801038c:	66da      	str	r2, [r3, #108]	; 0x6c
 801038e:	e00d      	b.n	80103ac <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010394:	61bb      	str	r3, [r7, #24]
 8010396:	e002      	b.n	801039e <tcp_enqueue_flags+0x11e>
 8010398:	69bb      	ldr	r3, [r7, #24]
 801039a:	681b      	ldr	r3, [r3, #0]
 801039c:	61bb      	str	r3, [r7, #24]
 801039e:	69bb      	ldr	r3, [r7, #24]
 80103a0:	681b      	ldr	r3, [r3, #0]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d1f8      	bne.n	8010398 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80103a6:	69bb      	ldr	r3, [r7, #24]
 80103a8:	68fa      	ldr	r2, [r7, #12]
 80103aa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	2200      	movs	r2, #0
 80103b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80103b4:	78fb      	ldrb	r3, [r7, #3]
 80103b6:	f003 0302 	and.w	r3, r3, #2
 80103ba:	2b00      	cmp	r3, #0
 80103bc:	d104      	bne.n	80103c8 <tcp_enqueue_flags+0x148>
 80103be:	78fb      	ldrb	r3, [r7, #3]
 80103c0:	f003 0301 	and.w	r3, r3, #1
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d004      	beq.n	80103d2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80103cc:	1c5a      	adds	r2, r3, #1
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80103d2:	78fb      	ldrb	r3, [r7, #3]
 80103d4:	f003 0301 	and.w	r3, r3, #1
 80103d8:	2b00      	cmp	r3, #0
 80103da:	d006      	beq.n	80103ea <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	8b5b      	ldrh	r3, [r3, #26]
 80103e0:	f043 0320 	orr.w	r3, r3, #32
 80103e4:	b29a      	uxth	r2, r3
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80103ea:	68fb      	ldr	r3, [r7, #12]
 80103ec:	685b      	ldr	r3, [r3, #4]
 80103ee:	4618      	mov	r0, r3
 80103f0:	f7fb fc32 	bl	800bc58 <pbuf_clen>
 80103f4:	4603      	mov	r3, r0
 80103f6:	461a      	mov	r2, r3
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80103fe:	4413      	add	r3, r2
 8010400:	b29a      	uxth	r2, r3
 8010402:	687b      	ldr	r3, [r7, #4]
 8010404:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8010408:	687b      	ldr	r3, [r7, #4]
 801040a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801040e:	2b00      	cmp	r3, #0
 8010410:	d00e      	beq.n	8010430 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010416:	2b00      	cmp	r3, #0
 8010418:	d10a      	bne.n	8010430 <tcp_enqueue_flags+0x1b0>
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801041e:	2b00      	cmp	r3, #0
 8010420:	d106      	bne.n	8010430 <tcp_enqueue_flags+0x1b0>
 8010422:	4b06      	ldr	r3, [pc, #24]	; (801043c <tcp_enqueue_flags+0x1bc>)
 8010424:	f240 4265 	movw	r2, #1125	; 0x465
 8010428:	490b      	ldr	r1, [pc, #44]	; (8010458 <tcp_enqueue_flags+0x1d8>)
 801042a:	4806      	ldr	r0, [pc, #24]	; (8010444 <tcp_enqueue_flags+0x1c4>)
 801042c:	f006 fa08 	bl	8016840 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8010430:	2300      	movs	r3, #0
}
 8010432:	4618      	mov	r0, r3
 8010434:	3720      	adds	r7, #32
 8010436:	46bd      	mov	sp, r7
 8010438:	bd80      	pop	{r7, pc}
 801043a:	bf00      	nop
 801043c:	08018e94 	.word	0x08018e94
 8010440:	080192b8 	.word	0x080192b8
 8010444:	08018ee8 	.word	0x08018ee8
 8010448:	08019310 	.word	0x08019310
 801044c:	08019330 	.word	0x08019330
 8010450:	0801936c 	.word	0x0801936c
 8010454:	08019384 	.word	0x08019384
 8010458:	080193b0 	.word	0x080193b0

0801045c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801045c:	b5b0      	push	{r4, r5, r7, lr}
 801045e:	b08a      	sub	sp, #40	; 0x28
 8010460:	af00      	add	r7, sp, #0
 8010462:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8010464:	687b      	ldr	r3, [r7, #4]
 8010466:	2b00      	cmp	r3, #0
 8010468:	d106      	bne.n	8010478 <tcp_output+0x1c>
 801046a:	4b8a      	ldr	r3, [pc, #552]	; (8010694 <tcp_output+0x238>)
 801046c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8010470:	4989      	ldr	r1, [pc, #548]	; (8010698 <tcp_output+0x23c>)
 8010472:	488a      	ldr	r0, [pc, #552]	; (801069c <tcp_output+0x240>)
 8010474:	f006 f9e4 	bl	8016840 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	7d1b      	ldrb	r3, [r3, #20]
 801047c:	2b01      	cmp	r3, #1
 801047e:	d106      	bne.n	801048e <tcp_output+0x32>
 8010480:	4b84      	ldr	r3, [pc, #528]	; (8010694 <tcp_output+0x238>)
 8010482:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8010486:	4986      	ldr	r1, [pc, #536]	; (80106a0 <tcp_output+0x244>)
 8010488:	4884      	ldr	r0, [pc, #528]	; (801069c <tcp_output+0x240>)
 801048a:	f006 f9d9 	bl	8016840 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801048e:	4b85      	ldr	r3, [pc, #532]	; (80106a4 <tcp_output+0x248>)
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	687a      	ldr	r2, [r7, #4]
 8010494:	429a      	cmp	r2, r3
 8010496:	d101      	bne.n	801049c <tcp_output+0x40>
    return ERR_OK;
 8010498:	2300      	movs	r3, #0
 801049a:	e1ce      	b.n	801083a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80104a8:	4293      	cmp	r3, r2
 80104aa:	bf28      	it	cs
 80104ac:	4613      	movcs	r3, r2
 80104ae:	b29b      	uxth	r3, r3
 80104b0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80104b6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80104b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ba:	2b00      	cmp	r3, #0
 80104bc:	d10b      	bne.n	80104d6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80104be:	687b      	ldr	r3, [r7, #4]
 80104c0:	8b5b      	ldrh	r3, [r3, #26]
 80104c2:	f003 0302 	and.w	r3, r3, #2
 80104c6:	2b00      	cmp	r3, #0
 80104c8:	f000 81aa 	beq.w	8010820 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f000 fdcb 	bl	8011068 <tcp_send_empty_ack>
 80104d2:	4603      	mov	r3, r0
 80104d4:	e1b1      	b.n	801083a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 80104d6:	6879      	ldr	r1, [r7, #4]
 80104d8:	687b      	ldr	r3, [r7, #4]
 80104da:	3304      	adds	r3, #4
 80104dc:	461a      	mov	r2, r3
 80104de:	6878      	ldr	r0, [r7, #4]
 80104e0:	f7ff fc7c 	bl	800fddc <tcp_route>
 80104e4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 80104e6:	697b      	ldr	r3, [r7, #20]
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d102      	bne.n	80104f2 <tcp_output+0x96>
    return ERR_RTE;
 80104ec:	f06f 0303 	mvn.w	r3, #3
 80104f0:	e1a3      	b.n	801083a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 80104f2:	687b      	ldr	r3, [r7, #4]
 80104f4:	2b00      	cmp	r3, #0
 80104f6:	d003      	beq.n	8010500 <tcp_output+0xa4>
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	681b      	ldr	r3, [r3, #0]
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d111      	bne.n	8010524 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8010500:	697b      	ldr	r3, [r7, #20]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d002      	beq.n	801050c <tcp_output+0xb0>
 8010506:	697b      	ldr	r3, [r7, #20]
 8010508:	3304      	adds	r3, #4
 801050a:	e000      	b.n	801050e <tcp_output+0xb2>
 801050c:	2300      	movs	r3, #0
 801050e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8010510:	693b      	ldr	r3, [r7, #16]
 8010512:	2b00      	cmp	r3, #0
 8010514:	d102      	bne.n	801051c <tcp_output+0xc0>
      return ERR_RTE;
 8010516:	f06f 0303 	mvn.w	r3, #3
 801051a:	e18e      	b.n	801083a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801051c:	693b      	ldr	r3, [r7, #16]
 801051e:	681a      	ldr	r2, [r3, #0]
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8010524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010526:	68db      	ldr	r3, [r3, #12]
 8010528:	685b      	ldr	r3, [r3, #4]
 801052a:	4618      	mov	r0, r3
 801052c:	f7f9 ff1d 	bl	800a36a <lwip_htonl>
 8010530:	4602      	mov	r2, r0
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010536:	1ad3      	subs	r3, r2, r3
 8010538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801053a:	8912      	ldrh	r2, [r2, #8]
 801053c:	4413      	add	r3, r2
 801053e:	69ba      	ldr	r2, [r7, #24]
 8010540:	429a      	cmp	r2, r3
 8010542:	d227      	bcs.n	8010594 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801054a:	461a      	mov	r2, r3
 801054c:	69bb      	ldr	r3, [r7, #24]
 801054e:	4293      	cmp	r3, r2
 8010550:	d114      	bne.n	801057c <tcp_output+0x120>
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010556:	2b00      	cmp	r3, #0
 8010558:	d110      	bne.n	801057c <tcp_output+0x120>
 801055a:	687b      	ldr	r3, [r7, #4]
 801055c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010560:	2b00      	cmp	r3, #0
 8010562:	d10b      	bne.n	801057c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2200      	movs	r2, #0
 8010568:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	2201      	movs	r2, #1
 8010570:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	2200      	movs	r2, #0
 8010578:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	8b5b      	ldrh	r3, [r3, #26]
 8010580:	f003 0302 	and.w	r3, r3, #2
 8010584:	2b00      	cmp	r3, #0
 8010586:	f000 814d 	beq.w	8010824 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801058a:	6878      	ldr	r0, [r7, #4]
 801058c:	f000 fd6c 	bl	8011068 <tcp_send_empty_ack>
 8010590:	4603      	mov	r3, r0
 8010592:	e152      	b.n	801083a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2200      	movs	r2, #0
 8010598:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801059c:	687b      	ldr	r3, [r7, #4]
 801059e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105a0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80105a2:	6a3b      	ldr	r3, [r7, #32]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	f000 811c 	beq.w	80107e2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80105aa:	e002      	b.n	80105b2 <tcp_output+0x156>
 80105ac:	6a3b      	ldr	r3, [r7, #32]
 80105ae:	681b      	ldr	r3, [r3, #0]
 80105b0:	623b      	str	r3, [r7, #32]
 80105b2:	6a3b      	ldr	r3, [r7, #32]
 80105b4:	681b      	ldr	r3, [r3, #0]
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d1f8      	bne.n	80105ac <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80105ba:	e112      	b.n	80107e2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80105bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105be:	68db      	ldr	r3, [r3, #12]
 80105c0:	899b      	ldrh	r3, [r3, #12]
 80105c2:	b29b      	uxth	r3, r3
 80105c4:	4618      	mov	r0, r3
 80105c6:	f7f9 febb 	bl	800a340 <lwip_htons>
 80105ca:	4603      	mov	r3, r0
 80105cc:	b2db      	uxtb	r3, r3
 80105ce:	f003 0304 	and.w	r3, r3, #4
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d006      	beq.n	80105e4 <tcp_output+0x188>
 80105d6:	4b2f      	ldr	r3, [pc, #188]	; (8010694 <tcp_output+0x238>)
 80105d8:	f240 5236 	movw	r2, #1334	; 0x536
 80105dc:	4932      	ldr	r1, [pc, #200]	; (80106a8 <tcp_output+0x24c>)
 80105de:	482f      	ldr	r0, [pc, #188]	; (801069c <tcp_output+0x240>)
 80105e0:	f006 f92e 	bl	8016840 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d01f      	beq.n	801062c <tcp_output+0x1d0>
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	8b5b      	ldrh	r3, [r3, #26]
 80105f0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d119      	bne.n	801062c <tcp_output+0x1d0>
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d00b      	beq.n	8010618 <tcp_output+0x1bc>
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010604:	681b      	ldr	r3, [r3, #0]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d110      	bne.n	801062c <tcp_output+0x1d0>
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801060e:	891a      	ldrh	r2, [r3, #8]
 8010610:	687b      	ldr	r3, [r7, #4]
 8010612:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010614:	429a      	cmp	r2, r3
 8010616:	d209      	bcs.n	801062c <tcp_output+0x1d0>
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801061e:	2b00      	cmp	r3, #0
 8010620:	d004      	beq.n	801062c <tcp_output+0x1d0>
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010628:	2b08      	cmp	r3, #8
 801062a:	d901      	bls.n	8010630 <tcp_output+0x1d4>
 801062c:	2301      	movs	r3, #1
 801062e:	e000      	b.n	8010632 <tcp_output+0x1d6>
 8010630:	2300      	movs	r3, #0
 8010632:	2b00      	cmp	r3, #0
 8010634:	d106      	bne.n	8010644 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8010636:	687b      	ldr	r3, [r7, #4]
 8010638:	8b5b      	ldrh	r3, [r3, #26]
 801063a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801063e:	2b00      	cmp	r3, #0
 8010640:	f000 80e4 	beq.w	801080c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8010644:	687b      	ldr	r3, [r7, #4]
 8010646:	7d1b      	ldrb	r3, [r3, #20]
 8010648:	2b02      	cmp	r3, #2
 801064a:	d00d      	beq.n	8010668 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801064c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801064e:	68db      	ldr	r3, [r3, #12]
 8010650:	899b      	ldrh	r3, [r3, #12]
 8010652:	b29c      	uxth	r4, r3
 8010654:	2010      	movs	r0, #16
 8010656:	f7f9 fe73 	bl	800a340 <lwip_htons>
 801065a:	4603      	mov	r3, r0
 801065c:	461a      	mov	r2, r3
 801065e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010660:	68db      	ldr	r3, [r3, #12]
 8010662:	4322      	orrs	r2, r4
 8010664:	b292      	uxth	r2, r2
 8010666:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8010668:	697a      	ldr	r2, [r7, #20]
 801066a:	6879      	ldr	r1, [r7, #4]
 801066c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801066e:	f000 f909 	bl	8010884 <tcp_output_segment>
 8010672:	4603      	mov	r3, r0
 8010674:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8010676:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801067a:	2b00      	cmp	r3, #0
 801067c:	d016      	beq.n	80106ac <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	8b5b      	ldrh	r3, [r3, #26]
 8010682:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010686:	b29a      	uxth	r2, r3
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	835a      	strh	r2, [r3, #26]
      return err;
 801068c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010690:	e0d3      	b.n	801083a <tcp_output+0x3de>
 8010692:	bf00      	nop
 8010694:	08018e94 	.word	0x08018e94
 8010698:	080193d8 	.word	0x080193d8
 801069c:	08018ee8 	.word	0x08018ee8
 80106a0:	080193f0 	.word	0x080193f0
 80106a4:	2000f250 	.word	0x2000f250
 80106a8:	08019418 	.word	0x08019418
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80106ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106ae:	681a      	ldr	r2, [r3, #0]
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	7d1b      	ldrb	r3, [r3, #20]
 80106b8:	2b02      	cmp	r3, #2
 80106ba:	d006      	beq.n	80106ca <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	8b5b      	ldrh	r3, [r3, #26]
 80106c0:	f023 0303 	bic.w	r3, r3, #3
 80106c4:	b29a      	uxth	r2, r3
 80106c6:	687b      	ldr	r3, [r7, #4]
 80106c8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80106ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106cc:	68db      	ldr	r3, [r3, #12]
 80106ce:	685b      	ldr	r3, [r3, #4]
 80106d0:	4618      	mov	r0, r3
 80106d2:	f7f9 fe4a 	bl	800a36a <lwip_htonl>
 80106d6:	4604      	mov	r4, r0
 80106d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106da:	891b      	ldrh	r3, [r3, #8]
 80106dc:	461d      	mov	r5, r3
 80106de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80106e0:	68db      	ldr	r3, [r3, #12]
 80106e2:	899b      	ldrh	r3, [r3, #12]
 80106e4:	b29b      	uxth	r3, r3
 80106e6:	4618      	mov	r0, r3
 80106e8:	f7f9 fe2a 	bl	800a340 <lwip_htons>
 80106ec:	4603      	mov	r3, r0
 80106ee:	b2db      	uxtb	r3, r3
 80106f0:	f003 0303 	and.w	r3, r3, #3
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d001      	beq.n	80106fc <tcp_output+0x2a0>
 80106f8:	2301      	movs	r3, #1
 80106fa:	e000      	b.n	80106fe <tcp_output+0x2a2>
 80106fc:	2300      	movs	r3, #0
 80106fe:	442b      	add	r3, r5
 8010700:	4423      	add	r3, r4
 8010702:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	1ad3      	subs	r3, r2, r3
 801070c:	2b00      	cmp	r3, #0
 801070e:	da02      	bge.n	8010716 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8010710:	687b      	ldr	r3, [r7, #4]
 8010712:	68ba      	ldr	r2, [r7, #8]
 8010714:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8010716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010718:	891b      	ldrh	r3, [r3, #8]
 801071a:	461c      	mov	r4, r3
 801071c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071e:	68db      	ldr	r3, [r3, #12]
 8010720:	899b      	ldrh	r3, [r3, #12]
 8010722:	b29b      	uxth	r3, r3
 8010724:	4618      	mov	r0, r3
 8010726:	f7f9 fe0b 	bl	800a340 <lwip_htons>
 801072a:	4603      	mov	r3, r0
 801072c:	b2db      	uxtb	r3, r3
 801072e:	f003 0303 	and.w	r3, r3, #3
 8010732:	2b00      	cmp	r3, #0
 8010734:	d001      	beq.n	801073a <tcp_output+0x2de>
 8010736:	2301      	movs	r3, #1
 8010738:	e000      	b.n	801073c <tcp_output+0x2e0>
 801073a:	2300      	movs	r3, #0
 801073c:	4423      	add	r3, r4
 801073e:	2b00      	cmp	r3, #0
 8010740:	d049      	beq.n	80107d6 <tcp_output+0x37a>
      seg->next = NULL;
 8010742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010744:	2200      	movs	r2, #0
 8010746:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8010748:	687b      	ldr	r3, [r7, #4]
 801074a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801074c:	2b00      	cmp	r3, #0
 801074e:	d105      	bne.n	801075c <tcp_output+0x300>
        pcb->unacked = seg;
 8010750:	687b      	ldr	r3, [r7, #4]
 8010752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010754:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8010756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010758:	623b      	str	r3, [r7, #32]
 801075a:	e03f      	b.n	80107dc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801075c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801075e:	68db      	ldr	r3, [r3, #12]
 8010760:	685b      	ldr	r3, [r3, #4]
 8010762:	4618      	mov	r0, r3
 8010764:	f7f9 fe01 	bl	800a36a <lwip_htonl>
 8010768:	4604      	mov	r4, r0
 801076a:	6a3b      	ldr	r3, [r7, #32]
 801076c:	68db      	ldr	r3, [r3, #12]
 801076e:	685b      	ldr	r3, [r3, #4]
 8010770:	4618      	mov	r0, r3
 8010772:	f7f9 fdfa 	bl	800a36a <lwip_htonl>
 8010776:	4603      	mov	r3, r0
 8010778:	1ae3      	subs	r3, r4, r3
 801077a:	2b00      	cmp	r3, #0
 801077c:	da24      	bge.n	80107c8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	3370      	adds	r3, #112	; 0x70
 8010782:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8010784:	e002      	b.n	801078c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8010786:	69fb      	ldr	r3, [r7, #28]
 8010788:	681b      	ldr	r3, [r3, #0]
 801078a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801078c:	69fb      	ldr	r3, [r7, #28]
 801078e:	681b      	ldr	r3, [r3, #0]
 8010790:	2b00      	cmp	r3, #0
 8010792:	d011      	beq.n	80107b8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010794:	69fb      	ldr	r3, [r7, #28]
 8010796:	681b      	ldr	r3, [r3, #0]
 8010798:	68db      	ldr	r3, [r3, #12]
 801079a:	685b      	ldr	r3, [r3, #4]
 801079c:	4618      	mov	r0, r3
 801079e:	f7f9 fde4 	bl	800a36a <lwip_htonl>
 80107a2:	4604      	mov	r4, r0
 80107a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107a6:	68db      	ldr	r3, [r3, #12]
 80107a8:	685b      	ldr	r3, [r3, #4]
 80107aa:	4618      	mov	r0, r3
 80107ac:	f7f9 fddd 	bl	800a36a <lwip_htonl>
 80107b0:	4603      	mov	r3, r0
 80107b2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	dbe6      	blt.n	8010786 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80107b8:	69fb      	ldr	r3, [r7, #28]
 80107ba:	681a      	ldr	r2, [r3, #0]
 80107bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107be:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80107c0:	69fb      	ldr	r3, [r7, #28]
 80107c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107c4:	601a      	str	r2, [r3, #0]
 80107c6:	e009      	b.n	80107dc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80107c8:	6a3b      	ldr	r3, [r7, #32]
 80107ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107cc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80107ce:	6a3b      	ldr	r3, [r7, #32]
 80107d0:	681b      	ldr	r3, [r3, #0]
 80107d2:	623b      	str	r3, [r7, #32]
 80107d4:	e002      	b.n	80107dc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80107d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80107d8:	f7fc fc3f 	bl	800d05a <tcp_seg_free>
    }
    seg = pcb->unsent;
 80107dc:	687b      	ldr	r3, [r7, #4]
 80107de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80107e0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80107e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e4:	2b00      	cmp	r3, #0
 80107e6:	d012      	beq.n	801080e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80107e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ea:	68db      	ldr	r3, [r3, #12]
 80107ec:	685b      	ldr	r3, [r3, #4]
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7f9 fdbb 	bl	800a36a <lwip_htonl>
 80107f4:	4602      	mov	r2, r0
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80107fa:	1ad3      	subs	r3, r2, r3
 80107fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80107fe:	8912      	ldrh	r2, [r2, #8]
 8010800:	4413      	add	r3, r2
  while (seg != NULL &&
 8010802:	69ba      	ldr	r2, [r7, #24]
 8010804:	429a      	cmp	r2, r3
 8010806:	f4bf aed9 	bcs.w	80105bc <tcp_output+0x160>
 801080a:	e000      	b.n	801080e <tcp_output+0x3b2>
      break;
 801080c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010812:	2b00      	cmp	r3, #0
 8010814:	d108      	bne.n	8010828 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	2200      	movs	r2, #0
 801081a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801081e:	e004      	b.n	801082a <tcp_output+0x3ce>
    goto output_done;
 8010820:	bf00      	nop
 8010822:	e002      	b.n	801082a <tcp_output+0x3ce>
    goto output_done;
 8010824:	bf00      	nop
 8010826:	e000      	b.n	801082a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8010828:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801082a:	687b      	ldr	r3, [r7, #4]
 801082c:	8b5b      	ldrh	r3, [r3, #26]
 801082e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010832:	b29a      	uxth	r2, r3
 8010834:	687b      	ldr	r3, [r7, #4]
 8010836:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8010838:	2300      	movs	r3, #0
}
 801083a:	4618      	mov	r0, r3
 801083c:	3728      	adds	r7, #40	; 0x28
 801083e:	46bd      	mov	sp, r7
 8010840:	bdb0      	pop	{r4, r5, r7, pc}
 8010842:	bf00      	nop

08010844 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	2b00      	cmp	r3, #0
 8010850:	d106      	bne.n	8010860 <tcp_output_segment_busy+0x1c>
 8010852:	4b09      	ldr	r3, [pc, #36]	; (8010878 <tcp_output_segment_busy+0x34>)
 8010854:	f240 529a 	movw	r2, #1434	; 0x59a
 8010858:	4908      	ldr	r1, [pc, #32]	; (801087c <tcp_output_segment_busy+0x38>)
 801085a:	4809      	ldr	r0, [pc, #36]	; (8010880 <tcp_output_segment_busy+0x3c>)
 801085c:	f005 fff0 	bl	8016840 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	685b      	ldr	r3, [r3, #4]
 8010864:	7b9b      	ldrb	r3, [r3, #14]
 8010866:	2b01      	cmp	r3, #1
 8010868:	d001      	beq.n	801086e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801086a:	2301      	movs	r3, #1
 801086c:	e000      	b.n	8010870 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801086e:	2300      	movs	r3, #0
}
 8010870:	4618      	mov	r0, r3
 8010872:	3708      	adds	r7, #8
 8010874:	46bd      	mov	sp, r7
 8010876:	bd80      	pop	{r7, pc}
 8010878:	08018e94 	.word	0x08018e94
 801087c:	08019430 	.word	0x08019430
 8010880:	08018ee8 	.word	0x08018ee8

08010884 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8010884:	b5b0      	push	{r4, r5, r7, lr}
 8010886:	b08c      	sub	sp, #48	; 0x30
 8010888:	af04      	add	r7, sp, #16
 801088a:	60f8      	str	r0, [r7, #12]
 801088c:	60b9      	str	r1, [r7, #8]
 801088e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8010890:	68fb      	ldr	r3, [r7, #12]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d106      	bne.n	80108a4 <tcp_output_segment+0x20>
 8010896:	4b63      	ldr	r3, [pc, #396]	; (8010a24 <tcp_output_segment+0x1a0>)
 8010898:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801089c:	4962      	ldr	r1, [pc, #392]	; (8010a28 <tcp_output_segment+0x1a4>)
 801089e:	4863      	ldr	r0, [pc, #396]	; (8010a2c <tcp_output_segment+0x1a8>)
 80108a0:	f005 ffce 	bl	8016840 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80108a4:	68bb      	ldr	r3, [r7, #8]
 80108a6:	2b00      	cmp	r3, #0
 80108a8:	d106      	bne.n	80108b8 <tcp_output_segment+0x34>
 80108aa:	4b5e      	ldr	r3, [pc, #376]	; (8010a24 <tcp_output_segment+0x1a0>)
 80108ac:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80108b0:	495f      	ldr	r1, [pc, #380]	; (8010a30 <tcp_output_segment+0x1ac>)
 80108b2:	485e      	ldr	r0, [pc, #376]	; (8010a2c <tcp_output_segment+0x1a8>)
 80108b4:	f005 ffc4 	bl	8016840 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	2b00      	cmp	r3, #0
 80108bc:	d106      	bne.n	80108cc <tcp_output_segment+0x48>
 80108be:	4b59      	ldr	r3, [pc, #356]	; (8010a24 <tcp_output_segment+0x1a0>)
 80108c0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80108c4:	495b      	ldr	r1, [pc, #364]	; (8010a34 <tcp_output_segment+0x1b0>)
 80108c6:	4859      	ldr	r0, [pc, #356]	; (8010a2c <tcp_output_segment+0x1a8>)
 80108c8:	f005 ffba 	bl	8016840 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80108cc:	68f8      	ldr	r0, [r7, #12]
 80108ce:	f7ff ffb9 	bl	8010844 <tcp_output_segment_busy>
 80108d2:	4603      	mov	r3, r0
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d001      	beq.n	80108dc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80108d8:	2300      	movs	r3, #0
 80108da:	e09f      	b.n	8010a1c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80108dc:	68bb      	ldr	r3, [r7, #8]
 80108de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80108e0:	68fb      	ldr	r3, [r7, #12]
 80108e2:	68dc      	ldr	r4, [r3, #12]
 80108e4:	4610      	mov	r0, r2
 80108e6:	f7f9 fd40 	bl	800a36a <lwip_htonl>
 80108ea:	4603      	mov	r3, r0
 80108ec:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80108ee:	68bb      	ldr	r3, [r7, #8]
 80108f0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	68dc      	ldr	r4, [r3, #12]
 80108f6:	4610      	mov	r0, r2
 80108f8:	f7f9 fd22 	bl	800a340 <lwip_htons>
 80108fc:	4603      	mov	r3, r0
 80108fe:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010900:	68bb      	ldr	r3, [r7, #8]
 8010902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010904:	68ba      	ldr	r2, [r7, #8]
 8010906:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010908:	441a      	add	r2, r3
 801090a:	68bb      	ldr	r3, [r7, #8]
 801090c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	68db      	ldr	r3, [r3, #12]
 8010912:	3314      	adds	r3, #20
 8010914:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	7a9b      	ldrb	r3, [r3, #10]
 801091a:	f003 0301 	and.w	r3, r3, #1
 801091e:	2b00      	cmp	r3, #0
 8010920:	d015      	beq.n	801094e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8010922:	68bb      	ldr	r3, [r7, #8]
 8010924:	3304      	adds	r3, #4
 8010926:	461a      	mov	r2, r3
 8010928:	6879      	ldr	r1, [r7, #4]
 801092a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801092e:	f7fc fe8b 	bl	800d648 <tcp_eff_send_mss_netif>
 8010932:	4603      	mov	r3, r0
 8010934:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8010936:	8b7b      	ldrh	r3, [r7, #26]
 8010938:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801093c:	4618      	mov	r0, r3
 801093e:	f7f9 fd14 	bl	800a36a <lwip_htonl>
 8010942:	4602      	mov	r2, r0
 8010944:	69fb      	ldr	r3, [r7, #28]
 8010946:	601a      	str	r2, [r3, #0]
    opts += 1;
 8010948:	69fb      	ldr	r3, [r7, #28]
 801094a:	3304      	adds	r3, #4
 801094c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801094e:	68bb      	ldr	r3, [r7, #8]
 8010950:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010954:	2b00      	cmp	r3, #0
 8010956:	da02      	bge.n	801095e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8010958:	68bb      	ldr	r3, [r7, #8]
 801095a:	2200      	movs	r2, #0
 801095c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801095e:	68bb      	ldr	r3, [r7, #8]
 8010960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010962:	2b00      	cmp	r3, #0
 8010964:	d10c      	bne.n	8010980 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8010966:	4b34      	ldr	r3, [pc, #208]	; (8010a38 <tcp_output_segment+0x1b4>)
 8010968:	681a      	ldr	r2, [r3, #0]
 801096a:	68bb      	ldr	r3, [r7, #8]
 801096c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	68db      	ldr	r3, [r3, #12]
 8010972:	685b      	ldr	r3, [r3, #4]
 8010974:	4618      	mov	r0, r3
 8010976:	f7f9 fcf8 	bl	800a36a <lwip_htonl>
 801097a:	4602      	mov	r2, r0
 801097c:	68bb      	ldr	r3, [r7, #8]
 801097e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8010980:	68fb      	ldr	r3, [r7, #12]
 8010982:	68da      	ldr	r2, [r3, #12]
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	685b      	ldr	r3, [r3, #4]
 8010988:	685b      	ldr	r3, [r3, #4]
 801098a:	1ad3      	subs	r3, r2, r3
 801098c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801098e:	68fb      	ldr	r3, [r7, #12]
 8010990:	685b      	ldr	r3, [r3, #4]
 8010992:	8959      	ldrh	r1, [r3, #10]
 8010994:	68fb      	ldr	r3, [r7, #12]
 8010996:	685b      	ldr	r3, [r3, #4]
 8010998:	8b3a      	ldrh	r2, [r7, #24]
 801099a:	1a8a      	subs	r2, r1, r2
 801099c:	b292      	uxth	r2, r2
 801099e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80109a0:	68fb      	ldr	r3, [r7, #12]
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	8919      	ldrh	r1, [r3, #8]
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	685b      	ldr	r3, [r3, #4]
 80109aa:	8b3a      	ldrh	r2, [r7, #24]
 80109ac:	1a8a      	subs	r2, r1, r2
 80109ae:	b292      	uxth	r2, r2
 80109b0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80109b2:	68fb      	ldr	r3, [r7, #12]
 80109b4:	685b      	ldr	r3, [r3, #4]
 80109b6:	68fa      	ldr	r2, [r7, #12]
 80109b8:	68d2      	ldr	r2, [r2, #12]
 80109ba:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80109bc:	68fb      	ldr	r3, [r7, #12]
 80109be:	68db      	ldr	r3, [r3, #12]
 80109c0:	2200      	movs	r2, #0
 80109c2:	741a      	strb	r2, [r3, #16]
 80109c4:	2200      	movs	r2, #0
 80109c6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80109c8:	68fb      	ldr	r3, [r7, #12]
 80109ca:	68db      	ldr	r3, [r3, #12]
 80109cc:	f103 0214 	add.w	r2, r3, #20
 80109d0:	68fb      	ldr	r3, [r7, #12]
 80109d2:	7a9b      	ldrb	r3, [r3, #10]
 80109d4:	009b      	lsls	r3, r3, #2
 80109d6:	f003 0304 	and.w	r3, r3, #4
 80109da:	4413      	add	r3, r2
 80109dc:	69fa      	ldr	r2, [r7, #28]
 80109de:	429a      	cmp	r2, r3
 80109e0:	d006      	beq.n	80109f0 <tcp_output_segment+0x16c>
 80109e2:	4b10      	ldr	r3, [pc, #64]	; (8010a24 <tcp_output_segment+0x1a0>)
 80109e4:	f240 621c 	movw	r2, #1564	; 0x61c
 80109e8:	4914      	ldr	r1, [pc, #80]	; (8010a3c <tcp_output_segment+0x1b8>)
 80109ea:	4810      	ldr	r0, [pc, #64]	; (8010a2c <tcp_output_segment+0x1a8>)
 80109ec:	f005 ff28 	bl	8016840 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	6858      	ldr	r0, [r3, #4]
 80109f4:	68b9      	ldr	r1, [r7, #8]
 80109f6:	68bb      	ldr	r3, [r7, #8]
 80109f8:	1d1c      	adds	r4, r3, #4
 80109fa:	68bb      	ldr	r3, [r7, #8]
 80109fc:	7add      	ldrb	r5, [r3, #11]
 80109fe:	68bb      	ldr	r3, [r7, #8]
 8010a00:	7a9b      	ldrb	r3, [r3, #10]
 8010a02:	687a      	ldr	r2, [r7, #4]
 8010a04:	9202      	str	r2, [sp, #8]
 8010a06:	2206      	movs	r2, #6
 8010a08:	9201      	str	r2, [sp, #4]
 8010a0a:	9300      	str	r3, [sp, #0]
 8010a0c:	462b      	mov	r3, r5
 8010a0e:	4622      	mov	r2, r4
 8010a10:	f004 fc1e 	bl	8015250 <ip4_output_if>
 8010a14:	4603      	mov	r3, r0
 8010a16:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8010a18:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010a1c:	4618      	mov	r0, r3
 8010a1e:	3720      	adds	r7, #32
 8010a20:	46bd      	mov	sp, r7
 8010a22:	bdb0      	pop	{r4, r5, r7, pc}
 8010a24:	08018e94 	.word	0x08018e94
 8010a28:	08019458 	.word	0x08019458
 8010a2c:	08018ee8 	.word	0x08018ee8
 8010a30:	08019478 	.word	0x08019478
 8010a34:	08019498 	.word	0x08019498
 8010a38:	2000f204 	.word	0x2000f204
 8010a3c:	080194bc 	.word	0x080194bc

08010a40 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8010a40:	b5b0      	push	{r4, r5, r7, lr}
 8010a42:	b084      	sub	sp, #16
 8010a44:	af00      	add	r7, sp, #0
 8010a46:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	2b00      	cmp	r3, #0
 8010a4c:	d106      	bne.n	8010a5c <tcp_rexmit_rto_prepare+0x1c>
 8010a4e:	4b31      	ldr	r3, [pc, #196]	; (8010b14 <tcp_rexmit_rto_prepare+0xd4>)
 8010a50:	f240 6263 	movw	r2, #1635	; 0x663
 8010a54:	4930      	ldr	r1, [pc, #192]	; (8010b18 <tcp_rexmit_rto_prepare+0xd8>)
 8010a56:	4831      	ldr	r0, [pc, #196]	; (8010b1c <tcp_rexmit_rto_prepare+0xdc>)
 8010a58:	f005 fef2 	bl	8016840 <iprintf>

  if (pcb->unacked == NULL) {
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a60:	2b00      	cmp	r3, #0
 8010a62:	d102      	bne.n	8010a6a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8010a64:	f06f 0305 	mvn.w	r3, #5
 8010a68:	e050      	b.n	8010b0c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010a6e:	60fb      	str	r3, [r7, #12]
 8010a70:	e00b      	b.n	8010a8a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8010a72:	68f8      	ldr	r0, [r7, #12]
 8010a74:	f7ff fee6 	bl	8010844 <tcp_output_segment_busy>
 8010a78:	4603      	mov	r3, r0
 8010a7a:	2b00      	cmp	r3, #0
 8010a7c:	d002      	beq.n	8010a84 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8010a7e:	f06f 0305 	mvn.w	r3, #5
 8010a82:	e043      	b.n	8010b0c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	60fb      	str	r3, [r7, #12]
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d1ef      	bne.n	8010a72 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8010a92:	68f8      	ldr	r0, [r7, #12]
 8010a94:	f7ff fed6 	bl	8010844 <tcp_output_segment_busy>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	2b00      	cmp	r3, #0
 8010a9c:	d002      	beq.n	8010aa4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8010a9e:	f06f 0305 	mvn.w	r3, #5
 8010aa2:	e033      	b.n	8010b0c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8010aa8:	68fb      	ldr	r3, [r7, #12]
 8010aaa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8010ab0:	687b      	ldr	r3, [r7, #4]
 8010ab2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8010aba:	687b      	ldr	r3, [r7, #4]
 8010abc:	8b5b      	ldrh	r3, [r3, #26]
 8010abe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8010ac2:	b29a      	uxth	r2, r3
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	68db      	ldr	r3, [r3, #12]
 8010acc:	685b      	ldr	r3, [r3, #4]
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f7f9 fc4b 	bl	800a36a <lwip_htonl>
 8010ad4:	4604      	mov	r4, r0
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	891b      	ldrh	r3, [r3, #8]
 8010ada:	461d      	mov	r5, r3
 8010adc:	68fb      	ldr	r3, [r7, #12]
 8010ade:	68db      	ldr	r3, [r3, #12]
 8010ae0:	899b      	ldrh	r3, [r3, #12]
 8010ae2:	b29b      	uxth	r3, r3
 8010ae4:	4618      	mov	r0, r3
 8010ae6:	f7f9 fc2b 	bl	800a340 <lwip_htons>
 8010aea:	4603      	mov	r3, r0
 8010aec:	b2db      	uxtb	r3, r3
 8010aee:	f003 0303 	and.w	r3, r3, #3
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d001      	beq.n	8010afa <tcp_rexmit_rto_prepare+0xba>
 8010af6:	2301      	movs	r3, #1
 8010af8:	e000      	b.n	8010afc <tcp_rexmit_rto_prepare+0xbc>
 8010afa:	2300      	movs	r3, #0
 8010afc:	442b      	add	r3, r5
 8010afe:	18e2      	adds	r2, r4, r3
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	2200      	movs	r2, #0
 8010b08:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8010b0a:	2300      	movs	r3, #0
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3710      	adds	r7, #16
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bdb0      	pop	{r4, r5, r7, pc}
 8010b14:	08018e94 	.word	0x08018e94
 8010b18:	080194d0 	.word	0x080194d0
 8010b1c:	08018ee8 	.word	0x08018ee8

08010b20 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	b082      	sub	sp, #8
 8010b24:	af00      	add	r7, sp, #0
 8010b26:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	2b00      	cmp	r3, #0
 8010b2c:	d106      	bne.n	8010b3c <tcp_rexmit_rto_commit+0x1c>
 8010b2e:	4b0d      	ldr	r3, [pc, #52]	; (8010b64 <tcp_rexmit_rto_commit+0x44>)
 8010b30:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8010b34:	490c      	ldr	r1, [pc, #48]	; (8010b68 <tcp_rexmit_rto_commit+0x48>)
 8010b36:	480d      	ldr	r0, [pc, #52]	; (8010b6c <tcp_rexmit_rto_commit+0x4c>)
 8010b38:	f005 fe82 	bl	8016840 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b42:	2bff      	cmp	r3, #255	; 0xff
 8010b44:	d007      	beq.n	8010b56 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b4c:	3301      	adds	r3, #1
 8010b4e:	b2da      	uxtb	r2, r3
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8010b56:	6878      	ldr	r0, [r7, #4]
 8010b58:	f7ff fc80 	bl	801045c <tcp_output>
}
 8010b5c:	bf00      	nop
 8010b5e:	3708      	adds	r7, #8
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}
 8010b64:	08018e94 	.word	0x08018e94
 8010b68:	080194f4 	.word	0x080194f4
 8010b6c:	08018ee8 	.word	0x08018ee8

08010b70 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8010b70:	b580      	push	{r7, lr}
 8010b72:	b082      	sub	sp, #8
 8010b74:	af00      	add	r7, sp, #0
 8010b76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d106      	bne.n	8010b8c <tcp_rexmit_rto+0x1c>
 8010b7e:	4b0a      	ldr	r3, [pc, #40]	; (8010ba8 <tcp_rexmit_rto+0x38>)
 8010b80:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8010b84:	4909      	ldr	r1, [pc, #36]	; (8010bac <tcp_rexmit_rto+0x3c>)
 8010b86:	480a      	ldr	r0, [pc, #40]	; (8010bb0 <tcp_rexmit_rto+0x40>)
 8010b88:	f005 fe5a 	bl	8016840 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8010b8c:	6878      	ldr	r0, [r7, #4]
 8010b8e:	f7ff ff57 	bl	8010a40 <tcp_rexmit_rto_prepare>
 8010b92:	4603      	mov	r3, r0
 8010b94:	2b00      	cmp	r3, #0
 8010b96:	d102      	bne.n	8010b9e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f7ff ffc1 	bl	8010b20 <tcp_rexmit_rto_commit>
  }
}
 8010b9e:	bf00      	nop
 8010ba0:	3708      	adds	r7, #8
 8010ba2:	46bd      	mov	sp, r7
 8010ba4:	bd80      	pop	{r7, pc}
 8010ba6:	bf00      	nop
 8010ba8:	08018e94 	.word	0x08018e94
 8010bac:	08019518 	.word	0x08019518
 8010bb0:	08018ee8 	.word	0x08018ee8

08010bb4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8010bb4:	b590      	push	{r4, r7, lr}
 8010bb6:	b085      	sub	sp, #20
 8010bb8:	af00      	add	r7, sp, #0
 8010bba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d106      	bne.n	8010bd0 <tcp_rexmit+0x1c>
 8010bc2:	4b2f      	ldr	r3, [pc, #188]	; (8010c80 <tcp_rexmit+0xcc>)
 8010bc4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8010bc8:	492e      	ldr	r1, [pc, #184]	; (8010c84 <tcp_rexmit+0xd0>)
 8010bca:	482f      	ldr	r0, [pc, #188]	; (8010c88 <tcp_rexmit+0xd4>)
 8010bcc:	f005 fe38 	bl	8016840 <iprintf>

  if (pcb->unacked == NULL) {
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d102      	bne.n	8010bde <tcp_rexmit+0x2a>
    return ERR_VAL;
 8010bd8:	f06f 0305 	mvn.w	r3, #5
 8010bdc:	e04c      	b.n	8010c78 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8010bde:	687b      	ldr	r3, [r7, #4]
 8010be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010be2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8010be4:	68b8      	ldr	r0, [r7, #8]
 8010be6:	f7ff fe2d 	bl	8010844 <tcp_output_segment_busy>
 8010bea:	4603      	mov	r3, r0
 8010bec:	2b00      	cmp	r3, #0
 8010bee:	d002      	beq.n	8010bf6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8010bf0:	f06f 0305 	mvn.w	r3, #5
 8010bf4:	e040      	b.n	8010c78 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	681a      	ldr	r2, [r3, #0]
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	336c      	adds	r3, #108	; 0x6c
 8010c02:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010c04:	e002      	b.n	8010c0c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	681b      	ldr	r3, [r3, #0]
 8010c0a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8010c0c:	68fb      	ldr	r3, [r7, #12]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	2b00      	cmp	r3, #0
 8010c12:	d011      	beq.n	8010c38 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8010c14:	68fb      	ldr	r3, [r7, #12]
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	68db      	ldr	r3, [r3, #12]
 8010c1a:	685b      	ldr	r3, [r3, #4]
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f7f9 fba4 	bl	800a36a <lwip_htonl>
 8010c22:	4604      	mov	r4, r0
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	68db      	ldr	r3, [r3, #12]
 8010c28:	685b      	ldr	r3, [r3, #4]
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7f9 fb9d 	bl	800a36a <lwip_htonl>
 8010c30:	4603      	mov	r3, r0
 8010c32:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	dbe6      	blt.n	8010c06 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8010c38:	68fb      	ldr	r3, [r7, #12]
 8010c3a:	681a      	ldr	r2, [r3, #0]
 8010c3c:	68bb      	ldr	r3, [r7, #8]
 8010c3e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	68ba      	ldr	r2, [r7, #8]
 8010c44:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8010c46:	68bb      	ldr	r3, [r7, #8]
 8010c48:	681b      	ldr	r3, [r3, #0]
 8010c4a:	2b00      	cmp	r3, #0
 8010c4c:	d103      	bne.n	8010c56 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	2200      	movs	r2, #0
 8010c52:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010c5c:	2bff      	cmp	r3, #255	; 0xff
 8010c5e:	d007      	beq.n	8010c70 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8010c60:	687b      	ldr	r3, [r7, #4]
 8010c62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010c66:	3301      	adds	r3, #1
 8010c68:	b2da      	uxtb	r2, r3
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	2200      	movs	r2, #0
 8010c74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8010c76:	2300      	movs	r3, #0
}
 8010c78:	4618      	mov	r0, r3
 8010c7a:	3714      	adds	r7, #20
 8010c7c:	46bd      	mov	sp, r7
 8010c7e:	bd90      	pop	{r4, r7, pc}
 8010c80:	08018e94 	.word	0x08018e94
 8010c84:	08019534 	.word	0x08019534
 8010c88:	08018ee8 	.word	0x08018ee8

08010c8c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8010c8c:	b580      	push	{r7, lr}
 8010c8e:	b082      	sub	sp, #8
 8010c90:	af00      	add	r7, sp, #0
 8010c92:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d106      	bne.n	8010ca8 <tcp_rexmit_fast+0x1c>
 8010c9a:	4b2a      	ldr	r3, [pc, #168]	; (8010d44 <tcp_rexmit_fast+0xb8>)
 8010c9c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8010ca0:	4929      	ldr	r1, [pc, #164]	; (8010d48 <tcp_rexmit_fast+0xbc>)
 8010ca2:	482a      	ldr	r0, [pc, #168]	; (8010d4c <tcp_rexmit_fast+0xc0>)
 8010ca4:	f005 fdcc 	bl	8016840 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010cac:	2b00      	cmp	r3, #0
 8010cae:	d045      	beq.n	8010d3c <tcp_rexmit_fast+0xb0>
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	8b5b      	ldrh	r3, [r3, #26]
 8010cb4:	f003 0304 	and.w	r3, r3, #4
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	d13f      	bne.n	8010d3c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8010cbc:	6878      	ldr	r0, [r7, #4]
 8010cbe:	f7ff ff79 	bl	8010bb4 <tcp_rexmit>
 8010cc2:	4603      	mov	r3, r0
 8010cc4:	2b00      	cmp	r3, #0
 8010cc6:	d139      	bne.n	8010d3c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010cd4:	4293      	cmp	r3, r2
 8010cd6:	bf28      	it	cs
 8010cd8:	4613      	movcs	r3, r2
 8010cda:	b29b      	uxth	r3, r3
 8010cdc:	2b00      	cmp	r3, #0
 8010cde:	da00      	bge.n	8010ce2 <tcp_rexmit_fast+0x56>
 8010ce0:	3301      	adds	r3, #1
 8010ce2:	105b      	asrs	r3, r3, #1
 8010ce4:	b29a      	uxth	r2, r3
 8010ce6:	687b      	ldr	r3, [r7, #4]
 8010ce8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010cf2:	461a      	mov	r2, r3
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010cf8:	005b      	lsls	r3, r3, #1
 8010cfa:	429a      	cmp	r2, r3
 8010cfc:	d206      	bcs.n	8010d0c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d02:	005b      	lsls	r3, r3, #1
 8010d04:	b29a      	uxth	r2, r3
 8010d06:	687b      	ldr	r3, [r7, #4]
 8010d08:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8010d0c:	687b      	ldr	r3, [r7, #4]
 8010d0e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010d12:	687b      	ldr	r3, [r7, #4]
 8010d14:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d16:	4619      	mov	r1, r3
 8010d18:	0049      	lsls	r1, r1, #1
 8010d1a:	440b      	add	r3, r1
 8010d1c:	b29b      	uxth	r3, r3
 8010d1e:	4413      	add	r3, r2
 8010d20:	b29a      	uxth	r2, r3
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	8b5b      	ldrh	r3, [r3, #26]
 8010d2c:	f043 0304 	orr.w	r3, r3, #4
 8010d30:	b29a      	uxth	r2, r3
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8010d36:	687b      	ldr	r3, [r7, #4]
 8010d38:	2200      	movs	r2, #0
 8010d3a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8010d3c:	bf00      	nop
 8010d3e:	3708      	adds	r7, #8
 8010d40:	46bd      	mov	sp, r7
 8010d42:	bd80      	pop	{r7, pc}
 8010d44:	08018e94 	.word	0x08018e94
 8010d48:	0801954c 	.word	0x0801954c
 8010d4c:	08018ee8 	.word	0x08018ee8

08010d50 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8010d50:	b580      	push	{r7, lr}
 8010d52:	b086      	sub	sp, #24
 8010d54:	af00      	add	r7, sp, #0
 8010d56:	60f8      	str	r0, [r7, #12]
 8010d58:	607b      	str	r3, [r7, #4]
 8010d5a:	460b      	mov	r3, r1
 8010d5c:	817b      	strh	r3, [r7, #10]
 8010d5e:	4613      	mov	r3, r2
 8010d60:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8010d62:	897a      	ldrh	r2, [r7, #10]
 8010d64:	893b      	ldrh	r3, [r7, #8]
 8010d66:	4413      	add	r3, r2
 8010d68:	b29b      	uxth	r3, r3
 8010d6a:	3314      	adds	r3, #20
 8010d6c:	b29b      	uxth	r3, r3
 8010d6e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010d72:	4619      	mov	r1, r3
 8010d74:	2022      	movs	r0, #34	; 0x22
 8010d76:	f7fa fbfd 	bl	800b574 <pbuf_alloc>
 8010d7a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010d7c:	697b      	ldr	r3, [r7, #20]
 8010d7e:	2b00      	cmp	r3, #0
 8010d80:	d04d      	beq.n	8010e1e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8010d82:	897b      	ldrh	r3, [r7, #10]
 8010d84:	3313      	adds	r3, #19
 8010d86:	697a      	ldr	r2, [r7, #20]
 8010d88:	8952      	ldrh	r2, [r2, #10]
 8010d8a:	4293      	cmp	r3, r2
 8010d8c:	db06      	blt.n	8010d9c <tcp_output_alloc_header_common+0x4c>
 8010d8e:	4b26      	ldr	r3, [pc, #152]	; (8010e28 <tcp_output_alloc_header_common+0xd8>)
 8010d90:	f240 7223 	movw	r2, #1827	; 0x723
 8010d94:	4925      	ldr	r1, [pc, #148]	; (8010e2c <tcp_output_alloc_header_common+0xdc>)
 8010d96:	4826      	ldr	r0, [pc, #152]	; (8010e30 <tcp_output_alloc_header_common+0xe0>)
 8010d98:	f005 fd52 	bl	8016840 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010d9c:	697b      	ldr	r3, [r7, #20]
 8010d9e:	685b      	ldr	r3, [r3, #4]
 8010da0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8010da2:	8c3b      	ldrh	r3, [r7, #32]
 8010da4:	4618      	mov	r0, r3
 8010da6:	f7f9 facb 	bl	800a340 <lwip_htons>
 8010daa:	4603      	mov	r3, r0
 8010dac:	461a      	mov	r2, r3
 8010dae:	693b      	ldr	r3, [r7, #16]
 8010db0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8010db2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010db4:	4618      	mov	r0, r3
 8010db6:	f7f9 fac3 	bl	800a340 <lwip_htons>
 8010dba:	4603      	mov	r3, r0
 8010dbc:	461a      	mov	r2, r3
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010dc2:	693b      	ldr	r3, [r7, #16]
 8010dc4:	687a      	ldr	r2, [r7, #4]
 8010dc6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8010dc8:	68f8      	ldr	r0, [r7, #12]
 8010dca:	f7f9 face 	bl	800a36a <lwip_htonl>
 8010dce:	4602      	mov	r2, r0
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8010dd4:	897b      	ldrh	r3, [r7, #10]
 8010dd6:	089b      	lsrs	r3, r3, #2
 8010dd8:	b29b      	uxth	r3, r3
 8010dda:	3305      	adds	r3, #5
 8010ddc:	b29b      	uxth	r3, r3
 8010dde:	031b      	lsls	r3, r3, #12
 8010de0:	b29a      	uxth	r2, r3
 8010de2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010de6:	b29b      	uxth	r3, r3
 8010de8:	4313      	orrs	r3, r2
 8010dea:	b29b      	uxth	r3, r3
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7f9 faa7 	bl	800a340 <lwip_htons>
 8010df2:	4603      	mov	r3, r0
 8010df4:	461a      	mov	r2, r3
 8010df6:	693b      	ldr	r3, [r7, #16]
 8010df8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8010dfa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7f9 fa9f 	bl	800a340 <lwip_htons>
 8010e02:	4603      	mov	r3, r0
 8010e04:	461a      	mov	r2, r3
 8010e06:	693b      	ldr	r3, [r7, #16]
 8010e08:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8010e0a:	693b      	ldr	r3, [r7, #16]
 8010e0c:	2200      	movs	r2, #0
 8010e0e:	741a      	strb	r2, [r3, #16]
 8010e10:	2200      	movs	r2, #0
 8010e12:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8010e14:	693b      	ldr	r3, [r7, #16]
 8010e16:	2200      	movs	r2, #0
 8010e18:	749a      	strb	r2, [r3, #18]
 8010e1a:	2200      	movs	r2, #0
 8010e1c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8010e1e:	697b      	ldr	r3, [r7, #20]
}
 8010e20:	4618      	mov	r0, r3
 8010e22:	3718      	adds	r7, #24
 8010e24:	46bd      	mov	sp, r7
 8010e26:	bd80      	pop	{r7, pc}
 8010e28:	08018e94 	.word	0x08018e94
 8010e2c:	0801956c 	.word	0x0801956c
 8010e30:	08018ee8 	.word	0x08018ee8

08010e34 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8010e34:	b5b0      	push	{r4, r5, r7, lr}
 8010e36:	b08a      	sub	sp, #40	; 0x28
 8010e38:	af04      	add	r7, sp, #16
 8010e3a:	60f8      	str	r0, [r7, #12]
 8010e3c:	607b      	str	r3, [r7, #4]
 8010e3e:	460b      	mov	r3, r1
 8010e40:	817b      	strh	r3, [r7, #10]
 8010e42:	4613      	mov	r3, r2
 8010e44:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8010e46:	68fb      	ldr	r3, [r7, #12]
 8010e48:	2b00      	cmp	r3, #0
 8010e4a:	d106      	bne.n	8010e5a <tcp_output_alloc_header+0x26>
 8010e4c:	4b15      	ldr	r3, [pc, #84]	; (8010ea4 <tcp_output_alloc_header+0x70>)
 8010e4e:	f240 7242 	movw	r2, #1858	; 0x742
 8010e52:	4915      	ldr	r1, [pc, #84]	; (8010ea8 <tcp_output_alloc_header+0x74>)
 8010e54:	4815      	ldr	r0, [pc, #84]	; (8010eac <tcp_output_alloc_header+0x78>)
 8010e56:	f005 fcf3 	bl	8016840 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8010e5a:	68fb      	ldr	r3, [r7, #12]
 8010e5c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8010e5e:	68fb      	ldr	r3, [r7, #12]
 8010e60:	8adb      	ldrh	r3, [r3, #22]
 8010e62:	68fa      	ldr	r2, [r7, #12]
 8010e64:	8b12      	ldrh	r2, [r2, #24]
 8010e66:	68f9      	ldr	r1, [r7, #12]
 8010e68:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8010e6a:	893d      	ldrh	r5, [r7, #8]
 8010e6c:	897c      	ldrh	r4, [r7, #10]
 8010e6e:	9103      	str	r1, [sp, #12]
 8010e70:	2110      	movs	r1, #16
 8010e72:	9102      	str	r1, [sp, #8]
 8010e74:	9201      	str	r2, [sp, #4]
 8010e76:	9300      	str	r3, [sp, #0]
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	462a      	mov	r2, r5
 8010e7c:	4621      	mov	r1, r4
 8010e7e:	f7ff ff67 	bl	8010d50 <tcp_output_alloc_header_common>
 8010e82:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8010e84:	697b      	ldr	r3, [r7, #20]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d006      	beq.n	8010e98 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8010e8a:	68fb      	ldr	r3, [r7, #12]
 8010e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e8e:	68fa      	ldr	r2, [r7, #12]
 8010e90:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8010e92:	441a      	add	r2, r3
 8010e94:	68fb      	ldr	r3, [r7, #12]
 8010e96:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8010e98:	697b      	ldr	r3, [r7, #20]
}
 8010e9a:	4618      	mov	r0, r3
 8010e9c:	3718      	adds	r7, #24
 8010e9e:	46bd      	mov	sp, r7
 8010ea0:	bdb0      	pop	{r4, r5, r7, pc}
 8010ea2:	bf00      	nop
 8010ea4:	08018e94 	.word	0x08018e94
 8010ea8:	0801959c 	.word	0x0801959c
 8010eac:	08018ee8 	.word	0x08018ee8

08010eb0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8010eb0:	b580      	push	{r7, lr}
 8010eb2:	b088      	sub	sp, #32
 8010eb4:	af00      	add	r7, sp, #0
 8010eb6:	60f8      	str	r0, [r7, #12]
 8010eb8:	60b9      	str	r1, [r7, #8]
 8010eba:	4611      	mov	r1, r2
 8010ebc:	461a      	mov	r2, r3
 8010ebe:	460b      	mov	r3, r1
 8010ec0:	71fb      	strb	r3, [r7, #7]
 8010ec2:	4613      	mov	r3, r2
 8010ec4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8010eca:	68bb      	ldr	r3, [r7, #8]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d106      	bne.n	8010ede <tcp_output_fill_options+0x2e>
 8010ed0:	4b13      	ldr	r3, [pc, #76]	; (8010f20 <tcp_output_fill_options+0x70>)
 8010ed2:	f240 7256 	movw	r2, #1878	; 0x756
 8010ed6:	4913      	ldr	r1, [pc, #76]	; (8010f24 <tcp_output_fill_options+0x74>)
 8010ed8:	4813      	ldr	r0, [pc, #76]	; (8010f28 <tcp_output_fill_options+0x78>)
 8010eda:	f005 fcb1 	bl	8016840 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8010ede:	68bb      	ldr	r3, [r7, #8]
 8010ee0:	685b      	ldr	r3, [r3, #4]
 8010ee2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8010ee4:	69bb      	ldr	r3, [r7, #24]
 8010ee6:	3314      	adds	r3, #20
 8010ee8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 8010eea:	69bb      	ldr	r3, [r7, #24]
 8010eec:	f103 0214 	add.w	r2, r3, #20
 8010ef0:	8bfb      	ldrh	r3, [r7, #30]
 8010ef2:	009b      	lsls	r3, r3, #2
 8010ef4:	4619      	mov	r1, r3
 8010ef6:	79fb      	ldrb	r3, [r7, #7]
 8010ef8:	009b      	lsls	r3, r3, #2
 8010efa:	f003 0304 	and.w	r3, r3, #4
 8010efe:	440b      	add	r3, r1
 8010f00:	4413      	add	r3, r2
 8010f02:	697a      	ldr	r2, [r7, #20]
 8010f04:	429a      	cmp	r2, r3
 8010f06:	d006      	beq.n	8010f16 <tcp_output_fill_options+0x66>
 8010f08:	4b05      	ldr	r3, [pc, #20]	; (8010f20 <tcp_output_fill_options+0x70>)
 8010f0a:	f240 7275 	movw	r2, #1909	; 0x775
 8010f0e:	4907      	ldr	r1, [pc, #28]	; (8010f2c <tcp_output_fill_options+0x7c>)
 8010f10:	4805      	ldr	r0, [pc, #20]	; (8010f28 <tcp_output_fill_options+0x78>)
 8010f12:	f005 fc95 	bl	8016840 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8010f16:	bf00      	nop
 8010f18:	3720      	adds	r7, #32
 8010f1a:	46bd      	mov	sp, r7
 8010f1c:	bd80      	pop	{r7, pc}
 8010f1e:	bf00      	nop
 8010f20:	08018e94 	.word	0x08018e94
 8010f24:	080195c4 	.word	0x080195c4
 8010f28:	08018ee8 	.word	0x08018ee8
 8010f2c:	080194bc 	.word	0x080194bc

08010f30 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b08a      	sub	sp, #40	; 0x28
 8010f34:	af04      	add	r7, sp, #16
 8010f36:	60f8      	str	r0, [r7, #12]
 8010f38:	60b9      	str	r1, [r7, #8]
 8010f3a:	607a      	str	r2, [r7, #4]
 8010f3c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8010f3e:	68bb      	ldr	r3, [r7, #8]
 8010f40:	2b00      	cmp	r3, #0
 8010f42:	d106      	bne.n	8010f52 <tcp_output_control_segment+0x22>
 8010f44:	4b1c      	ldr	r3, [pc, #112]	; (8010fb8 <tcp_output_control_segment+0x88>)
 8010f46:	f240 7287 	movw	r2, #1927	; 0x787
 8010f4a:	491c      	ldr	r1, [pc, #112]	; (8010fbc <tcp_output_control_segment+0x8c>)
 8010f4c:	481c      	ldr	r0, [pc, #112]	; (8010fc0 <tcp_output_control_segment+0x90>)
 8010f4e:	f005 fc77 	bl	8016840 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8010f52:	683a      	ldr	r2, [r7, #0]
 8010f54:	6879      	ldr	r1, [r7, #4]
 8010f56:	68f8      	ldr	r0, [r7, #12]
 8010f58:	f7fe ff40 	bl	800fddc <tcp_route>
 8010f5c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8010f5e:	693b      	ldr	r3, [r7, #16]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d102      	bne.n	8010f6a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8010f64:	23fc      	movs	r3, #252	; 0xfc
 8010f66:	75fb      	strb	r3, [r7, #23]
 8010f68:	e01c      	b.n	8010fa4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8010f6a:	68fb      	ldr	r3, [r7, #12]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d006      	beq.n	8010f7e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	7adb      	ldrb	r3, [r3, #11]
 8010f74:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8010f76:	68fb      	ldr	r3, [r7, #12]
 8010f78:	7a9b      	ldrb	r3, [r3, #10]
 8010f7a:	757b      	strb	r3, [r7, #21]
 8010f7c:	e003      	b.n	8010f86 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8010f7e:	23ff      	movs	r3, #255	; 0xff
 8010f80:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8010f82:	2300      	movs	r3, #0
 8010f84:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8010f86:	7dba      	ldrb	r2, [r7, #22]
 8010f88:	693b      	ldr	r3, [r7, #16]
 8010f8a:	9302      	str	r3, [sp, #8]
 8010f8c:	2306      	movs	r3, #6
 8010f8e:	9301      	str	r3, [sp, #4]
 8010f90:	7d7b      	ldrb	r3, [r7, #21]
 8010f92:	9300      	str	r3, [sp, #0]
 8010f94:	4613      	mov	r3, r2
 8010f96:	683a      	ldr	r2, [r7, #0]
 8010f98:	6879      	ldr	r1, [r7, #4]
 8010f9a:	68b8      	ldr	r0, [r7, #8]
 8010f9c:	f004 f958 	bl	8015250 <ip4_output_if>
 8010fa0:	4603      	mov	r3, r0
 8010fa2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8010fa4:	68b8      	ldr	r0, [r7, #8]
 8010fa6:	f7fa fdc9 	bl	800bb3c <pbuf_free>
  return err;
 8010faa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010fae:	4618      	mov	r0, r3
 8010fb0:	3718      	adds	r7, #24
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	bd80      	pop	{r7, pc}
 8010fb6:	bf00      	nop
 8010fb8:	08018e94 	.word	0x08018e94
 8010fbc:	080195ec 	.word	0x080195ec
 8010fc0:	08018ee8 	.word	0x08018ee8

08010fc4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8010fc4:	b590      	push	{r4, r7, lr}
 8010fc6:	b08b      	sub	sp, #44	; 0x2c
 8010fc8:	af04      	add	r7, sp, #16
 8010fca:	60f8      	str	r0, [r7, #12]
 8010fcc:	60b9      	str	r1, [r7, #8]
 8010fce:	607a      	str	r2, [r7, #4]
 8010fd0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8010fd2:	683b      	ldr	r3, [r7, #0]
 8010fd4:	2b00      	cmp	r3, #0
 8010fd6:	d106      	bne.n	8010fe6 <tcp_rst+0x22>
 8010fd8:	4b1f      	ldr	r3, [pc, #124]	; (8011058 <tcp_rst+0x94>)
 8010fda:	f240 72c4 	movw	r2, #1988	; 0x7c4
 8010fde:	491f      	ldr	r1, [pc, #124]	; (801105c <tcp_rst+0x98>)
 8010fe0:	481f      	ldr	r0, [pc, #124]	; (8011060 <tcp_rst+0x9c>)
 8010fe2:	f005 fc2d 	bl	8016840 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8010fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010fe8:	2b00      	cmp	r3, #0
 8010fea:	d106      	bne.n	8010ffa <tcp_rst+0x36>
 8010fec:	4b1a      	ldr	r3, [pc, #104]	; (8011058 <tcp_rst+0x94>)
 8010fee:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8010ff2:	491c      	ldr	r1, [pc, #112]	; (8011064 <tcp_rst+0xa0>)
 8010ff4:	481a      	ldr	r0, [pc, #104]	; (8011060 <tcp_rst+0x9c>)
 8010ff6:	f005 fc23 	bl	8016840 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8010ffa:	2300      	movs	r3, #0
 8010ffc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8010ffe:	f246 0308 	movw	r3, #24584	; 0x6008
 8011002:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8011004:	7dfb      	ldrb	r3, [r7, #23]
 8011006:	b29c      	uxth	r4, r3
 8011008:	68b8      	ldr	r0, [r7, #8]
 801100a:	f7f9 f9ae 	bl	800a36a <lwip_htonl>
 801100e:	4602      	mov	r2, r0
 8011010:	8abb      	ldrh	r3, [r7, #20]
 8011012:	9303      	str	r3, [sp, #12]
 8011014:	2314      	movs	r3, #20
 8011016:	9302      	str	r3, [sp, #8]
 8011018:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801101a:	9301      	str	r3, [sp, #4]
 801101c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801101e:	9300      	str	r3, [sp, #0]
 8011020:	4613      	mov	r3, r2
 8011022:	2200      	movs	r2, #0
 8011024:	4621      	mov	r1, r4
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	f7ff fe92 	bl	8010d50 <tcp_output_alloc_header_common>
 801102c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801102e:	693b      	ldr	r3, [r7, #16]
 8011030:	2b00      	cmp	r3, #0
 8011032:	d00c      	beq.n	801104e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011034:	7dfb      	ldrb	r3, [r7, #23]
 8011036:	2200      	movs	r2, #0
 8011038:	6939      	ldr	r1, [r7, #16]
 801103a:	68f8      	ldr	r0, [r7, #12]
 801103c:	f7ff ff38 	bl	8010eb0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8011040:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011042:	683a      	ldr	r2, [r7, #0]
 8011044:	6939      	ldr	r1, [r7, #16]
 8011046:	68f8      	ldr	r0, [r7, #12]
 8011048:	f7ff ff72 	bl	8010f30 <tcp_output_control_segment>
 801104c:	e000      	b.n	8011050 <tcp_rst+0x8c>
    return;
 801104e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011050:	371c      	adds	r7, #28
 8011052:	46bd      	mov	sp, r7
 8011054:	bd90      	pop	{r4, r7, pc}
 8011056:	bf00      	nop
 8011058:	08018e94 	.word	0x08018e94
 801105c:	08019618 	.word	0x08019618
 8011060:	08018ee8 	.word	0x08018ee8
 8011064:	08019634 	.word	0x08019634

08011068 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8011068:	b590      	push	{r4, r7, lr}
 801106a:	b087      	sub	sp, #28
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8011070:	2300      	movs	r3, #0
 8011072:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8011074:	2300      	movs	r3, #0
 8011076:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8011078:	687b      	ldr	r3, [r7, #4]
 801107a:	2b00      	cmp	r3, #0
 801107c:	d106      	bne.n	801108c <tcp_send_empty_ack+0x24>
 801107e:	4b28      	ldr	r3, [pc, #160]	; (8011120 <tcp_send_empty_ack+0xb8>)
 8011080:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8011084:	4927      	ldr	r1, [pc, #156]	; (8011124 <tcp_send_empty_ack+0xbc>)
 8011086:	4828      	ldr	r0, [pc, #160]	; (8011128 <tcp_send_empty_ack+0xc0>)
 8011088:	f005 fbda 	bl	8016840 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801108c:	7dfb      	ldrb	r3, [r7, #23]
 801108e:	009b      	lsls	r3, r3, #2
 8011090:	b2db      	uxtb	r3, r3
 8011092:	f003 0304 	and.w	r3, r3, #4
 8011096:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8011098:	7d7b      	ldrb	r3, [r7, #21]
 801109a:	b29c      	uxth	r4, r3
 801109c:	687b      	ldr	r3, [r7, #4]
 801109e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80110a0:	4618      	mov	r0, r3
 80110a2:	f7f9 f962 	bl	800a36a <lwip_htonl>
 80110a6:	4603      	mov	r3, r0
 80110a8:	2200      	movs	r2, #0
 80110aa:	4621      	mov	r1, r4
 80110ac:	6878      	ldr	r0, [r7, #4]
 80110ae:	f7ff fec1 	bl	8010e34 <tcp_output_alloc_header>
 80110b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80110b4:	693b      	ldr	r3, [r7, #16]
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d109      	bne.n	80110ce <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	8b5b      	ldrh	r3, [r3, #26]
 80110be:	f043 0303 	orr.w	r3, r3, #3
 80110c2:	b29a      	uxth	r2, r3
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80110c8:	f06f 0301 	mvn.w	r3, #1
 80110cc:	e023      	b.n	8011116 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80110ce:	7dbb      	ldrb	r3, [r7, #22]
 80110d0:	7dfa      	ldrb	r2, [r7, #23]
 80110d2:	6939      	ldr	r1, [r7, #16]
 80110d4:	6878      	ldr	r0, [r7, #4]
 80110d6:	f7ff feeb 	bl	8010eb0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80110da:	687a      	ldr	r2, [r7, #4]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	3304      	adds	r3, #4
 80110e0:	6939      	ldr	r1, [r7, #16]
 80110e2:	6878      	ldr	r0, [r7, #4]
 80110e4:	f7ff ff24 	bl	8010f30 <tcp_output_control_segment>
 80110e8:	4603      	mov	r3, r0
 80110ea:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80110ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d007      	beq.n	8011104 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	8b5b      	ldrh	r3, [r3, #26]
 80110f8:	f043 0303 	orr.w	r3, r3, #3
 80110fc:	b29a      	uxth	r2, r3
 80110fe:	687b      	ldr	r3, [r7, #4]
 8011100:	835a      	strh	r2, [r3, #26]
 8011102:	e006      	b.n	8011112 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011104:	687b      	ldr	r3, [r7, #4]
 8011106:	8b5b      	ldrh	r3, [r3, #26]
 8011108:	f023 0303 	bic.w	r3, r3, #3
 801110c:	b29a      	uxth	r2, r3
 801110e:	687b      	ldr	r3, [r7, #4]
 8011110:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8011112:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011116:	4618      	mov	r0, r3
 8011118:	371c      	adds	r7, #28
 801111a:	46bd      	mov	sp, r7
 801111c:	bd90      	pop	{r4, r7, pc}
 801111e:	bf00      	nop
 8011120:	08018e94 	.word	0x08018e94
 8011124:	08019650 	.word	0x08019650
 8011128:	08018ee8 	.word	0x08018ee8

0801112c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801112c:	b590      	push	{r4, r7, lr}
 801112e:	b087      	sub	sp, #28
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011134:	2300      	movs	r3, #0
 8011136:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	2b00      	cmp	r3, #0
 801113c:	d106      	bne.n	801114c <tcp_keepalive+0x20>
 801113e:	4b18      	ldr	r3, [pc, #96]	; (80111a0 <tcp_keepalive+0x74>)
 8011140:	f640 0224 	movw	r2, #2084	; 0x824
 8011144:	4917      	ldr	r1, [pc, #92]	; (80111a4 <tcp_keepalive+0x78>)
 8011146:	4818      	ldr	r0, [pc, #96]	; (80111a8 <tcp_keepalive+0x7c>)
 8011148:	f005 fb7a 	bl	8016840 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801114c:	7dfb      	ldrb	r3, [r7, #23]
 801114e:	b29c      	uxth	r4, r3
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011154:	3b01      	subs	r3, #1
 8011156:	4618      	mov	r0, r3
 8011158:	f7f9 f907 	bl	800a36a <lwip_htonl>
 801115c:	4603      	mov	r3, r0
 801115e:	2200      	movs	r2, #0
 8011160:	4621      	mov	r1, r4
 8011162:	6878      	ldr	r0, [r7, #4]
 8011164:	f7ff fe66 	bl	8010e34 <tcp_output_alloc_header>
 8011168:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801116a:	693b      	ldr	r3, [r7, #16]
 801116c:	2b00      	cmp	r3, #0
 801116e:	d102      	bne.n	8011176 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011170:	f04f 33ff 	mov.w	r3, #4294967295
 8011174:	e010      	b.n	8011198 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8011176:	7dfb      	ldrb	r3, [r7, #23]
 8011178:	2200      	movs	r2, #0
 801117a:	6939      	ldr	r1, [r7, #16]
 801117c:	6878      	ldr	r0, [r7, #4]
 801117e:	f7ff fe97 	bl	8010eb0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8011182:	687a      	ldr	r2, [r7, #4]
 8011184:	687b      	ldr	r3, [r7, #4]
 8011186:	3304      	adds	r3, #4
 8011188:	6939      	ldr	r1, [r7, #16]
 801118a:	6878      	ldr	r0, [r7, #4]
 801118c:	f7ff fed0 	bl	8010f30 <tcp_output_control_segment>
 8011190:	4603      	mov	r3, r0
 8011192:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011194:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011198:	4618      	mov	r0, r3
 801119a:	371c      	adds	r7, #28
 801119c:	46bd      	mov	sp, r7
 801119e:	bd90      	pop	{r4, r7, pc}
 80111a0:	08018e94 	.word	0x08018e94
 80111a4:	08019670 	.word	0x08019670
 80111a8:	08018ee8 	.word	0x08018ee8

080111ac <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80111ac:	b590      	push	{r4, r7, lr}
 80111ae:	b08b      	sub	sp, #44	; 0x2c
 80111b0:	af00      	add	r7, sp, #0
 80111b2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80111b4:	2300      	movs	r3, #0
 80111b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d106      	bne.n	80111ce <tcp_zero_window_probe+0x22>
 80111c0:	4b4c      	ldr	r3, [pc, #304]	; (80112f4 <tcp_zero_window_probe+0x148>)
 80111c2:	f640 024f 	movw	r2, #2127	; 0x84f
 80111c6:	494c      	ldr	r1, [pc, #304]	; (80112f8 <tcp_zero_window_probe+0x14c>)
 80111c8:	484c      	ldr	r0, [pc, #304]	; (80112fc <tcp_zero_window_probe+0x150>)
 80111ca:	f005 fb39 	bl	8016840 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111d2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80111d4:	6a3b      	ldr	r3, [r7, #32]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d101      	bne.n	80111de <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80111da:	2300      	movs	r3, #0
 80111dc:	e086      	b.n	80112ec <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80111e4:	2bff      	cmp	r3, #255	; 0xff
 80111e6:	d007      	beq.n	80111f8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80111ee:	3301      	adds	r3, #1
 80111f0:	b2da      	uxtb	r2, r3
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80111f8:	6a3b      	ldr	r3, [r7, #32]
 80111fa:	68db      	ldr	r3, [r3, #12]
 80111fc:	899b      	ldrh	r3, [r3, #12]
 80111fe:	b29b      	uxth	r3, r3
 8011200:	4618      	mov	r0, r3
 8011202:	f7f9 f89d 	bl	800a340 <lwip_htons>
 8011206:	4603      	mov	r3, r0
 8011208:	b2db      	uxtb	r3, r3
 801120a:	f003 0301 	and.w	r3, r3, #1
 801120e:	2b00      	cmp	r3, #0
 8011210:	d005      	beq.n	801121e <tcp_zero_window_probe+0x72>
 8011212:	6a3b      	ldr	r3, [r7, #32]
 8011214:	891b      	ldrh	r3, [r3, #8]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d101      	bne.n	801121e <tcp_zero_window_probe+0x72>
 801121a:	2301      	movs	r3, #1
 801121c:	e000      	b.n	8011220 <tcp_zero_window_probe+0x74>
 801121e:	2300      	movs	r3, #0
 8011220:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011222:	7ffb      	ldrb	r3, [r7, #31]
 8011224:	2b00      	cmp	r3, #0
 8011226:	bf0c      	ite	eq
 8011228:	2301      	moveq	r3, #1
 801122a:	2300      	movne	r3, #0
 801122c:	b2db      	uxtb	r3, r3
 801122e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8011230:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011234:	b299      	uxth	r1, r3
 8011236:	6a3b      	ldr	r3, [r7, #32]
 8011238:	68db      	ldr	r3, [r3, #12]
 801123a:	685b      	ldr	r3, [r3, #4]
 801123c:	8bba      	ldrh	r2, [r7, #28]
 801123e:	6878      	ldr	r0, [r7, #4]
 8011240:	f7ff fdf8 	bl	8010e34 <tcp_output_alloc_header>
 8011244:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011246:	69bb      	ldr	r3, [r7, #24]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d102      	bne.n	8011252 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801124c:	f04f 33ff 	mov.w	r3, #4294967295
 8011250:	e04c      	b.n	80112ec <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011252:	69bb      	ldr	r3, [r7, #24]
 8011254:	685b      	ldr	r3, [r3, #4]
 8011256:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011258:	7ffb      	ldrb	r3, [r7, #31]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d011      	beq.n	8011282 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801125e:	697b      	ldr	r3, [r7, #20]
 8011260:	899b      	ldrh	r3, [r3, #12]
 8011262:	b29b      	uxth	r3, r3
 8011264:	b21b      	sxth	r3, r3
 8011266:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801126a:	b21c      	sxth	r4, r3
 801126c:	2011      	movs	r0, #17
 801126e:	f7f9 f867 	bl	800a340 <lwip_htons>
 8011272:	4603      	mov	r3, r0
 8011274:	b21b      	sxth	r3, r3
 8011276:	4323      	orrs	r3, r4
 8011278:	b21b      	sxth	r3, r3
 801127a:	b29a      	uxth	r2, r3
 801127c:	697b      	ldr	r3, [r7, #20]
 801127e:	819a      	strh	r2, [r3, #12]
 8011280:	e010      	b.n	80112a4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011282:	69bb      	ldr	r3, [r7, #24]
 8011284:	685b      	ldr	r3, [r3, #4]
 8011286:	3314      	adds	r3, #20
 8011288:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801128a:	6a3b      	ldr	r3, [r7, #32]
 801128c:	6858      	ldr	r0, [r3, #4]
 801128e:	6a3b      	ldr	r3, [r7, #32]
 8011290:	685b      	ldr	r3, [r3, #4]
 8011292:	891a      	ldrh	r2, [r3, #8]
 8011294:	6a3b      	ldr	r3, [r7, #32]
 8011296:	891b      	ldrh	r3, [r3, #8]
 8011298:	1ad3      	subs	r3, r2, r3
 801129a:	b29b      	uxth	r3, r3
 801129c:	2201      	movs	r2, #1
 801129e:	6939      	ldr	r1, [r7, #16]
 80112a0:	f7fa fe52 	bl	800bf48 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80112a4:	6a3b      	ldr	r3, [r7, #32]
 80112a6:	68db      	ldr	r3, [r3, #12]
 80112a8:	685b      	ldr	r3, [r3, #4]
 80112aa:	4618      	mov	r0, r3
 80112ac:	f7f9 f85d 	bl	800a36a <lwip_htonl>
 80112b0:	4603      	mov	r3, r0
 80112b2:	3301      	adds	r3, #1
 80112b4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80112ba:	68fb      	ldr	r3, [r7, #12]
 80112bc:	1ad3      	subs	r3, r2, r3
 80112be:	2b00      	cmp	r3, #0
 80112c0:	da02      	bge.n	80112c8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	68fa      	ldr	r2, [r7, #12]
 80112c6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80112c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80112cc:	2200      	movs	r2, #0
 80112ce:	69b9      	ldr	r1, [r7, #24]
 80112d0:	6878      	ldr	r0, [r7, #4]
 80112d2:	f7ff fded 	bl	8010eb0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80112d6:	687a      	ldr	r2, [r7, #4]
 80112d8:	687b      	ldr	r3, [r7, #4]
 80112da:	3304      	adds	r3, #4
 80112dc:	69b9      	ldr	r1, [r7, #24]
 80112de:	6878      	ldr	r0, [r7, #4]
 80112e0:	f7ff fe26 	bl	8010f30 <tcp_output_control_segment>
 80112e4:	4603      	mov	r3, r0
 80112e6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80112e8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80112ec:	4618      	mov	r0, r3
 80112ee:	372c      	adds	r7, #44	; 0x2c
 80112f0:	46bd      	mov	sp, r7
 80112f2:	bd90      	pop	{r4, r7, pc}
 80112f4:	08018e94 	.word	0x08018e94
 80112f8:	0801968c 	.word	0x0801968c
 80112fc:	08018ee8 	.word	0x08018ee8

08011300 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b082      	sub	sp, #8
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011308:	f7fa ff0c 	bl	800c124 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801130c:	4b0a      	ldr	r3, [pc, #40]	; (8011338 <tcpip_tcp_timer+0x38>)
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	2b00      	cmp	r3, #0
 8011312:	d103      	bne.n	801131c <tcpip_tcp_timer+0x1c>
 8011314:	4b09      	ldr	r3, [pc, #36]	; (801133c <tcpip_tcp_timer+0x3c>)
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	2b00      	cmp	r3, #0
 801131a:	d005      	beq.n	8011328 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801131c:	2200      	movs	r2, #0
 801131e:	4908      	ldr	r1, [pc, #32]	; (8011340 <tcpip_tcp_timer+0x40>)
 8011320:	20fa      	movs	r0, #250	; 0xfa
 8011322:	f000 f8f3 	bl	801150c <sys_timeout>
 8011326:	e003      	b.n	8011330 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011328:	4b06      	ldr	r3, [pc, #24]	; (8011344 <tcpip_tcp_timer+0x44>)
 801132a:	2200      	movs	r2, #0
 801132c:	601a      	str	r2, [r3, #0]
  }
}
 801132e:	bf00      	nop
 8011330:	bf00      	nop
 8011332:	3708      	adds	r7, #8
 8011334:	46bd      	mov	sp, r7
 8011336:	bd80      	pop	{r7, pc}
 8011338:	2000f210 	.word	0x2000f210
 801133c:	2000f214 	.word	0x2000f214
 8011340:	08011301 	.word	0x08011301
 8011344:	2000f25c 	.word	0x2000f25c

08011348 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011348:	b580      	push	{r7, lr}
 801134a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801134c:	4b0a      	ldr	r3, [pc, #40]	; (8011378 <tcp_timer_needed+0x30>)
 801134e:	681b      	ldr	r3, [r3, #0]
 8011350:	2b00      	cmp	r3, #0
 8011352:	d10f      	bne.n	8011374 <tcp_timer_needed+0x2c>
 8011354:	4b09      	ldr	r3, [pc, #36]	; (801137c <tcp_timer_needed+0x34>)
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	2b00      	cmp	r3, #0
 801135a:	d103      	bne.n	8011364 <tcp_timer_needed+0x1c>
 801135c:	4b08      	ldr	r3, [pc, #32]	; (8011380 <tcp_timer_needed+0x38>)
 801135e:	681b      	ldr	r3, [r3, #0]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d007      	beq.n	8011374 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011364:	4b04      	ldr	r3, [pc, #16]	; (8011378 <tcp_timer_needed+0x30>)
 8011366:	2201      	movs	r2, #1
 8011368:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801136a:	2200      	movs	r2, #0
 801136c:	4905      	ldr	r1, [pc, #20]	; (8011384 <tcp_timer_needed+0x3c>)
 801136e:	20fa      	movs	r0, #250	; 0xfa
 8011370:	f000 f8cc 	bl	801150c <sys_timeout>
  }
}
 8011374:	bf00      	nop
 8011376:	bd80      	pop	{r7, pc}
 8011378:	2000f25c 	.word	0x2000f25c
 801137c:	2000f210 	.word	0x2000f210
 8011380:	2000f214 	.word	0x2000f214
 8011384:	08011301 	.word	0x08011301

08011388 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8011388:	b580      	push	{r7, lr}
 801138a:	b086      	sub	sp, #24
 801138c:	af00      	add	r7, sp, #0
 801138e:	60f8      	str	r0, [r7, #12]
 8011390:	60b9      	str	r1, [r7, #8]
 8011392:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011394:	200a      	movs	r0, #10
 8011396:	f7f9 fcab 	bl	800acf0 <memp_malloc>
 801139a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801139c:	693b      	ldr	r3, [r7, #16]
 801139e:	2b00      	cmp	r3, #0
 80113a0:	d109      	bne.n	80113b6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80113a2:	693b      	ldr	r3, [r7, #16]
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d151      	bne.n	801144c <sys_timeout_abs+0xc4>
 80113a8:	4b2a      	ldr	r3, [pc, #168]	; (8011454 <sys_timeout_abs+0xcc>)
 80113aa:	22be      	movs	r2, #190	; 0xbe
 80113ac:	492a      	ldr	r1, [pc, #168]	; (8011458 <sys_timeout_abs+0xd0>)
 80113ae:	482b      	ldr	r0, [pc, #172]	; (801145c <sys_timeout_abs+0xd4>)
 80113b0:	f005 fa46 	bl	8016840 <iprintf>
    return;
 80113b4:	e04a      	b.n	801144c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80113b6:	693b      	ldr	r3, [r7, #16]
 80113b8:	2200      	movs	r2, #0
 80113ba:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80113bc:	693b      	ldr	r3, [r7, #16]
 80113be:	68ba      	ldr	r2, [r7, #8]
 80113c0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	687a      	ldr	r2, [r7, #4]
 80113c6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80113c8:	693b      	ldr	r3, [r7, #16]
 80113ca:	68fa      	ldr	r2, [r7, #12]
 80113cc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80113ce:	4b24      	ldr	r3, [pc, #144]	; (8011460 <sys_timeout_abs+0xd8>)
 80113d0:	681b      	ldr	r3, [r3, #0]
 80113d2:	2b00      	cmp	r3, #0
 80113d4:	d103      	bne.n	80113de <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80113d6:	4a22      	ldr	r2, [pc, #136]	; (8011460 <sys_timeout_abs+0xd8>)
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	6013      	str	r3, [r2, #0]
    return;
 80113dc:	e037      	b.n	801144e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80113de:	693b      	ldr	r3, [r7, #16]
 80113e0:	685a      	ldr	r2, [r3, #4]
 80113e2:	4b1f      	ldr	r3, [pc, #124]	; (8011460 <sys_timeout_abs+0xd8>)
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	685b      	ldr	r3, [r3, #4]
 80113e8:	1ad3      	subs	r3, r2, r3
 80113ea:	0fdb      	lsrs	r3, r3, #31
 80113ec:	f003 0301 	and.w	r3, r3, #1
 80113f0:	b2db      	uxtb	r3, r3
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d007      	beq.n	8011406 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80113f6:	4b1a      	ldr	r3, [pc, #104]	; (8011460 <sys_timeout_abs+0xd8>)
 80113f8:	681a      	ldr	r2, [r3, #0]
 80113fa:	693b      	ldr	r3, [r7, #16]
 80113fc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80113fe:	4a18      	ldr	r2, [pc, #96]	; (8011460 <sys_timeout_abs+0xd8>)
 8011400:	693b      	ldr	r3, [r7, #16]
 8011402:	6013      	str	r3, [r2, #0]
 8011404:	e023      	b.n	801144e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8011406:	4b16      	ldr	r3, [pc, #88]	; (8011460 <sys_timeout_abs+0xd8>)
 8011408:	681b      	ldr	r3, [r3, #0]
 801140a:	617b      	str	r3, [r7, #20]
 801140c:	e01a      	b.n	8011444 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801140e:	697b      	ldr	r3, [r7, #20]
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	2b00      	cmp	r3, #0
 8011414:	d00b      	beq.n	801142e <sys_timeout_abs+0xa6>
 8011416:	693b      	ldr	r3, [r7, #16]
 8011418:	685a      	ldr	r2, [r3, #4]
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	681b      	ldr	r3, [r3, #0]
 801141e:	685b      	ldr	r3, [r3, #4]
 8011420:	1ad3      	subs	r3, r2, r3
 8011422:	0fdb      	lsrs	r3, r3, #31
 8011424:	f003 0301 	and.w	r3, r3, #1
 8011428:	b2db      	uxtb	r3, r3
 801142a:	2b00      	cmp	r3, #0
 801142c:	d007      	beq.n	801143e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801142e:	697b      	ldr	r3, [r7, #20]
 8011430:	681a      	ldr	r2, [r3, #0]
 8011432:	693b      	ldr	r3, [r7, #16]
 8011434:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8011436:	697b      	ldr	r3, [r7, #20]
 8011438:	693a      	ldr	r2, [r7, #16]
 801143a:	601a      	str	r2, [r3, #0]
        break;
 801143c:	e007      	b.n	801144e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801143e:	697b      	ldr	r3, [r7, #20]
 8011440:	681b      	ldr	r3, [r3, #0]
 8011442:	617b      	str	r3, [r7, #20]
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	2b00      	cmp	r3, #0
 8011448:	d1e1      	bne.n	801140e <sys_timeout_abs+0x86>
 801144a:	e000      	b.n	801144e <sys_timeout_abs+0xc6>
    return;
 801144c:	bf00      	nop
      }
    }
  }
}
 801144e:	3718      	adds	r7, #24
 8011450:	46bd      	mov	sp, r7
 8011452:	bd80      	pop	{r7, pc}
 8011454:	080196b0 	.word	0x080196b0
 8011458:	080196e4 	.word	0x080196e4
 801145c:	08019724 	.word	0x08019724
 8011460:	2000f254 	.word	0x2000f254

08011464 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8011464:	b580      	push	{r7, lr}
 8011466:	b086      	sub	sp, #24
 8011468:	af00      	add	r7, sp, #0
 801146a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011470:	697b      	ldr	r3, [r7, #20]
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	4798      	blx	r3

  now = sys_now();
 8011476:	f7f4 fc47 	bl	8005d08 <sys_now>
 801147a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801147c:	697b      	ldr	r3, [r7, #20]
 801147e:	681a      	ldr	r2, [r3, #0]
 8011480:	4b0f      	ldr	r3, [pc, #60]	; (80114c0 <lwip_cyclic_timer+0x5c>)
 8011482:	681b      	ldr	r3, [r3, #0]
 8011484:	4413      	add	r3, r2
 8011486:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8011488:	68fa      	ldr	r2, [r7, #12]
 801148a:	693b      	ldr	r3, [r7, #16]
 801148c:	1ad3      	subs	r3, r2, r3
 801148e:	0fdb      	lsrs	r3, r3, #31
 8011490:	f003 0301 	and.w	r3, r3, #1
 8011494:	b2db      	uxtb	r3, r3
 8011496:	2b00      	cmp	r3, #0
 8011498:	d009      	beq.n	80114ae <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801149a:	697b      	ldr	r3, [r7, #20]
 801149c:	681a      	ldr	r2, [r3, #0]
 801149e:	693b      	ldr	r3, [r7, #16]
 80114a0:	4413      	add	r3, r2
 80114a2:	687a      	ldr	r2, [r7, #4]
 80114a4:	4907      	ldr	r1, [pc, #28]	; (80114c4 <lwip_cyclic_timer+0x60>)
 80114a6:	4618      	mov	r0, r3
 80114a8:	f7ff ff6e 	bl	8011388 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80114ac:	e004      	b.n	80114b8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80114ae:	687a      	ldr	r2, [r7, #4]
 80114b0:	4904      	ldr	r1, [pc, #16]	; (80114c4 <lwip_cyclic_timer+0x60>)
 80114b2:	68f8      	ldr	r0, [r7, #12]
 80114b4:	f7ff ff68 	bl	8011388 <sys_timeout_abs>
}
 80114b8:	bf00      	nop
 80114ba:	3718      	adds	r7, #24
 80114bc:	46bd      	mov	sp, r7
 80114be:	bd80      	pop	{r7, pc}
 80114c0:	2000f258 	.word	0x2000f258
 80114c4:	08011465 	.word	0x08011465

080114c8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80114c8:	b580      	push	{r7, lr}
 80114ca:	b082      	sub	sp, #8
 80114cc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80114ce:	2301      	movs	r3, #1
 80114d0:	607b      	str	r3, [r7, #4]
 80114d2:	e00e      	b.n	80114f2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 80114d4:	4a0b      	ldr	r2, [pc, #44]	; (8011504 <sys_timeouts_init+0x3c>)
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 80114dc:	687b      	ldr	r3, [r7, #4]
 80114de:	00db      	lsls	r3, r3, #3
 80114e0:	4a08      	ldr	r2, [pc, #32]	; (8011504 <sys_timeouts_init+0x3c>)
 80114e2:	4413      	add	r3, r2
 80114e4:	461a      	mov	r2, r3
 80114e6:	4908      	ldr	r1, [pc, #32]	; (8011508 <sys_timeouts_init+0x40>)
 80114e8:	f000 f810 	bl	801150c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	3301      	adds	r3, #1
 80114f0:	607b      	str	r3, [r7, #4]
 80114f2:	687b      	ldr	r3, [r7, #4]
 80114f4:	2b04      	cmp	r3, #4
 80114f6:	d9ed      	bls.n	80114d4 <sys_timeouts_init+0xc>
  }
}
 80114f8:	bf00      	nop
 80114fa:	bf00      	nop
 80114fc:	3708      	adds	r7, #8
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}
 8011502:	bf00      	nop
 8011504:	0801a6a0 	.word	0x0801a6a0
 8011508:	08011465 	.word	0x08011465

0801150c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b086      	sub	sp, #24
 8011510:	af00      	add	r7, sp, #0
 8011512:	60f8      	str	r0, [r7, #12]
 8011514:	60b9      	str	r1, [r7, #8]
 8011516:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801151e:	d306      	bcc.n	801152e <sys_timeout+0x22>
 8011520:	4b0a      	ldr	r3, [pc, #40]	; (801154c <sys_timeout+0x40>)
 8011522:	f240 1229 	movw	r2, #297	; 0x129
 8011526:	490a      	ldr	r1, [pc, #40]	; (8011550 <sys_timeout+0x44>)
 8011528:	480a      	ldr	r0, [pc, #40]	; (8011554 <sys_timeout+0x48>)
 801152a:	f005 f989 	bl	8016840 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801152e:	f7f4 fbeb 	bl	8005d08 <sys_now>
 8011532:	4602      	mov	r2, r0
 8011534:	68fb      	ldr	r3, [r7, #12]
 8011536:	4413      	add	r3, r2
 8011538:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801153a:	687a      	ldr	r2, [r7, #4]
 801153c:	68b9      	ldr	r1, [r7, #8]
 801153e:	6978      	ldr	r0, [r7, #20]
 8011540:	f7ff ff22 	bl	8011388 <sys_timeout_abs>
#endif
}
 8011544:	bf00      	nop
 8011546:	3718      	adds	r7, #24
 8011548:	46bd      	mov	sp, r7
 801154a:	bd80      	pop	{r7, pc}
 801154c:	080196b0 	.word	0x080196b0
 8011550:	0801974c 	.word	0x0801974c
 8011554:	08019724 	.word	0x08019724

08011558 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b084      	sub	sp, #16
 801155c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801155e:	f7f4 fbd3 	bl	8005d08 <sys_now>
 8011562:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8011564:	4b17      	ldr	r3, [pc, #92]	; (80115c4 <sys_check_timeouts+0x6c>)
 8011566:	681b      	ldr	r3, [r3, #0]
 8011568:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	2b00      	cmp	r3, #0
 801156e:	d022      	beq.n	80115b6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8011570:	68bb      	ldr	r3, [r7, #8]
 8011572:	685b      	ldr	r3, [r3, #4]
 8011574:	68fa      	ldr	r2, [r7, #12]
 8011576:	1ad3      	subs	r3, r2, r3
 8011578:	0fdb      	lsrs	r3, r3, #31
 801157a:	f003 0301 	and.w	r3, r3, #1
 801157e:	b2db      	uxtb	r3, r3
 8011580:	2b00      	cmp	r3, #0
 8011582:	d11a      	bne.n	80115ba <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8011584:	68bb      	ldr	r3, [r7, #8]
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	4a0e      	ldr	r2, [pc, #56]	; (80115c4 <sys_check_timeouts+0x6c>)
 801158a:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	689b      	ldr	r3, [r3, #8]
 8011590:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8011592:	68bb      	ldr	r3, [r7, #8]
 8011594:	68db      	ldr	r3, [r3, #12]
 8011596:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8011598:	68bb      	ldr	r3, [r7, #8]
 801159a:	685b      	ldr	r3, [r3, #4]
 801159c:	4a0a      	ldr	r2, [pc, #40]	; (80115c8 <sys_check_timeouts+0x70>)
 801159e:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 80115a0:	68b9      	ldr	r1, [r7, #8]
 80115a2:	200a      	movs	r0, #10
 80115a4:	f7f9 fc1a 	bl	800addc <memp_free>
    if (handler != NULL) {
 80115a8:	687b      	ldr	r3, [r7, #4]
 80115aa:	2b00      	cmp	r3, #0
 80115ac:	d0da      	beq.n	8011564 <sys_check_timeouts+0xc>
      handler(arg);
 80115ae:	687b      	ldr	r3, [r7, #4]
 80115b0:	6838      	ldr	r0, [r7, #0]
 80115b2:	4798      	blx	r3
  do {
 80115b4:	e7d6      	b.n	8011564 <sys_check_timeouts+0xc>
      return;
 80115b6:	bf00      	nop
 80115b8:	e000      	b.n	80115bc <sys_check_timeouts+0x64>
      return;
 80115ba:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 80115bc:	3710      	adds	r7, #16
 80115be:	46bd      	mov	sp, r7
 80115c0:	bd80      	pop	{r7, pc}
 80115c2:	bf00      	nop
 80115c4:	2000f254 	.word	0x2000f254
 80115c8:	2000f258 	.word	0x2000f258

080115cc <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 80115cc:	b580      	push	{r7, lr}
 80115ce:	b082      	sub	sp, #8
 80115d0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 80115d2:	4b16      	ldr	r3, [pc, #88]	; (801162c <sys_timeouts_sleeptime+0x60>)
 80115d4:	681b      	ldr	r3, [r3, #0]
 80115d6:	2b00      	cmp	r3, #0
 80115d8:	d102      	bne.n	80115e0 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 80115da:	f04f 33ff 	mov.w	r3, #4294967295
 80115de:	e020      	b.n	8011622 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 80115e0:	f7f4 fb92 	bl	8005d08 <sys_now>
 80115e4:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 80115e6:	4b11      	ldr	r3, [pc, #68]	; (801162c <sys_timeouts_sleeptime+0x60>)
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	685a      	ldr	r2, [r3, #4]
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	1ad3      	subs	r3, r2, r3
 80115f0:	0fdb      	lsrs	r3, r3, #31
 80115f2:	f003 0301 	and.w	r3, r3, #1
 80115f6:	b2db      	uxtb	r3, r3
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d001      	beq.n	8011600 <sys_timeouts_sleeptime+0x34>
    return 0;
 80115fc:	2300      	movs	r3, #0
 80115fe:	e010      	b.n	8011622 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8011600:	4b0a      	ldr	r3, [pc, #40]	; (801162c <sys_timeouts_sleeptime+0x60>)
 8011602:	681b      	ldr	r3, [r3, #0]
 8011604:	685a      	ldr	r2, [r3, #4]
 8011606:	687b      	ldr	r3, [r7, #4]
 8011608:	1ad3      	subs	r3, r2, r3
 801160a:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801160c:	683b      	ldr	r3, [r7, #0]
 801160e:	2b00      	cmp	r3, #0
 8011610:	da06      	bge.n	8011620 <sys_timeouts_sleeptime+0x54>
 8011612:	4b07      	ldr	r3, [pc, #28]	; (8011630 <sys_timeouts_sleeptime+0x64>)
 8011614:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8011618:	4906      	ldr	r1, [pc, #24]	; (8011634 <sys_timeouts_sleeptime+0x68>)
 801161a:	4807      	ldr	r0, [pc, #28]	; (8011638 <sys_timeouts_sleeptime+0x6c>)
 801161c:	f005 f910 	bl	8016840 <iprintf>
    return ret;
 8011620:	683b      	ldr	r3, [r7, #0]
  }
}
 8011622:	4618      	mov	r0, r3
 8011624:	3708      	adds	r7, #8
 8011626:	46bd      	mov	sp, r7
 8011628:	bd80      	pop	{r7, pc}
 801162a:	bf00      	nop
 801162c:	2000f254 	.word	0x2000f254
 8011630:	080196b0 	.word	0x080196b0
 8011634:	08019784 	.word	0x08019784
 8011638:	08019724 	.word	0x08019724

0801163c <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801163c:	b580      	push	{r7, lr}
 801163e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011640:	f005 f916 	bl	8016870 <rand>
 8011644:	4603      	mov	r3, r0
 8011646:	b29b      	uxth	r3, r3
 8011648:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801164c:	b29b      	uxth	r3, r3
 801164e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011652:	b29a      	uxth	r2, r3
 8011654:	4b01      	ldr	r3, [pc, #4]	; (801165c <udp_init+0x20>)
 8011656:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011658:	bf00      	nop
 801165a:	bd80      	pop	{r7, pc}
 801165c:	2000002c 	.word	0x2000002c

08011660 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8011660:	b480      	push	{r7}
 8011662:	b083      	sub	sp, #12
 8011664:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8011666:	2300      	movs	r3, #0
 8011668:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801166a:	4b17      	ldr	r3, [pc, #92]	; (80116c8 <udp_new_port+0x68>)
 801166c:	881b      	ldrh	r3, [r3, #0]
 801166e:	1c5a      	adds	r2, r3, #1
 8011670:	b291      	uxth	r1, r2
 8011672:	4a15      	ldr	r2, [pc, #84]	; (80116c8 <udp_new_port+0x68>)
 8011674:	8011      	strh	r1, [r2, #0]
 8011676:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801167a:	4293      	cmp	r3, r2
 801167c:	d103      	bne.n	8011686 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801167e:	4b12      	ldr	r3, [pc, #72]	; (80116c8 <udp_new_port+0x68>)
 8011680:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8011684:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011686:	4b11      	ldr	r3, [pc, #68]	; (80116cc <udp_new_port+0x6c>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	603b      	str	r3, [r7, #0]
 801168c:	e011      	b.n	80116b2 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801168e:	683b      	ldr	r3, [r7, #0]
 8011690:	8a5a      	ldrh	r2, [r3, #18]
 8011692:	4b0d      	ldr	r3, [pc, #52]	; (80116c8 <udp_new_port+0x68>)
 8011694:	881b      	ldrh	r3, [r3, #0]
 8011696:	429a      	cmp	r2, r3
 8011698:	d108      	bne.n	80116ac <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801169a:	88fb      	ldrh	r3, [r7, #6]
 801169c:	3301      	adds	r3, #1
 801169e:	80fb      	strh	r3, [r7, #6]
 80116a0:	88fb      	ldrh	r3, [r7, #6]
 80116a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80116a6:	d3e0      	bcc.n	801166a <udp_new_port+0xa>
        return 0;
 80116a8:	2300      	movs	r3, #0
 80116aa:	e007      	b.n	80116bc <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80116ac:	683b      	ldr	r3, [r7, #0]
 80116ae:	68db      	ldr	r3, [r3, #12]
 80116b0:	603b      	str	r3, [r7, #0]
 80116b2:	683b      	ldr	r3, [r7, #0]
 80116b4:	2b00      	cmp	r3, #0
 80116b6:	d1ea      	bne.n	801168e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 80116b8:	4b03      	ldr	r3, [pc, #12]	; (80116c8 <udp_new_port+0x68>)
 80116ba:	881b      	ldrh	r3, [r3, #0]
}
 80116bc:	4618      	mov	r0, r3
 80116be:	370c      	adds	r7, #12
 80116c0:	46bd      	mov	sp, r7
 80116c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c6:	4770      	bx	lr
 80116c8:	2000002c 	.word	0x2000002c
 80116cc:	2000f260 	.word	0x2000f260

080116d0 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80116d0:	b580      	push	{r7, lr}
 80116d2:	b084      	sub	sp, #16
 80116d4:	af00      	add	r7, sp, #0
 80116d6:	60f8      	str	r0, [r7, #12]
 80116d8:	60b9      	str	r1, [r7, #8]
 80116da:	4613      	mov	r3, r2
 80116dc:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80116de:	68fb      	ldr	r3, [r7, #12]
 80116e0:	2b00      	cmp	r3, #0
 80116e2:	d105      	bne.n	80116f0 <udp_input_local_match+0x20>
 80116e4:	4b27      	ldr	r3, [pc, #156]	; (8011784 <udp_input_local_match+0xb4>)
 80116e6:	2287      	movs	r2, #135	; 0x87
 80116e8:	4927      	ldr	r1, [pc, #156]	; (8011788 <udp_input_local_match+0xb8>)
 80116ea:	4828      	ldr	r0, [pc, #160]	; (801178c <udp_input_local_match+0xbc>)
 80116ec:	f005 f8a8 	bl	8016840 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d105      	bne.n	8011702 <udp_input_local_match+0x32>
 80116f6:	4b23      	ldr	r3, [pc, #140]	; (8011784 <udp_input_local_match+0xb4>)
 80116f8:	2288      	movs	r2, #136	; 0x88
 80116fa:	4925      	ldr	r1, [pc, #148]	; (8011790 <udp_input_local_match+0xc0>)
 80116fc:	4823      	ldr	r0, [pc, #140]	; (801178c <udp_input_local_match+0xbc>)
 80116fe:	f005 f89f 	bl	8016840 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011702:	68fb      	ldr	r3, [r7, #12]
 8011704:	7a1b      	ldrb	r3, [r3, #8]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d00b      	beq.n	8011722 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	7a1a      	ldrb	r2, [r3, #8]
 801170e:	4b21      	ldr	r3, [pc, #132]	; (8011794 <udp_input_local_match+0xc4>)
 8011710:	685b      	ldr	r3, [r3, #4]
 8011712:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8011716:	3301      	adds	r3, #1
 8011718:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801171a:	429a      	cmp	r2, r3
 801171c:	d001      	beq.n	8011722 <udp_input_local_match+0x52>
    return 0;
 801171e:	2300      	movs	r3, #0
 8011720:	e02b      	b.n	801177a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8011722:	79fb      	ldrb	r3, [r7, #7]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d018      	beq.n	801175a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011728:	68fb      	ldr	r3, [r7, #12]
 801172a:	2b00      	cmp	r3, #0
 801172c:	d013      	beq.n	8011756 <udp_input_local_match+0x86>
 801172e:	68fb      	ldr	r3, [r7, #12]
 8011730:	681b      	ldr	r3, [r3, #0]
 8011732:	2b00      	cmp	r3, #0
 8011734:	d00f      	beq.n	8011756 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011736:	4b17      	ldr	r3, [pc, #92]	; (8011794 <udp_input_local_match+0xc4>)
 8011738:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801173a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801173e:	d00a      	beq.n	8011756 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	681a      	ldr	r2, [r3, #0]
 8011744:	4b13      	ldr	r3, [pc, #76]	; (8011794 <udp_input_local_match+0xc4>)
 8011746:	695b      	ldr	r3, [r3, #20]
 8011748:	405a      	eors	r2, r3
 801174a:	68bb      	ldr	r3, [r7, #8]
 801174c:	3308      	adds	r3, #8
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8011752:	2b00      	cmp	r3, #0
 8011754:	d110      	bne.n	8011778 <udp_input_local_match+0xa8>
          return 1;
 8011756:	2301      	movs	r3, #1
 8011758:	e00f      	b.n	801177a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d009      	beq.n	8011774 <udp_input_local_match+0xa4>
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	681b      	ldr	r3, [r3, #0]
 8011764:	2b00      	cmp	r3, #0
 8011766:	d005      	beq.n	8011774 <udp_input_local_match+0xa4>
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	681a      	ldr	r2, [r3, #0]
 801176c:	4b09      	ldr	r3, [pc, #36]	; (8011794 <udp_input_local_match+0xc4>)
 801176e:	695b      	ldr	r3, [r3, #20]
 8011770:	429a      	cmp	r2, r3
 8011772:	d101      	bne.n	8011778 <udp_input_local_match+0xa8>
        return 1;
 8011774:	2301      	movs	r3, #1
 8011776:	e000      	b.n	801177a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8011778:	2300      	movs	r3, #0
}
 801177a:	4618      	mov	r0, r3
 801177c:	3710      	adds	r7, #16
 801177e:	46bd      	mov	sp, r7
 8011780:	bd80      	pop	{r7, pc}
 8011782:	bf00      	nop
 8011784:	08019798 	.word	0x08019798
 8011788:	080197c8 	.word	0x080197c8
 801178c:	080197ec 	.word	0x080197ec
 8011790:	08019814 	.word	0x08019814
 8011794:	200098d0 	.word	0x200098d0

08011798 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8011798:	b590      	push	{r4, r7, lr}
 801179a:	b08d      	sub	sp, #52	; 0x34
 801179c:	af02      	add	r7, sp, #8
 801179e:	6078      	str	r0, [r7, #4]
 80117a0:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 80117a2:	2300      	movs	r3, #0
 80117a4:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	2b00      	cmp	r3, #0
 80117aa:	d105      	bne.n	80117b8 <udp_input+0x20>
 80117ac:	4b7c      	ldr	r3, [pc, #496]	; (80119a0 <udp_input+0x208>)
 80117ae:	22cf      	movs	r2, #207	; 0xcf
 80117b0:	497c      	ldr	r1, [pc, #496]	; (80119a4 <udp_input+0x20c>)
 80117b2:	487d      	ldr	r0, [pc, #500]	; (80119a8 <udp_input+0x210>)
 80117b4:	f005 f844 	bl	8016840 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 80117b8:	683b      	ldr	r3, [r7, #0]
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d105      	bne.n	80117ca <udp_input+0x32>
 80117be:	4b78      	ldr	r3, [pc, #480]	; (80119a0 <udp_input+0x208>)
 80117c0:	22d0      	movs	r2, #208	; 0xd0
 80117c2:	497a      	ldr	r1, [pc, #488]	; (80119ac <udp_input+0x214>)
 80117c4:	4878      	ldr	r0, [pc, #480]	; (80119a8 <udp_input+0x210>)
 80117c6:	f005 f83b 	bl	8016840 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	895b      	ldrh	r3, [r3, #10]
 80117ce:	2b07      	cmp	r3, #7
 80117d0:	d803      	bhi.n	80117da <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80117d2:	6878      	ldr	r0, [r7, #4]
 80117d4:	f7fa f9b2 	bl	800bb3c <pbuf_free>
    goto end;
 80117d8:	e0de      	b.n	8011998 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	685b      	ldr	r3, [r3, #4]
 80117de:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80117e0:	4b73      	ldr	r3, [pc, #460]	; (80119b0 <udp_input+0x218>)
 80117e2:	695b      	ldr	r3, [r3, #20]
 80117e4:	4a72      	ldr	r2, [pc, #456]	; (80119b0 <udp_input+0x218>)
 80117e6:	6812      	ldr	r2, [r2, #0]
 80117e8:	4611      	mov	r1, r2
 80117ea:	4618      	mov	r0, r3
 80117ec:	f003 fe08 	bl	8015400 <ip4_addr_isbroadcast_u32>
 80117f0:	4603      	mov	r3, r0
 80117f2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80117f4:	697b      	ldr	r3, [r7, #20]
 80117f6:	881b      	ldrh	r3, [r3, #0]
 80117f8:	b29b      	uxth	r3, r3
 80117fa:	4618      	mov	r0, r3
 80117fc:	f7f8 fda0 	bl	800a340 <lwip_htons>
 8011800:	4603      	mov	r3, r0
 8011802:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8011804:	697b      	ldr	r3, [r7, #20]
 8011806:	885b      	ldrh	r3, [r3, #2]
 8011808:	b29b      	uxth	r3, r3
 801180a:	4618      	mov	r0, r3
 801180c:	f7f8 fd98 	bl	800a340 <lwip_htons>
 8011810:	4603      	mov	r3, r0
 8011812:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8011814:	2300      	movs	r3, #0
 8011816:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8011818:	2300      	movs	r3, #0
 801181a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801181c:	2300      	movs	r3, #0
 801181e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8011820:	4b64      	ldr	r3, [pc, #400]	; (80119b4 <udp_input+0x21c>)
 8011822:	681b      	ldr	r3, [r3, #0]
 8011824:	627b      	str	r3, [r7, #36]	; 0x24
 8011826:	e054      	b.n	80118d2 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8011828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801182a:	8a5b      	ldrh	r3, [r3, #18]
 801182c:	89fa      	ldrh	r2, [r7, #14]
 801182e:	429a      	cmp	r2, r3
 8011830:	d14a      	bne.n	80118c8 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8011832:	7cfb      	ldrb	r3, [r7, #19]
 8011834:	461a      	mov	r2, r3
 8011836:	6839      	ldr	r1, [r7, #0]
 8011838:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801183a:	f7ff ff49 	bl	80116d0 <udp_input_local_match>
 801183e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8011840:	2b00      	cmp	r3, #0
 8011842:	d041      	beq.n	80118c8 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8011844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011846:	7c1b      	ldrb	r3, [r3, #16]
 8011848:	f003 0304 	and.w	r3, r3, #4
 801184c:	2b00      	cmp	r3, #0
 801184e:	d11d      	bne.n	801188c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8011850:	69fb      	ldr	r3, [r7, #28]
 8011852:	2b00      	cmp	r3, #0
 8011854:	d102      	bne.n	801185c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8011856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011858:	61fb      	str	r3, [r7, #28]
 801185a:	e017      	b.n	801188c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801185c:	7cfb      	ldrb	r3, [r7, #19]
 801185e:	2b00      	cmp	r3, #0
 8011860:	d014      	beq.n	801188c <udp_input+0xf4>
 8011862:	4b53      	ldr	r3, [pc, #332]	; (80119b0 <udp_input+0x218>)
 8011864:	695b      	ldr	r3, [r3, #20]
 8011866:	f1b3 3fff 	cmp.w	r3, #4294967295
 801186a:	d10f      	bne.n	801188c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801186c:	69fb      	ldr	r3, [r7, #28]
 801186e:	681a      	ldr	r2, [r3, #0]
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	3304      	adds	r3, #4
 8011874:	681b      	ldr	r3, [r3, #0]
 8011876:	429a      	cmp	r2, r3
 8011878:	d008      	beq.n	801188c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801187a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801187c:	681a      	ldr	r2, [r3, #0]
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	3304      	adds	r3, #4
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	429a      	cmp	r2, r3
 8011886:	d101      	bne.n	801188c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8011888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801188c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801188e:	8a9b      	ldrh	r3, [r3, #20]
 8011890:	8a3a      	ldrh	r2, [r7, #16]
 8011892:	429a      	cmp	r2, r3
 8011894:	d118      	bne.n	80118c8 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8011896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011898:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801189a:	2b00      	cmp	r3, #0
 801189c:	d005      	beq.n	80118aa <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118a0:	685a      	ldr	r2, [r3, #4]
 80118a2:	4b43      	ldr	r3, [pc, #268]	; (80119b0 <udp_input+0x218>)
 80118a4:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d10e      	bne.n	80118c8 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80118aa:	6a3b      	ldr	r3, [r7, #32]
 80118ac:	2b00      	cmp	r3, #0
 80118ae:	d014      	beq.n	80118da <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80118b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118b2:	68da      	ldr	r2, [r3, #12]
 80118b4:	6a3b      	ldr	r3, [r7, #32]
 80118b6:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80118b8:	4b3e      	ldr	r3, [pc, #248]	; (80119b4 <udp_input+0x21c>)
 80118ba:	681a      	ldr	r2, [r3, #0]
 80118bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118be:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80118c0:	4a3c      	ldr	r2, [pc, #240]	; (80119b4 <udp_input+0x21c>)
 80118c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118c4:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80118c6:	e008      	b.n	80118da <udp_input+0x142>
      }
    }

    prev = pcb;
 80118c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ca:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80118cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118ce:	68db      	ldr	r3, [r3, #12]
 80118d0:	627b      	str	r3, [r7, #36]	; 0x24
 80118d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d1a7      	bne.n	8011828 <udp_input+0x90>
 80118d8:	e000      	b.n	80118dc <udp_input+0x144>
        break;
 80118da:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80118dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118de:	2b00      	cmp	r3, #0
 80118e0:	d101      	bne.n	80118e6 <udp_input+0x14e>
    pcb = uncon_pcb;
 80118e2:	69fb      	ldr	r3, [r7, #28]
 80118e4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80118e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d002      	beq.n	80118f2 <udp_input+0x15a>
    for_us = 1;
 80118ec:	2301      	movs	r3, #1
 80118ee:	76fb      	strb	r3, [r7, #27]
 80118f0:	e00a      	b.n	8011908 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80118f2:	683b      	ldr	r3, [r7, #0]
 80118f4:	3304      	adds	r3, #4
 80118f6:	681a      	ldr	r2, [r3, #0]
 80118f8:	4b2d      	ldr	r3, [pc, #180]	; (80119b0 <udp_input+0x218>)
 80118fa:	695b      	ldr	r3, [r3, #20]
 80118fc:	429a      	cmp	r2, r3
 80118fe:	bf0c      	ite	eq
 8011900:	2301      	moveq	r3, #1
 8011902:	2300      	movne	r3, #0
 8011904:	b2db      	uxtb	r3, r3
 8011906:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8011908:	7efb      	ldrb	r3, [r7, #27]
 801190a:	2b00      	cmp	r3, #0
 801190c:	d041      	beq.n	8011992 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801190e:	2108      	movs	r1, #8
 8011910:	6878      	ldr	r0, [r7, #4]
 8011912:	f7fa f88d 	bl	800ba30 <pbuf_remove_header>
 8011916:	4603      	mov	r3, r0
 8011918:	2b00      	cmp	r3, #0
 801191a:	d00a      	beq.n	8011932 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801191c:	4b20      	ldr	r3, [pc, #128]	; (80119a0 <udp_input+0x208>)
 801191e:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8011922:	4925      	ldr	r1, [pc, #148]	; (80119b8 <udp_input+0x220>)
 8011924:	4820      	ldr	r0, [pc, #128]	; (80119a8 <udp_input+0x210>)
 8011926:	f004 ff8b 	bl	8016840 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801192a:	6878      	ldr	r0, [r7, #4]
 801192c:	f7fa f906 	bl	800bb3c <pbuf_free>
      goto end;
 8011930:	e032      	b.n	8011998 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8011932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011934:	2b00      	cmp	r3, #0
 8011936:	d012      	beq.n	801195e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8011938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801193a:	699b      	ldr	r3, [r3, #24]
 801193c:	2b00      	cmp	r3, #0
 801193e:	d00a      	beq.n	8011956 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8011940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011942:	699c      	ldr	r4, [r3, #24]
 8011944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011946:	69d8      	ldr	r0, [r3, #28]
 8011948:	8a3b      	ldrh	r3, [r7, #16]
 801194a:	9300      	str	r3, [sp, #0]
 801194c:	4b1b      	ldr	r3, [pc, #108]	; (80119bc <udp_input+0x224>)
 801194e:	687a      	ldr	r2, [r7, #4]
 8011950:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011952:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8011954:	e021      	b.n	801199a <udp_input+0x202>
        pbuf_free(p);
 8011956:	6878      	ldr	r0, [r7, #4]
 8011958:	f7fa f8f0 	bl	800bb3c <pbuf_free>
        goto end;
 801195c:	e01c      	b.n	8011998 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801195e:	7cfb      	ldrb	r3, [r7, #19]
 8011960:	2b00      	cmp	r3, #0
 8011962:	d112      	bne.n	801198a <udp_input+0x1f2>
 8011964:	4b12      	ldr	r3, [pc, #72]	; (80119b0 <udp_input+0x218>)
 8011966:	695b      	ldr	r3, [r3, #20]
 8011968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801196c:	2be0      	cmp	r3, #224	; 0xe0
 801196e:	d00c      	beq.n	801198a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8011970:	4b0f      	ldr	r3, [pc, #60]	; (80119b0 <udp_input+0x218>)
 8011972:	899b      	ldrh	r3, [r3, #12]
 8011974:	3308      	adds	r3, #8
 8011976:	b29b      	uxth	r3, r3
 8011978:	b21b      	sxth	r3, r3
 801197a:	4619      	mov	r1, r3
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	f7fa f8ca 	bl	800bb16 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8011982:	2103      	movs	r1, #3
 8011984:	6878      	ldr	r0, [r7, #4]
 8011986:	f003 f9fd 	bl	8014d84 <icmp_dest_unreach>
      pbuf_free(p);
 801198a:	6878      	ldr	r0, [r7, #4]
 801198c:	f7fa f8d6 	bl	800bb3c <pbuf_free>
  return;
 8011990:	e003      	b.n	801199a <udp_input+0x202>
    pbuf_free(p);
 8011992:	6878      	ldr	r0, [r7, #4]
 8011994:	f7fa f8d2 	bl	800bb3c <pbuf_free>
  return;
 8011998:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801199a:	372c      	adds	r7, #44	; 0x2c
 801199c:	46bd      	mov	sp, r7
 801199e:	bd90      	pop	{r4, r7, pc}
 80119a0:	08019798 	.word	0x08019798
 80119a4:	0801983c 	.word	0x0801983c
 80119a8:	080197ec 	.word	0x080197ec
 80119ac:	08019854 	.word	0x08019854
 80119b0:	200098d0 	.word	0x200098d0
 80119b4:	2000f260 	.word	0x2000f260
 80119b8:	08019870 	.word	0x08019870
 80119bc:	200098e0 	.word	0x200098e0

080119c0 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80119c0:	b580      	push	{r7, lr}
 80119c2:	b088      	sub	sp, #32
 80119c4:	af02      	add	r7, sp, #8
 80119c6:	60f8      	str	r0, [r7, #12]
 80119c8:	60b9      	str	r1, [r7, #8]
 80119ca:	607a      	str	r2, [r7, #4]
 80119cc:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80119ce:	68fb      	ldr	r3, [r7, #12]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d109      	bne.n	80119e8 <udp_sendto_if+0x28>
 80119d4:	4b2e      	ldr	r3, [pc, #184]	; (8011a90 <udp_sendto_if+0xd0>)
 80119d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80119da:	492e      	ldr	r1, [pc, #184]	; (8011a94 <udp_sendto_if+0xd4>)
 80119dc:	482e      	ldr	r0, [pc, #184]	; (8011a98 <udp_sendto_if+0xd8>)
 80119de:	f004 ff2f 	bl	8016840 <iprintf>
 80119e2:	f06f 030f 	mvn.w	r3, #15
 80119e6:	e04f      	b.n	8011a88 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 80119e8:	68bb      	ldr	r3, [r7, #8]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d109      	bne.n	8011a02 <udp_sendto_if+0x42>
 80119ee:	4b28      	ldr	r3, [pc, #160]	; (8011a90 <udp_sendto_if+0xd0>)
 80119f0:	f240 2281 	movw	r2, #641	; 0x281
 80119f4:	4929      	ldr	r1, [pc, #164]	; (8011a9c <udp_sendto_if+0xdc>)
 80119f6:	4828      	ldr	r0, [pc, #160]	; (8011a98 <udp_sendto_if+0xd8>)
 80119f8:	f004 ff22 	bl	8016840 <iprintf>
 80119fc:	f06f 030f 	mvn.w	r3, #15
 8011a00:	e042      	b.n	8011a88 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011a02:	687b      	ldr	r3, [r7, #4]
 8011a04:	2b00      	cmp	r3, #0
 8011a06:	d109      	bne.n	8011a1c <udp_sendto_if+0x5c>
 8011a08:	4b21      	ldr	r3, [pc, #132]	; (8011a90 <udp_sendto_if+0xd0>)
 8011a0a:	f240 2282 	movw	r2, #642	; 0x282
 8011a0e:	4924      	ldr	r1, [pc, #144]	; (8011aa0 <udp_sendto_if+0xe0>)
 8011a10:	4821      	ldr	r0, [pc, #132]	; (8011a98 <udp_sendto_if+0xd8>)
 8011a12:	f004 ff15 	bl	8016840 <iprintf>
 8011a16:	f06f 030f 	mvn.w	r3, #15
 8011a1a:	e035      	b.n	8011a88 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8011a1c:	6a3b      	ldr	r3, [r7, #32]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d109      	bne.n	8011a36 <udp_sendto_if+0x76>
 8011a22:	4b1b      	ldr	r3, [pc, #108]	; (8011a90 <udp_sendto_if+0xd0>)
 8011a24:	f240 2283 	movw	r2, #643	; 0x283
 8011a28:	491e      	ldr	r1, [pc, #120]	; (8011aa4 <udp_sendto_if+0xe4>)
 8011a2a:	481b      	ldr	r0, [pc, #108]	; (8011a98 <udp_sendto_if+0xd8>)
 8011a2c:	f004 ff08 	bl	8016840 <iprintf>
 8011a30:	f06f 030f 	mvn.w	r3, #15
 8011a34:	e028      	b.n	8011a88 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011a36:	68fb      	ldr	r3, [r7, #12]
 8011a38:	2b00      	cmp	r3, #0
 8011a3a:	d009      	beq.n	8011a50 <udp_sendto_if+0x90>
 8011a3c:	68fb      	ldr	r3, [r7, #12]
 8011a3e:	681b      	ldr	r3, [r3, #0]
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d005      	beq.n	8011a50 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8011a44:	68fb      	ldr	r3, [r7, #12]
 8011a46:	681b      	ldr	r3, [r3, #0]
 8011a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8011a4c:	2be0      	cmp	r3, #224	; 0xe0
 8011a4e:	d103      	bne.n	8011a58 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8011a50:	6a3b      	ldr	r3, [r7, #32]
 8011a52:	3304      	adds	r3, #4
 8011a54:	617b      	str	r3, [r7, #20]
 8011a56:	e00b      	b.n	8011a70 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	681a      	ldr	r2, [r3, #0]
 8011a5c:	6a3b      	ldr	r3, [r7, #32]
 8011a5e:	3304      	adds	r3, #4
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	429a      	cmp	r2, r3
 8011a64:	d002      	beq.n	8011a6c <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8011a66:	f06f 0303 	mvn.w	r3, #3
 8011a6a:	e00d      	b.n	8011a88 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8011a6c:	68fb      	ldr	r3, [r7, #12]
 8011a6e:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8011a70:	887a      	ldrh	r2, [r7, #2]
 8011a72:	697b      	ldr	r3, [r7, #20]
 8011a74:	9301      	str	r3, [sp, #4]
 8011a76:	6a3b      	ldr	r3, [r7, #32]
 8011a78:	9300      	str	r3, [sp, #0]
 8011a7a:	4613      	mov	r3, r2
 8011a7c:	687a      	ldr	r2, [r7, #4]
 8011a7e:	68b9      	ldr	r1, [r7, #8]
 8011a80:	68f8      	ldr	r0, [r7, #12]
 8011a82:	f000 f811 	bl	8011aa8 <udp_sendto_if_src>
 8011a86:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8011a88:	4618      	mov	r0, r3
 8011a8a:	3718      	adds	r7, #24
 8011a8c:	46bd      	mov	sp, r7
 8011a8e:	bd80      	pop	{r7, pc}
 8011a90:	08019798 	.word	0x08019798
 8011a94:	0801990c 	.word	0x0801990c
 8011a98:	080197ec 	.word	0x080197ec
 8011a9c:	08019928 	.word	0x08019928
 8011aa0:	08019944 	.word	0x08019944
 8011aa4:	08019964 	.word	0x08019964

08011aa8 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8011aa8:	b580      	push	{r7, lr}
 8011aaa:	b08c      	sub	sp, #48	; 0x30
 8011aac:	af04      	add	r7, sp, #16
 8011aae:	60f8      	str	r0, [r7, #12]
 8011ab0:	60b9      	str	r1, [r7, #8]
 8011ab2:	607a      	str	r2, [r7, #4]
 8011ab4:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8011ab6:	68fb      	ldr	r3, [r7, #12]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d109      	bne.n	8011ad0 <udp_sendto_if_src+0x28>
 8011abc:	4b65      	ldr	r3, [pc, #404]	; (8011c54 <udp_sendto_if_src+0x1ac>)
 8011abe:	f240 22d1 	movw	r2, #721	; 0x2d1
 8011ac2:	4965      	ldr	r1, [pc, #404]	; (8011c58 <udp_sendto_if_src+0x1b0>)
 8011ac4:	4865      	ldr	r0, [pc, #404]	; (8011c5c <udp_sendto_if_src+0x1b4>)
 8011ac6:	f004 febb 	bl	8016840 <iprintf>
 8011aca:	f06f 030f 	mvn.w	r3, #15
 8011ace:	e0bc      	b.n	8011c4a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	2b00      	cmp	r3, #0
 8011ad4:	d109      	bne.n	8011aea <udp_sendto_if_src+0x42>
 8011ad6:	4b5f      	ldr	r3, [pc, #380]	; (8011c54 <udp_sendto_if_src+0x1ac>)
 8011ad8:	f240 22d2 	movw	r2, #722	; 0x2d2
 8011adc:	4960      	ldr	r1, [pc, #384]	; (8011c60 <udp_sendto_if_src+0x1b8>)
 8011ade:	485f      	ldr	r0, [pc, #380]	; (8011c5c <udp_sendto_if_src+0x1b4>)
 8011ae0:	f004 feae 	bl	8016840 <iprintf>
 8011ae4:	f06f 030f 	mvn.w	r3, #15
 8011ae8:	e0af      	b.n	8011c4a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d109      	bne.n	8011b04 <udp_sendto_if_src+0x5c>
 8011af0:	4b58      	ldr	r3, [pc, #352]	; (8011c54 <udp_sendto_if_src+0x1ac>)
 8011af2:	f240 22d3 	movw	r2, #723	; 0x2d3
 8011af6:	495b      	ldr	r1, [pc, #364]	; (8011c64 <udp_sendto_if_src+0x1bc>)
 8011af8:	4858      	ldr	r0, [pc, #352]	; (8011c5c <udp_sendto_if_src+0x1b4>)
 8011afa:	f004 fea1 	bl	8016840 <iprintf>
 8011afe:	f06f 030f 	mvn.w	r3, #15
 8011b02:	e0a2      	b.n	8011c4a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8011b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b06:	2b00      	cmp	r3, #0
 8011b08:	d109      	bne.n	8011b1e <udp_sendto_if_src+0x76>
 8011b0a:	4b52      	ldr	r3, [pc, #328]	; (8011c54 <udp_sendto_if_src+0x1ac>)
 8011b0c:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8011b10:	4955      	ldr	r1, [pc, #340]	; (8011c68 <udp_sendto_if_src+0x1c0>)
 8011b12:	4852      	ldr	r0, [pc, #328]	; (8011c5c <udp_sendto_if_src+0x1b4>)
 8011b14:	f004 fe94 	bl	8016840 <iprintf>
 8011b18:	f06f 030f 	mvn.w	r3, #15
 8011b1c:	e095      	b.n	8011c4a <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8011b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b20:	2b00      	cmp	r3, #0
 8011b22:	d109      	bne.n	8011b38 <udp_sendto_if_src+0x90>
 8011b24:	4b4b      	ldr	r3, [pc, #300]	; (8011c54 <udp_sendto_if_src+0x1ac>)
 8011b26:	f240 22d5 	movw	r2, #725	; 0x2d5
 8011b2a:	4950      	ldr	r1, [pc, #320]	; (8011c6c <udp_sendto_if_src+0x1c4>)
 8011b2c:	484b      	ldr	r0, [pc, #300]	; (8011c5c <udp_sendto_if_src+0x1b4>)
 8011b2e:	f004 fe87 	bl	8016840 <iprintf>
 8011b32:	f06f 030f 	mvn.w	r3, #15
 8011b36:	e088      	b.n	8011c4a <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8011b38:	68fb      	ldr	r3, [r7, #12]
 8011b3a:	8a5b      	ldrh	r3, [r3, #18]
 8011b3c:	2b00      	cmp	r3, #0
 8011b3e:	d10f      	bne.n	8011b60 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011b40:	68f9      	ldr	r1, [r7, #12]
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	8a5b      	ldrh	r3, [r3, #18]
 8011b46:	461a      	mov	r2, r3
 8011b48:	68f8      	ldr	r0, [r7, #12]
 8011b4a:	f000 f893 	bl	8011c74 <udp_bind>
 8011b4e:	4603      	mov	r3, r0
 8011b50:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8011b52:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011b56:	2b00      	cmp	r3, #0
 8011b58:	d002      	beq.n	8011b60 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8011b5a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8011b5e:	e074      	b.n	8011c4a <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8011b60:	68bb      	ldr	r3, [r7, #8]
 8011b62:	891b      	ldrh	r3, [r3, #8]
 8011b64:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8011b68:	4293      	cmp	r3, r2
 8011b6a:	d902      	bls.n	8011b72 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8011b6c:	f04f 33ff 	mov.w	r3, #4294967295
 8011b70:	e06b      	b.n	8011c4a <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8011b72:	2108      	movs	r1, #8
 8011b74:	68b8      	ldr	r0, [r7, #8]
 8011b76:	f7f9 ff4b 	bl	800ba10 <pbuf_add_header>
 8011b7a:	4603      	mov	r3, r0
 8011b7c:	2b00      	cmp	r3, #0
 8011b7e:	d015      	beq.n	8011bac <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8011b80:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011b84:	2108      	movs	r1, #8
 8011b86:	2022      	movs	r0, #34	; 0x22
 8011b88:	f7f9 fcf4 	bl	800b574 <pbuf_alloc>
 8011b8c:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8011b8e:	69fb      	ldr	r3, [r7, #28]
 8011b90:	2b00      	cmp	r3, #0
 8011b92:	d102      	bne.n	8011b9a <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8011b94:	f04f 33ff 	mov.w	r3, #4294967295
 8011b98:	e057      	b.n	8011c4a <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8011b9a:	68bb      	ldr	r3, [r7, #8]
 8011b9c:	891b      	ldrh	r3, [r3, #8]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d006      	beq.n	8011bb0 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8011ba2:	68b9      	ldr	r1, [r7, #8]
 8011ba4:	69f8      	ldr	r0, [r7, #28]
 8011ba6:	f7fa f8ed 	bl	800bd84 <pbuf_chain>
 8011baa:	e001      	b.n	8011bb0 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8011bac:	68bb      	ldr	r3, [r7, #8]
 8011bae:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8011bb0:	69fb      	ldr	r3, [r7, #28]
 8011bb2:	895b      	ldrh	r3, [r3, #10]
 8011bb4:	2b07      	cmp	r3, #7
 8011bb6:	d806      	bhi.n	8011bc6 <udp_sendto_if_src+0x11e>
 8011bb8:	4b26      	ldr	r3, [pc, #152]	; (8011c54 <udp_sendto_if_src+0x1ac>)
 8011bba:	f240 320d 	movw	r2, #781	; 0x30d
 8011bbe:	492c      	ldr	r1, [pc, #176]	; (8011c70 <udp_sendto_if_src+0x1c8>)
 8011bc0:	4826      	ldr	r0, [pc, #152]	; (8011c5c <udp_sendto_if_src+0x1b4>)
 8011bc2:	f004 fe3d 	bl	8016840 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8011bc6:	69fb      	ldr	r3, [r7, #28]
 8011bc8:	685b      	ldr	r3, [r3, #4]
 8011bca:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8011bcc:	68fb      	ldr	r3, [r7, #12]
 8011bce:	8a5b      	ldrh	r3, [r3, #18]
 8011bd0:	4618      	mov	r0, r3
 8011bd2:	f7f8 fbb5 	bl	800a340 <lwip_htons>
 8011bd6:	4603      	mov	r3, r0
 8011bd8:	461a      	mov	r2, r3
 8011bda:	697b      	ldr	r3, [r7, #20]
 8011bdc:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8011bde:	887b      	ldrh	r3, [r7, #2]
 8011be0:	4618      	mov	r0, r3
 8011be2:	f7f8 fbad 	bl	800a340 <lwip_htons>
 8011be6:	4603      	mov	r3, r0
 8011be8:	461a      	mov	r2, r3
 8011bea:	697b      	ldr	r3, [r7, #20]
 8011bec:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8011bee:	697b      	ldr	r3, [r7, #20]
 8011bf0:	2200      	movs	r2, #0
 8011bf2:	719a      	strb	r2, [r3, #6]
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8011bf8:	69fb      	ldr	r3, [r7, #28]
 8011bfa:	891b      	ldrh	r3, [r3, #8]
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f7f8 fb9f 	bl	800a340 <lwip_htons>
 8011c02:	4603      	mov	r3, r0
 8011c04:	461a      	mov	r2, r3
 8011c06:	697b      	ldr	r3, [r7, #20]
 8011c08:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8011c0a:	2311      	movs	r3, #17
 8011c0c:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	7adb      	ldrb	r3, [r3, #11]
 8011c12:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	7a9b      	ldrb	r3, [r3, #10]
 8011c18:	7cb9      	ldrb	r1, [r7, #18]
 8011c1a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011c1c:	9202      	str	r2, [sp, #8]
 8011c1e:	7cfa      	ldrb	r2, [r7, #19]
 8011c20:	9201      	str	r2, [sp, #4]
 8011c22:	9300      	str	r3, [sp, #0]
 8011c24:	460b      	mov	r3, r1
 8011c26:	687a      	ldr	r2, [r7, #4]
 8011c28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011c2a:	69f8      	ldr	r0, [r7, #28]
 8011c2c:	f003 fb3a 	bl	80152a4 <ip4_output_if_src>
 8011c30:	4603      	mov	r3, r0
 8011c32:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8011c34:	69fa      	ldr	r2, [r7, #28]
 8011c36:	68bb      	ldr	r3, [r7, #8]
 8011c38:	429a      	cmp	r2, r3
 8011c3a:	d004      	beq.n	8011c46 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8011c3c:	69f8      	ldr	r0, [r7, #28]
 8011c3e:	f7f9 ff7d 	bl	800bb3c <pbuf_free>
    q = NULL;
 8011c42:	2300      	movs	r3, #0
 8011c44:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8011c46:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3720      	adds	r7, #32
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}
 8011c52:	bf00      	nop
 8011c54:	08019798 	.word	0x08019798
 8011c58:	08019984 	.word	0x08019984
 8011c5c:	080197ec 	.word	0x080197ec
 8011c60:	080199a4 	.word	0x080199a4
 8011c64:	080199c4 	.word	0x080199c4
 8011c68:	080199e8 	.word	0x080199e8
 8011c6c:	08019a0c 	.word	0x08019a0c
 8011c70:	08019a30 	.word	0x08019a30

08011c74 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b086      	sub	sp, #24
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	60f8      	str	r0, [r7, #12]
 8011c7c:	60b9      	str	r1, [r7, #8]
 8011c7e:	4613      	mov	r3, r2
 8011c80:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8011c82:	68bb      	ldr	r3, [r7, #8]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d101      	bne.n	8011c8c <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8011c88:	4b39      	ldr	r3, [pc, #228]	; (8011d70 <udp_bind+0xfc>)
 8011c8a:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8011c8c:	68fb      	ldr	r3, [r7, #12]
 8011c8e:	2b00      	cmp	r3, #0
 8011c90:	d109      	bne.n	8011ca6 <udp_bind+0x32>
 8011c92:	4b38      	ldr	r3, [pc, #224]	; (8011d74 <udp_bind+0x100>)
 8011c94:	f240 32b7 	movw	r2, #951	; 0x3b7
 8011c98:	4937      	ldr	r1, [pc, #220]	; (8011d78 <udp_bind+0x104>)
 8011c9a:	4838      	ldr	r0, [pc, #224]	; (8011d7c <udp_bind+0x108>)
 8011c9c:	f004 fdd0 	bl	8016840 <iprintf>
 8011ca0:	f06f 030f 	mvn.w	r3, #15
 8011ca4:	e060      	b.n	8011d68 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011caa:	4b35      	ldr	r3, [pc, #212]	; (8011d80 <udp_bind+0x10c>)
 8011cac:	681b      	ldr	r3, [r3, #0]
 8011cae:	617b      	str	r3, [r7, #20]
 8011cb0:	e009      	b.n	8011cc6 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8011cb2:	68fa      	ldr	r2, [r7, #12]
 8011cb4:	697b      	ldr	r3, [r7, #20]
 8011cb6:	429a      	cmp	r2, r3
 8011cb8:	d102      	bne.n	8011cc0 <udp_bind+0x4c>
      rebind = 1;
 8011cba:	2301      	movs	r3, #1
 8011cbc:	74fb      	strb	r3, [r7, #19]
      break;
 8011cbe:	e005      	b.n	8011ccc <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011cc0:	697b      	ldr	r3, [r7, #20]
 8011cc2:	68db      	ldr	r3, [r3, #12]
 8011cc4:	617b      	str	r3, [r7, #20]
 8011cc6:	697b      	ldr	r3, [r7, #20]
 8011cc8:	2b00      	cmp	r3, #0
 8011cca:	d1f2      	bne.n	8011cb2 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8011ccc:	88fb      	ldrh	r3, [r7, #6]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d109      	bne.n	8011ce6 <udp_bind+0x72>
    port = udp_new_port();
 8011cd2:	f7ff fcc5 	bl	8011660 <udp_new_port>
 8011cd6:	4603      	mov	r3, r0
 8011cd8:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8011cda:	88fb      	ldrh	r3, [r7, #6]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	d12c      	bne.n	8011d3a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8011ce0:	f06f 0307 	mvn.w	r3, #7
 8011ce4:	e040      	b.n	8011d68 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011ce6:	4b26      	ldr	r3, [pc, #152]	; (8011d80 <udp_bind+0x10c>)
 8011ce8:	681b      	ldr	r3, [r3, #0]
 8011cea:	617b      	str	r3, [r7, #20]
 8011cec:	e022      	b.n	8011d34 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8011cee:	68fa      	ldr	r2, [r7, #12]
 8011cf0:	697b      	ldr	r3, [r7, #20]
 8011cf2:	429a      	cmp	r2, r3
 8011cf4:	d01b      	beq.n	8011d2e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8011cf6:	697b      	ldr	r3, [r7, #20]
 8011cf8:	8a5b      	ldrh	r3, [r3, #18]
 8011cfa:	88fa      	ldrh	r2, [r7, #6]
 8011cfc:	429a      	cmp	r2, r3
 8011cfe:	d116      	bne.n	8011d2e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	681a      	ldr	r2, [r3, #0]
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8011d08:	429a      	cmp	r2, r3
 8011d0a:	d00d      	beq.n	8011d28 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011d0c:	68bb      	ldr	r3, [r7, #8]
 8011d0e:	2b00      	cmp	r3, #0
 8011d10:	d00a      	beq.n	8011d28 <udp_bind+0xb4>
 8011d12:	68bb      	ldr	r3, [r7, #8]
 8011d14:	681b      	ldr	r3, [r3, #0]
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d006      	beq.n	8011d28 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011d1a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8011d1c:	2b00      	cmp	r3, #0
 8011d1e:	d003      	beq.n	8011d28 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8011d20:	697b      	ldr	r3, [r7, #20]
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	2b00      	cmp	r3, #0
 8011d26:	d102      	bne.n	8011d2e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8011d28:	f06f 0307 	mvn.w	r3, #7
 8011d2c:	e01c      	b.n	8011d68 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011d2e:	697b      	ldr	r3, [r7, #20]
 8011d30:	68db      	ldr	r3, [r3, #12]
 8011d32:	617b      	str	r3, [r7, #20]
 8011d34:	697b      	ldr	r3, [r7, #20]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d1d9      	bne.n	8011cee <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8011d3a:	68bb      	ldr	r3, [r7, #8]
 8011d3c:	2b00      	cmp	r3, #0
 8011d3e:	d002      	beq.n	8011d46 <udp_bind+0xd2>
 8011d40:	68bb      	ldr	r3, [r7, #8]
 8011d42:	681b      	ldr	r3, [r3, #0]
 8011d44:	e000      	b.n	8011d48 <udp_bind+0xd4>
 8011d46:	2300      	movs	r3, #0
 8011d48:	68fa      	ldr	r2, [r7, #12]
 8011d4a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	88fa      	ldrh	r2, [r7, #6]
 8011d50:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8011d52:	7cfb      	ldrb	r3, [r7, #19]
 8011d54:	2b00      	cmp	r3, #0
 8011d56:	d106      	bne.n	8011d66 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8011d58:	4b09      	ldr	r3, [pc, #36]	; (8011d80 <udp_bind+0x10c>)
 8011d5a:	681a      	ldr	r2, [r3, #0]
 8011d5c:	68fb      	ldr	r3, [r7, #12]
 8011d5e:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8011d60:	4a07      	ldr	r2, [pc, #28]	; (8011d80 <udp_bind+0x10c>)
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8011d66:	2300      	movs	r3, #0
}
 8011d68:	4618      	mov	r0, r3
 8011d6a:	3718      	adds	r7, #24
 8011d6c:	46bd      	mov	sp, r7
 8011d6e:	bd80      	pop	{r7, pc}
 8011d70:	0801a6c8 	.word	0x0801a6c8
 8011d74:	08019798 	.word	0x08019798
 8011d78:	08019a60 	.word	0x08019a60
 8011d7c:	080197ec 	.word	0x080197ec
 8011d80:	2000f260 	.word	0x2000f260

08011d84 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8011d84:	b580      	push	{r7, lr}
 8011d86:	b086      	sub	sp, #24
 8011d88:	af00      	add	r7, sp, #0
 8011d8a:	60f8      	str	r0, [r7, #12]
 8011d8c:	60b9      	str	r1, [r7, #8]
 8011d8e:	4613      	mov	r3, r2
 8011d90:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8011d92:	68fb      	ldr	r3, [r7, #12]
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d109      	bne.n	8011dac <udp_connect+0x28>
 8011d98:	4b2c      	ldr	r3, [pc, #176]	; (8011e4c <udp_connect+0xc8>)
 8011d9a:	f240 4235 	movw	r2, #1077	; 0x435
 8011d9e:	492c      	ldr	r1, [pc, #176]	; (8011e50 <udp_connect+0xcc>)
 8011da0:	482c      	ldr	r0, [pc, #176]	; (8011e54 <udp_connect+0xd0>)
 8011da2:	f004 fd4d 	bl	8016840 <iprintf>
 8011da6:	f06f 030f 	mvn.w	r3, #15
 8011daa:	e04b      	b.n	8011e44 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8011dac:	68bb      	ldr	r3, [r7, #8]
 8011dae:	2b00      	cmp	r3, #0
 8011db0:	d109      	bne.n	8011dc6 <udp_connect+0x42>
 8011db2:	4b26      	ldr	r3, [pc, #152]	; (8011e4c <udp_connect+0xc8>)
 8011db4:	f240 4236 	movw	r2, #1078	; 0x436
 8011db8:	4927      	ldr	r1, [pc, #156]	; (8011e58 <udp_connect+0xd4>)
 8011dba:	4826      	ldr	r0, [pc, #152]	; (8011e54 <udp_connect+0xd0>)
 8011dbc:	f004 fd40 	bl	8016840 <iprintf>
 8011dc0:	f06f 030f 	mvn.w	r3, #15
 8011dc4:	e03e      	b.n	8011e44 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8011dc6:	68fb      	ldr	r3, [r7, #12]
 8011dc8:	8a5b      	ldrh	r3, [r3, #18]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d10f      	bne.n	8011dee <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8011dce:	68f9      	ldr	r1, [r7, #12]
 8011dd0:	68fb      	ldr	r3, [r7, #12]
 8011dd2:	8a5b      	ldrh	r3, [r3, #18]
 8011dd4:	461a      	mov	r2, r3
 8011dd6:	68f8      	ldr	r0, [r7, #12]
 8011dd8:	f7ff ff4c 	bl	8011c74 <udp_bind>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8011de0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011de4:	2b00      	cmp	r3, #0
 8011de6:	d002      	beq.n	8011dee <udp_connect+0x6a>
      return err;
 8011de8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011dec:	e02a      	b.n	8011e44 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8011dee:	68bb      	ldr	r3, [r7, #8]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d002      	beq.n	8011dfa <udp_connect+0x76>
 8011df4:	68bb      	ldr	r3, [r7, #8]
 8011df6:	681b      	ldr	r3, [r3, #0]
 8011df8:	e000      	b.n	8011dfc <udp_connect+0x78>
 8011dfa:	2300      	movs	r3, #0
 8011dfc:	68fa      	ldr	r2, [r7, #12]
 8011dfe:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	88fa      	ldrh	r2, [r7, #6]
 8011e04:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	7c1b      	ldrb	r3, [r3, #16]
 8011e0a:	f043 0304 	orr.w	r3, r3, #4
 8011e0e:	b2da      	uxtb	r2, r3
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011e14:	4b11      	ldr	r3, [pc, #68]	; (8011e5c <udp_connect+0xd8>)
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	617b      	str	r3, [r7, #20]
 8011e1a:	e008      	b.n	8011e2e <udp_connect+0xaa>
    if (pcb == ipcb) {
 8011e1c:	68fa      	ldr	r2, [r7, #12]
 8011e1e:	697b      	ldr	r3, [r7, #20]
 8011e20:	429a      	cmp	r2, r3
 8011e22:	d101      	bne.n	8011e28 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8011e24:	2300      	movs	r3, #0
 8011e26:	e00d      	b.n	8011e44 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8011e28:	697b      	ldr	r3, [r7, #20]
 8011e2a:	68db      	ldr	r3, [r3, #12]
 8011e2c:	617b      	str	r3, [r7, #20]
 8011e2e:	697b      	ldr	r3, [r7, #20]
 8011e30:	2b00      	cmp	r3, #0
 8011e32:	d1f3      	bne.n	8011e1c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8011e34:	4b09      	ldr	r3, [pc, #36]	; (8011e5c <udp_connect+0xd8>)
 8011e36:	681a      	ldr	r2, [r3, #0]
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 8011e3c:	4a07      	ldr	r2, [pc, #28]	; (8011e5c <udp_connect+0xd8>)
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8011e42:	2300      	movs	r3, #0
}
 8011e44:	4618      	mov	r0, r3
 8011e46:	3718      	adds	r7, #24
 8011e48:	46bd      	mov	sp, r7
 8011e4a:	bd80      	pop	{r7, pc}
 8011e4c:	08019798 	.word	0x08019798
 8011e50:	08019a78 	.word	0x08019a78
 8011e54:	080197ec 	.word	0x080197ec
 8011e58:	08019a94 	.word	0x08019a94
 8011e5c:	2000f260 	.word	0x2000f260

08011e60 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8011e60:	b580      	push	{r7, lr}
 8011e62:	b084      	sub	sp, #16
 8011e64:	af00      	add	r7, sp, #0
 8011e66:	60f8      	str	r0, [r7, #12]
 8011e68:	60b9      	str	r1, [r7, #8]
 8011e6a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8011e6c:	68fb      	ldr	r3, [r7, #12]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d107      	bne.n	8011e82 <udp_recv+0x22>
 8011e72:	4b08      	ldr	r3, [pc, #32]	; (8011e94 <udp_recv+0x34>)
 8011e74:	f240 428a 	movw	r2, #1162	; 0x48a
 8011e78:	4907      	ldr	r1, [pc, #28]	; (8011e98 <udp_recv+0x38>)
 8011e7a:	4808      	ldr	r0, [pc, #32]	; (8011e9c <udp_recv+0x3c>)
 8011e7c:	f004 fce0 	bl	8016840 <iprintf>
 8011e80:	e005      	b.n	8011e8e <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8011e82:	68fb      	ldr	r3, [r7, #12]
 8011e84:	68ba      	ldr	r2, [r7, #8]
 8011e86:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8011e88:	68fb      	ldr	r3, [r7, #12]
 8011e8a:	687a      	ldr	r2, [r7, #4]
 8011e8c:	61da      	str	r2, [r3, #28]
}
 8011e8e:	3710      	adds	r7, #16
 8011e90:	46bd      	mov	sp, r7
 8011e92:	bd80      	pop	{r7, pc}
 8011e94:	08019798 	.word	0x08019798
 8011e98:	08019acc 	.word	0x08019acc
 8011e9c:	080197ec 	.word	0x080197ec

08011ea0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8011ea0:	b580      	push	{r7, lr}
 8011ea2:	b084      	sub	sp, #16
 8011ea4:	af00      	add	r7, sp, #0
 8011ea6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8011ea8:	687b      	ldr	r3, [r7, #4]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d107      	bne.n	8011ebe <udp_remove+0x1e>
 8011eae:	4b19      	ldr	r3, [pc, #100]	; (8011f14 <udp_remove+0x74>)
 8011eb0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8011eb4:	4918      	ldr	r1, [pc, #96]	; (8011f18 <udp_remove+0x78>)
 8011eb6:	4819      	ldr	r0, [pc, #100]	; (8011f1c <udp_remove+0x7c>)
 8011eb8:	f004 fcc2 	bl	8016840 <iprintf>
 8011ebc:	e026      	b.n	8011f0c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8011ebe:	4b18      	ldr	r3, [pc, #96]	; (8011f20 <udp_remove+0x80>)
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	687a      	ldr	r2, [r7, #4]
 8011ec4:	429a      	cmp	r2, r3
 8011ec6:	d105      	bne.n	8011ed4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8011ec8:	4b15      	ldr	r3, [pc, #84]	; (8011f20 <udp_remove+0x80>)
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	68db      	ldr	r3, [r3, #12]
 8011ece:	4a14      	ldr	r2, [pc, #80]	; (8011f20 <udp_remove+0x80>)
 8011ed0:	6013      	str	r3, [r2, #0]
 8011ed2:	e017      	b.n	8011f04 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011ed4:	4b12      	ldr	r3, [pc, #72]	; (8011f20 <udp_remove+0x80>)
 8011ed6:	681b      	ldr	r3, [r3, #0]
 8011ed8:	60fb      	str	r3, [r7, #12]
 8011eda:	e010      	b.n	8011efe <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8011edc:	68fb      	ldr	r3, [r7, #12]
 8011ede:	68db      	ldr	r3, [r3, #12]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d009      	beq.n	8011ef8 <udp_remove+0x58>
 8011ee4:	68fb      	ldr	r3, [r7, #12]
 8011ee6:	68db      	ldr	r3, [r3, #12]
 8011ee8:	687a      	ldr	r2, [r7, #4]
 8011eea:	429a      	cmp	r2, r3
 8011eec:	d104      	bne.n	8011ef8 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8011eee:	687b      	ldr	r3, [r7, #4]
 8011ef0:	68da      	ldr	r2, [r3, #12]
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	60da      	str	r2, [r3, #12]
        break;
 8011ef6:	e005      	b.n	8011f04 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8011ef8:	68fb      	ldr	r3, [r7, #12]
 8011efa:	68db      	ldr	r3, [r3, #12]
 8011efc:	60fb      	str	r3, [r7, #12]
 8011efe:	68fb      	ldr	r3, [r7, #12]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d1eb      	bne.n	8011edc <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8011f04:	6879      	ldr	r1, [r7, #4]
 8011f06:	2000      	movs	r0, #0
 8011f08:	f7f8 ff68 	bl	800addc <memp_free>
}
 8011f0c:	3710      	adds	r7, #16
 8011f0e:	46bd      	mov	sp, r7
 8011f10:	bd80      	pop	{r7, pc}
 8011f12:	bf00      	nop
 8011f14:	08019798 	.word	0x08019798
 8011f18:	08019ae4 	.word	0x08019ae4
 8011f1c:	080197ec 	.word	0x080197ec
 8011f20:	2000f260 	.word	0x2000f260

08011f24 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b082      	sub	sp, #8
 8011f28:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8011f2a:	2000      	movs	r0, #0
 8011f2c:	f7f8 fee0 	bl	800acf0 <memp_malloc>
 8011f30:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8011f32:	687b      	ldr	r3, [r7, #4]
 8011f34:	2b00      	cmp	r3, #0
 8011f36:	d007      	beq.n	8011f48 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8011f38:	2220      	movs	r2, #32
 8011f3a:	2100      	movs	r1, #0
 8011f3c:	6878      	ldr	r0, [r7, #4]
 8011f3e:	f004 fbe2 	bl	8016706 <memset>
    pcb->ttl = UDP_TTL;
 8011f42:	687b      	ldr	r3, [r7, #4]
 8011f44:	22ff      	movs	r2, #255	; 0xff
 8011f46:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8011f48:	687b      	ldr	r3, [r7, #4]
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3708      	adds	r7, #8
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
	...

08011f54 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011f54:	b480      	push	{r7}
 8011f56:	b085      	sub	sp, #20
 8011f58:	af00      	add	r7, sp, #0
 8011f5a:	6078      	str	r0, [r7, #4]
 8011f5c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2b00      	cmp	r3, #0
 8011f62:	d01e      	beq.n	8011fa2 <udp_netif_ip_addr_changed+0x4e>
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	681b      	ldr	r3, [r3, #0]
 8011f68:	2b00      	cmp	r3, #0
 8011f6a:	d01a      	beq.n	8011fa2 <udp_netif_ip_addr_changed+0x4e>
 8011f6c:	683b      	ldr	r3, [r7, #0]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d017      	beq.n	8011fa2 <udp_netif_ip_addr_changed+0x4e>
 8011f72:	683b      	ldr	r3, [r7, #0]
 8011f74:	681b      	ldr	r3, [r3, #0]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d013      	beq.n	8011fa2 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011f7a:	4b0d      	ldr	r3, [pc, #52]	; (8011fb0 <udp_netif_ip_addr_changed+0x5c>)
 8011f7c:	681b      	ldr	r3, [r3, #0]
 8011f7e:	60fb      	str	r3, [r7, #12]
 8011f80:	e00c      	b.n	8011f9c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8011f82:	68fb      	ldr	r3, [r7, #12]
 8011f84:	681a      	ldr	r2, [r3, #0]
 8011f86:	687b      	ldr	r3, [r7, #4]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	429a      	cmp	r2, r3
 8011f8c:	d103      	bne.n	8011f96 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8011f8e:	683b      	ldr	r3, [r7, #0]
 8011f90:	681a      	ldr	r2, [r3, #0]
 8011f92:	68fb      	ldr	r3, [r7, #12]
 8011f94:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8011f96:	68fb      	ldr	r3, [r7, #12]
 8011f98:	68db      	ldr	r3, [r3, #12]
 8011f9a:	60fb      	str	r3, [r7, #12]
 8011f9c:	68fb      	ldr	r3, [r7, #12]
 8011f9e:	2b00      	cmp	r3, #0
 8011fa0:	d1ef      	bne.n	8011f82 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8011fa2:	bf00      	nop
 8011fa4:	3714      	adds	r7, #20
 8011fa6:	46bd      	mov	sp, r7
 8011fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fac:	4770      	bx	lr
 8011fae:	bf00      	nop
 8011fb0:	2000f260 	.word	0x2000f260

08011fb4 <dhcp_inc_pcb_refcount>:
static void dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out);

/** Ensure DHCP PCB is allocated and bound */
static err_t
dhcp_inc_pcb_refcount(void)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	af00      	add	r7, sp, #0
  if (dhcp_pcb_refcount == 0) {
 8011fb8:	4b20      	ldr	r3, [pc, #128]	; (801203c <dhcp_inc_pcb_refcount+0x88>)
 8011fba:	781b      	ldrb	r3, [r3, #0]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d133      	bne.n	8012028 <dhcp_inc_pcb_refcount+0x74>
    LWIP_ASSERT("dhcp_inc_pcb_refcount(): memory leak", dhcp_pcb == NULL);
 8011fc0:	4b1f      	ldr	r3, [pc, #124]	; (8012040 <dhcp_inc_pcb_refcount+0x8c>)
 8011fc2:	681b      	ldr	r3, [r3, #0]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d005      	beq.n	8011fd4 <dhcp_inc_pcb_refcount+0x20>
 8011fc8:	4b1e      	ldr	r3, [pc, #120]	; (8012044 <dhcp_inc_pcb_refcount+0x90>)
 8011fca:	22e5      	movs	r2, #229	; 0xe5
 8011fcc:	491e      	ldr	r1, [pc, #120]	; (8012048 <dhcp_inc_pcb_refcount+0x94>)
 8011fce:	481f      	ldr	r0, [pc, #124]	; (801204c <dhcp_inc_pcb_refcount+0x98>)
 8011fd0:	f004 fc36 	bl	8016840 <iprintf>

    /* allocate UDP PCB */
    dhcp_pcb = udp_new();
 8011fd4:	f7ff ffa6 	bl	8011f24 <udp_new>
 8011fd8:	4603      	mov	r3, r0
 8011fda:	4a19      	ldr	r2, [pc, #100]	; (8012040 <dhcp_inc_pcb_refcount+0x8c>)
 8011fdc:	6013      	str	r3, [r2, #0]

    if (dhcp_pcb == NULL) {
 8011fde:	4b18      	ldr	r3, [pc, #96]	; (8012040 <dhcp_inc_pcb_refcount+0x8c>)
 8011fe0:	681b      	ldr	r3, [r3, #0]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d102      	bne.n	8011fec <dhcp_inc_pcb_refcount+0x38>
      return ERR_MEM;
 8011fe6:	f04f 33ff 	mov.w	r3, #4294967295
 8011fea:	e024      	b.n	8012036 <dhcp_inc_pcb_refcount+0x82>
    }

    ip_set_option(dhcp_pcb, SOF_BROADCAST);
 8011fec:	4b14      	ldr	r3, [pc, #80]	; (8012040 <dhcp_inc_pcb_refcount+0x8c>)
 8011fee:	681b      	ldr	r3, [r3, #0]
 8011ff0:	7a5a      	ldrb	r2, [r3, #9]
 8011ff2:	4b13      	ldr	r3, [pc, #76]	; (8012040 <dhcp_inc_pcb_refcount+0x8c>)
 8011ff4:	681b      	ldr	r3, [r3, #0]
 8011ff6:	f042 0220 	orr.w	r2, r2, #32
 8011ffa:	b2d2      	uxtb	r2, r2
 8011ffc:	725a      	strb	r2, [r3, #9]

    /* set up local and remote port for the pcb -> listen on all interfaces on all src/dest IPs */
    udp_bind(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_CLIENT);
 8011ffe:	4b10      	ldr	r3, [pc, #64]	; (8012040 <dhcp_inc_pcb_refcount+0x8c>)
 8012000:	681b      	ldr	r3, [r3, #0]
 8012002:	2244      	movs	r2, #68	; 0x44
 8012004:	4912      	ldr	r1, [pc, #72]	; (8012050 <dhcp_inc_pcb_refcount+0x9c>)
 8012006:	4618      	mov	r0, r3
 8012008:	f7ff fe34 	bl	8011c74 <udp_bind>
    udp_connect(dhcp_pcb, IP4_ADDR_ANY, LWIP_IANA_PORT_DHCP_SERVER);
 801200c:	4b0c      	ldr	r3, [pc, #48]	; (8012040 <dhcp_inc_pcb_refcount+0x8c>)
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	2243      	movs	r2, #67	; 0x43
 8012012:	490f      	ldr	r1, [pc, #60]	; (8012050 <dhcp_inc_pcb_refcount+0x9c>)
 8012014:	4618      	mov	r0, r3
 8012016:	f7ff feb5 	bl	8011d84 <udp_connect>
    udp_recv(dhcp_pcb, dhcp_recv, NULL);
 801201a:	4b09      	ldr	r3, [pc, #36]	; (8012040 <dhcp_inc_pcb_refcount+0x8c>)
 801201c:	681b      	ldr	r3, [r3, #0]
 801201e:	2200      	movs	r2, #0
 8012020:	490c      	ldr	r1, [pc, #48]	; (8012054 <dhcp_inc_pcb_refcount+0xa0>)
 8012022:	4618      	mov	r0, r3
 8012024:	f7ff ff1c 	bl	8011e60 <udp_recv>
  }

  dhcp_pcb_refcount++;
 8012028:	4b04      	ldr	r3, [pc, #16]	; (801203c <dhcp_inc_pcb_refcount+0x88>)
 801202a:	781b      	ldrb	r3, [r3, #0]
 801202c:	3301      	adds	r3, #1
 801202e:	b2da      	uxtb	r2, r3
 8012030:	4b02      	ldr	r3, [pc, #8]	; (801203c <dhcp_inc_pcb_refcount+0x88>)
 8012032:	701a      	strb	r2, [r3, #0]

  return ERR_OK;
 8012034:	2300      	movs	r3, #0
}
 8012036:	4618      	mov	r0, r3
 8012038:	bd80      	pop	{r7, pc}
 801203a:	bf00      	nop
 801203c:	2000f290 	.word	0x2000f290
 8012040:	2000f28c 	.word	0x2000f28c
 8012044:	08019afc 	.word	0x08019afc
 8012048:	08019b34 	.word	0x08019b34
 801204c:	08019b5c 	.word	0x08019b5c
 8012050:	0801a6c8 	.word	0x0801a6c8
 8012054:	080138ed 	.word	0x080138ed

08012058 <dhcp_dec_pcb_refcount>:

/** Free DHCP PCB if the last netif stops using it */
static void
dhcp_dec_pcb_refcount(void)
{
 8012058:	b580      	push	{r7, lr}
 801205a:	af00      	add	r7, sp, #0
  LWIP_ASSERT("dhcp_pcb_refcount(): refcount error", (dhcp_pcb_refcount > 0));
 801205c:	4b0e      	ldr	r3, [pc, #56]	; (8012098 <dhcp_dec_pcb_refcount+0x40>)
 801205e:	781b      	ldrb	r3, [r3, #0]
 8012060:	2b00      	cmp	r3, #0
 8012062:	d105      	bne.n	8012070 <dhcp_dec_pcb_refcount+0x18>
 8012064:	4b0d      	ldr	r3, [pc, #52]	; (801209c <dhcp_dec_pcb_refcount+0x44>)
 8012066:	22ff      	movs	r2, #255	; 0xff
 8012068:	490d      	ldr	r1, [pc, #52]	; (80120a0 <dhcp_dec_pcb_refcount+0x48>)
 801206a:	480e      	ldr	r0, [pc, #56]	; (80120a4 <dhcp_dec_pcb_refcount+0x4c>)
 801206c:	f004 fbe8 	bl	8016840 <iprintf>
  dhcp_pcb_refcount--;
 8012070:	4b09      	ldr	r3, [pc, #36]	; (8012098 <dhcp_dec_pcb_refcount+0x40>)
 8012072:	781b      	ldrb	r3, [r3, #0]
 8012074:	3b01      	subs	r3, #1
 8012076:	b2da      	uxtb	r2, r3
 8012078:	4b07      	ldr	r3, [pc, #28]	; (8012098 <dhcp_dec_pcb_refcount+0x40>)
 801207a:	701a      	strb	r2, [r3, #0]

  if (dhcp_pcb_refcount == 0) {
 801207c:	4b06      	ldr	r3, [pc, #24]	; (8012098 <dhcp_dec_pcb_refcount+0x40>)
 801207e:	781b      	ldrb	r3, [r3, #0]
 8012080:	2b00      	cmp	r3, #0
 8012082:	d107      	bne.n	8012094 <dhcp_dec_pcb_refcount+0x3c>
    udp_remove(dhcp_pcb);
 8012084:	4b08      	ldr	r3, [pc, #32]	; (80120a8 <dhcp_dec_pcb_refcount+0x50>)
 8012086:	681b      	ldr	r3, [r3, #0]
 8012088:	4618      	mov	r0, r3
 801208a:	f7ff ff09 	bl	8011ea0 <udp_remove>
    dhcp_pcb = NULL;
 801208e:	4b06      	ldr	r3, [pc, #24]	; (80120a8 <dhcp_dec_pcb_refcount+0x50>)
 8012090:	2200      	movs	r2, #0
 8012092:	601a      	str	r2, [r3, #0]
  }
}
 8012094:	bf00      	nop
 8012096:	bd80      	pop	{r7, pc}
 8012098:	2000f290 	.word	0x2000f290
 801209c:	08019afc 	.word	0x08019afc
 80120a0:	08019b84 	.word	0x08019b84
 80120a4:	08019b5c 	.word	0x08019b5c
 80120a8:	2000f28c 	.word	0x2000f28c

080120ac <dhcp_handle_nak>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_nak(struct netif *netif)
{
 80120ac:	b580      	push	{r7, lr}
 80120ae:	b084      	sub	sp, #16
 80120b0:	af00      	add	r7, sp, #0
 80120b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80120b4:	687b      	ldr	r3, [r7, #4]
 80120b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120b8:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_nak(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* Change to a defined state - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 80120ba:	210c      	movs	r1, #12
 80120bc:	68f8      	ldr	r0, [r7, #12]
 80120be:	f001 f857 	bl	8013170 <dhcp_set_state>
  /* remove IP address from interface (must no longer be used, as per RFC2131) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 80120c2:	4b06      	ldr	r3, [pc, #24]	; (80120dc <dhcp_handle_nak+0x30>)
 80120c4:	4a05      	ldr	r2, [pc, #20]	; (80120dc <dhcp_handle_nak+0x30>)
 80120c6:	4905      	ldr	r1, [pc, #20]	; (80120dc <dhcp_handle_nak+0x30>)
 80120c8:	6878      	ldr	r0, [r7, #4]
 80120ca:	f7f9 f829 	bl	800b120 <netif_set_addr>
  /* We can immediately restart discovery */
  dhcp_discover(netif);
 80120ce:	6878      	ldr	r0, [r7, #4]
 80120d0:	f000 fc4a 	bl	8012968 <dhcp_discover>
}
 80120d4:	bf00      	nop
 80120d6:	3710      	adds	r7, #16
 80120d8:	46bd      	mov	sp, r7
 80120da:	bd80      	pop	{r7, pc}
 80120dc:	0801a6c8 	.word	0x0801a6c8

080120e0 <dhcp_check>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_check(struct netif *netif)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b084      	sub	sp, #16
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80120e8:	687b      	ldr	r3, [r7, #4]
 80120ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80120ec:	60fb      	str	r3, [r7, #12]
  err_t result;
  u16_t msecs;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_check(netif=%p) %c%c\n", (void *)netif, (s16_t)netif->name[0],
              (s16_t)netif->name[1]));
  dhcp_set_state(dhcp, DHCP_STATE_CHECKING);
 80120ee:	2108      	movs	r1, #8
 80120f0:	68f8      	ldr	r0, [r7, #12]
 80120f2:	f001 f83d 	bl	8013170 <dhcp_set_state>
  /* create an ARP query for the offered IP address, expecting that no host
     responds, as the IP address should not be in use. */
  result = etharp_query(netif, &dhcp->offered_ip_addr, NULL);
 80120f6:	68fb      	ldr	r3, [r7, #12]
 80120f8:	331c      	adds	r3, #28
 80120fa:	2200      	movs	r2, #0
 80120fc:	4619      	mov	r1, r3
 80120fe:	6878      	ldr	r0, [r7, #4]
 8012100:	f002 fb3e 	bl	8014780 <etharp_query>
 8012104:	4603      	mov	r3, r0
 8012106:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_check: could not perform ARP query\n"));
  }
  if (dhcp->tries < 255) {
 8012108:	68fb      	ldr	r3, [r7, #12]
 801210a:	799b      	ldrb	r3, [r3, #6]
 801210c:	2bff      	cmp	r3, #255	; 0xff
 801210e:	d005      	beq.n	801211c <dhcp_check+0x3c>
    dhcp->tries++;
 8012110:	68fb      	ldr	r3, [r7, #12]
 8012112:	799b      	ldrb	r3, [r3, #6]
 8012114:	3301      	adds	r3, #1
 8012116:	b2da      	uxtb	r2, r3
 8012118:	68fb      	ldr	r3, [r7, #12]
 801211a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 500;
 801211c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8012120:	813b      	strh	r3, [r7, #8]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012122:	893b      	ldrh	r3, [r7, #8]
 8012124:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012128:	4a06      	ldr	r2, [pc, #24]	; (8012144 <dhcp_check+0x64>)
 801212a:	fb82 1203 	smull	r1, r2, r2, r3
 801212e:	1152      	asrs	r2, r2, #5
 8012130:	17db      	asrs	r3, r3, #31
 8012132:	1ad3      	subs	r3, r2, r3
 8012134:	b29a      	uxth	r2, r3
 8012136:	68fb      	ldr	r3, [r7, #12]
 8012138:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_check(): set request timeout %"U16_F" msecs\n", msecs));
}
 801213a:	bf00      	nop
 801213c:	3710      	adds	r7, #16
 801213e:	46bd      	mov	sp, r7
 8012140:	bd80      	pop	{r7, pc}
 8012142:	bf00      	nop
 8012144:	10624dd3 	.word	0x10624dd3

08012148 <dhcp_handle_offer>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_offer(struct netif *netif, struct dhcp_msg *msg_in)
{
 8012148:	b580      	push	{r7, lr}
 801214a:	b084      	sub	sp, #16
 801214c:	af00      	add	r7, sp, #0
 801214e:	6078      	str	r0, [r7, #4]
 8012150:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012152:	687b      	ldr	r3, [r7, #4]
 8012154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012156:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_handle_offer(netif=%p) %c%c%"U16_F"\n",
              (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  /* obtain the server address */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SERVER_ID)) {
 8012158:	4b0c      	ldr	r3, [pc, #48]	; (801218c <dhcp_handle_offer+0x44>)
 801215a:	789b      	ldrb	r3, [r3, #2]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d011      	beq.n	8012184 <dhcp_handle_offer+0x3c>
    dhcp->request_timeout = 0; /* stop timer */
 8012160:	68fb      	ldr	r3, [r7, #12]
 8012162:	2200      	movs	r2, #0
 8012164:	811a      	strh	r2, [r3, #8]

    ip_addr_set_ip4_u32(&dhcp->server_ip_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SERVER_ID)));
 8012166:	4b0a      	ldr	r3, [pc, #40]	; (8012190 <dhcp_handle_offer+0x48>)
 8012168:	689b      	ldr	r3, [r3, #8]
 801216a:	4618      	mov	r0, r3
 801216c:	f7f8 f8fd 	bl	800a36a <lwip_htonl>
 8012170:	4602      	mov	r2, r0
 8012172:	68fb      	ldr	r3, [r7, #12]
 8012174:	619a      	str	r2, [r3, #24]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): server 0x%08"X32_F"\n",
                ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
    /* remember offered address */
    ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 8012176:	683b      	ldr	r3, [r7, #0]
 8012178:	691a      	ldr	r2, [r3, #16]
 801217a:	68fb      	ldr	r3, [r7, #12]
 801217c:	61da      	str	r2, [r3, #28]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_handle_offer(): offer for 0x%08"X32_F"\n",
                ip4_addr_get_u32(&dhcp->offered_ip_addr)));

    dhcp_select(netif);
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f000 f808 	bl	8012194 <dhcp_select>
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_handle_offer(netif=%p) did not get server ID!\n", (void *)netif));
  }
}
 8012184:	bf00      	nop
 8012186:	3710      	adds	r7, #16
 8012188:	46bd      	mov	sp, r7
 801218a:	bd80      	pop	{r7, pc}
 801218c:	2000f284 	.word	0x2000f284
 8012190:	2000f264 	.word	0x2000f264

08012194 <dhcp_select>:
 * @param netif the netif under DHCP control
 * @return lwIP specific error (see error.h)
 */
static err_t
dhcp_select(struct netif *netif)
{
 8012194:	b5b0      	push	{r4, r5, r7, lr}
 8012196:	b08a      	sub	sp, #40	; 0x28
 8012198:	af02      	add	r7, sp, #8
 801219a:	6078      	str	r0, [r7, #4]
  u16_t msecs;
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ERROR("dhcp_select: netif != NULL", (netif != NULL), return ERR_ARG;);
 801219c:	687b      	ldr	r3, [r7, #4]
 801219e:	2b00      	cmp	r3, #0
 80121a0:	d109      	bne.n	80121b6 <dhcp_select+0x22>
 80121a2:	4b71      	ldr	r3, [pc, #452]	; (8012368 <dhcp_select+0x1d4>)
 80121a4:	f240 1277 	movw	r2, #375	; 0x177
 80121a8:	4970      	ldr	r1, [pc, #448]	; (801236c <dhcp_select+0x1d8>)
 80121aa:	4871      	ldr	r0, [pc, #452]	; (8012370 <dhcp_select+0x1dc>)
 80121ac:	f004 fb48 	bl	8016840 <iprintf>
 80121b0:	f06f 030f 	mvn.w	r3, #15
 80121b4:	e0d3      	b.n	801235e <dhcp_select+0x1ca>
  dhcp = netif_dhcp_data(netif);
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121ba:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_select: dhcp != NULL", (dhcp != NULL), return ERR_VAL;);
 80121bc:	69bb      	ldr	r3, [r7, #24]
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d109      	bne.n	80121d6 <dhcp_select+0x42>
 80121c2:	4b69      	ldr	r3, [pc, #420]	; (8012368 <dhcp_select+0x1d4>)
 80121c4:	f240 1279 	movw	r2, #377	; 0x179
 80121c8:	496a      	ldr	r1, [pc, #424]	; (8012374 <dhcp_select+0x1e0>)
 80121ca:	4869      	ldr	r0, [pc, #420]	; (8012370 <dhcp_select+0x1dc>)
 80121cc:	f004 fb38 	bl	8016840 <iprintf>
 80121d0:	f06f 0305 	mvn.w	r3, #5
 80121d4:	e0c3      	b.n	801235e <dhcp_select+0x1ca>

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_select(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));
  dhcp_set_state(dhcp, DHCP_STATE_REQUESTING);
 80121d6:	2101      	movs	r1, #1
 80121d8:	69b8      	ldr	r0, [r7, #24]
 80121da:	f000 ffc9 	bl	8013170 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 80121de:	f107 030c 	add.w	r3, r7, #12
 80121e2:	2203      	movs	r2, #3
 80121e4:	69b9      	ldr	r1, [r7, #24]
 80121e6:	6878      	ldr	r0, [r7, #4]
 80121e8:	f001 fc4e 	bl	8013a88 <dhcp_create_msg>
 80121ec:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80121ee:	697b      	ldr	r3, [r7, #20]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	f000 8085 	beq.w	8012300 <dhcp_select+0x16c>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80121f6:	697b      	ldr	r3, [r7, #20]
 80121f8:	685b      	ldr	r3, [r3, #4]
 80121fa:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80121fc:	89b8      	ldrh	r0, [r7, #12]
 80121fe:	693b      	ldr	r3, [r7, #16]
 8012200:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012204:	2302      	movs	r3, #2
 8012206:	2239      	movs	r2, #57	; 0x39
 8012208:	f000 ffcc 	bl	80131a4 <dhcp_option>
 801220c:	4603      	mov	r3, r0
 801220e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012210:	89b8      	ldrh	r0, [r7, #12]
 8012212:	693b      	ldr	r3, [r7, #16]
 8012214:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801221c:	461a      	mov	r2, r3
 801221e:	f001 f81b 	bl	8013258 <dhcp_option_short>
 8012222:	4603      	mov	r3, r0
 8012224:	81bb      	strh	r3, [r7, #12]

    /* MUST request the offered IP address */
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012226:	89b8      	ldrh	r0, [r7, #12]
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801222e:	2304      	movs	r3, #4
 8012230:	2232      	movs	r2, #50	; 0x32
 8012232:	f000 ffb7 	bl	80131a4 <dhcp_option>
 8012236:	4603      	mov	r3, r0
 8012238:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 801223a:	89bc      	ldrh	r4, [r7, #12]
 801223c:	693b      	ldr	r3, [r7, #16]
 801223e:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012242:	69bb      	ldr	r3, [r7, #24]
 8012244:	69db      	ldr	r3, [r3, #28]
 8012246:	4618      	mov	r0, r3
 8012248:	f7f8 f88f 	bl	800a36a <lwip_htonl>
 801224c:	4603      	mov	r3, r0
 801224e:	461a      	mov	r2, r3
 8012250:	4629      	mov	r1, r5
 8012252:	4620      	mov	r0, r4
 8012254:	f001 f832 	bl	80132bc <dhcp_option_long>
 8012258:	4603      	mov	r3, r0
 801225a:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 801225c:	89b8      	ldrh	r0, [r7, #12]
 801225e:	693b      	ldr	r3, [r7, #16]
 8012260:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012264:	2304      	movs	r3, #4
 8012266:	2236      	movs	r2, #54	; 0x36
 8012268:	f000 ff9c 	bl	80131a4 <dhcp_option>
 801226c:	4603      	mov	r3, r0
 801226e:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&dhcp->server_ip_addr))));
 8012270:	89bc      	ldrh	r4, [r7, #12]
 8012272:	693b      	ldr	r3, [r7, #16]
 8012274:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012278:	69bb      	ldr	r3, [r7, #24]
 801227a:	699b      	ldr	r3, [r3, #24]
 801227c:	4618      	mov	r0, r3
 801227e:	f7f8 f874 	bl	800a36a <lwip_htonl>
 8012282:	4603      	mov	r3, r0
 8012284:	461a      	mov	r2, r3
 8012286:	4629      	mov	r1, r5
 8012288:	4620      	mov	r0, r4
 801228a:	f001 f817 	bl	80132bc <dhcp_option_long>
 801228e:	4603      	mov	r3, r0
 8012290:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012292:	89b8      	ldrh	r0, [r7, #12]
 8012294:	693b      	ldr	r3, [r7, #16]
 8012296:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 801229a:	2303      	movs	r3, #3
 801229c:	2237      	movs	r2, #55	; 0x37
 801229e:	f000 ff81 	bl	80131a4 <dhcp_option>
 80122a2:	4603      	mov	r3, r0
 80122a4:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80122a6:	2300      	movs	r3, #0
 80122a8:	77bb      	strb	r3, [r7, #30]
 80122aa:	e00e      	b.n	80122ca <dhcp_select+0x136>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80122ac:	89b8      	ldrh	r0, [r7, #12]
 80122ae:	693b      	ldr	r3, [r7, #16]
 80122b0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80122b4:	7fbb      	ldrb	r3, [r7, #30]
 80122b6:	4a30      	ldr	r2, [pc, #192]	; (8012378 <dhcp_select+0x1e4>)
 80122b8:	5cd3      	ldrb	r3, [r2, r3]
 80122ba:	461a      	mov	r2, r3
 80122bc:	f000 ffa6 	bl	801320c <dhcp_option_byte>
 80122c0:	4603      	mov	r3, r0
 80122c2:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80122c4:	7fbb      	ldrb	r3, [r7, #30]
 80122c6:	3301      	adds	r3, #1
 80122c8:	77bb      	strb	r3, [r7, #30]
 80122ca:	7fbb      	ldrb	r3, [r7, #30]
 80122cc:	2b02      	cmp	r3, #2
 80122ce:	d9ed      	bls.n	80122ac <dhcp_select+0x118>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REQUESTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80122d0:	89b8      	ldrh	r0, [r7, #12]
 80122d2:	693b      	ldr	r3, [r7, #16]
 80122d4:	33f0      	adds	r3, #240	; 0xf0
 80122d6:	697a      	ldr	r2, [r7, #20]
 80122d8:	4619      	mov	r1, r3
 80122da:	f001 fcab 	bl	8013c34 <dhcp_option_trailer>

    /* send broadcast to any DHCP server */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80122de:	4b27      	ldr	r3, [pc, #156]	; (801237c <dhcp_select+0x1e8>)
 80122e0:	6818      	ldr	r0, [r3, #0]
 80122e2:	4b27      	ldr	r3, [pc, #156]	; (8012380 <dhcp_select+0x1ec>)
 80122e4:	9301      	str	r3, [sp, #4]
 80122e6:	687b      	ldr	r3, [r7, #4]
 80122e8:	9300      	str	r3, [sp, #0]
 80122ea:	2343      	movs	r3, #67	; 0x43
 80122ec:	4a25      	ldr	r2, [pc, #148]	; (8012384 <dhcp_select+0x1f0>)
 80122ee:	6979      	ldr	r1, [r7, #20]
 80122f0:	f7ff fbda 	bl	8011aa8 <udp_sendto_if_src>
 80122f4:	4603      	mov	r3, r0
 80122f6:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 80122f8:	6978      	ldr	r0, [r7, #20]
 80122fa:	f7f9 fc1f 	bl	800bb3c <pbuf_free>
 80122fe:	e001      	b.n	8012304 <dhcp_select+0x170>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_select: REQUESTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("dhcp_select: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012300:	23ff      	movs	r3, #255	; 0xff
 8012302:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012304:	69bb      	ldr	r3, [r7, #24]
 8012306:	799b      	ldrb	r3, [r3, #6]
 8012308:	2bff      	cmp	r3, #255	; 0xff
 801230a:	d005      	beq.n	8012318 <dhcp_select+0x184>
    dhcp->tries++;
 801230c:	69bb      	ldr	r3, [r7, #24]
 801230e:	799b      	ldrb	r3, [r3, #6]
 8012310:	3301      	adds	r3, #1
 8012312:	b2da      	uxtb	r2, r3
 8012314:	69bb      	ldr	r3, [r7, #24]
 8012316:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012318:	69bb      	ldr	r3, [r7, #24]
 801231a:	799b      	ldrb	r3, [r3, #6]
 801231c:	2b05      	cmp	r3, #5
 801231e:	d80d      	bhi.n	801233c <dhcp_select+0x1a8>
 8012320:	69bb      	ldr	r3, [r7, #24]
 8012322:	799b      	ldrb	r3, [r3, #6]
 8012324:	461a      	mov	r2, r3
 8012326:	2301      	movs	r3, #1
 8012328:	4093      	lsls	r3, r2
 801232a:	b29b      	uxth	r3, r3
 801232c:	461a      	mov	r2, r3
 801232e:	0152      	lsls	r2, r2, #5
 8012330:	1ad2      	subs	r2, r2, r3
 8012332:	0092      	lsls	r2, r2, #2
 8012334:	4413      	add	r3, r2
 8012336:	00db      	lsls	r3, r3, #3
 8012338:	b29b      	uxth	r3, r3
 801233a:	e001      	b.n	8012340 <dhcp_select+0x1ac>
 801233c:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012340:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012342:	89fb      	ldrh	r3, [r7, #14]
 8012344:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012348:	4a0f      	ldr	r2, [pc, #60]	; (8012388 <dhcp_select+0x1f4>)
 801234a:	fb82 1203 	smull	r1, r2, r2, r3
 801234e:	1152      	asrs	r2, r2, #5
 8012350:	17db      	asrs	r3, r3, #31
 8012352:	1ad3      	subs	r3, r2, r3
 8012354:	b29a      	uxth	r2, r3
 8012356:	69bb      	ldr	r3, [r7, #24]
 8012358:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_select(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801235a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801235e:	4618      	mov	r0, r3
 8012360:	3720      	adds	r7, #32
 8012362:	46bd      	mov	sp, r7
 8012364:	bdb0      	pop	{r4, r5, r7, pc}
 8012366:	bf00      	nop
 8012368:	08019afc 	.word	0x08019afc
 801236c:	08019ba8 	.word	0x08019ba8
 8012370:	08019b5c 	.word	0x08019b5c
 8012374:	08019bc4 	.word	0x08019bc4
 8012378:	20000030 	.word	0x20000030
 801237c:	2000f28c 	.word	0x2000f28c
 8012380:	0801a6c8 	.word	0x0801a6c8
 8012384:	0801a6cc 	.word	0x0801a6cc
 8012388:	10624dd3 	.word	0x10624dd3

0801238c <dhcp_coarse_tmr>:
 * The DHCP timer that checks for lease renewal/rebind timeouts.
 * Must be called once a minute (see @ref DHCP_COARSE_TIMER_SECS).
 */
void
dhcp_coarse_tmr(void)
{
 801238c:	b580      	push	{r7, lr}
 801238e:	b082      	sub	sp, #8
 8012390:	af00      	add	r7, sp, #0
  struct netif *netif;
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_coarse_tmr()\n"));
  /* iterate through all network interfaces */
  NETIF_FOREACH(netif) {
 8012392:	4b27      	ldr	r3, [pc, #156]	; (8012430 <dhcp_coarse_tmr+0xa4>)
 8012394:	681b      	ldr	r3, [r3, #0]
 8012396:	607b      	str	r3, [r7, #4]
 8012398:	e042      	b.n	8012420 <dhcp_coarse_tmr+0x94>
    /* only act on DHCP configured interfaces */
    struct dhcp *dhcp = netif_dhcp_data(netif);
 801239a:	687b      	ldr	r3, [r7, #4]
 801239c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801239e:	603b      	str	r3, [r7, #0]
    if ((dhcp != NULL) && (dhcp->state != DHCP_STATE_OFF)) {
 80123a0:	683b      	ldr	r3, [r7, #0]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d039      	beq.n	801241a <dhcp_coarse_tmr+0x8e>
 80123a6:	683b      	ldr	r3, [r7, #0]
 80123a8:	795b      	ldrb	r3, [r3, #5]
 80123aa:	2b00      	cmp	r3, #0
 80123ac:	d035      	beq.n	801241a <dhcp_coarse_tmr+0x8e>
      /* compare lease time to expire timeout */
      if (dhcp->t0_timeout && (++dhcp->lease_used == dhcp->t0_timeout)) {
 80123ae:	683b      	ldr	r3, [r7, #0]
 80123b0:	8a9b      	ldrh	r3, [r3, #20]
 80123b2:	2b00      	cmp	r3, #0
 80123b4:	d012      	beq.n	80123dc <dhcp_coarse_tmr+0x50>
 80123b6:	683b      	ldr	r3, [r7, #0]
 80123b8:	8a5b      	ldrh	r3, [r3, #18]
 80123ba:	3301      	adds	r3, #1
 80123bc:	b29a      	uxth	r2, r3
 80123be:	683b      	ldr	r3, [r7, #0]
 80123c0:	825a      	strh	r2, [r3, #18]
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	8a5a      	ldrh	r2, [r3, #18]
 80123c6:	683b      	ldr	r3, [r7, #0]
 80123c8:	8a9b      	ldrh	r3, [r3, #20]
 80123ca:	429a      	cmp	r2, r3
 80123cc:	d106      	bne.n	80123dc <dhcp_coarse_tmr+0x50>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t0 timeout\n"));
        /* this clients' lease time has expired */
        dhcp_release_and_stop(netif);
 80123ce:	6878      	ldr	r0, [r7, #4]
 80123d0:	f000 fe34 	bl	801303c <dhcp_release_and_stop>
        dhcp_start(netif);
 80123d4:	6878      	ldr	r0, [r7, #4]
 80123d6:	f000 f96b 	bl	80126b0 <dhcp_start>
 80123da:	e01e      	b.n	801241a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now? */
      } else if (dhcp->t2_rebind_time && (dhcp->t2_rebind_time-- == 1)) {
 80123dc:	683b      	ldr	r3, [r7, #0]
 80123de:	8a1b      	ldrh	r3, [r3, #16]
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d00b      	beq.n	80123fc <dhcp_coarse_tmr+0x70>
 80123e4:	683b      	ldr	r3, [r7, #0]
 80123e6:	8a1b      	ldrh	r3, [r3, #16]
 80123e8:	1e5a      	subs	r2, r3, #1
 80123ea:	b291      	uxth	r1, r2
 80123ec:	683a      	ldr	r2, [r7, #0]
 80123ee:	8211      	strh	r1, [r2, #16]
 80123f0:	2b01      	cmp	r3, #1
 80123f2:	d103      	bne.n	80123fc <dhcp_coarse_tmr+0x70>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t2 timeout\n"));
        /* this clients' rebind timeout triggered */
        dhcp_t2_timeout(netif);
 80123f4:	6878      	ldr	r0, [r7, #4]
 80123f6:	f000 f8c7 	bl	8012588 <dhcp_t2_timeout>
 80123fa:	e00e      	b.n	801241a <dhcp_coarse_tmr+0x8e>
        /* timer is active (non zero), and triggers (zeroes) now */
      } else if (dhcp->t1_renew_time && (dhcp->t1_renew_time-- == 1)) {
 80123fc:	683b      	ldr	r3, [r7, #0]
 80123fe:	89db      	ldrh	r3, [r3, #14]
 8012400:	2b00      	cmp	r3, #0
 8012402:	d00a      	beq.n	801241a <dhcp_coarse_tmr+0x8e>
 8012404:	683b      	ldr	r3, [r7, #0]
 8012406:	89db      	ldrh	r3, [r3, #14]
 8012408:	1e5a      	subs	r2, r3, #1
 801240a:	b291      	uxth	r1, r2
 801240c:	683a      	ldr	r2, [r7, #0]
 801240e:	81d1      	strh	r1, [r2, #14]
 8012410:	2b01      	cmp	r3, #1
 8012412:	d102      	bne.n	801241a <dhcp_coarse_tmr+0x8e>
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_coarse_tmr(): t1 timeout\n"));
        /* this clients' renewal timeout triggered */
        dhcp_t1_timeout(netif);
 8012414:	6878      	ldr	r0, [r7, #4]
 8012416:	f000 f888 	bl	801252a <dhcp_t1_timeout>
  NETIF_FOREACH(netif) {
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	607b      	str	r3, [r7, #4]
 8012420:	687b      	ldr	r3, [r7, #4]
 8012422:	2b00      	cmp	r3, #0
 8012424:	d1b9      	bne.n	801239a <dhcp_coarse_tmr+0xe>
      }
    }
  }
}
 8012426:	bf00      	nop
 8012428:	bf00      	nop
 801242a:	3708      	adds	r7, #8
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}
 8012430:	2000f1f8 	.word	0x2000f1f8

08012434 <dhcp_fine_tmr>:
 * A DHCP server is expected to respond within a short period of time.
 * This timer checks whether an outstanding DHCP request is timed out.
 */
void
dhcp_fine_tmr(void)
{
 8012434:	b580      	push	{r7, lr}
 8012436:	b082      	sub	sp, #8
 8012438:	af00      	add	r7, sp, #0
  struct netif *netif;
  /* loop through netif's */
  NETIF_FOREACH(netif) {
 801243a:	4b16      	ldr	r3, [pc, #88]	; (8012494 <dhcp_fine_tmr+0x60>)
 801243c:	681b      	ldr	r3, [r3, #0]
 801243e:	607b      	str	r3, [r7, #4]
 8012440:	e020      	b.n	8012484 <dhcp_fine_tmr+0x50>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012446:	603b      	str	r3, [r7, #0]
    /* only act on DHCP configured interfaces */
    if (dhcp != NULL) {
 8012448:	683b      	ldr	r3, [r7, #0]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d017      	beq.n	801247e <dhcp_fine_tmr+0x4a>
      /* timer is active (non zero), and is about to trigger now */
      if (dhcp->request_timeout > 1) {
 801244e:	683b      	ldr	r3, [r7, #0]
 8012450:	891b      	ldrh	r3, [r3, #8]
 8012452:	2b01      	cmp	r3, #1
 8012454:	d906      	bls.n	8012464 <dhcp_fine_tmr+0x30>
        dhcp->request_timeout--;
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	891b      	ldrh	r3, [r3, #8]
 801245a:	3b01      	subs	r3, #1
 801245c:	b29a      	uxth	r2, r3
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	811a      	strh	r2, [r3, #8]
 8012462:	e00c      	b.n	801247e <dhcp_fine_tmr+0x4a>
      } else if (dhcp->request_timeout == 1) {
 8012464:	683b      	ldr	r3, [r7, #0]
 8012466:	891b      	ldrh	r3, [r3, #8]
 8012468:	2b01      	cmp	r3, #1
 801246a:	d108      	bne.n	801247e <dhcp_fine_tmr+0x4a>
        dhcp->request_timeout--;
 801246c:	683b      	ldr	r3, [r7, #0]
 801246e:	891b      	ldrh	r3, [r3, #8]
 8012470:	3b01      	subs	r3, #1
 8012472:	b29a      	uxth	r2, r3
 8012474:	683b      	ldr	r3, [r7, #0]
 8012476:	811a      	strh	r2, [r3, #8]
        /* { dhcp->request_timeout == 0 } */
        LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_fine_tmr(): request timeout\n"));
        /* this client's request timeout triggered */
        dhcp_timeout(netif);
 8012478:	6878      	ldr	r0, [r7, #4]
 801247a:	f000 f80d 	bl	8012498 <dhcp_timeout>
  NETIF_FOREACH(netif) {
 801247e:	687b      	ldr	r3, [r7, #4]
 8012480:	681b      	ldr	r3, [r3, #0]
 8012482:	607b      	str	r3, [r7, #4]
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	2b00      	cmp	r3, #0
 8012488:	d1db      	bne.n	8012442 <dhcp_fine_tmr+0xe>
      }
    }
  }
}
 801248a:	bf00      	nop
 801248c:	bf00      	nop
 801248e:	3708      	adds	r7, #8
 8012490:	46bd      	mov	sp, r7
 8012492:	bd80      	pop	{r7, pc}
 8012494:	2000f1f8 	.word	0x2000f1f8

08012498 <dhcp_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_timeout(struct netif *netif)
{
 8012498:	b580      	push	{r7, lr}
 801249a:	b084      	sub	sp, #16
 801249c:	af00      	add	r7, sp, #0
 801249e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124a4:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout()\n"));
  /* back-off period has passed, or server selection timed out */
  if ((dhcp->state == DHCP_STATE_BACKING_OFF) || (dhcp->state == DHCP_STATE_SELECTING)) {
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	795b      	ldrb	r3, [r3, #5]
 80124aa:	2b0c      	cmp	r3, #12
 80124ac:	d003      	beq.n	80124b6 <dhcp_timeout+0x1e>
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	795b      	ldrb	r3, [r3, #5]
 80124b2:	2b06      	cmp	r3, #6
 80124b4:	d103      	bne.n	80124be <dhcp_timeout+0x26>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_timeout(): restarting discovery\n"));
    dhcp_discover(netif);
 80124b6:	6878      	ldr	r0, [r7, #4]
 80124b8:	f000 fa56 	bl	8012968 <dhcp_discover>
      dhcp_reboot(netif);
    } else {
      dhcp_discover(netif);
    }
  }
}
 80124bc:	e031      	b.n	8012522 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REQUESTING) {
 80124be:	68fb      	ldr	r3, [r7, #12]
 80124c0:	795b      	ldrb	r3, [r3, #5]
 80124c2:	2b01      	cmp	r3, #1
 80124c4:	d10e      	bne.n	80124e4 <dhcp_timeout+0x4c>
    if (dhcp->tries <= 5) {
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	799b      	ldrb	r3, [r3, #6]
 80124ca:	2b05      	cmp	r3, #5
 80124cc:	d803      	bhi.n	80124d6 <dhcp_timeout+0x3e>
      dhcp_select(netif);
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f7ff fe60 	bl	8012194 <dhcp_select>
}
 80124d4:	e025      	b.n	8012522 <dhcp_timeout+0x8a>
      dhcp_release_and_stop(netif);
 80124d6:	6878      	ldr	r0, [r7, #4]
 80124d8:	f000 fdb0 	bl	801303c <dhcp_release_and_stop>
      dhcp_start(netif);
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f000 f8e7 	bl	80126b0 <dhcp_start>
}
 80124e2:	e01e      	b.n	8012522 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_CHECKING) {
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	795b      	ldrb	r3, [r3, #5]
 80124e8:	2b08      	cmp	r3, #8
 80124ea:	d10b      	bne.n	8012504 <dhcp_timeout+0x6c>
    if (dhcp->tries <= 1) {
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	799b      	ldrb	r3, [r3, #6]
 80124f0:	2b01      	cmp	r3, #1
 80124f2:	d803      	bhi.n	80124fc <dhcp_timeout+0x64>
      dhcp_check(netif);
 80124f4:	6878      	ldr	r0, [r7, #4]
 80124f6:	f7ff fdf3 	bl	80120e0 <dhcp_check>
}
 80124fa:	e012      	b.n	8012522 <dhcp_timeout+0x8a>
      dhcp_bind(netif);
 80124fc:	6878      	ldr	r0, [r7, #4]
 80124fe:	f000 fad5 	bl	8012aac <dhcp_bind>
}
 8012502:	e00e      	b.n	8012522 <dhcp_timeout+0x8a>
  } else if (dhcp->state == DHCP_STATE_REBOOTING) {
 8012504:	68fb      	ldr	r3, [r7, #12]
 8012506:	795b      	ldrb	r3, [r3, #5]
 8012508:	2b03      	cmp	r3, #3
 801250a:	d10a      	bne.n	8012522 <dhcp_timeout+0x8a>
    if (dhcp->tries < REBOOT_TRIES) {
 801250c:	68fb      	ldr	r3, [r7, #12]
 801250e:	799b      	ldrb	r3, [r3, #6]
 8012510:	2b01      	cmp	r3, #1
 8012512:	d803      	bhi.n	801251c <dhcp_timeout+0x84>
      dhcp_reboot(netif);
 8012514:	6878      	ldr	r0, [r7, #4]
 8012516:	f000 fcdb 	bl	8012ed0 <dhcp_reboot>
}
 801251a:	e002      	b.n	8012522 <dhcp_timeout+0x8a>
      dhcp_discover(netif);
 801251c:	6878      	ldr	r0, [r7, #4]
 801251e:	f000 fa23 	bl	8012968 <dhcp_discover>
}
 8012522:	bf00      	nop
 8012524:	3710      	adds	r7, #16
 8012526:	46bd      	mov	sp, r7
 8012528:	bd80      	pop	{r7, pc}

0801252a <dhcp_t1_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t1_timeout(struct netif *netif)
{
 801252a:	b580      	push	{r7, lr}
 801252c:	b084      	sub	sp, #16
 801252e:	af00      	add	r7, sp, #0
 8012530:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012536:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_t1_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012538:	68fb      	ldr	r3, [r7, #12]
 801253a:	795b      	ldrb	r3, [r3, #5]
 801253c:	2b01      	cmp	r3, #1
 801253e:	d007      	beq.n	8012550 <dhcp_t1_timeout+0x26>
 8012540:	68fb      	ldr	r3, [r7, #12]
 8012542:	795b      	ldrb	r3, [r3, #5]
 8012544:	2b0a      	cmp	r3, #10
 8012546:	d003      	beq.n	8012550 <dhcp_t1_timeout+0x26>
      (dhcp->state == DHCP_STATE_RENEWING)) {
 8012548:	68fb      	ldr	r3, [r7, #12]
 801254a:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 801254c:	2b05      	cmp	r3, #5
 801254e:	d117      	bne.n	8012580 <dhcp_t1_timeout+0x56>
     * eventually time-out if renew tries fail. */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t1_timeout(): must renew\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_RENEWING, not DHCP_STATE_BOUND */
    dhcp_renew(netif);
 8012550:	6878      	ldr	r0, [r7, #4]
 8012552:	f000 fb85 	bl	8012c60 <dhcp_renew>
    /* Calculate next timeout */
    if (((dhcp->t2_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 8012556:	68fb      	ldr	r3, [r7, #12]
 8012558:	899b      	ldrh	r3, [r3, #12]
 801255a:	461a      	mov	r2, r3
 801255c:	68fb      	ldr	r3, [r7, #12]
 801255e:	8a5b      	ldrh	r3, [r3, #18]
 8012560:	1ad3      	subs	r3, r2, r3
 8012562:	2b01      	cmp	r3, #1
 8012564:	dd0c      	ble.n	8012580 <dhcp_t1_timeout+0x56>
      dhcp->t1_renew_time = (u16_t)((dhcp->t2_timeout - dhcp->lease_used) / 2);
 8012566:	68fb      	ldr	r3, [r7, #12]
 8012568:	899b      	ldrh	r3, [r3, #12]
 801256a:	461a      	mov	r2, r3
 801256c:	68fb      	ldr	r3, [r7, #12]
 801256e:	8a5b      	ldrh	r3, [r3, #18]
 8012570:	1ad3      	subs	r3, r2, r3
 8012572:	2b00      	cmp	r3, #0
 8012574:	da00      	bge.n	8012578 <dhcp_t1_timeout+0x4e>
 8012576:	3301      	adds	r3, #1
 8012578:	105b      	asrs	r3, r3, #1
 801257a:	b29a      	uxth	r2, r3
 801257c:	68fb      	ldr	r3, [r7, #12]
 801257e:	81da      	strh	r2, [r3, #14]
    }
  }
}
 8012580:	bf00      	nop
 8012582:	3710      	adds	r7, #16
 8012584:	46bd      	mov	sp, r7
 8012586:	bd80      	pop	{r7, pc}

08012588 <dhcp_t2_timeout>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_t2_timeout(struct netif *netif)
{
 8012588:	b580      	push	{r7, lr}
 801258a:	b084      	sub	sp, #16
 801258c:	af00      	add	r7, sp, #0
 801258e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012594:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_t2_timeout()\n"));
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 8012596:	68fb      	ldr	r3, [r7, #12]
 8012598:	795b      	ldrb	r3, [r3, #5]
 801259a:	2b01      	cmp	r3, #1
 801259c:	d00b      	beq.n	80125b6 <dhcp_t2_timeout+0x2e>
 801259e:	68fb      	ldr	r3, [r7, #12]
 80125a0:	795b      	ldrb	r3, [r3, #5]
 80125a2:	2b0a      	cmp	r3, #10
 80125a4:	d007      	beq.n	80125b6 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80125a6:	68fb      	ldr	r3, [r7, #12]
 80125a8:	795b      	ldrb	r3, [r3, #5]
  if ((dhcp->state == DHCP_STATE_REQUESTING) || (dhcp->state == DHCP_STATE_BOUND) ||
 80125aa:	2b05      	cmp	r3, #5
 80125ac:	d003      	beq.n	80125b6 <dhcp_t2_timeout+0x2e>
      (dhcp->state == DHCP_STATE_RENEWING) || (dhcp->state == DHCP_STATE_REBINDING)) {
 80125ae:	68fb      	ldr	r3, [r7, #12]
 80125b0:	795b      	ldrb	r3, [r3, #5]
 80125b2:	2b04      	cmp	r3, #4
 80125b4:	d117      	bne.n	80125e6 <dhcp_t2_timeout+0x5e>
    /* just retry to rebind */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                ("dhcp_t2_timeout(): must rebind\n"));
    /* This slightly different to RFC2131: DHCPREQUEST will be sent from state
       DHCP_STATE_REBINDING, not DHCP_STATE_BOUND */
    dhcp_rebind(netif);
 80125b6:	6878      	ldr	r0, [r7, #4]
 80125b8:	f000 fbee 	bl	8012d98 <dhcp_rebind>
    /* Calculate next timeout */
    if (((dhcp->t0_timeout - dhcp->lease_used) / 2) >= ((60 + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS)) {
 80125bc:	68fb      	ldr	r3, [r7, #12]
 80125be:	8a9b      	ldrh	r3, [r3, #20]
 80125c0:	461a      	mov	r2, r3
 80125c2:	68fb      	ldr	r3, [r7, #12]
 80125c4:	8a5b      	ldrh	r3, [r3, #18]
 80125c6:	1ad3      	subs	r3, r2, r3
 80125c8:	2b01      	cmp	r3, #1
 80125ca:	dd0c      	ble.n	80125e6 <dhcp_t2_timeout+0x5e>
      dhcp->t2_rebind_time = (u16_t)((dhcp->t0_timeout - dhcp->lease_used) / 2);
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	8a9b      	ldrh	r3, [r3, #20]
 80125d0:	461a      	mov	r2, r3
 80125d2:	68fb      	ldr	r3, [r7, #12]
 80125d4:	8a5b      	ldrh	r3, [r3, #18]
 80125d6:	1ad3      	subs	r3, r2, r3
 80125d8:	2b00      	cmp	r3, #0
 80125da:	da00      	bge.n	80125de <dhcp_t2_timeout+0x56>
 80125dc:	3301      	adds	r3, #1
 80125de:	105b      	asrs	r3, r3, #1
 80125e0:	b29a      	uxth	r2, r3
 80125e2:	68fb      	ldr	r3, [r7, #12]
 80125e4:	821a      	strh	r2, [r3, #16]
    }
  }
}
 80125e6:	bf00      	nop
 80125e8:	3710      	adds	r7, #16
 80125ea:	46bd      	mov	sp, r7
 80125ec:	bd80      	pop	{r7, pc}
	...

080125f0 <dhcp_handle_ack>:
 *
 * @param netif the netif under DHCP control
 */
static void
dhcp_handle_ack(struct netif *netif, struct dhcp_msg *msg_in)
{
 80125f0:	b580      	push	{r7, lr}
 80125f2:	b084      	sub	sp, #16
 80125f4:	af00      	add	r7, sp, #0
 80125f6:	6078      	str	r0, [r7, #4]
 80125f8:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80125fe:	60fb      	str	r3, [r7, #12]
#if LWIP_DHCP_GET_NTP_SRV
  ip4_addr_t ntp_server_addrs[LWIP_DHCP_MAX_NTP_SERVERS];
#endif

  /* clear options we might not get from the ACK */
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 8012600:	68fb      	ldr	r3, [r7, #12]
 8012602:	2200      	movs	r2, #0
 8012604:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8012606:	68fb      	ldr	r3, [r7, #12]
 8012608:	2200      	movs	r2, #0
 801260a:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* lease time given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_LEASE_TIME)) {
 801260c:	4b26      	ldr	r3, [pc, #152]	; (80126a8 <dhcp_handle_ack+0xb8>)
 801260e:	78db      	ldrb	r3, [r3, #3]
 8012610:	2b00      	cmp	r3, #0
 8012612:	d003      	beq.n	801261c <dhcp_handle_ack+0x2c>
    /* remember offered lease time */
    dhcp->offered_t0_lease = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_LEASE_TIME);
 8012614:	4b25      	ldr	r3, [pc, #148]	; (80126ac <dhcp_handle_ack+0xbc>)
 8012616:	68da      	ldr	r2, [r3, #12]
 8012618:	68fb      	ldr	r3, [r7, #12]
 801261a:	629a      	str	r2, [r3, #40]	; 0x28
  }
  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T1)) {
 801261c:	4b22      	ldr	r3, [pc, #136]	; (80126a8 <dhcp_handle_ack+0xb8>)
 801261e:	791b      	ldrb	r3, [r3, #4]
 8012620:	2b00      	cmp	r3, #0
 8012622:	d004      	beq.n	801262e <dhcp_handle_ack+0x3e>
    /* remember given renewal period */
    dhcp->offered_t1_renew = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T1);
 8012624:	4b21      	ldr	r3, [pc, #132]	; (80126ac <dhcp_handle_ack+0xbc>)
 8012626:	691a      	ldr	r2, [r3, #16]
 8012628:	68fb      	ldr	r3, [r7, #12]
 801262a:	62da      	str	r2, [r3, #44]	; 0x2c
 801262c:	e004      	b.n	8012638 <dhcp_handle_ack+0x48>
  } else {
    /* calculate safe periods for renewal */
    dhcp->offered_t1_renew = dhcp->offered_t0_lease / 2;
 801262e:	68fb      	ldr	r3, [r7, #12]
 8012630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012632:	085a      	lsrs	r2, r3, #1
 8012634:	68fb      	ldr	r3, [r7, #12]
 8012636:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* renewal period given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_T2)) {
 8012638:	4b1b      	ldr	r3, [pc, #108]	; (80126a8 <dhcp_handle_ack+0xb8>)
 801263a:	795b      	ldrb	r3, [r3, #5]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d004      	beq.n	801264a <dhcp_handle_ack+0x5a>
    /* remember given rebind period */
    dhcp->offered_t2_rebind = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_T2);
 8012640:	4b1a      	ldr	r3, [pc, #104]	; (80126ac <dhcp_handle_ack+0xbc>)
 8012642:	695a      	ldr	r2, [r3, #20]
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	631a      	str	r2, [r3, #48]	; 0x30
 8012648:	e007      	b.n	801265a <dhcp_handle_ack+0x6a>
  } else {
    /* calculate safe periods for rebinding (offered_t0_lease * 0.875 -> 87.5%)*/
    dhcp->offered_t2_rebind = (dhcp->offered_t0_lease * 7U) / 8U;
 801264a:	68fb      	ldr	r3, [r7, #12]
 801264c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801264e:	4613      	mov	r3, r2
 8012650:	00db      	lsls	r3, r3, #3
 8012652:	1a9b      	subs	r3, r3, r2
 8012654:	08da      	lsrs	r2, r3, #3
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* (y)our internet address */
  ip4_addr_copy(dhcp->offered_ip_addr, msg_in->yiaddr);
 801265a:	683b      	ldr	r3, [r7, #0]
 801265c:	691a      	ldr	r2, [r3, #16]
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	61da      	str	r2, [r3, #28]
     boot file name copied in dhcp_parse_reply if not overloaded */
  ip4_addr_copy(dhcp->offered_si_addr, msg_in->siaddr);
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* subnet mask given? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)) {
 8012662:	4b11      	ldr	r3, [pc, #68]	; (80126a8 <dhcp_handle_ack+0xb8>)
 8012664:	799b      	ldrb	r3, [r3, #6]
 8012666:	2b00      	cmp	r3, #0
 8012668:	d00b      	beq.n	8012682 <dhcp_handle_ack+0x92>
    /* remember given subnet mask */
    ip4_addr_set_u32(&dhcp->offered_sn_mask, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_SUBNET_MASK)));
 801266a:	4b10      	ldr	r3, [pc, #64]	; (80126ac <dhcp_handle_ack+0xbc>)
 801266c:	699b      	ldr	r3, [r3, #24]
 801266e:	4618      	mov	r0, r3
 8012670:	f7f7 fe7b 	bl	800a36a <lwip_htonl>
 8012674:	4602      	mov	r2, r0
 8012676:	68fb      	ldr	r3, [r7, #12]
 8012678:	621a      	str	r2, [r3, #32]
    dhcp->subnet_mask_given = 1;
 801267a:	68fb      	ldr	r3, [r7, #12]
 801267c:	2201      	movs	r2, #1
 801267e:	71da      	strb	r2, [r3, #7]
 8012680:	e002      	b.n	8012688 <dhcp_handle_ack+0x98>
  } else {
    dhcp->subnet_mask_given = 0;
 8012682:	68fb      	ldr	r3, [r7, #12]
 8012684:	2200      	movs	r2, #0
 8012686:	71da      	strb	r2, [r3, #7]
  }

  /* gateway router */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_ROUTER)) {
 8012688:	4b07      	ldr	r3, [pc, #28]	; (80126a8 <dhcp_handle_ack+0xb8>)
 801268a:	79db      	ldrb	r3, [r3, #7]
 801268c:	2b00      	cmp	r3, #0
 801268e:	d007      	beq.n	80126a0 <dhcp_handle_ack+0xb0>
    ip4_addr_set_u32(&dhcp->offered_gw_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_ROUTER)));
 8012690:	4b06      	ldr	r3, [pc, #24]	; (80126ac <dhcp_handle_ack+0xbc>)
 8012692:	69db      	ldr	r3, [r3, #28]
 8012694:	4618      	mov	r0, r3
 8012696:	f7f7 fe68 	bl	800a36a <lwip_htonl>
 801269a:	4602      	mov	r2, r0
 801269c:	68fb      	ldr	r3, [r7, #12]
 801269e:	625a      	str	r2, [r3, #36]	; 0x24
    ip_addr_t dns_addr;
    ip_addr_set_ip4_u32_val(dns_addr, lwip_htonl(dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_DNS_SERVER + n)));
    dns_setserver(n, &dns_addr);
  }
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
}
 80126a0:	bf00      	nop
 80126a2:	3710      	adds	r7, #16
 80126a4:	46bd      	mov	sp, r7
 80126a6:	bd80      	pop	{r7, pc}
 80126a8:	2000f284 	.word	0x2000f284
 80126ac:	2000f264 	.word	0x2000f264

080126b0 <dhcp_start>:
 * - ERR_OK - No error
 * - ERR_MEM - Out of memory
 */
err_t
dhcp_start(struct netif *netif)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b084      	sub	sp, #16
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp;
  err_t result;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ERROR("netif != NULL", (netif != NULL), return ERR_ARG;);
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	2b00      	cmp	r3, #0
 80126bc:	d109      	bne.n	80126d2 <dhcp_start+0x22>
 80126be:	4b37      	ldr	r3, [pc, #220]	; (801279c <dhcp_start+0xec>)
 80126c0:	f240 22e7 	movw	r2, #743	; 0x2e7
 80126c4:	4936      	ldr	r1, [pc, #216]	; (80127a0 <dhcp_start+0xf0>)
 80126c6:	4837      	ldr	r0, [pc, #220]	; (80127a4 <dhcp_start+0xf4>)
 80126c8:	f004 f8ba 	bl	8016840 <iprintf>
 80126cc:	f06f 030f 	mvn.w	r3, #15
 80126d0:	e060      	b.n	8012794 <dhcp_start+0xe4>
  LWIP_ERROR("netif is not up, old style port?", netif_is_up(netif), return ERR_ARG;);
 80126d2:	687b      	ldr	r3, [r7, #4]
 80126d4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80126d8:	f003 0301 	and.w	r3, r3, #1
 80126dc:	2b00      	cmp	r3, #0
 80126de:	d109      	bne.n	80126f4 <dhcp_start+0x44>
 80126e0:	4b2e      	ldr	r3, [pc, #184]	; (801279c <dhcp_start+0xec>)
 80126e2:	f44f 723a 	mov.w	r2, #744	; 0x2e8
 80126e6:	4930      	ldr	r1, [pc, #192]	; (80127a8 <dhcp_start+0xf8>)
 80126e8:	482e      	ldr	r0, [pc, #184]	; (80127a4 <dhcp_start+0xf4>)
 80126ea:	f004 f8a9 	bl	8016840 <iprintf>
 80126ee:	f06f 030f 	mvn.w	r3, #15
 80126f2:	e04f      	b.n	8012794 <dhcp_start+0xe4>
  dhcp = netif_dhcp_data(netif);
 80126f4:	687b      	ldr	r3, [r7, #4]
 80126f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80126f8:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* check MTU of the netif */
  if (netif->mtu < DHCP_MAX_MSG_LEN_MIN_REQUIRED) {
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80126fe:	f5b3 7f10 	cmp.w	r3, #576	; 0x240
 8012702:	d202      	bcs.n	801270a <dhcp_start+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): Cannot use this netif with DHCP: MTU is too small\n"));
    return ERR_MEM;
 8012704:	f04f 33ff 	mov.w	r3, #4294967295
 8012708:	e044      	b.n	8012794 <dhcp_start+0xe4>
  }

  /* no DHCP client attached yet? */
  if (dhcp == NULL) {
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	2b00      	cmp	r3, #0
 801270e:	d10d      	bne.n	801272c <dhcp_start+0x7c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): mallocing new DHCP client\n"));
    dhcp = (struct dhcp *)mem_malloc(sizeof(struct dhcp));
 8012710:	2034      	movs	r0, #52	; 0x34
 8012712:	f7f8 f949 	bl	800a9a8 <mem_malloc>
 8012716:	60f8      	str	r0, [r7, #12]
    if (dhcp == NULL) {
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	2b00      	cmp	r3, #0
 801271c:	d102      	bne.n	8012724 <dhcp_start+0x74>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): could not allocate dhcp\n"));
      return ERR_MEM;
 801271e:	f04f 33ff 	mov.w	r3, #4294967295
 8012722:	e037      	b.n	8012794 <dhcp_start+0xe4>
    }

    /* store this dhcp client in the netif */
    netif_set_client_data(netif, LWIP_NETIF_CLIENT_DATA_INDEX_DHCP, dhcp);
 8012724:	687b      	ldr	r3, [r7, #4]
 8012726:	68fa      	ldr	r2, [r7, #12]
 8012728:	625a      	str	r2, [r3, #36]	; 0x24
 801272a:	e005      	b.n	8012738 <dhcp_start+0x88>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): allocated dhcp"));
    /* already has DHCP client attached */
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_start(): restarting DHCP configuration\n"));

    if (dhcp->pcb_allocated != 0) {
 801272c:	68fb      	ldr	r3, [r7, #12]
 801272e:	791b      	ldrb	r3, [r3, #4]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d001      	beq.n	8012738 <dhcp_start+0x88>
      dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 8012734:	f7ff fc90 	bl	8012058 <dhcp_dec_pcb_refcount>
    }
    /* dhcp is cleared below, no need to reset flag*/
  }

  /* clear data structure */
  memset(dhcp, 0, sizeof(struct dhcp));
 8012738:	2234      	movs	r2, #52	; 0x34
 801273a:	2100      	movs	r1, #0
 801273c:	68f8      	ldr	r0, [r7, #12]
 801273e:	f003 ffe2 	bl	8016706 <memset>
  /* dhcp_set_state(&dhcp, DHCP_STATE_OFF); */

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_start(): starting DHCP configuration\n"));

  if (dhcp_inc_pcb_refcount() != ERR_OK) { /* ensure DHCP PCB is allocated */
 8012742:	f7ff fc37 	bl	8011fb4 <dhcp_inc_pcb_refcount>
 8012746:	4603      	mov	r3, r0
 8012748:	2b00      	cmp	r3, #0
 801274a:	d002      	beq.n	8012752 <dhcp_start+0xa2>
    return ERR_MEM;
 801274c:	f04f 33ff 	mov.w	r3, #4294967295
 8012750:	e020      	b.n	8012794 <dhcp_start+0xe4>
  }
  dhcp->pcb_allocated = 1;
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	2201      	movs	r2, #1
 8012756:	711a      	strb	r2, [r3, #4]

  if (!netif_is_link_up(netif)) {
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801275e:	f003 0304 	and.w	r3, r3, #4
 8012762:	2b00      	cmp	r3, #0
 8012764:	d105      	bne.n	8012772 <dhcp_start+0xc2>
    /* set state INIT and wait for dhcp_network_changed() to call dhcp_discover() */
    dhcp_set_state(dhcp, DHCP_STATE_INIT);
 8012766:	2102      	movs	r1, #2
 8012768:	68f8      	ldr	r0, [r7, #12]
 801276a:	f000 fd01 	bl	8013170 <dhcp_set_state>
    return ERR_OK;
 801276e:	2300      	movs	r3, #0
 8012770:	e010      	b.n	8012794 <dhcp_start+0xe4>
  }

  /* (re)start the DHCP negotiation */
  result = dhcp_discover(netif);
 8012772:	6878      	ldr	r0, [r7, #4]
 8012774:	f000 f8f8 	bl	8012968 <dhcp_discover>
 8012778:	4603      	mov	r3, r0
 801277a:	72fb      	strb	r3, [r7, #11]
  if (result != ERR_OK) {
 801277c:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8012780:	2b00      	cmp	r3, #0
 8012782:	d005      	beq.n	8012790 <dhcp_start+0xe0>
    /* free resources allocated above */
    dhcp_release_and_stop(netif);
 8012784:	6878      	ldr	r0, [r7, #4]
 8012786:	f000 fc59 	bl	801303c <dhcp_release_and_stop>
    return ERR_MEM;
 801278a:	f04f 33ff 	mov.w	r3, #4294967295
 801278e:	e001      	b.n	8012794 <dhcp_start+0xe4>
  }
  return result;
 8012790:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012794:	4618      	mov	r0, r3
 8012796:	3710      	adds	r7, #16
 8012798:	46bd      	mov	sp, r7
 801279a:	bd80      	pop	{r7, pc}
 801279c:	08019afc 	.word	0x08019afc
 80127a0:	08019be0 	.word	0x08019be0
 80127a4:	08019b5c 	.word	0x08019b5c
 80127a8:	08019c24 	.word	0x08019c24

080127ac <dhcp_network_changed>:
 * This enters the REBOOTING state to verify that the currently bound
 * address is still valid.
 */
void
dhcp_network_changed(struct netif *netif)
{
 80127ac:	b580      	push	{r7, lr}
 80127ae:	b084      	sub	sp, #16
 80127b0:	af00      	add	r7, sp, #0
 80127b2:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 80127b4:	687b      	ldr	r3, [r7, #4]
 80127b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80127b8:	60fb      	str	r3, [r7, #12]

  if (!dhcp) {
 80127ba:	68fb      	ldr	r3, [r7, #12]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d025      	beq.n	801280c <dhcp_network_changed+0x60>
    return;
  }
  switch (dhcp->state) {
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	795b      	ldrb	r3, [r3, #5]
 80127c4:	2b0a      	cmp	r3, #10
 80127c6:	d008      	beq.n	80127da <dhcp_network_changed+0x2e>
 80127c8:	2b0a      	cmp	r3, #10
 80127ca:	dc0d      	bgt.n	80127e8 <dhcp_network_changed+0x3c>
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d01f      	beq.n	8012810 <dhcp_network_changed+0x64>
 80127d0:	2b00      	cmp	r3, #0
 80127d2:	db09      	blt.n	80127e8 <dhcp_network_changed+0x3c>
 80127d4:	3b03      	subs	r3, #3
 80127d6:	2b02      	cmp	r3, #2
 80127d8:	d806      	bhi.n	80127e8 <dhcp_network_changed+0x3c>
    case DHCP_STATE_REBINDING:
    case DHCP_STATE_RENEWING:
    case DHCP_STATE_BOUND:
    case DHCP_STATE_REBOOTING:
      dhcp->tries = 0;
 80127da:	68fb      	ldr	r3, [r7, #12]
 80127dc:	2200      	movs	r2, #0
 80127de:	719a      	strb	r2, [r3, #6]
      dhcp_reboot(netif);
 80127e0:	6878      	ldr	r0, [r7, #4]
 80127e2:	f000 fb75 	bl	8012ed0 <dhcp_reboot>
      break;
 80127e6:	e014      	b.n	8012812 <dhcp_network_changed+0x66>
    case DHCP_STATE_OFF:
      /* stay off */
      break;
    default:
      LWIP_ASSERT("invalid dhcp->state", dhcp->state <= DHCP_STATE_BACKING_OFF);
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	795b      	ldrb	r3, [r3, #5]
 80127ec:	2b0c      	cmp	r3, #12
 80127ee:	d906      	bls.n	80127fe <dhcp_network_changed+0x52>
 80127f0:	4b09      	ldr	r3, [pc, #36]	; (8012818 <dhcp_network_changed+0x6c>)
 80127f2:	f240 326d 	movw	r2, #877	; 0x36d
 80127f6:	4909      	ldr	r1, [pc, #36]	; (801281c <dhcp_network_changed+0x70>)
 80127f8:	4809      	ldr	r0, [pc, #36]	; (8012820 <dhcp_network_changed+0x74>)
 80127fa:	f004 f821 	bl	8016840 <iprintf>
        autoip_stop(netif);
        dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
      }
#endif /* LWIP_DHCP_AUTOIP_COOP */
      /* ensure we start with short timeouts, even if already discovering */
      dhcp->tries = 0;
 80127fe:	68fb      	ldr	r3, [r7, #12]
 8012800:	2200      	movs	r2, #0
 8012802:	719a      	strb	r2, [r3, #6]
      dhcp_discover(netif);
 8012804:	6878      	ldr	r0, [r7, #4]
 8012806:	f000 f8af 	bl	8012968 <dhcp_discover>
      break;
 801280a:	e002      	b.n	8012812 <dhcp_network_changed+0x66>
    return;
 801280c:	bf00      	nop
 801280e:	e000      	b.n	8012812 <dhcp_network_changed+0x66>
      break;
 8012810:	bf00      	nop
  }
}
 8012812:	3710      	adds	r7, #16
 8012814:	46bd      	mov	sp, r7
 8012816:	bd80      	pop	{r7, pc}
 8012818:	08019afc 	.word	0x08019afc
 801281c:	08019c48 	.word	0x08019c48
 8012820:	08019b5c 	.word	0x08019b5c

08012824 <dhcp_arp_reply>:
 * @param netif the network interface on which the reply was received
 * @param addr The IP address we received a reply from
 */
void
dhcp_arp_reply(struct netif *netif, const ip4_addr_t *addr)
{
 8012824:	b580      	push	{r7, lr}
 8012826:	b084      	sub	sp, #16
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
 801282c:	6039      	str	r1, [r7, #0]
  struct dhcp *dhcp;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801282e:	687b      	ldr	r3, [r7, #4]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d107      	bne.n	8012844 <dhcp_arp_reply+0x20>
 8012834:	4b0e      	ldr	r3, [pc, #56]	; (8012870 <dhcp_arp_reply+0x4c>)
 8012836:	f240 328b 	movw	r2, #907	; 0x38b
 801283a:	490e      	ldr	r1, [pc, #56]	; (8012874 <dhcp_arp_reply+0x50>)
 801283c:	480e      	ldr	r0, [pc, #56]	; (8012878 <dhcp_arp_reply+0x54>)
 801283e:	f003 ffff 	bl	8016840 <iprintf>
 8012842:	e012      	b.n	801286a <dhcp_arp_reply+0x46>
  dhcp = netif_dhcp_data(netif);
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012848:	60fb      	str	r3, [r7, #12]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_arp_reply()\n"));
  /* is a DHCP client doing an ARP check? */
  if ((dhcp != NULL) && (dhcp->state == DHCP_STATE_CHECKING)) {
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	2b00      	cmp	r3, #0
 801284e:	d00c      	beq.n	801286a <dhcp_arp_reply+0x46>
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	795b      	ldrb	r3, [r3, #5]
 8012854:	2b08      	cmp	r3, #8
 8012856:	d108      	bne.n	801286a <dhcp_arp_reply+0x46>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_arp_reply(): CHECKING, arp reply for 0x%08"X32_F"\n",
                ip4_addr_get_u32(addr)));
    /* did a host respond with the address we
       were offered by the DHCP server? */
    if (ip4_addr_cmp(addr, &dhcp->offered_ip_addr)) {
 8012858:	683b      	ldr	r3, [r7, #0]
 801285a:	681a      	ldr	r2, [r3, #0]
 801285c:	68fb      	ldr	r3, [r7, #12]
 801285e:	69db      	ldr	r3, [r3, #28]
 8012860:	429a      	cmp	r2, r3
 8012862:	d102      	bne.n	801286a <dhcp_arp_reply+0x46>
      /* we will not accept the offered address */
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE | LWIP_DBG_LEVEL_WARNING,
                  ("dhcp_arp_reply(): arp reply matched with offered address, declining\n"));
      dhcp_decline(netif);
 8012864:	6878      	ldr	r0, [r7, #4]
 8012866:	f000 f809 	bl	801287c <dhcp_decline>
    }
  }
}
 801286a:	3710      	adds	r7, #16
 801286c:	46bd      	mov	sp, r7
 801286e:	bd80      	pop	{r7, pc}
 8012870:	08019afc 	.word	0x08019afc
 8012874:	08019be0 	.word	0x08019be0
 8012878:	08019b5c 	.word	0x08019b5c

0801287c <dhcp_decline>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_decline(struct netif *netif)
{
 801287c:	b5b0      	push	{r4, r5, r7, lr}
 801287e:	b08a      	sub	sp, #40	; 0x28
 8012880:	af02      	add	r7, sp, #8
 8012882:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012884:	687b      	ldr	r3, [r7, #4]
 8012886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012888:	61bb      	str	r3, [r7, #24]
  u16_t msecs;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_BACKING_OFF);
 801288a:	210c      	movs	r1, #12
 801288c:	69b8      	ldr	r0, [r7, #24]
 801288e:	f000 fc6f 	bl	8013170 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DECLINE, &options_out_len);
 8012892:	f107 030c 	add.w	r3, r7, #12
 8012896:	2204      	movs	r2, #4
 8012898:	69b9      	ldr	r1, [r7, #24]
 801289a:	6878      	ldr	r0, [r7, #4]
 801289c:	f001 f8f4 	bl	8013a88 <dhcp_create_msg>
 80128a0:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 80128a2:	697b      	ldr	r3, [r7, #20]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d035      	beq.n	8012914 <dhcp_decline+0x98>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80128a8:	697b      	ldr	r3, [r7, #20]
 80128aa:	685b      	ldr	r3, [r3, #4]
 80128ac:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 80128ae:	89b8      	ldrh	r0, [r7, #12]
 80128b0:	693b      	ldr	r3, [r7, #16]
 80128b2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80128b6:	2304      	movs	r3, #4
 80128b8:	2232      	movs	r2, #50	; 0x32
 80128ba:	f000 fc73 	bl	80131a4 <dhcp_option>
 80128be:	4603      	mov	r3, r0
 80128c0:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 80128c2:	89bc      	ldrh	r4, [r7, #12]
 80128c4:	693b      	ldr	r3, [r7, #16]
 80128c6:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80128ca:	69bb      	ldr	r3, [r7, #24]
 80128cc:	69db      	ldr	r3, [r3, #28]
 80128ce:	4618      	mov	r0, r3
 80128d0:	f7f7 fd4b 	bl	800a36a <lwip_htonl>
 80128d4:	4603      	mov	r3, r0
 80128d6:	461a      	mov	r2, r3
 80128d8:	4629      	mov	r1, r5
 80128da:	4620      	mov	r0, r4
 80128dc:	f000 fcee 	bl	80132bc <dhcp_option_long>
 80128e0:	4603      	mov	r3, r0
 80128e2:	81bb      	strh	r3, [r7, #12]

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_BACKING_OFF, msg_out, DHCP_DECLINE, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 80128e4:	89b8      	ldrh	r0, [r7, #12]
 80128e6:	693b      	ldr	r3, [r7, #16]
 80128e8:	33f0      	adds	r3, #240	; 0xf0
 80128ea:	697a      	ldr	r2, [r7, #20]
 80128ec:	4619      	mov	r1, r3
 80128ee:	f001 f9a1 	bl	8013c34 <dhcp_option_trailer>

    /* per section 4.4.4, broadcast DECLINE messages */
    result = udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 80128f2:	4b19      	ldr	r3, [pc, #100]	; (8012958 <dhcp_decline+0xdc>)
 80128f4:	6818      	ldr	r0, [r3, #0]
 80128f6:	4b19      	ldr	r3, [pc, #100]	; (801295c <dhcp_decline+0xe0>)
 80128f8:	9301      	str	r3, [sp, #4]
 80128fa:	687b      	ldr	r3, [r7, #4]
 80128fc:	9300      	str	r3, [sp, #0]
 80128fe:	2343      	movs	r3, #67	; 0x43
 8012900:	4a17      	ldr	r2, [pc, #92]	; (8012960 <dhcp_decline+0xe4>)
 8012902:	6979      	ldr	r1, [r7, #20]
 8012904:	f7ff f8d0 	bl	8011aa8 <udp_sendto_if_src>
 8012908:	4603      	mov	r3, r0
 801290a:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 801290c:	6978      	ldr	r0, [r7, #20]
 801290e:	f7f9 f915 	bl	800bb3c <pbuf_free>
 8012912:	e001      	b.n	8012918 <dhcp_decline+0x9c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_decline: BACKING OFF\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_decline: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012914:	23ff      	movs	r3, #255	; 0xff
 8012916:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012918:	69bb      	ldr	r3, [r7, #24]
 801291a:	799b      	ldrb	r3, [r3, #6]
 801291c:	2bff      	cmp	r3, #255	; 0xff
 801291e:	d005      	beq.n	801292c <dhcp_decline+0xb0>
    dhcp->tries++;
 8012920:	69bb      	ldr	r3, [r7, #24]
 8012922:	799b      	ldrb	r3, [r3, #6]
 8012924:	3301      	adds	r3, #1
 8012926:	b2da      	uxtb	r2, r3
 8012928:	69bb      	ldr	r3, [r7, #24]
 801292a:	719a      	strb	r2, [r3, #6]
  }
  msecs = 10 * 1000;
 801292c:	f242 7310 	movw	r3, #10000	; 0x2710
 8012930:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012932:	89fb      	ldrh	r3, [r7, #14]
 8012934:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012938:	4a0a      	ldr	r2, [pc, #40]	; (8012964 <dhcp_decline+0xe8>)
 801293a:	fb82 1203 	smull	r1, r2, r2, r3
 801293e:	1152      	asrs	r2, r2, #5
 8012940:	17db      	asrs	r3, r3, #31
 8012942:	1ad3      	subs	r3, r2, r3
 8012944:	b29a      	uxth	r2, r3
 8012946:	69bb      	ldr	r3, [r7, #24]
 8012948:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_decline(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801294a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801294e:	4618      	mov	r0, r3
 8012950:	3720      	adds	r7, #32
 8012952:	46bd      	mov	sp, r7
 8012954:	bdb0      	pop	{r4, r5, r7, pc}
 8012956:	bf00      	nop
 8012958:	2000f28c 	.word	0x2000f28c
 801295c:	0801a6c8 	.word	0x0801a6c8
 8012960:	0801a6cc 	.word	0x0801a6cc
 8012964:	10624dd3 	.word	0x10624dd3

08012968 <dhcp_discover>:
 *
 * @param netif the netif under DHCP control
 */
static err_t
dhcp_discover(struct netif *netif)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b08a      	sub	sp, #40	; 0x28
 801296c:	af02      	add	r7, sp, #8
 801296e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012970:	687b      	ldr	r3, [r7, #4]
 8012972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012974:	61bb      	str	r3, [r7, #24]
  err_t result = ERR_OK;
 8012976:	2300      	movs	r3, #0
 8012978:	75fb      	strb	r3, [r7, #23]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover()\n"));

  ip4_addr_set_any(&dhcp->offered_ip_addr);
 801297a:	69bb      	ldr	r3, [r7, #24]
 801297c:	2200      	movs	r2, #0
 801297e:	61da      	str	r2, [r3, #28]
  dhcp_set_state(dhcp, DHCP_STATE_SELECTING);
 8012980:	2106      	movs	r1, #6
 8012982:	69b8      	ldr	r0, [r7, #24]
 8012984:	f000 fbf4 	bl	8013170 <dhcp_set_state>
  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_DISCOVER, &options_out_len);
 8012988:	f107 0308 	add.w	r3, r7, #8
 801298c:	2201      	movs	r2, #1
 801298e:	69b9      	ldr	r1, [r7, #24]
 8012990:	6878      	ldr	r0, [r7, #4]
 8012992:	f001 f879 	bl	8013a88 <dhcp_create_msg>
 8012996:	6138      	str	r0, [r7, #16]
  if (p_out != NULL) {
 8012998:	693b      	ldr	r3, [r7, #16]
 801299a:	2b00      	cmp	r3, #0
 801299c:	d04b      	beq.n	8012a36 <dhcp_discover+0xce>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	685b      	ldr	r3, [r3, #4]
 80129a2:	60fb      	str	r3, [r7, #12]
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: making request\n"));

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 80129a4:	8938      	ldrh	r0, [r7, #8]
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80129ac:	2302      	movs	r3, #2
 80129ae:	2239      	movs	r2, #57	; 0x39
 80129b0:	f000 fbf8 	bl	80131a4 <dhcp_option>
 80129b4:	4603      	mov	r3, r0
 80129b6:	813b      	strh	r3, [r7, #8]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 80129b8:	8938      	ldrh	r0, [r7, #8]
 80129ba:	68fb      	ldr	r3, [r7, #12]
 80129bc:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80129c0:	687b      	ldr	r3, [r7, #4]
 80129c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80129c4:	461a      	mov	r2, r3
 80129c6:	f000 fc47 	bl	8013258 <dhcp_option_short>
 80129ca:	4603      	mov	r3, r0
 80129cc:	813b      	strh	r3, [r7, #8]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 80129ce:	8938      	ldrh	r0, [r7, #8]
 80129d0:	68fb      	ldr	r3, [r7, #12]
 80129d2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80129d6:	2303      	movs	r3, #3
 80129d8:	2237      	movs	r2, #55	; 0x37
 80129da:	f000 fbe3 	bl	80131a4 <dhcp_option>
 80129de:	4603      	mov	r3, r0
 80129e0:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 80129e2:	2300      	movs	r3, #0
 80129e4:	77fb      	strb	r3, [r7, #31]
 80129e6:	e00e      	b.n	8012a06 <dhcp_discover+0x9e>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 80129e8:	8938      	ldrh	r0, [r7, #8]
 80129ea:	68fb      	ldr	r3, [r7, #12]
 80129ec:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80129f0:	7ffb      	ldrb	r3, [r7, #31]
 80129f2:	4a29      	ldr	r2, [pc, #164]	; (8012a98 <dhcp_discover+0x130>)
 80129f4:	5cd3      	ldrb	r3, [r2, r3]
 80129f6:	461a      	mov	r2, r3
 80129f8:	f000 fc08 	bl	801320c <dhcp_option_byte>
 80129fc:	4603      	mov	r3, r0
 80129fe:	813b      	strh	r3, [r7, #8]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012a00:	7ffb      	ldrb	r3, [r7, #31]
 8012a02:	3301      	adds	r3, #1
 8012a04:	77fb      	strb	r3, [r7, #31]
 8012a06:	7ffb      	ldrb	r3, [r7, #31]
 8012a08:	2b02      	cmp	r3, #2
 8012a0a:	d9ed      	bls.n	80129e8 <dhcp_discover+0x80>
    }
    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_SELECTING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012a0c:	8938      	ldrh	r0, [r7, #8]
 8012a0e:	68fb      	ldr	r3, [r7, #12]
 8012a10:	33f0      	adds	r3, #240	; 0xf0
 8012a12:	693a      	ldr	r2, [r7, #16]
 8012a14:	4619      	mov	r1, r3
 8012a16:	f001 f90d 	bl	8013c34 <dhcp_option_trailer>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: sendto(DISCOVER, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER)\n"));
    udp_sendto_if_src(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif, IP4_ADDR_ANY);
 8012a1a:	4b20      	ldr	r3, [pc, #128]	; (8012a9c <dhcp_discover+0x134>)
 8012a1c:	6818      	ldr	r0, [r3, #0]
 8012a1e:	4b20      	ldr	r3, [pc, #128]	; (8012aa0 <dhcp_discover+0x138>)
 8012a20:	9301      	str	r3, [sp, #4]
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	9300      	str	r3, [sp, #0]
 8012a26:	2343      	movs	r3, #67	; 0x43
 8012a28:	4a1e      	ldr	r2, [pc, #120]	; (8012aa4 <dhcp_discover+0x13c>)
 8012a2a:	6939      	ldr	r1, [r7, #16]
 8012a2c:	f7ff f83c 	bl	8011aa8 <udp_sendto_if_src>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_discover: deleting()ing\n"));
    pbuf_free(p_out);
 8012a30:	6938      	ldr	r0, [r7, #16]
 8012a32:	f7f9 f883 	bl	800bb3c <pbuf_free>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover: SELECTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_discover: could not allocate DHCP request\n"));
  }
  if (dhcp->tries < 255) {
 8012a36:	69bb      	ldr	r3, [r7, #24]
 8012a38:	799b      	ldrb	r3, [r3, #6]
 8012a3a:	2bff      	cmp	r3, #255	; 0xff
 8012a3c:	d005      	beq.n	8012a4a <dhcp_discover+0xe2>
    dhcp->tries++;
 8012a3e:	69bb      	ldr	r3, [r7, #24]
 8012a40:	799b      	ldrb	r3, [r3, #6]
 8012a42:	3301      	adds	r3, #1
 8012a44:	b2da      	uxtb	r2, r3
 8012a46:	69bb      	ldr	r3, [r7, #24]
 8012a48:	719a      	strb	r2, [r3, #6]
  if (dhcp->tries >= LWIP_DHCP_AUTOIP_COOP_TRIES && dhcp->autoip_coop_state == DHCP_AUTOIP_COOP_STATE_OFF) {
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_ON;
    autoip_start(netif);
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */
  msecs = (u16_t)((dhcp->tries < 6 ? 1 << dhcp->tries : 60) * 1000);
 8012a4a:	69bb      	ldr	r3, [r7, #24]
 8012a4c:	799b      	ldrb	r3, [r3, #6]
 8012a4e:	2b05      	cmp	r3, #5
 8012a50:	d80d      	bhi.n	8012a6e <dhcp_discover+0x106>
 8012a52:	69bb      	ldr	r3, [r7, #24]
 8012a54:	799b      	ldrb	r3, [r3, #6]
 8012a56:	461a      	mov	r2, r3
 8012a58:	2301      	movs	r3, #1
 8012a5a:	4093      	lsls	r3, r2
 8012a5c:	b29b      	uxth	r3, r3
 8012a5e:	461a      	mov	r2, r3
 8012a60:	0152      	lsls	r2, r2, #5
 8012a62:	1ad2      	subs	r2, r2, r3
 8012a64:	0092      	lsls	r2, r2, #2
 8012a66:	4413      	add	r3, r2
 8012a68:	00db      	lsls	r3, r3, #3
 8012a6a:	b29b      	uxth	r3, r3
 8012a6c:	e001      	b.n	8012a72 <dhcp_discover+0x10a>
 8012a6e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8012a72:	817b      	strh	r3, [r7, #10]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012a74:	897b      	ldrh	r3, [r7, #10]
 8012a76:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012a7a:	4a0b      	ldr	r2, [pc, #44]	; (8012aa8 <dhcp_discover+0x140>)
 8012a7c:	fb82 1203 	smull	r1, r2, r2, r3
 8012a80:	1152      	asrs	r2, r2, #5
 8012a82:	17db      	asrs	r3, r3, #31
 8012a84:	1ad3      	subs	r3, r2, r3
 8012a86:	b29a      	uxth	r2, r3
 8012a88:	69bb      	ldr	r3, [r7, #24]
 8012a8a:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_discover(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012a8c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8012a90:	4618      	mov	r0, r3
 8012a92:	3720      	adds	r7, #32
 8012a94:	46bd      	mov	sp, r7
 8012a96:	bd80      	pop	{r7, pc}
 8012a98:	20000030 	.word	0x20000030
 8012a9c:	2000f28c 	.word	0x2000f28c
 8012aa0:	0801a6c8 	.word	0x0801a6c8
 8012aa4:	0801a6cc 	.word	0x0801a6cc
 8012aa8:	10624dd3 	.word	0x10624dd3

08012aac <dhcp_bind>:
 *
 * @param netif network interface to bind to the offered address
 */
static void
dhcp_bind(struct netif *netif)
{
 8012aac:	b580      	push	{r7, lr}
 8012aae:	b088      	sub	sp, #32
 8012ab0:	af00      	add	r7, sp, #0
 8012ab2:	6078      	str	r0, [r7, #4]
  u32_t timeout;
  struct dhcp *dhcp;
  ip4_addr_t sn_mask, gw_addr;
  LWIP_ERROR("dhcp_bind: netif != NULL", (netif != NULL), return;);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d107      	bne.n	8012aca <dhcp_bind+0x1e>
 8012aba:	4b64      	ldr	r3, [pc, #400]	; (8012c4c <dhcp_bind+0x1a0>)
 8012abc:	f240 4215 	movw	r2, #1045	; 0x415
 8012ac0:	4963      	ldr	r1, [pc, #396]	; (8012c50 <dhcp_bind+0x1a4>)
 8012ac2:	4864      	ldr	r0, [pc, #400]	; (8012c54 <dhcp_bind+0x1a8>)
 8012ac4:	f003 febc 	bl	8016840 <iprintf>
 8012ac8:	e0bc      	b.n	8012c44 <dhcp_bind+0x198>
  dhcp = netif_dhcp_data(netif);
 8012aca:	687b      	ldr	r3, [r7, #4]
 8012acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012ace:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("dhcp_bind: dhcp != NULL", (dhcp != NULL), return;);
 8012ad0:	69bb      	ldr	r3, [r7, #24]
 8012ad2:	2b00      	cmp	r3, #0
 8012ad4:	d107      	bne.n	8012ae6 <dhcp_bind+0x3a>
 8012ad6:	4b5d      	ldr	r3, [pc, #372]	; (8012c4c <dhcp_bind+0x1a0>)
 8012ad8:	f240 4217 	movw	r2, #1047	; 0x417
 8012adc:	495e      	ldr	r1, [pc, #376]	; (8012c58 <dhcp_bind+0x1ac>)
 8012ade:	485d      	ldr	r0, [pc, #372]	; (8012c54 <dhcp_bind+0x1a8>)
 8012ae0:	f003 feae 	bl	8016840 <iprintf>
 8012ae4:	e0ae      	b.n	8012c44 <dhcp_bind+0x198>
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(netif=%p) %c%c%"U16_F"\n", (void *)netif, netif->name[0], netif->name[1], (u16_t)netif->num));

  /* reset time used of lease */
  dhcp->lease_used = 0;
 8012ae6:	69bb      	ldr	r3, [r7, #24]
 8012ae8:	2200      	movs	r2, #0
 8012aea:	825a      	strh	r2, [r3, #18]

  if (dhcp->offered_t0_lease != 0xffffffffUL) {
 8012aec:	69bb      	ldr	r3, [r7, #24]
 8012aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012af4:	d019      	beq.n	8012b2a <dhcp_bind+0x7e>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t0 renewal timer %"U32_F" secs\n", dhcp->offered_t0_lease));
    timeout = (dhcp->offered_t0_lease + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012af6:	69bb      	ldr	r3, [r7, #24]
 8012af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012afa:	331e      	adds	r3, #30
 8012afc:	4a57      	ldr	r2, [pc, #348]	; (8012c5c <dhcp_bind+0x1b0>)
 8012afe:	fba2 2303 	umull	r2, r3, r2, r3
 8012b02:	095b      	lsrs	r3, r3, #5
 8012b04:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012b06:	69fb      	ldr	r3, [r7, #28]
 8012b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b0c:	d302      	bcc.n	8012b14 <dhcp_bind+0x68>
      timeout = 0xffff;
 8012b0e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012b12:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t0_timeout = (u16_t)timeout;
 8012b14:	69fb      	ldr	r3, [r7, #28]
 8012b16:	b29a      	uxth	r2, r3
 8012b18:	69bb      	ldr	r3, [r7, #24]
 8012b1a:	829a      	strh	r2, [r3, #20]
    if (dhcp->t0_timeout == 0) {
 8012b1c:	69bb      	ldr	r3, [r7, #24]
 8012b1e:	8a9b      	ldrh	r3, [r3, #20]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d102      	bne.n	8012b2a <dhcp_bind+0x7e>
      dhcp->t0_timeout = 1;
 8012b24:	69bb      	ldr	r3, [r7, #24]
 8012b26:	2201      	movs	r2, #1
 8012b28:	829a      	strh	r2, [r3, #20]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t0_lease * 1000));
  }

  /* temporary DHCP lease? */
  if (dhcp->offered_t1_renew != 0xffffffffUL) {
 8012b2a:	69bb      	ldr	r3, [r7, #24]
 8012b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b32:	d01d      	beq.n	8012b70 <dhcp_bind+0xc4>
    /* set renewal period timer */
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t1 renewal timer %"U32_F" secs\n", dhcp->offered_t1_renew));
    timeout = (dhcp->offered_t1_renew + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012b34:	69bb      	ldr	r3, [r7, #24]
 8012b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b38:	331e      	adds	r3, #30
 8012b3a:	4a48      	ldr	r2, [pc, #288]	; (8012c5c <dhcp_bind+0x1b0>)
 8012b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8012b40:	095b      	lsrs	r3, r3, #5
 8012b42:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012b44:	69fb      	ldr	r3, [r7, #28]
 8012b46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b4a:	d302      	bcc.n	8012b52 <dhcp_bind+0xa6>
      timeout = 0xffff;
 8012b4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012b50:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t1_timeout = (u16_t)timeout;
 8012b52:	69fb      	ldr	r3, [r7, #28]
 8012b54:	b29a      	uxth	r2, r3
 8012b56:	69bb      	ldr	r3, [r7, #24]
 8012b58:	815a      	strh	r2, [r3, #10]
    if (dhcp->t1_timeout == 0) {
 8012b5a:	69bb      	ldr	r3, [r7, #24]
 8012b5c:	895b      	ldrh	r3, [r3, #10]
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d102      	bne.n	8012b68 <dhcp_bind+0xbc>
      dhcp->t1_timeout = 1;
 8012b62:	69bb      	ldr	r3, [r7, #24]
 8012b64:	2201      	movs	r2, #1
 8012b66:	815a      	strh	r2, [r3, #10]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t1_renew * 1000));
    dhcp->t1_renew_time = dhcp->t1_timeout;
 8012b68:	69bb      	ldr	r3, [r7, #24]
 8012b6a:	895a      	ldrh	r2, [r3, #10]
 8012b6c:	69bb      	ldr	r3, [r7, #24]
 8012b6e:	81da      	strh	r2, [r3, #14]
  }
  /* set renewal period timer */
  if (dhcp->offered_t2_rebind != 0xffffffffUL) {
 8012b70:	69bb      	ldr	r3, [r7, #24]
 8012b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012b78:	d01d      	beq.n	8012bb6 <dhcp_bind+0x10a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_bind(): t2 rebind timer %"U32_F" secs\n", dhcp->offered_t2_rebind));
    timeout = (dhcp->offered_t2_rebind + DHCP_COARSE_TIMER_SECS / 2) / DHCP_COARSE_TIMER_SECS;
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b7e:	331e      	adds	r3, #30
 8012b80:	4a36      	ldr	r2, [pc, #216]	; (8012c5c <dhcp_bind+0x1b0>)
 8012b82:	fba2 2303 	umull	r2, r3, r2, r3
 8012b86:	095b      	lsrs	r3, r3, #5
 8012b88:	61fb      	str	r3, [r7, #28]
    if (timeout > 0xffff) {
 8012b8a:	69fb      	ldr	r3, [r7, #28]
 8012b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012b90:	d302      	bcc.n	8012b98 <dhcp_bind+0xec>
      timeout = 0xffff;
 8012b92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012b96:	61fb      	str	r3, [r7, #28]
    }
    dhcp->t2_timeout = (u16_t)timeout;
 8012b98:	69fb      	ldr	r3, [r7, #28]
 8012b9a:	b29a      	uxth	r2, r3
 8012b9c:	69bb      	ldr	r3, [r7, #24]
 8012b9e:	819a      	strh	r2, [r3, #12]
    if (dhcp->t2_timeout == 0) {
 8012ba0:	69bb      	ldr	r3, [r7, #24]
 8012ba2:	899b      	ldrh	r3, [r3, #12]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d102      	bne.n	8012bae <dhcp_bind+0x102>
      dhcp->t2_timeout = 1;
 8012ba8:	69bb      	ldr	r3, [r7, #24]
 8012baa:	2201      	movs	r2, #1
 8012bac:	819a      	strh	r2, [r3, #12]
    }
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_bind(): set request timeout %"U32_F" msecs\n", dhcp->offered_t2_rebind * 1000));
    dhcp->t2_rebind_time = dhcp->t2_timeout;
 8012bae:	69bb      	ldr	r3, [r7, #24]
 8012bb0:	899a      	ldrh	r2, [r3, #12]
 8012bb2:	69bb      	ldr	r3, [r7, #24]
 8012bb4:	821a      	strh	r2, [r3, #16]
  }

  /* If we have sub 1 minute lease, t2 and t1 will kick in at the same time. */
  if ((dhcp->t1_timeout >= dhcp->t2_timeout) && (dhcp->t2_timeout > 0)) {
 8012bb6:	69bb      	ldr	r3, [r7, #24]
 8012bb8:	895a      	ldrh	r2, [r3, #10]
 8012bba:	69bb      	ldr	r3, [r7, #24]
 8012bbc:	899b      	ldrh	r3, [r3, #12]
 8012bbe:	429a      	cmp	r2, r3
 8012bc0:	d306      	bcc.n	8012bd0 <dhcp_bind+0x124>
 8012bc2:	69bb      	ldr	r3, [r7, #24]
 8012bc4:	899b      	ldrh	r3, [r3, #12]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d002      	beq.n	8012bd0 <dhcp_bind+0x124>
    dhcp->t1_timeout = 0;
 8012bca:	69bb      	ldr	r3, [r7, #24]
 8012bcc:	2200      	movs	r2, #0
 8012bce:	815a      	strh	r2, [r3, #10]
  }

  if (dhcp->subnet_mask_given) {
 8012bd0:	69bb      	ldr	r3, [r7, #24]
 8012bd2:	79db      	ldrb	r3, [r3, #7]
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d003      	beq.n	8012be0 <dhcp_bind+0x134>
    /* copy offered network mask */
    ip4_addr_copy(sn_mask, dhcp->offered_sn_mask);
 8012bd8:	69bb      	ldr	r3, [r7, #24]
 8012bda:	6a1b      	ldr	r3, [r3, #32]
 8012bdc:	613b      	str	r3, [r7, #16]
 8012bde:	e014      	b.n	8012c0a <dhcp_bind+0x15e>
  } else {
    /* subnet mask not given, choose a safe subnet mask given the network class */
    u8_t first_octet = ip4_addr1(&dhcp->offered_ip_addr);
 8012be0:	69bb      	ldr	r3, [r7, #24]
 8012be2:	331c      	adds	r3, #28
 8012be4:	781b      	ldrb	r3, [r3, #0]
 8012be6:	75fb      	strb	r3, [r7, #23]
    if (first_octet <= 127) {
 8012be8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	db02      	blt.n	8012bf6 <dhcp_bind+0x14a>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xff000000UL));
 8012bf0:	23ff      	movs	r3, #255	; 0xff
 8012bf2:	613b      	str	r3, [r7, #16]
 8012bf4:	e009      	b.n	8012c0a <dhcp_bind+0x15e>
    } else if (first_octet >= 192) {
 8012bf6:	7dfb      	ldrb	r3, [r7, #23]
 8012bf8:	2bbf      	cmp	r3, #191	; 0xbf
 8012bfa:	d903      	bls.n	8012c04 <dhcp_bind+0x158>
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffffff00UL));
 8012bfc:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8012c00:	613b      	str	r3, [r7, #16]
 8012c02:	e002      	b.n	8012c0a <dhcp_bind+0x15e>
    } else {
      ip4_addr_set_u32(&sn_mask, PP_HTONL(0xffff0000UL));
 8012c04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8012c08:	613b      	str	r3, [r7, #16]
    }
  }

  ip4_addr_copy(gw_addr, dhcp->offered_gw_addr);
 8012c0a:	69bb      	ldr	r3, [r7, #24]
 8012c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c0e:	60fb      	str	r3, [r7, #12]
  /* gateway address not given? */
  if (ip4_addr_isany_val(gw_addr)) {
 8012c10:	68fb      	ldr	r3, [r7, #12]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d108      	bne.n	8012c28 <dhcp_bind+0x17c>
    /* copy network address */
    ip4_addr_get_network(&gw_addr, &dhcp->offered_ip_addr, &sn_mask);
 8012c16:	69bb      	ldr	r3, [r7, #24]
 8012c18:	69da      	ldr	r2, [r3, #28]
 8012c1a:	693b      	ldr	r3, [r7, #16]
 8012c1c:	4013      	ands	r3, r2
 8012c1e:	60fb      	str	r3, [r7, #12]
    /* use first host address on network as gateway */
    ip4_addr_set_u32(&gw_addr, ip4_addr_get_u32(&gw_addr) | PP_HTONL(0x00000001UL));
 8012c20:	68fb      	ldr	r3, [r7, #12]
 8012c22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012c26:	60fb      	str	r3, [r7, #12]

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_STATE, ("dhcp_bind(): IP: 0x%08"X32_F" SN: 0x%08"X32_F" GW: 0x%08"X32_F"\n",
              ip4_addr_get_u32(&dhcp->offered_ip_addr), ip4_addr_get_u32(&sn_mask), ip4_addr_get_u32(&gw_addr)));
  /* netif is now bound to DHCP leased address - set this before assigning the address
     to ensure the callback can use dhcp_supplied_address() */
  dhcp_set_state(dhcp, DHCP_STATE_BOUND);
 8012c28:	210a      	movs	r1, #10
 8012c2a:	69b8      	ldr	r0, [r7, #24]
 8012c2c:	f000 faa0 	bl	8013170 <dhcp_set_state>

  netif_set_addr(netif, &dhcp->offered_ip_addr, &sn_mask, &gw_addr);
 8012c30:	69bb      	ldr	r3, [r7, #24]
 8012c32:	f103 011c 	add.w	r1, r3, #28
 8012c36:	f107 030c 	add.w	r3, r7, #12
 8012c3a:	f107 0210 	add.w	r2, r7, #16
 8012c3e:	6878      	ldr	r0, [r7, #4]
 8012c40:	f7f8 fa6e 	bl	800b120 <netif_set_addr>
  /* interface is used by routing now that an address is set */
}
 8012c44:	3720      	adds	r7, #32
 8012c46:	46bd      	mov	sp, r7
 8012c48:	bd80      	pop	{r7, pc}
 8012c4a:	bf00      	nop
 8012c4c:	08019afc 	.word	0x08019afc
 8012c50:	08019c5c 	.word	0x08019c5c
 8012c54:	08019b5c 	.word	0x08019b5c
 8012c58:	08019c78 	.word	0x08019c78
 8012c5c:	88888889 	.word	0x88888889

08012c60 <dhcp_renew>:
 *
 * @param netif network interface which must renew its lease
 */
err_t
dhcp_renew(struct netif *netif)
{
 8012c60:	b580      	push	{r7, lr}
 8012c62:	b08a      	sub	sp, #40	; 0x28
 8012c64:	af02      	add	r7, sp, #8
 8012c66:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012c68:	687b      	ldr	r3, [r7, #4]
 8012c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012c6c:	61bb      	str	r3, [r7, #24]
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_renew()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_RENEWING);
 8012c6e:	2105      	movs	r1, #5
 8012c70:	69b8      	ldr	r0, [r7, #24]
 8012c72:	f000 fa7d 	bl	8013170 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012c76:	f107 030c 	add.w	r3, r7, #12
 8012c7a:	2203      	movs	r2, #3
 8012c7c:	69b9      	ldr	r1, [r7, #24]
 8012c7e:	6878      	ldr	r0, [r7, #4]
 8012c80:	f000 ff02 	bl	8013a88 <dhcp_create_msg>
 8012c84:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012c86:	697b      	ldr	r3, [r7, #20]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d04e      	beq.n	8012d2a <dhcp_renew+0xca>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012c8c:	697b      	ldr	r3, [r7, #20]
 8012c8e:	685b      	ldr	r3, [r3, #4]
 8012c90:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012c92:	89b8      	ldrh	r0, [r7, #12]
 8012c94:	693b      	ldr	r3, [r7, #16]
 8012c96:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012c9a:	2302      	movs	r3, #2
 8012c9c:	2239      	movs	r2, #57	; 0x39
 8012c9e:	f000 fa81 	bl	80131a4 <dhcp_option>
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012ca6:	89b8      	ldrh	r0, [r7, #12]
 8012ca8:	693b      	ldr	r3, [r7, #16]
 8012caa:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012cae:	687b      	ldr	r3, [r7, #4]
 8012cb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012cb2:	461a      	mov	r2, r3
 8012cb4:	f000 fad0 	bl	8013258 <dhcp_option_short>
 8012cb8:	4603      	mov	r3, r0
 8012cba:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012cbc:	89b8      	ldrh	r0, [r7, #12]
 8012cbe:	693b      	ldr	r3, [r7, #16]
 8012cc0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012cc4:	2303      	movs	r3, #3
 8012cc6:	2237      	movs	r2, #55	; 0x37
 8012cc8:	f000 fa6c 	bl	80131a4 <dhcp_option>
 8012ccc:	4603      	mov	r3, r0
 8012cce:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012cd0:	2300      	movs	r3, #0
 8012cd2:	77bb      	strb	r3, [r7, #30]
 8012cd4:	e00e      	b.n	8012cf4 <dhcp_renew+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012cd6:	89b8      	ldrh	r0, [r7, #12]
 8012cd8:	693b      	ldr	r3, [r7, #16]
 8012cda:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012cde:	7fbb      	ldrb	r3, [r7, #30]
 8012ce0:	4a2a      	ldr	r2, [pc, #168]	; (8012d8c <dhcp_renew+0x12c>)
 8012ce2:	5cd3      	ldrb	r3, [r2, r3]
 8012ce4:	461a      	mov	r2, r3
 8012ce6:	f000 fa91 	bl	801320c <dhcp_option_byte>
 8012cea:	4603      	mov	r3, r0
 8012cec:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012cee:	7fbb      	ldrb	r3, [r7, #30]
 8012cf0:	3301      	adds	r3, #1
 8012cf2:	77bb      	strb	r3, [r7, #30]
 8012cf4:	7fbb      	ldrb	r3, [r7, #30]
 8012cf6:	2b02      	cmp	r3, #2
 8012cf8:	d9ed      	bls.n	8012cd6 <dhcp_renew+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_RENEWING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012cfa:	89b8      	ldrh	r0, [r7, #12]
 8012cfc:	693b      	ldr	r3, [r7, #16]
 8012cfe:	33f0      	adds	r3, #240	; 0xf0
 8012d00:	697a      	ldr	r2, [r7, #20]
 8012d02:	4619      	mov	r1, r3
 8012d04:	f000 ff96 	bl	8013c34 <dhcp_option_trailer>

    result = udp_sendto_if(dhcp_pcb, p_out, &dhcp->server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012d08:	4b21      	ldr	r3, [pc, #132]	; (8012d90 <dhcp_renew+0x130>)
 8012d0a:	6818      	ldr	r0, [r3, #0]
 8012d0c:	69bb      	ldr	r3, [r7, #24]
 8012d0e:	f103 0218 	add.w	r2, r3, #24
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	9300      	str	r3, [sp, #0]
 8012d16:	2343      	movs	r3, #67	; 0x43
 8012d18:	6979      	ldr	r1, [r7, #20]
 8012d1a:	f7fe fe51 	bl	80119c0 <udp_sendto_if>
 8012d1e:	4603      	mov	r3, r0
 8012d20:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012d22:	6978      	ldr	r0, [r7, #20]
 8012d24:	f7f8 ff0a 	bl	800bb3c <pbuf_free>
 8012d28:	e001      	b.n	8012d2e <dhcp_renew+0xce>

    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew: RENEWING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_renew: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012d2a:	23ff      	movs	r3, #255	; 0xff
 8012d2c:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012d2e:	69bb      	ldr	r3, [r7, #24]
 8012d30:	799b      	ldrb	r3, [r3, #6]
 8012d32:	2bff      	cmp	r3, #255	; 0xff
 8012d34:	d005      	beq.n	8012d42 <dhcp_renew+0xe2>
    dhcp->tries++;
 8012d36:	69bb      	ldr	r3, [r7, #24]
 8012d38:	799b      	ldrb	r3, [r3, #6]
 8012d3a:	3301      	adds	r3, #1
 8012d3c:	b2da      	uxtb	r2, r3
 8012d3e:	69bb      	ldr	r3, [r7, #24]
 8012d40:	719a      	strb	r2, [r3, #6]
  }
  /* back-off on retries, but to a maximum of 20 seconds */
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 2000 : 20 * 1000);
 8012d42:	69bb      	ldr	r3, [r7, #24]
 8012d44:	799b      	ldrb	r3, [r3, #6]
 8012d46:	2b09      	cmp	r3, #9
 8012d48:	d80a      	bhi.n	8012d60 <dhcp_renew+0x100>
 8012d4a:	69bb      	ldr	r3, [r7, #24]
 8012d4c:	799b      	ldrb	r3, [r3, #6]
 8012d4e:	b29b      	uxth	r3, r3
 8012d50:	461a      	mov	r2, r3
 8012d52:	0152      	lsls	r2, r2, #5
 8012d54:	1ad2      	subs	r2, r2, r3
 8012d56:	0092      	lsls	r2, r2, #2
 8012d58:	4413      	add	r3, r2
 8012d5a:	011b      	lsls	r3, r3, #4
 8012d5c:	b29b      	uxth	r3, r3
 8012d5e:	e001      	b.n	8012d64 <dhcp_renew+0x104>
 8012d60:	f644 6320 	movw	r3, #20000	; 0x4e20
 8012d64:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012d66:	89fb      	ldrh	r3, [r7, #14]
 8012d68:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012d6c:	4a09      	ldr	r2, [pc, #36]	; (8012d94 <dhcp_renew+0x134>)
 8012d6e:	fb82 1203 	smull	r1, r2, r2, r3
 8012d72:	1152      	asrs	r2, r2, #5
 8012d74:	17db      	asrs	r3, r3, #31
 8012d76:	1ad3      	subs	r3, r2, r3
 8012d78:	b29a      	uxth	r2, r3
 8012d7a:	69bb      	ldr	r3, [r7, #24]
 8012d7c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_renew(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012d7e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012d82:	4618      	mov	r0, r3
 8012d84:	3720      	adds	r7, #32
 8012d86:	46bd      	mov	sp, r7
 8012d88:	bd80      	pop	{r7, pc}
 8012d8a:	bf00      	nop
 8012d8c:	20000030 	.word	0x20000030
 8012d90:	2000f28c 	.word	0x2000f28c
 8012d94:	10624dd3 	.word	0x10624dd3

08012d98 <dhcp_rebind>:
 *
 * @param netif network interface which must rebind with a DHCP server
 */
static err_t
dhcp_rebind(struct netif *netif)
{
 8012d98:	b580      	push	{r7, lr}
 8012d9a:	b08a      	sub	sp, #40	; 0x28
 8012d9c:	af02      	add	r7, sp, #8
 8012d9e:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012da0:	687b      	ldr	r3, [r7, #4]
 8012da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012da4:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBINDING);
 8012da6:	2104      	movs	r1, #4
 8012da8:	69b8      	ldr	r0, [r7, #24]
 8012daa:	f000 f9e1 	bl	8013170 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012dae:	f107 030c 	add.w	r3, r7, #12
 8012db2:	2203      	movs	r2, #3
 8012db4:	69b9      	ldr	r1, [r7, #24]
 8012db6:	6878      	ldr	r0, [r7, #4]
 8012db8:	f000 fe66 	bl	8013a88 <dhcp_create_msg>
 8012dbc:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012dbe:	697b      	ldr	r3, [r7, #20]
 8012dc0:	2b00      	cmp	r3, #0
 8012dc2:	d04c      	beq.n	8012e5e <dhcp_rebind+0xc6>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012dc4:	697b      	ldr	r3, [r7, #20]
 8012dc6:	685b      	ldr	r3, [r3, #4]
 8012dc8:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012dca:	89b8      	ldrh	r0, [r7, #12]
 8012dcc:	693b      	ldr	r3, [r7, #16]
 8012dce:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012dd2:	2302      	movs	r3, #2
 8012dd4:	2239      	movs	r2, #57	; 0x39
 8012dd6:	f000 f9e5 	bl	80131a4 <dhcp_option>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN(netif));
 8012dde:	89b8      	ldrh	r0, [r7, #12]
 8012de0:	693b      	ldr	r3, [r7, #16]
 8012de2:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012de6:	687b      	ldr	r3, [r7, #4]
 8012de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012dea:	461a      	mov	r2, r3
 8012dec:	f000 fa34 	bl	8013258 <dhcp_option_short>
 8012df0:	4603      	mov	r3, r0
 8012df2:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012df4:	89b8      	ldrh	r0, [r7, #12]
 8012df6:	693b      	ldr	r3, [r7, #16]
 8012df8:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012dfc:	2303      	movs	r3, #3
 8012dfe:	2237      	movs	r2, #55	; 0x37
 8012e00:	f000 f9d0 	bl	80131a4 <dhcp_option>
 8012e04:	4603      	mov	r3, r0
 8012e06:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e08:	2300      	movs	r3, #0
 8012e0a:	77bb      	strb	r3, [r7, #30]
 8012e0c:	e00e      	b.n	8012e2c <dhcp_rebind+0x94>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012e0e:	89b8      	ldrh	r0, [r7, #12]
 8012e10:	693b      	ldr	r3, [r7, #16]
 8012e12:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012e16:	7fbb      	ldrb	r3, [r7, #30]
 8012e18:	4a29      	ldr	r2, [pc, #164]	; (8012ec0 <dhcp_rebind+0x128>)
 8012e1a:	5cd3      	ldrb	r3, [r2, r3]
 8012e1c:	461a      	mov	r2, r3
 8012e1e:	f000 f9f5 	bl	801320c <dhcp_option_byte>
 8012e22:	4603      	mov	r3, r0
 8012e24:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012e26:	7fbb      	ldrb	r3, [r7, #30]
 8012e28:	3301      	adds	r3, #1
 8012e2a:	77bb      	strb	r3, [r7, #30]
 8012e2c:	7fbb      	ldrb	r3, [r7, #30]
 8012e2e:	2b02      	cmp	r3, #2
 8012e30:	d9ed      	bls.n	8012e0e <dhcp_rebind+0x76>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBINDING, msg_out, DHCP_DISCOVER, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012e32:	89b8      	ldrh	r0, [r7, #12]
 8012e34:	693b      	ldr	r3, [r7, #16]
 8012e36:	33f0      	adds	r3, #240	; 0xf0
 8012e38:	697a      	ldr	r2, [r7, #20]
 8012e3a:	4619      	mov	r1, r3
 8012e3c:	f000 fefa 	bl	8013c34 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012e40:	4b20      	ldr	r3, [pc, #128]	; (8012ec4 <dhcp_rebind+0x12c>)
 8012e42:	6818      	ldr	r0, [r3, #0]
 8012e44:	687b      	ldr	r3, [r7, #4]
 8012e46:	9300      	str	r3, [sp, #0]
 8012e48:	2343      	movs	r3, #67	; 0x43
 8012e4a:	4a1f      	ldr	r2, [pc, #124]	; (8012ec8 <dhcp_rebind+0x130>)
 8012e4c:	6979      	ldr	r1, [r7, #20]
 8012e4e:	f7fe fdb7 	bl	80119c0 <udp_sendto_if>
 8012e52:	4603      	mov	r3, r0
 8012e54:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012e56:	6978      	ldr	r0, [r7, #20]
 8012e58:	f7f8 fe70 	bl	800bb3c <pbuf_free>
 8012e5c:	e001      	b.n	8012e62 <dhcp_rebind+0xca>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind: REBINDING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_rebind: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012e5e:	23ff      	movs	r3, #255	; 0xff
 8012e60:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012e62:	69bb      	ldr	r3, [r7, #24]
 8012e64:	799b      	ldrb	r3, [r3, #6]
 8012e66:	2bff      	cmp	r3, #255	; 0xff
 8012e68:	d005      	beq.n	8012e76 <dhcp_rebind+0xde>
    dhcp->tries++;
 8012e6a:	69bb      	ldr	r3, [r7, #24]
 8012e6c:	799b      	ldrb	r3, [r3, #6]
 8012e6e:	3301      	adds	r3, #1
 8012e70:	b2da      	uxtb	r2, r3
 8012e72:	69bb      	ldr	r3, [r7, #24]
 8012e74:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8012e76:	69bb      	ldr	r3, [r7, #24]
 8012e78:	799b      	ldrb	r3, [r3, #6]
 8012e7a:	2b09      	cmp	r3, #9
 8012e7c:	d80a      	bhi.n	8012e94 <dhcp_rebind+0xfc>
 8012e7e:	69bb      	ldr	r3, [r7, #24]
 8012e80:	799b      	ldrb	r3, [r3, #6]
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	461a      	mov	r2, r3
 8012e86:	0152      	lsls	r2, r2, #5
 8012e88:	1ad2      	subs	r2, r2, r3
 8012e8a:	0092      	lsls	r2, r2, #2
 8012e8c:	4413      	add	r3, r2
 8012e8e:	00db      	lsls	r3, r3, #3
 8012e90:	b29b      	uxth	r3, r3
 8012e92:	e001      	b.n	8012e98 <dhcp_rebind+0x100>
 8012e94:	f242 7310 	movw	r3, #10000	; 0x2710
 8012e98:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8012e9a:	89fb      	ldrh	r3, [r7, #14]
 8012e9c:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 8012ea0:	4a0a      	ldr	r2, [pc, #40]	; (8012ecc <dhcp_rebind+0x134>)
 8012ea2:	fb82 1203 	smull	r1, r2, r2, r3
 8012ea6:	1152      	asrs	r2, r2, #5
 8012ea8:	17db      	asrs	r3, r3, #31
 8012eaa:	1ad3      	subs	r3, r2, r3
 8012eac:	b29a      	uxth	r2, r3
 8012eae:	69bb      	ldr	r3, [r7, #24]
 8012eb0:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_rebind(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 8012eb2:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	3720      	adds	r7, #32
 8012eba:	46bd      	mov	sp, r7
 8012ebc:	bd80      	pop	{r7, pc}
 8012ebe:	bf00      	nop
 8012ec0:	20000030 	.word	0x20000030
 8012ec4:	2000f28c 	.word	0x2000f28c
 8012ec8:	0801a6cc 	.word	0x0801a6cc
 8012ecc:	10624dd3 	.word	0x10624dd3

08012ed0 <dhcp_reboot>:
 *
 * @param netif network interface which must reboot
 */
static err_t
dhcp_reboot(struct netif *netif)
{
 8012ed0:	b5b0      	push	{r4, r5, r7, lr}
 8012ed2:	b08a      	sub	sp, #40	; 0x28
 8012ed4:	af02      	add	r7, sp, #8
 8012ed6:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8012ed8:	687b      	ldr	r3, [r7, #4]
 8012eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012edc:	61bb      	str	r3, [r7, #24]
  u8_t i;
  struct pbuf *p_out;
  u16_t options_out_len;

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot()\n"));
  dhcp_set_state(dhcp, DHCP_STATE_REBOOTING);
 8012ede:	2103      	movs	r1, #3
 8012ee0:	69b8      	ldr	r0, [r7, #24]
 8012ee2:	f000 f945 	bl	8013170 <dhcp_set_state>

  /* create and initialize the DHCP message header */
  p_out = dhcp_create_msg(netif, dhcp, DHCP_REQUEST, &options_out_len);
 8012ee6:	f107 030c 	add.w	r3, r7, #12
 8012eea:	2203      	movs	r2, #3
 8012eec:	69b9      	ldr	r1, [r7, #24]
 8012eee:	6878      	ldr	r0, [r7, #4]
 8012ef0:	f000 fdca 	bl	8013a88 <dhcp_create_msg>
 8012ef4:	6178      	str	r0, [r7, #20]
  if (p_out != NULL) {
 8012ef6:	697b      	ldr	r3, [r7, #20]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d066      	beq.n	8012fca <dhcp_reboot+0xfa>
    struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 8012efc:	697b      	ldr	r3, [r7, #20]
 8012efe:	685b      	ldr	r3, [r3, #4]
 8012f00:	613b      	str	r3, [r7, #16]
    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_MAX_MSG_SIZE, DHCP_OPTION_MAX_MSG_SIZE_LEN);
 8012f02:	89b8      	ldrh	r0, [r7, #12]
 8012f04:	693b      	ldr	r3, [r7, #16]
 8012f06:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f0a:	2302      	movs	r3, #2
 8012f0c:	2239      	movs	r2, #57	; 0x39
 8012f0e:	f000 f949 	bl	80131a4 <dhcp_option>
 8012f12:	4603      	mov	r3, r0
 8012f14:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_short(options_out_len, msg_out->options, DHCP_MAX_MSG_LEN_MIN_REQUIRED);
 8012f16:	89b8      	ldrh	r0, [r7, #12]
 8012f18:	693b      	ldr	r3, [r7, #16]
 8012f1a:	33f0      	adds	r3, #240	; 0xf0
 8012f1c:	f44f 7210 	mov.w	r2, #576	; 0x240
 8012f20:	4619      	mov	r1, r3
 8012f22:	f000 f999 	bl	8013258 <dhcp_option_short>
 8012f26:	4603      	mov	r3, r0
 8012f28:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_REQUESTED_IP, 4);
 8012f2a:	89b8      	ldrh	r0, [r7, #12]
 8012f2c:	693b      	ldr	r3, [r7, #16]
 8012f2e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f32:	2304      	movs	r3, #4
 8012f34:	2232      	movs	r2, #50	; 0x32
 8012f36:	f000 f935 	bl	80131a4 <dhcp_option>
 8012f3a:	4603      	mov	r3, r0
 8012f3c:	81bb      	strh	r3, [r7, #12]
    options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(&dhcp->offered_ip_addr)));
 8012f3e:	89bc      	ldrh	r4, [r7, #12]
 8012f40:	693b      	ldr	r3, [r7, #16]
 8012f42:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 8012f46:	69bb      	ldr	r3, [r7, #24]
 8012f48:	69db      	ldr	r3, [r3, #28]
 8012f4a:	4618      	mov	r0, r3
 8012f4c:	f7f7 fa0d 	bl	800a36a <lwip_htonl>
 8012f50:	4603      	mov	r3, r0
 8012f52:	461a      	mov	r2, r3
 8012f54:	4629      	mov	r1, r5
 8012f56:	4620      	mov	r0, r4
 8012f58:	f000 f9b0 	bl	80132bc <dhcp_option_long>
 8012f5c:	4603      	mov	r3, r0
 8012f5e:	81bb      	strh	r3, [r7, #12]

    options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_PARAMETER_REQUEST_LIST, LWIP_ARRAYSIZE(dhcp_discover_request_options));
 8012f60:	89b8      	ldrh	r0, [r7, #12]
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f68:	2303      	movs	r3, #3
 8012f6a:	2237      	movs	r2, #55	; 0x37
 8012f6c:	f000 f91a 	bl	80131a4 <dhcp_option>
 8012f70:	4603      	mov	r3, r0
 8012f72:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012f74:	2300      	movs	r3, #0
 8012f76:	77bb      	strb	r3, [r7, #30]
 8012f78:	e00e      	b.n	8012f98 <dhcp_reboot+0xc8>
      options_out_len = dhcp_option_byte(options_out_len, msg_out->options, dhcp_discover_request_options[i]);
 8012f7a:	89b8      	ldrh	r0, [r7, #12]
 8012f7c:	693b      	ldr	r3, [r7, #16]
 8012f7e:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8012f82:	7fbb      	ldrb	r3, [r7, #30]
 8012f84:	4a29      	ldr	r2, [pc, #164]	; (801302c <dhcp_reboot+0x15c>)
 8012f86:	5cd3      	ldrb	r3, [r2, r3]
 8012f88:	461a      	mov	r2, r3
 8012f8a:	f000 f93f 	bl	801320c <dhcp_option_byte>
 8012f8e:	4603      	mov	r3, r0
 8012f90:	81bb      	strh	r3, [r7, #12]
    for (i = 0; i < LWIP_ARRAYSIZE(dhcp_discover_request_options); i++) {
 8012f92:	7fbb      	ldrb	r3, [r7, #30]
 8012f94:	3301      	adds	r3, #1
 8012f96:	77bb      	strb	r3, [r7, #30]
 8012f98:	7fbb      	ldrb	r3, [r7, #30]
 8012f9a:	2b02      	cmp	r3, #2
 8012f9c:	d9ed      	bls.n	8012f7a <dhcp_reboot+0xaa>
#if LWIP_NETIF_HOSTNAME
    options_out_len = dhcp_option_hostname(options_out_len, msg_out->options, netif);
#endif /* LWIP_NETIF_HOSTNAME */

    LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, DHCP_STATE_REBOOTING, msg_out, DHCP_REQUEST, &options_out_len);
    dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 8012f9e:	89b8      	ldrh	r0, [r7, #12]
 8012fa0:	693b      	ldr	r3, [r7, #16]
 8012fa2:	33f0      	adds	r3, #240	; 0xf0
 8012fa4:	697a      	ldr	r2, [r7, #20]
 8012fa6:	4619      	mov	r1, r3
 8012fa8:	f000 fe44 	bl	8013c34 <dhcp_option_trailer>

    /* broadcast to server */
    result = udp_sendto_if(dhcp_pcb, p_out, IP_ADDR_BROADCAST, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8012fac:	4b20      	ldr	r3, [pc, #128]	; (8013030 <dhcp_reboot+0x160>)
 8012fae:	6818      	ldr	r0, [r3, #0]
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	9300      	str	r3, [sp, #0]
 8012fb4:	2343      	movs	r3, #67	; 0x43
 8012fb6:	4a1f      	ldr	r2, [pc, #124]	; (8013034 <dhcp_reboot+0x164>)
 8012fb8:	6979      	ldr	r1, [r7, #20]
 8012fba:	f7fe fd01 	bl	80119c0 <udp_sendto_if>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	77fb      	strb	r3, [r7, #31]
    pbuf_free(p_out);
 8012fc2:	6978      	ldr	r0, [r7, #20]
 8012fc4:	f7f8 fdba 	bl	800bb3c <pbuf_free>
 8012fc8:	e001      	b.n	8012fce <dhcp_reboot+0xfe>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot: REBOOTING\n"));
  } else {
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_reboot: could not allocate DHCP request\n"));
    result = ERR_MEM;
 8012fca:	23ff      	movs	r3, #255	; 0xff
 8012fcc:	77fb      	strb	r3, [r7, #31]
  }
  if (dhcp->tries < 255) {
 8012fce:	69bb      	ldr	r3, [r7, #24]
 8012fd0:	799b      	ldrb	r3, [r3, #6]
 8012fd2:	2bff      	cmp	r3, #255	; 0xff
 8012fd4:	d005      	beq.n	8012fe2 <dhcp_reboot+0x112>
    dhcp->tries++;
 8012fd6:	69bb      	ldr	r3, [r7, #24]
 8012fd8:	799b      	ldrb	r3, [r3, #6]
 8012fda:	3301      	adds	r3, #1
 8012fdc:	b2da      	uxtb	r2, r3
 8012fde:	69bb      	ldr	r3, [r7, #24]
 8012fe0:	719a      	strb	r2, [r3, #6]
  }
  msecs = (u16_t)(dhcp->tries < 10 ? dhcp->tries * 1000 : 10 * 1000);
 8012fe2:	69bb      	ldr	r3, [r7, #24]
 8012fe4:	799b      	ldrb	r3, [r3, #6]
 8012fe6:	2b09      	cmp	r3, #9
 8012fe8:	d80a      	bhi.n	8013000 <dhcp_reboot+0x130>
 8012fea:	69bb      	ldr	r3, [r7, #24]
 8012fec:	799b      	ldrb	r3, [r3, #6]
 8012fee:	b29b      	uxth	r3, r3
 8012ff0:	461a      	mov	r2, r3
 8012ff2:	0152      	lsls	r2, r2, #5
 8012ff4:	1ad2      	subs	r2, r2, r3
 8012ff6:	0092      	lsls	r2, r2, #2
 8012ff8:	4413      	add	r3, r2
 8012ffa:	00db      	lsls	r3, r3, #3
 8012ffc:	b29b      	uxth	r3, r3
 8012ffe:	e001      	b.n	8013004 <dhcp_reboot+0x134>
 8013000:	f242 7310 	movw	r3, #10000	; 0x2710
 8013004:	81fb      	strh	r3, [r7, #14]
  dhcp->request_timeout = (u16_t)((msecs + DHCP_FINE_TIMER_MSECS - 1) / DHCP_FINE_TIMER_MSECS);
 8013006:	89fb      	ldrh	r3, [r7, #14]
 8013008:	f203 13f3 	addw	r3, r3, #499	; 0x1f3
 801300c:	4a0a      	ldr	r2, [pc, #40]	; (8013038 <dhcp_reboot+0x168>)
 801300e:	fb82 1203 	smull	r1, r2, r2, r3
 8013012:	1152      	asrs	r2, r2, #5
 8013014:	17db      	asrs	r3, r3, #31
 8013016:	1ad3      	subs	r3, r2, r3
 8013018:	b29a      	uxth	r2, r3
 801301a:	69bb      	ldr	r3, [r7, #24]
 801301c:	811a      	strh	r2, [r3, #8]
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("dhcp_reboot(): set request timeout %"U16_F" msecs\n", msecs));
  return result;
 801301e:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8013022:	4618      	mov	r0, r3
 8013024:	3720      	adds	r7, #32
 8013026:	46bd      	mov	sp, r7
 8013028:	bdb0      	pop	{r4, r5, r7, pc}
 801302a:	bf00      	nop
 801302c:	20000030 	.word	0x20000030
 8013030:	2000f28c 	.word	0x2000f28c
 8013034:	0801a6cc 	.word	0x0801a6cc
 8013038:	10624dd3 	.word	0x10624dd3

0801303c <dhcp_release_and_stop>:
 *
 * @param netif network interface
 */
void
dhcp_release_and_stop(struct netif *netif)
{
 801303c:	b5b0      	push	{r4, r5, r7, lr}
 801303e:	b08a      	sub	sp, #40	; 0x28
 8013040:	af02      	add	r7, sp, #8
 8013042:	6078      	str	r0, [r7, #4]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013048:	61fb      	str	r3, [r7, #28]
  ip_addr_t server_ip_addr;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("dhcp_release_and_stop()\n"));
  if (dhcp == NULL) {
 801304a:	69fb      	ldr	r3, [r7, #28]
 801304c:	2b00      	cmp	r3, #0
 801304e:	f000 8084 	beq.w	801315a <dhcp_release_and_stop+0x11e>
    return;
  }

  /* already off? -> nothing to do */
  if (dhcp->state == DHCP_STATE_OFF) {
 8013052:	69fb      	ldr	r3, [r7, #28]
 8013054:	795b      	ldrb	r3, [r3, #5]
 8013056:	2b00      	cmp	r3, #0
 8013058:	f000 8081 	beq.w	801315e <dhcp_release_and_stop+0x122>
    return;
  }

  ip_addr_copy(server_ip_addr, dhcp->server_ip_addr);
 801305c:	69fb      	ldr	r3, [r7, #28]
 801305e:	699b      	ldr	r3, [r3, #24]
 8013060:	613b      	str	r3, [r7, #16]

  /* clean old DHCP offer */
  ip_addr_set_zero_ip4(&dhcp->server_ip_addr);
 8013062:	69fb      	ldr	r3, [r7, #28]
 8013064:	2200      	movs	r2, #0
 8013066:	619a      	str	r2, [r3, #24]
  ip4_addr_set_zero(&dhcp->offered_ip_addr);
 8013068:	69fb      	ldr	r3, [r7, #28]
 801306a:	2200      	movs	r2, #0
 801306c:	61da      	str	r2, [r3, #28]
  ip4_addr_set_zero(&dhcp->offered_sn_mask);
 801306e:	69fb      	ldr	r3, [r7, #28]
 8013070:	2200      	movs	r2, #0
 8013072:	621a      	str	r2, [r3, #32]
  ip4_addr_set_zero(&dhcp->offered_gw_addr);
 8013074:	69fb      	ldr	r3, [r7, #28]
 8013076:	2200      	movs	r2, #0
 8013078:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_DHCP_BOOTP_FILE
  ip4_addr_set_zero(&dhcp->offered_si_addr);
#endif /* LWIP_DHCP_BOOTP_FILE */
  dhcp->offered_t0_lease = dhcp->offered_t1_renew = dhcp->offered_t2_rebind = 0;
 801307a:	69fb      	ldr	r3, [r7, #28]
 801307c:	2200      	movs	r2, #0
 801307e:	631a      	str	r2, [r3, #48]	; 0x30
 8013080:	69fb      	ldr	r3, [r7, #28]
 8013082:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013084:	69fb      	ldr	r3, [r7, #28]
 8013086:	62da      	str	r2, [r3, #44]	; 0x2c
 8013088:	69fb      	ldr	r3, [r7, #28]
 801308a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801308c:	69fb      	ldr	r3, [r7, #28]
 801308e:	629a      	str	r2, [r3, #40]	; 0x28
  dhcp->t1_renew_time = dhcp->t2_rebind_time = dhcp->lease_used = dhcp->t0_timeout = 0;
 8013090:	69fb      	ldr	r3, [r7, #28]
 8013092:	2200      	movs	r2, #0
 8013094:	829a      	strh	r2, [r3, #20]
 8013096:	69fb      	ldr	r3, [r7, #28]
 8013098:	8a9a      	ldrh	r2, [r3, #20]
 801309a:	69fb      	ldr	r3, [r7, #28]
 801309c:	825a      	strh	r2, [r3, #18]
 801309e:	69fb      	ldr	r3, [r7, #28]
 80130a0:	8a5a      	ldrh	r2, [r3, #18]
 80130a2:	69fb      	ldr	r3, [r7, #28]
 80130a4:	821a      	strh	r2, [r3, #16]
 80130a6:	69fb      	ldr	r3, [r7, #28]
 80130a8:	8a1a      	ldrh	r2, [r3, #16]
 80130aa:	69fb      	ldr	r3, [r7, #28]
 80130ac:	81da      	strh	r2, [r3, #14]

  /* send release message when current IP was assigned via DHCP */
  if (dhcp_supplied_address(netif)) {
 80130ae:	6878      	ldr	r0, [r7, #4]
 80130b0:	f000 fdee 	bl	8013c90 <dhcp_supplied_address>
 80130b4:	4603      	mov	r3, r0
 80130b6:	2b00      	cmp	r3, #0
 80130b8:	d03b      	beq.n	8013132 <dhcp_release_and_stop+0xf6>
    /* create and initialize the DHCP message header */
    struct pbuf *p_out;
    u16_t options_out_len;
    p_out = dhcp_create_msg(netif, dhcp, DHCP_RELEASE, &options_out_len);
 80130ba:	f107 030e 	add.w	r3, r7, #14
 80130be:	2207      	movs	r2, #7
 80130c0:	69f9      	ldr	r1, [r7, #28]
 80130c2:	6878      	ldr	r0, [r7, #4]
 80130c4:	f000 fce0 	bl	8013a88 <dhcp_create_msg>
 80130c8:	61b8      	str	r0, [r7, #24]
    if (p_out != NULL) {
 80130ca:	69bb      	ldr	r3, [r7, #24]
 80130cc:	2b00      	cmp	r3, #0
 80130ce:	d030      	beq.n	8013132 <dhcp_release_and_stop+0xf6>
      struct dhcp_msg *msg_out = (struct dhcp_msg *)p_out->payload;
 80130d0:	69bb      	ldr	r3, [r7, #24]
 80130d2:	685b      	ldr	r3, [r3, #4]
 80130d4:	617b      	str	r3, [r7, #20]
      options_out_len = dhcp_option(options_out_len, msg_out->options, DHCP_OPTION_SERVER_ID, 4);
 80130d6:	89f8      	ldrh	r0, [r7, #14]
 80130d8:	697b      	ldr	r3, [r7, #20]
 80130da:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 80130de:	2304      	movs	r3, #4
 80130e0:	2236      	movs	r2, #54	; 0x36
 80130e2:	f000 f85f 	bl	80131a4 <dhcp_option>
 80130e6:	4603      	mov	r3, r0
 80130e8:	81fb      	strh	r3, [r7, #14]
      options_out_len = dhcp_option_long(options_out_len, msg_out->options, lwip_ntohl(ip4_addr_get_u32(ip_2_ip4(&server_ip_addr))));
 80130ea:	89fc      	ldrh	r4, [r7, #14]
 80130ec:	697b      	ldr	r3, [r7, #20]
 80130ee:	f103 05f0 	add.w	r5, r3, #240	; 0xf0
 80130f2:	693b      	ldr	r3, [r7, #16]
 80130f4:	4618      	mov	r0, r3
 80130f6:	f7f7 f938 	bl	800a36a <lwip_htonl>
 80130fa:	4603      	mov	r3, r0
 80130fc:	461a      	mov	r2, r3
 80130fe:	4629      	mov	r1, r5
 8013100:	4620      	mov	r0, r4
 8013102:	f000 f8db 	bl	80132bc <dhcp_option_long>
 8013106:	4603      	mov	r3, r0
 8013108:	81fb      	strh	r3, [r7, #14]

      LWIP_HOOK_DHCP_APPEND_OPTIONS(netif, dhcp, dhcp->state, msg_out, DHCP_RELEASE, &options_out_len);
      dhcp_option_trailer(options_out_len, msg_out->options, p_out);
 801310a:	89f8      	ldrh	r0, [r7, #14]
 801310c:	697b      	ldr	r3, [r7, #20]
 801310e:	33f0      	adds	r3, #240	; 0xf0
 8013110:	69ba      	ldr	r2, [r7, #24]
 8013112:	4619      	mov	r1, r3
 8013114:	f000 fd8e 	bl	8013c34 <dhcp_option_trailer>

      udp_sendto_if(dhcp_pcb, p_out, &server_ip_addr, LWIP_IANA_PORT_DHCP_SERVER, netif);
 8013118:	4b13      	ldr	r3, [pc, #76]	; (8013168 <dhcp_release_and_stop+0x12c>)
 801311a:	6818      	ldr	r0, [r3, #0]
 801311c:	f107 0210 	add.w	r2, r7, #16
 8013120:	687b      	ldr	r3, [r7, #4]
 8013122:	9300      	str	r3, [sp, #0]
 8013124:	2343      	movs	r3, #67	; 0x43
 8013126:	69b9      	ldr	r1, [r7, #24]
 8013128:	f7fe fc4a 	bl	80119c0 <udp_sendto_if>
      pbuf_free(p_out);
 801312c:	69b8      	ldr	r0, [r7, #24]
 801312e:	f7f8 fd05 	bl	800bb3c <pbuf_free>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("dhcp_release: could not allocate DHCP request\n"));
    }
  }

  /* remove IP address from interface (prevents routing from selecting this interface) */
  netif_set_addr(netif, IP4_ADDR_ANY4, IP4_ADDR_ANY4, IP4_ADDR_ANY4);
 8013132:	4b0e      	ldr	r3, [pc, #56]	; (801316c <dhcp_release_and_stop+0x130>)
 8013134:	4a0d      	ldr	r2, [pc, #52]	; (801316c <dhcp_release_and_stop+0x130>)
 8013136:	490d      	ldr	r1, [pc, #52]	; (801316c <dhcp_release_and_stop+0x130>)
 8013138:	6878      	ldr	r0, [r7, #4]
 801313a:	f7f7 fff1 	bl	800b120 <netif_set_addr>
    autoip_stop(netif);
    dhcp->autoip_coop_state = DHCP_AUTOIP_COOP_STATE_OFF;
  }
#endif /* LWIP_DHCP_AUTOIP_COOP */

  dhcp_set_state(dhcp, DHCP_STATE_OFF);
 801313e:	2100      	movs	r1, #0
 8013140:	69f8      	ldr	r0, [r7, #28]
 8013142:	f000 f815 	bl	8013170 <dhcp_set_state>

  if (dhcp->pcb_allocated != 0) {
 8013146:	69fb      	ldr	r3, [r7, #28]
 8013148:	791b      	ldrb	r3, [r3, #4]
 801314a:	2b00      	cmp	r3, #0
 801314c:	d008      	beq.n	8013160 <dhcp_release_and_stop+0x124>
    dhcp_dec_pcb_refcount(); /* free DHCP PCB if not needed any more */
 801314e:	f7fe ff83 	bl	8012058 <dhcp_dec_pcb_refcount>
    dhcp->pcb_allocated = 0;
 8013152:	69fb      	ldr	r3, [r7, #28]
 8013154:	2200      	movs	r2, #0
 8013156:	711a      	strb	r2, [r3, #4]
 8013158:	e002      	b.n	8013160 <dhcp_release_and_stop+0x124>
    return;
 801315a:	bf00      	nop
 801315c:	e000      	b.n	8013160 <dhcp_release_and_stop+0x124>
    return;
 801315e:	bf00      	nop
  }
}
 8013160:	3720      	adds	r7, #32
 8013162:	46bd      	mov	sp, r7
 8013164:	bdb0      	pop	{r4, r5, r7, pc}
 8013166:	bf00      	nop
 8013168:	2000f28c 	.word	0x2000f28c
 801316c:	0801a6c8 	.word	0x0801a6c8

08013170 <dhcp_set_state>:
 *
 * If the state changed, reset the number of tries.
 */
static void
dhcp_set_state(struct dhcp *dhcp, u8_t new_state)
{
 8013170:	b480      	push	{r7}
 8013172:	b083      	sub	sp, #12
 8013174:	af00      	add	r7, sp, #0
 8013176:	6078      	str	r0, [r7, #4]
 8013178:	460b      	mov	r3, r1
 801317a:	70fb      	strb	r3, [r7, #3]
  if (new_state != dhcp->state) {
 801317c:	687b      	ldr	r3, [r7, #4]
 801317e:	795b      	ldrb	r3, [r3, #5]
 8013180:	78fa      	ldrb	r2, [r7, #3]
 8013182:	429a      	cmp	r2, r3
 8013184:	d008      	beq.n	8013198 <dhcp_set_state+0x28>
    dhcp->state = new_state;
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	78fa      	ldrb	r2, [r7, #3]
 801318a:	715a      	strb	r2, [r3, #5]
    dhcp->tries = 0;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	2200      	movs	r2, #0
 8013190:	719a      	strb	r2, [r3, #6]
    dhcp->request_timeout = 0;
 8013192:	687b      	ldr	r3, [r7, #4]
 8013194:	2200      	movs	r2, #0
 8013196:	811a      	strh	r2, [r3, #8]
  }
}
 8013198:	bf00      	nop
 801319a:	370c      	adds	r7, #12
 801319c:	46bd      	mov	sp, r7
 801319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131a2:	4770      	bx	lr

080131a4 <dhcp_option>:
 * DHCP message.
 *
 */
static u16_t
dhcp_option(u16_t options_out_len, u8_t *options, u8_t option_type, u8_t option_len)
{
 80131a4:	b580      	push	{r7, lr}
 80131a6:	b082      	sub	sp, #8
 80131a8:	af00      	add	r7, sp, #0
 80131aa:	6039      	str	r1, [r7, #0]
 80131ac:	4611      	mov	r1, r2
 80131ae:	461a      	mov	r2, r3
 80131b0:	4603      	mov	r3, r0
 80131b2:	80fb      	strh	r3, [r7, #6]
 80131b4:	460b      	mov	r3, r1
 80131b6:	717b      	strb	r3, [r7, #5]
 80131b8:	4613      	mov	r3, r2
 80131ba:	713b      	strb	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option: options_out_len + 2 + option_len <= DHCP_OPTIONS_LEN", options_out_len + 2U + option_len <= DHCP_OPTIONS_LEN);
 80131bc:	88fa      	ldrh	r2, [r7, #6]
 80131be:	793b      	ldrb	r3, [r7, #4]
 80131c0:	4413      	add	r3, r2
 80131c2:	3302      	adds	r3, #2
 80131c4:	2b44      	cmp	r3, #68	; 0x44
 80131c6:	d906      	bls.n	80131d6 <dhcp_option+0x32>
 80131c8:	4b0d      	ldr	r3, [pc, #52]	; (8013200 <dhcp_option+0x5c>)
 80131ca:	f240 529a 	movw	r2, #1434	; 0x59a
 80131ce:	490d      	ldr	r1, [pc, #52]	; (8013204 <dhcp_option+0x60>)
 80131d0:	480d      	ldr	r0, [pc, #52]	; (8013208 <dhcp_option+0x64>)
 80131d2:	f003 fb35 	bl	8016840 <iprintf>
  options[options_out_len++] = option_type;
 80131d6:	88fb      	ldrh	r3, [r7, #6]
 80131d8:	1c5a      	adds	r2, r3, #1
 80131da:	80fa      	strh	r2, [r7, #6]
 80131dc:	461a      	mov	r2, r3
 80131de:	683b      	ldr	r3, [r7, #0]
 80131e0:	4413      	add	r3, r2
 80131e2:	797a      	ldrb	r2, [r7, #5]
 80131e4:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = option_len;
 80131e6:	88fb      	ldrh	r3, [r7, #6]
 80131e8:	1c5a      	adds	r2, r3, #1
 80131ea:	80fa      	strh	r2, [r7, #6]
 80131ec:	461a      	mov	r2, r3
 80131ee:	683b      	ldr	r3, [r7, #0]
 80131f0:	4413      	add	r3, r2
 80131f2:	793a      	ldrb	r2, [r7, #4]
 80131f4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80131f6:	88fb      	ldrh	r3, [r7, #6]
}
 80131f8:	4618      	mov	r0, r3
 80131fa:	3708      	adds	r7, #8
 80131fc:	46bd      	mov	sp, r7
 80131fe:	bd80      	pop	{r7, pc}
 8013200:	08019afc 	.word	0x08019afc
 8013204:	08019c90 	.word	0x08019c90
 8013208:	08019b5c 	.word	0x08019b5c

0801320c <dhcp_option_byte>:
 * Concatenate a single byte to the outgoing DHCP message.
 *
 */
static u16_t
dhcp_option_byte(u16_t options_out_len, u8_t *options, u8_t value)
{
 801320c:	b580      	push	{r7, lr}
 801320e:	b082      	sub	sp, #8
 8013210:	af00      	add	r7, sp, #0
 8013212:	4603      	mov	r3, r0
 8013214:	6039      	str	r1, [r7, #0]
 8013216:	80fb      	strh	r3, [r7, #6]
 8013218:	4613      	mov	r3, r2
 801321a:	717b      	strb	r3, [r7, #5]
  LWIP_ASSERT("dhcp_option_byte: options_out_len < DHCP_OPTIONS_LEN", options_out_len < DHCP_OPTIONS_LEN);
 801321c:	88fb      	ldrh	r3, [r7, #6]
 801321e:	2b43      	cmp	r3, #67	; 0x43
 8013220:	d906      	bls.n	8013230 <dhcp_option_byte+0x24>
 8013222:	4b0a      	ldr	r3, [pc, #40]	; (801324c <dhcp_option_byte+0x40>)
 8013224:	f240 52a6 	movw	r2, #1446	; 0x5a6
 8013228:	4909      	ldr	r1, [pc, #36]	; (8013250 <dhcp_option_byte+0x44>)
 801322a:	480a      	ldr	r0, [pc, #40]	; (8013254 <dhcp_option_byte+0x48>)
 801322c:	f003 fb08 	bl	8016840 <iprintf>
  options[options_out_len++] = value;
 8013230:	88fb      	ldrh	r3, [r7, #6]
 8013232:	1c5a      	adds	r2, r3, #1
 8013234:	80fa      	strh	r2, [r7, #6]
 8013236:	461a      	mov	r2, r3
 8013238:	683b      	ldr	r3, [r7, #0]
 801323a:	4413      	add	r3, r2
 801323c:	797a      	ldrb	r2, [r7, #5]
 801323e:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 8013240:	88fb      	ldrh	r3, [r7, #6]
}
 8013242:	4618      	mov	r0, r3
 8013244:	3708      	adds	r7, #8
 8013246:	46bd      	mov	sp, r7
 8013248:	bd80      	pop	{r7, pc}
 801324a:	bf00      	nop
 801324c:	08019afc 	.word	0x08019afc
 8013250:	08019cd4 	.word	0x08019cd4
 8013254:	08019b5c 	.word	0x08019b5c

08013258 <dhcp_option_short>:

static u16_t
dhcp_option_short(u16_t options_out_len, u8_t *options, u16_t value)
{
 8013258:	b580      	push	{r7, lr}
 801325a:	b082      	sub	sp, #8
 801325c:	af00      	add	r7, sp, #0
 801325e:	4603      	mov	r3, r0
 8013260:	6039      	str	r1, [r7, #0]
 8013262:	80fb      	strh	r3, [r7, #6]
 8013264:	4613      	mov	r3, r2
 8013266:	80bb      	strh	r3, [r7, #4]
  LWIP_ASSERT("dhcp_option_short: options_out_len + 2 <= DHCP_OPTIONS_LEN", options_out_len + 2U <= DHCP_OPTIONS_LEN);
 8013268:	88fb      	ldrh	r3, [r7, #6]
 801326a:	3302      	adds	r3, #2
 801326c:	2b44      	cmp	r3, #68	; 0x44
 801326e:	d906      	bls.n	801327e <dhcp_option_short+0x26>
 8013270:	4b0f      	ldr	r3, [pc, #60]	; (80132b0 <dhcp_option_short+0x58>)
 8013272:	f240 52ae 	movw	r2, #1454	; 0x5ae
 8013276:	490f      	ldr	r1, [pc, #60]	; (80132b4 <dhcp_option_short+0x5c>)
 8013278:	480f      	ldr	r0, [pc, #60]	; (80132b8 <dhcp_option_short+0x60>)
 801327a:	f003 fae1 	bl	8016840 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff00U) >> 8);
 801327e:	88bb      	ldrh	r3, [r7, #4]
 8013280:	0a1b      	lsrs	r3, r3, #8
 8013282:	b29a      	uxth	r2, r3
 8013284:	88fb      	ldrh	r3, [r7, #6]
 8013286:	1c59      	adds	r1, r3, #1
 8013288:	80f9      	strh	r1, [r7, #6]
 801328a:	4619      	mov	r1, r3
 801328c:	683b      	ldr	r3, [r7, #0]
 801328e:	440b      	add	r3, r1
 8013290:	b2d2      	uxtb	r2, r2
 8013292:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t) (value & 0x00ffU);
 8013294:	88fb      	ldrh	r3, [r7, #6]
 8013296:	1c5a      	adds	r2, r3, #1
 8013298:	80fa      	strh	r2, [r7, #6]
 801329a:	461a      	mov	r2, r3
 801329c:	683b      	ldr	r3, [r7, #0]
 801329e:	4413      	add	r3, r2
 80132a0:	88ba      	ldrh	r2, [r7, #4]
 80132a2:	b2d2      	uxtb	r2, r2
 80132a4:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 80132a6:	88fb      	ldrh	r3, [r7, #6]
}
 80132a8:	4618      	mov	r0, r3
 80132aa:	3708      	adds	r7, #8
 80132ac:	46bd      	mov	sp, r7
 80132ae:	bd80      	pop	{r7, pc}
 80132b0:	08019afc 	.word	0x08019afc
 80132b4:	08019d0c 	.word	0x08019d0c
 80132b8:	08019b5c 	.word	0x08019b5c

080132bc <dhcp_option_long>:

static u16_t
dhcp_option_long(u16_t options_out_len, u8_t *options, u32_t value)
{
 80132bc:	b580      	push	{r7, lr}
 80132be:	b084      	sub	sp, #16
 80132c0:	af00      	add	r7, sp, #0
 80132c2:	4603      	mov	r3, r0
 80132c4:	60b9      	str	r1, [r7, #8]
 80132c6:	607a      	str	r2, [r7, #4]
 80132c8:	81fb      	strh	r3, [r7, #14]
  LWIP_ASSERT("dhcp_option_long: options_out_len + 4 <= DHCP_OPTIONS_LEN", options_out_len + 4U <= DHCP_OPTIONS_LEN);
 80132ca:	89fb      	ldrh	r3, [r7, #14]
 80132cc:	3304      	adds	r3, #4
 80132ce:	2b44      	cmp	r3, #68	; 0x44
 80132d0:	d906      	bls.n	80132e0 <dhcp_option_long+0x24>
 80132d2:	4b19      	ldr	r3, [pc, #100]	; (8013338 <dhcp_option_long+0x7c>)
 80132d4:	f240 52b7 	movw	r2, #1463	; 0x5b7
 80132d8:	4918      	ldr	r1, [pc, #96]	; (801333c <dhcp_option_long+0x80>)
 80132da:	4819      	ldr	r0, [pc, #100]	; (8013340 <dhcp_option_long+0x84>)
 80132dc:	f003 fab0 	bl	8016840 <iprintf>
  options[options_out_len++] = (u8_t)((value & 0xff000000UL) >> 24);
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	0e1a      	lsrs	r2, r3, #24
 80132e4:	89fb      	ldrh	r3, [r7, #14]
 80132e6:	1c59      	adds	r1, r3, #1
 80132e8:	81f9      	strh	r1, [r7, #14]
 80132ea:	4619      	mov	r1, r3
 80132ec:	68bb      	ldr	r3, [r7, #8]
 80132ee:	440b      	add	r3, r1
 80132f0:	b2d2      	uxtb	r2, r2
 80132f2:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x00ff0000UL) >> 16);
 80132f4:	687b      	ldr	r3, [r7, #4]
 80132f6:	0c1a      	lsrs	r2, r3, #16
 80132f8:	89fb      	ldrh	r3, [r7, #14]
 80132fa:	1c59      	adds	r1, r3, #1
 80132fc:	81f9      	strh	r1, [r7, #14]
 80132fe:	4619      	mov	r1, r3
 8013300:	68bb      	ldr	r3, [r7, #8]
 8013302:	440b      	add	r3, r1
 8013304:	b2d2      	uxtb	r2, r2
 8013306:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x0000ff00UL) >> 8);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	0a1a      	lsrs	r2, r3, #8
 801330c:	89fb      	ldrh	r3, [r7, #14]
 801330e:	1c59      	adds	r1, r3, #1
 8013310:	81f9      	strh	r1, [r7, #14]
 8013312:	4619      	mov	r1, r3
 8013314:	68bb      	ldr	r3, [r7, #8]
 8013316:	440b      	add	r3, r1
 8013318:	b2d2      	uxtb	r2, r2
 801331a:	701a      	strb	r2, [r3, #0]
  options[options_out_len++] = (u8_t)((value & 0x000000ffUL));
 801331c:	89fb      	ldrh	r3, [r7, #14]
 801331e:	1c5a      	adds	r2, r3, #1
 8013320:	81fa      	strh	r2, [r7, #14]
 8013322:	461a      	mov	r2, r3
 8013324:	68bb      	ldr	r3, [r7, #8]
 8013326:	4413      	add	r3, r2
 8013328:	687a      	ldr	r2, [r7, #4]
 801332a:	b2d2      	uxtb	r2, r2
 801332c:	701a      	strb	r2, [r3, #0]
  return options_out_len;
 801332e:	89fb      	ldrh	r3, [r7, #14]
}
 8013330:	4618      	mov	r0, r3
 8013332:	3710      	adds	r7, #16
 8013334:	46bd      	mov	sp, r7
 8013336:	bd80      	pop	{r7, pc}
 8013338:	08019afc 	.word	0x08019afc
 801333c:	08019d48 	.word	0x08019d48
 8013340:	08019b5c 	.word	0x08019b5c

08013344 <dhcp_parse_reply>:
 * use that further on.
 *
 */
static err_t
dhcp_parse_reply(struct pbuf *p, struct dhcp *dhcp)
{
 8013344:	b580      	push	{r7, lr}
 8013346:	b090      	sub	sp, #64	; 0x40
 8013348:	af00      	add	r7, sp, #0
 801334a:	6078      	str	r0, [r7, #4]
 801334c:	6039      	str	r1, [r7, #0]
  u16_t offset;
  u16_t offset_max;
  u16_t options_idx;
  u16_t options_idx_max;
  struct pbuf *q;
  int parse_file_as_options = 0;
 801334e:	2300      	movs	r3, #0
 8013350:	62fb      	str	r3, [r7, #44]	; 0x2c
  int parse_sname_as_options = 0;
 8013352:	2300      	movs	r3, #0
 8013354:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

  LWIP_UNUSED_ARG(dhcp);

  /* clear received options */
  dhcp_clear_all_options(dhcp);
 8013356:	2208      	movs	r2, #8
 8013358:	2100      	movs	r1, #0
 801335a:	48b5      	ldr	r0, [pc, #724]	; (8013630 <dhcp_parse_reply+0x2ec>)
 801335c:	f003 f9d3 	bl	8016706 <memset>
  /* check that beginning of dhcp_msg (up to and including chaddr) is in first pbuf */
  if (p->len < DHCP_SNAME_OFS) {
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	895b      	ldrh	r3, [r3, #10]
 8013364:	2b2b      	cmp	r3, #43	; 0x2b
 8013366:	d802      	bhi.n	801336e <dhcp_parse_reply+0x2a>
    return ERR_BUF;
 8013368:	f06f 0301 	mvn.w	r3, #1
 801336c:	e2a7      	b.n	80138be <dhcp_parse_reply+0x57a>
  }
  msg_in = (struct dhcp_msg *)p->payload;
 801336e:	687b      	ldr	r3, [r7, #4]
 8013370:	685b      	ldr	r3, [r3, #4]
 8013372:	61bb      	str	r3, [r7, #24]
#endif /* LWIP_DHCP_BOOTP_FILE */

  /* parse options */

  /* start with options field */
  options_idx = DHCP_OPTIONS_OFS;
 8013374:	23f0      	movs	r3, #240	; 0xf0
 8013376:	86fb      	strh	r3, [r7, #54]	; 0x36
  /* parse options to the end of the received packet */
  options_idx_max = p->tot_len;
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	891b      	ldrh	r3, [r3, #8]
 801337c:	86bb      	strh	r3, [r7, #52]	; 0x34
again:
  q = p;
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 8013382:	e00c      	b.n	801339e <dhcp_parse_reply+0x5a>
    options_idx = (u16_t)(options_idx - q->len);
 8013384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013386:	895b      	ldrh	r3, [r3, #10]
 8013388:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801338a:	1ad3      	subs	r3, r2, r3
 801338c:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = (u16_t)(options_idx_max - q->len);
 801338e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013390:	895b      	ldrh	r3, [r3, #10]
 8013392:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8013394:	1ad3      	subs	r3, r2, r3
 8013396:	86bb      	strh	r3, [r7, #52]	; 0x34
    q = q->next;
 8013398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801339a:	681b      	ldr	r3, [r3, #0]
 801339c:	633b      	str	r3, [r7, #48]	; 0x30
  while ((q != NULL) && (options_idx >= q->len)) {
 801339e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d004      	beq.n	80133ae <dhcp_parse_reply+0x6a>
 80133a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133a6:	895b      	ldrh	r3, [r3, #10]
 80133a8:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80133aa:	429a      	cmp	r2, r3
 80133ac:	d2ea      	bcs.n	8013384 <dhcp_parse_reply+0x40>
  }
  if (q == NULL) {
 80133ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133b0:	2b00      	cmp	r3, #0
 80133b2:	d102      	bne.n	80133ba <dhcp_parse_reply+0x76>
    return ERR_BUF;
 80133b4:	f06f 0301 	mvn.w	r3, #1
 80133b8:	e281      	b.n	80138be <dhcp_parse_reply+0x57a>
  }
  offset = options_idx;
 80133ba:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80133bc:	877b      	strh	r3, [r7, #58]	; 0x3a
  offset_max = options_idx_max;
 80133be:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80133c0:	873b      	strh	r3, [r7, #56]	; 0x38
  options = (u8_t *)q->payload;
 80133c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80133c4:	685b      	ldr	r3, [r3, #4]
 80133c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* at least 1 byte to read and no end marker, then at least 3 bytes to read? */
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 80133c8:	e239      	b.n	801383e <dhcp_parse_reply+0x4fa>
    u8_t op = options[offset];
 80133ca:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80133cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80133ce:	4413      	add	r3, r2
 80133d0:	781b      	ldrb	r3, [r3, #0]
 80133d2:	75fb      	strb	r3, [r7, #23]
    u8_t len;
    u8_t decode_len = 0;
 80133d4:	2300      	movs	r3, #0
 80133d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    int decode_idx = -1;
 80133da:	f04f 33ff 	mov.w	r3, #4294967295
 80133de:	623b      	str	r3, [r7, #32]
    u16_t val_offset = (u16_t)(offset + 2);
 80133e0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80133e2:	3302      	adds	r3, #2
 80133e4:	83fb      	strh	r3, [r7, #30]
    if (val_offset < offset) {
 80133e6:	8bfa      	ldrh	r2, [r7, #30]
 80133e8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80133ea:	429a      	cmp	r2, r3
 80133ec:	d202      	bcs.n	80133f4 <dhcp_parse_reply+0xb0>
      /* overflow */
      return ERR_BUF;
 80133ee:	f06f 0301 	mvn.w	r3, #1
 80133f2:	e264      	b.n	80138be <dhcp_parse_reply+0x57a>
    }
    /* len byte might be in the next pbuf */
    if ((offset + 1) < q->len) {
 80133f4:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80133f6:	3301      	adds	r3, #1
 80133f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80133fa:	8952      	ldrh	r2, [r2, #10]
 80133fc:	4293      	cmp	r3, r2
 80133fe:	da07      	bge.n	8013410 <dhcp_parse_reply+0xcc>
      len = options[offset + 1];
 8013400:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8013402:	3301      	adds	r3, #1
 8013404:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013406:	4413      	add	r3, r2
 8013408:	781b      	ldrb	r3, [r3, #0]
 801340a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801340e:	e00b      	b.n	8013428 <dhcp_parse_reply+0xe4>
    } else {
      len = (q->next != NULL ? ((u8_t *)q->next->payload)[0] : 0);
 8013410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013412:	681b      	ldr	r3, [r3, #0]
 8013414:	2b00      	cmp	r3, #0
 8013416:	d004      	beq.n	8013422 <dhcp_parse_reply+0xde>
 8013418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801341a:	681b      	ldr	r3, [r3, #0]
 801341c:	685b      	ldr	r3, [r3, #4]
 801341e:	781b      	ldrb	r3, [r3, #0]
 8013420:	e000      	b.n	8013424 <dhcp_parse_reply+0xe0>
 8013422:	2300      	movs	r3, #0
 8013424:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
    /* LWIP_DEBUGF(DHCP_DEBUG, ("msg_offset=%"U16_F", q->len=%"U16_F, msg_offset, q->len)); */
    decode_len = len;
 8013428:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801342c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    switch (op) {
 8013430:	7dfb      	ldrb	r3, [r7, #23]
 8013432:	2b3b      	cmp	r3, #59	; 0x3b
 8013434:	f200 812c 	bhi.w	8013690 <dhcp_parse_reply+0x34c>
 8013438:	a201      	add	r2, pc, #4	; (adr r2, 8013440 <dhcp_parse_reply+0xfc>)
 801343a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801343e:	bf00      	nop
 8013440:	08013531 	.word	0x08013531
 8013444:	08013541 	.word	0x08013541
 8013448:	08013691 	.word	0x08013691
 801344c:	08013563 	.word	0x08013563
 8013450:	08013691 	.word	0x08013691
 8013454:	08013691 	.word	0x08013691
 8013458:	08013691 	.word	0x08013691
 801345c:	08013691 	.word	0x08013691
 8013460:	08013691 	.word	0x08013691
 8013464:	08013691 	.word	0x08013691
 8013468:	08013691 	.word	0x08013691
 801346c:	08013691 	.word	0x08013691
 8013470:	08013691 	.word	0x08013691
 8013474:	08013691 	.word	0x08013691
 8013478:	08013691 	.word	0x08013691
 801347c:	08013691 	.word	0x08013691
 8013480:	08013691 	.word	0x08013691
 8013484:	08013691 	.word	0x08013691
 8013488:	08013691 	.word	0x08013691
 801348c:	08013691 	.word	0x08013691
 8013490:	08013691 	.word	0x08013691
 8013494:	08013691 	.word	0x08013691
 8013498:	08013691 	.word	0x08013691
 801349c:	08013691 	.word	0x08013691
 80134a0:	08013691 	.word	0x08013691
 80134a4:	08013691 	.word	0x08013691
 80134a8:	08013691 	.word	0x08013691
 80134ac:	08013691 	.word	0x08013691
 80134b0:	08013691 	.word	0x08013691
 80134b4:	08013691 	.word	0x08013691
 80134b8:	08013691 	.word	0x08013691
 80134bc:	08013691 	.word	0x08013691
 80134c0:	08013691 	.word	0x08013691
 80134c4:	08013691 	.word	0x08013691
 80134c8:	08013691 	.word	0x08013691
 80134cc:	08013691 	.word	0x08013691
 80134d0:	08013691 	.word	0x08013691
 80134d4:	08013691 	.word	0x08013691
 80134d8:	08013691 	.word	0x08013691
 80134dc:	08013691 	.word	0x08013691
 80134e0:	08013691 	.word	0x08013691
 80134e4:	08013691 	.word	0x08013691
 80134e8:	08013691 	.word	0x08013691
 80134ec:	08013691 	.word	0x08013691
 80134f0:	08013691 	.word	0x08013691
 80134f4:	08013691 	.word	0x08013691
 80134f8:	08013691 	.word	0x08013691
 80134fc:	08013691 	.word	0x08013691
 8013500:	08013691 	.word	0x08013691
 8013504:	08013691 	.word	0x08013691
 8013508:	08013691 	.word	0x08013691
 801350c:	0801358f 	.word	0x0801358f
 8013510:	080135b1 	.word	0x080135b1
 8013514:	080135ed 	.word	0x080135ed
 8013518:	0801360f 	.word	0x0801360f
 801351c:	08013691 	.word	0x08013691
 8013520:	08013691 	.word	0x08013691
 8013524:	08013691 	.word	0x08013691
 8013528:	0801364d 	.word	0x0801364d
 801352c:	0801366f 	.word	0x0801366f
      /* case(DHCP_OPTION_END): handled above */
      case (DHCP_OPTION_PAD):
        /* special option: no len encoded */
        decode_len = len = 0;
 8013530:	2300      	movs	r3, #0
 8013532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013536:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801353a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        /* will be increased below */
        break;
 801353e:	e0ab      	b.n	8013698 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SUBNET_MASK):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 8013540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013544:	2b04      	cmp	r3, #4
 8013546:	d009      	beq.n	801355c <dhcp_parse_reply+0x218>
 8013548:	4b3a      	ldr	r3, [pc, #232]	; (8013634 <dhcp_parse_reply+0x2f0>)
 801354a:	f240 622e 	movw	r2, #1582	; 0x62e
 801354e:	493a      	ldr	r1, [pc, #232]	; (8013638 <dhcp_parse_reply+0x2f4>)
 8013550:	483a      	ldr	r0, [pc, #232]	; (801363c <dhcp_parse_reply+0x2f8>)
 8013552:	f003 f975 	bl	8016840 <iprintf>
 8013556:	f06f 0305 	mvn.w	r3, #5
 801355a:	e1b0      	b.n	80138be <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SUBNET_MASK;
 801355c:	2306      	movs	r3, #6
 801355e:	623b      	str	r3, [r7, #32]
        break;
 8013560:	e09a      	b.n	8013698 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_ROUTER):
        decode_len = 4; /* only copy the first given router */
 8013562:	2304      	movs	r3, #4
 8013564:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
 8013568:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801356c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013570:	429a      	cmp	r2, r3
 8013572:	d209      	bcs.n	8013588 <dhcp_parse_reply+0x244>
 8013574:	4b2f      	ldr	r3, [pc, #188]	; (8013634 <dhcp_parse_reply+0x2f0>)
 8013576:	f240 6233 	movw	r2, #1587	; 0x633
 801357a:	4931      	ldr	r1, [pc, #196]	; (8013640 <dhcp_parse_reply+0x2fc>)
 801357c:	482f      	ldr	r0, [pc, #188]	; (801363c <dhcp_parse_reply+0x2f8>)
 801357e:	f003 f95f 	bl	8016840 <iprintf>
 8013582:	f06f 0305 	mvn.w	r3, #5
 8013586:	e19a      	b.n	80138be <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_ROUTER;
 8013588:	2307      	movs	r3, #7
 801358a:	623b      	str	r3, [r7, #32]
        break;
 801358c:	e084      	b.n	8013698 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_DNS_SERVER;
        break;
#endif /* LWIP_DHCP_PROVIDE_DNS_SERVERS */
      case (DHCP_OPTION_LEASE_TIME):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801358e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013592:	2b04      	cmp	r3, #4
 8013594:	d009      	beq.n	80135aa <dhcp_parse_reply+0x266>
 8013596:	4b27      	ldr	r3, [pc, #156]	; (8013634 <dhcp_parse_reply+0x2f0>)
 8013598:	f240 6241 	movw	r2, #1601	; 0x641
 801359c:	4926      	ldr	r1, [pc, #152]	; (8013638 <dhcp_parse_reply+0x2f4>)
 801359e:	4827      	ldr	r0, [pc, #156]	; (801363c <dhcp_parse_reply+0x2f8>)
 80135a0:	f003 f94e 	bl	8016840 <iprintf>
 80135a4:	f06f 0305 	mvn.w	r3, #5
 80135a8:	e189      	b.n	80138be <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_LEASE_TIME;
 80135aa:	2303      	movs	r3, #3
 80135ac:	623b      	str	r3, [r7, #32]
        break;
 80135ae:	e073      	b.n	8013698 <dhcp_parse_reply+0x354>
        LWIP_ERROR("len >= decode_len", len >= decode_len, return ERR_VAL;);
        decode_idx = DHCP_OPTION_IDX_NTP_SERVER;
        break;
#endif /* LWIP_DHCP_GET_NTP_SRV*/
      case (DHCP_OPTION_OVERLOAD):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80135b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135b4:	2b01      	cmp	r3, #1
 80135b6:	d009      	beq.n	80135cc <dhcp_parse_reply+0x288>
 80135b8:	4b1e      	ldr	r3, [pc, #120]	; (8013634 <dhcp_parse_reply+0x2f0>)
 80135ba:	f240 624f 	movw	r2, #1615	; 0x64f
 80135be:	4921      	ldr	r1, [pc, #132]	; (8013644 <dhcp_parse_reply+0x300>)
 80135c0:	481e      	ldr	r0, [pc, #120]	; (801363c <dhcp_parse_reply+0x2f8>)
 80135c2:	f003 f93d 	bl	8016840 <iprintf>
 80135c6:	f06f 0305 	mvn.w	r3, #5
 80135ca:	e178      	b.n	80138be <dhcp_parse_reply+0x57a>
        /* decode overload only in options, not in file/sname: invalid packet */
        LWIP_ERROR("overload in file/sname", options_idx == DHCP_OPTIONS_OFS, return ERR_VAL;);
 80135cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80135ce:	2bf0      	cmp	r3, #240	; 0xf0
 80135d0:	d009      	beq.n	80135e6 <dhcp_parse_reply+0x2a2>
 80135d2:	4b18      	ldr	r3, [pc, #96]	; (8013634 <dhcp_parse_reply+0x2f0>)
 80135d4:	f240 6251 	movw	r2, #1617	; 0x651
 80135d8:	491b      	ldr	r1, [pc, #108]	; (8013648 <dhcp_parse_reply+0x304>)
 80135da:	4818      	ldr	r0, [pc, #96]	; (801363c <dhcp_parse_reply+0x2f8>)
 80135dc:	f003 f930 	bl	8016840 <iprintf>
 80135e0:	f06f 0305 	mvn.w	r3, #5
 80135e4:	e16b      	b.n	80138be <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_OVERLOAD;
 80135e6:	2300      	movs	r3, #0
 80135e8:	623b      	str	r3, [r7, #32]
        break;
 80135ea:	e055      	b.n	8013698 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_MESSAGE_TYPE):
        LWIP_ERROR("len == 1", len == 1, return ERR_VAL;);
 80135ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80135f0:	2b01      	cmp	r3, #1
 80135f2:	d009      	beq.n	8013608 <dhcp_parse_reply+0x2c4>
 80135f4:	4b0f      	ldr	r3, [pc, #60]	; (8013634 <dhcp_parse_reply+0x2f0>)
 80135f6:	f240 6255 	movw	r2, #1621	; 0x655
 80135fa:	4912      	ldr	r1, [pc, #72]	; (8013644 <dhcp_parse_reply+0x300>)
 80135fc:	480f      	ldr	r0, [pc, #60]	; (801363c <dhcp_parse_reply+0x2f8>)
 80135fe:	f003 f91f 	bl	8016840 <iprintf>
 8013602:	f06f 0305 	mvn.w	r3, #5
 8013606:	e15a      	b.n	80138be <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_MSG_TYPE;
 8013608:	2301      	movs	r3, #1
 801360a:	623b      	str	r3, [r7, #32]
        break;
 801360c:	e044      	b.n	8013698 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_SERVER_ID):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801360e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013612:	2b04      	cmp	r3, #4
 8013614:	d009      	beq.n	801362a <dhcp_parse_reply+0x2e6>
 8013616:	4b07      	ldr	r3, [pc, #28]	; (8013634 <dhcp_parse_reply+0x2f0>)
 8013618:	f240 6259 	movw	r2, #1625	; 0x659
 801361c:	4906      	ldr	r1, [pc, #24]	; (8013638 <dhcp_parse_reply+0x2f4>)
 801361e:	4807      	ldr	r0, [pc, #28]	; (801363c <dhcp_parse_reply+0x2f8>)
 8013620:	f003 f90e 	bl	8016840 <iprintf>
 8013624:	f06f 0305 	mvn.w	r3, #5
 8013628:	e149      	b.n	80138be <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_SERVER_ID;
 801362a:	2302      	movs	r3, #2
 801362c:	623b      	str	r3, [r7, #32]
        break;
 801362e:	e033      	b.n	8013698 <dhcp_parse_reply+0x354>
 8013630:	2000f284 	.word	0x2000f284
 8013634:	08019afc 	.word	0x08019afc
 8013638:	08019d84 	.word	0x08019d84
 801363c:	08019b5c 	.word	0x08019b5c
 8013640:	08019d90 	.word	0x08019d90
 8013644:	08019da4 	.word	0x08019da4
 8013648:	08019db0 	.word	0x08019db0
      case (DHCP_OPTION_T1):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801364c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013650:	2b04      	cmp	r3, #4
 8013652:	d009      	beq.n	8013668 <dhcp_parse_reply+0x324>
 8013654:	4b9c      	ldr	r3, [pc, #624]	; (80138c8 <dhcp_parse_reply+0x584>)
 8013656:	f240 625d 	movw	r2, #1629	; 0x65d
 801365a:	499c      	ldr	r1, [pc, #624]	; (80138cc <dhcp_parse_reply+0x588>)
 801365c:	489c      	ldr	r0, [pc, #624]	; (80138d0 <dhcp_parse_reply+0x58c>)
 801365e:	f003 f8ef 	bl	8016840 <iprintf>
 8013662:	f06f 0305 	mvn.w	r3, #5
 8013666:	e12a      	b.n	80138be <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T1;
 8013668:	2304      	movs	r3, #4
 801366a:	623b      	str	r3, [r7, #32]
        break;
 801366c:	e014      	b.n	8013698 <dhcp_parse_reply+0x354>
      case (DHCP_OPTION_T2):
        LWIP_ERROR("len == 4", len == 4, return ERR_VAL;);
 801366e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013672:	2b04      	cmp	r3, #4
 8013674:	d009      	beq.n	801368a <dhcp_parse_reply+0x346>
 8013676:	4b94      	ldr	r3, [pc, #592]	; (80138c8 <dhcp_parse_reply+0x584>)
 8013678:	f240 6261 	movw	r2, #1633	; 0x661
 801367c:	4993      	ldr	r1, [pc, #588]	; (80138cc <dhcp_parse_reply+0x588>)
 801367e:	4894      	ldr	r0, [pc, #592]	; (80138d0 <dhcp_parse_reply+0x58c>)
 8013680:	f003 f8de 	bl	8016840 <iprintf>
 8013684:	f06f 0305 	mvn.w	r3, #5
 8013688:	e119      	b.n	80138be <dhcp_parse_reply+0x57a>
        decode_idx = DHCP_OPTION_IDX_T2;
 801368a:	2305      	movs	r3, #5
 801368c:	623b      	str	r3, [r7, #32]
        break;
 801368e:	e003      	b.n	8013698 <dhcp_parse_reply+0x354>
      default:
        decode_len = 0;
 8013690:	2300      	movs	r3, #0
 8013692:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        LWIP_DEBUGF(DHCP_DEBUG, ("skipping option %"U16_F" in options\n", (u16_t)op));
        LWIP_HOOK_DHCP_PARSE_OPTION(ip_current_netif(), dhcp, dhcp->state, msg_in,
                                    dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE) ? (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE) : 0,
                                    op, len, q, val_offset);
        break;
 8013696:	bf00      	nop
    }
    if (op == DHCP_OPTION_PAD) {
 8013698:	7dfb      	ldrb	r3, [r7, #23]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d103      	bne.n	80136a6 <dhcp_parse_reply+0x362>
      offset++;
 801369e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80136a0:	3301      	adds	r3, #1
 80136a2:	877b      	strh	r3, [r7, #58]	; 0x3a
 80136a4:	e0a1      	b.n	80137ea <dhcp_parse_reply+0x4a6>
    } else {
      if (offset + len + 2 > 0xFFFF) {
 80136a6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80136a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136ac:	4413      	add	r3, r2
 80136ae:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 80136b2:	4293      	cmp	r3, r2
 80136b4:	dd02      	ble.n	80136bc <dhcp_parse_reply+0x378>
        /* overflow */
        return ERR_BUF;
 80136b6:	f06f 0301 	mvn.w	r3, #1
 80136ba:	e100      	b.n	80138be <dhcp_parse_reply+0x57a>
      }
      offset = (u16_t)(offset + len + 2);
 80136bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80136c0:	b29a      	uxth	r2, r3
 80136c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80136c4:	4413      	add	r3, r2
 80136c6:	b29b      	uxth	r3, r3
 80136c8:	3302      	adds	r3, #2
 80136ca:	877b      	strh	r3, [r7, #58]	; 0x3a
      if (decode_len > 0) {
 80136cc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80136d0:	2b00      	cmp	r3, #0
 80136d2:	f000 808a 	beq.w	80137ea <dhcp_parse_reply+0x4a6>
        u32_t value = 0;
 80136d6:	2300      	movs	r3, #0
 80136d8:	60bb      	str	r3, [r7, #8]
        u16_t copy_len;
decode_next:
        LWIP_ASSERT("check decode_idx", decode_idx >= 0 && decode_idx < DHCP_OPTION_IDX_MAX);
 80136da:	6a3b      	ldr	r3, [r7, #32]
 80136dc:	2b00      	cmp	r3, #0
 80136de:	db02      	blt.n	80136e6 <dhcp_parse_reply+0x3a2>
 80136e0:	6a3b      	ldr	r3, [r7, #32]
 80136e2:	2b07      	cmp	r3, #7
 80136e4:	dd06      	ble.n	80136f4 <dhcp_parse_reply+0x3b0>
 80136e6:	4b78      	ldr	r3, [pc, #480]	; (80138c8 <dhcp_parse_reply+0x584>)
 80136e8:	f44f 62cf 	mov.w	r2, #1656	; 0x678
 80136ec:	4979      	ldr	r1, [pc, #484]	; (80138d4 <dhcp_parse_reply+0x590>)
 80136ee:	4878      	ldr	r0, [pc, #480]	; (80138d0 <dhcp_parse_reply+0x58c>)
 80136f0:	f003 f8a6 	bl	8016840 <iprintf>
        if (!dhcp_option_given(dhcp, decode_idx)) {
 80136f4:	4a78      	ldr	r2, [pc, #480]	; (80138d8 <dhcp_parse_reply+0x594>)
 80136f6:	6a3b      	ldr	r3, [r7, #32]
 80136f8:	4413      	add	r3, r2
 80136fa:	781b      	ldrb	r3, [r3, #0]
 80136fc:	2b00      	cmp	r3, #0
 80136fe:	d174      	bne.n	80137ea <dhcp_parse_reply+0x4a6>
          copy_len = LWIP_MIN(decode_len, 4);
 8013700:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013704:	2b04      	cmp	r3, #4
 8013706:	bf28      	it	cs
 8013708:	2304      	movcs	r3, #4
 801370a:	b2db      	uxtb	r3, r3
 801370c:	82bb      	strh	r3, [r7, #20]
          if (pbuf_copy_partial(q, &value, copy_len, val_offset) != copy_len) {
 801370e:	8bfb      	ldrh	r3, [r7, #30]
 8013710:	8aba      	ldrh	r2, [r7, #20]
 8013712:	f107 0108 	add.w	r1, r7, #8
 8013716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013718:	f7f8 fc16 	bl	800bf48 <pbuf_copy_partial>
 801371c:	4603      	mov	r3, r0
 801371e:	461a      	mov	r2, r3
 8013720:	8abb      	ldrh	r3, [r7, #20]
 8013722:	4293      	cmp	r3, r2
 8013724:	d002      	beq.n	801372c <dhcp_parse_reply+0x3e8>
            return ERR_BUF;
 8013726:	f06f 0301 	mvn.w	r3, #1
 801372a:	e0c8      	b.n	80138be <dhcp_parse_reply+0x57a>
          }
          if (decode_len > 4) {
 801372c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013730:	2b04      	cmp	r3, #4
 8013732:	d933      	bls.n	801379c <dhcp_parse_reply+0x458>
            /* decode more than one u32_t */
            u16_t next_val_offset;
            LWIP_ERROR("decode_len %% 4 == 0", decode_len % 4 == 0, return ERR_VAL;);
 8013734:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013738:	f003 0303 	and.w	r3, r3, #3
 801373c:	b2db      	uxtb	r3, r3
 801373e:	2b00      	cmp	r3, #0
 8013740:	d009      	beq.n	8013756 <dhcp_parse_reply+0x412>
 8013742:	4b61      	ldr	r3, [pc, #388]	; (80138c8 <dhcp_parse_reply+0x584>)
 8013744:	f240 6281 	movw	r2, #1665	; 0x681
 8013748:	4964      	ldr	r1, [pc, #400]	; (80138dc <dhcp_parse_reply+0x598>)
 801374a:	4861      	ldr	r0, [pc, #388]	; (80138d0 <dhcp_parse_reply+0x58c>)
 801374c:	f003 f878 	bl	8016840 <iprintf>
 8013750:	f06f 0305 	mvn.w	r3, #5
 8013754:	e0b3      	b.n	80138be <dhcp_parse_reply+0x57a>
            dhcp_got_option(dhcp, decode_idx);
 8013756:	4a60      	ldr	r2, [pc, #384]	; (80138d8 <dhcp_parse_reply+0x594>)
 8013758:	6a3b      	ldr	r3, [r7, #32]
 801375a:	4413      	add	r3, r2
 801375c:	2201      	movs	r2, #1
 801375e:	701a      	strb	r2, [r3, #0]
            dhcp_set_option_value(dhcp, decode_idx, lwip_htonl(value));
 8013760:	68bb      	ldr	r3, [r7, #8]
 8013762:	4618      	mov	r0, r3
 8013764:	f7f6 fe01 	bl	800a36a <lwip_htonl>
 8013768:	4602      	mov	r2, r0
 801376a:	495d      	ldr	r1, [pc, #372]	; (80138e0 <dhcp_parse_reply+0x59c>)
 801376c:	6a3b      	ldr	r3, [r7, #32]
 801376e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            decode_len = (u8_t)(decode_len - 4);
 8013772:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013776:	3b04      	subs	r3, #4
 8013778:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
            next_val_offset = (u16_t)(val_offset + 4);
 801377c:	8bfb      	ldrh	r3, [r7, #30]
 801377e:	3304      	adds	r3, #4
 8013780:	827b      	strh	r3, [r7, #18]
            if (next_val_offset < val_offset) {
 8013782:	8a7a      	ldrh	r2, [r7, #18]
 8013784:	8bfb      	ldrh	r3, [r7, #30]
 8013786:	429a      	cmp	r2, r3
 8013788:	d202      	bcs.n	8013790 <dhcp_parse_reply+0x44c>
              /* overflow */
              return ERR_BUF;
 801378a:	f06f 0301 	mvn.w	r3, #1
 801378e:	e096      	b.n	80138be <dhcp_parse_reply+0x57a>
            }
            val_offset = next_val_offset;
 8013790:	8a7b      	ldrh	r3, [r7, #18]
 8013792:	83fb      	strh	r3, [r7, #30]
            decode_idx++;
 8013794:	6a3b      	ldr	r3, [r7, #32]
 8013796:	3301      	adds	r3, #1
 8013798:	623b      	str	r3, [r7, #32]
            goto decode_next;
 801379a:	e79e      	b.n	80136da <dhcp_parse_reply+0x396>
          } else if (decode_len == 4) {
 801379c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80137a0:	2b04      	cmp	r3, #4
 80137a2:	d106      	bne.n	80137b2 <dhcp_parse_reply+0x46e>
            value = lwip_ntohl(value);
 80137a4:	68bb      	ldr	r3, [r7, #8]
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7f6 fddf 	bl	800a36a <lwip_htonl>
 80137ac:	4603      	mov	r3, r0
 80137ae:	60bb      	str	r3, [r7, #8]
 80137b0:	e011      	b.n	80137d6 <dhcp_parse_reply+0x492>
          } else {
            LWIP_ERROR("invalid decode_len", decode_len == 1, return ERR_VAL;);
 80137b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80137b6:	2b01      	cmp	r3, #1
 80137b8:	d009      	beq.n	80137ce <dhcp_parse_reply+0x48a>
 80137ba:	4b43      	ldr	r3, [pc, #268]	; (80138c8 <dhcp_parse_reply+0x584>)
 80137bc:	f44f 62d2 	mov.w	r2, #1680	; 0x690
 80137c0:	4948      	ldr	r1, [pc, #288]	; (80138e4 <dhcp_parse_reply+0x5a0>)
 80137c2:	4843      	ldr	r0, [pc, #268]	; (80138d0 <dhcp_parse_reply+0x58c>)
 80137c4:	f003 f83c 	bl	8016840 <iprintf>
 80137c8:	f06f 0305 	mvn.w	r3, #5
 80137cc:	e077      	b.n	80138be <dhcp_parse_reply+0x57a>
            value = ((u8_t *)&value)[0];
 80137ce:	f107 0308 	add.w	r3, r7, #8
 80137d2:	781b      	ldrb	r3, [r3, #0]
 80137d4:	60bb      	str	r3, [r7, #8]
          }
          dhcp_got_option(dhcp, decode_idx);
 80137d6:	4a40      	ldr	r2, [pc, #256]	; (80138d8 <dhcp_parse_reply+0x594>)
 80137d8:	6a3b      	ldr	r3, [r7, #32]
 80137da:	4413      	add	r3, r2
 80137dc:	2201      	movs	r2, #1
 80137de:	701a      	strb	r2, [r3, #0]
          dhcp_set_option_value(dhcp, decode_idx, value);
 80137e0:	68ba      	ldr	r2, [r7, #8]
 80137e2:	493f      	ldr	r1, [pc, #252]	; (80138e0 <dhcp_parse_reply+0x59c>)
 80137e4:	6a3b      	ldr	r3, [r7, #32]
 80137e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        }
      }
    }
    if (offset >= q->len) {
 80137ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137ec:	895b      	ldrh	r3, [r3, #10]
 80137ee:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80137f0:	429a      	cmp	r2, r3
 80137f2:	d324      	bcc.n	801383e <dhcp_parse_reply+0x4fa>
      offset = (u16_t)(offset - q->len);
 80137f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80137f6:	895b      	ldrh	r3, [r3, #10]
 80137f8:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80137fa:	1ad3      	subs	r3, r2, r3
 80137fc:	877b      	strh	r3, [r7, #58]	; 0x3a
      offset_max = (u16_t)(offset_max - q->len);
 80137fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013800:	895b      	ldrh	r3, [r3, #10]
 8013802:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8013804:	1ad3      	subs	r3, r2, r3
 8013806:	873b      	strh	r3, [r7, #56]	; 0x38
      if (offset < offset_max) {
 8013808:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801380a:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 801380c:	429a      	cmp	r2, r3
 801380e:	d213      	bcs.n	8013838 <dhcp_parse_reply+0x4f4>
        q = q->next;
 8013810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	633b      	str	r3, [r7, #48]	; 0x30
        LWIP_ERROR("next pbuf was null", q != NULL, return ERR_VAL;);
 8013816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013818:	2b00      	cmp	r3, #0
 801381a:	d109      	bne.n	8013830 <dhcp_parse_reply+0x4ec>
 801381c:	4b2a      	ldr	r3, [pc, #168]	; (80138c8 <dhcp_parse_reply+0x584>)
 801381e:	f240 629d 	movw	r2, #1693	; 0x69d
 8013822:	4931      	ldr	r1, [pc, #196]	; (80138e8 <dhcp_parse_reply+0x5a4>)
 8013824:	482a      	ldr	r0, [pc, #168]	; (80138d0 <dhcp_parse_reply+0x58c>)
 8013826:	f003 f80b 	bl	8016840 <iprintf>
 801382a:	f06f 0305 	mvn.w	r3, #5
 801382e:	e046      	b.n	80138be <dhcp_parse_reply+0x57a>
        options = (u8_t *)q->payload;
 8013830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013832:	685b      	ldr	r3, [r3, #4]
 8013834:	63fb      	str	r3, [r7, #60]	; 0x3c
 8013836:	e002      	b.n	801383e <dhcp_parse_reply+0x4fa>
      } else {
        /* We've run out of bytes, probably no end marker. Don't proceed. */
        return ERR_BUF;
 8013838:	f06f 0301 	mvn.w	r3, #1
 801383c:	e03f      	b.n	80138be <dhcp_parse_reply+0x57a>
  while ((q != NULL) && (offset < offset_max) && (options[offset] != DHCP_OPTION_END)) {
 801383e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013840:	2b00      	cmp	r3, #0
 8013842:	d00a      	beq.n	801385a <dhcp_parse_reply+0x516>
 8013844:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8013846:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8013848:	429a      	cmp	r2, r3
 801384a:	d206      	bcs.n	801385a <dhcp_parse_reply+0x516>
 801384c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801384e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013850:	4413      	add	r3, r2
 8013852:	781b      	ldrb	r3, [r3, #0]
 8013854:	2bff      	cmp	r3, #255	; 0xff
 8013856:	f47f adb8 	bne.w	80133ca <dhcp_parse_reply+0x86>
      }
    }
  }
  /* is this an overloaded message? */
  if (dhcp_option_given(dhcp, DHCP_OPTION_IDX_OVERLOAD)) {
 801385a:	4b1f      	ldr	r3, [pc, #124]	; (80138d8 <dhcp_parse_reply+0x594>)
 801385c:	781b      	ldrb	r3, [r3, #0]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d018      	beq.n	8013894 <dhcp_parse_reply+0x550>
    u32_t overload = dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013862:	4b1f      	ldr	r3, [pc, #124]	; (80138e0 <dhcp_parse_reply+0x59c>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	60fb      	str	r3, [r7, #12]
    dhcp_clear_option(dhcp, DHCP_OPTION_IDX_OVERLOAD);
 8013868:	4b1b      	ldr	r3, [pc, #108]	; (80138d8 <dhcp_parse_reply+0x594>)
 801386a:	2200      	movs	r2, #0
 801386c:	701a      	strb	r2, [r3, #0]
    if (overload == DHCP_OVERLOAD_FILE) {
 801386e:	68fb      	ldr	r3, [r7, #12]
 8013870:	2b01      	cmp	r3, #1
 8013872:	d102      	bne.n	801387a <dhcp_parse_reply+0x536>
      parse_file_as_options = 1;
 8013874:	2301      	movs	r3, #1
 8013876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8013878:	e00c      	b.n	8013894 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded file field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME) {
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	2b02      	cmp	r3, #2
 801387e:	d102      	bne.n	8013886 <dhcp_parse_reply+0x542>
      parse_sname_as_options = 1;
 8013880:	2301      	movs	r3, #1
 8013882:	62bb      	str	r3, [r7, #40]	; 0x28
 8013884:	e006      	b.n	8013894 <dhcp_parse_reply+0x550>
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname field\n"));
    } else if (overload == DHCP_OVERLOAD_SNAME_FILE) {
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	2b03      	cmp	r3, #3
 801388a:	d103      	bne.n	8013894 <dhcp_parse_reply+0x550>
      parse_sname_as_options = 1;
 801388c:	2301      	movs	r3, #1
 801388e:	62bb      	str	r3, [r7, #40]	; 0x28
      parse_file_as_options = 1;
 8013890:	2301      	movs	r3, #1
 8013892:	62fb      	str	r3, [r7, #44]	; 0x2c
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("overloaded sname and file field\n"));
    } else {
      LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("invalid overload option: %d\n", (int)overload));
    }
  }
  if (parse_file_as_options) {
 8013894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013896:	2b00      	cmp	r3, #0
 8013898:	d006      	beq.n	80138a8 <dhcp_parse_reply+0x564>
    /* if both are overloaded, parse file first and then sname (RFC 2131 ch. 4.1) */
    parse_file_as_options = 0;
 801389a:	2300      	movs	r3, #0
 801389c:	62fb      	str	r3, [r7, #44]	; 0x2c
    options_idx = DHCP_FILE_OFS;
 801389e:	236c      	movs	r3, #108	; 0x6c
 80138a0:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_FILE_OFS + DHCP_FILE_LEN;
 80138a2:	23ec      	movs	r3, #236	; 0xec
 80138a4:	86bb      	strh	r3, [r7, #52]	; 0x34
#if LWIP_DHCP_BOOTP_FILE
    file_overloaded = 1;
#endif
    goto again;
 80138a6:	e56a      	b.n	801337e <dhcp_parse_reply+0x3a>
  } else if (parse_sname_as_options) {
 80138a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d006      	beq.n	80138bc <dhcp_parse_reply+0x578>
    parse_sname_as_options = 0;
 80138ae:	2300      	movs	r3, #0
 80138b0:	62bb      	str	r3, [r7, #40]	; 0x28
    options_idx = DHCP_SNAME_OFS;
 80138b2:	232c      	movs	r3, #44	; 0x2c
 80138b4:	86fb      	strh	r3, [r7, #54]	; 0x36
    options_idx_max = DHCP_SNAME_OFS + DHCP_SNAME_LEN;
 80138b6:	236c      	movs	r3, #108	; 0x6c
 80138b8:	86bb      	strh	r3, [r7, #52]	; 0x34
    goto again;
 80138ba:	e560      	b.n	801337e <dhcp_parse_reply+0x3a>
    }
    /* make sure the string is really NULL-terminated */
    dhcp->boot_file_name[DHCP_FILE_LEN-1] = 0;
  }
#endif /* LWIP_DHCP_BOOTP_FILE */ 
  return ERR_OK;
 80138bc:	2300      	movs	r3, #0
}
 80138be:	4618      	mov	r0, r3
 80138c0:	3740      	adds	r7, #64	; 0x40
 80138c2:	46bd      	mov	sp, r7
 80138c4:	bd80      	pop	{r7, pc}
 80138c6:	bf00      	nop
 80138c8:	08019afc 	.word	0x08019afc
 80138cc:	08019d84 	.word	0x08019d84
 80138d0:	08019b5c 	.word	0x08019b5c
 80138d4:	08019dc8 	.word	0x08019dc8
 80138d8:	2000f284 	.word	0x2000f284
 80138dc:	08019ddc 	.word	0x08019ddc
 80138e0:	2000f264 	.word	0x2000f264
 80138e4:	08019df4 	.word	0x08019df4
 80138e8:	08019e08 	.word	0x08019e08

080138ec <dhcp_recv>:
/**
 * If an incoming DHCP message is in response to us, then trigger the state machine
 */
static void
dhcp_recv(void *arg, struct udp_pcb *pcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 80138ec:	b580      	push	{r7, lr}
 80138ee:	b08a      	sub	sp, #40	; 0x28
 80138f0:	af00      	add	r7, sp, #0
 80138f2:	60f8      	str	r0, [r7, #12]
 80138f4:	60b9      	str	r1, [r7, #8]
 80138f6:	607a      	str	r2, [r7, #4]
 80138f8:	603b      	str	r3, [r7, #0]
  struct netif *netif = ip_current_input_netif();
 80138fa:	4b60      	ldr	r3, [pc, #384]	; (8013a7c <dhcp_recv+0x190>)
 80138fc:	685b      	ldr	r3, [r3, #4]
 80138fe:	623b      	str	r3, [r7, #32]
  struct dhcp *dhcp = netif_dhcp_data(netif);
 8013900:	6a3b      	ldr	r3, [r7, #32]
 8013902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013904:	61fb      	str	r3, [r7, #28]
  struct dhcp_msg *reply_msg = (struct dhcp_msg *)p->payload;
 8013906:	687b      	ldr	r3, [r7, #4]
 8013908:	685b      	ldr	r3, [r3, #4]
 801390a:	61bb      	str	r3, [r7, #24]
  struct dhcp_msg *msg_in;

  LWIP_UNUSED_ARG(arg);

  /* Caught DHCP message from netif that does not have DHCP enabled? -> not interested */
  if ((dhcp == NULL) || (dhcp->pcb_allocated == 0)) {
 801390c:	69fb      	ldr	r3, [r7, #28]
 801390e:	2b00      	cmp	r3, #0
 8013910:	f000 809d 	beq.w	8013a4e <dhcp_recv+0x162>
 8013914:	69fb      	ldr	r3, [r7, #28]
 8013916:	791b      	ldrb	r3, [r3, #4]
 8013918:	2b00      	cmp	r3, #0
 801391a:	f000 8098 	beq.w	8013a4e <dhcp_recv+0x162>
  /* prevent warnings about unused arguments */
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(addr);
  LWIP_UNUSED_ARG(port);

  if (p->len < DHCP_MIN_REPLY_LEN) {
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	895b      	ldrh	r3, [r3, #10]
 8013922:	2b2b      	cmp	r3, #43	; 0x2b
 8013924:	f240 8095 	bls.w	8013a52 <dhcp_recv+0x166>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP reply message or pbuf too short\n"));
    goto free_pbuf_and_return;
  }

  if (reply_msg->op != DHCP_BOOTREPLY) {
 8013928:	69bb      	ldr	r3, [r7, #24]
 801392a:	781b      	ldrb	r3, [r3, #0]
 801392c:	2b02      	cmp	r3, #2
 801392e:	f040 8092 	bne.w	8013a56 <dhcp_recv+0x16a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("not a DHCP reply message, but type %"U16_F"\n", (u16_t)reply_msg->op));
    goto free_pbuf_and_return;
  }
  /* iterate through hardware address and match against DHCP message */
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013932:	2300      	movs	r3, #0
 8013934:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013938:	e012      	b.n	8013960 <dhcp_recv+0x74>
    if (netif->hwaddr[i] != reply_msg->chaddr[i]) {
 801393a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801393e:	6a3a      	ldr	r2, [r7, #32]
 8013940:	4413      	add	r3, r2
 8013942:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8013946:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801394a:	69b9      	ldr	r1, [r7, #24]
 801394c:	440b      	add	r3, r1
 801394e:	7f1b      	ldrb	r3, [r3, #28]
 8013950:	429a      	cmp	r2, r3
 8013952:	f040 8082 	bne.w	8013a5a <dhcp_recv+0x16e>
  for (i = 0; i < netif->hwaddr_len && i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013956:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801395a:	3301      	adds	r3, #1
 801395c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013960:	6a3b      	ldr	r3, [r7, #32]
 8013962:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013966:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801396a:	429a      	cmp	r2, r3
 801396c:	d203      	bcs.n	8013976 <dhcp_recv+0x8a>
 801396e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013972:	2b05      	cmp	r3, #5
 8013974:	d9e1      	bls.n	801393a <dhcp_recv+0x4e>
                   (u16_t)i, (u16_t)netif->hwaddr[i], (u16_t)i, (u16_t)reply_msg->chaddr[i]));
      goto free_pbuf_and_return;
    }
  }
  /* match transaction ID against what we expected */
  if (lwip_ntohl(reply_msg->xid) != dhcp->xid) {
 8013976:	69bb      	ldr	r3, [r7, #24]
 8013978:	685b      	ldr	r3, [r3, #4]
 801397a:	4618      	mov	r0, r3
 801397c:	f7f6 fcf5 	bl	800a36a <lwip_htonl>
 8013980:	4602      	mov	r2, r0
 8013982:	69fb      	ldr	r3, [r7, #28]
 8013984:	681b      	ldr	r3, [r3, #0]
 8013986:	429a      	cmp	r2, r3
 8013988:	d169      	bne.n	8013a5e <dhcp_recv+0x172>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("transaction id mismatch reply_msg->xid(%"X32_F")!=dhcp->xid(%"X32_F")\n", lwip_ntohl(reply_msg->xid), dhcp->xid));
    goto free_pbuf_and_return;
  }
  /* option fields could be unfold? */
  if (dhcp_parse_reply(p, dhcp) != ERR_OK) {
 801398a:	69f9      	ldr	r1, [r7, #28]
 801398c:	6878      	ldr	r0, [r7, #4]
 801398e:	f7ff fcd9 	bl	8013344 <dhcp_parse_reply>
 8013992:	4603      	mov	r3, r0
 8013994:	2b00      	cmp	r3, #0
 8013996:	d164      	bne.n	8013a62 <dhcp_recv+0x176>
    goto free_pbuf_and_return;
  }

  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("searching DHCP_OPTION_MESSAGE_TYPE\n"));
  /* obtain pointer to DHCP message type */
  if (!dhcp_option_given(dhcp, DHCP_OPTION_IDX_MSG_TYPE)) {
 8013998:	4b39      	ldr	r3, [pc, #228]	; (8013a80 <dhcp_recv+0x194>)
 801399a:	785b      	ldrb	r3, [r3, #1]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d062      	beq.n	8013a66 <dhcp_recv+0x17a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("DHCP_OPTION_MESSAGE_TYPE option not found\n"));
    goto free_pbuf_and_return;
  }

  msg_in = (struct dhcp_msg *)p->payload;
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	685b      	ldr	r3, [r3, #4]
 80139a4:	617b      	str	r3, [r7, #20]
  /* read DHCP message type */
  msg_type = (u8_t)dhcp_get_option_value(dhcp, DHCP_OPTION_IDX_MSG_TYPE);
 80139a6:	4b37      	ldr	r3, [pc, #220]	; (8013a84 <dhcp_recv+0x198>)
 80139a8:	685b      	ldr	r3, [r3, #4]
 80139aa:	74fb      	strb	r3, [r7, #19]
  /* message type is DHCP ACK? */
  if (msg_type == DHCP_ACK) {
 80139ac:	7cfb      	ldrb	r3, [r7, #19]
 80139ae:	2b05      	cmp	r3, #5
 80139b0:	d12a      	bne.n	8013a08 <dhcp_recv+0x11c>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_ACK received\n"));
    /* in requesting state? */
    if (dhcp->state == DHCP_STATE_REQUESTING) {
 80139b2:	69fb      	ldr	r3, [r7, #28]
 80139b4:	795b      	ldrb	r3, [r3, #5]
 80139b6:	2b01      	cmp	r3, #1
 80139b8:	d112      	bne.n	80139e0 <dhcp_recv+0xf4>
      dhcp_handle_ack(netif, msg_in);
 80139ba:	6979      	ldr	r1, [r7, #20]
 80139bc:	6a38      	ldr	r0, [r7, #32]
 80139be:	f7fe fe17 	bl	80125f0 <dhcp_handle_ack>
#if DHCP_DOES_ARP_CHECK
      if ((netif->flags & NETIF_FLAG_ETHARP) != 0) {
 80139c2:	6a3b      	ldr	r3, [r7, #32]
 80139c4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80139c8:	f003 0308 	and.w	r3, r3, #8
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	d003      	beq.n	80139d8 <dhcp_recv+0xec>
        /* check if the acknowledged lease address is already in use */
        dhcp_check(netif);
 80139d0:	6a38      	ldr	r0, [r7, #32]
 80139d2:	f7fe fb85 	bl	80120e0 <dhcp_check>
 80139d6:	e049      	b.n	8013a6c <dhcp_recv+0x180>
      } else {
        /* bind interface to the acknowledged lease address */
        dhcp_bind(netif);
 80139d8:	6a38      	ldr	r0, [r7, #32]
 80139da:	f7ff f867 	bl	8012aac <dhcp_bind>
 80139de:	e045      	b.n	8013a6c <dhcp_recv+0x180>
      /* bind interface to the acknowledged lease address */
      dhcp_bind(netif);
#endif
    }
    /* already bound to the given lease address? */
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80139e0:	69fb      	ldr	r3, [r7, #28]
 80139e2:	795b      	ldrb	r3, [r3, #5]
 80139e4:	2b03      	cmp	r3, #3
 80139e6:	d007      	beq.n	80139f8 <dhcp_recv+0x10c>
 80139e8:	69fb      	ldr	r3, [r7, #28]
 80139ea:	795b      	ldrb	r3, [r3, #5]
 80139ec:	2b04      	cmp	r3, #4
 80139ee:	d003      	beq.n	80139f8 <dhcp_recv+0x10c>
             (dhcp->state == DHCP_STATE_RENEWING)) {
 80139f0:	69fb      	ldr	r3, [r7, #28]
 80139f2:	795b      	ldrb	r3, [r3, #5]
    else if ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REBINDING) ||
 80139f4:	2b05      	cmp	r3, #5
 80139f6:	d139      	bne.n	8013a6c <dhcp_recv+0x180>
      dhcp_handle_ack(netif, msg_in);
 80139f8:	6979      	ldr	r1, [r7, #20]
 80139fa:	6a38      	ldr	r0, [r7, #32]
 80139fc:	f7fe fdf8 	bl	80125f0 <dhcp_handle_ack>
      dhcp_bind(netif);
 8013a00:	6a38      	ldr	r0, [r7, #32]
 8013a02:	f7ff f853 	bl	8012aac <dhcp_bind>
 8013a06:	e031      	b.n	8013a6c <dhcp_recv+0x180>
    }
  }
  /* received a DHCP_NAK in appropriate state? */
  else if ((msg_type == DHCP_NAK) &&
 8013a08:	7cfb      	ldrb	r3, [r7, #19]
 8013a0a:	2b06      	cmp	r3, #6
 8013a0c:	d113      	bne.n	8013a36 <dhcp_recv+0x14a>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013a0e:	69fb      	ldr	r3, [r7, #28]
 8013a10:	795b      	ldrb	r3, [r3, #5]
  else if ((msg_type == DHCP_NAK) &&
 8013a12:	2b03      	cmp	r3, #3
 8013a14:	d00b      	beq.n	8013a2e <dhcp_recv+0x142>
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013a16:	69fb      	ldr	r3, [r7, #28]
 8013a18:	795b      	ldrb	r3, [r3, #5]
 8013a1a:	2b01      	cmp	r3, #1
 8013a1c:	d007      	beq.n	8013a2e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013a1e:	69fb      	ldr	r3, [r7, #28]
 8013a20:	795b      	ldrb	r3, [r3, #5]
           ((dhcp->state == DHCP_STATE_REBOOTING) || (dhcp->state == DHCP_STATE_REQUESTING) ||
 8013a22:	2b04      	cmp	r3, #4
 8013a24:	d003      	beq.n	8013a2e <dhcp_recv+0x142>
            (dhcp->state == DHCP_STATE_REBINDING) || (dhcp->state == DHCP_STATE_RENEWING  ))) {
 8013a26:	69fb      	ldr	r3, [r7, #28]
 8013a28:	795b      	ldrb	r3, [r3, #5]
 8013a2a:	2b05      	cmp	r3, #5
 8013a2c:	d103      	bne.n	8013a36 <dhcp_recv+0x14a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_NAK received\n"));
    dhcp_handle_nak(netif);
 8013a2e:	6a38      	ldr	r0, [r7, #32]
 8013a30:	f7fe fb3c 	bl	80120ac <dhcp_handle_nak>
 8013a34:	e01a      	b.n	8013a6c <dhcp_recv+0x180>
  }
  /* received a DHCP_OFFER in DHCP_STATE_SELECTING state? */
  else if ((msg_type == DHCP_OFFER) && (dhcp->state == DHCP_STATE_SELECTING)) {
 8013a36:	7cfb      	ldrb	r3, [r7, #19]
 8013a38:	2b02      	cmp	r3, #2
 8013a3a:	d116      	bne.n	8013a6a <dhcp_recv+0x17e>
 8013a3c:	69fb      	ldr	r3, [r7, #28]
 8013a3e:	795b      	ldrb	r3, [r3, #5]
 8013a40:	2b06      	cmp	r3, #6
 8013a42:	d112      	bne.n	8013a6a <dhcp_recv+0x17e>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE, ("DHCP_OFFER received in DHCP_STATE_SELECTING state\n"));
    /* remember offered lease */
    dhcp_handle_offer(netif, msg_in);
 8013a44:	6979      	ldr	r1, [r7, #20]
 8013a46:	6a38      	ldr	r0, [r7, #32]
 8013a48:	f7fe fb7e 	bl	8012148 <dhcp_handle_offer>
 8013a4c:	e00e      	b.n	8013a6c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013a4e:	bf00      	nop
 8013a50:	e00c      	b.n	8013a6c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013a52:	bf00      	nop
 8013a54:	e00a      	b.n	8013a6c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013a56:	bf00      	nop
 8013a58:	e008      	b.n	8013a6c <dhcp_recv+0x180>
      goto free_pbuf_and_return;
 8013a5a:	bf00      	nop
 8013a5c:	e006      	b.n	8013a6c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013a5e:	bf00      	nop
 8013a60:	e004      	b.n	8013a6c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013a62:	bf00      	nop
 8013a64:	e002      	b.n	8013a6c <dhcp_recv+0x180>
    goto free_pbuf_and_return;
 8013a66:	bf00      	nop
 8013a68:	e000      	b.n	8013a6c <dhcp_recv+0x180>
  }

free_pbuf_and_return:
 8013a6a:	bf00      	nop
  pbuf_free(p);
 8013a6c:	6878      	ldr	r0, [r7, #4]
 8013a6e:	f7f8 f865 	bl	800bb3c <pbuf_free>
}
 8013a72:	bf00      	nop
 8013a74:	3728      	adds	r7, #40	; 0x28
 8013a76:	46bd      	mov	sp, r7
 8013a78:	bd80      	pop	{r7, pc}
 8013a7a:	bf00      	nop
 8013a7c:	200098d0 	.word	0x200098d0
 8013a80:	2000f284 	.word	0x2000f284
 8013a84:	2000f264 	.word	0x2000f264

08013a88 <dhcp_create_msg>:
 * @param dhcp dhcp control struct
 * @param message_type message type of the request
 */
static struct pbuf *
dhcp_create_msg(struct netif *netif, struct dhcp *dhcp, u8_t message_type, u16_t *options_out_len)
{
 8013a88:	b580      	push	{r7, lr}
 8013a8a:	b088      	sub	sp, #32
 8013a8c:	af00      	add	r7, sp, #0
 8013a8e:	60f8      	str	r0, [r7, #12]
 8013a90:	60b9      	str	r1, [r7, #8]
 8013a92:	603b      	str	r3, [r7, #0]
 8013a94:	4613      	mov	r3, r2
 8013a96:	71fb      	strb	r3, [r7, #7]
  if (!xid_initialised) {
    xid = DHCP_GLOBAL_XID;
    xid_initialised = !xid_initialised;
  }
#endif
  LWIP_ERROR("dhcp_create_msg: netif != NULL", (netif != NULL), return NULL;);
 8013a98:	68fb      	ldr	r3, [r7, #12]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d108      	bne.n	8013ab0 <dhcp_create_msg+0x28>
 8013a9e:	4b5f      	ldr	r3, [pc, #380]	; (8013c1c <dhcp_create_msg+0x194>)
 8013aa0:	f240 7269 	movw	r2, #1897	; 0x769
 8013aa4:	495e      	ldr	r1, [pc, #376]	; (8013c20 <dhcp_create_msg+0x198>)
 8013aa6:	485f      	ldr	r0, [pc, #380]	; (8013c24 <dhcp_create_msg+0x19c>)
 8013aa8:	f002 feca 	bl	8016840 <iprintf>
 8013aac:	2300      	movs	r3, #0
 8013aae:	e0b1      	b.n	8013c14 <dhcp_create_msg+0x18c>
  LWIP_ERROR("dhcp_create_msg: dhcp != NULL", (dhcp != NULL), return NULL;);
 8013ab0:	68bb      	ldr	r3, [r7, #8]
 8013ab2:	2b00      	cmp	r3, #0
 8013ab4:	d108      	bne.n	8013ac8 <dhcp_create_msg+0x40>
 8013ab6:	4b59      	ldr	r3, [pc, #356]	; (8013c1c <dhcp_create_msg+0x194>)
 8013ab8:	f240 726a 	movw	r2, #1898	; 0x76a
 8013abc:	495a      	ldr	r1, [pc, #360]	; (8013c28 <dhcp_create_msg+0x1a0>)
 8013abe:	4859      	ldr	r0, [pc, #356]	; (8013c24 <dhcp_create_msg+0x19c>)
 8013ac0:	f002 febe 	bl	8016840 <iprintf>
 8013ac4:	2300      	movs	r3, #0
 8013ac6:	e0a5      	b.n	8013c14 <dhcp_create_msg+0x18c>
  p_out = pbuf_alloc(PBUF_TRANSPORT, sizeof(struct dhcp_msg), PBUF_RAM);
 8013ac8:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013acc:	f44f 719a 	mov.w	r1, #308	; 0x134
 8013ad0:	2036      	movs	r0, #54	; 0x36
 8013ad2:	f7f7 fd4f 	bl	800b574 <pbuf_alloc>
 8013ad6:	61b8      	str	r0, [r7, #24]
  if (p_out == NULL) {
 8013ad8:	69bb      	ldr	r3, [r7, #24]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	d101      	bne.n	8013ae2 <dhcp_create_msg+0x5a>
    LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("dhcp_create_msg(): could not allocate pbuf\n"));
    return NULL;
 8013ade:	2300      	movs	r3, #0
 8013ae0:	e098      	b.n	8013c14 <dhcp_create_msg+0x18c>
  }
  LWIP_ASSERT("dhcp_create_msg: check that first pbuf can hold struct dhcp_msg",
 8013ae2:	69bb      	ldr	r3, [r7, #24]
 8013ae4:	895b      	ldrh	r3, [r3, #10]
 8013ae6:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 8013aea:	d206      	bcs.n	8013afa <dhcp_create_msg+0x72>
 8013aec:	4b4b      	ldr	r3, [pc, #300]	; (8013c1c <dhcp_create_msg+0x194>)
 8013aee:	f240 7271 	movw	r2, #1905	; 0x771
 8013af2:	494e      	ldr	r1, [pc, #312]	; (8013c2c <dhcp_create_msg+0x1a4>)
 8013af4:	484b      	ldr	r0, [pc, #300]	; (8013c24 <dhcp_create_msg+0x19c>)
 8013af6:	f002 fea3 	bl	8016840 <iprintf>
              (p_out->len >= sizeof(struct dhcp_msg)));

  /* DHCP_REQUEST should reuse 'xid' from DHCPOFFER */
  if ((message_type != DHCP_REQUEST) || (dhcp->state == DHCP_STATE_REBOOTING)) {
 8013afa:	79fb      	ldrb	r3, [r7, #7]
 8013afc:	2b03      	cmp	r3, #3
 8013afe:	d103      	bne.n	8013b08 <dhcp_create_msg+0x80>
 8013b00:	68bb      	ldr	r3, [r7, #8]
 8013b02:	795b      	ldrb	r3, [r3, #5]
 8013b04:	2b03      	cmp	r3, #3
 8013b06:	d10d      	bne.n	8013b24 <dhcp_create_msg+0x9c>
    /* reuse transaction identifier in retransmissions */
    if (dhcp->tries == 0) {
 8013b08:	68bb      	ldr	r3, [r7, #8]
 8013b0a:	799b      	ldrb	r3, [r3, #6]
 8013b0c:	2b00      	cmp	r3, #0
 8013b0e:	d105      	bne.n	8013b1c <dhcp_create_msg+0x94>
#if DHCP_CREATE_RAND_XID && defined(LWIP_RAND)
      xid = LWIP_RAND();
 8013b10:	f002 feae 	bl	8016870 <rand>
 8013b14:	4603      	mov	r3, r0
 8013b16:	461a      	mov	r2, r3
 8013b18:	4b45      	ldr	r3, [pc, #276]	; (8013c30 <dhcp_create_msg+0x1a8>)
 8013b1a:	601a      	str	r2, [r3, #0]
#else /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
      xid++;
#endif /* DHCP_CREATE_RAND_XID && defined(LWIP_RAND) */
    }
    dhcp->xid = xid;
 8013b1c:	4b44      	ldr	r3, [pc, #272]	; (8013c30 <dhcp_create_msg+0x1a8>)
 8013b1e:	681a      	ldr	r2, [r3, #0]
 8013b20:	68bb      	ldr	r3, [r7, #8]
 8013b22:	601a      	str	r2, [r3, #0]
  }
  LWIP_DEBUGF(DHCP_DEBUG | LWIP_DBG_TRACE,
              ("transaction id xid(%"X32_F")\n", xid));

  msg_out = (struct dhcp_msg *)p_out->payload;
 8013b24:	69bb      	ldr	r3, [r7, #24]
 8013b26:	685b      	ldr	r3, [r3, #4]
 8013b28:	617b      	str	r3, [r7, #20]
  memset(msg_out, 0, sizeof(struct dhcp_msg));
 8013b2a:	f44f 729a 	mov.w	r2, #308	; 0x134
 8013b2e:	2100      	movs	r1, #0
 8013b30:	6978      	ldr	r0, [r7, #20]
 8013b32:	f002 fde8 	bl	8016706 <memset>

  msg_out->op = DHCP_BOOTREQUEST;
 8013b36:	697b      	ldr	r3, [r7, #20]
 8013b38:	2201      	movs	r2, #1
 8013b3a:	701a      	strb	r2, [r3, #0]
  /* @todo: make link layer independent */
  msg_out->htype = LWIP_IANA_HWTYPE_ETHERNET;
 8013b3c:	697b      	ldr	r3, [r7, #20]
 8013b3e:	2201      	movs	r2, #1
 8013b40:	705a      	strb	r2, [r3, #1]
  msg_out->hlen = netif->hwaddr_len;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	709a      	strb	r2, [r3, #2]
  msg_out->xid = lwip_htonl(dhcp->xid);
 8013b4c:	68bb      	ldr	r3, [r7, #8]
 8013b4e:	681b      	ldr	r3, [r3, #0]
 8013b50:	4618      	mov	r0, r3
 8013b52:	f7f6 fc0a 	bl	800a36a <lwip_htonl>
 8013b56:	4602      	mov	r2, r0
 8013b58:	697b      	ldr	r3, [r7, #20]
 8013b5a:	605a      	str	r2, [r3, #4]
  /* we don't need the broadcast flag since we can receive unicast traffic
     before being fully configured! */
  /* set ciaddr to netif->ip_addr based on message_type and state */
  if ((message_type == DHCP_INFORM) || (message_type == DHCP_DECLINE) || (message_type == DHCP_RELEASE) ||
 8013b5c:	79fb      	ldrb	r3, [r7, #7]
 8013b5e:	2b08      	cmp	r3, #8
 8013b60:	d010      	beq.n	8013b84 <dhcp_create_msg+0xfc>
 8013b62:	79fb      	ldrb	r3, [r7, #7]
 8013b64:	2b04      	cmp	r3, #4
 8013b66:	d00d      	beq.n	8013b84 <dhcp_create_msg+0xfc>
 8013b68:	79fb      	ldrb	r3, [r7, #7]
 8013b6a:	2b07      	cmp	r3, #7
 8013b6c:	d00a      	beq.n	8013b84 <dhcp_create_msg+0xfc>
 8013b6e:	79fb      	ldrb	r3, [r7, #7]
 8013b70:	2b03      	cmp	r3, #3
 8013b72:	d10c      	bne.n	8013b8e <dhcp_create_msg+0x106>
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013b74:	68bb      	ldr	r3, [r7, #8]
 8013b76:	795b      	ldrb	r3, [r3, #5]
      ((message_type == DHCP_REQUEST) && /* DHCP_STATE_BOUND not used for sending! */
 8013b78:	2b05      	cmp	r3, #5
 8013b7a:	d003      	beq.n	8013b84 <dhcp_create_msg+0xfc>
       ((dhcp->state == DHCP_STATE_RENEWING) || dhcp->state == DHCP_STATE_REBINDING))) {
 8013b7c:	68bb      	ldr	r3, [r7, #8]
 8013b7e:	795b      	ldrb	r3, [r3, #5]
 8013b80:	2b04      	cmp	r3, #4
 8013b82:	d104      	bne.n	8013b8e <dhcp_create_msg+0x106>
    ip4_addr_copy(msg_out->ciaddr, *netif_ip4_addr(netif));
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	3304      	adds	r3, #4
 8013b88:	681a      	ldr	r2, [r3, #0]
 8013b8a:	697b      	ldr	r3, [r7, #20]
 8013b8c:	60da      	str	r2, [r3, #12]
  }
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013b8e:	2300      	movs	r3, #0
 8013b90:	83fb      	strh	r3, [r7, #30]
 8013b92:	e00c      	b.n	8013bae <dhcp_create_msg+0x126>
    /* copy netif hardware address (padded with zeroes through memset already) */
    msg_out->chaddr[i] = netif->hwaddr[i];
 8013b94:	8bfa      	ldrh	r2, [r7, #30]
 8013b96:	8bfb      	ldrh	r3, [r7, #30]
 8013b98:	68f9      	ldr	r1, [r7, #12]
 8013b9a:	440a      	add	r2, r1
 8013b9c:	f892 102a 	ldrb.w	r1, [r2, #42]	; 0x2a
 8013ba0:	697a      	ldr	r2, [r7, #20]
 8013ba2:	4413      	add	r3, r2
 8013ba4:	460a      	mov	r2, r1
 8013ba6:	771a      	strb	r2, [r3, #28]
  for (i = 0; i < LWIP_MIN(DHCP_CHADDR_LEN, NETIF_MAX_HWADDR_LEN); i++) {
 8013ba8:	8bfb      	ldrh	r3, [r7, #30]
 8013baa:	3301      	adds	r3, #1
 8013bac:	83fb      	strh	r3, [r7, #30]
 8013bae:	8bfb      	ldrh	r3, [r7, #30]
 8013bb0:	2b05      	cmp	r3, #5
 8013bb2:	d9ef      	bls.n	8013b94 <dhcp_create_msg+0x10c>
  }
  msg_out->cookie = PP_HTONL(DHCP_MAGIC_COOKIE);
 8013bb4:	697b      	ldr	r3, [r7, #20]
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013bbc:	f883 20ec 	strb.w	r2, [r3, #236]	; 0xec
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	f062 027d 	orn	r2, r2, #125	; 0x7d
 8013bc6:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
 8013bca:	2200      	movs	r2, #0
 8013bcc:	f042 0253 	orr.w	r2, r2, #83	; 0x53
 8013bd0:	f883 20ee 	strb.w	r2, [r3, #238]	; 0xee
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	f042 0263 	orr.w	r2, r2, #99	; 0x63
 8013bda:	f883 20ef 	strb.w	r2, [r3, #239]	; 0xef
  /* Add option MESSAGE_TYPE */
  options_out_len_loc = dhcp_option(0, msg_out->options, DHCP_OPTION_MESSAGE_TYPE, DHCP_OPTION_MESSAGE_TYPE_LEN);
 8013bde:	697b      	ldr	r3, [r7, #20]
 8013be0:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013be4:	2301      	movs	r3, #1
 8013be6:	2235      	movs	r2, #53	; 0x35
 8013be8:	2000      	movs	r0, #0
 8013bea:	f7ff fadb 	bl	80131a4 <dhcp_option>
 8013bee:	4603      	mov	r3, r0
 8013bf0:	827b      	strh	r3, [r7, #18]
  options_out_len_loc = dhcp_option_byte(options_out_len_loc, msg_out->options, message_type);
 8013bf2:	697b      	ldr	r3, [r7, #20]
 8013bf4:	f103 01f0 	add.w	r1, r3, #240	; 0xf0
 8013bf8:	79fa      	ldrb	r2, [r7, #7]
 8013bfa:	8a7b      	ldrh	r3, [r7, #18]
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7ff fb05 	bl	801320c <dhcp_option_byte>
 8013c02:	4603      	mov	r3, r0
 8013c04:	827b      	strh	r3, [r7, #18]
  if (options_out_len) {
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	2b00      	cmp	r3, #0
 8013c0a:	d002      	beq.n	8013c12 <dhcp_create_msg+0x18a>
    *options_out_len = options_out_len_loc;
 8013c0c:	683b      	ldr	r3, [r7, #0]
 8013c0e:	8a7a      	ldrh	r2, [r7, #18]
 8013c10:	801a      	strh	r2, [r3, #0]
  }
  return p_out;
 8013c12:	69bb      	ldr	r3, [r7, #24]
}
 8013c14:	4618      	mov	r0, r3
 8013c16:	3720      	adds	r7, #32
 8013c18:	46bd      	mov	sp, r7
 8013c1a:	bd80      	pop	{r7, pc}
 8013c1c:	08019afc 	.word	0x08019afc
 8013c20:	08019e1c 	.word	0x08019e1c
 8013c24:	08019b5c 	.word	0x08019b5c
 8013c28:	08019e3c 	.word	0x08019e3c
 8013c2c:	08019e5c 	.word	0x08019e5c
 8013c30:	2000f294 	.word	0x2000f294

08013c34 <dhcp_option_trailer>:
 * Adds the END option to the DHCP message, and if
 * necessary, up to three padding bytes.
 */
static void
dhcp_option_trailer(u16_t options_out_len, u8_t *options, struct pbuf *p_out)
{
 8013c34:	b580      	push	{r7, lr}
 8013c36:	b084      	sub	sp, #16
 8013c38:	af00      	add	r7, sp, #0
 8013c3a:	4603      	mov	r3, r0
 8013c3c:	60b9      	str	r1, [r7, #8]
 8013c3e:	607a      	str	r2, [r7, #4]
 8013c40:	81fb      	strh	r3, [r7, #14]
  options[options_out_len++] = DHCP_OPTION_END;
 8013c42:	89fb      	ldrh	r3, [r7, #14]
 8013c44:	1c5a      	adds	r2, r3, #1
 8013c46:	81fa      	strh	r2, [r7, #14]
 8013c48:	461a      	mov	r2, r3
 8013c4a:	68bb      	ldr	r3, [r7, #8]
 8013c4c:	4413      	add	r3, r2
 8013c4e:	22ff      	movs	r2, #255	; 0xff
 8013c50:	701a      	strb	r2, [r3, #0]
  /* packet is too small, or not 4 byte aligned? */
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8013c52:	e007      	b.n	8013c64 <dhcp_option_trailer+0x30>
         (options_out_len < DHCP_OPTIONS_LEN)) {
    /* add a fill/padding byte */
    options[options_out_len++] = 0;
 8013c54:	89fb      	ldrh	r3, [r7, #14]
 8013c56:	1c5a      	adds	r2, r3, #1
 8013c58:	81fa      	strh	r2, [r7, #14]
 8013c5a:	461a      	mov	r2, r3
 8013c5c:	68bb      	ldr	r3, [r7, #8]
 8013c5e:	4413      	add	r3, r2
 8013c60:	2200      	movs	r2, #0
 8013c62:	701a      	strb	r2, [r3, #0]
  while (((options_out_len < DHCP_MIN_OPTIONS_LEN) || (options_out_len & 3)) &&
 8013c64:	89fb      	ldrh	r3, [r7, #14]
 8013c66:	2b43      	cmp	r3, #67	; 0x43
 8013c68:	d904      	bls.n	8013c74 <dhcp_option_trailer+0x40>
 8013c6a:	89fb      	ldrh	r3, [r7, #14]
 8013c6c:	f003 0303 	and.w	r3, r3, #3
 8013c70:	2b00      	cmp	r3, #0
 8013c72:	d002      	beq.n	8013c7a <dhcp_option_trailer+0x46>
 8013c74:	89fb      	ldrh	r3, [r7, #14]
 8013c76:	2b43      	cmp	r3, #67	; 0x43
 8013c78:	d9ec      	bls.n	8013c54 <dhcp_option_trailer+0x20>
  }
  /* shrink the pbuf to the actual content length */
  pbuf_realloc(p_out, (u16_t)(sizeof(struct dhcp_msg) - DHCP_OPTIONS_LEN + options_out_len));
 8013c7a:	89fb      	ldrh	r3, [r7, #14]
 8013c7c:	33f0      	adds	r3, #240	; 0xf0
 8013c7e:	b29b      	uxth	r3, r3
 8013c80:	4619      	mov	r1, r3
 8013c82:	6878      	ldr	r0, [r7, #4]
 8013c84:	f7f7 fdd4 	bl	800b830 <pbuf_realloc>
}
 8013c88:	bf00      	nop
 8013c8a:	3710      	adds	r7, #16
 8013c8c:	46bd      	mov	sp, r7
 8013c8e:	bd80      	pop	{r7, pc}

08013c90 <dhcp_supplied_address>:
 * @return 1 if DHCP supplied netif->ip_addr (states BOUND or RENEWING),
 *         0 otherwise
 */
u8_t
dhcp_supplied_address(const struct netif *netif)
{
 8013c90:	b480      	push	{r7}
 8013c92:	b085      	sub	sp, #20
 8013c94:	af00      	add	r7, sp, #0
 8013c96:	6078      	str	r0, [r7, #4]
  if ((netif != NULL) && (netif_dhcp_data(netif) != NULL)) {
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d017      	beq.n	8013cce <dhcp_supplied_address+0x3e>
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d013      	beq.n	8013cce <dhcp_supplied_address+0x3e>
    struct dhcp *dhcp = netif_dhcp_data(netif);
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013caa:	60fb      	str	r3, [r7, #12]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013cac:	68fb      	ldr	r3, [r7, #12]
 8013cae:	795b      	ldrb	r3, [r3, #5]
 8013cb0:	2b0a      	cmp	r3, #10
 8013cb2:	d007      	beq.n	8013cc4 <dhcp_supplied_address+0x34>
 8013cb4:	68fb      	ldr	r3, [r7, #12]
 8013cb6:	795b      	ldrb	r3, [r3, #5]
 8013cb8:	2b05      	cmp	r3, #5
 8013cba:	d003      	beq.n	8013cc4 <dhcp_supplied_address+0x34>
           (dhcp->state == DHCP_STATE_REBINDING);
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	795b      	ldrb	r3, [r3, #5]
    return (dhcp->state == DHCP_STATE_BOUND) || (dhcp->state == DHCP_STATE_RENEWING) ||
 8013cc0:	2b04      	cmp	r3, #4
 8013cc2:	d101      	bne.n	8013cc8 <dhcp_supplied_address+0x38>
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	e000      	b.n	8013cca <dhcp_supplied_address+0x3a>
 8013cc8:	2300      	movs	r3, #0
 8013cca:	b2db      	uxtb	r3, r3
 8013ccc:	e000      	b.n	8013cd0 <dhcp_supplied_address+0x40>
  }
  return 0;
 8013cce:	2300      	movs	r3, #0
}
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	3714      	adds	r7, #20
 8013cd4:	46bd      	mov	sp, r7
 8013cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cda:	4770      	bx	lr

08013cdc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013cdc:	b580      	push	{r7, lr}
 8013cde:	b082      	sub	sp, #8
 8013ce0:	af00      	add	r7, sp, #0
 8013ce2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8013ce4:	4915      	ldr	r1, [pc, #84]	; (8013d3c <etharp_free_entry+0x60>)
 8013ce6:	687a      	ldr	r2, [r7, #4]
 8013ce8:	4613      	mov	r3, r2
 8013cea:	005b      	lsls	r3, r3, #1
 8013cec:	4413      	add	r3, r2
 8013cee:	00db      	lsls	r3, r3, #3
 8013cf0:	440b      	add	r3, r1
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	2b00      	cmp	r3, #0
 8013cf6:	d013      	beq.n	8013d20 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8013cf8:	4910      	ldr	r1, [pc, #64]	; (8013d3c <etharp_free_entry+0x60>)
 8013cfa:	687a      	ldr	r2, [r7, #4]
 8013cfc:	4613      	mov	r3, r2
 8013cfe:	005b      	lsls	r3, r3, #1
 8013d00:	4413      	add	r3, r2
 8013d02:	00db      	lsls	r3, r3, #3
 8013d04:	440b      	add	r3, r1
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	4618      	mov	r0, r3
 8013d0a:	f7f7 ff17 	bl	800bb3c <pbuf_free>
    arp_table[i].q = NULL;
 8013d0e:	490b      	ldr	r1, [pc, #44]	; (8013d3c <etharp_free_entry+0x60>)
 8013d10:	687a      	ldr	r2, [r7, #4]
 8013d12:	4613      	mov	r3, r2
 8013d14:	005b      	lsls	r3, r3, #1
 8013d16:	4413      	add	r3, r2
 8013d18:	00db      	lsls	r3, r3, #3
 8013d1a:	440b      	add	r3, r1
 8013d1c:	2200      	movs	r2, #0
 8013d1e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8013d20:	4906      	ldr	r1, [pc, #24]	; (8013d3c <etharp_free_entry+0x60>)
 8013d22:	687a      	ldr	r2, [r7, #4]
 8013d24:	4613      	mov	r3, r2
 8013d26:	005b      	lsls	r3, r3, #1
 8013d28:	4413      	add	r3, r2
 8013d2a:	00db      	lsls	r3, r3, #3
 8013d2c:	440b      	add	r3, r1
 8013d2e:	3314      	adds	r3, #20
 8013d30:	2200      	movs	r2, #0
 8013d32:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8013d34:	bf00      	nop
 8013d36:	3708      	adds	r7, #8
 8013d38:	46bd      	mov	sp, r7
 8013d3a:	bd80      	pop	{r7, pc}
 8013d3c:	2000f298 	.word	0x2000f298

08013d40 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b082      	sub	sp, #8
 8013d44:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d46:	2300      	movs	r3, #0
 8013d48:	607b      	str	r3, [r7, #4]
 8013d4a:	e096      	b.n	8013e7a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013d4c:	494f      	ldr	r1, [pc, #316]	; (8013e8c <etharp_tmr+0x14c>)
 8013d4e:	687a      	ldr	r2, [r7, #4]
 8013d50:	4613      	mov	r3, r2
 8013d52:	005b      	lsls	r3, r3, #1
 8013d54:	4413      	add	r3, r2
 8013d56:	00db      	lsls	r3, r3, #3
 8013d58:	440b      	add	r3, r1
 8013d5a:	3314      	adds	r3, #20
 8013d5c:	781b      	ldrb	r3, [r3, #0]
 8013d5e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013d60:	78fb      	ldrb	r3, [r7, #3]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	f000 8086 	beq.w	8013e74 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013d68:	4948      	ldr	r1, [pc, #288]	; (8013e8c <etharp_tmr+0x14c>)
 8013d6a:	687a      	ldr	r2, [r7, #4]
 8013d6c:	4613      	mov	r3, r2
 8013d6e:	005b      	lsls	r3, r3, #1
 8013d70:	4413      	add	r3, r2
 8013d72:	00db      	lsls	r3, r3, #3
 8013d74:	440b      	add	r3, r1
 8013d76:	3312      	adds	r3, #18
 8013d78:	881b      	ldrh	r3, [r3, #0]
 8013d7a:	3301      	adds	r3, #1
 8013d7c:	b298      	uxth	r0, r3
 8013d7e:	4943      	ldr	r1, [pc, #268]	; (8013e8c <etharp_tmr+0x14c>)
 8013d80:	687a      	ldr	r2, [r7, #4]
 8013d82:	4613      	mov	r3, r2
 8013d84:	005b      	lsls	r3, r3, #1
 8013d86:	4413      	add	r3, r2
 8013d88:	00db      	lsls	r3, r3, #3
 8013d8a:	440b      	add	r3, r1
 8013d8c:	3312      	adds	r3, #18
 8013d8e:	4602      	mov	r2, r0
 8013d90:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013d92:	493e      	ldr	r1, [pc, #248]	; (8013e8c <etharp_tmr+0x14c>)
 8013d94:	687a      	ldr	r2, [r7, #4]
 8013d96:	4613      	mov	r3, r2
 8013d98:	005b      	lsls	r3, r3, #1
 8013d9a:	4413      	add	r3, r2
 8013d9c:	00db      	lsls	r3, r3, #3
 8013d9e:	440b      	add	r3, r1
 8013da0:	3312      	adds	r3, #18
 8013da2:	881b      	ldrh	r3, [r3, #0]
 8013da4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013da8:	d215      	bcs.n	8013dd6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013daa:	4938      	ldr	r1, [pc, #224]	; (8013e8c <etharp_tmr+0x14c>)
 8013dac:	687a      	ldr	r2, [r7, #4]
 8013dae:	4613      	mov	r3, r2
 8013db0:	005b      	lsls	r3, r3, #1
 8013db2:	4413      	add	r3, r2
 8013db4:	00db      	lsls	r3, r3, #3
 8013db6:	440b      	add	r3, r1
 8013db8:	3314      	adds	r3, #20
 8013dba:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013dbc:	2b01      	cmp	r3, #1
 8013dbe:	d10e      	bne.n	8013dde <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013dc0:	4932      	ldr	r1, [pc, #200]	; (8013e8c <etharp_tmr+0x14c>)
 8013dc2:	687a      	ldr	r2, [r7, #4]
 8013dc4:	4613      	mov	r3, r2
 8013dc6:	005b      	lsls	r3, r3, #1
 8013dc8:	4413      	add	r3, r2
 8013dca:	00db      	lsls	r3, r3, #3
 8013dcc:	440b      	add	r3, r1
 8013dce:	3312      	adds	r3, #18
 8013dd0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013dd2:	2b04      	cmp	r3, #4
 8013dd4:	d903      	bls.n	8013dde <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8013dd6:	6878      	ldr	r0, [r7, #4]
 8013dd8:	f7ff ff80 	bl	8013cdc <etharp_free_entry>
 8013ddc:	e04a      	b.n	8013e74 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013dde:	492b      	ldr	r1, [pc, #172]	; (8013e8c <etharp_tmr+0x14c>)
 8013de0:	687a      	ldr	r2, [r7, #4]
 8013de2:	4613      	mov	r3, r2
 8013de4:	005b      	lsls	r3, r3, #1
 8013de6:	4413      	add	r3, r2
 8013de8:	00db      	lsls	r3, r3, #3
 8013dea:	440b      	add	r3, r1
 8013dec:	3314      	adds	r3, #20
 8013dee:	781b      	ldrb	r3, [r3, #0]
 8013df0:	2b03      	cmp	r3, #3
 8013df2:	d10a      	bne.n	8013e0a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8013df4:	4925      	ldr	r1, [pc, #148]	; (8013e8c <etharp_tmr+0x14c>)
 8013df6:	687a      	ldr	r2, [r7, #4]
 8013df8:	4613      	mov	r3, r2
 8013dfa:	005b      	lsls	r3, r3, #1
 8013dfc:	4413      	add	r3, r2
 8013dfe:	00db      	lsls	r3, r3, #3
 8013e00:	440b      	add	r3, r1
 8013e02:	3314      	adds	r3, #20
 8013e04:	2204      	movs	r2, #4
 8013e06:	701a      	strb	r2, [r3, #0]
 8013e08:	e034      	b.n	8013e74 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8013e0a:	4920      	ldr	r1, [pc, #128]	; (8013e8c <etharp_tmr+0x14c>)
 8013e0c:	687a      	ldr	r2, [r7, #4]
 8013e0e:	4613      	mov	r3, r2
 8013e10:	005b      	lsls	r3, r3, #1
 8013e12:	4413      	add	r3, r2
 8013e14:	00db      	lsls	r3, r3, #3
 8013e16:	440b      	add	r3, r1
 8013e18:	3314      	adds	r3, #20
 8013e1a:	781b      	ldrb	r3, [r3, #0]
 8013e1c:	2b04      	cmp	r3, #4
 8013e1e:	d10a      	bne.n	8013e36 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8013e20:	491a      	ldr	r1, [pc, #104]	; (8013e8c <etharp_tmr+0x14c>)
 8013e22:	687a      	ldr	r2, [r7, #4]
 8013e24:	4613      	mov	r3, r2
 8013e26:	005b      	lsls	r3, r3, #1
 8013e28:	4413      	add	r3, r2
 8013e2a:	00db      	lsls	r3, r3, #3
 8013e2c:	440b      	add	r3, r1
 8013e2e:	3314      	adds	r3, #20
 8013e30:	2202      	movs	r2, #2
 8013e32:	701a      	strb	r2, [r3, #0]
 8013e34:	e01e      	b.n	8013e74 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8013e36:	4915      	ldr	r1, [pc, #84]	; (8013e8c <etharp_tmr+0x14c>)
 8013e38:	687a      	ldr	r2, [r7, #4]
 8013e3a:	4613      	mov	r3, r2
 8013e3c:	005b      	lsls	r3, r3, #1
 8013e3e:	4413      	add	r3, r2
 8013e40:	00db      	lsls	r3, r3, #3
 8013e42:	440b      	add	r3, r1
 8013e44:	3314      	adds	r3, #20
 8013e46:	781b      	ldrb	r3, [r3, #0]
 8013e48:	2b01      	cmp	r3, #1
 8013e4a:	d113      	bne.n	8013e74 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013e4c:	490f      	ldr	r1, [pc, #60]	; (8013e8c <etharp_tmr+0x14c>)
 8013e4e:	687a      	ldr	r2, [r7, #4]
 8013e50:	4613      	mov	r3, r2
 8013e52:	005b      	lsls	r3, r3, #1
 8013e54:	4413      	add	r3, r2
 8013e56:	00db      	lsls	r3, r3, #3
 8013e58:	440b      	add	r3, r1
 8013e5a:	3308      	adds	r3, #8
 8013e5c:	6818      	ldr	r0, [r3, #0]
 8013e5e:	687a      	ldr	r2, [r7, #4]
 8013e60:	4613      	mov	r3, r2
 8013e62:	005b      	lsls	r3, r3, #1
 8013e64:	4413      	add	r3, r2
 8013e66:	00db      	lsls	r3, r3, #3
 8013e68:	4a08      	ldr	r2, [pc, #32]	; (8013e8c <etharp_tmr+0x14c>)
 8013e6a:	4413      	add	r3, r2
 8013e6c:	3304      	adds	r3, #4
 8013e6e:	4619      	mov	r1, r3
 8013e70:	f000 fe72 	bl	8014b58 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	3301      	adds	r3, #1
 8013e78:	607b      	str	r3, [r7, #4]
 8013e7a:	687b      	ldr	r3, [r7, #4]
 8013e7c:	2b09      	cmp	r3, #9
 8013e7e:	f77f af65 	ble.w	8013d4c <etharp_tmr+0xc>
      }
    }
  }
}
 8013e82:	bf00      	nop
 8013e84:	bf00      	nop
 8013e86:	3708      	adds	r7, #8
 8013e88:	46bd      	mov	sp, r7
 8013e8a:	bd80      	pop	{r7, pc}
 8013e8c:	2000f298 	.word	0x2000f298

08013e90 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b08a      	sub	sp, #40	; 0x28
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	60f8      	str	r0, [r7, #12]
 8013e98:	460b      	mov	r3, r1
 8013e9a:	607a      	str	r2, [r7, #4]
 8013e9c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013e9e:	230a      	movs	r3, #10
 8013ea0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8013ea2:	230a      	movs	r3, #10
 8013ea4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8013ea6:	230a      	movs	r3, #10
 8013ea8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013eaa:	2300      	movs	r3, #0
 8013eac:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013eae:	230a      	movs	r3, #10
 8013eb0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8013eb2:	2300      	movs	r3, #0
 8013eb4:	83bb      	strh	r3, [r7, #28]
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	837b      	strh	r3, [r7, #26]
 8013eba:	2300      	movs	r3, #0
 8013ebc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013ebe:	2300      	movs	r3, #0
 8013ec0:	843b      	strh	r3, [r7, #32]
 8013ec2:	e0ae      	b.n	8014022 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8013ec4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ec8:	49a6      	ldr	r1, [pc, #664]	; (8014164 <etharp_find_entry+0x2d4>)
 8013eca:	4613      	mov	r3, r2
 8013ecc:	005b      	lsls	r3, r3, #1
 8013ece:	4413      	add	r3, r2
 8013ed0:	00db      	lsls	r3, r3, #3
 8013ed2:	440b      	add	r3, r1
 8013ed4:	3314      	adds	r3, #20
 8013ed6:	781b      	ldrb	r3, [r3, #0]
 8013ed8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013eda:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013ede:	2b0a      	cmp	r3, #10
 8013ee0:	d105      	bne.n	8013eee <etharp_find_entry+0x5e>
 8013ee2:	7dfb      	ldrb	r3, [r7, #23]
 8013ee4:	2b00      	cmp	r3, #0
 8013ee6:	d102      	bne.n	8013eee <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8013ee8:	8c3b      	ldrh	r3, [r7, #32]
 8013eea:	847b      	strh	r3, [r7, #34]	; 0x22
 8013eec:	e095      	b.n	801401a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8013eee:	7dfb      	ldrb	r3, [r7, #23]
 8013ef0:	2b00      	cmp	r3, #0
 8013ef2:	f000 8092 	beq.w	801401a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8013ef6:	7dfb      	ldrb	r3, [r7, #23]
 8013ef8:	2b01      	cmp	r3, #1
 8013efa:	d009      	beq.n	8013f10 <etharp_find_entry+0x80>
 8013efc:	7dfb      	ldrb	r3, [r7, #23]
 8013efe:	2b01      	cmp	r3, #1
 8013f00:	d806      	bhi.n	8013f10 <etharp_find_entry+0x80>
 8013f02:	4b99      	ldr	r3, [pc, #612]	; (8014168 <etharp_find_entry+0x2d8>)
 8013f04:	f240 1223 	movw	r2, #291	; 0x123
 8013f08:	4998      	ldr	r1, [pc, #608]	; (801416c <etharp_find_entry+0x2dc>)
 8013f0a:	4899      	ldr	r0, [pc, #612]	; (8014170 <etharp_find_entry+0x2e0>)
 8013f0c:	f002 fc98 	bl	8016840 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8013f10:	68fb      	ldr	r3, [r7, #12]
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d020      	beq.n	8013f58 <etharp_find_entry+0xc8>
 8013f16:	68fb      	ldr	r3, [r7, #12]
 8013f18:	6819      	ldr	r1, [r3, #0]
 8013f1a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f1e:	4891      	ldr	r0, [pc, #580]	; (8014164 <etharp_find_entry+0x2d4>)
 8013f20:	4613      	mov	r3, r2
 8013f22:	005b      	lsls	r3, r3, #1
 8013f24:	4413      	add	r3, r2
 8013f26:	00db      	lsls	r3, r3, #3
 8013f28:	4403      	add	r3, r0
 8013f2a:	3304      	adds	r3, #4
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	4299      	cmp	r1, r3
 8013f30:	d112      	bne.n	8013f58 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d00c      	beq.n	8013f52 <etharp_find_entry+0xc2>
 8013f38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f3c:	4989      	ldr	r1, [pc, #548]	; (8014164 <etharp_find_entry+0x2d4>)
 8013f3e:	4613      	mov	r3, r2
 8013f40:	005b      	lsls	r3, r3, #1
 8013f42:	4413      	add	r3, r2
 8013f44:	00db      	lsls	r3, r3, #3
 8013f46:	440b      	add	r3, r1
 8013f48:	3308      	adds	r3, #8
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	687a      	ldr	r2, [r7, #4]
 8013f4e:	429a      	cmp	r2, r3
 8013f50:	d102      	bne.n	8013f58 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013f52:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013f56:	e100      	b.n	801415a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013f58:	7dfb      	ldrb	r3, [r7, #23]
 8013f5a:	2b01      	cmp	r3, #1
 8013f5c:	d140      	bne.n	8013fe0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013f5e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f62:	4980      	ldr	r1, [pc, #512]	; (8014164 <etharp_find_entry+0x2d4>)
 8013f64:	4613      	mov	r3, r2
 8013f66:	005b      	lsls	r3, r3, #1
 8013f68:	4413      	add	r3, r2
 8013f6a:	00db      	lsls	r3, r3, #3
 8013f6c:	440b      	add	r3, r1
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	2b00      	cmp	r3, #0
 8013f72:	d01a      	beq.n	8013faa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013f74:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f78:	497a      	ldr	r1, [pc, #488]	; (8014164 <etharp_find_entry+0x2d4>)
 8013f7a:	4613      	mov	r3, r2
 8013f7c:	005b      	lsls	r3, r3, #1
 8013f7e:	4413      	add	r3, r2
 8013f80:	00db      	lsls	r3, r3, #3
 8013f82:	440b      	add	r3, r1
 8013f84:	3312      	adds	r3, #18
 8013f86:	881b      	ldrh	r3, [r3, #0]
 8013f88:	8bba      	ldrh	r2, [r7, #28]
 8013f8a:	429a      	cmp	r2, r3
 8013f8c:	d845      	bhi.n	801401a <etharp_find_entry+0x18a>
            old_queue = i;
 8013f8e:	8c3b      	ldrh	r3, [r7, #32]
 8013f90:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013f92:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013f96:	4973      	ldr	r1, [pc, #460]	; (8014164 <etharp_find_entry+0x2d4>)
 8013f98:	4613      	mov	r3, r2
 8013f9a:	005b      	lsls	r3, r3, #1
 8013f9c:	4413      	add	r3, r2
 8013f9e:	00db      	lsls	r3, r3, #3
 8013fa0:	440b      	add	r3, r1
 8013fa2:	3312      	adds	r3, #18
 8013fa4:	881b      	ldrh	r3, [r3, #0]
 8013fa6:	83bb      	strh	r3, [r7, #28]
 8013fa8:	e037      	b.n	801401a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013faa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fae:	496d      	ldr	r1, [pc, #436]	; (8014164 <etharp_find_entry+0x2d4>)
 8013fb0:	4613      	mov	r3, r2
 8013fb2:	005b      	lsls	r3, r3, #1
 8013fb4:	4413      	add	r3, r2
 8013fb6:	00db      	lsls	r3, r3, #3
 8013fb8:	440b      	add	r3, r1
 8013fba:	3312      	adds	r3, #18
 8013fbc:	881b      	ldrh	r3, [r3, #0]
 8013fbe:	8b7a      	ldrh	r2, [r7, #26]
 8013fc0:	429a      	cmp	r2, r3
 8013fc2:	d82a      	bhi.n	801401a <etharp_find_entry+0x18a>
            old_pending = i;
 8013fc4:	8c3b      	ldrh	r3, [r7, #32]
 8013fc6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013fc8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fcc:	4965      	ldr	r1, [pc, #404]	; (8014164 <etharp_find_entry+0x2d4>)
 8013fce:	4613      	mov	r3, r2
 8013fd0:	005b      	lsls	r3, r3, #1
 8013fd2:	4413      	add	r3, r2
 8013fd4:	00db      	lsls	r3, r3, #3
 8013fd6:	440b      	add	r3, r1
 8013fd8:	3312      	adds	r3, #18
 8013fda:	881b      	ldrh	r3, [r3, #0]
 8013fdc:	837b      	strh	r3, [r7, #26]
 8013fde:	e01c      	b.n	801401a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013fe0:	7dfb      	ldrb	r3, [r7, #23]
 8013fe2:	2b01      	cmp	r3, #1
 8013fe4:	d919      	bls.n	801401a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013fe6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013fea:	495e      	ldr	r1, [pc, #376]	; (8014164 <etharp_find_entry+0x2d4>)
 8013fec:	4613      	mov	r3, r2
 8013fee:	005b      	lsls	r3, r3, #1
 8013ff0:	4413      	add	r3, r2
 8013ff2:	00db      	lsls	r3, r3, #3
 8013ff4:	440b      	add	r3, r1
 8013ff6:	3312      	adds	r3, #18
 8013ff8:	881b      	ldrh	r3, [r3, #0]
 8013ffa:	8b3a      	ldrh	r2, [r7, #24]
 8013ffc:	429a      	cmp	r2, r3
 8013ffe:	d80c      	bhi.n	801401a <etharp_find_entry+0x18a>
            old_stable = i;
 8014000:	8c3b      	ldrh	r3, [r7, #32]
 8014002:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014004:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014008:	4956      	ldr	r1, [pc, #344]	; (8014164 <etharp_find_entry+0x2d4>)
 801400a:	4613      	mov	r3, r2
 801400c:	005b      	lsls	r3, r3, #1
 801400e:	4413      	add	r3, r2
 8014010:	00db      	lsls	r3, r3, #3
 8014012:	440b      	add	r3, r1
 8014014:	3312      	adds	r3, #18
 8014016:	881b      	ldrh	r3, [r3, #0]
 8014018:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801401a:	8c3b      	ldrh	r3, [r7, #32]
 801401c:	3301      	adds	r3, #1
 801401e:	b29b      	uxth	r3, r3
 8014020:	843b      	strh	r3, [r7, #32]
 8014022:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014026:	2b09      	cmp	r3, #9
 8014028:	f77f af4c 	ble.w	8013ec4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801402c:	7afb      	ldrb	r3, [r7, #11]
 801402e:	f003 0302 	and.w	r3, r3, #2
 8014032:	2b00      	cmp	r3, #0
 8014034:	d108      	bne.n	8014048 <etharp_find_entry+0x1b8>
 8014036:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801403a:	2b0a      	cmp	r3, #10
 801403c:	d107      	bne.n	801404e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801403e:	7afb      	ldrb	r3, [r7, #11]
 8014040:	f003 0301 	and.w	r3, r3, #1
 8014044:	2b00      	cmp	r3, #0
 8014046:	d102      	bne.n	801404e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014048:	f04f 33ff 	mov.w	r3, #4294967295
 801404c:	e085      	b.n	801415a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801404e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014052:	2b09      	cmp	r3, #9
 8014054:	dc02      	bgt.n	801405c <etharp_find_entry+0x1cc>
    i = empty;
 8014056:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014058:	843b      	strh	r3, [r7, #32]
 801405a:	e039      	b.n	80140d0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801405c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8014060:	2b09      	cmp	r3, #9
 8014062:	dc14      	bgt.n	801408e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8014064:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014066:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8014068:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801406c:	493d      	ldr	r1, [pc, #244]	; (8014164 <etharp_find_entry+0x2d4>)
 801406e:	4613      	mov	r3, r2
 8014070:	005b      	lsls	r3, r3, #1
 8014072:	4413      	add	r3, r2
 8014074:	00db      	lsls	r3, r3, #3
 8014076:	440b      	add	r3, r1
 8014078:	681b      	ldr	r3, [r3, #0]
 801407a:	2b00      	cmp	r3, #0
 801407c:	d018      	beq.n	80140b0 <etharp_find_entry+0x220>
 801407e:	4b3a      	ldr	r3, [pc, #232]	; (8014168 <etharp_find_entry+0x2d8>)
 8014080:	f240 126d 	movw	r2, #365	; 0x16d
 8014084:	493b      	ldr	r1, [pc, #236]	; (8014174 <etharp_find_entry+0x2e4>)
 8014086:	483a      	ldr	r0, [pc, #232]	; (8014170 <etharp_find_entry+0x2e0>)
 8014088:	f002 fbda 	bl	8016840 <iprintf>
 801408c:	e010      	b.n	80140b0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801408e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8014092:	2b09      	cmp	r3, #9
 8014094:	dc02      	bgt.n	801409c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8014096:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8014098:	843b      	strh	r3, [r7, #32]
 801409a:	e009      	b.n	80140b0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801409c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80140a0:	2b09      	cmp	r3, #9
 80140a2:	dc02      	bgt.n	80140aa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80140a4:	8bfb      	ldrh	r3, [r7, #30]
 80140a6:	843b      	strh	r3, [r7, #32]
 80140a8:	e002      	b.n	80140b0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80140aa:	f04f 33ff 	mov.w	r3, #4294967295
 80140ae:	e054      	b.n	801415a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80140b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140b4:	2b09      	cmp	r3, #9
 80140b6:	dd06      	ble.n	80140c6 <etharp_find_entry+0x236>
 80140b8:	4b2b      	ldr	r3, [pc, #172]	; (8014168 <etharp_find_entry+0x2d8>)
 80140ba:	f240 127f 	movw	r2, #383	; 0x17f
 80140be:	492e      	ldr	r1, [pc, #184]	; (8014178 <etharp_find_entry+0x2e8>)
 80140c0:	482b      	ldr	r0, [pc, #172]	; (8014170 <etharp_find_entry+0x2e0>)
 80140c2:	f002 fbbd 	bl	8016840 <iprintf>
    etharp_free_entry(i);
 80140c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140ca:	4618      	mov	r0, r3
 80140cc:	f7ff fe06 	bl	8013cdc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80140d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80140d4:	2b09      	cmp	r3, #9
 80140d6:	dd06      	ble.n	80140e6 <etharp_find_entry+0x256>
 80140d8:	4b23      	ldr	r3, [pc, #140]	; (8014168 <etharp_find_entry+0x2d8>)
 80140da:	f240 1283 	movw	r2, #387	; 0x183
 80140de:	4926      	ldr	r1, [pc, #152]	; (8014178 <etharp_find_entry+0x2e8>)
 80140e0:	4823      	ldr	r0, [pc, #140]	; (8014170 <etharp_find_entry+0x2e0>)
 80140e2:	f002 fbad 	bl	8016840 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80140e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80140ea:	491e      	ldr	r1, [pc, #120]	; (8014164 <etharp_find_entry+0x2d4>)
 80140ec:	4613      	mov	r3, r2
 80140ee:	005b      	lsls	r3, r3, #1
 80140f0:	4413      	add	r3, r2
 80140f2:	00db      	lsls	r3, r3, #3
 80140f4:	440b      	add	r3, r1
 80140f6:	3314      	adds	r3, #20
 80140f8:	781b      	ldrb	r3, [r3, #0]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d006      	beq.n	801410c <etharp_find_entry+0x27c>
 80140fe:	4b1a      	ldr	r3, [pc, #104]	; (8014168 <etharp_find_entry+0x2d8>)
 8014100:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014104:	491d      	ldr	r1, [pc, #116]	; (801417c <etharp_find_entry+0x2ec>)
 8014106:	481a      	ldr	r0, [pc, #104]	; (8014170 <etharp_find_entry+0x2e0>)
 8014108:	f002 fb9a 	bl	8016840 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801410c:	68fb      	ldr	r3, [r7, #12]
 801410e:	2b00      	cmp	r3, #0
 8014110:	d00b      	beq.n	801412a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014112:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	6819      	ldr	r1, [r3, #0]
 801411a:	4812      	ldr	r0, [pc, #72]	; (8014164 <etharp_find_entry+0x2d4>)
 801411c:	4613      	mov	r3, r2
 801411e:	005b      	lsls	r3, r3, #1
 8014120:	4413      	add	r3, r2
 8014122:	00db      	lsls	r3, r3, #3
 8014124:	4403      	add	r3, r0
 8014126:	3304      	adds	r3, #4
 8014128:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801412a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801412e:	490d      	ldr	r1, [pc, #52]	; (8014164 <etharp_find_entry+0x2d4>)
 8014130:	4613      	mov	r3, r2
 8014132:	005b      	lsls	r3, r3, #1
 8014134:	4413      	add	r3, r2
 8014136:	00db      	lsls	r3, r3, #3
 8014138:	440b      	add	r3, r1
 801413a:	3312      	adds	r3, #18
 801413c:	2200      	movs	r2, #0
 801413e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014140:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014144:	4907      	ldr	r1, [pc, #28]	; (8014164 <etharp_find_entry+0x2d4>)
 8014146:	4613      	mov	r3, r2
 8014148:	005b      	lsls	r3, r3, #1
 801414a:	4413      	add	r3, r2
 801414c:	00db      	lsls	r3, r3, #3
 801414e:	440b      	add	r3, r1
 8014150:	3308      	adds	r3, #8
 8014152:	687a      	ldr	r2, [r7, #4]
 8014154:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014156:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801415a:	4618      	mov	r0, r3
 801415c:	3728      	adds	r7, #40	; 0x28
 801415e:	46bd      	mov	sp, r7
 8014160:	bd80      	pop	{r7, pc}
 8014162:	bf00      	nop
 8014164:	2000f298 	.word	0x2000f298
 8014168:	08019e9c 	.word	0x08019e9c
 801416c:	08019ed4 	.word	0x08019ed4
 8014170:	08019f14 	.word	0x08019f14
 8014174:	08019f3c 	.word	0x08019f3c
 8014178:	08019f54 	.word	0x08019f54
 801417c:	08019f68 	.word	0x08019f68

08014180 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b088      	sub	sp, #32
 8014184:	af02      	add	r7, sp, #8
 8014186:	60f8      	str	r0, [r7, #12]
 8014188:	60b9      	str	r1, [r7, #8]
 801418a:	607a      	str	r2, [r7, #4]
 801418c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014194:	2b06      	cmp	r3, #6
 8014196:	d006      	beq.n	80141a6 <etharp_update_arp_entry+0x26>
 8014198:	4b48      	ldr	r3, [pc, #288]	; (80142bc <etharp_update_arp_entry+0x13c>)
 801419a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801419e:	4948      	ldr	r1, [pc, #288]	; (80142c0 <etharp_update_arp_entry+0x140>)
 80141a0:	4848      	ldr	r0, [pc, #288]	; (80142c4 <etharp_update_arp_entry+0x144>)
 80141a2:	f002 fb4d 	bl	8016840 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80141a6:	68bb      	ldr	r3, [r7, #8]
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d012      	beq.n	80141d2 <etharp_update_arp_entry+0x52>
 80141ac:	68bb      	ldr	r3, [r7, #8]
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d00e      	beq.n	80141d2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80141b4:	68bb      	ldr	r3, [r7, #8]
 80141b6:	681b      	ldr	r3, [r3, #0]
 80141b8:	68f9      	ldr	r1, [r7, #12]
 80141ba:	4618      	mov	r0, r3
 80141bc:	f001 f920 	bl	8015400 <ip4_addr_isbroadcast_u32>
 80141c0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d105      	bne.n	80141d2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80141c6:	68bb      	ldr	r3, [r7, #8]
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80141ce:	2be0      	cmp	r3, #224	; 0xe0
 80141d0:	d102      	bne.n	80141d8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80141d2:	f06f 030f 	mvn.w	r3, #15
 80141d6:	e06c      	b.n	80142b2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80141d8:	78fb      	ldrb	r3, [r7, #3]
 80141da:	68fa      	ldr	r2, [r7, #12]
 80141dc:	4619      	mov	r1, r3
 80141de:	68b8      	ldr	r0, [r7, #8]
 80141e0:	f7ff fe56 	bl	8013e90 <etharp_find_entry>
 80141e4:	4603      	mov	r3, r0
 80141e6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80141e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	da02      	bge.n	80141f6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80141f0:	8afb      	ldrh	r3, [r7, #22]
 80141f2:	b25b      	sxtb	r3, r3
 80141f4:	e05d      	b.n	80142b2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80141f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80141fa:	4933      	ldr	r1, [pc, #204]	; (80142c8 <etharp_update_arp_entry+0x148>)
 80141fc:	4613      	mov	r3, r2
 80141fe:	005b      	lsls	r3, r3, #1
 8014200:	4413      	add	r3, r2
 8014202:	00db      	lsls	r3, r3, #3
 8014204:	440b      	add	r3, r1
 8014206:	3314      	adds	r3, #20
 8014208:	2202      	movs	r2, #2
 801420a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801420c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014210:	492d      	ldr	r1, [pc, #180]	; (80142c8 <etharp_update_arp_entry+0x148>)
 8014212:	4613      	mov	r3, r2
 8014214:	005b      	lsls	r3, r3, #1
 8014216:	4413      	add	r3, r2
 8014218:	00db      	lsls	r3, r3, #3
 801421a:	440b      	add	r3, r1
 801421c:	3308      	adds	r3, #8
 801421e:	68fa      	ldr	r2, [r7, #12]
 8014220:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014222:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014226:	4613      	mov	r3, r2
 8014228:	005b      	lsls	r3, r3, #1
 801422a:	4413      	add	r3, r2
 801422c:	00db      	lsls	r3, r3, #3
 801422e:	3308      	adds	r3, #8
 8014230:	4a25      	ldr	r2, [pc, #148]	; (80142c8 <etharp_update_arp_entry+0x148>)
 8014232:	4413      	add	r3, r2
 8014234:	3304      	adds	r3, #4
 8014236:	2206      	movs	r2, #6
 8014238:	6879      	ldr	r1, [r7, #4]
 801423a:	4618      	mov	r0, r3
 801423c:	f002 fa55 	bl	80166ea <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014240:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014244:	4920      	ldr	r1, [pc, #128]	; (80142c8 <etharp_update_arp_entry+0x148>)
 8014246:	4613      	mov	r3, r2
 8014248:	005b      	lsls	r3, r3, #1
 801424a:	4413      	add	r3, r2
 801424c:	00db      	lsls	r3, r3, #3
 801424e:	440b      	add	r3, r1
 8014250:	3312      	adds	r3, #18
 8014252:	2200      	movs	r2, #0
 8014254:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014256:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801425a:	491b      	ldr	r1, [pc, #108]	; (80142c8 <etharp_update_arp_entry+0x148>)
 801425c:	4613      	mov	r3, r2
 801425e:	005b      	lsls	r3, r3, #1
 8014260:	4413      	add	r3, r2
 8014262:	00db      	lsls	r3, r3, #3
 8014264:	440b      	add	r3, r1
 8014266:	681b      	ldr	r3, [r3, #0]
 8014268:	2b00      	cmp	r3, #0
 801426a:	d021      	beq.n	80142b0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801426c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014270:	4915      	ldr	r1, [pc, #84]	; (80142c8 <etharp_update_arp_entry+0x148>)
 8014272:	4613      	mov	r3, r2
 8014274:	005b      	lsls	r3, r3, #1
 8014276:	4413      	add	r3, r2
 8014278:	00db      	lsls	r3, r3, #3
 801427a:	440b      	add	r3, r1
 801427c:	681b      	ldr	r3, [r3, #0]
 801427e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8014280:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014284:	4910      	ldr	r1, [pc, #64]	; (80142c8 <etharp_update_arp_entry+0x148>)
 8014286:	4613      	mov	r3, r2
 8014288:	005b      	lsls	r3, r3, #1
 801428a:	4413      	add	r3, r2
 801428c:	00db      	lsls	r3, r3, #3
 801428e:	440b      	add	r3, r1
 8014290:	2200      	movs	r2, #0
 8014292:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8014294:	68fb      	ldr	r3, [r7, #12]
 8014296:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801429a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801429e:	9300      	str	r3, [sp, #0]
 80142a0:	687b      	ldr	r3, [r7, #4]
 80142a2:	6939      	ldr	r1, [r7, #16]
 80142a4:	68f8      	ldr	r0, [r7, #12]
 80142a6:	f001 ffb9 	bl	801621c <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80142aa:	6938      	ldr	r0, [r7, #16]
 80142ac:	f7f7 fc46 	bl	800bb3c <pbuf_free>
  }
  return ERR_OK;
 80142b0:	2300      	movs	r3, #0
}
 80142b2:	4618      	mov	r0, r3
 80142b4:	3718      	adds	r7, #24
 80142b6:	46bd      	mov	sp, r7
 80142b8:	bd80      	pop	{r7, pc}
 80142ba:	bf00      	nop
 80142bc:	08019e9c 	.word	0x08019e9c
 80142c0:	08019f94 	.word	0x08019f94
 80142c4:	08019f14 	.word	0x08019f14
 80142c8:	2000f298 	.word	0x2000f298

080142cc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80142cc:	b580      	push	{r7, lr}
 80142ce:	b084      	sub	sp, #16
 80142d0:	af00      	add	r7, sp, #0
 80142d2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80142d4:	2300      	movs	r3, #0
 80142d6:	60fb      	str	r3, [r7, #12]
 80142d8:	e01e      	b.n	8014318 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80142da:	4913      	ldr	r1, [pc, #76]	; (8014328 <etharp_cleanup_netif+0x5c>)
 80142dc:	68fa      	ldr	r2, [r7, #12]
 80142de:	4613      	mov	r3, r2
 80142e0:	005b      	lsls	r3, r3, #1
 80142e2:	4413      	add	r3, r2
 80142e4:	00db      	lsls	r3, r3, #3
 80142e6:	440b      	add	r3, r1
 80142e8:	3314      	adds	r3, #20
 80142ea:	781b      	ldrb	r3, [r3, #0]
 80142ec:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80142ee:	7afb      	ldrb	r3, [r7, #11]
 80142f0:	2b00      	cmp	r3, #0
 80142f2:	d00e      	beq.n	8014312 <etharp_cleanup_netif+0x46>
 80142f4:	490c      	ldr	r1, [pc, #48]	; (8014328 <etharp_cleanup_netif+0x5c>)
 80142f6:	68fa      	ldr	r2, [r7, #12]
 80142f8:	4613      	mov	r3, r2
 80142fa:	005b      	lsls	r3, r3, #1
 80142fc:	4413      	add	r3, r2
 80142fe:	00db      	lsls	r3, r3, #3
 8014300:	440b      	add	r3, r1
 8014302:	3308      	adds	r3, #8
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	687a      	ldr	r2, [r7, #4]
 8014308:	429a      	cmp	r2, r3
 801430a:	d102      	bne.n	8014312 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801430c:	68f8      	ldr	r0, [r7, #12]
 801430e:	f7ff fce5 	bl	8013cdc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014312:	68fb      	ldr	r3, [r7, #12]
 8014314:	3301      	adds	r3, #1
 8014316:	60fb      	str	r3, [r7, #12]
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	2b09      	cmp	r3, #9
 801431c:	dddd      	ble.n	80142da <etharp_cleanup_netif+0xe>
    }
  }
}
 801431e:	bf00      	nop
 8014320:	bf00      	nop
 8014322:	3710      	adds	r7, #16
 8014324:	46bd      	mov	sp, r7
 8014326:	bd80      	pop	{r7, pc}
 8014328:	2000f298 	.word	0x2000f298

0801432c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801432c:	b5b0      	push	{r4, r5, r7, lr}
 801432e:	b08a      	sub	sp, #40	; 0x28
 8014330:	af04      	add	r7, sp, #16
 8014332:	6078      	str	r0, [r7, #4]
 8014334:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014336:	683b      	ldr	r3, [r7, #0]
 8014338:	2b00      	cmp	r3, #0
 801433a:	d107      	bne.n	801434c <etharp_input+0x20>
 801433c:	4b3f      	ldr	r3, [pc, #252]	; (801443c <etharp_input+0x110>)
 801433e:	f240 228a 	movw	r2, #650	; 0x28a
 8014342:	493f      	ldr	r1, [pc, #252]	; (8014440 <etharp_input+0x114>)
 8014344:	483f      	ldr	r0, [pc, #252]	; (8014444 <etharp_input+0x118>)
 8014346:	f002 fa7b 	bl	8016840 <iprintf>
 801434a:	e074      	b.n	8014436 <etharp_input+0x10a>

  hdr = (struct etharp_hdr *)p->payload;
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	685b      	ldr	r3, [r3, #4]
 8014350:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014352:	693b      	ldr	r3, [r7, #16]
 8014354:	881b      	ldrh	r3, [r3, #0]
 8014356:	b29b      	uxth	r3, r3
 8014358:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801435c:	d10c      	bne.n	8014378 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801435e:	693b      	ldr	r3, [r7, #16]
 8014360:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014362:	2b06      	cmp	r3, #6
 8014364:	d108      	bne.n	8014378 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014366:	693b      	ldr	r3, [r7, #16]
 8014368:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801436a:	2b04      	cmp	r3, #4
 801436c:	d104      	bne.n	8014378 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801436e:	693b      	ldr	r3, [r7, #16]
 8014370:	885b      	ldrh	r3, [r3, #2]
 8014372:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8014374:	2b08      	cmp	r3, #8
 8014376:	d003      	beq.n	8014380 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8014378:	6878      	ldr	r0, [r7, #4]
 801437a:	f7f7 fbdf 	bl	800bb3c <pbuf_free>
    return;
 801437e:	e05a      	b.n	8014436 <etharp_input+0x10a>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8014380:	693b      	ldr	r3, [r7, #16]
 8014382:	330e      	adds	r3, #14
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8014388:	693b      	ldr	r3, [r7, #16]
 801438a:	3318      	adds	r3, #24
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014390:	683b      	ldr	r3, [r7, #0]
 8014392:	3304      	adds	r3, #4
 8014394:	681b      	ldr	r3, [r3, #0]
 8014396:	2b00      	cmp	r3, #0
 8014398:	d102      	bne.n	80143a0 <etharp_input+0x74>
    for_us = 0;
 801439a:	2300      	movs	r3, #0
 801439c:	75fb      	strb	r3, [r7, #23]
 801439e:	e009      	b.n	80143b4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80143a0:	68ba      	ldr	r2, [r7, #8]
 80143a2:	683b      	ldr	r3, [r7, #0]
 80143a4:	3304      	adds	r3, #4
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	429a      	cmp	r2, r3
 80143aa:	bf0c      	ite	eq
 80143ac:	2301      	moveq	r3, #1
 80143ae:	2300      	movne	r3, #0
 80143b0:	b2db      	uxtb	r3, r3
 80143b2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80143b4:	693b      	ldr	r3, [r7, #16]
 80143b6:	f103 0208 	add.w	r2, r3, #8
 80143ba:	7dfb      	ldrb	r3, [r7, #23]
 80143bc:	2b00      	cmp	r3, #0
 80143be:	d001      	beq.n	80143c4 <etharp_input+0x98>
 80143c0:	2301      	movs	r3, #1
 80143c2:	e000      	b.n	80143c6 <etharp_input+0x9a>
 80143c4:	2302      	movs	r3, #2
 80143c6:	f107 010c 	add.w	r1, r7, #12
 80143ca:	6838      	ldr	r0, [r7, #0]
 80143cc:	f7ff fed8 	bl	8014180 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80143d0:	693b      	ldr	r3, [r7, #16]
 80143d2:	88db      	ldrh	r3, [r3, #6]
 80143d4:	b29b      	uxth	r3, r3
 80143d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80143da:	d003      	beq.n	80143e4 <etharp_input+0xb8>
 80143dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80143e0:	d01e      	beq.n	8014420 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80143e2:	e025      	b.n	8014430 <etharp_input+0x104>
      if (for_us) {
 80143e4:	7dfb      	ldrb	r3, [r7, #23]
 80143e6:	2b00      	cmp	r3, #0
 80143e8:	d021      	beq.n	801442e <etharp_input+0x102>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80143ea:	683b      	ldr	r3, [r7, #0]
 80143ec:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80143f0:	693b      	ldr	r3, [r7, #16]
 80143f2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80143f6:	683b      	ldr	r3, [r7, #0]
 80143f8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014400:	693a      	ldr	r2, [r7, #16]
 8014402:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014404:	2102      	movs	r1, #2
 8014406:	9103      	str	r1, [sp, #12]
 8014408:	f107 010c 	add.w	r1, r7, #12
 801440c:	9102      	str	r1, [sp, #8]
 801440e:	9201      	str	r2, [sp, #4]
 8014410:	9300      	str	r3, [sp, #0]
 8014412:	462b      	mov	r3, r5
 8014414:	4622      	mov	r2, r4
 8014416:	4601      	mov	r1, r0
 8014418:	6838      	ldr	r0, [r7, #0]
 801441a:	f000 faef 	bl	80149fc <etharp_raw>
      break;
 801441e:	e006      	b.n	801442e <etharp_input+0x102>
      dhcp_arp_reply(netif, &sipaddr);
 8014420:	f107 030c 	add.w	r3, r7, #12
 8014424:	4619      	mov	r1, r3
 8014426:	6838      	ldr	r0, [r7, #0]
 8014428:	f7fe f9fc 	bl	8012824 <dhcp_arp_reply>
      break;
 801442c:	e000      	b.n	8014430 <etharp_input+0x104>
      break;
 801442e:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014430:	6878      	ldr	r0, [r7, #4]
 8014432:	f7f7 fb83 	bl	800bb3c <pbuf_free>
}
 8014436:	3718      	adds	r7, #24
 8014438:	46bd      	mov	sp, r7
 801443a:	bdb0      	pop	{r4, r5, r7, pc}
 801443c:	08019e9c 	.word	0x08019e9c
 8014440:	08019fec 	.word	0x08019fec
 8014444:	08019f14 	.word	0x08019f14

08014448 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014448:	b580      	push	{r7, lr}
 801444a:	b086      	sub	sp, #24
 801444c:	af02      	add	r7, sp, #8
 801444e:	60f8      	str	r0, [r7, #12]
 8014450:	60b9      	str	r1, [r7, #8]
 8014452:	4613      	mov	r3, r2
 8014454:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014456:	79fa      	ldrb	r2, [r7, #7]
 8014458:	4944      	ldr	r1, [pc, #272]	; (801456c <etharp_output_to_arp_index+0x124>)
 801445a:	4613      	mov	r3, r2
 801445c:	005b      	lsls	r3, r3, #1
 801445e:	4413      	add	r3, r2
 8014460:	00db      	lsls	r3, r3, #3
 8014462:	440b      	add	r3, r1
 8014464:	3314      	adds	r3, #20
 8014466:	781b      	ldrb	r3, [r3, #0]
 8014468:	2b01      	cmp	r3, #1
 801446a:	d806      	bhi.n	801447a <etharp_output_to_arp_index+0x32>
 801446c:	4b40      	ldr	r3, [pc, #256]	; (8014570 <etharp_output_to_arp_index+0x128>)
 801446e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014472:	4940      	ldr	r1, [pc, #256]	; (8014574 <etharp_output_to_arp_index+0x12c>)
 8014474:	4840      	ldr	r0, [pc, #256]	; (8014578 <etharp_output_to_arp_index+0x130>)
 8014476:	f002 f9e3 	bl	8016840 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801447a:	79fa      	ldrb	r2, [r7, #7]
 801447c:	493b      	ldr	r1, [pc, #236]	; (801456c <etharp_output_to_arp_index+0x124>)
 801447e:	4613      	mov	r3, r2
 8014480:	005b      	lsls	r3, r3, #1
 8014482:	4413      	add	r3, r2
 8014484:	00db      	lsls	r3, r3, #3
 8014486:	440b      	add	r3, r1
 8014488:	3314      	adds	r3, #20
 801448a:	781b      	ldrb	r3, [r3, #0]
 801448c:	2b02      	cmp	r3, #2
 801448e:	d153      	bne.n	8014538 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014490:	79fa      	ldrb	r2, [r7, #7]
 8014492:	4936      	ldr	r1, [pc, #216]	; (801456c <etharp_output_to_arp_index+0x124>)
 8014494:	4613      	mov	r3, r2
 8014496:	005b      	lsls	r3, r3, #1
 8014498:	4413      	add	r3, r2
 801449a:	00db      	lsls	r3, r3, #3
 801449c:	440b      	add	r3, r1
 801449e:	3312      	adds	r3, #18
 80144a0:	881b      	ldrh	r3, [r3, #0]
 80144a2:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80144a6:	d919      	bls.n	80144dc <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80144a8:	79fa      	ldrb	r2, [r7, #7]
 80144aa:	4613      	mov	r3, r2
 80144ac:	005b      	lsls	r3, r3, #1
 80144ae:	4413      	add	r3, r2
 80144b0:	00db      	lsls	r3, r3, #3
 80144b2:	4a2e      	ldr	r2, [pc, #184]	; (801456c <etharp_output_to_arp_index+0x124>)
 80144b4:	4413      	add	r3, r2
 80144b6:	3304      	adds	r3, #4
 80144b8:	4619      	mov	r1, r3
 80144ba:	68f8      	ldr	r0, [r7, #12]
 80144bc:	f000 fb4c 	bl	8014b58 <etharp_request>
 80144c0:	4603      	mov	r3, r0
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d138      	bne.n	8014538 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80144c6:	79fa      	ldrb	r2, [r7, #7]
 80144c8:	4928      	ldr	r1, [pc, #160]	; (801456c <etharp_output_to_arp_index+0x124>)
 80144ca:	4613      	mov	r3, r2
 80144cc:	005b      	lsls	r3, r3, #1
 80144ce:	4413      	add	r3, r2
 80144d0:	00db      	lsls	r3, r3, #3
 80144d2:	440b      	add	r3, r1
 80144d4:	3314      	adds	r3, #20
 80144d6:	2203      	movs	r2, #3
 80144d8:	701a      	strb	r2, [r3, #0]
 80144da:	e02d      	b.n	8014538 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80144dc:	79fa      	ldrb	r2, [r7, #7]
 80144de:	4923      	ldr	r1, [pc, #140]	; (801456c <etharp_output_to_arp_index+0x124>)
 80144e0:	4613      	mov	r3, r2
 80144e2:	005b      	lsls	r3, r3, #1
 80144e4:	4413      	add	r3, r2
 80144e6:	00db      	lsls	r3, r3, #3
 80144e8:	440b      	add	r3, r1
 80144ea:	3312      	adds	r3, #18
 80144ec:	881b      	ldrh	r3, [r3, #0]
 80144ee:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80144f2:	d321      	bcc.n	8014538 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80144f4:	79fa      	ldrb	r2, [r7, #7]
 80144f6:	4613      	mov	r3, r2
 80144f8:	005b      	lsls	r3, r3, #1
 80144fa:	4413      	add	r3, r2
 80144fc:	00db      	lsls	r3, r3, #3
 80144fe:	4a1b      	ldr	r2, [pc, #108]	; (801456c <etharp_output_to_arp_index+0x124>)
 8014500:	4413      	add	r3, r2
 8014502:	1d19      	adds	r1, r3, #4
 8014504:	79fa      	ldrb	r2, [r7, #7]
 8014506:	4613      	mov	r3, r2
 8014508:	005b      	lsls	r3, r3, #1
 801450a:	4413      	add	r3, r2
 801450c:	00db      	lsls	r3, r3, #3
 801450e:	3308      	adds	r3, #8
 8014510:	4a16      	ldr	r2, [pc, #88]	; (801456c <etharp_output_to_arp_index+0x124>)
 8014512:	4413      	add	r3, r2
 8014514:	3304      	adds	r3, #4
 8014516:	461a      	mov	r2, r3
 8014518:	68f8      	ldr	r0, [r7, #12]
 801451a:	f000 fafb 	bl	8014b14 <etharp_request_dst>
 801451e:	4603      	mov	r3, r0
 8014520:	2b00      	cmp	r3, #0
 8014522:	d109      	bne.n	8014538 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014524:	79fa      	ldrb	r2, [r7, #7]
 8014526:	4911      	ldr	r1, [pc, #68]	; (801456c <etharp_output_to_arp_index+0x124>)
 8014528:	4613      	mov	r3, r2
 801452a:	005b      	lsls	r3, r3, #1
 801452c:	4413      	add	r3, r2
 801452e:	00db      	lsls	r3, r3, #3
 8014530:	440b      	add	r3, r1
 8014532:	3314      	adds	r3, #20
 8014534:	2203      	movs	r2, #3
 8014536:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014538:	68fb      	ldr	r3, [r7, #12]
 801453a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 801453e:	79fa      	ldrb	r2, [r7, #7]
 8014540:	4613      	mov	r3, r2
 8014542:	005b      	lsls	r3, r3, #1
 8014544:	4413      	add	r3, r2
 8014546:	00db      	lsls	r3, r3, #3
 8014548:	3308      	adds	r3, #8
 801454a:	4a08      	ldr	r2, [pc, #32]	; (801456c <etharp_output_to_arp_index+0x124>)
 801454c:	4413      	add	r3, r2
 801454e:	3304      	adds	r3, #4
 8014550:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014554:	9200      	str	r2, [sp, #0]
 8014556:	460a      	mov	r2, r1
 8014558:	68b9      	ldr	r1, [r7, #8]
 801455a:	68f8      	ldr	r0, [r7, #12]
 801455c:	f001 fe5e 	bl	801621c <ethernet_output>
 8014560:	4603      	mov	r3, r0
}
 8014562:	4618      	mov	r0, r3
 8014564:	3710      	adds	r7, #16
 8014566:	46bd      	mov	sp, r7
 8014568:	bd80      	pop	{r7, pc}
 801456a:	bf00      	nop
 801456c:	2000f298 	.word	0x2000f298
 8014570:	08019e9c 	.word	0x08019e9c
 8014574:	0801a00c 	.word	0x0801a00c
 8014578:	08019f14 	.word	0x08019f14

0801457c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801457c:	b580      	push	{r7, lr}
 801457e:	b08a      	sub	sp, #40	; 0x28
 8014580:	af02      	add	r7, sp, #8
 8014582:	60f8      	str	r0, [r7, #12]
 8014584:	60b9      	str	r1, [r7, #8]
 8014586:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801458c:	68fb      	ldr	r3, [r7, #12]
 801458e:	2b00      	cmp	r3, #0
 8014590:	d106      	bne.n	80145a0 <etharp_output+0x24>
 8014592:	4b73      	ldr	r3, [pc, #460]	; (8014760 <etharp_output+0x1e4>)
 8014594:	f240 321e 	movw	r2, #798	; 0x31e
 8014598:	4972      	ldr	r1, [pc, #456]	; (8014764 <etharp_output+0x1e8>)
 801459a:	4873      	ldr	r0, [pc, #460]	; (8014768 <etharp_output+0x1ec>)
 801459c:	f002 f950 	bl	8016840 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80145a0:	68bb      	ldr	r3, [r7, #8]
 80145a2:	2b00      	cmp	r3, #0
 80145a4:	d106      	bne.n	80145b4 <etharp_output+0x38>
 80145a6:	4b6e      	ldr	r3, [pc, #440]	; (8014760 <etharp_output+0x1e4>)
 80145a8:	f240 321f 	movw	r2, #799	; 0x31f
 80145ac:	496f      	ldr	r1, [pc, #444]	; (801476c <etharp_output+0x1f0>)
 80145ae:	486e      	ldr	r0, [pc, #440]	; (8014768 <etharp_output+0x1ec>)
 80145b0:	f002 f946 	bl	8016840 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80145b4:	687b      	ldr	r3, [r7, #4]
 80145b6:	2b00      	cmp	r3, #0
 80145b8:	d106      	bne.n	80145c8 <etharp_output+0x4c>
 80145ba:	4b69      	ldr	r3, [pc, #420]	; (8014760 <etharp_output+0x1e4>)
 80145bc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80145c0:	496b      	ldr	r1, [pc, #428]	; (8014770 <etharp_output+0x1f4>)
 80145c2:	4869      	ldr	r0, [pc, #420]	; (8014768 <etharp_output+0x1ec>)
 80145c4:	f002 f93c 	bl	8016840 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	681b      	ldr	r3, [r3, #0]
 80145cc:	68f9      	ldr	r1, [r7, #12]
 80145ce:	4618      	mov	r0, r3
 80145d0:	f000 ff16 	bl	8015400 <ip4_addr_isbroadcast_u32>
 80145d4:	4603      	mov	r3, r0
 80145d6:	2b00      	cmp	r3, #0
 80145d8:	d002      	beq.n	80145e0 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80145da:	4b66      	ldr	r3, [pc, #408]	; (8014774 <etharp_output+0x1f8>)
 80145dc:	61fb      	str	r3, [r7, #28]
 80145de:	e0af      	b.n	8014740 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80145e0:	687b      	ldr	r3, [r7, #4]
 80145e2:	681b      	ldr	r3, [r3, #0]
 80145e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80145e8:	2be0      	cmp	r3, #224	; 0xe0
 80145ea:	d118      	bne.n	801461e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80145ec:	2301      	movs	r3, #1
 80145ee:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80145f0:	2300      	movs	r3, #0
 80145f2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80145f4:	235e      	movs	r3, #94	; 0x5e
 80145f6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	3301      	adds	r3, #1
 80145fc:	781b      	ldrb	r3, [r3, #0]
 80145fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014602:	b2db      	uxtb	r3, r3
 8014604:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	3302      	adds	r3, #2
 801460a:	781b      	ldrb	r3, [r3, #0]
 801460c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	3303      	adds	r3, #3
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014616:	f107 0310 	add.w	r3, r7, #16
 801461a:	61fb      	str	r3, [r7, #28]
 801461c:	e090      	b.n	8014740 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801461e:	687b      	ldr	r3, [r7, #4]
 8014620:	681a      	ldr	r2, [r3, #0]
 8014622:	68fb      	ldr	r3, [r7, #12]
 8014624:	3304      	adds	r3, #4
 8014626:	681b      	ldr	r3, [r3, #0]
 8014628:	405a      	eors	r2, r3
 801462a:	68fb      	ldr	r3, [r7, #12]
 801462c:	3308      	adds	r3, #8
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	4013      	ands	r3, r2
 8014632:	2b00      	cmp	r3, #0
 8014634:	d012      	beq.n	801465c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014636:	687b      	ldr	r3, [r7, #4]
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801463c:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014640:	4293      	cmp	r3, r2
 8014642:	d00b      	beq.n	801465c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014644:	68fb      	ldr	r3, [r7, #12]
 8014646:	330c      	adds	r3, #12
 8014648:	681b      	ldr	r3, [r3, #0]
 801464a:	2b00      	cmp	r3, #0
 801464c:	d003      	beq.n	8014656 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801464e:	68fb      	ldr	r3, [r7, #12]
 8014650:	330c      	adds	r3, #12
 8014652:	61bb      	str	r3, [r7, #24]
 8014654:	e002      	b.n	801465c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014656:	f06f 0303 	mvn.w	r3, #3
 801465a:	e07d      	b.n	8014758 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801465c:	4b46      	ldr	r3, [pc, #280]	; (8014778 <etharp_output+0x1fc>)
 801465e:	781b      	ldrb	r3, [r3, #0]
 8014660:	4619      	mov	r1, r3
 8014662:	4a46      	ldr	r2, [pc, #280]	; (801477c <etharp_output+0x200>)
 8014664:	460b      	mov	r3, r1
 8014666:	005b      	lsls	r3, r3, #1
 8014668:	440b      	add	r3, r1
 801466a:	00db      	lsls	r3, r3, #3
 801466c:	4413      	add	r3, r2
 801466e:	3314      	adds	r3, #20
 8014670:	781b      	ldrb	r3, [r3, #0]
 8014672:	2b01      	cmp	r3, #1
 8014674:	d925      	bls.n	80146c2 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014676:	4b40      	ldr	r3, [pc, #256]	; (8014778 <etharp_output+0x1fc>)
 8014678:	781b      	ldrb	r3, [r3, #0]
 801467a:	4619      	mov	r1, r3
 801467c:	4a3f      	ldr	r2, [pc, #252]	; (801477c <etharp_output+0x200>)
 801467e:	460b      	mov	r3, r1
 8014680:	005b      	lsls	r3, r3, #1
 8014682:	440b      	add	r3, r1
 8014684:	00db      	lsls	r3, r3, #3
 8014686:	4413      	add	r3, r2
 8014688:	3308      	adds	r3, #8
 801468a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801468c:	68fa      	ldr	r2, [r7, #12]
 801468e:	429a      	cmp	r2, r3
 8014690:	d117      	bne.n	80146c2 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014692:	69bb      	ldr	r3, [r7, #24]
 8014694:	681a      	ldr	r2, [r3, #0]
 8014696:	4b38      	ldr	r3, [pc, #224]	; (8014778 <etharp_output+0x1fc>)
 8014698:	781b      	ldrb	r3, [r3, #0]
 801469a:	4618      	mov	r0, r3
 801469c:	4937      	ldr	r1, [pc, #220]	; (801477c <etharp_output+0x200>)
 801469e:	4603      	mov	r3, r0
 80146a0:	005b      	lsls	r3, r3, #1
 80146a2:	4403      	add	r3, r0
 80146a4:	00db      	lsls	r3, r3, #3
 80146a6:	440b      	add	r3, r1
 80146a8:	3304      	adds	r3, #4
 80146aa:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80146ac:	429a      	cmp	r2, r3
 80146ae:	d108      	bne.n	80146c2 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80146b0:	4b31      	ldr	r3, [pc, #196]	; (8014778 <etharp_output+0x1fc>)
 80146b2:	781b      	ldrb	r3, [r3, #0]
 80146b4:	461a      	mov	r2, r3
 80146b6:	68b9      	ldr	r1, [r7, #8]
 80146b8:	68f8      	ldr	r0, [r7, #12]
 80146ba:	f7ff fec5 	bl	8014448 <etharp_output_to_arp_index>
 80146be:	4603      	mov	r3, r0
 80146c0:	e04a      	b.n	8014758 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80146c2:	2300      	movs	r3, #0
 80146c4:	75fb      	strb	r3, [r7, #23]
 80146c6:	e031      	b.n	801472c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80146c8:	7dfa      	ldrb	r2, [r7, #23]
 80146ca:	492c      	ldr	r1, [pc, #176]	; (801477c <etharp_output+0x200>)
 80146cc:	4613      	mov	r3, r2
 80146ce:	005b      	lsls	r3, r3, #1
 80146d0:	4413      	add	r3, r2
 80146d2:	00db      	lsls	r3, r3, #3
 80146d4:	440b      	add	r3, r1
 80146d6:	3314      	adds	r3, #20
 80146d8:	781b      	ldrb	r3, [r3, #0]
 80146da:	2b01      	cmp	r3, #1
 80146dc:	d923      	bls.n	8014726 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80146de:	7dfa      	ldrb	r2, [r7, #23]
 80146e0:	4926      	ldr	r1, [pc, #152]	; (801477c <etharp_output+0x200>)
 80146e2:	4613      	mov	r3, r2
 80146e4:	005b      	lsls	r3, r3, #1
 80146e6:	4413      	add	r3, r2
 80146e8:	00db      	lsls	r3, r3, #3
 80146ea:	440b      	add	r3, r1
 80146ec:	3308      	adds	r3, #8
 80146ee:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80146f0:	68fa      	ldr	r2, [r7, #12]
 80146f2:	429a      	cmp	r2, r3
 80146f4:	d117      	bne.n	8014726 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80146f6:	69bb      	ldr	r3, [r7, #24]
 80146f8:	6819      	ldr	r1, [r3, #0]
 80146fa:	7dfa      	ldrb	r2, [r7, #23]
 80146fc:	481f      	ldr	r0, [pc, #124]	; (801477c <etharp_output+0x200>)
 80146fe:	4613      	mov	r3, r2
 8014700:	005b      	lsls	r3, r3, #1
 8014702:	4413      	add	r3, r2
 8014704:	00db      	lsls	r3, r3, #3
 8014706:	4403      	add	r3, r0
 8014708:	3304      	adds	r3, #4
 801470a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801470c:	4299      	cmp	r1, r3
 801470e:	d10a      	bne.n	8014726 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014710:	4a19      	ldr	r2, [pc, #100]	; (8014778 <etharp_output+0x1fc>)
 8014712:	7dfb      	ldrb	r3, [r7, #23]
 8014714:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014716:	7dfb      	ldrb	r3, [r7, #23]
 8014718:	461a      	mov	r2, r3
 801471a:	68b9      	ldr	r1, [r7, #8]
 801471c:	68f8      	ldr	r0, [r7, #12]
 801471e:	f7ff fe93 	bl	8014448 <etharp_output_to_arp_index>
 8014722:	4603      	mov	r3, r0
 8014724:	e018      	b.n	8014758 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014726:	7dfb      	ldrb	r3, [r7, #23]
 8014728:	3301      	adds	r3, #1
 801472a:	75fb      	strb	r3, [r7, #23]
 801472c:	7dfb      	ldrb	r3, [r7, #23]
 801472e:	2b09      	cmp	r3, #9
 8014730:	d9ca      	bls.n	80146c8 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014732:	68ba      	ldr	r2, [r7, #8]
 8014734:	69b9      	ldr	r1, [r7, #24]
 8014736:	68f8      	ldr	r0, [r7, #12]
 8014738:	f000 f822 	bl	8014780 <etharp_query>
 801473c:	4603      	mov	r3, r0
 801473e:	e00b      	b.n	8014758 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 8014746:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801474a:	9300      	str	r3, [sp, #0]
 801474c:	69fb      	ldr	r3, [r7, #28]
 801474e:	68b9      	ldr	r1, [r7, #8]
 8014750:	68f8      	ldr	r0, [r7, #12]
 8014752:	f001 fd63 	bl	801621c <ethernet_output>
 8014756:	4603      	mov	r3, r0
}
 8014758:	4618      	mov	r0, r3
 801475a:	3720      	adds	r7, #32
 801475c:	46bd      	mov	sp, r7
 801475e:	bd80      	pop	{r7, pc}
 8014760:	08019e9c 	.word	0x08019e9c
 8014764:	08019fec 	.word	0x08019fec
 8014768:	08019f14 	.word	0x08019f14
 801476c:	0801a03c 	.word	0x0801a03c
 8014770:	08019fdc 	.word	0x08019fdc
 8014774:	0801a6d0 	.word	0x0801a6d0
 8014778:	2000f388 	.word	0x2000f388
 801477c:	2000f298 	.word	0x2000f298

08014780 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014780:	b580      	push	{r7, lr}
 8014782:	b08c      	sub	sp, #48	; 0x30
 8014784:	af02      	add	r7, sp, #8
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	60b9      	str	r1, [r7, #8]
 801478a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	332a      	adds	r3, #42	; 0x2a
 8014790:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014792:	23ff      	movs	r3, #255	; 0xff
 8014794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014798:	2300      	movs	r3, #0
 801479a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801479c:	68bb      	ldr	r3, [r7, #8]
 801479e:	681b      	ldr	r3, [r3, #0]
 80147a0:	68f9      	ldr	r1, [r7, #12]
 80147a2:	4618      	mov	r0, r3
 80147a4:	f000 fe2c 	bl	8015400 <ip4_addr_isbroadcast_u32>
 80147a8:	4603      	mov	r3, r0
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d10c      	bne.n	80147c8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80147ae:	68bb      	ldr	r3, [r7, #8]
 80147b0:	681b      	ldr	r3, [r3, #0]
 80147b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80147b6:	2be0      	cmp	r3, #224	; 0xe0
 80147b8:	d006      	beq.n	80147c8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80147ba:	68bb      	ldr	r3, [r7, #8]
 80147bc:	2b00      	cmp	r3, #0
 80147be:	d003      	beq.n	80147c8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80147c0:	68bb      	ldr	r3, [r7, #8]
 80147c2:	681b      	ldr	r3, [r3, #0]
 80147c4:	2b00      	cmp	r3, #0
 80147c6:	d102      	bne.n	80147ce <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80147c8:	f06f 030f 	mvn.w	r3, #15
 80147cc:	e101      	b.n	80149d2 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80147ce:	68fa      	ldr	r2, [r7, #12]
 80147d0:	2101      	movs	r1, #1
 80147d2:	68b8      	ldr	r0, [r7, #8]
 80147d4:	f7ff fb5c 	bl	8013e90 <etharp_find_entry>
 80147d8:	4603      	mov	r3, r0
 80147da:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80147dc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80147e0:	2b00      	cmp	r3, #0
 80147e2:	da02      	bge.n	80147ea <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80147e4:	8a7b      	ldrh	r3, [r7, #18]
 80147e6:	b25b      	sxtb	r3, r3
 80147e8:	e0f3      	b.n	80149d2 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80147ea:	8a7b      	ldrh	r3, [r7, #18]
 80147ec:	2b7e      	cmp	r3, #126	; 0x7e
 80147ee:	d906      	bls.n	80147fe <etharp_query+0x7e>
 80147f0:	4b7a      	ldr	r3, [pc, #488]	; (80149dc <etharp_query+0x25c>)
 80147f2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80147f6:	497a      	ldr	r1, [pc, #488]	; (80149e0 <etharp_query+0x260>)
 80147f8:	487a      	ldr	r0, [pc, #488]	; (80149e4 <etharp_query+0x264>)
 80147fa:	f002 f821 	bl	8016840 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80147fe:	8a7b      	ldrh	r3, [r7, #18]
 8014800:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014802:	7c7a      	ldrb	r2, [r7, #17]
 8014804:	4978      	ldr	r1, [pc, #480]	; (80149e8 <etharp_query+0x268>)
 8014806:	4613      	mov	r3, r2
 8014808:	005b      	lsls	r3, r3, #1
 801480a:	4413      	add	r3, r2
 801480c:	00db      	lsls	r3, r3, #3
 801480e:	440b      	add	r3, r1
 8014810:	3314      	adds	r3, #20
 8014812:	781b      	ldrb	r3, [r3, #0]
 8014814:	2b00      	cmp	r3, #0
 8014816:	d115      	bne.n	8014844 <etharp_query+0xc4>
    is_new_entry = 1;
 8014818:	2301      	movs	r3, #1
 801481a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801481c:	7c7a      	ldrb	r2, [r7, #17]
 801481e:	4972      	ldr	r1, [pc, #456]	; (80149e8 <etharp_query+0x268>)
 8014820:	4613      	mov	r3, r2
 8014822:	005b      	lsls	r3, r3, #1
 8014824:	4413      	add	r3, r2
 8014826:	00db      	lsls	r3, r3, #3
 8014828:	440b      	add	r3, r1
 801482a:	3314      	adds	r3, #20
 801482c:	2201      	movs	r2, #1
 801482e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014830:	7c7a      	ldrb	r2, [r7, #17]
 8014832:	496d      	ldr	r1, [pc, #436]	; (80149e8 <etharp_query+0x268>)
 8014834:	4613      	mov	r3, r2
 8014836:	005b      	lsls	r3, r3, #1
 8014838:	4413      	add	r3, r2
 801483a:	00db      	lsls	r3, r3, #3
 801483c:	440b      	add	r3, r1
 801483e:	3308      	adds	r3, #8
 8014840:	68fa      	ldr	r2, [r7, #12]
 8014842:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014844:	7c7a      	ldrb	r2, [r7, #17]
 8014846:	4968      	ldr	r1, [pc, #416]	; (80149e8 <etharp_query+0x268>)
 8014848:	4613      	mov	r3, r2
 801484a:	005b      	lsls	r3, r3, #1
 801484c:	4413      	add	r3, r2
 801484e:	00db      	lsls	r3, r3, #3
 8014850:	440b      	add	r3, r1
 8014852:	3314      	adds	r3, #20
 8014854:	781b      	ldrb	r3, [r3, #0]
 8014856:	2b01      	cmp	r3, #1
 8014858:	d011      	beq.n	801487e <etharp_query+0xfe>
 801485a:	7c7a      	ldrb	r2, [r7, #17]
 801485c:	4962      	ldr	r1, [pc, #392]	; (80149e8 <etharp_query+0x268>)
 801485e:	4613      	mov	r3, r2
 8014860:	005b      	lsls	r3, r3, #1
 8014862:	4413      	add	r3, r2
 8014864:	00db      	lsls	r3, r3, #3
 8014866:	440b      	add	r3, r1
 8014868:	3314      	adds	r3, #20
 801486a:	781b      	ldrb	r3, [r3, #0]
 801486c:	2b01      	cmp	r3, #1
 801486e:	d806      	bhi.n	801487e <etharp_query+0xfe>
 8014870:	4b5a      	ldr	r3, [pc, #360]	; (80149dc <etharp_query+0x25c>)
 8014872:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014876:	495d      	ldr	r1, [pc, #372]	; (80149ec <etharp_query+0x26c>)
 8014878:	485a      	ldr	r0, [pc, #360]	; (80149e4 <etharp_query+0x264>)
 801487a:	f001 ffe1 	bl	8016840 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801487e:	6a3b      	ldr	r3, [r7, #32]
 8014880:	2b00      	cmp	r3, #0
 8014882:	d102      	bne.n	801488a <etharp_query+0x10a>
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	2b00      	cmp	r3, #0
 8014888:	d10c      	bne.n	80148a4 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801488a:	68b9      	ldr	r1, [r7, #8]
 801488c:	68f8      	ldr	r0, [r7, #12]
 801488e:	f000 f963 	bl	8014b58 <etharp_request>
 8014892:	4603      	mov	r3, r0
 8014894:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	2b00      	cmp	r3, #0
 801489c:	d102      	bne.n	80148a4 <etharp_query+0x124>
      return result;
 801489e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80148a2:	e096      	b.n	80149d2 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80148a4:	687b      	ldr	r3, [r7, #4]
 80148a6:	2b00      	cmp	r3, #0
 80148a8:	d106      	bne.n	80148b8 <etharp_query+0x138>
 80148aa:	4b4c      	ldr	r3, [pc, #304]	; (80149dc <etharp_query+0x25c>)
 80148ac:	f240 32e1 	movw	r2, #993	; 0x3e1
 80148b0:	494f      	ldr	r1, [pc, #316]	; (80149f0 <etharp_query+0x270>)
 80148b2:	484c      	ldr	r0, [pc, #304]	; (80149e4 <etharp_query+0x264>)
 80148b4:	f001 ffc4 	bl	8016840 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80148b8:	7c7a      	ldrb	r2, [r7, #17]
 80148ba:	494b      	ldr	r1, [pc, #300]	; (80149e8 <etharp_query+0x268>)
 80148bc:	4613      	mov	r3, r2
 80148be:	005b      	lsls	r3, r3, #1
 80148c0:	4413      	add	r3, r2
 80148c2:	00db      	lsls	r3, r3, #3
 80148c4:	440b      	add	r3, r1
 80148c6:	3314      	adds	r3, #20
 80148c8:	781b      	ldrb	r3, [r3, #0]
 80148ca:	2b01      	cmp	r3, #1
 80148cc:	d917      	bls.n	80148fe <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80148ce:	4a49      	ldr	r2, [pc, #292]	; (80149f4 <etharp_query+0x274>)
 80148d0:	7c7b      	ldrb	r3, [r7, #17]
 80148d2:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80148d4:	7c7a      	ldrb	r2, [r7, #17]
 80148d6:	4613      	mov	r3, r2
 80148d8:	005b      	lsls	r3, r3, #1
 80148da:	4413      	add	r3, r2
 80148dc:	00db      	lsls	r3, r3, #3
 80148de:	3308      	adds	r3, #8
 80148e0:	4a41      	ldr	r2, [pc, #260]	; (80149e8 <etharp_query+0x268>)
 80148e2:	4413      	add	r3, r2
 80148e4:	3304      	adds	r3, #4
 80148e6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80148ea:	9200      	str	r2, [sp, #0]
 80148ec:	697a      	ldr	r2, [r7, #20]
 80148ee:	6879      	ldr	r1, [r7, #4]
 80148f0:	68f8      	ldr	r0, [r7, #12]
 80148f2:	f001 fc93 	bl	801621c <ethernet_output>
 80148f6:	4603      	mov	r3, r0
 80148f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80148fc:	e067      	b.n	80149ce <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80148fe:	7c7a      	ldrb	r2, [r7, #17]
 8014900:	4939      	ldr	r1, [pc, #228]	; (80149e8 <etharp_query+0x268>)
 8014902:	4613      	mov	r3, r2
 8014904:	005b      	lsls	r3, r3, #1
 8014906:	4413      	add	r3, r2
 8014908:	00db      	lsls	r3, r3, #3
 801490a:	440b      	add	r3, r1
 801490c:	3314      	adds	r3, #20
 801490e:	781b      	ldrb	r3, [r3, #0]
 8014910:	2b01      	cmp	r3, #1
 8014912:	d15c      	bne.n	80149ce <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014914:	2300      	movs	r3, #0
 8014916:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014918:	687b      	ldr	r3, [r7, #4]
 801491a:	61fb      	str	r3, [r7, #28]
    while (p) {
 801491c:	e01c      	b.n	8014958 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801491e:	69fb      	ldr	r3, [r7, #28]
 8014920:	895a      	ldrh	r2, [r3, #10]
 8014922:	69fb      	ldr	r3, [r7, #28]
 8014924:	891b      	ldrh	r3, [r3, #8]
 8014926:	429a      	cmp	r2, r3
 8014928:	d10a      	bne.n	8014940 <etharp_query+0x1c0>
 801492a:	69fb      	ldr	r3, [r7, #28]
 801492c:	681b      	ldr	r3, [r3, #0]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d006      	beq.n	8014940 <etharp_query+0x1c0>
 8014932:	4b2a      	ldr	r3, [pc, #168]	; (80149dc <etharp_query+0x25c>)
 8014934:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014938:	492f      	ldr	r1, [pc, #188]	; (80149f8 <etharp_query+0x278>)
 801493a:	482a      	ldr	r0, [pc, #168]	; (80149e4 <etharp_query+0x264>)
 801493c:	f001 ff80 	bl	8016840 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014940:	69fb      	ldr	r3, [r7, #28]
 8014942:	7b1b      	ldrb	r3, [r3, #12]
 8014944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014948:	2b00      	cmp	r3, #0
 801494a:	d002      	beq.n	8014952 <etharp_query+0x1d2>
        copy_needed = 1;
 801494c:	2301      	movs	r3, #1
 801494e:	61bb      	str	r3, [r7, #24]
        break;
 8014950:	e005      	b.n	801495e <etharp_query+0x1de>
      }
      p = p->next;
 8014952:	69fb      	ldr	r3, [r7, #28]
 8014954:	681b      	ldr	r3, [r3, #0]
 8014956:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014958:	69fb      	ldr	r3, [r7, #28]
 801495a:	2b00      	cmp	r3, #0
 801495c:	d1df      	bne.n	801491e <etharp_query+0x19e>
    }
    if (copy_needed) {
 801495e:	69bb      	ldr	r3, [r7, #24]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d007      	beq.n	8014974 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014964:	687a      	ldr	r2, [r7, #4]
 8014966:	f44f 7120 	mov.w	r1, #640	; 0x280
 801496a:	200e      	movs	r0, #14
 801496c:	f7f7 fb5e 	bl	800c02c <pbuf_clone>
 8014970:	61f8      	str	r0, [r7, #28]
 8014972:	e004      	b.n	801497e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014974:	687b      	ldr	r3, [r7, #4]
 8014976:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014978:	69f8      	ldr	r0, [r7, #28]
 801497a:	f7f7 f985 	bl	800bc88 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801497e:	69fb      	ldr	r3, [r7, #28]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d021      	beq.n	80149c8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014984:	7c7a      	ldrb	r2, [r7, #17]
 8014986:	4918      	ldr	r1, [pc, #96]	; (80149e8 <etharp_query+0x268>)
 8014988:	4613      	mov	r3, r2
 801498a:	005b      	lsls	r3, r3, #1
 801498c:	4413      	add	r3, r2
 801498e:	00db      	lsls	r3, r3, #3
 8014990:	440b      	add	r3, r1
 8014992:	681b      	ldr	r3, [r3, #0]
 8014994:	2b00      	cmp	r3, #0
 8014996:	d00a      	beq.n	80149ae <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014998:	7c7a      	ldrb	r2, [r7, #17]
 801499a:	4913      	ldr	r1, [pc, #76]	; (80149e8 <etharp_query+0x268>)
 801499c:	4613      	mov	r3, r2
 801499e:	005b      	lsls	r3, r3, #1
 80149a0:	4413      	add	r3, r2
 80149a2:	00db      	lsls	r3, r3, #3
 80149a4:	440b      	add	r3, r1
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	4618      	mov	r0, r3
 80149aa:	f7f7 f8c7 	bl	800bb3c <pbuf_free>
      }
      arp_table[i].q = p;
 80149ae:	7c7a      	ldrb	r2, [r7, #17]
 80149b0:	490d      	ldr	r1, [pc, #52]	; (80149e8 <etharp_query+0x268>)
 80149b2:	4613      	mov	r3, r2
 80149b4:	005b      	lsls	r3, r3, #1
 80149b6:	4413      	add	r3, r2
 80149b8:	00db      	lsls	r3, r3, #3
 80149ba:	440b      	add	r3, r1
 80149bc:	69fa      	ldr	r2, [r7, #28]
 80149be:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80149c0:	2300      	movs	r3, #0
 80149c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80149c6:	e002      	b.n	80149ce <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80149c8:	23ff      	movs	r3, #255	; 0xff
 80149ca:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80149ce:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80149d2:	4618      	mov	r0, r3
 80149d4:	3728      	adds	r7, #40	; 0x28
 80149d6:	46bd      	mov	sp, r7
 80149d8:	bd80      	pop	{r7, pc}
 80149da:	bf00      	nop
 80149dc:	08019e9c 	.word	0x08019e9c
 80149e0:	0801a048 	.word	0x0801a048
 80149e4:	08019f14 	.word	0x08019f14
 80149e8:	2000f298 	.word	0x2000f298
 80149ec:	0801a058 	.word	0x0801a058
 80149f0:	0801a03c 	.word	0x0801a03c
 80149f4:	2000f388 	.word	0x2000f388
 80149f8:	0801a080 	.word	0x0801a080

080149fc <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b08a      	sub	sp, #40	; 0x28
 8014a00:	af02      	add	r7, sp, #8
 8014a02:	60f8      	str	r0, [r7, #12]
 8014a04:	60b9      	str	r1, [r7, #8]
 8014a06:	607a      	str	r2, [r7, #4]
 8014a08:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014a0e:	68fb      	ldr	r3, [r7, #12]
 8014a10:	2b00      	cmp	r3, #0
 8014a12:	d106      	bne.n	8014a22 <etharp_raw+0x26>
 8014a14:	4b3a      	ldr	r3, [pc, #232]	; (8014b00 <etharp_raw+0x104>)
 8014a16:	f240 4257 	movw	r2, #1111	; 0x457
 8014a1a:	493a      	ldr	r1, [pc, #232]	; (8014b04 <etharp_raw+0x108>)
 8014a1c:	483a      	ldr	r0, [pc, #232]	; (8014b08 <etharp_raw+0x10c>)
 8014a1e:	f001 ff0f 	bl	8016840 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8014a22:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014a26:	211c      	movs	r1, #28
 8014a28:	200e      	movs	r0, #14
 8014a2a:	f7f6 fda3 	bl	800b574 <pbuf_alloc>
 8014a2e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8014a30:	69bb      	ldr	r3, [r7, #24]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d102      	bne.n	8014a3c <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8014a36:	f04f 33ff 	mov.w	r3, #4294967295
 8014a3a:	e05d      	b.n	8014af8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8014a3c:	69bb      	ldr	r3, [r7, #24]
 8014a3e:	895b      	ldrh	r3, [r3, #10]
 8014a40:	2b1b      	cmp	r3, #27
 8014a42:	d806      	bhi.n	8014a52 <etharp_raw+0x56>
 8014a44:	4b2e      	ldr	r3, [pc, #184]	; (8014b00 <etharp_raw+0x104>)
 8014a46:	f240 4262 	movw	r2, #1122	; 0x462
 8014a4a:	4930      	ldr	r1, [pc, #192]	; (8014b0c <etharp_raw+0x110>)
 8014a4c:	482e      	ldr	r0, [pc, #184]	; (8014b08 <etharp_raw+0x10c>)
 8014a4e:	f001 fef7 	bl	8016840 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014a52:	69bb      	ldr	r3, [r7, #24]
 8014a54:	685b      	ldr	r3, [r3, #4]
 8014a56:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014a58:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8014a5a:	4618      	mov	r0, r3
 8014a5c:	f7f5 fc70 	bl	800a340 <lwip_htons>
 8014a60:	4603      	mov	r3, r0
 8014a62:	461a      	mov	r2, r3
 8014a64:	697b      	ldr	r3, [r7, #20]
 8014a66:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014a68:	68fb      	ldr	r3, [r7, #12]
 8014a6a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8014a6e:	2b06      	cmp	r3, #6
 8014a70:	d006      	beq.n	8014a80 <etharp_raw+0x84>
 8014a72:	4b23      	ldr	r3, [pc, #140]	; (8014b00 <etharp_raw+0x104>)
 8014a74:	f240 4269 	movw	r2, #1129	; 0x469
 8014a78:	4925      	ldr	r1, [pc, #148]	; (8014b10 <etharp_raw+0x114>)
 8014a7a:	4823      	ldr	r0, [pc, #140]	; (8014b08 <etharp_raw+0x10c>)
 8014a7c:	f001 fee0 	bl	8016840 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014a80:	697b      	ldr	r3, [r7, #20]
 8014a82:	3308      	adds	r3, #8
 8014a84:	2206      	movs	r2, #6
 8014a86:	6839      	ldr	r1, [r7, #0]
 8014a88:	4618      	mov	r0, r3
 8014a8a:	f001 fe2e 	bl	80166ea <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8014a8e:	697b      	ldr	r3, [r7, #20]
 8014a90:	3312      	adds	r3, #18
 8014a92:	2206      	movs	r2, #6
 8014a94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014a96:	4618      	mov	r0, r3
 8014a98:	f001 fe27 	bl	80166ea <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8014a9c:	697b      	ldr	r3, [r7, #20]
 8014a9e:	330e      	adds	r3, #14
 8014aa0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014aa2:	6812      	ldr	r2, [r2, #0]
 8014aa4:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014aa6:	697b      	ldr	r3, [r7, #20]
 8014aa8:	3318      	adds	r3, #24
 8014aaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014aac:	6812      	ldr	r2, [r2, #0]
 8014aae:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014ab0:	697b      	ldr	r3, [r7, #20]
 8014ab2:	2200      	movs	r2, #0
 8014ab4:	701a      	strb	r2, [r3, #0]
 8014ab6:	2200      	movs	r2, #0
 8014ab8:	f042 0201 	orr.w	r2, r2, #1
 8014abc:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8014abe:	697b      	ldr	r3, [r7, #20]
 8014ac0:	2200      	movs	r2, #0
 8014ac2:	f042 0208 	orr.w	r2, r2, #8
 8014ac6:	709a      	strb	r2, [r3, #2]
 8014ac8:	2200      	movs	r2, #0
 8014aca:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8014acc:	697b      	ldr	r3, [r7, #20]
 8014ace:	2206      	movs	r2, #6
 8014ad0:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014ad2:	697b      	ldr	r3, [r7, #20]
 8014ad4:	2204      	movs	r2, #4
 8014ad6:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014ad8:	f640 0306 	movw	r3, #2054	; 0x806
 8014adc:	9300      	str	r3, [sp, #0]
 8014ade:	687b      	ldr	r3, [r7, #4]
 8014ae0:	68ba      	ldr	r2, [r7, #8]
 8014ae2:	69b9      	ldr	r1, [r7, #24]
 8014ae4:	68f8      	ldr	r0, [r7, #12]
 8014ae6:	f001 fb99 	bl	801621c <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8014aea:	69b8      	ldr	r0, [r7, #24]
 8014aec:	f7f7 f826 	bl	800bb3c <pbuf_free>
  p = NULL;
 8014af0:	2300      	movs	r3, #0
 8014af2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8014af4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8014af8:	4618      	mov	r0, r3
 8014afa:	3720      	adds	r7, #32
 8014afc:	46bd      	mov	sp, r7
 8014afe:	bd80      	pop	{r7, pc}
 8014b00:	08019e9c 	.word	0x08019e9c
 8014b04:	08019fec 	.word	0x08019fec
 8014b08:	08019f14 	.word	0x08019f14
 8014b0c:	0801a09c 	.word	0x0801a09c
 8014b10:	0801a0d0 	.word	0x0801a0d0

08014b14 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8014b14:	b580      	push	{r7, lr}
 8014b16:	b088      	sub	sp, #32
 8014b18:	af04      	add	r7, sp, #16
 8014b1a:	60f8      	str	r0, [r7, #12]
 8014b1c:	60b9      	str	r1, [r7, #8]
 8014b1e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014b20:	68fb      	ldr	r3, [r7, #12]
 8014b22:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8014b26:	68fb      	ldr	r3, [r7, #12]
 8014b28:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8014b2c:	68fb      	ldr	r3, [r7, #12]
 8014b2e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8014b30:	2201      	movs	r2, #1
 8014b32:	9203      	str	r2, [sp, #12]
 8014b34:	68ba      	ldr	r2, [r7, #8]
 8014b36:	9202      	str	r2, [sp, #8]
 8014b38:	4a06      	ldr	r2, [pc, #24]	; (8014b54 <etharp_request_dst+0x40>)
 8014b3a:	9201      	str	r2, [sp, #4]
 8014b3c:	9300      	str	r3, [sp, #0]
 8014b3e:	4603      	mov	r3, r0
 8014b40:	687a      	ldr	r2, [r7, #4]
 8014b42:	68f8      	ldr	r0, [r7, #12]
 8014b44:	f7ff ff5a 	bl	80149fc <etharp_raw>
 8014b48:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	3710      	adds	r7, #16
 8014b4e:	46bd      	mov	sp, r7
 8014b50:	bd80      	pop	{r7, pc}
 8014b52:	bf00      	nop
 8014b54:	0801a6d8 	.word	0x0801a6d8

08014b58 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014b58:	b580      	push	{r7, lr}
 8014b5a:	b082      	sub	sp, #8
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	6078      	str	r0, [r7, #4]
 8014b60:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014b62:	4a05      	ldr	r2, [pc, #20]	; (8014b78 <etharp_request+0x20>)
 8014b64:	6839      	ldr	r1, [r7, #0]
 8014b66:	6878      	ldr	r0, [r7, #4]
 8014b68:	f7ff ffd4 	bl	8014b14 <etharp_request_dst>
 8014b6c:	4603      	mov	r3, r0
}
 8014b6e:	4618      	mov	r0, r3
 8014b70:	3708      	adds	r7, #8
 8014b72:	46bd      	mov	sp, r7
 8014b74:	bd80      	pop	{r7, pc}
 8014b76:	bf00      	nop
 8014b78:	0801a6d0 	.word	0x0801a6d0

08014b7c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8014b7c:	b580      	push	{r7, lr}
 8014b7e:	b08e      	sub	sp, #56	; 0x38
 8014b80:	af04      	add	r7, sp, #16
 8014b82:	6078      	str	r0, [r7, #4]
 8014b84:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014b86:	4b79      	ldr	r3, [pc, #484]	; (8014d6c <icmp_input+0x1f0>)
 8014b88:	689b      	ldr	r3, [r3, #8]
 8014b8a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8014b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b8e:	781b      	ldrb	r3, [r3, #0]
 8014b90:	f003 030f 	and.w	r3, r3, #15
 8014b94:	b2db      	uxtb	r3, r3
 8014b96:	009b      	lsls	r3, r3, #2
 8014b98:	b2db      	uxtb	r3, r3
 8014b9a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8014b9c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014b9e:	2b13      	cmp	r3, #19
 8014ba0:	f240 80cd 	bls.w	8014d3e <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	895b      	ldrh	r3, [r3, #10]
 8014ba8:	2b03      	cmp	r3, #3
 8014baa:	f240 80ca 	bls.w	8014d42 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	685b      	ldr	r3, [r3, #4]
 8014bb2:	781b      	ldrb	r3, [r3, #0]
 8014bb4:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014bb8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	f000 80b7 	beq.w	8014d30 <icmp_input+0x1b4>
 8014bc2:	2b08      	cmp	r3, #8
 8014bc4:	f040 80b7 	bne.w	8014d36 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014bc8:	4b69      	ldr	r3, [pc, #420]	; (8014d70 <icmp_input+0x1f4>)
 8014bca:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014bcc:	4b67      	ldr	r3, [pc, #412]	; (8014d6c <icmp_input+0x1f0>)
 8014bce:	695b      	ldr	r3, [r3, #20]
 8014bd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014bd4:	2be0      	cmp	r3, #224	; 0xe0
 8014bd6:	f000 80bb 	beq.w	8014d50 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8014bda:	4b64      	ldr	r3, [pc, #400]	; (8014d6c <icmp_input+0x1f0>)
 8014bdc:	695b      	ldr	r3, [r3, #20]
 8014bde:	4a63      	ldr	r2, [pc, #396]	; (8014d6c <icmp_input+0x1f0>)
 8014be0:	6812      	ldr	r2, [r2, #0]
 8014be2:	4611      	mov	r1, r2
 8014be4:	4618      	mov	r0, r3
 8014be6:	f000 fc0b 	bl	8015400 <ip4_addr_isbroadcast_u32>
 8014bea:	4603      	mov	r3, r0
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	f040 80b1 	bne.w	8014d54 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8014bf2:	687b      	ldr	r3, [r7, #4]
 8014bf4:	891b      	ldrh	r3, [r3, #8]
 8014bf6:	2b07      	cmp	r3, #7
 8014bf8:	f240 80a5 	bls.w	8014d46 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014bfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014bfe:	330e      	adds	r3, #14
 8014c00:	4619      	mov	r1, r3
 8014c02:	6878      	ldr	r0, [r7, #4]
 8014c04:	f7f6 ff04 	bl	800ba10 <pbuf_add_header>
 8014c08:	4603      	mov	r3, r0
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d04b      	beq.n	8014ca6 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8014c0e:	687b      	ldr	r3, [r7, #4]
 8014c10:	891a      	ldrh	r2, [r3, #8]
 8014c12:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c14:	4413      	add	r3, r2
 8014c16:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	891b      	ldrh	r3, [r3, #8]
 8014c1c:	8b7a      	ldrh	r2, [r7, #26]
 8014c1e:	429a      	cmp	r2, r3
 8014c20:	f0c0 809a 	bcc.w	8014d58 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8014c24:	8b7b      	ldrh	r3, [r7, #26]
 8014c26:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014c2a:	4619      	mov	r1, r3
 8014c2c:	200e      	movs	r0, #14
 8014c2e:	f7f6 fca1 	bl	800b574 <pbuf_alloc>
 8014c32:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8014c34:	697b      	ldr	r3, [r7, #20]
 8014c36:	2b00      	cmp	r3, #0
 8014c38:	f000 8090 	beq.w	8014d5c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8014c3c:	697b      	ldr	r3, [r7, #20]
 8014c3e:	895b      	ldrh	r3, [r3, #10]
 8014c40:	461a      	mov	r2, r3
 8014c42:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c44:	3308      	adds	r3, #8
 8014c46:	429a      	cmp	r2, r3
 8014c48:	d203      	bcs.n	8014c52 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8014c4a:	6978      	ldr	r0, [r7, #20]
 8014c4c:	f7f6 ff76 	bl	800bb3c <pbuf_free>
          goto icmperr;
 8014c50:	e085      	b.n	8014d5e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014c52:	697b      	ldr	r3, [r7, #20]
 8014c54:	685b      	ldr	r3, [r3, #4]
 8014c56:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014c58:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f001 fd45 	bl	80166ea <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014c60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014c62:	4619      	mov	r1, r3
 8014c64:	6978      	ldr	r0, [r7, #20]
 8014c66:	f7f6 fee3 	bl	800ba30 <pbuf_remove_header>
 8014c6a:	4603      	mov	r3, r0
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d009      	beq.n	8014c84 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014c70:	4b40      	ldr	r3, [pc, #256]	; (8014d74 <icmp_input+0x1f8>)
 8014c72:	22b6      	movs	r2, #182	; 0xb6
 8014c74:	4940      	ldr	r1, [pc, #256]	; (8014d78 <icmp_input+0x1fc>)
 8014c76:	4841      	ldr	r0, [pc, #260]	; (8014d7c <icmp_input+0x200>)
 8014c78:	f001 fde2 	bl	8016840 <iprintf>
          pbuf_free(r);
 8014c7c:	6978      	ldr	r0, [r7, #20]
 8014c7e:	f7f6 ff5d 	bl	800bb3c <pbuf_free>
          goto icmperr;
 8014c82:	e06c      	b.n	8014d5e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014c84:	6879      	ldr	r1, [r7, #4]
 8014c86:	6978      	ldr	r0, [r7, #20]
 8014c88:	f7f7 f88c 	bl	800bda4 <pbuf_copy>
 8014c8c:	4603      	mov	r3, r0
 8014c8e:	2b00      	cmp	r3, #0
 8014c90:	d003      	beq.n	8014c9a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014c92:	6978      	ldr	r0, [r7, #20]
 8014c94:	f7f6 ff52 	bl	800bb3c <pbuf_free>
          goto icmperr;
 8014c98:	e061      	b.n	8014d5e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8014c9a:	6878      	ldr	r0, [r7, #4]
 8014c9c:	f7f6 ff4e 	bl	800bb3c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014ca0:	697b      	ldr	r3, [r7, #20]
 8014ca2:	607b      	str	r3, [r7, #4]
 8014ca4:	e00f      	b.n	8014cc6 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014ca6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014ca8:	330e      	adds	r3, #14
 8014caa:	4619      	mov	r1, r3
 8014cac:	6878      	ldr	r0, [r7, #4]
 8014cae:	f7f6 febf 	bl	800ba30 <pbuf_remove_header>
 8014cb2:	4603      	mov	r3, r0
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d006      	beq.n	8014cc6 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014cb8:	4b2e      	ldr	r3, [pc, #184]	; (8014d74 <icmp_input+0x1f8>)
 8014cba:	22c7      	movs	r2, #199	; 0xc7
 8014cbc:	4930      	ldr	r1, [pc, #192]	; (8014d80 <icmp_input+0x204>)
 8014cbe:	482f      	ldr	r0, [pc, #188]	; (8014d7c <icmp_input+0x200>)
 8014cc0:	f001 fdbe 	bl	8016840 <iprintf>
          goto icmperr;
 8014cc4:	e04b      	b.n	8014d5e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014cc6:	687b      	ldr	r3, [r7, #4]
 8014cc8:	685b      	ldr	r3, [r3, #4]
 8014cca:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8014ccc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014cce:	4619      	mov	r1, r3
 8014cd0:	6878      	ldr	r0, [r7, #4]
 8014cd2:	f7f6 fe9d 	bl	800ba10 <pbuf_add_header>
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d12b      	bne.n	8014d34 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	685b      	ldr	r3, [r3, #4]
 8014ce0:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014ce2:	69fb      	ldr	r3, [r7, #28]
 8014ce4:	681a      	ldr	r2, [r3, #0]
 8014ce6:	68fb      	ldr	r3, [r7, #12]
 8014ce8:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8014cea:	4b20      	ldr	r3, [pc, #128]	; (8014d6c <icmp_input+0x1f0>)
 8014cec:	691a      	ldr	r2, [r3, #16]
 8014cee:	68fb      	ldr	r3, [r7, #12]
 8014cf0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8014cf2:	693b      	ldr	r3, [r7, #16]
 8014cf4:	2200      	movs	r2, #0
 8014cf6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8014cf8:	693b      	ldr	r3, [r7, #16]
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	709a      	strb	r2, [r3, #2]
 8014cfe:	2200      	movs	r2, #0
 8014d00:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8014d02:	68fb      	ldr	r3, [r7, #12]
 8014d04:	22ff      	movs	r2, #255	; 0xff
 8014d06:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	2200      	movs	r2, #0
 8014d0c:	729a      	strb	r2, [r3, #10]
 8014d0e:	2200      	movs	r2, #0
 8014d10:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8014d12:	683b      	ldr	r3, [r7, #0]
 8014d14:	9302      	str	r3, [sp, #8]
 8014d16:	2301      	movs	r3, #1
 8014d18:	9301      	str	r3, [sp, #4]
 8014d1a:	2300      	movs	r3, #0
 8014d1c:	9300      	str	r3, [sp, #0]
 8014d1e:	23ff      	movs	r3, #255	; 0xff
 8014d20:	2200      	movs	r2, #0
 8014d22:	69f9      	ldr	r1, [r7, #28]
 8014d24:	6878      	ldr	r0, [r7, #4]
 8014d26:	f000 fa93 	bl	8015250 <ip4_output_if>
 8014d2a:	4603      	mov	r3, r0
 8014d2c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8014d2e:	e001      	b.n	8014d34 <icmp_input+0x1b8>
      break;
 8014d30:	bf00      	nop
 8014d32:	e000      	b.n	8014d36 <icmp_input+0x1ba>
      break;
 8014d34:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8014d36:	6878      	ldr	r0, [r7, #4]
 8014d38:	f7f6 ff00 	bl	800bb3c <pbuf_free>
  return;
 8014d3c:	e013      	b.n	8014d66 <icmp_input+0x1ea>
    goto lenerr;
 8014d3e:	bf00      	nop
 8014d40:	e002      	b.n	8014d48 <icmp_input+0x1cc>
    goto lenerr;
 8014d42:	bf00      	nop
 8014d44:	e000      	b.n	8014d48 <icmp_input+0x1cc>
        goto lenerr;
 8014d46:	bf00      	nop
lenerr:
  pbuf_free(p);
 8014d48:	6878      	ldr	r0, [r7, #4]
 8014d4a:	f7f6 fef7 	bl	800bb3c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014d4e:	e00a      	b.n	8014d66 <icmp_input+0x1ea>
        goto icmperr;
 8014d50:	bf00      	nop
 8014d52:	e004      	b.n	8014d5e <icmp_input+0x1e2>
        goto icmperr;
 8014d54:	bf00      	nop
 8014d56:	e002      	b.n	8014d5e <icmp_input+0x1e2>
          goto icmperr;
 8014d58:	bf00      	nop
 8014d5a:	e000      	b.n	8014d5e <icmp_input+0x1e2>
          goto icmperr;
 8014d5c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8014d5e:	6878      	ldr	r0, [r7, #4]
 8014d60:	f7f6 feec 	bl	800bb3c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014d64:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014d66:	3728      	adds	r7, #40	; 0x28
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	bd80      	pop	{r7, pc}
 8014d6c:	200098d0 	.word	0x200098d0
 8014d70:	200098e4 	.word	0x200098e4
 8014d74:	0801a114 	.word	0x0801a114
 8014d78:	0801a14c 	.word	0x0801a14c
 8014d7c:	0801a184 	.word	0x0801a184
 8014d80:	0801a1ac 	.word	0x0801a1ac

08014d84 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014d84:	b580      	push	{r7, lr}
 8014d86:	b082      	sub	sp, #8
 8014d88:	af00      	add	r7, sp, #0
 8014d8a:	6078      	str	r0, [r7, #4]
 8014d8c:	460b      	mov	r3, r1
 8014d8e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014d90:	78fb      	ldrb	r3, [r7, #3]
 8014d92:	461a      	mov	r2, r3
 8014d94:	2103      	movs	r1, #3
 8014d96:	6878      	ldr	r0, [r7, #4]
 8014d98:	f000 f814 	bl	8014dc4 <icmp_send_response>
}
 8014d9c:	bf00      	nop
 8014d9e:	3708      	adds	r7, #8
 8014da0:	46bd      	mov	sp, r7
 8014da2:	bd80      	pop	{r7, pc}

08014da4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b082      	sub	sp, #8
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	6078      	str	r0, [r7, #4]
 8014dac:	460b      	mov	r3, r1
 8014dae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014db0:	78fb      	ldrb	r3, [r7, #3]
 8014db2:	461a      	mov	r2, r3
 8014db4:	210b      	movs	r1, #11
 8014db6:	6878      	ldr	r0, [r7, #4]
 8014db8:	f000 f804 	bl	8014dc4 <icmp_send_response>
}
 8014dbc:	bf00      	nop
 8014dbe:	3708      	adds	r7, #8
 8014dc0:	46bd      	mov	sp, r7
 8014dc2:	bd80      	pop	{r7, pc}

08014dc4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014dc4:	b580      	push	{r7, lr}
 8014dc6:	b08c      	sub	sp, #48	; 0x30
 8014dc8:	af04      	add	r7, sp, #16
 8014dca:	6078      	str	r0, [r7, #4]
 8014dcc:	460b      	mov	r3, r1
 8014dce:	70fb      	strb	r3, [r7, #3]
 8014dd0:	4613      	mov	r3, r2
 8014dd2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014dd4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014dd8:	2124      	movs	r1, #36	; 0x24
 8014dda:	2022      	movs	r0, #34	; 0x22
 8014ddc:	f7f6 fbca 	bl	800b574 <pbuf_alloc>
 8014de0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014de2:	69fb      	ldr	r3, [r7, #28]
 8014de4:	2b00      	cmp	r3, #0
 8014de6:	d04c      	beq.n	8014e82 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014de8:	69fb      	ldr	r3, [r7, #28]
 8014dea:	895b      	ldrh	r3, [r3, #10]
 8014dec:	2b23      	cmp	r3, #35	; 0x23
 8014dee:	d806      	bhi.n	8014dfe <icmp_send_response+0x3a>
 8014df0:	4b26      	ldr	r3, [pc, #152]	; (8014e8c <icmp_send_response+0xc8>)
 8014df2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8014df6:	4926      	ldr	r1, [pc, #152]	; (8014e90 <icmp_send_response+0xcc>)
 8014df8:	4826      	ldr	r0, [pc, #152]	; (8014e94 <icmp_send_response+0xd0>)
 8014dfa:	f001 fd21 	bl	8016840 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	685b      	ldr	r3, [r3, #4]
 8014e02:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8014e04:	69fb      	ldr	r3, [r7, #28]
 8014e06:	685b      	ldr	r3, [r3, #4]
 8014e08:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8014e0a:	697b      	ldr	r3, [r7, #20]
 8014e0c:	78fa      	ldrb	r2, [r7, #3]
 8014e0e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	78ba      	ldrb	r2, [r7, #2]
 8014e14:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8014e16:	697b      	ldr	r3, [r7, #20]
 8014e18:	2200      	movs	r2, #0
 8014e1a:	711a      	strb	r2, [r3, #4]
 8014e1c:	2200      	movs	r2, #0
 8014e1e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8014e20:	697b      	ldr	r3, [r7, #20]
 8014e22:	2200      	movs	r2, #0
 8014e24:	719a      	strb	r2, [r3, #6]
 8014e26:	2200      	movs	r2, #0
 8014e28:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8014e2a:	69fb      	ldr	r3, [r7, #28]
 8014e2c:	685b      	ldr	r3, [r3, #4]
 8014e2e:	f103 0008 	add.w	r0, r3, #8
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	685b      	ldr	r3, [r3, #4]
 8014e36:	221c      	movs	r2, #28
 8014e38:	4619      	mov	r1, r3
 8014e3a:	f001 fc56 	bl	80166ea <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8014e3e:	69bb      	ldr	r3, [r7, #24]
 8014e40:	68db      	ldr	r3, [r3, #12]
 8014e42:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8014e44:	f107 030c 	add.w	r3, r7, #12
 8014e48:	4618      	mov	r0, r3
 8014e4a:	f000 f825 	bl	8014e98 <ip4_route>
 8014e4e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014e50:	693b      	ldr	r3, [r7, #16]
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	d011      	beq.n	8014e7a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014e56:	697b      	ldr	r3, [r7, #20]
 8014e58:	2200      	movs	r2, #0
 8014e5a:	709a      	strb	r2, [r3, #2]
 8014e5c:	2200      	movs	r2, #0
 8014e5e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014e60:	f107 020c 	add.w	r2, r7, #12
 8014e64:	693b      	ldr	r3, [r7, #16]
 8014e66:	9302      	str	r3, [sp, #8]
 8014e68:	2301      	movs	r3, #1
 8014e6a:	9301      	str	r3, [sp, #4]
 8014e6c:	2300      	movs	r3, #0
 8014e6e:	9300      	str	r3, [sp, #0]
 8014e70:	23ff      	movs	r3, #255	; 0xff
 8014e72:	2100      	movs	r1, #0
 8014e74:	69f8      	ldr	r0, [r7, #28]
 8014e76:	f000 f9eb 	bl	8015250 <ip4_output_if>
  }
  pbuf_free(q);
 8014e7a:	69f8      	ldr	r0, [r7, #28]
 8014e7c:	f7f6 fe5e 	bl	800bb3c <pbuf_free>
 8014e80:	e000      	b.n	8014e84 <icmp_send_response+0xc0>
    return;
 8014e82:	bf00      	nop
}
 8014e84:	3720      	adds	r7, #32
 8014e86:	46bd      	mov	sp, r7
 8014e88:	bd80      	pop	{r7, pc}
 8014e8a:	bf00      	nop
 8014e8c:	0801a114 	.word	0x0801a114
 8014e90:	0801a1e0 	.word	0x0801a1e0
 8014e94:	0801a184 	.word	0x0801a184

08014e98 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014e98:	b480      	push	{r7}
 8014e9a:	b085      	sub	sp, #20
 8014e9c:	af00      	add	r7, sp, #0
 8014e9e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014ea0:	4b33      	ldr	r3, [pc, #204]	; (8014f70 <ip4_route+0xd8>)
 8014ea2:	681b      	ldr	r3, [r3, #0]
 8014ea4:	60fb      	str	r3, [r7, #12]
 8014ea6:	e036      	b.n	8014f16 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014ea8:	68fb      	ldr	r3, [r7, #12]
 8014eaa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014eae:	f003 0301 	and.w	r3, r3, #1
 8014eb2:	b2db      	uxtb	r3, r3
 8014eb4:	2b00      	cmp	r3, #0
 8014eb6:	d02b      	beq.n	8014f10 <ip4_route+0x78>
 8014eb8:	68fb      	ldr	r3, [r7, #12]
 8014eba:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014ebe:	089b      	lsrs	r3, r3, #2
 8014ec0:	f003 0301 	and.w	r3, r3, #1
 8014ec4:	b2db      	uxtb	r3, r3
 8014ec6:	2b00      	cmp	r3, #0
 8014ec8:	d022      	beq.n	8014f10 <ip4_route+0x78>
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	3304      	adds	r3, #4
 8014ece:	681b      	ldr	r3, [r3, #0]
 8014ed0:	2b00      	cmp	r3, #0
 8014ed2:	d01d      	beq.n	8014f10 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	681a      	ldr	r2, [r3, #0]
 8014ed8:	68fb      	ldr	r3, [r7, #12]
 8014eda:	3304      	adds	r3, #4
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	405a      	eors	r2, r3
 8014ee0:	68fb      	ldr	r3, [r7, #12]
 8014ee2:	3308      	adds	r3, #8
 8014ee4:	681b      	ldr	r3, [r3, #0]
 8014ee6:	4013      	ands	r3, r2
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d101      	bne.n	8014ef0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8014eec:	68fb      	ldr	r3, [r7, #12]
 8014eee:	e038      	b.n	8014f62 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8014ef0:	68fb      	ldr	r3, [r7, #12]
 8014ef2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014ef6:	f003 0302 	and.w	r3, r3, #2
 8014efa:	2b00      	cmp	r3, #0
 8014efc:	d108      	bne.n	8014f10 <ip4_route+0x78>
 8014efe:	687b      	ldr	r3, [r7, #4]
 8014f00:	681a      	ldr	r2, [r3, #0]
 8014f02:	68fb      	ldr	r3, [r7, #12]
 8014f04:	330c      	adds	r3, #12
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	429a      	cmp	r2, r3
 8014f0a:	d101      	bne.n	8014f10 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8014f0c:	68fb      	ldr	r3, [r7, #12]
 8014f0e:	e028      	b.n	8014f62 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8014f10:	68fb      	ldr	r3, [r7, #12]
 8014f12:	681b      	ldr	r3, [r3, #0]
 8014f14:	60fb      	str	r3, [r7, #12]
 8014f16:	68fb      	ldr	r3, [r7, #12]
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d1c5      	bne.n	8014ea8 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014f1c:	4b15      	ldr	r3, [pc, #84]	; (8014f74 <ip4_route+0xdc>)
 8014f1e:	681b      	ldr	r3, [r3, #0]
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d01a      	beq.n	8014f5a <ip4_route+0xc2>
 8014f24:	4b13      	ldr	r3, [pc, #76]	; (8014f74 <ip4_route+0xdc>)
 8014f26:	681b      	ldr	r3, [r3, #0]
 8014f28:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014f2c:	f003 0301 	and.w	r3, r3, #1
 8014f30:	2b00      	cmp	r3, #0
 8014f32:	d012      	beq.n	8014f5a <ip4_route+0xc2>
 8014f34:	4b0f      	ldr	r3, [pc, #60]	; (8014f74 <ip4_route+0xdc>)
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014f3c:	f003 0304 	and.w	r3, r3, #4
 8014f40:	2b00      	cmp	r3, #0
 8014f42:	d00a      	beq.n	8014f5a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014f44:	4b0b      	ldr	r3, [pc, #44]	; (8014f74 <ip4_route+0xdc>)
 8014f46:	681b      	ldr	r3, [r3, #0]
 8014f48:	3304      	adds	r3, #4
 8014f4a:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d004      	beq.n	8014f5a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	681b      	ldr	r3, [r3, #0]
 8014f54:	b2db      	uxtb	r3, r3
 8014f56:	2b7f      	cmp	r3, #127	; 0x7f
 8014f58:	d101      	bne.n	8014f5e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014f5a:	2300      	movs	r3, #0
 8014f5c:	e001      	b.n	8014f62 <ip4_route+0xca>
  }

  return netif_default;
 8014f5e:	4b05      	ldr	r3, [pc, #20]	; (8014f74 <ip4_route+0xdc>)
 8014f60:	681b      	ldr	r3, [r3, #0]
}
 8014f62:	4618      	mov	r0, r3
 8014f64:	3714      	adds	r7, #20
 8014f66:	46bd      	mov	sp, r7
 8014f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f6c:	4770      	bx	lr
 8014f6e:	bf00      	nop
 8014f70:	2000f1f8 	.word	0x2000f1f8
 8014f74:	2000f1fc 	.word	0x2000f1fc

08014f78 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014f78:	b580      	push	{r7, lr}
 8014f7a:	b082      	sub	sp, #8
 8014f7c:	af00      	add	r7, sp, #0
 8014f7e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8014f86:	f003 0301 	and.w	r3, r3, #1
 8014f8a:	b2db      	uxtb	r3, r3
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d016      	beq.n	8014fbe <ip4_input_accept+0x46>
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	3304      	adds	r3, #4
 8014f94:	681b      	ldr	r3, [r3, #0]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d011      	beq.n	8014fbe <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014f9a:	4b0b      	ldr	r3, [pc, #44]	; (8014fc8 <ip4_input_accept+0x50>)
 8014f9c:	695a      	ldr	r2, [r3, #20]
 8014f9e:	687b      	ldr	r3, [r7, #4]
 8014fa0:	3304      	adds	r3, #4
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	429a      	cmp	r2, r3
 8014fa6:	d008      	beq.n	8014fba <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014fa8:	4b07      	ldr	r3, [pc, #28]	; (8014fc8 <ip4_input_accept+0x50>)
 8014faa:	695b      	ldr	r3, [r3, #20]
 8014fac:	6879      	ldr	r1, [r7, #4]
 8014fae:	4618      	mov	r0, r3
 8014fb0:	f000 fa26 	bl	8015400 <ip4_addr_isbroadcast_u32>
 8014fb4:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d001      	beq.n	8014fbe <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014fba:	2301      	movs	r3, #1
 8014fbc:	e000      	b.n	8014fc0 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014fbe:	2300      	movs	r3, #0
}
 8014fc0:	4618      	mov	r0, r3
 8014fc2:	3708      	adds	r7, #8
 8014fc4:	46bd      	mov	sp, r7
 8014fc6:	bd80      	pop	{r7, pc}
 8014fc8:	200098d0 	.word	0x200098d0

08014fcc <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014fcc:	b580      	push	{r7, lr}
 8014fce:	b088      	sub	sp, #32
 8014fd0:	af00      	add	r7, sp, #0
 8014fd2:	6078      	str	r0, [r7, #4]
 8014fd4:	6039      	str	r1, [r7, #0]
  const struct ip_hdr *iphdr;
  struct netif *netif;
  u16_t iphdr_hlen;
  u16_t iphdr_len;
#if IP_ACCEPT_LINK_LAYER_ADDRESSING || LWIP_IGMP
  int check_ip_src = 1;
 8014fd6:	2301      	movs	r3, #1
 8014fd8:	617b      	str	r3, [r7, #20]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014fda:	687b      	ldr	r3, [r7, #4]
 8014fdc:	685b      	ldr	r3, [r3, #4]
 8014fde:	61fb      	str	r3, [r7, #28]
  if (IPH_V(iphdr) != 4) {
 8014fe0:	69fb      	ldr	r3, [r7, #28]
 8014fe2:	781b      	ldrb	r3, [r3, #0]
 8014fe4:	091b      	lsrs	r3, r3, #4
 8014fe6:	b2db      	uxtb	r3, r3
 8014fe8:	2b04      	cmp	r3, #4
 8014fea:	d004      	beq.n	8014ff6 <ip4_input+0x2a>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014fec:	6878      	ldr	r0, [r7, #4]
 8014fee:	f7f6 fda5 	bl	800bb3c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014ff2:	2300      	movs	r3, #0
 8014ff4:	e123      	b.n	801523e <ip4_input+0x272>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014ff6:	69fb      	ldr	r3, [r7, #28]
 8014ff8:	781b      	ldrb	r3, [r3, #0]
 8014ffa:	f003 030f 	and.w	r3, r3, #15
 8014ffe:	b2db      	uxtb	r3, r3
 8015000:	009b      	lsls	r3, r3, #2
 8015002:	b2db      	uxtb	r3, r3
 8015004:	827b      	strh	r3, [r7, #18]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8015006:	69fb      	ldr	r3, [r7, #28]
 8015008:	885b      	ldrh	r3, [r3, #2]
 801500a:	b29b      	uxth	r3, r3
 801500c:	4618      	mov	r0, r3
 801500e:	f7f5 f997 	bl	800a340 <lwip_htons>
 8015012:	4603      	mov	r3, r0
 8015014:	823b      	strh	r3, [r7, #16]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8015016:	687b      	ldr	r3, [r7, #4]
 8015018:	891b      	ldrh	r3, [r3, #8]
 801501a:	8a3a      	ldrh	r2, [r7, #16]
 801501c:	429a      	cmp	r2, r3
 801501e:	d204      	bcs.n	801502a <ip4_input+0x5e>
    pbuf_realloc(p, iphdr_len);
 8015020:	8a3b      	ldrh	r3, [r7, #16]
 8015022:	4619      	mov	r1, r3
 8015024:	6878      	ldr	r0, [r7, #4]
 8015026:	f7f6 fc03 	bl	800b830 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	895b      	ldrh	r3, [r3, #10]
 801502e:	8a7a      	ldrh	r2, [r7, #18]
 8015030:	429a      	cmp	r2, r3
 8015032:	d807      	bhi.n	8015044 <ip4_input+0x78>
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	891b      	ldrh	r3, [r3, #8]
 8015038:	8a3a      	ldrh	r2, [r7, #16]
 801503a:	429a      	cmp	r2, r3
 801503c:	d802      	bhi.n	8015044 <ip4_input+0x78>
 801503e:	8a7b      	ldrh	r3, [r7, #18]
 8015040:	2b13      	cmp	r3, #19
 8015042:	d804      	bhi.n	801504e <ip4_input+0x82>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015044:	6878      	ldr	r0, [r7, #4]
 8015046:	f7f6 fd79 	bl	800bb3c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801504a:	2300      	movs	r3, #0
 801504c:	e0f7      	b.n	801523e <ip4_input+0x272>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801504e:	69fb      	ldr	r3, [r7, #28]
 8015050:	691b      	ldr	r3, [r3, #16]
 8015052:	4a7d      	ldr	r2, [pc, #500]	; (8015248 <ip4_input+0x27c>)
 8015054:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8015056:	69fb      	ldr	r3, [r7, #28]
 8015058:	68db      	ldr	r3, [r3, #12]
 801505a:	4a7b      	ldr	r2, [pc, #492]	; (8015248 <ip4_input+0x27c>)
 801505c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801505e:	4b7a      	ldr	r3, [pc, #488]	; (8015248 <ip4_input+0x27c>)
 8015060:	695b      	ldr	r3, [r3, #20]
 8015062:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015066:	2be0      	cmp	r3, #224	; 0xe0
 8015068:	d112      	bne.n	8015090 <ip4_input+0xc4>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801506a:	683b      	ldr	r3, [r7, #0]
 801506c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015070:	f003 0301 	and.w	r3, r3, #1
 8015074:	b2db      	uxtb	r3, r3
 8015076:	2b00      	cmp	r3, #0
 8015078:	d007      	beq.n	801508a <ip4_input+0xbe>
 801507a:	683b      	ldr	r3, [r7, #0]
 801507c:	3304      	adds	r3, #4
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	2b00      	cmp	r3, #0
 8015082:	d002      	beq.n	801508a <ip4_input+0xbe>
      netif = inp;
 8015084:	683b      	ldr	r3, [r7, #0]
 8015086:	61bb      	str	r3, [r7, #24]
 8015088:	e02a      	b.n	80150e0 <ip4_input+0x114>
    } else {
      netif = NULL;
 801508a:	2300      	movs	r3, #0
 801508c:	61bb      	str	r3, [r7, #24]
 801508e:	e027      	b.n	80150e0 <ip4_input+0x114>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8015090:	6838      	ldr	r0, [r7, #0]
 8015092:	f7ff ff71 	bl	8014f78 <ip4_input_accept>
 8015096:	4603      	mov	r3, r0
 8015098:	2b00      	cmp	r3, #0
 801509a:	d002      	beq.n	80150a2 <ip4_input+0xd6>
      netif = inp;
 801509c:	683b      	ldr	r3, [r7, #0]
 801509e:	61bb      	str	r3, [r7, #24]
 80150a0:	e01e      	b.n	80150e0 <ip4_input+0x114>
    } else {
      netif = NULL;
 80150a2:	2300      	movs	r3, #0
 80150a4:	61bb      	str	r3, [r7, #24]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80150a6:	4b68      	ldr	r3, [pc, #416]	; (8015248 <ip4_input+0x27c>)
 80150a8:	695b      	ldr	r3, [r3, #20]
 80150aa:	b2db      	uxtb	r3, r3
 80150ac:	2b7f      	cmp	r3, #127	; 0x7f
 80150ae:	d017      	beq.n	80150e0 <ip4_input+0x114>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80150b0:	4b66      	ldr	r3, [pc, #408]	; (801524c <ip4_input+0x280>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	61bb      	str	r3, [r7, #24]
 80150b6:	e00e      	b.n	80150d6 <ip4_input+0x10a>
          if (netif == inp) {
 80150b8:	69ba      	ldr	r2, [r7, #24]
 80150ba:	683b      	ldr	r3, [r7, #0]
 80150bc:	429a      	cmp	r2, r3
 80150be:	d006      	beq.n	80150ce <ip4_input+0x102>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80150c0:	69b8      	ldr	r0, [r7, #24]
 80150c2:	f7ff ff59 	bl	8014f78 <ip4_input_accept>
 80150c6:	4603      	mov	r3, r0
 80150c8:	2b00      	cmp	r3, #0
 80150ca:	d108      	bne.n	80150de <ip4_input+0x112>
 80150cc:	e000      	b.n	80150d0 <ip4_input+0x104>
            continue;
 80150ce:	bf00      	nop
        NETIF_FOREACH(netif) {
 80150d0:	69bb      	ldr	r3, [r7, #24]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	61bb      	str	r3, [r7, #24]
 80150d6:	69bb      	ldr	r3, [r7, #24]
 80150d8:	2b00      	cmp	r3, #0
 80150da:	d1ed      	bne.n	80150b8 <ip4_input+0xec>
 80150dc:	e000      	b.n	80150e0 <ip4_input+0x114>
            break;
 80150de:	bf00      	nop
   * If you want to accept private broadcast communication while a netif is down,
   * define LWIP_IP_ACCEPT_UDP_PORT(dst_port), e.g.:
   *
   * #define LWIP_IP_ACCEPT_UDP_PORT(dst_port) ((dst_port) == PP_NTOHS(12345))
   */
  if (netif == NULL) {
 80150e0:	69bb      	ldr	r3, [r7, #24]
 80150e2:	2b00      	cmp	r3, #0
 80150e4:	d111      	bne.n	801510a <ip4_input+0x13e>
    /* remote port is DHCP server? */
    if (IPH_PROTO(iphdr) == IP_PROTO_UDP) {
 80150e6:	69fb      	ldr	r3, [r7, #28]
 80150e8:	7a5b      	ldrb	r3, [r3, #9]
 80150ea:	2b11      	cmp	r3, #17
 80150ec:	d10d      	bne.n	801510a <ip4_input+0x13e>
      const struct udp_hdr *udphdr = (const struct udp_hdr *)((const u8_t *)iphdr + iphdr_hlen);
 80150ee:	8a7b      	ldrh	r3, [r7, #18]
 80150f0:	69fa      	ldr	r2, [r7, #28]
 80150f2:	4413      	add	r3, r2
 80150f4:	60fb      	str	r3, [r7, #12]
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: UDP packet to DHCP client port %"U16_F"\n",
                                              lwip_ntohs(udphdr->dest)));
      if (IP_ACCEPT_LINK_LAYER_ADDRESSED_PORT(udphdr->dest)) {
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	885b      	ldrh	r3, [r3, #2]
 80150fa:	b29b      	uxth	r3, r3
 80150fc:	f5b3 4f88 	cmp.w	r3, #17408	; 0x4400
 8015100:	d103      	bne.n	801510a <ip4_input+0x13e>
        LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE, ("ip4_input: DHCP packet accepted.\n"));
        netif = inp;
 8015102:	683b      	ldr	r3, [r7, #0]
 8015104:	61bb      	str	r3, [r7, #24]
        check_ip_src = 0;
 8015106:	2300      	movs	r3, #0
 8015108:	617b      	str	r3, [r7, #20]
  }
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */

  /* broadcast or multicast packet source address? Compliant with RFC 1122: 3.2.1.3 */
#if LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING
  if (check_ip_src
 801510a:	697b      	ldr	r3, [r7, #20]
 801510c:	2b00      	cmp	r3, #0
 801510e:	d017      	beq.n	8015140 <ip4_input+0x174>
#if IP_ACCEPT_LINK_LAYER_ADDRESSING
      /* DHCP servers need 0.0.0.0 to be allowed as source address (RFC 1.1.2.2: 3.2.1.3/a) */
      && !ip4_addr_isany_val(*ip4_current_src_addr())
 8015110:	4b4d      	ldr	r3, [pc, #308]	; (8015248 <ip4_input+0x27c>)
 8015112:	691b      	ldr	r3, [r3, #16]
 8015114:	2b00      	cmp	r3, #0
 8015116:	d013      	beq.n	8015140 <ip4_input+0x174>
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015118:	4b4b      	ldr	r3, [pc, #300]	; (8015248 <ip4_input+0x27c>)
 801511a:	691b      	ldr	r3, [r3, #16]
 801511c:	6839      	ldr	r1, [r7, #0]
 801511e:	4618      	mov	r0, r3
 8015120:	f000 f96e 	bl	8015400 <ip4_addr_isbroadcast_u32>
 8015124:	4603      	mov	r3, r0
 8015126:	2b00      	cmp	r3, #0
 8015128:	d105      	bne.n	8015136 <ip4_input+0x16a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801512a:	4b47      	ldr	r3, [pc, #284]	; (8015248 <ip4_input+0x27c>)
 801512c:	691b      	ldr	r3, [r3, #16]
 801512e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015132:	2be0      	cmp	r3, #224	; 0xe0
 8015134:	d104      	bne.n	8015140 <ip4_input+0x174>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015136:	6878      	ldr	r0, [r7, #4]
 8015138:	f7f6 fd00 	bl	800bb3c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801513c:	2300      	movs	r3, #0
 801513e:	e07e      	b.n	801523e <ip4_input+0x272>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8015140:	69bb      	ldr	r3, [r7, #24]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d104      	bne.n	8015150 <ip4_input+0x184>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015146:	6878      	ldr	r0, [r7, #4]
 8015148:	f7f6 fcf8 	bl	800bb3c <pbuf_free>
    return ERR_OK;
 801514c:	2300      	movs	r3, #0
 801514e:	e076      	b.n	801523e <ip4_input+0x272>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8015150:	69fb      	ldr	r3, [r7, #28]
 8015152:	88db      	ldrh	r3, [r3, #6]
 8015154:	b29b      	uxth	r3, r3
 8015156:	461a      	mov	r2, r3
 8015158:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801515c:	4013      	ands	r3, r2
 801515e:	2b00      	cmp	r3, #0
 8015160:	d00b      	beq.n	801517a <ip4_input+0x1ae>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8015162:	6878      	ldr	r0, [r7, #4]
 8015164:	f000 fc92 	bl	8015a8c <ip4_reass>
 8015168:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	2b00      	cmp	r3, #0
 801516e:	d101      	bne.n	8015174 <ip4_input+0x1a8>
      return ERR_OK;
 8015170:	2300      	movs	r3, #0
 8015172:	e064      	b.n	801523e <ip4_input+0x272>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	685b      	ldr	r3, [r3, #4]
 8015178:	61fb      	str	r3, [r7, #28]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801517a:	4a33      	ldr	r2, [pc, #204]	; (8015248 <ip4_input+0x27c>)
 801517c:	69bb      	ldr	r3, [r7, #24]
 801517e:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8015180:	4a31      	ldr	r2, [pc, #196]	; (8015248 <ip4_input+0x27c>)
 8015182:	683b      	ldr	r3, [r7, #0]
 8015184:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015186:	4a30      	ldr	r2, [pc, #192]	; (8015248 <ip4_input+0x27c>)
 8015188:	69fb      	ldr	r3, [r7, #28]
 801518a:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801518c:	69fb      	ldr	r3, [r7, #28]
 801518e:	781b      	ldrb	r3, [r3, #0]
 8015190:	f003 030f 	and.w	r3, r3, #15
 8015194:	b2db      	uxtb	r3, r3
 8015196:	009b      	lsls	r3, r3, #2
 8015198:	b2db      	uxtb	r3, r3
 801519a:	b29a      	uxth	r2, r3
 801519c:	4b2a      	ldr	r3, [pc, #168]	; (8015248 <ip4_input+0x27c>)
 801519e:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80151a0:	8a7b      	ldrh	r3, [r7, #18]
 80151a2:	4619      	mov	r1, r3
 80151a4:	6878      	ldr	r0, [r7, #4]
 80151a6:	f7f6 fc43 	bl	800ba30 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80151aa:	69fb      	ldr	r3, [r7, #28]
 80151ac:	7a5b      	ldrb	r3, [r3, #9]
 80151ae:	2b11      	cmp	r3, #17
 80151b0:	d006      	beq.n	80151c0 <ip4_input+0x1f4>
 80151b2:	2b11      	cmp	r3, #17
 80151b4:	dc13      	bgt.n	80151de <ip4_input+0x212>
 80151b6:	2b01      	cmp	r3, #1
 80151b8:	d00c      	beq.n	80151d4 <ip4_input+0x208>
 80151ba:	2b06      	cmp	r3, #6
 80151bc:	d005      	beq.n	80151ca <ip4_input+0x1fe>
 80151be:	e00e      	b.n	80151de <ip4_input+0x212>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80151c0:	6839      	ldr	r1, [r7, #0]
 80151c2:	6878      	ldr	r0, [r7, #4]
 80151c4:	f7fc fae8 	bl	8011798 <udp_input>
        break;
 80151c8:	e026      	b.n	8015218 <ip4_input+0x24c>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80151ca:	6839      	ldr	r1, [r7, #0]
 80151cc:	6878      	ldr	r0, [r7, #4]
 80151ce:	f7f8 faf9 	bl	800d7c4 <tcp_input>
        break;
 80151d2:	e021      	b.n	8015218 <ip4_input+0x24c>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80151d4:	6839      	ldr	r1, [r7, #0]
 80151d6:	6878      	ldr	r0, [r7, #4]
 80151d8:	f7ff fcd0 	bl	8014b7c <icmp_input>
        break;
 80151dc:	e01c      	b.n	8015218 <ip4_input+0x24c>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80151de:	4b1a      	ldr	r3, [pc, #104]	; (8015248 <ip4_input+0x27c>)
 80151e0:	695b      	ldr	r3, [r3, #20]
 80151e2:	69b9      	ldr	r1, [r7, #24]
 80151e4:	4618      	mov	r0, r3
 80151e6:	f000 f90b 	bl	8015400 <ip4_addr_isbroadcast_u32>
 80151ea:	4603      	mov	r3, r0
 80151ec:	2b00      	cmp	r3, #0
 80151ee:	d10f      	bne.n	8015210 <ip4_input+0x244>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80151f0:	4b15      	ldr	r3, [pc, #84]	; (8015248 <ip4_input+0x27c>)
 80151f2:	695b      	ldr	r3, [r3, #20]
 80151f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80151f8:	2be0      	cmp	r3, #224	; 0xe0
 80151fa:	d009      	beq.n	8015210 <ip4_input+0x244>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80151fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015200:	4619      	mov	r1, r3
 8015202:	6878      	ldr	r0, [r7, #4]
 8015204:	f7f6 fc87 	bl	800bb16 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015208:	2102      	movs	r1, #2
 801520a:	6878      	ldr	r0, [r7, #4]
 801520c:	f7ff fdba 	bl	8014d84 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8015210:	6878      	ldr	r0, [r7, #4]
 8015212:	f7f6 fc93 	bl	800bb3c <pbuf_free>
        break;
 8015216:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015218:	4b0b      	ldr	r3, [pc, #44]	; (8015248 <ip4_input+0x27c>)
 801521a:	2200      	movs	r2, #0
 801521c:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801521e:	4b0a      	ldr	r3, [pc, #40]	; (8015248 <ip4_input+0x27c>)
 8015220:	2200      	movs	r2, #0
 8015222:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015224:	4b08      	ldr	r3, [pc, #32]	; (8015248 <ip4_input+0x27c>)
 8015226:	2200      	movs	r2, #0
 8015228:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801522a:	4b07      	ldr	r3, [pc, #28]	; (8015248 <ip4_input+0x27c>)
 801522c:	2200      	movs	r2, #0
 801522e:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8015230:	4b05      	ldr	r3, [pc, #20]	; (8015248 <ip4_input+0x27c>)
 8015232:	2200      	movs	r2, #0
 8015234:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015236:	4b04      	ldr	r3, [pc, #16]	; (8015248 <ip4_input+0x27c>)
 8015238:	2200      	movs	r2, #0
 801523a:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801523c:	2300      	movs	r3, #0
}
 801523e:	4618      	mov	r0, r3
 8015240:	3720      	adds	r7, #32
 8015242:	46bd      	mov	sp, r7
 8015244:	bd80      	pop	{r7, pc}
 8015246:	bf00      	nop
 8015248:	200098d0 	.word	0x200098d0
 801524c:	2000f1f8 	.word	0x2000f1f8

08015250 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8015250:	b580      	push	{r7, lr}
 8015252:	b08a      	sub	sp, #40	; 0x28
 8015254:	af04      	add	r7, sp, #16
 8015256:	60f8      	str	r0, [r7, #12]
 8015258:	60b9      	str	r1, [r7, #8]
 801525a:	607a      	str	r2, [r7, #4]
 801525c:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801525e:	68bb      	ldr	r3, [r7, #8]
 8015260:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	2b00      	cmp	r3, #0
 8015266:	d009      	beq.n	801527c <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015268:	68bb      	ldr	r3, [r7, #8]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d003      	beq.n	8015276 <ip4_output_if+0x26>
 801526e:	68bb      	ldr	r3, [r7, #8]
 8015270:	681b      	ldr	r3, [r3, #0]
 8015272:	2b00      	cmp	r3, #0
 8015274:	d102      	bne.n	801527c <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015278:	3304      	adds	r3, #4
 801527a:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801527c:	78fa      	ldrb	r2, [r7, #3]
 801527e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015280:	9302      	str	r3, [sp, #8]
 8015282:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015286:	9301      	str	r3, [sp, #4]
 8015288:	f897 3020 	ldrb.w	r3, [r7, #32]
 801528c:	9300      	str	r3, [sp, #0]
 801528e:	4613      	mov	r3, r2
 8015290:	687a      	ldr	r2, [r7, #4]
 8015292:	6979      	ldr	r1, [r7, #20]
 8015294:	68f8      	ldr	r0, [r7, #12]
 8015296:	f000 f805 	bl	80152a4 <ip4_output_if_src>
 801529a:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801529c:	4618      	mov	r0, r3
 801529e:	3718      	adds	r7, #24
 80152a0:	46bd      	mov	sp, r7
 80152a2:	bd80      	pop	{r7, pc}

080152a4 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80152a4:	b580      	push	{r7, lr}
 80152a6:	b088      	sub	sp, #32
 80152a8:	af00      	add	r7, sp, #0
 80152aa:	60f8      	str	r0, [r7, #12]
 80152ac:	60b9      	str	r1, [r7, #8]
 80152ae:	607a      	str	r2, [r7, #4]
 80152b0:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	7b9b      	ldrb	r3, [r3, #14]
 80152b6:	2b01      	cmp	r3, #1
 80152b8:	d006      	beq.n	80152c8 <ip4_output_if_src+0x24>
 80152ba:	4b4b      	ldr	r3, [pc, #300]	; (80153e8 <ip4_output_if_src+0x144>)
 80152bc:	f44f 7255 	mov.w	r2, #852	; 0x354
 80152c0:	494a      	ldr	r1, [pc, #296]	; (80153ec <ip4_output_if_src+0x148>)
 80152c2:	484b      	ldr	r0, [pc, #300]	; (80153f0 <ip4_output_if_src+0x14c>)
 80152c4:	f001 fabc 	bl	8016840 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80152c8:	687b      	ldr	r3, [r7, #4]
 80152ca:	2b00      	cmp	r3, #0
 80152cc:	d060      	beq.n	8015390 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80152ce:	2314      	movs	r3, #20
 80152d0:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80152d2:	2114      	movs	r1, #20
 80152d4:	68f8      	ldr	r0, [r7, #12]
 80152d6:	f7f6 fb9b 	bl	800ba10 <pbuf_add_header>
 80152da:	4603      	mov	r3, r0
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d002      	beq.n	80152e6 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80152e0:	f06f 0301 	mvn.w	r3, #1
 80152e4:	e07c      	b.n	80153e0 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80152e6:	68fb      	ldr	r3, [r7, #12]
 80152e8:	685b      	ldr	r3, [r3, #4]
 80152ea:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80152ec:	68fb      	ldr	r3, [r7, #12]
 80152ee:	895b      	ldrh	r3, [r3, #10]
 80152f0:	2b13      	cmp	r3, #19
 80152f2:	d806      	bhi.n	8015302 <ip4_output_if_src+0x5e>
 80152f4:	4b3c      	ldr	r3, [pc, #240]	; (80153e8 <ip4_output_if_src+0x144>)
 80152f6:	f44f 7262 	mov.w	r2, #904	; 0x388
 80152fa:	493e      	ldr	r1, [pc, #248]	; (80153f4 <ip4_output_if_src+0x150>)
 80152fc:	483c      	ldr	r0, [pc, #240]	; (80153f0 <ip4_output_if_src+0x14c>)
 80152fe:	f001 fa9f 	bl	8016840 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8015302:	69fb      	ldr	r3, [r7, #28]
 8015304:	78fa      	ldrb	r2, [r7, #3]
 8015306:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015308:	69fb      	ldr	r3, [r7, #28]
 801530a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801530e:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	681a      	ldr	r2, [r3, #0]
 8015314:	69fb      	ldr	r3, [r7, #28]
 8015316:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015318:	8b7b      	ldrh	r3, [r7, #26]
 801531a:	089b      	lsrs	r3, r3, #2
 801531c:	b29b      	uxth	r3, r3
 801531e:	b2db      	uxtb	r3, r3
 8015320:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015324:	b2da      	uxtb	r2, r3
 8015326:	69fb      	ldr	r3, [r7, #28]
 8015328:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801532a:	69fb      	ldr	r3, [r7, #28]
 801532c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015330:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	891b      	ldrh	r3, [r3, #8]
 8015336:	4618      	mov	r0, r3
 8015338:	f7f5 f802 	bl	800a340 <lwip_htons>
 801533c:	4603      	mov	r3, r0
 801533e:	461a      	mov	r2, r3
 8015340:	69fb      	ldr	r3, [r7, #28]
 8015342:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015344:	69fb      	ldr	r3, [r7, #28]
 8015346:	2200      	movs	r2, #0
 8015348:	719a      	strb	r2, [r3, #6]
 801534a:	2200      	movs	r2, #0
 801534c:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801534e:	4b2a      	ldr	r3, [pc, #168]	; (80153f8 <ip4_output_if_src+0x154>)
 8015350:	881b      	ldrh	r3, [r3, #0]
 8015352:	4618      	mov	r0, r3
 8015354:	f7f4 fff4 	bl	800a340 <lwip_htons>
 8015358:	4603      	mov	r3, r0
 801535a:	461a      	mov	r2, r3
 801535c:	69fb      	ldr	r3, [r7, #28]
 801535e:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8015360:	4b25      	ldr	r3, [pc, #148]	; (80153f8 <ip4_output_if_src+0x154>)
 8015362:	881b      	ldrh	r3, [r3, #0]
 8015364:	3301      	adds	r3, #1
 8015366:	b29a      	uxth	r2, r3
 8015368:	4b23      	ldr	r3, [pc, #140]	; (80153f8 <ip4_output_if_src+0x154>)
 801536a:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801536c:	68bb      	ldr	r3, [r7, #8]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d104      	bne.n	801537c <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8015372:	4b22      	ldr	r3, [pc, #136]	; (80153fc <ip4_output_if_src+0x158>)
 8015374:	681a      	ldr	r2, [r3, #0]
 8015376:	69fb      	ldr	r3, [r7, #28]
 8015378:	60da      	str	r2, [r3, #12]
 801537a:	e003      	b.n	8015384 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801537c:	68bb      	ldr	r3, [r7, #8]
 801537e:	681a      	ldr	r2, [r3, #0]
 8015380:	69fb      	ldr	r3, [r7, #28]
 8015382:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015384:	69fb      	ldr	r3, [r7, #28]
 8015386:	2200      	movs	r2, #0
 8015388:	729a      	strb	r2, [r3, #10]
 801538a:	2200      	movs	r2, #0
 801538c:	72da      	strb	r2, [r3, #11]
 801538e:	e00f      	b.n	80153b0 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8015390:	68fb      	ldr	r3, [r7, #12]
 8015392:	895b      	ldrh	r3, [r3, #10]
 8015394:	2b13      	cmp	r3, #19
 8015396:	d802      	bhi.n	801539e <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015398:	f06f 0301 	mvn.w	r3, #1
 801539c:	e020      	b.n	80153e0 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	685b      	ldr	r3, [r3, #4]
 80153a2:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80153a4:	69fb      	ldr	r3, [r7, #28]
 80153a6:	691b      	ldr	r3, [r3, #16]
 80153a8:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80153aa:	f107 0314 	add.w	r3, r7, #20
 80153ae:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80153b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80153b4:	2b00      	cmp	r3, #0
 80153b6:	d00c      	beq.n	80153d2 <ip4_output_if_src+0x12e>
 80153b8:	68fb      	ldr	r3, [r7, #12]
 80153ba:	891a      	ldrh	r2, [r3, #8]
 80153bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80153c0:	429a      	cmp	r2, r3
 80153c2:	d906      	bls.n	80153d2 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80153c4:	687a      	ldr	r2, [r7, #4]
 80153c6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80153c8:	68f8      	ldr	r0, [r7, #12]
 80153ca:	f000 fd53 	bl	8015e74 <ip4_frag>
 80153ce:	4603      	mov	r3, r0
 80153d0:	e006      	b.n	80153e0 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80153d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80153d4:	695b      	ldr	r3, [r3, #20]
 80153d6:	687a      	ldr	r2, [r7, #4]
 80153d8:	68f9      	ldr	r1, [r7, #12]
 80153da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80153dc:	4798      	blx	r3
 80153de:	4603      	mov	r3, r0
}
 80153e0:	4618      	mov	r0, r3
 80153e2:	3720      	adds	r7, #32
 80153e4:	46bd      	mov	sp, r7
 80153e6:	bd80      	pop	{r7, pc}
 80153e8:	0801a20c 	.word	0x0801a20c
 80153ec:	0801a240 	.word	0x0801a240
 80153f0:	0801a24c 	.word	0x0801a24c
 80153f4:	0801a274 	.word	0x0801a274
 80153f8:	2000f38a 	.word	0x2000f38a
 80153fc:	0801a6c8 	.word	0x0801a6c8

08015400 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8015400:	b480      	push	{r7}
 8015402:	b085      	sub	sp, #20
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
 8015408:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015414:	d002      	beq.n	801541c <ip4_addr_isbroadcast_u32+0x1c>
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d101      	bne.n	8015420 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801541c:	2301      	movs	r3, #1
 801541e:	e02a      	b.n	8015476 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015420:	683b      	ldr	r3, [r7, #0]
 8015422:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8015426:	f003 0302 	and.w	r3, r3, #2
 801542a:	2b00      	cmp	r3, #0
 801542c:	d101      	bne.n	8015432 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801542e:	2300      	movs	r3, #0
 8015430:	e021      	b.n	8015476 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015432:	683b      	ldr	r3, [r7, #0]
 8015434:	3304      	adds	r3, #4
 8015436:	681b      	ldr	r3, [r3, #0]
 8015438:	687a      	ldr	r2, [r7, #4]
 801543a:	429a      	cmp	r2, r3
 801543c:	d101      	bne.n	8015442 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801543e:	2300      	movs	r3, #0
 8015440:	e019      	b.n	8015476 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015442:	68fa      	ldr	r2, [r7, #12]
 8015444:	683b      	ldr	r3, [r7, #0]
 8015446:	3304      	adds	r3, #4
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	405a      	eors	r2, r3
 801544c:	683b      	ldr	r3, [r7, #0]
 801544e:	3308      	adds	r3, #8
 8015450:	681b      	ldr	r3, [r3, #0]
 8015452:	4013      	ands	r3, r2
 8015454:	2b00      	cmp	r3, #0
 8015456:	d10d      	bne.n	8015474 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015458:	683b      	ldr	r3, [r7, #0]
 801545a:	3308      	adds	r3, #8
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	43da      	mvns	r2, r3
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015464:	683b      	ldr	r3, [r7, #0]
 8015466:	3308      	adds	r3, #8
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801546c:	429a      	cmp	r2, r3
 801546e:	d101      	bne.n	8015474 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015470:	2301      	movs	r3, #1
 8015472:	e000      	b.n	8015476 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015474:	2300      	movs	r3, #0
  }
}
 8015476:	4618      	mov	r0, r3
 8015478:	3714      	adds	r7, #20
 801547a:	46bd      	mov	sp, r7
 801547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015480:	4770      	bx	lr
	...

08015484 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b084      	sub	sp, #16
 8015488:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801548a:	2300      	movs	r3, #0
 801548c:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801548e:	4b12      	ldr	r3, [pc, #72]	; (80154d8 <ip_reass_tmr+0x54>)
 8015490:	681b      	ldr	r3, [r3, #0]
 8015492:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015494:	e018      	b.n	80154c8 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015496:	68fb      	ldr	r3, [r7, #12]
 8015498:	7fdb      	ldrb	r3, [r3, #31]
 801549a:	2b00      	cmp	r3, #0
 801549c:	d00b      	beq.n	80154b6 <ip_reass_tmr+0x32>
      r->timer--;
 801549e:	68fb      	ldr	r3, [r7, #12]
 80154a0:	7fdb      	ldrb	r3, [r3, #31]
 80154a2:	3b01      	subs	r3, #1
 80154a4:	b2da      	uxtb	r2, r3
 80154a6:	68fb      	ldr	r3, [r7, #12]
 80154a8:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80154aa:	68fb      	ldr	r3, [r7, #12]
 80154ac:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80154ae:	68fb      	ldr	r3, [r7, #12]
 80154b0:	681b      	ldr	r3, [r3, #0]
 80154b2:	60fb      	str	r3, [r7, #12]
 80154b4:	e008      	b.n	80154c8 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80154ba:	68fb      	ldr	r3, [r7, #12]
 80154bc:	681b      	ldr	r3, [r3, #0]
 80154be:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80154c0:	68b9      	ldr	r1, [r7, #8]
 80154c2:	6878      	ldr	r0, [r7, #4]
 80154c4:	f000 f80a 	bl	80154dc <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	2b00      	cmp	r3, #0
 80154cc:	d1e3      	bne.n	8015496 <ip_reass_tmr+0x12>
    }
  }
}
 80154ce:	bf00      	nop
 80154d0:	bf00      	nop
 80154d2:	3710      	adds	r7, #16
 80154d4:	46bd      	mov	sp, r7
 80154d6:	bd80      	pop	{r7, pc}
 80154d8:	2000f38c 	.word	0x2000f38c

080154dc <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80154dc:	b580      	push	{r7, lr}
 80154de:	b088      	sub	sp, #32
 80154e0:	af00      	add	r7, sp, #0
 80154e2:	6078      	str	r0, [r7, #4]
 80154e4:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80154e6:	2300      	movs	r3, #0
 80154e8:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80154ea:	683a      	ldr	r2, [r7, #0]
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	429a      	cmp	r2, r3
 80154f0:	d105      	bne.n	80154fe <ip_reass_free_complete_datagram+0x22>
 80154f2:	4b45      	ldr	r3, [pc, #276]	; (8015608 <ip_reass_free_complete_datagram+0x12c>)
 80154f4:	22ab      	movs	r2, #171	; 0xab
 80154f6:	4945      	ldr	r1, [pc, #276]	; (801560c <ip_reass_free_complete_datagram+0x130>)
 80154f8:	4845      	ldr	r0, [pc, #276]	; (8015610 <ip_reass_free_complete_datagram+0x134>)
 80154fa:	f001 f9a1 	bl	8016840 <iprintf>
  if (prev != NULL) {
 80154fe:	683b      	ldr	r3, [r7, #0]
 8015500:	2b00      	cmp	r3, #0
 8015502:	d00a      	beq.n	801551a <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015504:	683b      	ldr	r3, [r7, #0]
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	687a      	ldr	r2, [r7, #4]
 801550a:	429a      	cmp	r2, r3
 801550c:	d005      	beq.n	801551a <ip_reass_free_complete_datagram+0x3e>
 801550e:	4b3e      	ldr	r3, [pc, #248]	; (8015608 <ip_reass_free_complete_datagram+0x12c>)
 8015510:	22ad      	movs	r2, #173	; 0xad
 8015512:	4940      	ldr	r1, [pc, #256]	; (8015614 <ip_reass_free_complete_datagram+0x138>)
 8015514:	483e      	ldr	r0, [pc, #248]	; (8015610 <ip_reass_free_complete_datagram+0x134>)
 8015516:	f001 f993 	bl	8016840 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	685b      	ldr	r3, [r3, #4]
 801551e:	685b      	ldr	r3, [r3, #4]
 8015520:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015522:	697b      	ldr	r3, [r7, #20]
 8015524:	889b      	ldrh	r3, [r3, #4]
 8015526:	b29b      	uxth	r3, r3
 8015528:	2b00      	cmp	r3, #0
 801552a:	d12a      	bne.n	8015582 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	685b      	ldr	r3, [r3, #4]
 8015530:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015532:	697b      	ldr	r3, [r7, #20]
 8015534:	681a      	ldr	r2, [r3, #0]
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801553a:	69bb      	ldr	r3, [r7, #24]
 801553c:	6858      	ldr	r0, [r3, #4]
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	3308      	adds	r3, #8
 8015542:	2214      	movs	r2, #20
 8015544:	4619      	mov	r1, r3
 8015546:	f001 f8d0 	bl	80166ea <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801554a:	2101      	movs	r1, #1
 801554c:	69b8      	ldr	r0, [r7, #24]
 801554e:	f7ff fc29 	bl	8014da4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015552:	69b8      	ldr	r0, [r7, #24]
 8015554:	f7f6 fb80 	bl	800bc58 <pbuf_clen>
 8015558:	4603      	mov	r3, r0
 801555a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801555c:	8bfa      	ldrh	r2, [r7, #30]
 801555e:	8a7b      	ldrh	r3, [r7, #18]
 8015560:	4413      	add	r3, r2
 8015562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015566:	db05      	blt.n	8015574 <ip_reass_free_complete_datagram+0x98>
 8015568:	4b27      	ldr	r3, [pc, #156]	; (8015608 <ip_reass_free_complete_datagram+0x12c>)
 801556a:	22bc      	movs	r2, #188	; 0xbc
 801556c:	492a      	ldr	r1, [pc, #168]	; (8015618 <ip_reass_free_complete_datagram+0x13c>)
 801556e:	4828      	ldr	r0, [pc, #160]	; (8015610 <ip_reass_free_complete_datagram+0x134>)
 8015570:	f001 f966 	bl	8016840 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015574:	8bfa      	ldrh	r2, [r7, #30]
 8015576:	8a7b      	ldrh	r3, [r7, #18]
 8015578:	4413      	add	r3, r2
 801557a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801557c:	69b8      	ldr	r0, [r7, #24]
 801557e:	f7f6 fadd 	bl	800bb3c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	685b      	ldr	r3, [r3, #4]
 8015586:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015588:	e01f      	b.n	80155ca <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801558a:	69bb      	ldr	r3, [r7, #24]
 801558c:	685b      	ldr	r3, [r3, #4]
 801558e:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015590:	69bb      	ldr	r3, [r7, #24]
 8015592:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015594:	697b      	ldr	r3, [r7, #20]
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801559a:	68f8      	ldr	r0, [r7, #12]
 801559c:	f7f6 fb5c 	bl	800bc58 <pbuf_clen>
 80155a0:	4603      	mov	r3, r0
 80155a2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80155a4:	8bfa      	ldrh	r2, [r7, #30]
 80155a6:	8a7b      	ldrh	r3, [r7, #18]
 80155a8:	4413      	add	r3, r2
 80155aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80155ae:	db05      	blt.n	80155bc <ip_reass_free_complete_datagram+0xe0>
 80155b0:	4b15      	ldr	r3, [pc, #84]	; (8015608 <ip_reass_free_complete_datagram+0x12c>)
 80155b2:	22cc      	movs	r2, #204	; 0xcc
 80155b4:	4918      	ldr	r1, [pc, #96]	; (8015618 <ip_reass_free_complete_datagram+0x13c>)
 80155b6:	4816      	ldr	r0, [pc, #88]	; (8015610 <ip_reass_free_complete_datagram+0x134>)
 80155b8:	f001 f942 	bl	8016840 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80155bc:	8bfa      	ldrh	r2, [r7, #30]
 80155be:	8a7b      	ldrh	r3, [r7, #18]
 80155c0:	4413      	add	r3, r2
 80155c2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80155c4:	68f8      	ldr	r0, [r7, #12]
 80155c6:	f7f6 fab9 	bl	800bb3c <pbuf_free>
  while (p != NULL) {
 80155ca:	69bb      	ldr	r3, [r7, #24]
 80155cc:	2b00      	cmp	r3, #0
 80155ce:	d1dc      	bne.n	801558a <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80155d0:	6839      	ldr	r1, [r7, #0]
 80155d2:	6878      	ldr	r0, [r7, #4]
 80155d4:	f000 f8c2 	bl	801575c <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80155d8:	4b10      	ldr	r3, [pc, #64]	; (801561c <ip_reass_free_complete_datagram+0x140>)
 80155da:	881b      	ldrh	r3, [r3, #0]
 80155dc:	8bfa      	ldrh	r2, [r7, #30]
 80155de:	429a      	cmp	r2, r3
 80155e0:	d905      	bls.n	80155ee <ip_reass_free_complete_datagram+0x112>
 80155e2:	4b09      	ldr	r3, [pc, #36]	; (8015608 <ip_reass_free_complete_datagram+0x12c>)
 80155e4:	22d2      	movs	r2, #210	; 0xd2
 80155e6:	490e      	ldr	r1, [pc, #56]	; (8015620 <ip_reass_free_complete_datagram+0x144>)
 80155e8:	4809      	ldr	r0, [pc, #36]	; (8015610 <ip_reass_free_complete_datagram+0x134>)
 80155ea:	f001 f929 	bl	8016840 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80155ee:	4b0b      	ldr	r3, [pc, #44]	; (801561c <ip_reass_free_complete_datagram+0x140>)
 80155f0:	881a      	ldrh	r2, [r3, #0]
 80155f2:	8bfb      	ldrh	r3, [r7, #30]
 80155f4:	1ad3      	subs	r3, r2, r3
 80155f6:	b29a      	uxth	r2, r3
 80155f8:	4b08      	ldr	r3, [pc, #32]	; (801561c <ip_reass_free_complete_datagram+0x140>)
 80155fa:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80155fc:	8bfb      	ldrh	r3, [r7, #30]
}
 80155fe:	4618      	mov	r0, r3
 8015600:	3720      	adds	r7, #32
 8015602:	46bd      	mov	sp, r7
 8015604:	bd80      	pop	{r7, pc}
 8015606:	bf00      	nop
 8015608:	0801a2a4 	.word	0x0801a2a4
 801560c:	0801a2e0 	.word	0x0801a2e0
 8015610:	0801a2ec 	.word	0x0801a2ec
 8015614:	0801a314 	.word	0x0801a314
 8015618:	0801a328 	.word	0x0801a328
 801561c:	2000f390 	.word	0x2000f390
 8015620:	0801a348 	.word	0x0801a348

08015624 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015624:	b580      	push	{r7, lr}
 8015626:	b08a      	sub	sp, #40	; 0x28
 8015628:	af00      	add	r7, sp, #0
 801562a:	6078      	str	r0, [r7, #4]
 801562c:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801562e:	2300      	movs	r3, #0
 8015630:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015632:	2300      	movs	r3, #0
 8015634:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015636:	2300      	movs	r3, #0
 8015638:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801563a:	2300      	movs	r3, #0
 801563c:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801563e:	2300      	movs	r3, #0
 8015640:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015642:	4b28      	ldr	r3, [pc, #160]	; (80156e4 <ip_reass_remove_oldest_datagram+0xc0>)
 8015644:	681b      	ldr	r3, [r3, #0]
 8015646:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015648:	e030      	b.n	80156ac <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801564a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801564c:	695a      	ldr	r2, [r3, #20]
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	68db      	ldr	r3, [r3, #12]
 8015652:	429a      	cmp	r2, r3
 8015654:	d10c      	bne.n	8015670 <ip_reass_remove_oldest_datagram+0x4c>
 8015656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015658:	699a      	ldr	r2, [r3, #24]
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	691b      	ldr	r3, [r3, #16]
 801565e:	429a      	cmp	r2, r3
 8015660:	d106      	bne.n	8015670 <ip_reass_remove_oldest_datagram+0x4c>
 8015662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015664:	899a      	ldrh	r2, [r3, #12]
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	889b      	ldrh	r3, [r3, #4]
 801566a:	b29b      	uxth	r3, r3
 801566c:	429a      	cmp	r2, r3
 801566e:	d014      	beq.n	801569a <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015670:	693b      	ldr	r3, [r7, #16]
 8015672:	3301      	adds	r3, #1
 8015674:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015676:	6a3b      	ldr	r3, [r7, #32]
 8015678:	2b00      	cmp	r3, #0
 801567a:	d104      	bne.n	8015686 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801567e:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015680:	69fb      	ldr	r3, [r7, #28]
 8015682:	61bb      	str	r3, [r7, #24]
 8015684:	e009      	b.n	801569a <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015688:	7fda      	ldrb	r2, [r3, #31]
 801568a:	6a3b      	ldr	r3, [r7, #32]
 801568c:	7fdb      	ldrb	r3, [r3, #31]
 801568e:	429a      	cmp	r2, r3
 8015690:	d803      	bhi.n	801569a <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015694:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015696:	69fb      	ldr	r3, [r7, #28]
 8015698:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801569c:	681b      	ldr	r3, [r3, #0]
 801569e:	2b00      	cmp	r3, #0
 80156a0:	d001      	beq.n	80156a6 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80156a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a4:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80156a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156a8:	681b      	ldr	r3, [r3, #0]
 80156aa:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80156ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ae:	2b00      	cmp	r3, #0
 80156b0:	d1cb      	bne.n	801564a <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80156b2:	6a3b      	ldr	r3, [r7, #32]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d008      	beq.n	80156ca <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80156b8:	69b9      	ldr	r1, [r7, #24]
 80156ba:	6a38      	ldr	r0, [r7, #32]
 80156bc:	f7ff ff0e 	bl	80154dc <ip_reass_free_complete_datagram>
 80156c0:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80156c2:	697a      	ldr	r2, [r7, #20]
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	4413      	add	r3, r2
 80156c8:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80156ca:	697a      	ldr	r2, [r7, #20]
 80156cc:	683b      	ldr	r3, [r7, #0]
 80156ce:	429a      	cmp	r2, r3
 80156d0:	da02      	bge.n	80156d8 <ip_reass_remove_oldest_datagram+0xb4>
 80156d2:	693b      	ldr	r3, [r7, #16]
 80156d4:	2b01      	cmp	r3, #1
 80156d6:	dcac      	bgt.n	8015632 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80156d8:	697b      	ldr	r3, [r7, #20]
}
 80156da:	4618      	mov	r0, r3
 80156dc:	3728      	adds	r7, #40	; 0x28
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}
 80156e2:	bf00      	nop
 80156e4:	2000f38c 	.word	0x2000f38c

080156e8 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80156e8:	b580      	push	{r7, lr}
 80156ea:	b084      	sub	sp, #16
 80156ec:	af00      	add	r7, sp, #0
 80156ee:	6078      	str	r0, [r7, #4]
 80156f0:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80156f2:	2004      	movs	r0, #4
 80156f4:	f7f5 fafc 	bl	800acf0 <memp_malloc>
 80156f8:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d110      	bne.n	8015722 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015700:	6839      	ldr	r1, [r7, #0]
 8015702:	6878      	ldr	r0, [r7, #4]
 8015704:	f7ff ff8e 	bl	8015624 <ip_reass_remove_oldest_datagram>
 8015708:	4602      	mov	r2, r0
 801570a:	683b      	ldr	r3, [r7, #0]
 801570c:	4293      	cmp	r3, r2
 801570e:	dc03      	bgt.n	8015718 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015710:	2004      	movs	r0, #4
 8015712:	f7f5 faed 	bl	800acf0 <memp_malloc>
 8015716:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015718:	68fb      	ldr	r3, [r7, #12]
 801571a:	2b00      	cmp	r3, #0
 801571c:	d101      	bne.n	8015722 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801571e:	2300      	movs	r3, #0
 8015720:	e016      	b.n	8015750 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015722:	2220      	movs	r2, #32
 8015724:	2100      	movs	r1, #0
 8015726:	68f8      	ldr	r0, [r7, #12]
 8015728:	f000 ffed 	bl	8016706 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801572c:	68fb      	ldr	r3, [r7, #12]
 801572e:	220f      	movs	r2, #15
 8015730:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015732:	4b09      	ldr	r3, [pc, #36]	; (8015758 <ip_reass_enqueue_new_datagram+0x70>)
 8015734:	681a      	ldr	r2, [r3, #0]
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801573a:	4a07      	ldr	r2, [pc, #28]	; (8015758 <ip_reass_enqueue_new_datagram+0x70>)
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015740:	68fb      	ldr	r3, [r7, #12]
 8015742:	3308      	adds	r3, #8
 8015744:	2214      	movs	r2, #20
 8015746:	6879      	ldr	r1, [r7, #4]
 8015748:	4618      	mov	r0, r3
 801574a:	f000 ffce 	bl	80166ea <memcpy>
  return ipr;
 801574e:	68fb      	ldr	r3, [r7, #12]
}
 8015750:	4618      	mov	r0, r3
 8015752:	3710      	adds	r7, #16
 8015754:	46bd      	mov	sp, r7
 8015756:	bd80      	pop	{r7, pc}
 8015758:	2000f38c 	.word	0x2000f38c

0801575c <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801575c:	b580      	push	{r7, lr}
 801575e:	b082      	sub	sp, #8
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
 8015764:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015766:	4b10      	ldr	r3, [pc, #64]	; (80157a8 <ip_reass_dequeue_datagram+0x4c>)
 8015768:	681b      	ldr	r3, [r3, #0]
 801576a:	687a      	ldr	r2, [r7, #4]
 801576c:	429a      	cmp	r2, r3
 801576e:	d104      	bne.n	801577a <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	4a0c      	ldr	r2, [pc, #48]	; (80157a8 <ip_reass_dequeue_datagram+0x4c>)
 8015776:	6013      	str	r3, [r2, #0]
 8015778:	e00d      	b.n	8015796 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801577a:	683b      	ldr	r3, [r7, #0]
 801577c:	2b00      	cmp	r3, #0
 801577e:	d106      	bne.n	801578e <ip_reass_dequeue_datagram+0x32>
 8015780:	4b0a      	ldr	r3, [pc, #40]	; (80157ac <ip_reass_dequeue_datagram+0x50>)
 8015782:	f240 1245 	movw	r2, #325	; 0x145
 8015786:	490a      	ldr	r1, [pc, #40]	; (80157b0 <ip_reass_dequeue_datagram+0x54>)
 8015788:	480a      	ldr	r0, [pc, #40]	; (80157b4 <ip_reass_dequeue_datagram+0x58>)
 801578a:	f001 f859 	bl	8016840 <iprintf>
    prev->next = ipr->next;
 801578e:	687b      	ldr	r3, [r7, #4]
 8015790:	681a      	ldr	r2, [r3, #0]
 8015792:	683b      	ldr	r3, [r7, #0]
 8015794:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015796:	6879      	ldr	r1, [r7, #4]
 8015798:	2004      	movs	r0, #4
 801579a:	f7f5 fb1f 	bl	800addc <memp_free>
}
 801579e:	bf00      	nop
 80157a0:	3708      	adds	r7, #8
 80157a2:	46bd      	mov	sp, r7
 80157a4:	bd80      	pop	{r7, pc}
 80157a6:	bf00      	nop
 80157a8:	2000f38c 	.word	0x2000f38c
 80157ac:	0801a2a4 	.word	0x0801a2a4
 80157b0:	0801a36c 	.word	0x0801a36c
 80157b4:	0801a2ec 	.word	0x0801a2ec

080157b8 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80157b8:	b580      	push	{r7, lr}
 80157ba:	b08c      	sub	sp, #48	; 0x30
 80157bc:	af00      	add	r7, sp, #0
 80157be:	60f8      	str	r0, [r7, #12]
 80157c0:	60b9      	str	r1, [r7, #8]
 80157c2:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80157c4:	2300      	movs	r3, #0
 80157c6:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80157c8:	2301      	movs	r3, #1
 80157ca:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80157cc:	68bb      	ldr	r3, [r7, #8]
 80157ce:	685b      	ldr	r3, [r3, #4]
 80157d0:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80157d2:	69fb      	ldr	r3, [r7, #28]
 80157d4:	885b      	ldrh	r3, [r3, #2]
 80157d6:	b29b      	uxth	r3, r3
 80157d8:	4618      	mov	r0, r3
 80157da:	f7f4 fdb1 	bl	800a340 <lwip_htons>
 80157de:	4603      	mov	r3, r0
 80157e0:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80157e2:	69fb      	ldr	r3, [r7, #28]
 80157e4:	781b      	ldrb	r3, [r3, #0]
 80157e6:	f003 030f 	and.w	r3, r3, #15
 80157ea:	b2db      	uxtb	r3, r3
 80157ec:	009b      	lsls	r3, r3, #2
 80157ee:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80157f0:	7e7b      	ldrb	r3, [r7, #25]
 80157f2:	b29b      	uxth	r3, r3
 80157f4:	8b7a      	ldrh	r2, [r7, #26]
 80157f6:	429a      	cmp	r2, r3
 80157f8:	d202      	bcs.n	8015800 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80157fa:	f04f 33ff 	mov.w	r3, #4294967295
 80157fe:	e135      	b.n	8015a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015800:	7e7b      	ldrb	r3, [r7, #25]
 8015802:	b29b      	uxth	r3, r3
 8015804:	8b7a      	ldrh	r2, [r7, #26]
 8015806:	1ad3      	subs	r3, r2, r3
 8015808:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801580a:	69fb      	ldr	r3, [r7, #28]
 801580c:	88db      	ldrh	r3, [r3, #6]
 801580e:	b29b      	uxth	r3, r3
 8015810:	4618      	mov	r0, r3
 8015812:	f7f4 fd95 	bl	800a340 <lwip_htons>
 8015816:	4603      	mov	r3, r0
 8015818:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801581c:	b29b      	uxth	r3, r3
 801581e:	00db      	lsls	r3, r3, #3
 8015820:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015822:	68bb      	ldr	r3, [r7, #8]
 8015824:	685b      	ldr	r3, [r3, #4]
 8015826:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801582a:	2200      	movs	r2, #0
 801582c:	701a      	strb	r2, [r3, #0]
 801582e:	2200      	movs	r2, #0
 8015830:	705a      	strb	r2, [r3, #1]
 8015832:	2200      	movs	r2, #0
 8015834:	709a      	strb	r2, [r3, #2]
 8015836:	2200      	movs	r2, #0
 8015838:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801583a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801583c:	8afa      	ldrh	r2, [r7, #22]
 801583e:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015840:	8afa      	ldrh	r2, [r7, #22]
 8015842:	8b7b      	ldrh	r3, [r7, #26]
 8015844:	4413      	add	r3, r2
 8015846:	b29a      	uxth	r2, r3
 8015848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801584a:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801584c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801584e:	88db      	ldrh	r3, [r3, #6]
 8015850:	b29b      	uxth	r3, r3
 8015852:	8afa      	ldrh	r2, [r7, #22]
 8015854:	429a      	cmp	r2, r3
 8015856:	d902      	bls.n	801585e <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015858:	f04f 33ff 	mov.w	r3, #4294967295
 801585c:	e106      	b.n	8015a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801585e:	68fb      	ldr	r3, [r7, #12]
 8015860:	685b      	ldr	r3, [r3, #4]
 8015862:	627b      	str	r3, [r7, #36]	; 0x24
 8015864:	e068      	b.n	8015938 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015868:	685b      	ldr	r3, [r3, #4]
 801586a:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801586c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801586e:	889b      	ldrh	r3, [r3, #4]
 8015870:	b29a      	uxth	r2, r3
 8015872:	693b      	ldr	r3, [r7, #16]
 8015874:	889b      	ldrh	r3, [r3, #4]
 8015876:	b29b      	uxth	r3, r3
 8015878:	429a      	cmp	r2, r3
 801587a:	d235      	bcs.n	80158e8 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801587c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801587e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015880:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015884:	2b00      	cmp	r3, #0
 8015886:	d020      	beq.n	80158ca <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801588a:	889b      	ldrh	r3, [r3, #4]
 801588c:	b29a      	uxth	r2, r3
 801588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015890:	88db      	ldrh	r3, [r3, #6]
 8015892:	b29b      	uxth	r3, r3
 8015894:	429a      	cmp	r2, r3
 8015896:	d307      	bcc.n	80158a8 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801589a:	88db      	ldrh	r3, [r3, #6]
 801589c:	b29a      	uxth	r2, r3
 801589e:	693b      	ldr	r3, [r7, #16]
 80158a0:	889b      	ldrh	r3, [r3, #4]
 80158a2:	b29b      	uxth	r3, r3
 80158a4:	429a      	cmp	r2, r3
 80158a6:	d902      	bls.n	80158ae <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80158a8:	f04f 33ff 	mov.w	r3, #4294967295
 80158ac:	e0de      	b.n	8015a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80158ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158b0:	68ba      	ldr	r2, [r7, #8]
 80158b2:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80158b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80158b6:	88db      	ldrh	r3, [r3, #6]
 80158b8:	b29a      	uxth	r2, r3
 80158ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158bc:	889b      	ldrh	r3, [r3, #4]
 80158be:	b29b      	uxth	r3, r3
 80158c0:	429a      	cmp	r2, r3
 80158c2:	d03d      	beq.n	8015940 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80158c4:	2300      	movs	r3, #0
 80158c6:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80158c8:	e03a      	b.n	8015940 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80158ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158cc:	88db      	ldrh	r3, [r3, #6]
 80158ce:	b29a      	uxth	r2, r3
 80158d0:	693b      	ldr	r3, [r7, #16]
 80158d2:	889b      	ldrh	r3, [r3, #4]
 80158d4:	b29b      	uxth	r3, r3
 80158d6:	429a      	cmp	r2, r3
 80158d8:	d902      	bls.n	80158e0 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80158da:	f04f 33ff 	mov.w	r3, #4294967295
 80158de:	e0c5      	b.n	8015a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80158e0:	68fb      	ldr	r3, [r7, #12]
 80158e2:	68ba      	ldr	r2, [r7, #8]
 80158e4:	605a      	str	r2, [r3, #4]
      break;
 80158e6:	e02b      	b.n	8015940 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80158e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80158ea:	889b      	ldrh	r3, [r3, #4]
 80158ec:	b29a      	uxth	r2, r3
 80158ee:	693b      	ldr	r3, [r7, #16]
 80158f0:	889b      	ldrh	r3, [r3, #4]
 80158f2:	b29b      	uxth	r3, r3
 80158f4:	429a      	cmp	r2, r3
 80158f6:	d102      	bne.n	80158fe <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80158f8:	f04f 33ff 	mov.w	r3, #4294967295
 80158fc:	e0b6      	b.n	8015a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80158fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015900:	889b      	ldrh	r3, [r3, #4]
 8015902:	b29a      	uxth	r2, r3
 8015904:	693b      	ldr	r3, [r7, #16]
 8015906:	88db      	ldrh	r3, [r3, #6]
 8015908:	b29b      	uxth	r3, r3
 801590a:	429a      	cmp	r2, r3
 801590c:	d202      	bcs.n	8015914 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801590e:	f04f 33ff 	mov.w	r3, #4294967295
 8015912:	e0ab      	b.n	8015a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015916:	2b00      	cmp	r3, #0
 8015918:	d009      	beq.n	801592e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801591a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801591c:	88db      	ldrh	r3, [r3, #6]
 801591e:	b29a      	uxth	r2, r3
 8015920:	693b      	ldr	r3, [r7, #16]
 8015922:	889b      	ldrh	r3, [r3, #4]
 8015924:	b29b      	uxth	r3, r3
 8015926:	429a      	cmp	r2, r3
 8015928:	d001      	beq.n	801592e <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801592a:	2300      	movs	r3, #0
 801592c:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801592e:	693b      	ldr	r3, [r7, #16]
 8015930:	681b      	ldr	r3, [r3, #0]
 8015932:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015934:	693b      	ldr	r3, [r7, #16]
 8015936:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801593a:	2b00      	cmp	r3, #0
 801593c:	d193      	bne.n	8015866 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801593e:	e000      	b.n	8015942 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015940:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015944:	2b00      	cmp	r3, #0
 8015946:	d12d      	bne.n	80159a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801594a:	2b00      	cmp	r3, #0
 801594c:	d01c      	beq.n	8015988 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015950:	88db      	ldrh	r3, [r3, #6]
 8015952:	b29a      	uxth	r2, r3
 8015954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015956:	889b      	ldrh	r3, [r3, #4]
 8015958:	b29b      	uxth	r3, r3
 801595a:	429a      	cmp	r2, r3
 801595c:	d906      	bls.n	801596c <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801595e:	4b45      	ldr	r3, [pc, #276]	; (8015a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015960:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015964:	4944      	ldr	r1, [pc, #272]	; (8015a78 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015966:	4845      	ldr	r0, [pc, #276]	; (8015a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015968:	f000 ff6a 	bl	8016840 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801596c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801596e:	68ba      	ldr	r2, [r7, #8]
 8015970:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015974:	88db      	ldrh	r3, [r3, #6]
 8015976:	b29a      	uxth	r2, r3
 8015978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801597a:	889b      	ldrh	r3, [r3, #4]
 801597c:	b29b      	uxth	r3, r3
 801597e:	429a      	cmp	r2, r3
 8015980:	d010      	beq.n	80159a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015982:	2300      	movs	r3, #0
 8015984:	623b      	str	r3, [r7, #32]
 8015986:	e00d      	b.n	80159a4 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	685b      	ldr	r3, [r3, #4]
 801598c:	2b00      	cmp	r3, #0
 801598e:	d006      	beq.n	801599e <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015990:	4b38      	ldr	r3, [pc, #224]	; (8015a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015992:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015996:	493a      	ldr	r1, [pc, #232]	; (8015a80 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015998:	4838      	ldr	r0, [pc, #224]	; (8015a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801599a:	f000 ff51 	bl	8016840 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801599e:	68fb      	ldr	r3, [r7, #12]
 80159a0:	68ba      	ldr	r2, [r7, #8]
 80159a2:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80159a4:	687b      	ldr	r3, [r7, #4]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d105      	bne.n	80159b6 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	7f9b      	ldrb	r3, [r3, #30]
 80159ae:	f003 0301 	and.w	r3, r3, #1
 80159b2:	2b00      	cmp	r3, #0
 80159b4:	d059      	beq.n	8015a6a <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80159b6:	6a3b      	ldr	r3, [r7, #32]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d04f      	beq.n	8015a5c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	685b      	ldr	r3, [r3, #4]
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	d006      	beq.n	80159d2 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80159c4:	68fb      	ldr	r3, [r7, #12]
 80159c6:	685b      	ldr	r3, [r3, #4]
 80159c8:	685b      	ldr	r3, [r3, #4]
 80159ca:	889b      	ldrh	r3, [r3, #4]
 80159cc:	b29b      	uxth	r3, r3
 80159ce:	2b00      	cmp	r3, #0
 80159d0:	d002      	beq.n	80159d8 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80159d2:	2300      	movs	r3, #0
 80159d4:	623b      	str	r3, [r7, #32]
 80159d6:	e041      	b.n	8015a5c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80159d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159da:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80159dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159de:	681b      	ldr	r3, [r3, #0]
 80159e0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80159e2:	e012      	b.n	8015a0a <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80159e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80159e6:	685b      	ldr	r3, [r3, #4]
 80159e8:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80159ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80159ec:	88db      	ldrh	r3, [r3, #6]
 80159ee:	b29a      	uxth	r2, r3
 80159f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159f2:	889b      	ldrh	r3, [r3, #4]
 80159f4:	b29b      	uxth	r3, r3
 80159f6:	429a      	cmp	r2, r3
 80159f8:	d002      	beq.n	8015a00 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80159fa:	2300      	movs	r3, #0
 80159fc:	623b      	str	r3, [r7, #32]
            break;
 80159fe:	e007      	b.n	8015a10 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a02:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8015a04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a06:	681b      	ldr	r3, [r3, #0]
 8015a08:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a0c:	2b00      	cmp	r3, #0
 8015a0e:	d1e9      	bne.n	80159e4 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8015a10:	6a3b      	ldr	r3, [r7, #32]
 8015a12:	2b00      	cmp	r3, #0
 8015a14:	d022      	beq.n	8015a5c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	685b      	ldr	r3, [r3, #4]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d106      	bne.n	8015a2c <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8015a1e:	4b15      	ldr	r3, [pc, #84]	; (8015a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a20:	f240 12df 	movw	r2, #479	; 0x1df
 8015a24:	4917      	ldr	r1, [pc, #92]	; (8015a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015a26:	4815      	ldr	r0, [pc, #84]	; (8015a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a28:	f000 ff0a 	bl	8016840 <iprintf>
          LWIP_ASSERT("sanity check",
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	685b      	ldr	r3, [r3, #4]
 8015a30:	685b      	ldr	r3, [r3, #4]
 8015a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015a34:	429a      	cmp	r2, r3
 8015a36:	d106      	bne.n	8015a46 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015a38:	4b0e      	ldr	r3, [pc, #56]	; (8015a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a3a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015a3e:	4911      	ldr	r1, [pc, #68]	; (8015a84 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015a40:	480e      	ldr	r0, [pc, #56]	; (8015a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a42:	f000 fefd 	bl	8016840 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8015a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015a48:	681b      	ldr	r3, [r3, #0]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d006      	beq.n	8015a5c <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015a4e:	4b09      	ldr	r3, [pc, #36]	; (8015a74 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015a50:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8015a54:	490c      	ldr	r1, [pc, #48]	; (8015a88 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8015a56:	4809      	ldr	r0, [pc, #36]	; (8015a7c <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015a58:	f000 fef2 	bl	8016840 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015a5c:	6a3b      	ldr	r3, [r7, #32]
 8015a5e:	2b00      	cmp	r3, #0
 8015a60:	bf14      	ite	ne
 8015a62:	2301      	movne	r3, #1
 8015a64:	2300      	moveq	r3, #0
 8015a66:	b2db      	uxtb	r3, r3
 8015a68:	e000      	b.n	8015a6c <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015a6a:	2300      	movs	r3, #0
}
 8015a6c:	4618      	mov	r0, r3
 8015a6e:	3730      	adds	r7, #48	; 0x30
 8015a70:	46bd      	mov	sp, r7
 8015a72:	bd80      	pop	{r7, pc}
 8015a74:	0801a2a4 	.word	0x0801a2a4
 8015a78:	0801a388 	.word	0x0801a388
 8015a7c:	0801a2ec 	.word	0x0801a2ec
 8015a80:	0801a3a8 	.word	0x0801a3a8
 8015a84:	0801a3e0 	.word	0x0801a3e0
 8015a88:	0801a3f0 	.word	0x0801a3f0

08015a8c <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	b08e      	sub	sp, #56	; 0x38
 8015a90:	af00      	add	r7, sp, #0
 8015a92:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	685b      	ldr	r3, [r3, #4]
 8015a98:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015a9c:	781b      	ldrb	r3, [r3, #0]
 8015a9e:	f003 030f 	and.w	r3, r3, #15
 8015aa2:	b2db      	uxtb	r3, r3
 8015aa4:	009b      	lsls	r3, r3, #2
 8015aa6:	b2db      	uxtb	r3, r3
 8015aa8:	2b14      	cmp	r3, #20
 8015aaa:	f040 8171 	bne.w	8015d90 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ab0:	88db      	ldrh	r3, [r3, #6]
 8015ab2:	b29b      	uxth	r3, r3
 8015ab4:	4618      	mov	r0, r3
 8015ab6:	f7f4 fc43 	bl	800a340 <lwip_htons>
 8015aba:	4603      	mov	r3, r0
 8015abc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ac0:	b29b      	uxth	r3, r3
 8015ac2:	00db      	lsls	r3, r3, #3
 8015ac4:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ac8:	885b      	ldrh	r3, [r3, #2]
 8015aca:	b29b      	uxth	r3, r3
 8015acc:	4618      	mov	r0, r3
 8015ace:	f7f4 fc37 	bl	800a340 <lwip_htons>
 8015ad2:	4603      	mov	r3, r0
 8015ad4:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8015ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015ad8:	781b      	ldrb	r3, [r3, #0]
 8015ada:	f003 030f 	and.w	r3, r3, #15
 8015ade:	b2db      	uxtb	r3, r3
 8015ae0:	009b      	lsls	r3, r3, #2
 8015ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8015ae6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015aea:	b29b      	uxth	r3, r3
 8015aec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015aee:	429a      	cmp	r2, r3
 8015af0:	f0c0 8150 	bcc.w	8015d94 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8015af4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8015af8:	b29b      	uxth	r3, r3
 8015afa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8015afc:	1ad3      	subs	r3, r2, r3
 8015afe:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8015b00:	6878      	ldr	r0, [r7, #4]
 8015b02:	f7f6 f8a9 	bl	800bc58 <pbuf_clen>
 8015b06:	4603      	mov	r3, r0
 8015b08:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8015b0a:	4b8c      	ldr	r3, [pc, #560]	; (8015d3c <ip4_reass+0x2b0>)
 8015b0c:	881b      	ldrh	r3, [r3, #0]
 8015b0e:	461a      	mov	r2, r3
 8015b10:	8c3b      	ldrh	r3, [r7, #32]
 8015b12:	4413      	add	r3, r2
 8015b14:	2b0a      	cmp	r3, #10
 8015b16:	dd10      	ble.n	8015b3a <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015b18:	8c3b      	ldrh	r3, [r7, #32]
 8015b1a:	4619      	mov	r1, r3
 8015b1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b1e:	f7ff fd81 	bl	8015624 <ip_reass_remove_oldest_datagram>
 8015b22:	4603      	mov	r3, r0
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	f000 8137 	beq.w	8015d98 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8015b2a:	4b84      	ldr	r3, [pc, #528]	; (8015d3c <ip4_reass+0x2b0>)
 8015b2c:	881b      	ldrh	r3, [r3, #0]
 8015b2e:	461a      	mov	r2, r3
 8015b30:	8c3b      	ldrh	r3, [r7, #32]
 8015b32:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8015b34:	2b0a      	cmp	r3, #10
 8015b36:	f300 812f 	bgt.w	8015d98 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015b3a:	4b81      	ldr	r3, [pc, #516]	; (8015d40 <ip4_reass+0x2b4>)
 8015b3c:	681b      	ldr	r3, [r3, #0]
 8015b3e:	633b      	str	r3, [r7, #48]	; 0x30
 8015b40:	e015      	b.n	8015b6e <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8015b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b44:	695a      	ldr	r2, [r3, #20]
 8015b46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b48:	68db      	ldr	r3, [r3, #12]
 8015b4a:	429a      	cmp	r2, r3
 8015b4c:	d10c      	bne.n	8015b68 <ip4_reass+0xdc>
 8015b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b50:	699a      	ldr	r2, [r3, #24]
 8015b52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b54:	691b      	ldr	r3, [r3, #16]
 8015b56:	429a      	cmp	r2, r3
 8015b58:	d106      	bne.n	8015b68 <ip4_reass+0xdc>
 8015b5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b5c:	899a      	ldrh	r2, [r3, #12]
 8015b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b60:	889b      	ldrh	r3, [r3, #4]
 8015b62:	b29b      	uxth	r3, r3
 8015b64:	429a      	cmp	r2, r3
 8015b66:	d006      	beq.n	8015b76 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015b68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	633b      	str	r3, [r7, #48]	; 0x30
 8015b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b70:	2b00      	cmp	r3, #0
 8015b72:	d1e6      	bne.n	8015b42 <ip4_reass+0xb6>
 8015b74:	e000      	b.n	8015b78 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8015b76:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b7a:	2b00      	cmp	r3, #0
 8015b7c:	d109      	bne.n	8015b92 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015b7e:	8c3b      	ldrh	r3, [r7, #32]
 8015b80:	4619      	mov	r1, r3
 8015b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015b84:	f7ff fdb0 	bl	80156e8 <ip_reass_enqueue_new_datagram>
 8015b88:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015b8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d11c      	bne.n	8015bca <ip4_reass+0x13e>
      goto nullreturn;
 8015b90:	e105      	b.n	8015d9e <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015b94:	88db      	ldrh	r3, [r3, #6]
 8015b96:	b29b      	uxth	r3, r3
 8015b98:	4618      	mov	r0, r3
 8015b9a:	f7f4 fbd1 	bl	800a340 <lwip_htons>
 8015b9e:	4603      	mov	r3, r0
 8015ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d110      	bne.n	8015bca <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015baa:	89db      	ldrh	r3, [r3, #14]
 8015bac:	4618      	mov	r0, r3
 8015bae:	f7f4 fbc7 	bl	800a340 <lwip_htons>
 8015bb2:	4603      	mov	r3, r0
 8015bb4:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d006      	beq.n	8015bca <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015bbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015bbe:	3308      	adds	r3, #8
 8015bc0:	2214      	movs	r2, #20
 8015bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8015bc4:	4618      	mov	r0, r3
 8015bc6:	f000 fd90 	bl	80166ea <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015bcc:	88db      	ldrh	r3, [r3, #6]
 8015bce:	b29b      	uxth	r3, r3
 8015bd0:	f003 0320 	and.w	r3, r3, #32
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	bf0c      	ite	eq
 8015bd8:	2301      	moveq	r3, #1
 8015bda:	2300      	movne	r3, #0
 8015bdc:	b2db      	uxtb	r3, r3
 8015bde:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8015be0:	69fb      	ldr	r3, [r7, #28]
 8015be2:	2b00      	cmp	r3, #0
 8015be4:	d00e      	beq.n	8015c04 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8015be6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015be8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015bea:	4413      	add	r3, r2
 8015bec:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8015bee:	8b7a      	ldrh	r2, [r7, #26]
 8015bf0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015bf2:	429a      	cmp	r2, r3
 8015bf4:	f0c0 80a0 	bcc.w	8015d38 <ip4_reass+0x2ac>
 8015bf8:	8b7b      	ldrh	r3, [r7, #26]
 8015bfa:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8015bfe:	4293      	cmp	r3, r2
 8015c00:	f200 809a 	bhi.w	8015d38 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8015c04:	69fa      	ldr	r2, [r7, #28]
 8015c06:	6879      	ldr	r1, [r7, #4]
 8015c08:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015c0a:	f7ff fdd5 	bl	80157b8 <ip_reass_chain_frag_into_datagram_and_validate>
 8015c0e:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8015c10:	697b      	ldr	r3, [r7, #20]
 8015c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015c16:	f000 809b 	beq.w	8015d50 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8015c1a:	4b48      	ldr	r3, [pc, #288]	; (8015d3c <ip4_reass+0x2b0>)
 8015c1c:	881a      	ldrh	r2, [r3, #0]
 8015c1e:	8c3b      	ldrh	r3, [r7, #32]
 8015c20:	4413      	add	r3, r2
 8015c22:	b29a      	uxth	r2, r3
 8015c24:	4b45      	ldr	r3, [pc, #276]	; (8015d3c <ip4_reass+0x2b0>)
 8015c26:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8015c28:	69fb      	ldr	r3, [r7, #28]
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d00d      	beq.n	8015c4a <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8015c2e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8015c30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015c32:	4413      	add	r3, r2
 8015c34:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8015c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c38:	8a7a      	ldrh	r2, [r7, #18]
 8015c3a:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c3e:	7f9b      	ldrb	r3, [r3, #30]
 8015c40:	f043 0301 	orr.w	r3, r3, #1
 8015c44:	b2da      	uxtb	r2, r3
 8015c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c48:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015c4a:	697b      	ldr	r3, [r7, #20]
 8015c4c:	2b01      	cmp	r3, #1
 8015c4e:	d171      	bne.n	8015d34 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c52:	8b9b      	ldrh	r3, [r3, #28]
 8015c54:	3314      	adds	r3, #20
 8015c56:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c5a:	685b      	ldr	r3, [r3, #4]
 8015c5c:	685b      	ldr	r3, [r3, #4]
 8015c5e:	681b      	ldr	r3, [r3, #0]
 8015c60:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8015c62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c64:	685b      	ldr	r3, [r3, #4]
 8015c66:	685b      	ldr	r3, [r3, #4]
 8015c68:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c6c:	3308      	adds	r3, #8
 8015c6e:	2214      	movs	r2, #20
 8015c70:	4619      	mov	r1, r3
 8015c72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015c74:	f000 fd39 	bl	80166ea <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015c78:	8a3b      	ldrh	r3, [r7, #16]
 8015c7a:	4618      	mov	r0, r3
 8015c7c:	f7f4 fb60 	bl	800a340 <lwip_htons>
 8015c80:	4603      	mov	r3, r0
 8015c82:	461a      	mov	r2, r3
 8015c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c86:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015c88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c8a:	2200      	movs	r2, #0
 8015c8c:	719a      	strb	r2, [r3, #6]
 8015c8e:	2200      	movs	r2, #0
 8015c90:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8015c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015c94:	2200      	movs	r2, #0
 8015c96:	729a      	strb	r2, [r3, #10]
 8015c98:	2200      	movs	r2, #0
 8015c9a:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015c9e:	685b      	ldr	r3, [r3, #4]
 8015ca0:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8015ca2:	e00d      	b.n	8015cc0 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8015ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ca6:	685b      	ldr	r3, [r3, #4]
 8015ca8:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015caa:	2114      	movs	r1, #20
 8015cac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015cae:	f7f5 febf 	bl	800ba30 <pbuf_remove_header>
      pbuf_cat(p, r);
 8015cb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015cb4:	6878      	ldr	r0, [r7, #4]
 8015cb6:	f7f6 f80f 	bl	800bcd8 <pbuf_cat>
      r = iprh->next_pbuf;
 8015cba:	68fb      	ldr	r3, [r7, #12]
 8015cbc:	681b      	ldr	r3, [r3, #0]
 8015cbe:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015cc2:	2b00      	cmp	r3, #0
 8015cc4:	d1ee      	bne.n	8015ca4 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8015cc6:	4b1e      	ldr	r3, [pc, #120]	; (8015d40 <ip4_reass+0x2b4>)
 8015cc8:	681b      	ldr	r3, [r3, #0]
 8015cca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ccc:	429a      	cmp	r2, r3
 8015cce:	d102      	bne.n	8015cd6 <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015cd0:	2300      	movs	r3, #0
 8015cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cd4:	e010      	b.n	8015cf8 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015cd6:	4b1a      	ldr	r3, [pc, #104]	; (8015d40 <ip4_reass+0x2b4>)
 8015cd8:	681b      	ldr	r3, [r3, #0]
 8015cda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cdc:	e007      	b.n	8015cee <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8015cde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ce0:	681b      	ldr	r3, [r3, #0]
 8015ce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015ce4:	429a      	cmp	r2, r3
 8015ce6:	d006      	beq.n	8015cf6 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8015ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	62fb      	str	r3, [r7, #44]	; 0x2c
 8015cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015cf0:	2b00      	cmp	r3, #0
 8015cf2:	d1f4      	bne.n	8015cde <ip4_reass+0x252>
 8015cf4:	e000      	b.n	8015cf8 <ip4_reass+0x26c>
          break;
 8015cf6:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8015cf8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8015cfa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015cfc:	f7ff fd2e 	bl	801575c <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8015d00:	6878      	ldr	r0, [r7, #4]
 8015d02:	f7f5 ffa9 	bl	800bc58 <pbuf_clen>
 8015d06:	4603      	mov	r3, r0
 8015d08:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8015d0a:	4b0c      	ldr	r3, [pc, #48]	; (8015d3c <ip4_reass+0x2b0>)
 8015d0c:	881b      	ldrh	r3, [r3, #0]
 8015d0e:	8c3a      	ldrh	r2, [r7, #32]
 8015d10:	429a      	cmp	r2, r3
 8015d12:	d906      	bls.n	8015d22 <ip4_reass+0x296>
 8015d14:	4b0b      	ldr	r3, [pc, #44]	; (8015d44 <ip4_reass+0x2b8>)
 8015d16:	f240 229b 	movw	r2, #667	; 0x29b
 8015d1a:	490b      	ldr	r1, [pc, #44]	; (8015d48 <ip4_reass+0x2bc>)
 8015d1c:	480b      	ldr	r0, [pc, #44]	; (8015d4c <ip4_reass+0x2c0>)
 8015d1e:	f000 fd8f 	bl	8016840 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8015d22:	4b06      	ldr	r3, [pc, #24]	; (8015d3c <ip4_reass+0x2b0>)
 8015d24:	881a      	ldrh	r2, [r3, #0]
 8015d26:	8c3b      	ldrh	r3, [r7, #32]
 8015d28:	1ad3      	subs	r3, r2, r3
 8015d2a:	b29a      	uxth	r2, r3
 8015d2c:	4b03      	ldr	r3, [pc, #12]	; (8015d3c <ip4_reass+0x2b0>)
 8015d2e:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	e038      	b.n	8015da6 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8015d34:	2300      	movs	r3, #0
 8015d36:	e036      	b.n	8015da6 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015d38:	bf00      	nop
 8015d3a:	e00a      	b.n	8015d52 <ip4_reass+0x2c6>
 8015d3c:	2000f390 	.word	0x2000f390
 8015d40:	2000f38c 	.word	0x2000f38c
 8015d44:	0801a2a4 	.word	0x0801a2a4
 8015d48:	0801a414 	.word	0x0801a414
 8015d4c:	0801a2ec 	.word	0x0801a2ec
    goto nullreturn_ipr;
 8015d50:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d106      	bne.n	8015d66 <ip4_reass+0x2da>
 8015d58:	4b15      	ldr	r3, [pc, #84]	; (8015db0 <ip4_reass+0x324>)
 8015d5a:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015d5e:	4915      	ldr	r1, [pc, #84]	; (8015db4 <ip4_reass+0x328>)
 8015d60:	4815      	ldr	r0, [pc, #84]	; (8015db8 <ip4_reass+0x32c>)
 8015d62:	f000 fd6d 	bl	8016840 <iprintf>
  if (ipr->p == NULL) {
 8015d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d68:	685b      	ldr	r3, [r3, #4]
 8015d6a:	2b00      	cmp	r3, #0
 8015d6c:	d116      	bne.n	8015d9c <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015d6e:	4b13      	ldr	r3, [pc, #76]	; (8015dbc <ip4_reass+0x330>)
 8015d70:	681b      	ldr	r3, [r3, #0]
 8015d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015d74:	429a      	cmp	r2, r3
 8015d76:	d006      	beq.n	8015d86 <ip4_reass+0x2fa>
 8015d78:	4b0d      	ldr	r3, [pc, #52]	; (8015db0 <ip4_reass+0x324>)
 8015d7a:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015d7e:	4910      	ldr	r1, [pc, #64]	; (8015dc0 <ip4_reass+0x334>)
 8015d80:	480d      	ldr	r0, [pc, #52]	; (8015db8 <ip4_reass+0x32c>)
 8015d82:	f000 fd5d 	bl	8016840 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015d86:	2100      	movs	r1, #0
 8015d88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015d8a:	f7ff fce7 	bl	801575c <ip_reass_dequeue_datagram>
 8015d8e:	e006      	b.n	8015d9e <ip4_reass+0x312>
    goto nullreturn;
 8015d90:	bf00      	nop
 8015d92:	e004      	b.n	8015d9e <ip4_reass+0x312>
    goto nullreturn;
 8015d94:	bf00      	nop
 8015d96:	e002      	b.n	8015d9e <ip4_reass+0x312>
      goto nullreturn;
 8015d98:	bf00      	nop
 8015d9a:	e000      	b.n	8015d9e <ip4_reass+0x312>
  }

nullreturn:
 8015d9c:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015d9e:	6878      	ldr	r0, [r7, #4]
 8015da0:	f7f5 fecc 	bl	800bb3c <pbuf_free>
  return NULL;
 8015da4:	2300      	movs	r3, #0
}
 8015da6:	4618      	mov	r0, r3
 8015da8:	3738      	adds	r7, #56	; 0x38
 8015daa:	46bd      	mov	sp, r7
 8015dac:	bd80      	pop	{r7, pc}
 8015dae:	bf00      	nop
 8015db0:	0801a2a4 	.word	0x0801a2a4
 8015db4:	0801a430 	.word	0x0801a430
 8015db8:	0801a2ec 	.word	0x0801a2ec
 8015dbc:	2000f38c 	.word	0x2000f38c
 8015dc0:	0801a43c 	.word	0x0801a43c

08015dc4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015dc4:	b580      	push	{r7, lr}
 8015dc6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015dc8:	2005      	movs	r0, #5
 8015dca:	f7f4 ff91 	bl	800acf0 <memp_malloc>
 8015dce:	4603      	mov	r3, r0
}
 8015dd0:	4618      	mov	r0, r3
 8015dd2:	bd80      	pop	{r7, pc}

08015dd4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015dd4:	b580      	push	{r7, lr}
 8015dd6:	b082      	sub	sp, #8
 8015dd8:	af00      	add	r7, sp, #0
 8015dda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	2b00      	cmp	r3, #0
 8015de0:	d106      	bne.n	8015df0 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015de2:	4b07      	ldr	r3, [pc, #28]	; (8015e00 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015de4:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015de8:	4906      	ldr	r1, [pc, #24]	; (8015e04 <ip_frag_free_pbuf_custom_ref+0x30>)
 8015dea:	4807      	ldr	r0, [pc, #28]	; (8015e08 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015dec:	f000 fd28 	bl	8016840 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015df0:	6879      	ldr	r1, [r7, #4]
 8015df2:	2005      	movs	r0, #5
 8015df4:	f7f4 fff2 	bl	800addc <memp_free>
}
 8015df8:	bf00      	nop
 8015dfa:	3708      	adds	r7, #8
 8015dfc:	46bd      	mov	sp, r7
 8015dfe:	bd80      	pop	{r7, pc}
 8015e00:	0801a2a4 	.word	0x0801a2a4
 8015e04:	0801a45c 	.word	0x0801a45c
 8015e08:	0801a2ec 	.word	0x0801a2ec

08015e0c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015e0c:	b580      	push	{r7, lr}
 8015e0e:	b084      	sub	sp, #16
 8015e10:	af00      	add	r7, sp, #0
 8015e12:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015e18:	68fb      	ldr	r3, [r7, #12]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d106      	bne.n	8015e2c <ipfrag_free_pbuf_custom+0x20>
 8015e1e:	4b11      	ldr	r3, [pc, #68]	; (8015e64 <ipfrag_free_pbuf_custom+0x58>)
 8015e20:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015e24:	4910      	ldr	r1, [pc, #64]	; (8015e68 <ipfrag_free_pbuf_custom+0x5c>)
 8015e26:	4811      	ldr	r0, [pc, #68]	; (8015e6c <ipfrag_free_pbuf_custom+0x60>)
 8015e28:	f000 fd0a 	bl	8016840 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015e2c:	68fa      	ldr	r2, [r7, #12]
 8015e2e:	687b      	ldr	r3, [r7, #4]
 8015e30:	429a      	cmp	r2, r3
 8015e32:	d006      	beq.n	8015e42 <ipfrag_free_pbuf_custom+0x36>
 8015e34:	4b0b      	ldr	r3, [pc, #44]	; (8015e64 <ipfrag_free_pbuf_custom+0x58>)
 8015e36:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015e3a:	490d      	ldr	r1, [pc, #52]	; (8015e70 <ipfrag_free_pbuf_custom+0x64>)
 8015e3c:	480b      	ldr	r0, [pc, #44]	; (8015e6c <ipfrag_free_pbuf_custom+0x60>)
 8015e3e:	f000 fcff 	bl	8016840 <iprintf>
  if (pcr->original != NULL) {
 8015e42:	68fb      	ldr	r3, [r7, #12]
 8015e44:	695b      	ldr	r3, [r3, #20]
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	d004      	beq.n	8015e54 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015e4a:	68fb      	ldr	r3, [r7, #12]
 8015e4c:	695b      	ldr	r3, [r3, #20]
 8015e4e:	4618      	mov	r0, r3
 8015e50:	f7f5 fe74 	bl	800bb3c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015e54:	68f8      	ldr	r0, [r7, #12]
 8015e56:	f7ff ffbd 	bl	8015dd4 <ip_frag_free_pbuf_custom_ref>
}
 8015e5a:	bf00      	nop
 8015e5c:	3710      	adds	r7, #16
 8015e5e:	46bd      	mov	sp, r7
 8015e60:	bd80      	pop	{r7, pc}
 8015e62:	bf00      	nop
 8015e64:	0801a2a4 	.word	0x0801a2a4
 8015e68:	0801a468 	.word	0x0801a468
 8015e6c:	0801a2ec 	.word	0x0801a2ec
 8015e70:	0801a474 	.word	0x0801a474

08015e74 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015e74:	b580      	push	{r7, lr}
 8015e76:	b094      	sub	sp, #80	; 0x50
 8015e78:	af02      	add	r7, sp, #8
 8015e7a:	60f8      	str	r0, [r7, #12]
 8015e7c:	60b9      	str	r1, [r7, #8]
 8015e7e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015e80:	2300      	movs	r3, #0
 8015e82:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015e86:	68bb      	ldr	r3, [r7, #8]
 8015e88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015e8a:	3b14      	subs	r3, #20
 8015e8c:	2b00      	cmp	r3, #0
 8015e8e:	da00      	bge.n	8015e92 <ip4_frag+0x1e>
 8015e90:	3307      	adds	r3, #7
 8015e92:	10db      	asrs	r3, r3, #3
 8015e94:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015e96:	2314      	movs	r3, #20
 8015e98:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015e9a:	68fb      	ldr	r3, [r7, #12]
 8015e9c:	685b      	ldr	r3, [r3, #4]
 8015e9e:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015ea2:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ea6:	781b      	ldrb	r3, [r3, #0]
 8015ea8:	f003 030f 	and.w	r3, r3, #15
 8015eac:	b2db      	uxtb	r3, r3
 8015eae:	009b      	lsls	r3, r3, #2
 8015eb0:	b2db      	uxtb	r3, r3
 8015eb2:	2b14      	cmp	r3, #20
 8015eb4:	d002      	beq.n	8015ebc <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015eb6:	f06f 0305 	mvn.w	r3, #5
 8015eba:	e110      	b.n	80160de <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015ebc:	68fb      	ldr	r3, [r7, #12]
 8015ebe:	895b      	ldrh	r3, [r3, #10]
 8015ec0:	2b13      	cmp	r3, #19
 8015ec2:	d809      	bhi.n	8015ed8 <ip4_frag+0x64>
 8015ec4:	4b88      	ldr	r3, [pc, #544]	; (80160e8 <ip4_frag+0x274>)
 8015ec6:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015eca:	4988      	ldr	r1, [pc, #544]	; (80160ec <ip4_frag+0x278>)
 8015ecc:	4888      	ldr	r0, [pc, #544]	; (80160f0 <ip4_frag+0x27c>)
 8015ece:	f000 fcb7 	bl	8016840 <iprintf>
 8015ed2:	f06f 0305 	mvn.w	r3, #5
 8015ed6:	e102      	b.n	80160de <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015eda:	88db      	ldrh	r3, [r3, #6]
 8015edc:	b29b      	uxth	r3, r3
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f7f4 fa2e 	bl	800a340 <lwip_htons>
 8015ee4:	4603      	mov	r3, r0
 8015ee6:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015ee8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015eea:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015eee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015ef2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015ef4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015ef8:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015efa:	68fb      	ldr	r3, [r7, #12]
 8015efc:	891b      	ldrh	r3, [r3, #8]
 8015efe:	3b14      	subs	r3, #20
 8015f00:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015f04:	e0e1      	b.n	80160ca <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015f06:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015f08:	00db      	lsls	r3, r3, #3
 8015f0a:	b29b      	uxth	r3, r3
 8015f0c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015f10:	4293      	cmp	r3, r2
 8015f12:	bf28      	it	cs
 8015f14:	4613      	movcs	r3, r2
 8015f16:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015f18:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015f1c:	2114      	movs	r1, #20
 8015f1e:	200e      	movs	r0, #14
 8015f20:	f7f5 fb28 	bl	800b574 <pbuf_alloc>
 8015f24:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f28:	2b00      	cmp	r3, #0
 8015f2a:	f000 80d5 	beq.w	80160d8 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f30:	895b      	ldrh	r3, [r3, #10]
 8015f32:	2b13      	cmp	r3, #19
 8015f34:	d806      	bhi.n	8015f44 <ip4_frag+0xd0>
 8015f36:	4b6c      	ldr	r3, [pc, #432]	; (80160e8 <ip4_frag+0x274>)
 8015f38:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015f3c:	496d      	ldr	r1, [pc, #436]	; (80160f4 <ip4_frag+0x280>)
 8015f3e:	486c      	ldr	r0, [pc, #432]	; (80160f0 <ip4_frag+0x27c>)
 8015f40:	f000 fc7e 	bl	8016840 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f46:	685b      	ldr	r3, [r3, #4]
 8015f48:	2214      	movs	r2, #20
 8015f4a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	f000 fbcc 	bl	80166ea <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f54:	685b      	ldr	r3, [r3, #4]
 8015f56:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015f58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015f5a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015f5e:	e064      	b.n	801602a <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	895a      	ldrh	r2, [r3, #10]
 8015f64:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015f66:	1ad3      	subs	r3, r2, r3
 8015f68:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015f6a:	68fb      	ldr	r3, [r7, #12]
 8015f6c:	895b      	ldrh	r3, [r3, #10]
 8015f6e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015f70:	429a      	cmp	r2, r3
 8015f72:	d906      	bls.n	8015f82 <ip4_frag+0x10e>
 8015f74:	4b5c      	ldr	r3, [pc, #368]	; (80160e8 <ip4_frag+0x274>)
 8015f76:	f240 322d 	movw	r2, #813	; 0x32d
 8015f7a:	495f      	ldr	r1, [pc, #380]	; (80160f8 <ip4_frag+0x284>)
 8015f7c:	485c      	ldr	r0, [pc, #368]	; (80160f0 <ip4_frag+0x27c>)
 8015f7e:	f000 fc5f 	bl	8016840 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015f82:	8bfa      	ldrh	r2, [r7, #30]
 8015f84:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015f88:	4293      	cmp	r3, r2
 8015f8a:	bf28      	it	cs
 8015f8c:	4613      	movcs	r3, r2
 8015f8e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015f92:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015f96:	2b00      	cmp	r3, #0
 8015f98:	d105      	bne.n	8015fa6 <ip4_frag+0x132>
        poff = 0;
 8015f9a:	2300      	movs	r3, #0
 8015f9c:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015f9e:	68fb      	ldr	r3, [r7, #12]
 8015fa0:	681b      	ldr	r3, [r3, #0]
 8015fa2:	60fb      	str	r3, [r7, #12]
        continue;
 8015fa4:	e041      	b.n	801602a <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015fa6:	f7ff ff0d 	bl	8015dc4 <ip_frag_alloc_pbuf_custom_ref>
 8015faa:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015fac:	69bb      	ldr	r3, [r7, #24]
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d103      	bne.n	8015fba <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015fb2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015fb4:	f7f5 fdc2 	bl	800bb3c <pbuf_free>
        goto memerr;
 8015fb8:	e08f      	b.n	80160da <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015fba:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015fbc:	68fb      	ldr	r3, [r7, #12]
 8015fbe:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015fc0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015fc2:	4413      	add	r3, r2
 8015fc4:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015fc8:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015fcc:	9201      	str	r2, [sp, #4]
 8015fce:	9300      	str	r3, [sp, #0]
 8015fd0:	4603      	mov	r3, r0
 8015fd2:	2241      	movs	r2, #65	; 0x41
 8015fd4:	2000      	movs	r0, #0
 8015fd6:	f7f5 fbf7 	bl	800b7c8 <pbuf_alloced_custom>
 8015fda:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015fdc:	697b      	ldr	r3, [r7, #20]
 8015fde:	2b00      	cmp	r3, #0
 8015fe0:	d106      	bne.n	8015ff0 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015fe2:	69b8      	ldr	r0, [r7, #24]
 8015fe4:	f7ff fef6 	bl	8015dd4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015fe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015fea:	f7f5 fda7 	bl	800bb3c <pbuf_free>
        goto memerr;
 8015fee:	e074      	b.n	80160da <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015ff0:	68f8      	ldr	r0, [r7, #12]
 8015ff2:	f7f5 fe49 	bl	800bc88 <pbuf_ref>
      pcr->original = p;
 8015ff6:	69bb      	ldr	r3, [r7, #24]
 8015ff8:	68fa      	ldr	r2, [r7, #12]
 8015ffa:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015ffc:	69bb      	ldr	r3, [r7, #24]
 8015ffe:	4a3f      	ldr	r2, [pc, #252]	; (80160fc <ip4_frag+0x288>)
 8016000:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8016002:	6979      	ldr	r1, [r7, #20]
 8016004:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016006:	f7f5 fe67 	bl	800bcd8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801600a:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801600e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016012:	1ad3      	subs	r3, r2, r3
 8016014:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016018:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801601c:	2b00      	cmp	r3, #0
 801601e:	d004      	beq.n	801602a <ip4_frag+0x1b6>
        poff = 0;
 8016020:	2300      	movs	r3, #0
 8016022:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801602a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801602e:	2b00      	cmp	r3, #0
 8016030:	d196      	bne.n	8015f60 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8016032:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016034:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016038:	4413      	add	r3, r2
 801603a:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801603c:	68bb      	ldr	r3, [r7, #8]
 801603e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016040:	f1a3 0213 	sub.w	r2, r3, #19
 8016044:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016048:	429a      	cmp	r2, r3
 801604a:	bfcc      	ite	gt
 801604c:	2301      	movgt	r3, #1
 801604e:	2300      	movle	r3, #0
 8016050:	b2db      	uxtb	r3, r3
 8016052:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016054:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016058:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801605c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801605e:	6a3b      	ldr	r3, [r7, #32]
 8016060:	2b00      	cmp	r3, #0
 8016062:	d002      	beq.n	801606a <ip4_frag+0x1f6>
 8016064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016066:	2b00      	cmp	r3, #0
 8016068:	d003      	beq.n	8016072 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801606a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801606c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016070:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8016072:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016074:	4618      	mov	r0, r3
 8016076:	f7f4 f963 	bl	800a340 <lwip_htons>
 801607a:	4603      	mov	r3, r0
 801607c:	461a      	mov	r2, r3
 801607e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016080:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8016082:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016084:	3314      	adds	r3, #20
 8016086:	b29b      	uxth	r3, r3
 8016088:	4618      	mov	r0, r3
 801608a:	f7f4 f959 	bl	800a340 <lwip_htons>
 801608e:	4603      	mov	r3, r0
 8016090:	461a      	mov	r2, r3
 8016092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016094:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016098:	2200      	movs	r2, #0
 801609a:	729a      	strb	r2, [r3, #10]
 801609c:	2200      	movs	r2, #0
 801609e:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80160a0:	68bb      	ldr	r3, [r7, #8]
 80160a2:	695b      	ldr	r3, [r3, #20]
 80160a4:	687a      	ldr	r2, [r7, #4]
 80160a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80160a8:	68b8      	ldr	r0, [r7, #8]
 80160aa:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80160ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80160ae:	f7f5 fd45 	bl	800bb3c <pbuf_free>
    left = (u16_t)(left - fragsize);
 80160b2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80160b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80160b8:	1ad3      	subs	r3, r2, r3
 80160ba:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80160be:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80160c2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80160c4:	4413      	add	r3, r2
 80160c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80160ca:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80160ce:	2b00      	cmp	r3, #0
 80160d0:	f47f af19 	bne.w	8015f06 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80160d4:	2300      	movs	r3, #0
 80160d6:	e002      	b.n	80160de <ip4_frag+0x26a>
      goto memerr;
 80160d8:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80160da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80160de:	4618      	mov	r0, r3
 80160e0:	3748      	adds	r7, #72	; 0x48
 80160e2:	46bd      	mov	sp, r7
 80160e4:	bd80      	pop	{r7, pc}
 80160e6:	bf00      	nop
 80160e8:	0801a2a4 	.word	0x0801a2a4
 80160ec:	0801a480 	.word	0x0801a480
 80160f0:	0801a2ec 	.word	0x0801a2ec
 80160f4:	0801a49c 	.word	0x0801a49c
 80160f8:	0801a4bc 	.word	0x0801a4bc
 80160fc:	08015e0d 	.word	0x08015e0d

08016100 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8016100:	b580      	push	{r7, lr}
 8016102:	b086      	sub	sp, #24
 8016104:	af00      	add	r7, sp, #0
 8016106:	6078      	str	r0, [r7, #4]
 8016108:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801610a:	230e      	movs	r3, #14
 801610c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801610e:	687b      	ldr	r3, [r7, #4]
 8016110:	895b      	ldrh	r3, [r3, #10]
 8016112:	2b0e      	cmp	r3, #14
 8016114:	d96e      	bls.n	80161f4 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016116:	687b      	ldr	r3, [r7, #4]
 8016118:	7bdb      	ldrb	r3, [r3, #15]
 801611a:	2b00      	cmp	r3, #0
 801611c:	d106      	bne.n	801612c <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801611e:	683b      	ldr	r3, [r7, #0]
 8016120:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8016124:	3301      	adds	r3, #1
 8016126:	b2da      	uxtb	r2, r3
 8016128:	687b      	ldr	r3, [r7, #4]
 801612a:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801612c:	687b      	ldr	r3, [r7, #4]
 801612e:	685b      	ldr	r3, [r3, #4]
 8016130:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8016132:	693b      	ldr	r3, [r7, #16]
 8016134:	7b1a      	ldrb	r2, [r3, #12]
 8016136:	7b5b      	ldrb	r3, [r3, #13]
 8016138:	021b      	lsls	r3, r3, #8
 801613a:	4313      	orrs	r3, r2
 801613c:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801613e:	693b      	ldr	r3, [r7, #16]
 8016140:	781b      	ldrb	r3, [r3, #0]
 8016142:	f003 0301 	and.w	r3, r3, #1
 8016146:	2b00      	cmp	r3, #0
 8016148:	d023      	beq.n	8016192 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801614a:	693b      	ldr	r3, [r7, #16]
 801614c:	781b      	ldrb	r3, [r3, #0]
 801614e:	2b01      	cmp	r3, #1
 8016150:	d10f      	bne.n	8016172 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8016152:	693b      	ldr	r3, [r7, #16]
 8016154:	785b      	ldrb	r3, [r3, #1]
 8016156:	2b00      	cmp	r3, #0
 8016158:	d11b      	bne.n	8016192 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801615a:	693b      	ldr	r3, [r7, #16]
 801615c:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801615e:	2b5e      	cmp	r3, #94	; 0x5e
 8016160:	d117      	bne.n	8016192 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	7b5b      	ldrb	r3, [r3, #13]
 8016166:	f043 0310 	orr.w	r3, r3, #16
 801616a:	b2da      	uxtb	r2, r3
 801616c:	687b      	ldr	r3, [r7, #4]
 801616e:	735a      	strb	r2, [r3, #13]
 8016170:	e00f      	b.n	8016192 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8016172:	693b      	ldr	r3, [r7, #16]
 8016174:	2206      	movs	r2, #6
 8016176:	4928      	ldr	r1, [pc, #160]	; (8016218 <ethernet_input+0x118>)
 8016178:	4618      	mov	r0, r3
 801617a:	f000 faa6 	bl	80166ca <memcmp>
 801617e:	4603      	mov	r3, r0
 8016180:	2b00      	cmp	r3, #0
 8016182:	d106      	bne.n	8016192 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	7b5b      	ldrb	r3, [r3, #13]
 8016188:	f043 0308 	orr.w	r3, r3, #8
 801618c:	b2da      	uxtb	r2, r3
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8016192:	89fb      	ldrh	r3, [r7, #14]
 8016194:	2b08      	cmp	r3, #8
 8016196:	d003      	beq.n	80161a0 <ethernet_input+0xa0>
 8016198:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801619c:	d014      	beq.n	80161c8 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801619e:	e032      	b.n	8016206 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80161a0:	683b      	ldr	r3, [r7, #0]
 80161a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80161a6:	f003 0308 	and.w	r3, r3, #8
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d024      	beq.n	80161f8 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80161ae:	8afb      	ldrh	r3, [r7, #22]
 80161b0:	4619      	mov	r1, r3
 80161b2:	6878      	ldr	r0, [r7, #4]
 80161b4:	f7f5 fc3c 	bl	800ba30 <pbuf_remove_header>
 80161b8:	4603      	mov	r3, r0
 80161ba:	2b00      	cmp	r3, #0
 80161bc:	d11e      	bne.n	80161fc <ethernet_input+0xfc>
        ip4_input(p, netif);
 80161be:	6839      	ldr	r1, [r7, #0]
 80161c0:	6878      	ldr	r0, [r7, #4]
 80161c2:	f7fe ff03 	bl	8014fcc <ip4_input>
      break;
 80161c6:	e013      	b.n	80161f0 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80161c8:	683b      	ldr	r3, [r7, #0]
 80161ca:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80161ce:	f003 0308 	and.w	r3, r3, #8
 80161d2:	2b00      	cmp	r3, #0
 80161d4:	d014      	beq.n	8016200 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80161d6:	8afb      	ldrh	r3, [r7, #22]
 80161d8:	4619      	mov	r1, r3
 80161da:	6878      	ldr	r0, [r7, #4]
 80161dc:	f7f5 fc28 	bl	800ba30 <pbuf_remove_header>
 80161e0:	4603      	mov	r3, r0
 80161e2:	2b00      	cmp	r3, #0
 80161e4:	d10e      	bne.n	8016204 <ethernet_input+0x104>
        etharp_input(p, netif);
 80161e6:	6839      	ldr	r1, [r7, #0]
 80161e8:	6878      	ldr	r0, [r7, #4]
 80161ea:	f7fe f89f 	bl	801432c <etharp_input>
      break;
 80161ee:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80161f0:	2300      	movs	r3, #0
 80161f2:	e00c      	b.n	801620e <ethernet_input+0x10e>
    goto free_and_return;
 80161f4:	bf00      	nop
 80161f6:	e006      	b.n	8016206 <ethernet_input+0x106>
        goto free_and_return;
 80161f8:	bf00      	nop
 80161fa:	e004      	b.n	8016206 <ethernet_input+0x106>
        goto free_and_return;
 80161fc:	bf00      	nop
 80161fe:	e002      	b.n	8016206 <ethernet_input+0x106>
        goto free_and_return;
 8016200:	bf00      	nop
 8016202:	e000      	b.n	8016206 <ethernet_input+0x106>
        goto free_and_return;
 8016204:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016206:	6878      	ldr	r0, [r7, #4]
 8016208:	f7f5 fc98 	bl	800bb3c <pbuf_free>
  return ERR_OK;
 801620c:	2300      	movs	r3, #0
}
 801620e:	4618      	mov	r0, r3
 8016210:	3718      	adds	r7, #24
 8016212:	46bd      	mov	sp, r7
 8016214:	bd80      	pop	{r7, pc}
 8016216:	bf00      	nop
 8016218:	0801a6d0 	.word	0x0801a6d0

0801621c <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801621c:	b580      	push	{r7, lr}
 801621e:	b086      	sub	sp, #24
 8016220:	af00      	add	r7, sp, #0
 8016222:	60f8      	str	r0, [r7, #12]
 8016224:	60b9      	str	r1, [r7, #8]
 8016226:	607a      	str	r2, [r7, #4]
 8016228:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801622a:	8c3b      	ldrh	r3, [r7, #32]
 801622c:	4618      	mov	r0, r3
 801622e:	f7f4 f887 	bl	800a340 <lwip_htons>
 8016232:	4603      	mov	r3, r0
 8016234:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016236:	210e      	movs	r1, #14
 8016238:	68b8      	ldr	r0, [r7, #8]
 801623a:	f7f5 fbe9 	bl	800ba10 <pbuf_add_header>
 801623e:	4603      	mov	r3, r0
 8016240:	2b00      	cmp	r3, #0
 8016242:	d125      	bne.n	8016290 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016244:	68bb      	ldr	r3, [r7, #8]
 8016246:	685b      	ldr	r3, [r3, #4]
 8016248:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801624a:	693b      	ldr	r3, [r7, #16]
 801624c:	8afa      	ldrh	r2, [r7, #22]
 801624e:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8016250:	693b      	ldr	r3, [r7, #16]
 8016252:	2206      	movs	r2, #6
 8016254:	6839      	ldr	r1, [r7, #0]
 8016256:	4618      	mov	r0, r3
 8016258:	f000 fa47 	bl	80166ea <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801625c:	693b      	ldr	r3, [r7, #16]
 801625e:	3306      	adds	r3, #6
 8016260:	2206      	movs	r2, #6
 8016262:	6879      	ldr	r1, [r7, #4]
 8016264:	4618      	mov	r0, r3
 8016266:	f000 fa40 	bl	80166ea <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801626a:	68fb      	ldr	r3, [r7, #12]
 801626c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016270:	2b06      	cmp	r3, #6
 8016272:	d006      	beq.n	8016282 <ethernet_output+0x66>
 8016274:	4b0a      	ldr	r3, [pc, #40]	; (80162a0 <ethernet_output+0x84>)
 8016276:	f44f 7299 	mov.w	r2, #306	; 0x132
 801627a:	490a      	ldr	r1, [pc, #40]	; (80162a4 <ethernet_output+0x88>)
 801627c:	480a      	ldr	r0, [pc, #40]	; (80162a8 <ethernet_output+0x8c>)
 801627e:	f000 fadf 	bl	8016840 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8016282:	68fb      	ldr	r3, [r7, #12]
 8016284:	699b      	ldr	r3, [r3, #24]
 8016286:	68b9      	ldr	r1, [r7, #8]
 8016288:	68f8      	ldr	r0, [r7, #12]
 801628a:	4798      	blx	r3
 801628c:	4603      	mov	r3, r0
 801628e:	e002      	b.n	8016296 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8016290:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8016292:	f06f 0301 	mvn.w	r3, #1
}
 8016296:	4618      	mov	r0, r3
 8016298:	3718      	adds	r7, #24
 801629a:	46bd      	mov	sp, r7
 801629c:	bd80      	pop	{r7, pc}
 801629e:	bf00      	nop
 80162a0:	0801a4cc 	.word	0x0801a4cc
 80162a4:	0801a504 	.word	0x0801a504
 80162a8:	0801a538 	.word	0x0801a538

080162ac <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80162ac:	b580      	push	{r7, lr}
 80162ae:	b082      	sub	sp, #8
 80162b0:	af00      	add	r7, sp, #0
 80162b2:	6078      	str	r0, [r7, #4]
 80162b4:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80162b6:	683b      	ldr	r3, [r7, #0]
 80162b8:	2200      	movs	r2, #0
 80162ba:	2104      	movs	r1, #4
 80162bc:	4618      	mov	r0, r3
 80162be:	f7f0 fb53 	bl	8006968 <osMessageQueueNew>
 80162c2:	4602      	mov	r2, r0
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d102      	bne.n	80162d6 <sys_mbox_new+0x2a>
    return ERR_MEM;
 80162d0:	f04f 33ff 	mov.w	r3, #4294967295
 80162d4:	e000      	b.n	80162d8 <sys_mbox_new+0x2c>

  return ERR_OK;
 80162d6:	2300      	movs	r3, #0
}
 80162d8:	4618      	mov	r0, r3
 80162da:	3708      	adds	r7, #8
 80162dc:	46bd      	mov	sp, r7
 80162de:	bd80      	pop	{r7, pc}

080162e0 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 80162e0:	b580      	push	{r7, lr}
 80162e2:	b084      	sub	sp, #16
 80162e4:	af00      	add	r7, sp, #0
 80162e6:	6078      	str	r0, [r7, #4]
 80162e8:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	6818      	ldr	r0, [r3, #0]
 80162ee:	4639      	mov	r1, r7
 80162f0:	2300      	movs	r3, #0
 80162f2:	2200      	movs	r2, #0
 80162f4:	f7f0 fbbe 	bl	8006a74 <osMessageQueuePut>
 80162f8:	4603      	mov	r3, r0
 80162fa:	2b00      	cmp	r3, #0
 80162fc:	d102      	bne.n	8016304 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 80162fe:	2300      	movs	r3, #0
 8016300:	73fb      	strb	r3, [r7, #15]
 8016302:	e001      	b.n	8016308 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016304:	23ff      	movs	r3, #255	; 0xff
 8016306:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016308:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801630c:	4618      	mov	r0, r3
 801630e:	3710      	adds	r7, #16
 8016310:	46bd      	mov	sp, r7
 8016312:	bd80      	pop	{r7, pc}

08016314 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016314:	b580      	push	{r7, lr}
 8016316:	b086      	sub	sp, #24
 8016318:	af00      	add	r7, sp, #0
 801631a:	60f8      	str	r0, [r7, #12]
 801631c:	60b9      	str	r1, [r7, #8]
 801631e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016320:	f7ef ff84 	bl	800622c <osKernelGetTickCount>
 8016324:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	2b00      	cmp	r3, #0
 801632a:	d013      	beq.n	8016354 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801632c:	68fb      	ldr	r3, [r7, #12]
 801632e:	6818      	ldr	r0, [r3, #0]
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	2200      	movs	r2, #0
 8016334:	68b9      	ldr	r1, [r7, #8]
 8016336:	f7f0 fc11 	bl	8006b5c <osMessageQueueGet>
 801633a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801633c:	693b      	ldr	r3, [r7, #16]
 801633e:	2b00      	cmp	r3, #0
 8016340:	d105      	bne.n	801634e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8016342:	f7ef ff73 	bl	800622c <osKernelGetTickCount>
 8016346:	4602      	mov	r2, r0
 8016348:	697b      	ldr	r3, [r7, #20]
 801634a:	1ad3      	subs	r3, r2, r3
 801634c:	e00f      	b.n	801636e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801634e:	f04f 33ff 	mov.w	r3, #4294967295
 8016352:	e00c      	b.n	801636e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8016354:	68fb      	ldr	r3, [r7, #12]
 8016356:	6818      	ldr	r0, [r3, #0]
 8016358:	f04f 33ff 	mov.w	r3, #4294967295
 801635c:	2200      	movs	r2, #0
 801635e:	68b9      	ldr	r1, [r7, #8]
 8016360:	f7f0 fbfc 	bl	8006b5c <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8016364:	f7ef ff62 	bl	800622c <osKernelGetTickCount>
 8016368:	4602      	mov	r2, r0
 801636a:	697b      	ldr	r3, [r7, #20]
 801636c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801636e:	4618      	mov	r0, r3
 8016370:	3718      	adds	r7, #24
 8016372:	46bd      	mov	sp, r7
 8016374:	bd80      	pop	{r7, pc}

08016376 <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8016376:	b480      	push	{r7}
 8016378:	b083      	sub	sp, #12
 801637a:	af00      	add	r7, sp, #0
 801637c:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	2b00      	cmp	r3, #0
 8016384:	d101      	bne.n	801638a <sys_mbox_valid+0x14>
    return 0;
 8016386:	2300      	movs	r3, #0
 8016388:	e000      	b.n	801638c <sys_mbox_valid+0x16>
  else
    return 1;
 801638a:	2301      	movs	r3, #1
}
 801638c:	4618      	mov	r0, r3
 801638e:	370c      	adds	r7, #12
 8016390:	46bd      	mov	sp, r7
 8016392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016396:	4770      	bx	lr

08016398 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016398:	b580      	push	{r7, lr}
 801639a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 801639c:	2000      	movs	r0, #0
 801639e:	f7f0 f841 	bl	8006424 <osMutexNew>
 80163a2:	4603      	mov	r3, r0
 80163a4:	4a01      	ldr	r2, [pc, #4]	; (80163ac <sys_init+0x14>)
 80163a6:	6013      	str	r3, [r2, #0]
#endif
}
 80163a8:	bf00      	nop
 80163aa:	bd80      	pop	{r7, pc}
 80163ac:	2000f394 	.word	0x2000f394

080163b0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80163b0:	b580      	push	{r7, lr}
 80163b2:	b082      	sub	sp, #8
 80163b4:	af00      	add	r7, sp, #0
 80163b6:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 80163b8:	2000      	movs	r0, #0
 80163ba:	f7f0 f833 	bl	8006424 <osMutexNew>
 80163be:	4602      	mov	r2, r0
 80163c0:	687b      	ldr	r3, [r7, #4]
 80163c2:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	681b      	ldr	r3, [r3, #0]
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d102      	bne.n	80163d2 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80163cc:	f04f 33ff 	mov.w	r3, #4294967295
 80163d0:	e000      	b.n	80163d4 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80163d2:	2300      	movs	r3, #0
}
 80163d4:	4618      	mov	r0, r3
 80163d6:	3708      	adds	r7, #8
 80163d8:	46bd      	mov	sp, r7
 80163da:	bd80      	pop	{r7, pc}

080163dc <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80163dc:	b580      	push	{r7, lr}
 80163de:	b082      	sub	sp, #8
 80163e0:	af00      	add	r7, sp, #0
 80163e2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 80163e4:	687b      	ldr	r3, [r7, #4]
 80163e6:	681b      	ldr	r3, [r3, #0]
 80163e8:	f04f 31ff 	mov.w	r1, #4294967295
 80163ec:	4618      	mov	r0, r3
 80163ee:	f7f0 f8b3 	bl	8006558 <osMutexAcquire>
#endif
}
 80163f2:	bf00      	nop
 80163f4:	3708      	adds	r7, #8
 80163f6:	46bd      	mov	sp, r7
 80163f8:	bd80      	pop	{r7, pc}

080163fa <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80163fa:	b580      	push	{r7, lr}
 80163fc:	b082      	sub	sp, #8
 80163fe:	af00      	add	r7, sp, #0
 8016400:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	4618      	mov	r0, r3
 8016408:	f7f0 f904 	bl	8006614 <osMutexRelease>
}
 801640c:	bf00      	nop
 801640e:	3708      	adds	r7, #8
 8016410:	46bd      	mov	sp, r7
 8016412:	bd80      	pop	{r7, pc}

08016414 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016414:	b580      	push	{r7, lr}
 8016416:	b08e      	sub	sp, #56	; 0x38
 8016418:	af00      	add	r7, sp, #0
 801641a:	60f8      	str	r0, [r7, #12]
 801641c:	60b9      	str	r1, [r7, #8]
 801641e:	607a      	str	r2, [r7, #4]
 8016420:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8016422:	f107 0314 	add.w	r3, r7, #20
 8016426:	2224      	movs	r2, #36	; 0x24
 8016428:	2100      	movs	r1, #0
 801642a:	4618      	mov	r0, r3
 801642c:	f000 f96b 	bl	8016706 <memset>
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	617b      	str	r3, [r7, #20]
 8016434:	683b      	ldr	r3, [r7, #0]
 8016436:	62bb      	str	r3, [r7, #40]	; 0x28
 8016438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801643a:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 801643c:	f107 0314 	add.w	r3, r7, #20
 8016440:	461a      	mov	r2, r3
 8016442:	6879      	ldr	r1, [r7, #4]
 8016444:	68b8      	ldr	r0, [r7, #8]
 8016446:	f7ef ff19 	bl	800627c <osThreadNew>
 801644a:	4603      	mov	r3, r0
#endif
}
 801644c:	4618      	mov	r0, r3
 801644e:	3738      	adds	r7, #56	; 0x38
 8016450:	46bd      	mov	sp, r7
 8016452:	bd80      	pop	{r7, pc}

08016454 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016454:	b580      	push	{r7, lr}
 8016456:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8016458:	4b04      	ldr	r3, [pc, #16]	; (801646c <sys_arch_protect+0x18>)
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	f04f 31ff 	mov.w	r1, #4294967295
 8016460:	4618      	mov	r0, r3
 8016462:	f7f0 f879 	bl	8006558 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8016466:	2301      	movs	r3, #1
}
 8016468:	4618      	mov	r0, r3
 801646a:	bd80      	pop	{r7, pc}
 801646c:	2000f394 	.word	0x2000f394

08016470 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b082      	sub	sp, #8
 8016474:	af00      	add	r7, sp, #0
 8016476:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016478:	4b04      	ldr	r3, [pc, #16]	; (801648c <sys_arch_unprotect+0x1c>)
 801647a:	681b      	ldr	r3, [r3, #0]
 801647c:	4618      	mov	r0, r3
 801647e:	f7f0 f8c9 	bl	8006614 <osMutexRelease>
}
 8016482:	bf00      	nop
 8016484:	3708      	adds	r7, #8
 8016486:	46bd      	mov	sp, r7
 8016488:	bd80      	pop	{r7, pc}
 801648a:	bf00      	nop
 801648c:	2000f394 	.word	0x2000f394

08016490 <std>:
 8016490:	2300      	movs	r3, #0
 8016492:	b510      	push	{r4, lr}
 8016494:	4604      	mov	r4, r0
 8016496:	e9c0 3300 	strd	r3, r3, [r0]
 801649a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801649e:	6083      	str	r3, [r0, #8]
 80164a0:	8181      	strh	r1, [r0, #12]
 80164a2:	6643      	str	r3, [r0, #100]	; 0x64
 80164a4:	81c2      	strh	r2, [r0, #14]
 80164a6:	6183      	str	r3, [r0, #24]
 80164a8:	4619      	mov	r1, r3
 80164aa:	2208      	movs	r2, #8
 80164ac:	305c      	adds	r0, #92	; 0x5c
 80164ae:	f000 f92a 	bl	8016706 <memset>
 80164b2:	4b05      	ldr	r3, [pc, #20]	; (80164c8 <std+0x38>)
 80164b4:	6263      	str	r3, [r4, #36]	; 0x24
 80164b6:	4b05      	ldr	r3, [pc, #20]	; (80164cc <std+0x3c>)
 80164b8:	62a3      	str	r3, [r4, #40]	; 0x28
 80164ba:	4b05      	ldr	r3, [pc, #20]	; (80164d0 <std+0x40>)
 80164bc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80164be:	4b05      	ldr	r3, [pc, #20]	; (80164d4 <std+0x44>)
 80164c0:	6224      	str	r4, [r4, #32]
 80164c2:	6323      	str	r3, [r4, #48]	; 0x30
 80164c4:	bd10      	pop	{r4, pc}
 80164c6:	bf00      	nop
 80164c8:	080169e1 	.word	0x080169e1
 80164cc:	08016a03 	.word	0x08016a03
 80164d0:	08016a3b 	.word	0x08016a3b
 80164d4:	08016a5f 	.word	0x08016a5f

080164d8 <_cleanup_r>:
 80164d8:	4901      	ldr	r1, [pc, #4]	; (80164e0 <_cleanup_r+0x8>)
 80164da:	f000 b8af 	b.w	801663c <_fwalk_reent>
 80164de:	bf00      	nop
 80164e0:	08016bf5 	.word	0x08016bf5

080164e4 <__sfmoreglue>:
 80164e4:	b570      	push	{r4, r5, r6, lr}
 80164e6:	2268      	movs	r2, #104	; 0x68
 80164e8:	1e4d      	subs	r5, r1, #1
 80164ea:	4355      	muls	r5, r2
 80164ec:	460e      	mov	r6, r1
 80164ee:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80164f2:	f000 f931 	bl	8016758 <_malloc_r>
 80164f6:	4604      	mov	r4, r0
 80164f8:	b140      	cbz	r0, 801650c <__sfmoreglue+0x28>
 80164fa:	2100      	movs	r1, #0
 80164fc:	e9c0 1600 	strd	r1, r6, [r0]
 8016500:	300c      	adds	r0, #12
 8016502:	60a0      	str	r0, [r4, #8]
 8016504:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016508:	f000 f8fd 	bl	8016706 <memset>
 801650c:	4620      	mov	r0, r4
 801650e:	bd70      	pop	{r4, r5, r6, pc}

08016510 <__sfp_lock_acquire>:
 8016510:	4801      	ldr	r0, [pc, #4]	; (8016518 <__sfp_lock_acquire+0x8>)
 8016512:	f000 b8d8 	b.w	80166c6 <__retarget_lock_acquire_recursive>
 8016516:	bf00      	nop
 8016518:	2000f399 	.word	0x2000f399

0801651c <__sfp_lock_release>:
 801651c:	4801      	ldr	r0, [pc, #4]	; (8016524 <__sfp_lock_release+0x8>)
 801651e:	f000 b8d3 	b.w	80166c8 <__retarget_lock_release_recursive>
 8016522:	bf00      	nop
 8016524:	2000f399 	.word	0x2000f399

08016528 <__sinit_lock_acquire>:
 8016528:	4801      	ldr	r0, [pc, #4]	; (8016530 <__sinit_lock_acquire+0x8>)
 801652a:	f000 b8cc 	b.w	80166c6 <__retarget_lock_acquire_recursive>
 801652e:	bf00      	nop
 8016530:	2000f39a 	.word	0x2000f39a

08016534 <__sinit_lock_release>:
 8016534:	4801      	ldr	r0, [pc, #4]	; (801653c <__sinit_lock_release+0x8>)
 8016536:	f000 b8c7 	b.w	80166c8 <__retarget_lock_release_recursive>
 801653a:	bf00      	nop
 801653c:	2000f39a 	.word	0x2000f39a

08016540 <__sinit>:
 8016540:	b510      	push	{r4, lr}
 8016542:	4604      	mov	r4, r0
 8016544:	f7ff fff0 	bl	8016528 <__sinit_lock_acquire>
 8016548:	69a3      	ldr	r3, [r4, #24]
 801654a:	b11b      	cbz	r3, 8016554 <__sinit+0x14>
 801654c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016550:	f7ff bff0 	b.w	8016534 <__sinit_lock_release>
 8016554:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016558:	6523      	str	r3, [r4, #80]	; 0x50
 801655a:	4b13      	ldr	r3, [pc, #76]	; (80165a8 <__sinit+0x68>)
 801655c:	4a13      	ldr	r2, [pc, #76]	; (80165ac <__sinit+0x6c>)
 801655e:	681b      	ldr	r3, [r3, #0]
 8016560:	62a2      	str	r2, [r4, #40]	; 0x28
 8016562:	42a3      	cmp	r3, r4
 8016564:	bf04      	itt	eq
 8016566:	2301      	moveq	r3, #1
 8016568:	61a3      	streq	r3, [r4, #24]
 801656a:	4620      	mov	r0, r4
 801656c:	f000 f820 	bl	80165b0 <__sfp>
 8016570:	6060      	str	r0, [r4, #4]
 8016572:	4620      	mov	r0, r4
 8016574:	f000 f81c 	bl	80165b0 <__sfp>
 8016578:	60a0      	str	r0, [r4, #8]
 801657a:	4620      	mov	r0, r4
 801657c:	f000 f818 	bl	80165b0 <__sfp>
 8016580:	2200      	movs	r2, #0
 8016582:	60e0      	str	r0, [r4, #12]
 8016584:	2104      	movs	r1, #4
 8016586:	6860      	ldr	r0, [r4, #4]
 8016588:	f7ff ff82 	bl	8016490 <std>
 801658c:	68a0      	ldr	r0, [r4, #8]
 801658e:	2201      	movs	r2, #1
 8016590:	2109      	movs	r1, #9
 8016592:	f7ff ff7d 	bl	8016490 <std>
 8016596:	68e0      	ldr	r0, [r4, #12]
 8016598:	2202      	movs	r2, #2
 801659a:	2112      	movs	r1, #18
 801659c:	f7ff ff78 	bl	8016490 <std>
 80165a0:	2301      	movs	r3, #1
 80165a2:	61a3      	str	r3, [r4, #24]
 80165a4:	e7d2      	b.n	801654c <__sinit+0xc>
 80165a6:	bf00      	nop
 80165a8:	0801a740 	.word	0x0801a740
 80165ac:	080164d9 	.word	0x080164d9

080165b0 <__sfp>:
 80165b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80165b2:	4607      	mov	r7, r0
 80165b4:	f7ff ffac 	bl	8016510 <__sfp_lock_acquire>
 80165b8:	4b1e      	ldr	r3, [pc, #120]	; (8016634 <__sfp+0x84>)
 80165ba:	681e      	ldr	r6, [r3, #0]
 80165bc:	69b3      	ldr	r3, [r6, #24]
 80165be:	b913      	cbnz	r3, 80165c6 <__sfp+0x16>
 80165c0:	4630      	mov	r0, r6
 80165c2:	f7ff ffbd 	bl	8016540 <__sinit>
 80165c6:	3648      	adds	r6, #72	; 0x48
 80165c8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80165cc:	3b01      	subs	r3, #1
 80165ce:	d503      	bpl.n	80165d8 <__sfp+0x28>
 80165d0:	6833      	ldr	r3, [r6, #0]
 80165d2:	b30b      	cbz	r3, 8016618 <__sfp+0x68>
 80165d4:	6836      	ldr	r6, [r6, #0]
 80165d6:	e7f7      	b.n	80165c8 <__sfp+0x18>
 80165d8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80165dc:	b9d5      	cbnz	r5, 8016614 <__sfp+0x64>
 80165de:	4b16      	ldr	r3, [pc, #88]	; (8016638 <__sfp+0x88>)
 80165e0:	60e3      	str	r3, [r4, #12]
 80165e2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80165e6:	6665      	str	r5, [r4, #100]	; 0x64
 80165e8:	f000 f86c 	bl	80166c4 <__retarget_lock_init_recursive>
 80165ec:	f7ff ff96 	bl	801651c <__sfp_lock_release>
 80165f0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80165f4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80165f8:	6025      	str	r5, [r4, #0]
 80165fa:	61a5      	str	r5, [r4, #24]
 80165fc:	2208      	movs	r2, #8
 80165fe:	4629      	mov	r1, r5
 8016600:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016604:	f000 f87f 	bl	8016706 <memset>
 8016608:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801660c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016610:	4620      	mov	r0, r4
 8016612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016614:	3468      	adds	r4, #104	; 0x68
 8016616:	e7d9      	b.n	80165cc <__sfp+0x1c>
 8016618:	2104      	movs	r1, #4
 801661a:	4638      	mov	r0, r7
 801661c:	f7ff ff62 	bl	80164e4 <__sfmoreglue>
 8016620:	4604      	mov	r4, r0
 8016622:	6030      	str	r0, [r6, #0]
 8016624:	2800      	cmp	r0, #0
 8016626:	d1d5      	bne.n	80165d4 <__sfp+0x24>
 8016628:	f7ff ff78 	bl	801651c <__sfp_lock_release>
 801662c:	230c      	movs	r3, #12
 801662e:	603b      	str	r3, [r7, #0]
 8016630:	e7ee      	b.n	8016610 <__sfp+0x60>
 8016632:	bf00      	nop
 8016634:	0801a740 	.word	0x0801a740
 8016638:	ffff0001 	.word	0xffff0001

0801663c <_fwalk_reent>:
 801663c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016640:	4606      	mov	r6, r0
 8016642:	4688      	mov	r8, r1
 8016644:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016648:	2700      	movs	r7, #0
 801664a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801664e:	f1b9 0901 	subs.w	r9, r9, #1
 8016652:	d505      	bpl.n	8016660 <_fwalk_reent+0x24>
 8016654:	6824      	ldr	r4, [r4, #0]
 8016656:	2c00      	cmp	r4, #0
 8016658:	d1f7      	bne.n	801664a <_fwalk_reent+0xe>
 801665a:	4638      	mov	r0, r7
 801665c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016660:	89ab      	ldrh	r3, [r5, #12]
 8016662:	2b01      	cmp	r3, #1
 8016664:	d907      	bls.n	8016676 <_fwalk_reent+0x3a>
 8016666:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801666a:	3301      	adds	r3, #1
 801666c:	d003      	beq.n	8016676 <_fwalk_reent+0x3a>
 801666e:	4629      	mov	r1, r5
 8016670:	4630      	mov	r0, r6
 8016672:	47c0      	blx	r8
 8016674:	4307      	orrs	r7, r0
 8016676:	3568      	adds	r5, #104	; 0x68
 8016678:	e7e9      	b.n	801664e <_fwalk_reent+0x12>
	...

0801667c <__libc_init_array>:
 801667c:	b570      	push	{r4, r5, r6, lr}
 801667e:	4d0d      	ldr	r5, [pc, #52]	; (80166b4 <__libc_init_array+0x38>)
 8016680:	4c0d      	ldr	r4, [pc, #52]	; (80166b8 <__libc_init_array+0x3c>)
 8016682:	1b64      	subs	r4, r4, r5
 8016684:	10a4      	asrs	r4, r4, #2
 8016686:	2600      	movs	r6, #0
 8016688:	42a6      	cmp	r6, r4
 801668a:	d109      	bne.n	80166a0 <__libc_init_array+0x24>
 801668c:	4d0b      	ldr	r5, [pc, #44]	; (80166bc <__libc_init_array+0x40>)
 801668e:	4c0c      	ldr	r4, [pc, #48]	; (80166c0 <__libc_init_array+0x44>)
 8016690:	f001 f802 	bl	8017698 <_init>
 8016694:	1b64      	subs	r4, r4, r5
 8016696:	10a4      	asrs	r4, r4, #2
 8016698:	2600      	movs	r6, #0
 801669a:	42a6      	cmp	r6, r4
 801669c:	d105      	bne.n	80166aa <__libc_init_array+0x2e>
 801669e:	bd70      	pop	{r4, r5, r6, pc}
 80166a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80166a4:	4798      	blx	r3
 80166a6:	3601      	adds	r6, #1
 80166a8:	e7ee      	b.n	8016688 <__libc_init_array+0xc>
 80166aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80166ae:	4798      	blx	r3
 80166b0:	3601      	adds	r6, #1
 80166b2:	e7f2      	b.n	801669a <__libc_init_array+0x1e>
 80166b4:	0801a830 	.word	0x0801a830
 80166b8:	0801a830 	.word	0x0801a830
 80166bc:	0801a830 	.word	0x0801a830
 80166c0:	0801a834 	.word	0x0801a834

080166c4 <__retarget_lock_init_recursive>:
 80166c4:	4770      	bx	lr

080166c6 <__retarget_lock_acquire_recursive>:
 80166c6:	4770      	bx	lr

080166c8 <__retarget_lock_release_recursive>:
 80166c8:	4770      	bx	lr

080166ca <memcmp>:
 80166ca:	b510      	push	{r4, lr}
 80166cc:	3901      	subs	r1, #1
 80166ce:	4402      	add	r2, r0
 80166d0:	4290      	cmp	r0, r2
 80166d2:	d101      	bne.n	80166d8 <memcmp+0xe>
 80166d4:	2000      	movs	r0, #0
 80166d6:	e005      	b.n	80166e4 <memcmp+0x1a>
 80166d8:	7803      	ldrb	r3, [r0, #0]
 80166da:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80166de:	42a3      	cmp	r3, r4
 80166e0:	d001      	beq.n	80166e6 <memcmp+0x1c>
 80166e2:	1b18      	subs	r0, r3, r4
 80166e4:	bd10      	pop	{r4, pc}
 80166e6:	3001      	adds	r0, #1
 80166e8:	e7f2      	b.n	80166d0 <memcmp+0x6>

080166ea <memcpy>:
 80166ea:	440a      	add	r2, r1
 80166ec:	4291      	cmp	r1, r2
 80166ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80166f2:	d100      	bne.n	80166f6 <memcpy+0xc>
 80166f4:	4770      	bx	lr
 80166f6:	b510      	push	{r4, lr}
 80166f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80166fc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016700:	4291      	cmp	r1, r2
 8016702:	d1f9      	bne.n	80166f8 <memcpy+0xe>
 8016704:	bd10      	pop	{r4, pc}

08016706 <memset>:
 8016706:	4402      	add	r2, r0
 8016708:	4603      	mov	r3, r0
 801670a:	4293      	cmp	r3, r2
 801670c:	d100      	bne.n	8016710 <memset+0xa>
 801670e:	4770      	bx	lr
 8016710:	f803 1b01 	strb.w	r1, [r3], #1
 8016714:	e7f9      	b.n	801670a <memset+0x4>
	...

08016718 <sbrk_aligned>:
 8016718:	b570      	push	{r4, r5, r6, lr}
 801671a:	4e0e      	ldr	r6, [pc, #56]	; (8016754 <sbrk_aligned+0x3c>)
 801671c:	460c      	mov	r4, r1
 801671e:	6831      	ldr	r1, [r6, #0]
 8016720:	4605      	mov	r5, r0
 8016722:	b911      	cbnz	r1, 801672a <sbrk_aligned+0x12>
 8016724:	f000 f94c 	bl	80169c0 <_sbrk_r>
 8016728:	6030      	str	r0, [r6, #0]
 801672a:	4621      	mov	r1, r4
 801672c:	4628      	mov	r0, r5
 801672e:	f000 f947 	bl	80169c0 <_sbrk_r>
 8016732:	1c43      	adds	r3, r0, #1
 8016734:	d00a      	beq.n	801674c <sbrk_aligned+0x34>
 8016736:	1cc4      	adds	r4, r0, #3
 8016738:	f024 0403 	bic.w	r4, r4, #3
 801673c:	42a0      	cmp	r0, r4
 801673e:	d007      	beq.n	8016750 <sbrk_aligned+0x38>
 8016740:	1a21      	subs	r1, r4, r0
 8016742:	4628      	mov	r0, r5
 8016744:	f000 f93c 	bl	80169c0 <_sbrk_r>
 8016748:	3001      	adds	r0, #1
 801674a:	d101      	bne.n	8016750 <sbrk_aligned+0x38>
 801674c:	f04f 34ff 	mov.w	r4, #4294967295
 8016750:	4620      	mov	r0, r4
 8016752:	bd70      	pop	{r4, r5, r6, pc}
 8016754:	2000f3a0 	.word	0x2000f3a0

08016758 <_malloc_r>:
 8016758:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801675c:	1ccd      	adds	r5, r1, #3
 801675e:	f025 0503 	bic.w	r5, r5, #3
 8016762:	3508      	adds	r5, #8
 8016764:	2d0c      	cmp	r5, #12
 8016766:	bf38      	it	cc
 8016768:	250c      	movcc	r5, #12
 801676a:	2d00      	cmp	r5, #0
 801676c:	4607      	mov	r7, r0
 801676e:	db01      	blt.n	8016774 <_malloc_r+0x1c>
 8016770:	42a9      	cmp	r1, r5
 8016772:	d905      	bls.n	8016780 <_malloc_r+0x28>
 8016774:	230c      	movs	r3, #12
 8016776:	603b      	str	r3, [r7, #0]
 8016778:	2600      	movs	r6, #0
 801677a:	4630      	mov	r0, r6
 801677c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016780:	4e2e      	ldr	r6, [pc, #184]	; (801683c <_malloc_r+0xe4>)
 8016782:	f000 fa9f 	bl	8016cc4 <__malloc_lock>
 8016786:	6833      	ldr	r3, [r6, #0]
 8016788:	461c      	mov	r4, r3
 801678a:	bb34      	cbnz	r4, 80167da <_malloc_r+0x82>
 801678c:	4629      	mov	r1, r5
 801678e:	4638      	mov	r0, r7
 8016790:	f7ff ffc2 	bl	8016718 <sbrk_aligned>
 8016794:	1c43      	adds	r3, r0, #1
 8016796:	4604      	mov	r4, r0
 8016798:	d14d      	bne.n	8016836 <_malloc_r+0xde>
 801679a:	6834      	ldr	r4, [r6, #0]
 801679c:	4626      	mov	r6, r4
 801679e:	2e00      	cmp	r6, #0
 80167a0:	d140      	bne.n	8016824 <_malloc_r+0xcc>
 80167a2:	6823      	ldr	r3, [r4, #0]
 80167a4:	4631      	mov	r1, r6
 80167a6:	4638      	mov	r0, r7
 80167a8:	eb04 0803 	add.w	r8, r4, r3
 80167ac:	f000 f908 	bl	80169c0 <_sbrk_r>
 80167b0:	4580      	cmp	r8, r0
 80167b2:	d13a      	bne.n	801682a <_malloc_r+0xd2>
 80167b4:	6821      	ldr	r1, [r4, #0]
 80167b6:	3503      	adds	r5, #3
 80167b8:	1a6d      	subs	r5, r5, r1
 80167ba:	f025 0503 	bic.w	r5, r5, #3
 80167be:	3508      	adds	r5, #8
 80167c0:	2d0c      	cmp	r5, #12
 80167c2:	bf38      	it	cc
 80167c4:	250c      	movcc	r5, #12
 80167c6:	4629      	mov	r1, r5
 80167c8:	4638      	mov	r0, r7
 80167ca:	f7ff ffa5 	bl	8016718 <sbrk_aligned>
 80167ce:	3001      	adds	r0, #1
 80167d0:	d02b      	beq.n	801682a <_malloc_r+0xd2>
 80167d2:	6823      	ldr	r3, [r4, #0]
 80167d4:	442b      	add	r3, r5
 80167d6:	6023      	str	r3, [r4, #0]
 80167d8:	e00e      	b.n	80167f8 <_malloc_r+0xa0>
 80167da:	6822      	ldr	r2, [r4, #0]
 80167dc:	1b52      	subs	r2, r2, r5
 80167de:	d41e      	bmi.n	801681e <_malloc_r+0xc6>
 80167e0:	2a0b      	cmp	r2, #11
 80167e2:	d916      	bls.n	8016812 <_malloc_r+0xba>
 80167e4:	1961      	adds	r1, r4, r5
 80167e6:	42a3      	cmp	r3, r4
 80167e8:	6025      	str	r5, [r4, #0]
 80167ea:	bf18      	it	ne
 80167ec:	6059      	strne	r1, [r3, #4]
 80167ee:	6863      	ldr	r3, [r4, #4]
 80167f0:	bf08      	it	eq
 80167f2:	6031      	streq	r1, [r6, #0]
 80167f4:	5162      	str	r2, [r4, r5]
 80167f6:	604b      	str	r3, [r1, #4]
 80167f8:	4638      	mov	r0, r7
 80167fa:	f104 060b 	add.w	r6, r4, #11
 80167fe:	f000 fa67 	bl	8016cd0 <__malloc_unlock>
 8016802:	f026 0607 	bic.w	r6, r6, #7
 8016806:	1d23      	adds	r3, r4, #4
 8016808:	1af2      	subs	r2, r6, r3
 801680a:	d0b6      	beq.n	801677a <_malloc_r+0x22>
 801680c:	1b9b      	subs	r3, r3, r6
 801680e:	50a3      	str	r3, [r4, r2]
 8016810:	e7b3      	b.n	801677a <_malloc_r+0x22>
 8016812:	6862      	ldr	r2, [r4, #4]
 8016814:	42a3      	cmp	r3, r4
 8016816:	bf0c      	ite	eq
 8016818:	6032      	streq	r2, [r6, #0]
 801681a:	605a      	strne	r2, [r3, #4]
 801681c:	e7ec      	b.n	80167f8 <_malloc_r+0xa0>
 801681e:	4623      	mov	r3, r4
 8016820:	6864      	ldr	r4, [r4, #4]
 8016822:	e7b2      	b.n	801678a <_malloc_r+0x32>
 8016824:	4634      	mov	r4, r6
 8016826:	6876      	ldr	r6, [r6, #4]
 8016828:	e7b9      	b.n	801679e <_malloc_r+0x46>
 801682a:	230c      	movs	r3, #12
 801682c:	603b      	str	r3, [r7, #0]
 801682e:	4638      	mov	r0, r7
 8016830:	f000 fa4e 	bl	8016cd0 <__malloc_unlock>
 8016834:	e7a1      	b.n	801677a <_malloc_r+0x22>
 8016836:	6025      	str	r5, [r4, #0]
 8016838:	e7de      	b.n	80167f8 <_malloc_r+0xa0>
 801683a:	bf00      	nop
 801683c:	2000f39c 	.word	0x2000f39c

08016840 <iprintf>:
 8016840:	b40f      	push	{r0, r1, r2, r3}
 8016842:	4b0a      	ldr	r3, [pc, #40]	; (801686c <iprintf+0x2c>)
 8016844:	b513      	push	{r0, r1, r4, lr}
 8016846:	681c      	ldr	r4, [r3, #0]
 8016848:	b124      	cbz	r4, 8016854 <iprintf+0x14>
 801684a:	69a3      	ldr	r3, [r4, #24]
 801684c:	b913      	cbnz	r3, 8016854 <iprintf+0x14>
 801684e:	4620      	mov	r0, r4
 8016850:	f7ff fe76 	bl	8016540 <__sinit>
 8016854:	ab05      	add	r3, sp, #20
 8016856:	9a04      	ldr	r2, [sp, #16]
 8016858:	68a1      	ldr	r1, [r4, #8]
 801685a:	9301      	str	r3, [sp, #4]
 801685c:	4620      	mov	r0, r4
 801685e:	f000 fab3 	bl	8016dc8 <_vfiprintf_r>
 8016862:	b002      	add	sp, #8
 8016864:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016868:	b004      	add	sp, #16
 801686a:	4770      	bx	lr
 801686c:	20000034 	.word	0x20000034

08016870 <rand>:
 8016870:	4b16      	ldr	r3, [pc, #88]	; (80168cc <rand+0x5c>)
 8016872:	b510      	push	{r4, lr}
 8016874:	681c      	ldr	r4, [r3, #0]
 8016876:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016878:	b9b3      	cbnz	r3, 80168a8 <rand+0x38>
 801687a:	2018      	movs	r0, #24
 801687c:	f000 fa1a 	bl	8016cb4 <malloc>
 8016880:	63a0      	str	r0, [r4, #56]	; 0x38
 8016882:	b928      	cbnz	r0, 8016890 <rand+0x20>
 8016884:	4602      	mov	r2, r0
 8016886:	4b12      	ldr	r3, [pc, #72]	; (80168d0 <rand+0x60>)
 8016888:	4812      	ldr	r0, [pc, #72]	; (80168d4 <rand+0x64>)
 801688a:	214e      	movs	r1, #78	; 0x4e
 801688c:	f000 f8fe 	bl	8016a8c <__assert_func>
 8016890:	4a11      	ldr	r2, [pc, #68]	; (80168d8 <rand+0x68>)
 8016892:	4b12      	ldr	r3, [pc, #72]	; (80168dc <rand+0x6c>)
 8016894:	e9c0 2300 	strd	r2, r3, [r0]
 8016898:	4b11      	ldr	r3, [pc, #68]	; (80168e0 <rand+0x70>)
 801689a:	6083      	str	r3, [r0, #8]
 801689c:	230b      	movs	r3, #11
 801689e:	8183      	strh	r3, [r0, #12]
 80168a0:	2201      	movs	r2, #1
 80168a2:	2300      	movs	r3, #0
 80168a4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80168a8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80168aa:	4a0e      	ldr	r2, [pc, #56]	; (80168e4 <rand+0x74>)
 80168ac:	6920      	ldr	r0, [r4, #16]
 80168ae:	6963      	ldr	r3, [r4, #20]
 80168b0:	490d      	ldr	r1, [pc, #52]	; (80168e8 <rand+0x78>)
 80168b2:	4342      	muls	r2, r0
 80168b4:	fb01 2203 	mla	r2, r1, r3, r2
 80168b8:	fba0 0101 	umull	r0, r1, r0, r1
 80168bc:	1c43      	adds	r3, r0, #1
 80168be:	eb42 0001 	adc.w	r0, r2, r1
 80168c2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80168c6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80168ca:	bd10      	pop	{r4, pc}
 80168cc:	20000034 	.word	0x20000034
 80168d0:	0801a744 	.word	0x0801a744
 80168d4:	0801a75b 	.word	0x0801a75b
 80168d8:	abcd330e 	.word	0xabcd330e
 80168dc:	e66d1234 	.word	0xe66d1234
 80168e0:	0005deec 	.word	0x0005deec
 80168e4:	5851f42d 	.word	0x5851f42d
 80168e8:	4c957f2d 	.word	0x4c957f2d

080168ec <cleanup_glue>:
 80168ec:	b538      	push	{r3, r4, r5, lr}
 80168ee:	460c      	mov	r4, r1
 80168f0:	6809      	ldr	r1, [r1, #0]
 80168f2:	4605      	mov	r5, r0
 80168f4:	b109      	cbz	r1, 80168fa <cleanup_glue+0xe>
 80168f6:	f7ff fff9 	bl	80168ec <cleanup_glue>
 80168fa:	4621      	mov	r1, r4
 80168fc:	4628      	mov	r0, r5
 80168fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016902:	f000 b9eb 	b.w	8016cdc <_free_r>
	...

08016908 <_reclaim_reent>:
 8016908:	4b2c      	ldr	r3, [pc, #176]	; (80169bc <_reclaim_reent+0xb4>)
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	4283      	cmp	r3, r0
 801690e:	b570      	push	{r4, r5, r6, lr}
 8016910:	4604      	mov	r4, r0
 8016912:	d051      	beq.n	80169b8 <_reclaim_reent+0xb0>
 8016914:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016916:	b143      	cbz	r3, 801692a <_reclaim_reent+0x22>
 8016918:	68db      	ldr	r3, [r3, #12]
 801691a:	2b00      	cmp	r3, #0
 801691c:	d14a      	bne.n	80169b4 <_reclaim_reent+0xac>
 801691e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016920:	6819      	ldr	r1, [r3, #0]
 8016922:	b111      	cbz	r1, 801692a <_reclaim_reent+0x22>
 8016924:	4620      	mov	r0, r4
 8016926:	f000 f9d9 	bl	8016cdc <_free_r>
 801692a:	6961      	ldr	r1, [r4, #20]
 801692c:	b111      	cbz	r1, 8016934 <_reclaim_reent+0x2c>
 801692e:	4620      	mov	r0, r4
 8016930:	f000 f9d4 	bl	8016cdc <_free_r>
 8016934:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016936:	b111      	cbz	r1, 801693e <_reclaim_reent+0x36>
 8016938:	4620      	mov	r0, r4
 801693a:	f000 f9cf 	bl	8016cdc <_free_r>
 801693e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016940:	b111      	cbz	r1, 8016948 <_reclaim_reent+0x40>
 8016942:	4620      	mov	r0, r4
 8016944:	f000 f9ca 	bl	8016cdc <_free_r>
 8016948:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 801694a:	b111      	cbz	r1, 8016952 <_reclaim_reent+0x4a>
 801694c:	4620      	mov	r0, r4
 801694e:	f000 f9c5 	bl	8016cdc <_free_r>
 8016952:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016954:	b111      	cbz	r1, 801695c <_reclaim_reent+0x54>
 8016956:	4620      	mov	r0, r4
 8016958:	f000 f9c0 	bl	8016cdc <_free_r>
 801695c:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801695e:	b111      	cbz	r1, 8016966 <_reclaim_reent+0x5e>
 8016960:	4620      	mov	r0, r4
 8016962:	f000 f9bb 	bl	8016cdc <_free_r>
 8016966:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016968:	b111      	cbz	r1, 8016970 <_reclaim_reent+0x68>
 801696a:	4620      	mov	r0, r4
 801696c:	f000 f9b6 	bl	8016cdc <_free_r>
 8016970:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016972:	b111      	cbz	r1, 801697a <_reclaim_reent+0x72>
 8016974:	4620      	mov	r0, r4
 8016976:	f000 f9b1 	bl	8016cdc <_free_r>
 801697a:	69a3      	ldr	r3, [r4, #24]
 801697c:	b1e3      	cbz	r3, 80169b8 <_reclaim_reent+0xb0>
 801697e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8016980:	4620      	mov	r0, r4
 8016982:	4798      	blx	r3
 8016984:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016986:	b1b9      	cbz	r1, 80169b8 <_reclaim_reent+0xb0>
 8016988:	4620      	mov	r0, r4
 801698a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801698e:	f7ff bfad 	b.w	80168ec <cleanup_glue>
 8016992:	5949      	ldr	r1, [r1, r5]
 8016994:	b941      	cbnz	r1, 80169a8 <_reclaim_reent+0xa0>
 8016996:	3504      	adds	r5, #4
 8016998:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801699a:	2d80      	cmp	r5, #128	; 0x80
 801699c:	68d9      	ldr	r1, [r3, #12]
 801699e:	d1f8      	bne.n	8016992 <_reclaim_reent+0x8a>
 80169a0:	4620      	mov	r0, r4
 80169a2:	f000 f99b 	bl	8016cdc <_free_r>
 80169a6:	e7ba      	b.n	801691e <_reclaim_reent+0x16>
 80169a8:	680e      	ldr	r6, [r1, #0]
 80169aa:	4620      	mov	r0, r4
 80169ac:	f000 f996 	bl	8016cdc <_free_r>
 80169b0:	4631      	mov	r1, r6
 80169b2:	e7ef      	b.n	8016994 <_reclaim_reent+0x8c>
 80169b4:	2500      	movs	r5, #0
 80169b6:	e7ef      	b.n	8016998 <_reclaim_reent+0x90>
 80169b8:	bd70      	pop	{r4, r5, r6, pc}
 80169ba:	bf00      	nop
 80169bc:	20000034 	.word	0x20000034

080169c0 <_sbrk_r>:
 80169c0:	b538      	push	{r3, r4, r5, lr}
 80169c2:	4d06      	ldr	r5, [pc, #24]	; (80169dc <_sbrk_r+0x1c>)
 80169c4:	2300      	movs	r3, #0
 80169c6:	4604      	mov	r4, r0
 80169c8:	4608      	mov	r0, r1
 80169ca:	602b      	str	r3, [r5, #0]
 80169cc:	f7ea fb56 	bl	800107c <_sbrk>
 80169d0:	1c43      	adds	r3, r0, #1
 80169d2:	d102      	bne.n	80169da <_sbrk_r+0x1a>
 80169d4:	682b      	ldr	r3, [r5, #0]
 80169d6:	b103      	cbz	r3, 80169da <_sbrk_r+0x1a>
 80169d8:	6023      	str	r3, [r4, #0]
 80169da:	bd38      	pop	{r3, r4, r5, pc}
 80169dc:	2000f3a4 	.word	0x2000f3a4

080169e0 <__sread>:
 80169e0:	b510      	push	{r4, lr}
 80169e2:	460c      	mov	r4, r1
 80169e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169e8:	f000 fcb2 	bl	8017350 <_read_r>
 80169ec:	2800      	cmp	r0, #0
 80169ee:	bfab      	itete	ge
 80169f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80169f2:	89a3      	ldrhlt	r3, [r4, #12]
 80169f4:	181b      	addge	r3, r3, r0
 80169f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80169fa:	bfac      	ite	ge
 80169fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80169fe:	81a3      	strhlt	r3, [r4, #12]
 8016a00:	bd10      	pop	{r4, pc}

08016a02 <__swrite>:
 8016a02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a06:	461f      	mov	r7, r3
 8016a08:	898b      	ldrh	r3, [r1, #12]
 8016a0a:	05db      	lsls	r3, r3, #23
 8016a0c:	4605      	mov	r5, r0
 8016a0e:	460c      	mov	r4, r1
 8016a10:	4616      	mov	r6, r2
 8016a12:	d505      	bpl.n	8016a20 <__swrite+0x1e>
 8016a14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a18:	2302      	movs	r3, #2
 8016a1a:	2200      	movs	r2, #0
 8016a1c:	f000 f938 	bl	8016c90 <_lseek_r>
 8016a20:	89a3      	ldrh	r3, [r4, #12]
 8016a22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016a26:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016a2a:	81a3      	strh	r3, [r4, #12]
 8016a2c:	4632      	mov	r2, r6
 8016a2e:	463b      	mov	r3, r7
 8016a30:	4628      	mov	r0, r5
 8016a32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016a36:	f000 b817 	b.w	8016a68 <_write_r>

08016a3a <__sseek>:
 8016a3a:	b510      	push	{r4, lr}
 8016a3c:	460c      	mov	r4, r1
 8016a3e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a42:	f000 f925 	bl	8016c90 <_lseek_r>
 8016a46:	1c43      	adds	r3, r0, #1
 8016a48:	89a3      	ldrh	r3, [r4, #12]
 8016a4a:	bf15      	itete	ne
 8016a4c:	6560      	strne	r0, [r4, #84]	; 0x54
 8016a4e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016a52:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016a56:	81a3      	strheq	r3, [r4, #12]
 8016a58:	bf18      	it	ne
 8016a5a:	81a3      	strhne	r3, [r4, #12]
 8016a5c:	bd10      	pop	{r4, pc}

08016a5e <__sclose>:
 8016a5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016a62:	f000 b831 	b.w	8016ac8 <_close_r>
	...

08016a68 <_write_r>:
 8016a68:	b538      	push	{r3, r4, r5, lr}
 8016a6a:	4d07      	ldr	r5, [pc, #28]	; (8016a88 <_write_r+0x20>)
 8016a6c:	4604      	mov	r4, r0
 8016a6e:	4608      	mov	r0, r1
 8016a70:	4611      	mov	r1, r2
 8016a72:	2200      	movs	r2, #0
 8016a74:	602a      	str	r2, [r5, #0]
 8016a76:	461a      	mov	r2, r3
 8016a78:	f7ea faaf 	bl	8000fda <_write>
 8016a7c:	1c43      	adds	r3, r0, #1
 8016a7e:	d102      	bne.n	8016a86 <_write_r+0x1e>
 8016a80:	682b      	ldr	r3, [r5, #0]
 8016a82:	b103      	cbz	r3, 8016a86 <_write_r+0x1e>
 8016a84:	6023      	str	r3, [r4, #0]
 8016a86:	bd38      	pop	{r3, r4, r5, pc}
 8016a88:	2000f3a4 	.word	0x2000f3a4

08016a8c <__assert_func>:
 8016a8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016a8e:	4614      	mov	r4, r2
 8016a90:	461a      	mov	r2, r3
 8016a92:	4b09      	ldr	r3, [pc, #36]	; (8016ab8 <__assert_func+0x2c>)
 8016a94:	681b      	ldr	r3, [r3, #0]
 8016a96:	4605      	mov	r5, r0
 8016a98:	68d8      	ldr	r0, [r3, #12]
 8016a9a:	b14c      	cbz	r4, 8016ab0 <__assert_func+0x24>
 8016a9c:	4b07      	ldr	r3, [pc, #28]	; (8016abc <__assert_func+0x30>)
 8016a9e:	9100      	str	r1, [sp, #0]
 8016aa0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016aa4:	4906      	ldr	r1, [pc, #24]	; (8016ac0 <__assert_func+0x34>)
 8016aa6:	462b      	mov	r3, r5
 8016aa8:	f000 f8e0 	bl	8016c6c <fiprintf>
 8016aac:	f000 fd22 	bl	80174f4 <abort>
 8016ab0:	4b04      	ldr	r3, [pc, #16]	; (8016ac4 <__assert_func+0x38>)
 8016ab2:	461c      	mov	r4, r3
 8016ab4:	e7f3      	b.n	8016a9e <__assert_func+0x12>
 8016ab6:	bf00      	nop
 8016ab8:	20000034 	.word	0x20000034
 8016abc:	0801a7b6 	.word	0x0801a7b6
 8016ac0:	0801a7c3 	.word	0x0801a7c3
 8016ac4:	0801a7f1 	.word	0x0801a7f1

08016ac8 <_close_r>:
 8016ac8:	b538      	push	{r3, r4, r5, lr}
 8016aca:	4d06      	ldr	r5, [pc, #24]	; (8016ae4 <_close_r+0x1c>)
 8016acc:	2300      	movs	r3, #0
 8016ace:	4604      	mov	r4, r0
 8016ad0:	4608      	mov	r0, r1
 8016ad2:	602b      	str	r3, [r5, #0]
 8016ad4:	f7ea fa9d 	bl	8001012 <_close>
 8016ad8:	1c43      	adds	r3, r0, #1
 8016ada:	d102      	bne.n	8016ae2 <_close_r+0x1a>
 8016adc:	682b      	ldr	r3, [r5, #0]
 8016ade:	b103      	cbz	r3, 8016ae2 <_close_r+0x1a>
 8016ae0:	6023      	str	r3, [r4, #0]
 8016ae2:	bd38      	pop	{r3, r4, r5, pc}
 8016ae4:	2000f3a4 	.word	0x2000f3a4

08016ae8 <__sflush_r>:
 8016ae8:	898a      	ldrh	r2, [r1, #12]
 8016aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016aee:	4605      	mov	r5, r0
 8016af0:	0710      	lsls	r0, r2, #28
 8016af2:	460c      	mov	r4, r1
 8016af4:	d458      	bmi.n	8016ba8 <__sflush_r+0xc0>
 8016af6:	684b      	ldr	r3, [r1, #4]
 8016af8:	2b00      	cmp	r3, #0
 8016afa:	dc05      	bgt.n	8016b08 <__sflush_r+0x20>
 8016afc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016afe:	2b00      	cmp	r3, #0
 8016b00:	dc02      	bgt.n	8016b08 <__sflush_r+0x20>
 8016b02:	2000      	movs	r0, #0
 8016b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016b0a:	2e00      	cmp	r6, #0
 8016b0c:	d0f9      	beq.n	8016b02 <__sflush_r+0x1a>
 8016b0e:	2300      	movs	r3, #0
 8016b10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016b14:	682f      	ldr	r7, [r5, #0]
 8016b16:	602b      	str	r3, [r5, #0]
 8016b18:	d032      	beq.n	8016b80 <__sflush_r+0x98>
 8016b1a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016b1c:	89a3      	ldrh	r3, [r4, #12]
 8016b1e:	075a      	lsls	r2, r3, #29
 8016b20:	d505      	bpl.n	8016b2e <__sflush_r+0x46>
 8016b22:	6863      	ldr	r3, [r4, #4]
 8016b24:	1ac0      	subs	r0, r0, r3
 8016b26:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016b28:	b10b      	cbz	r3, 8016b2e <__sflush_r+0x46>
 8016b2a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016b2c:	1ac0      	subs	r0, r0, r3
 8016b2e:	2300      	movs	r3, #0
 8016b30:	4602      	mov	r2, r0
 8016b32:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016b34:	6a21      	ldr	r1, [r4, #32]
 8016b36:	4628      	mov	r0, r5
 8016b38:	47b0      	blx	r6
 8016b3a:	1c43      	adds	r3, r0, #1
 8016b3c:	89a3      	ldrh	r3, [r4, #12]
 8016b3e:	d106      	bne.n	8016b4e <__sflush_r+0x66>
 8016b40:	6829      	ldr	r1, [r5, #0]
 8016b42:	291d      	cmp	r1, #29
 8016b44:	d82c      	bhi.n	8016ba0 <__sflush_r+0xb8>
 8016b46:	4a2a      	ldr	r2, [pc, #168]	; (8016bf0 <__sflush_r+0x108>)
 8016b48:	40ca      	lsrs	r2, r1
 8016b4a:	07d6      	lsls	r6, r2, #31
 8016b4c:	d528      	bpl.n	8016ba0 <__sflush_r+0xb8>
 8016b4e:	2200      	movs	r2, #0
 8016b50:	6062      	str	r2, [r4, #4]
 8016b52:	04d9      	lsls	r1, r3, #19
 8016b54:	6922      	ldr	r2, [r4, #16]
 8016b56:	6022      	str	r2, [r4, #0]
 8016b58:	d504      	bpl.n	8016b64 <__sflush_r+0x7c>
 8016b5a:	1c42      	adds	r2, r0, #1
 8016b5c:	d101      	bne.n	8016b62 <__sflush_r+0x7a>
 8016b5e:	682b      	ldr	r3, [r5, #0]
 8016b60:	b903      	cbnz	r3, 8016b64 <__sflush_r+0x7c>
 8016b62:	6560      	str	r0, [r4, #84]	; 0x54
 8016b64:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016b66:	602f      	str	r7, [r5, #0]
 8016b68:	2900      	cmp	r1, #0
 8016b6a:	d0ca      	beq.n	8016b02 <__sflush_r+0x1a>
 8016b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016b70:	4299      	cmp	r1, r3
 8016b72:	d002      	beq.n	8016b7a <__sflush_r+0x92>
 8016b74:	4628      	mov	r0, r5
 8016b76:	f000 f8b1 	bl	8016cdc <_free_r>
 8016b7a:	2000      	movs	r0, #0
 8016b7c:	6360      	str	r0, [r4, #52]	; 0x34
 8016b7e:	e7c1      	b.n	8016b04 <__sflush_r+0x1c>
 8016b80:	6a21      	ldr	r1, [r4, #32]
 8016b82:	2301      	movs	r3, #1
 8016b84:	4628      	mov	r0, r5
 8016b86:	47b0      	blx	r6
 8016b88:	1c41      	adds	r1, r0, #1
 8016b8a:	d1c7      	bne.n	8016b1c <__sflush_r+0x34>
 8016b8c:	682b      	ldr	r3, [r5, #0]
 8016b8e:	2b00      	cmp	r3, #0
 8016b90:	d0c4      	beq.n	8016b1c <__sflush_r+0x34>
 8016b92:	2b1d      	cmp	r3, #29
 8016b94:	d001      	beq.n	8016b9a <__sflush_r+0xb2>
 8016b96:	2b16      	cmp	r3, #22
 8016b98:	d101      	bne.n	8016b9e <__sflush_r+0xb6>
 8016b9a:	602f      	str	r7, [r5, #0]
 8016b9c:	e7b1      	b.n	8016b02 <__sflush_r+0x1a>
 8016b9e:	89a3      	ldrh	r3, [r4, #12]
 8016ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016ba4:	81a3      	strh	r3, [r4, #12]
 8016ba6:	e7ad      	b.n	8016b04 <__sflush_r+0x1c>
 8016ba8:	690f      	ldr	r7, [r1, #16]
 8016baa:	2f00      	cmp	r7, #0
 8016bac:	d0a9      	beq.n	8016b02 <__sflush_r+0x1a>
 8016bae:	0793      	lsls	r3, r2, #30
 8016bb0:	680e      	ldr	r6, [r1, #0]
 8016bb2:	bf08      	it	eq
 8016bb4:	694b      	ldreq	r3, [r1, #20]
 8016bb6:	600f      	str	r7, [r1, #0]
 8016bb8:	bf18      	it	ne
 8016bba:	2300      	movne	r3, #0
 8016bbc:	eba6 0807 	sub.w	r8, r6, r7
 8016bc0:	608b      	str	r3, [r1, #8]
 8016bc2:	f1b8 0f00 	cmp.w	r8, #0
 8016bc6:	dd9c      	ble.n	8016b02 <__sflush_r+0x1a>
 8016bc8:	6a21      	ldr	r1, [r4, #32]
 8016bca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016bcc:	4643      	mov	r3, r8
 8016bce:	463a      	mov	r2, r7
 8016bd0:	4628      	mov	r0, r5
 8016bd2:	47b0      	blx	r6
 8016bd4:	2800      	cmp	r0, #0
 8016bd6:	dc06      	bgt.n	8016be6 <__sflush_r+0xfe>
 8016bd8:	89a3      	ldrh	r3, [r4, #12]
 8016bda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016bde:	81a3      	strh	r3, [r4, #12]
 8016be0:	f04f 30ff 	mov.w	r0, #4294967295
 8016be4:	e78e      	b.n	8016b04 <__sflush_r+0x1c>
 8016be6:	4407      	add	r7, r0
 8016be8:	eba8 0800 	sub.w	r8, r8, r0
 8016bec:	e7e9      	b.n	8016bc2 <__sflush_r+0xda>
 8016bee:	bf00      	nop
 8016bf0:	20400001 	.word	0x20400001

08016bf4 <_fflush_r>:
 8016bf4:	b538      	push	{r3, r4, r5, lr}
 8016bf6:	690b      	ldr	r3, [r1, #16]
 8016bf8:	4605      	mov	r5, r0
 8016bfa:	460c      	mov	r4, r1
 8016bfc:	b913      	cbnz	r3, 8016c04 <_fflush_r+0x10>
 8016bfe:	2500      	movs	r5, #0
 8016c00:	4628      	mov	r0, r5
 8016c02:	bd38      	pop	{r3, r4, r5, pc}
 8016c04:	b118      	cbz	r0, 8016c0e <_fflush_r+0x1a>
 8016c06:	6983      	ldr	r3, [r0, #24]
 8016c08:	b90b      	cbnz	r3, 8016c0e <_fflush_r+0x1a>
 8016c0a:	f7ff fc99 	bl	8016540 <__sinit>
 8016c0e:	4b14      	ldr	r3, [pc, #80]	; (8016c60 <_fflush_r+0x6c>)
 8016c10:	429c      	cmp	r4, r3
 8016c12:	d11b      	bne.n	8016c4c <_fflush_r+0x58>
 8016c14:	686c      	ldr	r4, [r5, #4]
 8016c16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d0ef      	beq.n	8016bfe <_fflush_r+0xa>
 8016c1e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016c20:	07d0      	lsls	r0, r2, #31
 8016c22:	d404      	bmi.n	8016c2e <_fflush_r+0x3a>
 8016c24:	0599      	lsls	r1, r3, #22
 8016c26:	d402      	bmi.n	8016c2e <_fflush_r+0x3a>
 8016c28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c2a:	f7ff fd4c 	bl	80166c6 <__retarget_lock_acquire_recursive>
 8016c2e:	4628      	mov	r0, r5
 8016c30:	4621      	mov	r1, r4
 8016c32:	f7ff ff59 	bl	8016ae8 <__sflush_r>
 8016c36:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016c38:	07da      	lsls	r2, r3, #31
 8016c3a:	4605      	mov	r5, r0
 8016c3c:	d4e0      	bmi.n	8016c00 <_fflush_r+0xc>
 8016c3e:	89a3      	ldrh	r3, [r4, #12]
 8016c40:	059b      	lsls	r3, r3, #22
 8016c42:	d4dd      	bmi.n	8016c00 <_fflush_r+0xc>
 8016c44:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016c46:	f7ff fd3f 	bl	80166c8 <__retarget_lock_release_recursive>
 8016c4a:	e7d9      	b.n	8016c00 <_fflush_r+0xc>
 8016c4c:	4b05      	ldr	r3, [pc, #20]	; (8016c64 <_fflush_r+0x70>)
 8016c4e:	429c      	cmp	r4, r3
 8016c50:	d101      	bne.n	8016c56 <_fflush_r+0x62>
 8016c52:	68ac      	ldr	r4, [r5, #8]
 8016c54:	e7df      	b.n	8016c16 <_fflush_r+0x22>
 8016c56:	4b04      	ldr	r3, [pc, #16]	; (8016c68 <_fflush_r+0x74>)
 8016c58:	429c      	cmp	r4, r3
 8016c5a:	bf08      	it	eq
 8016c5c:	68ec      	ldreq	r4, [r5, #12]
 8016c5e:	e7da      	b.n	8016c16 <_fflush_r+0x22>
 8016c60:	0801a700 	.word	0x0801a700
 8016c64:	0801a720 	.word	0x0801a720
 8016c68:	0801a6e0 	.word	0x0801a6e0

08016c6c <fiprintf>:
 8016c6c:	b40e      	push	{r1, r2, r3}
 8016c6e:	b503      	push	{r0, r1, lr}
 8016c70:	4601      	mov	r1, r0
 8016c72:	ab03      	add	r3, sp, #12
 8016c74:	4805      	ldr	r0, [pc, #20]	; (8016c8c <fiprintf+0x20>)
 8016c76:	f853 2b04 	ldr.w	r2, [r3], #4
 8016c7a:	6800      	ldr	r0, [r0, #0]
 8016c7c:	9301      	str	r3, [sp, #4]
 8016c7e:	f000 f8a3 	bl	8016dc8 <_vfiprintf_r>
 8016c82:	b002      	add	sp, #8
 8016c84:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c88:	b003      	add	sp, #12
 8016c8a:	4770      	bx	lr
 8016c8c:	20000034 	.word	0x20000034

08016c90 <_lseek_r>:
 8016c90:	b538      	push	{r3, r4, r5, lr}
 8016c92:	4d07      	ldr	r5, [pc, #28]	; (8016cb0 <_lseek_r+0x20>)
 8016c94:	4604      	mov	r4, r0
 8016c96:	4608      	mov	r0, r1
 8016c98:	4611      	mov	r1, r2
 8016c9a:	2200      	movs	r2, #0
 8016c9c:	602a      	str	r2, [r5, #0]
 8016c9e:	461a      	mov	r2, r3
 8016ca0:	f7ea f9de 	bl	8001060 <_lseek>
 8016ca4:	1c43      	adds	r3, r0, #1
 8016ca6:	d102      	bne.n	8016cae <_lseek_r+0x1e>
 8016ca8:	682b      	ldr	r3, [r5, #0]
 8016caa:	b103      	cbz	r3, 8016cae <_lseek_r+0x1e>
 8016cac:	6023      	str	r3, [r4, #0]
 8016cae:	bd38      	pop	{r3, r4, r5, pc}
 8016cb0:	2000f3a4 	.word	0x2000f3a4

08016cb4 <malloc>:
 8016cb4:	4b02      	ldr	r3, [pc, #8]	; (8016cc0 <malloc+0xc>)
 8016cb6:	4601      	mov	r1, r0
 8016cb8:	6818      	ldr	r0, [r3, #0]
 8016cba:	f7ff bd4d 	b.w	8016758 <_malloc_r>
 8016cbe:	bf00      	nop
 8016cc0:	20000034 	.word	0x20000034

08016cc4 <__malloc_lock>:
 8016cc4:	4801      	ldr	r0, [pc, #4]	; (8016ccc <__malloc_lock+0x8>)
 8016cc6:	f7ff bcfe 	b.w	80166c6 <__retarget_lock_acquire_recursive>
 8016cca:	bf00      	nop
 8016ccc:	2000f398 	.word	0x2000f398

08016cd0 <__malloc_unlock>:
 8016cd0:	4801      	ldr	r0, [pc, #4]	; (8016cd8 <__malloc_unlock+0x8>)
 8016cd2:	f7ff bcf9 	b.w	80166c8 <__retarget_lock_release_recursive>
 8016cd6:	bf00      	nop
 8016cd8:	2000f398 	.word	0x2000f398

08016cdc <_free_r>:
 8016cdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016cde:	2900      	cmp	r1, #0
 8016ce0:	d044      	beq.n	8016d6c <_free_r+0x90>
 8016ce2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016ce6:	9001      	str	r0, [sp, #4]
 8016ce8:	2b00      	cmp	r3, #0
 8016cea:	f1a1 0404 	sub.w	r4, r1, #4
 8016cee:	bfb8      	it	lt
 8016cf0:	18e4      	addlt	r4, r4, r3
 8016cf2:	f7ff ffe7 	bl	8016cc4 <__malloc_lock>
 8016cf6:	4a1e      	ldr	r2, [pc, #120]	; (8016d70 <_free_r+0x94>)
 8016cf8:	9801      	ldr	r0, [sp, #4]
 8016cfa:	6813      	ldr	r3, [r2, #0]
 8016cfc:	b933      	cbnz	r3, 8016d0c <_free_r+0x30>
 8016cfe:	6063      	str	r3, [r4, #4]
 8016d00:	6014      	str	r4, [r2, #0]
 8016d02:	b003      	add	sp, #12
 8016d04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d08:	f7ff bfe2 	b.w	8016cd0 <__malloc_unlock>
 8016d0c:	42a3      	cmp	r3, r4
 8016d0e:	d908      	bls.n	8016d22 <_free_r+0x46>
 8016d10:	6825      	ldr	r5, [r4, #0]
 8016d12:	1961      	adds	r1, r4, r5
 8016d14:	428b      	cmp	r3, r1
 8016d16:	bf01      	itttt	eq
 8016d18:	6819      	ldreq	r1, [r3, #0]
 8016d1a:	685b      	ldreq	r3, [r3, #4]
 8016d1c:	1949      	addeq	r1, r1, r5
 8016d1e:	6021      	streq	r1, [r4, #0]
 8016d20:	e7ed      	b.n	8016cfe <_free_r+0x22>
 8016d22:	461a      	mov	r2, r3
 8016d24:	685b      	ldr	r3, [r3, #4]
 8016d26:	b10b      	cbz	r3, 8016d2c <_free_r+0x50>
 8016d28:	42a3      	cmp	r3, r4
 8016d2a:	d9fa      	bls.n	8016d22 <_free_r+0x46>
 8016d2c:	6811      	ldr	r1, [r2, #0]
 8016d2e:	1855      	adds	r5, r2, r1
 8016d30:	42a5      	cmp	r5, r4
 8016d32:	d10b      	bne.n	8016d4c <_free_r+0x70>
 8016d34:	6824      	ldr	r4, [r4, #0]
 8016d36:	4421      	add	r1, r4
 8016d38:	1854      	adds	r4, r2, r1
 8016d3a:	42a3      	cmp	r3, r4
 8016d3c:	6011      	str	r1, [r2, #0]
 8016d3e:	d1e0      	bne.n	8016d02 <_free_r+0x26>
 8016d40:	681c      	ldr	r4, [r3, #0]
 8016d42:	685b      	ldr	r3, [r3, #4]
 8016d44:	6053      	str	r3, [r2, #4]
 8016d46:	4421      	add	r1, r4
 8016d48:	6011      	str	r1, [r2, #0]
 8016d4a:	e7da      	b.n	8016d02 <_free_r+0x26>
 8016d4c:	d902      	bls.n	8016d54 <_free_r+0x78>
 8016d4e:	230c      	movs	r3, #12
 8016d50:	6003      	str	r3, [r0, #0]
 8016d52:	e7d6      	b.n	8016d02 <_free_r+0x26>
 8016d54:	6825      	ldr	r5, [r4, #0]
 8016d56:	1961      	adds	r1, r4, r5
 8016d58:	428b      	cmp	r3, r1
 8016d5a:	bf04      	itt	eq
 8016d5c:	6819      	ldreq	r1, [r3, #0]
 8016d5e:	685b      	ldreq	r3, [r3, #4]
 8016d60:	6063      	str	r3, [r4, #4]
 8016d62:	bf04      	itt	eq
 8016d64:	1949      	addeq	r1, r1, r5
 8016d66:	6021      	streq	r1, [r4, #0]
 8016d68:	6054      	str	r4, [r2, #4]
 8016d6a:	e7ca      	b.n	8016d02 <_free_r+0x26>
 8016d6c:	b003      	add	sp, #12
 8016d6e:	bd30      	pop	{r4, r5, pc}
 8016d70:	2000f39c 	.word	0x2000f39c

08016d74 <__sfputc_r>:
 8016d74:	6893      	ldr	r3, [r2, #8]
 8016d76:	3b01      	subs	r3, #1
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	b410      	push	{r4}
 8016d7c:	6093      	str	r3, [r2, #8]
 8016d7e:	da08      	bge.n	8016d92 <__sfputc_r+0x1e>
 8016d80:	6994      	ldr	r4, [r2, #24]
 8016d82:	42a3      	cmp	r3, r4
 8016d84:	db01      	blt.n	8016d8a <__sfputc_r+0x16>
 8016d86:	290a      	cmp	r1, #10
 8016d88:	d103      	bne.n	8016d92 <__sfputc_r+0x1e>
 8016d8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016d8e:	f000 baf1 	b.w	8017374 <__swbuf_r>
 8016d92:	6813      	ldr	r3, [r2, #0]
 8016d94:	1c58      	adds	r0, r3, #1
 8016d96:	6010      	str	r0, [r2, #0]
 8016d98:	7019      	strb	r1, [r3, #0]
 8016d9a:	4608      	mov	r0, r1
 8016d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016da0:	4770      	bx	lr

08016da2 <__sfputs_r>:
 8016da2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016da4:	4606      	mov	r6, r0
 8016da6:	460f      	mov	r7, r1
 8016da8:	4614      	mov	r4, r2
 8016daa:	18d5      	adds	r5, r2, r3
 8016dac:	42ac      	cmp	r4, r5
 8016dae:	d101      	bne.n	8016db4 <__sfputs_r+0x12>
 8016db0:	2000      	movs	r0, #0
 8016db2:	e007      	b.n	8016dc4 <__sfputs_r+0x22>
 8016db4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016db8:	463a      	mov	r2, r7
 8016dba:	4630      	mov	r0, r6
 8016dbc:	f7ff ffda 	bl	8016d74 <__sfputc_r>
 8016dc0:	1c43      	adds	r3, r0, #1
 8016dc2:	d1f3      	bne.n	8016dac <__sfputs_r+0xa>
 8016dc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016dc8 <_vfiprintf_r>:
 8016dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016dcc:	460d      	mov	r5, r1
 8016dce:	b09d      	sub	sp, #116	; 0x74
 8016dd0:	4614      	mov	r4, r2
 8016dd2:	4698      	mov	r8, r3
 8016dd4:	4606      	mov	r6, r0
 8016dd6:	b118      	cbz	r0, 8016de0 <_vfiprintf_r+0x18>
 8016dd8:	6983      	ldr	r3, [r0, #24]
 8016dda:	b90b      	cbnz	r3, 8016de0 <_vfiprintf_r+0x18>
 8016ddc:	f7ff fbb0 	bl	8016540 <__sinit>
 8016de0:	4b89      	ldr	r3, [pc, #548]	; (8017008 <_vfiprintf_r+0x240>)
 8016de2:	429d      	cmp	r5, r3
 8016de4:	d11b      	bne.n	8016e1e <_vfiprintf_r+0x56>
 8016de6:	6875      	ldr	r5, [r6, #4]
 8016de8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016dea:	07d9      	lsls	r1, r3, #31
 8016dec:	d405      	bmi.n	8016dfa <_vfiprintf_r+0x32>
 8016dee:	89ab      	ldrh	r3, [r5, #12]
 8016df0:	059a      	lsls	r2, r3, #22
 8016df2:	d402      	bmi.n	8016dfa <_vfiprintf_r+0x32>
 8016df4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016df6:	f7ff fc66 	bl	80166c6 <__retarget_lock_acquire_recursive>
 8016dfa:	89ab      	ldrh	r3, [r5, #12]
 8016dfc:	071b      	lsls	r3, r3, #28
 8016dfe:	d501      	bpl.n	8016e04 <_vfiprintf_r+0x3c>
 8016e00:	692b      	ldr	r3, [r5, #16]
 8016e02:	b9eb      	cbnz	r3, 8016e40 <_vfiprintf_r+0x78>
 8016e04:	4629      	mov	r1, r5
 8016e06:	4630      	mov	r0, r6
 8016e08:	f000 fb06 	bl	8017418 <__swsetup_r>
 8016e0c:	b1c0      	cbz	r0, 8016e40 <_vfiprintf_r+0x78>
 8016e0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016e10:	07dc      	lsls	r4, r3, #31
 8016e12:	d50e      	bpl.n	8016e32 <_vfiprintf_r+0x6a>
 8016e14:	f04f 30ff 	mov.w	r0, #4294967295
 8016e18:	b01d      	add	sp, #116	; 0x74
 8016e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e1e:	4b7b      	ldr	r3, [pc, #492]	; (801700c <_vfiprintf_r+0x244>)
 8016e20:	429d      	cmp	r5, r3
 8016e22:	d101      	bne.n	8016e28 <_vfiprintf_r+0x60>
 8016e24:	68b5      	ldr	r5, [r6, #8]
 8016e26:	e7df      	b.n	8016de8 <_vfiprintf_r+0x20>
 8016e28:	4b79      	ldr	r3, [pc, #484]	; (8017010 <_vfiprintf_r+0x248>)
 8016e2a:	429d      	cmp	r5, r3
 8016e2c:	bf08      	it	eq
 8016e2e:	68f5      	ldreq	r5, [r6, #12]
 8016e30:	e7da      	b.n	8016de8 <_vfiprintf_r+0x20>
 8016e32:	89ab      	ldrh	r3, [r5, #12]
 8016e34:	0598      	lsls	r0, r3, #22
 8016e36:	d4ed      	bmi.n	8016e14 <_vfiprintf_r+0x4c>
 8016e38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016e3a:	f7ff fc45 	bl	80166c8 <__retarget_lock_release_recursive>
 8016e3e:	e7e9      	b.n	8016e14 <_vfiprintf_r+0x4c>
 8016e40:	2300      	movs	r3, #0
 8016e42:	9309      	str	r3, [sp, #36]	; 0x24
 8016e44:	2320      	movs	r3, #32
 8016e46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8016e4e:	2330      	movs	r3, #48	; 0x30
 8016e50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8017014 <_vfiprintf_r+0x24c>
 8016e54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016e58:	f04f 0901 	mov.w	r9, #1
 8016e5c:	4623      	mov	r3, r4
 8016e5e:	469a      	mov	sl, r3
 8016e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016e64:	b10a      	cbz	r2, 8016e6a <_vfiprintf_r+0xa2>
 8016e66:	2a25      	cmp	r2, #37	; 0x25
 8016e68:	d1f9      	bne.n	8016e5e <_vfiprintf_r+0x96>
 8016e6a:	ebba 0b04 	subs.w	fp, sl, r4
 8016e6e:	d00b      	beq.n	8016e88 <_vfiprintf_r+0xc0>
 8016e70:	465b      	mov	r3, fp
 8016e72:	4622      	mov	r2, r4
 8016e74:	4629      	mov	r1, r5
 8016e76:	4630      	mov	r0, r6
 8016e78:	f7ff ff93 	bl	8016da2 <__sfputs_r>
 8016e7c:	3001      	adds	r0, #1
 8016e7e:	f000 80aa 	beq.w	8016fd6 <_vfiprintf_r+0x20e>
 8016e82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016e84:	445a      	add	r2, fp
 8016e86:	9209      	str	r2, [sp, #36]	; 0x24
 8016e88:	f89a 3000 	ldrb.w	r3, [sl]
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	f000 80a2 	beq.w	8016fd6 <_vfiprintf_r+0x20e>
 8016e92:	2300      	movs	r3, #0
 8016e94:	f04f 32ff 	mov.w	r2, #4294967295
 8016e98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016e9c:	f10a 0a01 	add.w	sl, sl, #1
 8016ea0:	9304      	str	r3, [sp, #16]
 8016ea2:	9307      	str	r3, [sp, #28]
 8016ea4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016ea8:	931a      	str	r3, [sp, #104]	; 0x68
 8016eaa:	4654      	mov	r4, sl
 8016eac:	2205      	movs	r2, #5
 8016eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016eb2:	4858      	ldr	r0, [pc, #352]	; (8017014 <_vfiprintf_r+0x24c>)
 8016eb4:	f7e9 f9c4 	bl	8000240 <memchr>
 8016eb8:	9a04      	ldr	r2, [sp, #16]
 8016eba:	b9d8      	cbnz	r0, 8016ef4 <_vfiprintf_r+0x12c>
 8016ebc:	06d1      	lsls	r1, r2, #27
 8016ebe:	bf44      	itt	mi
 8016ec0:	2320      	movmi	r3, #32
 8016ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ec6:	0713      	lsls	r3, r2, #28
 8016ec8:	bf44      	itt	mi
 8016eca:	232b      	movmi	r3, #43	; 0x2b
 8016ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8016ed4:	2b2a      	cmp	r3, #42	; 0x2a
 8016ed6:	d015      	beq.n	8016f04 <_vfiprintf_r+0x13c>
 8016ed8:	9a07      	ldr	r2, [sp, #28]
 8016eda:	4654      	mov	r4, sl
 8016edc:	2000      	movs	r0, #0
 8016ede:	f04f 0c0a 	mov.w	ip, #10
 8016ee2:	4621      	mov	r1, r4
 8016ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016ee8:	3b30      	subs	r3, #48	; 0x30
 8016eea:	2b09      	cmp	r3, #9
 8016eec:	d94e      	bls.n	8016f8c <_vfiprintf_r+0x1c4>
 8016eee:	b1b0      	cbz	r0, 8016f1e <_vfiprintf_r+0x156>
 8016ef0:	9207      	str	r2, [sp, #28]
 8016ef2:	e014      	b.n	8016f1e <_vfiprintf_r+0x156>
 8016ef4:	eba0 0308 	sub.w	r3, r0, r8
 8016ef8:	fa09 f303 	lsl.w	r3, r9, r3
 8016efc:	4313      	orrs	r3, r2
 8016efe:	9304      	str	r3, [sp, #16]
 8016f00:	46a2      	mov	sl, r4
 8016f02:	e7d2      	b.n	8016eaa <_vfiprintf_r+0xe2>
 8016f04:	9b03      	ldr	r3, [sp, #12]
 8016f06:	1d19      	adds	r1, r3, #4
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	9103      	str	r1, [sp, #12]
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	bfbb      	ittet	lt
 8016f10:	425b      	neglt	r3, r3
 8016f12:	f042 0202 	orrlt.w	r2, r2, #2
 8016f16:	9307      	strge	r3, [sp, #28]
 8016f18:	9307      	strlt	r3, [sp, #28]
 8016f1a:	bfb8      	it	lt
 8016f1c:	9204      	strlt	r2, [sp, #16]
 8016f1e:	7823      	ldrb	r3, [r4, #0]
 8016f20:	2b2e      	cmp	r3, #46	; 0x2e
 8016f22:	d10c      	bne.n	8016f3e <_vfiprintf_r+0x176>
 8016f24:	7863      	ldrb	r3, [r4, #1]
 8016f26:	2b2a      	cmp	r3, #42	; 0x2a
 8016f28:	d135      	bne.n	8016f96 <_vfiprintf_r+0x1ce>
 8016f2a:	9b03      	ldr	r3, [sp, #12]
 8016f2c:	1d1a      	adds	r2, r3, #4
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	9203      	str	r2, [sp, #12]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	bfb8      	it	lt
 8016f36:	f04f 33ff 	movlt.w	r3, #4294967295
 8016f3a:	3402      	adds	r4, #2
 8016f3c:	9305      	str	r3, [sp, #20]
 8016f3e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8017024 <_vfiprintf_r+0x25c>
 8016f42:	7821      	ldrb	r1, [r4, #0]
 8016f44:	2203      	movs	r2, #3
 8016f46:	4650      	mov	r0, sl
 8016f48:	f7e9 f97a 	bl	8000240 <memchr>
 8016f4c:	b140      	cbz	r0, 8016f60 <_vfiprintf_r+0x198>
 8016f4e:	2340      	movs	r3, #64	; 0x40
 8016f50:	eba0 000a 	sub.w	r0, r0, sl
 8016f54:	fa03 f000 	lsl.w	r0, r3, r0
 8016f58:	9b04      	ldr	r3, [sp, #16]
 8016f5a:	4303      	orrs	r3, r0
 8016f5c:	3401      	adds	r4, #1
 8016f5e:	9304      	str	r3, [sp, #16]
 8016f60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016f64:	482c      	ldr	r0, [pc, #176]	; (8017018 <_vfiprintf_r+0x250>)
 8016f66:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016f6a:	2206      	movs	r2, #6
 8016f6c:	f7e9 f968 	bl	8000240 <memchr>
 8016f70:	2800      	cmp	r0, #0
 8016f72:	d03f      	beq.n	8016ff4 <_vfiprintf_r+0x22c>
 8016f74:	4b29      	ldr	r3, [pc, #164]	; (801701c <_vfiprintf_r+0x254>)
 8016f76:	bb1b      	cbnz	r3, 8016fc0 <_vfiprintf_r+0x1f8>
 8016f78:	9b03      	ldr	r3, [sp, #12]
 8016f7a:	3307      	adds	r3, #7
 8016f7c:	f023 0307 	bic.w	r3, r3, #7
 8016f80:	3308      	adds	r3, #8
 8016f82:	9303      	str	r3, [sp, #12]
 8016f84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f86:	443b      	add	r3, r7
 8016f88:	9309      	str	r3, [sp, #36]	; 0x24
 8016f8a:	e767      	b.n	8016e5c <_vfiprintf_r+0x94>
 8016f8c:	fb0c 3202 	mla	r2, ip, r2, r3
 8016f90:	460c      	mov	r4, r1
 8016f92:	2001      	movs	r0, #1
 8016f94:	e7a5      	b.n	8016ee2 <_vfiprintf_r+0x11a>
 8016f96:	2300      	movs	r3, #0
 8016f98:	3401      	adds	r4, #1
 8016f9a:	9305      	str	r3, [sp, #20]
 8016f9c:	4619      	mov	r1, r3
 8016f9e:	f04f 0c0a 	mov.w	ip, #10
 8016fa2:	4620      	mov	r0, r4
 8016fa4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016fa8:	3a30      	subs	r2, #48	; 0x30
 8016faa:	2a09      	cmp	r2, #9
 8016fac:	d903      	bls.n	8016fb6 <_vfiprintf_r+0x1ee>
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d0c5      	beq.n	8016f3e <_vfiprintf_r+0x176>
 8016fb2:	9105      	str	r1, [sp, #20]
 8016fb4:	e7c3      	b.n	8016f3e <_vfiprintf_r+0x176>
 8016fb6:	fb0c 2101 	mla	r1, ip, r1, r2
 8016fba:	4604      	mov	r4, r0
 8016fbc:	2301      	movs	r3, #1
 8016fbe:	e7f0      	b.n	8016fa2 <_vfiprintf_r+0x1da>
 8016fc0:	ab03      	add	r3, sp, #12
 8016fc2:	9300      	str	r3, [sp, #0]
 8016fc4:	462a      	mov	r2, r5
 8016fc6:	4b16      	ldr	r3, [pc, #88]	; (8017020 <_vfiprintf_r+0x258>)
 8016fc8:	a904      	add	r1, sp, #16
 8016fca:	4630      	mov	r0, r6
 8016fcc:	f3af 8000 	nop.w
 8016fd0:	4607      	mov	r7, r0
 8016fd2:	1c78      	adds	r0, r7, #1
 8016fd4:	d1d6      	bne.n	8016f84 <_vfiprintf_r+0x1bc>
 8016fd6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016fd8:	07d9      	lsls	r1, r3, #31
 8016fda:	d405      	bmi.n	8016fe8 <_vfiprintf_r+0x220>
 8016fdc:	89ab      	ldrh	r3, [r5, #12]
 8016fde:	059a      	lsls	r2, r3, #22
 8016fe0:	d402      	bmi.n	8016fe8 <_vfiprintf_r+0x220>
 8016fe2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016fe4:	f7ff fb70 	bl	80166c8 <__retarget_lock_release_recursive>
 8016fe8:	89ab      	ldrh	r3, [r5, #12]
 8016fea:	065b      	lsls	r3, r3, #25
 8016fec:	f53f af12 	bmi.w	8016e14 <_vfiprintf_r+0x4c>
 8016ff0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8016ff2:	e711      	b.n	8016e18 <_vfiprintf_r+0x50>
 8016ff4:	ab03      	add	r3, sp, #12
 8016ff6:	9300      	str	r3, [sp, #0]
 8016ff8:	462a      	mov	r2, r5
 8016ffa:	4b09      	ldr	r3, [pc, #36]	; (8017020 <_vfiprintf_r+0x258>)
 8016ffc:	a904      	add	r1, sp, #16
 8016ffe:	4630      	mov	r0, r6
 8017000:	f000 f880 	bl	8017104 <_printf_i>
 8017004:	e7e4      	b.n	8016fd0 <_vfiprintf_r+0x208>
 8017006:	bf00      	nop
 8017008:	0801a700 	.word	0x0801a700
 801700c:	0801a720 	.word	0x0801a720
 8017010:	0801a6e0 	.word	0x0801a6e0
 8017014:	0801a7f2 	.word	0x0801a7f2
 8017018:	0801a7fc 	.word	0x0801a7fc
 801701c:	00000000 	.word	0x00000000
 8017020:	08016da3 	.word	0x08016da3
 8017024:	0801a7f8 	.word	0x0801a7f8

08017028 <_printf_common>:
 8017028:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801702c:	4616      	mov	r6, r2
 801702e:	4699      	mov	r9, r3
 8017030:	688a      	ldr	r2, [r1, #8]
 8017032:	690b      	ldr	r3, [r1, #16]
 8017034:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017038:	4293      	cmp	r3, r2
 801703a:	bfb8      	it	lt
 801703c:	4613      	movlt	r3, r2
 801703e:	6033      	str	r3, [r6, #0]
 8017040:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017044:	4607      	mov	r7, r0
 8017046:	460c      	mov	r4, r1
 8017048:	b10a      	cbz	r2, 801704e <_printf_common+0x26>
 801704a:	3301      	adds	r3, #1
 801704c:	6033      	str	r3, [r6, #0]
 801704e:	6823      	ldr	r3, [r4, #0]
 8017050:	0699      	lsls	r1, r3, #26
 8017052:	bf42      	ittt	mi
 8017054:	6833      	ldrmi	r3, [r6, #0]
 8017056:	3302      	addmi	r3, #2
 8017058:	6033      	strmi	r3, [r6, #0]
 801705a:	6825      	ldr	r5, [r4, #0]
 801705c:	f015 0506 	ands.w	r5, r5, #6
 8017060:	d106      	bne.n	8017070 <_printf_common+0x48>
 8017062:	f104 0a19 	add.w	sl, r4, #25
 8017066:	68e3      	ldr	r3, [r4, #12]
 8017068:	6832      	ldr	r2, [r6, #0]
 801706a:	1a9b      	subs	r3, r3, r2
 801706c:	42ab      	cmp	r3, r5
 801706e:	dc26      	bgt.n	80170be <_printf_common+0x96>
 8017070:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8017074:	1e13      	subs	r3, r2, #0
 8017076:	6822      	ldr	r2, [r4, #0]
 8017078:	bf18      	it	ne
 801707a:	2301      	movne	r3, #1
 801707c:	0692      	lsls	r2, r2, #26
 801707e:	d42b      	bmi.n	80170d8 <_printf_common+0xb0>
 8017080:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8017084:	4649      	mov	r1, r9
 8017086:	4638      	mov	r0, r7
 8017088:	47c0      	blx	r8
 801708a:	3001      	adds	r0, #1
 801708c:	d01e      	beq.n	80170cc <_printf_common+0xa4>
 801708e:	6823      	ldr	r3, [r4, #0]
 8017090:	68e5      	ldr	r5, [r4, #12]
 8017092:	6832      	ldr	r2, [r6, #0]
 8017094:	f003 0306 	and.w	r3, r3, #6
 8017098:	2b04      	cmp	r3, #4
 801709a:	bf08      	it	eq
 801709c:	1aad      	subeq	r5, r5, r2
 801709e:	68a3      	ldr	r3, [r4, #8]
 80170a0:	6922      	ldr	r2, [r4, #16]
 80170a2:	bf0c      	ite	eq
 80170a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80170a8:	2500      	movne	r5, #0
 80170aa:	4293      	cmp	r3, r2
 80170ac:	bfc4      	itt	gt
 80170ae:	1a9b      	subgt	r3, r3, r2
 80170b0:	18ed      	addgt	r5, r5, r3
 80170b2:	2600      	movs	r6, #0
 80170b4:	341a      	adds	r4, #26
 80170b6:	42b5      	cmp	r5, r6
 80170b8:	d11a      	bne.n	80170f0 <_printf_common+0xc8>
 80170ba:	2000      	movs	r0, #0
 80170bc:	e008      	b.n	80170d0 <_printf_common+0xa8>
 80170be:	2301      	movs	r3, #1
 80170c0:	4652      	mov	r2, sl
 80170c2:	4649      	mov	r1, r9
 80170c4:	4638      	mov	r0, r7
 80170c6:	47c0      	blx	r8
 80170c8:	3001      	adds	r0, #1
 80170ca:	d103      	bne.n	80170d4 <_printf_common+0xac>
 80170cc:	f04f 30ff 	mov.w	r0, #4294967295
 80170d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80170d4:	3501      	adds	r5, #1
 80170d6:	e7c6      	b.n	8017066 <_printf_common+0x3e>
 80170d8:	18e1      	adds	r1, r4, r3
 80170da:	1c5a      	adds	r2, r3, #1
 80170dc:	2030      	movs	r0, #48	; 0x30
 80170de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80170e2:	4422      	add	r2, r4
 80170e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80170e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80170ec:	3302      	adds	r3, #2
 80170ee:	e7c7      	b.n	8017080 <_printf_common+0x58>
 80170f0:	2301      	movs	r3, #1
 80170f2:	4622      	mov	r2, r4
 80170f4:	4649      	mov	r1, r9
 80170f6:	4638      	mov	r0, r7
 80170f8:	47c0      	blx	r8
 80170fa:	3001      	adds	r0, #1
 80170fc:	d0e6      	beq.n	80170cc <_printf_common+0xa4>
 80170fe:	3601      	adds	r6, #1
 8017100:	e7d9      	b.n	80170b6 <_printf_common+0x8e>
	...

08017104 <_printf_i>:
 8017104:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017108:	7e0f      	ldrb	r7, [r1, #24]
 801710a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801710c:	2f78      	cmp	r7, #120	; 0x78
 801710e:	4691      	mov	r9, r2
 8017110:	4680      	mov	r8, r0
 8017112:	460c      	mov	r4, r1
 8017114:	469a      	mov	sl, r3
 8017116:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801711a:	d807      	bhi.n	801712c <_printf_i+0x28>
 801711c:	2f62      	cmp	r7, #98	; 0x62
 801711e:	d80a      	bhi.n	8017136 <_printf_i+0x32>
 8017120:	2f00      	cmp	r7, #0
 8017122:	f000 80d8 	beq.w	80172d6 <_printf_i+0x1d2>
 8017126:	2f58      	cmp	r7, #88	; 0x58
 8017128:	f000 80a3 	beq.w	8017272 <_printf_i+0x16e>
 801712c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017130:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017134:	e03a      	b.n	80171ac <_printf_i+0xa8>
 8017136:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801713a:	2b15      	cmp	r3, #21
 801713c:	d8f6      	bhi.n	801712c <_printf_i+0x28>
 801713e:	a101      	add	r1, pc, #4	; (adr r1, 8017144 <_printf_i+0x40>)
 8017140:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017144:	0801719d 	.word	0x0801719d
 8017148:	080171b1 	.word	0x080171b1
 801714c:	0801712d 	.word	0x0801712d
 8017150:	0801712d 	.word	0x0801712d
 8017154:	0801712d 	.word	0x0801712d
 8017158:	0801712d 	.word	0x0801712d
 801715c:	080171b1 	.word	0x080171b1
 8017160:	0801712d 	.word	0x0801712d
 8017164:	0801712d 	.word	0x0801712d
 8017168:	0801712d 	.word	0x0801712d
 801716c:	0801712d 	.word	0x0801712d
 8017170:	080172bd 	.word	0x080172bd
 8017174:	080171e1 	.word	0x080171e1
 8017178:	0801729f 	.word	0x0801729f
 801717c:	0801712d 	.word	0x0801712d
 8017180:	0801712d 	.word	0x0801712d
 8017184:	080172df 	.word	0x080172df
 8017188:	0801712d 	.word	0x0801712d
 801718c:	080171e1 	.word	0x080171e1
 8017190:	0801712d 	.word	0x0801712d
 8017194:	0801712d 	.word	0x0801712d
 8017198:	080172a7 	.word	0x080172a7
 801719c:	682b      	ldr	r3, [r5, #0]
 801719e:	1d1a      	adds	r2, r3, #4
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	602a      	str	r2, [r5, #0]
 80171a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80171a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80171ac:	2301      	movs	r3, #1
 80171ae:	e0a3      	b.n	80172f8 <_printf_i+0x1f4>
 80171b0:	6820      	ldr	r0, [r4, #0]
 80171b2:	6829      	ldr	r1, [r5, #0]
 80171b4:	0606      	lsls	r6, r0, #24
 80171b6:	f101 0304 	add.w	r3, r1, #4
 80171ba:	d50a      	bpl.n	80171d2 <_printf_i+0xce>
 80171bc:	680e      	ldr	r6, [r1, #0]
 80171be:	602b      	str	r3, [r5, #0]
 80171c0:	2e00      	cmp	r6, #0
 80171c2:	da03      	bge.n	80171cc <_printf_i+0xc8>
 80171c4:	232d      	movs	r3, #45	; 0x2d
 80171c6:	4276      	negs	r6, r6
 80171c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80171cc:	485e      	ldr	r0, [pc, #376]	; (8017348 <_printf_i+0x244>)
 80171ce:	230a      	movs	r3, #10
 80171d0:	e019      	b.n	8017206 <_printf_i+0x102>
 80171d2:	680e      	ldr	r6, [r1, #0]
 80171d4:	602b      	str	r3, [r5, #0]
 80171d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80171da:	bf18      	it	ne
 80171dc:	b236      	sxthne	r6, r6
 80171de:	e7ef      	b.n	80171c0 <_printf_i+0xbc>
 80171e0:	682b      	ldr	r3, [r5, #0]
 80171e2:	6820      	ldr	r0, [r4, #0]
 80171e4:	1d19      	adds	r1, r3, #4
 80171e6:	6029      	str	r1, [r5, #0]
 80171e8:	0601      	lsls	r1, r0, #24
 80171ea:	d501      	bpl.n	80171f0 <_printf_i+0xec>
 80171ec:	681e      	ldr	r6, [r3, #0]
 80171ee:	e002      	b.n	80171f6 <_printf_i+0xf2>
 80171f0:	0646      	lsls	r6, r0, #25
 80171f2:	d5fb      	bpl.n	80171ec <_printf_i+0xe8>
 80171f4:	881e      	ldrh	r6, [r3, #0]
 80171f6:	4854      	ldr	r0, [pc, #336]	; (8017348 <_printf_i+0x244>)
 80171f8:	2f6f      	cmp	r7, #111	; 0x6f
 80171fa:	bf0c      	ite	eq
 80171fc:	2308      	moveq	r3, #8
 80171fe:	230a      	movne	r3, #10
 8017200:	2100      	movs	r1, #0
 8017202:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017206:	6865      	ldr	r5, [r4, #4]
 8017208:	60a5      	str	r5, [r4, #8]
 801720a:	2d00      	cmp	r5, #0
 801720c:	bfa2      	ittt	ge
 801720e:	6821      	ldrge	r1, [r4, #0]
 8017210:	f021 0104 	bicge.w	r1, r1, #4
 8017214:	6021      	strge	r1, [r4, #0]
 8017216:	b90e      	cbnz	r6, 801721c <_printf_i+0x118>
 8017218:	2d00      	cmp	r5, #0
 801721a:	d04d      	beq.n	80172b8 <_printf_i+0x1b4>
 801721c:	4615      	mov	r5, r2
 801721e:	fbb6 f1f3 	udiv	r1, r6, r3
 8017222:	fb03 6711 	mls	r7, r3, r1, r6
 8017226:	5dc7      	ldrb	r7, [r0, r7]
 8017228:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801722c:	4637      	mov	r7, r6
 801722e:	42bb      	cmp	r3, r7
 8017230:	460e      	mov	r6, r1
 8017232:	d9f4      	bls.n	801721e <_printf_i+0x11a>
 8017234:	2b08      	cmp	r3, #8
 8017236:	d10b      	bne.n	8017250 <_printf_i+0x14c>
 8017238:	6823      	ldr	r3, [r4, #0]
 801723a:	07de      	lsls	r6, r3, #31
 801723c:	d508      	bpl.n	8017250 <_printf_i+0x14c>
 801723e:	6923      	ldr	r3, [r4, #16]
 8017240:	6861      	ldr	r1, [r4, #4]
 8017242:	4299      	cmp	r1, r3
 8017244:	bfde      	ittt	le
 8017246:	2330      	movle	r3, #48	; 0x30
 8017248:	f805 3c01 	strble.w	r3, [r5, #-1]
 801724c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017250:	1b52      	subs	r2, r2, r5
 8017252:	6122      	str	r2, [r4, #16]
 8017254:	f8cd a000 	str.w	sl, [sp]
 8017258:	464b      	mov	r3, r9
 801725a:	aa03      	add	r2, sp, #12
 801725c:	4621      	mov	r1, r4
 801725e:	4640      	mov	r0, r8
 8017260:	f7ff fee2 	bl	8017028 <_printf_common>
 8017264:	3001      	adds	r0, #1
 8017266:	d14c      	bne.n	8017302 <_printf_i+0x1fe>
 8017268:	f04f 30ff 	mov.w	r0, #4294967295
 801726c:	b004      	add	sp, #16
 801726e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017272:	4835      	ldr	r0, [pc, #212]	; (8017348 <_printf_i+0x244>)
 8017274:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8017278:	6829      	ldr	r1, [r5, #0]
 801727a:	6823      	ldr	r3, [r4, #0]
 801727c:	f851 6b04 	ldr.w	r6, [r1], #4
 8017280:	6029      	str	r1, [r5, #0]
 8017282:	061d      	lsls	r5, r3, #24
 8017284:	d514      	bpl.n	80172b0 <_printf_i+0x1ac>
 8017286:	07df      	lsls	r7, r3, #31
 8017288:	bf44      	itt	mi
 801728a:	f043 0320 	orrmi.w	r3, r3, #32
 801728e:	6023      	strmi	r3, [r4, #0]
 8017290:	b91e      	cbnz	r6, 801729a <_printf_i+0x196>
 8017292:	6823      	ldr	r3, [r4, #0]
 8017294:	f023 0320 	bic.w	r3, r3, #32
 8017298:	6023      	str	r3, [r4, #0]
 801729a:	2310      	movs	r3, #16
 801729c:	e7b0      	b.n	8017200 <_printf_i+0xfc>
 801729e:	6823      	ldr	r3, [r4, #0]
 80172a0:	f043 0320 	orr.w	r3, r3, #32
 80172a4:	6023      	str	r3, [r4, #0]
 80172a6:	2378      	movs	r3, #120	; 0x78
 80172a8:	4828      	ldr	r0, [pc, #160]	; (801734c <_printf_i+0x248>)
 80172aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80172ae:	e7e3      	b.n	8017278 <_printf_i+0x174>
 80172b0:	0659      	lsls	r1, r3, #25
 80172b2:	bf48      	it	mi
 80172b4:	b2b6      	uxthmi	r6, r6
 80172b6:	e7e6      	b.n	8017286 <_printf_i+0x182>
 80172b8:	4615      	mov	r5, r2
 80172ba:	e7bb      	b.n	8017234 <_printf_i+0x130>
 80172bc:	682b      	ldr	r3, [r5, #0]
 80172be:	6826      	ldr	r6, [r4, #0]
 80172c0:	6961      	ldr	r1, [r4, #20]
 80172c2:	1d18      	adds	r0, r3, #4
 80172c4:	6028      	str	r0, [r5, #0]
 80172c6:	0635      	lsls	r5, r6, #24
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	d501      	bpl.n	80172d0 <_printf_i+0x1cc>
 80172cc:	6019      	str	r1, [r3, #0]
 80172ce:	e002      	b.n	80172d6 <_printf_i+0x1d2>
 80172d0:	0670      	lsls	r0, r6, #25
 80172d2:	d5fb      	bpl.n	80172cc <_printf_i+0x1c8>
 80172d4:	8019      	strh	r1, [r3, #0]
 80172d6:	2300      	movs	r3, #0
 80172d8:	6123      	str	r3, [r4, #16]
 80172da:	4615      	mov	r5, r2
 80172dc:	e7ba      	b.n	8017254 <_printf_i+0x150>
 80172de:	682b      	ldr	r3, [r5, #0]
 80172e0:	1d1a      	adds	r2, r3, #4
 80172e2:	602a      	str	r2, [r5, #0]
 80172e4:	681d      	ldr	r5, [r3, #0]
 80172e6:	6862      	ldr	r2, [r4, #4]
 80172e8:	2100      	movs	r1, #0
 80172ea:	4628      	mov	r0, r5
 80172ec:	f7e8 ffa8 	bl	8000240 <memchr>
 80172f0:	b108      	cbz	r0, 80172f6 <_printf_i+0x1f2>
 80172f2:	1b40      	subs	r0, r0, r5
 80172f4:	6060      	str	r0, [r4, #4]
 80172f6:	6863      	ldr	r3, [r4, #4]
 80172f8:	6123      	str	r3, [r4, #16]
 80172fa:	2300      	movs	r3, #0
 80172fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017300:	e7a8      	b.n	8017254 <_printf_i+0x150>
 8017302:	6923      	ldr	r3, [r4, #16]
 8017304:	462a      	mov	r2, r5
 8017306:	4649      	mov	r1, r9
 8017308:	4640      	mov	r0, r8
 801730a:	47d0      	blx	sl
 801730c:	3001      	adds	r0, #1
 801730e:	d0ab      	beq.n	8017268 <_printf_i+0x164>
 8017310:	6823      	ldr	r3, [r4, #0]
 8017312:	079b      	lsls	r3, r3, #30
 8017314:	d413      	bmi.n	801733e <_printf_i+0x23a>
 8017316:	68e0      	ldr	r0, [r4, #12]
 8017318:	9b03      	ldr	r3, [sp, #12]
 801731a:	4298      	cmp	r0, r3
 801731c:	bfb8      	it	lt
 801731e:	4618      	movlt	r0, r3
 8017320:	e7a4      	b.n	801726c <_printf_i+0x168>
 8017322:	2301      	movs	r3, #1
 8017324:	4632      	mov	r2, r6
 8017326:	4649      	mov	r1, r9
 8017328:	4640      	mov	r0, r8
 801732a:	47d0      	blx	sl
 801732c:	3001      	adds	r0, #1
 801732e:	d09b      	beq.n	8017268 <_printf_i+0x164>
 8017330:	3501      	adds	r5, #1
 8017332:	68e3      	ldr	r3, [r4, #12]
 8017334:	9903      	ldr	r1, [sp, #12]
 8017336:	1a5b      	subs	r3, r3, r1
 8017338:	42ab      	cmp	r3, r5
 801733a:	dcf2      	bgt.n	8017322 <_printf_i+0x21e>
 801733c:	e7eb      	b.n	8017316 <_printf_i+0x212>
 801733e:	2500      	movs	r5, #0
 8017340:	f104 0619 	add.w	r6, r4, #25
 8017344:	e7f5      	b.n	8017332 <_printf_i+0x22e>
 8017346:	bf00      	nop
 8017348:	0801a803 	.word	0x0801a803
 801734c:	0801a814 	.word	0x0801a814

08017350 <_read_r>:
 8017350:	b538      	push	{r3, r4, r5, lr}
 8017352:	4d07      	ldr	r5, [pc, #28]	; (8017370 <_read_r+0x20>)
 8017354:	4604      	mov	r4, r0
 8017356:	4608      	mov	r0, r1
 8017358:	4611      	mov	r1, r2
 801735a:	2200      	movs	r2, #0
 801735c:	602a      	str	r2, [r5, #0]
 801735e:	461a      	mov	r2, r3
 8017360:	f7e9 fe1e 	bl	8000fa0 <_read>
 8017364:	1c43      	adds	r3, r0, #1
 8017366:	d102      	bne.n	801736e <_read_r+0x1e>
 8017368:	682b      	ldr	r3, [r5, #0]
 801736a:	b103      	cbz	r3, 801736e <_read_r+0x1e>
 801736c:	6023      	str	r3, [r4, #0]
 801736e:	bd38      	pop	{r3, r4, r5, pc}
 8017370:	2000f3a4 	.word	0x2000f3a4

08017374 <__swbuf_r>:
 8017374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017376:	460e      	mov	r6, r1
 8017378:	4614      	mov	r4, r2
 801737a:	4605      	mov	r5, r0
 801737c:	b118      	cbz	r0, 8017386 <__swbuf_r+0x12>
 801737e:	6983      	ldr	r3, [r0, #24]
 8017380:	b90b      	cbnz	r3, 8017386 <__swbuf_r+0x12>
 8017382:	f7ff f8dd 	bl	8016540 <__sinit>
 8017386:	4b21      	ldr	r3, [pc, #132]	; (801740c <__swbuf_r+0x98>)
 8017388:	429c      	cmp	r4, r3
 801738a:	d12b      	bne.n	80173e4 <__swbuf_r+0x70>
 801738c:	686c      	ldr	r4, [r5, #4]
 801738e:	69a3      	ldr	r3, [r4, #24]
 8017390:	60a3      	str	r3, [r4, #8]
 8017392:	89a3      	ldrh	r3, [r4, #12]
 8017394:	071a      	lsls	r2, r3, #28
 8017396:	d52f      	bpl.n	80173f8 <__swbuf_r+0x84>
 8017398:	6923      	ldr	r3, [r4, #16]
 801739a:	b36b      	cbz	r3, 80173f8 <__swbuf_r+0x84>
 801739c:	6923      	ldr	r3, [r4, #16]
 801739e:	6820      	ldr	r0, [r4, #0]
 80173a0:	1ac0      	subs	r0, r0, r3
 80173a2:	6963      	ldr	r3, [r4, #20]
 80173a4:	b2f6      	uxtb	r6, r6
 80173a6:	4283      	cmp	r3, r0
 80173a8:	4637      	mov	r7, r6
 80173aa:	dc04      	bgt.n	80173b6 <__swbuf_r+0x42>
 80173ac:	4621      	mov	r1, r4
 80173ae:	4628      	mov	r0, r5
 80173b0:	f7ff fc20 	bl	8016bf4 <_fflush_r>
 80173b4:	bb30      	cbnz	r0, 8017404 <__swbuf_r+0x90>
 80173b6:	68a3      	ldr	r3, [r4, #8]
 80173b8:	3b01      	subs	r3, #1
 80173ba:	60a3      	str	r3, [r4, #8]
 80173bc:	6823      	ldr	r3, [r4, #0]
 80173be:	1c5a      	adds	r2, r3, #1
 80173c0:	6022      	str	r2, [r4, #0]
 80173c2:	701e      	strb	r6, [r3, #0]
 80173c4:	6963      	ldr	r3, [r4, #20]
 80173c6:	3001      	adds	r0, #1
 80173c8:	4283      	cmp	r3, r0
 80173ca:	d004      	beq.n	80173d6 <__swbuf_r+0x62>
 80173cc:	89a3      	ldrh	r3, [r4, #12]
 80173ce:	07db      	lsls	r3, r3, #31
 80173d0:	d506      	bpl.n	80173e0 <__swbuf_r+0x6c>
 80173d2:	2e0a      	cmp	r6, #10
 80173d4:	d104      	bne.n	80173e0 <__swbuf_r+0x6c>
 80173d6:	4621      	mov	r1, r4
 80173d8:	4628      	mov	r0, r5
 80173da:	f7ff fc0b 	bl	8016bf4 <_fflush_r>
 80173de:	b988      	cbnz	r0, 8017404 <__swbuf_r+0x90>
 80173e0:	4638      	mov	r0, r7
 80173e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80173e4:	4b0a      	ldr	r3, [pc, #40]	; (8017410 <__swbuf_r+0x9c>)
 80173e6:	429c      	cmp	r4, r3
 80173e8:	d101      	bne.n	80173ee <__swbuf_r+0x7a>
 80173ea:	68ac      	ldr	r4, [r5, #8]
 80173ec:	e7cf      	b.n	801738e <__swbuf_r+0x1a>
 80173ee:	4b09      	ldr	r3, [pc, #36]	; (8017414 <__swbuf_r+0xa0>)
 80173f0:	429c      	cmp	r4, r3
 80173f2:	bf08      	it	eq
 80173f4:	68ec      	ldreq	r4, [r5, #12]
 80173f6:	e7ca      	b.n	801738e <__swbuf_r+0x1a>
 80173f8:	4621      	mov	r1, r4
 80173fa:	4628      	mov	r0, r5
 80173fc:	f000 f80c 	bl	8017418 <__swsetup_r>
 8017400:	2800      	cmp	r0, #0
 8017402:	d0cb      	beq.n	801739c <__swbuf_r+0x28>
 8017404:	f04f 37ff 	mov.w	r7, #4294967295
 8017408:	e7ea      	b.n	80173e0 <__swbuf_r+0x6c>
 801740a:	bf00      	nop
 801740c:	0801a700 	.word	0x0801a700
 8017410:	0801a720 	.word	0x0801a720
 8017414:	0801a6e0 	.word	0x0801a6e0

08017418 <__swsetup_r>:
 8017418:	4b32      	ldr	r3, [pc, #200]	; (80174e4 <__swsetup_r+0xcc>)
 801741a:	b570      	push	{r4, r5, r6, lr}
 801741c:	681d      	ldr	r5, [r3, #0]
 801741e:	4606      	mov	r6, r0
 8017420:	460c      	mov	r4, r1
 8017422:	b125      	cbz	r5, 801742e <__swsetup_r+0x16>
 8017424:	69ab      	ldr	r3, [r5, #24]
 8017426:	b913      	cbnz	r3, 801742e <__swsetup_r+0x16>
 8017428:	4628      	mov	r0, r5
 801742a:	f7ff f889 	bl	8016540 <__sinit>
 801742e:	4b2e      	ldr	r3, [pc, #184]	; (80174e8 <__swsetup_r+0xd0>)
 8017430:	429c      	cmp	r4, r3
 8017432:	d10f      	bne.n	8017454 <__swsetup_r+0x3c>
 8017434:	686c      	ldr	r4, [r5, #4]
 8017436:	89a3      	ldrh	r3, [r4, #12]
 8017438:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801743c:	0719      	lsls	r1, r3, #28
 801743e:	d42c      	bmi.n	801749a <__swsetup_r+0x82>
 8017440:	06dd      	lsls	r5, r3, #27
 8017442:	d411      	bmi.n	8017468 <__swsetup_r+0x50>
 8017444:	2309      	movs	r3, #9
 8017446:	6033      	str	r3, [r6, #0]
 8017448:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801744c:	81a3      	strh	r3, [r4, #12]
 801744e:	f04f 30ff 	mov.w	r0, #4294967295
 8017452:	e03e      	b.n	80174d2 <__swsetup_r+0xba>
 8017454:	4b25      	ldr	r3, [pc, #148]	; (80174ec <__swsetup_r+0xd4>)
 8017456:	429c      	cmp	r4, r3
 8017458:	d101      	bne.n	801745e <__swsetup_r+0x46>
 801745a:	68ac      	ldr	r4, [r5, #8]
 801745c:	e7eb      	b.n	8017436 <__swsetup_r+0x1e>
 801745e:	4b24      	ldr	r3, [pc, #144]	; (80174f0 <__swsetup_r+0xd8>)
 8017460:	429c      	cmp	r4, r3
 8017462:	bf08      	it	eq
 8017464:	68ec      	ldreq	r4, [r5, #12]
 8017466:	e7e6      	b.n	8017436 <__swsetup_r+0x1e>
 8017468:	0758      	lsls	r0, r3, #29
 801746a:	d512      	bpl.n	8017492 <__swsetup_r+0x7a>
 801746c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801746e:	b141      	cbz	r1, 8017482 <__swsetup_r+0x6a>
 8017470:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017474:	4299      	cmp	r1, r3
 8017476:	d002      	beq.n	801747e <__swsetup_r+0x66>
 8017478:	4630      	mov	r0, r6
 801747a:	f7ff fc2f 	bl	8016cdc <_free_r>
 801747e:	2300      	movs	r3, #0
 8017480:	6363      	str	r3, [r4, #52]	; 0x34
 8017482:	89a3      	ldrh	r3, [r4, #12]
 8017484:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017488:	81a3      	strh	r3, [r4, #12]
 801748a:	2300      	movs	r3, #0
 801748c:	6063      	str	r3, [r4, #4]
 801748e:	6923      	ldr	r3, [r4, #16]
 8017490:	6023      	str	r3, [r4, #0]
 8017492:	89a3      	ldrh	r3, [r4, #12]
 8017494:	f043 0308 	orr.w	r3, r3, #8
 8017498:	81a3      	strh	r3, [r4, #12]
 801749a:	6923      	ldr	r3, [r4, #16]
 801749c:	b94b      	cbnz	r3, 80174b2 <__swsetup_r+0x9a>
 801749e:	89a3      	ldrh	r3, [r4, #12]
 80174a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80174a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80174a8:	d003      	beq.n	80174b2 <__swsetup_r+0x9a>
 80174aa:	4621      	mov	r1, r4
 80174ac:	4630      	mov	r0, r6
 80174ae:	f000 f84d 	bl	801754c <__smakebuf_r>
 80174b2:	89a0      	ldrh	r0, [r4, #12]
 80174b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80174b8:	f010 0301 	ands.w	r3, r0, #1
 80174bc:	d00a      	beq.n	80174d4 <__swsetup_r+0xbc>
 80174be:	2300      	movs	r3, #0
 80174c0:	60a3      	str	r3, [r4, #8]
 80174c2:	6963      	ldr	r3, [r4, #20]
 80174c4:	425b      	negs	r3, r3
 80174c6:	61a3      	str	r3, [r4, #24]
 80174c8:	6923      	ldr	r3, [r4, #16]
 80174ca:	b943      	cbnz	r3, 80174de <__swsetup_r+0xc6>
 80174cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80174d0:	d1ba      	bne.n	8017448 <__swsetup_r+0x30>
 80174d2:	bd70      	pop	{r4, r5, r6, pc}
 80174d4:	0781      	lsls	r1, r0, #30
 80174d6:	bf58      	it	pl
 80174d8:	6963      	ldrpl	r3, [r4, #20]
 80174da:	60a3      	str	r3, [r4, #8]
 80174dc:	e7f4      	b.n	80174c8 <__swsetup_r+0xb0>
 80174de:	2000      	movs	r0, #0
 80174e0:	e7f7      	b.n	80174d2 <__swsetup_r+0xba>
 80174e2:	bf00      	nop
 80174e4:	20000034 	.word	0x20000034
 80174e8:	0801a700 	.word	0x0801a700
 80174ec:	0801a720 	.word	0x0801a720
 80174f0:	0801a6e0 	.word	0x0801a6e0

080174f4 <abort>:
 80174f4:	b508      	push	{r3, lr}
 80174f6:	2006      	movs	r0, #6
 80174f8:	f000 f890 	bl	801761c <raise>
 80174fc:	2001      	movs	r0, #1
 80174fe:	f7e9 fd45 	bl	8000f8c <_exit>

08017502 <__swhatbuf_r>:
 8017502:	b570      	push	{r4, r5, r6, lr}
 8017504:	460e      	mov	r6, r1
 8017506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801750a:	2900      	cmp	r1, #0
 801750c:	b096      	sub	sp, #88	; 0x58
 801750e:	4614      	mov	r4, r2
 8017510:	461d      	mov	r5, r3
 8017512:	da08      	bge.n	8017526 <__swhatbuf_r+0x24>
 8017514:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017518:	2200      	movs	r2, #0
 801751a:	602a      	str	r2, [r5, #0]
 801751c:	061a      	lsls	r2, r3, #24
 801751e:	d410      	bmi.n	8017542 <__swhatbuf_r+0x40>
 8017520:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017524:	e00e      	b.n	8017544 <__swhatbuf_r+0x42>
 8017526:	466a      	mov	r2, sp
 8017528:	f000 f894 	bl	8017654 <_fstat_r>
 801752c:	2800      	cmp	r0, #0
 801752e:	dbf1      	blt.n	8017514 <__swhatbuf_r+0x12>
 8017530:	9a01      	ldr	r2, [sp, #4]
 8017532:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017536:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801753a:	425a      	negs	r2, r3
 801753c:	415a      	adcs	r2, r3
 801753e:	602a      	str	r2, [r5, #0]
 8017540:	e7ee      	b.n	8017520 <__swhatbuf_r+0x1e>
 8017542:	2340      	movs	r3, #64	; 0x40
 8017544:	2000      	movs	r0, #0
 8017546:	6023      	str	r3, [r4, #0]
 8017548:	b016      	add	sp, #88	; 0x58
 801754a:	bd70      	pop	{r4, r5, r6, pc}

0801754c <__smakebuf_r>:
 801754c:	898b      	ldrh	r3, [r1, #12]
 801754e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017550:	079d      	lsls	r5, r3, #30
 8017552:	4606      	mov	r6, r0
 8017554:	460c      	mov	r4, r1
 8017556:	d507      	bpl.n	8017568 <__smakebuf_r+0x1c>
 8017558:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801755c:	6023      	str	r3, [r4, #0]
 801755e:	6123      	str	r3, [r4, #16]
 8017560:	2301      	movs	r3, #1
 8017562:	6163      	str	r3, [r4, #20]
 8017564:	b002      	add	sp, #8
 8017566:	bd70      	pop	{r4, r5, r6, pc}
 8017568:	ab01      	add	r3, sp, #4
 801756a:	466a      	mov	r2, sp
 801756c:	f7ff ffc9 	bl	8017502 <__swhatbuf_r>
 8017570:	9900      	ldr	r1, [sp, #0]
 8017572:	4605      	mov	r5, r0
 8017574:	4630      	mov	r0, r6
 8017576:	f7ff f8ef 	bl	8016758 <_malloc_r>
 801757a:	b948      	cbnz	r0, 8017590 <__smakebuf_r+0x44>
 801757c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017580:	059a      	lsls	r2, r3, #22
 8017582:	d4ef      	bmi.n	8017564 <__smakebuf_r+0x18>
 8017584:	f023 0303 	bic.w	r3, r3, #3
 8017588:	f043 0302 	orr.w	r3, r3, #2
 801758c:	81a3      	strh	r3, [r4, #12]
 801758e:	e7e3      	b.n	8017558 <__smakebuf_r+0xc>
 8017590:	4b0d      	ldr	r3, [pc, #52]	; (80175c8 <__smakebuf_r+0x7c>)
 8017592:	62b3      	str	r3, [r6, #40]	; 0x28
 8017594:	89a3      	ldrh	r3, [r4, #12]
 8017596:	6020      	str	r0, [r4, #0]
 8017598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801759c:	81a3      	strh	r3, [r4, #12]
 801759e:	9b00      	ldr	r3, [sp, #0]
 80175a0:	6163      	str	r3, [r4, #20]
 80175a2:	9b01      	ldr	r3, [sp, #4]
 80175a4:	6120      	str	r0, [r4, #16]
 80175a6:	b15b      	cbz	r3, 80175c0 <__smakebuf_r+0x74>
 80175a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80175ac:	4630      	mov	r0, r6
 80175ae:	f000 f863 	bl	8017678 <_isatty_r>
 80175b2:	b128      	cbz	r0, 80175c0 <__smakebuf_r+0x74>
 80175b4:	89a3      	ldrh	r3, [r4, #12]
 80175b6:	f023 0303 	bic.w	r3, r3, #3
 80175ba:	f043 0301 	orr.w	r3, r3, #1
 80175be:	81a3      	strh	r3, [r4, #12]
 80175c0:	89a0      	ldrh	r0, [r4, #12]
 80175c2:	4305      	orrs	r5, r0
 80175c4:	81a5      	strh	r5, [r4, #12]
 80175c6:	e7cd      	b.n	8017564 <__smakebuf_r+0x18>
 80175c8:	080164d9 	.word	0x080164d9

080175cc <_raise_r>:
 80175cc:	291f      	cmp	r1, #31
 80175ce:	b538      	push	{r3, r4, r5, lr}
 80175d0:	4604      	mov	r4, r0
 80175d2:	460d      	mov	r5, r1
 80175d4:	d904      	bls.n	80175e0 <_raise_r+0x14>
 80175d6:	2316      	movs	r3, #22
 80175d8:	6003      	str	r3, [r0, #0]
 80175da:	f04f 30ff 	mov.w	r0, #4294967295
 80175de:	bd38      	pop	{r3, r4, r5, pc}
 80175e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80175e2:	b112      	cbz	r2, 80175ea <_raise_r+0x1e>
 80175e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80175e8:	b94b      	cbnz	r3, 80175fe <_raise_r+0x32>
 80175ea:	4620      	mov	r0, r4
 80175ec:	f000 f830 	bl	8017650 <_getpid_r>
 80175f0:	462a      	mov	r2, r5
 80175f2:	4601      	mov	r1, r0
 80175f4:	4620      	mov	r0, r4
 80175f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80175fa:	f000 b817 	b.w	801762c <_kill_r>
 80175fe:	2b01      	cmp	r3, #1
 8017600:	d00a      	beq.n	8017618 <_raise_r+0x4c>
 8017602:	1c59      	adds	r1, r3, #1
 8017604:	d103      	bne.n	801760e <_raise_r+0x42>
 8017606:	2316      	movs	r3, #22
 8017608:	6003      	str	r3, [r0, #0]
 801760a:	2001      	movs	r0, #1
 801760c:	e7e7      	b.n	80175de <_raise_r+0x12>
 801760e:	2400      	movs	r4, #0
 8017610:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017614:	4628      	mov	r0, r5
 8017616:	4798      	blx	r3
 8017618:	2000      	movs	r0, #0
 801761a:	e7e0      	b.n	80175de <_raise_r+0x12>

0801761c <raise>:
 801761c:	4b02      	ldr	r3, [pc, #8]	; (8017628 <raise+0xc>)
 801761e:	4601      	mov	r1, r0
 8017620:	6818      	ldr	r0, [r3, #0]
 8017622:	f7ff bfd3 	b.w	80175cc <_raise_r>
 8017626:	bf00      	nop
 8017628:	20000034 	.word	0x20000034

0801762c <_kill_r>:
 801762c:	b538      	push	{r3, r4, r5, lr}
 801762e:	4d07      	ldr	r5, [pc, #28]	; (801764c <_kill_r+0x20>)
 8017630:	2300      	movs	r3, #0
 8017632:	4604      	mov	r4, r0
 8017634:	4608      	mov	r0, r1
 8017636:	4611      	mov	r1, r2
 8017638:	602b      	str	r3, [r5, #0]
 801763a:	f7e9 fc95 	bl	8000f68 <_kill>
 801763e:	1c43      	adds	r3, r0, #1
 8017640:	d102      	bne.n	8017648 <_kill_r+0x1c>
 8017642:	682b      	ldr	r3, [r5, #0]
 8017644:	b103      	cbz	r3, 8017648 <_kill_r+0x1c>
 8017646:	6023      	str	r3, [r4, #0]
 8017648:	bd38      	pop	{r3, r4, r5, pc}
 801764a:	bf00      	nop
 801764c:	2000f3a4 	.word	0x2000f3a4

08017650 <_getpid_r>:
 8017650:	f7e9 bc82 	b.w	8000f58 <_getpid>

08017654 <_fstat_r>:
 8017654:	b538      	push	{r3, r4, r5, lr}
 8017656:	4d07      	ldr	r5, [pc, #28]	; (8017674 <_fstat_r+0x20>)
 8017658:	2300      	movs	r3, #0
 801765a:	4604      	mov	r4, r0
 801765c:	4608      	mov	r0, r1
 801765e:	4611      	mov	r1, r2
 8017660:	602b      	str	r3, [r5, #0]
 8017662:	f7e9 fce2 	bl	800102a <_fstat>
 8017666:	1c43      	adds	r3, r0, #1
 8017668:	d102      	bne.n	8017670 <_fstat_r+0x1c>
 801766a:	682b      	ldr	r3, [r5, #0]
 801766c:	b103      	cbz	r3, 8017670 <_fstat_r+0x1c>
 801766e:	6023      	str	r3, [r4, #0]
 8017670:	bd38      	pop	{r3, r4, r5, pc}
 8017672:	bf00      	nop
 8017674:	2000f3a4 	.word	0x2000f3a4

08017678 <_isatty_r>:
 8017678:	b538      	push	{r3, r4, r5, lr}
 801767a:	4d06      	ldr	r5, [pc, #24]	; (8017694 <_isatty_r+0x1c>)
 801767c:	2300      	movs	r3, #0
 801767e:	4604      	mov	r4, r0
 8017680:	4608      	mov	r0, r1
 8017682:	602b      	str	r3, [r5, #0]
 8017684:	f7e9 fce1 	bl	800104a <_isatty>
 8017688:	1c43      	adds	r3, r0, #1
 801768a:	d102      	bne.n	8017692 <_isatty_r+0x1a>
 801768c:	682b      	ldr	r3, [r5, #0]
 801768e:	b103      	cbz	r3, 8017692 <_isatty_r+0x1a>
 8017690:	6023      	str	r3, [r4, #0]
 8017692:	bd38      	pop	{r3, r4, r5, pc}
 8017694:	2000f3a4 	.word	0x2000f3a4

08017698 <_init>:
 8017698:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801769a:	bf00      	nop
 801769c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801769e:	bc08      	pop	{r3}
 80176a0:	469e      	mov	lr, r3
 80176a2:	4770      	bx	lr

080176a4 <_fini>:
 80176a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80176a6:	bf00      	nop
 80176a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80176aa:	bc08      	pop	{r3}
 80176ac:	469e      	mov	lr, r3
 80176ae:	4770      	bx	lr

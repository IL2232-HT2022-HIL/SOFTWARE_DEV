
MCU_HiL_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011dcc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08011fcc  08011fcc  00021fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801215c  0801215c  00030338  2**0
                  CONTENTS
  4 .ARM          00000008  0801215c  0801215c  0002215c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012164  08012164  00030338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012164  08012164  00022164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012168  08012168  00022168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  0801216c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001f8  08012364  000301f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000298  08012404  00030298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00006f48  20000338  080124a4  00030338  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20007280  080124a4  00037280  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030338  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037067  00000000  00000000  00030366  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00006a48  00000000  00000000  000673cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002790  00000000  00000000  0006de18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000024c8  00000000  00000000  000705a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000a2f5  00000000  00000000  00072a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0003368f  00000000  00000000  0007cd65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001191f1  00000000  00000000  000b03f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  001c95e5  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000aa58  00000000  00000000  001c9638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000338 	.word	0x20000338
 800021c:	00000000 	.word	0x00000000
 8000220:	08011fb4 	.word	0x08011fb4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	2000033c 	.word	0x2000033c
 800023c:	08011fb4 	.word	0x08011fb4

08000240 <__aeabi_uldivmod>:
 8000240:	b953      	cbnz	r3, 8000258 <__aeabi_uldivmod+0x18>
 8000242:	b94a      	cbnz	r2, 8000258 <__aeabi_uldivmod+0x18>
 8000244:	2900      	cmp	r1, #0
 8000246:	bf08      	it	eq
 8000248:	2800      	cmpeq	r0, #0
 800024a:	bf1c      	itt	ne
 800024c:	f04f 31ff 	movne.w	r1, #4294967295
 8000250:	f04f 30ff 	movne.w	r0, #4294967295
 8000254:	f000 b974 	b.w	8000540 <__aeabi_idiv0>
 8000258:	f1ad 0c08 	sub.w	ip, sp, #8
 800025c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000260:	f000 f806 	bl	8000270 <__udivmoddi4>
 8000264:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000268:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800026c:	b004      	add	sp, #16
 800026e:	4770      	bx	lr

08000270 <__udivmoddi4>:
 8000270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000274:	9d08      	ldr	r5, [sp, #32]
 8000276:	4604      	mov	r4, r0
 8000278:	468e      	mov	lr, r1
 800027a:	2b00      	cmp	r3, #0
 800027c:	d14d      	bne.n	800031a <__udivmoddi4+0xaa>
 800027e:	428a      	cmp	r2, r1
 8000280:	4694      	mov	ip, r2
 8000282:	d969      	bls.n	8000358 <__udivmoddi4+0xe8>
 8000284:	fab2 f282 	clz	r2, r2
 8000288:	b152      	cbz	r2, 80002a0 <__udivmoddi4+0x30>
 800028a:	fa01 f302 	lsl.w	r3, r1, r2
 800028e:	f1c2 0120 	rsb	r1, r2, #32
 8000292:	fa20 f101 	lsr.w	r1, r0, r1
 8000296:	fa0c fc02 	lsl.w	ip, ip, r2
 800029a:	ea41 0e03 	orr.w	lr, r1, r3
 800029e:	4094      	lsls	r4, r2
 80002a0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002a4:	0c21      	lsrs	r1, r4, #16
 80002a6:	fbbe f6f8 	udiv	r6, lr, r8
 80002aa:	fa1f f78c 	uxth.w	r7, ip
 80002ae:	fb08 e316 	mls	r3, r8, r6, lr
 80002b2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002b6:	fb06 f107 	mul.w	r1, r6, r7
 80002ba:	4299      	cmp	r1, r3
 80002bc:	d90a      	bls.n	80002d4 <__udivmoddi4+0x64>
 80002be:	eb1c 0303 	adds.w	r3, ip, r3
 80002c2:	f106 30ff 	add.w	r0, r6, #4294967295
 80002c6:	f080 811f 	bcs.w	8000508 <__udivmoddi4+0x298>
 80002ca:	4299      	cmp	r1, r3
 80002cc:	f240 811c 	bls.w	8000508 <__udivmoddi4+0x298>
 80002d0:	3e02      	subs	r6, #2
 80002d2:	4463      	add	r3, ip
 80002d4:	1a5b      	subs	r3, r3, r1
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002dc:	fb08 3310 	mls	r3, r8, r0, r3
 80002e0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e4:	fb00 f707 	mul.w	r7, r0, r7
 80002e8:	42a7      	cmp	r7, r4
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x92>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f4:	f080 810a 	bcs.w	800050c <__udivmoddi4+0x29c>
 80002f8:	42a7      	cmp	r7, r4
 80002fa:	f240 8107 	bls.w	800050c <__udivmoddi4+0x29c>
 80002fe:	4464      	add	r4, ip
 8000300:	3802      	subs	r0, #2
 8000302:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000306:	1be4      	subs	r4, r4, r7
 8000308:	2600      	movs	r6, #0
 800030a:	b11d      	cbz	r5, 8000314 <__udivmoddi4+0xa4>
 800030c:	40d4      	lsrs	r4, r2
 800030e:	2300      	movs	r3, #0
 8000310:	e9c5 4300 	strd	r4, r3, [r5]
 8000314:	4631      	mov	r1, r6
 8000316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0xc2>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80ef 	beq.w	8000502 <__udivmoddi4+0x292>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x160>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0xd4>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80f9 	bhi.w	8000536 <__udivmoddi4+0x2c6>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0303 	sbc.w	r3, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	469e      	mov	lr, r3
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0e0      	beq.n	8000314 <__udivmoddi4+0xa4>
 8000352:	e9c5 4e00 	strd	r4, lr, [r5]
 8000356:	e7dd      	b.n	8000314 <__udivmoddi4+0xa4>
 8000358:	b902      	cbnz	r2, 800035c <__udivmoddi4+0xec>
 800035a:	deff      	udf	#255	; 0xff
 800035c:	fab2 f282 	clz	r2, r2
 8000360:	2a00      	cmp	r2, #0
 8000362:	f040 8092 	bne.w	800048a <__udivmoddi4+0x21a>
 8000366:	eba1 010c 	sub.w	r1, r1, ip
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f fe8c 	uxth.w	lr, ip
 8000372:	2601      	movs	r6, #1
 8000374:	0c20      	lsrs	r0, r4, #16
 8000376:	fbb1 f3f7 	udiv	r3, r1, r7
 800037a:	fb07 1113 	mls	r1, r7, r3, r1
 800037e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000382:	fb0e f003 	mul.w	r0, lr, r3
 8000386:	4288      	cmp	r0, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0x12c>
 800038a:	eb1c 0101 	adds.w	r1, ip, r1
 800038e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x12a>
 8000394:	4288      	cmp	r0, r1
 8000396:	f200 80cb 	bhi.w	8000530 <__udivmoddi4+0x2c0>
 800039a:	4643      	mov	r3, r8
 800039c:	1a09      	subs	r1, r1, r0
 800039e:	b2a4      	uxth	r4, r4
 80003a0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003a4:	fb07 1110 	mls	r1, r7, r0, r1
 80003a8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ac:	fb0e fe00 	mul.w	lr, lr, r0
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x156>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003bc:	d202      	bcs.n	80003c4 <__udivmoddi4+0x154>
 80003be:	45a6      	cmp	lr, r4
 80003c0:	f200 80bb 	bhi.w	800053a <__udivmoddi4+0x2ca>
 80003c4:	4608      	mov	r0, r1
 80003c6:	eba4 040e 	sub.w	r4, r4, lr
 80003ca:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003ce:	e79c      	b.n	800030a <__udivmoddi4+0x9a>
 80003d0:	f1c6 0720 	rsb	r7, r6, #32
 80003d4:	40b3      	lsls	r3, r6
 80003d6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003da:	ea4c 0c03 	orr.w	ip, ip, r3
 80003de:	fa20 f407 	lsr.w	r4, r0, r7
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	431c      	orrs	r4, r3
 80003e8:	40f9      	lsrs	r1, r7
 80003ea:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ee:	fa00 f306 	lsl.w	r3, r0, r6
 80003f2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003f6:	0c20      	lsrs	r0, r4, #16
 80003f8:	fa1f fe8c 	uxth.w	lr, ip
 80003fc:	fb09 1118 	mls	r1, r9, r8, r1
 8000400:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000404:	fb08 f00e 	mul.w	r0, r8, lr
 8000408:	4288      	cmp	r0, r1
 800040a:	fa02 f206 	lsl.w	r2, r2, r6
 800040e:	d90b      	bls.n	8000428 <__udivmoddi4+0x1b8>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f108 3aff 	add.w	sl, r8, #4294967295
 8000418:	f080 8088 	bcs.w	800052c <__udivmoddi4+0x2bc>
 800041c:	4288      	cmp	r0, r1
 800041e:	f240 8085 	bls.w	800052c <__udivmoddi4+0x2bc>
 8000422:	f1a8 0802 	sub.w	r8, r8, #2
 8000426:	4461      	add	r1, ip
 8000428:	1a09      	subs	r1, r1, r0
 800042a:	b2a4      	uxth	r4, r4
 800042c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000430:	fb09 1110 	mls	r1, r9, r0, r1
 8000434:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000438:	fb00 fe0e 	mul.w	lr, r0, lr
 800043c:	458e      	cmp	lr, r1
 800043e:	d908      	bls.n	8000452 <__udivmoddi4+0x1e2>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f100 34ff 	add.w	r4, r0, #4294967295
 8000448:	d26c      	bcs.n	8000524 <__udivmoddi4+0x2b4>
 800044a:	458e      	cmp	lr, r1
 800044c:	d96a      	bls.n	8000524 <__udivmoddi4+0x2b4>
 800044e:	3802      	subs	r0, #2
 8000450:	4461      	add	r1, ip
 8000452:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000456:	fba0 9402 	umull	r9, r4, r0, r2
 800045a:	eba1 010e 	sub.w	r1, r1, lr
 800045e:	42a1      	cmp	r1, r4
 8000460:	46c8      	mov	r8, r9
 8000462:	46a6      	mov	lr, r4
 8000464:	d356      	bcc.n	8000514 <__udivmoddi4+0x2a4>
 8000466:	d053      	beq.n	8000510 <__udivmoddi4+0x2a0>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x212>
 800046a:	ebb3 0208 	subs.w	r2, r3, r8
 800046e:	eb61 010e 	sbc.w	r1, r1, lr
 8000472:	fa01 f707 	lsl.w	r7, r1, r7
 8000476:	fa22 f306 	lsr.w	r3, r2, r6
 800047a:	40f1      	lsrs	r1, r6
 800047c:	431f      	orrs	r7, r3
 800047e:	e9c5 7100 	strd	r7, r1, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	f1c2 0320 	rsb	r3, r2, #32
 800048e:	40d8      	lsrs	r0, r3
 8000490:	fa0c fc02 	lsl.w	ip, ip, r2
 8000494:	fa21 f303 	lsr.w	r3, r1, r3
 8000498:	4091      	lsls	r1, r2
 800049a:	4301      	orrs	r1, r0
 800049c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a0:	fa1f fe8c 	uxth.w	lr, ip
 80004a4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004a8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ac:	0c0b      	lsrs	r3, r1, #16
 80004ae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004b2:	fb00 f60e 	mul.w	r6, r0, lr
 80004b6:	429e      	cmp	r6, r3
 80004b8:	fa04 f402 	lsl.w	r4, r4, r2
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x260>
 80004be:	eb1c 0303 	adds.w	r3, ip, r3
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	d22f      	bcs.n	8000528 <__udivmoddi4+0x2b8>
 80004c8:	429e      	cmp	r6, r3
 80004ca:	d92d      	bls.n	8000528 <__udivmoddi4+0x2b8>
 80004cc:	3802      	subs	r0, #2
 80004ce:	4463      	add	r3, ip
 80004d0:	1b9b      	subs	r3, r3, r6
 80004d2:	b289      	uxth	r1, r1
 80004d4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004d8:	fb07 3316 	mls	r3, r7, r6, r3
 80004dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e0:	fb06 f30e 	mul.w	r3, r6, lr
 80004e4:	428b      	cmp	r3, r1
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x28a>
 80004e8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ec:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f0:	d216      	bcs.n	8000520 <__udivmoddi4+0x2b0>
 80004f2:	428b      	cmp	r3, r1
 80004f4:	d914      	bls.n	8000520 <__udivmoddi4+0x2b0>
 80004f6:	3e02      	subs	r6, #2
 80004f8:	4461      	add	r1, ip
 80004fa:	1ac9      	subs	r1, r1, r3
 80004fc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000500:	e738      	b.n	8000374 <__udivmoddi4+0x104>
 8000502:	462e      	mov	r6, r5
 8000504:	4628      	mov	r0, r5
 8000506:	e705      	b.n	8000314 <__udivmoddi4+0xa4>
 8000508:	4606      	mov	r6, r0
 800050a:	e6e3      	b.n	80002d4 <__udivmoddi4+0x64>
 800050c:	4618      	mov	r0, r3
 800050e:	e6f8      	b.n	8000302 <__udivmoddi4+0x92>
 8000510:	454b      	cmp	r3, r9
 8000512:	d2a9      	bcs.n	8000468 <__udivmoddi4+0x1f8>
 8000514:	ebb9 0802 	subs.w	r8, r9, r2
 8000518:	eb64 0e0c 	sbc.w	lr, r4, ip
 800051c:	3801      	subs	r0, #1
 800051e:	e7a3      	b.n	8000468 <__udivmoddi4+0x1f8>
 8000520:	4646      	mov	r6, r8
 8000522:	e7ea      	b.n	80004fa <__udivmoddi4+0x28a>
 8000524:	4620      	mov	r0, r4
 8000526:	e794      	b.n	8000452 <__udivmoddi4+0x1e2>
 8000528:	4640      	mov	r0, r8
 800052a:	e7d1      	b.n	80004d0 <__udivmoddi4+0x260>
 800052c:	46d0      	mov	r8, sl
 800052e:	e77b      	b.n	8000428 <__udivmoddi4+0x1b8>
 8000530:	3b02      	subs	r3, #2
 8000532:	4461      	add	r1, ip
 8000534:	e732      	b.n	800039c <__udivmoddi4+0x12c>
 8000536:	4630      	mov	r0, r6
 8000538:	e709      	b.n	800034e <__udivmoddi4+0xde>
 800053a:	4464      	add	r4, ip
 800053c:	3802      	subs	r0, #2
 800053e:	e742      	b.n	80003c6 <__udivmoddi4+0x156>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000548:	f3bf 8f4f 	dsb	sy
}
 800054c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800054e:	f3bf 8f6f 	isb	sy
}
 8000552:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000554:	4b0d      	ldr	r3, [pc, #52]	; (800058c <SCB_EnableICache+0x48>)
 8000556:	2200      	movs	r2, #0
 8000558:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800055c:	f3bf 8f4f 	dsb	sy
}
 8000560:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000562:	f3bf 8f6f 	isb	sy
}
 8000566:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000568:	4b08      	ldr	r3, [pc, #32]	; (800058c <SCB_EnableICache+0x48>)
 800056a:	695b      	ldr	r3, [r3, #20]
 800056c:	4a07      	ldr	r2, [pc, #28]	; (800058c <SCB_EnableICache+0x48>)
 800056e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000572:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000574:	f3bf 8f4f 	dsb	sy
}
 8000578:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800057a:	f3bf 8f6f 	isb	sy
}
 800057e:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000596:	4b1f      	ldr	r3, [pc, #124]	; (8000614 <SCB_EnableDCache+0x84>)
 8000598:	2200      	movs	r2, #0
 800059a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800059e:	f3bf 8f4f 	dsb	sy
}
 80005a2:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80005a4:	4b1b      	ldr	r3, [pc, #108]	; (8000614 <SCB_EnableDCache+0x84>)
 80005a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80005aa:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	0b5b      	lsrs	r3, r3, #13
 80005b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80005b4:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	08db      	lsrs	r3, r3, #3
 80005ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80005be:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005c0:	68fb      	ldr	r3, [r7, #12]
 80005c2:	015a      	lsls	r2, r3, #5
 80005c4:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80005c8:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80005ca:	68ba      	ldr	r2, [r7, #8]
 80005cc:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80005ce:	4911      	ldr	r1, [pc, #68]	; (8000614 <SCB_EnableDCache+0x84>)
 80005d0:	4313      	orrs	r3, r2
 80005d2:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80005d6:	68bb      	ldr	r3, [r7, #8]
 80005d8:	1e5a      	subs	r2, r3, #1
 80005da:	60ba      	str	r2, [r7, #8]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d1ef      	bne.n	80005c0 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	1e5a      	subs	r2, r3, #1
 80005e4:	60fa      	str	r2, [r7, #12]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d1e5      	bne.n	80005b6 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80005ea:	f3bf 8f4f 	dsb	sy
}
 80005ee:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	4a07      	ldr	r2, [pc, #28]	; (8000614 <SCB_EnableDCache+0x84>)
 80005f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005fa:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005fc:	f3bf 8f4f 	dsb	sy
}
 8000600:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000602:	f3bf 8f6f 	isb	sy
}
 8000606:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000608:	bf00      	nop
 800060a:	3714      	adds	r7, #20
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr
 8000614:	e000ed00 	.word	0xe000ed00

08000618 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800061c:	f7ff ff92 	bl	8000544 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000620:	f7ff ffb6 	bl	8000590 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f001 fa12 	bl	8001a4c <HAL_Init>

  /* USER CODE BEGIN Init */
  memset(temp_light_state, 0, sizeof(temp_light_state));		// Set all to 0.
 8000628:	2203      	movs	r2, #3
 800062a:	2100      	movs	r1, #0
 800062c:	4824      	ldr	r0, [pc, #144]	; (80006c0 <main+0xa8>)
 800062e:	f011 fb53 	bl	8011cd8 <memset>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f863 	bl	80006fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 fb37 	bl	8000ca8 <MX_GPIO_Init>

  MX_DMA_Init();
 800063a:	f000 fb03 	bl	8000c44 <MX_DMA_Init>

  MX_CAN1_Init();
 800063e:	f000 f8cd 	bl	80007dc <MX_CAN1_Init>
  MX_DAC_Init();
 8000642:	f000 f8ff 	bl	8000844 <MX_DAC_Init>
  MX_ETH_Init();
 8000646:	f000 f927 	bl	8000898 <MX_ETH_Init>
  MX_I2C1_Init();
 800064a:	f000 f973 	bl	8000934 <MX_I2C1_Init>
  MX_SPI1_Init();
 800064e:	f000 f9b1 	bl	80009b4 <MX_SPI1_Init>
  MX_SPI3_Init();
 8000652:	f000 f9e9 	bl	8000a28 <MX_SPI3_Init>
  MX_TIM1_Init();
 8000656:	f000 fa21 	bl	8000a9c <MX_TIM1_Init>
  MX_UART7_Init();
 800065a:	f000 fac3 	bl	8000be4 <MX_UART7_Init>
  //	However, MxCube auto generates it to be after the peripherals.
  //	So whenever a change has been done the .ioc-file and code has been generated, the MX_DMA_Init();  n e e d s  t o  b e  m o v e d !

  // ************************************************

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800065e:	2100      	movs	r1, #0
 8000660:	4818      	ldr	r0, [pc, #96]	; (80006c4 <main+0xac>)
 8000662:	f001 fc4d 	bl	8001f00 <HAL_DAC_Start>
  HAL_UARTEx_ReceiveToIdle_DMA(&huart7, uart_rx_buffer, HIL_UART_BUFFER_SIZE);
 8000666:	2280      	movs	r2, #128	; 0x80
 8000668:	4917      	ldr	r1, [pc, #92]	; (80006c8 <main+0xb0>)
 800066a:	4818      	ldr	r0, [pc, #96]	; (80006cc <main+0xb4>)
 800066c:	f009 f82a 	bl	80096c4 <HAL_UARTEx_ReceiveToIdle_DMA>
//  initialise_monitor_handles();		//Enables the use of printf-statements. Use for debug.

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000670:	f00d f83c 	bl	800d6ec <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of LightOnSem */
  LightOnSemHandle = osSemaphoreNew(1, 1, &LightOnSem_attributes);
 8000674:	4a16      	ldr	r2, [pc, #88]	; (80006d0 <main+0xb8>)
 8000676:	2101      	movs	r1, #1
 8000678:	2001      	movs	r0, #1
 800067a:	f00d f975 	bl	800d968 <osSemaphoreNew>
 800067e:	4603      	mov	r3, r0
 8000680:	4a14      	ldr	r2, [pc, #80]	; (80006d4 <main+0xbc>)
 8000682:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */

  //Initialize the user defined message queues. For e.g. USB RX.
  HiL_Init_MSGQ();
 8000684:	f00a fcbe 	bl	800b004 <HiL_Init_MSGQ>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task_controller */
  Task_controllerHandle = osThreadNew(StartTask_controller, NULL, &Task_controller_attributes);
 8000688:	4a13      	ldr	r2, [pc, #76]	; (80006d8 <main+0xc0>)
 800068a:	2100      	movs	r1, #0
 800068c:	4813      	ldr	r0, [pc, #76]	; (80006dc <main+0xc4>)
 800068e:	f00d f897 	bl	800d7c0 <osThreadNew>
 8000692:	4603      	mov	r3, r0
 8000694:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <main+0xc8>)
 8000696:	6013      	str	r3, [r2, #0]

  /* creation of Task_SHT20 */
  Task_SHT20Handle = osThreadNew(StartTask_SHT20, NULL, &Task_SHT20_attributes);
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <main+0xcc>)
 800069a:	2100      	movs	r1, #0
 800069c:	4812      	ldr	r0, [pc, #72]	; (80006e8 <main+0xd0>)
 800069e:	f00d f88f 	bl	800d7c0 <osThreadNew>
 80006a2:	4603      	mov	r3, r0
 80006a4:	4a11      	ldr	r2, [pc, #68]	; (80006ec <main+0xd4>)
 80006a6:	6013      	str	r3, [r2, #0]

  /* creation of Task_74HC595D */
  Task_74HC595DHandle = osThreadNew(StartTask_74HC595D, NULL, &Task_74HC595D_attributes);
 80006a8:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <main+0xd8>)
 80006aa:	2100      	movs	r1, #0
 80006ac:	4811      	ldr	r0, [pc, #68]	; (80006f4 <main+0xdc>)
 80006ae:	f00d f887 	bl	800d7c0 <osThreadNew>
 80006b2:	4603      	mov	r3, r0
 80006b4:	4a10      	ldr	r2, [pc, #64]	; (80006f8 <main+0xe0>)
 80006b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80006b8:	f00d f84c 	bl	800d754 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <main+0xa4>
 80006be:	bf00      	nop
 80006c0:	2000078c 	.word	0x2000078c
 80006c4:	200003b4 	.word	0x200003b4
 80006c8:	20000790 	.word	0x20000790
 80006cc:	20000640 	.word	0x20000640
 80006d0:	080120cc 	.word	0x080120cc
 80006d4:	20000734 	.word	0x20000734
 80006d8:	08012060 	.word	0x08012060
 80006dc:	08000f75 	.word	0x08000f75
 80006e0:	20000728 	.word	0x20000728
 80006e4:	08012084 	.word	0x08012084
 80006e8:	08000fe1 	.word	0x08000fe1
 80006ec:	2000072c 	.word	0x2000072c
 80006f0:	080120a8 	.word	0x080120a8
 80006f4:	08000ff5 	.word	0x08000ff5
 80006f8:	20000730 	.word	0x20000730

080006fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b094      	sub	sp, #80	; 0x50
 8000700:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	2234      	movs	r2, #52	; 0x34
 8000708:	2100      	movs	r1, #0
 800070a:	4618      	mov	r0, r3
 800070c:	f011 fae4 	bl	8011cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
 8000718:	605a      	str	r2, [r3, #4]
 800071a:	609a      	str	r2, [r3, #8]
 800071c:	60da      	str	r2, [r3, #12]
 800071e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000720:	4b2c      	ldr	r3, [pc, #176]	; (80007d4 <SystemClock_Config+0xd8>)
 8000722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000724:	4a2b      	ldr	r2, [pc, #172]	; (80007d4 <SystemClock_Config+0xd8>)
 8000726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072a:	6413      	str	r3, [r2, #64]	; 0x40
 800072c:	4b29      	ldr	r3, [pc, #164]	; (80007d4 <SystemClock_Config+0xd8>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000730:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000738:	4b27      	ldr	r3, [pc, #156]	; (80007d8 <SystemClock_Config+0xdc>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000740:	4a25      	ldr	r2, [pc, #148]	; (80007d8 <SystemClock_Config+0xdc>)
 8000742:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000746:	6013      	str	r3, [r2, #0]
 8000748:	4b23      	ldr	r3, [pc, #140]	; (80007d8 <SystemClock_Config+0xdc>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000754:	2301      	movs	r3, #1
 8000756:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000758:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800075c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800075e:	2302      	movs	r3, #2
 8000760:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000762:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000766:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000768:	2304      	movs	r3, #4
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800076c:	2360      	movs	r3, #96	; 0x60
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000770:	2302      	movs	r3, #2
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000774:	2304      	movs	r3, #4
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000778:	2302      	movs	r3, #2
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800077c:	f107 031c 	add.w	r3, r7, #28
 8000780:	4618      	mov	r0, r3
 8000782:	f004 fa47 	bl	8004c14 <HAL_RCC_OscConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800078c:	f000 fc74 	bl	8001078 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000790:	f004 f9f0 	bl	8004b74 <HAL_PWREx_EnableOverDrive>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800079a:	f000 fc6d 	bl	8001078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079e:	230f      	movs	r3, #15
 80007a0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a2:	2302      	movs	r3, #2
 80007a4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007b0:	2300      	movs	r3, #0
 80007b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2103      	movs	r1, #3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f004 fcd8 	bl	8005170 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007c6:	f000 fc57 	bl	8001078 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	; 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80007e0:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_CAN1_Init+0x60>)
 80007e2:	4a17      	ldr	r2, [pc, #92]	; (8000840 <MX_CAN1_Init+0x64>)
 80007e4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80007e6:	4b15      	ldr	r3, [pc, #84]	; (800083c <MX_CAN1_Init+0x60>)
 80007e8:	2210      	movs	r2, #16
 80007ea:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80007ec:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_CAN1_Init+0x60>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80007f2:	4b12      	ldr	r3, [pc, #72]	; (800083c <MX_CAN1_Init+0x60>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 80007f8:	4b10      	ldr	r3, [pc, #64]	; (800083c <MX_CAN1_Init+0x60>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 80007fe:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_CAN1_Init+0x60>)
 8000800:	2200      	movs	r2, #0
 8000802:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000804:	4b0d      	ldr	r3, [pc, #52]	; (800083c <MX_CAN1_Init+0x60>)
 8000806:	2200      	movs	r2, #0
 8000808:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800080a:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_CAN1_Init+0x60>)
 800080c:	2200      	movs	r2, #0
 800080e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <MX_CAN1_Init+0x60>)
 8000812:	2200      	movs	r2, #0
 8000814:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_CAN1_Init+0x60>)
 8000818:	2200      	movs	r2, #0
 800081a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800081c:	4b07      	ldr	r3, [pc, #28]	; (800083c <MX_CAN1_Init+0x60>)
 800081e:	2200      	movs	r2, #0
 8000820:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_CAN1_Init+0x60>)
 8000824:	2200      	movs	r2, #0
 8000826:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_CAN1_Init+0x60>)
 800082a:	f001 f969 	bl	8001b00 <HAL_CAN_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_CAN1_Init+0x5c>
  {
    Error_Handler();
 8000834:	f000 fc20 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	2000038c 	.word	0x2000038c
 8000840:	40006400 	.word	0x40006400

08000844 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800084a:	463b      	mov	r3, r7
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000852:	4b0f      	ldr	r3, [pc, #60]	; (8000890 <MX_DAC_Init+0x4c>)
 8000854:	4a0f      	ldr	r2, [pc, #60]	; (8000894 <MX_DAC_Init+0x50>)
 8000856:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000858:	480d      	ldr	r0, [pc, #52]	; (8000890 <MX_DAC_Init+0x4c>)
 800085a:	f001 fb2f 	bl	8001ebc <HAL_DAC_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000864:	f000 fc08 	bl	8001078 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000868:	2300      	movs	r3, #0
 800086a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800086c:	2300      	movs	r3, #0
 800086e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000870:	463b      	mov	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	4619      	mov	r1, r3
 8000876:	4806      	ldr	r0, [pc, #24]	; (8000890 <MX_DAC_Init+0x4c>)
 8000878:	f001 fc1d 	bl	80020b6 <HAL_DAC_ConfigChannel>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000882:	f000 fbf9 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000886:	bf00      	nop
 8000888:	3708      	adds	r7, #8
 800088a:	46bd      	mov	sp, r7
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	200003b4 	.word	0x200003b4
 8000894:	40007400 	.word	0x40007400

08000898 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 800089c:	4b1f      	ldr	r3, [pc, #124]	; (800091c <MX_ETH_Init+0x84>)
 800089e:	4a20      	ldr	r2, [pc, #128]	; (8000920 <MX_ETH_Init+0x88>)
 80008a0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008a2:	4b20      	ldr	r3, [pc, #128]	; (8000924 <MX_ETH_Init+0x8c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008a8:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <MX_ETH_Init+0x8c>)
 80008aa:	2280      	movs	r2, #128	; 0x80
 80008ac:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008ae:	4b1d      	ldr	r3, [pc, #116]	; (8000924 <MX_ETH_Init+0x8c>)
 80008b0:	22e1      	movs	r2, #225	; 0xe1
 80008b2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008b4:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <MX_ETH_Init+0x8c>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008ba:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_ETH_Init+0x8c>)
 80008bc:	2200      	movs	r2, #0
 80008be:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008c0:	4b18      	ldr	r3, [pc, #96]	; (8000924 <MX_ETH_Init+0x8c>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008c6:	4b15      	ldr	r3, [pc, #84]	; (800091c <MX_ETH_Init+0x84>)
 80008c8:	4a16      	ldr	r2, [pc, #88]	; (8000924 <MX_ETH_Init+0x8c>)
 80008ca:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008cc:	4b13      	ldr	r3, [pc, #76]	; (800091c <MX_ETH_Init+0x84>)
 80008ce:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80008d2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008d4:	4b11      	ldr	r3, [pc, #68]	; (800091c <MX_ETH_Init+0x84>)
 80008d6:	4a14      	ldr	r2, [pc, #80]	; (8000928 <MX_ETH_Init+0x90>)
 80008d8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008da:	4b10      	ldr	r3, [pc, #64]	; (800091c <MX_ETH_Init+0x84>)
 80008dc:	4a13      	ldr	r2, [pc, #76]	; (800092c <MX_ETH_Init+0x94>)
 80008de:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <MX_ETH_Init+0x84>)
 80008e2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008e6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <MX_ETH_Init+0x84>)
 80008ea:	f002 f847 	bl	800297c <HAL_ETH_Init>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80008f4:	f000 fbc0 	bl	8001078 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008f8:	2238      	movs	r2, #56	; 0x38
 80008fa:	2100      	movs	r1, #0
 80008fc:	480c      	ldr	r0, [pc, #48]	; (8000930 <MX_ETH_Init+0x98>)
 80008fe:	f011 f9eb 	bl	8011cd8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_ETH_Init+0x98>)
 8000904:	2221      	movs	r2, #33	; 0x21
 8000906:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_ETH_Init+0x98>)
 800090a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800090e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MX_ETH_Init+0x98>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000916:	bf00      	nop
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	200003c8 	.word	0x200003c8
 8000920:	40028000 	.word	0x40028000
 8000924:	20000810 	.word	0x20000810
 8000928:	20000298 	.word	0x20000298
 800092c:	200001f8 	.word	0x200001f8
 8000930:	20000354 	.word	0x20000354

08000934 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000938:	4b1b      	ldr	r3, [pc, #108]	; (80009a8 <MX_I2C1_Init+0x74>)
 800093a:	4a1c      	ldr	r2, [pc, #112]	; (80009ac <MX_I2C1_Init+0x78>)
 800093c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20303E5D;
 800093e:	4b1a      	ldr	r3, [pc, #104]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000940:	4a1b      	ldr	r2, [pc, #108]	; (80009b0 <MX_I2C1_Init+0x7c>)
 8000942:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000944:	4b18      	ldr	r3, [pc, #96]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800094a:	4b17      	ldr	r3, [pc, #92]	; (80009a8 <MX_I2C1_Init+0x74>)
 800094c:	2201      	movs	r2, #1
 800094e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000950:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000956:	4b14      	ldr	r3, [pc, #80]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <MX_I2C1_Init+0x74>)
 800095e:	2200      	movs	r2, #0
 8000960:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000962:	4b11      	ldr	r3, [pc, #68]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000964:	2200      	movs	r2, #0
 8000966:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000968:	4b0f      	ldr	r3, [pc, #60]	; (80009a8 <MX_I2C1_Init+0x74>)
 800096a:	2200      	movs	r2, #0
 800096c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800096e:	480e      	ldr	r0, [pc, #56]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000970:	f002 fd20 	bl	80033b4 <HAL_I2C_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800097a:	f000 fb7d 	bl	8001078 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800097e:	2100      	movs	r1, #0
 8000980:	4809      	ldr	r0, [pc, #36]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000982:	f002 fda7 	bl	80034d4 <HAL_I2CEx_ConfigAnalogFilter>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800098c:	f000 fb74 	bl	8001078 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000990:	2100      	movs	r1, #0
 8000992:	4805      	ldr	r0, [pc, #20]	; (80009a8 <MX_I2C1_Init+0x74>)
 8000994:	f002 fde9 	bl	800356a <HAL_I2CEx_ConfigDigitalFilter>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800099e:	f000 fb6b 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	20000478 	.word	0x20000478
 80009ac:	40005400 	.word	0x40005400
 80009b0:	20303e5d 	.word	0x20303e5d

080009b4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
void MX_SPI1_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80009b8:	4b19      	ldr	r3, [pc, #100]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009ba:	4a1a      	ldr	r2, [pc, #104]	; (8000a24 <MX_SPI1_Init+0x70>)
 80009bc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80009c4:	4b16      	ldr	r3, [pc, #88]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009ca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80009cc:	4b14      	ldr	r3, [pc, #80]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009ce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80009d2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009d4:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009dc:	2200      	movs	r2, #0
 80009de:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80009e0:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009e6:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009e8:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80009ee:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009f4:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80009fa:	4b09      	ldr	r3, [pc, #36]	; (8000a20 <MX_SPI1_Init+0x6c>)
 80009fc:	2207      	movs	r2, #7
 80009fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a00:	4b07      	ldr	r3, [pc, #28]	; (8000a20 <MX_SPI1_Init+0x6c>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a06:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <MX_SPI1_Init+0x6c>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a0c:	4804      	ldr	r0, [pc, #16]	; (8000a20 <MX_SPI1_Init+0x6c>)
 8000a0e:	f005 fa2f 	bl	8005e70 <HAL_SPI_Init>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <MX_SPI1_Init+0x68>
  {
    Error_Handler();
 8000a18:	f000 fb2e 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	200004cc 	.word	0x200004cc
 8000a24:	40013000 	.word	0x40013000

08000a28 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a2c:	4b19      	ldr	r3, [pc, #100]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a2e:	4a1a      	ldr	r2, [pc, #104]	; (8000a98 <MX_SPI3_Init+0x70>)
 8000a30:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_SLAVE;
 8000a32:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 8000a38:	4b16      	ldr	r3, [pc, #88]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a3e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000a40:	4b14      	ldr	r3, [pc, #80]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a42:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000a46:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a48:	4b12      	ldr	r3, [pc, #72]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a4e:	4b11      	ldr	r3, [pc, #68]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a54:	4b0f      	ldr	r3, [pc, #60]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a56:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5a:	619a      	str	r2, [r3, #24]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a5c:	4b0d      	ldr	r3, [pc, #52]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a62:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000a6e:	4b09      	ldr	r3, [pc, #36]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a70:	2207      	movs	r2, #7
 8000a72:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a74:	4b07      	ldr	r3, [pc, #28]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a80:	4804      	ldr	r0, [pc, #16]	; (8000a94 <MX_SPI3_Init+0x6c>)
 8000a82:	f005 f9f5 	bl	8005e70 <HAL_SPI_Init>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_SPI3_Init+0x68>
  {
    Error_Handler();
 8000a8c:	f000 faf4 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	20000530 	.word	0x20000530
 8000a98:	40003c00 	.word	0x40003c00

08000a9c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b090      	sub	sp, #64	; 0x40
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000aa2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	601a      	str	r2, [r3, #0]
 8000aaa:	605a      	str	r2, [r3, #4]
 8000aac:	609a      	str	r2, [r3, #8]
 8000aae:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000ab0:	f107 031c 	add.w	r3, r7, #28
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ace:	463b      	mov	r3, r7
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000ad8:	4b40      	ldr	r3, [pc, #256]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000ada:	4a41      	ldr	r2, [pc, #260]	; (8000be0 <MX_TIM1_Init+0x144>)
 8000adc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000ade:	4b3f      	ldr	r3, [pc, #252]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae4:	4b3d      	ldr	r3, [pc, #244]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000aea:	4b3c      	ldr	r3, [pc, #240]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000af2:	4b3a      	ldr	r3, [pc, #232]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000af8:	4b38      	ldr	r3, [pc, #224]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afe:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b04:	4835      	ldr	r0, [pc, #212]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000b06:	f006 f855 	bl	8006bb4 <HAL_TIM_Base_Init>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000b10:	f000 fab2 	bl	8001078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b18:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b1a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b1e:	4619      	mov	r1, r3
 8000b20:	482e      	ldr	r0, [pc, #184]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000b22:	f006 feb9 	bl	8007898 <HAL_TIM_ConfigClockSource>
 8000b26:	4603      	mov	r3, r0
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000b2c:	f000 faa4 	bl	8001078 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b30:	482a      	ldr	r0, [pc, #168]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000b32:	f006 f90f 	bl	8006d54 <HAL_TIM_IC_Init>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000b3c:	f000 fa9c 	bl	8001078 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8000b40:	2304      	movs	r3, #4
 8000b42:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8000b44:	2350      	movs	r3, #80	; 0x50
 8000b46:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerPrescaler = TIM_ICPSC_DIV1;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	62bb      	str	r3, [r7, #40]	; 0x28
  sSlaveConfig.TriggerFilter = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b54:	f107 031c 	add.w	r3, r7, #28
 8000b58:	4619      	mov	r1, r3
 8000b5a:	4820      	ldr	r0, [pc, #128]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000b5c:	f006 ff66 	bl	8007a2c <HAL_TIM_SlaveConfigSynchro>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8000b66:	f000 fa87 	bl	8001078 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	613b      	str	r3, [r7, #16]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000b72:	2300      	movs	r3, #0
 8000b74:	617b      	str	r3, [r7, #20]
  sConfigIC.ICFilter = 0;
 8000b76:	2300      	movs	r3, #0
 8000b78:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000b7a:	f107 030c 	add.w	r3, r7, #12
 8000b7e:	2200      	movs	r2, #0
 8000b80:	4619      	mov	r1, r3
 8000b82:	4816      	ldr	r0, [pc, #88]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000b84:	f006 fdeb 	bl	800775e <HAL_TIM_IC_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 8000b8e:	f000 fa73 	bl	8001078 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b92:	2302      	movs	r3, #2
 8000b94:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b96:	2302      	movs	r3, #2
 8000b98:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b9a:	f107 030c 	add.w	r3, r7, #12
 8000b9e:	2204      	movs	r2, #4
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480e      	ldr	r0, [pc, #56]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000ba4:	f006 fddb 	bl	800775e <HAL_TIM_IC_ConfigChannel>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8000bae:	f000 fa63 	bl	8001078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	4806      	ldr	r0, [pc, #24]	; (8000bdc <MX_TIM1_Init+0x140>)
 8000bc4:	f007 faf4 	bl	80081b0 <HAL_TIMEx_MasterConfigSynchronization>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <MX_TIM1_Init+0x136>
  {
    Error_Handler();
 8000bce:	f000 fa53 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bd2:	bf00      	nop
 8000bd4:	3740      	adds	r7, #64	; 0x40
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	200005f4 	.word	0x200005f4
 8000be0:	40010000 	.word	0x40010000

08000be4 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8000be8:	4b14      	ldr	r3, [pc, #80]	; (8000c3c <MX_UART7_Init+0x58>)
 8000bea:	4a15      	ldr	r2, [pc, #84]	; (8000c40 <MX_UART7_Init+0x5c>)
 8000bec:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8000bee:	4b13      	ldr	r3, [pc, #76]	; (8000c3c <MX_UART7_Init+0x58>)
 8000bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000bf4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8000bf6:	4b11      	ldr	r3, [pc, #68]	; (8000c3c <MX_UART7_Init+0x58>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8000bfc:	4b0f      	ldr	r3, [pc, #60]	; (8000c3c <MX_UART7_Init+0x58>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8000c02:	4b0e      	ldr	r3, [pc, #56]	; (8000c3c <MX_UART7_Init+0x58>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8000c08:	4b0c      	ldr	r3, [pc, #48]	; (8000c3c <MX_UART7_Init+0x58>)
 8000c0a:	220c      	movs	r2, #12
 8000c0c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c0e:	4b0b      	ldr	r3, [pc, #44]	; (8000c3c <MX_UART7_Init+0x58>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c14:	4b09      	ldr	r3, [pc, #36]	; (8000c3c <MX_UART7_Init+0x58>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c1a:	4b08      	ldr	r3, [pc, #32]	; (8000c3c <MX_UART7_Init+0x58>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c20:	4b06      	ldr	r3, [pc, #24]	; (8000c3c <MX_UART7_Init+0x58>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8000c26:	4805      	ldr	r0, [pc, #20]	; (8000c3c <MX_UART7_Init+0x58>)
 8000c28:	f007 fb6e 	bl	8008308 <HAL_UART_Init>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8000c32:	f000 fa21 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	20000640 	.word	0x20000640
 8000c40:	40007800 	.word	0x40007800

08000c44 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_DMA_Init+0x60>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a15      	ldr	r2, [pc, #84]	; (8000ca4 <MX_DMA_Init+0x60>)
 8000c50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <MX_DMA_Init+0x60>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c62:	4b10      	ldr	r3, [pc, #64]	; (8000ca4 <MX_DMA_Init+0x60>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <MX_DMA_Init+0x60>)
 8000c68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b0d      	ldr	r3, [pc, #52]	; (8000ca4 <MX_DMA_Init+0x60>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2105      	movs	r1, #5
 8000c7e:	200e      	movs	r0, #14
 8000c80:	f001 f8f2 	bl	8001e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c84:	200e      	movs	r0, #14
 8000c86:	f001 f90b 	bl	8001ea0 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2105      	movs	r1, #5
 8000c8e:	2038      	movs	r0, #56	; 0x38
 8000c90:	f001 f8ea 	bl	8001e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000c94:	2038      	movs	r0, #56	; 0x38
 8000c96:	f001 f903 	bl	8001ea0 <HAL_NVIC_EnableIRQ>

}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	40023800 	.word	0x40023800

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	; 0x38
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
 8000cbc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cbe:	4ba5      	ldr	r3, [pc, #660]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cc2:	4aa4      	ldr	r2, [pc, #656]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000cc4:	f043 0310 	orr.w	r3, r3, #16
 8000cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cca:	4ba2      	ldr	r3, [pc, #648]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	f003 0310 	and.w	r3, r3, #16
 8000cd2:	623b      	str	r3, [r7, #32]
 8000cd4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cd6:	4b9f      	ldr	r3, [pc, #636]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	4a9e      	ldr	r2, [pc, #632]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000cdc:	f043 0304 	orr.w	r3, r3, #4
 8000ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ce2:	4b9c      	ldr	r3, [pc, #624]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ce6:	f003 0304 	and.w	r3, r3, #4
 8000cea:	61fb      	str	r3, [r7, #28]
 8000cec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cee:	4b99      	ldr	r3, [pc, #612]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a98      	ldr	r2, [pc, #608]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000cf4:	f043 0320 	orr.w	r3, r3, #32
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b96      	ldr	r3, [pc, #600]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0320 	and.w	r3, r3, #32
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d06:	4b93      	ldr	r3, [pc, #588]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0a:	4a92      	ldr	r2, [pc, #584]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d10:	6313      	str	r3, [r2, #48]	; 0x30
 8000d12:	4b90      	ldr	r3, [pc, #576]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d1a:	617b      	str	r3, [r7, #20]
 8000d1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	4b8d      	ldr	r3, [pc, #564]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a8c      	ldr	r2, [pc, #560]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b8a      	ldr	r3, [pc, #552]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d36:	4b87      	ldr	r3, [pc, #540]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a86      	ldr	r2, [pc, #536]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b84      	ldr	r3, [pc, #528]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0302 	and.w	r3, r3, #2
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d4e:	4b81      	ldr	r3, [pc, #516]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a80      	ldr	r2, [pc, #512]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000d54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b7e      	ldr	r3, [pc, #504]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000d62:	60bb      	str	r3, [r7, #8]
 8000d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d66:	4b7b      	ldr	r3, [pc, #492]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6a:	4a7a      	ldr	r2, [pc, #488]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000d6c:	f043 0308 	orr.w	r3, r3, #8
 8000d70:	6313      	str	r3, [r2, #48]	; 0x30
 8000d72:	4b78      	ldr	r3, [pc, #480]	; (8000f54 <MX_GPIO_Init+0x2ac>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d76:	f003 0308 	and.w	r3, r3, #8
 8000d7a:	607b      	str	r3, [r7, #4]
 8000d7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, GPIO_PIN_SET);
 8000d7e:	2201      	movs	r2, #1
 8000d80:	2180      	movs	r1, #128	; 0x80
 8000d82:	4875      	ldr	r0, [pc, #468]	; (8000f58 <MX_GPIO_Init+0x2b0>)
 8000d84:	f002 fae4 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|HiL_LIS2DW12TR_Int1_Pin, GPIO_PIN_RESET);
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000d8e:	4873      	ldr	r0, [pc, #460]	; (8000f5c <MX_GPIO_Init+0x2b4>)
 8000d90:	f002 fade 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin, GPIO_PIN_SET);
 8000d94:	2201      	movs	r2, #1
 8000d96:	f24c 4110 	movw	r1, #50192	; 0xc410
 8000d9a:	4871      	ldr	r0, [pc, #452]	; (8000f60 <MX_GPIO_Init+0x2b8>)
 8000d9c:	f002 fad8 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, HiL_button3_B_Pin|HiL_button3_A_Pin, GPIO_PIN_SET);
 8000da0:	2201      	movs	r2, #1
 8000da2:	210c      	movs	r1, #12
 8000da4:	486f      	ldr	r0, [pc, #444]	; (8000f64 <MX_GPIO_Init+0x2bc>)
 8000da6:	f002 fad3 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL3_Car_GPIO_Port, HiL_TL3_Car_Pin, GPIO_PIN_SET);
 8000daa:	2201      	movs	r2, #1
 8000dac:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000db0:	486a      	ldr	r0, [pc, #424]	; (8000f5c <MX_GPIO_Init+0x2b4>)
 8000db2:	f002 facd 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, GPIO_PIN_SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dbc:	486a      	ldr	r0, [pc, #424]	; (8000f68 <MX_GPIO_Init+0x2c0>)
 8000dbe:	f002 fac7 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, HiL_TL4_Car_Pin|HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin, GPIO_PIN_SET);
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	2174      	movs	r1, #116	; 0x74
 8000dc6:	4869      	ldr	r0, [pc, #420]	; (8000f6c <MX_GPIO_Init+0x2c4>)
 8000dc8:	f002 fac2 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, HiL_LIS2DW12TR_Int2_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000dcc:	2200      	movs	r2, #0
 8000dce:	21a0      	movs	r1, #160	; 0xa0
 8000dd0:	4863      	ldr	r0, [pc, #396]	; (8000f60 <MX_GPIO_Init+0x2b8>)
 8000dd2:	f002 fabd 	bl	8003350 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : HiL_Disp_Data_Instr_Pin HiL_Disp_CS_Pin */
  GPIO_InitStruct.Pin = HiL_Disp_Data_Instr_Pin|HiL_Disp_CS_Pin;
 8000dd6:	f241 0308 	movw	r3, #4104	; 0x1008
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000de4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de8:	4619      	mov	r1, r3
 8000dea:	4861      	ldr	r0, [pc, #388]	; (8000f70 <MX_GPIO_Init+0x2c8>)
 8000dec:	f002 f8ec 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_595_Reset_Pin */
  GPIO_InitStruct.Pin = HiL_595_Reset_Pin;
 8000df0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000df6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_595_Reset_GPIO_Port, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4858      	ldr	r0, [pc, #352]	; (8000f68 <MX_GPIO_Init+0x2c0>)
 8000e08:	f002 f8de 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL2_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL2_Car_Pin;
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL2_Car_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e20:	4619      	mov	r1, r3
 8000e22:	484d      	ldr	r0, [pc, #308]	; (8000f58 <MX_GPIO_Init+0x2b0>)
 8000e24:	f002 f8d0 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_Disp_Reset_Pin HiL_595_STCP_Pin */
  GPIO_InitStruct.Pin = HiL_Disp_Reset_Pin|HiL_595_STCP_Pin;
 8000e28:	2305      	movs	r3, #5
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e38:	4619      	mov	r1, r3
 8000e3a:	484b      	ldr	r0, [pc, #300]	; (8000f68 <MX_GPIO_Init+0x2c0>)
 8000e3c:	f002 f8c4 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED1_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED1_Pin;
 8000e40:	2301      	movs	r3, #1
 8000e42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e44:	2300      	movs	r3, #0
 8000e46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED1_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e50:	4619      	mov	r1, r3
 8000e52:	4842      	ldr	r0, [pc, #264]	; (8000f5c <MX_GPIO_Init+0x2b4>)
 8000e54:	f002 f8b8 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 HiL_LIS2DW12TR_Int1_Pin HiL_TL3_Car_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_5|HiL_LIS2DW12TR_Int1_Pin|HiL_TL3_Car_Pin;
 8000e58:	f248 4320 	movw	r3, #33824	; 0x8420
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6e:	4619      	mov	r1, r3
 8000e70:	483a      	ldr	r0, [pc, #232]	; (8000f5c <MX_GPIO_Init+0x2b4>)
 8000e72:	f002 f8a9 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_USR_LED2_Pin */
  GPIO_InitStruct.Pin = HiL_USR_LED2_Pin;
 8000e76:	2301      	movs	r3, #1
 8000e78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(HiL_USR_LED2_GPIO_Port, &GPIO_InitStruct);
 8000e82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e86:	4619      	mov	r1, r3
 8000e88:	4835      	ldr	r0, [pc, #212]	; (8000f60 <MX_GPIO_Init+0x2b8>)
 8000e8a:	f002 f89d 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_SW5_Pin HiL_SW8_Pin HiL_SW6_Pin HiL_SW7_Pin */
  GPIO_InitStruct.Pin = HiL_SW5_Pin|HiL_SW8_Pin|HiL_SW6_Pin|HiL_SW7_Pin;
 8000e8e:	f24c 4310 	movw	r3, #50192	; 0xc410
 8000e92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000e94:	2311      	movs	r3, #17
 8000e96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	482e      	ldr	r0, [pc, #184]	; (8000f60 <MX_GPIO_Init+0x2b8>)
 8000ea8:	f002 f88e 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_B_Pin HiL_button3_A_Pin */
  GPIO_InitStruct.Pin = HiL_button3_B_Pin|HiL_button3_A_Pin;
 8000eac:	230c      	movs	r3, #12
 8000eae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000eb0:	2311      	movs	r3, #17
 8000eb2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4828      	ldr	r0, [pc, #160]	; (8000f64 <MX_GPIO_Init+0x2bc>)
 8000ec4:	f002 f880 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL1_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL1_Car_Pin;
 8000ec8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ecc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL1_Car_GPIO_Port, &GPIO_InitStruct);
 8000eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4821      	ldr	r0, [pc, #132]	; (8000f68 <MX_GPIO_Init+0x2c0>)
 8000ee2:	f002 f871 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HiL_TL4_Car_Pin */
  GPIO_InitStruct.Pin = HiL_TL4_Car_Pin;
 8000ee6:	2304      	movs	r3, #4
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eea:	2301      	movs	r3, #1
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HiL_TL4_Car_GPIO_Port, &GPIO_InitStruct);
 8000ef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efa:	4619      	mov	r1, r3
 8000efc:	481b      	ldr	r0, [pc, #108]	; (8000f6c <MX_GPIO_Init+0x2c4>)
 8000efe:	f002 f863 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_button3_C_Pin HiL_button3_D_Pin HiL_button3_center_Pin */
  GPIO_InitStruct.Pin = HiL_button3_C_Pin|HiL_button3_D_Pin|HiL_button3_center_Pin;
 8000f02:	2370      	movs	r3, #112	; 0x70
 8000f04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000f06:	2311      	movs	r3, #17
 8000f08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f16:	4619      	mov	r1, r3
 8000f18:	4814      	ldr	r0, [pc, #80]	; (8000f6c <MX_GPIO_Init+0x2c4>)
 8000f1a:	f002 f855 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HiL_LIS2DW12TR_Int2_Pin LD2_Pin */
  GPIO_InitStruct.Pin = HiL_LIS2DW12TR_Int2_Pin|LD2_Pin;
 8000f1e:	23a0      	movs	r3, #160	; 0xa0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f22:	2301      	movs	r3, #1
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f32:	4619      	mov	r1, r3
 8000f34:	480a      	ldr	r0, [pc, #40]	; (8000f60 <MX_GPIO_Init+0x2b8>)
 8000f36:	f002 f847 	bl	8002fc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	2105      	movs	r1, #5
 8000f3e:	2028      	movs	r0, #40	; 0x28
 8000f40:	f000 ff92 	bl	8001e68 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f44:	2028      	movs	r0, #40	; 0x28
 8000f46:	f000 ffab 	bl	8001ea0 <HAL_NVIC_EnableIRQ>

}
 8000f4a:	bf00      	nop
 8000f4c:	3738      	adds	r7, #56	; 0x38
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}
 8000f52:	bf00      	nop
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40021400 	.word	0x40021400
 8000f5c:	40020000 	.word	0x40020000
 8000f60:	40020400 	.word	0x40020400
 8000f64:	40021800 	.word	0x40021800
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020c00 	.word	0x40020c00
 8000f70:	40021000 	.word	0x40021000

08000f74 <StartTask_controller>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_controller */
void StartTask_controller(void *argument)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* init code for USB_DEVICE */
  MX_USB_DEVICE_Init();
 8000f7c:	f010 f8be 	bl	80110fc <MX_USB_DEVICE_Init>
  uint8_t recieve_message[4];

  /* Infinite loop */
  for(;;)
  {
	  if( USB_MSGQ_Rx != NULL )
 8000f80:	4b16      	ldr	r3, [pc, #88]	; (8000fdc <StartTask_controller+0x68>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d024      	beq.n	8000fd2 <StartTask_controller+0x5e>
	 	  {

	 			status = osMessageQueueGet(USB_MSGQ_Rx, &msg, NULL, 0U);		// Try to get message with instructions from USB message queue
 8000f88:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <StartTask_controller+0x68>)
 8000f8a:	6818      	ldr	r0, [r3, #0]
 8000f8c:	f107 010c 	add.w	r1, r7, #12
 8000f90:	2300      	movs	r3, #0
 8000f92:	2200      	movs	r2, #0
 8000f94:	f00c ff3c 	bl	800de10 <osMessageQueueGet>
 8000f98:	6138      	str	r0, [r7, #16]

	 			if (status == osOK)
 8000f9a:	693b      	ldr	r3, [r7, #16]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d118      	bne.n	8000fd2 <StartTask_controller+0x5e>
	 			{
	 				for (int i = 0; i < sizeof(msg.Buf); i++)
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	617b      	str	r3, [r7, #20]
 8000fa4:	e00d      	b.n	8000fc2 <StartTask_controller+0x4e>
	 				{
	 					recieve_message[i] = msg.Buf[i];					//		Dummy processing of message. Could be in any other task
 8000fa6:	f107 020c 	add.w	r2, r7, #12
 8000faa:	697b      	ldr	r3, [r7, #20]
 8000fac:	4413      	add	r3, r2
 8000fae:	7819      	ldrb	r1, [r3, #0]
 8000fb0:	f107 0208 	add.w	r2, r7, #8
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	460a      	mov	r2, r1
 8000fba:	701a      	strb	r2, [r3, #0]
	 				for (int i = 0; i < sizeof(msg.Buf); i++)
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	2b03      	cmp	r3, #3
 8000fc6:	d9ee      	bls.n	8000fa6 <StartTask_controller+0x32>
	 				}

	 				HiL_controller_read_message(recieve_message);
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f00a f8d9 	bl	800b184 <HiL_controller_read_message>
	 			}
	 	  }
	  osDelay(10);
 8000fd2:	200a      	movs	r0, #10
 8000fd4:	f00c fc9a 	bl	800d90c <osDelay>
	  if( USB_MSGQ_Rx != NULL )
 8000fd8:	e7d2      	b.n	8000f80 <StartTask_controller+0xc>
 8000fda:	bf00      	nop
 8000fdc:	20000788 	.word	0x20000788

08000fe0 <StartTask_SHT20>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_SHT20 */
void StartTask_SHT20(void *argument)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  for(;;)
  {

//	  CDC_Transmit_FS( (uint8_t *) light_state, sizeof(light_state));		// DEBUG ONLY: Transmit over USB what's been received to SPI

    osDelay(1000);
 8000fe8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fec:	f00c fc8e 	bl	800d90c <osDelay>
 8000ff0:	e7fa      	b.n	8000fe8 <StartTask_SHT20+0x8>
	...

08000ff4 <StartTask_74HC595D>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask_74HC595D */
void StartTask_74HC595D(void *argument)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask_74HC595D */
	osStatus status;
	osSemaphoreAcquire(LightOnSemHandle, 1000);
 8000ffc:	4b11      	ldr	r3, [pc, #68]	; (8001044 <StartTask_74HC595D+0x50>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001004:	4618      	mov	r0, r3
 8001006:	f00c fd4b 	bl	800daa0 <osSemaphoreAcquire>

  /* Infinite loop */
  for(;;)
  {

	  HAL_SPI_Receive_DMA(&hspi1, temp_light_state, sizeof(temp_light_state));
 800100a:	2203      	movs	r2, #3
 800100c:	490e      	ldr	r1, [pc, #56]	; (8001048 <StartTask_74HC595D+0x54>)
 800100e:	480f      	ldr	r0, [pc, #60]	; (800104c <StartTask_74HC595D+0x58>)
 8001010:	f004 ffda 	bl	8005fc8 <HAL_SPI_Receive_DMA>

	  again:
	  	  status = osSemaphoreAcquire(LightOnSemHandle, 2000);
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <StartTask_74HC595D+0x50>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800101c:	4618      	mov	r0, r3
 800101e:	f00c fd3f 	bl	800daa0 <osSemaphoreAcquire>
 8001022:	60f8      	str	r0, [r7, #12]
	  	  if(status != osOK){
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d000      	beq.n	800102c <StartTask_74HC595D+0x38>

	  		  goto again;
 800102a:	e7f3      	b.n	8001014 <StartTask_74HC595D+0x20>
	  	  }
	  	  memcpy(light_state, temp_light_state, sizeof(light_state));
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <StartTask_74HC595D+0x5c>)
 800102e:	4a06      	ldr	r2, [pc, #24]	; (8001048 <StartTask_74HC595D+0x54>)
 8001030:	6812      	ldr	r2, [r2, #0]
 8001032:	4611      	mov	r1, r2
 8001034:	8019      	strh	r1, [r3, #0]
 8001036:	3302      	adds	r3, #2
 8001038:	0c12      	lsrs	r2, r2, #16
 800103a:	701a      	strb	r2, [r3, #0]
//	  	  CDC_Transmit_FS( (uint8_t *) light_state, sizeof(light_state));		// DEBUG ONLY: Transmit over USB what's been received to SPI
	  osDelay(1);
 800103c:	2001      	movs	r0, #1
 800103e:	f00c fc65 	bl	800d90c <osDelay>
	  HAL_SPI_Receive_DMA(&hspi1, temp_light_state, sizeof(temp_light_state));
 8001042:	e7e2      	b.n	800100a <StartTask_74HC595D+0x16>
 8001044:	20000734 	.word	0x20000734
 8001048:	2000078c 	.word	0x2000078c
 800104c:	200004cc 	.word	0x200004cc
 8001050:	20000000 	.word	0x20000000

08001054 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a04      	ldr	r2, [pc, #16]	; (8001074 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d101      	bne.n	800106a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001066:	f000 fd07 	bl	8001a78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800106a:	bf00      	nop
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40001000 	.word	0x40001000

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001080:	e7fe      	b.n	8001080 <Error_Handler+0x8>
	...

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <HAL_MspInit+0x4c>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a10      	ldr	r2, [pc, #64]	; (80010d0 <HAL_MspInit+0x4c>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b0e      	ldr	r3, [pc, #56]	; (80010d0 <HAL_MspInit+0x4c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	4b0b      	ldr	r3, [pc, #44]	; (80010d0 <HAL_MspInit+0x4c>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <HAL_MspInit+0x4c>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
 80010ae:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <HAL_MspInit+0x4c>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010ba:	2200      	movs	r2, #0
 80010bc:	210f      	movs	r1, #15
 80010be:	f06f 0001 	mvn.w	r0, #1
 80010c2:	f000 fed1 	bl	8001e68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010c6:	bf00      	nop
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40023800 	.word	0x40023800

080010d4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a17      	ldr	r2, [pc, #92]	; (8001150 <HAL_CAN_MspInit+0x7c>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d127      	bne.n	8001146 <HAL_CAN_MspInit+0x72>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80010f6:	4b17      	ldr	r3, [pc, #92]	; (8001154 <HAL_CAN_MspInit+0x80>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a16      	ldr	r2, [pc, #88]	; (8001154 <HAL_CAN_MspInit+0x80>)
 80010fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b14      	ldr	r3, [pc, #80]	; (8001154 <HAL_CAN_MspInit+0x80>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800110e:	4b11      	ldr	r3, [pc, #68]	; (8001154 <HAL_CAN_MspInit+0x80>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	4a10      	ldr	r2, [pc, #64]	; (8001154 <HAL_CAN_MspInit+0x80>)
 8001114:	f043 0308 	orr.w	r3, r3, #8
 8001118:	6313      	str	r3, [r2, #48]	; 0x30
 800111a:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_CAN_MspInit+0x80>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	f003 0308 	and.w	r3, r3, #8
 8001122:	60fb      	str	r3, [r7, #12]
 8001124:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = HiL_CAN1_RX_Pin|HiL_CAN1_TX_Pin;
 8001126:	2303      	movs	r3, #3
 8001128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800112a:	2302      	movs	r3, #2
 800112c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112e:	2300      	movs	r3, #0
 8001130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001132:	2303      	movs	r3, #3
 8001134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001136:	2309      	movs	r3, #9
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800113a:	f107 0314 	add.w	r3, r7, #20
 800113e:	4619      	mov	r1, r3
 8001140:	4805      	ldr	r0, [pc, #20]	; (8001158 <HAL_CAN_MspInit+0x84>)
 8001142:	f001 ff41 	bl	8002fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8001146:	bf00      	nop
 8001148:	3728      	adds	r7, #40	; 0x28
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	40006400 	.word	0x40006400
 8001154:	40023800 	.word	0x40023800
 8001158:	40020c00 	.word	0x40020c00

0800115c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b08a      	sub	sp, #40	; 0x28
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001164:	f107 0314 	add.w	r3, r7, #20
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
 8001170:	60da      	str	r2, [r3, #12]
 8001172:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	4a19      	ldr	r2, [pc, #100]	; (80011e0 <HAL_DAC_MspInit+0x84>)
 800117a:	4293      	cmp	r3, r2
 800117c:	d12b      	bne.n	80011d6 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800117e:	4b19      	ldr	r3, [pc, #100]	; (80011e4 <HAL_DAC_MspInit+0x88>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	4a18      	ldr	r2, [pc, #96]	; (80011e4 <HAL_DAC_MspInit+0x88>)
 8001184:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001188:	6413      	str	r3, [r2, #64]	; 0x40
 800118a:	4b16      	ldr	r3, [pc, #88]	; (80011e4 <HAL_DAC_MspInit+0x88>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001192:	613b      	str	r3, [r7, #16]
 8001194:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001196:	4b13      	ldr	r3, [pc, #76]	; (80011e4 <HAL_DAC_MspInit+0x88>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a12      	ldr	r2, [pc, #72]	; (80011e4 <HAL_DAC_MspInit+0x88>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b10      	ldr	r3, [pc, #64]	; (80011e4 <HAL_DAC_MspInit+0x88>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = HiL_Poti_Pin;
 80011ae:	2310      	movs	r3, #16
 80011b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b2:	2303      	movs	r3, #3
 80011b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(HiL_Poti_GPIO_Port, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4809      	ldr	r0, [pc, #36]	; (80011e8 <HAL_DAC_MspInit+0x8c>)
 80011c2:	f001 ff01 	bl	8002fc8 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80011c6:	2200      	movs	r2, #0
 80011c8:	210f      	movs	r1, #15
 80011ca:	2036      	movs	r0, #54	; 0x36
 80011cc:	f000 fe4c 	bl	8001e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80011d0:	2036      	movs	r0, #54	; 0x36
 80011d2:	f000 fe65 	bl	8001ea0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 80011d6:	bf00      	nop
 80011d8:	3728      	adds	r7, #40	; 0x28
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	40007400 	.word	0x40007400
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40020000 	.word	0x40020000

080011ec <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08e      	sub	sp, #56	; 0x38
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011f8:	2200      	movs	r2, #0
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	605a      	str	r2, [r3, #4]
 80011fe:	609a      	str	r2, [r3, #8]
 8001200:	60da      	str	r2, [r3, #12]
 8001202:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	4a4e      	ldr	r2, [pc, #312]	; (8001344 <HAL_ETH_MspInit+0x158>)
 800120a:	4293      	cmp	r3, r2
 800120c:	f040 8096 	bne.w	800133c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001210:	4b4d      	ldr	r3, [pc, #308]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 8001212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001214:	4a4c      	ldr	r2, [pc, #304]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 8001216:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800121a:	6313      	str	r3, [r2, #48]	; 0x30
 800121c:	4b4a      	ldr	r3, [pc, #296]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 800121e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001224:	623b      	str	r3, [r7, #32]
 8001226:	6a3b      	ldr	r3, [r7, #32]
 8001228:	4b47      	ldr	r3, [pc, #284]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 800122a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122c:	4a46      	ldr	r2, [pc, #280]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 800122e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001232:	6313      	str	r3, [r2, #48]	; 0x30
 8001234:	4b44      	ldr	r3, [pc, #272]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 8001236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001238:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800123c:	61fb      	str	r3, [r7, #28]
 800123e:	69fb      	ldr	r3, [r7, #28]
 8001240:	4b41      	ldr	r3, [pc, #260]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 8001242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001244:	4a40      	ldr	r2, [pc, #256]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 8001246:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800124a:	6313      	str	r3, [r2, #48]	; 0x30
 800124c:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 800124e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001254:	61bb      	str	r3, [r7, #24]
 8001256:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001258:	4b3b      	ldr	r3, [pc, #236]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 800125a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125c:	4a3a      	ldr	r2, [pc, #232]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 800125e:	f043 0304 	orr.w	r3, r3, #4
 8001262:	6313      	str	r3, [r2, #48]	; 0x30
 8001264:	4b38      	ldr	r3, [pc, #224]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	f003 0304 	and.w	r3, r3, #4
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001270:	4b35      	ldr	r3, [pc, #212]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	4a34      	ldr	r2, [pc, #208]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 8001276:	f043 0301 	orr.w	r3, r3, #1
 800127a:	6313      	str	r3, [r2, #48]	; 0x30
 800127c:	4b32      	ldr	r3, [pc, #200]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	f003 0301 	and.w	r3, r3, #1
 8001284:	613b      	str	r3, [r7, #16]
 8001286:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001288:	4b2f      	ldr	r3, [pc, #188]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	4a2e      	ldr	r2, [pc, #184]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 800128e:	f043 0302 	orr.w	r3, r3, #2
 8001292:	6313      	str	r3, [r2, #48]	; 0x30
 8001294:	4b2c      	ldr	r3, [pc, #176]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	f003 0302 	and.w	r3, r3, #2
 800129c:	60fb      	str	r3, [r7, #12]
 800129e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012a0:	4b29      	ldr	r3, [pc, #164]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	4a28      	ldr	r2, [pc, #160]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 80012a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012aa:	6313      	str	r3, [r2, #48]	; 0x30
 80012ac:	4b26      	ldr	r3, [pc, #152]	; (8001348 <HAL_ETH_MspInit+0x15c>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80012b8:	2332      	movs	r3, #50	; 0x32
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012bc:	2302      	movs	r3, #2
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c0:	2300      	movs	r3, #0
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c4:	2303      	movs	r3, #3
 80012c6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012c8:	230b      	movs	r3, #11
 80012ca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d0:	4619      	mov	r1, r3
 80012d2:	481e      	ldr	r0, [pc, #120]	; (800134c <HAL_ETH_MspInit+0x160>)
 80012d4:	f001 fe78 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80012d8:	2386      	movs	r3, #134	; 0x86
 80012da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012dc:	2302      	movs	r3, #2
 80012de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012e8:	230b      	movs	r3, #11
 80012ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f0:	4619      	mov	r1, r3
 80012f2:	4817      	ldr	r0, [pc, #92]	; (8001350 <HAL_ETH_MspInit+0x164>)
 80012f4:	f001 fe68 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80012f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001306:	2303      	movs	r3, #3
 8001308:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800130a:	230b      	movs	r3, #11
 800130c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001312:	4619      	mov	r1, r3
 8001314:	480f      	ldr	r0, [pc, #60]	; (8001354 <HAL_ETH_MspInit+0x168>)
 8001316:	f001 fe57 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800131a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001320:	2302      	movs	r3, #2
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001324:	2300      	movs	r3, #0
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001328:	2303      	movs	r3, #3
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800132c:	230b      	movs	r3, #11
 800132e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001334:	4619      	mov	r1, r3
 8001336:	4808      	ldr	r0, [pc, #32]	; (8001358 <HAL_ETH_MspInit+0x16c>)
 8001338:	f001 fe46 	bl	8002fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800133c:	bf00      	nop
 800133e:	3738      	adds	r7, #56	; 0x38
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	40028000 	.word	0x40028000
 8001348:	40023800 	.word	0x40023800
 800134c:	40020800 	.word	0x40020800
 8001350:	40020000 	.word	0x40020000
 8001354:	40020400 	.word	0x40020400
 8001358:	40021800 	.word	0x40021800

0800135c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b0ae      	sub	sp, #184	; 0xb8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2290      	movs	r2, #144	; 0x90
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f010 fcab 	bl	8011cd8 <memset>
  if(hi2c->Instance==I2C1)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a22      	ldr	r2, [pc, #136]	; (8001410 <HAL_I2C_MspInit+0xb4>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d13c      	bne.n	8001406 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800138c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001390:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001392:	2300      	movs	r3, #0
 8001394:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001396:	f107 0314 	add.w	r3, r7, #20
 800139a:	4618      	mov	r0, r3
 800139c:	f004 f940 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80013a6:	f7ff fe67 	bl	8001078 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013aa:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <HAL_I2C_MspInit+0xb8>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ae:	4a19      	ldr	r2, [pc, #100]	; (8001414 <HAL_I2C_MspInit+0xb8>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	; 0x30
 80013b6:	4b17      	ldr	r3, [pc, #92]	; (8001414 <HAL_I2C_MspInit+0xb8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	613b      	str	r3, [r7, #16]
 80013c0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = HiL_I2C1_SCL_Pin|HiL_I2C1_SDA_Pin;
 80013c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013ca:	2312      	movs	r3, #18
 80013cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80013dc:	2304      	movs	r3, #4
 80013de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80013e6:	4619      	mov	r1, r3
 80013e8:	480b      	ldr	r0, [pc, #44]	; (8001418 <HAL_I2C_MspInit+0xbc>)
 80013ea:	f001 fded 	bl	8002fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013ee:	4b09      	ldr	r3, [pc, #36]	; (8001414 <HAL_I2C_MspInit+0xb8>)
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	4a08      	ldr	r2, [pc, #32]	; (8001414 <HAL_I2C_MspInit+0xb8>)
 80013f4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013f8:	6413      	str	r3, [r2, #64]	; 0x40
 80013fa:	4b06      	ldr	r3, [pc, #24]	; (8001414 <HAL_I2C_MspInit+0xb8>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001402:	60fb      	str	r3, [r7, #12]
 8001404:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001406:	bf00      	nop
 8001408:	37b8      	adds	r7, #184	; 0xb8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	40005400 	.word	0x40005400
 8001414:	40023800 	.word	0x40023800
 8001418:	40020400 	.word	0x40020400

0800141c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08e      	sub	sp, #56	; 0x38
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a61      	ldr	r2, [pc, #388]	; (80015c0 <HAL_SPI_MspInit+0x1a4>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d172      	bne.n	8001524 <HAL_SPI_MspInit+0x108>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800143e:	4b61      	ldr	r3, [pc, #388]	; (80015c4 <HAL_SPI_MspInit+0x1a8>)
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	4a60      	ldr	r2, [pc, #384]	; (80015c4 <HAL_SPI_MspInit+0x1a8>)
 8001444:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001448:	6453      	str	r3, [r2, #68]	; 0x44
 800144a:	4b5e      	ldr	r3, [pc, #376]	; (80015c4 <HAL_SPI_MspInit+0x1a8>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001452:	623b      	str	r3, [r7, #32]
 8001454:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001456:	4b5b      	ldr	r3, [pc, #364]	; (80015c4 <HAL_SPI_MspInit+0x1a8>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a5a      	ldr	r2, [pc, #360]	; (80015c4 <HAL_SPI_MspInit+0x1a8>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b58      	ldr	r3, [pc, #352]	; (80015c4 <HAL_SPI_MspInit+0x1a8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	61fb      	str	r3, [r7, #28]
 800146c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800146e:	4b55      	ldr	r3, [pc, #340]	; (80015c4 <HAL_SPI_MspInit+0x1a8>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	4a54      	ldr	r2, [pc, #336]	; (80015c4 <HAL_SPI_MspInit+0x1a8>)
 8001474:	f043 0302 	orr.w	r3, r3, #2
 8001478:	6313      	str	r3, [r2, #48]	; 0x30
 800147a:	4b52      	ldr	r3, [pc, #328]	; (80015c4 <HAL_SPI_MspInit+0x1a8>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
 8001484:	69bb      	ldr	r3, [r7, #24]
    /**SPI1 GPIO Configuration
    PD7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = HiL_595_DS_Pin;
 8001486:	2380      	movs	r3, #128	; 0x80
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148a:	2302      	movs	r3, #2
 800148c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001492:	2303      	movs	r3, #3
 8001494:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001496:	2305      	movs	r3, #5
 8001498:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_595_DS_GPIO_Port, &GPIO_InitStruct);
 800149a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800149e:	4619      	mov	r1, r3
 80014a0:	4849      	ldr	r0, [pc, #292]	; (80015c8 <HAL_SPI_MspInit+0x1ac>)
 80014a2:	f001 fd91 	bl	8002fc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HiL_595_SHCP_Pin;
 80014a6:	2308      	movs	r3, #8
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b6:	2305      	movs	r3, #5
 80014b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_595_SHCP_GPIO_Port, &GPIO_InitStruct);
 80014ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014be:	4619      	mov	r1, r3
 80014c0:	4842      	ldr	r0, [pc, #264]	; (80015cc <HAL_SPI_MspInit+0x1b0>)
 80014c2:	f001 fd81 	bl	8002fc8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80014c6:	4b42      	ldr	r3, [pc, #264]	; (80015d0 <HAL_SPI_MspInit+0x1b4>)
 80014c8:	4a42      	ldr	r2, [pc, #264]	; (80015d4 <HAL_SPI_MspInit+0x1b8>)
 80014ca:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80014cc:	4b40      	ldr	r3, [pc, #256]	; (80015d0 <HAL_SPI_MspInit+0x1b4>)
 80014ce:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80014d2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014d4:	4b3e      	ldr	r3, [pc, #248]	; (80015d0 <HAL_SPI_MspInit+0x1b4>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80014da:	4b3d      	ldr	r3, [pc, #244]	; (80015d0 <HAL_SPI_MspInit+0x1b4>)
 80014dc:	2200      	movs	r2, #0
 80014de:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80014e0:	4b3b      	ldr	r3, [pc, #236]	; (80015d0 <HAL_SPI_MspInit+0x1b4>)
 80014e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014e6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80014e8:	4b39      	ldr	r3, [pc, #228]	; (80015d0 <HAL_SPI_MspInit+0x1b4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80014ee:	4b38      	ldr	r3, [pc, #224]	; (80015d0 <HAL_SPI_MspInit+0x1b4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80014f4:	4b36      	ldr	r3, [pc, #216]	; (80015d0 <HAL_SPI_MspInit+0x1b4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80014fa:	4b35      	ldr	r3, [pc, #212]	; (80015d0 <HAL_SPI_MspInit+0x1b4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001500:	4b33      	ldr	r3, [pc, #204]	; (80015d0 <HAL_SPI_MspInit+0x1b4>)
 8001502:	2200      	movs	r2, #0
 8001504:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001506:	4832      	ldr	r0, [pc, #200]	; (80015d0 <HAL_SPI_MspInit+0x1b4>)
 8001508:	f000 fe2e 	bl	8002168 <HAL_DMA_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 8001512:	f7ff fdb1 	bl	8001078 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a2d      	ldr	r2, [pc, #180]	; (80015d0 <HAL_SPI_MspInit+0x1b4>)
 800151a:	659a      	str	r2, [r3, #88]	; 0x58
 800151c:	4a2c      	ldr	r2, [pc, #176]	; (80015d0 <HAL_SPI_MspInit+0x1b4>)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001522:	e049      	b.n	80015b8 <HAL_SPI_MspInit+0x19c>
  else if(hspi->Instance==SPI3)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a2b      	ldr	r2, [pc, #172]	; (80015d8 <HAL_SPI_MspInit+0x1bc>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d144      	bne.n	80015b8 <HAL_SPI_MspInit+0x19c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800152e:	4b25      	ldr	r3, [pc, #148]	; (80015c4 <HAL_SPI_MspInit+0x1a8>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	4a24      	ldr	r2, [pc, #144]	; (80015c4 <HAL_SPI_MspInit+0x1a8>)
 8001534:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001538:	6413      	str	r3, [r2, #64]	; 0x40
 800153a:	4b22      	ldr	r3, [pc, #136]	; (80015c4 <HAL_SPI_MspInit+0x1a8>)
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001542:	617b      	str	r3, [r7, #20]
 8001544:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	4b1f      	ldr	r3, [pc, #124]	; (80015c4 <HAL_SPI_MspInit+0x1a8>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154a:	4a1e      	ldr	r2, [pc, #120]	; (80015c4 <HAL_SPI_MspInit+0x1a8>)
 800154c:	f043 0302 	orr.w	r3, r3, #2
 8001550:	6313      	str	r3, [r2, #48]	; 0x30
 8001552:	4b1c      	ldr	r3, [pc, #112]	; (80015c4 <HAL_SPI_MspInit+0x1a8>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	f003 0302 	and.w	r3, r3, #2
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800155e:	4b19      	ldr	r3, [pc, #100]	; (80015c4 <HAL_SPI_MspInit+0x1a8>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a18      	ldr	r2, [pc, #96]	; (80015c4 <HAL_SPI_MspInit+0x1a8>)
 8001564:	f043 0304 	orr.w	r3, r3, #4
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b16      	ldr	r3, [pc, #88]	; (80015c4 <HAL_SPI_MspInit+0x1a8>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f003 0304 	and.w	r3, r3, #4
 8001572:	60fb      	str	r3, [r7, #12]
 8001574:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = HiL_SPI3_MOSI_Pin;
 8001576:	2304      	movs	r3, #4
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157a:	2302      	movs	r3, #2
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001582:	2303      	movs	r3, #3
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001586:	2307      	movs	r3, #7
 8001588:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_MOSI_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158e:	4619      	mov	r1, r3
 8001590:	480e      	ldr	r0, [pc, #56]	; (80015cc <HAL_SPI_MspInit+0x1b0>)
 8001592:	f001 fd19 	bl	8002fc8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = HiL_SPI3_SCK_Pin;
 8001596:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015a4:	2303      	movs	r3, #3
 80015a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80015a8:	2306      	movs	r3, #6
 80015aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(HiL_SPI3_SCK_GPIO_Port, &GPIO_InitStruct);
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	4619      	mov	r1, r3
 80015b2:	480a      	ldr	r0, [pc, #40]	; (80015dc <HAL_SPI_MspInit+0x1c0>)
 80015b4:	f001 fd08 	bl	8002fc8 <HAL_GPIO_Init>
}
 80015b8:	bf00      	nop
 80015ba:	3738      	adds	r7, #56	; 0x38
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	40013000 	.word	0x40013000
 80015c4:	40023800 	.word	0x40023800
 80015c8:	40020c00 	.word	0x40020c00
 80015cc:	40020400 	.word	0x40020400
 80015d0:	20000594 	.word	0x20000594
 80015d4:	40026410 	.word	0x40026410
 80015d8:	40003c00 	.word	0x40003c00
 80015dc:	40020800 	.word	0x40020800

080015e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a1b      	ldr	r2, [pc, #108]	; (800166c <HAL_TIM_Base_MspInit+0x8c>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d130      	bne.n	8001664 <HAL_TIM_Base_MspInit+0x84>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <HAL_TIM_Base_MspInit+0x90>)
 8001604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001606:	4a1a      	ldr	r2, [pc, #104]	; (8001670 <HAL_TIM_Base_MspInit+0x90>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6453      	str	r3, [r2, #68]	; 0x44
 800160e:	4b18      	ldr	r3, [pc, #96]	; (8001670 <HAL_TIM_Base_MspInit+0x90>)
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	613b      	str	r3, [r7, #16]
 8001618:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800161a:	4b15      	ldr	r3, [pc, #84]	; (8001670 <HAL_TIM_Base_MspInit+0x90>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a14      	ldr	r2, [pc, #80]	; (8001670 <HAL_TIM_Base_MspInit+0x90>)
 8001620:	f043 0310 	orr.w	r3, r3, #16
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b12      	ldr	r3, [pc, #72]	; (8001670 <HAL_TIM_Base_MspInit+0x90>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0310 	and.w	r3, r3, #16
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = HiL_595_Enable_Pin;
 8001632:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001636:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001638:	2302      	movs	r3, #2
 800163a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163c:	2300      	movs	r3, #0
 800163e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001640:	2300      	movs	r3, #0
 8001642:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001644:	2301      	movs	r3, #1
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(HiL_595_Enable_GPIO_Port, &GPIO_InitStruct);
 8001648:	f107 0314 	add.w	r3, r7, #20
 800164c:	4619      	mov	r1, r3
 800164e:	4809      	ldr	r0, [pc, #36]	; (8001674 <HAL_TIM_Base_MspInit+0x94>)
 8001650:	f001 fcba 	bl	8002fc8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 8001654:	2200      	movs	r2, #0
 8001656:	2105      	movs	r1, #5
 8001658:	201b      	movs	r0, #27
 800165a:	f000 fc05 	bl	8001e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800165e:	201b      	movs	r0, #27
 8001660:	f000 fc1e 	bl	8001ea0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001664:	bf00      	nop
 8001666:	3728      	adds	r7, #40	; 0x28
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	40010000 	.word	0x40010000
 8001670:	40023800 	.word	0x40023800
 8001674:	40021000 	.word	0x40021000

08001678 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b0ae      	sub	sp, #184	; 0xb8
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001680:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001684:	2200      	movs	r2, #0
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	605a      	str	r2, [r3, #4]
 800168a:	609a      	str	r2, [r3, #8]
 800168c:	60da      	str	r2, [r3, #12]
 800168e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001690:	f107 0314 	add.w	r3, r7, #20
 8001694:	2290      	movs	r2, #144	; 0x90
 8001696:	2100      	movs	r1, #0
 8001698:	4618      	mov	r0, r3
 800169a:	f010 fb1d 	bl	8011cd8 <memset>
  if(huart->Instance==UART7)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a3d      	ldr	r2, [pc, #244]	; (8001798 <HAL_UART_MspInit+0x120>)
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d172      	bne.n	800178e <HAL_UART_MspInit+0x116>

  /* USER CODE END UART7_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 80016a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ac:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80016ae:	2300      	movs	r3, #0
 80016b0:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016b2:	f107 0314 	add.w	r3, r7, #20
 80016b6:	4618      	mov	r0, r3
 80016b8:	f003 ffb2 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80016c2:	f7ff fcd9 	bl	8001078 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80016c6:	4b35      	ldr	r3, [pc, #212]	; (800179c <HAL_UART_MspInit+0x124>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a34      	ldr	r2, [pc, #208]	; (800179c <HAL_UART_MspInit+0x124>)
 80016cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b32      	ldr	r3, [pc, #200]	; (800179c <HAL_UART_MspInit+0x124>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80016de:	4b2f      	ldr	r3, [pc, #188]	; (800179c <HAL_UART_MspInit+0x124>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a2e      	ldr	r2, [pc, #184]	; (800179c <HAL_UART_MspInit+0x124>)
 80016e4:	f043 0310 	orr.w	r3, r3, #16
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b2c      	ldr	r3, [pc, #176]	; (800179c <HAL_UART_MspInit+0x124>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /**UART7 GPIO Configuration
    PE7     ------> UART7_RX
    PE8     ------> UART7_TX
    */
    GPIO_InitStruct.Pin = HiL_UART7_RX_Pin|HiL_UART7_TX_Pin;
 80016f6:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80016fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001704:	2300      	movs	r3, #0
 8001706:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8001710:	2308      	movs	r3, #8
 8001712:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001716:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800171a:	4619      	mov	r1, r3
 800171c:	4820      	ldr	r0, [pc, #128]	; (80017a0 <HAL_UART_MspInit+0x128>)
 800171e:	f001 fc53 	bl	8002fc8 <HAL_GPIO_Init>

    /* UART7 DMA Init */
    /* UART7_RX Init */
    hdma_uart7_rx.Instance = DMA1_Stream3;
 8001722:	4b20      	ldr	r3, [pc, #128]	; (80017a4 <HAL_UART_MspInit+0x12c>)
 8001724:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <HAL_UART_MspInit+0x130>)
 8001726:	601a      	str	r2, [r3, #0]
    hdma_uart7_rx.Init.Channel = DMA_CHANNEL_5;
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <HAL_UART_MspInit+0x12c>)
 800172a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 800172e:	605a      	str	r2, [r3, #4]
    hdma_uart7_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001730:	4b1c      	ldr	r3, [pc, #112]	; (80017a4 <HAL_UART_MspInit+0x12c>)
 8001732:	2200      	movs	r2, #0
 8001734:	609a      	str	r2, [r3, #8]
    hdma_uart7_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001736:	4b1b      	ldr	r3, [pc, #108]	; (80017a4 <HAL_UART_MspInit+0x12c>)
 8001738:	2200      	movs	r2, #0
 800173a:	60da      	str	r2, [r3, #12]
    hdma_uart7_rx.Init.MemInc = DMA_MINC_ENABLE;
 800173c:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_UART_MspInit+0x12c>)
 800173e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001742:	611a      	str	r2, [r3, #16]
    hdma_uart7_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001744:	4b17      	ldr	r3, [pc, #92]	; (80017a4 <HAL_UART_MspInit+0x12c>)
 8001746:	2200      	movs	r2, #0
 8001748:	615a      	str	r2, [r3, #20]
    hdma_uart7_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <HAL_UART_MspInit+0x12c>)
 800174c:	2200      	movs	r2, #0
 800174e:	619a      	str	r2, [r3, #24]
    hdma_uart7_rx.Init.Mode = DMA_NORMAL;
 8001750:	4b14      	ldr	r3, [pc, #80]	; (80017a4 <HAL_UART_MspInit+0x12c>)
 8001752:	2200      	movs	r2, #0
 8001754:	61da      	str	r2, [r3, #28]
    hdma_uart7_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001756:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <HAL_UART_MspInit+0x12c>)
 8001758:	2200      	movs	r2, #0
 800175a:	621a      	str	r2, [r3, #32]
    hdma_uart7_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <HAL_UART_MspInit+0x12c>)
 800175e:	2200      	movs	r2, #0
 8001760:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart7_rx) != HAL_OK)
 8001762:	4810      	ldr	r0, [pc, #64]	; (80017a4 <HAL_UART_MspInit+0x12c>)
 8001764:	f000 fd00 	bl	8002168 <HAL_DMA_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 800176e:	f7ff fc83 	bl	8001078 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart7_rx);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	4a0b      	ldr	r2, [pc, #44]	; (80017a4 <HAL_UART_MspInit+0x12c>)
 8001776:	675a      	str	r2, [r3, #116]	; 0x74
 8001778:	4a0a      	ldr	r2, [pc, #40]	; (80017a4 <HAL_UART_MspInit+0x12c>)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 800177e:	2200      	movs	r2, #0
 8001780:	2105      	movs	r1, #5
 8001782:	2052      	movs	r0, #82	; 0x52
 8001784:	f000 fb70 	bl	8001e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8001788:	2052      	movs	r0, #82	; 0x52
 800178a:	f000 fb89 	bl	8001ea0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART7_MspInit 1 */

  /* USER CODE END UART7_MspInit 1 */
  }

}
 800178e:	bf00      	nop
 8001790:	37b8      	adds	r7, #184	; 0xb8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	40007800 	.word	0x40007800
 800179c:	40023800 	.word	0x40023800
 80017a0:	40021000 	.word	0x40021000
 80017a4:	200006c8 	.word	0x200006c8
 80017a8:	40026058 	.word	0x40026058

080017ac <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b08e      	sub	sp, #56	; 0x38
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017bc:	4b33      	ldr	r3, [pc, #204]	; (800188c <HAL_InitTick+0xe0>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	4a32      	ldr	r2, [pc, #200]	; (800188c <HAL_InitTick+0xe0>)
 80017c2:	f043 0310 	orr.w	r3, r3, #16
 80017c6:	6413      	str	r3, [r2, #64]	; 0x40
 80017c8:	4b30      	ldr	r3, [pc, #192]	; (800188c <HAL_InitTick+0xe0>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f003 0310 	and.w	r3, r3, #16
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017d4:	f107 0210 	add.w	r2, r7, #16
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f003 feec 	bl	80055bc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d103      	bne.n	80017f6 <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017ee:	f003 febd 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 80017f2:	6378      	str	r0, [r7, #52]	; 0x34
 80017f4:	e004      	b.n	8001800 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017f6:	f003 feb9 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 80017fa:	4603      	mov	r3, r0
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001800:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001802:	4a23      	ldr	r2, [pc, #140]	; (8001890 <HAL_InitTick+0xe4>)
 8001804:	fba2 2303 	umull	r2, r3, r2, r3
 8001808:	0c9b      	lsrs	r3, r3, #18
 800180a:	3b01      	subs	r3, #1
 800180c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800180e:	4b21      	ldr	r3, [pc, #132]	; (8001894 <HAL_InitTick+0xe8>)
 8001810:	4a21      	ldr	r2, [pc, #132]	; (8001898 <HAL_InitTick+0xec>)
 8001812:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001814:	4b1f      	ldr	r3, [pc, #124]	; (8001894 <HAL_InitTick+0xe8>)
 8001816:	f240 32e7 	movw	r2, #999	; 0x3e7
 800181a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800181c:	4a1d      	ldr	r2, [pc, #116]	; (8001894 <HAL_InitTick+0xe8>)
 800181e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001820:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001822:	4b1c      	ldr	r3, [pc, #112]	; (8001894 <HAL_InitTick+0xe8>)
 8001824:	2200      	movs	r2, #0
 8001826:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001828:	4b1a      	ldr	r3, [pc, #104]	; (8001894 <HAL_InitTick+0xe8>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800182e:	4b19      	ldr	r3, [pc, #100]	; (8001894 <HAL_InitTick+0xe8>)
 8001830:	2200      	movs	r2, #0
 8001832:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001834:	4817      	ldr	r0, [pc, #92]	; (8001894 <HAL_InitTick+0xe8>)
 8001836:	f005 f9bd 	bl	8006bb4 <HAL_TIM_Base_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001840:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001844:	2b00      	cmp	r3, #0
 8001846:	d11b      	bne.n	8001880 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001848:	4812      	ldr	r0, [pc, #72]	; (8001894 <HAL_InitTick+0xe8>)
 800184a:	f005 fa0b 	bl	8006c64 <HAL_TIM_Base_Start_IT>
 800184e:	4603      	mov	r3, r0
 8001850:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001854:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001858:	2b00      	cmp	r3, #0
 800185a:	d111      	bne.n	8001880 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800185c:	2036      	movs	r0, #54	; 0x36
 800185e:	f000 fb1f 	bl	8001ea0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2b0f      	cmp	r3, #15
 8001866:	d808      	bhi.n	800187a <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001868:	2200      	movs	r2, #0
 800186a:	6879      	ldr	r1, [r7, #4]
 800186c:	2036      	movs	r0, #54	; 0x36
 800186e:	f000 fafb 	bl	8001e68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <HAL_InitTick+0xf0>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	e002      	b.n	8001880 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001880:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001884:	4618      	mov	r0, r3
 8001886:	3738      	adds	r7, #56	; 0x38
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40023800 	.word	0x40023800
 8001890:	431bde83 	.word	0x431bde83
 8001894:	20000818 	.word	0x20000818
 8001898:	40001000 	.word	0x40001000
 800189c:	20000008 	.word	0x20000008

080018a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80018a4:	e7fe      	b.n	80018a4 <NMI_Handler+0x4>

080018a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80018aa:	e7fe      	b.n	80018aa <HardFault_Handler+0x4>

080018ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018ac:	b480      	push	{r7}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018b0:	e7fe      	b.n	80018b0 <MemManage_Handler+0x4>

080018b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018b6:	e7fe      	b.n	80018b6 <BusFault_Handler+0x4>

080018b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018bc:	e7fe      	b.n	80018bc <UsageFault_Handler+0x4>

080018be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018be:	b480      	push	{r7}
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c2:	bf00      	nop
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart7_rx);
 80018d0:	4802      	ldr	r0, [pc, #8]	; (80018dc <DMA1_Stream3_IRQHandler+0x10>)
 80018d2:	f000 fde9 	bl	80024a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80018d6:	bf00      	nop
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	200006c8 	.word	0x200006c8

080018e0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80018e4:	4802      	ldr	r0, [pc, #8]	; (80018f0 <TIM1_CC_IRQHandler+0x10>)
 80018e6:	f005 fe1b 	bl	8007520 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200005f4 	.word	0x200005f4

080018f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(HiL_595_Reset_Pin);
 80018f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80018fc:	f001 fd42 	bl	8003384 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}

08001904 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8001908:	4b06      	ldr	r3, [pc, #24]	; (8001924 <TIM6_DAC_IRQHandler+0x20>)
 800190a:	791b      	ldrb	r3, [r3, #4]
 800190c:	b2db      	uxtb	r3, r3
 800190e:	2b00      	cmp	r3, #0
 8001910:	d002      	beq.n	8001918 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8001912:	4804      	ldr	r0, [pc, #16]	; (8001924 <TIM6_DAC_IRQHandler+0x20>)
 8001914:	f000 fb46 	bl	8001fa4 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8001918:	4803      	ldr	r0, [pc, #12]	; (8001928 <TIM6_DAC_IRQHandler+0x24>)
 800191a:	f005 fe01 	bl	8007520 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800191e:	bf00      	nop
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	200003b4 	.word	0x200003b4
 8001928:	20000818 	.word	0x20000818

0800192c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001930:	4802      	ldr	r0, [pc, #8]	; (800193c <DMA2_Stream0_IRQHandler+0x10>)
 8001932:	f000 fdb9 	bl	80024a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001936:	bf00      	nop
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000594 	.word	0x20000594

08001940 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001944:	4802      	ldr	r0, [pc, #8]	; (8001950 <OTG_FS_IRQHandler+0x10>)
 8001946:	f001 ffa2 	bl	800388e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800194a:	bf00      	nop
 800194c:	bd80      	pop	{r7, pc}
 800194e:	bf00      	nop
 8001950:	20006d68 	.word	0x20006d68

08001954 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8001958:	4802      	ldr	r0, [pc, #8]	; (8001964 <UART7_IRQHandler+0x10>)
 800195a:	f006 fd23 	bl	80083a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 800195e:	bf00      	nop
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000640 	.word	0x20000640

08001968 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001970:	4a14      	ldr	r2, [pc, #80]	; (80019c4 <_sbrk+0x5c>)
 8001972:	4b15      	ldr	r3, [pc, #84]	; (80019c8 <_sbrk+0x60>)
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800197c:	4b13      	ldr	r3, [pc, #76]	; (80019cc <_sbrk+0x64>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d102      	bne.n	800198a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001984:	4b11      	ldr	r3, [pc, #68]	; (80019cc <_sbrk+0x64>)
 8001986:	4a12      	ldr	r2, [pc, #72]	; (80019d0 <_sbrk+0x68>)
 8001988:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800198a:	4b10      	ldr	r3, [pc, #64]	; (80019cc <_sbrk+0x64>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4413      	add	r3, r2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	429a      	cmp	r2, r3
 8001996:	d207      	bcs.n	80019a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001998:	f010 f954 	bl	8011c44 <__errno>
 800199c:	4603      	mov	r3, r0
 800199e:	220c      	movs	r2, #12
 80019a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019a2:	f04f 33ff 	mov.w	r3, #4294967295
 80019a6:	e009      	b.n	80019bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019a8:	4b08      	ldr	r3, [pc, #32]	; (80019cc <_sbrk+0x64>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019ae:	4b07      	ldr	r3, [pc, #28]	; (80019cc <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	4a05      	ldr	r2, [pc, #20]	; (80019cc <_sbrk+0x64>)
 80019b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019ba:	68fb      	ldr	r3, [r7, #12]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3718      	adds	r7, #24
 80019c0:	46bd      	mov	sp, r7
 80019c2:	bd80      	pop	{r7, pc}
 80019c4:	20080000 	.word	0x20080000
 80019c8:	00000400 	.word	0x00000400
 80019cc:	20000864 	.word	0x20000864
 80019d0:	20007280 	.word	0x20007280

080019d4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019d8:	4b06      	ldr	r3, [pc, #24]	; (80019f4 <SystemInit+0x20>)
 80019da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019de:	4a05      	ldr	r2, [pc, #20]	; (80019f4 <SystemInit+0x20>)
 80019e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019fc:	480d      	ldr	r0, [pc, #52]	; (8001a34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019fe:	490e      	ldr	r1, [pc, #56]	; (8001a38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a00:	4a0e      	ldr	r2, [pc, #56]	; (8001a3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a04:	e002      	b.n	8001a0c <LoopCopyDataInit>

08001a06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a0a:	3304      	adds	r3, #4

08001a0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a10:	d3f9      	bcc.n	8001a06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a12:	4a0b      	ldr	r2, [pc, #44]	; (8001a40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001a14:	4c0b      	ldr	r4, [pc, #44]	; (8001a44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001a16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a18:	e001      	b.n	8001a1e <LoopFillZerobss>

08001a1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a1c:	3204      	adds	r2, #4

08001a1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a20:	d3fb      	bcc.n	8001a1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a22:	f7ff ffd7 	bl	80019d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a26:	f010 f913 	bl	8011c50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a2a:	f7fe fdf5 	bl	8000618 <main>
  bx  lr    
 8001a2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a30:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001a34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a38:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8001a3c:	0801216c 	.word	0x0801216c
  ldr r2, =_sbss
 8001a40:	20000338 	.word	0x20000338
  ldr r4, =_ebss
 8001a44:	20007280 	.word	0x20007280

08001a48 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a48:	e7fe      	b.n	8001a48 <ADC_IRQHandler>
	...

08001a4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	af00      	add	r7, sp, #0
  __HAL_FLASH_ART_ENABLE();
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <HAL_Init+0x28>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <HAL_Init+0x28>)
 8001a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a5c:	2003      	movs	r0, #3
 8001a5e:	f000 f9f8 	bl	8001e52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a62:	200f      	movs	r0, #15
 8001a64:	f7ff fea2 	bl	80017ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a68:	f7ff fb0c 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a6c:	2300      	movs	r3, #0
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40023c00 	.word	0x40023c00

08001a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a7c:	4b06      	ldr	r3, [pc, #24]	; (8001a98 <HAL_IncTick+0x20>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	4b06      	ldr	r3, [pc, #24]	; (8001a9c <HAL_IncTick+0x24>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4413      	add	r3, r2
 8001a88:	4a04      	ldr	r2, [pc, #16]	; (8001a9c <HAL_IncTick+0x24>)
 8001a8a:	6013      	str	r3, [r2, #0]
}
 8001a8c:	bf00      	nop
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
 8001a96:	bf00      	nop
 8001a98:	2000000c 	.word	0x2000000c
 8001a9c:	20000868 	.word	0x20000868

08001aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa4:	4b03      	ldr	r3, [pc, #12]	; (8001ab4 <HAL_GetTick+0x14>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	20000868 	.word	0x20000868

08001ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ac0:	f7ff ffee 	bl	8001aa0 <HAL_GetTick>
 8001ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ad0:	d005      	beq.n	8001ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ad2:	4b0a      	ldr	r3, [pc, #40]	; (8001afc <HAL_Delay+0x44>)
 8001ad4:	781b      	ldrb	r3, [r3, #0]
 8001ad6:	461a      	mov	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4413      	add	r3, r2
 8001adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ade:	bf00      	nop
 8001ae0:	f7ff ffde 	bl	8001aa0 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	68fa      	ldr	r2, [r7, #12]
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d8f7      	bhi.n	8001ae0 <HAL_Delay+0x28>
  {
  }
}
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
 8001afa:	bf00      	nop
 8001afc:	2000000c 	.word	0x2000000c

08001b00 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d101      	bne.n	8001b12 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e0ed      	b.n	8001cee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d102      	bne.n	8001b24 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f7ff fad8 	bl	80010d4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0201 	orr.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b34:	f7ff ffb4 	bl	8001aa0 <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b3a:	e012      	b.n	8001b62 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b3c:	f7ff ffb0 	bl	8001aa0 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b0a      	cmp	r3, #10
 8001b48:	d90b      	bls.n	8001b62 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2205      	movs	r2, #5
 8001b5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e0c5      	b.n	8001cee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0301 	and.w	r3, r3, #1
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d0e5      	beq.n	8001b3c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f022 0202 	bic.w	r2, r2, #2
 8001b7e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b80:	f7ff ff8e 	bl	8001aa0 <HAL_GetTick>
 8001b84:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b86:	e012      	b.n	8001bae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b88:	f7ff ff8a 	bl	8001aa0 <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b0a      	cmp	r3, #10
 8001b94:	d90b      	bls.n	8001bae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2205      	movs	r2, #5
 8001ba6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e09f      	b.n	8001cee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1e5      	bne.n	8001b88 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	7e1b      	ldrb	r3, [r3, #24]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d108      	bne.n	8001bd6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	e007      	b.n	8001be6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	681a      	ldr	r2, [r3, #0]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001be4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7e5b      	ldrb	r3, [r3, #25]
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d108      	bne.n	8001c00 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	681a      	ldr	r2, [r3, #0]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	e007      	b.n	8001c10 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c0e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	7e9b      	ldrb	r3, [r3, #26]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d108      	bne.n	8001c2a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f042 0220 	orr.w	r2, r2, #32
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	e007      	b.n	8001c3a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 0220 	bic.w	r2, r2, #32
 8001c38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	7edb      	ldrb	r3, [r3, #27]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d108      	bne.n	8001c54 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f022 0210 	bic.w	r2, r2, #16
 8001c50:	601a      	str	r2, [r3, #0]
 8001c52:	e007      	b.n	8001c64 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f042 0210 	orr.w	r2, r2, #16
 8001c62:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	7f1b      	ldrb	r3, [r3, #28]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d108      	bne.n	8001c7e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f042 0208 	orr.w	r2, r2, #8
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e007      	b.n	8001c8e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f022 0208 	bic.w	r2, r2, #8
 8001c8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	7f5b      	ldrb	r3, [r3, #29]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d108      	bne.n	8001ca8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f042 0204 	orr.w	r2, r2, #4
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	e007      	b.n	8001cb8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0204 	bic.w	r2, r2, #4
 8001cb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	431a      	orrs	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	431a      	orrs	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695b      	ldr	r3, [r3, #20]
 8001ccc:	ea42 0103 	orr.w	r1, r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	1e5a      	subs	r2, r3, #1
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	430a      	orrs	r2, r1
 8001cdc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3710      	adds	r7, #16
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
	...

08001cf8 <__NVIC_SetPriorityGrouping>:
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b085      	sub	sp, #20
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	f003 0307 	and.w	r3, r3, #7
 8001d06:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d08:	4b0b      	ldr	r3, [pc, #44]	; (8001d38 <__NVIC_SetPriorityGrouping+0x40>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d14:	4013      	ands	r3, r2
 8001d16:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <__NVIC_SetPriorityGrouping+0x44>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d26:	4a04      	ldr	r2, [pc, #16]	; (8001d38 <__NVIC_SetPriorityGrouping+0x40>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	60d3      	str	r3, [r2, #12]
}
 8001d2c:	bf00      	nop
 8001d2e:	3714      	adds	r7, #20
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr
 8001d38:	e000ed00 	.word	0xe000ed00
 8001d3c:	05fa0000 	.word	0x05fa0000

08001d40 <__NVIC_GetPriorityGrouping>:
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d44:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <__NVIC_GetPriorityGrouping+0x18>)
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	0a1b      	lsrs	r3, r3, #8
 8001d4a:	f003 0307 	and.w	r3, r3, #7
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000ed00 	.word	0xe000ed00

08001d5c <__NVIC_EnableIRQ>:
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	b083      	sub	sp, #12
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	db0b      	blt.n	8001d86 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d6e:	79fb      	ldrb	r3, [r7, #7]
 8001d70:	f003 021f 	and.w	r2, r3, #31
 8001d74:	4907      	ldr	r1, [pc, #28]	; (8001d94 <__NVIC_EnableIRQ+0x38>)
 8001d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d7a:	095b      	lsrs	r3, r3, #5
 8001d7c:	2001      	movs	r0, #1
 8001d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	e000e100 	.word	0xe000e100

08001d98 <__NVIC_SetPriority>:
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	6039      	str	r1, [r7, #0]
 8001da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db0a      	blt.n	8001dc2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	490c      	ldr	r1, [pc, #48]	; (8001de4 <__NVIC_SetPriority+0x4c>)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	0112      	lsls	r2, r2, #4
 8001db8:	b2d2      	uxtb	r2, r2
 8001dba:	440b      	add	r3, r1
 8001dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001dc0:	e00a      	b.n	8001dd8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	b2da      	uxtb	r2, r3
 8001dc6:	4908      	ldr	r1, [pc, #32]	; (8001de8 <__NVIC_SetPriority+0x50>)
 8001dc8:	79fb      	ldrb	r3, [r7, #7]
 8001dca:	f003 030f 	and.w	r3, r3, #15
 8001dce:	3b04      	subs	r3, #4
 8001dd0:	0112      	lsls	r2, r2, #4
 8001dd2:	b2d2      	uxtb	r2, r2
 8001dd4:	440b      	add	r3, r1
 8001dd6:	761a      	strb	r2, [r3, #24]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000e100 	.word	0xe000e100
 8001de8:	e000ed00 	.word	0xe000ed00

08001dec <NVIC_EncodePriority>:
{
 8001dec:	b480      	push	{r7}
 8001dee:	b089      	sub	sp, #36	; 0x24
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f003 0307 	and.w	r3, r3, #7
 8001dfe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e00:	69fb      	ldr	r3, [r7, #28]
 8001e02:	f1c3 0307 	rsb	r3, r3, #7
 8001e06:	2b04      	cmp	r3, #4
 8001e08:	bf28      	it	cs
 8001e0a:	2304      	movcs	r3, #4
 8001e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e0e:	69fb      	ldr	r3, [r7, #28]
 8001e10:	3304      	adds	r3, #4
 8001e12:	2b06      	cmp	r3, #6
 8001e14:	d902      	bls.n	8001e1c <NVIC_EncodePriority+0x30>
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	3b03      	subs	r3, #3
 8001e1a:	e000      	b.n	8001e1e <NVIC_EncodePriority+0x32>
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e20:	f04f 32ff 	mov.w	r2, #4294967295
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43da      	mvns	r2, r3
 8001e2c:	68bb      	ldr	r3, [r7, #8]
 8001e2e:	401a      	ands	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e34:	f04f 31ff 	mov.w	r1, #4294967295
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e3e:	43d9      	mvns	r1, r3
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e44:	4313      	orrs	r3, r2
}
 8001e46:	4618      	mov	r0, r3
 8001e48:	3724      	adds	r7, #36	; 0x24
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr

08001e52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e52:	b580      	push	{r7, lr}
 8001e54:	b082      	sub	sp, #8
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ff4c 	bl	8001cf8 <__NVIC_SetPriorityGrouping>
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b086      	sub	sp, #24
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	4603      	mov	r3, r0
 8001e70:	60b9      	str	r1, [r7, #8]
 8001e72:	607a      	str	r2, [r7, #4]
 8001e74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e76:	2300      	movs	r3, #0
 8001e78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e7a:	f7ff ff61 	bl	8001d40 <__NVIC_GetPriorityGrouping>
 8001e7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	68b9      	ldr	r1, [r7, #8]
 8001e84:	6978      	ldr	r0, [r7, #20]
 8001e86:	f7ff ffb1 	bl	8001dec <NVIC_EncodePriority>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e90:	4611      	mov	r1, r2
 8001e92:	4618      	mov	r0, r3
 8001e94:	f7ff ff80 	bl	8001d98 <__NVIC_SetPriority>
}
 8001e98:	bf00      	nop
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff ff54 	bl	8001d5c <__NVIC_EnableIRQ>
}
 8001eb4:	bf00      	nop
 8001eb6:	3708      	adds	r7, #8
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	bd80      	pop	{r7, pc}

08001ebc <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b082      	sub	sp, #8
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e014      	b.n	8001ef8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	791b      	ldrb	r3, [r3, #4]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d105      	bne.n	8001ee4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2200      	movs	r2, #0
 8001edc:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f7ff f93c 	bl	800115c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2202      	movs	r2, #2
 8001ee8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2201      	movs	r2, #1
 8001ef4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001ef6:	2300      	movs	r3, #0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	795b      	ldrb	r3, [r3, #5]
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	d101      	bne.n	8001f16 <HAL_DAC_Start+0x16>
 8001f12:	2302      	movs	r3, #2
 8001f14:	e040      	b.n	8001f98 <HAL_DAC_Start+0x98>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2202      	movs	r2, #2
 8001f20:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	6819      	ldr	r1, [r3, #0]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	f003 0310 	and.w	r3, r3, #16
 8001f2e:	2201      	movs	r2, #1
 8001f30:	409a      	lsls	r2, r3
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	430a      	orrs	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d10f      	bne.n	8001f60 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001f4a:	2b3c      	cmp	r3, #60	; 0x3c
 8001f4c:	d11d      	bne.n	8001f8a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f042 0201 	orr.w	r2, r2, #1
 8001f5c:	605a      	str	r2, [r3, #4]
 8001f5e:	e014      	b.n	8001f8a <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	f003 0310 	and.w	r3, r3, #16
 8001f70:	213c      	movs	r1, #60	; 0x3c
 8001f72:	fa01 f303 	lsl.w	r3, r1, r3
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d107      	bne.n	8001f8a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	685a      	ldr	r2, [r3, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f042 0202 	orr.w	r2, r2, #2
 8001f88:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f96:	2300      	movs	r3, #0
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b082      	sub	sp, #8
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fb6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fba:	d120      	bne.n	8001ffe <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001fc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fca:	d118      	bne.n	8001ffe <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2204      	movs	r2, #4
 8001fd0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	f043 0201 	orr.w	r2, r3, #1
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001fe6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ff6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 f852 	bl	80020a2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002008:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800200c:	d120      	bne.n	8002050 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002014:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002018:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800201c:	d118      	bne.n	8002050 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2204      	movs	r2, #4
 8002022:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	f043 0202 	orr.w	r2, r3, #2
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002038:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8002048:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800204a:	6878      	ldr	r0, [r7, #4]
 800204c:	f000 f882 	bl	8002154 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002058:	b480      	push	{r7}
 800205a:	b087      	sub	sp, #28
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
 8002064:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002066:	2300      	movs	r3, #0
 8002068:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d105      	bne.n	8002082 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	4413      	add	r3, r2
 800207c:	3308      	adds	r3, #8
 800207e:	617b      	str	r3, [r7, #20]
 8002080:	e004      	b.n	800208c <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002082:	697a      	ldr	r2, [r7, #20]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4413      	add	r3, r2
 8002088:	3314      	adds	r3, #20
 800208a:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	461a      	mov	r2, r3
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	371c      	adds	r7, #28
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80020a2:	b480      	push	{r7}
 80020a4:	b083      	sub	sp, #12
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr

080020b6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80020b6:	b480      	push	{r7}
 80020b8:	b087      	sub	sp, #28
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	60f8      	str	r0, [r7, #12]
 80020be:	60b9      	str	r1, [r7, #8]
 80020c0:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	795b      	ldrb	r3, [r3, #5]
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d101      	bne.n	80020ce <HAL_DAC_ConfigChannel+0x18>
 80020ca:	2302      	movs	r3, #2
 80020cc:	e03c      	b.n	8002148 <HAL_DAC_ConfigChannel+0x92>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2202      	movs	r2, #2
 80020d8:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	f003 0310 	and.w	r3, r3, #16
 80020e8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80020ec:	fa02 f303 	lsl.w	r3, r2, r3
 80020f0:	43db      	mvns	r3, r3
 80020f2:	697a      	ldr	r2, [r7, #20]
 80020f4:	4013      	ands	r3, r2
 80020f6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80020f8:	68bb      	ldr	r3, [r7, #8]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	68bb      	ldr	r3, [r7, #8]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	4313      	orrs	r3, r2
 8002102:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f003 0310 	and.w	r3, r3, #16
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	4313      	orrs	r3, r2
 8002114:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6819      	ldr	r1, [r3, #0]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f003 0310 	and.w	r3, r3, #16
 800212a:	22c0      	movs	r2, #192	; 0xc0
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43da      	mvns	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	400a      	ands	r2, r1
 8002138:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2201      	movs	r2, #1
 800213e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	371c      	adds	r7, #28
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800215c:	bf00      	nop
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b086      	sub	sp, #24
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff fc94 	bl	8001aa0 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e099      	b.n	80022b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	2202      	movs	r2, #2
 8002188:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0201 	bic.w	r2, r2, #1
 80021a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021a4:	e00f      	b.n	80021c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021a6:	f7ff fc7b 	bl	8001aa0 <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b05      	cmp	r3, #5
 80021b2:	d908      	bls.n	80021c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2220      	movs	r2, #32
 80021b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2203      	movs	r2, #3
 80021be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e078      	b.n	80022b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0301 	and.w	r3, r3, #1
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d1e8      	bne.n	80021a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80021dc:	697a      	ldr	r2, [r7, #20]
 80021de:	4b38      	ldr	r3, [pc, #224]	; (80022c0 <HAL_DMA_Init+0x158>)
 80021e0:	4013      	ands	r3, r2
 80021e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685a      	ldr	r2, [r3, #4]
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	689b      	ldr	r3, [r3, #8]
 80021ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80021f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80021fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800220a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002212:	697a      	ldr	r2, [r7, #20]
 8002214:	4313      	orrs	r3, r2
 8002216:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800221c:	2b04      	cmp	r3, #4
 800221e:	d107      	bne.n	8002230 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002228:	4313      	orrs	r3, r2
 800222a:	697a      	ldr	r2, [r7, #20]
 800222c:	4313      	orrs	r3, r2
 800222e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f023 0307 	bic.w	r3, r3, #7
 8002246:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	4313      	orrs	r3, r2
 8002250:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002256:	2b04      	cmp	r3, #4
 8002258:	d117      	bne.n	800228a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4313      	orrs	r3, r2
 8002262:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00e      	beq.n	800228a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f000 fb09 	bl	8002884 <DMA_CheckFifoParam>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d008      	beq.n	800228a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2240      	movs	r2, #64	; 0x40
 800227c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2201      	movs	r2, #1
 8002282:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002286:	2301      	movs	r3, #1
 8002288:	e016      	b.n	80022b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	697a      	ldr	r2, [r7, #20]
 8002290:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002292:	6878      	ldr	r0, [r7, #4]
 8002294:	f000 fac0 	bl	8002818 <DMA_CalcBaseAndBitshift>
 8002298:	4603      	mov	r3, r0
 800229a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a0:	223f      	movs	r2, #63	; 0x3f
 80022a2:	409a      	lsls	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	2200      	movs	r2, #0
 80022ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2201      	movs	r2, #1
 80022b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80022b6:	2300      	movs	r3, #0
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3718      	adds	r7, #24
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	e010803f 	.word	0xe010803f

080022c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	60b9      	str	r1, [r7, #8]
 80022ce:	607a      	str	r2, [r7, #4]
 80022d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80022d2:	2300      	movs	r3, #0
 80022d4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022da:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d101      	bne.n	80022ea <HAL_DMA_Start_IT+0x26>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e048      	b.n	800237c <HAL_DMA_Start_IT+0xb8>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2201      	movs	r2, #1
 80022ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d137      	bne.n	800236e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	2202      	movs	r2, #2
 8002302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2200      	movs	r2, #0
 800230a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	687a      	ldr	r2, [r7, #4]
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	68f8      	ldr	r0, [r7, #12]
 8002314:	f000 fa52 	bl	80027bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	223f      	movs	r2, #63	; 0x3f
 800231e:	409a      	lsls	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f042 0216 	orr.w	r2, r2, #22
 8002332:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	695a      	ldr	r2, [r3, #20]
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002342:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002348:	2b00      	cmp	r3, #0
 800234a:	d007      	beq.n	800235c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f042 0208 	orr.w	r2, r2, #8
 800235a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f042 0201 	orr.w	r2, r2, #1
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	e005      	b.n	800237a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2200      	movs	r2, #0
 8002372:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002376:	2302      	movs	r3, #2
 8002378:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800237a:	7dfb      	ldrb	r3, [r7, #23]
}
 800237c:	4618      	mov	r0, r3
 800237e:	3718      	adds	r7, #24
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002390:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002392:	f7ff fb85 	bl	8001aa0 <HAL_GetTick>
 8002396:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800239e:	b2db      	uxtb	r3, r3
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d008      	beq.n	80023b6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2280      	movs	r2, #128	; 0x80
 80023a8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e052      	b.n	800245c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0216 	bic.w	r2, r2, #22
 80023c4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	695a      	ldr	r2, [r3, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80023d4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d103      	bne.n	80023e6 <HAL_DMA_Abort+0x62>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d007      	beq.n	80023f6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f022 0208 	bic.w	r2, r2, #8
 80023f4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	681a      	ldr	r2, [r3, #0]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f022 0201 	bic.w	r2, r2, #1
 8002404:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002406:	e013      	b.n	8002430 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002408:	f7ff fb4a 	bl	8001aa0 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b05      	cmp	r3, #5
 8002414:	d90c      	bls.n	8002430 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2220      	movs	r2, #32
 800241a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2203      	movs	r2, #3
 8002420:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800242c:	2303      	movs	r3, #3
 800242e:	e015      	b.n	800245c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	d1e4      	bne.n	8002408 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002442:	223f      	movs	r2, #63	; 0x3f
 8002444:	409a      	lsls	r2, r3
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2201      	movs	r2, #1
 800244e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2200      	movs	r2, #0
 8002456:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800245a:	2300      	movs	r3, #0
}
 800245c:	4618      	mov	r0, r3
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002464:	b480      	push	{r7}
 8002466:	b083      	sub	sp, #12
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002472:	b2db      	uxtb	r3, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d004      	beq.n	8002482 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2280      	movs	r2, #128	; 0x80
 800247c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e00c      	b.n	800249c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2205      	movs	r2, #5
 8002486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f022 0201 	bic.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b086      	sub	sp, #24
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80024b0:	2300      	movs	r3, #0
 80024b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80024b4:	4b8e      	ldr	r3, [pc, #568]	; (80026f0 <HAL_DMA_IRQHandler+0x248>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a8e      	ldr	r2, [pc, #568]	; (80026f4 <HAL_DMA_IRQHandler+0x24c>)
 80024ba:	fba2 2303 	umull	r2, r3, r2, r3
 80024be:	0a9b      	lsrs	r3, r3, #10
 80024c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024d2:	2208      	movs	r2, #8
 80024d4:	409a      	lsls	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	4013      	ands	r3, r2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d01a      	beq.n	8002514 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0304 	and.w	r3, r3, #4
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d013      	beq.n	8002514 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f022 0204 	bic.w	r2, r2, #4
 80024fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002500:	2208      	movs	r2, #8
 8002502:	409a      	lsls	r2, r3
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250c:	f043 0201 	orr.w	r2, r3, #1
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002518:	2201      	movs	r2, #1
 800251a:	409a      	lsls	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	4013      	ands	r3, r2
 8002520:	2b00      	cmp	r3, #0
 8002522:	d012      	beq.n	800254a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	695b      	ldr	r3, [r3, #20]
 800252a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00b      	beq.n	800254a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002536:	2201      	movs	r2, #1
 8002538:	409a      	lsls	r2, r3
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002542:	f043 0202 	orr.w	r2, r3, #2
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	2204      	movs	r2, #4
 8002550:	409a      	lsls	r2, r3
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d012      	beq.n	8002580 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00b      	beq.n	8002580 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800256c:	2204      	movs	r2, #4
 800256e:	409a      	lsls	r2, r3
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002578:	f043 0204 	orr.w	r2, r3, #4
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002584:	2210      	movs	r2, #16
 8002586:	409a      	lsls	r2, r3
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	4013      	ands	r3, r2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d043      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0308 	and.w	r3, r3, #8
 800259a:	2b00      	cmp	r3, #0
 800259c:	d03c      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a2:	2210      	movs	r2, #16
 80025a4:	409a      	lsls	r2, r3
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d018      	beq.n	80025ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d108      	bne.n	80025d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d024      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	4798      	blx	r3
 80025d6:	e01f      	b.n	8002618 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01b      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025e4:	6878      	ldr	r0, [r7, #4]
 80025e6:	4798      	blx	r3
 80025e8:	e016      	b.n	8002618 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d107      	bne.n	8002608 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f022 0208 	bic.w	r2, r2, #8
 8002606:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261c:	2220      	movs	r2, #32
 800261e:	409a      	lsls	r2, r3
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	4013      	ands	r3, r2
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 808f 	beq.w	8002748 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0310 	and.w	r3, r3, #16
 8002634:	2b00      	cmp	r3, #0
 8002636:	f000 8087 	beq.w	8002748 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263e:	2220      	movs	r2, #32
 8002640:	409a      	lsls	r2, r3
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b05      	cmp	r3, #5
 8002650:	d136      	bne.n	80026c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0216 	bic.w	r2, r2, #22
 8002660:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	695a      	ldr	r2, [r3, #20]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002670:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	2b00      	cmp	r3, #0
 8002678:	d103      	bne.n	8002682 <HAL_DMA_IRQHandler+0x1da>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800267e:	2b00      	cmp	r3, #0
 8002680:	d007      	beq.n	8002692 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0208 	bic.w	r2, r2, #8
 8002690:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002696:	223f      	movs	r2, #63	; 0x3f
 8002698:	409a      	lsls	r2, r3
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2201      	movs	r2, #1
 80026a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2200      	movs	r2, #0
 80026aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d07e      	beq.n	80027b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	4798      	blx	r3
        }
        return;
 80026be:	e079      	b.n	80027b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d01d      	beq.n	800270a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d10d      	bne.n	80026f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d031      	beq.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e8:	6878      	ldr	r0, [r7, #4]
 80026ea:	4798      	blx	r3
 80026ec:	e02c      	b.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
 80026ee:	bf00      	nop
 80026f0:	20000004 	.word	0x20000004
 80026f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d023      	beq.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	4798      	blx	r3
 8002708:	e01e      	b.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10f      	bne.n	8002738 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f022 0210 	bic.w	r2, r2, #16
 8002726:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273c:	2b00      	cmp	r3, #0
 800273e:	d003      	beq.n	8002748 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002744:	6878      	ldr	r0, [r7, #4]
 8002746:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800274c:	2b00      	cmp	r3, #0
 800274e:	d032      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b00      	cmp	r3, #0
 800275a:	d022      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2205      	movs	r2, #5
 8002760:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	681a      	ldr	r2, [r3, #0]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f022 0201 	bic.w	r2, r2, #1
 8002772:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	3301      	adds	r3, #1
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	d307      	bcc.n	8002790 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f2      	bne.n	8002774 <HAL_DMA_IRQHandler+0x2cc>
 800278e:	e000      	b.n	8002792 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002790:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2201      	movs	r2, #1
 8002796:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d005      	beq.n	80027b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	4798      	blx	r3
 80027b2:	e000      	b.n	80027b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027b4:	bf00      	nop
    }
  }
}
 80027b6:	3718      	adds	r7, #24
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}

080027bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027bc:	b480      	push	{r7}
 80027be:	b085      	sub	sp, #20
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
 80027c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80027d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	2b40      	cmp	r3, #64	; 0x40
 80027e8:	d108      	bne.n	80027fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	68ba      	ldr	r2, [r7, #8]
 80027f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80027fa:	e007      	b.n	800280c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68ba      	ldr	r2, [r7, #8]
 8002802:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	60da      	str	r2, [r3, #12]
}
 800280c:	bf00      	nop
 800280e:	3714      	adds	r7, #20
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002818:	b480      	push	{r7}
 800281a:	b085      	sub	sp, #20
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	b2db      	uxtb	r3, r3
 8002826:	3b10      	subs	r3, #16
 8002828:	4a13      	ldr	r2, [pc, #76]	; (8002878 <DMA_CalcBaseAndBitshift+0x60>)
 800282a:	fba2 2303 	umull	r2, r3, r2, r3
 800282e:	091b      	lsrs	r3, r3, #4
 8002830:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002832:	4a12      	ldr	r2, [pc, #72]	; (800287c <DMA_CalcBaseAndBitshift+0x64>)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	4413      	add	r3, r2
 8002838:	781b      	ldrb	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	2b03      	cmp	r3, #3
 8002844:	d908      	bls.n	8002858 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	461a      	mov	r2, r3
 800284c:	4b0c      	ldr	r3, [pc, #48]	; (8002880 <DMA_CalcBaseAndBitshift+0x68>)
 800284e:	4013      	ands	r3, r2
 8002850:	1d1a      	adds	r2, r3, #4
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	659a      	str	r2, [r3, #88]	; 0x58
 8002856:	e006      	b.n	8002866 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	4b08      	ldr	r3, [pc, #32]	; (8002880 <DMA_CalcBaseAndBitshift+0x68>)
 8002860:	4013      	ands	r3, r2
 8002862:	687a      	ldr	r2, [r7, #4]
 8002864:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800286a:	4618      	mov	r0, r3
 800286c:	3714      	adds	r7, #20
 800286e:	46bd      	mov	sp, r7
 8002870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	aaaaaaab 	.word	0xaaaaaaab
 800287c:	080120f4 	.word	0x080120f4
 8002880:	fffffc00 	.word	0xfffffc00

08002884 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002884:	b480      	push	{r7}
 8002886:	b085      	sub	sp, #20
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800288c:	2300      	movs	r3, #0
 800288e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d11f      	bne.n	80028de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	2b03      	cmp	r3, #3
 80028a2:	d856      	bhi.n	8002952 <DMA_CheckFifoParam+0xce>
 80028a4:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <DMA_CheckFifoParam+0x28>)
 80028a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028aa:	bf00      	nop
 80028ac:	080028bd 	.word	0x080028bd
 80028b0:	080028cf 	.word	0x080028cf
 80028b4:	080028bd 	.word	0x080028bd
 80028b8:	08002953 	.word	0x08002953
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d046      	beq.n	8002956 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028cc:	e043      	b.n	8002956 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80028d6:	d140      	bne.n	800295a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028dc:	e03d      	b.n	800295a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028e6:	d121      	bne.n	800292c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2b03      	cmp	r3, #3
 80028ec:	d837      	bhi.n	800295e <DMA_CheckFifoParam+0xda>
 80028ee:	a201      	add	r2, pc, #4	; (adr r2, 80028f4 <DMA_CheckFifoParam+0x70>)
 80028f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f4:	08002905 	.word	0x08002905
 80028f8:	0800290b 	.word	0x0800290b
 80028fc:	08002905 	.word	0x08002905
 8002900:	0800291d 	.word	0x0800291d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
      break;
 8002908:	e030      	b.n	800296c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d025      	beq.n	8002962 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800291a:	e022      	b.n	8002962 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002920:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002924:	d11f      	bne.n	8002966 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800292a:	e01c      	b.n	8002966 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	2b02      	cmp	r3, #2
 8002930:	d903      	bls.n	800293a <DMA_CheckFifoParam+0xb6>
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b03      	cmp	r3, #3
 8002936:	d003      	beq.n	8002940 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002938:	e018      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	73fb      	strb	r3, [r7, #15]
      break;
 800293e:	e015      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00e      	beq.n	800296a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	73fb      	strb	r3, [r7, #15]
      break;
 8002950:	e00b      	b.n	800296a <DMA_CheckFifoParam+0xe6>
      break;
 8002952:	bf00      	nop
 8002954:	e00a      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 8002956:	bf00      	nop
 8002958:	e008      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 800295a:	bf00      	nop
 800295c:	e006      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 800295e:	bf00      	nop
 8002960:	e004      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 8002962:	bf00      	nop
 8002964:	e002      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;   
 8002966:	bf00      	nop
 8002968:	e000      	b.n	800296c <DMA_CheckFifoParam+0xe8>
      break;
 800296a:	bf00      	nop
    }
  } 
  
  return status; 
 800296c:	7bfb      	ldrb	r3, [r7, #15]
}
 800296e:	4618      	mov	r0, r3
 8002970:	3714      	adds	r7, #20
 8002972:	46bd      	mov	sp, r7
 8002974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002978:	4770      	bx	lr
 800297a:	bf00      	nop

0800297c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e06a      	b.n	8002a64 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002994:	2b00      	cmp	r3, #0
 8002996:	d106      	bne.n	80029a6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2223      	movs	r2, #35	; 0x23
 800299c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7fe fc23 	bl	80011ec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029a6:	4b31      	ldr	r3, [pc, #196]	; (8002a6c <HAL_ETH_Init+0xf0>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029aa:	4a30      	ldr	r2, [pc, #192]	; (8002a6c <HAL_ETH_Init+0xf0>)
 80029ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029b0:	6453      	str	r3, [r2, #68]	; 0x44
 80029b2:	4b2e      	ldr	r3, [pc, #184]	; (8002a6c <HAL_ETH_Init+0xf0>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029ba:	60bb      	str	r3, [r7, #8]
 80029bc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80029be:	4b2c      	ldr	r3, [pc, #176]	; (8002a70 <HAL_ETH_Init+0xf4>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4a2b      	ldr	r2, [pc, #172]	; (8002a70 <HAL_ETH_Init+0xf4>)
 80029c4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80029c8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80029ca:	4b29      	ldr	r3, [pc, #164]	; (8002a70 <HAL_ETH_Init+0xf4>)
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	4927      	ldr	r1, [pc, #156]	; (8002a70 <HAL_ETH_Init+0xf4>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80029d8:	4b25      	ldr	r3, [pc, #148]	; (8002a70 <HAL_ETH_Init+0xf4>)
 80029da:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	f043 0301 	orr.w	r3, r3, #1
 80029ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80029f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80029f4:	f7ff f854 	bl	8001aa0 <HAL_GetTick>
 80029f8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80029fa:	e011      	b.n	8002a20 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80029fc:	f7ff f850 	bl	8001aa0 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002a0a:	d909      	bls.n	8002a20 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2204      	movs	r2, #4
 8002a10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	22e0      	movs	r2, #224	; 0xe0
 8002a18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002a1c:	2301      	movs	r3, #1
 8002a1e:	e021      	b.n	8002a64 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f003 0301 	and.w	r3, r3, #1
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d1e4      	bne.n	80029fc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f000 f958 	bl	8002ce8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 f9ff 	bl	8002e3c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fa55 	bl	8002eee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	6878      	ldr	r0, [r7, #4]
 8002a4e:	f000 f9bd 	bl	8002dcc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2200      	movs	r2, #0
 8002a56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2210      	movs	r2, #16
 8002a5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40023800 	.word	0x40023800
 8002a70:	40013800 	.word	0x40013800

08002a74 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
 8002a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002a86:	68fa      	ldr	r2, [r7, #12]
 8002a88:	4b51      	ldr	r3, [pc, #324]	; (8002bd0 <ETH_SetMACConfig+0x15c>)
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	7c1b      	ldrb	r3, [r3, #16]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d102      	bne.n	8002a9c <ETH_SetMACConfig+0x28>
 8002a96:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a9a:	e000      	b.n	8002a9e <ETH_SetMACConfig+0x2a>
 8002a9c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	7c5b      	ldrb	r3, [r3, #17]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d102      	bne.n	8002aac <ETH_SetMACConfig+0x38>
 8002aa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002aaa:	e000      	b.n	8002aae <ETH_SetMACConfig+0x3a>
 8002aac:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002aae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002ab4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	7fdb      	ldrb	r3, [r3, #31]
 8002aba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002abc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ac2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	7f92      	ldrb	r2, [r2, #30]
 8002ac8:	2a00      	cmp	r2, #0
 8002aca:	d102      	bne.n	8002ad2 <ETH_SetMACConfig+0x5e>
 8002acc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ad0:	e000      	b.n	8002ad4 <ETH_SetMACConfig+0x60>
 8002ad2:	2200      	movs	r2, #0
                        macconf->Speed |
 8002ad4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	7f1b      	ldrb	r3, [r3, #28]
 8002ada:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002adc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ae2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	791b      	ldrb	r3, [r3, #4]
 8002ae8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002aea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002af2:	2a00      	cmp	r2, #0
 8002af4:	d102      	bne.n	8002afc <ETH_SetMACConfig+0x88>
 8002af6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002afa:	e000      	b.n	8002afe <ETH_SetMACConfig+0x8a>
 8002afc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002afe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	7bdb      	ldrb	r3, [r3, #15]
 8002b04:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002b06:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002b0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002b14:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002b16:	4313      	orrs	r3, r2
 8002b18:	68fa      	ldr	r2, [r7, #12]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b2e:	2001      	movs	r0, #1
 8002b30:	f7fe ffc2 	bl	8001ab8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	68fa      	ldr	r2, [r7, #12]
 8002b3a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	699b      	ldr	r3, [r3, #24]
 8002b42:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002b44:	68fa      	ldr	r2, [r7, #12]
 8002b46:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b52:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b54:	683a      	ldr	r2, [r7, #0]
 8002b56:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002b5a:	2a00      	cmp	r2, #0
 8002b5c:	d101      	bne.n	8002b62 <ETH_SetMACConfig+0xee>
 8002b5e:	2280      	movs	r2, #128	; 0x80
 8002b60:	e000      	b.n	8002b64 <ETH_SetMACConfig+0xf0>
 8002b62:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002b64:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002b6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002b72:	2a01      	cmp	r2, #1
 8002b74:	d101      	bne.n	8002b7a <ETH_SetMACConfig+0x106>
 8002b76:	2208      	movs	r2, #8
 8002b78:	e000      	b.n	8002b7c <ETH_SetMACConfig+0x108>
 8002b7a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002b7c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002b7e:	683a      	ldr	r2, [r7, #0]
 8002b80:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002b84:	2a01      	cmp	r2, #1
 8002b86:	d101      	bne.n	8002b8c <ETH_SetMACConfig+0x118>
 8002b88:	2204      	movs	r2, #4
 8002b8a:	e000      	b.n	8002b8e <ETH_SetMACConfig+0x11a>
 8002b8c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002b8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002b96:	2a01      	cmp	r2, #1
 8002b98:	d101      	bne.n	8002b9e <ETH_SetMACConfig+0x12a>
 8002b9a:	2202      	movs	r2, #2
 8002b9c:	e000      	b.n	8002ba0 <ETH_SetMACConfig+0x12c>
 8002b9e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	68fa      	ldr	r2, [r7, #12]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68fa      	ldr	r2, [r7, #12]
 8002bae:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	699b      	ldr	r3, [r3, #24]
 8002bb6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bb8:	2001      	movs	r0, #1
 8002bba:	f7fe ff7d 	bl	8001ab8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68fa      	ldr	r2, [r7, #12]
 8002bc4:	619a      	str	r2, [r3, #24]
}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	ff20810f 	.word	0xff20810f

08002bd4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002bea:	68fa      	ldr	r2, [r7, #12]
 8002bec:	4b3d      	ldr	r3, [pc, #244]	; (8002ce4 <ETH_SetDMAConfig+0x110>)
 8002bee:	4013      	ands	r3, r2
 8002bf0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	7b1b      	ldrb	r3, [r3, #12]
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d102      	bne.n	8002c00 <ETH_SetDMAConfig+0x2c>
 8002bfa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bfe:	e000      	b.n	8002c02 <ETH_SetDMAConfig+0x2e>
 8002c00:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	7b5b      	ldrb	r3, [r3, #13]
 8002c06:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c08:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c0a:	683a      	ldr	r2, [r7, #0]
 8002c0c:	7f52      	ldrb	r2, [r2, #29]
 8002c0e:	2a00      	cmp	r2, #0
 8002c10:	d102      	bne.n	8002c18 <ETH_SetDMAConfig+0x44>
 8002c12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c16:	e000      	b.n	8002c1a <ETH_SetDMAConfig+0x46>
 8002c18:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002c1a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	7b9b      	ldrb	r3, [r3, #14]
 8002c20:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002c22:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002c28:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	7f1b      	ldrb	r3, [r3, #28]
 8002c2e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002c30:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	7f9b      	ldrb	r3, [r3, #30]
 8002c36:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002c38:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002c3e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c46:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	68fa      	ldr	r2, [r7, #12]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c58:	461a      	mov	r2, r3
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002c6a:	2001      	movs	r0, #1
 8002c6c:	f7fe ff24 	bl	8001ab8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002c78:	461a      	mov	r2, r3
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	791b      	ldrb	r3, [r3, #4]
 8002c82:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002c88:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002c8e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002c94:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002c9c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002c9e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002ca6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002cac:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002cae:	687a      	ldr	r2, [r7, #4]
 8002cb0:	6812      	ldr	r2, [r2, #0]
 8002cb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002cb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002cba:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002cc8:	2001      	movs	r0, #1
 8002cca:	f7fe fef5 	bl	8001ab8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6013      	str	r3, [r2, #0]
}
 8002cdc:	bf00      	nop
 8002cde:	3710      	adds	r7, #16
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	f8de3f23 	.word	0xf8de3f23

08002ce8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b0a6      	sub	sp, #152	; 0x98
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002d00:	2300      	movs	r3, #0
 8002d02:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002d06:	2301      	movs	r3, #1
 8002d08:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002d12:	2301      	movs	r3, #1
 8002d14:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002d24:	2300      	movs	r3, #0
 8002d26:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002d32:	2300      	movs	r3, #0
 8002d34:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002d38:	2300      	movs	r3, #0
 8002d3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002d4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d4e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002d50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d54:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002d56:	2300      	movs	r3, #0
 8002d58:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002d5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002d60:	4619      	mov	r1, r3
 8002d62:	6878      	ldr	r0, [r7, #4]
 8002d64:	f7ff fe86 	bl	8002a74 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002d68:	2301      	movs	r3, #1
 8002d6a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002d70:	2301      	movs	r3, #1
 8002d72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002d76:	2301      	movs	r3, #1
 8002d78:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002d84:	2300      	movs	r3, #0
 8002d86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002d8a:	2300      	movs	r3, #0
 8002d8c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002d94:	2301      	movs	r3, #1
 8002d96:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002d98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d9c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002d9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002da2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002da8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002daa:	2301      	movs	r3, #1
 8002dac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002db0:	2300      	movs	r3, #0
 8002db2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002db4:	2300      	movs	r3, #0
 8002db6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002db8:	f107 0308 	add.w	r3, r7, #8
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff ff08 	bl	8002bd4 <ETH_SetDMAConfig>
}
 8002dc4:	bf00      	nop
 8002dc6:	3798      	adds	r7, #152	; 0x98
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b087      	sub	sp, #28
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	60f8      	str	r0, [r7, #12]
 8002dd4:	60b9      	str	r1, [r7, #8]
 8002dd6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	3305      	adds	r3, #5
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	021b      	lsls	r3, r3, #8
 8002de0:	687a      	ldr	r2, [r7, #4]
 8002de2:	3204      	adds	r2, #4
 8002de4:	7812      	ldrb	r2, [r2, #0]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002dea:	68ba      	ldr	r2, [r7, #8]
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <ETH_MACAddressConfig+0x68>)
 8002dee:	4413      	add	r3, r2
 8002df0:	461a      	mov	r2, r3
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3303      	adds	r3, #3
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	061a      	lsls	r2, r3, #24
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	3302      	adds	r3, #2
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	041b      	lsls	r3, r3, #16
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3301      	adds	r3, #1
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	021b      	lsls	r3, r3, #8
 8002e10:	4313      	orrs	r3, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	7812      	ldrb	r2, [r2, #0]
 8002e16:	4313      	orrs	r3, r2
 8002e18:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	4b06      	ldr	r3, [pc, #24]	; (8002e38 <ETH_MACAddressConfig+0x6c>)
 8002e1e:	4413      	add	r3, r2
 8002e20:	461a      	mov	r2, r3
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	6013      	str	r3, [r2, #0]
}
 8002e26:	bf00      	nop
 8002e28:	371c      	adds	r7, #28
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	40028040 	.word	0x40028040
 8002e38:	40028044 	.word	0x40028044

08002e3c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002e44:	2300      	movs	r3, #0
 8002e46:	60fb      	str	r3, [r7, #12]
 8002e48:	e03e      	b.n	8002ec8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68d9      	ldr	r1, [r3, #12]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4613      	mov	r3, r2
 8002e52:	009b      	lsls	r3, r3, #2
 8002e54:	4413      	add	r3, r2
 8002e56:	00db      	lsls	r3, r3, #3
 8002e58:	440b      	add	r3, r1
 8002e5a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2200      	movs	r2, #0
 8002e66:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	2200      	movs	r2, #0
 8002e72:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	68fa      	ldr	r2, [r7, #12]
 8002e7a:	3206      	adds	r2, #6
 8002e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d80c      	bhi.n	8002eac <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68d9      	ldr	r1, [r3, #12]
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1c5a      	adds	r2, r3, #1
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	00db      	lsls	r3, r3, #3
 8002ea2:	440b      	add	r3, r1
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	60da      	str	r2, [r3, #12]
 8002eaa:	e004      	b.n	8002eb6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002eb6:	68bb      	ldr	r3, [r7, #8]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d9bd      	bls.n	8002e4a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	68da      	ldr	r2, [r3, #12]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ee0:	611a      	str	r2, [r3, #16]
}
 8002ee2:	bf00      	nop
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b085      	sub	sp, #20
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	e046      	b.n	8002f8a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6919      	ldr	r1, [r3, #16]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	4613      	mov	r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	4413      	add	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	440b      	add	r3, r1
 8002f0c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	2200      	movs	r2, #0
 8002f18:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	2200      	movs	r2, #0
 8002f24:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f38:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002f40:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002f4e:	68b9      	ldr	r1, [r7, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	3212      	adds	r2, #18
 8002f56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d80c      	bhi.n	8002f7a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6919      	ldr	r1, [r3, #16]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	1c5a      	adds	r2, r3, #1
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	440b      	add	r3, r1
 8002f72:	461a      	mov	r2, r3
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	60da      	str	r2, [r3, #12]
 8002f78:	e004      	b.n	8002f84 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	3301      	adds	r3, #1
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	2b03      	cmp	r3, #3
 8002f8e:	d9b5      	bls.n	8002efc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691a      	ldr	r2, [r3, #16]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fba:	60da      	str	r2, [r3, #12]
}
 8002fbc:	bf00      	nop
 8002fbe:	3714      	adds	r7, #20
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b089      	sub	sp, #36	; 0x24
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002fda:	2300      	movs	r3, #0
 8002fdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002fde:	2300      	movs	r3, #0
 8002fe0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61fb      	str	r3, [r7, #28]
 8002fe6:	e175      	b.n	80032d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002fe8:	2201      	movs	r2, #1
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	697a      	ldr	r2, [r7, #20]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	429a      	cmp	r2, r3
 8003002:	f040 8164 	bne.w	80032ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f003 0303 	and.w	r3, r3, #3
 800300e:	2b01      	cmp	r3, #1
 8003010:	d005      	beq.n	800301e <HAL_GPIO_Init+0x56>
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f003 0303 	and.w	r3, r3, #3
 800301a:	2b02      	cmp	r3, #2
 800301c:	d130      	bne.n	8003080 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	2203      	movs	r2, #3
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	43db      	mvns	r3, r3
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	4013      	ands	r3, r2
 8003034:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	005b      	lsls	r3, r3, #1
 800303e:	fa02 f303 	lsl.w	r3, r2, r3
 8003042:	69ba      	ldr	r2, [r7, #24]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	69ba      	ldr	r2, [r7, #24]
 800304c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003054:	2201      	movs	r2, #1
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	fa02 f303 	lsl.w	r3, r2, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	4013      	ands	r3, r2
 8003062:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	091b      	lsrs	r3, r3, #4
 800306a:	f003 0201 	and.w	r2, r3, #1
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	4313      	orrs	r3, r2
 8003078:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 0303 	and.w	r3, r3, #3
 8003088:	2b03      	cmp	r3, #3
 800308a:	d017      	beq.n	80030bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	2203      	movs	r2, #3
 8003098:	fa02 f303 	lsl.w	r3, r2, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	69ba      	ldr	r2, [r7, #24]
 80030a0:	4013      	ands	r3, r2
 80030a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	69fb      	ldr	r3, [r7, #28]
 80030aa:	005b      	lsls	r3, r3, #1
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4313      	orrs	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f003 0303 	and.w	r3, r3, #3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d123      	bne.n	8003110 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80030c8:	69fb      	ldr	r3, [r7, #28]
 80030ca:	08da      	lsrs	r2, r3, #3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	3208      	adds	r2, #8
 80030d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	f003 0307 	and.w	r3, r3, #7
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	220f      	movs	r2, #15
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	43db      	mvns	r3, r3
 80030e6:	69ba      	ldr	r2, [r7, #24]
 80030e8:	4013      	ands	r3, r2
 80030ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	691a      	ldr	r2, [r3, #16]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	f003 0307 	and.w	r3, r3, #7
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	4313      	orrs	r3, r2
 8003100:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	08da      	lsrs	r2, r3, #3
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	3208      	adds	r2, #8
 800310a:	69b9      	ldr	r1, [r7, #24]
 800310c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	005b      	lsls	r3, r3, #1
 800311a:	2203      	movs	r2, #3
 800311c:	fa02 f303 	lsl.w	r3, r2, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f003 0203 	and.w	r2, r3, #3
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	fa02 f303 	lsl.w	r3, r2, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4313      	orrs	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	69ba      	ldr	r2, [r7, #24]
 8003142:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80be 	beq.w	80032ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003152:	4b66      	ldr	r3, [pc, #408]	; (80032ec <HAL_GPIO_Init+0x324>)
 8003154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003156:	4a65      	ldr	r2, [pc, #404]	; (80032ec <HAL_GPIO_Init+0x324>)
 8003158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800315c:	6453      	str	r3, [r2, #68]	; 0x44
 800315e:	4b63      	ldr	r3, [pc, #396]	; (80032ec <HAL_GPIO_Init+0x324>)
 8003160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800316a:	4a61      	ldr	r2, [pc, #388]	; (80032f0 <HAL_GPIO_Init+0x328>)
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	089b      	lsrs	r3, r3, #2
 8003170:	3302      	adds	r3, #2
 8003172:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	f003 0303 	and.w	r3, r3, #3
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	220f      	movs	r2, #15
 8003182:	fa02 f303 	lsl.w	r3, r2, r3
 8003186:	43db      	mvns	r3, r3
 8003188:	69ba      	ldr	r2, [r7, #24]
 800318a:	4013      	ands	r3, r2
 800318c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a58      	ldr	r2, [pc, #352]	; (80032f4 <HAL_GPIO_Init+0x32c>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d037      	beq.n	8003206 <HAL_GPIO_Init+0x23e>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	4a57      	ldr	r2, [pc, #348]	; (80032f8 <HAL_GPIO_Init+0x330>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d031      	beq.n	8003202 <HAL_GPIO_Init+0x23a>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	4a56      	ldr	r2, [pc, #344]	; (80032fc <HAL_GPIO_Init+0x334>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d02b      	beq.n	80031fe <HAL_GPIO_Init+0x236>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	4a55      	ldr	r2, [pc, #340]	; (8003300 <HAL_GPIO_Init+0x338>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d025      	beq.n	80031fa <HAL_GPIO_Init+0x232>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a54      	ldr	r2, [pc, #336]	; (8003304 <HAL_GPIO_Init+0x33c>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d01f      	beq.n	80031f6 <HAL_GPIO_Init+0x22e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a53      	ldr	r2, [pc, #332]	; (8003308 <HAL_GPIO_Init+0x340>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d019      	beq.n	80031f2 <HAL_GPIO_Init+0x22a>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a52      	ldr	r2, [pc, #328]	; (800330c <HAL_GPIO_Init+0x344>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d013      	beq.n	80031ee <HAL_GPIO_Init+0x226>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a51      	ldr	r2, [pc, #324]	; (8003310 <HAL_GPIO_Init+0x348>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d00d      	beq.n	80031ea <HAL_GPIO_Init+0x222>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a50      	ldr	r2, [pc, #320]	; (8003314 <HAL_GPIO_Init+0x34c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d007      	beq.n	80031e6 <HAL_GPIO_Init+0x21e>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a4f      	ldr	r2, [pc, #316]	; (8003318 <HAL_GPIO_Init+0x350>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d101      	bne.n	80031e2 <HAL_GPIO_Init+0x21a>
 80031de:	2309      	movs	r3, #9
 80031e0:	e012      	b.n	8003208 <HAL_GPIO_Init+0x240>
 80031e2:	230a      	movs	r3, #10
 80031e4:	e010      	b.n	8003208 <HAL_GPIO_Init+0x240>
 80031e6:	2308      	movs	r3, #8
 80031e8:	e00e      	b.n	8003208 <HAL_GPIO_Init+0x240>
 80031ea:	2307      	movs	r3, #7
 80031ec:	e00c      	b.n	8003208 <HAL_GPIO_Init+0x240>
 80031ee:	2306      	movs	r3, #6
 80031f0:	e00a      	b.n	8003208 <HAL_GPIO_Init+0x240>
 80031f2:	2305      	movs	r3, #5
 80031f4:	e008      	b.n	8003208 <HAL_GPIO_Init+0x240>
 80031f6:	2304      	movs	r3, #4
 80031f8:	e006      	b.n	8003208 <HAL_GPIO_Init+0x240>
 80031fa:	2303      	movs	r3, #3
 80031fc:	e004      	b.n	8003208 <HAL_GPIO_Init+0x240>
 80031fe:	2302      	movs	r3, #2
 8003200:	e002      	b.n	8003208 <HAL_GPIO_Init+0x240>
 8003202:	2301      	movs	r3, #1
 8003204:	e000      	b.n	8003208 <HAL_GPIO_Init+0x240>
 8003206:	2300      	movs	r3, #0
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	f002 0203 	and.w	r2, r2, #3
 800320e:	0092      	lsls	r2, r2, #2
 8003210:	4093      	lsls	r3, r2
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003218:	4935      	ldr	r1, [pc, #212]	; (80032f0 <HAL_GPIO_Init+0x328>)
 800321a:	69fb      	ldr	r3, [r7, #28]
 800321c:	089b      	lsrs	r3, r3, #2
 800321e:	3302      	adds	r3, #2
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003226:	4b3d      	ldr	r3, [pc, #244]	; (800331c <HAL_GPIO_Init+0x354>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800322c:	693b      	ldr	r3, [r7, #16]
 800322e:	43db      	mvns	r3, r3
 8003230:	69ba      	ldr	r2, [r7, #24]
 8003232:	4013      	ands	r3, r2
 8003234:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d003      	beq.n	800324a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003242:	69ba      	ldr	r2, [r7, #24]
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	4313      	orrs	r3, r2
 8003248:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800324a:	4a34      	ldr	r2, [pc, #208]	; (800331c <HAL_GPIO_Init+0x354>)
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003250:	4b32      	ldr	r3, [pc, #200]	; (800331c <HAL_GPIO_Init+0x354>)
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	43db      	mvns	r3, r3
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	4013      	ands	r3, r2
 800325e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d003      	beq.n	8003274 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	4313      	orrs	r3, r2
 8003272:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003274:	4a29      	ldr	r2, [pc, #164]	; (800331c <HAL_GPIO_Init+0x354>)
 8003276:	69bb      	ldr	r3, [r7, #24]
 8003278:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800327a:	4b28      	ldr	r3, [pc, #160]	; (800331c <HAL_GPIO_Init+0x354>)
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	43db      	mvns	r3, r3
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	4013      	ands	r3, r2
 8003288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003296:	69ba      	ldr	r2, [r7, #24]
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	4313      	orrs	r3, r2
 800329c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800329e:	4a1f      	ldr	r2, [pc, #124]	; (800331c <HAL_GPIO_Init+0x354>)
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032a4:	4b1d      	ldr	r3, [pc, #116]	; (800331c <HAL_GPIO_Init+0x354>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	43db      	mvns	r3, r3
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	4013      	ands	r3, r2
 80032b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d003      	beq.n	80032c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80032c0:	69ba      	ldr	r2, [r7, #24]
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4313      	orrs	r3, r2
 80032c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032c8:	4a14      	ldr	r2, [pc, #80]	; (800331c <HAL_GPIO_Init+0x354>)
 80032ca:	69bb      	ldr	r3, [r7, #24]
 80032cc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	3301      	adds	r3, #1
 80032d2:	61fb      	str	r3, [r7, #28]
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	2b0f      	cmp	r3, #15
 80032d8:	f67f ae86 	bls.w	8002fe8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80032dc:	bf00      	nop
 80032de:	bf00      	nop
 80032e0:	3724      	adds	r7, #36	; 0x24
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40013800 	.word	0x40013800
 80032f4:	40020000 	.word	0x40020000
 80032f8:	40020400 	.word	0x40020400
 80032fc:	40020800 	.word	0x40020800
 8003300:	40020c00 	.word	0x40020c00
 8003304:	40021000 	.word	0x40021000
 8003308:	40021400 	.word	0x40021400
 800330c:	40021800 	.word	0x40021800
 8003310:	40021c00 	.word	0x40021c00
 8003314:	40022000 	.word	0x40022000
 8003318:	40022400 	.word	0x40022400
 800331c:	40013c00 	.word	0x40013c00

08003320 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	460b      	mov	r3, r1
 800332a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	691a      	ldr	r2, [r3, #16]
 8003330:	887b      	ldrh	r3, [r7, #2]
 8003332:	4013      	ands	r3, r2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d002      	beq.n	800333e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003338:	2301      	movs	r3, #1
 800333a:	73fb      	strb	r3, [r7, #15]
 800333c:	e001      	b.n	8003342 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800333e:	2300      	movs	r3, #0
 8003340:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003342:	7bfb      	ldrb	r3, [r7, #15]
}
 8003344:	4618      	mov	r0, r3
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr

08003350 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003350:	b480      	push	{r7}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	460b      	mov	r3, r1
 800335a:	807b      	strh	r3, [r7, #2]
 800335c:	4613      	mov	r3, r2
 800335e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003360:	787b      	ldrb	r3, [r7, #1]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d003      	beq.n	800336e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003366:	887a      	ldrh	r2, [r7, #2]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800336c:	e003      	b.n	8003376 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800336e:	887b      	ldrh	r3, [r7, #2]
 8003370:	041a      	lsls	r2, r3, #16
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	619a      	str	r2, [r3, #24]
}
 8003376:	bf00      	nop
 8003378:	370c      	adds	r7, #12
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
	...

08003384 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800338e:	4b08      	ldr	r3, [pc, #32]	; (80033b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003390:	695a      	ldr	r2, [r3, #20]
 8003392:	88fb      	ldrh	r3, [r7, #6]
 8003394:	4013      	ands	r3, r2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d006      	beq.n	80033a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800339a:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800339c:	88fb      	ldrh	r3, [r7, #6]
 800339e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033a0:	88fb      	ldrh	r3, [r7, #6]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f007 fea6 	bl	800b0f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80033a8:	bf00      	nop
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	40013c00 	.word	0x40013c00

080033b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b082      	sub	sp, #8
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e07f      	b.n	80034c6 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d106      	bne.n	80033e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7fd ffbe 	bl	800135c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2224      	movs	r2, #36	; 0x24
 80033e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f022 0201 	bic.w	r2, r2, #1
 80033f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	685a      	ldr	r2, [r3, #4]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003404:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	689a      	ldr	r2, [r3, #8]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003414:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	68db      	ldr	r3, [r3, #12]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d107      	bne.n	800342e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689a      	ldr	r2, [r3, #8]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800342a:	609a      	str	r2, [r3, #8]
 800342c:	e006      	b.n	800343c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800343a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	2b02      	cmp	r3, #2
 8003442:	d104      	bne.n	800344e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800344c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6859      	ldr	r1, [r3, #4]
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	4b1d      	ldr	r3, [pc, #116]	; (80034d0 <HAL_I2C_Init+0x11c>)
 800345a:	430b      	orrs	r3, r1
 800345c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	68da      	ldr	r2, [r3, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800346c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691a      	ldr	r2, [r3, #16]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	699b      	ldr	r3, [r3, #24]
 800347e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	69d9      	ldr	r1, [r3, #28]
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1a      	ldr	r2, [r3, #32]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	430a      	orrs	r2, r1
 8003496:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0201 	orr.w	r2, r2, #1
 80034a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2220      	movs	r2, #32
 80034b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2200      	movs	r2, #0
 80034c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}
 80034ce:	bf00      	nop
 80034d0:	02008000 	.word	0x02008000

080034d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b083      	sub	sp, #12
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	2b20      	cmp	r3, #32
 80034e8:	d138      	bne.n	800355c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d101      	bne.n	80034f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80034f4:	2302      	movs	r3, #2
 80034f6:	e032      	b.n	800355e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2201      	movs	r2, #1
 80034fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2224      	movs	r2, #36	; 0x24
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	681a      	ldr	r2, [r3, #0]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f022 0201 	bic.w	r2, r2, #1
 8003516:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003526:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6819      	ldr	r1, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	683a      	ldr	r2, [r7, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f042 0201 	orr.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2220      	movs	r2, #32
 800354c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003558:	2300      	movs	r3, #0
 800355a:	e000      	b.n	800355e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800355c:	2302      	movs	r3, #2
  }
}
 800355e:	4618      	mov	r0, r3
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800356a:	b480      	push	{r7}
 800356c:	b085      	sub	sp, #20
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
 8003572:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b20      	cmp	r3, #32
 800357e:	d139      	bne.n	80035f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800358a:	2302      	movs	r3, #2
 800358c:	e033      	b.n	80035f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2224      	movs	r2, #36	; 0x24
 800359a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	681a      	ldr	r2, [r3, #0]
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f022 0201 	bic.w	r2, r2, #1
 80035ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80035bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	021b      	lsls	r3, r3, #8
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f042 0201 	orr.w	r2, r2, #1
 80035de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2220      	movs	r2, #32
 80035e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035f0:	2300      	movs	r3, #0
 80035f2:	e000      	b.n	80035f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80035f4:	2302      	movs	r3, #2
  }
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3714      	adds	r7, #20
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr

08003602 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003602:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003604:	b08f      	sub	sp, #60	; 0x3c
 8003606:	af0a      	add	r7, sp, #40	; 0x28
 8003608:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2b00      	cmp	r3, #0
 800360e:	d101      	bne.n	8003614 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e116      	b.n	8003842 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d106      	bne.n	8003634 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2200      	movs	r2, #0
 800362a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f00d ff9a 	bl	8011568 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2203      	movs	r2, #3
 8003638:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003640:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003644:	2b00      	cmp	r3, #0
 8003646:	d102      	bne.n	800364e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f006 f995 	bl	8009982 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	603b      	str	r3, [r7, #0]
 800365e:	687e      	ldr	r6, [r7, #4]
 8003660:	466d      	mov	r5, sp
 8003662:	f106 0410 	add.w	r4, r6, #16
 8003666:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003668:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800366a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800366c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800366e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003672:	e885 0003 	stmia.w	r5, {r0, r1}
 8003676:	1d33      	adds	r3, r6, #4
 8003678:	cb0e      	ldmia	r3, {r1, r2, r3}
 800367a:	6838      	ldr	r0, [r7, #0]
 800367c:	f006 f876 	bl	800976c <USB_CoreInit>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d005      	beq.n	8003692 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2202      	movs	r2, #2
 800368a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e0d7      	b.n	8003842 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2100      	movs	r1, #0
 8003698:	4618      	mov	r0, r3
 800369a:	f006 f983 	bl	80099a4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800369e:	2300      	movs	r3, #0
 80036a0:	73fb      	strb	r3, [r7, #15]
 80036a2:	e04a      	b.n	800373a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80036a4:	7bfa      	ldrb	r2, [r7, #15]
 80036a6:	6879      	ldr	r1, [r7, #4]
 80036a8:	4613      	mov	r3, r2
 80036aa:	00db      	lsls	r3, r3, #3
 80036ac:	4413      	add	r3, r2
 80036ae:	009b      	lsls	r3, r3, #2
 80036b0:	440b      	add	r3, r1
 80036b2:	333d      	adds	r3, #61	; 0x3d
 80036b4:	2201      	movs	r2, #1
 80036b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80036b8:	7bfa      	ldrb	r2, [r7, #15]
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	4613      	mov	r3, r2
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	440b      	add	r3, r1
 80036c6:	333c      	adds	r3, #60	; 0x3c
 80036c8:	7bfa      	ldrb	r2, [r7, #15]
 80036ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80036cc:	7bfa      	ldrb	r2, [r7, #15]
 80036ce:	7bfb      	ldrb	r3, [r7, #15]
 80036d0:	b298      	uxth	r0, r3
 80036d2:	6879      	ldr	r1, [r7, #4]
 80036d4:	4613      	mov	r3, r2
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	4413      	add	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	440b      	add	r3, r1
 80036de:	3344      	adds	r3, #68	; 0x44
 80036e0:	4602      	mov	r2, r0
 80036e2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80036e4:	7bfa      	ldrb	r2, [r7, #15]
 80036e6:	6879      	ldr	r1, [r7, #4]
 80036e8:	4613      	mov	r3, r2
 80036ea:	00db      	lsls	r3, r3, #3
 80036ec:	4413      	add	r3, r2
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	440b      	add	r3, r1
 80036f2:	3340      	adds	r3, #64	; 0x40
 80036f4:	2200      	movs	r2, #0
 80036f6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80036f8:	7bfa      	ldrb	r2, [r7, #15]
 80036fa:	6879      	ldr	r1, [r7, #4]
 80036fc:	4613      	mov	r3, r2
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4413      	add	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	440b      	add	r3, r1
 8003706:	3348      	adds	r3, #72	; 0x48
 8003708:	2200      	movs	r2, #0
 800370a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800370c:	7bfa      	ldrb	r2, [r7, #15]
 800370e:	6879      	ldr	r1, [r7, #4]
 8003710:	4613      	mov	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	440b      	add	r3, r1
 800371a:	334c      	adds	r3, #76	; 0x4c
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003720:	7bfa      	ldrb	r2, [r7, #15]
 8003722:	6879      	ldr	r1, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	440b      	add	r3, r1
 800372e:	3354      	adds	r3, #84	; 0x54
 8003730:	2200      	movs	r2, #0
 8003732:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	3301      	adds	r3, #1
 8003738:	73fb      	strb	r3, [r7, #15]
 800373a:	7bfa      	ldrb	r2, [r7, #15]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	429a      	cmp	r2, r3
 8003742:	d3af      	bcc.n	80036a4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003744:	2300      	movs	r3, #0
 8003746:	73fb      	strb	r3, [r7, #15]
 8003748:	e044      	b.n	80037d4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800374a:	7bfa      	ldrb	r2, [r7, #15]
 800374c:	6879      	ldr	r1, [r7, #4]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800375c:	2200      	movs	r2, #0
 800375e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003760:	7bfa      	ldrb	r2, [r7, #15]
 8003762:	6879      	ldr	r1, [r7, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	00db      	lsls	r3, r3, #3
 8003768:	4413      	add	r3, r2
 800376a:	009b      	lsls	r3, r3, #2
 800376c:	440b      	add	r3, r1
 800376e:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003772:	7bfa      	ldrb	r2, [r7, #15]
 8003774:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003776:	7bfa      	ldrb	r2, [r7, #15]
 8003778:	6879      	ldr	r1, [r7, #4]
 800377a:	4613      	mov	r3, r2
 800377c:	00db      	lsls	r3, r3, #3
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	440b      	add	r3, r1
 8003784:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003788:	2200      	movs	r2, #0
 800378a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800378c:	7bfa      	ldrb	r2, [r7, #15]
 800378e:	6879      	ldr	r1, [r7, #4]
 8003790:	4613      	mov	r3, r2
 8003792:	00db      	lsls	r3, r3, #3
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800379e:	2200      	movs	r2, #0
 80037a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80037a2:	7bfa      	ldrb	r2, [r7, #15]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	00db      	lsls	r3, r3, #3
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80037b8:	7bfa      	ldrb	r2, [r7, #15]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	00db      	lsls	r3, r3, #3
 80037c0:	4413      	add	r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80037ce:	7bfb      	ldrb	r3, [r7, #15]
 80037d0:	3301      	adds	r3, #1
 80037d2:	73fb      	strb	r3, [r7, #15]
 80037d4:	7bfa      	ldrb	r2, [r7, #15]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d3b5      	bcc.n	800374a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	603b      	str	r3, [r7, #0]
 80037e4:	687e      	ldr	r6, [r7, #4]
 80037e6:	466d      	mov	r5, sp
 80037e8:	f106 0410 	add.w	r4, r6, #16
 80037ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80037f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80037f4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80037f8:	e885 0003 	stmia.w	r5, {r0, r1}
 80037fc:	1d33      	adds	r3, r6, #4
 80037fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003800:	6838      	ldr	r0, [r7, #0]
 8003802:	f006 f91b 	bl	8009a3c <USB_DevInit>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d005      	beq.n	8003818 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e014      	b.n	8003842 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800382c:	2b01      	cmp	r3, #1
 800382e:	d102      	bne.n	8003836 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f001 f97b 	bl	8004b2c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f007 fa69 	bl	800ad12 <USB_DevDisconnect>

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3714      	adds	r7, #20
 8003846:	46bd      	mov	sp, r7
 8003848:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800384a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b082      	sub	sp, #8
 800384e:	af00      	add	r7, sp, #0
 8003850:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_PCD_Start+0x16>
 800385c:	2302      	movs	r3, #2
 800385e:	e012      	b.n	8003886 <HAL_PCD_Start+0x3c>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4618      	mov	r0, r3
 800386e:	f006 f877 	bl	8009960 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f007 fa2a 	bl	800acd0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800388e:	b590      	push	{r4, r7, lr}
 8003890:	b08d      	sub	sp, #52	; 0x34
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f007 fae8 	bl	800ae7a <USB_GetMode>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	f040 84b7 	bne.w	8004220 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4618      	mov	r0, r3
 80038b8:	f007 fa4c 	bl	800ad54 <USB_ReadInterrupts>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 84ad 	beq.w	800421e <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	0a1b      	lsrs	r3, r3, #8
 80038ce:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4618      	mov	r0, r3
 80038de:	f007 fa39 	bl	800ad54 <USB_ReadInterrupts>
 80038e2:	4603      	mov	r3, r0
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d107      	bne.n	80038fc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695a      	ldr	r2, [r3, #20]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f002 0202 	and.w	r2, r2, #2
 80038fa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4618      	mov	r0, r3
 8003902:	f007 fa27 	bl	800ad54 <USB_ReadInterrupts>
 8003906:	4603      	mov	r3, r0
 8003908:	f003 0310 	and.w	r3, r3, #16
 800390c:	2b10      	cmp	r3, #16
 800390e:	d161      	bne.n	80039d4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	699a      	ldr	r2, [r3, #24]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f022 0210 	bic.w	r2, r2, #16
 800391e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	f003 020f 	and.w	r2, r3, #15
 800392c:	4613      	mov	r3, r2
 800392e:	00db      	lsls	r3, r3, #3
 8003930:	4413      	add	r3, r2
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	4413      	add	r3, r2
 800393c:	3304      	adds	r3, #4
 800393e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	0c5b      	lsrs	r3, r3, #17
 8003944:	f003 030f 	and.w	r3, r3, #15
 8003948:	2b02      	cmp	r3, #2
 800394a:	d124      	bne.n	8003996 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003952:	4013      	ands	r3, r2
 8003954:	2b00      	cmp	r3, #0
 8003956:	d035      	beq.n	80039c4 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003958:	697b      	ldr	r3, [r7, #20]
 800395a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	091b      	lsrs	r3, r3, #4
 8003960:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003962:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003966:	b29b      	uxth	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	6a38      	ldr	r0, [r7, #32]
 800396c:	f007 f85e 	bl	800aa2c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	69bb      	ldr	r3, [r7, #24]
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800397c:	441a      	add	r2, r3
 800397e:	697b      	ldr	r3, [r7, #20]
 8003980:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	6a1a      	ldr	r2, [r3, #32]
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800398e:	441a      	add	r2, r3
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	621a      	str	r2, [r3, #32]
 8003994:	e016      	b.n	80039c4 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	0c5b      	lsrs	r3, r3, #17
 800399a:	f003 030f 	and.w	r3, r3, #15
 800399e:	2b06      	cmp	r3, #6
 80039a0:	d110      	bne.n	80039c4 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039a8:	2208      	movs	r2, #8
 80039aa:	4619      	mov	r1, r3
 80039ac:	6a38      	ldr	r0, [r7, #32]
 80039ae:	f007 f83d 	bl	800aa2c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	6a1a      	ldr	r2, [r3, #32]
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	091b      	lsrs	r3, r3, #4
 80039ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80039be:	441a      	add	r2, r3
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f042 0210 	orr.w	r2, r2, #16
 80039d2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4618      	mov	r0, r3
 80039da:	f007 f9bb 	bl	800ad54 <USB_ReadInterrupts>
 80039de:	4603      	mov	r3, r0
 80039e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039e4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80039e8:	f040 80a7 	bne.w	8003b3a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80039ec:	2300      	movs	r3, #0
 80039ee:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f007 f9c0 	bl	800ad7a <USB_ReadDevAllOutEpInterrupt>
 80039fa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80039fc:	e099      	b.n	8003b32 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80039fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	f000 808e 	beq.w	8003b26 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f007 f9e4 	bl	800ade2 <USB_ReadDevOutEPInterrupt>
 8003a1a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d00c      	beq.n	8003a40 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a32:	461a      	mov	r2, r3
 8003a34:	2301      	movs	r3, #1
 8003a36:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003a38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	f000 fef0 	bl	8004820 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003a40:	693b      	ldr	r3, [r7, #16]
 8003a42:	f003 0308 	and.w	r3, r3, #8
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00c      	beq.n	8003a64 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	69fb      	ldr	r3, [r7, #28]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a56:	461a      	mov	r2, r3
 8003a58:	2308      	movs	r3, #8
 8003a5a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f000 ffc6 	bl	80049f0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d008      	beq.n	8003a80 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	69fb      	ldr	r3, [r7, #28]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2310      	movs	r3, #16
 8003a7e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d030      	beq.n	8003aec <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003a8a:	6a3b      	ldr	r3, [r7, #32]
 8003a8c:	695b      	ldr	r3, [r3, #20]
 8003a8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a92:	2b80      	cmp	r3, #128	; 0x80
 8003a94:	d109      	bne.n	8003aaa <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8003a96:	69fb      	ldr	r3, [r7, #28]
 8003a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	69fa      	ldr	r2, [r7, #28]
 8003aa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aa4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003aa8:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8003aaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003aac:	4613      	mov	r3, r2
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	4413      	add	r3, r2
 8003abc:	3304      	adds	r3, #4
 8003abe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	78db      	ldrb	r3, [r3, #3]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d108      	bne.n	8003ada <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2200      	movs	r2, #0
 8003acc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	6878      	ldr	r0, [r7, #4]
 8003ad6:	f00d fe6b 	bl	80117b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	2302      	movs	r3, #2
 8003aea:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f003 0320 	and.w	r3, r3, #32
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d008      	beq.n	8003b08 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b02:	461a      	mov	r2, r3
 8003b04:	2320      	movs	r3, #32
 8003b06:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003b08:	693b      	ldr	r3, [r7, #16]
 8003b0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d009      	beq.n	8003b26 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b1e:	461a      	mov	r2, r3
 8003b20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b24:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	3301      	adds	r3, #1
 8003b2a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	f47f af62 	bne.w	80039fe <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f007 f908 	bl	800ad54 <USB_ReadInterrupts>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b4a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003b4e:	f040 80db 	bne.w	8003d08 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f007 f929 	bl	800adae <USB_ReadDevAllInEpInterrupt>
 8003b5c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003b62:	e0cd      	b.n	8003d00 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b66:	f003 0301 	and.w	r3, r3, #1
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	f000 80c2 	beq.w	8003cf4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b76:	b2d2      	uxtb	r2, r2
 8003b78:	4611      	mov	r1, r2
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f007 f94f 	bl	800ae1e <USB_ReadDevInEPInterrupt>
 8003b80:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	f003 0301 	and.w	r3, r3, #1
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d057      	beq.n	8003c3c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b8e:	f003 030f 	and.w	r3, r3, #15
 8003b92:	2201      	movs	r2, #1
 8003b94:	fa02 f303 	lsl.w	r3, r2, r3
 8003b98:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	69f9      	ldr	r1, [r7, #28]
 8003ba8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003bac:	4013      	ands	r3, r2
 8003bae:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d132      	bne.n	8003c30 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bce:	4613      	mov	r3, r2
 8003bd0:	00db      	lsls	r3, r3, #3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	440b      	add	r3, r1
 8003bd8:	334c      	adds	r3, #76	; 0x4c
 8003bda:	6819      	ldr	r1, [r3, #0]
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003be0:	4613      	mov	r3, r2
 8003be2:	00db      	lsls	r3, r3, #3
 8003be4:	4413      	add	r3, r2
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4403      	add	r3, r0
 8003bea:	3348      	adds	r3, #72	; 0x48
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4419      	add	r1, r3
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4413      	add	r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	4403      	add	r3, r0
 8003bfe:	334c      	adds	r3, #76	; 0x4c
 8003c00:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d113      	bne.n	8003c30 <HAL_PCD_IRQHandler+0x3a2>
 8003c08:	6879      	ldr	r1, [r7, #4]
 8003c0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	4413      	add	r3, r2
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	440b      	add	r3, r1
 8003c16:	3354      	adds	r3, #84	; 0x54
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d108      	bne.n	8003c30 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6818      	ldr	r0, [r3, #0]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2101      	movs	r1, #1
 8003c2c:	f007 f958 	bl	800aee0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	4619      	mov	r1, r3
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f00d fd35 	bl	80116a6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f003 0308 	and.w	r3, r3, #8
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d008      	beq.n	8003c58 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	69fb      	ldr	r3, [r7, #28]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c52:	461a      	mov	r2, r3
 8003c54:	2308      	movs	r3, #8
 8003c56:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f003 0310 	and.w	r3, r3, #16
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d008      	beq.n	8003c74 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c6e:	461a      	mov	r2, r3
 8003c70:	2310      	movs	r3, #16
 8003c72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003c74:	693b      	ldr	r3, [r7, #16]
 8003c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d008      	beq.n	8003c90 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	2340      	movs	r3, #64	; 0x40
 8003c8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f003 0302 	and.w	r3, r3, #2
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d023      	beq.n	8003ce2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003c9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003c9c:	6a38      	ldr	r0, [r7, #32]
 8003c9e:	f006 f82b 	bl	8009cf8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ca4:	4613      	mov	r3, r2
 8003ca6:	00db      	lsls	r3, r3, #3
 8003ca8:	4413      	add	r3, r2
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	3338      	adds	r3, #56	; 0x38
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3304      	adds	r3, #4
 8003cb4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	78db      	ldrb	r3, [r3, #3]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d108      	bne.n	8003cd0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc6:	b2db      	uxtb	r3, r3
 8003cc8:	4619      	mov	r1, r3
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f00d fd82 	bl	80117d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	015a      	lsls	r2, r3, #5
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	4413      	add	r3, r2
 8003cd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cdc:	461a      	mov	r2, r3
 8003cde:	2302      	movs	r3, #2
 8003ce0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003ce2:	693b      	ldr	r3, [r7, #16]
 8003ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003cec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fd08 	bl	8004704 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfc:	085b      	lsrs	r3, r3, #1
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003d00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	f47f af2e 	bne.w	8003b64 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f007 f821 	bl	800ad54 <USB_ReadInterrupts>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d1c:	d122      	bne.n	8003d64 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	69fa      	ldr	r2, [r7, #28]
 8003d28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d2c:	f023 0301 	bic.w	r3, r3, #1
 8003d30:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003d38:	2b01      	cmp	r3, #1
 8003d3a:	d108      	bne.n	8003d4e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003d44:	2100      	movs	r1, #0
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f00d fefc 	bl	8011b44 <HAL_PCDEx_LPM_Callback>
 8003d4c:	e002      	b.n	8003d54 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f00d fd20 	bl	8011794 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	695a      	ldr	r2, [r3, #20]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003d62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f006 fff3 	bl	800ad54 <USB_ReadInterrupts>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d78:	d112      	bne.n	8003da0 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 0301 	and.w	r3, r3, #1
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	d102      	bne.n	8003d90 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f00d fcdc 	bl	8011748 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f006 ffd5 	bl	800ad54 <USB_ReadInterrupts>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003db0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003db4:	d121      	bne.n	8003dfa <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	695a      	ldr	r2, [r3, #20]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8003dc4:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d111      	bne.n	8003df4 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dde:	089b      	lsrs	r3, r3, #2
 8003de0:	f003 020f 	and.w	r2, r3, #15
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8003dea:	2101      	movs	r1, #1
 8003dec:	6878      	ldr	r0, [r7, #4]
 8003dee:	f00d fea9 	bl	8011b44 <HAL_PCDEx_LPM_Callback>
 8003df2:	e002      	b.n	8003dfa <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f00d fca7 	bl	8011748 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4618      	mov	r0, r3
 8003e00:	f006 ffa8 	bl	800ad54 <USB_ReadInterrupts>
 8003e04:	4603      	mov	r3, r0
 8003e06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e0e:	f040 80b7 	bne.w	8003f80 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	69fa      	ldr	r2, [r7, #28]
 8003e1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e20:	f023 0301 	bic.w	r3, r3, #1
 8003e24:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2110      	movs	r1, #16
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f005 ff63 	bl	8009cf8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e32:	2300      	movs	r3, #0
 8003e34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e36:	e046      	b.n	8003ec6 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e44:	461a      	mov	r2, r3
 8003e46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e4a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	69fb      	ldr	r3, [r7, #28]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e5c:	0151      	lsls	r1, r2, #5
 8003e5e:	69fa      	ldr	r2, [r7, #28]
 8003e60:	440a      	add	r2, r1
 8003e62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e6a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6e:	015a      	lsls	r2, r3, #5
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	4413      	add	r3, r2
 8003e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e78:	461a      	mov	r2, r3
 8003e7a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e7e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	015a      	lsls	r2, r3, #5
 8003e84:	69fb      	ldr	r3, [r7, #28]
 8003e86:	4413      	add	r3, r2
 8003e88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003e90:	0151      	lsls	r1, r2, #5
 8003e92:	69fa      	ldr	r2, [r7, #28]
 8003e94:	440a      	add	r2, r1
 8003e96:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003e9e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	69fb      	ldr	r3, [r7, #28]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003eb0:	0151      	lsls	r1, r2, #5
 8003eb2:	69fa      	ldr	r2, [r7, #28]
 8003eb4:	440a      	add	r2, r1
 8003eb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003ebe:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d3b3      	bcc.n	8003e38 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003ed0:	69fb      	ldr	r3, [r7, #28]
 8003ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ed6:	69db      	ldr	r3, [r3, #28]
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ede:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003ee2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d016      	beq.n	8003f1a <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ef6:	69fa      	ldr	r2, [r7, #28]
 8003ef8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003efc:	f043 030b 	orr.w	r3, r3, #11
 8003f00:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003f04:	69fb      	ldr	r3, [r7, #28]
 8003f06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0c:	69fa      	ldr	r2, [r7, #28]
 8003f0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f12:	f043 030b 	orr.w	r3, r3, #11
 8003f16:	6453      	str	r3, [r2, #68]	; 0x44
 8003f18:	e015      	b.n	8003f46 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f20:	695a      	ldr	r2, [r3, #20]
 8003f22:	69fb      	ldr	r3, [r7, #28]
 8003f24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f242 032b 	movw	r3, #8235	; 0x202b
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	69fa      	ldr	r2, [r7, #28]
 8003f3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f40:	f043 030b 	orr.w	r3, r3, #11
 8003f44:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69fa      	ldr	r2, [r7, #28]
 8003f50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f54:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003f58:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	691b      	ldr	r3, [r3, #16]
 8003f62:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	f006 ffb8 	bl	800aee0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	695a      	ldr	r2, [r3, #20]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4618      	mov	r0, r3
 8003f86:	f006 fee5 	bl	800ad54 <USB_ReadInterrupts>
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f94:	d124      	bne.n	8003fe0 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f006 ff7c 	bl	800ae98 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f005 ff24 	bl	8009df2 <USB_GetDevSpeed>
 8003faa:	4603      	mov	r3, r0
 8003fac:	461a      	mov	r2, r3
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681c      	ldr	r4, [r3, #0]
 8003fb6:	f001 facd 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 8003fba:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	4620      	mov	r0, r4
 8003fc6:	f005 fc29 	bl	800981c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f00d fb93 	bl	80116f6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	695a      	ldr	r2, [r3, #20]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003fde:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f006 feb5 	bl	800ad54 <USB_ReadInterrupts>
 8003fea:	4603      	mov	r3, r0
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d10a      	bne.n	800400a <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003ff4:	6878      	ldr	r0, [r7, #4]
 8003ff6:	f00d fb70 	bl	80116da <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	695a      	ldr	r2, [r3, #20]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f002 0208 	and.w	r2, r2, #8
 8004008:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4618      	mov	r0, r3
 8004010:	f006 fea0 	bl	800ad54 <USB_ReadInterrupts>
 8004014:	4603      	mov	r3, r0
 8004016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800401a:	2b80      	cmp	r3, #128	; 0x80
 800401c:	d122      	bne.n	8004064 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	699b      	ldr	r3, [r3, #24]
 8004022:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004026:	6a3b      	ldr	r3, [r7, #32]
 8004028:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800402a:	2301      	movs	r3, #1
 800402c:	627b      	str	r3, [r7, #36]	; 0x24
 800402e:	e014      	b.n	800405a <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004034:	4613      	mov	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004042:	781b      	ldrb	r3, [r3, #0]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d105      	bne.n	8004054 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800404a:	b2db      	uxtb	r3, r3
 800404c:	4619      	mov	r1, r3
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 fb27 	bl	80046a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004056:	3301      	adds	r3, #1
 8004058:	627b      	str	r3, [r7, #36]	; 0x24
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685b      	ldr	r3, [r3, #4]
 800405e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004060:	429a      	cmp	r2, r3
 8004062:	d3e5      	bcc.n	8004030 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f006 fe73 	bl	800ad54 <USB_ReadInterrupts>
 800406e:	4603      	mov	r3, r0
 8004070:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004074:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004078:	d13b      	bne.n	80040f2 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800407a:	2301      	movs	r3, #1
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
 800407e:	e02b      	b.n	80040d8 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004090:	6879      	ldr	r1, [r7, #4]
 8004092:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004094:	4613      	mov	r3, r2
 8004096:	00db      	lsls	r3, r3, #3
 8004098:	4413      	add	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	440b      	add	r3, r1
 800409e:	3340      	adds	r3, #64	; 0x40
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d115      	bne.n	80040d2 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80040a6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	da12      	bge.n	80040d2 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80040ac:	6879      	ldr	r1, [r7, #4]
 80040ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040b0:	4613      	mov	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	333f      	adds	r3, #63	; 0x3f
 80040bc:	2201      	movs	r2, #1
 80040be:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80040c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	4619      	mov	r1, r3
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fae8 	bl	80046a2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80040d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d4:	3301      	adds	r3, #1
 80040d6:	627b      	str	r3, [r7, #36]	; 0x24
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040de:	429a      	cmp	r2, r3
 80040e0:	d3ce      	bcc.n	8004080 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695a      	ldr	r2, [r3, #20]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80040f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f006 fe2c 	bl	800ad54 <USB_ReadInterrupts>
 80040fc:	4603      	mov	r3, r0
 80040fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004102:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004106:	d155      	bne.n	80041b4 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004108:	2301      	movs	r3, #1
 800410a:	627b      	str	r3, [r7, #36]	; 0x24
 800410c:	e045      	b.n	800419a <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	015a      	lsls	r2, r3, #5
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	4413      	add	r3, r2
 8004116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004122:	4613      	mov	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	440b      	add	r3, r1
 800412c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004130:	781b      	ldrb	r3, [r3, #0]
 8004132:	2b01      	cmp	r3, #1
 8004134:	d12e      	bne.n	8004194 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004136:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004138:	2b00      	cmp	r3, #0
 800413a:	da2b      	bge.n	8004194 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004148:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800414c:	429a      	cmp	r2, r3
 800414e:	d121      	bne.n	8004194 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004154:	4613      	mov	r3, r2
 8004156:	00db      	lsls	r3, r3, #3
 8004158:	4413      	add	r3, r2
 800415a:	009b      	lsls	r3, r3, #2
 800415c:	440b      	add	r3, r1
 800415e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004162:	2201      	movs	r2, #1
 8004164:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004166:	6a3b      	ldr	r3, [r7, #32]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10a      	bne.n	8004194 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	69fa      	ldr	r2, [r7, #28]
 8004188:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800418c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004190:	6053      	str	r3, [r2, #4]
            break;
 8004192:	e007      	b.n	80041a4 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004196:	3301      	adds	r3, #1
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	685b      	ldr	r3, [r3, #4]
 800419e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d3b4      	bcc.n	800410e <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695a      	ldr	r2, [r3, #20]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80041b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f006 fdcb 	bl	800ad54 <USB_ReadInterrupts>
 80041be:	4603      	mov	r3, r0
 80041c0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041c8:	d10a      	bne.n	80041e0 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f00d fb14 	bl	80117f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	695a      	ldr	r2, [r3, #20]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80041de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f006 fdb5 	bl	800ad54 <USB_ReadInterrupts>
 80041ea:	4603      	mov	r3, r0
 80041ec:	f003 0304 	and.w	r3, r3, #4
 80041f0:	2b04      	cmp	r3, #4
 80041f2:	d115      	bne.n	8004220 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	2b00      	cmp	r3, #0
 8004204:	d002      	beq.n	800420c <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f00d fb04 	bl	8011814 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6859      	ldr	r1, [r3, #4]
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	430a      	orrs	r2, r1
 800421a:	605a      	str	r2, [r3, #4]
 800421c:	e000      	b.n	8004220 <HAL_PCD_IRQHandler+0x992>
      return;
 800421e:	bf00      	nop
    }
  }
}
 8004220:	3734      	adds	r7, #52	; 0x34
 8004222:	46bd      	mov	sp, r7
 8004224:	bd90      	pop	{r4, r7, pc}

08004226 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004226:	b580      	push	{r7, lr}
 8004228:	b082      	sub	sp, #8
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]
 800422e:	460b      	mov	r3, r1
 8004230:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004238:	2b01      	cmp	r3, #1
 800423a:	d101      	bne.n	8004240 <HAL_PCD_SetAddress+0x1a>
 800423c:	2302      	movs	r3, #2
 800423e:	e013      	b.n	8004268 <HAL_PCD_SetAddress+0x42>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2201      	movs	r2, #1
 8004244:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	78fa      	ldrb	r2, [r7, #3]
 800424c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	78fa      	ldrb	r2, [r7, #3]
 8004256:	4611      	mov	r1, r2
 8004258:	4618      	mov	r0, r3
 800425a:	f006 fd13 	bl	800ac84 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	4608      	mov	r0, r1
 800427a:	4611      	mov	r1, r2
 800427c:	461a      	mov	r2, r3
 800427e:	4603      	mov	r3, r0
 8004280:	70fb      	strb	r3, [r7, #3]
 8004282:	460b      	mov	r3, r1
 8004284:	803b      	strh	r3, [r7, #0]
 8004286:	4613      	mov	r3, r2
 8004288:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800428e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004292:	2b00      	cmp	r3, #0
 8004294:	da0f      	bge.n	80042b6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004296:	78fb      	ldrb	r3, [r7, #3]
 8004298:	f003 020f 	and.w	r2, r3, #15
 800429c:	4613      	mov	r3, r2
 800429e:	00db      	lsls	r3, r3, #3
 80042a0:	4413      	add	r3, r2
 80042a2:	009b      	lsls	r3, r3, #2
 80042a4:	3338      	adds	r3, #56	; 0x38
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	4413      	add	r3, r2
 80042aa:	3304      	adds	r3, #4
 80042ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2201      	movs	r2, #1
 80042b2:	705a      	strb	r2, [r3, #1]
 80042b4:	e00f      	b.n	80042d6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80042b6:	78fb      	ldrb	r3, [r7, #3]
 80042b8:	f003 020f 	and.w	r2, r3, #15
 80042bc:	4613      	mov	r3, r2
 80042be:	00db      	lsls	r3, r3, #3
 80042c0:	4413      	add	r3, r2
 80042c2:	009b      	lsls	r3, r3, #2
 80042c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	4413      	add	r3, r2
 80042cc:	3304      	adds	r3, #4
 80042ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80042d6:	78fb      	ldrb	r3, [r7, #3]
 80042d8:	f003 030f 	and.w	r3, r3, #15
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80042e2:	883a      	ldrh	r2, [r7, #0]
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	78ba      	ldrb	r2, [r7, #2]
 80042ec:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	785b      	ldrb	r3, [r3, #1]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d004      	beq.n	8004300 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	b29a      	uxth	r2, r3
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004300:	78bb      	ldrb	r3, [r7, #2]
 8004302:	2b02      	cmp	r3, #2
 8004304:	d102      	bne.n	800430c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2200      	movs	r2, #0
 800430a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004312:	2b01      	cmp	r3, #1
 8004314:	d101      	bne.n	800431a <HAL_PCD_EP_Open+0xaa>
 8004316:	2302      	movs	r3, #2
 8004318:	e00e      	b.n	8004338 <HAL_PCD_EP_Open+0xc8>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68f9      	ldr	r1, [r7, #12]
 8004328:	4618      	mov	r0, r3
 800432a:	f005 fd87 	bl	8009e3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004336:	7afb      	ldrb	r3, [r7, #11]
}
 8004338:	4618      	mov	r0, r3
 800433a:	3710      	adds	r7, #16
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b084      	sub	sp, #16
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	460b      	mov	r3, r1
 800434a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800434c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004350:	2b00      	cmp	r3, #0
 8004352:	da0f      	bge.n	8004374 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004354:	78fb      	ldrb	r3, [r7, #3]
 8004356:	f003 020f 	and.w	r2, r3, #15
 800435a:	4613      	mov	r3, r2
 800435c:	00db      	lsls	r3, r3, #3
 800435e:	4413      	add	r3, r2
 8004360:	009b      	lsls	r3, r3, #2
 8004362:	3338      	adds	r3, #56	; 0x38
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	4413      	add	r3, r2
 8004368:	3304      	adds	r3, #4
 800436a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2201      	movs	r2, #1
 8004370:	705a      	strb	r2, [r3, #1]
 8004372:	e00f      	b.n	8004394 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	f003 020f 	and.w	r2, r3, #15
 800437a:	4613      	mov	r3, r2
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	4413      	add	r3, r2
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	4413      	add	r3, r2
 800438a:	3304      	adds	r3, #4
 800438c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2200      	movs	r2, #0
 8004392:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004394:	78fb      	ldrb	r3, [r7, #3]
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	b2da      	uxtb	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d101      	bne.n	80043ae <HAL_PCD_EP_Close+0x6e>
 80043aa:	2302      	movs	r3, #2
 80043ac:	e00e      	b.n	80043cc <HAL_PCD_EP_Close+0x8c>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68f9      	ldr	r1, [r7, #12]
 80043bc:	4618      	mov	r0, r3
 80043be:	f005 fdc5 	bl	8009f4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3710      	adds	r7, #16
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b086      	sub	sp, #24
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	607a      	str	r2, [r7, #4]
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	460b      	mov	r3, r1
 80043e2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043e4:	7afb      	ldrb	r3, [r7, #11]
 80043e6:	f003 020f 	and.w	r2, r3, #15
 80043ea:	4613      	mov	r3, r2
 80043ec:	00db      	lsls	r3, r3, #3
 80043ee:	4413      	add	r3, r2
 80043f0:	009b      	lsls	r3, r3, #2
 80043f2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4413      	add	r3, r2
 80043fa:	3304      	adds	r3, #4
 80043fc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	687a      	ldr	r2, [r7, #4]
 8004402:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	683a      	ldr	r2, [r7, #0]
 8004408:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2200      	movs	r2, #0
 800440e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	2200      	movs	r2, #0
 8004414:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004416:	7afb      	ldrb	r3, [r7, #11]
 8004418:	f003 030f 	and.w	r3, r3, #15
 800441c:	b2da      	uxtb	r2, r3
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d102      	bne.n	8004430 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004430:	7afb      	ldrb	r3, [r7, #11]
 8004432:	f003 030f 	and.w	r3, r3, #15
 8004436:	2b00      	cmp	r3, #0
 8004438:	d109      	bne.n	800444e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6818      	ldr	r0, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	691b      	ldr	r3, [r3, #16]
 8004442:	b2db      	uxtb	r3, r3
 8004444:	461a      	mov	r2, r3
 8004446:	6979      	ldr	r1, [r7, #20]
 8004448:	f006 f8ac 	bl	800a5a4 <USB_EP0StartXfer>
 800444c:	e008      	b.n	8004460 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	6818      	ldr	r0, [r3, #0]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	b2db      	uxtb	r3, r3
 8004458:	461a      	mov	r2, r3
 800445a:	6979      	ldr	r1, [r7, #20]
 800445c:	f005 fe52 	bl	800a104 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}

0800446a <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
 8004472:	460b      	mov	r3, r1
 8004474:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004476:	78fb      	ldrb	r3, [r7, #3]
 8004478:	f003 020f 	and.w	r2, r3, #15
 800447c:	6879      	ldr	r1, [r7, #4]
 800447e:	4613      	mov	r3, r2
 8004480:	00db      	lsls	r3, r3, #3
 8004482:	4413      	add	r3, r2
 8004484:	009b      	lsls	r3, r3, #2
 8004486:	440b      	add	r3, r1
 8004488:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800448c:	681b      	ldr	r3, [r3, #0]
}
 800448e:	4618      	mov	r0, r3
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b086      	sub	sp, #24
 800449e:	af00      	add	r7, sp, #0
 80044a0:	60f8      	str	r0, [r7, #12]
 80044a2:	607a      	str	r2, [r7, #4]
 80044a4:	603b      	str	r3, [r7, #0]
 80044a6:	460b      	mov	r3, r1
 80044a8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80044aa:	7afb      	ldrb	r3, [r7, #11]
 80044ac:	f003 020f 	and.w	r2, r3, #15
 80044b0:	4613      	mov	r3, r2
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	3338      	adds	r3, #56	; 0x38
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	4413      	add	r3, r2
 80044be:	3304      	adds	r3, #4
 80044c0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80044c2:	697b      	ldr	r3, [r7, #20]
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	683a      	ldr	r2, [r7, #0]
 80044cc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2200      	movs	r2, #0
 80044d2:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	2201      	movs	r2, #1
 80044d8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80044da:	7afb      	ldrb	r3, [r7, #11]
 80044dc:	f003 030f 	and.w	r3, r3, #15
 80044e0:	b2da      	uxtb	r2, r3
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d102      	bne.n	80044f4 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80044ee:	687a      	ldr	r2, [r7, #4]
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80044f4:	7afb      	ldrb	r3, [r7, #11]
 80044f6:	f003 030f 	and.w	r3, r3, #15
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d109      	bne.n	8004512 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6818      	ldr	r0, [r3, #0]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	b2db      	uxtb	r3, r3
 8004508:	461a      	mov	r2, r3
 800450a:	6979      	ldr	r1, [r7, #20]
 800450c:	f006 f84a 	bl	800a5a4 <USB_EP0StartXfer>
 8004510:	e008      	b.n	8004524 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6818      	ldr	r0, [r3, #0]
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	b2db      	uxtb	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	6979      	ldr	r1, [r7, #20]
 8004520:	f005 fdf0 	bl	800a104 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}

0800452e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800452e:	b580      	push	{r7, lr}
 8004530:	b084      	sub	sp, #16
 8004532:	af00      	add	r7, sp, #0
 8004534:	6078      	str	r0, [r7, #4]
 8004536:	460b      	mov	r3, r1
 8004538:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800453a:	78fb      	ldrb	r3, [r7, #3]
 800453c:	f003 020f 	and.w	r2, r3, #15
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	429a      	cmp	r2, r3
 8004546:	d901      	bls.n	800454c <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e050      	b.n	80045ee <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800454c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004550:	2b00      	cmp	r3, #0
 8004552:	da0f      	bge.n	8004574 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004554:	78fb      	ldrb	r3, [r7, #3]
 8004556:	f003 020f 	and.w	r2, r3, #15
 800455a:	4613      	mov	r3, r2
 800455c:	00db      	lsls	r3, r3, #3
 800455e:	4413      	add	r3, r2
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	3338      	adds	r3, #56	; 0x38
 8004564:	687a      	ldr	r2, [r7, #4]
 8004566:	4413      	add	r3, r2
 8004568:	3304      	adds	r3, #4
 800456a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2201      	movs	r2, #1
 8004570:	705a      	strb	r2, [r3, #1]
 8004572:	e00d      	b.n	8004590 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004574:	78fa      	ldrb	r2, [r7, #3]
 8004576:	4613      	mov	r3, r2
 8004578:	00db      	lsls	r3, r3, #3
 800457a:	4413      	add	r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	4413      	add	r3, r2
 8004586:	3304      	adds	r3, #4
 8004588:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2201      	movs	r2, #1
 8004594:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004596:	78fb      	ldrb	r3, [r7, #3]
 8004598:	f003 030f 	and.w	r3, r3, #15
 800459c:	b2da      	uxtb	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d101      	bne.n	80045b0 <HAL_PCD_EP_SetStall+0x82>
 80045ac:	2302      	movs	r3, #2
 80045ae:	e01e      	b.n	80045ee <HAL_PCD_EP_SetStall+0xc0>
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	68f9      	ldr	r1, [r7, #12]
 80045be:	4618      	mov	r0, r3
 80045c0:	f006 fa8c 	bl	800aadc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	f003 030f 	and.w	r3, r3, #15
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d10a      	bne.n	80045e4 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6818      	ldr	r0, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	b2d9      	uxtb	r1, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045de:	461a      	mov	r2, r3
 80045e0:	f006 fc7e 	bl	800aee0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80045ec:	2300      	movs	r3, #0
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3710      	adds	r7, #16
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}

080045f6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80045f6:	b580      	push	{r7, lr}
 80045f8:	b084      	sub	sp, #16
 80045fa:	af00      	add	r7, sp, #0
 80045fc:	6078      	str	r0, [r7, #4]
 80045fe:	460b      	mov	r3, r1
 8004600:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004602:	78fb      	ldrb	r3, [r7, #3]
 8004604:	f003 020f 	and.w	r2, r3, #15
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	429a      	cmp	r2, r3
 800460e:	d901      	bls.n	8004614 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e042      	b.n	800469a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004618:	2b00      	cmp	r3, #0
 800461a:	da0f      	bge.n	800463c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800461c:	78fb      	ldrb	r3, [r7, #3]
 800461e:	f003 020f 	and.w	r2, r3, #15
 8004622:	4613      	mov	r3, r2
 8004624:	00db      	lsls	r3, r3, #3
 8004626:	4413      	add	r3, r2
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	3338      	adds	r3, #56	; 0x38
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	4413      	add	r3, r2
 8004630:	3304      	adds	r3, #4
 8004632:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2201      	movs	r2, #1
 8004638:	705a      	strb	r2, [r3, #1]
 800463a:	e00f      	b.n	800465c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800463c:	78fb      	ldrb	r3, [r7, #3]
 800463e:	f003 020f 	and.w	r2, r3, #15
 8004642:	4613      	mov	r3, r2
 8004644:	00db      	lsls	r3, r3, #3
 8004646:	4413      	add	r3, r2
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	4413      	add	r3, r2
 8004652:	3304      	adds	r3, #4
 8004654:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	2200      	movs	r2, #0
 8004660:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004662:	78fb      	ldrb	r3, [r7, #3]
 8004664:	f003 030f 	and.w	r3, r3, #15
 8004668:	b2da      	uxtb	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_PCD_EP_ClrStall+0x86>
 8004678:	2302      	movs	r3, #2
 800467a:	e00e      	b.n	800469a <HAL_PCD_EP_ClrStall+0xa4>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68f9      	ldr	r1, [r7, #12]
 800468a:	4618      	mov	r0, r3
 800468c:	f006 fa94 	bl	800abb8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	3710      	adds	r7, #16
 800469e:	46bd      	mov	sp, r7
 80046a0:	bd80      	pop	{r7, pc}

080046a2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80046a2:	b580      	push	{r7, lr}
 80046a4:	b084      	sub	sp, #16
 80046a6:	af00      	add	r7, sp, #0
 80046a8:	6078      	str	r0, [r7, #4]
 80046aa:	460b      	mov	r3, r1
 80046ac:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80046ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	da0c      	bge.n	80046d0 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80046b6:	78fb      	ldrb	r3, [r7, #3]
 80046b8:	f003 020f 	and.w	r2, r3, #15
 80046bc:	4613      	mov	r3, r2
 80046be:	00db      	lsls	r3, r3, #3
 80046c0:	4413      	add	r3, r2
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	3338      	adds	r3, #56	; 0x38
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	4413      	add	r3, r2
 80046ca:	3304      	adds	r3, #4
 80046cc:	60fb      	str	r3, [r7, #12]
 80046ce:	e00c      	b.n	80046ea <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80046d0:	78fb      	ldrb	r3, [r7, #3]
 80046d2:	f003 020f 	and.w	r2, r3, #15
 80046d6:	4613      	mov	r3, r2
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	4413      	add	r3, r2
 80046e6:	3304      	adds	r3, #4
 80046e8:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68f9      	ldr	r1, [r7, #12]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f006 f8b3 	bl	800a85c <USB_EPStopXfer>
 80046f6:	4603      	mov	r3, r0
 80046f8:	72fb      	strb	r3, [r7, #11]

  return ret;
 80046fa:	7afb      	ldrb	r3, [r7, #11]
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	3710      	adds	r7, #16
 8004700:	46bd      	mov	sp, r7
 8004702:	bd80      	pop	{r7, pc}

08004704 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08a      	sub	sp, #40	; 0x28
 8004708:	af02      	add	r7, sp, #8
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	4613      	mov	r3, r2
 800471c:	00db      	lsls	r3, r3, #3
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	3338      	adds	r3, #56	; 0x38
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	4413      	add	r3, r2
 8004728:	3304      	adds	r3, #4
 800472a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6a1a      	ldr	r2, [r3, #32]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	699b      	ldr	r3, [r3, #24]
 8004734:	429a      	cmp	r2, r3
 8004736:	d901      	bls.n	800473c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e06c      	b.n	8004816 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	699a      	ldr	r2, [r3, #24]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	6a1b      	ldr	r3, [r3, #32]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	68db      	ldr	r3, [r3, #12]
 800474c:	69fa      	ldr	r2, [r7, #28]
 800474e:	429a      	cmp	r2, r3
 8004750:	d902      	bls.n	8004758 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	3303      	adds	r3, #3
 800475c:	089b      	lsrs	r3, r3, #2
 800475e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004760:	e02b      	b.n	80047ba <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	6a1b      	ldr	r3, [r3, #32]
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	69fa      	ldr	r2, [r7, #28]
 8004774:	429a      	cmp	r2, r3
 8004776:	d902      	bls.n	800477e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800477e:	69fb      	ldr	r3, [r7, #28]
 8004780:	3303      	adds	r3, #3
 8004782:	089b      	lsrs	r3, r3, #2
 8004784:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6919      	ldr	r1, [r3, #16]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	b2da      	uxtb	r2, r3
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004796:	b2db      	uxtb	r3, r3
 8004798:	9300      	str	r3, [sp, #0]
 800479a:	4603      	mov	r3, r0
 800479c:	6978      	ldr	r0, [r7, #20]
 800479e:	f006 f907 	bl	800a9b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	441a      	add	r2, r3
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	6a1a      	ldr	r2, [r3, #32]
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	441a      	add	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	015a      	lsls	r2, r3, #5
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	4413      	add	r3, r2
 80047c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c6:	699b      	ldr	r3, [r3, #24]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	69ba      	ldr	r2, [r7, #24]
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d809      	bhi.n	80047e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6a1a      	ldr	r2, [r3, #32]
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80047d8:	429a      	cmp	r2, r3
 80047da:	d203      	bcs.n	80047e4 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	699b      	ldr	r3, [r3, #24]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1be      	bne.n	8004762 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	699a      	ldr	r2, [r3, #24]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d811      	bhi.n	8004814 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	f003 030f 	and.w	r3, r3, #15
 80047f6:	2201      	movs	r2, #1
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	43db      	mvns	r3, r3
 800480a:	6939      	ldr	r1, [r7, #16]
 800480c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004810:	4013      	ands	r3, r2
 8004812:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004814:	2300      	movs	r3, #0
}
 8004816:	4618      	mov	r0, r3
 8004818:	3720      	adds	r7, #32
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
	...

08004820 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b088      	sub	sp, #32
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
 8004828:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	333c      	adds	r3, #60	; 0x3c
 8004838:	3304      	adds	r3, #4
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	015a      	lsls	r2, r3, #5
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	4413      	add	r3, r2
 8004846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484a:	689b      	ldr	r3, [r3, #8]
 800484c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d17b      	bne.n	800494e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f003 0308 	and.w	r3, r3, #8
 800485c:	2b00      	cmp	r3, #0
 800485e:	d015      	beq.n	800488c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	4a61      	ldr	r2, [pc, #388]	; (80049e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004864:	4293      	cmp	r3, r2
 8004866:	f240 80b9 	bls.w	80049dc <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004870:	2b00      	cmp	r3, #0
 8004872:	f000 80b3 	beq.w	80049dc <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004882:	461a      	mov	r2, r3
 8004884:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004888:	6093      	str	r3, [r2, #8]
 800488a:	e0a7      	b.n	80049dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f003 0320 	and.w	r3, r3, #32
 8004892:	2b00      	cmp	r3, #0
 8004894:	d009      	beq.n	80048aa <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	015a      	lsls	r2, r3, #5
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	4413      	add	r3, r2
 800489e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a2:	461a      	mov	r2, r3
 80048a4:	2320      	movs	r3, #32
 80048a6:	6093      	str	r3, [r2, #8]
 80048a8:	e098      	b.n	80049dc <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f040 8093 	bne.w	80049dc <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	4a4b      	ldr	r2, [pc, #300]	; (80049e8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d90f      	bls.n	80048de <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d4:	461a      	mov	r2, r3
 80048d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048da:	6093      	str	r3, [r2, #8]
 80048dc:	e07e      	b.n	80049dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	4613      	mov	r3, r2
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	4413      	add	r3, r2
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	4413      	add	r3, r2
 80048f0:	3304      	adds	r3, #4
 80048f2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	69da      	ldr	r2, [r3, #28]
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	0159      	lsls	r1, r3, #5
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	440b      	add	r3, r1
 8004900:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004904:	691b      	ldr	r3, [r3, #16]
 8004906:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800490a:	1ad2      	subs	r2, r2, r3
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d114      	bne.n	8004940 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d109      	bne.n	8004932 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6818      	ldr	r0, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004928:	461a      	mov	r2, r3
 800492a:	2101      	movs	r1, #1
 800492c:	f006 fad8 	bl	800aee0 <USB_EP0_OutStart>
 8004930:	e006      	b.n	8004940 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	691a      	ldr	r2, [r3, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	441a      	add	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	b2db      	uxtb	r3, r3
 8004944:	4619      	mov	r1, r3
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f00c fe92 	bl	8011670 <HAL_PCD_DataOutStageCallback>
 800494c:	e046      	b.n	80049dc <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	4a26      	ldr	r2, [pc, #152]	; (80049ec <PCD_EP_OutXfrComplete_int+0x1cc>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d124      	bne.n	80049a0 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496c:	461a      	mov	r2, r3
 800496e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004972:	6093      	str	r3, [r2, #8]
 8004974:	e032      	b.n	80049dc <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f003 0320 	and.w	r3, r3, #32
 800497c:	2b00      	cmp	r3, #0
 800497e:	d008      	beq.n	8004992 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498c:	461a      	mov	r2, r3
 800498e:	2320      	movs	r3, #32
 8004990:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	b2db      	uxtb	r3, r3
 8004996:	4619      	mov	r1, r3
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f00c fe69 	bl	8011670 <HAL_PCD_DataOutStageCallback>
 800499e:	e01d      	b.n	80049dc <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d114      	bne.n	80049d0 <PCD_EP_OutXfrComplete_int+0x1b0>
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	683a      	ldr	r2, [r7, #0]
 80049aa:	4613      	mov	r3, r2
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	4413      	add	r3, r2
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	440b      	add	r3, r1
 80049b4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d108      	bne.n	80049d0 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6818      	ldr	r0, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80049c8:	461a      	mov	r2, r3
 80049ca:	2100      	movs	r1, #0
 80049cc:	f006 fa88 	bl	800aee0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	4619      	mov	r1, r3
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f00c fe4a 	bl	8011670 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80049dc:	2300      	movs	r3, #0
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3720      	adds	r7, #32
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	4f54300a 	.word	0x4f54300a
 80049ec:	4f54310a 	.word	0x4f54310a

080049f0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b086      	sub	sp, #24
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	333c      	adds	r3, #60	; 0x3c
 8004a08:	3304      	adds	r3, #4
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	4a15      	ldr	r2, [pc, #84]	; (8004a78 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d90e      	bls.n	8004a44 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d009      	beq.n	8004a44 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a42:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8004a44:	6878      	ldr	r0, [r7, #4]
 8004a46:	f00c fe01 	bl	801164c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4a0a      	ldr	r2, [pc, #40]	; (8004a78 <PCD_EP_OutSetupPacket_int+0x88>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d90c      	bls.n	8004a6c <PCD_EP_OutSetupPacket_int+0x7c>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	691b      	ldr	r3, [r3, #16]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d108      	bne.n	8004a6c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6818      	ldr	r0, [r3, #0]
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004a64:	461a      	mov	r2, r3
 8004a66:	2101      	movs	r1, #1
 8004a68:	f006 fa3a 	bl	800aee0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3718      	adds	r7, #24
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	4f54300a 	.word	0x4f54300a

08004a7c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b085      	sub	sp, #20
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	460b      	mov	r3, r1
 8004a86:	70fb      	strb	r3, [r7, #3]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004a94:	78fb      	ldrb	r3, [r7, #3]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d107      	bne.n	8004aaa <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004a9a:	883b      	ldrh	r3, [r7, #0]
 8004a9c:	0419      	lsls	r1, r3, #16
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	430a      	orrs	r2, r1
 8004aa6:	629a      	str	r2, [r3, #40]	; 0x28
 8004aa8:	e028      	b.n	8004afc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab0:	0c1b      	lsrs	r3, r3, #16
 8004ab2:	68ba      	ldr	r2, [r7, #8]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ab8:	2300      	movs	r3, #0
 8004aba:	73fb      	strb	r3, [r7, #15]
 8004abc:	e00d      	b.n	8004ada <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681a      	ldr	r2, [r3, #0]
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	3340      	adds	r3, #64	; 0x40
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	0c1b      	lsrs	r3, r3, #16
 8004ace:	68ba      	ldr	r2, [r7, #8]
 8004ad0:	4413      	add	r3, r2
 8004ad2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	73fb      	strb	r3, [r7, #15]
 8004ada:	7bfa      	ldrb	r2, [r7, #15]
 8004adc:	78fb      	ldrb	r3, [r7, #3]
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d3ec      	bcc.n	8004abe <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004ae4:	883b      	ldrh	r3, [r7, #0]
 8004ae6:	0418      	lsls	r0, r3, #16
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6819      	ldr	r1, [r3, #0]
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	3b01      	subs	r3, #1
 8004af0:	68ba      	ldr	r2, [r7, #8]
 8004af2:	4302      	orrs	r2, r0
 8004af4:	3340      	adds	r3, #64	; 0x40
 8004af6:	009b      	lsls	r3, r3, #2
 8004af8:	440b      	add	r3, r1
 8004afa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004afc:	2300      	movs	r3, #0
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3714      	adds	r7, #20
 8004b02:	46bd      	mov	sp, r7
 8004b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b08:	4770      	bx	lr

08004b0a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004b0a:	b480      	push	{r7}
 8004b0c:	b083      	sub	sp, #12
 8004b0e:	af00      	add	r7, sp, #0
 8004b10:	6078      	str	r0, [r7, #4]
 8004b12:	460b      	mov	r3, r1
 8004b14:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	887a      	ldrh	r2, [r7, #2]
 8004b1c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004b1e:	2300      	movs	r3, #0
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b085      	sub	sp, #20
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	699b      	ldr	r3, [r3, #24]
 8004b4e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b5a:	4b05      	ldr	r3, [pc, #20]	; (8004b70 <HAL_PCDEx_ActivateLPM+0x44>)
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3714      	adds	r7, #20
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	10000003 	.word	0x10000003

08004b74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b082      	sub	sp, #8
 8004b78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004b7e:	4b23      	ldr	r3, [pc, #140]	; (8004c0c <HAL_PWREx_EnableOverDrive+0x98>)
 8004b80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b82:	4a22      	ldr	r2, [pc, #136]	; (8004c0c <HAL_PWREx_EnableOverDrive+0x98>)
 8004b84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b88:	6413      	str	r3, [r2, #64]	; 0x40
 8004b8a:	4b20      	ldr	r3, [pc, #128]	; (8004c0c <HAL_PWREx_EnableOverDrive+0x98>)
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004b96:	4b1e      	ldr	r3, [pc, #120]	; (8004c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a1d      	ldr	r2, [pc, #116]	; (8004c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004b9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ba0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ba2:	f7fc ff7d 	bl	8001aa0 <HAL_GetTick>
 8004ba6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004ba8:	e009      	b.n	8004bbe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004baa:	f7fc ff79 	bl	8001aa0 <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bb8:	d901      	bls.n	8004bbe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e022      	b.n	8004c04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004bbe:	4b14      	ldr	r3, [pc, #80]	; (8004c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bca:	d1ee      	bne.n	8004baa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004bcc:	4b10      	ldr	r3, [pc, #64]	; (8004c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a0f      	ldr	r2, [pc, #60]	; (8004c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bd6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004bd8:	f7fc ff62 	bl	8001aa0 <HAL_GetTick>
 8004bdc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bde:	e009      	b.n	8004bf4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004be0:	f7fc ff5e 	bl	8001aa0 <HAL_GetTick>
 8004be4:	4602      	mov	r2, r0
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004bee:	d901      	bls.n	8004bf4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e007      	b.n	8004c04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004bf4:	4b06      	ldr	r3, [pc, #24]	; (8004c10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004c00:	d1ee      	bne.n	8004be0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004c02:	2300      	movs	r3, #0
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3708      	adds	r7, #8
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}
 8004c0c:	40023800 	.word	0x40023800
 8004c10:	40007000 	.word	0x40007000

08004c14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b086      	sub	sp, #24
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d101      	bne.n	8004c2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004c26:	2301      	movs	r3, #1
 8004c28:	e29b      	b.n	8005162 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 8087 	beq.w	8004d46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004c38:	4b96      	ldr	r3, [pc, #600]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f003 030c 	and.w	r3, r3, #12
 8004c40:	2b04      	cmp	r3, #4
 8004c42:	d00c      	beq.n	8004c5e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004c44:	4b93      	ldr	r3, [pc, #588]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	f003 030c 	and.w	r3, r3, #12
 8004c4c:	2b08      	cmp	r3, #8
 8004c4e:	d112      	bne.n	8004c76 <HAL_RCC_OscConfig+0x62>
 8004c50:	4b90      	ldr	r3, [pc, #576]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c5c:	d10b      	bne.n	8004c76 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c5e:	4b8d      	ldr	r3, [pc, #564]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d06c      	beq.n	8004d44 <HAL_RCC_OscConfig+0x130>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d168      	bne.n	8004d44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e275      	b.n	8005162 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	685b      	ldr	r3, [r3, #4]
 8004c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c7e:	d106      	bne.n	8004c8e <HAL_RCC_OscConfig+0x7a>
 8004c80:	4b84      	ldr	r3, [pc, #528]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a83      	ldr	r2, [pc, #524]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	e02e      	b.n	8004cec <HAL_RCC_OscConfig+0xd8>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10c      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x9c>
 8004c96:	4b7f      	ldr	r3, [pc, #508]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a7e      	ldr	r2, [pc, #504]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	4b7c      	ldr	r3, [pc, #496]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	4a7b      	ldr	r2, [pc, #492]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cac:	6013      	str	r3, [r2, #0]
 8004cae:	e01d      	b.n	8004cec <HAL_RCC_OscConfig+0xd8>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cb8:	d10c      	bne.n	8004cd4 <HAL_RCC_OscConfig+0xc0>
 8004cba:	4b76      	ldr	r3, [pc, #472]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a75      	ldr	r2, [pc, #468]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004cc4:	6013      	str	r3, [r2, #0]
 8004cc6:	4b73      	ldr	r3, [pc, #460]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a72      	ldr	r2, [pc, #456]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	e00b      	b.n	8004cec <HAL_RCC_OscConfig+0xd8>
 8004cd4:	4b6f      	ldr	r3, [pc, #444]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a6e      	ldr	r2, [pc, #440]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cde:	6013      	str	r3, [r2, #0]
 8004ce0:	4b6c      	ldr	r3, [pc, #432]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a6b      	ldr	r2, [pc, #428]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d013      	beq.n	8004d1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf4:	f7fc fed4 	bl	8001aa0 <HAL_GetTick>
 8004cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cfa:	e008      	b.n	8004d0e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004cfc:	f7fc fed0 	bl	8001aa0 <HAL_GetTick>
 8004d00:	4602      	mov	r2, r0
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	2b64      	cmp	r3, #100	; 0x64
 8004d08:	d901      	bls.n	8004d0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e229      	b.n	8005162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d0e:	4b61      	ldr	r3, [pc, #388]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d0f0      	beq.n	8004cfc <HAL_RCC_OscConfig+0xe8>
 8004d1a:	e014      	b.n	8004d46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d1c:	f7fc fec0 	bl	8001aa0 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d24:	f7fc febc 	bl	8001aa0 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b64      	cmp	r3, #100	; 0x64
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e215      	b.n	8005162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d36:	4b57      	ldr	r3, [pc, #348]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d1f0      	bne.n	8004d24 <HAL_RCC_OscConfig+0x110>
 8004d42:	e000      	b.n	8004d46 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f003 0302 	and.w	r3, r3, #2
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d069      	beq.n	8004e26 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004d52:	4b50      	ldr	r3, [pc, #320]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	f003 030c 	and.w	r3, r3, #12
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d00b      	beq.n	8004d76 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004d5e:	4b4d      	ldr	r3, [pc, #308]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f003 030c 	and.w	r3, r3, #12
 8004d66:	2b08      	cmp	r3, #8
 8004d68:	d11c      	bne.n	8004da4 <HAL_RCC_OscConfig+0x190>
 8004d6a:	4b4a      	ldr	r3, [pc, #296]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d116      	bne.n	8004da4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d76:	4b47      	ldr	r3, [pc, #284]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0302 	and.w	r3, r3, #2
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d005      	beq.n	8004d8e <HAL_RCC_OscConfig+0x17a>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	68db      	ldr	r3, [r3, #12]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d001      	beq.n	8004d8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e1e9      	b.n	8005162 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d8e:	4b41      	ldr	r3, [pc, #260]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	691b      	ldr	r3, [r3, #16]
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	493d      	ldr	r1, [pc, #244]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004da2:	e040      	b.n	8004e26 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	68db      	ldr	r3, [r3, #12]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d023      	beq.n	8004df4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dac:	4b39      	ldr	r3, [pc, #228]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a38      	ldr	r2, [pc, #224]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004db8:	f7fc fe72 	bl	8001aa0 <HAL_GetTick>
 8004dbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dbe:	e008      	b.n	8004dd2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004dc0:	f7fc fe6e 	bl	8001aa0 <HAL_GetTick>
 8004dc4:	4602      	mov	r2, r0
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	1ad3      	subs	r3, r2, r3
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d901      	bls.n	8004dd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004dce:	2303      	movs	r3, #3
 8004dd0:	e1c7      	b.n	8005162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dd2:	4b30      	ldr	r3, [pc, #192]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d0f0      	beq.n	8004dc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dde:	4b2d      	ldr	r3, [pc, #180]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	00db      	lsls	r3, r3, #3
 8004dec:	4929      	ldr	r1, [pc, #164]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004dee:	4313      	orrs	r3, r2
 8004df0:	600b      	str	r3, [r1, #0]
 8004df2:	e018      	b.n	8004e26 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004df4:	4b27      	ldr	r3, [pc, #156]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a26      	ldr	r2, [pc, #152]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004dfa:	f023 0301 	bic.w	r3, r3, #1
 8004dfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e00:	f7fc fe4e 	bl	8001aa0 <HAL_GetTick>
 8004e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e06:	e008      	b.n	8004e1a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e08:	f7fc fe4a 	bl	8001aa0 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d901      	bls.n	8004e1a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e1a3      	b.n	8005162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004e1a:	4b1e      	ldr	r3, [pc, #120]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1f0      	bne.n	8004e08 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f003 0308 	and.w	r3, r3, #8
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d038      	beq.n	8004ea4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	695b      	ldr	r3, [r3, #20]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d019      	beq.n	8004e6e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e3a:	4b16      	ldr	r3, [pc, #88]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004e3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e3e:	4a15      	ldr	r2, [pc, #84]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004e40:	f043 0301 	orr.w	r3, r3, #1
 8004e44:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e46:	f7fc fe2b 	bl	8001aa0 <HAL_GetTick>
 8004e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e4e:	f7fc fe27 	bl	8001aa0 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e180      	b.n	8005162 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004e60:	4b0c      	ldr	r3, [pc, #48]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004e62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e64:	f003 0302 	and.w	r3, r3, #2
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0f0      	beq.n	8004e4e <HAL_RCC_OscConfig+0x23a>
 8004e6c:	e01a      	b.n	8004ea4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e6e:	4b09      	ldr	r3, [pc, #36]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e72:	4a08      	ldr	r2, [pc, #32]	; (8004e94 <HAL_RCC_OscConfig+0x280>)
 8004e74:	f023 0301 	bic.w	r3, r3, #1
 8004e78:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7a:	f7fc fe11 	bl	8001aa0 <HAL_GetTick>
 8004e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e80:	e00a      	b.n	8004e98 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e82:	f7fc fe0d 	bl	8001aa0 <HAL_GetTick>
 8004e86:	4602      	mov	r2, r0
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	1ad3      	subs	r3, r2, r3
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d903      	bls.n	8004e98 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004e90:	2303      	movs	r3, #3
 8004e92:	e166      	b.n	8005162 <HAL_RCC_OscConfig+0x54e>
 8004e94:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e98:	4b92      	ldr	r3, [pc, #584]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004e9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e9c:	f003 0302 	and.w	r3, r3, #2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1ee      	bne.n	8004e82 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f003 0304 	and.w	r3, r3, #4
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	f000 80a4 	beq.w	8004ffa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004eb2:	4b8c      	ldr	r3, [pc, #560]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10d      	bne.n	8004eda <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ebe:	4b89      	ldr	r3, [pc, #548]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	4a88      	ldr	r2, [pc, #544]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004ec4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eca:	4b86      	ldr	r3, [pc, #536]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ed2:	60bb      	str	r3, [r7, #8]
 8004ed4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004eda:	4b83      	ldr	r3, [pc, #524]	; (80050e8 <HAL_RCC_OscConfig+0x4d4>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d118      	bne.n	8004f18 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004ee6:	4b80      	ldr	r3, [pc, #512]	; (80050e8 <HAL_RCC_OscConfig+0x4d4>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a7f      	ldr	r2, [pc, #508]	; (80050e8 <HAL_RCC_OscConfig+0x4d4>)
 8004eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ef2:	f7fc fdd5 	bl	8001aa0 <HAL_GetTick>
 8004ef6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ef8:	e008      	b.n	8004f0c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004efa:	f7fc fdd1 	bl	8001aa0 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b64      	cmp	r3, #100	; 0x64
 8004f06:	d901      	bls.n	8004f0c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e12a      	b.n	8005162 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f0c:	4b76      	ldr	r3, [pc, #472]	; (80050e8 <HAL_RCC_OscConfig+0x4d4>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0f0      	beq.n	8004efa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d106      	bne.n	8004f2e <HAL_RCC_OscConfig+0x31a>
 8004f20:	4b70      	ldr	r3, [pc, #448]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004f22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f24:	4a6f      	ldr	r2, [pc, #444]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004f26:	f043 0301 	orr.w	r3, r3, #1
 8004f2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004f2c:	e02d      	b.n	8004f8a <HAL_RCC_OscConfig+0x376>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d10c      	bne.n	8004f50 <HAL_RCC_OscConfig+0x33c>
 8004f36:	4b6b      	ldr	r3, [pc, #428]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f3a:	4a6a      	ldr	r2, [pc, #424]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004f3c:	f023 0301 	bic.w	r3, r3, #1
 8004f40:	6713      	str	r3, [r2, #112]	; 0x70
 8004f42:	4b68      	ldr	r3, [pc, #416]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f46:	4a67      	ldr	r2, [pc, #412]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004f48:	f023 0304 	bic.w	r3, r3, #4
 8004f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f4e:	e01c      	b.n	8004f8a <HAL_RCC_OscConfig+0x376>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	689b      	ldr	r3, [r3, #8]
 8004f54:	2b05      	cmp	r3, #5
 8004f56:	d10c      	bne.n	8004f72 <HAL_RCC_OscConfig+0x35e>
 8004f58:	4b62      	ldr	r3, [pc, #392]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f5c:	4a61      	ldr	r2, [pc, #388]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004f5e:	f043 0304 	orr.w	r3, r3, #4
 8004f62:	6713      	str	r3, [r2, #112]	; 0x70
 8004f64:	4b5f      	ldr	r3, [pc, #380]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f68:	4a5e      	ldr	r2, [pc, #376]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004f6a:	f043 0301 	orr.w	r3, r3, #1
 8004f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8004f70:	e00b      	b.n	8004f8a <HAL_RCC_OscConfig+0x376>
 8004f72:	4b5c      	ldr	r3, [pc, #368]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f76:	4a5b      	ldr	r2, [pc, #364]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004f78:	f023 0301 	bic.w	r3, r3, #1
 8004f7c:	6713      	str	r3, [r2, #112]	; 0x70
 8004f7e:	4b59      	ldr	r3, [pc, #356]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f82:	4a58      	ldr	r2, [pc, #352]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004f84:	f023 0304 	bic.w	r3, r3, #4
 8004f88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d015      	beq.n	8004fbe <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f92:	f7fc fd85 	bl	8001aa0 <HAL_GetTick>
 8004f96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f98:	e00a      	b.n	8004fb0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004f9a:	f7fc fd81 	bl	8001aa0 <HAL_GetTick>
 8004f9e:	4602      	mov	r2, r0
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	1ad3      	subs	r3, r2, r3
 8004fa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e0d8      	b.n	8005162 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004fb0:	4b4c      	ldr	r3, [pc, #304]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fb4:	f003 0302 	and.w	r3, r3, #2
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0ee      	beq.n	8004f9a <HAL_RCC_OscConfig+0x386>
 8004fbc:	e014      	b.n	8004fe8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fbe:	f7fc fd6f 	bl	8001aa0 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fc4:	e00a      	b.n	8004fdc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fc6:	f7fc fd6b 	bl	8001aa0 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d901      	bls.n	8004fdc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004fd8:	2303      	movs	r3, #3
 8004fda:	e0c2      	b.n	8005162 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004fdc:	4b41      	ldr	r3, [pc, #260]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d1ee      	bne.n	8004fc6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004fe8:	7dfb      	ldrb	r3, [r7, #23]
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d105      	bne.n	8004ffa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004fee:	4b3d      	ldr	r3, [pc, #244]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	4a3c      	ldr	r2, [pc, #240]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8004ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ff8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	699b      	ldr	r3, [r3, #24]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 80ae 	beq.w	8005160 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005004:	4b37      	ldr	r3, [pc, #220]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8005006:	689b      	ldr	r3, [r3, #8]
 8005008:	f003 030c 	and.w	r3, r3, #12
 800500c:	2b08      	cmp	r3, #8
 800500e:	d06d      	beq.n	80050ec <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	699b      	ldr	r3, [r3, #24]
 8005014:	2b02      	cmp	r3, #2
 8005016:	d14b      	bne.n	80050b0 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005018:	4b32      	ldr	r3, [pc, #200]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a31      	ldr	r2, [pc, #196]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 800501e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005022:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005024:	f7fc fd3c 	bl	8001aa0 <HAL_GetTick>
 8005028:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800502a:	e008      	b.n	800503e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800502c:	f7fc fd38 	bl	8001aa0 <HAL_GetTick>
 8005030:	4602      	mov	r2, r0
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	1ad3      	subs	r3, r2, r3
 8005036:	2b02      	cmp	r3, #2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e091      	b.n	8005162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800503e:	4b29      	ldr	r3, [pc, #164]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005046:	2b00      	cmp	r3, #0
 8005048:	d1f0      	bne.n	800502c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	69da      	ldr	r2, [r3, #28]
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6a1b      	ldr	r3, [r3, #32]
 8005052:	431a      	orrs	r2, r3
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	019b      	lsls	r3, r3, #6
 800505a:	431a      	orrs	r2, r3
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005060:	085b      	lsrs	r3, r3, #1
 8005062:	3b01      	subs	r3, #1
 8005064:	041b      	lsls	r3, r3, #16
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800506c:	061b      	lsls	r3, r3, #24
 800506e:	431a      	orrs	r2, r3
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005074:	071b      	lsls	r3, r3, #28
 8005076:	491b      	ldr	r1, [pc, #108]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8005078:	4313      	orrs	r3, r2
 800507a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800507c:	4b19      	ldr	r3, [pc, #100]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a18      	ldr	r2, [pc, #96]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 8005082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005086:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005088:	f7fc fd0a 	bl	8001aa0 <HAL_GetTick>
 800508c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005090:	f7fc fd06 	bl	8001aa0 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e05f      	b.n	8005162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050a2:	4b10      	ldr	r3, [pc, #64]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCC_OscConfig+0x47c>
 80050ae:	e057      	b.n	8005160 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050b0:	4b0c      	ldr	r3, [pc, #48]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a0b      	ldr	r2, [pc, #44]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 80050b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050bc:	f7fc fcf0 	bl	8001aa0 <HAL_GetTick>
 80050c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c2:	e008      	b.n	80050d6 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050c4:	f7fc fcec 	bl	8001aa0 <HAL_GetTick>
 80050c8:	4602      	mov	r2, r0
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	1ad3      	subs	r3, r2, r3
 80050ce:	2b02      	cmp	r3, #2
 80050d0:	d901      	bls.n	80050d6 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80050d2:	2303      	movs	r3, #3
 80050d4:	e045      	b.n	8005162 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d6:	4b03      	ldr	r3, [pc, #12]	; (80050e4 <HAL_RCC_OscConfig+0x4d0>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d1f0      	bne.n	80050c4 <HAL_RCC_OscConfig+0x4b0>
 80050e2:	e03d      	b.n	8005160 <HAL_RCC_OscConfig+0x54c>
 80050e4:	40023800 	.word	0x40023800
 80050e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80050ec:	4b1f      	ldr	r3, [pc, #124]	; (800516c <HAL_RCC_OscConfig+0x558>)
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d030      	beq.n	800515c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005104:	429a      	cmp	r2, r3
 8005106:	d129      	bne.n	800515c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005112:	429a      	cmp	r2, r3
 8005114:	d122      	bne.n	800515c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005116:	68fa      	ldr	r2, [r7, #12]
 8005118:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800511c:	4013      	ands	r3, r2
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005122:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005124:	4293      	cmp	r3, r2
 8005126:	d119      	bne.n	800515c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005132:	085b      	lsrs	r3, r3, #1
 8005134:	3b01      	subs	r3, #1
 8005136:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005138:	429a      	cmp	r2, r3
 800513a:	d10f      	bne.n	800515c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005146:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8005148:	429a      	cmp	r2, r3
 800514a:	d107      	bne.n	800515c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005156:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d001      	beq.n	8005160 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e000      	b.n	8005162 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3718      	adds	r7, #24
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
 800516a:	bf00      	nop
 800516c:	40023800 	.word	0x40023800

08005170 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800517a:	2300      	movs	r3, #0
 800517c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e0d0      	b.n	800532a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005188:	4b6a      	ldr	r3, [pc, #424]	; (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 030f 	and.w	r3, r3, #15
 8005190:	683a      	ldr	r2, [r7, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d910      	bls.n	80051b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005196:	4b67      	ldr	r3, [pc, #412]	; (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f023 020f 	bic.w	r2, r3, #15
 800519e:	4965      	ldr	r1, [pc, #404]	; (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	4313      	orrs	r3, r2
 80051a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051a6:	4b63      	ldr	r3, [pc, #396]	; (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 030f 	and.w	r3, r3, #15
 80051ae:	683a      	ldr	r2, [r7, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d001      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0b8      	b.n	800532a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0302 	and.w	r3, r3, #2
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d020      	beq.n	8005206 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f003 0304 	and.w	r3, r3, #4
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d005      	beq.n	80051dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80051d0:	4b59      	ldr	r3, [pc, #356]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	4a58      	ldr	r2, [pc, #352]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 80051d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80051da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f003 0308 	and.w	r3, r3, #8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d005      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80051e8:	4b53      	ldr	r3, [pc, #332]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	4a52      	ldr	r2, [pc, #328]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 80051ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80051f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051f4:	4b50      	ldr	r3, [pc, #320]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	494d      	ldr	r1, [pc, #308]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 8005202:	4313      	orrs	r3, r2
 8005204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f003 0301 	and.w	r3, r3, #1
 800520e:	2b00      	cmp	r3, #0
 8005210:	d040      	beq.n	8005294 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	2b01      	cmp	r3, #1
 8005218:	d107      	bne.n	800522a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800521a:	4b47      	ldr	r3, [pc, #284]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d115      	bne.n	8005252 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8005226:	2301      	movs	r3, #1
 8005228:	e07f      	b.n	800532a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	2b02      	cmp	r3, #2
 8005230:	d107      	bne.n	8005242 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005232:	4b41      	ldr	r3, [pc, #260]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800523e:	2301      	movs	r3, #1
 8005240:	e073      	b.n	800532a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005242:	4b3d      	ldr	r3, [pc, #244]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 0302 	and.w	r3, r3, #2
 800524a:	2b00      	cmp	r3, #0
 800524c:	d101      	bne.n	8005252 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e06b      	b.n	800532a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005252:	4b39      	ldr	r3, [pc, #228]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	f023 0203 	bic.w	r2, r3, #3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	4936      	ldr	r1, [pc, #216]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 8005260:	4313      	orrs	r3, r2
 8005262:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005264:	f7fc fc1c 	bl	8001aa0 <HAL_GetTick>
 8005268:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800526a:	e00a      	b.n	8005282 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800526c:	f7fc fc18 	bl	8001aa0 <HAL_GetTick>
 8005270:	4602      	mov	r2, r0
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	1ad3      	subs	r3, r2, r3
 8005276:	f241 3288 	movw	r2, #5000	; 0x1388
 800527a:	4293      	cmp	r3, r2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e053      	b.n	800532a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005282:	4b2d      	ldr	r3, [pc, #180]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	f003 020c 	and.w	r2, r3, #12
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685b      	ldr	r3, [r3, #4]
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	429a      	cmp	r2, r3
 8005292:	d1eb      	bne.n	800526c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005294:	4b27      	ldr	r3, [pc, #156]	; (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 030f 	and.w	r3, r3, #15
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d210      	bcs.n	80052c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052a2:	4b24      	ldr	r3, [pc, #144]	; (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f023 020f 	bic.w	r2, r3, #15
 80052aa:	4922      	ldr	r1, [pc, #136]	; (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	4313      	orrs	r3, r2
 80052b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052b2:	4b20      	ldr	r3, [pc, #128]	; (8005334 <HAL_RCC_ClockConfig+0x1c4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 030f 	and.w	r3, r3, #15
 80052ba:	683a      	ldr	r2, [r7, #0]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d001      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e032      	b.n	800532a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d008      	beq.n	80052e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052d0:	4b19      	ldr	r3, [pc, #100]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4916      	ldr	r1, [pc, #88]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 80052de:	4313      	orrs	r3, r2
 80052e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f003 0308 	and.w	r3, r3, #8
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d009      	beq.n	8005302 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80052ee:	4b12      	ldr	r3, [pc, #72]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	00db      	lsls	r3, r3, #3
 80052fc:	490e      	ldr	r1, [pc, #56]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 80052fe:	4313      	orrs	r3, r2
 8005300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005302:	f000 f821 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 8005306:	4602      	mov	r2, r0
 8005308:	4b0b      	ldr	r3, [pc, #44]	; (8005338 <HAL_RCC_ClockConfig+0x1c8>)
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 030f 	and.w	r3, r3, #15
 8005312:	490a      	ldr	r1, [pc, #40]	; (800533c <HAL_RCC_ClockConfig+0x1cc>)
 8005314:	5ccb      	ldrb	r3, [r1, r3]
 8005316:	fa22 f303 	lsr.w	r3, r2, r3
 800531a:	4a09      	ldr	r2, [pc, #36]	; (8005340 <HAL_RCC_ClockConfig+0x1d0>)
 800531c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800531e:	4b09      	ldr	r3, [pc, #36]	; (8005344 <HAL_RCC_ClockConfig+0x1d4>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4618      	mov	r0, r3
 8005324:	f7fc fa42 	bl	80017ac <HAL_InitTick>

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40023c00 	.word	0x40023c00
 8005338:	40023800 	.word	0x40023800
 800533c:	080120dc 	.word	0x080120dc
 8005340:	20000004 	.word	0x20000004
 8005344:	20000008 	.word	0x20000008

08005348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800534c:	b094      	sub	sp, #80	; 0x50
 800534e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8005350:	2300      	movs	r3, #0
 8005352:	647b      	str	r3, [r7, #68]	; 0x44
 8005354:	2300      	movs	r3, #0
 8005356:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005358:	2300      	movs	r3, #0
 800535a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800535c:	2300      	movs	r3, #0
 800535e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005360:	4b79      	ldr	r3, [pc, #484]	; (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 8005362:	689b      	ldr	r3, [r3, #8]
 8005364:	f003 030c 	and.w	r3, r3, #12
 8005368:	2b08      	cmp	r3, #8
 800536a:	d00d      	beq.n	8005388 <HAL_RCC_GetSysClockFreq+0x40>
 800536c:	2b08      	cmp	r3, #8
 800536e:	f200 80e1 	bhi.w	8005534 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005372:	2b00      	cmp	r3, #0
 8005374:	d002      	beq.n	800537c <HAL_RCC_GetSysClockFreq+0x34>
 8005376:	2b04      	cmp	r3, #4
 8005378:	d003      	beq.n	8005382 <HAL_RCC_GetSysClockFreq+0x3a>
 800537a:	e0db      	b.n	8005534 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800537c:	4b73      	ldr	r3, [pc, #460]	; (800554c <HAL_RCC_GetSysClockFreq+0x204>)
 800537e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005380:	e0db      	b.n	800553a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005382:	4b73      	ldr	r3, [pc, #460]	; (8005550 <HAL_RCC_GetSysClockFreq+0x208>)
 8005384:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005386:	e0d8      	b.n	800553a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005388:	4b6f      	ldr	r3, [pc, #444]	; (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005390:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8005392:	4b6d      	ldr	r3, [pc, #436]	; (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d063      	beq.n	8005466 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800539e:	4b6a      	ldr	r3, [pc, #424]	; (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	099b      	lsrs	r3, r3, #6
 80053a4:	2200      	movs	r2, #0
 80053a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80053a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80053aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b0:	633b      	str	r3, [r7, #48]	; 0x30
 80053b2:	2300      	movs	r3, #0
 80053b4:	637b      	str	r3, [r7, #52]	; 0x34
 80053b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80053ba:	4622      	mov	r2, r4
 80053bc:	462b      	mov	r3, r5
 80053be:	f04f 0000 	mov.w	r0, #0
 80053c2:	f04f 0100 	mov.w	r1, #0
 80053c6:	0159      	lsls	r1, r3, #5
 80053c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053cc:	0150      	lsls	r0, r2, #5
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	4621      	mov	r1, r4
 80053d4:	1a51      	subs	r1, r2, r1
 80053d6:	6139      	str	r1, [r7, #16]
 80053d8:	4629      	mov	r1, r5
 80053da:	eb63 0301 	sbc.w	r3, r3, r1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	f04f 0200 	mov.w	r2, #0
 80053e4:	f04f 0300 	mov.w	r3, #0
 80053e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053ec:	4659      	mov	r1, fp
 80053ee:	018b      	lsls	r3, r1, #6
 80053f0:	4651      	mov	r1, sl
 80053f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80053f6:	4651      	mov	r1, sl
 80053f8:	018a      	lsls	r2, r1, #6
 80053fa:	4651      	mov	r1, sl
 80053fc:	ebb2 0801 	subs.w	r8, r2, r1
 8005400:	4659      	mov	r1, fp
 8005402:	eb63 0901 	sbc.w	r9, r3, r1
 8005406:	f04f 0200 	mov.w	r2, #0
 800540a:	f04f 0300 	mov.w	r3, #0
 800540e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005412:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005416:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800541a:	4690      	mov	r8, r2
 800541c:	4699      	mov	r9, r3
 800541e:	4623      	mov	r3, r4
 8005420:	eb18 0303 	adds.w	r3, r8, r3
 8005424:	60bb      	str	r3, [r7, #8]
 8005426:	462b      	mov	r3, r5
 8005428:	eb49 0303 	adc.w	r3, r9, r3
 800542c:	60fb      	str	r3, [r7, #12]
 800542e:	f04f 0200 	mov.w	r2, #0
 8005432:	f04f 0300 	mov.w	r3, #0
 8005436:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800543a:	4629      	mov	r1, r5
 800543c:	024b      	lsls	r3, r1, #9
 800543e:	4621      	mov	r1, r4
 8005440:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005444:	4621      	mov	r1, r4
 8005446:	024a      	lsls	r2, r1, #9
 8005448:	4610      	mov	r0, r2
 800544a:	4619      	mov	r1, r3
 800544c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800544e:	2200      	movs	r2, #0
 8005450:	62bb      	str	r3, [r7, #40]	; 0x28
 8005452:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005454:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005458:	f7fa fef2 	bl	8000240 <__aeabi_uldivmod>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4613      	mov	r3, r2
 8005462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005464:	e058      	b.n	8005518 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005466:	4b38      	ldr	r3, [pc, #224]	; (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 8005468:	685b      	ldr	r3, [r3, #4]
 800546a:	099b      	lsrs	r3, r3, #6
 800546c:	2200      	movs	r2, #0
 800546e:	4618      	mov	r0, r3
 8005470:	4611      	mov	r1, r2
 8005472:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005476:	623b      	str	r3, [r7, #32]
 8005478:	2300      	movs	r3, #0
 800547a:	627b      	str	r3, [r7, #36]	; 0x24
 800547c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005480:	4642      	mov	r2, r8
 8005482:	464b      	mov	r3, r9
 8005484:	f04f 0000 	mov.w	r0, #0
 8005488:	f04f 0100 	mov.w	r1, #0
 800548c:	0159      	lsls	r1, r3, #5
 800548e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005492:	0150      	lsls	r0, r2, #5
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	4641      	mov	r1, r8
 800549a:	ebb2 0a01 	subs.w	sl, r2, r1
 800549e:	4649      	mov	r1, r9
 80054a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80054a4:	f04f 0200 	mov.w	r2, #0
 80054a8:	f04f 0300 	mov.w	r3, #0
 80054ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80054b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80054b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80054b8:	ebb2 040a 	subs.w	r4, r2, sl
 80054bc:	eb63 050b 	sbc.w	r5, r3, fp
 80054c0:	f04f 0200 	mov.w	r2, #0
 80054c4:	f04f 0300 	mov.w	r3, #0
 80054c8:	00eb      	lsls	r3, r5, #3
 80054ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054ce:	00e2      	lsls	r2, r4, #3
 80054d0:	4614      	mov	r4, r2
 80054d2:	461d      	mov	r5, r3
 80054d4:	4643      	mov	r3, r8
 80054d6:	18e3      	adds	r3, r4, r3
 80054d8:	603b      	str	r3, [r7, #0]
 80054da:	464b      	mov	r3, r9
 80054dc:	eb45 0303 	adc.w	r3, r5, r3
 80054e0:	607b      	str	r3, [r7, #4]
 80054e2:	f04f 0200 	mov.w	r2, #0
 80054e6:	f04f 0300 	mov.w	r3, #0
 80054ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80054ee:	4629      	mov	r1, r5
 80054f0:	028b      	lsls	r3, r1, #10
 80054f2:	4621      	mov	r1, r4
 80054f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80054f8:	4621      	mov	r1, r4
 80054fa:	028a      	lsls	r2, r1, #10
 80054fc:	4610      	mov	r0, r2
 80054fe:	4619      	mov	r1, r3
 8005500:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005502:	2200      	movs	r2, #0
 8005504:	61bb      	str	r3, [r7, #24]
 8005506:	61fa      	str	r2, [r7, #28]
 8005508:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800550c:	f7fa fe98 	bl	8000240 <__aeabi_uldivmod>
 8005510:	4602      	mov	r2, r0
 8005512:	460b      	mov	r3, r1
 8005514:	4613      	mov	r3, r2
 8005516:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005518:	4b0b      	ldr	r3, [pc, #44]	; (8005548 <HAL_RCC_GetSysClockFreq+0x200>)
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	0c1b      	lsrs	r3, r3, #16
 800551e:	f003 0303 	and.w	r3, r3, #3
 8005522:	3301      	adds	r3, #1
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005528:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800552a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800552c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005530:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005532:	e002      	b.n	800553a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005534:	4b05      	ldr	r3, [pc, #20]	; (800554c <HAL_RCC_GetSysClockFreq+0x204>)
 8005536:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800553a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800553c:	4618      	mov	r0, r3
 800553e:	3750      	adds	r7, #80	; 0x50
 8005540:	46bd      	mov	sp, r7
 8005542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005546:	bf00      	nop
 8005548:	40023800 	.word	0x40023800
 800554c:	00f42400 	.word	0x00f42400
 8005550:	007a1200 	.word	0x007a1200

08005554 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005554:	b480      	push	{r7}
 8005556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005558:	4b03      	ldr	r3, [pc, #12]	; (8005568 <HAL_RCC_GetHCLKFreq+0x14>)
 800555a:	681b      	ldr	r3, [r3, #0]
}
 800555c:	4618      	mov	r0, r3
 800555e:	46bd      	mov	sp, r7
 8005560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005564:	4770      	bx	lr
 8005566:	bf00      	nop
 8005568:	20000004 	.word	0x20000004

0800556c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005570:	f7ff fff0 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 8005574:	4602      	mov	r2, r0
 8005576:	4b05      	ldr	r3, [pc, #20]	; (800558c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	0a9b      	lsrs	r3, r3, #10
 800557c:	f003 0307 	and.w	r3, r3, #7
 8005580:	4903      	ldr	r1, [pc, #12]	; (8005590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005582:	5ccb      	ldrb	r3, [r1, r3]
 8005584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005588:	4618      	mov	r0, r3
 800558a:	bd80      	pop	{r7, pc}
 800558c:	40023800 	.word	0x40023800
 8005590:	080120ec 	.word	0x080120ec

08005594 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005598:	f7ff ffdc 	bl	8005554 <HAL_RCC_GetHCLKFreq>
 800559c:	4602      	mov	r2, r0
 800559e:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	0b5b      	lsrs	r3, r3, #13
 80055a4:	f003 0307 	and.w	r3, r3, #7
 80055a8:	4903      	ldr	r1, [pc, #12]	; (80055b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055aa:	5ccb      	ldrb	r3, [r1, r3]
 80055ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	40023800 	.word	0x40023800
 80055b8:	080120ec 	.word	0x080120ec

080055bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
 80055c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	220f      	movs	r2, #15
 80055ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80055cc:	4b12      	ldr	r3, [pc, #72]	; (8005618 <HAL_RCC_GetClockConfig+0x5c>)
 80055ce:	689b      	ldr	r3, [r3, #8]
 80055d0:	f003 0203 	and.w	r2, r3, #3
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80055d8:	4b0f      	ldr	r3, [pc, #60]	; (8005618 <HAL_RCC_GetClockConfig+0x5c>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80055e4:	4b0c      	ldr	r3, [pc, #48]	; (8005618 <HAL_RCC_GetClockConfig+0x5c>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80055f0:	4b09      	ldr	r3, [pc, #36]	; (8005618 <HAL_RCC_GetClockConfig+0x5c>)
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	08db      	lsrs	r3, r3, #3
 80055f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80055fe:	4b07      	ldr	r3, [pc, #28]	; (800561c <HAL_RCC_GetClockConfig+0x60>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 020f 	and.w	r2, r3, #15
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	601a      	str	r2, [r3, #0]
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	40023800 	.word	0x40023800
 800561c:	40023c00 	.word	0x40023c00

08005620 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b088      	sub	sp, #32
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005628:	2300      	movs	r3, #0
 800562a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005630:	2300      	movs	r3, #0
 8005632:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005634:	2300      	movs	r3, #0
 8005636:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005638:	2300      	movs	r3, #0
 800563a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f003 0301 	and.w	r3, r3, #1
 8005644:	2b00      	cmp	r3, #0
 8005646:	d012      	beq.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005648:	4b69      	ldr	r3, [pc, #420]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	4a68      	ldr	r2, [pc, #416]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800564e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005652:	6093      	str	r3, [r2, #8]
 8005654:	4b66      	ldr	r3, [pc, #408]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005656:	689a      	ldr	r2, [r3, #8]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800565c:	4964      	ldr	r1, [pc, #400]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800565e:	4313      	orrs	r3, r2
 8005660:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005666:	2b00      	cmp	r3, #0
 8005668:	d101      	bne.n	800566e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800566a:	2301      	movs	r3, #1
 800566c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005676:	2b00      	cmp	r3, #0
 8005678:	d017      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800567a:	4b5d      	ldr	r3, [pc, #372]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800567c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005680:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005688:	4959      	ldr	r1, [pc, #356]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800568a:	4313      	orrs	r3, r2
 800568c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005694:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005698:	d101      	bne.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800569a:	2301      	movs	r3, #1
 800569c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d101      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80056a6:	2301      	movs	r3, #1
 80056a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d017      	beq.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056b6:	4b4e      	ldr	r3, [pc, #312]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c4:	494a      	ldr	r1, [pc, #296]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80056c6:	4313      	orrs	r3, r2
 80056c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80056d4:	d101      	bne.n	80056da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80056d6:	2301      	movs	r3, #1
 80056d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d101      	bne.n	80056e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80056e2:	2301      	movs	r3, #1
 80056e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80056f2:	2301      	movs	r3, #1
 80056f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0320 	and.w	r3, r3, #32
 80056fe:	2b00      	cmp	r3, #0
 8005700:	f000 808b 	beq.w	800581a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005704:	4b3a      	ldr	r3, [pc, #232]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005708:	4a39      	ldr	r2, [pc, #228]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800570a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800570e:	6413      	str	r3, [r2, #64]	; 0x40
 8005710:	4b37      	ldr	r3, [pc, #220]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005718:	60bb      	str	r3, [r7, #8]
 800571a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800571c:	4b35      	ldr	r3, [pc, #212]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a34      	ldr	r2, [pc, #208]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005726:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005728:	f7fc f9ba 	bl	8001aa0 <HAL_GetTick>
 800572c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800572e:	e008      	b.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005730:	f7fc f9b6 	bl	8001aa0 <HAL_GetTick>
 8005734:	4602      	mov	r2, r0
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	1ad3      	subs	r3, r2, r3
 800573a:	2b64      	cmp	r3, #100	; 0x64
 800573c:	d901      	bls.n	8005742 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e38f      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005742:	4b2c      	ldr	r3, [pc, #176]	; (80057f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574a:	2b00      	cmp	r3, #0
 800574c:	d0f0      	beq.n	8005730 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800574e:	4b28      	ldr	r3, [pc, #160]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005756:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d035      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	429a      	cmp	r2, r3
 800576a:	d02e      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800576c:	4b20      	ldr	r3, [pc, #128]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800576e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005774:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005776:	4b1e      	ldr	r3, [pc, #120]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005778:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800577a:	4a1d      	ldr	r2, [pc, #116]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800577c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005780:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005782:	4b1b      	ldr	r3, [pc, #108]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005786:	4a1a      	ldr	r2, [pc, #104]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800578c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800578e:	4a18      	ldr	r2, [pc, #96]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005794:	4b16      	ldr	r3, [pc, #88]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005796:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	2b01      	cmp	r3, #1
 800579e:	d114      	bne.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a0:	f7fc f97e 	bl	8001aa0 <HAL_GetTick>
 80057a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057a6:	e00a      	b.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057a8:	f7fc f97a 	bl	8001aa0 <HAL_GetTick>
 80057ac:	4602      	mov	r2, r0
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	1ad3      	subs	r3, r2, r3
 80057b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d901      	bls.n	80057be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80057ba:	2303      	movs	r3, #3
 80057bc:	e351      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057be:	4b0c      	ldr	r3, [pc, #48]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d0ee      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80057d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80057d6:	d111      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80057d8:	4b05      	ldr	r3, [pc, #20]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80057e4:	4b04      	ldr	r3, [pc, #16]	; (80057f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80057e6:	400b      	ands	r3, r1
 80057e8:	4901      	ldr	r1, [pc, #4]	; (80057f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80057ea:	4313      	orrs	r3, r2
 80057ec:	608b      	str	r3, [r1, #8]
 80057ee:	e00b      	b.n	8005808 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80057f0:	40023800 	.word	0x40023800
 80057f4:	40007000 	.word	0x40007000
 80057f8:	0ffffcff 	.word	0x0ffffcff
 80057fc:	4bac      	ldr	r3, [pc, #688]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	4aab      	ldr	r2, [pc, #684]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005802:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005806:	6093      	str	r3, [r2, #8]
 8005808:	4ba9      	ldr	r3, [pc, #676]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800580a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005810:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005814:	49a6      	ldr	r1, [pc, #664]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005816:	4313      	orrs	r3, r2
 8005818:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f003 0310 	and.w	r3, r3, #16
 8005822:	2b00      	cmp	r3, #0
 8005824:	d010      	beq.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005826:	4ba2      	ldr	r3, [pc, #648]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005828:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800582c:	4aa0      	ldr	r2, [pc, #640]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800582e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005832:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005836:	4b9e      	ldr	r3, [pc, #632]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005838:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005840:	499b      	ldr	r1, [pc, #620]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005842:	4313      	orrs	r3, r2
 8005844:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00a      	beq.n	800586a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005854:	4b96      	ldr	r3, [pc, #600]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800585a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005862:	4993      	ldr	r1, [pc, #588]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005864:	4313      	orrs	r3, r2
 8005866:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00a      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005876:	4b8e      	ldr	r3, [pc, #568]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005878:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800587c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005884:	498a      	ldr	r1, [pc, #552]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005886:	4313      	orrs	r3, r2
 8005888:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d00a      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005898:	4b85      	ldr	r3, [pc, #532]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800589a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800589e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80058a6:	4982      	ldr	r1, [pc, #520]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00a      	beq.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80058ba:	4b7d      	ldr	r3, [pc, #500]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80058c8:	4979      	ldr	r1, [pc, #484]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ca:	4313      	orrs	r3, r2
 80058cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d00a      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058dc:	4b74      	ldr	r3, [pc, #464]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e2:	f023 0203 	bic.w	r2, r3, #3
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058ea:	4971      	ldr	r1, [pc, #452]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80058ec:	4313      	orrs	r3, r2
 80058ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d00a      	beq.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80058fe:	4b6c      	ldr	r3, [pc, #432]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005900:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005904:	f023 020c 	bic.w	r2, r3, #12
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800590c:	4968      	ldr	r1, [pc, #416]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800590e:	4313      	orrs	r3, r2
 8005910:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00a      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005920:	4b63      	ldr	r3, [pc, #396]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005926:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800592e:	4960      	ldr	r1, [pc, #384]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005930:	4313      	orrs	r3, r2
 8005932:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00a      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005942:	4b5b      	ldr	r3, [pc, #364]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005944:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005948:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005950:	4957      	ldr	r1, [pc, #348]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005952:	4313      	orrs	r3, r2
 8005954:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00a      	beq.n	800597a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005964:	4b52      	ldr	r3, [pc, #328]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800596a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005972:	494f      	ldr	r1, [pc, #316]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005974:	4313      	orrs	r3, r2
 8005976:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00a      	beq.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005986:	4b4a      	ldr	r3, [pc, #296]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005988:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800598c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005994:	4946      	ldr	r1, [pc, #280]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005996:	4313      	orrs	r3, r2
 8005998:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d00a      	beq.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80059a8:	4b41      	ldr	r3, [pc, #260]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b6:	493e      	ldr	r1, [pc, #248]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059b8:	4313      	orrs	r3, r2
 80059ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d00a      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80059ca:	4b39      	ldr	r3, [pc, #228]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059d8:	4935      	ldr	r1, [pc, #212]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059da:	4313      	orrs	r3, r2
 80059dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00a      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80059ec:	4b30      	ldr	r3, [pc, #192]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059f2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80059fa:	492d      	ldr	r1, [pc, #180]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80059fc:	4313      	orrs	r3, r2
 80059fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d011      	beq.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005a0e:	4b28      	ldr	r3, [pc, #160]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a14:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a1c:	4924      	ldr	r1, [pc, #144]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a2c:	d101      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f003 0308 	and.w	r3, r3, #8
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d001      	beq.n	8005a42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00a      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a4e:	4b18      	ldr	r3, [pc, #96]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a54:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a5c:	4914      	ldr	r1, [pc, #80]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d00b      	beq.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a70:	4b0f      	ldr	r3, [pc, #60]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a80:	490b      	ldr	r1, [pc, #44]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a82:	4313      	orrs	r3, r2
 8005a84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00f      	beq.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8005a94:	4b06      	ldr	r3, [pc, #24]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a9a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005aa4:	4902      	ldr	r1, [pc, #8]	; (8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005aac:	e002      	b.n	8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8005aae:	bf00      	nop
 8005ab0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00b      	beq.n	8005ad8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005ac0:	4b8a      	ldr	r3, [pc, #552]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ac2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005ac6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad0:	4986      	ldr	r1, [pc, #536]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00b      	beq.n	8005afc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005ae4:	4b81      	ldr	r3, [pc, #516]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005ae6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005af4:	497d      	ldr	r1, [pc, #500]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005af6:	4313      	orrs	r3, r2
 8005af8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	d006      	beq.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f000 80d6 	beq.w	8005cbc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005b10:	4b76      	ldr	r3, [pc, #472]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a75      	ldr	r2, [pc, #468]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b1c:	f7fb ffc0 	bl	8001aa0 <HAL_GetTick>
 8005b20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b22:	e008      	b.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005b24:	f7fb ffbc 	bl	8001aa0 <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	2b64      	cmp	r3, #100	; 0x64
 8005b30:	d901      	bls.n	8005b36 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005b32:	2303      	movs	r3, #3
 8005b34:	e195      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005b36:	4b6d      	ldr	r3, [pc, #436]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f0      	bne.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d021      	beq.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d11d      	bne.n	8005b92 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005b56:	4b65      	ldr	r3, [pc, #404]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b5c:	0c1b      	lsrs	r3, r3, #16
 8005b5e:	f003 0303 	and.w	r3, r3, #3
 8005b62:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005b64:	4b61      	ldr	r3, [pc, #388]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b6a:	0e1b      	lsrs	r3, r3, #24
 8005b6c:	f003 030f 	and.w	r3, r3, #15
 8005b70:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	019a      	lsls	r2, r3, #6
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	041b      	lsls	r3, r3, #16
 8005b7c:	431a      	orrs	r2, r3
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	061b      	lsls	r3, r3, #24
 8005b82:	431a      	orrs	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	071b      	lsls	r3, r3, #28
 8005b8a:	4958      	ldr	r1, [pc, #352]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d004      	beq.n	8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ba2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ba6:	d00a      	beq.n	8005bbe <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d02e      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bbc:	d129      	bne.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005bbe:	4b4b      	ldr	r3, [pc, #300]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bc4:	0c1b      	lsrs	r3, r3, #16
 8005bc6:	f003 0303 	and.w	r3, r3, #3
 8005bca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005bcc:	4b47      	ldr	r3, [pc, #284]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bd2:	0f1b      	lsrs	r3, r3, #28
 8005bd4:	f003 0307 	and.w	r3, r3, #7
 8005bd8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	019a      	lsls	r2, r3, #6
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	041b      	lsls	r3, r3, #16
 8005be4:	431a      	orrs	r2, r3
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	061b      	lsls	r3, r3, #24
 8005bec:	431a      	orrs	r2, r3
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	071b      	lsls	r3, r3, #28
 8005bf2:	493e      	ldr	r1, [pc, #248]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bf4:	4313      	orrs	r3, r2
 8005bf6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005bfa:	4b3c      	ldr	r3, [pc, #240]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005bfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c00:	f023 021f 	bic.w	r2, r3, #31
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c08:	3b01      	subs	r3, #1
 8005c0a:	4938      	ldr	r1, [pc, #224]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d01d      	beq.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005c1e:	4b33      	ldr	r3, [pc, #204]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c24:	0e1b      	lsrs	r3, r3, #24
 8005c26:	f003 030f 	and.w	r3, r3, #15
 8005c2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005c2c:	4b2f      	ldr	r3, [pc, #188]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c32:	0f1b      	lsrs	r3, r3, #28
 8005c34:	f003 0307 	and.w	r3, r3, #7
 8005c38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	019a      	lsls	r2, r3, #6
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	691b      	ldr	r3, [r3, #16]
 8005c44:	041b      	lsls	r3, r3, #16
 8005c46:	431a      	orrs	r2, r3
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	061b      	lsls	r3, r3, #24
 8005c4c:	431a      	orrs	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	071b      	lsls	r3, r3, #28
 8005c52:	4926      	ldr	r1, [pc, #152]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c54:	4313      	orrs	r3, r2
 8005c56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d011      	beq.n	8005c8a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	019a      	lsls	r2, r3, #6
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	041b      	lsls	r3, r3, #16
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	68db      	ldr	r3, [r3, #12]
 8005c78:	061b      	lsls	r3, r3, #24
 8005c7a:	431a      	orrs	r2, r3
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	071b      	lsls	r3, r3, #28
 8005c82:	491a      	ldr	r1, [pc, #104]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c84:	4313      	orrs	r3, r2
 8005c86:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005c8a:	4b18      	ldr	r3, [pc, #96]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a17      	ldr	r2, [pc, #92]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005c90:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c96:	f7fb ff03 	bl	8001aa0 <HAL_GetTick>
 8005c9a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005c9c:	e008      	b.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005c9e:	f7fb feff 	bl	8001aa0 <HAL_GetTick>
 8005ca2:	4602      	mov	r2, r0
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	1ad3      	subs	r3, r2, r3
 8005ca8:	2b64      	cmp	r3, #100	; 0x64
 8005caa:	d901      	bls.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005cac:	2303      	movs	r3, #3
 8005cae:	e0d8      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005cb0:	4b0e      	ldr	r3, [pc, #56]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d0f0      	beq.n	8005c9e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005cbc:	69bb      	ldr	r3, [r7, #24]
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	f040 80ce 	bne.w	8005e60 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005cc4:	4b09      	ldr	r3, [pc, #36]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a08      	ldr	r2, [pc, #32]	; (8005cec <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005cca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005cce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd0:	f7fb fee6 	bl	8001aa0 <HAL_GetTick>
 8005cd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cd6:	e00b      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005cd8:	f7fb fee2 	bl	8001aa0 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	2b64      	cmp	r3, #100	; 0x64
 8005ce4:	d904      	bls.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e0bb      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005cea:	bf00      	nop
 8005cec:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005cf0:	4b5e      	ldr	r3, [pc, #376]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cf8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005cfc:	d0ec      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d003      	beq.n	8005d12 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d009      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d02e      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d12a      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005d26:	4b51      	ldr	r3, [pc, #324]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2c:	0c1b      	lsrs	r3, r3, #16
 8005d2e:	f003 0303 	and.w	r3, r3, #3
 8005d32:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005d34:	4b4d      	ldr	r3, [pc, #308]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d3a:	0f1b      	lsrs	r3, r3, #28
 8005d3c:	f003 0307 	and.w	r3, r3, #7
 8005d40:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	019a      	lsls	r2, r3, #6
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	041b      	lsls	r3, r3, #16
 8005d4c:	431a      	orrs	r2, r3
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	061b      	lsls	r3, r3, #24
 8005d54:	431a      	orrs	r2, r3
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	071b      	lsls	r3, r3, #28
 8005d5a:	4944      	ldr	r1, [pc, #272]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005d62:	4b42      	ldr	r3, [pc, #264]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005d68:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d70:	3b01      	subs	r3, #1
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	493d      	ldr	r1, [pc, #244]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d022      	beq.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d8c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d90:	d11d      	bne.n	8005dce <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005d92:	4b36      	ldr	r3, [pc, #216]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d98:	0e1b      	lsrs	r3, r3, #24
 8005d9a:	f003 030f 	and.w	r3, r3, #15
 8005d9e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005da0:	4b32      	ldr	r3, [pc, #200]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005da6:	0f1b      	lsrs	r3, r3, #28
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	019a      	lsls	r2, r3, #6
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	041b      	lsls	r3, r3, #16
 8005dba:	431a      	orrs	r2, r3
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	061b      	lsls	r3, r3, #24
 8005dc0:	431a      	orrs	r2, r3
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	071b      	lsls	r3, r3, #28
 8005dc6:	4929      	ldr	r1, [pc, #164]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d028      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005dda:	4b24      	ldr	r3, [pc, #144]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de0:	0e1b      	lsrs	r3, r3, #24
 8005de2:	f003 030f 	and.w	r3, r3, #15
 8005de6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005de8:	4b20      	ldr	r3, [pc, #128]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005dea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dee:	0c1b      	lsrs	r3, r3, #16
 8005df0:	f003 0303 	and.w	r3, r3, #3
 8005df4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	019a      	lsls	r2, r3, #6
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	041b      	lsls	r3, r3, #16
 8005e00:	431a      	orrs	r2, r3
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	061b      	lsls	r3, r3, #24
 8005e06:	431a      	orrs	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	69db      	ldr	r3, [r3, #28]
 8005e0c:	071b      	lsls	r3, r3, #28
 8005e0e:	4917      	ldr	r1, [pc, #92]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005e16:	4b15      	ldr	r3, [pc, #84]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e18:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005e1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e24:	4911      	ldr	r1, [pc, #68]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005e2c:	4b0f      	ldr	r3, [pc, #60]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a0e      	ldr	r2, [pc, #56]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e36:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e38:	f7fb fe32 	bl	8001aa0 <HAL_GetTick>
 8005e3c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e3e:	e008      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005e40:	f7fb fe2e 	bl	8001aa0 <HAL_GetTick>
 8005e44:	4602      	mov	r2, r0
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	2b64      	cmp	r3, #100	; 0x64
 8005e4c:	d901      	bls.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e4e:	2303      	movs	r3, #3
 8005e50:	e007      	b.n	8005e62 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005e52:	4b06      	ldr	r3, [pc, #24]	; (8005e6c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e5e:	d1ef      	bne.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3720      	adds	r7, #32
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	40023800 	.word	0x40023800

08005e70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d101      	bne.n	8005e82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e09d      	b.n	8005fbe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d108      	bne.n	8005e9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e92:	d009      	beq.n	8005ea8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2200      	movs	r2, #0
 8005e98:	61da      	str	r2, [r3, #28]
 8005e9a:	e005      	b.n	8005ea8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d106      	bne.n	8005ec8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ec2:	6878      	ldr	r0, [r7, #4]
 8005ec4:	f7fb faaa 	bl	800141c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2202      	movs	r2, #2
 8005ecc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	681a      	ldr	r2, [r3, #0]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ede:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68db      	ldr	r3, [r3, #12]
 8005ee4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ee8:	d902      	bls.n	8005ef0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005eea:	2300      	movs	r3, #0
 8005eec:	60fb      	str	r3, [r7, #12]
 8005eee:	e002      	b.n	8005ef6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005ef0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ef4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005efe:	d007      	beq.n	8005f10 <HAL_SPI_Init+0xa0>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005f08:	d002      	beq.n	8005f10 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	689b      	ldr	r3, [r3, #8]
 8005f1c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005f20:	431a      	orrs	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	f003 0302 	and.w	r3, r3, #2
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	695b      	ldr	r3, [r3, #20]
 8005f30:	f003 0301 	and.w	r3, r3, #1
 8005f34:	431a      	orrs	r2, r3
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	699b      	ldr	r3, [r3, #24]
 8005f3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005f48:	431a      	orrs	r2, r3
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f52:	ea42 0103 	orr.w	r1, r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	430a      	orrs	r2, r1
 8005f64:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	0c1b      	lsrs	r3, r3, #16
 8005f6c:	f003 0204 	and.w	r2, r3, #4
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f74:	f003 0310 	and.w	r3, r3, #16
 8005f78:	431a      	orrs	r2, r3
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f7e:	f003 0308 	and.w	r3, r3, #8
 8005f82:	431a      	orrs	r2, r3
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005f8c:	ea42 0103 	orr.w	r1, r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	430a      	orrs	r2, r1
 8005f9c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	69da      	ldr	r2, [r3, #28]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005fbc:	2300      	movs	r3, #0
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3710      	adds	r7, #16
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
	...

08005fc8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b086      	sub	sp, #24
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	4613      	mov	r3, r2
 8005fd4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d110      	bne.n	8006004 <HAL_SPI_Receive_DMA+0x3c>
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fea:	d10b      	bne.n	8006004 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2204      	movs	r2, #4
 8005ff0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8005ff4:	88fb      	ldrh	r3, [r7, #6]
 8005ff6:	68ba      	ldr	r2, [r7, #8]
 8005ff8:	68b9      	ldr	r1, [r7, #8]
 8005ffa:	68f8      	ldr	r0, [r7, #12]
 8005ffc:	f000 f908 	bl	8006210 <HAL_SPI_TransmitReceive_DMA>
 8006000:	4603      	mov	r3, r0
 8006002:	e0fb      	b.n	80061fc <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800600a:	2b01      	cmp	r3, #1
 800600c:	d101      	bne.n	8006012 <HAL_SPI_Receive_DMA+0x4a>
 800600e:	2302      	movs	r3, #2
 8006010:	e0f4      	b.n	80061fc <HAL_SPI_Receive_DMA+0x234>
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2201      	movs	r2, #1
 8006016:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b01      	cmp	r3, #1
 8006024:	d002      	beq.n	800602c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8006026:	2302      	movs	r3, #2
 8006028:	75fb      	strb	r3, [r7, #23]
    goto error;
 800602a:	e0e2      	b.n	80061f2 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d002      	beq.n	8006038 <HAL_SPI_Receive_DMA+0x70>
 8006032:	88fb      	ldrh	r3, [r7, #6]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d102      	bne.n	800603e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8006038:	2301      	movs	r3, #1
 800603a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800603c:	e0d9      	b.n	80061f2 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2204      	movs	r2, #4
 8006042:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	2200      	movs	r2, #0
 800604a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	68ba      	ldr	r2, [r7, #8]
 8006050:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	88fa      	ldrh	r2, [r7, #6]
 8006056:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	88fa      	ldrh	r2, [r7, #6]
 800605e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2200      	movs	r2, #0
 8006078:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006082:	d10f      	bne.n	80060a4 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006092:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80060a2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	685a      	ldr	r2, [r3, #4]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060b2:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80060bc:	d908      	bls.n	80060d0 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	685a      	ldr	r2, [r3, #4]
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060cc:	605a      	str	r2, [r3, #4]
 80060ce:	e042      	b.n	8006156 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	685a      	ldr	r2, [r3, #4]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80060de:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e4:	699b      	ldr	r3, [r3, #24]
 80060e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060ea:	d134      	bne.n	8006156 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	685a      	ldr	r2, [r3, #4]
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80060fa:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006102:	b29b      	uxth	r3, r3
 8006104:	f003 0301 	and.w	r3, r3, #1
 8006108:	2b00      	cmp	r3, #0
 800610a:	d111      	bne.n	8006130 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800611a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006122:	b29b      	uxth	r3, r3
 8006124:	085b      	lsrs	r3, r3, #1
 8006126:	b29a      	uxth	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800612e:	e012      	b.n	8006156 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800613e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006146:	b29b      	uxth	r3, r3
 8006148:	085b      	lsrs	r3, r3, #1
 800614a:	b29b      	uxth	r3, r3
 800614c:	3301      	adds	r3, #1
 800614e:	b29a      	uxth	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800615a:	4a2a      	ldr	r2, [pc, #168]	; (8006204 <HAL_SPI_Receive_DMA+0x23c>)
 800615c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006162:	4a29      	ldr	r2, [pc, #164]	; (8006208 <HAL_SPI_Receive_DMA+0x240>)
 8006164:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800616a:	4a28      	ldr	r2, [pc, #160]	; (800620c <HAL_SPI_Receive_DMA+0x244>)
 800616c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006172:	2200      	movs	r2, #0
 8006174:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	330c      	adds	r3, #12
 8006180:	4619      	mov	r1, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006186:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800618e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006190:	f7fc f898 	bl	80022c4 <HAL_DMA_Start_IT>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d00c      	beq.n	80061b4 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800619e:	f043 0210 	orr.w	r2, r3, #16
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2201      	movs	r2, #1
 80061ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80061b2:	e01e      	b.n	80061f2 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061be:	2b40      	cmp	r3, #64	; 0x40
 80061c0:	d007      	beq.n	80061d2 <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061d0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	685a      	ldr	r2, [r3, #4]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f042 0220 	orr.w	r2, r2, #32
 80061e0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f042 0201 	orr.w	r2, r2, #1
 80061f0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80061fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80061fc:	4618      	mov	r0, r3
 80061fe:	3718      	adds	r7, #24
 8006200:	46bd      	mov	sp, r7
 8006202:	bd80      	pop	{r7, pc}
 8006204:	08006733 	.word	0x08006733
 8006208:	080065f7 	.word	0x080065f7
 800620c:	0800676b 	.word	0x0800676b

08006210 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
 800621c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800621e:	2300      	movs	r3, #0
 8006220:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006228:	2b01      	cmp	r3, #1
 800622a:	d101      	bne.n	8006230 <HAL_SPI_TransmitReceive_DMA+0x20>
 800622c:	2302      	movs	r3, #2
 800622e:	e16c      	b.n	800650a <HAL_SPI_TransmitReceive_DMA+0x2fa>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800623e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8006246:	7dbb      	ldrb	r3, [r7, #22]
 8006248:	2b01      	cmp	r3, #1
 800624a:	d00d      	beq.n	8006268 <HAL_SPI_TransmitReceive_DMA+0x58>
 800624c:	693b      	ldr	r3, [r7, #16]
 800624e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006252:	d106      	bne.n	8006262 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d102      	bne.n	8006262 <HAL_SPI_TransmitReceive_DMA+0x52>
 800625c:	7dbb      	ldrb	r3, [r7, #22]
 800625e:	2b04      	cmp	r3, #4
 8006260:	d002      	beq.n	8006268 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 8006262:	2302      	movs	r3, #2
 8006264:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006266:	e14b      	b.n	8006500 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d005      	beq.n	800627a <HAL_SPI_TransmitReceive_DMA+0x6a>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d002      	beq.n	800627a <HAL_SPI_TransmitReceive_DMA+0x6a>
 8006274:	887b      	ldrh	r3, [r7, #2]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d102      	bne.n	8006280 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800627e:	e13f      	b.n	8006500 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006286:	b2db      	uxtb	r3, r3
 8006288:	2b04      	cmp	r3, #4
 800628a:	d003      	beq.n	8006294 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2205      	movs	r2, #5
 8006290:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	68ba      	ldr	r2, [r7, #8]
 800629e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	887a      	ldrh	r2, [r7, #2]
 80062a4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	887a      	ldrh	r2, [r7, #2]
 80062aa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	887a      	ldrh	r2, [r7, #2]
 80062b6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	887a      	ldrh	r2, [r7, #2]
 80062be:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685a      	ldr	r2, [r3, #4]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 80062dc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	68db      	ldr	r3, [r3, #12]
 80062e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80062e6:	d908      	bls.n	80062fa <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	685a      	ldr	r2, [r3, #4]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80062f6:	605a      	str	r2, [r3, #4]
 80062f8:	e06f      	b.n	80063da <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	685a      	ldr	r2, [r3, #4]
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006308:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006314:	d126      	bne.n	8006364 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800631a:	f003 0301 	and.w	r3, r3, #1
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10f      	bne.n	8006342 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	685a      	ldr	r2, [r3, #4]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006330:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006336:	b29b      	uxth	r3, r3
 8006338:	085b      	lsrs	r3, r3, #1
 800633a:	b29a      	uxth	r2, r3
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006340:	e010      	b.n	8006364 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	685a      	ldr	r2, [r3, #4]
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006350:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006356:	b29b      	uxth	r3, r3
 8006358:	085b      	lsrs	r3, r3, #1
 800635a:	b29b      	uxth	r3, r3
 800635c:	3301      	adds	r3, #1
 800635e:	b29a      	uxth	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006368:	699b      	ldr	r3, [r3, #24]
 800636a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800636e:	d134      	bne.n	80063da <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	685a      	ldr	r2, [r3, #4]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800637e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006386:	b29b      	uxth	r3, r3
 8006388:	f003 0301 	and.w	r3, r3, #1
 800638c:	2b00      	cmp	r3, #0
 800638e:	d111      	bne.n	80063b4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685a      	ldr	r2, [r3, #4]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800639e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063a6:	b29b      	uxth	r3, r3
 80063a8:	085b      	lsrs	r3, r3, #1
 80063aa:	b29a      	uxth	r2, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80063b2:	e012      	b.n	80063da <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685a      	ldr	r2, [r3, #4]
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80063c2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	085b      	lsrs	r3, r3, #1
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	3301      	adds	r3, #1
 80063d2:	b29a      	uxth	r2, r3
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80063e0:	b2db      	uxtb	r3, r3
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	d108      	bne.n	80063f8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063ea:	4a4a      	ldr	r2, [pc, #296]	; (8006514 <HAL_SPI_TransmitReceive_DMA+0x304>)
 80063ec:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063f2:	4a49      	ldr	r2, [pc, #292]	; (8006518 <HAL_SPI_TransmitReceive_DMA+0x308>)
 80063f4:	63da      	str	r2, [r3, #60]	; 0x3c
 80063f6:	e007      	b.n	8006408 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80063fc:	4a47      	ldr	r2, [pc, #284]	; (800651c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 80063fe:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006404:	4a46      	ldr	r2, [pc, #280]	; (8006520 <HAL_SPI_TransmitReceive_DMA+0x310>)
 8006406:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800640c:	4a45      	ldr	r2, [pc, #276]	; (8006524 <HAL_SPI_TransmitReceive_DMA+0x314>)
 800640e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006414:	2200      	movs	r2, #0
 8006416:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	330c      	adds	r3, #12
 8006422:	4619      	mov	r1, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006428:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006430:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8006432:	f7fb ff47 	bl	80022c4 <HAL_DMA_Start_IT>
 8006436:	4603      	mov	r3, r0
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00c      	beq.n	8006456 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006440:	f043 0210 	orr.w	r2, r3, #16
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2201      	movs	r2, #1
 8006450:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 8006454:	e054      	b.n	8006500 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685a      	ldr	r2, [r3, #4]
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f042 0201 	orr.w	r2, r2, #1
 8006464:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800646a:	2200      	movs	r2, #0
 800646c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006472:	2200      	movs	r2, #0
 8006474:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800647a:	2200      	movs	r2, #0
 800647c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006482:	2200      	movs	r2, #0
 8006484:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800648e:	4619      	mov	r1, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	330c      	adds	r3, #12
 8006496:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800649c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800649e:	f7fb ff11 	bl	80022c4 <HAL_DMA_Start_IT>
 80064a2:	4603      	mov	r3, r0
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d00c      	beq.n	80064c2 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064ac:	f043 0210 	orr.w	r2, r3, #16
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 80064b4:	2301      	movs	r3, #1
 80064b6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 80064c0:	e01e      	b.n	8006500 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064cc:	2b40      	cmp	r3, #64	; 0x40
 80064ce:	d007      	beq.n	80064e0 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064de:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f042 0220 	orr.w	r2, r2, #32
 80064ee:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685a      	ldr	r2, [r3, #4]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	f042 0202 	orr.w	r2, r2, #2
 80064fe:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	2200      	movs	r2, #0
 8006504:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006508:	7dfb      	ldrb	r3, [r7, #23]
}
 800650a:	4618      	mov	r0, r3
 800650c:	3718      	adds	r7, #24
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	08006733 	.word	0x08006733
 8006518:	080065f7 	.word	0x080065f7
 800651c:	0800674f 	.word	0x0800674f
 8006520:	080066a1 	.word	0x080066a1
 8006524:	0800676b 	.word	0x0800676b

08006528 <HAL_SPI_DMAStop>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DMAStop(SPI_HandleTypeDef *hspi)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006530:	2300      	movs	r3, #0
 8006532:	73fb      	strb	r3, [r7, #15]
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_SPI_TxCpltCallback() or HAL_SPI_RxCpltCallback() or HAL_SPI_TxRxCpltCallback()
     */

  /* Abort the SPI DMA tx Stream/Channel  */
  if (hspi->hdmatx != NULL)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00f      	beq.n	800655c <HAL_SPI_DMAStop+0x34>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmatx))
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006540:	4618      	mov	r0, r3
 8006542:	f7fb ff1f 	bl	8002384 <HAL_DMA_Abort>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d007      	beq.n	800655c <HAL_SPI_DMAStop+0x34>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006550:	f043 0210 	orr.w	r2, r3, #16
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	73fb      	strb	r3, [r7, #15]
    }
  }
  /* Abort the SPI DMA rx Stream/Channel  */
  if (hspi->hdmarx != NULL)
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006560:	2b00      	cmp	r3, #0
 8006562:	d00f      	beq.n	8006584 <HAL_SPI_DMAStop+0x5c>
  {
    if (HAL_OK != HAL_DMA_Abort(hspi->hdmarx))
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006568:	4618      	mov	r0, r3
 800656a:	f7fb ff0b 	bl	8002384 <HAL_DMA_Abort>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d007      	beq.n	8006584 <HAL_SPI_DMAStop+0x5c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006578:	f043 0210 	orr.w	r2, r3, #16
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	661a      	str	r2, [r3, #96]	; 0x60
      errorcode = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	73fb      	strb	r3, [r7, #15]
    }
  }

  /* Disable the SPI DMA Tx & Rx requests */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 0203 	bic.w	r2, r2, #3
 8006592:	605a      	str	r2, [r3, #4]
  hspi->State = HAL_SPI_STATE_READY;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  return errorcode;
 800659c:	7bfb      	ldrb	r3, [r7, #15]
}
 800659e:	4618      	mov	r0, r3
 80065a0:	3710      	adds	r7, #16
 80065a2:	46bd      	mov	sp, r7
 80065a4:	bd80      	pop	{r7, pc}

080065a6 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80065a6:	b480      	push	{r7}
 80065a8:	b083      	sub	sp, #12
 80065aa:	af00      	add	r7, sp, #0
 80065ac:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80065ae:	bf00      	nop
 80065b0:	370c      	adds	r7, #12
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr

080065ba <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80065ba:	b480      	push	{r7}
 80065bc:	b083      	sub	sp, #12
 80065be:	af00      	add	r7, sp, #0
 80065c0:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80065c2:	bf00      	nop
 80065c4:	370c      	adds	r7, #12
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b083      	sub	sp, #12
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80065d6:	bf00      	nop
 80065d8:	370c      	adds	r7, #12
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr

080065e2 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80065e2:	b480      	push	{r7}
 80065e4:	b083      	sub	sp, #12
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80065ea:	bf00      	nop
 80065ec:	370c      	adds	r7, #12
 80065ee:	46bd      	mov	sp, r7
 80065f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f4:	4770      	bx	lr

080065f6 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80065f6:	b580      	push	{r7, lr}
 80065f8:	b084      	sub	sp, #16
 80065fa:	af00      	add	r7, sp, #0
 80065fc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006602:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006604:	f7fb fa4c 	bl	8001aa0 <HAL_GetTick>
 8006608:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006618:	d03c      	beq.n	8006694 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f022 0220 	bic.w	r2, r2, #32
 8006628:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10d      	bne.n	800664e <SPI_DMAReceiveCplt+0x58>
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	685b      	ldr	r3, [r3, #4]
 8006636:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800663a:	d108      	bne.n	800664e <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	685a      	ldr	r2, [r3, #4]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f022 0203 	bic.w	r2, r2, #3
 800664a:	605a      	str	r2, [r3, #4]
 800664c:	e007      	b.n	800665e <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f022 0201 	bic.w	r2, r2, #1
 800665c:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800665e:	68ba      	ldr	r2, [r7, #8]
 8006660:	2164      	movs	r1, #100	; 0x64
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f000 f9c0 	bl	80069e8 <SPI_EndRxTransaction>
 8006668:	4603      	mov	r3, r0
 800666a:	2b00      	cmp	r3, #0
 800666c:	d002      	beq.n	8006674 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2220      	movs	r2, #32
 8006672:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2201      	movs	r2, #1
 8006680:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800668c:	68f8      	ldr	r0, [r7, #12]
 800668e:	f7ff ffa8 	bl	80065e2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006692:	e002      	b.n	800669a <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f004 fd1d 	bl	800b0d4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066ac:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80066ae:	f7fb f9f7 	bl	8001aa0 <HAL_GetTick>
 80066b2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066c2:	d030      	beq.n	8006726 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f022 0220 	bic.w	r2, r2, #32
 80066d2:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	2164      	movs	r1, #100	; 0x64
 80066d8:	68f8      	ldr	r0, [r7, #12]
 80066da:	f000 fa01 	bl	8006ae0 <SPI_EndRxTxTransaction>
 80066de:	4603      	mov	r3, r0
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d005      	beq.n	80066f0 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066e8:	f043 0220 	orr.w	r2, r3, #32
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	685a      	ldr	r2, [r3, #4]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0203 	bic.w	r2, r2, #3
 80066fe:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	2200      	movs	r2, #0
 800670a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2201      	movs	r2, #1
 8006712:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800671a:	2b00      	cmp	r3, #0
 800671c:	d003      	beq.n	8006726 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f7ff ff5f 	bl	80065e2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006724:	e002      	b.n	800672c <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f7ff ff3d 	bl	80065a6 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800672c:	3710      	adds	r7, #16
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b084      	sub	sp, #16
 8006736:	af00      	add	r7, sp, #0
 8006738:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800673e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f7ff ff3a 	bl	80065ba <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006746:	bf00      	nop
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f7ff ff36 	bl	80065ce <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006762:	bf00      	nop
 8006764:	3710      	adds	r7, #16
 8006766:	46bd      	mov	sp, r7
 8006768:	bd80      	pop	{r7, pc}

0800676a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006776:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	685a      	ldr	r2, [r3, #4]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f022 0203 	bic.w	r2, r2, #3
 8006786:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800678c:	f043 0210 	orr.w	r2, r3, #16
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2201      	movs	r2, #1
 8006798:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800679c:	68f8      	ldr	r0, [r7, #12]
 800679e:	f7ff ff20 	bl	80065e2 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80067a2:	bf00      	nop
 80067a4:	3710      	adds	r7, #16
 80067a6:	46bd      	mov	sp, r7
 80067a8:	bd80      	pop	{r7, pc}
	...

080067ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b088      	sub	sp, #32
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	603b      	str	r3, [r7, #0]
 80067b8:	4613      	mov	r3, r2
 80067ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80067bc:	f7fb f970 	bl	8001aa0 <HAL_GetTick>
 80067c0:	4602      	mov	r2, r0
 80067c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	683a      	ldr	r2, [r7, #0]
 80067c8:	4413      	add	r3, r2
 80067ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80067cc:	f7fb f968 	bl	8001aa0 <HAL_GetTick>
 80067d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80067d2:	4b39      	ldr	r3, [pc, #228]	; (80068b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	015b      	lsls	r3, r3, #5
 80067d8:	0d1b      	lsrs	r3, r3, #20
 80067da:	69fa      	ldr	r2, [r7, #28]
 80067dc:	fb02 f303 	mul.w	r3, r2, r3
 80067e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80067e2:	e054      	b.n	800688e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80067e4:	683b      	ldr	r3, [r7, #0]
 80067e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067ea:	d050      	beq.n	800688e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067ec:	f7fb f958 	bl	8001aa0 <HAL_GetTick>
 80067f0:	4602      	mov	r2, r0
 80067f2:	69bb      	ldr	r3, [r7, #24]
 80067f4:	1ad3      	subs	r3, r2, r3
 80067f6:	69fa      	ldr	r2, [r7, #28]
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d902      	bls.n	8006802 <SPI_WaitFlagStateUntilTimeout+0x56>
 80067fc:	69fb      	ldr	r3, [r7, #28]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d13d      	bne.n	800687e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006810:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800681a:	d111      	bne.n	8006840 <SPI_WaitFlagStateUntilTimeout+0x94>
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006824:	d004      	beq.n	8006830 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	689b      	ldr	r3, [r3, #8]
 800682a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800682e:	d107      	bne.n	8006840 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800683e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006848:	d10f      	bne.n	800686a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006858:	601a      	str	r2, [r3, #0]
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006868:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2201      	movs	r2, #1
 800686e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2200      	movs	r2, #0
 8006876:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e017      	b.n	80068ae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800687e:	697b      	ldr	r3, [r7, #20]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d101      	bne.n	8006888 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006884:	2300      	movs	r3, #0
 8006886:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	3b01      	subs	r3, #1
 800688c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	689a      	ldr	r2, [r3, #8]
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	4013      	ands	r3, r2
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	429a      	cmp	r2, r3
 800689c:	bf0c      	ite	eq
 800689e:	2301      	moveq	r3, #1
 80068a0:	2300      	movne	r3, #0
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	461a      	mov	r2, r3
 80068a6:	79fb      	ldrb	r3, [r7, #7]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d19b      	bne.n	80067e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3720      	adds	r7, #32
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}
 80068b6:	bf00      	nop
 80068b8:	20000004 	.word	0x20000004

080068bc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b08a      	sub	sp, #40	; 0x28
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	607a      	str	r2, [r7, #4]
 80068c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80068ca:	2300      	movs	r3, #0
 80068cc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80068ce:	f7fb f8e7 	bl	8001aa0 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068d6:	1a9b      	subs	r3, r3, r2
 80068d8:	683a      	ldr	r2, [r7, #0]
 80068da:	4413      	add	r3, r2
 80068dc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80068de:	f7fb f8df 	bl	8001aa0 <HAL_GetTick>
 80068e2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	330c      	adds	r3, #12
 80068ea:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80068ec:	4b3d      	ldr	r3, [pc, #244]	; (80069e4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80068ee:	681a      	ldr	r2, [r3, #0]
 80068f0:	4613      	mov	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4413      	add	r3, r2
 80068f6:	00da      	lsls	r2, r3, #3
 80068f8:	1ad3      	subs	r3, r2, r3
 80068fa:	0d1b      	lsrs	r3, r3, #20
 80068fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068fe:	fb02 f303 	mul.w	r3, r2, r3
 8006902:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006904:	e060      	b.n	80069c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006906:	68bb      	ldr	r3, [r7, #8]
 8006908:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800690c:	d107      	bne.n	800691e <SPI_WaitFifoStateUntilTimeout+0x62>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d104      	bne.n	800691e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006914:	69fb      	ldr	r3, [r7, #28]
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	b2db      	uxtb	r3, r3
 800691a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800691c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006924:	d050      	beq.n	80069c8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006926:	f7fb f8bb 	bl	8001aa0 <HAL_GetTick>
 800692a:	4602      	mov	r2, r0
 800692c:	6a3b      	ldr	r3, [r7, #32]
 800692e:	1ad3      	subs	r3, r2, r3
 8006930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006932:	429a      	cmp	r2, r3
 8006934:	d902      	bls.n	800693c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006938:	2b00      	cmp	r3, #0
 800693a:	d13d      	bne.n	80069b8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685a      	ldr	r2, [r3, #4]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800694a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006954:	d111      	bne.n	800697a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800695e:	d004      	beq.n	800696a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	689b      	ldr	r3, [r3, #8]
 8006964:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006968:	d107      	bne.n	800697a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006978:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006982:	d10f      	bne.n	80069a4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	681a      	ldr	r2, [r3, #0]
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069a2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80069b4:	2303      	movs	r3, #3
 80069b6:	e010      	b.n	80069da <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069b8:	69bb      	ldr	r3, [r7, #24]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d101      	bne.n	80069c2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80069be:	2300      	movs	r3, #0
 80069c0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80069c2:	69bb      	ldr	r3, [r7, #24]
 80069c4:	3b01      	subs	r3, #1
 80069c6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689a      	ldr	r2, [r3, #8]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	4013      	ands	r3, r2
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	429a      	cmp	r2, r3
 80069d6:	d196      	bne.n	8006906 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80069d8:	2300      	movs	r3, #0
}
 80069da:	4618      	mov	r0, r3
 80069dc:	3728      	adds	r7, #40	; 0x28
 80069de:	46bd      	mov	sp, r7
 80069e0:	bd80      	pop	{r7, pc}
 80069e2:	bf00      	nop
 80069e4:	20000004 	.word	0x20000004

080069e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b088      	sub	sp, #32
 80069ec:	af02      	add	r7, sp, #8
 80069ee:	60f8      	str	r0, [r7, #12]
 80069f0:	60b9      	str	r1, [r7, #8]
 80069f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069fc:	d111      	bne.n	8006a22 <SPI_EndRxTransaction+0x3a>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	689b      	ldr	r3, [r3, #8]
 8006a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a06:	d004      	beq.n	8006a12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006a10:	d107      	bne.n	8006a22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	685b      	ldr	r3, [r3, #4]
 8006a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a2a:	d112      	bne.n	8006a52 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	2200      	movs	r2, #0
 8006a34:	2180      	movs	r1, #128	; 0x80
 8006a36:	68f8      	ldr	r0, [r7, #12]
 8006a38:	f7ff feb8 	bl	80067ac <SPI_WaitFlagStateUntilTimeout>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d021      	beq.n	8006a86 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a46:	f043 0220 	orr.w	r2, r3, #32
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006a4e:	2303      	movs	r3, #3
 8006a50:	e03d      	b.n	8006ace <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006a52:	4b21      	ldr	r3, [pc, #132]	; (8006ad8 <SPI_EndRxTransaction+0xf0>)
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a21      	ldr	r2, [pc, #132]	; (8006adc <SPI_EndRxTransaction+0xf4>)
 8006a58:	fba2 2303 	umull	r2, r3, r2, r3
 8006a5c:	0d5b      	lsrs	r3, r3, #21
 8006a5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006a62:	fb02 f303 	mul.w	r3, r2, r3
 8006a66:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00a      	beq.n	8006a84 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	3b01      	subs	r3, #1
 8006a72:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	689b      	ldr	r3, [r3, #8]
 8006a7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a7e:	2b80      	cmp	r3, #128	; 0x80
 8006a80:	d0f2      	beq.n	8006a68 <SPI_EndRxTransaction+0x80>
 8006a82:	e000      	b.n	8006a86 <SPI_EndRxTransaction+0x9e>
        break;
 8006a84:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006a8e:	d11d      	bne.n	8006acc <SPI_EndRxTransaction+0xe4>
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	689b      	ldr	r3, [r3, #8]
 8006a94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a98:	d004      	beq.n	8006aa4 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	689b      	ldr	r3, [r3, #8]
 8006a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006aa2:	d113      	bne.n	8006acc <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2200      	movs	r2, #0
 8006aac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006ab0:	68f8      	ldr	r0, [r7, #12]
 8006ab2:	f7ff ff03 	bl	80068bc <SPI_WaitFifoStateUntilTimeout>
 8006ab6:	4603      	mov	r3, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d007      	beq.n	8006acc <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ac0:	f043 0220 	orr.w	r2, r3, #32
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e000      	b.n	8006ace <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3718      	adds	r7, #24
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}
 8006ad6:	bf00      	nop
 8006ad8:	20000004 	.word	0x20000004
 8006adc:	165e9f81 	.word	0x165e9f81

08006ae0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af02      	add	r7, sp, #8
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	2200      	movs	r2, #0
 8006af4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006af8:	68f8      	ldr	r0, [r7, #12]
 8006afa:	f7ff fedf 	bl	80068bc <SPI_WaitFifoStateUntilTimeout>
 8006afe:	4603      	mov	r3, r0
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d007      	beq.n	8006b14 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b08:	f043 0220 	orr.w	r2, r3, #32
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b10:	2303      	movs	r3, #3
 8006b12:	e046      	b.n	8006ba2 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b14:	4b25      	ldr	r3, [pc, #148]	; (8006bac <SPI_EndRxTxTransaction+0xcc>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a25      	ldr	r2, [pc, #148]	; (8006bb0 <SPI_EndRxTxTransaction+0xd0>)
 8006b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8006b1e:	0d5b      	lsrs	r3, r3, #21
 8006b20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006b24:	fb02 f303 	mul.w	r3, r2, r3
 8006b28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006b32:	d112      	bne.n	8006b5a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	9300      	str	r3, [sp, #0]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	2180      	movs	r1, #128	; 0x80
 8006b3e:	68f8      	ldr	r0, [r7, #12]
 8006b40:	f7ff fe34 	bl	80067ac <SPI_WaitFlagStateUntilTimeout>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d016      	beq.n	8006b78 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b4e:	f043 0220 	orr.w	r2, r3, #32
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e023      	b.n	8006ba2 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d00a      	beq.n	8006b76 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	3b01      	subs	r3, #1
 8006b64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	689b      	ldr	r3, [r3, #8]
 8006b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b70:	2b80      	cmp	r3, #128	; 0x80
 8006b72:	d0f2      	beq.n	8006b5a <SPI_EndRxTxTransaction+0x7a>
 8006b74:	e000      	b.n	8006b78 <SPI_EndRxTxTransaction+0x98>
        break;
 8006b76:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	9300      	str	r3, [sp, #0]
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006b84:	68f8      	ldr	r0, [r7, #12]
 8006b86:	f7ff fe99 	bl	80068bc <SPI_WaitFifoStateUntilTimeout>
 8006b8a:	4603      	mov	r3, r0
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d007      	beq.n	8006ba0 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b94:	f043 0220 	orr.w	r2, r3, #32
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b9c:	2303      	movs	r3, #3
 8006b9e:	e000      	b.n	8006ba2 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	20000004 	.word	0x20000004
 8006bb0:	165e9f81 	.word	0x165e9f81

08006bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d101      	bne.n	8006bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006bc2:	2301      	movs	r3, #1
 8006bc4:	e049      	b.n	8006c5a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d106      	bne.n	8006be0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7fa fd00 	bl	80015e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2202      	movs	r2, #2
 8006be4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	3304      	adds	r3, #4
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	4610      	mov	r0, r2
 8006bf4:	f000 ffbe 	bl	8007b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2201      	movs	r2, #1
 8006bfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2201      	movs	r2, #1
 8006c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2201      	movs	r2, #1
 8006c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2201      	movs	r2, #1
 8006c24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2201      	movs	r2, #1
 8006c2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2201      	movs	r2, #1
 8006c44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	2201      	movs	r2, #1
 8006c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c58:	2300      	movs	r3, #0
}
 8006c5a:	4618      	mov	r0, r3
 8006c5c:	3708      	adds	r7, #8
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	bd80      	pop	{r7, pc}
	...

08006c64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b085      	sub	sp, #20
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d001      	beq.n	8006c7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006c78:	2301      	movs	r3, #1
 8006c7a:	e054      	b.n	8006d26 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2202      	movs	r2, #2
 8006c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	68da      	ldr	r2, [r3, #12]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0201 	orr.w	r2, r2, #1
 8006c92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a26      	ldr	r2, [pc, #152]	; (8006d34 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d022      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x80>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ca6:	d01d      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x80>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a22      	ldr	r2, [pc, #136]	; (8006d38 <HAL_TIM_Base_Start_IT+0xd4>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d018      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x80>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a21      	ldr	r2, [pc, #132]	; (8006d3c <HAL_TIM_Base_Start_IT+0xd8>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d013      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x80>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a1f      	ldr	r2, [pc, #124]	; (8006d40 <HAL_TIM_Base_Start_IT+0xdc>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d00e      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x80>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	4a1e      	ldr	r2, [pc, #120]	; (8006d44 <HAL_TIM_Base_Start_IT+0xe0>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d009      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x80>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a1c      	ldr	r2, [pc, #112]	; (8006d48 <HAL_TIM_Base_Start_IT+0xe4>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d004      	beq.n	8006ce4 <HAL_TIM_Base_Start_IT+0x80>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a1b      	ldr	r2, [pc, #108]	; (8006d4c <HAL_TIM_Base_Start_IT+0xe8>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d115      	bne.n	8006d10 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	689a      	ldr	r2, [r3, #8]
 8006cea:	4b19      	ldr	r3, [pc, #100]	; (8006d50 <HAL_TIM_Base_Start_IT+0xec>)
 8006cec:	4013      	ands	r3, r2
 8006cee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	2b06      	cmp	r3, #6
 8006cf4:	d015      	beq.n	8006d22 <HAL_TIM_Base_Start_IT+0xbe>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006cfc:	d011      	beq.n	8006d22 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f042 0201 	orr.w	r2, r2, #1
 8006d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d0e:	e008      	b.n	8006d22 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0201 	orr.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]
 8006d20:	e000      	b.n	8006d24 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006d22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3714      	adds	r7, #20
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d30:	4770      	bx	lr
 8006d32:	bf00      	nop
 8006d34:	40010000 	.word	0x40010000
 8006d38:	40000400 	.word	0x40000400
 8006d3c:	40000800 	.word	0x40000800
 8006d40:	40000c00 	.word	0x40000c00
 8006d44:	40010400 	.word	0x40010400
 8006d48:	40014000 	.word	0x40014000
 8006d4c:	40001800 	.word	0x40001800
 8006d50:	00010007 	.word	0x00010007

08006d54 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b082      	sub	sp, #8
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d101      	bne.n	8006d66 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8006d62:	2301      	movs	r3, #1
 8006d64:	e049      	b.n	8006dfa <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d6c:	b2db      	uxtb	r3, r3
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d106      	bne.n	8006d80 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f841 	bl	8006e02 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2202      	movs	r2, #2
 8006d84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	3304      	adds	r3, #4
 8006d90:	4619      	mov	r1, r3
 8006d92:	4610      	mov	r0, r2
 8006d94:	f000 feee 	bl	8007b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	2201      	movs	r2, #1
 8006db4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	2201      	movs	r2, #1
 8006dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2201      	movs	r2, #1
 8006dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	2201      	movs	r2, #1
 8006dd4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2201      	movs	r2, #1
 8006de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	2201      	movs	r2, #1
 8006dec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006df8:	2300      	movs	r3, #0
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3708      	adds	r7, #8
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	bd80      	pop	{r7, pc}

08006e02 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b083      	sub	sp, #12
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006e0a:	bf00      	nop
 8006e0c:	370c      	adds	r7, #12
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr
	...

08006e18 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b084      	sub	sp, #16
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
 8006e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8006e22:	683b      	ldr	r3, [r7, #0]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d104      	bne.n	8006e32 <HAL_TIM_IC_Start+0x1a>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	e023      	b.n	8006e7a <HAL_TIM_IC_Start+0x62>
 8006e32:	683b      	ldr	r3, [r7, #0]
 8006e34:	2b04      	cmp	r3, #4
 8006e36:	d104      	bne.n	8006e42 <HAL_TIM_IC_Start+0x2a>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006e3e:	b2db      	uxtb	r3, r3
 8006e40:	e01b      	b.n	8006e7a <HAL_TIM_IC_Start+0x62>
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	2b08      	cmp	r3, #8
 8006e46:	d104      	bne.n	8006e52 <HAL_TIM_IC_Start+0x3a>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e4e:	b2db      	uxtb	r3, r3
 8006e50:	e013      	b.n	8006e7a <HAL_TIM_IC_Start+0x62>
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	2b0c      	cmp	r3, #12
 8006e56:	d104      	bne.n	8006e62 <HAL_TIM_IC_Start+0x4a>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e5e:	b2db      	uxtb	r3, r3
 8006e60:	e00b      	b.n	8006e7a <HAL_TIM_IC_Start+0x62>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	2b10      	cmp	r3, #16
 8006e66:	d104      	bne.n	8006e72 <HAL_TIM_IC_Start+0x5a>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006e6e:	b2db      	uxtb	r3, r3
 8006e70:	e003      	b.n	8006e7a <HAL_TIM_IC_Start+0x62>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006e78:	b2db      	uxtb	r3, r3
 8006e7a:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d104      	bne.n	8006e8c <HAL_TIM_IC_Start+0x74>
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e88:	b2db      	uxtb	r3, r3
 8006e8a:	e013      	b.n	8006eb4 <HAL_TIM_IC_Start+0x9c>
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	d104      	bne.n	8006e9c <HAL_TIM_IC_Start+0x84>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e98:	b2db      	uxtb	r3, r3
 8006e9a:	e00b      	b.n	8006eb4 <HAL_TIM_IC_Start+0x9c>
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	2b08      	cmp	r3, #8
 8006ea0:	d104      	bne.n	8006eac <HAL_TIM_IC_Start+0x94>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	e003      	b.n	8006eb4 <HAL_TIM_IC_Start+0x9c>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006eb6:	7bfb      	ldrb	r3, [r7, #15]
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d102      	bne.n	8006ec2 <HAL_TIM_IC_Start+0xaa>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006ebc:	7bbb      	ldrb	r3, [r7, #14]
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d001      	beq.n	8006ec6 <HAL_TIM_IC_Start+0xae>
  {
    return HAL_ERROR;
 8006ec2:	2301      	movs	r3, #1
 8006ec4:	e097      	b.n	8006ff6 <HAL_TIM_IC_Start+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d104      	bne.n	8006ed6 <HAL_TIM_IC_Start+0xbe>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2202      	movs	r2, #2
 8006ed0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ed4:	e023      	b.n	8006f1e <HAL_TIM_IC_Start+0x106>
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	2b04      	cmp	r3, #4
 8006eda:	d104      	bne.n	8006ee6 <HAL_TIM_IC_Start+0xce>
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2202      	movs	r2, #2
 8006ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ee4:	e01b      	b.n	8006f1e <HAL_TIM_IC_Start+0x106>
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	2b08      	cmp	r3, #8
 8006eea:	d104      	bne.n	8006ef6 <HAL_TIM_IC_Start+0xde>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2202      	movs	r2, #2
 8006ef0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006ef4:	e013      	b.n	8006f1e <HAL_TIM_IC_Start+0x106>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	2b0c      	cmp	r3, #12
 8006efa:	d104      	bne.n	8006f06 <HAL_TIM_IC_Start+0xee>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2202      	movs	r2, #2
 8006f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006f04:	e00b      	b.n	8006f1e <HAL_TIM_IC_Start+0x106>
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	2b10      	cmp	r3, #16
 8006f0a:	d104      	bne.n	8006f16 <HAL_TIM_IC_Start+0xfe>
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006f14:	e003      	b.n	8006f1e <HAL_TIM_IC_Start+0x106>
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2202      	movs	r2, #2
 8006f1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006f1e:	683b      	ldr	r3, [r7, #0]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d104      	bne.n	8006f2e <HAL_TIM_IC_Start+0x116>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f2c:	e013      	b.n	8006f56 <HAL_TIM_IC_Start+0x13e>
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	2b04      	cmp	r3, #4
 8006f32:	d104      	bne.n	8006f3e <HAL_TIM_IC_Start+0x126>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2202      	movs	r2, #2
 8006f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f3c:	e00b      	b.n	8006f56 <HAL_TIM_IC_Start+0x13e>
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	2b08      	cmp	r3, #8
 8006f42:	d104      	bne.n	8006f4e <HAL_TIM_IC_Start+0x136>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006f4c:	e003      	b.n	8006f56 <HAL_TIM_IC_Start+0x13e>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2202      	movs	r2, #2
 8006f52:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2201      	movs	r2, #1
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	4618      	mov	r0, r3
 8006f60:	f001 f900 	bl	8008164 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a25      	ldr	r2, [pc, #148]	; (8007000 <HAL_TIM_IC_Start+0x1e8>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d022      	beq.n	8006fb4 <HAL_TIM_IC_Start+0x19c>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f76:	d01d      	beq.n	8006fb4 <HAL_TIM_IC_Start+0x19c>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a21      	ldr	r2, [pc, #132]	; (8007004 <HAL_TIM_IC_Start+0x1ec>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d018      	beq.n	8006fb4 <HAL_TIM_IC_Start+0x19c>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a20      	ldr	r2, [pc, #128]	; (8007008 <HAL_TIM_IC_Start+0x1f0>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d013      	beq.n	8006fb4 <HAL_TIM_IC_Start+0x19c>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a1e      	ldr	r2, [pc, #120]	; (800700c <HAL_TIM_IC_Start+0x1f4>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d00e      	beq.n	8006fb4 <HAL_TIM_IC_Start+0x19c>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a1d      	ldr	r2, [pc, #116]	; (8007010 <HAL_TIM_IC_Start+0x1f8>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d009      	beq.n	8006fb4 <HAL_TIM_IC_Start+0x19c>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a1b      	ldr	r2, [pc, #108]	; (8007014 <HAL_TIM_IC_Start+0x1fc>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d004      	beq.n	8006fb4 <HAL_TIM_IC_Start+0x19c>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a1a      	ldr	r2, [pc, #104]	; (8007018 <HAL_TIM_IC_Start+0x200>)
 8006fb0:	4293      	cmp	r3, r2
 8006fb2:	d115      	bne.n	8006fe0 <HAL_TIM_IC_Start+0x1c8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	689a      	ldr	r2, [r3, #8]
 8006fba:	4b18      	ldr	r3, [pc, #96]	; (800701c <HAL_TIM_IC_Start+0x204>)
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fc0:	68bb      	ldr	r3, [r7, #8]
 8006fc2:	2b06      	cmp	r3, #6
 8006fc4:	d015      	beq.n	8006ff2 <HAL_TIM_IC_Start+0x1da>
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fcc:	d011      	beq.n	8006ff2 <HAL_TIM_IC_Start+0x1da>
    {
      __HAL_TIM_ENABLE(htim);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	f042 0201 	orr.w	r2, r2, #1
 8006fdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006fde:	e008      	b.n	8006ff2 <HAL_TIM_IC_Start+0x1da>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	681a      	ldr	r2, [r3, #0]
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f042 0201 	orr.w	r2, r2, #1
 8006fee:	601a      	str	r2, [r3, #0]
 8006ff0:	e000      	b.n	8006ff4 <HAL_TIM_IC_Start+0x1dc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}
 8006ffe:	bf00      	nop
 8007000:	40010000 	.word	0x40010000
 8007004:	40000400 	.word	0x40000400
 8007008:	40000800 	.word	0x40000800
 800700c:	40000c00 	.word	0x40000c00
 8007010:	40010400 	.word	0x40010400
 8007014:	40014000 	.word	0x40014000
 8007018:	40001800 	.word	0x40001800
 800701c:	00010007 	.word	0x00010007

08007020 <HAL_TIM_IC_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2200      	movs	r2, #0
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	4618      	mov	r0, r3
 8007034:	f001 f896 	bl	8008164 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	6a1a      	ldr	r2, [r3, #32]
 800703e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007042:	4013      	ands	r3, r2
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10f      	bne.n	8007068 <HAL_TIM_IC_Stop+0x48>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	6a1a      	ldr	r2, [r3, #32]
 800704e:	f240 4344 	movw	r3, #1092	; 0x444
 8007052:	4013      	ands	r3, r2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d107      	bne.n	8007068 <HAL_TIM_IC_Stop+0x48>
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f022 0201 	bic.w	r2, r2, #1
 8007066:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d104      	bne.n	8007078 <HAL_TIM_IC_Stop+0x58>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2201      	movs	r2, #1
 8007072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007076:	e023      	b.n	80070c0 <HAL_TIM_IC_Stop+0xa0>
 8007078:	683b      	ldr	r3, [r7, #0]
 800707a:	2b04      	cmp	r3, #4
 800707c:	d104      	bne.n	8007088 <HAL_TIM_IC_Stop+0x68>
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2201      	movs	r2, #1
 8007082:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007086:	e01b      	b.n	80070c0 <HAL_TIM_IC_Stop+0xa0>
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	2b08      	cmp	r3, #8
 800708c:	d104      	bne.n	8007098 <HAL_TIM_IC_Stop+0x78>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2201      	movs	r2, #1
 8007092:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007096:	e013      	b.n	80070c0 <HAL_TIM_IC_Stop+0xa0>
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	2b0c      	cmp	r3, #12
 800709c:	d104      	bne.n	80070a8 <HAL_TIM_IC_Stop+0x88>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2201      	movs	r2, #1
 80070a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80070a6:	e00b      	b.n	80070c0 <HAL_TIM_IC_Stop+0xa0>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	2b10      	cmp	r3, #16
 80070ac:	d104      	bne.n	80070b8 <HAL_TIM_IC_Stop+0x98>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070b6:	e003      	b.n	80070c0 <HAL_TIM_IC_Stop+0xa0>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d104      	bne.n	80070d0 <HAL_TIM_IC_Stop+0xb0>
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2201      	movs	r2, #1
 80070ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070ce:	e013      	b.n	80070f8 <HAL_TIM_IC_Stop+0xd8>
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	2b04      	cmp	r3, #4
 80070d4:	d104      	bne.n	80070e0 <HAL_TIM_IC_Stop+0xc0>
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	2201      	movs	r2, #1
 80070da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80070de:	e00b      	b.n	80070f8 <HAL_TIM_IC_Stop+0xd8>
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	2b08      	cmp	r3, #8
 80070e4:	d104      	bne.n	80070f0 <HAL_TIM_IC_Stop+0xd0>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	2201      	movs	r2, #1
 80070ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80070ee:	e003      	b.n	80070f8 <HAL_TIM_IC_Stop+0xd8>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80070f8:	2300      	movs	r3, #0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007104:	b580      	push	{r7, lr}
 8007106:	b084      	sub	sp, #16
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d104      	bne.n	8007122 <HAL_TIM_IC_Start_IT+0x1e>
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800711e:	b2db      	uxtb	r3, r3
 8007120:	e023      	b.n	800716a <HAL_TIM_IC_Start_IT+0x66>
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b04      	cmp	r3, #4
 8007126:	d104      	bne.n	8007132 <HAL_TIM_IC_Start_IT+0x2e>
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800712e:	b2db      	uxtb	r3, r3
 8007130:	e01b      	b.n	800716a <HAL_TIM_IC_Start_IT+0x66>
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b08      	cmp	r3, #8
 8007136:	d104      	bne.n	8007142 <HAL_TIM_IC_Start_IT+0x3e>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800713e:	b2db      	uxtb	r3, r3
 8007140:	e013      	b.n	800716a <HAL_TIM_IC_Start_IT+0x66>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	2b0c      	cmp	r3, #12
 8007146:	d104      	bne.n	8007152 <HAL_TIM_IC_Start_IT+0x4e>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800714e:	b2db      	uxtb	r3, r3
 8007150:	e00b      	b.n	800716a <HAL_TIM_IC_Start_IT+0x66>
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b10      	cmp	r3, #16
 8007156:	d104      	bne.n	8007162 <HAL_TIM_IC_Start_IT+0x5e>
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800715e:	b2db      	uxtb	r3, r3
 8007160:	e003      	b.n	800716a <HAL_TIM_IC_Start_IT+0x66>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007168:	b2db      	uxtb	r3, r3
 800716a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d104      	bne.n	800717c <HAL_TIM_IC_Start_IT+0x78>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007178:	b2db      	uxtb	r3, r3
 800717a:	e013      	b.n	80071a4 <HAL_TIM_IC_Start_IT+0xa0>
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	2b04      	cmp	r3, #4
 8007180:	d104      	bne.n	800718c <HAL_TIM_IC_Start_IT+0x88>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007188:	b2db      	uxtb	r3, r3
 800718a:	e00b      	b.n	80071a4 <HAL_TIM_IC_Start_IT+0xa0>
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2b08      	cmp	r3, #8
 8007190:	d104      	bne.n	800719c <HAL_TIM_IC_Start_IT+0x98>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007198:	b2db      	uxtb	r3, r3
 800719a:	e003      	b.n	80071a4 <HAL_TIM_IC_Start_IT+0xa0>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80071a2:	b2db      	uxtb	r3, r3
 80071a4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80071a6:	7bbb      	ldrb	r3, [r7, #14]
 80071a8:	2b01      	cmp	r3, #1
 80071aa:	d102      	bne.n	80071b2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80071ac:	7b7b      	ldrb	r3, [r7, #13]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d001      	beq.n	80071b6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80071b2:	2301      	movs	r3, #1
 80071b4:	e0e2      	b.n	800737c <HAL_TIM_IC_Start_IT+0x278>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d104      	bne.n	80071c6 <HAL_TIM_IC_Start_IT+0xc2>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2202      	movs	r2, #2
 80071c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071c4:	e023      	b.n	800720e <HAL_TIM_IC_Start_IT+0x10a>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	2b04      	cmp	r3, #4
 80071ca:	d104      	bne.n	80071d6 <HAL_TIM_IC_Start_IT+0xd2>
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2202      	movs	r2, #2
 80071d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071d4:	e01b      	b.n	800720e <HAL_TIM_IC_Start_IT+0x10a>
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	2b08      	cmp	r3, #8
 80071da:	d104      	bne.n	80071e6 <HAL_TIM_IC_Start_IT+0xe2>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	2202      	movs	r2, #2
 80071e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071e4:	e013      	b.n	800720e <HAL_TIM_IC_Start_IT+0x10a>
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	2b0c      	cmp	r3, #12
 80071ea:	d104      	bne.n	80071f6 <HAL_TIM_IC_Start_IT+0xf2>
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2202      	movs	r2, #2
 80071f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80071f4:	e00b      	b.n	800720e <HAL_TIM_IC_Start_IT+0x10a>
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	2b10      	cmp	r3, #16
 80071fa:	d104      	bne.n	8007206 <HAL_TIM_IC_Start_IT+0x102>
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2202      	movs	r2, #2
 8007200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007204:	e003      	b.n	800720e <HAL_TIM_IC_Start_IT+0x10a>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2202      	movs	r2, #2
 800720a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d104      	bne.n	800721e <HAL_TIM_IC_Start_IT+0x11a>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800721c:	e013      	b.n	8007246 <HAL_TIM_IC_Start_IT+0x142>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b04      	cmp	r3, #4
 8007222:	d104      	bne.n	800722e <HAL_TIM_IC_Start_IT+0x12a>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800722c:	e00b      	b.n	8007246 <HAL_TIM_IC_Start_IT+0x142>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b08      	cmp	r3, #8
 8007232:	d104      	bne.n	800723e <HAL_TIM_IC_Start_IT+0x13a>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800723c:	e003      	b.n	8007246 <HAL_TIM_IC_Start_IT+0x142>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2202      	movs	r2, #2
 8007242:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  switch (Channel)
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	2b0c      	cmp	r3, #12
 800724a:	d841      	bhi.n	80072d0 <HAL_TIM_IC_Start_IT+0x1cc>
 800724c:	a201      	add	r2, pc, #4	; (adr r2, 8007254 <HAL_TIM_IC_Start_IT+0x150>)
 800724e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007252:	bf00      	nop
 8007254:	08007289 	.word	0x08007289
 8007258:	080072d1 	.word	0x080072d1
 800725c:	080072d1 	.word	0x080072d1
 8007260:	080072d1 	.word	0x080072d1
 8007264:	0800729b 	.word	0x0800729b
 8007268:	080072d1 	.word	0x080072d1
 800726c:	080072d1 	.word	0x080072d1
 8007270:	080072d1 	.word	0x080072d1
 8007274:	080072ad 	.word	0x080072ad
 8007278:	080072d1 	.word	0x080072d1
 800727c:	080072d1 	.word	0x080072d1
 8007280:	080072d1 	.word	0x080072d1
 8007284:	080072bf 	.word	0x080072bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	68da      	ldr	r2, [r3, #12]
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f042 0202 	orr.w	r2, r2, #2
 8007296:	60da      	str	r2, [r3, #12]
      break;
 8007298:	e01d      	b.n	80072d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68da      	ldr	r2, [r3, #12]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f042 0204 	orr.w	r2, r2, #4
 80072a8:	60da      	str	r2, [r3, #12]
      break;
 80072aa:	e014      	b.n	80072d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68da      	ldr	r2, [r3, #12]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	f042 0208 	orr.w	r2, r2, #8
 80072ba:	60da      	str	r2, [r3, #12]
      break;
 80072bc:	e00b      	b.n	80072d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f042 0210 	orr.w	r2, r2, #16
 80072cc:	60da      	str	r2, [r3, #12]
      break;
 80072ce:	e002      	b.n	80072d6 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 80072d0:	2301      	movs	r3, #1
 80072d2:	73fb      	strb	r3, [r7, #15]
      break;
 80072d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80072d6:	7bfb      	ldrb	r3, [r7, #15]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d14e      	bne.n	800737a <HAL_TIM_IC_Start_IT+0x276>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	2201      	movs	r2, #1
 80072e2:	6839      	ldr	r1, [r7, #0]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f000 ff3d 	bl	8008164 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	4a25      	ldr	r2, [pc, #148]	; (8007384 <HAL_TIM_IC_Start_IT+0x280>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d022      	beq.n	800733a <HAL_TIM_IC_Start_IT+0x236>
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072fc:	d01d      	beq.n	800733a <HAL_TIM_IC_Start_IT+0x236>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4a21      	ldr	r2, [pc, #132]	; (8007388 <HAL_TIM_IC_Start_IT+0x284>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d018      	beq.n	800733a <HAL_TIM_IC_Start_IT+0x236>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a1f      	ldr	r2, [pc, #124]	; (800738c <HAL_TIM_IC_Start_IT+0x288>)
 800730e:	4293      	cmp	r3, r2
 8007310:	d013      	beq.n	800733a <HAL_TIM_IC_Start_IT+0x236>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	4a1e      	ldr	r2, [pc, #120]	; (8007390 <HAL_TIM_IC_Start_IT+0x28c>)
 8007318:	4293      	cmp	r3, r2
 800731a:	d00e      	beq.n	800733a <HAL_TIM_IC_Start_IT+0x236>
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a1c      	ldr	r2, [pc, #112]	; (8007394 <HAL_TIM_IC_Start_IT+0x290>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d009      	beq.n	800733a <HAL_TIM_IC_Start_IT+0x236>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a1b      	ldr	r2, [pc, #108]	; (8007398 <HAL_TIM_IC_Start_IT+0x294>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d004      	beq.n	800733a <HAL_TIM_IC_Start_IT+0x236>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	4a19      	ldr	r2, [pc, #100]	; (800739c <HAL_TIM_IC_Start_IT+0x298>)
 8007336:	4293      	cmp	r3, r2
 8007338:	d115      	bne.n	8007366 <HAL_TIM_IC_Start_IT+0x262>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689a      	ldr	r2, [r3, #8]
 8007340:	4b17      	ldr	r3, [pc, #92]	; (80073a0 <HAL_TIM_IC_Start_IT+0x29c>)
 8007342:	4013      	ands	r3, r2
 8007344:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2b06      	cmp	r3, #6
 800734a:	d015      	beq.n	8007378 <HAL_TIM_IC_Start_IT+0x274>
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007352:	d011      	beq.n	8007378 <HAL_TIM_IC_Start_IT+0x274>
      {
        __HAL_TIM_ENABLE(htim);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	681a      	ldr	r2, [r3, #0]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f042 0201 	orr.w	r2, r2, #1
 8007362:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007364:	e008      	b.n	8007378 <HAL_TIM_IC_Start_IT+0x274>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f042 0201 	orr.w	r2, r2, #1
 8007374:	601a      	str	r2, [r3, #0]
 8007376:	e000      	b.n	800737a <HAL_TIM_IC_Start_IT+0x276>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007378:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 800737a:	7bfb      	ldrb	r3, [r7, #15]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}
 8007384:	40010000 	.word	0x40010000
 8007388:	40000400 	.word	0x40000400
 800738c:	40000800 	.word	0x40000800
 8007390:	40000c00 	.word	0x40000c00
 8007394:	40010400 	.word	0x40010400
 8007398:	40014000 	.word	0x40014000
 800739c:	40001800 	.word	0x40001800
 80073a0:	00010007 	.word	0x00010007

080073a4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80073ae:	2300      	movs	r3, #0
 80073b0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b0c      	cmp	r3, #12
 80073b6:	d841      	bhi.n	800743c <HAL_TIM_IC_Stop_IT+0x98>
 80073b8:	a201      	add	r2, pc, #4	; (adr r2, 80073c0 <HAL_TIM_IC_Stop_IT+0x1c>)
 80073ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073be:	bf00      	nop
 80073c0:	080073f5 	.word	0x080073f5
 80073c4:	0800743d 	.word	0x0800743d
 80073c8:	0800743d 	.word	0x0800743d
 80073cc:	0800743d 	.word	0x0800743d
 80073d0:	08007407 	.word	0x08007407
 80073d4:	0800743d 	.word	0x0800743d
 80073d8:	0800743d 	.word	0x0800743d
 80073dc:	0800743d 	.word	0x0800743d
 80073e0:	08007419 	.word	0x08007419
 80073e4:	0800743d 	.word	0x0800743d
 80073e8:	0800743d 	.word	0x0800743d
 80073ec:	0800743d 	.word	0x0800743d
 80073f0:	0800742b 	.word	0x0800742b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	68da      	ldr	r2, [r3, #12]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f022 0202 	bic.w	r2, r2, #2
 8007402:	60da      	str	r2, [r3, #12]
      break;
 8007404:	e01d      	b.n	8007442 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f022 0204 	bic.w	r2, r2, #4
 8007414:	60da      	str	r2, [r3, #12]
      break;
 8007416:	e014      	b.n	8007442 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	68da      	ldr	r2, [r3, #12]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f022 0208 	bic.w	r2, r2, #8
 8007426:	60da      	str	r2, [r3, #12]
      break;
 8007428:	e00b      	b.n	8007442 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	68da      	ldr	r2, [r3, #12]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f022 0210 	bic.w	r2, r2, #16
 8007438:	60da      	str	r2, [r3, #12]
      break;
 800743a:	e002      	b.n	8007442 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	73fb      	strb	r3, [r7, #15]
      break;
 8007440:	bf00      	nop
  }

  if (status == HAL_OK)
 8007442:	7bfb      	ldrb	r3, [r7, #15]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d166      	bne.n	8007516 <HAL_TIM_IC_Stop_IT+0x172>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	2200      	movs	r2, #0
 800744e:	6839      	ldr	r1, [r7, #0]
 8007450:	4618      	mov	r0, r3
 8007452:	f000 fe87 	bl	8008164 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	6a1a      	ldr	r2, [r3, #32]
 800745c:	f241 1311 	movw	r3, #4369	; 0x1111
 8007460:	4013      	ands	r3, r2
 8007462:	2b00      	cmp	r3, #0
 8007464:	d10f      	bne.n	8007486 <HAL_TIM_IC_Stop_IT+0xe2>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	6a1a      	ldr	r2, [r3, #32]
 800746c:	f240 4344 	movw	r3, #1092	; 0x444
 8007470:	4013      	ands	r3, r2
 8007472:	2b00      	cmp	r3, #0
 8007474:	d107      	bne.n	8007486 <HAL_TIM_IC_Stop_IT+0xe2>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f022 0201 	bic.w	r2, r2, #1
 8007484:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	2b00      	cmp	r3, #0
 800748a:	d104      	bne.n	8007496 <HAL_TIM_IC_Stop_IT+0xf2>
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	2201      	movs	r2, #1
 8007490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007494:	e023      	b.n	80074de <HAL_TIM_IC_Stop_IT+0x13a>
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	2b04      	cmp	r3, #4
 800749a:	d104      	bne.n	80074a6 <HAL_TIM_IC_Stop_IT+0x102>
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2201      	movs	r2, #1
 80074a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074a4:	e01b      	b.n	80074de <HAL_TIM_IC_Stop_IT+0x13a>
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b08      	cmp	r3, #8
 80074aa:	d104      	bne.n	80074b6 <HAL_TIM_IC_Stop_IT+0x112>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2201      	movs	r2, #1
 80074b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074b4:	e013      	b.n	80074de <HAL_TIM_IC_Stop_IT+0x13a>
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	2b0c      	cmp	r3, #12
 80074ba:	d104      	bne.n	80074c6 <HAL_TIM_IC_Stop_IT+0x122>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074c4:	e00b      	b.n	80074de <HAL_TIM_IC_Stop_IT+0x13a>
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	2b10      	cmp	r3, #16
 80074ca:	d104      	bne.n	80074d6 <HAL_TIM_IC_Stop_IT+0x132>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074d4:	e003      	b.n	80074de <HAL_TIM_IC_Stop_IT+0x13a>
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2201      	movs	r2, #1
 80074da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d104      	bne.n	80074ee <HAL_TIM_IC_Stop_IT+0x14a>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80074ec:	e013      	b.n	8007516 <HAL_TIM_IC_Stop_IT+0x172>
 80074ee:	683b      	ldr	r3, [r7, #0]
 80074f0:	2b04      	cmp	r3, #4
 80074f2:	d104      	bne.n	80074fe <HAL_TIM_IC_Stop_IT+0x15a>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2201      	movs	r2, #1
 80074f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80074fc:	e00b      	b.n	8007516 <HAL_TIM_IC_Stop_IT+0x172>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b08      	cmp	r3, #8
 8007502:	d104      	bne.n	800750e <HAL_TIM_IC_Stop_IT+0x16a>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2201      	movs	r2, #1
 8007508:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800750c:	e003      	b.n	8007516 <HAL_TIM_IC_Stop_IT+0x172>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2201      	movs	r2, #1
 8007512:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

  /* Return function status */
  return status;
 8007516:	7bfb      	ldrb	r3, [r7, #15]
}
 8007518:	4618      	mov	r0, r3
 800751a:	3710      	adds	r7, #16
 800751c:	46bd      	mov	sp, r7
 800751e:	bd80      	pop	{r7, pc}

08007520 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007520:	b580      	push	{r7, lr}
 8007522:	b082      	sub	sp, #8
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	691b      	ldr	r3, [r3, #16]
 800752e:	f003 0302 	and.w	r3, r3, #2
 8007532:	2b02      	cmp	r3, #2
 8007534:	d122      	bne.n	800757c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	68db      	ldr	r3, [r3, #12]
 800753c:	f003 0302 	and.w	r3, r3, #2
 8007540:	2b02      	cmp	r3, #2
 8007542:	d11b      	bne.n	800757c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f06f 0202 	mvn.w	r2, #2
 800754c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2201      	movs	r2, #1
 8007552:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	699b      	ldr	r3, [r3, #24]
 800755a:	f003 0303 	and.w	r3, r3, #3
 800755e:	2b00      	cmp	r3, #0
 8007560:	d003      	beq.n	800756a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007562:	6878      	ldr	r0, [r7, #4]
 8007564:	f003 fd64 	bl	800b030 <HAL_TIM_IC_CaptureCallback>
 8007568:	e005      	b.n	8007576 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fae4 	bl	8007b38 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 faeb 	bl	8007b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	691b      	ldr	r3, [r3, #16]
 8007582:	f003 0304 	and.w	r3, r3, #4
 8007586:	2b04      	cmp	r3, #4
 8007588:	d122      	bne.n	80075d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	68db      	ldr	r3, [r3, #12]
 8007590:	f003 0304 	and.w	r3, r3, #4
 8007594:	2b04      	cmp	r3, #4
 8007596:	d11b      	bne.n	80075d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f06f 0204 	mvn.w	r2, #4
 80075a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2202      	movs	r2, #2
 80075a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d003      	beq.n	80075be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f003 fd3a 	bl	800b030 <HAL_TIM_IC_CaptureCallback>
 80075bc:	e005      	b.n	80075ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 faba 	bl	8007b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fac1 	bl	8007b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	691b      	ldr	r3, [r3, #16]
 80075d6:	f003 0308 	and.w	r3, r3, #8
 80075da:	2b08      	cmp	r3, #8
 80075dc:	d122      	bne.n	8007624 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	68db      	ldr	r3, [r3, #12]
 80075e4:	f003 0308 	and.w	r3, r3, #8
 80075e8:	2b08      	cmp	r3, #8
 80075ea:	d11b      	bne.n	8007624 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f06f 0208 	mvn.w	r2, #8
 80075f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2204      	movs	r2, #4
 80075fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	f003 0303 	and.w	r3, r3, #3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f003 fd10 	bl	800b030 <HAL_TIM_IC_CaptureCallback>
 8007610:	e005      	b.n	800761e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 fa90 	bl	8007b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f000 fa97 	bl	8007b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f003 0310 	and.w	r3, r3, #16
 800762e:	2b10      	cmp	r3, #16
 8007630:	d122      	bne.n	8007678 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	f003 0310 	and.w	r3, r3, #16
 800763c:	2b10      	cmp	r3, #16
 800763e:	d11b      	bne.n	8007678 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	f06f 0210 	mvn.w	r2, #16
 8007648:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2208      	movs	r2, #8
 800764e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800765a:	2b00      	cmp	r3, #0
 800765c:	d003      	beq.n	8007666 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	f003 fce6 	bl	800b030 <HAL_TIM_IC_CaptureCallback>
 8007664:	e005      	b.n	8007672 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007666:	6878      	ldr	r0, [r7, #4]
 8007668:	f000 fa66 	bl	8007b38 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800766c:	6878      	ldr	r0, [r7, #4]
 800766e:	f000 fa6d 	bl	8007b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	691b      	ldr	r3, [r3, #16]
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	2b01      	cmp	r3, #1
 8007684:	d10e      	bne.n	80076a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b01      	cmp	r3, #1
 8007692:	d107      	bne.n	80076a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	f06f 0201 	mvn.w	r2, #1
 800769c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800769e:	6878      	ldr	r0, [r7, #4]
 80076a0:	f7f9 fcd8 	bl	8001054 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	691b      	ldr	r3, [r3, #16]
 80076aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ae:	2b80      	cmp	r3, #128	; 0x80
 80076b0:	d10e      	bne.n	80076d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076bc:	2b80      	cmp	r3, #128	; 0x80
 80076be:	d107      	bne.n	80076d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80076c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f000 fe08 	bl	80082e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	691b      	ldr	r3, [r3, #16]
 80076d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076de:	d10e      	bne.n	80076fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	68db      	ldr	r3, [r3, #12]
 80076e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ea:	2b80      	cmp	r3, #128	; 0x80
 80076ec:	d107      	bne.n	80076fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80076f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f000 fdfb 	bl	80082f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	691b      	ldr	r3, [r3, #16]
 8007704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007708:	2b40      	cmp	r3, #64	; 0x40
 800770a:	d10e      	bne.n	800772a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	68db      	ldr	r3, [r3, #12]
 8007712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007716:	2b40      	cmp	r3, #64	; 0x40
 8007718:	d107      	bne.n	800772a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007722:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007724:	6878      	ldr	r0, [r7, #4]
 8007726:	f000 fa1b 	bl	8007b60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	f003 0320 	and.w	r3, r3, #32
 8007734:	2b20      	cmp	r3, #32
 8007736:	d10e      	bne.n	8007756 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	68db      	ldr	r3, [r3, #12]
 800773e:	f003 0320 	and.w	r3, r3, #32
 8007742:	2b20      	cmp	r3, #32
 8007744:	d107      	bne.n	8007756 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f06f 0220 	mvn.w	r2, #32
 800774e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 fdbb 	bl	80082cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007756:	bf00      	nop
 8007758:	3708      	adds	r7, #8
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b086      	sub	sp, #24
 8007762:	af00      	add	r7, sp, #0
 8007764:	60f8      	str	r0, [r7, #12]
 8007766:	60b9      	str	r1, [r7, #8]
 8007768:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800776a:	2300      	movs	r3, #0
 800776c:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007774:	2b01      	cmp	r3, #1
 8007776:	d101      	bne.n	800777c <HAL_TIM_IC_ConfigChannel+0x1e>
 8007778:	2302      	movs	r3, #2
 800777a:	e088      	b.n	800788e <HAL_TIM_IC_ConfigChannel+0x130>
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d11b      	bne.n	80077c2 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6818      	ldr	r0, [r3, #0]
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	6819      	ldr	r1, [r3, #0]
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	68bb      	ldr	r3, [r7, #8]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	f000 fb1f 	bl	8007ddc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	699a      	ldr	r2, [r3, #24]
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f022 020c 	bic.w	r2, r2, #12
 80077ac:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	6999      	ldr	r1, [r3, #24]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	430a      	orrs	r2, r1
 80077be:	619a      	str	r2, [r3, #24]
 80077c0:	e060      	b.n	8007884 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2b04      	cmp	r3, #4
 80077c6:	d11c      	bne.n	8007802 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	6818      	ldr	r0, [r3, #0]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	6819      	ldr	r1, [r3, #0]
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	685a      	ldr	r2, [r3, #4]
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	f000 fba3 	bl	8007f22 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	699a      	ldr	r2, [r3, #24]
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80077ea:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	6999      	ldr	r1, [r3, #24]
 80077f2:	68bb      	ldr	r3, [r7, #8]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	021a      	lsls	r2, r3, #8
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	619a      	str	r2, [r3, #24]
 8007800:	e040      	b.n	8007884 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b08      	cmp	r3, #8
 8007806:	d11b      	bne.n	8007840 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6818      	ldr	r0, [r3, #0]
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	6819      	ldr	r1, [r3, #0]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	685a      	ldr	r2, [r3, #4]
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	f000 fbf0 	bl	8007ffc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	69da      	ldr	r2, [r3, #28]
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	f022 020c 	bic.w	r2, r2, #12
 800782a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	69d9      	ldr	r1, [r3, #28]
 8007832:	68bb      	ldr	r3, [r7, #8]
 8007834:	689a      	ldr	r2, [r3, #8]
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	430a      	orrs	r2, r1
 800783c:	61da      	str	r2, [r3, #28]
 800783e:	e021      	b.n	8007884 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2b0c      	cmp	r3, #12
 8007844:	d11c      	bne.n	8007880 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	6818      	ldr	r0, [r3, #0]
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	6819      	ldr	r1, [r3, #0]
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	68bb      	ldr	r3, [r7, #8]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	f000 fc0d 	bl	8008074 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	69da      	ldr	r2, [r3, #28]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007868:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69d9      	ldr	r1, [r3, #28]
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	689b      	ldr	r3, [r3, #8]
 8007874:	021a      	lsls	r2, r3, #8
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	430a      	orrs	r2, r1
 800787c:	61da      	str	r2, [r3, #28]
 800787e:	e001      	b.n	8007884 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800788c:	7dfb      	ldrb	r3, [r7, #23]
}
 800788e:	4618      	mov	r0, r3
 8007890:	3718      	adds	r7, #24
 8007892:	46bd      	mov	sp, r7
 8007894:	bd80      	pop	{r7, pc}
	...

08007898 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b084      	sub	sp, #16
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80078a2:	2300      	movs	r3, #0
 80078a4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	d101      	bne.n	80078b4 <HAL_TIM_ConfigClockSource+0x1c>
 80078b0:	2302      	movs	r3, #2
 80078b2:	e0b4      	b.n	8007a1e <HAL_TIM_ConfigClockSource+0x186>
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	2202      	movs	r2, #2
 80078c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80078cc:	68ba      	ldr	r2, [r7, #8]
 80078ce:	4b56      	ldr	r3, [pc, #344]	; (8007a28 <HAL_TIM_ConfigClockSource+0x190>)
 80078d0:	4013      	ands	r3, r2
 80078d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80078da:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	68ba      	ldr	r2, [r7, #8]
 80078e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80078e4:	683b      	ldr	r3, [r7, #0]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078ec:	d03e      	beq.n	800796c <HAL_TIM_ConfigClockSource+0xd4>
 80078ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078f2:	f200 8087 	bhi.w	8007a04 <HAL_TIM_ConfigClockSource+0x16c>
 80078f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078fa:	f000 8086 	beq.w	8007a0a <HAL_TIM_ConfigClockSource+0x172>
 80078fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007902:	d87f      	bhi.n	8007a04 <HAL_TIM_ConfigClockSource+0x16c>
 8007904:	2b70      	cmp	r3, #112	; 0x70
 8007906:	d01a      	beq.n	800793e <HAL_TIM_ConfigClockSource+0xa6>
 8007908:	2b70      	cmp	r3, #112	; 0x70
 800790a:	d87b      	bhi.n	8007a04 <HAL_TIM_ConfigClockSource+0x16c>
 800790c:	2b60      	cmp	r3, #96	; 0x60
 800790e:	d050      	beq.n	80079b2 <HAL_TIM_ConfigClockSource+0x11a>
 8007910:	2b60      	cmp	r3, #96	; 0x60
 8007912:	d877      	bhi.n	8007a04 <HAL_TIM_ConfigClockSource+0x16c>
 8007914:	2b50      	cmp	r3, #80	; 0x50
 8007916:	d03c      	beq.n	8007992 <HAL_TIM_ConfigClockSource+0xfa>
 8007918:	2b50      	cmp	r3, #80	; 0x50
 800791a:	d873      	bhi.n	8007a04 <HAL_TIM_ConfigClockSource+0x16c>
 800791c:	2b40      	cmp	r3, #64	; 0x40
 800791e:	d058      	beq.n	80079d2 <HAL_TIM_ConfigClockSource+0x13a>
 8007920:	2b40      	cmp	r3, #64	; 0x40
 8007922:	d86f      	bhi.n	8007a04 <HAL_TIM_ConfigClockSource+0x16c>
 8007924:	2b30      	cmp	r3, #48	; 0x30
 8007926:	d064      	beq.n	80079f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007928:	2b30      	cmp	r3, #48	; 0x30
 800792a:	d86b      	bhi.n	8007a04 <HAL_TIM_ConfigClockSource+0x16c>
 800792c:	2b20      	cmp	r3, #32
 800792e:	d060      	beq.n	80079f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007930:	2b20      	cmp	r3, #32
 8007932:	d867      	bhi.n	8007a04 <HAL_TIM_ConfigClockSource+0x16c>
 8007934:	2b00      	cmp	r3, #0
 8007936:	d05c      	beq.n	80079f2 <HAL_TIM_ConfigClockSource+0x15a>
 8007938:	2b10      	cmp	r3, #16
 800793a:	d05a      	beq.n	80079f2 <HAL_TIM_ConfigClockSource+0x15a>
 800793c:	e062      	b.n	8007a04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	6818      	ldr	r0, [r3, #0]
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	6899      	ldr	r1, [r3, #8]
 8007946:	683b      	ldr	r3, [r7, #0]
 8007948:	685a      	ldr	r2, [r3, #4]
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	68db      	ldr	r3, [r3, #12]
 800794e:	f000 fbe9 	bl	8008124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800795a:	68bb      	ldr	r3, [r7, #8]
 800795c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007960:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68ba      	ldr	r2, [r7, #8]
 8007968:	609a      	str	r2, [r3, #8]
      break;
 800796a:	e04f      	b.n	8007a0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6818      	ldr	r0, [r3, #0]
 8007970:	683b      	ldr	r3, [r7, #0]
 8007972:	6899      	ldr	r1, [r3, #8]
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	68db      	ldr	r3, [r3, #12]
 800797c:	f000 fbd2 	bl	8008124 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	689a      	ldr	r2, [r3, #8]
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800798e:	609a      	str	r2, [r3, #8]
      break;
 8007990:	e03c      	b.n	8007a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6818      	ldr	r0, [r3, #0]
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	6859      	ldr	r1, [r3, #4]
 800799a:	683b      	ldr	r3, [r7, #0]
 800799c:	68db      	ldr	r3, [r3, #12]
 800799e:	461a      	mov	r2, r3
 80079a0:	f000 fa90 	bl	8007ec4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	2150      	movs	r1, #80	; 0x50
 80079aa:	4618      	mov	r0, r3
 80079ac:	f000 fb9f 	bl	80080ee <TIM_ITRx_SetConfig>
      break;
 80079b0:	e02c      	b.n	8007a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6818      	ldr	r0, [r3, #0]
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	6859      	ldr	r1, [r3, #4]
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	68db      	ldr	r3, [r3, #12]
 80079be:	461a      	mov	r2, r3
 80079c0:	f000 faec 	bl	8007f9c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	2160      	movs	r1, #96	; 0x60
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 fb8f 	bl	80080ee <TIM_ITRx_SetConfig>
      break;
 80079d0:	e01c      	b.n	8007a0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6818      	ldr	r0, [r3, #0]
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	6859      	ldr	r1, [r3, #4]
 80079da:	683b      	ldr	r3, [r7, #0]
 80079dc:	68db      	ldr	r3, [r3, #12]
 80079de:	461a      	mov	r2, r3
 80079e0:	f000 fa70 	bl	8007ec4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2140      	movs	r1, #64	; 0x40
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 fb7f 	bl	80080ee <TIM_ITRx_SetConfig>
      break;
 80079f0:	e00c      	b.n	8007a0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4619      	mov	r1, r3
 80079fc:	4610      	mov	r0, r2
 80079fe:	f000 fb76 	bl	80080ee <TIM_ITRx_SetConfig>
      break;
 8007a02:	e003      	b.n	8007a0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007a04:	2301      	movs	r3, #1
 8007a06:	73fb      	strb	r3, [r7, #15]
      break;
 8007a08:	e000      	b.n	8007a0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007a0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}
 8007a26:	bf00      	nop
 8007a28:	fffeff88 	.word	0xfffeff88

08007a2c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b082      	sub	sp, #8
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a3c:	2b01      	cmp	r3, #1
 8007a3e:	d101      	bne.n	8007a44 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007a40:	2302      	movs	r3, #2
 8007a42:	e031      	b.n	8007aa8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2201      	movs	r2, #1
 8007a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2202      	movs	r2, #2
 8007a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007a54:	6839      	ldr	r1, [r7, #0]
 8007a56:	6878      	ldr	r0, [r7, #4]
 8007a58:	f000 f92c 	bl	8007cb4 <TIM_SlaveTimer_SetConfig>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d009      	beq.n	8007a76 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2201      	movs	r2, #1
 8007a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2200      	movs	r2, #0
 8007a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e018      	b.n	8007aa8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	68da      	ldr	r2, [r3, #12]
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007a84:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	68da      	ldr	r2, [r3, #12]
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a94:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2201      	movs	r2, #1
 8007a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b085      	sub	sp, #20
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007aba:	2300      	movs	r3, #0
 8007abc:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	2b0c      	cmp	r3, #12
 8007ac2:	d831      	bhi.n	8007b28 <HAL_TIM_ReadCapturedValue+0x78>
 8007ac4:	a201      	add	r2, pc, #4	; (adr r2, 8007acc <HAL_TIM_ReadCapturedValue+0x1c>)
 8007ac6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aca:	bf00      	nop
 8007acc:	08007b01 	.word	0x08007b01
 8007ad0:	08007b29 	.word	0x08007b29
 8007ad4:	08007b29 	.word	0x08007b29
 8007ad8:	08007b29 	.word	0x08007b29
 8007adc:	08007b0b 	.word	0x08007b0b
 8007ae0:	08007b29 	.word	0x08007b29
 8007ae4:	08007b29 	.word	0x08007b29
 8007ae8:	08007b29 	.word	0x08007b29
 8007aec:	08007b15 	.word	0x08007b15
 8007af0:	08007b29 	.word	0x08007b29
 8007af4:	08007b29 	.word	0x08007b29
 8007af8:	08007b29 	.word	0x08007b29
 8007afc:	08007b1f 	.word	0x08007b1f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b06:	60fb      	str	r3, [r7, #12]

      break;
 8007b08:	e00f      	b.n	8007b2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b10:	60fb      	str	r3, [r7, #12]

      break;
 8007b12:	e00a      	b.n	8007b2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b1a:	60fb      	str	r3, [r7, #12]

      break;
 8007b1c:	e005      	b.n	8007b2a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b24:	60fb      	str	r3, [r7, #12]

      break;
 8007b26:	e000      	b.n	8007b2a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007b28:	bf00      	nop
  }

  return tmpreg;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3714      	adds	r7, #20
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a40      	ldr	r2, [pc, #256]	; (8007c88 <TIM_Base_SetConfig+0x114>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d013      	beq.n	8007bb4 <TIM_Base_SetConfig+0x40>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b92:	d00f      	beq.n	8007bb4 <TIM_Base_SetConfig+0x40>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a3d      	ldr	r2, [pc, #244]	; (8007c8c <TIM_Base_SetConfig+0x118>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d00b      	beq.n	8007bb4 <TIM_Base_SetConfig+0x40>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a3c      	ldr	r2, [pc, #240]	; (8007c90 <TIM_Base_SetConfig+0x11c>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d007      	beq.n	8007bb4 <TIM_Base_SetConfig+0x40>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a3b      	ldr	r2, [pc, #236]	; (8007c94 <TIM_Base_SetConfig+0x120>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d003      	beq.n	8007bb4 <TIM_Base_SetConfig+0x40>
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a3a      	ldr	r2, [pc, #232]	; (8007c98 <TIM_Base_SetConfig+0x124>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d108      	bne.n	8007bc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	685b      	ldr	r3, [r3, #4]
 8007bc0:	68fa      	ldr	r2, [r7, #12]
 8007bc2:	4313      	orrs	r3, r2
 8007bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a2f      	ldr	r2, [pc, #188]	; (8007c88 <TIM_Base_SetConfig+0x114>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d02b      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd4:	d027      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a2c      	ldr	r2, [pc, #176]	; (8007c8c <TIM_Base_SetConfig+0x118>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d023      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a2b      	ldr	r2, [pc, #172]	; (8007c90 <TIM_Base_SetConfig+0x11c>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d01f      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a2a      	ldr	r2, [pc, #168]	; (8007c94 <TIM_Base_SetConfig+0x120>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d01b      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a29      	ldr	r2, [pc, #164]	; (8007c98 <TIM_Base_SetConfig+0x124>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d017      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a28      	ldr	r2, [pc, #160]	; (8007c9c <TIM_Base_SetConfig+0x128>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d013      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a27      	ldr	r2, [pc, #156]	; (8007ca0 <TIM_Base_SetConfig+0x12c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d00f      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a26      	ldr	r2, [pc, #152]	; (8007ca4 <TIM_Base_SetConfig+0x130>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00b      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a25      	ldr	r2, [pc, #148]	; (8007ca8 <TIM_Base_SetConfig+0x134>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d007      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a24      	ldr	r2, [pc, #144]	; (8007cac <TIM_Base_SetConfig+0x138>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d003      	beq.n	8007c26 <TIM_Base_SetConfig+0xb2>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a23      	ldr	r2, [pc, #140]	; (8007cb0 <TIM_Base_SetConfig+0x13c>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d108      	bne.n	8007c38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a0a      	ldr	r2, [pc, #40]	; (8007c88 <TIM_Base_SetConfig+0x114>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d003      	beq.n	8007c6c <TIM_Base_SetConfig+0xf8>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	4a0c      	ldr	r2, [pc, #48]	; (8007c98 <TIM_Base_SetConfig+0x124>)
 8007c68:	4293      	cmp	r3, r2
 8007c6a:	d103      	bne.n	8007c74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	691a      	ldr	r2, [r3, #16]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	615a      	str	r2, [r3, #20]
}
 8007c7a:	bf00      	nop
 8007c7c:	3714      	adds	r7, #20
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr
 8007c86:	bf00      	nop
 8007c88:	40010000 	.word	0x40010000
 8007c8c:	40000400 	.word	0x40000400
 8007c90:	40000800 	.word	0x40000800
 8007c94:	40000c00 	.word	0x40000c00
 8007c98:	40010400 	.word	0x40010400
 8007c9c:	40014000 	.word	0x40014000
 8007ca0:	40014400 	.word	0x40014400
 8007ca4:	40014800 	.word	0x40014800
 8007ca8:	40001800 	.word	0x40001800
 8007cac:	40001c00 	.word	0x40001c00
 8007cb0:	40002000 	.word	0x40002000

08007cb4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b086      	sub	sp, #24
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
 8007cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cbe:	2300      	movs	r3, #0
 8007cc0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	689b      	ldr	r3, [r3, #8]
 8007cc8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cd0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8007cdc:	693a      	ldr	r2, [r7, #16]
 8007cde:	4b3e      	ldr	r3, [pc, #248]	; (8007dd8 <TIM_SlaveTimer_SetConfig+0x124>)
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	693a      	ldr	r2, [r7, #16]
 8007cea:	4313      	orrs	r3, r2
 8007cec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	693a      	ldr	r2, [r7, #16]
 8007cf4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	2b70      	cmp	r3, #112	; 0x70
 8007cfc:	d01a      	beq.n	8007d34 <TIM_SlaveTimer_SetConfig+0x80>
 8007cfe:	2b70      	cmp	r3, #112	; 0x70
 8007d00:	d860      	bhi.n	8007dc4 <TIM_SlaveTimer_SetConfig+0x110>
 8007d02:	2b60      	cmp	r3, #96	; 0x60
 8007d04:	d054      	beq.n	8007db0 <TIM_SlaveTimer_SetConfig+0xfc>
 8007d06:	2b60      	cmp	r3, #96	; 0x60
 8007d08:	d85c      	bhi.n	8007dc4 <TIM_SlaveTimer_SetConfig+0x110>
 8007d0a:	2b50      	cmp	r3, #80	; 0x50
 8007d0c:	d046      	beq.n	8007d9c <TIM_SlaveTimer_SetConfig+0xe8>
 8007d0e:	2b50      	cmp	r3, #80	; 0x50
 8007d10:	d858      	bhi.n	8007dc4 <TIM_SlaveTimer_SetConfig+0x110>
 8007d12:	2b40      	cmp	r3, #64	; 0x40
 8007d14:	d019      	beq.n	8007d4a <TIM_SlaveTimer_SetConfig+0x96>
 8007d16:	2b40      	cmp	r3, #64	; 0x40
 8007d18:	d854      	bhi.n	8007dc4 <TIM_SlaveTimer_SetConfig+0x110>
 8007d1a:	2b30      	cmp	r3, #48	; 0x30
 8007d1c:	d055      	beq.n	8007dca <TIM_SlaveTimer_SetConfig+0x116>
 8007d1e:	2b30      	cmp	r3, #48	; 0x30
 8007d20:	d850      	bhi.n	8007dc4 <TIM_SlaveTimer_SetConfig+0x110>
 8007d22:	2b20      	cmp	r3, #32
 8007d24:	d051      	beq.n	8007dca <TIM_SlaveTimer_SetConfig+0x116>
 8007d26:	2b20      	cmp	r3, #32
 8007d28:	d84c      	bhi.n	8007dc4 <TIM_SlaveTimer_SetConfig+0x110>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d04d      	beq.n	8007dca <TIM_SlaveTimer_SetConfig+0x116>
 8007d2e:	2b10      	cmp	r3, #16
 8007d30:	d04b      	beq.n	8007dca <TIM_SlaveTimer_SetConfig+0x116>
 8007d32:	e047      	b.n	8007dc4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6818      	ldr	r0, [r3, #0]
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	68d9      	ldr	r1, [r3, #12]
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	689a      	ldr	r2, [r3, #8]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	691b      	ldr	r3, [r3, #16]
 8007d44:	f000 f9ee 	bl	8008124 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8007d48:	e040      	b.n	8007dcc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	2b05      	cmp	r3, #5
 8007d50:	d101      	bne.n	8007d56 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e03b      	b.n	8007dce <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	6a1b      	ldr	r3, [r3, #32]
 8007d5c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	6a1a      	ldr	r2, [r3, #32]
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f022 0201 	bic.w	r2, r2, #1
 8007d6c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007d7c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8007d7e:	683b      	ldr	r3, [r7, #0]
 8007d80:	691b      	ldr	r3, [r3, #16]
 8007d82:	011b      	lsls	r3, r3, #4
 8007d84:	68ba      	ldr	r2, [r7, #8]
 8007d86:	4313      	orrs	r3, r2
 8007d88:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	68ba      	ldr	r2, [r7, #8]
 8007d90:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	621a      	str	r2, [r3, #32]
      break;
 8007d9a:	e017      	b.n	8007dcc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6818      	ldr	r0, [r3, #0]
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	6899      	ldr	r1, [r3, #8]
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	461a      	mov	r2, r3
 8007daa:	f000 f88b 	bl	8007ec4 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007dae:	e00d      	b.n	8007dcc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	6818      	ldr	r0, [r3, #0]
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	6899      	ldr	r1, [r3, #8]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	f000 f8ed 	bl	8007f9c <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8007dc2:	e003      	b.n	8007dcc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	75fb      	strb	r3, [r7, #23]
      break;
 8007dc8:	e000      	b.n	8007dcc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8007dca:	bf00      	nop
  }

  return status;
 8007dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3718      	adds	r7, #24
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop
 8007dd8:	fffefff8 	.word	0xfffefff8

08007ddc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007ddc:	b480      	push	{r7}
 8007dde:	b087      	sub	sp, #28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	607a      	str	r2, [r7, #4]
 8007de8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a1b      	ldr	r3, [r3, #32]
 8007dee:	f023 0201 	bic.w	r2, r3, #1
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	6a1b      	ldr	r3, [r3, #32]
 8007e00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	4a28      	ldr	r2, [pc, #160]	; (8007ea8 <TIM_TI1_SetConfig+0xcc>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d01b      	beq.n	8007e42 <TIM_TI1_SetConfig+0x66>
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007e10:	d017      	beq.n	8007e42 <TIM_TI1_SetConfig+0x66>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	4a25      	ldr	r2, [pc, #148]	; (8007eac <TIM_TI1_SetConfig+0xd0>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d013      	beq.n	8007e42 <TIM_TI1_SetConfig+0x66>
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	4a24      	ldr	r2, [pc, #144]	; (8007eb0 <TIM_TI1_SetConfig+0xd4>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d00f      	beq.n	8007e42 <TIM_TI1_SetConfig+0x66>
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	4a23      	ldr	r2, [pc, #140]	; (8007eb4 <TIM_TI1_SetConfig+0xd8>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d00b      	beq.n	8007e42 <TIM_TI1_SetConfig+0x66>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	4a22      	ldr	r2, [pc, #136]	; (8007eb8 <TIM_TI1_SetConfig+0xdc>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d007      	beq.n	8007e42 <TIM_TI1_SetConfig+0x66>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	4a21      	ldr	r2, [pc, #132]	; (8007ebc <TIM_TI1_SetConfig+0xe0>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d003      	beq.n	8007e42 <TIM_TI1_SetConfig+0x66>
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	4a20      	ldr	r2, [pc, #128]	; (8007ec0 <TIM_TI1_SetConfig+0xe4>)
 8007e3e:	4293      	cmp	r3, r2
 8007e40:	d101      	bne.n	8007e46 <TIM_TI1_SetConfig+0x6a>
 8007e42:	2301      	movs	r3, #1
 8007e44:	e000      	b.n	8007e48 <TIM_TI1_SetConfig+0x6c>
 8007e46:	2300      	movs	r3, #0
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d008      	beq.n	8007e5e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	f023 0303 	bic.w	r3, r3, #3
 8007e52:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8007e54:	697a      	ldr	r2, [r7, #20]
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	617b      	str	r3, [r7, #20]
 8007e5c:	e003      	b.n	8007e66 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	f043 0301 	orr.w	r3, r3, #1
 8007e64:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007e6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007e6e:	683b      	ldr	r3, [r7, #0]
 8007e70:	011b      	lsls	r3, r3, #4
 8007e72:	b2db      	uxtb	r3, r3
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	4313      	orrs	r3, r2
 8007e78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	f023 030a 	bic.w	r3, r3, #10
 8007e80:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	f003 030a 	and.w	r3, r3, #10
 8007e88:	693a      	ldr	r2, [r7, #16]
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	697a      	ldr	r2, [r7, #20]
 8007e92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	693a      	ldr	r2, [r7, #16]
 8007e98:	621a      	str	r2, [r3, #32]
}
 8007e9a:	bf00      	nop
 8007e9c:	371c      	adds	r7, #28
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea4:	4770      	bx	lr
 8007ea6:	bf00      	nop
 8007ea8:	40010000 	.word	0x40010000
 8007eac:	40000400 	.word	0x40000400
 8007eb0:	40000800 	.word	0x40000800
 8007eb4:	40000c00 	.word	0x40000c00
 8007eb8:	40010400 	.word	0x40010400
 8007ebc:	40014000 	.word	0x40014000
 8007ec0:	40001800 	.word	0x40001800

08007ec4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b087      	sub	sp, #28
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	6a1b      	ldr	r3, [r3, #32]
 8007ed4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	6a1b      	ldr	r3, [r3, #32]
 8007eda:	f023 0201 	bic.w	r2, r3, #1
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007eee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	011b      	lsls	r3, r3, #4
 8007ef4:	693a      	ldr	r2, [r7, #16]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f023 030a 	bic.w	r3, r3, #10
 8007f00:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007f02:	697a      	ldr	r2, [r7, #20]
 8007f04:	68bb      	ldr	r3, [r7, #8]
 8007f06:	4313      	orrs	r3, r2
 8007f08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	693a      	ldr	r2, [r7, #16]
 8007f0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	697a      	ldr	r2, [r7, #20]
 8007f14:	621a      	str	r2, [r3, #32]
}
 8007f16:	bf00      	nop
 8007f18:	371c      	adds	r7, #28
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007f22:	b480      	push	{r7}
 8007f24:	b087      	sub	sp, #28
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	60f8      	str	r0, [r7, #12]
 8007f2a:	60b9      	str	r1, [r7, #8]
 8007f2c:	607a      	str	r2, [r7, #4]
 8007f2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6a1b      	ldr	r3, [r3, #32]
 8007f34:	f023 0210 	bic.w	r2, r3, #16
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	699b      	ldr	r3, [r3, #24]
 8007f40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	6a1b      	ldr	r3, [r3, #32]
 8007f46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007f48:	697b      	ldr	r3, [r7, #20]
 8007f4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f4e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	021b      	lsls	r3, r3, #8
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	4313      	orrs	r3, r2
 8007f58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007f60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	031b      	lsls	r3, r3, #12
 8007f66:	b29b      	uxth	r3, r3
 8007f68:	697a      	ldr	r2, [r7, #20]
 8007f6a:	4313      	orrs	r3, r2
 8007f6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007f74:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007f76:	68bb      	ldr	r3, [r7, #8]
 8007f78:	011b      	lsls	r3, r3, #4
 8007f7a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007f7e:	693a      	ldr	r2, [r7, #16]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	697a      	ldr	r2, [r7, #20]
 8007f88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	621a      	str	r2, [r3, #32]
}
 8007f90:	bf00      	nop
 8007f92:	371c      	adds	r7, #28
 8007f94:	46bd      	mov	sp, r7
 8007f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f9a:	4770      	bx	lr

08007f9c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007f9c:	b480      	push	{r7}
 8007f9e:	b087      	sub	sp, #28
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6a1b      	ldr	r3, [r3, #32]
 8007fac:	f023 0210 	bic.w	r2, r3, #16
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	699b      	ldr	r3, [r3, #24]
 8007fb8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	6a1b      	ldr	r3, [r3, #32]
 8007fbe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007fc0:	697b      	ldr	r3, [r7, #20]
 8007fc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007fc6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	031b      	lsls	r3, r3, #12
 8007fcc:	697a      	ldr	r2, [r7, #20]
 8007fce:	4313      	orrs	r3, r2
 8007fd0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007fd8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	011b      	lsls	r3, r3, #4
 8007fde:	693a      	ldr	r2, [r7, #16]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	697a      	ldr	r2, [r7, #20]
 8007fe8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	693a      	ldr	r2, [r7, #16]
 8007fee:	621a      	str	r2, [r3, #32]
}
 8007ff0:	bf00      	nop
 8007ff2:	371c      	adds	r7, #28
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffa:	4770      	bx	lr

08007ffc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b087      	sub	sp, #28
 8008000:	af00      	add	r7, sp, #0
 8008002:	60f8      	str	r0, [r7, #12]
 8008004:	60b9      	str	r1, [r7, #8]
 8008006:	607a      	str	r2, [r7, #4]
 8008008:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6a1b      	ldr	r3, [r3, #32]
 800800e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	6a1b      	ldr	r3, [r3, #32]
 8008020:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	f023 0303 	bic.w	r3, r3, #3
 8008028:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800802a:	697a      	ldr	r2, [r7, #20]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	4313      	orrs	r3, r2
 8008030:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008038:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	011b      	lsls	r3, r3, #4
 800803e:	b2db      	uxtb	r3, r3
 8008040:	697a      	ldr	r2, [r7, #20]
 8008042:	4313      	orrs	r3, r2
 8008044:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800804c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	021b      	lsls	r3, r3, #8
 8008052:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008056:	693a      	ldr	r2, [r7, #16]
 8008058:	4313      	orrs	r3, r2
 800805a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	621a      	str	r2, [r3, #32]
}
 8008068:	bf00      	nop
 800806a:	371c      	adds	r7, #28
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr

08008074 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008074:	b480      	push	{r7}
 8008076:	b087      	sub	sp, #28
 8008078:	af00      	add	r7, sp, #0
 800807a:	60f8      	str	r0, [r7, #12]
 800807c:	60b9      	str	r1, [r7, #8]
 800807e:	607a      	str	r2, [r7, #4]
 8008080:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	6a1b      	ldr	r3, [r3, #32]
 8008086:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	69db      	ldr	r3, [r3, #28]
 8008092:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	6a1b      	ldr	r3, [r3, #32]
 8008098:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080a0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	021b      	lsls	r3, r3, #8
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	4313      	orrs	r3, r2
 80080aa:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80080b2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	031b      	lsls	r3, r3, #12
 80080b8:	b29b      	uxth	r3, r3
 80080ba:	697a      	ldr	r2, [r7, #20]
 80080bc:	4313      	orrs	r3, r2
 80080be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80080c0:	693b      	ldr	r3, [r7, #16]
 80080c2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80080c6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	031b      	lsls	r3, r3, #12
 80080cc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	621a      	str	r2, [r3, #32]
}
 80080e2:	bf00      	nop
 80080e4:	371c      	adds	r7, #28
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b085      	sub	sp, #20
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
 80080f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	689b      	ldr	r3, [r3, #8]
 80080fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008104:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008106:	683a      	ldr	r2, [r7, #0]
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	4313      	orrs	r3, r2
 800810c:	f043 0307 	orr.w	r3, r3, #7
 8008110:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	68fa      	ldr	r2, [r7, #12]
 8008116:	609a      	str	r2, [r3, #8]
}
 8008118:	bf00      	nop
 800811a:	3714      	adds	r7, #20
 800811c:	46bd      	mov	sp, r7
 800811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008122:	4770      	bx	lr

08008124 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008124:	b480      	push	{r7}
 8008126:	b087      	sub	sp, #28
 8008128:	af00      	add	r7, sp, #0
 800812a:	60f8      	str	r0, [r7, #12]
 800812c:	60b9      	str	r1, [r7, #8]
 800812e:	607a      	str	r2, [r7, #4]
 8008130:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008138:	697b      	ldr	r3, [r7, #20]
 800813a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800813e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	021a      	lsls	r2, r3, #8
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	431a      	orrs	r2, r3
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	4313      	orrs	r3, r2
 800814c:	697a      	ldr	r2, [r7, #20]
 800814e:	4313      	orrs	r3, r2
 8008150:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	697a      	ldr	r2, [r7, #20]
 8008156:	609a      	str	r2, [r3, #8]
}
 8008158:	bf00      	nop
 800815a:	371c      	adds	r7, #28
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr

08008164 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008164:	b480      	push	{r7}
 8008166:	b087      	sub	sp, #28
 8008168:	af00      	add	r7, sp, #0
 800816a:	60f8      	str	r0, [r7, #12]
 800816c:	60b9      	str	r1, [r7, #8]
 800816e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008170:	68bb      	ldr	r3, [r7, #8]
 8008172:	f003 031f 	and.w	r3, r3, #31
 8008176:	2201      	movs	r2, #1
 8008178:	fa02 f303 	lsl.w	r3, r2, r3
 800817c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	6a1a      	ldr	r2, [r3, #32]
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	43db      	mvns	r3, r3
 8008186:	401a      	ands	r2, r3
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6a1a      	ldr	r2, [r3, #32]
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	f003 031f 	and.w	r3, r3, #31
 8008196:	6879      	ldr	r1, [r7, #4]
 8008198:	fa01 f303 	lsl.w	r3, r1, r3
 800819c:	431a      	orrs	r2, r3
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	621a      	str	r2, [r3, #32]
}
 80081a2:	bf00      	nop
 80081a4:	371c      	adds	r7, #28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
	...

080081b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b085      	sub	sp, #20
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d101      	bne.n	80081c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80081c4:	2302      	movs	r3, #2
 80081c6:	e06d      	b.n	80082a4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	2201      	movs	r2, #1
 80081cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2202      	movs	r2, #2
 80081d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	4a30      	ldr	r2, [pc, #192]	; (80082b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d004      	beq.n	80081fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a2f      	ldr	r2, [pc, #188]	; (80082b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d108      	bne.n	800820e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008202:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008204:	683b      	ldr	r3, [r7, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	68fa      	ldr	r2, [r7, #12]
 800820a:	4313      	orrs	r3, r2
 800820c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008214:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008216:	683b      	ldr	r3, [r7, #0]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	68fa      	ldr	r2, [r7, #12]
 800821c:	4313      	orrs	r3, r2
 800821e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	4a20      	ldr	r2, [pc, #128]	; (80082b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d022      	beq.n	8008278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800823a:	d01d      	beq.n	8008278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a1d      	ldr	r2, [pc, #116]	; (80082b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d018      	beq.n	8008278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	4a1c      	ldr	r2, [pc, #112]	; (80082bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800824c:	4293      	cmp	r3, r2
 800824e:	d013      	beq.n	8008278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	4a1a      	ldr	r2, [pc, #104]	; (80082c0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d00e      	beq.n	8008278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	4a15      	ldr	r2, [pc, #84]	; (80082b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d009      	beq.n	8008278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	4a16      	ldr	r2, [pc, #88]	; (80082c4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800826a:	4293      	cmp	r3, r2
 800826c:	d004      	beq.n	8008278 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	4a15      	ldr	r2, [pc, #84]	; (80082c8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008274:	4293      	cmp	r3, r2
 8008276:	d10c      	bne.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008278:	68bb      	ldr	r3, [r7, #8]
 800827a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800827e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	68ba      	ldr	r2, [r7, #8]
 8008286:	4313      	orrs	r3, r2
 8008288:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68ba      	ldr	r2, [r7, #8]
 8008290:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2201      	movs	r2, #1
 8008296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2200      	movs	r2, #0
 800829e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3714      	adds	r7, #20
 80082a8:	46bd      	mov	sp, r7
 80082aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ae:	4770      	bx	lr
 80082b0:	40010000 	.word	0x40010000
 80082b4:	40010400 	.word	0x40010400
 80082b8:	40000400 	.word	0x40000400
 80082bc:	40000800 	.word	0x40000800
 80082c0:	40000c00 	.word	0x40000c00
 80082c4:	40014000 	.word	0x40014000
 80082c8:	40001800 	.word	0x40001800

080082cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082cc:	b480      	push	{r7}
 80082ce:	b083      	sub	sp, #12
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082d4:	bf00      	nop
 80082d6:	370c      	adds	r7, #12
 80082d8:	46bd      	mov	sp, r7
 80082da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082de:	4770      	bx	lr

080082e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e040      	b.n	800839c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800831e:	2b00      	cmp	r3, #0
 8008320:	d106      	bne.n	8008330 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	2200      	movs	r2, #0
 8008326:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800832a:	6878      	ldr	r0, [r7, #4]
 800832c:	f7f9 f9a4 	bl	8001678 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2224      	movs	r2, #36	; 0x24
 8008334:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	f022 0201 	bic.w	r2, r2, #1
 8008344:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f000 fb46 	bl	80089d8 <UART_SetConfig>
 800834c:	4603      	mov	r3, r0
 800834e:	2b01      	cmp	r3, #1
 8008350:	d101      	bne.n	8008356 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	e022      	b.n	800839c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800835a:	2b00      	cmp	r3, #0
 800835c:	d002      	beq.n	8008364 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f000 fd9e 	bl	8008ea0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008372:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	689a      	ldr	r2, [r3, #8]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008382:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	681a      	ldr	r2, [r3, #0]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f042 0201 	orr.w	r2, r2, #1
 8008392:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 fe25 	bl	8008fe4 <UART_CheckIdleState>
 800839a:	4603      	mov	r3, r0
}
 800839c:	4618      	mov	r0, r3
 800839e:	3708      	adds	r7, #8
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b0ba      	sub	sp, #232	; 0xe8
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	69db      	ldr	r3, [r3, #28]
 80083b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80083ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80083ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80083d2:	4013      	ands	r3, r2
 80083d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80083d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d115      	bne.n	800840c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80083e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083e4:	f003 0320 	and.w	r3, r3, #32
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00f      	beq.n	800840c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80083ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083f0:	f003 0320 	and.w	r3, r3, #32
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d009      	beq.n	800840c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	f000 82ac 	beq.w	800895a <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	4798      	blx	r3
      }
      return;
 800840a:	e2a6      	b.n	800895a <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800840c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008410:	2b00      	cmp	r3, #0
 8008412:	f000 8117 	beq.w	8008644 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8008416:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800841a:	f003 0301 	and.w	r3, r3, #1
 800841e:	2b00      	cmp	r3, #0
 8008420:	d106      	bne.n	8008430 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8008422:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8008426:	4b85      	ldr	r3, [pc, #532]	; (800863c <HAL_UART_IRQHandler+0x298>)
 8008428:	4013      	ands	r3, r2
 800842a:	2b00      	cmp	r3, #0
 800842c:	f000 810a 	beq.w	8008644 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008430:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008434:	f003 0301 	and.w	r3, r3, #1
 8008438:	2b00      	cmp	r3, #0
 800843a:	d011      	beq.n	8008460 <HAL_UART_IRQHandler+0xbc>
 800843c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008444:	2b00      	cmp	r3, #0
 8008446:	d00b      	beq.n	8008460 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	2201      	movs	r2, #1
 800844e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008456:	f043 0201 	orr.w	r2, r3, #1
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008460:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008464:	f003 0302 	and.w	r3, r3, #2
 8008468:	2b00      	cmp	r3, #0
 800846a:	d011      	beq.n	8008490 <HAL_UART_IRQHandler+0xec>
 800846c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008470:	f003 0301 	and.w	r3, r3, #1
 8008474:	2b00      	cmp	r3, #0
 8008476:	d00b      	beq.n	8008490 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2202      	movs	r2, #2
 800847e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008486:	f043 0204 	orr.w	r2, r3, #4
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008494:	f003 0304 	and.w	r3, r3, #4
 8008498:	2b00      	cmp	r3, #0
 800849a:	d011      	beq.n	80084c0 <HAL_UART_IRQHandler+0x11c>
 800849c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084a0:	f003 0301 	and.w	r3, r3, #1
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00b      	beq.n	80084c0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	2204      	movs	r2, #4
 80084ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084b6:	f043 0202 	orr.w	r2, r3, #2
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80084c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084c4:	f003 0308 	and.w	r3, r3, #8
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d017      	beq.n	80084fc <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80084cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084d0:	f003 0320 	and.w	r3, r3, #32
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d105      	bne.n	80084e4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80084d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084dc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d00b      	beq.n	80084fc <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	2208      	movs	r2, #8
 80084ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084f2:	f043 0208 	orr.w	r2, r3, #8
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80084fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008504:	2b00      	cmp	r3, #0
 8008506:	d012      	beq.n	800852e <HAL_UART_IRQHandler+0x18a>
 8008508:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800850c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008510:	2b00      	cmp	r3, #0
 8008512:	d00c      	beq.n	800852e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800851c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008524:	f043 0220 	orr.w	r2, r3, #32
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 8212 	beq.w	800895e <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800853a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800853e:	f003 0320 	and.w	r3, r3, #32
 8008542:	2b00      	cmp	r3, #0
 8008544:	d00d      	beq.n	8008562 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8008546:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800854a:	f003 0320 	and.w	r3, r3, #32
 800854e:	2b00      	cmp	r3, #0
 8008550:	d007      	beq.n	8008562 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008556:	2b00      	cmp	r3, #0
 8008558:	d003      	beq.n	8008562 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800855e:	6878      	ldr	r0, [r7, #4]
 8008560:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008568:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	689b      	ldr	r3, [r3, #8]
 8008572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008576:	2b40      	cmp	r3, #64	; 0x40
 8008578:	d005      	beq.n	8008586 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800857a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800857e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008582:	2b00      	cmp	r3, #0
 8008584:	d04f      	beq.n	8008626 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 ff06 	bl	8009398 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	689b      	ldr	r3, [r3, #8]
 8008592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008596:	2b40      	cmp	r3, #64	; 0x40
 8008598:	d141      	bne.n	800861e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	3308      	adds	r3, #8
 80085a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80085a8:	e853 3f00 	ldrex	r3, [r3]
 80085ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80085b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80085b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80085b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	3308      	adds	r3, #8
 80085c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80085c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80085ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80085d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80085d6:	e841 2300 	strex	r3, r2, [r1]
 80085da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80085de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1d9      	bne.n	800859a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d013      	beq.n	8008616 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085f2:	4a13      	ldr	r2, [pc, #76]	; (8008640 <HAL_UART_IRQHandler+0x29c>)
 80085f4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085fa:	4618      	mov	r0, r3
 80085fc:	f7f9 ff32 	bl	8002464 <HAL_DMA_Abort_IT>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d017      	beq.n	8008636 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800860a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800860c:	687a      	ldr	r2, [r7, #4]
 800860e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008610:	4610      	mov	r0, r2
 8008612:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008614:	e00f      	b.n	8008636 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 f9ca 	bl	80089b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800861c:	e00b      	b.n	8008636 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800861e:	6878      	ldr	r0, [r7, #4]
 8008620:	f000 f9c6 	bl	80089b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008624:	e007      	b.n	8008636 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f9c2 	bl	80089b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8008634:	e193      	b.n	800895e <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008636:	bf00      	nop
    return;
 8008638:	e191      	b.n	800895e <HAL_UART_IRQHandler+0x5ba>
 800863a:	bf00      	nop
 800863c:	04000120 	.word	0x04000120
 8008640:	08009645 	.word	0x08009645

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008648:	2b01      	cmp	r3, #1
 800864a:	f040 814c 	bne.w	80088e6 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800864e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008652:	f003 0310 	and.w	r3, r3, #16
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 8145 	beq.w	80088e6 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800865c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008660:	f003 0310 	and.w	r3, r3, #16
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 813e 	beq.w	80088e6 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	2210      	movs	r2, #16
 8008670:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800867c:	2b40      	cmp	r3, #64	; 0x40
 800867e:	f040 80b6 	bne.w	80087ee <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	685b      	ldr	r3, [r3, #4]
 800868a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800868e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008692:	2b00      	cmp	r3, #0
 8008694:	f000 8165 	beq.w	8008962 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800869e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086a2:	429a      	cmp	r2, r3
 80086a4:	f080 815d 	bcs.w	8008962 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80086ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80086b6:	69db      	ldr	r3, [r3, #28]
 80086b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80086bc:	f000 8086 	beq.w	80087cc <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80086cc:	e853 3f00 	ldrex	r3, [r3]
 80086d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80086d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80086dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	461a      	mov	r2, r3
 80086e6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80086ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80086ee:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80086f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80086fa:	e841 2300 	strex	r3, r2, [r1]
 80086fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008702:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008706:	2b00      	cmp	r3, #0
 8008708:	d1da      	bne.n	80086c0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	3308      	adds	r3, #8
 8008710:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008714:	e853 3f00 	ldrex	r3, [r3]
 8008718:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800871a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800871c:	f023 0301 	bic.w	r3, r3, #1
 8008720:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	3308      	adds	r3, #8
 800872a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800872e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008732:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008734:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008736:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800873a:	e841 2300 	strex	r3, r2, [r1]
 800873e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008740:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1e1      	bne.n	800870a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	3308      	adds	r3, #8
 800874c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800874e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008750:	e853 3f00 	ldrex	r3, [r3]
 8008754:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008756:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008758:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800875c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	3308      	adds	r3, #8
 8008766:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800876a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800876c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800876e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008770:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008772:	e841 2300 	strex	r3, r2, [r1]
 8008776:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800877a:	2b00      	cmp	r3, #0
 800877c:	d1e3      	bne.n	8008746 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2220      	movs	r2, #32
 8008782:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	2200      	movs	r2, #0
 800878a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008794:	e853 3f00 	ldrex	r3, [r3]
 8008798:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800879a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800879c:	f023 0310 	bic.w	r3, r3, #16
 80087a0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	461a      	mov	r2, r3
 80087aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80087ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80087b0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087b2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80087b4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80087b6:	e841 2300 	strex	r3, r2, [r1]
 80087ba:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80087bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d1e4      	bne.n	800878c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087c6:	4618      	mov	r0, r3
 80087c8:	f7f9 fddc 	bl	8002384 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2202      	movs	r2, #2
 80087d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087de:	b29b      	uxth	r3, r3
 80087e0:	1ad3      	subs	r3, r2, r3
 80087e2:	b29b      	uxth	r3, r3
 80087e4:	4619      	mov	r1, r3
 80087e6:	6878      	ldr	r0, [r7, #4]
 80087e8:	f002 fc52 	bl	800b090 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80087ec:	e0b9      	b.n	8008962 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80087fa:	b29b      	uxth	r3, r3
 80087fc:	1ad3      	subs	r3, r2, r3
 80087fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008808:	b29b      	uxth	r3, r3
 800880a:	2b00      	cmp	r3, #0
 800880c:	f000 80ab 	beq.w	8008966 <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 8008810:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008814:	2b00      	cmp	r3, #0
 8008816:	f000 80a6 	beq.w	8008966 <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008822:	e853 3f00 	ldrex	r3, [r3]
 8008826:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800882e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	461a      	mov	r2, r3
 8008838:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800883c:	647b      	str	r3, [r7, #68]	; 0x44
 800883e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008840:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008842:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008844:	e841 2300 	strex	r3, r2, [r1]
 8008848:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800884a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1e4      	bne.n	800881a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	3308      	adds	r3, #8
 8008856:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800885a:	e853 3f00 	ldrex	r3, [r3]
 800885e:	623b      	str	r3, [r7, #32]
   return(result);
 8008860:	6a3b      	ldr	r3, [r7, #32]
 8008862:	f023 0301 	bic.w	r3, r3, #1
 8008866:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	3308      	adds	r3, #8
 8008870:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008874:	633a      	str	r2, [r7, #48]	; 0x30
 8008876:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008878:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800887a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800887c:	e841 2300 	strex	r3, r2, [r1]
 8008880:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e3      	bne.n	8008850 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2220      	movs	r2, #32
 800888c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2200      	movs	r2, #0
 800889a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088a2:	693b      	ldr	r3, [r7, #16]
 80088a4:	e853 3f00 	ldrex	r3, [r3]
 80088a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	f023 0310 	bic.w	r3, r3, #16
 80088b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	461a      	mov	r2, r3
 80088ba:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80088be:	61fb      	str	r3, [r7, #28]
 80088c0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088c2:	69b9      	ldr	r1, [r7, #24]
 80088c4:	69fa      	ldr	r2, [r7, #28]
 80088c6:	e841 2300 	strex	r3, r2, [r1]
 80088ca:	617b      	str	r3, [r7, #20]
   return(result);
 80088cc:	697b      	ldr	r3, [r7, #20]
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d1e4      	bne.n	800889c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2202      	movs	r2, #2
 80088d6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80088d8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80088dc:	4619      	mov	r1, r3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f002 fbd6 	bl	800b090 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80088e4:	e03f      	b.n	8008966 <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80088e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d00e      	beq.n	8008910 <HAL_UART_IRQHandler+0x56c>
 80088f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d008      	beq.n	8008910 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008906:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008908:	6878      	ldr	r0, [r7, #4]
 800890a:	f000 f85b 	bl	80089c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800890e:	e02d      	b.n	800896c <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8008910:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008918:	2b00      	cmp	r3, #0
 800891a:	d00e      	beq.n	800893a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800891c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008924:	2b00      	cmp	r3, #0
 8008926:	d008      	beq.n	800893a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800892c:	2b00      	cmp	r3, #0
 800892e:	d01c      	beq.n	800896a <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	4798      	blx	r3
    }
    return;
 8008938:	e017      	b.n	800896a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800893a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800893e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008942:	2b00      	cmp	r3, #0
 8008944:	d012      	beq.n	800896c <HAL_UART_IRQHandler+0x5c8>
 8008946:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800894a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00c      	beq.n	800896c <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8008952:	6878      	ldr	r0, [r7, #4]
 8008954:	f000 fe8c 	bl	8009670 <UART_EndTransmit_IT>
    return;
 8008958:	e008      	b.n	800896c <HAL_UART_IRQHandler+0x5c8>
      return;
 800895a:	bf00      	nop
 800895c:	e006      	b.n	800896c <HAL_UART_IRQHandler+0x5c8>
    return;
 800895e:	bf00      	nop
 8008960:	e004      	b.n	800896c <HAL_UART_IRQHandler+0x5c8>
      return;
 8008962:	bf00      	nop
 8008964:	e002      	b.n	800896c <HAL_UART_IRQHandler+0x5c8>
      return;
 8008966:	bf00      	nop
 8008968:	e000      	b.n	800896c <HAL_UART_IRQHandler+0x5c8>
    return;
 800896a:	bf00      	nop
  }

}
 800896c:	37e8      	adds	r7, #232	; 0xe8
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop

08008974 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800897c:	bf00      	nop
 800897e:	370c      	adds	r7, #12
 8008980:	46bd      	mov	sp, r7
 8008982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008986:	4770      	bx	lr

08008988 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008990:	bf00      	nop
 8008992:	370c      	adds	r7, #12
 8008994:	46bd      	mov	sp, r7
 8008996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800899a:	4770      	bx	lr

0800899c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800899c:	b480      	push	{r7}
 800899e:	b083      	sub	sp, #12
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80089a4:	bf00      	nop
 80089a6:	370c      	adds	r7, #12
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr

080089b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089b0:	b480      	push	{r7}
 80089b2:	b083      	sub	sp, #12
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80089b8:	bf00      	nop
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b083      	sub	sp, #12
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr

080089d8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089d8:	b580      	push	{r7, lr}
 80089da:	b088      	sub	sp, #32
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80089e0:	2300      	movs	r3, #0
 80089e2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	689a      	ldr	r2, [r3, #8]
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	691b      	ldr	r3, [r3, #16]
 80089ec:	431a      	orrs	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	431a      	orrs	r2, r3
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	69db      	ldr	r3, [r3, #28]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	681a      	ldr	r2, [r3, #0]
 8008a02:	4ba6      	ldr	r3, [pc, #664]	; (8008c9c <UART_SetConfig+0x2c4>)
 8008a04:	4013      	ands	r3, r2
 8008a06:	687a      	ldr	r2, [r7, #4]
 8008a08:	6812      	ldr	r2, [r2, #0]
 8008a0a:	6979      	ldr	r1, [r7, #20]
 8008a0c:	430b      	orrs	r3, r1
 8008a0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	685b      	ldr	r3, [r3, #4]
 8008a16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	430a      	orrs	r2, r1
 8008a24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	699b      	ldr	r3, [r3, #24]
 8008a2a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	6a1b      	ldr	r3, [r3, #32]
 8008a30:	697a      	ldr	r2, [r7, #20]
 8008a32:	4313      	orrs	r3, r2
 8008a34:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	689b      	ldr	r3, [r3, #8]
 8008a3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	697a      	ldr	r2, [r7, #20]
 8008a46:	430a      	orrs	r2, r1
 8008a48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a94      	ldr	r2, [pc, #592]	; (8008ca0 <UART_SetConfig+0x2c8>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d120      	bne.n	8008a96 <UART_SetConfig+0xbe>
 8008a54:	4b93      	ldr	r3, [pc, #588]	; (8008ca4 <UART_SetConfig+0x2cc>)
 8008a56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a5a:	f003 0303 	and.w	r3, r3, #3
 8008a5e:	2b03      	cmp	r3, #3
 8008a60:	d816      	bhi.n	8008a90 <UART_SetConfig+0xb8>
 8008a62:	a201      	add	r2, pc, #4	; (adr r2, 8008a68 <UART_SetConfig+0x90>)
 8008a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a68:	08008a79 	.word	0x08008a79
 8008a6c:	08008a85 	.word	0x08008a85
 8008a70:	08008a7f 	.word	0x08008a7f
 8008a74:	08008a8b 	.word	0x08008a8b
 8008a78:	2301      	movs	r3, #1
 8008a7a:	77fb      	strb	r3, [r7, #31]
 8008a7c:	e150      	b.n	8008d20 <UART_SetConfig+0x348>
 8008a7e:	2302      	movs	r3, #2
 8008a80:	77fb      	strb	r3, [r7, #31]
 8008a82:	e14d      	b.n	8008d20 <UART_SetConfig+0x348>
 8008a84:	2304      	movs	r3, #4
 8008a86:	77fb      	strb	r3, [r7, #31]
 8008a88:	e14a      	b.n	8008d20 <UART_SetConfig+0x348>
 8008a8a:	2308      	movs	r3, #8
 8008a8c:	77fb      	strb	r3, [r7, #31]
 8008a8e:	e147      	b.n	8008d20 <UART_SetConfig+0x348>
 8008a90:	2310      	movs	r3, #16
 8008a92:	77fb      	strb	r3, [r7, #31]
 8008a94:	e144      	b.n	8008d20 <UART_SetConfig+0x348>
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a83      	ldr	r2, [pc, #524]	; (8008ca8 <UART_SetConfig+0x2d0>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d132      	bne.n	8008b06 <UART_SetConfig+0x12e>
 8008aa0:	4b80      	ldr	r3, [pc, #512]	; (8008ca4 <UART_SetConfig+0x2cc>)
 8008aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008aa6:	f003 030c 	and.w	r3, r3, #12
 8008aaa:	2b0c      	cmp	r3, #12
 8008aac:	d828      	bhi.n	8008b00 <UART_SetConfig+0x128>
 8008aae:	a201      	add	r2, pc, #4	; (adr r2, 8008ab4 <UART_SetConfig+0xdc>)
 8008ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab4:	08008ae9 	.word	0x08008ae9
 8008ab8:	08008b01 	.word	0x08008b01
 8008abc:	08008b01 	.word	0x08008b01
 8008ac0:	08008b01 	.word	0x08008b01
 8008ac4:	08008af5 	.word	0x08008af5
 8008ac8:	08008b01 	.word	0x08008b01
 8008acc:	08008b01 	.word	0x08008b01
 8008ad0:	08008b01 	.word	0x08008b01
 8008ad4:	08008aef 	.word	0x08008aef
 8008ad8:	08008b01 	.word	0x08008b01
 8008adc:	08008b01 	.word	0x08008b01
 8008ae0:	08008b01 	.word	0x08008b01
 8008ae4:	08008afb 	.word	0x08008afb
 8008ae8:	2300      	movs	r3, #0
 8008aea:	77fb      	strb	r3, [r7, #31]
 8008aec:	e118      	b.n	8008d20 <UART_SetConfig+0x348>
 8008aee:	2302      	movs	r3, #2
 8008af0:	77fb      	strb	r3, [r7, #31]
 8008af2:	e115      	b.n	8008d20 <UART_SetConfig+0x348>
 8008af4:	2304      	movs	r3, #4
 8008af6:	77fb      	strb	r3, [r7, #31]
 8008af8:	e112      	b.n	8008d20 <UART_SetConfig+0x348>
 8008afa:	2308      	movs	r3, #8
 8008afc:	77fb      	strb	r3, [r7, #31]
 8008afe:	e10f      	b.n	8008d20 <UART_SetConfig+0x348>
 8008b00:	2310      	movs	r3, #16
 8008b02:	77fb      	strb	r3, [r7, #31]
 8008b04:	e10c      	b.n	8008d20 <UART_SetConfig+0x348>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	4a68      	ldr	r2, [pc, #416]	; (8008cac <UART_SetConfig+0x2d4>)
 8008b0c:	4293      	cmp	r3, r2
 8008b0e:	d120      	bne.n	8008b52 <UART_SetConfig+0x17a>
 8008b10:	4b64      	ldr	r3, [pc, #400]	; (8008ca4 <UART_SetConfig+0x2cc>)
 8008b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008b1a:	2b30      	cmp	r3, #48	; 0x30
 8008b1c:	d013      	beq.n	8008b46 <UART_SetConfig+0x16e>
 8008b1e:	2b30      	cmp	r3, #48	; 0x30
 8008b20:	d814      	bhi.n	8008b4c <UART_SetConfig+0x174>
 8008b22:	2b20      	cmp	r3, #32
 8008b24:	d009      	beq.n	8008b3a <UART_SetConfig+0x162>
 8008b26:	2b20      	cmp	r3, #32
 8008b28:	d810      	bhi.n	8008b4c <UART_SetConfig+0x174>
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d002      	beq.n	8008b34 <UART_SetConfig+0x15c>
 8008b2e:	2b10      	cmp	r3, #16
 8008b30:	d006      	beq.n	8008b40 <UART_SetConfig+0x168>
 8008b32:	e00b      	b.n	8008b4c <UART_SetConfig+0x174>
 8008b34:	2300      	movs	r3, #0
 8008b36:	77fb      	strb	r3, [r7, #31]
 8008b38:	e0f2      	b.n	8008d20 <UART_SetConfig+0x348>
 8008b3a:	2302      	movs	r3, #2
 8008b3c:	77fb      	strb	r3, [r7, #31]
 8008b3e:	e0ef      	b.n	8008d20 <UART_SetConfig+0x348>
 8008b40:	2304      	movs	r3, #4
 8008b42:	77fb      	strb	r3, [r7, #31]
 8008b44:	e0ec      	b.n	8008d20 <UART_SetConfig+0x348>
 8008b46:	2308      	movs	r3, #8
 8008b48:	77fb      	strb	r3, [r7, #31]
 8008b4a:	e0e9      	b.n	8008d20 <UART_SetConfig+0x348>
 8008b4c:	2310      	movs	r3, #16
 8008b4e:	77fb      	strb	r3, [r7, #31]
 8008b50:	e0e6      	b.n	8008d20 <UART_SetConfig+0x348>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a56      	ldr	r2, [pc, #344]	; (8008cb0 <UART_SetConfig+0x2d8>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d120      	bne.n	8008b9e <UART_SetConfig+0x1c6>
 8008b5c:	4b51      	ldr	r3, [pc, #324]	; (8008ca4 <UART_SetConfig+0x2cc>)
 8008b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008b62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b66:	2bc0      	cmp	r3, #192	; 0xc0
 8008b68:	d013      	beq.n	8008b92 <UART_SetConfig+0x1ba>
 8008b6a:	2bc0      	cmp	r3, #192	; 0xc0
 8008b6c:	d814      	bhi.n	8008b98 <UART_SetConfig+0x1c0>
 8008b6e:	2b80      	cmp	r3, #128	; 0x80
 8008b70:	d009      	beq.n	8008b86 <UART_SetConfig+0x1ae>
 8008b72:	2b80      	cmp	r3, #128	; 0x80
 8008b74:	d810      	bhi.n	8008b98 <UART_SetConfig+0x1c0>
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d002      	beq.n	8008b80 <UART_SetConfig+0x1a8>
 8008b7a:	2b40      	cmp	r3, #64	; 0x40
 8008b7c:	d006      	beq.n	8008b8c <UART_SetConfig+0x1b4>
 8008b7e:	e00b      	b.n	8008b98 <UART_SetConfig+0x1c0>
 8008b80:	2300      	movs	r3, #0
 8008b82:	77fb      	strb	r3, [r7, #31]
 8008b84:	e0cc      	b.n	8008d20 <UART_SetConfig+0x348>
 8008b86:	2302      	movs	r3, #2
 8008b88:	77fb      	strb	r3, [r7, #31]
 8008b8a:	e0c9      	b.n	8008d20 <UART_SetConfig+0x348>
 8008b8c:	2304      	movs	r3, #4
 8008b8e:	77fb      	strb	r3, [r7, #31]
 8008b90:	e0c6      	b.n	8008d20 <UART_SetConfig+0x348>
 8008b92:	2308      	movs	r3, #8
 8008b94:	77fb      	strb	r3, [r7, #31]
 8008b96:	e0c3      	b.n	8008d20 <UART_SetConfig+0x348>
 8008b98:	2310      	movs	r3, #16
 8008b9a:	77fb      	strb	r3, [r7, #31]
 8008b9c:	e0c0      	b.n	8008d20 <UART_SetConfig+0x348>
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	4a44      	ldr	r2, [pc, #272]	; (8008cb4 <UART_SetConfig+0x2dc>)
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	d125      	bne.n	8008bf4 <UART_SetConfig+0x21c>
 8008ba8:	4b3e      	ldr	r3, [pc, #248]	; (8008ca4 <UART_SetConfig+0x2cc>)
 8008baa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bb6:	d017      	beq.n	8008be8 <UART_SetConfig+0x210>
 8008bb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008bbc:	d817      	bhi.n	8008bee <UART_SetConfig+0x216>
 8008bbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bc2:	d00b      	beq.n	8008bdc <UART_SetConfig+0x204>
 8008bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008bc8:	d811      	bhi.n	8008bee <UART_SetConfig+0x216>
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d003      	beq.n	8008bd6 <UART_SetConfig+0x1fe>
 8008bce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bd2:	d006      	beq.n	8008be2 <UART_SetConfig+0x20a>
 8008bd4:	e00b      	b.n	8008bee <UART_SetConfig+0x216>
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	77fb      	strb	r3, [r7, #31]
 8008bda:	e0a1      	b.n	8008d20 <UART_SetConfig+0x348>
 8008bdc:	2302      	movs	r3, #2
 8008bde:	77fb      	strb	r3, [r7, #31]
 8008be0:	e09e      	b.n	8008d20 <UART_SetConfig+0x348>
 8008be2:	2304      	movs	r3, #4
 8008be4:	77fb      	strb	r3, [r7, #31]
 8008be6:	e09b      	b.n	8008d20 <UART_SetConfig+0x348>
 8008be8:	2308      	movs	r3, #8
 8008bea:	77fb      	strb	r3, [r7, #31]
 8008bec:	e098      	b.n	8008d20 <UART_SetConfig+0x348>
 8008bee:	2310      	movs	r3, #16
 8008bf0:	77fb      	strb	r3, [r7, #31]
 8008bf2:	e095      	b.n	8008d20 <UART_SetConfig+0x348>
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	4a2f      	ldr	r2, [pc, #188]	; (8008cb8 <UART_SetConfig+0x2e0>)
 8008bfa:	4293      	cmp	r3, r2
 8008bfc:	d125      	bne.n	8008c4a <UART_SetConfig+0x272>
 8008bfe:	4b29      	ldr	r3, [pc, #164]	; (8008ca4 <UART_SetConfig+0x2cc>)
 8008c00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008c08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c0c:	d017      	beq.n	8008c3e <UART_SetConfig+0x266>
 8008c0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008c12:	d817      	bhi.n	8008c44 <UART_SetConfig+0x26c>
 8008c14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c18:	d00b      	beq.n	8008c32 <UART_SetConfig+0x25a>
 8008c1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008c1e:	d811      	bhi.n	8008c44 <UART_SetConfig+0x26c>
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d003      	beq.n	8008c2c <UART_SetConfig+0x254>
 8008c24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c28:	d006      	beq.n	8008c38 <UART_SetConfig+0x260>
 8008c2a:	e00b      	b.n	8008c44 <UART_SetConfig+0x26c>
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	77fb      	strb	r3, [r7, #31]
 8008c30:	e076      	b.n	8008d20 <UART_SetConfig+0x348>
 8008c32:	2302      	movs	r3, #2
 8008c34:	77fb      	strb	r3, [r7, #31]
 8008c36:	e073      	b.n	8008d20 <UART_SetConfig+0x348>
 8008c38:	2304      	movs	r3, #4
 8008c3a:	77fb      	strb	r3, [r7, #31]
 8008c3c:	e070      	b.n	8008d20 <UART_SetConfig+0x348>
 8008c3e:	2308      	movs	r3, #8
 8008c40:	77fb      	strb	r3, [r7, #31]
 8008c42:	e06d      	b.n	8008d20 <UART_SetConfig+0x348>
 8008c44:	2310      	movs	r3, #16
 8008c46:	77fb      	strb	r3, [r7, #31]
 8008c48:	e06a      	b.n	8008d20 <UART_SetConfig+0x348>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a1b      	ldr	r2, [pc, #108]	; (8008cbc <UART_SetConfig+0x2e4>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d138      	bne.n	8008cc6 <UART_SetConfig+0x2ee>
 8008c54:	4b13      	ldr	r3, [pc, #76]	; (8008ca4 <UART_SetConfig+0x2cc>)
 8008c56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008c5a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008c5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c62:	d017      	beq.n	8008c94 <UART_SetConfig+0x2bc>
 8008c64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008c68:	d82a      	bhi.n	8008cc0 <UART_SetConfig+0x2e8>
 8008c6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c6e:	d00b      	beq.n	8008c88 <UART_SetConfig+0x2b0>
 8008c70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008c74:	d824      	bhi.n	8008cc0 <UART_SetConfig+0x2e8>
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d003      	beq.n	8008c82 <UART_SetConfig+0x2aa>
 8008c7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c7e:	d006      	beq.n	8008c8e <UART_SetConfig+0x2b6>
 8008c80:	e01e      	b.n	8008cc0 <UART_SetConfig+0x2e8>
 8008c82:	2300      	movs	r3, #0
 8008c84:	77fb      	strb	r3, [r7, #31]
 8008c86:	e04b      	b.n	8008d20 <UART_SetConfig+0x348>
 8008c88:	2302      	movs	r3, #2
 8008c8a:	77fb      	strb	r3, [r7, #31]
 8008c8c:	e048      	b.n	8008d20 <UART_SetConfig+0x348>
 8008c8e:	2304      	movs	r3, #4
 8008c90:	77fb      	strb	r3, [r7, #31]
 8008c92:	e045      	b.n	8008d20 <UART_SetConfig+0x348>
 8008c94:	2308      	movs	r3, #8
 8008c96:	77fb      	strb	r3, [r7, #31]
 8008c98:	e042      	b.n	8008d20 <UART_SetConfig+0x348>
 8008c9a:	bf00      	nop
 8008c9c:	efff69f3 	.word	0xefff69f3
 8008ca0:	40011000 	.word	0x40011000
 8008ca4:	40023800 	.word	0x40023800
 8008ca8:	40004400 	.word	0x40004400
 8008cac:	40004800 	.word	0x40004800
 8008cb0:	40004c00 	.word	0x40004c00
 8008cb4:	40005000 	.word	0x40005000
 8008cb8:	40011400 	.word	0x40011400
 8008cbc:	40007800 	.word	0x40007800
 8008cc0:	2310      	movs	r3, #16
 8008cc2:	77fb      	strb	r3, [r7, #31]
 8008cc4:	e02c      	b.n	8008d20 <UART_SetConfig+0x348>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	4a72      	ldr	r2, [pc, #456]	; (8008e94 <UART_SetConfig+0x4bc>)
 8008ccc:	4293      	cmp	r3, r2
 8008cce:	d125      	bne.n	8008d1c <UART_SetConfig+0x344>
 8008cd0:	4b71      	ldr	r3, [pc, #452]	; (8008e98 <UART_SetConfig+0x4c0>)
 8008cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cd6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008cda:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008cde:	d017      	beq.n	8008d10 <UART_SetConfig+0x338>
 8008ce0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008ce4:	d817      	bhi.n	8008d16 <UART_SetConfig+0x33e>
 8008ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cea:	d00b      	beq.n	8008d04 <UART_SetConfig+0x32c>
 8008cec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008cf0:	d811      	bhi.n	8008d16 <UART_SetConfig+0x33e>
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d003      	beq.n	8008cfe <UART_SetConfig+0x326>
 8008cf6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008cfa:	d006      	beq.n	8008d0a <UART_SetConfig+0x332>
 8008cfc:	e00b      	b.n	8008d16 <UART_SetConfig+0x33e>
 8008cfe:	2300      	movs	r3, #0
 8008d00:	77fb      	strb	r3, [r7, #31]
 8008d02:	e00d      	b.n	8008d20 <UART_SetConfig+0x348>
 8008d04:	2302      	movs	r3, #2
 8008d06:	77fb      	strb	r3, [r7, #31]
 8008d08:	e00a      	b.n	8008d20 <UART_SetConfig+0x348>
 8008d0a:	2304      	movs	r3, #4
 8008d0c:	77fb      	strb	r3, [r7, #31]
 8008d0e:	e007      	b.n	8008d20 <UART_SetConfig+0x348>
 8008d10:	2308      	movs	r3, #8
 8008d12:	77fb      	strb	r3, [r7, #31]
 8008d14:	e004      	b.n	8008d20 <UART_SetConfig+0x348>
 8008d16:	2310      	movs	r3, #16
 8008d18:	77fb      	strb	r3, [r7, #31]
 8008d1a:	e001      	b.n	8008d20 <UART_SetConfig+0x348>
 8008d1c:	2310      	movs	r3, #16
 8008d1e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	69db      	ldr	r3, [r3, #28]
 8008d24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008d28:	d15b      	bne.n	8008de2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8008d2a:	7ffb      	ldrb	r3, [r7, #31]
 8008d2c:	2b08      	cmp	r3, #8
 8008d2e:	d828      	bhi.n	8008d82 <UART_SetConfig+0x3aa>
 8008d30:	a201      	add	r2, pc, #4	; (adr r2, 8008d38 <UART_SetConfig+0x360>)
 8008d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d36:	bf00      	nop
 8008d38:	08008d5d 	.word	0x08008d5d
 8008d3c:	08008d65 	.word	0x08008d65
 8008d40:	08008d6d 	.word	0x08008d6d
 8008d44:	08008d83 	.word	0x08008d83
 8008d48:	08008d73 	.word	0x08008d73
 8008d4c:	08008d83 	.word	0x08008d83
 8008d50:	08008d83 	.word	0x08008d83
 8008d54:	08008d83 	.word	0x08008d83
 8008d58:	08008d7b 	.word	0x08008d7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008d5c:	f7fc fc06 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 8008d60:	61b8      	str	r0, [r7, #24]
        break;
 8008d62:	e013      	b.n	8008d8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008d64:	f7fc fc16 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8008d68:	61b8      	str	r0, [r7, #24]
        break;
 8008d6a:	e00f      	b.n	8008d8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008d6c:	4b4b      	ldr	r3, [pc, #300]	; (8008e9c <UART_SetConfig+0x4c4>)
 8008d6e:	61bb      	str	r3, [r7, #24]
        break;
 8008d70:	e00c      	b.n	8008d8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008d72:	f7fc fae9 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 8008d76:	61b8      	str	r0, [r7, #24]
        break;
 8008d78:	e008      	b.n	8008d8c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008d7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d7e:	61bb      	str	r3, [r7, #24]
        break;
 8008d80:	e004      	b.n	8008d8c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8008d82:	2300      	movs	r3, #0
 8008d84:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	77bb      	strb	r3, [r7, #30]
        break;
 8008d8a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d074      	beq.n	8008e7c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	005a      	lsls	r2, r3, #1
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	685b      	ldr	r3, [r3, #4]
 8008d9a:	085b      	lsrs	r3, r3, #1
 8008d9c:	441a      	add	r2, r3
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	685b      	ldr	r3, [r3, #4]
 8008da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8008da6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008da8:	693b      	ldr	r3, [r7, #16]
 8008daa:	2b0f      	cmp	r3, #15
 8008dac:	d916      	bls.n	8008ddc <UART_SetConfig+0x404>
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008db4:	d212      	bcs.n	8008ddc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	b29b      	uxth	r3, r3
 8008dba:	f023 030f 	bic.w	r3, r3, #15
 8008dbe:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008dc0:	693b      	ldr	r3, [r7, #16]
 8008dc2:	085b      	lsrs	r3, r3, #1
 8008dc4:	b29b      	uxth	r3, r3
 8008dc6:	f003 0307 	and.w	r3, r3, #7
 8008dca:	b29a      	uxth	r2, r3
 8008dcc:	89fb      	ldrh	r3, [r7, #14]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	89fa      	ldrh	r2, [r7, #14]
 8008dd8:	60da      	str	r2, [r3, #12]
 8008dda:	e04f      	b.n	8008e7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	77bb      	strb	r3, [r7, #30]
 8008de0:	e04c      	b.n	8008e7c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008de2:	7ffb      	ldrb	r3, [r7, #31]
 8008de4:	2b08      	cmp	r3, #8
 8008de6:	d828      	bhi.n	8008e3a <UART_SetConfig+0x462>
 8008de8:	a201      	add	r2, pc, #4	; (adr r2, 8008df0 <UART_SetConfig+0x418>)
 8008dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dee:	bf00      	nop
 8008df0:	08008e15 	.word	0x08008e15
 8008df4:	08008e1d 	.word	0x08008e1d
 8008df8:	08008e25 	.word	0x08008e25
 8008dfc:	08008e3b 	.word	0x08008e3b
 8008e00:	08008e2b 	.word	0x08008e2b
 8008e04:	08008e3b 	.word	0x08008e3b
 8008e08:	08008e3b 	.word	0x08008e3b
 8008e0c:	08008e3b 	.word	0x08008e3b
 8008e10:	08008e33 	.word	0x08008e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008e14:	f7fc fbaa 	bl	800556c <HAL_RCC_GetPCLK1Freq>
 8008e18:	61b8      	str	r0, [r7, #24]
        break;
 8008e1a:	e013      	b.n	8008e44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008e1c:	f7fc fbba 	bl	8005594 <HAL_RCC_GetPCLK2Freq>
 8008e20:	61b8      	str	r0, [r7, #24]
        break;
 8008e22:	e00f      	b.n	8008e44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008e24:	4b1d      	ldr	r3, [pc, #116]	; (8008e9c <UART_SetConfig+0x4c4>)
 8008e26:	61bb      	str	r3, [r7, #24]
        break;
 8008e28:	e00c      	b.n	8008e44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008e2a:	f7fc fa8d 	bl	8005348 <HAL_RCC_GetSysClockFreq>
 8008e2e:	61b8      	str	r0, [r7, #24]
        break;
 8008e30:	e008      	b.n	8008e44 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e36:	61bb      	str	r3, [r7, #24]
        break;
 8008e38:	e004      	b.n	8008e44 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8008e3a:	2300      	movs	r3, #0
 8008e3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8008e3e:	2301      	movs	r3, #1
 8008e40:	77bb      	strb	r3, [r7, #30]
        break;
 8008e42:	bf00      	nop
    }

    if (pclk != 0U)
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d018      	beq.n	8008e7c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	685b      	ldr	r3, [r3, #4]
 8008e4e:	085a      	lsrs	r2, r3, #1
 8008e50:	69bb      	ldr	r3, [r7, #24]
 8008e52:	441a      	add	r2, r3
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	685b      	ldr	r3, [r3, #4]
 8008e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008e5e:	693b      	ldr	r3, [r7, #16]
 8008e60:	2b0f      	cmp	r3, #15
 8008e62:	d909      	bls.n	8008e78 <UART_SetConfig+0x4a0>
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008e6a:	d205      	bcs.n	8008e78 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	b29a      	uxth	r2, r3
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	60da      	str	r2, [r3, #12]
 8008e76:	e001      	b.n	8008e7c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8008e78:	2301      	movs	r3, #1
 8008e7a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8008e88:	7fbb      	ldrb	r3, [r7, #30]
}
 8008e8a:	4618      	mov	r0, r3
 8008e8c:	3720      	adds	r7, #32
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}
 8008e92:	bf00      	nop
 8008e94:	40007c00 	.word	0x40007c00
 8008e98:	40023800 	.word	0x40023800
 8008e9c:	00f42400 	.word	0x00f42400

08008ea0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eac:	f003 0301 	and.w	r3, r3, #1
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d00a      	beq.n	8008eca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	685b      	ldr	r3, [r3, #4]
 8008eba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	430a      	orrs	r2, r1
 8008ec8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ece:	f003 0302 	and.w	r3, r3, #2
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d00a      	beq.n	8008eec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	685b      	ldr	r3, [r3, #4]
 8008edc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	430a      	orrs	r2, r1
 8008eea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ef0:	f003 0304 	and.w	r3, r3, #4
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d00a      	beq.n	8008f0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	685b      	ldr	r3, [r3, #4]
 8008efe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f12:	f003 0308 	and.w	r3, r3, #8
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d00a      	beq.n	8008f30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	685b      	ldr	r3, [r3, #4]
 8008f20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	430a      	orrs	r2, r1
 8008f2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f34:	f003 0310 	and.w	r3, r3, #16
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d00a      	beq.n	8008f52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	689b      	ldr	r3, [r3, #8]
 8008f42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	430a      	orrs	r2, r1
 8008f50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f56:	f003 0320 	and.w	r3, r3, #32
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00a      	beq.n	8008f74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	430a      	orrs	r2, r1
 8008f72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d01a      	beq.n	8008fb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	685b      	ldr	r3, [r3, #4]
 8008f86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	430a      	orrs	r2, r1
 8008f94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f9e:	d10a      	bne.n	8008fb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	685b      	ldr	r3, [r3, #4]
 8008fa6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	430a      	orrs	r2, r1
 8008fb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d00a      	beq.n	8008fd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	430a      	orrs	r2, r1
 8008fd6:	605a      	str	r2, [r3, #4]
  }
}
 8008fd8:	bf00      	nop
 8008fda:	370c      	adds	r7, #12
 8008fdc:	46bd      	mov	sp, r7
 8008fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe2:	4770      	bx	lr

08008fe4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b086      	sub	sp, #24
 8008fe8:	af02      	add	r7, sp, #8
 8008fea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ff4:	f7f8 fd54 	bl	8001aa0 <HAL_GetTick>
 8008ff8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f003 0308 	and.w	r3, r3, #8
 8009004:	2b08      	cmp	r3, #8
 8009006:	d10e      	bne.n	8009026 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009008:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800900c:	9300      	str	r3, [sp, #0]
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 f831 	bl	800907e <UART_WaitOnFlagUntilTimeout>
 800901c:	4603      	mov	r3, r0
 800901e:	2b00      	cmp	r3, #0
 8009020:	d001      	beq.n	8009026 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e027      	b.n	8009076 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	f003 0304 	and.w	r3, r3, #4
 8009030:	2b04      	cmp	r3, #4
 8009032:	d10e      	bne.n	8009052 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009034:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009038:	9300      	str	r3, [sp, #0]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2200      	movs	r2, #0
 800903e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 f81b 	bl	800907e <UART_WaitOnFlagUntilTimeout>
 8009048:	4603      	mov	r3, r0
 800904a:	2b00      	cmp	r3, #0
 800904c:	d001      	beq.n	8009052 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800904e:	2303      	movs	r3, #3
 8009050:	e011      	b.n	8009076 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2220      	movs	r2, #32
 8009056:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	2220      	movs	r2, #32
 800905c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2200      	movs	r2, #0
 8009064:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	2200      	movs	r2, #0
 800906a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009074:	2300      	movs	r3, #0
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}

0800907e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800907e:	b580      	push	{r7, lr}
 8009080:	b09c      	sub	sp, #112	; 0x70
 8009082:	af00      	add	r7, sp, #0
 8009084:	60f8      	str	r0, [r7, #12]
 8009086:	60b9      	str	r1, [r7, #8]
 8009088:	603b      	str	r3, [r7, #0]
 800908a:	4613      	mov	r3, r2
 800908c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800908e:	e0a7      	b.n	80091e0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009090:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009092:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009096:	f000 80a3 	beq.w	80091e0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800909a:	f7f8 fd01 	bl	8001aa0 <HAL_GetTick>
 800909e:	4602      	mov	r2, r0
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	1ad3      	subs	r3, r2, r3
 80090a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d302      	bcc.n	80090b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80090aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d13f      	bne.n	8009130 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80090b8:	e853 3f00 	ldrex	r3, [r3]
 80090bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80090be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80090c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80090c4:	667b      	str	r3, [r7, #100]	; 0x64
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	461a      	mov	r2, r3
 80090cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80090ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80090d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80090d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80090d6:	e841 2300 	strex	r3, r2, [r1]
 80090da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80090dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1e6      	bne.n	80090b0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	3308      	adds	r3, #8
 80090e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80090ec:	e853 3f00 	ldrex	r3, [r3]
 80090f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80090f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80090f4:	f023 0301 	bic.w	r3, r3, #1
 80090f8:	663b      	str	r3, [r7, #96]	; 0x60
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3308      	adds	r3, #8
 8009100:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009102:	64ba      	str	r2, [r7, #72]	; 0x48
 8009104:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009106:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009108:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800910a:	e841 2300 	strex	r3, r2, [r1]
 800910e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009110:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009112:	2b00      	cmp	r3, #0
 8009114:	d1e5      	bne.n	80090e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009116:	68fb      	ldr	r3, [r7, #12]
 8009118:	2220      	movs	r2, #32
 800911a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2220      	movs	r2, #32
 8009120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800912c:	2303      	movs	r3, #3
 800912e:	e068      	b.n	8009202 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	f003 0304 	and.w	r3, r3, #4
 800913a:	2b00      	cmp	r3, #0
 800913c:	d050      	beq.n	80091e0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	69db      	ldr	r3, [r3, #28]
 8009144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009148:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800914c:	d148      	bne.n	80091e0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009156:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009160:	e853 3f00 	ldrex	r3, [r3]
 8009164:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009168:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800916c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	461a      	mov	r2, r3
 8009174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009176:	637b      	str	r3, [r7, #52]	; 0x34
 8009178:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800917c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e6      	bne.n	8009158 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3308      	adds	r3, #8
 8009190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009192:	697b      	ldr	r3, [r7, #20]
 8009194:	e853 3f00 	ldrex	r3, [r3]
 8009198:	613b      	str	r3, [r7, #16]
   return(result);
 800919a:	693b      	ldr	r3, [r7, #16]
 800919c:	f023 0301 	bic.w	r3, r3, #1
 80091a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	3308      	adds	r3, #8
 80091a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80091aa:	623a      	str	r2, [r7, #32]
 80091ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ae:	69f9      	ldr	r1, [r7, #28]
 80091b0:	6a3a      	ldr	r2, [r7, #32]
 80091b2:	e841 2300 	strex	r3, r2, [r1]
 80091b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80091b8:	69bb      	ldr	r3, [r7, #24]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1e5      	bne.n	800918a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	2220      	movs	r2, #32
 80091c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2220      	movs	r2, #32
 80091c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	2220      	movs	r2, #32
 80091d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	2200      	movs	r2, #0
 80091d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e010      	b.n	8009202 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	69da      	ldr	r2, [r3, #28]
 80091e6:	68bb      	ldr	r3, [r7, #8]
 80091e8:	4013      	ands	r3, r2
 80091ea:	68ba      	ldr	r2, [r7, #8]
 80091ec:	429a      	cmp	r2, r3
 80091ee:	bf0c      	ite	eq
 80091f0:	2301      	moveq	r3, #1
 80091f2:	2300      	movne	r3, #0
 80091f4:	b2db      	uxtb	r3, r3
 80091f6:	461a      	mov	r2, r3
 80091f8:	79fb      	ldrb	r3, [r7, #7]
 80091fa:	429a      	cmp	r2, r3
 80091fc:	f43f af48 	beq.w	8009090 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	3770      	adds	r7, #112	; 0x70
 8009206:	46bd      	mov	sp, r7
 8009208:	bd80      	pop	{r7, pc}
	...

0800920c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b096      	sub	sp, #88	; 0x58
 8009210:	af00      	add	r7, sp, #0
 8009212:	60f8      	str	r0, [r7, #12]
 8009214:	60b9      	str	r1, [r7, #8]
 8009216:	4613      	mov	r3, r2
 8009218:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	68ba      	ldr	r2, [r7, #8]
 800921e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	88fa      	ldrh	r2, [r7, #6]
 8009224:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	2200      	movs	r2, #0
 800922c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2222      	movs	r2, #34	; 0x22
 8009234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800923c:	2b00      	cmp	r3, #0
 800923e:	d028      	beq.n	8009292 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009244:	4a3e      	ldr	r2, [pc, #248]	; (8009340 <UART_Start_Receive_DMA+0x134>)
 8009246:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800924c:	4a3d      	ldr	r2, [pc, #244]	; (8009344 <UART_Start_Receive_DMA+0x138>)
 800924e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009254:	4a3c      	ldr	r2, [pc, #240]	; (8009348 <UART_Start_Receive_DMA+0x13c>)
 8009256:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800925c:	2200      	movs	r2, #0
 800925e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	6f58      	ldr	r0, [r3, #116]	; 0x74
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3324      	adds	r3, #36	; 0x24
 800926a:	4619      	mov	r1, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009270:	461a      	mov	r2, r3
 8009272:	88fb      	ldrh	r3, [r7, #6]
 8009274:	f7f9 f826 	bl	80022c4 <HAL_DMA_Start_IT>
 8009278:	4603      	mov	r3, r0
 800927a:	2b00      	cmp	r3, #0
 800927c:	d009      	beq.n	8009292 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	2210      	movs	r2, #16
 8009282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2220      	movs	r2, #32
 800928a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	e051      	b.n	8009336 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	691b      	ldr	r3, [r3, #16]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d018      	beq.n	80092cc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092a2:	e853 3f00 	ldrex	r3, [r3]
 80092a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80092a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092ae:	657b      	str	r3, [r7, #84]	; 0x54
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	461a      	mov	r2, r3
 80092b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80092b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80092ba:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092bc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80092be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092c0:	e841 2300 	strex	r3, r2, [r1]
 80092c4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80092c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1e6      	bne.n	800929a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	3308      	adds	r3, #8
 80092d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d6:	e853 3f00 	ldrex	r3, [r3]
 80092da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	f043 0301 	orr.w	r3, r3, #1
 80092e2:	653b      	str	r3, [r7, #80]	; 0x50
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	3308      	adds	r3, #8
 80092ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80092ec:	637a      	str	r2, [r7, #52]	; 0x34
 80092ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80092f4:	e841 2300 	strex	r3, r2, [r1]
 80092f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80092fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d1e5      	bne.n	80092cc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	3308      	adds	r3, #8
 8009306:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	e853 3f00 	ldrex	r3, [r3]
 800930e:	613b      	str	r3, [r7, #16]
   return(result);
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009316:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	3308      	adds	r3, #8
 800931e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009320:	623a      	str	r2, [r7, #32]
 8009322:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009324:	69f9      	ldr	r1, [r7, #28]
 8009326:	6a3a      	ldr	r2, [r7, #32]
 8009328:	e841 2300 	strex	r3, r2, [r1]
 800932c:	61bb      	str	r3, [r7, #24]
   return(result);
 800932e:	69bb      	ldr	r3, [r7, #24]
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e5      	bne.n	8009300 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3758      	adds	r7, #88	; 0x58
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}
 800933e:	bf00      	nop
 8009340:	08009461 	.word	0x08009461
 8009344:	08009589 	.word	0x08009589
 8009348:	080095c7 	.word	0x080095c7

0800934c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800934c:	b480      	push	{r7}
 800934e:	b089      	sub	sp, #36	; 0x24
 8009350:	af00      	add	r7, sp, #0
 8009352:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	e853 3f00 	ldrex	r3, [r3]
 8009360:	60bb      	str	r3, [r7, #8]
   return(result);
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8009368:	61fb      	str	r3, [r7, #28]
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	69fb      	ldr	r3, [r7, #28]
 8009372:	61bb      	str	r3, [r7, #24]
 8009374:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009376:	6979      	ldr	r1, [r7, #20]
 8009378:	69ba      	ldr	r2, [r7, #24]
 800937a:	e841 2300 	strex	r3, r2, [r1]
 800937e:	613b      	str	r3, [r7, #16]
   return(result);
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d1e6      	bne.n	8009354 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2220      	movs	r2, #32
 800938a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800938c:	bf00      	nop
 800938e:	3724      	adds	r7, #36	; 0x24
 8009390:	46bd      	mov	sp, r7
 8009392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009396:	4770      	bx	lr

08009398 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009398:	b480      	push	{r7}
 800939a:	b095      	sub	sp, #84	; 0x54
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093a8:	e853 3f00 	ldrex	r3, [r3]
 80093ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80093ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	461a      	mov	r2, r3
 80093bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093be:	643b      	str	r3, [r7, #64]	; 0x40
 80093c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80093c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80093c6:	e841 2300 	strex	r3, r2, [r1]
 80093ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80093cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d1e6      	bne.n	80093a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	3308      	adds	r3, #8
 80093d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093da:	6a3b      	ldr	r3, [r7, #32]
 80093dc:	e853 3f00 	ldrex	r3, [r3]
 80093e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80093e2:	69fb      	ldr	r3, [r7, #28]
 80093e4:	f023 0301 	bic.w	r3, r3, #1
 80093e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	3308      	adds	r3, #8
 80093f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80093f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80093f4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80093fa:	e841 2300 	strex	r3, r2, [r1]
 80093fe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009402:	2b00      	cmp	r3, #0
 8009404:	d1e5      	bne.n	80093d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800940a:	2b01      	cmp	r3, #1
 800940c:	d118      	bne.n	8009440 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	e853 3f00 	ldrex	r3, [r3]
 800941a:	60bb      	str	r3, [r7, #8]
   return(result);
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	f023 0310 	bic.w	r3, r3, #16
 8009422:	647b      	str	r3, [r7, #68]	; 0x44
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	461a      	mov	r2, r3
 800942a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800942c:	61bb      	str	r3, [r7, #24]
 800942e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009430:	6979      	ldr	r1, [r7, #20]
 8009432:	69ba      	ldr	r2, [r7, #24]
 8009434:	e841 2300 	strex	r3, r2, [r1]
 8009438:	613b      	str	r3, [r7, #16]
   return(result);
 800943a:	693b      	ldr	r3, [r7, #16]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d1e6      	bne.n	800940e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	2220      	movs	r2, #32
 8009444:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	2200      	movs	r2, #0
 800944c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2200      	movs	r2, #0
 8009452:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009454:	bf00      	nop
 8009456:	3754      	adds	r7, #84	; 0x54
 8009458:	46bd      	mov	sp, r7
 800945a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945e:	4770      	bx	lr

08009460 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009460:	b580      	push	{r7, lr}
 8009462:	b09c      	sub	sp, #112	; 0x70
 8009464:	af00      	add	r7, sp, #0
 8009466:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800946c:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	69db      	ldr	r3, [r3, #28]
 8009472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009476:	d071      	beq.n	800955c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009478:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800947a:	2200      	movs	r2, #0
 800947c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009488:	e853 3f00 	ldrex	r3, [r3]
 800948c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800948e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009490:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009494:	66bb      	str	r3, [r7, #104]	; 0x68
 8009496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800949e:	65bb      	str	r3, [r7, #88]	; 0x58
 80094a0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094a4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094a6:	e841 2300 	strex	r3, r2, [r1]
 80094aa:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d1e6      	bne.n	8009480 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	3308      	adds	r3, #8
 80094b8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094bc:	e853 3f00 	ldrex	r3, [r3]
 80094c0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094c4:	f023 0301 	bic.w	r3, r3, #1
 80094c8:	667b      	str	r3, [r7, #100]	; 0x64
 80094ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	3308      	adds	r3, #8
 80094d0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80094d2:	647a      	str	r2, [r7, #68]	; 0x44
 80094d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094da:	e841 2300 	strex	r3, r2, [r1]
 80094de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1e5      	bne.n	80094b2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80094e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	3308      	adds	r3, #8
 80094ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094f0:	e853 3f00 	ldrex	r3, [r3]
 80094f4:	623b      	str	r3, [r7, #32]
   return(result);
 80094f6:	6a3b      	ldr	r3, [r7, #32]
 80094f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80094fc:	663b      	str	r3, [r7, #96]	; 0x60
 80094fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	3308      	adds	r3, #8
 8009504:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009506:	633a      	str	r2, [r7, #48]	; 0x30
 8009508:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800950c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800950e:	e841 2300 	strex	r3, r2, [r1]
 8009512:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009516:	2b00      	cmp	r3, #0
 8009518:	d1e5      	bne.n	80094e6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800951a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800951c:	2220      	movs	r2, #32
 800951e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009522:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009524:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009526:	2b01      	cmp	r3, #1
 8009528:	d118      	bne.n	800955c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800952a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009530:	693b      	ldr	r3, [r7, #16]
 8009532:	e853 3f00 	ldrex	r3, [r3]
 8009536:	60fb      	str	r3, [r7, #12]
   return(result);
 8009538:	68fb      	ldr	r3, [r7, #12]
 800953a:	f023 0310 	bic.w	r3, r3, #16
 800953e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009540:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	461a      	mov	r2, r3
 8009546:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009548:	61fb      	str	r3, [r7, #28]
 800954a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800954c:	69b9      	ldr	r1, [r7, #24]
 800954e:	69fa      	ldr	r2, [r7, #28]
 8009550:	e841 2300 	strex	r3, r2, [r1]
 8009554:	617b      	str	r3, [r7, #20]
   return(result);
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1e6      	bne.n	800952a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800955c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800955e:	2200      	movs	r2, #0
 8009560:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009566:	2b01      	cmp	r3, #1
 8009568:	d107      	bne.n	800957a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800956a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800956c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8009570:	4619      	mov	r1, r3
 8009572:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8009574:	f001 fd8c 	bl	800b090 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009578:	e002      	b.n	8009580 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800957a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800957c:	f7ff fa04 	bl	8008988 <HAL_UART_RxCpltCallback>
}
 8009580:	bf00      	nop
 8009582:	3770      	adds	r7, #112	; 0x70
 8009584:	46bd      	mov	sp, r7
 8009586:	bd80      	pop	{r7, pc}

08009588 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	b084      	sub	sp, #16
 800958c:	af00      	add	r7, sp, #0
 800958e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009594:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	2201      	movs	r2, #1
 800959a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095a0:	2b01      	cmp	r3, #1
 80095a2:	d109      	bne.n	80095b8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80095aa:	085b      	lsrs	r3, r3, #1
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	4619      	mov	r1, r3
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f001 fd6d 	bl	800b090 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80095b6:	e002      	b.n	80095be <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80095b8:	68f8      	ldr	r0, [r7, #12]
 80095ba:	f7ff f9ef 	bl	800899c <HAL_UART_RxHalfCpltCallback>
}
 80095be:	bf00      	nop
 80095c0:	3710      	adds	r7, #16
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}

080095c6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80095c6:	b580      	push	{r7, lr}
 80095c8:	b086      	sub	sp, #24
 80095ca:	af00      	add	r7, sp, #0
 80095cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80095d2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095d8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80095da:	697b      	ldr	r3, [r7, #20]
 80095dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80095e0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80095e2:	697b      	ldr	r3, [r7, #20]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	689b      	ldr	r3, [r3, #8]
 80095e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80095ec:	2b80      	cmp	r3, #128	; 0x80
 80095ee:	d109      	bne.n	8009604 <UART_DMAError+0x3e>
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	2b21      	cmp	r3, #33	; 0x21
 80095f4:	d106      	bne.n	8009604 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	2200      	movs	r2, #0
 80095fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 80095fe:	6978      	ldr	r0, [r7, #20]
 8009600:	f7ff fea4 	bl	800934c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960e:	2b40      	cmp	r3, #64	; 0x40
 8009610:	d109      	bne.n	8009626 <UART_DMAError+0x60>
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b22      	cmp	r3, #34	; 0x22
 8009616:	d106      	bne.n	8009626 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	2200      	movs	r2, #0
 800961c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8009620:	6978      	ldr	r0, [r7, #20]
 8009622:	f7ff feb9 	bl	8009398 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800962c:	f043 0210 	orr.w	r2, r3, #16
 8009630:	697b      	ldr	r3, [r7, #20]
 8009632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009636:	6978      	ldr	r0, [r7, #20]
 8009638:	f7ff f9ba 	bl	80089b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800963c:	bf00      	nop
 800963e:	3718      	adds	r7, #24
 8009640:	46bd      	mov	sp, r7
 8009642:	bd80      	pop	{r7, pc}

08009644 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009644:	b580      	push	{r7, lr}
 8009646:	b084      	sub	sp, #16
 8009648:	af00      	add	r7, sp, #0
 800964a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009650:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	2200      	movs	r2, #0
 8009656:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	2200      	movs	r2, #0
 800965e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009662:	68f8      	ldr	r0, [r7, #12]
 8009664:	f7ff f9a4 	bl	80089b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009668:	bf00      	nop
 800966a:	3710      	adds	r7, #16
 800966c:	46bd      	mov	sp, r7
 800966e:	bd80      	pop	{r7, pc}

08009670 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009670:	b580      	push	{r7, lr}
 8009672:	b088      	sub	sp, #32
 8009674:	af00      	add	r7, sp, #0
 8009676:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	e853 3f00 	ldrex	r3, [r3]
 8009684:	60bb      	str	r3, [r7, #8]
   return(result);
 8009686:	68bb      	ldr	r3, [r7, #8]
 8009688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800968c:	61fb      	str	r3, [r7, #28]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	461a      	mov	r2, r3
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	61bb      	str	r3, [r7, #24]
 8009698:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	6979      	ldr	r1, [r7, #20]
 800969c:	69ba      	ldr	r2, [r7, #24]
 800969e:	e841 2300 	strex	r3, r2, [r1]
 80096a2:	613b      	str	r3, [r7, #16]
   return(result);
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1e6      	bne.n	8009678 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2220      	movs	r2, #32
 80096ae:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f7ff f95c 	bl	8008974 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80096bc:	bf00      	nop
 80096be:	3720      	adds	r7, #32
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b08c      	sub	sp, #48	; 0x30
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	60f8      	str	r0, [r7, #12]
 80096cc:	60b9      	str	r1, [r7, #8]
 80096ce:	4613      	mov	r3, r2
 80096d0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80096d8:	2b20      	cmp	r3, #32
 80096da:	d142      	bne.n	8009762 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d002      	beq.n	80096e8 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80096e2:	88fb      	ldrh	r3, [r7, #6]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d101      	bne.n	80096ec <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80096e8:	2301      	movs	r3, #1
 80096ea:	e03b      	b.n	8009764 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80096ec:	68fb      	ldr	r3, [r7, #12]
 80096ee:	2201      	movs	r2, #1
 80096f0:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2200      	movs	r2, #0
 80096f6:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80096f8:	88fb      	ldrh	r3, [r7, #6]
 80096fa:	461a      	mov	r2, r3
 80096fc:	68b9      	ldr	r1, [r7, #8]
 80096fe:	68f8      	ldr	r0, [r7, #12]
 8009700:	f7ff fd84 	bl	800920c <UART_Start_Receive_DMA>
 8009704:	4603      	mov	r3, r0
 8009706:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800970a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800970e:	2b00      	cmp	r3, #0
 8009710:	d124      	bne.n	800975c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009716:	2b01      	cmp	r3, #1
 8009718:	d11d      	bne.n	8009756 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2210      	movs	r2, #16
 8009720:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	e853 3f00 	ldrex	r3, [r3]
 800972e:	617b      	str	r3, [r7, #20]
   return(result);
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	f043 0310 	orr.w	r3, r3, #16
 8009736:	62bb      	str	r3, [r7, #40]	; 0x28
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	461a      	mov	r2, r3
 800973e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009740:	627b      	str	r3, [r7, #36]	; 0x24
 8009742:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009744:	6a39      	ldr	r1, [r7, #32]
 8009746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009748:	e841 2300 	strex	r3, r2, [r1]
 800974c:	61fb      	str	r3, [r7, #28]
   return(result);
 800974e:	69fb      	ldr	r3, [r7, #28]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d1e6      	bne.n	8009722 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8009754:	e002      	b.n	800975c <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800975c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8009760:	e000      	b.n	8009764 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8009762:	2302      	movs	r3, #2
  }
}
 8009764:	4618      	mov	r0, r3
 8009766:	3730      	adds	r7, #48	; 0x30
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}

0800976c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800976c:	b084      	sub	sp, #16
 800976e:	b580      	push	{r7, lr}
 8009770:	b084      	sub	sp, #16
 8009772:	af00      	add	r7, sp, #0
 8009774:	6078      	str	r0, [r7, #4]
 8009776:	f107 001c 	add.w	r0, r7, #28
 800977a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800977e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009780:	2b01      	cmp	r3, #1
 8009782:	d120      	bne.n	80097c6 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009788:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	68da      	ldr	r2, [r3, #12]
 8009794:	4b20      	ldr	r3, [pc, #128]	; (8009818 <USB_CoreInit+0xac>)
 8009796:	4013      	ands	r3, r2
 8009798:	687a      	ldr	r2, [r7, #4]
 800979a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	68db      	ldr	r3, [r3, #12]
 80097a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80097a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80097aa:	2b01      	cmp	r3, #1
 80097ac:	d105      	bne.n	80097ba <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	68db      	ldr	r3, [r3, #12]
 80097b2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f001 fbee 	bl	800af9c <USB_CoreReset>
 80097c0:	4603      	mov	r3, r0
 80097c2:	73fb      	strb	r3, [r7, #15]
 80097c4:	e010      	b.n	80097e8 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f001 fbe2 	bl	800af9c <USB_CoreReset>
 80097d8:	4603      	mov	r3, r0
 80097da:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097e0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80097e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d10b      	bne.n	8009806 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	f043 0206 	orr.w	r2, r3, #6
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	f043 0220 	orr.w	r2, r3, #32
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009806:	7bfb      	ldrb	r3, [r7, #15]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3710      	adds	r7, #16
 800980c:	46bd      	mov	sp, r7
 800980e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009812:	b004      	add	sp, #16
 8009814:	4770      	bx	lr
 8009816:	bf00      	nop
 8009818:	ffbdffbf 	.word	0xffbdffbf

0800981c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800981c:	b480      	push	{r7}
 800981e:	b087      	sub	sp, #28
 8009820:	af00      	add	r7, sp, #0
 8009822:	60f8      	str	r0, [r7, #12]
 8009824:	60b9      	str	r1, [r7, #8]
 8009826:	4613      	mov	r3, r2
 8009828:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800982a:	79fb      	ldrb	r3, [r7, #7]
 800982c:	2b02      	cmp	r3, #2
 800982e:	d165      	bne.n	80098fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	4a41      	ldr	r2, [pc, #260]	; (8009938 <USB_SetTurnaroundTime+0x11c>)
 8009834:	4293      	cmp	r3, r2
 8009836:	d906      	bls.n	8009846 <USB_SetTurnaroundTime+0x2a>
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	4a40      	ldr	r2, [pc, #256]	; (800993c <USB_SetTurnaroundTime+0x120>)
 800983c:	4293      	cmp	r3, r2
 800983e:	d202      	bcs.n	8009846 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8009840:	230f      	movs	r3, #15
 8009842:	617b      	str	r3, [r7, #20]
 8009844:	e062      	b.n	800990c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	4a3c      	ldr	r2, [pc, #240]	; (800993c <USB_SetTurnaroundTime+0x120>)
 800984a:	4293      	cmp	r3, r2
 800984c:	d306      	bcc.n	800985c <USB_SetTurnaroundTime+0x40>
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	4a3b      	ldr	r2, [pc, #236]	; (8009940 <USB_SetTurnaroundTime+0x124>)
 8009852:	4293      	cmp	r3, r2
 8009854:	d202      	bcs.n	800985c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8009856:	230e      	movs	r3, #14
 8009858:	617b      	str	r3, [r7, #20]
 800985a:	e057      	b.n	800990c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	4a38      	ldr	r2, [pc, #224]	; (8009940 <USB_SetTurnaroundTime+0x124>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d306      	bcc.n	8009872 <USB_SetTurnaroundTime+0x56>
 8009864:	68bb      	ldr	r3, [r7, #8]
 8009866:	4a37      	ldr	r2, [pc, #220]	; (8009944 <USB_SetTurnaroundTime+0x128>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d202      	bcs.n	8009872 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800986c:	230d      	movs	r3, #13
 800986e:	617b      	str	r3, [r7, #20]
 8009870:	e04c      	b.n	800990c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	4a33      	ldr	r2, [pc, #204]	; (8009944 <USB_SetTurnaroundTime+0x128>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d306      	bcc.n	8009888 <USB_SetTurnaroundTime+0x6c>
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	4a32      	ldr	r2, [pc, #200]	; (8009948 <USB_SetTurnaroundTime+0x12c>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d802      	bhi.n	8009888 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009882:	230c      	movs	r3, #12
 8009884:	617b      	str	r3, [r7, #20]
 8009886:	e041      	b.n	800990c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	4a2f      	ldr	r2, [pc, #188]	; (8009948 <USB_SetTurnaroundTime+0x12c>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d906      	bls.n	800989e <USB_SetTurnaroundTime+0x82>
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	4a2e      	ldr	r2, [pc, #184]	; (800994c <USB_SetTurnaroundTime+0x130>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d802      	bhi.n	800989e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009898:	230b      	movs	r3, #11
 800989a:	617b      	str	r3, [r7, #20]
 800989c:	e036      	b.n	800990c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800989e:	68bb      	ldr	r3, [r7, #8]
 80098a0:	4a2a      	ldr	r2, [pc, #168]	; (800994c <USB_SetTurnaroundTime+0x130>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d906      	bls.n	80098b4 <USB_SetTurnaroundTime+0x98>
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	4a29      	ldr	r2, [pc, #164]	; (8009950 <USB_SetTurnaroundTime+0x134>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d802      	bhi.n	80098b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80098ae:	230a      	movs	r3, #10
 80098b0:	617b      	str	r3, [r7, #20]
 80098b2:	e02b      	b.n	800990c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80098b4:	68bb      	ldr	r3, [r7, #8]
 80098b6:	4a26      	ldr	r2, [pc, #152]	; (8009950 <USB_SetTurnaroundTime+0x134>)
 80098b8:	4293      	cmp	r3, r2
 80098ba:	d906      	bls.n	80098ca <USB_SetTurnaroundTime+0xae>
 80098bc:	68bb      	ldr	r3, [r7, #8]
 80098be:	4a25      	ldr	r2, [pc, #148]	; (8009954 <USB_SetTurnaroundTime+0x138>)
 80098c0:	4293      	cmp	r3, r2
 80098c2:	d202      	bcs.n	80098ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80098c4:	2309      	movs	r3, #9
 80098c6:	617b      	str	r3, [r7, #20]
 80098c8:	e020      	b.n	800990c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	4a21      	ldr	r2, [pc, #132]	; (8009954 <USB_SetTurnaroundTime+0x138>)
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d306      	bcc.n	80098e0 <USB_SetTurnaroundTime+0xc4>
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	4a20      	ldr	r2, [pc, #128]	; (8009958 <USB_SetTurnaroundTime+0x13c>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d802      	bhi.n	80098e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80098da:	2308      	movs	r3, #8
 80098dc:	617b      	str	r3, [r7, #20]
 80098de:	e015      	b.n	800990c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80098e0:	68bb      	ldr	r3, [r7, #8]
 80098e2:	4a1d      	ldr	r2, [pc, #116]	; (8009958 <USB_SetTurnaroundTime+0x13c>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d906      	bls.n	80098f6 <USB_SetTurnaroundTime+0xda>
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	4a1c      	ldr	r2, [pc, #112]	; (800995c <USB_SetTurnaroundTime+0x140>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d202      	bcs.n	80098f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80098f0:	2307      	movs	r3, #7
 80098f2:	617b      	str	r3, [r7, #20]
 80098f4:	e00a      	b.n	800990c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80098f6:	2306      	movs	r3, #6
 80098f8:	617b      	str	r3, [r7, #20]
 80098fa:	e007      	b.n	800990c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80098fc:	79fb      	ldrb	r3, [r7, #7]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d102      	bne.n	8009908 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009902:	2309      	movs	r3, #9
 8009904:	617b      	str	r3, [r7, #20]
 8009906:	e001      	b.n	800990c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009908:	2309      	movs	r3, #9
 800990a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	68db      	ldr	r3, [r3, #12]
 8009910:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009918:	68fb      	ldr	r3, [r7, #12]
 800991a:	68da      	ldr	r2, [r3, #12]
 800991c:	697b      	ldr	r3, [r7, #20]
 800991e:	029b      	lsls	r3, r3, #10
 8009920:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8009924:	431a      	orrs	r2, r3
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800992a:	2300      	movs	r3, #0
}
 800992c:	4618      	mov	r0, r3
 800992e:	371c      	adds	r7, #28
 8009930:	46bd      	mov	sp, r7
 8009932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009936:	4770      	bx	lr
 8009938:	00d8acbf 	.word	0x00d8acbf
 800993c:	00e4e1c0 	.word	0x00e4e1c0
 8009940:	00f42400 	.word	0x00f42400
 8009944:	01067380 	.word	0x01067380
 8009948:	011a499f 	.word	0x011a499f
 800994c:	01312cff 	.word	0x01312cff
 8009950:	014ca43f 	.word	0x014ca43f
 8009954:	016e3600 	.word	0x016e3600
 8009958:	01a6ab1f 	.word	0x01a6ab1f
 800995c:	01e84800 	.word	0x01e84800

08009960 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009960:	b480      	push	{r7}
 8009962:	b083      	sub	sp, #12
 8009964:	af00      	add	r7, sp, #0
 8009966:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	689b      	ldr	r3, [r3, #8]
 800996c:	f043 0201 	orr.w	r2, r3, #1
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009974:	2300      	movs	r3, #0
}
 8009976:	4618      	mov	r0, r3
 8009978:	370c      	adds	r7, #12
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr

08009982 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009982:	b480      	push	{r7}
 8009984:	b083      	sub	sp, #12
 8009986:	af00      	add	r7, sp, #0
 8009988:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f023 0201 	bic.w	r2, r3, #1
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009996:	2300      	movs	r3, #0
}
 8009998:	4618      	mov	r0, r3
 800999a:	370c      	adds	r7, #12
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80099a4:	b580      	push	{r7, lr}
 80099a6:	b084      	sub	sp, #16
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	460b      	mov	r3, r1
 80099ae:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80099b0:	2300      	movs	r3, #0
 80099b2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	68db      	ldr	r3, [r3, #12]
 80099b8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80099c0:	78fb      	ldrb	r3, [r7, #3]
 80099c2:	2b01      	cmp	r3, #1
 80099c4:	d115      	bne.n	80099f2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	68db      	ldr	r3, [r3, #12]
 80099ca:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80099d2:	2001      	movs	r0, #1
 80099d4:	f7f8 f870 	bl	8001ab8 <HAL_Delay>
      ms++;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	3301      	adds	r3, #1
 80099dc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f001 fa4b 	bl	800ae7a <USB_GetMode>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d01e      	beq.n	8009a28 <USB_SetCurrentMode+0x84>
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2b31      	cmp	r3, #49	; 0x31
 80099ee:	d9f0      	bls.n	80099d2 <USB_SetCurrentMode+0x2e>
 80099f0:	e01a      	b.n	8009a28 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80099f2:	78fb      	ldrb	r3, [r7, #3]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d115      	bne.n	8009a24 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009a04:	2001      	movs	r0, #1
 8009a06:	f7f8 f857 	bl	8001ab8 <HAL_Delay>
      ms++;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009a10:	6878      	ldr	r0, [r7, #4]
 8009a12:	f001 fa32 	bl	800ae7a <USB_GetMode>
 8009a16:	4603      	mov	r3, r0
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d005      	beq.n	8009a28 <USB_SetCurrentMode+0x84>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	2b31      	cmp	r3, #49	; 0x31
 8009a20:	d9f0      	bls.n	8009a04 <USB_SetCurrentMode+0x60>
 8009a22:	e001      	b.n	8009a28 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009a24:	2301      	movs	r3, #1
 8009a26:	e005      	b.n	8009a34 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	2b32      	cmp	r3, #50	; 0x32
 8009a2c:	d101      	bne.n	8009a32 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e000      	b.n	8009a34 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009a32:	2300      	movs	r3, #0
}
 8009a34:	4618      	mov	r0, r3
 8009a36:	3710      	adds	r7, #16
 8009a38:	46bd      	mov	sp, r7
 8009a3a:	bd80      	pop	{r7, pc}

08009a3c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a3c:	b084      	sub	sp, #16
 8009a3e:	b580      	push	{r7, lr}
 8009a40:	b086      	sub	sp, #24
 8009a42:	af00      	add	r7, sp, #0
 8009a44:	6078      	str	r0, [r7, #4]
 8009a46:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009a4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009a4e:	2300      	movs	r3, #0
 8009a50:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009a56:	2300      	movs	r3, #0
 8009a58:	613b      	str	r3, [r7, #16]
 8009a5a:	e009      	b.n	8009a70 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009a5c:	687a      	ldr	r2, [r7, #4]
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	3340      	adds	r3, #64	; 0x40
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	4413      	add	r3, r2
 8009a66:	2200      	movs	r2, #0
 8009a68:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009a6a:	693b      	ldr	r3, [r7, #16]
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	613b      	str	r3, [r7, #16]
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	2b0e      	cmp	r3, #14
 8009a74:	d9f2      	bls.n	8009a5c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009a76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d11c      	bne.n	8009ab6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009a82:	685b      	ldr	r3, [r3, #4]
 8009a84:	68fa      	ldr	r2, [r7, #12]
 8009a86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009a8a:	f043 0302 	orr.w	r3, r3, #2
 8009a8e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a94:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	e005      	b.n	8009ac2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009ac8:	461a      	mov	r2, r3
 8009aca:	2300      	movs	r3, #0
 8009acc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ad4:	4619      	mov	r1, r3
 8009ad6:	68fb      	ldr	r3, [r7, #12]
 8009ad8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009adc:	461a      	mov	r2, r3
 8009ade:	680b      	ldr	r3, [r1, #0]
 8009ae0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d10c      	bne.n	8009b02 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d104      	bne.n	8009af8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009aee:	2100      	movs	r1, #0
 8009af0:	6878      	ldr	r0, [r7, #4]
 8009af2:	f000 f965 	bl	8009dc0 <USB_SetDevSpeed>
 8009af6:	e008      	b.n	8009b0a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009af8:	2101      	movs	r1, #1
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f000 f960 	bl	8009dc0 <USB_SetDevSpeed>
 8009b00:	e003      	b.n	8009b0a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009b02:	2103      	movs	r1, #3
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f000 f95b 	bl	8009dc0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009b0a:	2110      	movs	r1, #16
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f000 f8f3 	bl	8009cf8 <USB_FlushTxFifo>
 8009b12:	4603      	mov	r3, r0
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d001      	beq.n	8009b1c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8009b18:	2301      	movs	r3, #1
 8009b1a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f91f 	bl	8009d60 <USB_FlushRxFifo>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d001      	beq.n	8009b2c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8009b28:	2301      	movs	r3, #1
 8009b2a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b32:	461a      	mov	r2, r3
 8009b34:	2300      	movs	r3, #0
 8009b36:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b3e:	461a      	mov	r2, r3
 8009b40:	2300      	movs	r3, #0
 8009b42:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	2300      	movs	r3, #0
 8009b4e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009b50:	2300      	movs	r3, #0
 8009b52:	613b      	str	r3, [r7, #16]
 8009b54:	e043      	b.n	8009bde <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009b56:	693b      	ldr	r3, [r7, #16]
 8009b58:	015a      	lsls	r2, r3, #5
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	4413      	add	r3, r2
 8009b5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009b6c:	d118      	bne.n	8009ba0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10a      	bne.n	8009b8a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b80:	461a      	mov	r2, r3
 8009b82:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009b86:	6013      	str	r3, [r2, #0]
 8009b88:	e013      	b.n	8009bb2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8009b8a:	693b      	ldr	r3, [r7, #16]
 8009b8c:	015a      	lsls	r2, r3, #5
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	4413      	add	r3, r2
 8009b92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009b96:	461a      	mov	r2, r3
 8009b98:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009b9c:	6013      	str	r3, [r2, #0]
 8009b9e:	e008      	b.n	8009bb2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009ba0:	693b      	ldr	r3, [r7, #16]
 8009ba2:	015a      	lsls	r2, r3, #5
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	4413      	add	r3, r2
 8009ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bac:	461a      	mov	r2, r3
 8009bae:	2300      	movs	r3, #0
 8009bb0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009bb2:	693b      	ldr	r3, [r7, #16]
 8009bb4:	015a      	lsls	r2, r3, #5
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	4413      	add	r3, r2
 8009bba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	015a      	lsls	r2, r3, #5
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	4413      	add	r3, r2
 8009bcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009bd0:	461a      	mov	r2, r3
 8009bd2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009bd6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	3301      	adds	r3, #1
 8009bdc:	613b      	str	r3, [r7, #16]
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d3b7      	bcc.n	8009b56 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009be6:	2300      	movs	r3, #0
 8009be8:	613b      	str	r3, [r7, #16]
 8009bea:	e043      	b.n	8009c74 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009bec:	693b      	ldr	r3, [r7, #16]
 8009bee:	015a      	lsls	r2, r3, #5
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	4413      	add	r3, r2
 8009bf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c02:	d118      	bne.n	8009c36 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009c04:	693b      	ldr	r3, [r7, #16]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d10a      	bne.n	8009c20 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	015a      	lsls	r2, r3, #5
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	4413      	add	r3, r2
 8009c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c16:	461a      	mov	r2, r3
 8009c18:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009c1c:	6013      	str	r3, [r2, #0]
 8009c1e:	e013      	b.n	8009c48 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	015a      	lsls	r2, r3, #5
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	4413      	add	r3, r2
 8009c28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c2c:	461a      	mov	r2, r3
 8009c2e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009c32:	6013      	str	r3, [r2, #0]
 8009c34:	e008      	b.n	8009c48 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009c36:	693b      	ldr	r3, [r7, #16]
 8009c38:	015a      	lsls	r2, r3, #5
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c42:	461a      	mov	r2, r3
 8009c44:	2300      	movs	r3, #0
 8009c46:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	015a      	lsls	r2, r3, #5
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	4413      	add	r3, r2
 8009c50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c54:	461a      	mov	r2, r3
 8009c56:	2300      	movs	r3, #0
 8009c58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	015a      	lsls	r2, r3, #5
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	4413      	add	r3, r2
 8009c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c66:	461a      	mov	r2, r3
 8009c68:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009c6c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009c6e:	693b      	ldr	r3, [r7, #16]
 8009c70:	3301      	adds	r3, #1
 8009c72:	613b      	str	r3, [r7, #16]
 8009c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c76:	693a      	ldr	r2, [r7, #16]
 8009c78:	429a      	cmp	r2, r3
 8009c7a:	d3b7      	bcc.n	8009bec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009c82:	691b      	ldr	r3, [r3, #16]
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009c8a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c8e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009c9c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d105      	bne.n	8009cb0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	699b      	ldr	r3, [r3, #24]
 8009ca8:	f043 0210 	orr.w	r2, r3, #16
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	699a      	ldr	r2, [r3, #24]
 8009cb4:	4b0e      	ldr	r3, [pc, #56]	; (8009cf0 <USB_DevInit+0x2b4>)
 8009cb6:	4313      	orrs	r3, r2
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009cbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d005      	beq.n	8009cce <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	f043 0208 	orr.w	r2, r3, #8
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cd0:	2b01      	cmp	r3, #1
 8009cd2:	d105      	bne.n	8009ce0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	699a      	ldr	r2, [r3, #24]
 8009cd8:	4b06      	ldr	r3, [pc, #24]	; (8009cf4 <USB_DevInit+0x2b8>)
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009ce0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009cec:	b004      	add	sp, #16
 8009cee:	4770      	bx	lr
 8009cf0:	803c3800 	.word	0x803c3800
 8009cf4:	40000004 	.word	0x40000004

08009cf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009cf8:	b480      	push	{r7}
 8009cfa:	b085      	sub	sp, #20
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d02:	2300      	movs	r3, #0
 8009d04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	4a13      	ldr	r2, [pc, #76]	; (8009d5c <USB_FlushTxFifo+0x64>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d901      	bls.n	8009d18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e01b      	b.n	8009d50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	691b      	ldr	r3, [r3, #16]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	daf2      	bge.n	8009d06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009d20:	2300      	movs	r3, #0
 8009d22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	019b      	lsls	r3, r3, #6
 8009d28:	f043 0220 	orr.w	r2, r3, #32
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	3301      	adds	r3, #1
 8009d34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	4a08      	ldr	r2, [pc, #32]	; (8009d5c <USB_FlushTxFifo+0x64>)
 8009d3a:	4293      	cmp	r3, r2
 8009d3c:	d901      	bls.n	8009d42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	e006      	b.n	8009d50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	691b      	ldr	r3, [r3, #16]
 8009d46:	f003 0320 	and.w	r3, r3, #32
 8009d4a:	2b20      	cmp	r3, #32
 8009d4c:	d0f0      	beq.n	8009d30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009d4e:	2300      	movs	r3, #0
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr
 8009d5c:	00030d40 	.word	0x00030d40

08009d60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b085      	sub	sp, #20
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009d68:	2300      	movs	r3, #0
 8009d6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	4a11      	ldr	r2, [pc, #68]	; (8009dbc <USB_FlushRxFifo+0x5c>)
 8009d76:	4293      	cmp	r3, r2
 8009d78:	d901      	bls.n	8009d7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009d7a:	2303      	movs	r3, #3
 8009d7c:	e018      	b.n	8009db0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	daf2      	bge.n	8009d6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009d86:	2300      	movs	r3, #0
 8009d88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	2210      	movs	r2, #16
 8009d8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	3301      	adds	r3, #1
 8009d94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	4a08      	ldr	r2, [pc, #32]	; (8009dbc <USB_FlushRxFifo+0x5c>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d901      	bls.n	8009da2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009d9e:	2303      	movs	r3, #3
 8009da0:	e006      	b.n	8009db0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	f003 0310 	and.w	r3, r3, #16
 8009daa:	2b10      	cmp	r3, #16
 8009dac:	d0f0      	beq.n	8009d90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3714      	adds	r7, #20
 8009db4:	46bd      	mov	sp, r7
 8009db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dba:	4770      	bx	lr
 8009dbc:	00030d40 	.word	0x00030d40

08009dc0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009dc0:	b480      	push	{r7}
 8009dc2:	b085      	sub	sp, #20
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	78fb      	ldrb	r3, [r7, #3]
 8009dda:	68f9      	ldr	r1, [r7, #12]
 8009ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009de0:	4313      	orrs	r3, r2
 8009de2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009de4:	2300      	movs	r3, #0
}
 8009de6:	4618      	mov	r0, r3
 8009de8:	3714      	adds	r7, #20
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr

08009df2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8009df2:	b480      	push	{r7}
 8009df4:	b087      	sub	sp, #28
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e04:	689b      	ldr	r3, [r3, #8]
 8009e06:	f003 0306 	and.w	r3, r3, #6
 8009e0a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009e0c:	68fb      	ldr	r3, [r7, #12]
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d102      	bne.n	8009e18 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009e12:	2300      	movs	r3, #0
 8009e14:	75fb      	strb	r3, [r7, #23]
 8009e16:	e00a      	b.n	8009e2e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2b02      	cmp	r3, #2
 8009e1c:	d002      	beq.n	8009e24 <USB_GetDevSpeed+0x32>
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2b06      	cmp	r3, #6
 8009e22:	d102      	bne.n	8009e2a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009e24:	2302      	movs	r3, #2
 8009e26:	75fb      	strb	r3, [r7, #23]
 8009e28:	e001      	b.n	8009e2e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009e2a:	230f      	movs	r3, #15
 8009e2c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009e2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	371c      	adds	r7, #28
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b085      	sub	sp, #20
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
 8009e44:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	785b      	ldrb	r3, [r3, #1]
 8009e54:	2b01      	cmp	r3, #1
 8009e56:	d139      	bne.n	8009ecc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009e5e:	69da      	ldr	r2, [r3, #28]
 8009e60:	683b      	ldr	r3, [r7, #0]
 8009e62:	781b      	ldrb	r3, [r3, #0]
 8009e64:	f003 030f 	and.w	r3, r3, #15
 8009e68:	2101      	movs	r1, #1
 8009e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e6e:	b29b      	uxth	r3, r3
 8009e70:	68f9      	ldr	r1, [r7, #12]
 8009e72:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009e76:	4313      	orrs	r3, r2
 8009e78:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	015a      	lsls	r2, r3, #5
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	4413      	add	r3, r2
 8009e82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d153      	bne.n	8009f38 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	015a      	lsls	r2, r3, #5
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	4413      	add	r3, r2
 8009e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e9c:	681a      	ldr	r2, [r3, #0]
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	68db      	ldr	r3, [r3, #12]
 8009ea2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009ea6:	683b      	ldr	r3, [r7, #0]
 8009ea8:	791b      	ldrb	r3, [r3, #4]
 8009eaa:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009eac:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	059b      	lsls	r3, r3, #22
 8009eb2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009eb4:	431a      	orrs	r2, r3
 8009eb6:	68bb      	ldr	r3, [r7, #8]
 8009eb8:	0159      	lsls	r1, r3, #5
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	440b      	add	r3, r1
 8009ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ec2:	4619      	mov	r1, r3
 8009ec4:	4b20      	ldr	r3, [pc, #128]	; (8009f48 <USB_ActivateEndpoint+0x10c>)
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	600b      	str	r3, [r1, #0]
 8009eca:	e035      	b.n	8009f38 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ed2:	69da      	ldr	r2, [r3, #28]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	f003 030f 	and.w	r3, r3, #15
 8009edc:	2101      	movs	r1, #1
 8009ede:	fa01 f303 	lsl.w	r3, r1, r3
 8009ee2:	041b      	lsls	r3, r3, #16
 8009ee4:	68f9      	ldr	r1, [r7, #12]
 8009ee6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009eea:	4313      	orrs	r3, r2
 8009eec:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009eee:	68bb      	ldr	r3, [r7, #8]
 8009ef0:	015a      	lsls	r2, r3, #5
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	4413      	add	r3, r2
 8009ef6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d119      	bne.n	8009f38 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	015a      	lsls	r2, r3, #5
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	4413      	add	r3, r2
 8009f0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f10:	681a      	ldr	r2, [r3, #0]
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	68db      	ldr	r3, [r3, #12]
 8009f16:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009f1a:	683b      	ldr	r3, [r7, #0]
 8009f1c:	791b      	ldrb	r3, [r3, #4]
 8009f1e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009f20:	430b      	orrs	r3, r1
 8009f22:	431a      	orrs	r2, r3
 8009f24:	68bb      	ldr	r3, [r7, #8]
 8009f26:	0159      	lsls	r1, r3, #5
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	440b      	add	r3, r1
 8009f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f30:	4619      	mov	r1, r3
 8009f32:	4b05      	ldr	r3, [pc, #20]	; (8009f48 <USB_ActivateEndpoint+0x10c>)
 8009f34:	4313      	orrs	r3, r2
 8009f36:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009f38:	2300      	movs	r3, #0
}
 8009f3a:	4618      	mov	r0, r3
 8009f3c:	3714      	adds	r7, #20
 8009f3e:	46bd      	mov	sp, r7
 8009f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f44:	4770      	bx	lr
 8009f46:	bf00      	nop
 8009f48:	10008000 	.word	0x10008000

08009f4c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f4c:	b480      	push	{r7}
 8009f4e:	b085      	sub	sp, #20
 8009f50:	af00      	add	r7, sp, #0
 8009f52:	6078      	str	r0, [r7, #4]
 8009f54:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	785b      	ldrb	r3, [r3, #1]
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d161      	bne.n	800a02c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	015a      	lsls	r2, r3, #5
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	4413      	add	r3, r2
 8009f70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009f7e:	d11f      	bne.n	8009fc0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	015a      	lsls	r2, r3, #5
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	4413      	add	r3, r2
 8009f88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	68ba      	ldr	r2, [r7, #8]
 8009f90:	0151      	lsls	r1, r2, #5
 8009f92:	68fa      	ldr	r2, [r7, #12]
 8009f94:	440a      	add	r2, r1
 8009f96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f9a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009f9e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009fa0:	68bb      	ldr	r3, [r7, #8]
 8009fa2:	015a      	lsls	r2, r3, #5
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	4413      	add	r3, r2
 8009fa8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	68ba      	ldr	r2, [r7, #8]
 8009fb0:	0151      	lsls	r1, r2, #5
 8009fb2:	68fa      	ldr	r2, [r7, #12]
 8009fb4:	440a      	add	r2, r1
 8009fb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009fba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009fbe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	781b      	ldrb	r3, [r3, #0]
 8009fcc:	f003 030f 	and.w	r3, r3, #15
 8009fd0:	2101      	movs	r1, #1
 8009fd2:	fa01 f303 	lsl.w	r3, r1, r3
 8009fd6:	b29b      	uxth	r3, r3
 8009fd8:	43db      	mvns	r3, r3
 8009fda:	68f9      	ldr	r1, [r7, #12]
 8009fdc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009fe0:	4013      	ands	r3, r2
 8009fe2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fea:	69da      	ldr	r2, [r3, #28]
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	781b      	ldrb	r3, [r3, #0]
 8009ff0:	f003 030f 	and.w	r3, r3, #15
 8009ff4:	2101      	movs	r1, #1
 8009ff6:	fa01 f303 	lsl.w	r3, r1, r3
 8009ffa:	b29b      	uxth	r3, r3
 8009ffc:	43db      	mvns	r3, r3
 8009ffe:	68f9      	ldr	r1, [r7, #12]
 800a000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a004:	4013      	ands	r3, r2
 800a006:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800a008:	68bb      	ldr	r3, [r7, #8]
 800a00a:	015a      	lsls	r2, r3, #5
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	4413      	add	r3, r2
 800a010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	68bb      	ldr	r3, [r7, #8]
 800a018:	0159      	lsls	r1, r3, #5
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	440b      	add	r3, r1
 800a01e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a022:	4619      	mov	r1, r3
 800a024:	4b35      	ldr	r3, [pc, #212]	; (800a0fc <USB_DeactivateEndpoint+0x1b0>)
 800a026:	4013      	ands	r3, r2
 800a028:	600b      	str	r3, [r1, #0]
 800a02a:	e060      	b.n	800a0ee <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a02c:	68bb      	ldr	r3, [r7, #8]
 800a02e:	015a      	lsls	r2, r3, #5
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	4413      	add	r3, r2
 800a034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a03e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a042:	d11f      	bne.n	800a084 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800a044:	68bb      	ldr	r3, [r7, #8]
 800a046:	015a      	lsls	r2, r3, #5
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	4413      	add	r3, r2
 800a04c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	68ba      	ldr	r2, [r7, #8]
 800a054:	0151      	lsls	r1, r2, #5
 800a056:	68fa      	ldr	r2, [r7, #12]
 800a058:	440a      	add	r2, r1
 800a05a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a05e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a062:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	015a      	lsls	r2, r3, #5
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	0151      	lsls	r1, r2, #5
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	440a      	add	r2, r1
 800a07a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a07e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a082:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a08a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a08c:	683b      	ldr	r3, [r7, #0]
 800a08e:	781b      	ldrb	r3, [r3, #0]
 800a090:	f003 030f 	and.w	r3, r3, #15
 800a094:	2101      	movs	r1, #1
 800a096:	fa01 f303 	lsl.w	r3, r1, r3
 800a09a:	041b      	lsls	r3, r3, #16
 800a09c:	43db      	mvns	r3, r3
 800a09e:	68f9      	ldr	r1, [r7, #12]
 800a0a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0a4:	4013      	ands	r3, r2
 800a0a6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0ae:	69da      	ldr	r2, [r3, #28]
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	781b      	ldrb	r3, [r3, #0]
 800a0b4:	f003 030f 	and.w	r3, r3, #15
 800a0b8:	2101      	movs	r1, #1
 800a0ba:	fa01 f303 	lsl.w	r3, r1, r3
 800a0be:	041b      	lsls	r3, r3, #16
 800a0c0:	43db      	mvns	r3, r3
 800a0c2:	68f9      	ldr	r1, [r7, #12]
 800a0c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a0c8:	4013      	ands	r3, r2
 800a0ca:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800a0cc:	68bb      	ldr	r3, [r7, #8]
 800a0ce:	015a      	lsls	r2, r3, #5
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	0159      	lsls	r1, r3, #5
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	440b      	add	r3, r1
 800a0e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0e6:	4619      	mov	r1, r3
 800a0e8:	4b05      	ldr	r3, [pc, #20]	; (800a100 <USB_DeactivateEndpoint+0x1b4>)
 800a0ea:	4013      	ands	r3, r2
 800a0ec:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800a0ee:	2300      	movs	r3, #0
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	3714      	adds	r7, #20
 800a0f4:	46bd      	mov	sp, r7
 800a0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fa:	4770      	bx	lr
 800a0fc:	ec337800 	.word	0xec337800
 800a100:	eff37800 	.word	0xeff37800

0800a104 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b08a      	sub	sp, #40	; 0x28
 800a108:	af02      	add	r7, sp, #8
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	4613      	mov	r3, r2
 800a110:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800a116:	68bb      	ldr	r3, [r7, #8]
 800a118:	781b      	ldrb	r3, [r3, #0]
 800a11a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	785b      	ldrb	r3, [r3, #1]
 800a120:	2b01      	cmp	r3, #1
 800a122:	f040 8163 	bne.w	800a3ec <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a126:	68bb      	ldr	r3, [r7, #8]
 800a128:	699b      	ldr	r3, [r3, #24]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d132      	bne.n	800a194 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a12e:	69bb      	ldr	r3, [r7, #24]
 800a130:	015a      	lsls	r2, r3, #5
 800a132:	69fb      	ldr	r3, [r7, #28]
 800a134:	4413      	add	r3, r2
 800a136:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a13a:	691a      	ldr	r2, [r3, #16]
 800a13c:	69bb      	ldr	r3, [r7, #24]
 800a13e:	0159      	lsls	r1, r3, #5
 800a140:	69fb      	ldr	r3, [r7, #28]
 800a142:	440b      	add	r3, r1
 800a144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a148:	4619      	mov	r1, r3
 800a14a:	4ba5      	ldr	r3, [pc, #660]	; (800a3e0 <USB_EPStartXfer+0x2dc>)
 800a14c:	4013      	ands	r3, r2
 800a14e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	015a      	lsls	r2, r3, #5
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	4413      	add	r3, r2
 800a158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a15c:	691b      	ldr	r3, [r3, #16]
 800a15e:	69ba      	ldr	r2, [r7, #24]
 800a160:	0151      	lsls	r1, r2, #5
 800a162:	69fa      	ldr	r2, [r7, #28]
 800a164:	440a      	add	r2, r1
 800a166:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a16a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a16e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a170:	69bb      	ldr	r3, [r7, #24]
 800a172:	015a      	lsls	r2, r3, #5
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	4413      	add	r3, r2
 800a178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a17c:	691a      	ldr	r2, [r3, #16]
 800a17e:	69bb      	ldr	r3, [r7, #24]
 800a180:	0159      	lsls	r1, r3, #5
 800a182:	69fb      	ldr	r3, [r7, #28]
 800a184:	440b      	add	r3, r1
 800a186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a18a:	4619      	mov	r1, r3
 800a18c:	4b95      	ldr	r3, [pc, #596]	; (800a3e4 <USB_EPStartXfer+0x2e0>)
 800a18e:	4013      	ands	r3, r2
 800a190:	610b      	str	r3, [r1, #16]
 800a192:	e074      	b.n	800a27e <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a194:	69bb      	ldr	r3, [r7, #24]
 800a196:	015a      	lsls	r2, r3, #5
 800a198:	69fb      	ldr	r3, [r7, #28]
 800a19a:	4413      	add	r3, r2
 800a19c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1a0:	691a      	ldr	r2, [r3, #16]
 800a1a2:	69bb      	ldr	r3, [r7, #24]
 800a1a4:	0159      	lsls	r1, r3, #5
 800a1a6:	69fb      	ldr	r3, [r7, #28]
 800a1a8:	440b      	add	r3, r1
 800a1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1ae:	4619      	mov	r1, r3
 800a1b0:	4b8c      	ldr	r3, [pc, #560]	; (800a3e4 <USB_EPStartXfer+0x2e0>)
 800a1b2:	4013      	ands	r3, r2
 800a1b4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a1b6:	69bb      	ldr	r3, [r7, #24]
 800a1b8:	015a      	lsls	r2, r3, #5
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	4413      	add	r3, r2
 800a1be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1c2:	691a      	ldr	r2, [r3, #16]
 800a1c4:	69bb      	ldr	r3, [r7, #24]
 800a1c6:	0159      	lsls	r1, r3, #5
 800a1c8:	69fb      	ldr	r3, [r7, #28]
 800a1ca:	440b      	add	r3, r1
 800a1cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1d0:	4619      	mov	r1, r3
 800a1d2:	4b83      	ldr	r3, [pc, #524]	; (800a3e0 <USB_EPStartXfer+0x2dc>)
 800a1d4:	4013      	ands	r3, r2
 800a1d6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a1d8:	69bb      	ldr	r3, [r7, #24]
 800a1da:	015a      	lsls	r2, r3, #5
 800a1dc:	69fb      	ldr	r3, [r7, #28]
 800a1de:	4413      	add	r3, r2
 800a1e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e4:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800a1e6:	68bb      	ldr	r3, [r7, #8]
 800a1e8:	6999      	ldr	r1, [r3, #24]
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	68db      	ldr	r3, [r3, #12]
 800a1ee:	440b      	add	r3, r1
 800a1f0:	1e59      	subs	r1, r3, #1
 800a1f2:	68bb      	ldr	r3, [r7, #8]
 800a1f4:	68db      	ldr	r3, [r3, #12]
 800a1f6:	fbb1 f3f3 	udiv	r3, r1, r3
 800a1fa:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800a1fc:	4b7a      	ldr	r3, [pc, #488]	; (800a3e8 <USB_EPStartXfer+0x2e4>)
 800a1fe:	400b      	ands	r3, r1
 800a200:	69b9      	ldr	r1, [r7, #24]
 800a202:	0148      	lsls	r0, r1, #5
 800a204:	69f9      	ldr	r1, [r7, #28]
 800a206:	4401      	add	r1, r0
 800a208:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a20c:	4313      	orrs	r3, r2
 800a20e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a210:	69bb      	ldr	r3, [r7, #24]
 800a212:	015a      	lsls	r2, r3, #5
 800a214:	69fb      	ldr	r3, [r7, #28]
 800a216:	4413      	add	r3, r2
 800a218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a21c:	691a      	ldr	r2, [r3, #16]
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a226:	69b9      	ldr	r1, [r7, #24]
 800a228:	0148      	lsls	r0, r1, #5
 800a22a:	69f9      	ldr	r1, [r7, #28]
 800a22c:	4401      	add	r1, r0
 800a22e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a232:	4313      	orrs	r3, r2
 800a234:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800a236:	68bb      	ldr	r3, [r7, #8]
 800a238:	791b      	ldrb	r3, [r3, #4]
 800a23a:	2b01      	cmp	r3, #1
 800a23c:	d11f      	bne.n	800a27e <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	015a      	lsls	r2, r3, #5
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	4413      	add	r3, r2
 800a246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a24a:	691b      	ldr	r3, [r3, #16]
 800a24c:	69ba      	ldr	r2, [r7, #24]
 800a24e:	0151      	lsls	r1, r2, #5
 800a250:	69fa      	ldr	r2, [r7, #28]
 800a252:	440a      	add	r2, r1
 800a254:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a258:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800a25c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800a25e:	69bb      	ldr	r3, [r7, #24]
 800a260:	015a      	lsls	r2, r3, #5
 800a262:	69fb      	ldr	r3, [r7, #28]
 800a264:	4413      	add	r3, r2
 800a266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a26a:	691b      	ldr	r3, [r3, #16]
 800a26c:	69ba      	ldr	r2, [r7, #24]
 800a26e:	0151      	lsls	r1, r2, #5
 800a270:	69fa      	ldr	r2, [r7, #28]
 800a272:	440a      	add	r2, r1
 800a274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a278:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a27c:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800a27e:	79fb      	ldrb	r3, [r7, #7]
 800a280:	2b01      	cmp	r3, #1
 800a282:	d14b      	bne.n	800a31c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	695b      	ldr	r3, [r3, #20]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d009      	beq.n	800a2a0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a28c:	69bb      	ldr	r3, [r7, #24]
 800a28e:	015a      	lsls	r2, r3, #5
 800a290:	69fb      	ldr	r3, [r7, #28]
 800a292:	4413      	add	r3, r2
 800a294:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a298:	461a      	mov	r2, r3
 800a29a:	68bb      	ldr	r3, [r7, #8]
 800a29c:	695b      	ldr	r3, [r3, #20]
 800a29e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	791b      	ldrb	r3, [r3, #4]
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d128      	bne.n	800a2fa <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2ae:	689b      	ldr	r3, [r3, #8]
 800a2b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d110      	bne.n	800a2da <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	015a      	lsls	r2, r3, #5
 800a2bc:	69fb      	ldr	r3, [r7, #28]
 800a2be:	4413      	add	r3, r2
 800a2c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	69ba      	ldr	r2, [r7, #24]
 800a2c8:	0151      	lsls	r1, r2, #5
 800a2ca:	69fa      	ldr	r2, [r7, #28]
 800a2cc:	440a      	add	r2, r1
 800a2ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a2d6:	6013      	str	r3, [r2, #0]
 800a2d8:	e00f      	b.n	800a2fa <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a2da:	69bb      	ldr	r3, [r7, #24]
 800a2dc:	015a      	lsls	r2, r3, #5
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	4413      	add	r3, r2
 800a2e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	69ba      	ldr	r2, [r7, #24]
 800a2ea:	0151      	lsls	r1, r2, #5
 800a2ec:	69fa      	ldr	r2, [r7, #28]
 800a2ee:	440a      	add	r2, r1
 800a2f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a2f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a2f8:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a2fa:	69bb      	ldr	r3, [r7, #24]
 800a2fc:	015a      	lsls	r2, r3, #5
 800a2fe:	69fb      	ldr	r3, [r7, #28]
 800a300:	4413      	add	r3, r2
 800a302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	69ba      	ldr	r2, [r7, #24]
 800a30a:	0151      	lsls	r1, r2, #5
 800a30c:	69fa      	ldr	r2, [r7, #28]
 800a30e:	440a      	add	r2, r1
 800a310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a314:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a318:	6013      	str	r3, [r2, #0]
 800a31a:	e137      	b.n	800a58c <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a31c:	69bb      	ldr	r3, [r7, #24]
 800a31e:	015a      	lsls	r2, r3, #5
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	4413      	add	r3, r2
 800a324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	69ba      	ldr	r2, [r7, #24]
 800a32c:	0151      	lsls	r1, r2, #5
 800a32e:	69fa      	ldr	r2, [r7, #28]
 800a330:	440a      	add	r2, r1
 800a332:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a336:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a33a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	791b      	ldrb	r3, [r3, #4]
 800a340:	2b01      	cmp	r3, #1
 800a342:	d015      	beq.n	800a370 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	699b      	ldr	r3, [r3, #24]
 800a348:	2b00      	cmp	r3, #0
 800a34a:	f000 811f 	beq.w	800a58c <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a354:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	781b      	ldrb	r3, [r3, #0]
 800a35a:	f003 030f 	and.w	r3, r3, #15
 800a35e:	2101      	movs	r1, #1
 800a360:	fa01 f303 	lsl.w	r3, r1, r3
 800a364:	69f9      	ldr	r1, [r7, #28]
 800a366:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a36a:	4313      	orrs	r3, r2
 800a36c:	634b      	str	r3, [r1, #52]	; 0x34
 800a36e:	e10d      	b.n	800a58c <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a370:	69fb      	ldr	r3, [r7, #28]
 800a372:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d110      	bne.n	800a3a2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a380:	69bb      	ldr	r3, [r7, #24]
 800a382:	015a      	lsls	r2, r3, #5
 800a384:	69fb      	ldr	r3, [r7, #28]
 800a386:	4413      	add	r3, r2
 800a388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	69ba      	ldr	r2, [r7, #24]
 800a390:	0151      	lsls	r1, r2, #5
 800a392:	69fa      	ldr	r2, [r7, #28]
 800a394:	440a      	add	r2, r1
 800a396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a39a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a39e:	6013      	str	r3, [r2, #0]
 800a3a0:	e00f      	b.n	800a3c2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	015a      	lsls	r2, r3, #5
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	4413      	add	r3, r2
 800a3aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	69ba      	ldr	r2, [r7, #24]
 800a3b2:	0151      	lsls	r1, r2, #5
 800a3b4:	69fa      	ldr	r2, [r7, #28]
 800a3b6:	440a      	add	r2, r1
 800a3b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a3bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3c0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a3c2:	68bb      	ldr	r3, [r7, #8]
 800a3c4:	6919      	ldr	r1, [r3, #16]
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	781a      	ldrb	r2, [r3, #0]
 800a3ca:	68bb      	ldr	r3, [r7, #8]
 800a3cc:	699b      	ldr	r3, [r3, #24]
 800a3ce:	b298      	uxth	r0, r3
 800a3d0:	79fb      	ldrb	r3, [r7, #7]
 800a3d2:	9300      	str	r3, [sp, #0]
 800a3d4:	4603      	mov	r3, r0
 800a3d6:	68f8      	ldr	r0, [r7, #12]
 800a3d8:	f000 faea 	bl	800a9b0 <USB_WritePacket>
 800a3dc:	e0d6      	b.n	800a58c <USB_EPStartXfer+0x488>
 800a3de:	bf00      	nop
 800a3e0:	e007ffff 	.word	0xe007ffff
 800a3e4:	fff80000 	.word	0xfff80000
 800a3e8:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	015a      	lsls	r2, r3, #5
 800a3f0:	69fb      	ldr	r3, [r7, #28]
 800a3f2:	4413      	add	r3, r2
 800a3f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a3f8:	691a      	ldr	r2, [r3, #16]
 800a3fa:	69bb      	ldr	r3, [r7, #24]
 800a3fc:	0159      	lsls	r1, r3, #5
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	440b      	add	r3, r1
 800a402:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a406:	4619      	mov	r1, r3
 800a408:	4b63      	ldr	r3, [pc, #396]	; (800a598 <USB_EPStartXfer+0x494>)
 800a40a:	4013      	ands	r3, r2
 800a40c:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a40e:	69bb      	ldr	r3, [r7, #24]
 800a410:	015a      	lsls	r2, r3, #5
 800a412:	69fb      	ldr	r3, [r7, #28]
 800a414:	4413      	add	r3, r2
 800a416:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a41a:	691a      	ldr	r2, [r3, #16]
 800a41c:	69bb      	ldr	r3, [r7, #24]
 800a41e:	0159      	lsls	r1, r3, #5
 800a420:	69fb      	ldr	r3, [r7, #28]
 800a422:	440b      	add	r3, r1
 800a424:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a428:	4619      	mov	r1, r3
 800a42a:	4b5c      	ldr	r3, [pc, #368]	; (800a59c <USB_EPStartXfer+0x498>)
 800a42c:	4013      	ands	r3, r2
 800a42e:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800a430:	68bb      	ldr	r3, [r7, #8]
 800a432:	699b      	ldr	r3, [r3, #24]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d123      	bne.n	800a480 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a438:	69bb      	ldr	r3, [r7, #24]
 800a43a:	015a      	lsls	r2, r3, #5
 800a43c:	69fb      	ldr	r3, [r7, #28]
 800a43e:	4413      	add	r3, r2
 800a440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a444:	691a      	ldr	r2, [r3, #16]
 800a446:	68bb      	ldr	r3, [r7, #8]
 800a448:	68db      	ldr	r3, [r3, #12]
 800a44a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a44e:	69b9      	ldr	r1, [r7, #24]
 800a450:	0148      	lsls	r0, r1, #5
 800a452:	69f9      	ldr	r1, [r7, #28]
 800a454:	4401      	add	r1, r0
 800a456:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a45a:	4313      	orrs	r3, r2
 800a45c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a45e:	69bb      	ldr	r3, [r7, #24]
 800a460:	015a      	lsls	r2, r3, #5
 800a462:	69fb      	ldr	r3, [r7, #28]
 800a464:	4413      	add	r3, r2
 800a466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a46a:	691b      	ldr	r3, [r3, #16]
 800a46c:	69ba      	ldr	r2, [r7, #24]
 800a46e:	0151      	lsls	r1, r2, #5
 800a470:	69fa      	ldr	r2, [r7, #28]
 800a472:	440a      	add	r2, r1
 800a474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a478:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a47c:	6113      	str	r3, [r2, #16]
 800a47e:	e037      	b.n	800a4f0 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a480:	68bb      	ldr	r3, [r7, #8]
 800a482:	699a      	ldr	r2, [r3, #24]
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	4413      	add	r3, r2
 800a48a:	1e5a      	subs	r2, r3, #1
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	68db      	ldr	r3, [r3, #12]
 800a490:	fbb2 f3f3 	udiv	r3, r2, r3
 800a494:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	68db      	ldr	r3, [r3, #12]
 800a49a:	8afa      	ldrh	r2, [r7, #22]
 800a49c:	fb03 f202 	mul.w	r2, r3, r2
 800a4a0:	68bb      	ldr	r3, [r7, #8]
 800a4a2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a4a4:	69bb      	ldr	r3, [r7, #24]
 800a4a6:	015a      	lsls	r2, r3, #5
 800a4a8:	69fb      	ldr	r3, [r7, #28]
 800a4aa:	4413      	add	r3, r2
 800a4ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4b0:	691a      	ldr	r2, [r3, #16]
 800a4b2:	8afb      	ldrh	r3, [r7, #22]
 800a4b4:	04d9      	lsls	r1, r3, #19
 800a4b6:	4b3a      	ldr	r3, [pc, #232]	; (800a5a0 <USB_EPStartXfer+0x49c>)
 800a4b8:	400b      	ands	r3, r1
 800a4ba:	69b9      	ldr	r1, [r7, #24]
 800a4bc:	0148      	lsls	r0, r1, #5
 800a4be:	69f9      	ldr	r1, [r7, #28]
 800a4c0:	4401      	add	r1, r0
 800a4c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a4ca:	69bb      	ldr	r3, [r7, #24]
 800a4cc:	015a      	lsls	r2, r3, #5
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	4413      	add	r3, r2
 800a4d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a4d6:	691a      	ldr	r2, [r3, #16]
 800a4d8:	68bb      	ldr	r3, [r7, #8]
 800a4da:	69db      	ldr	r3, [r3, #28]
 800a4dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a4e0:	69b9      	ldr	r1, [r7, #24]
 800a4e2:	0148      	lsls	r0, r1, #5
 800a4e4:	69f9      	ldr	r1, [r7, #28]
 800a4e6:	4401      	add	r1, r0
 800a4e8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a4ec:	4313      	orrs	r3, r2
 800a4ee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a4f0:	79fb      	ldrb	r3, [r7, #7]
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d10d      	bne.n	800a512 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a4f6:	68bb      	ldr	r3, [r7, #8]
 800a4f8:	691b      	ldr	r3, [r3, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d009      	beq.n	800a512 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a4fe:	68bb      	ldr	r3, [r7, #8]
 800a500:	6919      	ldr	r1, [r3, #16]
 800a502:	69bb      	ldr	r3, [r7, #24]
 800a504:	015a      	lsls	r2, r3, #5
 800a506:	69fb      	ldr	r3, [r7, #28]
 800a508:	4413      	add	r3, r2
 800a50a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a50e:	460a      	mov	r2, r1
 800a510:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	791b      	ldrb	r3, [r3, #4]
 800a516:	2b01      	cmp	r3, #1
 800a518:	d128      	bne.n	800a56c <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a51a:	69fb      	ldr	r3, [r7, #28]
 800a51c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a520:	689b      	ldr	r3, [r3, #8]
 800a522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a526:	2b00      	cmp	r3, #0
 800a528:	d110      	bne.n	800a54c <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	015a      	lsls	r2, r3, #5
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	4413      	add	r3, r2
 800a532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	69ba      	ldr	r2, [r7, #24]
 800a53a:	0151      	lsls	r1, r2, #5
 800a53c:	69fa      	ldr	r2, [r7, #28]
 800a53e:	440a      	add	r2, r1
 800a540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a544:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a548:	6013      	str	r3, [r2, #0]
 800a54a:	e00f      	b.n	800a56c <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a54c:	69bb      	ldr	r3, [r7, #24]
 800a54e:	015a      	lsls	r2, r3, #5
 800a550:	69fb      	ldr	r3, [r7, #28]
 800a552:	4413      	add	r3, r2
 800a554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	69ba      	ldr	r2, [r7, #24]
 800a55c:	0151      	lsls	r1, r2, #5
 800a55e:	69fa      	ldr	r2, [r7, #28]
 800a560:	440a      	add	r2, r1
 800a562:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a56a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a56c:	69bb      	ldr	r3, [r7, #24]
 800a56e:	015a      	lsls	r2, r3, #5
 800a570:	69fb      	ldr	r3, [r7, #28]
 800a572:	4413      	add	r3, r2
 800a574:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	69ba      	ldr	r2, [r7, #24]
 800a57c:	0151      	lsls	r1, r2, #5
 800a57e:	69fa      	ldr	r2, [r7, #28]
 800a580:	440a      	add	r2, r1
 800a582:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a586:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a58a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a58c:	2300      	movs	r3, #0
}
 800a58e:	4618      	mov	r0, r3
 800a590:	3720      	adds	r7, #32
 800a592:	46bd      	mov	sp, r7
 800a594:	bd80      	pop	{r7, pc}
 800a596:	bf00      	nop
 800a598:	fff80000 	.word	0xfff80000
 800a59c:	e007ffff 	.word	0xe007ffff
 800a5a0:	1ff80000 	.word	0x1ff80000

0800a5a4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800a5a4:	b480      	push	{r7}
 800a5a6:	b087      	sub	sp, #28
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	60f8      	str	r0, [r7, #12]
 800a5ac:	60b9      	str	r1, [r7, #8]
 800a5ae:	4613      	mov	r3, r2
 800a5b0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	781b      	ldrb	r3, [r3, #0]
 800a5ba:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	785b      	ldrb	r3, [r3, #1]
 800a5c0:	2b01      	cmp	r3, #1
 800a5c2:	f040 80ce 	bne.w	800a762 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800a5c6:	68bb      	ldr	r3, [r7, #8]
 800a5c8:	699b      	ldr	r3, [r3, #24]
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d132      	bne.n	800a634 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	015a      	lsls	r2, r3, #5
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	4413      	add	r3, r2
 800a5d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5da:	691a      	ldr	r2, [r3, #16]
 800a5dc:	693b      	ldr	r3, [r7, #16]
 800a5de:	0159      	lsls	r1, r3, #5
 800a5e0:	697b      	ldr	r3, [r7, #20]
 800a5e2:	440b      	add	r3, r1
 800a5e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5e8:	4619      	mov	r1, r3
 800a5ea:	4b9a      	ldr	r3, [pc, #616]	; (800a854 <USB_EP0StartXfer+0x2b0>)
 800a5ec:	4013      	ands	r3, r2
 800a5ee:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a5f0:	693b      	ldr	r3, [r7, #16]
 800a5f2:	015a      	lsls	r2, r3, #5
 800a5f4:	697b      	ldr	r3, [r7, #20]
 800a5f6:	4413      	add	r3, r2
 800a5f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a5fc:	691b      	ldr	r3, [r3, #16]
 800a5fe:	693a      	ldr	r2, [r7, #16]
 800a600:	0151      	lsls	r1, r2, #5
 800a602:	697a      	ldr	r2, [r7, #20]
 800a604:	440a      	add	r2, r1
 800a606:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a60a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a60e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a610:	693b      	ldr	r3, [r7, #16]
 800a612:	015a      	lsls	r2, r3, #5
 800a614:	697b      	ldr	r3, [r7, #20]
 800a616:	4413      	add	r3, r2
 800a618:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a61c:	691a      	ldr	r2, [r3, #16]
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	0159      	lsls	r1, r3, #5
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	440b      	add	r3, r1
 800a626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a62a:	4619      	mov	r1, r3
 800a62c:	4b8a      	ldr	r3, [pc, #552]	; (800a858 <USB_EP0StartXfer+0x2b4>)
 800a62e:	4013      	ands	r3, r2
 800a630:	610b      	str	r3, [r1, #16]
 800a632:	e04e      	b.n	800a6d2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	015a      	lsls	r2, r3, #5
 800a638:	697b      	ldr	r3, [r7, #20]
 800a63a:	4413      	add	r3, r2
 800a63c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a640:	691a      	ldr	r2, [r3, #16]
 800a642:	693b      	ldr	r3, [r7, #16]
 800a644:	0159      	lsls	r1, r3, #5
 800a646:	697b      	ldr	r3, [r7, #20]
 800a648:	440b      	add	r3, r1
 800a64a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a64e:	4619      	mov	r1, r3
 800a650:	4b81      	ldr	r3, [pc, #516]	; (800a858 <USB_EP0StartXfer+0x2b4>)
 800a652:	4013      	ands	r3, r2
 800a654:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800a656:	693b      	ldr	r3, [r7, #16]
 800a658:	015a      	lsls	r2, r3, #5
 800a65a:	697b      	ldr	r3, [r7, #20]
 800a65c:	4413      	add	r3, r2
 800a65e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a662:	691a      	ldr	r2, [r3, #16]
 800a664:	693b      	ldr	r3, [r7, #16]
 800a666:	0159      	lsls	r1, r3, #5
 800a668:	697b      	ldr	r3, [r7, #20]
 800a66a:	440b      	add	r3, r1
 800a66c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a670:	4619      	mov	r1, r3
 800a672:	4b78      	ldr	r3, [pc, #480]	; (800a854 <USB_EP0StartXfer+0x2b0>)
 800a674:	4013      	ands	r3, r2
 800a676:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	699a      	ldr	r2, [r3, #24]
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	68db      	ldr	r3, [r3, #12]
 800a680:	429a      	cmp	r2, r3
 800a682:	d903      	bls.n	800a68c <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800a684:	68bb      	ldr	r3, [r7, #8]
 800a686:	68da      	ldr	r2, [r3, #12]
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	015a      	lsls	r2, r3, #5
 800a690:	697b      	ldr	r3, [r7, #20]
 800a692:	4413      	add	r3, r2
 800a694:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a698:	691b      	ldr	r3, [r3, #16]
 800a69a:	693a      	ldr	r2, [r7, #16]
 800a69c:	0151      	lsls	r1, r2, #5
 800a69e:	697a      	ldr	r2, [r7, #20]
 800a6a0:	440a      	add	r2, r1
 800a6a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a6a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a6aa:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	015a      	lsls	r2, r3, #5
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	4413      	add	r3, r2
 800a6b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6b8:	691a      	ldr	r2, [r3, #16]
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	699b      	ldr	r3, [r3, #24]
 800a6be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6c2:	6939      	ldr	r1, [r7, #16]
 800a6c4:	0148      	lsls	r0, r1, #5
 800a6c6:	6979      	ldr	r1, [r7, #20]
 800a6c8:	4401      	add	r1, r0
 800a6ca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800a6d2:	79fb      	ldrb	r3, [r7, #7]
 800a6d4:	2b01      	cmp	r3, #1
 800a6d6:	d11e      	bne.n	800a716 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800a6d8:	68bb      	ldr	r3, [r7, #8]
 800a6da:	695b      	ldr	r3, [r3, #20]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d009      	beq.n	800a6f4 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800a6e0:	693b      	ldr	r3, [r7, #16]
 800a6e2:	015a      	lsls	r2, r3, #5
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a6ec:	461a      	mov	r2, r3
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	695b      	ldr	r3, [r3, #20]
 800a6f2:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	015a      	lsls	r2, r3, #5
 800a6f8:	697b      	ldr	r3, [r7, #20]
 800a6fa:	4413      	add	r3, r2
 800a6fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	693a      	ldr	r2, [r7, #16]
 800a704:	0151      	lsls	r1, r2, #5
 800a706:	697a      	ldr	r2, [r7, #20]
 800a708:	440a      	add	r2, r1
 800a70a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a70e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a712:	6013      	str	r3, [r2, #0]
 800a714:	e097      	b.n	800a846 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800a716:	693b      	ldr	r3, [r7, #16]
 800a718:	015a      	lsls	r2, r3, #5
 800a71a:	697b      	ldr	r3, [r7, #20]
 800a71c:	4413      	add	r3, r2
 800a71e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	693a      	ldr	r2, [r7, #16]
 800a726:	0151      	lsls	r1, r2, #5
 800a728:	697a      	ldr	r2, [r7, #20]
 800a72a:	440a      	add	r2, r1
 800a72c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a730:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a734:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	699b      	ldr	r3, [r3, #24]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f000 8083 	beq.w	800a846 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a740:	697b      	ldr	r3, [r7, #20]
 800a742:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a746:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a748:	68bb      	ldr	r3, [r7, #8]
 800a74a:	781b      	ldrb	r3, [r3, #0]
 800a74c:	f003 030f 	and.w	r3, r3, #15
 800a750:	2101      	movs	r1, #1
 800a752:	fa01 f303 	lsl.w	r3, r1, r3
 800a756:	6979      	ldr	r1, [r7, #20]
 800a758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a75c:	4313      	orrs	r3, r2
 800a75e:	634b      	str	r3, [r1, #52]	; 0x34
 800a760:	e071      	b.n	800a846 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	015a      	lsls	r2, r3, #5
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	4413      	add	r3, r2
 800a76a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a76e:	691a      	ldr	r2, [r3, #16]
 800a770:	693b      	ldr	r3, [r7, #16]
 800a772:	0159      	lsls	r1, r3, #5
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	440b      	add	r3, r1
 800a778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a77c:	4619      	mov	r1, r3
 800a77e:	4b36      	ldr	r3, [pc, #216]	; (800a858 <USB_EP0StartXfer+0x2b4>)
 800a780:	4013      	ands	r3, r2
 800a782:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	015a      	lsls	r2, r3, #5
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	4413      	add	r3, r2
 800a78c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a790:	691a      	ldr	r2, [r3, #16]
 800a792:	693b      	ldr	r3, [r7, #16]
 800a794:	0159      	lsls	r1, r3, #5
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	440b      	add	r3, r1
 800a79a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a79e:	4619      	mov	r1, r3
 800a7a0:	4b2c      	ldr	r3, [pc, #176]	; (800a854 <USB_EP0StartXfer+0x2b0>)
 800a7a2:	4013      	ands	r3, r2
 800a7a4:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	699b      	ldr	r3, [r3, #24]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d003      	beq.n	800a7b6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	68da      	ldr	r2, [r3, #12]
 800a7b2:	68bb      	ldr	r3, [r7, #8]
 800a7b4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	68da      	ldr	r2, [r3, #12]
 800a7ba:	68bb      	ldr	r3, [r7, #8]
 800a7bc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a7be:	693b      	ldr	r3, [r7, #16]
 800a7c0:	015a      	lsls	r2, r3, #5
 800a7c2:	697b      	ldr	r3, [r7, #20]
 800a7c4:	4413      	add	r3, r2
 800a7c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ca:	691b      	ldr	r3, [r3, #16]
 800a7cc:	693a      	ldr	r2, [r7, #16]
 800a7ce:	0151      	lsls	r1, r2, #5
 800a7d0:	697a      	ldr	r2, [r7, #20]
 800a7d2:	440a      	add	r2, r1
 800a7d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a7d8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7dc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	015a      	lsls	r2, r3, #5
 800a7e2:	697b      	ldr	r3, [r7, #20]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a7ea:	691a      	ldr	r2, [r3, #16]
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	69db      	ldr	r3, [r3, #28]
 800a7f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a7f4:	6939      	ldr	r1, [r7, #16]
 800a7f6:	0148      	lsls	r0, r1, #5
 800a7f8:	6979      	ldr	r1, [r7, #20]
 800a7fa:	4401      	add	r1, r0
 800a7fc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800a800:	4313      	orrs	r3, r2
 800a802:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800a804:	79fb      	ldrb	r3, [r7, #7]
 800a806:	2b01      	cmp	r3, #1
 800a808:	d10d      	bne.n	800a826 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	691b      	ldr	r3, [r3, #16]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d009      	beq.n	800a826 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a812:	68bb      	ldr	r3, [r7, #8]
 800a814:	6919      	ldr	r1, [r3, #16]
 800a816:	693b      	ldr	r3, [r7, #16]
 800a818:	015a      	lsls	r2, r3, #5
 800a81a:	697b      	ldr	r3, [r7, #20]
 800a81c:	4413      	add	r3, r2
 800a81e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a822:	460a      	mov	r2, r1
 800a824:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a826:	693b      	ldr	r3, [r7, #16]
 800a828:	015a      	lsls	r2, r3, #5
 800a82a:	697b      	ldr	r3, [r7, #20]
 800a82c:	4413      	add	r3, r2
 800a82e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	693a      	ldr	r2, [r7, #16]
 800a836:	0151      	lsls	r1, r2, #5
 800a838:	697a      	ldr	r2, [r7, #20]
 800a83a:	440a      	add	r2, r1
 800a83c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a840:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800a844:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a846:	2300      	movs	r3, #0
}
 800a848:	4618      	mov	r0, r3
 800a84a:	371c      	adds	r7, #28
 800a84c:	46bd      	mov	sp, r7
 800a84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a852:	4770      	bx	lr
 800a854:	e007ffff 	.word	0xe007ffff
 800a858:	fff80000 	.word	0xfff80000

0800a85c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b087      	sub	sp, #28
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a866:	2300      	movs	r3, #0
 800a868:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a86a:	2300      	movs	r3, #0
 800a86c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	785b      	ldrb	r3, [r3, #1]
 800a876:	2b01      	cmp	r3, #1
 800a878:	d14a      	bne.n	800a910 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	015a      	lsls	r2, r3, #5
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	4413      	add	r3, r2
 800a884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a88e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a892:	f040 8086 	bne.w	800a9a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	015a      	lsls	r2, r3, #5
 800a89c:	693b      	ldr	r3, [r7, #16]
 800a89e:	4413      	add	r3, r2
 800a8a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	683a      	ldr	r2, [r7, #0]
 800a8a8:	7812      	ldrb	r2, [r2, #0]
 800a8aa:	0151      	lsls	r1, r2, #5
 800a8ac:	693a      	ldr	r2, [r7, #16]
 800a8ae:	440a      	add	r2, r1
 800a8b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a8b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a8ba:	683b      	ldr	r3, [r7, #0]
 800a8bc:	781b      	ldrb	r3, [r3, #0]
 800a8be:	015a      	lsls	r2, r3, #5
 800a8c0:	693b      	ldr	r3, [r7, #16]
 800a8c2:	4413      	add	r3, r2
 800a8c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	683a      	ldr	r2, [r7, #0]
 800a8cc:	7812      	ldrb	r2, [r2, #0]
 800a8ce:	0151      	lsls	r1, r2, #5
 800a8d0:	693a      	ldr	r2, [r7, #16]
 800a8d2:	440a      	add	r2, r1
 800a8d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a8d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a8dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	3301      	adds	r3, #1
 800a8e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	f242 7210 	movw	r2, #10000	; 0x2710
 800a8ea:	4293      	cmp	r3, r2
 800a8ec:	d902      	bls.n	800a8f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	75fb      	strb	r3, [r7, #23]
          break;
 800a8f2:	e056      	b.n	800a9a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	781b      	ldrb	r3, [r3, #0]
 800a8f8:	015a      	lsls	r2, r3, #5
 800a8fa:	693b      	ldr	r3, [r7, #16]
 800a8fc:	4413      	add	r3, r2
 800a8fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a908:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a90c:	d0e7      	beq.n	800a8de <USB_EPStopXfer+0x82>
 800a90e:	e048      	b.n	800a9a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a910:	683b      	ldr	r3, [r7, #0]
 800a912:	781b      	ldrb	r3, [r3, #0]
 800a914:	015a      	lsls	r2, r3, #5
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	4413      	add	r3, r2
 800a91a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a924:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a928:	d13b      	bne.n	800a9a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	781b      	ldrb	r3, [r3, #0]
 800a92e:	015a      	lsls	r2, r3, #5
 800a930:	693b      	ldr	r3, [r7, #16]
 800a932:	4413      	add	r3, r2
 800a934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	683a      	ldr	r2, [r7, #0]
 800a93c:	7812      	ldrb	r2, [r2, #0]
 800a93e:	0151      	lsls	r1, r2, #5
 800a940:	693a      	ldr	r2, [r7, #16]
 800a942:	440a      	add	r2, r1
 800a944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a948:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800a94c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	781b      	ldrb	r3, [r3, #0]
 800a952:	015a      	lsls	r2, r3, #5
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	4413      	add	r3, r2
 800a958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	683a      	ldr	r2, [r7, #0]
 800a960:	7812      	ldrb	r2, [r2, #0]
 800a962:	0151      	lsls	r1, r2, #5
 800a964:	693a      	ldr	r2, [r7, #16]
 800a966:	440a      	add	r2, r1
 800a968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a96c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a970:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	3301      	adds	r3, #1
 800a976:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f242 7210 	movw	r2, #10000	; 0x2710
 800a97e:	4293      	cmp	r3, r2
 800a980:	d902      	bls.n	800a988 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a982:	2301      	movs	r3, #1
 800a984:	75fb      	strb	r3, [r7, #23]
          break;
 800a986:	e00c      	b.n	800a9a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a988:	683b      	ldr	r3, [r7, #0]
 800a98a:	781b      	ldrb	r3, [r3, #0]
 800a98c:	015a      	lsls	r2, r3, #5
 800a98e:	693b      	ldr	r3, [r7, #16]
 800a990:	4413      	add	r3, r2
 800a992:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a99c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9a0:	d0e7      	beq.n	800a972 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a9a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	371c      	adds	r7, #28
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr

0800a9b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a9b0:	b480      	push	{r7}
 800a9b2:	b089      	sub	sp, #36	; 0x24
 800a9b4:	af00      	add	r7, sp, #0
 800a9b6:	60f8      	str	r0, [r7, #12]
 800a9b8:	60b9      	str	r1, [r7, #8]
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	461a      	mov	r2, r3
 800a9be:	460b      	mov	r3, r1
 800a9c0:	71fb      	strb	r3, [r7, #7]
 800a9c2:	4613      	mov	r3, r2
 800a9c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a9ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d123      	bne.n	800aa1e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a9d6:	88bb      	ldrh	r3, [r7, #4]
 800a9d8:	3303      	adds	r3, #3
 800a9da:	089b      	lsrs	r3, r3, #2
 800a9dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a9de:	2300      	movs	r3, #0
 800a9e0:	61bb      	str	r3, [r7, #24]
 800a9e2:	e018      	b.n	800aa16 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a9e4:	79fb      	ldrb	r3, [r7, #7]
 800a9e6:	031a      	lsls	r2, r3, #12
 800a9e8:	697b      	ldr	r3, [r7, #20]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9f0:	461a      	mov	r2, r3
 800a9f2:	69fb      	ldr	r3, [r7, #28]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a9f8:	69fb      	ldr	r3, [r7, #28]
 800a9fa:	3301      	adds	r3, #1
 800a9fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a9fe:	69fb      	ldr	r3, [r7, #28]
 800aa00:	3301      	adds	r3, #1
 800aa02:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aa04:	69fb      	ldr	r3, [r7, #28]
 800aa06:	3301      	adds	r3, #1
 800aa08:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800aa0a:	69fb      	ldr	r3, [r7, #28]
 800aa0c:	3301      	adds	r3, #1
 800aa0e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800aa10:	69bb      	ldr	r3, [r7, #24]
 800aa12:	3301      	adds	r3, #1
 800aa14:	61bb      	str	r3, [r7, #24]
 800aa16:	69ba      	ldr	r2, [r7, #24]
 800aa18:	693b      	ldr	r3, [r7, #16]
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d3e2      	bcc.n	800a9e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800aa1e:	2300      	movs	r3, #0
}
 800aa20:	4618      	mov	r0, r3
 800aa22:	3724      	adds	r7, #36	; 0x24
 800aa24:	46bd      	mov	sp, r7
 800aa26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2a:	4770      	bx	lr

0800aa2c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800aa2c:	b480      	push	{r7}
 800aa2e:	b08b      	sub	sp, #44	; 0x2c
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	4613      	mov	r3, r2
 800aa38:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800aa42:	88fb      	ldrh	r3, [r7, #6]
 800aa44:	089b      	lsrs	r3, r3, #2
 800aa46:	b29b      	uxth	r3, r3
 800aa48:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800aa4a:	88fb      	ldrh	r3, [r7, #6]
 800aa4c:	f003 0303 	and.w	r3, r3, #3
 800aa50:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800aa52:	2300      	movs	r3, #0
 800aa54:	623b      	str	r3, [r7, #32]
 800aa56:	e014      	b.n	800aa82 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800aa58:	69bb      	ldr	r3, [r7, #24]
 800aa5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa5e:	681a      	ldr	r2, [r3, #0]
 800aa60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa62:	601a      	str	r2, [r3, #0]
    pDest++;
 800aa64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa66:	3301      	adds	r3, #1
 800aa68:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa6c:	3301      	adds	r3, #1
 800aa6e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa72:	3301      	adds	r3, #1
 800aa74:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800aa76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa78:	3301      	adds	r3, #1
 800aa7a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800aa7c:	6a3b      	ldr	r3, [r7, #32]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	623b      	str	r3, [r7, #32]
 800aa82:	6a3a      	ldr	r2, [r7, #32]
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	429a      	cmp	r2, r3
 800aa88:	d3e6      	bcc.n	800aa58 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800aa8a:	8bfb      	ldrh	r3, [r7, #30]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d01e      	beq.n	800aace <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800aa90:	2300      	movs	r3, #0
 800aa92:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800aa94:	69bb      	ldr	r3, [r7, #24]
 800aa96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa9a:	461a      	mov	r2, r3
 800aa9c:	f107 0310 	add.w	r3, r7, #16
 800aaa0:	6812      	ldr	r2, [r2, #0]
 800aaa2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	6a3b      	ldr	r3, [r7, #32]
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	00db      	lsls	r3, r3, #3
 800aaac:	fa22 f303 	lsr.w	r3, r2, r3
 800aab0:	b2da      	uxtb	r2, r3
 800aab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab4:	701a      	strb	r2, [r3, #0]
      i++;
 800aab6:	6a3b      	ldr	r3, [r7, #32]
 800aab8:	3301      	adds	r3, #1
 800aaba:	623b      	str	r3, [r7, #32]
      pDest++;
 800aabc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aabe:	3301      	adds	r3, #1
 800aac0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800aac2:	8bfb      	ldrh	r3, [r7, #30]
 800aac4:	3b01      	subs	r3, #1
 800aac6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800aac8:	8bfb      	ldrh	r3, [r7, #30]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1ea      	bne.n	800aaa4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800aace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800aad0:	4618      	mov	r0, r3
 800aad2:	372c      	adds	r7, #44	; 0x2c
 800aad4:	46bd      	mov	sp, r7
 800aad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aada:	4770      	bx	lr

0800aadc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	781b      	ldrb	r3, [r3, #0]
 800aaee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800aaf0:	683b      	ldr	r3, [r7, #0]
 800aaf2:	785b      	ldrb	r3, [r3, #1]
 800aaf4:	2b01      	cmp	r3, #1
 800aaf6:	d12c      	bne.n	800ab52 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	015a      	lsls	r2, r3, #5
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	4413      	add	r3, r2
 800ab00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	2b00      	cmp	r3, #0
 800ab08:	db12      	blt.n	800ab30 <USB_EPSetStall+0x54>
 800ab0a:	68bb      	ldr	r3, [r7, #8]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d00f      	beq.n	800ab30 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	015a      	lsls	r2, r3, #5
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	4413      	add	r3, r2
 800ab18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	68ba      	ldr	r2, [r7, #8]
 800ab20:	0151      	lsls	r1, r2, #5
 800ab22:	68fa      	ldr	r2, [r7, #12]
 800ab24:	440a      	add	r2, r1
 800ab26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab2a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab2e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	015a      	lsls	r2, r3, #5
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	4413      	add	r3, r2
 800ab38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68ba      	ldr	r2, [r7, #8]
 800ab40:	0151      	lsls	r1, r2, #5
 800ab42:	68fa      	ldr	r2, [r7, #12]
 800ab44:	440a      	add	r2, r1
 800ab46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ab4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	e02b      	b.n	800abaa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	015a      	lsls	r2, r3, #5
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	4413      	add	r3, r2
 800ab5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	db12      	blt.n	800ab8a <USB_EPSetStall+0xae>
 800ab64:	68bb      	ldr	r3, [r7, #8]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00f      	beq.n	800ab8a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ab6a:	68bb      	ldr	r3, [r7, #8]
 800ab6c:	015a      	lsls	r2, r3, #5
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	4413      	add	r3, r2
 800ab72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	68ba      	ldr	r2, [r7, #8]
 800ab7a:	0151      	lsls	r1, r2, #5
 800ab7c:	68fa      	ldr	r2, [r7, #12]
 800ab7e:	440a      	add	r2, r1
 800ab80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ab84:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ab88:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ab8a:	68bb      	ldr	r3, [r7, #8]
 800ab8c:	015a      	lsls	r2, r3, #5
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	4413      	add	r3, r2
 800ab92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	68ba      	ldr	r2, [r7, #8]
 800ab9a:	0151      	lsls	r1, r2, #5
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	440a      	add	r2, r1
 800aba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800aba4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aba8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800abaa:	2300      	movs	r3, #0
}
 800abac:	4618      	mov	r0, r3
 800abae:	3714      	adds	r7, #20
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr

0800abb8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800abb8:	b480      	push	{r7}
 800abba:	b085      	sub	sp, #20
 800abbc:	af00      	add	r7, sp, #0
 800abbe:	6078      	str	r0, [r7, #4]
 800abc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abc6:	683b      	ldr	r3, [r7, #0]
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	785b      	ldrb	r3, [r3, #1]
 800abd0:	2b01      	cmp	r3, #1
 800abd2:	d128      	bne.n	800ac26 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800abd4:	68bb      	ldr	r3, [r7, #8]
 800abd6:	015a      	lsls	r2, r3, #5
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	4413      	add	r3, r2
 800abdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	68ba      	ldr	r2, [r7, #8]
 800abe4:	0151      	lsls	r1, r2, #5
 800abe6:	68fa      	ldr	r2, [r7, #12]
 800abe8:	440a      	add	r2, r1
 800abea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800abee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800abf2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800abf4:	683b      	ldr	r3, [r7, #0]
 800abf6:	791b      	ldrb	r3, [r3, #4]
 800abf8:	2b03      	cmp	r3, #3
 800abfa:	d003      	beq.n	800ac04 <USB_EPClearStall+0x4c>
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	791b      	ldrb	r3, [r3, #4]
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d138      	bne.n	800ac76 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	015a      	lsls	r2, r3, #5
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	4413      	add	r3, r2
 800ac0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	68ba      	ldr	r2, [r7, #8]
 800ac14:	0151      	lsls	r1, r2, #5
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	440a      	add	r2, r1
 800ac1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ac1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac22:	6013      	str	r3, [r2, #0]
 800ac24:	e027      	b.n	800ac76 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	015a      	lsls	r2, r3, #5
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	4413      	add	r3, r2
 800ac2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	0151      	lsls	r1, r2, #5
 800ac38:	68fa      	ldr	r2, [r7, #12]
 800ac3a:	440a      	add	r2, r1
 800ac3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac40:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ac44:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	791b      	ldrb	r3, [r3, #4]
 800ac4a:	2b03      	cmp	r3, #3
 800ac4c:	d003      	beq.n	800ac56 <USB_EPClearStall+0x9e>
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	791b      	ldrb	r3, [r3, #4]
 800ac52:	2b02      	cmp	r3, #2
 800ac54:	d10f      	bne.n	800ac76 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	015a      	lsls	r2, r3, #5
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	4413      	add	r3, r2
 800ac5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68ba      	ldr	r2, [r7, #8]
 800ac66:	0151      	lsls	r1, r2, #5
 800ac68:	68fa      	ldr	r2, [r7, #12]
 800ac6a:	440a      	add	r2, r1
 800ac6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ac70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ac74:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ac76:	2300      	movs	r3, #0
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3714      	adds	r7, #20
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aca2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800aca6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acae:	681a      	ldr	r2, [r3, #0]
 800acb0:	78fb      	ldrb	r3, [r7, #3]
 800acb2:	011b      	lsls	r3, r3, #4
 800acb4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800acb8:	68f9      	ldr	r1, [r7, #12]
 800acba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800acbe:	4313      	orrs	r3, r2
 800acc0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3714      	adds	r7, #20
 800acc8:	46bd      	mov	sp, r7
 800acca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acce:	4770      	bx	lr

0800acd0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b085      	sub	sp, #20
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800acea:	f023 0303 	bic.w	r3, r3, #3
 800acee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acf6:	685b      	ldr	r3, [r3, #4]
 800acf8:	68fa      	ldr	r2, [r7, #12]
 800acfa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800acfe:	f023 0302 	bic.w	r3, r3, #2
 800ad02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3714      	adds	r7, #20
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad10:	4770      	bx	lr

0800ad12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ad12:	b480      	push	{r7}
 800ad14:	b085      	sub	sp, #20
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68fa      	ldr	r2, [r7, #12]
 800ad28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ad2c:	f023 0303 	bic.w	r3, r3, #3
 800ad30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad38:	685b      	ldr	r3, [r3, #4]
 800ad3a:	68fa      	ldr	r2, [r7, #12]
 800ad3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ad40:	f043 0302 	orr.w	r3, r3, #2
 800ad44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ad46:	2300      	movs	r3, #0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3714      	adds	r7, #20
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b085      	sub	sp, #20
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	695b      	ldr	r3, [r3, #20]
 800ad60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	699b      	ldr	r3, [r3, #24]
 800ad66:	68fa      	ldr	r2, [r7, #12]
 800ad68:	4013      	ands	r3, r2
 800ad6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800ad6c:	68fb      	ldr	r3, [r7, #12]
}
 800ad6e:	4618      	mov	r0, r3
 800ad70:	3714      	adds	r7, #20
 800ad72:	46bd      	mov	sp, r7
 800ad74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad78:	4770      	bx	lr

0800ad7a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ad7a:	b480      	push	{r7}
 800ad7c:	b085      	sub	sp, #20
 800ad7e:	af00      	add	r7, sp, #0
 800ad80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad8c:	699b      	ldr	r3, [r3, #24]
 800ad8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad96:	69db      	ldr	r3, [r3, #28]
 800ad98:	68ba      	ldr	r2, [r7, #8]
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	0c1b      	lsrs	r3, r3, #16
}
 800ada2:	4618      	mov	r0, r3
 800ada4:	3714      	adds	r7, #20
 800ada6:	46bd      	mov	sp, r7
 800ada8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adac:	4770      	bx	lr

0800adae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800adae:	b480      	push	{r7}
 800adb0:	b085      	sub	sp, #20
 800adb2:	af00      	add	r7, sp, #0
 800adb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adc0:	699b      	ldr	r3, [r3, #24]
 800adc2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800adca:	69db      	ldr	r3, [r3, #28]
 800adcc:	68ba      	ldr	r2, [r7, #8]
 800adce:	4013      	ands	r3, r2
 800add0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800add2:	68bb      	ldr	r3, [r7, #8]
 800add4:	b29b      	uxth	r3, r3
}
 800add6:	4618      	mov	r0, r3
 800add8:	3714      	adds	r7, #20
 800adda:	46bd      	mov	sp, r7
 800addc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade0:	4770      	bx	lr

0800ade2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ade2:	b480      	push	{r7}
 800ade4:	b085      	sub	sp, #20
 800ade6:	af00      	add	r7, sp, #0
 800ade8:	6078      	str	r0, [r7, #4]
 800adea:	460b      	mov	r3, r1
 800adec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800adf2:	78fb      	ldrb	r3, [r7, #3]
 800adf4:	015a      	lsls	r2, r3, #5
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	4413      	add	r3, r2
 800adfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae08:	695b      	ldr	r3, [r3, #20]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae10:	68bb      	ldr	r3, [r7, #8]
}
 800ae12:	4618      	mov	r0, r3
 800ae14:	3714      	adds	r7, #20
 800ae16:	46bd      	mov	sp, r7
 800ae18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1c:	4770      	bx	lr

0800ae1e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ae1e:	b480      	push	{r7}
 800ae20:	b087      	sub	sp, #28
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	6078      	str	r0, [r7, #4]
 800ae26:	460b      	mov	r3, r1
 800ae28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae34:	691b      	ldr	r3, [r3, #16]
 800ae36:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae40:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800ae42:	78fb      	ldrb	r3, [r7, #3]
 800ae44:	f003 030f 	and.w	r3, r3, #15
 800ae48:	68fa      	ldr	r2, [r7, #12]
 800ae4a:	fa22 f303 	lsr.w	r3, r2, r3
 800ae4e:	01db      	lsls	r3, r3, #7
 800ae50:	b2db      	uxtb	r3, r3
 800ae52:	693a      	ldr	r2, [r7, #16]
 800ae54:	4313      	orrs	r3, r2
 800ae56:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800ae58:	78fb      	ldrb	r3, [r7, #3]
 800ae5a:	015a      	lsls	r2, r3, #5
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	4413      	add	r3, r2
 800ae60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	693a      	ldr	r2, [r7, #16]
 800ae68:	4013      	ands	r3, r2
 800ae6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ae6c:	68bb      	ldr	r3, [r7, #8]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	371c      	adds	r7, #28
 800ae72:	46bd      	mov	sp, r7
 800ae74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae78:	4770      	bx	lr

0800ae7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ae7a:	b480      	push	{r7}
 800ae7c:	b083      	sub	sp, #12
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	695b      	ldr	r3, [r3, #20]
 800ae86:	f003 0301 	and.w	r3, r3, #1
}
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	370c      	adds	r7, #12
 800ae8e:	46bd      	mov	sp, r7
 800ae90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae94:	4770      	bx	lr
	...

0800ae98 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeaa:	681a      	ldr	r2, [r3, #0]
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	4b09      	ldr	r3, [pc, #36]	; (800aedc <USB_ActivateSetup+0x44>)
 800aeb6:	4013      	ands	r3, r2
 800aeb8:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aec0:	685b      	ldr	r3, [r3, #4]
 800aec2:	68fa      	ldr	r2, [r7, #12]
 800aec4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800aecc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800aece:	2300      	movs	r3, #0
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3714      	adds	r7, #20
 800aed4:	46bd      	mov	sp, r7
 800aed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeda:	4770      	bx	lr
 800aedc:	fffff800 	.word	0xfffff800

0800aee0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800aee0:	b480      	push	{r7}
 800aee2:	b087      	sub	sp, #28
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	460b      	mov	r3, r1
 800aeea:	607a      	str	r2, [r7, #4]
 800aeec:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	333c      	adds	r3, #60	; 0x3c
 800aef6:	3304      	adds	r3, #4
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	4a26      	ldr	r2, [pc, #152]	; (800af98 <USB_EP0_OutStart+0xb8>)
 800af00:	4293      	cmp	r3, r2
 800af02:	d90a      	bls.n	800af1a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800af04:	697b      	ldr	r3, [r7, #20]
 800af06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af14:	d101      	bne.n	800af1a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800af16:	2300      	movs	r3, #0
 800af18:	e037      	b.n	800af8a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800af1a:	697b      	ldr	r3, [r7, #20]
 800af1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af20:	461a      	mov	r2, r3
 800af22:	2300      	movs	r3, #0
 800af24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800af26:	697b      	ldr	r3, [r7, #20]
 800af28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af2c:	691b      	ldr	r3, [r3, #16]
 800af2e:	697a      	ldr	r2, [r7, #20]
 800af30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800af3a:	697b      	ldr	r3, [r7, #20]
 800af3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af40:	691b      	ldr	r3, [r3, #16]
 800af42:	697a      	ldr	r2, [r7, #20]
 800af44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af48:	f043 0318 	orr.w	r3, r3, #24
 800af4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af54:	691b      	ldr	r3, [r3, #16]
 800af56:	697a      	ldr	r2, [r7, #20]
 800af58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af5c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800af60:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800af62:	7afb      	ldrb	r3, [r7, #11]
 800af64:	2b01      	cmp	r3, #1
 800af66:	d10f      	bne.n	800af88 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800af68:	697b      	ldr	r3, [r7, #20]
 800af6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af6e:	461a      	mov	r2, r3
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	697a      	ldr	r2, [r7, #20]
 800af7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af82:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800af86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800af88:	2300      	movs	r3, #0
}
 800af8a:	4618      	mov	r0, r3
 800af8c:	371c      	adds	r7, #28
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	4f54300a 	.word	0x4f54300a

0800af9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800af9c:	b480      	push	{r7}
 800af9e:	b085      	sub	sp, #20
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800afa4:	2300      	movs	r3, #0
 800afa6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	3301      	adds	r3, #1
 800afac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	4a13      	ldr	r2, [pc, #76]	; (800b000 <USB_CoreReset+0x64>)
 800afb2:	4293      	cmp	r3, r2
 800afb4:	d901      	bls.n	800afba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800afb6:	2303      	movs	r3, #3
 800afb8:	e01b      	b.n	800aff2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	691b      	ldr	r3, [r3, #16]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	daf2      	bge.n	800afa8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800afc2:	2300      	movs	r3, #0
 800afc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	691b      	ldr	r3, [r3, #16]
 800afca:	f043 0201 	orr.w	r2, r3, #1
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	3301      	adds	r3, #1
 800afd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	4a09      	ldr	r2, [pc, #36]	; (800b000 <USB_CoreReset+0x64>)
 800afdc:	4293      	cmp	r3, r2
 800afde:	d901      	bls.n	800afe4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800afe0:	2303      	movs	r3, #3
 800afe2:	e006      	b.n	800aff2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	691b      	ldr	r3, [r3, #16]
 800afe8:	f003 0301 	and.w	r3, r3, #1
 800afec:	2b01      	cmp	r3, #1
 800afee:	d0f0      	beq.n	800afd2 <USB_CoreReset+0x36>

  return HAL_OK;
 800aff0:	2300      	movs	r3, #0
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3714      	adds	r7, #20
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr
 800affe:	bf00      	nop
 800b000:	00030d40 	.word	0x00030d40

0800b004 <HiL_Init_MSGQ>:
#include "HiL_MSGQ.h"

extern osMessageQueueId_t USB_MSGQ_Rx;
//extern osMessageQueueId_t USB_MSGQ_Tx;

uint8_t HiL_Init_MSGQ (void) {
 800b004:	b580      	push	{r7, lr}
 800b006:	af00      	add	r7, sp, #0

	USB_MSGQ_Rx = osMessageQueueNew(HiL_USB_MSQG_len, sizeof(MSGQ_obj), NULL);
 800b008:	2200      	movs	r2, #0
 800b00a:	2104      	movs	r1, #4
 800b00c:	200a      	movs	r0, #10
 800b00e:	f002 fe05 	bl	800dc1c <osMessageQueueNew>
 800b012:	4603      	mov	r3, r0
 800b014:	4a05      	ldr	r2, [pc, #20]	; (800b02c <HiL_Init_MSGQ+0x28>)
 800b016:	6013      	str	r3, [r2, #0]
  if (USB_MSGQ_Rx == NULL) {
 800b018:	4b04      	ldr	r3, [pc, #16]	; (800b02c <HiL_Init_MSGQ+0x28>)
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d101      	bne.n	800b024 <HiL_Init_MSGQ+0x20>
	  return -1;
 800b020:	23ff      	movs	r3, #255	; 0xff
 800b022:	e000      	b.n	800b026 <HiL_Init_MSGQ+0x22>
  }
//  USB_MSGQ_Tx = osMessageQueueNew(10, sizeof(MSGQ_obj), NULL);
//    if (USB_MSGQ_Tx == NULL) {
//  	  return -1;
//    }
  return 0;
 800b024:	2300      	movs	r3, #0
}
 800b026:	4618      	mov	r0, r3
 800b028:	bd80      	pop	{r7, pc}
 800b02a:	bf00      	nop
 800b02c:	20000788 	.word	0x20000788

0800b030 <HAL_TIM_IC_CaptureCallback>:
extern SPI_HandleTypeDef hspi1;
extern void MX_SPI1_Init();



void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {						// Timer callback code on interrupts from rising and falling edges
 800b030:	b580      	push	{r7, lr}
 800b032:	b082      	sub	sp, #8
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM1) {
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	4a10      	ldr	r2, [pc, #64]	; (800b080 <HAL_TIM_IC_CaptureCallback+0x50>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	d11a      	bne.n	800b078 <HAL_TIM_IC_CaptureCallback+0x48>
		// Used for duty cycle measurements

		//#define TIMER_CLOCK_FREQ 96000000 // APB2 Timer Clock. With 96 MHz, 16 bit res -> Reload/wraparound freq @ 732 Hz
																				// -> Tested lowest measureable pwm freq is 1.7 kHz

		Cnt_full = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1) + 1;
 800b042:	2100      	movs	r1, #0
 800b044:	6878      	ldr	r0, [r7, #4]
 800b046:	f7fc fd33 	bl	8007ab0 <HAL_TIM_ReadCapturedValue>
 800b04a:	4603      	mov	r3, r0
 800b04c:	3301      	adds	r3, #1
 800b04e:	4a0d      	ldr	r2, [pc, #52]	; (800b084 <HAL_TIM_IC_CaptureCallback+0x54>)
 800b050:	6013      	str	r3, [r2, #0]
		Cnt_high = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800b052:	2104      	movs	r1, #4
 800b054:	6878      	ldr	r0, [r7, #4]
 800b056:	f7fc fd2b 	bl	8007ab0 <HAL_TIM_ReadCapturedValue>
 800b05a:	4603      	mov	r3, r0
 800b05c:	4a0a      	ldr	r2, [pc, #40]	; (800b088 <HAL_TIM_IC_CaptureCallback+0x58>)
 800b05e:	6013      	str	r3, [r2, #0]

		Duty =  100 * Cnt_high / Cnt_full;
 800b060:	4b09      	ldr	r3, [pc, #36]	; (800b088 <HAL_TIM_IC_CaptureCallback+0x58>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	2264      	movs	r2, #100	; 0x64
 800b066:	fb03 f202 	mul.w	r2, r3, r2
 800b06a:	4b06      	ldr	r3, [pc, #24]	; (800b084 <HAL_TIM_IC_CaptureCallback+0x54>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b072:	b2da      	uxtb	r2, r3
 800b074:	4b05      	ldr	r3, [pc, #20]	; (800b08c <HAL_TIM_IC_CaptureCallback+0x5c>)
 800b076:	701a      	strb	r2, [r3, #0]
	}
}
 800b078:	bf00      	nop
 800b07a:	3708      	adds	r7, #8
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}
 800b080:	40010000 	.word	0x40010000
 800b084:	2000086c 	.word	0x2000086c
 800b088:	20000870 	.word	0x20000870
 800b08c:	20000874 	.word	0x20000874

0800b090 <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b090:	b580      	push	{r7, lr}
 800b092:	b082      	sub	sp, #8
 800b094:	af00      	add	r7, sp, #0
 800b096:	6078      	str	r0, [r7, #4]
 800b098:	460b      	mov	r3, r1
 800b09a:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == UART7)
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a08      	ldr	r2, [pc, #32]	; (800b0c4 <HAL_UARTEx_RxEventCallback+0x34>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d10a      	bne.n	800b0bc <HAL_UARTEx_RxEventCallback+0x2c>
	{
		memcpy(uart_main_buffer,uart_rx_buffer,Size);
 800b0a6:	887b      	ldrh	r3, [r7, #2]
 800b0a8:	461a      	mov	r2, r3
 800b0aa:	4907      	ldr	r1, [pc, #28]	; (800b0c8 <HAL_UARTEx_RxEventCallback+0x38>)
 800b0ac:	4807      	ldr	r0, [pc, #28]	; (800b0cc <HAL_UARTEx_RxEventCallback+0x3c>)
 800b0ae:	f006 fe05 	bl	8011cbc <memcpy>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart7, uart_rx_buffer, HIL_UART_BUFFER_SIZE);
 800b0b2:	2280      	movs	r2, #128	; 0x80
 800b0b4:	4904      	ldr	r1, [pc, #16]	; (800b0c8 <HAL_UARTEx_RxEventCallback+0x38>)
 800b0b6:	4806      	ldr	r0, [pc, #24]	; (800b0d0 <HAL_UARTEx_RxEventCallback+0x40>)
 800b0b8:	f7fe fb04 	bl	80096c4 <HAL_UARTEx_ReceiveToIdle_DMA>
	}

}
 800b0bc:	bf00      	nop
 800b0be:	3708      	adds	r7, #8
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	bd80      	pop	{r7, pc}
 800b0c4:	40007800 	.word	0x40007800
 800b0c8:	20000790 	.word	0x20000790
 800b0cc:	20000010 	.word	0x20000010
 800b0d0:	20000640 	.word	0x20000640

0800b0d4 <HAL_SPI_RxCpltCallback>:

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi){
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b082      	sub	sp, #8
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
	//printf("hello from spi complete\n\r");
	//printf("error %ld\n\r", hspi->ErrorCode);
	osSemaphoreRelease(LightOnSemHandle);
 800b0dc:	4b04      	ldr	r3, [pc, #16]	; (800b0f0 <HAL_SPI_RxCpltCallback+0x1c>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f002 fd43 	bl	800db6c <osSemaphoreRelease>

}
 800b0e6:	bf00      	nop
 800b0e8:	3708      	adds	r7, #8
 800b0ea:	46bd      	mov	sp, r7
 800b0ec:	bd80      	pop	{r7, pc}
 800b0ee:	bf00      	nop
 800b0f0:	20000734 	.word	0x20000734

0800b0f4 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b082      	sub	sp, #8
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	4603      	mov	r3, r0
 800b0fc:	80fb      	strh	r3, [r7, #6]
	//Used to handle reset of the MCU board that is being tested. Without it, bit shift occurs in SPI-communication.


	if(GPIO_Pin & HiL_595_Reset_Pin){
 800b0fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b102:	2b00      	cmp	r3, #0
 800b104:	da15      	bge.n	800b132 <HAL_GPIO_EXTI_Callback+0x3e>

//		HAL_StatusTypeDef status;

		HAL_SPI_DMAStop(&hspi1);
 800b106:	480d      	ldr	r0, [pc, #52]	; (800b13c <HAL_GPIO_EXTI_Callback+0x48>)
 800b108:	f7fb fa0e 	bl	8006528 <HAL_SPI_DMAStop>

		__HAL_RCC_SPI1_FORCE_RESET();
 800b10c:	4b0c      	ldr	r3, [pc, #48]	; (800b140 <HAL_GPIO_EXTI_Callback+0x4c>)
 800b10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b110:	4a0b      	ldr	r2, [pc, #44]	; (800b140 <HAL_GPIO_EXTI_Callback+0x4c>)
 800b112:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b116:	6253      	str	r3, [r2, #36]	; 0x24
		__HAL_RCC_SPI1_RELEASE_RESET();
 800b118:	4b09      	ldr	r3, [pc, #36]	; (800b140 <HAL_GPIO_EXTI_Callback+0x4c>)
 800b11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b11c:	4a08      	ldr	r2, [pc, #32]	; (800b140 <HAL_GPIO_EXTI_Callback+0x4c>)
 800b11e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b122:	6253      	str	r3, [r2, #36]	; 0x24

		MX_SPI1_Init();			//Requires that function declaration in main is NOT static!
 800b124:	f7f5 fc46 	bl	80009b4 <MX_SPI1_Init>
		/*status =*/ HAL_SPI_Receive_DMA(&hspi1, temp_light_state, sizeof(temp_light_state));
 800b128:	2203      	movs	r2, #3
 800b12a:	4906      	ldr	r1, [pc, #24]	; (800b144 <HAL_GPIO_EXTI_Callback+0x50>)
 800b12c:	4803      	ldr	r0, [pc, #12]	; (800b13c <HAL_GPIO_EXTI_Callback+0x48>)
 800b12e:	f7fa ff4b 	bl	8005fc8 <HAL_SPI_Receive_DMA>

	}
}
 800b132:	bf00      	nop
 800b134:	3708      	adds	r7, #8
 800b136:	46bd      	mov	sp, r7
 800b138:	bd80      	pop	{r7, pc}
 800b13a:	bf00      	nop
 800b13c:	200004cc 	.word	0x200004cc
 800b140:	40023800 	.word	0x40023800
 800b144:	2000078c 	.word	0x2000078c

0800b148 <HiL_controller_copy_array>:
static uint8_t recieved_data[HiL_MSGQ_Buf_arr_len];
	   uint8_t controller_reply[2];
	   uint8_t controller_reply2[2];

void HiL_controller_copy_array(uint8_t* to_be_copied)
{
 800b148:	b480      	push	{r7}
 800b14a:	b085      	sub	sp, #20
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
	for (uint8_t i = 0; i<HiL_MSGQ_Buf_arr_len; i++)
 800b150:	2300      	movs	r3, #0
 800b152:	73fb      	strb	r3, [r7, #15]
 800b154:	e009      	b.n	800b16a <HiL_controller_copy_array+0x22>
	{
		recieved_data[i] = to_be_copied[i];
 800b156:	7bfb      	ldrb	r3, [r7, #15]
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	441a      	add	r2, r3
 800b15c:	7bfb      	ldrb	r3, [r7, #15]
 800b15e:	7811      	ldrb	r1, [r2, #0]
 800b160:	4a07      	ldr	r2, [pc, #28]	; (800b180 <HiL_controller_copy_array+0x38>)
 800b162:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i<HiL_MSGQ_Buf_arr_len; i++)
 800b164:	7bfb      	ldrb	r3, [r7, #15]
 800b166:	3301      	adds	r3, #1
 800b168:	73fb      	strb	r3, [r7, #15]
 800b16a:	7bfb      	ldrb	r3, [r7, #15]
 800b16c:	2b03      	cmp	r3, #3
 800b16e:	d9f2      	bls.n	800b156 <HiL_controller_copy_array+0xe>
	}
}
 800b170:	bf00      	nop
 800b172:	bf00      	nop
 800b174:	3714      	adds	r7, #20
 800b176:	46bd      	mov	sp, r7
 800b178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17c:	4770      	bx	lr
 800b17e:	bf00      	nop
 800b180:	20000878 	.word	0x20000878

0800b184 <HiL_controller_read_message>:

//parses message, and tries to execute commands.
void HiL_controller_read_message(uint8_t* recieved_data)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
	//reset status array
	controller_reply[CONTROLLER_VALUE1] = 0;
 800b18c:	4b35      	ldr	r3, [pc, #212]	; (800b264 <HiL_controller_read_message+0xe0>)
 800b18e:	2200      	movs	r2, #0
 800b190:	701a      	strb	r2, [r3, #0]
	controller_reply[CONTROLLER_VALUE2] = 0;
 800b192:	4b34      	ldr	r3, [pc, #208]	; (800b264 <HiL_controller_read_message+0xe0>)
 800b194:	2200      	movs	r2, #0
 800b196:	705a      	strb	r2, [r3, #1]
	controller_reply2[CONTROLLER_VALUE1] = 0;
 800b198:	4b33      	ldr	r3, [pc, #204]	; (800b268 <HiL_controller_read_message+0xe4>)
 800b19a:	2200      	movs	r2, #0
 800b19c:	701a      	strb	r2, [r3, #0]
	controller_reply2[CONTROLLER_VALUE2] = 0;
 800b19e:	4b32      	ldr	r3, [pc, #200]	; (800b268 <HiL_controller_read_message+0xe4>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	705a      	strb	r2, [r3, #1]

	// gets newest instruction
	HiL_controller_copy_array(recieved_data);
 800b1a4:	6878      	ldr	r0, [r7, #4]
 800b1a6:	f7ff ffcf 	bl	800b148 <HiL_controller_copy_array>

	// identify the message content
	switch(recieved_data[CONTROLLER_REQUEST])
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	2b03      	cmp	r3, #3
 800b1b0:	d847      	bhi.n	800b242 <HiL_controller_read_message+0xbe>
 800b1b2:	a201      	add	r2, pc, #4	; (adr r2, 800b1b8 <HiL_controller_read_message+0x34>)
 800b1b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1b8:	0800b1c9 	.word	0x0800b1c9
 800b1bc:	0800b1cf 	.word	0x0800b1cf
 800b1c0:	0800b1fd 	.word	0x0800b1fd
 800b1c4:	0800b22b 	.word	0x0800b22b
	{

		case CONTROLLER_REQUEST_GET: 

			HiL_controller_send_message();
 800b1c8:	f000 f850 	bl	800b26c <HiL_controller_send_message>
			break;
 800b1cc:	e045      	b.n	800b25a <HiL_controller_read_message+0xd6>


		case CONTROLLER_REQUEST_ACTUATE:
			
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
													recieved_data[CONTROLLER_OBJECT],
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	3301      	adds	r3, #1
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
 800b1d2:	781a      	ldrb	r2, [r3, #0]
													recieved_data[CONTROLLER_ACTION1]);
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	3302      	adds	r3, #2
			controller_reply[CONTROLLER_VALUE1] =  HiL_mcu_commands_binary_action(
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	4619      	mov	r1, r3
 800b1dc:	4610      	mov	r0, r2
 800b1de:	f000 f911 	bl	800b404 <HiL_mcu_commands_binary_action>
 800b1e2:	4603      	mov	r3, r0
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	4b1f      	ldr	r3, [pc, #124]	; (800b264 <HiL_controller_read_message+0xe0>)
 800b1e8:	701a      	strb	r2, [r3, #0]
			
			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b1ea:	4b1e      	ldr	r3, [pc, #120]	; (800b264 <HiL_controller_read_message+0xe0>)
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	4a1d      	ldr	r2, [pc, #116]	; (800b264 <HiL_controller_read_message+0xe0>)
 800b1f0:	7852      	ldrb	r2, [r2, #1]
 800b1f2:	4611      	mov	r1, r2
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	f000 f8cb 	bl	800b390 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);			
			break;
 800b1fa:	e02e      	b.n	800b25a <HiL_controller_read_message+0xd6>

		case CONTROLLER_REQUEST_POTENTIOMETER:
	

			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
													recieved_data[CONTROLLER_ACTION1],
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	3302      	adds	r3, #2
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
 800b200:	781a      	ldrb	r2, [r3, #0]
													recieved_data[CONTROLLER_ACTION2]);
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	3303      	adds	r3, #3
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_potentiometer_emulator(
 800b206:	781b      	ldrb	r3, [r3, #0]
 800b208:	4619      	mov	r1, r3
 800b20a:	4610      	mov	r0, r2
 800b20c:	f000 f8d6 	bl	800b3bc <HiL_mcu_commands_potentiometer_emulator>
 800b210:	4603      	mov	r3, r0
 800b212:	461a      	mov	r2, r3
 800b214:	4b13      	ldr	r3, [pc, #76]	; (800b264 <HiL_controller_read_message+0xe0>)
 800b216:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b218:	4b12      	ldr	r3, [pc, #72]	; (800b264 <HiL_controller_read_message+0xe0>)
 800b21a:	781b      	ldrb	r3, [r3, #0]
 800b21c:	4a11      	ldr	r2, [pc, #68]	; (800b264 <HiL_controller_read_message+0xe0>)
 800b21e:	7852      	ldrb	r2, [r2, #1]
 800b220:	4611      	mov	r1, r2
 800b222:	4618      	mov	r0, r3
 800b224:	f000 f8b4 	bl	800b390 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);

			break;
 800b228:	e017      	b.n	800b25a <HiL_controller_read_message+0xd6>
			

		case CONTROLLER_REQUEST_SHT20:
			
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_NO_SUPPORT;
 800b22a:	4b0e      	ldr	r3, [pc, #56]	; (800b264 <HiL_controller_read_message+0xe0>)
 800b22c:	2202      	movs	r2, #2
 800b22e:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b230:	4b0c      	ldr	r3, [pc, #48]	; (800b264 <HiL_controller_read_message+0xe0>)
 800b232:	781b      	ldrb	r3, [r3, #0]
 800b234:	4a0b      	ldr	r2, [pc, #44]	; (800b264 <HiL_controller_read_message+0xe0>)
 800b236:	7852      	ldrb	r2, [r2, #1]
 800b238:	4611      	mov	r1, r2
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 f8a8 	bl	800b390 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			
			break;
 800b240:	e00b      	b.n	800b25a <HiL_controller_read_message+0xd6>


		default: 

			// Reply with error
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_UNSPECIFIED;
 800b242:	4b08      	ldr	r3, [pc, #32]	; (800b264 <HiL_controller_read_message+0xe0>)
 800b244:	2201      	movs	r2, #1
 800b246:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b248:	4b06      	ldr	r3, [pc, #24]	; (800b264 <HiL_controller_read_message+0xe0>)
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	4a05      	ldr	r2, [pc, #20]	; (800b264 <HiL_controller_read_message+0xe0>)
 800b24e:	7852      	ldrb	r2, [r2, #1]
 800b250:	4611      	mov	r1, r2
 800b252:	4618      	mov	r0, r3
 800b254:	f000 f89c 	bl	800b390 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			
	}	
}
 800b258:	bf00      	nop
 800b25a:	bf00      	nop
 800b25c:	3708      	adds	r7, #8
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}
 800b262:	bf00      	nop
 800b264:	2000087c 	.word	0x2000087c
 800b268:	20000880 	.word	0x20000880

0800b26c <HiL_controller_send_message>:

void HiL_controller_send_message()
{
 800b26c:	b580      	push	{r7, lr}
 800b26e:	b082      	sub	sp, #8
 800b270:	af00      	add	r7, sp, #0
	
	switch(recieved_data[CONTROLLER_GET_GROUP])
 800b272:	4b44      	ldr	r3, [pc, #272]	; (800b384 <HiL_controller_send_message+0x118>)
 800b274:	785b      	ldrb	r3, [r3, #1]
 800b276:	2b04      	cmp	r3, #4
 800b278:	d878      	bhi.n	800b36c <HiL_controller_send_message+0x100>
 800b27a:	a201      	add	r2, pc, #4	; (adr r2, 800b280 <HiL_controller_send_message+0x14>)
 800b27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b280:	0800b295 	.word	0x0800b295
 800b284:	0800b2b9 	.word	0x0800b2b9
 800b288:	0800b36d 	.word	0x0800b36d
 800b28c:	0800b2d7 	.word	0x0800b2d7
 800b290:	0800b313 	.word	0x0800b313
	{
		
		case CONTROLLER_GET_GROUP_BINARY:
			
			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_binary_status(recieved_data[CONTROLLER_GET_OBJECT]);
 800b294:	4b3b      	ldr	r3, [pc, #236]	; (800b384 <HiL_controller_send_message+0x118>)
 800b296:	789b      	ldrb	r3, [r3, #2]
 800b298:	4618      	mov	r0, r3
 800b29a:	f000 f95d 	bl	800b558 <HiL_mcu_commands_binary_status>
 800b29e:	4603      	mov	r3, r0
 800b2a0:	461a      	mov	r2, r3
 800b2a2:	4b39      	ldr	r3, [pc, #228]	; (800b388 <HiL_controller_send_message+0x11c>)
 800b2a4:	701a      	strb	r2, [r3, #0]
			
			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b2a6:	4b38      	ldr	r3, [pc, #224]	; (800b388 <HiL_controller_send_message+0x11c>)
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	4a37      	ldr	r2, [pc, #220]	; (800b388 <HiL_controller_send_message+0x11c>)
 800b2ac:	7852      	ldrb	r2, [r2, #1]
 800b2ae:	4611      	mov	r1, r2
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	f000 f86d 	bl	800b390 <HiL_gateway_transmit_message>
		                                 controller_reply[CONTROLLER_VALUE2]);
			break;
 800b2b6:	e061      	b.n	800b37c <HiL_controller_send_message+0x110>

		case CONTROLLER_GET_GROUP_PWM:


			controller_reply[CONTROLLER_VALUE1] = HiL_mcu_commands_PWM_measure();
 800b2b8:	f000 f9d8 	bl	800b66c <HiL_mcu_commands_PWM_measure>
 800b2bc:	4603      	mov	r3, r0
 800b2be:	461a      	mov	r2, r3
 800b2c0:	4b31      	ldr	r3, [pc, #196]	; (800b388 <HiL_controller_send_message+0x11c>)
 800b2c2:	701a      	strb	r2, [r3, #0]

			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b2c4:	4b30      	ldr	r3, [pc, #192]	; (800b388 <HiL_controller_send_message+0x11c>)
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	4a2f      	ldr	r2, [pc, #188]	; (800b388 <HiL_controller_send_message+0x11c>)
 800b2ca:	7852      	ldrb	r2, [r2, #1]
 800b2cc:	4611      	mov	r1, r2
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	f000 f85e 	bl	800b390 <HiL_gateway_transmit_message>
										 controller_reply[CONTROLLER_VALUE2]);

			break;
 800b2d4:	e052      	b.n	800b37c <HiL_controller_send_message+0x110>

		case CONTROLLER_GET_GROUP_DATA_STREAMS:

			if (recieved_data[CONTROLLER_GET_OBJECT] == DATA_STREAM_OBJECTS_UART)
 800b2d6:	4b2b      	ldr	r3, [pc, #172]	; (800b384 <HiL_controller_send_message+0x118>)
 800b2d8:	789b      	ldrb	r3, [r3, #2]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d119      	bne.n	800b312 <HiL_controller_send_message+0xa6>
			{

				uint16_t function_return = HiL_mcu_commands_UART_handler(recieved_data[CONTROLLER_GET_ACTION]);
 800b2de:	4b29      	ldr	r3, [pc, #164]	; (800b384 <HiL_controller_send_message+0x118>)
 800b2e0:	78db      	ldrb	r3, [r3, #3]
 800b2e2:	4618      	mov	r0, r3
 800b2e4:	f000 f9e0 	bl	800b6a8 <HiL_mcu_commands_UART_handler>
 800b2e8:	4603      	mov	r3, r0
 800b2ea:	807b      	strh	r3, [r7, #2]

				controller_reply[CONTROLLER_VALUE1] =  function_return       & 0xff;
 800b2ec:	887b      	ldrh	r3, [r7, #2]
 800b2ee:	b2da      	uxtb	r2, r3
 800b2f0:	4b25      	ldr	r3, [pc, #148]	; (800b388 <HiL_controller_send_message+0x11c>)
 800b2f2:	701a      	strb	r2, [r3, #0]
				controller_reply[CONTROLLER_VALUE2] = (function_return >> 8) & 0xff;
 800b2f4:	887b      	ldrh	r3, [r7, #2]
 800b2f6:	0a1b      	lsrs	r3, r3, #8
 800b2f8:	b29b      	uxth	r3, r3
 800b2fa:	b2da      	uxtb	r2, r3
 800b2fc:	4b22      	ldr	r3, [pc, #136]	; (800b388 <HiL_controller_send_message+0x11c>)
 800b2fe:	705a      	strb	r2, [r3, #1]

				HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b300:	4b21      	ldr	r3, [pc, #132]	; (800b388 <HiL_controller_send_message+0x11c>)
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	4a20      	ldr	r2, [pc, #128]	; (800b388 <HiL_controller_send_message+0x11c>)
 800b306:	7852      	ldrb	r2, [r2, #1]
 800b308:	4611      	mov	r1, r2
 800b30a:	4618      	mov	r0, r3
 800b30c:	f000 f840 	bl	800b390 <HiL_gateway_transmit_message>
										     controller_reply[CONTROLLER_VALUE2]);

				break;
 800b310:	e034      	b.n	800b37c <HiL_controller_send_message+0x110>

		case CONTROLLER_GET_GROUP_TRAFFIC_LIGHTS:
				// WORK IN PROGRESS
			{

			uint32_t light_state_variable  = light_state[0];
 800b312:	4b1e      	ldr	r3, [pc, #120]	; (800b38c <HiL_controller_send_message+0x120>)
 800b314:	781b      	ldrb	r3, [r3, #0]
 800b316:	607b      	str	r3, [r7, #4]
					 light_state_variable |= light_state[1] << 6;
 800b318:	4b1c      	ldr	r3, [pc, #112]	; (800b38c <HiL_controller_send_message+0x120>)
 800b31a:	785b      	ldrb	r3, [r3, #1]
 800b31c:	019b      	lsls	r3, r3, #6
 800b31e:	461a      	mov	r2, r3
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	4313      	orrs	r3, r2
 800b324:	607b      	str	r3, [r7, #4]
					 light_state_variable |= light_state[2] << 12;
 800b326:	4b19      	ldr	r3, [pc, #100]	; (800b38c <HiL_controller_send_message+0x120>)
 800b328:	789b      	ldrb	r3, [r3, #2]
 800b32a:	031b      	lsls	r3, r3, #12
 800b32c:	461a      	mov	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	4313      	orrs	r3, r2
 800b332:	607b      	str	r3, [r7, #4]

			if (recieved_data[CONTROLLER_GET_OBJECT] == 1)
 800b334:	4b13      	ldr	r3, [pc, #76]	; (800b384 <HiL_controller_send_message+0x118>)
 800b336:	789b      	ldrb	r3, [r3, #2]
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d102      	bne.n	800b342 <HiL_controller_send_message+0xd6>
			{
				light_state_variable = light_state_variable >> 9;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	0a5b      	lsrs	r3, r3, #9
 800b340:	607b      	str	r3, [r7, #4]
			}
			else // do nothing
			{}

			controller_reply[CONTROLLER_VALUE1] = light_state_variable & 0xff;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	b2da      	uxtb	r2, r3
 800b346:	4b10      	ldr	r3, [pc, #64]	; (800b388 <HiL_controller_send_message+0x11c>)
 800b348:	701a      	strb	r2, [r3, #0]
			controller_reply[CONTROLLER_VALUE2] = (light_state_variable >> 8) & 1;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	0a1b      	lsrs	r3, r3, #8
 800b34e:	b2db      	uxtb	r3, r3
 800b350:	f003 0301 	and.w	r3, r3, #1
 800b354:	b2da      	uxtb	r2, r3
 800b356:	4b0c      	ldr	r3, [pc, #48]	; (800b388 <HiL_controller_send_message+0x11c>)
 800b358:	705a      	strb	r2, [r3, #1]


			HiL_gateway_transmit_message(controller_reply[CONTROLLER_VALUE1],
 800b35a:	4b0b      	ldr	r3, [pc, #44]	; (800b388 <HiL_controller_send_message+0x11c>)
 800b35c:	781b      	ldrb	r3, [r3, #0]
 800b35e:	4a0a      	ldr	r2, [pc, #40]	; (800b388 <HiL_controller_send_message+0x11c>)
 800b360:	7852      	ldrb	r2, [r2, #1]
 800b362:	4611      	mov	r1, r2
 800b364:	4618      	mov	r0, r3
 800b366:	f000 f813 	bl	800b390 <HiL_gateway_transmit_message>
										 controller_reply[CONTROLLER_VALUE2]);

				break;
 800b36a:	e007      	b.n	800b37c <HiL_controller_send_message+0x110>



		default:
			// Reply with error
			controller_reply[CONTROLLER_VALUE1] = CONTROLLER_ERROR_NO_SUPPORT;
 800b36c:	4b06      	ldr	r3, [pc, #24]	; (800b388 <HiL_controller_send_message+0x11c>)
 800b36e:	2202      	movs	r2, #2
 800b370:	701a      	strb	r2, [r3, #0]
			HiL_gateway_transmit_message(0,32);
 800b372:	2120      	movs	r1, #32
 800b374:	2000      	movs	r0, #0
 800b376:	f000 f80b 	bl	800b390 <HiL_gateway_transmit_message>
	}
}
 800b37a:	bf00      	nop
 800b37c:	bf00      	nop
 800b37e:	3708      	adds	r7, #8
 800b380:	46bd      	mov	sp, r7
 800b382:	bd80      	pop	{r7, pc}
 800b384:	20000878 	.word	0x20000878
 800b388:	2000087c 	.word	0x2000087c
 800b38c:	20000000 	.word	0x20000000

0800b390 <HiL_gateway_transmit_message>:


#include "HiL_gateway.h"

void HiL_gateway_transmit_message(uint8_t value1, uint8_t value2)
{
 800b390:	b580      	push	{r7, lr}
 800b392:	b084      	sub	sp, #16
 800b394:	af00      	add	r7, sp, #0
 800b396:	4603      	mov	r3, r0
 800b398:	460a      	mov	r2, r1
 800b39a:	71fb      	strb	r3, [r7, #7]
 800b39c:	4613      	mov	r3, r2
 800b39e:	71bb      	strb	r3, [r7, #6]
	uint8_t values[2];
	values[0] = value1;
 800b3a0:	79fb      	ldrb	r3, [r7, #7]
 800b3a2:	733b      	strb	r3, [r7, #12]
	values[1] = value2;
 800b3a4:	79bb      	ldrb	r3, [r7, #6]
 800b3a6:	737b      	strb	r3, [r7, #13]

	CDC_Transmit_FS( /*(uint8_t *)*/ values, sizeof(values));		// Transmit what's been recieved in our msg queue
 800b3a8:	f107 030c 	add.w	r3, r7, #12
 800b3ac:	2102      	movs	r1, #2
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f005 ff80 	bl	80112b4 <CDC_Transmit_FS>
}
 800b3b4:	bf00      	nop
 800b3b6:	3710      	adds	r7, #16
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	bd80      	pop	{r7, pc}

0800b3bc <HiL_mcu_commands_potentiometer_emulator>:
uint8_t uart_main_buffer_pointer = 0;



uint8_t HiL_mcu_commands_potentiometer_emulator(uint8_t value1, uint8_t value2)
{
 800b3bc:	b580      	push	{r7, lr}
 800b3be:	b084      	sub	sp, #16
 800b3c0:	af00      	add	r7, sp, #0
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	460a      	mov	r2, r1
 800b3c6:	71fb      	strb	r3, [r7, #7]
 800b3c8:	4613      	mov	r3, r2
 800b3ca:	71bb      	strb	r3, [r7, #6]

	uint16_t desired_output_voltage = value1 + (value2 << 8);
 800b3cc:	79fb      	ldrb	r3, [r7, #7]
 800b3ce:	b29a      	uxth	r2, r3
 800b3d0:	79bb      	ldrb	r3, [r7, #6]
 800b3d2:	b29b      	uxth	r3, r3
 800b3d4:	021b      	lsls	r3, r3, #8
 800b3d6:	b29b      	uxth	r3, r3
 800b3d8:	4413      	add	r3, r2
 800b3da:	81fb      	strh	r3, [r7, #14]

	if( (desired_output_voltage < 0) || (desired_output_voltage > 4095) ){
 800b3dc:	89fb      	ldrh	r3, [r7, #14]
 800b3de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b3e2:	d301      	bcc.n	800b3e8 <HiL_mcu_commands_potentiometer_emulator+0x2c>
		return 3; //error: out of bounds
 800b3e4:	2303      	movs	r3, #3
 800b3e6:	e006      	b.n	800b3f6 <HiL_mcu_commands_potentiometer_emulator+0x3a>
	}

	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, desired_output_voltage);
 800b3e8:	89fb      	ldrh	r3, [r7, #14]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	2100      	movs	r1, #0
 800b3ee:	4804      	ldr	r0, [pc, #16]	; (800b400 <HiL_mcu_commands_potentiometer_emulator+0x44>)
 800b3f0:	f7f6 fe32 	bl	8002058 <HAL_DAC_SetValue>
	return 0;
 800b3f4:	2300      	movs	r3, #0
}
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	3710      	adds	r7, #16
 800b3fa:	46bd      	mov	sp, r7
 800b3fc:	bd80      	pop	{r7, pc}
 800b3fe:	bf00      	nop
 800b400:	200003b4 	.word	0x200003b4

0800b404 <HiL_mcu_commands_binary_action>:


uint8_t HiL_mcu_commands_binary_action (uint8_t binary_object, uint8_t desired_state)
{
 800b404:	b580      	push	{r7, lr}
 800b406:	b084      	sub	sp, #16
 800b408:	af00      	add	r7, sp, #0
 800b40a:	4603      	mov	r3, r0
 800b40c:	460a      	mov	r2, r1
 800b40e:	71fb      	strb	r3, [r7, #7]
 800b410:	4613      	mov	r3, r2
 800b412:	71bb      	strb	r3, [r7, #6]

	GPIO_PinState pin_state;
	
	if (desired_state == ON)
 800b414:	79bb      	ldrb	r3, [r7, #6]
 800b416:	2b01      	cmp	r3, #1
 800b418:	d102      	bne.n	800b420 <HiL_mcu_commands_binary_action+0x1c>
	{
		pin_state = GPIO_PIN_SET;
 800b41a:	2301      	movs	r3, #1
 800b41c:	73fb      	strb	r3, [r7, #15]
 800b41e:	e007      	b.n	800b430 <HiL_mcu_commands_binary_action+0x2c>
	}
	else if (desired_state == OFF)
 800b420:	79bb      	ldrb	r3, [r7, #6]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d102      	bne.n	800b42c <HiL_mcu_commands_binary_action+0x28>
	{
		pin_state = GPIO_PIN_RESET;
 800b426:	2300      	movs	r3, #0
 800b428:	73fb      	strb	r3, [r7, #15]
 800b42a:	e001      	b.n	800b430 <HiL_mcu_commands_binary_action+0x2c>
	}
	else
	{
		return CONTROLLER_ERROR_BAD_REQUEST; // Invalid state indication
 800b42c:	2303      	movs	r3, #3
 800b42e:	e082      	b.n	800b536 <HiL_mcu_commands_binary_action+0x132>
	}

	switch (binary_object)
 800b430:	79fb      	ldrb	r3, [r7, #7]
 800b432:	2b0c      	cmp	r3, #12
 800b434:	d87c      	bhi.n	800b530 <HiL_mcu_commands_binary_action+0x12c>
 800b436:	a201      	add	r2, pc, #4	; (adr r2, 800b43c <HiL_mcu_commands_binary_action+0x38>)
 800b438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b43c:	0800b471 	.word	0x0800b471
 800b440:	0800b481 	.word	0x0800b481
 800b444:	0800b491 	.word	0x0800b491
 800b448:	0800b49f 	.word	0x0800b49f
 800b44c:	0800b4af 	.word	0x0800b4af
 800b450:	0800b4bd 	.word	0x0800b4bd
 800b454:	0800b4cb 	.word	0x0800b4cb
 800b458:	0800b4d9 	.word	0x0800b4d9
 800b45c:	0800b4e7 	.word	0x0800b4e7
 800b460:	0800b4f5 	.word	0x0800b4f5
 800b464:	0800b505 	.word	0x0800b505
 800b468:	0800b513 	.word	0x0800b513
 800b46c:	0800b523 	.word	0x0800b523
	{

		case HiL_SW5:
			HAL_GPIO_WritePin(HiL_SW5_GPIO_Port, HiL_SW5_Pin, pin_state);
 800b470:	7bfb      	ldrb	r3, [r7, #15]
 800b472:	461a      	mov	r2, r3
 800b474:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b478:	4831      	ldr	r0, [pc, #196]	; (800b540 <HiL_mcu_commands_binary_action+0x13c>)
 800b47a:	f7f7 ff69 	bl	8003350 <HAL_GPIO_WritePin>
			break;
 800b47e:	e059      	b.n	800b534 <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW6:
			HAL_GPIO_WritePin(HiL_SW6_GPIO_Port, HiL_SW6_Pin, pin_state);
 800b480:	7bfb      	ldrb	r3, [r7, #15]
 800b482:	461a      	mov	r2, r3
 800b484:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b488:	482d      	ldr	r0, [pc, #180]	; (800b540 <HiL_mcu_commands_binary_action+0x13c>)
 800b48a:	f7f7 ff61 	bl	8003350 <HAL_GPIO_WritePin>
			break;
 800b48e:	e051      	b.n	800b534 <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW7:
			HAL_GPIO_WritePin(HiL_SW7_GPIO_Port, HiL_SW7_Pin, pin_state);
 800b490:	7bfb      	ldrb	r3, [r7, #15]
 800b492:	461a      	mov	r2, r3
 800b494:	2110      	movs	r1, #16
 800b496:	482a      	ldr	r0, [pc, #168]	; (800b540 <HiL_mcu_commands_binary_action+0x13c>)
 800b498:	f7f7 ff5a 	bl	8003350 <HAL_GPIO_WritePin>
			break;
 800b49c:	e04a      	b.n	800b534 <HiL_mcu_commands_binary_action+0x130>

		case HiL_SW8:
			HAL_GPIO_WritePin(HiL_SW8_GPIO_Port, HiL_SW8_Pin, pin_state);
 800b49e:	7bfb      	ldrb	r3, [r7, #15]
 800b4a0:	461a      	mov	r2, r3
 800b4a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b4a6:	4826      	ldr	r0, [pc, #152]	; (800b540 <HiL_mcu_commands_binary_action+0x13c>)
 800b4a8:	f7f7 ff52 	bl	8003350 <HAL_GPIO_WritePin>
			break;
 800b4ac:	e042      	b.n	800b534 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_A:
			HAL_GPIO_WritePin(HiL_button3_A_GPIO_Port, HiL_button3_A_Pin, pin_state);
 800b4ae:	7bfb      	ldrb	r3, [r7, #15]
 800b4b0:	461a      	mov	r2, r3
 800b4b2:	2108      	movs	r1, #8
 800b4b4:	4823      	ldr	r0, [pc, #140]	; (800b544 <HiL_mcu_commands_binary_action+0x140>)
 800b4b6:	f7f7 ff4b 	bl	8003350 <HAL_GPIO_WritePin>
			break;
 800b4ba:	e03b      	b.n	800b534 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_B:
			HAL_GPIO_WritePin(HiL_button3_B_GPIO_Port, HiL_button3_B_Pin, pin_state);
 800b4bc:	7bfb      	ldrb	r3, [r7, #15]
 800b4be:	461a      	mov	r2, r3
 800b4c0:	2104      	movs	r1, #4
 800b4c2:	4820      	ldr	r0, [pc, #128]	; (800b544 <HiL_mcu_commands_binary_action+0x140>)
 800b4c4:	f7f7 ff44 	bl	8003350 <HAL_GPIO_WritePin>
			break;
 800b4c8:	e034      	b.n	800b534 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_C:
			HAL_GPIO_WritePin(HiL_button3_C_GPIO_Port, HiL_button3_C_Pin, pin_state);
 800b4ca:	7bfb      	ldrb	r3, [r7, #15]
 800b4cc:	461a      	mov	r2, r3
 800b4ce:	2110      	movs	r1, #16
 800b4d0:	481d      	ldr	r0, [pc, #116]	; (800b548 <HiL_mcu_commands_binary_action+0x144>)
 800b4d2:	f7f7 ff3d 	bl	8003350 <HAL_GPIO_WritePin>
			break;
 800b4d6:	e02d      	b.n	800b534 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_D:
			HAL_GPIO_WritePin(HiL_button3_D_GPIO_Port, HiL_button3_D_Pin, pin_state);
 800b4d8:	7bfb      	ldrb	r3, [r7, #15]
 800b4da:	461a      	mov	r2, r3
 800b4dc:	2120      	movs	r1, #32
 800b4de:	481a      	ldr	r0, [pc, #104]	; (800b548 <HiL_mcu_commands_binary_action+0x144>)
 800b4e0:	f7f7 ff36 	bl	8003350 <HAL_GPIO_WritePin>
			break;
 800b4e4:	e026      	b.n	800b534 <HiL_mcu_commands_binary_action+0x130>

		case HiL_button3_center:
			HAL_GPIO_WritePin(HiL_button3_center_GPIO_Port, HiL_button3_center_Pin, pin_state);
 800b4e6:	7bfb      	ldrb	r3, [r7, #15]
 800b4e8:	461a      	mov	r2, r3
 800b4ea:	2140      	movs	r1, #64	; 0x40
 800b4ec:	4816      	ldr	r0, [pc, #88]	; (800b548 <HiL_mcu_commands_binary_action+0x144>)
 800b4ee:	f7f7 ff2f 	bl	8003350 <HAL_GPIO_WritePin>
			break;
 800b4f2:	e01f      	b.n	800b534 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL1_Car:
			HAL_GPIO_WritePin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin, pin_state);
 800b4f4:	7bfb      	ldrb	r3, [r7, #15]
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b4fc:	4813      	ldr	r0, [pc, #76]	; (800b54c <HiL_mcu_commands_binary_action+0x148>)
 800b4fe:	f7f7 ff27 	bl	8003350 <HAL_GPIO_WritePin>
			break;
 800b502:	e017      	b.n	800b534 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL2_Car:
			HAL_GPIO_WritePin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin, pin_state);
 800b504:	7bfb      	ldrb	r3, [r7, #15]
 800b506:	461a      	mov	r2, r3
 800b508:	2180      	movs	r1, #128	; 0x80
 800b50a:	4811      	ldr	r0, [pc, #68]	; (800b550 <HiL_mcu_commands_binary_action+0x14c>)
 800b50c:	f7f7 ff20 	bl	8003350 <HAL_GPIO_WritePin>
			break;
 800b510:	e010      	b.n	800b534 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL3_Car:
			HAL_GPIO_WritePin(HiL_TL3_Car_GPIO_Port, HiL_TL3_Car_Pin, pin_state);
 800b512:	7bfb      	ldrb	r3, [r7, #15]
 800b514:	461a      	mov	r2, r3
 800b516:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b51a:	480e      	ldr	r0, [pc, #56]	; (800b554 <HiL_mcu_commands_binary_action+0x150>)
 800b51c:	f7f7 ff18 	bl	8003350 <HAL_GPIO_WritePin>
			break;
 800b520:	e008      	b.n	800b534 <HiL_mcu_commands_binary_action+0x130>

		case HiL_TL4_Car:
			HAL_GPIO_WritePin(HiL_TL4_Car_GPIO_Port, HiL_TL4_Car_Pin, pin_state);
 800b522:	7bfb      	ldrb	r3, [r7, #15]
 800b524:	461a      	mov	r2, r3
 800b526:	2104      	movs	r1, #4
 800b528:	4807      	ldr	r0, [pc, #28]	; (800b548 <HiL_mcu_commands_binary_action+0x144>)
 800b52a:	f7f7 ff11 	bl	8003350 <HAL_GPIO_WritePin>
			break;
 800b52e:	e001      	b.n	800b534 <HiL_mcu_commands_binary_action+0x130>

		default:
			return CONTROLLER_ERROR_NO_SUPPORT; // Switch not currently supported
 800b530:	2302      	movs	r3, #2
 800b532:	e000      	b.n	800b536 <HiL_mcu_commands_binary_action+0x132>

	}

	return 0; // Function returned successfully 
 800b534:	2300      	movs	r3, #0
	
}
 800b536:	4618      	mov	r0, r3
 800b538:	3710      	adds	r7, #16
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}
 800b53e:	bf00      	nop
 800b540:	40020400 	.word	0x40020400
 800b544:	40021800 	.word	0x40021800
 800b548:	40020c00 	.word	0x40020c00
 800b54c:	40020800 	.word	0x40020800
 800b550:	40021400 	.word	0x40021400
 800b554:	40020000 	.word	0x40020000

0800b558 <HiL_mcu_commands_binary_status>:

uint8_t HiL_mcu_commands_binary_status (uint8_t binary_object)
{
 800b558:	b580      	push	{r7, lr}
 800b55a:	b082      	sub	sp, #8
 800b55c:	af00      	add	r7, sp, #0
 800b55e:	4603      	mov	r3, r0
 800b560:	71fb      	strb	r3, [r7, #7]
	switch (binary_object)
 800b562:	79fb      	ldrb	r3, [r7, #7]
 800b564:	2b0c      	cmp	r3, #12
 800b566:	d870      	bhi.n	800b64a <HiL_mcu_commands_binary_status+0xf2>
 800b568:	a201      	add	r2, pc, #4	; (adr r2, 800b570 <HiL_mcu_commands_binary_status+0x18>)
 800b56a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b56e:	bf00      	nop
 800b570:	0800b5a5 	.word	0x0800b5a5
 800b574:	0800b5b3 	.word	0x0800b5b3
 800b578:	0800b5c1 	.word	0x0800b5c1
 800b57c:	0800b5cd 	.word	0x0800b5cd
 800b580:	0800b5db 	.word	0x0800b5db
 800b584:	0800b5e7 	.word	0x0800b5e7
 800b588:	0800b5f3 	.word	0x0800b5f3
 800b58c:	0800b5ff 	.word	0x0800b5ff
 800b590:	0800b60b 	.word	0x0800b60b
 800b594:	0800b617 	.word	0x0800b617
 800b598:	0800b625 	.word	0x0800b625
 800b59c:	0800b631 	.word	0x0800b631
 800b5a0:	0800b63f 	.word	0x0800b63f
	{

		case HiL_SW5:
			return HAL_GPIO_ReadPin(HiL_SW5_GPIO_Port, HiL_SW5_Pin);
 800b5a4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800b5a8:	482a      	ldr	r0, [pc, #168]	; (800b654 <HiL_mcu_commands_binary_status+0xfc>)
 800b5aa:	f7f7 feb9 	bl	8003320 <HAL_GPIO_ReadPin>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	e04c      	b.n	800b64c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW6:
			return HAL_GPIO_ReadPin(HiL_SW6_GPIO_Port, HiL_SW6_Pin);
 800b5b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b5b6:	4827      	ldr	r0, [pc, #156]	; (800b654 <HiL_mcu_commands_binary_status+0xfc>)
 800b5b8:	f7f7 feb2 	bl	8003320 <HAL_GPIO_ReadPin>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	e045      	b.n	800b64c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW7:
			return HAL_GPIO_ReadPin(HiL_SW7_GPIO_Port, HiL_SW7_Pin);
 800b5c0:	2110      	movs	r1, #16
 800b5c2:	4824      	ldr	r0, [pc, #144]	; (800b654 <HiL_mcu_commands_binary_status+0xfc>)
 800b5c4:	f7f7 feac 	bl	8003320 <HAL_GPIO_ReadPin>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	e03f      	b.n	800b64c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_SW8:
			return HAL_GPIO_ReadPin(HiL_SW8_GPIO_Port, HiL_SW8_Pin);
 800b5cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800b5d0:	4820      	ldr	r0, [pc, #128]	; (800b654 <HiL_mcu_commands_binary_status+0xfc>)
 800b5d2:	f7f7 fea5 	bl	8003320 <HAL_GPIO_ReadPin>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	e038      	b.n	800b64c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_A:
			return HAL_GPIO_ReadPin(HiL_button3_A_GPIO_Port, HiL_button3_A_Pin);
 800b5da:	2108      	movs	r1, #8
 800b5dc:	481e      	ldr	r0, [pc, #120]	; (800b658 <HiL_mcu_commands_binary_status+0x100>)
 800b5de:	f7f7 fe9f 	bl	8003320 <HAL_GPIO_ReadPin>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	e032      	b.n	800b64c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_B:
			return HAL_GPIO_ReadPin(HiL_button3_B_GPIO_Port, HiL_button3_B_Pin);
 800b5e6:	2104      	movs	r1, #4
 800b5e8:	481b      	ldr	r0, [pc, #108]	; (800b658 <HiL_mcu_commands_binary_status+0x100>)
 800b5ea:	f7f7 fe99 	bl	8003320 <HAL_GPIO_ReadPin>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	e02c      	b.n	800b64c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_C:
			return HAL_GPIO_ReadPin(HiL_button3_C_GPIO_Port, HiL_button3_C_Pin);
 800b5f2:	2110      	movs	r1, #16
 800b5f4:	4819      	ldr	r0, [pc, #100]	; (800b65c <HiL_mcu_commands_binary_status+0x104>)
 800b5f6:	f7f7 fe93 	bl	8003320 <HAL_GPIO_ReadPin>
 800b5fa:	4603      	mov	r3, r0
 800b5fc:	e026      	b.n	800b64c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_D:
			return HAL_GPIO_ReadPin(HiL_button3_D_GPIO_Port, HiL_button3_D_Pin);
 800b5fe:	2120      	movs	r1, #32
 800b600:	4816      	ldr	r0, [pc, #88]	; (800b65c <HiL_mcu_commands_binary_status+0x104>)
 800b602:	f7f7 fe8d 	bl	8003320 <HAL_GPIO_ReadPin>
 800b606:	4603      	mov	r3, r0
 800b608:	e020      	b.n	800b64c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_button3_center:
			return HAL_GPIO_ReadPin(HiL_button3_center_GPIO_Port, HiL_button3_center_Pin);
 800b60a:	2140      	movs	r1, #64	; 0x40
 800b60c:	4813      	ldr	r0, [pc, #76]	; (800b65c <HiL_mcu_commands_binary_status+0x104>)
 800b60e:	f7f7 fe87 	bl	8003320 <HAL_GPIO_ReadPin>
 800b612:	4603      	mov	r3, r0
 800b614:	e01a      	b.n	800b64c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL1_Car:
			return HAL_GPIO_ReadPin(HiL_TL1_Car_GPIO_Port, HiL_TL1_Car_Pin);
 800b616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800b61a:	4811      	ldr	r0, [pc, #68]	; (800b660 <HiL_mcu_commands_binary_status+0x108>)
 800b61c:	f7f7 fe80 	bl	8003320 <HAL_GPIO_ReadPin>
 800b620:	4603      	mov	r3, r0
 800b622:	e013      	b.n	800b64c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL2_Car:
			return HAL_GPIO_ReadPin(HiL_TL2_Car_GPIO_Port, HiL_TL2_Car_Pin);
 800b624:	2180      	movs	r1, #128	; 0x80
 800b626:	480f      	ldr	r0, [pc, #60]	; (800b664 <HiL_mcu_commands_binary_status+0x10c>)
 800b628:	f7f7 fe7a 	bl	8003320 <HAL_GPIO_ReadPin>
 800b62c:	4603      	mov	r3, r0
 800b62e:	e00d      	b.n	800b64c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL3_Car:
			return HAL_GPIO_ReadPin(HiL_TL3_Car_GPIO_Port, HiL_TL3_Car_Pin);
 800b630:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800b634:	480c      	ldr	r0, [pc, #48]	; (800b668 <HiL_mcu_commands_binary_status+0x110>)
 800b636:	f7f7 fe73 	bl	8003320 <HAL_GPIO_ReadPin>
 800b63a:	4603      	mov	r3, r0
 800b63c:	e006      	b.n	800b64c <HiL_mcu_commands_binary_status+0xf4>

		case HiL_TL4_Car:
			return HAL_GPIO_ReadPin(HiL_TL4_Car_GPIO_Port, HiL_TL4_Car_Pin);
 800b63e:	2104      	movs	r1, #4
 800b640:	4806      	ldr	r0, [pc, #24]	; (800b65c <HiL_mcu_commands_binary_status+0x104>)
 800b642:	f7f7 fe6d 	bl	8003320 <HAL_GPIO_ReadPin>
 800b646:	4603      	mov	r3, r0
 800b648:	e000      	b.n	800b64c <HiL_mcu_commands_binary_status+0xf4>

		default:
			return CONTROLLER_ERROR_NO_SUPPORT; // Switch not currently supported
 800b64a:	2302      	movs	r3, #2

	}
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3708      	adds	r7, #8
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}
 800b654:	40020400 	.word	0x40020400
 800b658:	40021800 	.word	0x40021800
 800b65c:	40020c00 	.word	0x40020c00
 800b660:	40020800 	.word	0x40020800
 800b664:	40021400 	.word	0x40021400
 800b668:	40020000 	.word	0x40020000

0800b66c <HiL_mcu_commands_PWM_measure>:

uint8_t HiL_mcu_commands_PWM_measure ()
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	af00      	add	r7, sp, #0
													// Start timers and interrupts
		HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1); // Primary channel - rising edge - rinse and repeat
 800b670:	2100      	movs	r1, #0
 800b672:	480b      	ldr	r0, [pc, #44]	; (800b6a0 <HiL_mcu_commands_PWM_measure+0x34>)
 800b674:	f7fb fd46 	bl	8007104 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);    // Secondary channel - falling edge - stop second counter
 800b678:	2104      	movs	r1, #4
 800b67a:	4809      	ldr	r0, [pc, #36]	; (800b6a0 <HiL_mcu_commands_PWM_measure+0x34>)
 800b67c:	f7fb fbcc 	bl	8006e18 <HAL_TIM_IC_Start>

		osDelay(1);				//	Wait for  pwm-period to complete. Smallest tick time is currently 1 millisecond. PWM freq is 8 kHz, so this is slow
 800b680:	2001      	movs	r0, #1
 800b682:	f002 f943 	bl	800d90c <osDelay>

												   // Stop timers and interrupts
		HAL_TIM_IC_Stop_IT(&htim1, TIM_CHANNEL_1); // Primary channel - rising edge - rinse and repeat
 800b686:	2100      	movs	r1, #0
 800b688:	4805      	ldr	r0, [pc, #20]	; (800b6a0 <HiL_mcu_commands_PWM_measure+0x34>)
 800b68a:	f7fb fe8b 	bl	80073a4 <HAL_TIM_IC_Stop_IT>
		HAL_TIM_IC_Stop(&htim1, TIM_CHANNEL_2);    // Secondary channel - falling edge - stop second counter
 800b68e:	2104      	movs	r1, #4
 800b690:	4803      	ldr	r0, [pc, #12]	; (800b6a0 <HiL_mcu_commands_PWM_measure+0x34>)
 800b692:	f7fb fcc5 	bl	8007020 <HAL_TIM_IC_Stop>

		return Duty;
 800b696:	4b03      	ldr	r3, [pc, #12]	; (800b6a4 <HiL_mcu_commands_PWM_measure+0x38>)
 800b698:	781b      	ldrb	r3, [r3, #0]
}
 800b69a:	4618      	mov	r0, r3
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	200005f4 	.word	0x200005f4
 800b6a4:	20000874 	.word	0x20000874

0800b6a8 <HiL_mcu_commands_UART_handler>:


uint16_t HiL_mcu_commands_UART_handler (uint8_t controller_get_action)
{
 800b6a8:	b480      	push	{r7}
 800b6aa:	b085      	sub	sp, #20
 800b6ac:	af00      	add	r7, sp, #0
 800b6ae:	4603      	mov	r3, r0
 800b6b0:	71fb      	strb	r3, [r7, #7]
	if (controller_get_action == 0)
 800b6b2:	79fb      	ldrb	r3, [r7, #7]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d104      	bne.n	800b6c2 <HiL_mcu_commands_UART_handler+0x1a>
	{
		uart_main_buffer_pointer = 0;
 800b6b8:	4b10      	ldr	r3, [pc, #64]	; (800b6fc <HiL_mcu_commands_UART_handler+0x54>)
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	701a      	strb	r2, [r3, #0]
		return 0<<12; // transaction status: all good
 800b6be:	2300      	movs	r3, #0
 800b6c0:	e016      	b.n	800b6f0 <HiL_mcu_commands_UART_handler+0x48>
	}
	else
	{
		uint16_t return_value = uart_main_buffer[uart_main_buffer_pointer];
 800b6c2:	4b0e      	ldr	r3, [pc, #56]	; (800b6fc <HiL_mcu_commands_UART_handler+0x54>)
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	461a      	mov	r2, r3
 800b6c8:	4b0d      	ldr	r3, [pc, #52]	; (800b700 <HiL_mcu_commands_UART_handler+0x58>)
 800b6ca:	5c9b      	ldrb	r3, [r3, r2]
 800b6cc:	81fb      	strh	r3, [r7, #14]

		if (return_value != 0)
 800b6ce:	89fb      	ldrh	r3, [r7, #14]
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d00c      	beq.n	800b6ee <HiL_mcu_commands_UART_handler+0x46>
		{
			uart_main_buffer_pointer = (uart_main_buffer_pointer < HIL_UART_BUFFER_SIZE ? uart_main_buffer_pointer+1 : 0);
 800b6d4:	4b09      	ldr	r3, [pc, #36]	; (800b6fc <HiL_mcu_commands_UART_handler+0x54>)
 800b6d6:	781b      	ldrb	r3, [r3, #0]
 800b6d8:	b25b      	sxtb	r3, r3
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	db04      	blt.n	800b6e8 <HiL_mcu_commands_UART_handler+0x40>
 800b6de:	4b07      	ldr	r3, [pc, #28]	; (800b6fc <HiL_mcu_commands_UART_handler+0x54>)
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	3301      	adds	r3, #1
 800b6e4:	b2db      	uxtb	r3, r3
 800b6e6:	e000      	b.n	800b6ea <HiL_mcu_commands_UART_handler+0x42>
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	4a04      	ldr	r2, [pc, #16]	; (800b6fc <HiL_mcu_commands_UART_handler+0x54>)
 800b6ec:	7013      	strb	r3, [r2, #0]
		}

		return return_value;
 800b6ee:	89fb      	ldrh	r3, [r7, #14]
	}

}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3714      	adds	r7, #20
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6fa:	4770      	bx	lr
 800b6fc:	20000882 	.word	0x20000882
 800b700:	20000010 	.word	0x20000010

0800b704 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b704:	b580      	push	{r7, lr}
 800b706:	b084      	sub	sp, #16
 800b708:	af00      	add	r7, sp, #0
 800b70a:	6078      	str	r0, [r7, #4]
 800b70c:	460b      	mov	r3, r1
 800b70e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800b710:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800b714:	f006 fac2 	bl	8011c9c <malloc>
 800b718:	4603      	mov	r3, r0
 800b71a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d109      	bne.n	800b736 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	32b0      	adds	r2, #176	; 0xb0
 800b72c:	2100      	movs	r1, #0
 800b72e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800b732:	2302      	movs	r3, #2
 800b734:	e0d4      	b.n	800b8e0 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800b736:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800b73a:	2100      	movs	r1, #0
 800b73c:	68f8      	ldr	r0, [r7, #12]
 800b73e:	f006 facb 	bl	8011cd8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	32b0      	adds	r2, #176	; 0xb0
 800b74c:	68f9      	ldr	r1, [r7, #12]
 800b74e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	32b0      	adds	r2, #176	; 0xb0
 800b75c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	7c1b      	ldrb	r3, [r3, #16]
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d138      	bne.n	800b7e0 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b76e:	4b5e      	ldr	r3, [pc, #376]	; (800b8e8 <USBD_CDC_Init+0x1e4>)
 800b770:	7819      	ldrb	r1, [r3, #0]
 800b772:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b776:	2202      	movs	r2, #2
 800b778:	6878      	ldr	r0, [r7, #4]
 800b77a:	f006 f8c0 	bl	80118fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b77e:	4b5a      	ldr	r3, [pc, #360]	; (800b8e8 <USBD_CDC_Init+0x1e4>)
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	f003 020f 	and.w	r2, r3, #15
 800b786:	6879      	ldr	r1, [r7, #4]
 800b788:	4613      	mov	r3, r2
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	4413      	add	r3, r2
 800b78e:	009b      	lsls	r3, r3, #2
 800b790:	440b      	add	r3, r1
 800b792:	3324      	adds	r3, #36	; 0x24
 800b794:	2201      	movs	r2, #1
 800b796:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b798:	4b54      	ldr	r3, [pc, #336]	; (800b8ec <USBD_CDC_Init+0x1e8>)
 800b79a:	7819      	ldrb	r1, [r3, #0]
 800b79c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b7a0:	2202      	movs	r2, #2
 800b7a2:	6878      	ldr	r0, [r7, #4]
 800b7a4:	f006 f8ab 	bl	80118fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b7a8:	4b50      	ldr	r3, [pc, #320]	; (800b8ec <USBD_CDC_Init+0x1e8>)
 800b7aa:	781b      	ldrb	r3, [r3, #0]
 800b7ac:	f003 020f 	and.w	r2, r3, #15
 800b7b0:	6879      	ldr	r1, [r7, #4]
 800b7b2:	4613      	mov	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	4413      	add	r3, r2
 800b7b8:	009b      	lsls	r3, r3, #2
 800b7ba:	440b      	add	r3, r1
 800b7bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800b7c4:	4b4a      	ldr	r3, [pc, #296]	; (800b8f0 <USBD_CDC_Init+0x1ec>)
 800b7c6:	781b      	ldrb	r3, [r3, #0]
 800b7c8:	f003 020f 	and.w	r2, r3, #15
 800b7cc:	6879      	ldr	r1, [r7, #4]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	009b      	lsls	r3, r3, #2
 800b7d2:	4413      	add	r3, r2
 800b7d4:	009b      	lsls	r3, r3, #2
 800b7d6:	440b      	add	r3, r1
 800b7d8:	3326      	adds	r3, #38	; 0x26
 800b7da:	2210      	movs	r2, #16
 800b7dc:	801a      	strh	r2, [r3, #0]
 800b7de:	e035      	b.n	800b84c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800b7e0:	4b41      	ldr	r3, [pc, #260]	; (800b8e8 <USBD_CDC_Init+0x1e4>)
 800b7e2:	7819      	ldrb	r1, [r3, #0]
 800b7e4:	2340      	movs	r3, #64	; 0x40
 800b7e6:	2202      	movs	r2, #2
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f006 f888 	bl	80118fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800b7ee:	4b3e      	ldr	r3, [pc, #248]	; (800b8e8 <USBD_CDC_Init+0x1e4>)
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	f003 020f 	and.w	r2, r3, #15
 800b7f6:	6879      	ldr	r1, [r7, #4]
 800b7f8:	4613      	mov	r3, r2
 800b7fa:	009b      	lsls	r3, r3, #2
 800b7fc:	4413      	add	r3, r2
 800b7fe:	009b      	lsls	r3, r3, #2
 800b800:	440b      	add	r3, r1
 800b802:	3324      	adds	r3, #36	; 0x24
 800b804:	2201      	movs	r2, #1
 800b806:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800b808:	4b38      	ldr	r3, [pc, #224]	; (800b8ec <USBD_CDC_Init+0x1e8>)
 800b80a:	7819      	ldrb	r1, [r3, #0]
 800b80c:	2340      	movs	r3, #64	; 0x40
 800b80e:	2202      	movs	r2, #2
 800b810:	6878      	ldr	r0, [r7, #4]
 800b812:	f006 f874 	bl	80118fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800b816:	4b35      	ldr	r3, [pc, #212]	; (800b8ec <USBD_CDC_Init+0x1e8>)
 800b818:	781b      	ldrb	r3, [r3, #0]
 800b81a:	f003 020f 	and.w	r2, r3, #15
 800b81e:	6879      	ldr	r1, [r7, #4]
 800b820:	4613      	mov	r3, r2
 800b822:	009b      	lsls	r3, r3, #2
 800b824:	4413      	add	r3, r2
 800b826:	009b      	lsls	r3, r3, #2
 800b828:	440b      	add	r3, r1
 800b82a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b82e:	2201      	movs	r2, #1
 800b830:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800b832:	4b2f      	ldr	r3, [pc, #188]	; (800b8f0 <USBD_CDC_Init+0x1ec>)
 800b834:	781b      	ldrb	r3, [r3, #0]
 800b836:	f003 020f 	and.w	r2, r3, #15
 800b83a:	6879      	ldr	r1, [r7, #4]
 800b83c:	4613      	mov	r3, r2
 800b83e:	009b      	lsls	r3, r3, #2
 800b840:	4413      	add	r3, r2
 800b842:	009b      	lsls	r3, r3, #2
 800b844:	440b      	add	r3, r1
 800b846:	3326      	adds	r3, #38	; 0x26
 800b848:	2210      	movs	r2, #16
 800b84a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800b84c:	4b28      	ldr	r3, [pc, #160]	; (800b8f0 <USBD_CDC_Init+0x1ec>)
 800b84e:	7819      	ldrb	r1, [r3, #0]
 800b850:	2308      	movs	r3, #8
 800b852:	2203      	movs	r2, #3
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f006 f852 	bl	80118fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800b85a:	4b25      	ldr	r3, [pc, #148]	; (800b8f0 <USBD_CDC_Init+0x1ec>)
 800b85c:	781b      	ldrb	r3, [r3, #0]
 800b85e:	f003 020f 	and.w	r2, r3, #15
 800b862:	6879      	ldr	r1, [r7, #4]
 800b864:	4613      	mov	r3, r2
 800b866:	009b      	lsls	r3, r3, #2
 800b868:	4413      	add	r3, r2
 800b86a:	009b      	lsls	r3, r3, #2
 800b86c:	440b      	add	r3, r1
 800b86e:	3324      	adds	r3, #36	; 0x24
 800b870:	2201      	movs	r2, #1
 800b872:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800b874:	68fb      	ldr	r3, [r7, #12]
 800b876:	2200      	movs	r2, #0
 800b878:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	33b0      	adds	r3, #176	; 0xb0
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	4413      	add	r3, r2
 800b88a:	685b      	ldr	r3, [r3, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800b890:	68fb      	ldr	r3, [r7, #12]
 800b892:	2200      	movs	r2, #0
 800b894:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d101      	bne.n	800b8ae <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800b8aa:	2302      	movs	r3, #2
 800b8ac:	e018      	b.n	800b8e0 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	7c1b      	ldrb	r3, [r3, #16]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d10a      	bne.n	800b8cc <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b8b6:	4b0d      	ldr	r3, [pc, #52]	; (800b8ec <USBD_CDC_Init+0x1e8>)
 800b8b8:	7819      	ldrb	r1, [r3, #0]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b8c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	f006 f909 	bl	8011adc <USBD_LL_PrepareReceive>
 800b8ca:	e008      	b.n	800b8de <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b8cc:	4b07      	ldr	r3, [pc, #28]	; (800b8ec <USBD_CDC_Init+0x1e8>)
 800b8ce:	7819      	ldrb	r1, [r3, #0]
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b8d6:	2340      	movs	r3, #64	; 0x40
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f006 f8ff 	bl	8011adc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b8de:	2300      	movs	r3, #0
}
 800b8e0:	4618      	mov	r0, r3
 800b8e2:	3710      	adds	r7, #16
 800b8e4:	46bd      	mov	sp, r7
 800b8e6:	bd80      	pop	{r7, pc}
 800b8e8:	20000117 	.word	0x20000117
 800b8ec:	20000118 	.word	0x20000118
 800b8f0:	20000119 	.word	0x20000119

0800b8f4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	b082      	sub	sp, #8
 800b8f8:	af00      	add	r7, sp, #0
 800b8fa:	6078      	str	r0, [r7, #4]
 800b8fc:	460b      	mov	r3, r1
 800b8fe:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800b900:	4b3a      	ldr	r3, [pc, #232]	; (800b9ec <USBD_CDC_DeInit+0xf8>)
 800b902:	781b      	ldrb	r3, [r3, #0]
 800b904:	4619      	mov	r1, r3
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f006 f81f 	bl	801194a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800b90c:	4b37      	ldr	r3, [pc, #220]	; (800b9ec <USBD_CDC_DeInit+0xf8>)
 800b90e:	781b      	ldrb	r3, [r3, #0]
 800b910:	f003 020f 	and.w	r2, r3, #15
 800b914:	6879      	ldr	r1, [r7, #4]
 800b916:	4613      	mov	r3, r2
 800b918:	009b      	lsls	r3, r3, #2
 800b91a:	4413      	add	r3, r2
 800b91c:	009b      	lsls	r3, r3, #2
 800b91e:	440b      	add	r3, r1
 800b920:	3324      	adds	r3, #36	; 0x24
 800b922:	2200      	movs	r2, #0
 800b924:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800b926:	4b32      	ldr	r3, [pc, #200]	; (800b9f0 <USBD_CDC_DeInit+0xfc>)
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	4619      	mov	r1, r3
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f006 f80c 	bl	801194a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800b932:	4b2f      	ldr	r3, [pc, #188]	; (800b9f0 <USBD_CDC_DeInit+0xfc>)
 800b934:	781b      	ldrb	r3, [r3, #0]
 800b936:	f003 020f 	and.w	r2, r3, #15
 800b93a:	6879      	ldr	r1, [r7, #4]
 800b93c:	4613      	mov	r3, r2
 800b93e:	009b      	lsls	r3, r3, #2
 800b940:	4413      	add	r3, r2
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	440b      	add	r3, r1
 800b946:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b94a:	2200      	movs	r2, #0
 800b94c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800b94e:	4b29      	ldr	r3, [pc, #164]	; (800b9f4 <USBD_CDC_DeInit+0x100>)
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	4619      	mov	r1, r3
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f005 fff8 	bl	801194a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800b95a:	4b26      	ldr	r3, [pc, #152]	; (800b9f4 <USBD_CDC_DeInit+0x100>)
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	f003 020f 	and.w	r2, r3, #15
 800b962:	6879      	ldr	r1, [r7, #4]
 800b964:	4613      	mov	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	4413      	add	r3, r2
 800b96a:	009b      	lsls	r3, r3, #2
 800b96c:	440b      	add	r3, r1
 800b96e:	3324      	adds	r3, #36	; 0x24
 800b970:	2200      	movs	r2, #0
 800b972:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800b974:	4b1f      	ldr	r3, [pc, #124]	; (800b9f4 <USBD_CDC_DeInit+0x100>)
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	f003 020f 	and.w	r2, r3, #15
 800b97c:	6879      	ldr	r1, [r7, #4]
 800b97e:	4613      	mov	r3, r2
 800b980:	009b      	lsls	r3, r3, #2
 800b982:	4413      	add	r3, r2
 800b984:	009b      	lsls	r3, r3, #2
 800b986:	440b      	add	r3, r1
 800b988:	3326      	adds	r3, #38	; 0x26
 800b98a:	2200      	movs	r2, #0
 800b98c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	32b0      	adds	r2, #176	; 0xb0
 800b998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d01f      	beq.n	800b9e0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800b9a6:	687a      	ldr	r2, [r7, #4]
 800b9a8:	33b0      	adds	r3, #176	; 0xb0
 800b9aa:	009b      	lsls	r3, r3, #2
 800b9ac:	4413      	add	r3, r2
 800b9ae:	685b      	ldr	r3, [r3, #4]
 800b9b0:	685b      	ldr	r3, [r3, #4]
 800b9b2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	32b0      	adds	r2, #176	; 0xb0
 800b9be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f006 f972 	bl	8011cac <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	32b0      	adds	r2, #176	; 0xb0
 800b9d2:	2100      	movs	r1, #0
 800b9d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2200      	movs	r2, #0
 800b9dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800b9e0:	2300      	movs	r3, #0
}
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	3708      	adds	r7, #8
 800b9e6:	46bd      	mov	sp, r7
 800b9e8:	bd80      	pop	{r7, pc}
 800b9ea:	bf00      	nop
 800b9ec:	20000117 	.word	0x20000117
 800b9f0:	20000118 	.word	0x20000118
 800b9f4:	20000119 	.word	0x20000119

0800b9f8 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b086      	sub	sp, #24
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	32b0      	adds	r2, #176	; 0xb0
 800ba0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba10:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ba12:	2300      	movs	r3, #0
 800ba14:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ba16:	2300      	movs	r3, #0
 800ba18:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ba1e:	693b      	ldr	r3, [r7, #16]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d101      	bne.n	800ba28 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ba24:	2303      	movs	r3, #3
 800ba26:	e0bf      	b.n	800bba8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba28:	683b      	ldr	r3, [r7, #0]
 800ba2a:	781b      	ldrb	r3, [r3, #0]
 800ba2c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d050      	beq.n	800bad6 <USBD_CDC_Setup+0xde>
 800ba34:	2b20      	cmp	r3, #32
 800ba36:	f040 80af 	bne.w	800bb98 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ba3a:	683b      	ldr	r3, [r7, #0]
 800ba3c:	88db      	ldrh	r3, [r3, #6]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d03a      	beq.n	800bab8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ba42:	683b      	ldr	r3, [r7, #0]
 800ba44:	781b      	ldrb	r3, [r3, #0]
 800ba46:	b25b      	sxtb	r3, r3
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	da1b      	bge.n	800ba84 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800ba52:	687a      	ldr	r2, [r7, #4]
 800ba54:	33b0      	adds	r3, #176	; 0xb0
 800ba56:	009b      	lsls	r3, r3, #2
 800ba58:	4413      	add	r3, r2
 800ba5a:	685b      	ldr	r3, [r3, #4]
 800ba5c:	689b      	ldr	r3, [r3, #8]
 800ba5e:	683a      	ldr	r2, [r7, #0]
 800ba60:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ba62:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ba64:	683a      	ldr	r2, [r7, #0]
 800ba66:	88d2      	ldrh	r2, [r2, #6]
 800ba68:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ba6a:	683b      	ldr	r3, [r7, #0]
 800ba6c:	88db      	ldrh	r3, [r3, #6]
 800ba6e:	2b07      	cmp	r3, #7
 800ba70:	bf28      	it	cs
 800ba72:	2307      	movcs	r3, #7
 800ba74:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ba76:	693b      	ldr	r3, [r7, #16]
 800ba78:	89fa      	ldrh	r2, [r7, #14]
 800ba7a:	4619      	mov	r1, r3
 800ba7c:	6878      	ldr	r0, [r7, #4]
 800ba7e:	f001 fdad 	bl	800d5dc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ba82:	e090      	b.n	800bba6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	785a      	ldrb	r2, [r3, #1]
 800ba88:	693b      	ldr	r3, [r7, #16]
 800ba8a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	88db      	ldrh	r3, [r3, #6]
 800ba92:	2b3f      	cmp	r3, #63	; 0x3f
 800ba94:	d803      	bhi.n	800ba9e <USBD_CDC_Setup+0xa6>
 800ba96:	683b      	ldr	r3, [r7, #0]
 800ba98:	88db      	ldrh	r3, [r3, #6]
 800ba9a:	b2da      	uxtb	r2, r3
 800ba9c:	e000      	b.n	800baa0 <USBD_CDC_Setup+0xa8>
 800ba9e:	2240      	movs	r2, #64	; 0x40
 800baa0:	693b      	ldr	r3, [r7, #16]
 800baa2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800baa6:	6939      	ldr	r1, [r7, #16]
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800baae:	461a      	mov	r2, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f001 fdbf 	bl	800d634 <USBD_CtlPrepareRx>
      break;
 800bab6:	e076      	b.n	800bba6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800babe:	687a      	ldr	r2, [r7, #4]
 800bac0:	33b0      	adds	r3, #176	; 0xb0
 800bac2:	009b      	lsls	r3, r3, #2
 800bac4:	4413      	add	r3, r2
 800bac6:	685b      	ldr	r3, [r3, #4]
 800bac8:	689b      	ldr	r3, [r3, #8]
 800baca:	683a      	ldr	r2, [r7, #0]
 800bacc:	7850      	ldrb	r0, [r2, #1]
 800bace:	2200      	movs	r2, #0
 800bad0:	6839      	ldr	r1, [r7, #0]
 800bad2:	4798      	blx	r3
      break;
 800bad4:	e067      	b.n	800bba6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	785b      	ldrb	r3, [r3, #1]
 800bada:	2b0b      	cmp	r3, #11
 800badc:	d851      	bhi.n	800bb82 <USBD_CDC_Setup+0x18a>
 800bade:	a201      	add	r2, pc, #4	; (adr r2, 800bae4 <USBD_CDC_Setup+0xec>)
 800bae0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae4:	0800bb15 	.word	0x0800bb15
 800bae8:	0800bb91 	.word	0x0800bb91
 800baec:	0800bb83 	.word	0x0800bb83
 800baf0:	0800bb83 	.word	0x0800bb83
 800baf4:	0800bb83 	.word	0x0800bb83
 800baf8:	0800bb83 	.word	0x0800bb83
 800bafc:	0800bb83 	.word	0x0800bb83
 800bb00:	0800bb83 	.word	0x0800bb83
 800bb04:	0800bb83 	.word	0x0800bb83
 800bb08:	0800bb83 	.word	0x0800bb83
 800bb0c:	0800bb3f 	.word	0x0800bb3f
 800bb10:	0800bb69 	.word	0x0800bb69
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb1a:	b2db      	uxtb	r3, r3
 800bb1c:	2b03      	cmp	r3, #3
 800bb1e:	d107      	bne.n	800bb30 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800bb20:	f107 030a 	add.w	r3, r7, #10
 800bb24:	2202      	movs	r2, #2
 800bb26:	4619      	mov	r1, r3
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f001 fd57 	bl	800d5dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb2e:	e032      	b.n	800bb96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bb30:	6839      	ldr	r1, [r7, #0]
 800bb32:	6878      	ldr	r0, [r7, #4]
 800bb34:	f001 fce1 	bl	800d4fa <USBD_CtlError>
            ret = USBD_FAIL;
 800bb38:	2303      	movs	r3, #3
 800bb3a:	75fb      	strb	r3, [r7, #23]
          break;
 800bb3c:	e02b      	b.n	800bb96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb44:	b2db      	uxtb	r3, r3
 800bb46:	2b03      	cmp	r3, #3
 800bb48:	d107      	bne.n	800bb5a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800bb4a:	f107 030d 	add.w	r3, r7, #13
 800bb4e:	2201      	movs	r2, #1
 800bb50:	4619      	mov	r1, r3
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f001 fd42 	bl	800d5dc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800bb58:	e01d      	b.n	800bb96 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800bb5a:	6839      	ldr	r1, [r7, #0]
 800bb5c:	6878      	ldr	r0, [r7, #4]
 800bb5e:	f001 fccc 	bl	800d4fa <USBD_CtlError>
            ret = USBD_FAIL;
 800bb62:	2303      	movs	r3, #3
 800bb64:	75fb      	strb	r3, [r7, #23]
          break;
 800bb66:	e016      	b.n	800bb96 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb6e:	b2db      	uxtb	r3, r3
 800bb70:	2b03      	cmp	r3, #3
 800bb72:	d00f      	beq.n	800bb94 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800bb74:	6839      	ldr	r1, [r7, #0]
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f001 fcbf 	bl	800d4fa <USBD_CtlError>
            ret = USBD_FAIL;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800bb80:	e008      	b.n	800bb94 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800bb82:	6839      	ldr	r1, [r7, #0]
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	f001 fcb8 	bl	800d4fa <USBD_CtlError>
          ret = USBD_FAIL;
 800bb8a:	2303      	movs	r3, #3
 800bb8c:	75fb      	strb	r3, [r7, #23]
          break;
 800bb8e:	e002      	b.n	800bb96 <USBD_CDC_Setup+0x19e>
          break;
 800bb90:	bf00      	nop
 800bb92:	e008      	b.n	800bba6 <USBD_CDC_Setup+0x1ae>
          break;
 800bb94:	bf00      	nop
      }
      break;
 800bb96:	e006      	b.n	800bba6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800bb98:	6839      	ldr	r1, [r7, #0]
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f001 fcad 	bl	800d4fa <USBD_CtlError>
      ret = USBD_FAIL;
 800bba0:	2303      	movs	r3, #3
 800bba2:	75fb      	strb	r3, [r7, #23]
      break;
 800bba4:	bf00      	nop
  }

  return (uint8_t)ret;
 800bba6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bba8:	4618      	mov	r0, r3
 800bbaa:	3718      	adds	r7, #24
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
 800bbb8:	460b      	mov	r3, r1
 800bbba:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800bbc2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	32b0      	adds	r2, #176	; 0xb0
 800bbce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d101      	bne.n	800bbda <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800bbd6:	2303      	movs	r3, #3
 800bbd8:	e065      	b.n	800bca6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	32b0      	adds	r2, #176	; 0xb0
 800bbe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbe8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bbea:	78fb      	ldrb	r3, [r7, #3]
 800bbec:	f003 020f 	and.w	r2, r3, #15
 800bbf0:	6879      	ldr	r1, [r7, #4]
 800bbf2:	4613      	mov	r3, r2
 800bbf4:	009b      	lsls	r3, r3, #2
 800bbf6:	4413      	add	r3, r2
 800bbf8:	009b      	lsls	r3, r3, #2
 800bbfa:	440b      	add	r3, r1
 800bbfc:	3318      	adds	r3, #24
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d02f      	beq.n	800bc64 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800bc04:	78fb      	ldrb	r3, [r7, #3]
 800bc06:	f003 020f 	and.w	r2, r3, #15
 800bc0a:	6879      	ldr	r1, [r7, #4]
 800bc0c:	4613      	mov	r3, r2
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	4413      	add	r3, r2
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	440b      	add	r3, r1
 800bc16:	3318      	adds	r3, #24
 800bc18:	681a      	ldr	r2, [r3, #0]
 800bc1a:	78fb      	ldrb	r3, [r7, #3]
 800bc1c:	f003 010f 	and.w	r1, r3, #15
 800bc20:	68f8      	ldr	r0, [r7, #12]
 800bc22:	460b      	mov	r3, r1
 800bc24:	00db      	lsls	r3, r3, #3
 800bc26:	440b      	add	r3, r1
 800bc28:	009b      	lsls	r3, r3, #2
 800bc2a:	4403      	add	r3, r0
 800bc2c:	3348      	adds	r3, #72	; 0x48
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	fbb2 f1f3 	udiv	r1, r2, r3
 800bc34:	fb01 f303 	mul.w	r3, r1, r3
 800bc38:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d112      	bne.n	800bc64 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800bc3e:	78fb      	ldrb	r3, [r7, #3]
 800bc40:	f003 020f 	and.w	r2, r3, #15
 800bc44:	6879      	ldr	r1, [r7, #4]
 800bc46:	4613      	mov	r3, r2
 800bc48:	009b      	lsls	r3, r3, #2
 800bc4a:	4413      	add	r3, r2
 800bc4c:	009b      	lsls	r3, r3, #2
 800bc4e:	440b      	add	r3, r1
 800bc50:	3318      	adds	r3, #24
 800bc52:	2200      	movs	r2, #0
 800bc54:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800bc56:	78f9      	ldrb	r1, [r7, #3]
 800bc58:	2300      	movs	r3, #0
 800bc5a:	2200      	movs	r2, #0
 800bc5c:	6878      	ldr	r0, [r7, #4]
 800bc5e:	f005 ff1c 	bl	8011a9a <USBD_LL_Transmit>
 800bc62:	e01f      	b.n	800bca4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800bc64:	68bb      	ldr	r3, [r7, #8]
 800bc66:	2200      	movs	r2, #0
 800bc68:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	33b0      	adds	r3, #176	; 0xb0
 800bc76:	009b      	lsls	r3, r3, #2
 800bc78:	4413      	add	r3, r2
 800bc7a:	685b      	ldr	r3, [r3, #4]
 800bc7c:	691b      	ldr	r3, [r3, #16]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d010      	beq.n	800bca4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bc88:	687a      	ldr	r2, [r7, #4]
 800bc8a:	33b0      	adds	r3, #176	; 0xb0
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	691b      	ldr	r3, [r3, #16]
 800bc94:	68ba      	ldr	r2, [r7, #8]
 800bc96:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800bca0:	78fa      	ldrb	r2, [r7, #3]
 800bca2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800bca4:	2300      	movs	r3, #0
}
 800bca6:	4618      	mov	r0, r3
 800bca8:	3710      	adds	r7, #16
 800bcaa:	46bd      	mov	sp, r7
 800bcac:	bd80      	pop	{r7, pc}

0800bcae <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800bcae:	b580      	push	{r7, lr}
 800bcb0:	b084      	sub	sp, #16
 800bcb2:	af00      	add	r7, sp, #0
 800bcb4:	6078      	str	r0, [r7, #4]
 800bcb6:	460b      	mov	r3, r1
 800bcb8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	32b0      	adds	r2, #176	; 0xb0
 800bcc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcc8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	32b0      	adds	r2, #176	; 0xb0
 800bcd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d101      	bne.n	800bce0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800bcdc:	2303      	movs	r3, #3
 800bcde:	e01a      	b.n	800bd16 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800bce0:	78fb      	ldrb	r3, [r7, #3]
 800bce2:	4619      	mov	r1, r3
 800bce4:	6878      	ldr	r0, [r7, #4]
 800bce6:	f005 ff1a 	bl	8011b1e <USBD_LL_GetRxDataSize>
 800bcea:	4602      	mov	r2, r0
 800bcec:	68fb      	ldr	r3, [r7, #12]
 800bcee:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	33b0      	adds	r3, #176	; 0xb0
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	4413      	add	r3, r2
 800bd00:	685b      	ldr	r3, [r3, #4]
 800bd02:	68db      	ldr	r3, [r3, #12]
 800bd04:	68fa      	ldr	r2, [r7, #12]
 800bd06:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800bd0a:	68fa      	ldr	r2, [r7, #12]
 800bd0c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800bd10:	4611      	mov	r1, r2
 800bd12:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800bd14:	2300      	movs	r3, #0
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	3710      	adds	r7, #16
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}

0800bd1e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800bd1e:	b580      	push	{r7, lr}
 800bd20:	b084      	sub	sp, #16
 800bd22:	af00      	add	r7, sp, #0
 800bd24:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	32b0      	adds	r2, #176	; 0xb0
 800bd30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd34:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d101      	bne.n	800bd40 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800bd3c:	2303      	movs	r3, #3
 800bd3e:	e025      	b.n	800bd8c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd46:	687a      	ldr	r2, [r7, #4]
 800bd48:	33b0      	adds	r3, #176	; 0xb0
 800bd4a:	009b      	lsls	r3, r3, #2
 800bd4c:	4413      	add	r3, r2
 800bd4e:	685b      	ldr	r3, [r3, #4]
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d01a      	beq.n	800bd8a <USBD_CDC_EP0_RxReady+0x6c>
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800bd5a:	2bff      	cmp	r3, #255	; 0xff
 800bd5c:	d015      	beq.n	800bd8a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bd64:	687a      	ldr	r2, [r7, #4]
 800bd66:	33b0      	adds	r3, #176	; 0xb0
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	4413      	add	r3, r2
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	68fa      	ldr	r2, [r7, #12]
 800bd72:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800bd76:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800bd78:	68fa      	ldr	r2, [r7, #12]
 800bd7a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800bd7e:	b292      	uxth	r2, r2
 800bd80:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	22ff      	movs	r2, #255	; 0xff
 800bd86:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800bd8a:	2300      	movs	r3, #0
}
 800bd8c:	4618      	mov	r0, r3
 800bd8e:	3710      	adds	r7, #16
 800bd90:	46bd      	mov	sp, r7
 800bd92:	bd80      	pop	{r7, pc}

0800bd94 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b086      	sub	sp, #24
 800bd98:	af00      	add	r7, sp, #0
 800bd9a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800bd9c:	2182      	movs	r1, #130	; 0x82
 800bd9e:	4818      	ldr	r0, [pc, #96]	; (800be00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bda0:	f000 fd49 	bl	800c836 <USBD_GetEpDesc>
 800bda4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800bda6:	2101      	movs	r1, #1
 800bda8:	4815      	ldr	r0, [pc, #84]	; (800be00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bdaa:	f000 fd44 	bl	800c836 <USBD_GetEpDesc>
 800bdae:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800bdb0:	2181      	movs	r1, #129	; 0x81
 800bdb2:	4813      	ldr	r0, [pc, #76]	; (800be00 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800bdb4:	f000 fd3f 	bl	800c836 <USBD_GetEpDesc>
 800bdb8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d002      	beq.n	800bdc6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bdc0:	697b      	ldr	r3, [r7, #20]
 800bdc2:	2210      	movs	r2, #16
 800bdc4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bdc6:	693b      	ldr	r3, [r7, #16]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	d006      	beq.n	800bdda <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bdcc:	693b      	ldr	r3, [r7, #16]
 800bdce:	2200      	movs	r2, #0
 800bdd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bdd4:	711a      	strb	r2, [r3, #4]
 800bdd6:	2200      	movs	r2, #0
 800bdd8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	d006      	beq.n	800bdee <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bde0:	68fb      	ldr	r3, [r7, #12]
 800bde2:	2200      	movs	r2, #0
 800bde4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bde8:	711a      	strb	r2, [r3, #4]
 800bdea:	2200      	movs	r2, #0
 800bdec:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	2243      	movs	r2, #67	; 0x43
 800bdf2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bdf4:	4b02      	ldr	r3, [pc, #8]	; (800be00 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	3718      	adds	r7, #24
 800bdfa:	46bd      	mov	sp, r7
 800bdfc:	bd80      	pop	{r7, pc}
 800bdfe:	bf00      	nop
 800be00:	200000d4 	.word	0x200000d4

0800be04 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800be04:	b580      	push	{r7, lr}
 800be06:	b086      	sub	sp, #24
 800be08:	af00      	add	r7, sp, #0
 800be0a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800be0c:	2182      	movs	r1, #130	; 0x82
 800be0e:	4818      	ldr	r0, [pc, #96]	; (800be70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800be10:	f000 fd11 	bl	800c836 <USBD_GetEpDesc>
 800be14:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800be16:	2101      	movs	r1, #1
 800be18:	4815      	ldr	r0, [pc, #84]	; (800be70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800be1a:	f000 fd0c 	bl	800c836 <USBD_GetEpDesc>
 800be1e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800be20:	2181      	movs	r1, #129	; 0x81
 800be22:	4813      	ldr	r0, [pc, #76]	; (800be70 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800be24:	f000 fd07 	bl	800c836 <USBD_GetEpDesc>
 800be28:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d002      	beq.n	800be36 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800be30:	697b      	ldr	r3, [r7, #20]
 800be32:	2210      	movs	r2, #16
 800be34:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800be36:	693b      	ldr	r3, [r7, #16]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d006      	beq.n	800be4a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800be3c:	693b      	ldr	r3, [r7, #16]
 800be3e:	2200      	movs	r2, #0
 800be40:	711a      	strb	r2, [r3, #4]
 800be42:	2200      	movs	r2, #0
 800be44:	f042 0202 	orr.w	r2, r2, #2
 800be48:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d006      	beq.n	800be5e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800be50:	68fb      	ldr	r3, [r7, #12]
 800be52:	2200      	movs	r2, #0
 800be54:	711a      	strb	r2, [r3, #4]
 800be56:	2200      	movs	r2, #0
 800be58:	f042 0202 	orr.w	r2, r2, #2
 800be5c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	2243      	movs	r2, #67	; 0x43
 800be62:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800be64:	4b02      	ldr	r3, [pc, #8]	; (800be70 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800be66:	4618      	mov	r0, r3
 800be68:	3718      	adds	r7, #24
 800be6a:	46bd      	mov	sp, r7
 800be6c:	bd80      	pop	{r7, pc}
 800be6e:	bf00      	nop
 800be70:	200000d4 	.word	0x200000d4

0800be74 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b086      	sub	sp, #24
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800be7c:	2182      	movs	r1, #130	; 0x82
 800be7e:	4818      	ldr	r0, [pc, #96]	; (800bee0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be80:	f000 fcd9 	bl	800c836 <USBD_GetEpDesc>
 800be84:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800be86:	2101      	movs	r1, #1
 800be88:	4815      	ldr	r0, [pc, #84]	; (800bee0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be8a:	f000 fcd4 	bl	800c836 <USBD_GetEpDesc>
 800be8e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800be90:	2181      	movs	r1, #129	; 0x81
 800be92:	4813      	ldr	r0, [pc, #76]	; (800bee0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800be94:	f000 fccf 	bl	800c836 <USBD_GetEpDesc>
 800be98:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d002      	beq.n	800bea6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	2210      	movs	r2, #16
 800bea4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800bea6:	693b      	ldr	r3, [r7, #16]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d006      	beq.n	800beba <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800beac:	693b      	ldr	r3, [r7, #16]
 800beae:	2200      	movs	r2, #0
 800beb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800beb4:	711a      	strb	r2, [r3, #4]
 800beb6:	2200      	movs	r2, #0
 800beb8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d006      	beq.n	800bece <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	2200      	movs	r2, #0
 800bec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bec8:	711a      	strb	r2, [r3, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2243      	movs	r2, #67	; 0x43
 800bed2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800bed4:	4b02      	ldr	r3, [pc, #8]	; (800bee0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	3718      	adds	r7, #24
 800beda:	46bd      	mov	sp, r7
 800bedc:	bd80      	pop	{r7, pc}
 800bede:	bf00      	nop
 800bee0:	200000d4 	.word	0x200000d4

0800bee4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800bee4:	b480      	push	{r7}
 800bee6:	b083      	sub	sp, #12
 800bee8:	af00      	add	r7, sp, #0
 800beea:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	220a      	movs	r2, #10
 800bef0:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800bef2:	4b03      	ldr	r3, [pc, #12]	; (800bf00 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800bef4:	4618      	mov	r0, r3
 800bef6:	370c      	adds	r7, #12
 800bef8:	46bd      	mov	sp, r7
 800befa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800befe:	4770      	bx	lr
 800bf00:	20000090 	.word	0x20000090

0800bf04 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
 800bf0c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d101      	bne.n	800bf18 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800bf14:	2303      	movs	r3, #3
 800bf16:	e009      	b.n	800bf2c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800bf1e:	687a      	ldr	r2, [r7, #4]
 800bf20:	33b0      	adds	r3, #176	; 0xb0
 800bf22:	009b      	lsls	r3, r3, #2
 800bf24:	4413      	add	r3, r2
 800bf26:	683a      	ldr	r2, [r7, #0]
 800bf28:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800bf2a:	2300      	movs	r3, #0
}
 800bf2c:	4618      	mov	r0, r3
 800bf2e:	370c      	adds	r7, #12
 800bf30:	46bd      	mov	sp, r7
 800bf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf36:	4770      	bx	lr

0800bf38 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b087      	sub	sp, #28
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	60f8      	str	r0, [r7, #12]
 800bf40:	60b9      	str	r1, [r7, #8]
 800bf42:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf4a:	68fb      	ldr	r3, [r7, #12]
 800bf4c:	32b0      	adds	r2, #176	; 0xb0
 800bf4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf52:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d101      	bne.n	800bf5e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bf5a:	2303      	movs	r3, #3
 800bf5c:	e008      	b.n	800bf70 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	68ba      	ldr	r2, [r7, #8]
 800bf62:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	687a      	ldr	r2, [r7, #4]
 800bf6a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800bf6e:	2300      	movs	r3, #0
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	371c      	adds	r7, #28
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800bf7c:	b480      	push	{r7}
 800bf7e:	b085      	sub	sp, #20
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	32b0      	adds	r2, #176	; 0xb0
 800bf90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf94:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d101      	bne.n	800bfa0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800bf9c:	2303      	movs	r3, #3
 800bf9e:	e004      	b.n	800bfaa <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	683a      	ldr	r2, [r7, #0]
 800bfa4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800bfa8:	2300      	movs	r3, #0
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3714      	adds	r7, #20
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr
	...

0800bfb8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	32b0      	adds	r2, #176	; 0xb0
 800bfca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfce:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800bfd0:	2301      	movs	r3, #1
 800bfd2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d101      	bne.n	800bfde <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800bfda:	2303      	movs	r3, #3
 800bfdc:	e025      	b.n	800c02a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800bfde:	68bb      	ldr	r3, [r7, #8]
 800bfe0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800bfe4:	2b00      	cmp	r3, #0
 800bfe6:	d11f      	bne.n	800c028 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800bfe8:	68bb      	ldr	r3, [r7, #8]
 800bfea:	2201      	movs	r2, #1
 800bfec:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800bff0:	4b10      	ldr	r3, [pc, #64]	; (800c034 <USBD_CDC_TransmitPacket+0x7c>)
 800bff2:	781b      	ldrb	r3, [r3, #0]
 800bff4:	f003 020f 	and.w	r2, r3, #15
 800bff8:	68bb      	ldr	r3, [r7, #8]
 800bffa:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800bffe:	6878      	ldr	r0, [r7, #4]
 800c000:	4613      	mov	r3, r2
 800c002:	009b      	lsls	r3, r3, #2
 800c004:	4413      	add	r3, r2
 800c006:	009b      	lsls	r3, r3, #2
 800c008:	4403      	add	r3, r0
 800c00a:	3318      	adds	r3, #24
 800c00c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800c00e:	4b09      	ldr	r3, [pc, #36]	; (800c034 <USBD_CDC_TransmitPacket+0x7c>)
 800c010:	7819      	ldrb	r1, [r3, #0]
 800c012:	68bb      	ldr	r3, [r7, #8]
 800c014:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800c018:	68bb      	ldr	r3, [r7, #8]
 800c01a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f005 fd3b 	bl	8011a9a <USBD_LL_Transmit>

    ret = USBD_OK;
 800c024:	2300      	movs	r3, #0
 800c026:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800c028:	7bfb      	ldrb	r3, [r7, #15]
}
 800c02a:	4618      	mov	r0, r3
 800c02c:	3710      	adds	r7, #16
 800c02e:	46bd      	mov	sp, r7
 800c030:	bd80      	pop	{r7, pc}
 800c032:	bf00      	nop
 800c034:	20000117 	.word	0x20000117

0800c038 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800c038:	b580      	push	{r7, lr}
 800c03a:	b084      	sub	sp, #16
 800c03c:	af00      	add	r7, sp, #0
 800c03e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	32b0      	adds	r2, #176	; 0xb0
 800c04a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c04e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	32b0      	adds	r2, #176	; 0xb0
 800c05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d101      	bne.n	800c066 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800c062:	2303      	movs	r3, #3
 800c064:	e018      	b.n	800c098 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	7c1b      	ldrb	r3, [r3, #16]
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d10a      	bne.n	800c084 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c06e:	4b0c      	ldr	r3, [pc, #48]	; (800c0a0 <USBD_CDC_ReceivePacket+0x68>)
 800c070:	7819      	ldrb	r1, [r3, #0]
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c078:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f005 fd2d 	bl	8011adc <USBD_LL_PrepareReceive>
 800c082:	e008      	b.n	800c096 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c084:	4b06      	ldr	r3, [pc, #24]	; (800c0a0 <USBD_CDC_ReceivePacket+0x68>)
 800c086:	7819      	ldrb	r1, [r3, #0]
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c08e:	2340      	movs	r3, #64	; 0x40
 800c090:	6878      	ldr	r0, [r7, #4]
 800c092:	f005 fd23 	bl	8011adc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c096:	2300      	movs	r3, #0
}
 800c098:	4618      	mov	r0, r3
 800c09a:	3710      	adds	r7, #16
 800c09c:	46bd      	mov	sp, r7
 800c09e:	bd80      	pop	{r7, pc}
 800c0a0:	20000118 	.word	0x20000118

0800c0a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800c0a4:	b580      	push	{r7, lr}
 800c0a6:	b086      	sub	sp, #24
 800c0a8:	af00      	add	r7, sp, #0
 800c0aa:	60f8      	str	r0, [r7, #12]
 800c0ac:	60b9      	str	r1, [r7, #8]
 800c0ae:	4613      	mov	r3, r2
 800c0b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d101      	bne.n	800c0bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c0b8:	2303      	movs	r3, #3
 800c0ba:	e01f      	b.n	800c0fc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	2200      	movs	r2, #0
 800c0c8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d003      	beq.n	800c0e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800c0da:	68fb      	ldr	r3, [r7, #12]
 800c0dc:	68ba      	ldr	r2, [r7, #8]
 800c0de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	79fa      	ldrb	r2, [r7, #7]
 800c0ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800c0f0:	68f8      	ldr	r0, [r7, #12]
 800c0f2:	f005 fb9d 	bl	8011830 <USBD_LL_Init>
 800c0f6:	4603      	mov	r3, r0
 800c0f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 800c0fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0fc:	4618      	mov	r0, r3
 800c0fe:	3718      	adds	r7, #24
 800c100:	46bd      	mov	sp, r7
 800c102:	bd80      	pop	{r7, pc}

0800c104 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800c104:	b580      	push	{r7, lr}
 800c106:	b084      	sub	sp, #16
 800c108:	af00      	add	r7, sp, #0
 800c10a:	6078      	str	r0, [r7, #4]
 800c10c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c10e:	2300      	movs	r3, #0
 800c110:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800c112:	683b      	ldr	r3, [r7, #0]
 800c114:	2b00      	cmp	r3, #0
 800c116:	d101      	bne.n	800c11c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800c118:	2303      	movs	r3, #3
 800c11a:	e025      	b.n	800c168 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	683a      	ldr	r2, [r7, #0]
 800c120:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	32ae      	adds	r2, #174	; 0xae
 800c12e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c134:	2b00      	cmp	r3, #0
 800c136:	d00f      	beq.n	800c158 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	32ae      	adds	r2, #174	; 0xae
 800c142:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c148:	f107 020e 	add.w	r2, r7, #14
 800c14c:	4610      	mov	r0, r2
 800c14e:	4798      	blx	r3
 800c150:	4602      	mov	r2, r0
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800c15e:	1c5a      	adds	r2, r3, #1
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800c166:	2300      	movs	r3, #0
}
 800c168:	4618      	mov	r0, r3
 800c16a:	3710      	adds	r7, #16
 800c16c:	46bd      	mov	sp, r7
 800c16e:	bd80      	pop	{r7, pc}

0800c170 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800c170:	b580      	push	{r7, lr}
 800c172:	b082      	sub	sp, #8
 800c174:	af00      	add	r7, sp, #0
 800c176:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800c178:	6878      	ldr	r0, [r7, #4]
 800c17a:	f005 fba5 	bl	80118c8 <USBD_LL_Start>
 800c17e:	4603      	mov	r3, r0
}
 800c180:	4618      	mov	r0, r3
 800c182:	3708      	adds	r7, #8
 800c184:	46bd      	mov	sp, r7
 800c186:	bd80      	pop	{r7, pc}

0800c188 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800c188:	b480      	push	{r7}
 800c18a:	b083      	sub	sp, #12
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c190:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800c192:	4618      	mov	r0, r3
 800c194:	370c      	adds	r7, #12
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr

0800c19e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c19e:	b580      	push	{r7, lr}
 800c1a0:	b084      	sub	sp, #16
 800c1a2:	af00      	add	r7, sp, #0
 800c1a4:	6078      	str	r0, [r7, #4]
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d009      	beq.n	800c1cc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	78fa      	ldrb	r2, [r7, #3]
 800c1c2:	4611      	mov	r1, r2
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	4798      	blx	r3
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c1cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3710      	adds	r7, #16
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c1d6:	b580      	push	{r7, lr}
 800c1d8:	b084      	sub	sp, #16
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
 800c1de:	460b      	mov	r3, r1
 800c1e0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c1ec:	685b      	ldr	r3, [r3, #4]
 800c1ee:	78fa      	ldrb	r2, [r7, #3]
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	6878      	ldr	r0, [r7, #4]
 800c1f4:	4798      	blx	r3
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b00      	cmp	r3, #0
 800c1fa:	d001      	beq.n	800c200 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800c1fc:	2303      	movs	r3, #3
 800c1fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c200:	7bfb      	ldrb	r3, [r7, #15]
}
 800c202:	4618      	mov	r0, r3
 800c204:	3710      	adds	r7, #16
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}

0800c20a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800c20a:	b580      	push	{r7, lr}
 800c20c:	b084      	sub	sp, #16
 800c20e:	af00      	add	r7, sp, #0
 800c210:	6078      	str	r0, [r7, #4]
 800c212:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c21a:	6839      	ldr	r1, [r7, #0]
 800c21c:	4618      	mov	r0, r3
 800c21e:	f001 f932 	bl	800d486 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	2201      	movs	r2, #1
 800c226:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800c230:	461a      	mov	r2, r3
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c23e:	f003 031f 	and.w	r3, r3, #31
 800c242:	2b02      	cmp	r3, #2
 800c244:	d01a      	beq.n	800c27c <USBD_LL_SetupStage+0x72>
 800c246:	2b02      	cmp	r3, #2
 800c248:	d822      	bhi.n	800c290 <USBD_LL_SetupStage+0x86>
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	d002      	beq.n	800c254 <USBD_LL_SetupStage+0x4a>
 800c24e:	2b01      	cmp	r3, #1
 800c250:	d00a      	beq.n	800c268 <USBD_LL_SetupStage+0x5e>
 800c252:	e01d      	b.n	800c290 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c25a:	4619      	mov	r1, r3
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 fb5f 	bl	800c920 <USBD_StdDevReq>
 800c262:	4603      	mov	r3, r0
 800c264:	73fb      	strb	r3, [r7, #15]
      break;
 800c266:	e020      	b.n	800c2aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c26e:	4619      	mov	r1, r3
 800c270:	6878      	ldr	r0, [r7, #4]
 800c272:	f000 fbc7 	bl	800ca04 <USBD_StdItfReq>
 800c276:	4603      	mov	r3, r0
 800c278:	73fb      	strb	r3, [r7, #15]
      break;
 800c27a:	e016      	b.n	800c2aa <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800c282:	4619      	mov	r1, r3
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 fc29 	bl	800cadc <USBD_StdEPReq>
 800c28a:	4603      	mov	r3, r0
 800c28c:	73fb      	strb	r3, [r7, #15]
      break;
 800c28e:	e00c      	b.n	800c2aa <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c296:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800c29a:	b2db      	uxtb	r3, r3
 800c29c:	4619      	mov	r1, r3
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f005 fb72 	bl	8011988 <USBD_LL_StallEP>
 800c2a4:	4603      	mov	r3, r0
 800c2a6:	73fb      	strb	r3, [r7, #15]
      break;
 800c2a8:	bf00      	nop
  }

  return ret;
 800c2aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	3710      	adds	r7, #16
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b086      	sub	sp, #24
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	60f8      	str	r0, [r7, #12]
 800c2bc:	460b      	mov	r3, r1
 800c2be:	607a      	str	r2, [r7, #4]
 800c2c0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800c2c6:	7afb      	ldrb	r3, [r7, #11]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d16e      	bne.n	800c3aa <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800c2d2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c2da:	2b03      	cmp	r3, #3
 800c2dc:	f040 8098 	bne.w	800c410 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800c2e0:	693b      	ldr	r3, [r7, #16]
 800c2e2:	689a      	ldr	r2, [r3, #8]
 800c2e4:	693b      	ldr	r3, [r7, #16]
 800c2e6:	68db      	ldr	r3, [r3, #12]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d913      	bls.n	800c314 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800c2ec:	693b      	ldr	r3, [r7, #16]
 800c2ee:	689a      	ldr	r2, [r3, #8]
 800c2f0:	693b      	ldr	r3, [r7, #16]
 800c2f2:	68db      	ldr	r3, [r3, #12]
 800c2f4:	1ad2      	subs	r2, r2, r3
 800c2f6:	693b      	ldr	r3, [r7, #16]
 800c2f8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800c2fa:	693b      	ldr	r3, [r7, #16]
 800c2fc:	68da      	ldr	r2, [r3, #12]
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	689b      	ldr	r3, [r3, #8]
 800c302:	4293      	cmp	r3, r2
 800c304:	bf28      	it	cs
 800c306:	4613      	movcs	r3, r2
 800c308:	461a      	mov	r2, r3
 800c30a:	6879      	ldr	r1, [r7, #4]
 800c30c:	68f8      	ldr	r0, [r7, #12]
 800c30e:	f001 f9ae 	bl	800d66e <USBD_CtlContinueRx>
 800c312:	e07d      	b.n	800c410 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800c31a:	f003 031f 	and.w	r3, r3, #31
 800c31e:	2b02      	cmp	r3, #2
 800c320:	d014      	beq.n	800c34c <USBD_LL_DataOutStage+0x98>
 800c322:	2b02      	cmp	r3, #2
 800c324:	d81d      	bhi.n	800c362 <USBD_LL_DataOutStage+0xae>
 800c326:	2b00      	cmp	r3, #0
 800c328:	d002      	beq.n	800c330 <USBD_LL_DataOutStage+0x7c>
 800c32a:	2b01      	cmp	r3, #1
 800c32c:	d003      	beq.n	800c336 <USBD_LL_DataOutStage+0x82>
 800c32e:	e018      	b.n	800c362 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800c330:	2300      	movs	r3, #0
 800c332:	75bb      	strb	r3, [r7, #22]
            break;
 800c334:	e018      	b.n	800c368 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800c336:	68fb      	ldr	r3, [r7, #12]
 800c338:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c33c:	b2db      	uxtb	r3, r3
 800c33e:	4619      	mov	r1, r3
 800c340:	68f8      	ldr	r0, [r7, #12]
 800c342:	f000 fa5e 	bl	800c802 <USBD_CoreFindIF>
 800c346:	4603      	mov	r3, r0
 800c348:	75bb      	strb	r3, [r7, #22]
            break;
 800c34a:	e00d      	b.n	800c368 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800c352:	b2db      	uxtb	r3, r3
 800c354:	4619      	mov	r1, r3
 800c356:	68f8      	ldr	r0, [r7, #12]
 800c358:	f000 fa60 	bl	800c81c <USBD_CoreFindEP>
 800c35c:	4603      	mov	r3, r0
 800c35e:	75bb      	strb	r3, [r7, #22]
            break;
 800c360:	e002      	b.n	800c368 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800c362:	2300      	movs	r3, #0
 800c364:	75bb      	strb	r3, [r7, #22]
            break;
 800c366:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800c368:	7dbb      	ldrb	r3, [r7, #22]
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d119      	bne.n	800c3a2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c374:	b2db      	uxtb	r3, r3
 800c376:	2b03      	cmp	r3, #3
 800c378:	d113      	bne.n	800c3a2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800c37a:	7dba      	ldrb	r2, [r7, #22]
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	32ae      	adds	r2, #174	; 0xae
 800c380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c384:	691b      	ldr	r3, [r3, #16]
 800c386:	2b00      	cmp	r3, #0
 800c388:	d00b      	beq.n	800c3a2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800c38a:	7dba      	ldrb	r2, [r7, #22]
 800c38c:	68fb      	ldr	r3, [r7, #12]
 800c38e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800c392:	7dba      	ldrb	r2, [r7, #22]
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	32ae      	adds	r2, #174	; 0xae
 800c398:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c39c:	691b      	ldr	r3, [r3, #16]
 800c39e:	68f8      	ldr	r0, [r7, #12]
 800c3a0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	f001 f974 	bl	800d690 <USBD_CtlSendStatus>
 800c3a8:	e032      	b.n	800c410 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800c3aa:	7afb      	ldrb	r3, [r7, #11]
 800c3ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3b0:	b2db      	uxtb	r3, r3
 800c3b2:	4619      	mov	r1, r3
 800c3b4:	68f8      	ldr	r0, [r7, #12]
 800c3b6:	f000 fa31 	bl	800c81c <USBD_CoreFindEP>
 800c3ba:	4603      	mov	r3, r0
 800c3bc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c3be:	7dbb      	ldrb	r3, [r7, #22]
 800c3c0:	2bff      	cmp	r3, #255	; 0xff
 800c3c2:	d025      	beq.n	800c410 <USBD_LL_DataOutStage+0x15c>
 800c3c4:	7dbb      	ldrb	r3, [r7, #22]
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d122      	bne.n	800c410 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c3d0:	b2db      	uxtb	r3, r3
 800c3d2:	2b03      	cmp	r3, #3
 800c3d4:	d117      	bne.n	800c406 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800c3d6:	7dba      	ldrb	r2, [r7, #22]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	32ae      	adds	r2, #174	; 0xae
 800c3dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3e0:	699b      	ldr	r3, [r3, #24]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d00f      	beq.n	800c406 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800c3e6:	7dba      	ldrb	r2, [r7, #22]
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800c3ee:	7dba      	ldrb	r2, [r7, #22]
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	32ae      	adds	r2, #174	; 0xae
 800c3f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c3f8:	699b      	ldr	r3, [r3, #24]
 800c3fa:	7afa      	ldrb	r2, [r7, #11]
 800c3fc:	4611      	mov	r1, r2
 800c3fe:	68f8      	ldr	r0, [r7, #12]
 800c400:	4798      	blx	r3
 800c402:	4603      	mov	r3, r0
 800c404:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800c406:	7dfb      	ldrb	r3, [r7, #23]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d001      	beq.n	800c410 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800c40c:	7dfb      	ldrb	r3, [r7, #23]
 800c40e:	e000      	b.n	800c412 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800c410:	2300      	movs	r3, #0
}
 800c412:	4618      	mov	r0, r3
 800c414:	3718      	adds	r7, #24
 800c416:	46bd      	mov	sp, r7
 800c418:	bd80      	pop	{r7, pc}

0800c41a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800c41a:	b580      	push	{r7, lr}
 800c41c:	b086      	sub	sp, #24
 800c41e:	af00      	add	r7, sp, #0
 800c420:	60f8      	str	r0, [r7, #12]
 800c422:	460b      	mov	r3, r1
 800c424:	607a      	str	r2, [r7, #4]
 800c426:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800c428:	7afb      	ldrb	r3, [r7, #11]
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	d16f      	bne.n	800c50e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	3314      	adds	r3, #20
 800c432:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c43a:	2b02      	cmp	r3, #2
 800c43c:	d15a      	bne.n	800c4f4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800c43e:	693b      	ldr	r3, [r7, #16]
 800c440:	689a      	ldr	r2, [r3, #8]
 800c442:	693b      	ldr	r3, [r7, #16]
 800c444:	68db      	ldr	r3, [r3, #12]
 800c446:	429a      	cmp	r2, r3
 800c448:	d914      	bls.n	800c474 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	689a      	ldr	r2, [r3, #8]
 800c44e:	693b      	ldr	r3, [r7, #16]
 800c450:	68db      	ldr	r3, [r3, #12]
 800c452:	1ad2      	subs	r2, r2, r3
 800c454:	693b      	ldr	r3, [r7, #16]
 800c456:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	689b      	ldr	r3, [r3, #8]
 800c45c:	461a      	mov	r2, r3
 800c45e:	6879      	ldr	r1, [r7, #4]
 800c460:	68f8      	ldr	r0, [r7, #12]
 800c462:	f001 f8d6 	bl	800d612 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c466:	2300      	movs	r3, #0
 800c468:	2200      	movs	r2, #0
 800c46a:	2100      	movs	r1, #0
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f005 fb35 	bl	8011adc <USBD_LL_PrepareReceive>
 800c472:	e03f      	b.n	800c4f4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800c474:	693b      	ldr	r3, [r7, #16]
 800c476:	68da      	ldr	r2, [r3, #12]
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	689b      	ldr	r3, [r3, #8]
 800c47c:	429a      	cmp	r2, r3
 800c47e:	d11c      	bne.n	800c4ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800c480:	693b      	ldr	r3, [r7, #16]
 800c482:	685a      	ldr	r2, [r3, #4]
 800c484:	693b      	ldr	r3, [r7, #16]
 800c486:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800c488:	429a      	cmp	r2, r3
 800c48a:	d316      	bcc.n	800c4ba <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800c48c:	693b      	ldr	r3, [r7, #16]
 800c48e:	685a      	ldr	r2, [r3, #4]
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800c496:	429a      	cmp	r2, r3
 800c498:	d20f      	bcs.n	800c4ba <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800c49a:	2200      	movs	r2, #0
 800c49c:	2100      	movs	r1, #0
 800c49e:	68f8      	ldr	r0, [r7, #12]
 800c4a0:	f001 f8b7 	bl	800d612 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	2200      	movs	r2, #0
 800c4b0:	2100      	movs	r1, #0
 800c4b2:	68f8      	ldr	r0, [r7, #12]
 800c4b4:	f005 fb12 	bl	8011adc <USBD_LL_PrepareReceive>
 800c4b8:	e01c      	b.n	800c4f4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c4c0:	b2db      	uxtb	r3, r3
 800c4c2:	2b03      	cmp	r3, #3
 800c4c4:	d10f      	bne.n	800c4e6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4cc:	68db      	ldr	r3, [r3, #12]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d009      	beq.n	800c4e6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c4e0:	68db      	ldr	r3, [r3, #12]
 800c4e2:	68f8      	ldr	r0, [r7, #12]
 800c4e4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800c4e6:	2180      	movs	r1, #128	; 0x80
 800c4e8:	68f8      	ldr	r0, [r7, #12]
 800c4ea:	f005 fa4d 	bl	8011988 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800c4ee:	68f8      	ldr	r0, [r7, #12]
 800c4f0:	f001 f8e1 	bl	800d6b6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d03a      	beq.n	800c574 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800c4fe:	68f8      	ldr	r0, [r7, #12]
 800c500:	f7ff fe42 	bl	800c188 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	2200      	movs	r2, #0
 800c508:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800c50c:	e032      	b.n	800c574 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800c50e:	7afb      	ldrb	r3, [r7, #11]
 800c510:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c514:	b2db      	uxtb	r3, r3
 800c516:	4619      	mov	r1, r3
 800c518:	68f8      	ldr	r0, [r7, #12]
 800c51a:	f000 f97f 	bl	800c81c <USBD_CoreFindEP>
 800c51e:	4603      	mov	r3, r0
 800c520:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c522:	7dfb      	ldrb	r3, [r7, #23]
 800c524:	2bff      	cmp	r3, #255	; 0xff
 800c526:	d025      	beq.n	800c574 <USBD_LL_DataInStage+0x15a>
 800c528:	7dfb      	ldrb	r3, [r7, #23]
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d122      	bne.n	800c574 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c534:	b2db      	uxtb	r3, r3
 800c536:	2b03      	cmp	r3, #3
 800c538:	d11c      	bne.n	800c574 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800c53a:	7dfa      	ldrb	r2, [r7, #23]
 800c53c:	68fb      	ldr	r3, [r7, #12]
 800c53e:	32ae      	adds	r2, #174	; 0xae
 800c540:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c544:	695b      	ldr	r3, [r3, #20]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d014      	beq.n	800c574 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800c54a:	7dfa      	ldrb	r2, [r7, #23]
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800c552:	7dfa      	ldrb	r2, [r7, #23]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	32ae      	adds	r2, #174	; 0xae
 800c558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c55c:	695b      	ldr	r3, [r3, #20]
 800c55e:	7afa      	ldrb	r2, [r7, #11]
 800c560:	4611      	mov	r1, r2
 800c562:	68f8      	ldr	r0, [r7, #12]
 800c564:	4798      	blx	r3
 800c566:	4603      	mov	r3, r0
 800c568:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800c56a:	7dbb      	ldrb	r3, [r7, #22]
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d001      	beq.n	800c574 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800c570:	7dbb      	ldrb	r3, [r7, #22]
 800c572:	e000      	b.n	800c576 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800c574:	2300      	movs	r3, #0
}
 800c576:	4618      	mov	r0, r3
 800c578:	3718      	adds	r7, #24
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}

0800c57e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800c57e:	b580      	push	{r7, lr}
 800c580:	b084      	sub	sp, #16
 800c582:	af00      	add	r7, sp, #0
 800c584:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800c586:	2300      	movs	r3, #0
 800c588:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	2201      	movs	r2, #1
 800c58e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2200      	movs	r2, #0
 800c596:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2200      	movs	r2, #0
 800c59e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5b6:	2b00      	cmp	r3, #0
 800c5b8:	d014      	beq.n	800c5e4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5c0:	685b      	ldr	r3, [r3, #4]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d00e      	beq.n	800c5e4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	687a      	ldr	r2, [r7, #4]
 800c5d0:	6852      	ldr	r2, [r2, #4]
 800c5d2:	b2d2      	uxtb	r2, r2
 800c5d4:	4611      	mov	r1, r2
 800c5d6:	6878      	ldr	r0, [r7, #4]
 800c5d8:	4798      	blx	r3
 800c5da:	4603      	mov	r3, r0
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d001      	beq.n	800c5e4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800c5e0:	2303      	movs	r3, #3
 800c5e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c5e4:	2340      	movs	r3, #64	; 0x40
 800c5e6:	2200      	movs	r2, #0
 800c5e8:	2100      	movs	r1, #0
 800c5ea:	6878      	ldr	r0, [r7, #4]
 800c5ec:	f005 f987 	bl	80118fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2201      	movs	r2, #1
 800c5f4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2240      	movs	r2, #64	; 0x40
 800c5fc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800c600:	2340      	movs	r3, #64	; 0x40
 800c602:	2200      	movs	r2, #0
 800c604:	2180      	movs	r1, #128	; 0x80
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f005 f979 	bl	80118fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2201      	movs	r2, #1
 800c610:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	2240      	movs	r2, #64	; 0x40
 800c616:	621a      	str	r2, [r3, #32]

  return ret;
 800c618:	7bfb      	ldrb	r3, [r7, #15]
}
 800c61a:	4618      	mov	r0, r3
 800c61c:	3710      	adds	r7, #16
 800c61e:	46bd      	mov	sp, r7
 800c620:	bd80      	pop	{r7, pc}

0800c622 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800c622:	b480      	push	{r7}
 800c624:	b083      	sub	sp, #12
 800c626:	af00      	add	r7, sp, #0
 800c628:	6078      	str	r0, [r7, #4]
 800c62a:	460b      	mov	r3, r1
 800c62c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	78fa      	ldrb	r2, [r7, #3]
 800c632:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800c634:	2300      	movs	r3, #0
}
 800c636:	4618      	mov	r0, r3
 800c638:	370c      	adds	r7, #12
 800c63a:	46bd      	mov	sp, r7
 800c63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c640:	4770      	bx	lr

0800c642 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800c642:	b480      	push	{r7}
 800c644:	b083      	sub	sp, #12
 800c646:	af00      	add	r7, sp, #0
 800c648:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c650:	b2da      	uxtb	r2, r3
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2204      	movs	r2, #4
 800c65c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800c660:	2300      	movs	r3, #0
}
 800c662:	4618      	mov	r0, r3
 800c664:	370c      	adds	r7, #12
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800c66e:	b480      	push	{r7}
 800c670:	b083      	sub	sp, #12
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c67c:	b2db      	uxtb	r3, r3
 800c67e:	2b04      	cmp	r3, #4
 800c680:	d106      	bne.n	800c690 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800c688:	b2da      	uxtb	r2, r3
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800c690:	2300      	movs	r3, #0
}
 800c692:	4618      	mov	r0, r3
 800c694:	370c      	adds	r7, #12
 800c696:	46bd      	mov	sp, r7
 800c698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c69c:	4770      	bx	lr

0800c69e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800c69e:	b580      	push	{r7, lr}
 800c6a0:	b082      	sub	sp, #8
 800c6a2:	af00      	add	r7, sp, #0
 800c6a4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c6ac:	b2db      	uxtb	r3, r3
 800c6ae:	2b03      	cmp	r3, #3
 800c6b0:	d110      	bne.n	800c6d4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6b8:	2b00      	cmp	r3, #0
 800c6ba:	d00b      	beq.n	800c6d4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6c2:	69db      	ldr	r3, [r3, #28]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d005      	beq.n	800c6d4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c6ce:	69db      	ldr	r3, [r3, #28]
 800c6d0:	6878      	ldr	r0, [r7, #4]
 800c6d2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800c6d4:	2300      	movs	r3, #0
}
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	3708      	adds	r7, #8
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd80      	pop	{r7, pc}

0800c6de <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800c6de:	b580      	push	{r7, lr}
 800c6e0:	b082      	sub	sp, #8
 800c6e2:	af00      	add	r7, sp, #0
 800c6e4:	6078      	str	r0, [r7, #4]
 800c6e6:	460b      	mov	r3, r1
 800c6e8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	32ae      	adds	r2, #174	; 0xae
 800c6f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c6f8:	2b00      	cmp	r3, #0
 800c6fa:	d101      	bne.n	800c700 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800c6fc:	2303      	movs	r3, #3
 800c6fe:	e01c      	b.n	800c73a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c706:	b2db      	uxtb	r3, r3
 800c708:	2b03      	cmp	r3, #3
 800c70a:	d115      	bne.n	800c738 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	32ae      	adds	r2, #174	; 0xae
 800c716:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c71a:	6a1b      	ldr	r3, [r3, #32]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d00b      	beq.n	800c738 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	32ae      	adds	r2, #174	; 0xae
 800c72a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c72e:	6a1b      	ldr	r3, [r3, #32]
 800c730:	78fa      	ldrb	r2, [r7, #3]
 800c732:	4611      	mov	r1, r2
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c738:	2300      	movs	r3, #0
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3708      	adds	r7, #8
 800c73e:	46bd      	mov	sp, r7
 800c740:	bd80      	pop	{r7, pc}

0800c742 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800c742:	b580      	push	{r7, lr}
 800c744:	b082      	sub	sp, #8
 800c746:	af00      	add	r7, sp, #0
 800c748:	6078      	str	r0, [r7, #4]
 800c74a:	460b      	mov	r3, r1
 800c74c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	32ae      	adds	r2, #174	; 0xae
 800c758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d101      	bne.n	800c764 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800c760:	2303      	movs	r3, #3
 800c762:	e01c      	b.n	800c79e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c76a:	b2db      	uxtb	r3, r3
 800c76c:	2b03      	cmp	r3, #3
 800c76e:	d115      	bne.n	800c79c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	32ae      	adds	r2, #174	; 0xae
 800c77a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c77e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c780:	2b00      	cmp	r3, #0
 800c782:	d00b      	beq.n	800c79c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	32ae      	adds	r2, #174	; 0xae
 800c78e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c794:	78fa      	ldrb	r2, [r7, #3]
 800c796:	4611      	mov	r1, r2
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800c79c:	2300      	movs	r3, #0
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	3708      	adds	r7, #8
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	bd80      	pop	{r7, pc}

0800c7a6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800c7a6:	b480      	push	{r7}
 800c7a8:	b083      	sub	sp, #12
 800c7aa:	af00      	add	r7, sp, #0
 800c7ac:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800c7ae:	2300      	movs	r3, #0
}
 800c7b0:	4618      	mov	r0, r3
 800c7b2:	370c      	adds	r7, #12
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b084      	sub	sp, #16
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d00e      	beq.n	800c7f8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800c7e0:	685b      	ldr	r3, [r3, #4]
 800c7e2:	687a      	ldr	r2, [r7, #4]
 800c7e4:	6852      	ldr	r2, [r2, #4]
 800c7e6:	b2d2      	uxtb	r2, r2
 800c7e8:	4611      	mov	r1, r2
 800c7ea:	6878      	ldr	r0, [r7, #4]
 800c7ec:	4798      	blx	r3
 800c7ee:	4603      	mov	r3, r0
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d001      	beq.n	800c7f8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800c7f4:	2303      	movs	r3, #3
 800c7f6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800c7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c7fa:	4618      	mov	r0, r3
 800c7fc:	3710      	adds	r7, #16
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}

0800c802 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c802:	b480      	push	{r7}
 800c804:	b083      	sub	sp, #12
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
 800c80a:	460b      	mov	r3, r1
 800c80c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c80e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c810:	4618      	mov	r0, r3
 800c812:	370c      	adds	r7, #12
 800c814:	46bd      	mov	sp, r7
 800c816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81a:	4770      	bx	lr

0800c81c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800c81c:	b480      	push	{r7}
 800c81e:	b083      	sub	sp, #12
 800c820:	af00      	add	r7, sp, #0
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	460b      	mov	r3, r1
 800c826:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800c828:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800c82a:	4618      	mov	r0, r3
 800c82c:	370c      	adds	r7, #12
 800c82e:	46bd      	mov	sp, r7
 800c830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c834:	4770      	bx	lr

0800c836 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800c836:	b580      	push	{r7, lr}
 800c838:	b086      	sub	sp, #24
 800c83a:	af00      	add	r7, sp, #0
 800c83c:	6078      	str	r0, [r7, #4]
 800c83e:	460b      	mov	r3, r1
 800c840:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800c84a:	2300      	movs	r3, #0
 800c84c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	885b      	ldrh	r3, [r3, #2]
 800c852:	b29a      	uxth	r2, r3
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	b29b      	uxth	r3, r3
 800c85a:	429a      	cmp	r2, r3
 800c85c:	d920      	bls.n	800c8a0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	781b      	ldrb	r3, [r3, #0]
 800c862:	b29b      	uxth	r3, r3
 800c864:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800c866:	e013      	b.n	800c890 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800c868:	f107 030a 	add.w	r3, r7, #10
 800c86c:	4619      	mov	r1, r3
 800c86e:	6978      	ldr	r0, [r7, #20]
 800c870:	f000 f81b 	bl	800c8aa <USBD_GetNextDesc>
 800c874:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c876:	697b      	ldr	r3, [r7, #20]
 800c878:	785b      	ldrb	r3, [r3, #1]
 800c87a:	2b05      	cmp	r3, #5
 800c87c:	d108      	bne.n	800c890 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800c87e:	697b      	ldr	r3, [r7, #20]
 800c880:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800c882:	693b      	ldr	r3, [r7, #16]
 800c884:	789b      	ldrb	r3, [r3, #2]
 800c886:	78fa      	ldrb	r2, [r7, #3]
 800c888:	429a      	cmp	r2, r3
 800c88a:	d008      	beq.n	800c89e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800c88c:	2300      	movs	r3, #0
 800c88e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800c890:	68fb      	ldr	r3, [r7, #12]
 800c892:	885b      	ldrh	r3, [r3, #2]
 800c894:	b29a      	uxth	r2, r3
 800c896:	897b      	ldrh	r3, [r7, #10]
 800c898:	429a      	cmp	r2, r3
 800c89a:	d8e5      	bhi.n	800c868 <USBD_GetEpDesc+0x32>
 800c89c:	e000      	b.n	800c8a0 <USBD_GetEpDesc+0x6a>
          break;
 800c89e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800c8a0:	693b      	ldr	r3, [r7, #16]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3718      	adds	r7, #24
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c8aa:	b480      	push	{r7}
 800c8ac:	b085      	sub	sp, #20
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
 800c8b2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800c8b8:	683b      	ldr	r3, [r7, #0]
 800c8ba:	881a      	ldrh	r2, [r3, #0]
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	781b      	ldrb	r3, [r3, #0]
 800c8c0:	b29b      	uxth	r3, r3
 800c8c2:	4413      	add	r3, r2
 800c8c4:	b29a      	uxth	r2, r3
 800c8c6:	683b      	ldr	r3, [r7, #0]
 800c8c8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	781b      	ldrb	r3, [r3, #0]
 800c8ce:	461a      	mov	r2, r3
 800c8d0:	687b      	ldr	r3, [r7, #4]
 800c8d2:	4413      	add	r3, r2
 800c8d4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c8d6:	68fb      	ldr	r3, [r7, #12]
}
 800c8d8:	4618      	mov	r0, r3
 800c8da:	3714      	adds	r7, #20
 800c8dc:	46bd      	mov	sp, r7
 800c8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8e2:	4770      	bx	lr

0800c8e4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b087      	sub	sp, #28
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	781b      	ldrb	r3, [r3, #0]
 800c8f4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800c8f6:	697b      	ldr	r3, [r7, #20]
 800c8f8:	3301      	adds	r3, #1
 800c8fa:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800c902:	8a3b      	ldrh	r3, [r7, #16]
 800c904:	021b      	lsls	r3, r3, #8
 800c906:	b21a      	sxth	r2, r3
 800c908:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800c90c:	4313      	orrs	r3, r2
 800c90e:	b21b      	sxth	r3, r3
 800c910:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800c912:	89fb      	ldrh	r3, [r7, #14]
}
 800c914:	4618      	mov	r0, r3
 800c916:	371c      	adds	r7, #28
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b084      	sub	sp, #16
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
 800c928:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c92a:	2300      	movs	r3, #0
 800c92c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	781b      	ldrb	r3, [r3, #0]
 800c932:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c936:	2b40      	cmp	r3, #64	; 0x40
 800c938:	d005      	beq.n	800c946 <USBD_StdDevReq+0x26>
 800c93a:	2b40      	cmp	r3, #64	; 0x40
 800c93c:	d857      	bhi.n	800c9ee <USBD_StdDevReq+0xce>
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d00f      	beq.n	800c962 <USBD_StdDevReq+0x42>
 800c942:	2b20      	cmp	r3, #32
 800c944:	d153      	bne.n	800c9ee <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	32ae      	adds	r2, #174	; 0xae
 800c950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c954:	689b      	ldr	r3, [r3, #8]
 800c956:	6839      	ldr	r1, [r7, #0]
 800c958:	6878      	ldr	r0, [r7, #4]
 800c95a:	4798      	blx	r3
 800c95c:	4603      	mov	r3, r0
 800c95e:	73fb      	strb	r3, [r7, #15]
      break;
 800c960:	e04a      	b.n	800c9f8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c962:	683b      	ldr	r3, [r7, #0]
 800c964:	785b      	ldrb	r3, [r3, #1]
 800c966:	2b09      	cmp	r3, #9
 800c968:	d83b      	bhi.n	800c9e2 <USBD_StdDevReq+0xc2>
 800c96a:	a201      	add	r2, pc, #4	; (adr r2, 800c970 <USBD_StdDevReq+0x50>)
 800c96c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c970:	0800c9c5 	.word	0x0800c9c5
 800c974:	0800c9d9 	.word	0x0800c9d9
 800c978:	0800c9e3 	.word	0x0800c9e3
 800c97c:	0800c9cf 	.word	0x0800c9cf
 800c980:	0800c9e3 	.word	0x0800c9e3
 800c984:	0800c9a3 	.word	0x0800c9a3
 800c988:	0800c999 	.word	0x0800c999
 800c98c:	0800c9e3 	.word	0x0800c9e3
 800c990:	0800c9bb 	.word	0x0800c9bb
 800c994:	0800c9ad 	.word	0x0800c9ad
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800c998:	6839      	ldr	r1, [r7, #0]
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f000 fa3c 	bl	800ce18 <USBD_GetDescriptor>
          break;
 800c9a0:	e024      	b.n	800c9ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800c9a2:	6839      	ldr	r1, [r7, #0]
 800c9a4:	6878      	ldr	r0, [r7, #4]
 800c9a6:	f000 fbcb 	bl	800d140 <USBD_SetAddress>
          break;
 800c9aa:	e01f      	b.n	800c9ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800c9ac:	6839      	ldr	r1, [r7, #0]
 800c9ae:	6878      	ldr	r0, [r7, #4]
 800c9b0:	f000 fc0a 	bl	800d1c8 <USBD_SetConfig>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	73fb      	strb	r3, [r7, #15]
          break;
 800c9b8:	e018      	b.n	800c9ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800c9ba:	6839      	ldr	r1, [r7, #0]
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f000 fcad 	bl	800d31c <USBD_GetConfig>
          break;
 800c9c2:	e013      	b.n	800c9ec <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800c9c4:	6839      	ldr	r1, [r7, #0]
 800c9c6:	6878      	ldr	r0, [r7, #4]
 800c9c8:	f000 fcde 	bl	800d388 <USBD_GetStatus>
          break;
 800c9cc:	e00e      	b.n	800c9ec <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800c9ce:	6839      	ldr	r1, [r7, #0]
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	f000 fd0d 	bl	800d3f0 <USBD_SetFeature>
          break;
 800c9d6:	e009      	b.n	800c9ec <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800c9d8:	6839      	ldr	r1, [r7, #0]
 800c9da:	6878      	ldr	r0, [r7, #4]
 800c9dc:	f000 fd31 	bl	800d442 <USBD_ClrFeature>
          break;
 800c9e0:	e004      	b.n	800c9ec <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800c9e2:	6839      	ldr	r1, [r7, #0]
 800c9e4:	6878      	ldr	r0, [r7, #4]
 800c9e6:	f000 fd88 	bl	800d4fa <USBD_CtlError>
          break;
 800c9ea:	bf00      	nop
      }
      break;
 800c9ec:	e004      	b.n	800c9f8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800c9ee:	6839      	ldr	r1, [r7, #0]
 800c9f0:	6878      	ldr	r0, [r7, #4]
 800c9f2:	f000 fd82 	bl	800d4fa <USBD_CtlError>
      break;
 800c9f6:	bf00      	nop
  }

  return ret;
 800c9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3710      	adds	r7, #16
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}
 800ca02:	bf00      	nop

0800ca04 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b084      	sub	sp, #16
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	6078      	str	r0, [r7, #4]
 800ca0c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ca0e:	2300      	movs	r3, #0
 800ca10:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ca12:	683b      	ldr	r3, [r7, #0]
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800ca1a:	2b40      	cmp	r3, #64	; 0x40
 800ca1c:	d005      	beq.n	800ca2a <USBD_StdItfReq+0x26>
 800ca1e:	2b40      	cmp	r3, #64	; 0x40
 800ca20:	d852      	bhi.n	800cac8 <USBD_StdItfReq+0xc4>
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d001      	beq.n	800ca2a <USBD_StdItfReq+0x26>
 800ca26:	2b20      	cmp	r3, #32
 800ca28:	d14e      	bne.n	800cac8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ca30:	b2db      	uxtb	r3, r3
 800ca32:	3b01      	subs	r3, #1
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	d840      	bhi.n	800caba <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	889b      	ldrh	r3, [r3, #4]
 800ca3c:	b2db      	uxtb	r3, r3
 800ca3e:	2b01      	cmp	r3, #1
 800ca40:	d836      	bhi.n	800cab0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ca42:	683b      	ldr	r3, [r7, #0]
 800ca44:	889b      	ldrh	r3, [r3, #4]
 800ca46:	b2db      	uxtb	r3, r3
 800ca48:	4619      	mov	r1, r3
 800ca4a:	6878      	ldr	r0, [r7, #4]
 800ca4c:	f7ff fed9 	bl	800c802 <USBD_CoreFindIF>
 800ca50:	4603      	mov	r3, r0
 800ca52:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ca54:	7bbb      	ldrb	r3, [r7, #14]
 800ca56:	2bff      	cmp	r3, #255	; 0xff
 800ca58:	d01d      	beq.n	800ca96 <USBD_StdItfReq+0x92>
 800ca5a:	7bbb      	ldrb	r3, [r7, #14]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d11a      	bne.n	800ca96 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800ca60:	7bba      	ldrb	r2, [r7, #14]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	32ae      	adds	r2, #174	; 0xae
 800ca66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca6a:	689b      	ldr	r3, [r3, #8]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d00f      	beq.n	800ca90 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800ca70:	7bba      	ldrb	r2, [r7, #14]
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800ca78:	7bba      	ldrb	r2, [r7, #14]
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	32ae      	adds	r2, #174	; 0xae
 800ca7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ca82:	689b      	ldr	r3, [r3, #8]
 800ca84:	6839      	ldr	r1, [r7, #0]
 800ca86:	6878      	ldr	r0, [r7, #4]
 800ca88:	4798      	blx	r3
 800ca8a:	4603      	mov	r3, r0
 800ca8c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ca8e:	e004      	b.n	800ca9a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800ca90:	2303      	movs	r3, #3
 800ca92:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800ca94:	e001      	b.n	800ca9a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800ca96:	2303      	movs	r3, #3
 800ca98:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	88db      	ldrh	r3, [r3, #6]
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d110      	bne.n	800cac4 <USBD_StdItfReq+0xc0>
 800caa2:	7bfb      	ldrb	r3, [r7, #15]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d10d      	bne.n	800cac4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800caa8:	6878      	ldr	r0, [r7, #4]
 800caaa:	f000 fdf1 	bl	800d690 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800caae:	e009      	b.n	800cac4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800cab0:	6839      	ldr	r1, [r7, #0]
 800cab2:	6878      	ldr	r0, [r7, #4]
 800cab4:	f000 fd21 	bl	800d4fa <USBD_CtlError>
          break;
 800cab8:	e004      	b.n	800cac4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800caba:	6839      	ldr	r1, [r7, #0]
 800cabc:	6878      	ldr	r0, [r7, #4]
 800cabe:	f000 fd1c 	bl	800d4fa <USBD_CtlError>
          break;
 800cac2:	e000      	b.n	800cac6 <USBD_StdItfReq+0xc2>
          break;
 800cac4:	bf00      	nop
      }
      break;
 800cac6:	e004      	b.n	800cad2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800cac8:	6839      	ldr	r1, [r7, #0]
 800caca:	6878      	ldr	r0, [r7, #4]
 800cacc:	f000 fd15 	bl	800d4fa <USBD_CtlError>
      break;
 800cad0:	bf00      	nop
  }

  return ret;
 800cad2:	7bfb      	ldrb	r3, [r7, #15]
}
 800cad4:	4618      	mov	r0, r3
 800cad6:	3710      	adds	r7, #16
 800cad8:	46bd      	mov	sp, r7
 800cada:	bd80      	pop	{r7, pc}

0800cadc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b084      	sub	sp, #16
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	6078      	str	r0, [r7, #4]
 800cae4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800cae6:	2300      	movs	r3, #0
 800cae8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800caea:	683b      	ldr	r3, [r7, #0]
 800caec:	889b      	ldrh	r3, [r3, #4]
 800caee:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800caf0:	683b      	ldr	r3, [r7, #0]
 800caf2:	781b      	ldrb	r3, [r3, #0]
 800caf4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800caf8:	2b40      	cmp	r3, #64	; 0x40
 800cafa:	d007      	beq.n	800cb0c <USBD_StdEPReq+0x30>
 800cafc:	2b40      	cmp	r3, #64	; 0x40
 800cafe:	f200 817f 	bhi.w	800ce00 <USBD_StdEPReq+0x324>
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d02a      	beq.n	800cb5c <USBD_StdEPReq+0x80>
 800cb06:	2b20      	cmp	r3, #32
 800cb08:	f040 817a 	bne.w	800ce00 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800cb0c:	7bbb      	ldrb	r3, [r7, #14]
 800cb0e:	4619      	mov	r1, r3
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	f7ff fe83 	bl	800c81c <USBD_CoreFindEP>
 800cb16:	4603      	mov	r3, r0
 800cb18:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cb1a:	7b7b      	ldrb	r3, [r7, #13]
 800cb1c:	2bff      	cmp	r3, #255	; 0xff
 800cb1e:	f000 8174 	beq.w	800ce0a <USBD_StdEPReq+0x32e>
 800cb22:	7b7b      	ldrb	r3, [r7, #13]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	f040 8170 	bne.w	800ce0a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800cb2a:	7b7a      	ldrb	r2, [r7, #13]
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800cb32:	7b7a      	ldrb	r2, [r7, #13]
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	32ae      	adds	r2, #174	; 0xae
 800cb38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb3c:	689b      	ldr	r3, [r3, #8]
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	f000 8163 	beq.w	800ce0a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800cb44:	7b7a      	ldrb	r2, [r7, #13]
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	32ae      	adds	r2, #174	; 0xae
 800cb4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cb4e:	689b      	ldr	r3, [r3, #8]
 800cb50:	6839      	ldr	r1, [r7, #0]
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	4798      	blx	r3
 800cb56:	4603      	mov	r3, r0
 800cb58:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800cb5a:	e156      	b.n	800ce0a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	785b      	ldrb	r3, [r3, #1]
 800cb60:	2b03      	cmp	r3, #3
 800cb62:	d008      	beq.n	800cb76 <USBD_StdEPReq+0x9a>
 800cb64:	2b03      	cmp	r3, #3
 800cb66:	f300 8145 	bgt.w	800cdf4 <USBD_StdEPReq+0x318>
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	f000 809b 	beq.w	800cca6 <USBD_StdEPReq+0x1ca>
 800cb70:	2b01      	cmp	r3, #1
 800cb72:	d03c      	beq.n	800cbee <USBD_StdEPReq+0x112>
 800cb74:	e13e      	b.n	800cdf4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cb7c:	b2db      	uxtb	r3, r3
 800cb7e:	2b02      	cmp	r3, #2
 800cb80:	d002      	beq.n	800cb88 <USBD_StdEPReq+0xac>
 800cb82:	2b03      	cmp	r3, #3
 800cb84:	d016      	beq.n	800cbb4 <USBD_StdEPReq+0xd8>
 800cb86:	e02c      	b.n	800cbe2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cb88:	7bbb      	ldrb	r3, [r7, #14]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d00d      	beq.n	800cbaa <USBD_StdEPReq+0xce>
 800cb8e:	7bbb      	ldrb	r3, [r7, #14]
 800cb90:	2b80      	cmp	r3, #128	; 0x80
 800cb92:	d00a      	beq.n	800cbaa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cb94:	7bbb      	ldrb	r3, [r7, #14]
 800cb96:	4619      	mov	r1, r3
 800cb98:	6878      	ldr	r0, [r7, #4]
 800cb9a:	f004 fef5 	bl	8011988 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cb9e:	2180      	movs	r1, #128	; 0x80
 800cba0:	6878      	ldr	r0, [r7, #4]
 800cba2:	f004 fef1 	bl	8011988 <USBD_LL_StallEP>
 800cba6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cba8:	e020      	b.n	800cbec <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800cbaa:	6839      	ldr	r1, [r7, #0]
 800cbac:	6878      	ldr	r0, [r7, #4]
 800cbae:	f000 fca4 	bl	800d4fa <USBD_CtlError>
              break;
 800cbb2:	e01b      	b.n	800cbec <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	885b      	ldrh	r3, [r3, #2]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d10e      	bne.n	800cbda <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800cbbc:	7bbb      	ldrb	r3, [r7, #14]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00b      	beq.n	800cbda <USBD_StdEPReq+0xfe>
 800cbc2:	7bbb      	ldrb	r3, [r7, #14]
 800cbc4:	2b80      	cmp	r3, #128	; 0x80
 800cbc6:	d008      	beq.n	800cbda <USBD_StdEPReq+0xfe>
 800cbc8:	683b      	ldr	r3, [r7, #0]
 800cbca:	88db      	ldrh	r3, [r3, #6]
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d104      	bne.n	800cbda <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800cbd0:	7bbb      	ldrb	r3, [r7, #14]
 800cbd2:	4619      	mov	r1, r3
 800cbd4:	6878      	ldr	r0, [r7, #4]
 800cbd6:	f004 fed7 	bl	8011988 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800cbda:	6878      	ldr	r0, [r7, #4]
 800cbdc:	f000 fd58 	bl	800d690 <USBD_CtlSendStatus>

              break;
 800cbe0:	e004      	b.n	800cbec <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800cbe2:	6839      	ldr	r1, [r7, #0]
 800cbe4:	6878      	ldr	r0, [r7, #4]
 800cbe6:	f000 fc88 	bl	800d4fa <USBD_CtlError>
              break;
 800cbea:	bf00      	nop
          }
          break;
 800cbec:	e107      	b.n	800cdfe <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cbf4:	b2db      	uxtb	r3, r3
 800cbf6:	2b02      	cmp	r3, #2
 800cbf8:	d002      	beq.n	800cc00 <USBD_StdEPReq+0x124>
 800cbfa:	2b03      	cmp	r3, #3
 800cbfc:	d016      	beq.n	800cc2c <USBD_StdEPReq+0x150>
 800cbfe:	e04b      	b.n	800cc98 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800cc00:	7bbb      	ldrb	r3, [r7, #14]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d00d      	beq.n	800cc22 <USBD_StdEPReq+0x146>
 800cc06:	7bbb      	ldrb	r3, [r7, #14]
 800cc08:	2b80      	cmp	r3, #128	; 0x80
 800cc0a:	d00a      	beq.n	800cc22 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800cc0c:	7bbb      	ldrb	r3, [r7, #14]
 800cc0e:	4619      	mov	r1, r3
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	f004 feb9 	bl	8011988 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800cc16:	2180      	movs	r1, #128	; 0x80
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f004 feb5 	bl	8011988 <USBD_LL_StallEP>
 800cc1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800cc20:	e040      	b.n	800cca4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800cc22:	6839      	ldr	r1, [r7, #0]
 800cc24:	6878      	ldr	r0, [r7, #4]
 800cc26:	f000 fc68 	bl	800d4fa <USBD_CtlError>
              break;
 800cc2a:	e03b      	b.n	800cca4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800cc2c:	683b      	ldr	r3, [r7, #0]
 800cc2e:	885b      	ldrh	r3, [r3, #2]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d136      	bne.n	800cca2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800cc34:	7bbb      	ldrb	r3, [r7, #14]
 800cc36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d004      	beq.n	800cc48 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800cc3e:	7bbb      	ldrb	r3, [r7, #14]
 800cc40:	4619      	mov	r1, r3
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f004 febf 	bl	80119c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	f000 fd21 	bl	800d690 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800cc4e:	7bbb      	ldrb	r3, [r7, #14]
 800cc50:	4619      	mov	r1, r3
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f7ff fde2 	bl	800c81c <USBD_CoreFindEP>
 800cc58:	4603      	mov	r3, r0
 800cc5a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800cc5c:	7b7b      	ldrb	r3, [r7, #13]
 800cc5e:	2bff      	cmp	r3, #255	; 0xff
 800cc60:	d01f      	beq.n	800cca2 <USBD_StdEPReq+0x1c6>
 800cc62:	7b7b      	ldrb	r3, [r7, #13]
 800cc64:	2b00      	cmp	r3, #0
 800cc66:	d11c      	bne.n	800cca2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800cc68:	7b7a      	ldrb	r2, [r7, #13]
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800cc70:	7b7a      	ldrb	r2, [r7, #13]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	32ae      	adds	r2, #174	; 0xae
 800cc76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc7a:	689b      	ldr	r3, [r3, #8]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d010      	beq.n	800cca2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800cc80:	7b7a      	ldrb	r2, [r7, #13]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	32ae      	adds	r2, #174	; 0xae
 800cc86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc8a:	689b      	ldr	r3, [r3, #8]
 800cc8c:	6839      	ldr	r1, [r7, #0]
 800cc8e:	6878      	ldr	r0, [r7, #4]
 800cc90:	4798      	blx	r3
 800cc92:	4603      	mov	r3, r0
 800cc94:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800cc96:	e004      	b.n	800cca2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800cc98:	6839      	ldr	r1, [r7, #0]
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f000 fc2d 	bl	800d4fa <USBD_CtlError>
              break;
 800cca0:	e000      	b.n	800cca4 <USBD_StdEPReq+0x1c8>
              break;
 800cca2:	bf00      	nop
          }
          break;
 800cca4:	e0ab      	b.n	800cdfe <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ccac:	b2db      	uxtb	r3, r3
 800ccae:	2b02      	cmp	r3, #2
 800ccb0:	d002      	beq.n	800ccb8 <USBD_StdEPReq+0x1dc>
 800ccb2:	2b03      	cmp	r3, #3
 800ccb4:	d032      	beq.n	800cd1c <USBD_StdEPReq+0x240>
 800ccb6:	e097      	b.n	800cde8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ccb8:	7bbb      	ldrb	r3, [r7, #14]
 800ccba:	2b00      	cmp	r3, #0
 800ccbc:	d007      	beq.n	800ccce <USBD_StdEPReq+0x1f2>
 800ccbe:	7bbb      	ldrb	r3, [r7, #14]
 800ccc0:	2b80      	cmp	r3, #128	; 0x80
 800ccc2:	d004      	beq.n	800ccce <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800ccc4:	6839      	ldr	r1, [r7, #0]
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f000 fc17 	bl	800d4fa <USBD_CtlError>
                break;
 800cccc:	e091      	b.n	800cdf2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	da0b      	bge.n	800ccee <USBD_StdEPReq+0x212>
 800ccd6:	7bbb      	ldrb	r3, [r7, #14]
 800ccd8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800ccdc:	4613      	mov	r3, r2
 800ccde:	009b      	lsls	r3, r3, #2
 800cce0:	4413      	add	r3, r2
 800cce2:	009b      	lsls	r3, r3, #2
 800cce4:	3310      	adds	r3, #16
 800cce6:	687a      	ldr	r2, [r7, #4]
 800cce8:	4413      	add	r3, r2
 800ccea:	3304      	adds	r3, #4
 800ccec:	e00b      	b.n	800cd06 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800ccee:	7bbb      	ldrb	r3, [r7, #14]
 800ccf0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800ccf4:	4613      	mov	r3, r2
 800ccf6:	009b      	lsls	r3, r3, #2
 800ccf8:	4413      	add	r3, r2
 800ccfa:	009b      	lsls	r3, r3, #2
 800ccfc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cd00:	687a      	ldr	r2, [r7, #4]
 800cd02:	4413      	add	r3, r2
 800cd04:	3304      	adds	r3, #4
 800cd06:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800cd08:	68bb      	ldr	r3, [r7, #8]
 800cd0a:	2200      	movs	r2, #0
 800cd0c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	2202      	movs	r2, #2
 800cd12:	4619      	mov	r1, r3
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f000 fc61 	bl	800d5dc <USBD_CtlSendData>
              break;
 800cd1a:	e06a      	b.n	800cdf2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800cd1c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	da11      	bge.n	800cd48 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800cd24:	7bbb      	ldrb	r3, [r7, #14]
 800cd26:	f003 020f 	and.w	r2, r3, #15
 800cd2a:	6879      	ldr	r1, [r7, #4]
 800cd2c:	4613      	mov	r3, r2
 800cd2e:	009b      	lsls	r3, r3, #2
 800cd30:	4413      	add	r3, r2
 800cd32:	009b      	lsls	r3, r3, #2
 800cd34:	440b      	add	r3, r1
 800cd36:	3324      	adds	r3, #36	; 0x24
 800cd38:	881b      	ldrh	r3, [r3, #0]
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d117      	bne.n	800cd6e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cd3e:	6839      	ldr	r1, [r7, #0]
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f000 fbda 	bl	800d4fa <USBD_CtlError>
                  break;
 800cd46:	e054      	b.n	800cdf2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800cd48:	7bbb      	ldrb	r3, [r7, #14]
 800cd4a:	f003 020f 	and.w	r2, r3, #15
 800cd4e:	6879      	ldr	r1, [r7, #4]
 800cd50:	4613      	mov	r3, r2
 800cd52:	009b      	lsls	r3, r3, #2
 800cd54:	4413      	add	r3, r2
 800cd56:	009b      	lsls	r3, r3, #2
 800cd58:	440b      	add	r3, r1
 800cd5a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd5e:	881b      	ldrh	r3, [r3, #0]
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d104      	bne.n	800cd6e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800cd64:	6839      	ldr	r1, [r7, #0]
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f000 fbc7 	bl	800d4fa <USBD_CtlError>
                  break;
 800cd6c:	e041      	b.n	800cdf2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd6e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	da0b      	bge.n	800cd8e <USBD_StdEPReq+0x2b2>
 800cd76:	7bbb      	ldrb	r3, [r7, #14]
 800cd78:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800cd7c:	4613      	mov	r3, r2
 800cd7e:	009b      	lsls	r3, r3, #2
 800cd80:	4413      	add	r3, r2
 800cd82:	009b      	lsls	r3, r3, #2
 800cd84:	3310      	adds	r3, #16
 800cd86:	687a      	ldr	r2, [r7, #4]
 800cd88:	4413      	add	r3, r2
 800cd8a:	3304      	adds	r3, #4
 800cd8c:	e00b      	b.n	800cda6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800cd8e:	7bbb      	ldrb	r3, [r7, #14]
 800cd90:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800cd94:	4613      	mov	r3, r2
 800cd96:	009b      	lsls	r3, r3, #2
 800cd98:	4413      	add	r3, r2
 800cd9a:	009b      	lsls	r3, r3, #2
 800cd9c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800cda0:	687a      	ldr	r2, [r7, #4]
 800cda2:	4413      	add	r3, r2
 800cda4:	3304      	adds	r3, #4
 800cda6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800cda8:	7bbb      	ldrb	r3, [r7, #14]
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d002      	beq.n	800cdb4 <USBD_StdEPReq+0x2d8>
 800cdae:	7bbb      	ldrb	r3, [r7, #14]
 800cdb0:	2b80      	cmp	r3, #128	; 0x80
 800cdb2:	d103      	bne.n	800cdbc <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	601a      	str	r2, [r3, #0]
 800cdba:	e00e      	b.n	800cdda <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800cdbc:	7bbb      	ldrb	r3, [r7, #14]
 800cdbe:	4619      	mov	r1, r3
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f004 fe1f 	bl	8011a04 <USBD_LL_IsStallEP>
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d003      	beq.n	800cdd4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800cdcc:	68bb      	ldr	r3, [r7, #8]
 800cdce:	2201      	movs	r2, #1
 800cdd0:	601a      	str	r2, [r3, #0]
 800cdd2:	e002      	b.n	800cdda <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800cdd4:	68bb      	ldr	r3, [r7, #8]
 800cdd6:	2200      	movs	r2, #0
 800cdd8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800cdda:	68bb      	ldr	r3, [r7, #8]
 800cddc:	2202      	movs	r2, #2
 800cdde:	4619      	mov	r1, r3
 800cde0:	6878      	ldr	r0, [r7, #4]
 800cde2:	f000 fbfb 	bl	800d5dc <USBD_CtlSendData>
              break;
 800cde6:	e004      	b.n	800cdf2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800cde8:	6839      	ldr	r1, [r7, #0]
 800cdea:	6878      	ldr	r0, [r7, #4]
 800cdec:	f000 fb85 	bl	800d4fa <USBD_CtlError>
              break;
 800cdf0:	bf00      	nop
          }
          break;
 800cdf2:	e004      	b.n	800cdfe <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800cdf4:	6839      	ldr	r1, [r7, #0]
 800cdf6:	6878      	ldr	r0, [r7, #4]
 800cdf8:	f000 fb7f 	bl	800d4fa <USBD_CtlError>
          break;
 800cdfc:	bf00      	nop
      }
      break;
 800cdfe:	e005      	b.n	800ce0c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800ce00:	6839      	ldr	r1, [r7, #0]
 800ce02:	6878      	ldr	r0, [r7, #4]
 800ce04:	f000 fb79 	bl	800d4fa <USBD_CtlError>
      break;
 800ce08:	e000      	b.n	800ce0c <USBD_StdEPReq+0x330>
      break;
 800ce0a:	bf00      	nop
  }

  return ret;
 800ce0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce0e:	4618      	mov	r0, r3
 800ce10:	3710      	adds	r7, #16
 800ce12:	46bd      	mov	sp, r7
 800ce14:	bd80      	pop	{r7, pc}
	...

0800ce18 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ce18:	b580      	push	{r7, lr}
 800ce1a:	b084      	sub	sp, #16
 800ce1c:	af00      	add	r7, sp, #0
 800ce1e:	6078      	str	r0, [r7, #4]
 800ce20:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800ce22:	2300      	movs	r3, #0
 800ce24:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800ce26:	2300      	movs	r3, #0
 800ce28:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800ce2e:	683b      	ldr	r3, [r7, #0]
 800ce30:	885b      	ldrh	r3, [r3, #2]
 800ce32:	0a1b      	lsrs	r3, r3, #8
 800ce34:	b29b      	uxth	r3, r3
 800ce36:	3b01      	subs	r3, #1
 800ce38:	2b0e      	cmp	r3, #14
 800ce3a:	f200 8152 	bhi.w	800d0e2 <USBD_GetDescriptor+0x2ca>
 800ce3e:	a201      	add	r2, pc, #4	; (adr r2, 800ce44 <USBD_GetDescriptor+0x2c>)
 800ce40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce44:	0800ceb5 	.word	0x0800ceb5
 800ce48:	0800cecd 	.word	0x0800cecd
 800ce4c:	0800cf0d 	.word	0x0800cf0d
 800ce50:	0800d0e3 	.word	0x0800d0e3
 800ce54:	0800d0e3 	.word	0x0800d0e3
 800ce58:	0800d083 	.word	0x0800d083
 800ce5c:	0800d0af 	.word	0x0800d0af
 800ce60:	0800d0e3 	.word	0x0800d0e3
 800ce64:	0800d0e3 	.word	0x0800d0e3
 800ce68:	0800d0e3 	.word	0x0800d0e3
 800ce6c:	0800d0e3 	.word	0x0800d0e3
 800ce70:	0800d0e3 	.word	0x0800d0e3
 800ce74:	0800d0e3 	.word	0x0800d0e3
 800ce78:	0800d0e3 	.word	0x0800d0e3
 800ce7c:	0800ce81 	.word	0x0800ce81
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce86:	69db      	ldr	r3, [r3, #28]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d00b      	beq.n	800cea4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ce92:	69db      	ldr	r3, [r3, #28]
 800ce94:	687a      	ldr	r2, [r7, #4]
 800ce96:	7c12      	ldrb	r2, [r2, #16]
 800ce98:	f107 0108 	add.w	r1, r7, #8
 800ce9c:	4610      	mov	r0, r2
 800ce9e:	4798      	blx	r3
 800cea0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800cea2:	e126      	b.n	800d0f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800cea4:	6839      	ldr	r1, [r7, #0]
 800cea6:	6878      	ldr	r0, [r7, #4]
 800cea8:	f000 fb27 	bl	800d4fa <USBD_CtlError>
        err++;
 800ceac:	7afb      	ldrb	r3, [r7, #11]
 800ceae:	3301      	adds	r3, #1
 800ceb0:	72fb      	strb	r3, [r7, #11]
      break;
 800ceb2:	e11e      	b.n	800d0f2 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	687a      	ldr	r2, [r7, #4]
 800cebe:	7c12      	ldrb	r2, [r2, #16]
 800cec0:	f107 0108 	add.w	r1, r7, #8
 800cec4:	4610      	mov	r0, r2
 800cec6:	4798      	blx	r3
 800cec8:	60f8      	str	r0, [r7, #12]
      break;
 800ceca:	e112      	b.n	800d0f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	7c1b      	ldrb	r3, [r3, #16]
 800ced0:	2b00      	cmp	r3, #0
 800ced2:	d10d      	bne.n	800cef0 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ceda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cedc:	f107 0208 	add.w	r2, r7, #8
 800cee0:	4610      	mov	r0, r2
 800cee2:	4798      	blx	r3
 800cee4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	3301      	adds	r3, #1
 800ceea:	2202      	movs	r2, #2
 800ceec:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800ceee:	e100      	b.n	800d0f2 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800cef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef8:	f107 0208 	add.w	r2, r7, #8
 800cefc:	4610      	mov	r0, r2
 800cefe:	4798      	blx	r3
 800cf00:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800cf02:	68fb      	ldr	r3, [r7, #12]
 800cf04:	3301      	adds	r3, #1
 800cf06:	2202      	movs	r2, #2
 800cf08:	701a      	strb	r2, [r3, #0]
      break;
 800cf0a:	e0f2      	b.n	800d0f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800cf0c:	683b      	ldr	r3, [r7, #0]
 800cf0e:	885b      	ldrh	r3, [r3, #2]
 800cf10:	b2db      	uxtb	r3, r3
 800cf12:	2b05      	cmp	r3, #5
 800cf14:	f200 80ac 	bhi.w	800d070 <USBD_GetDescriptor+0x258>
 800cf18:	a201      	add	r2, pc, #4	; (adr r2, 800cf20 <USBD_GetDescriptor+0x108>)
 800cf1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf1e:	bf00      	nop
 800cf20:	0800cf39 	.word	0x0800cf39
 800cf24:	0800cf6d 	.word	0x0800cf6d
 800cf28:	0800cfa1 	.word	0x0800cfa1
 800cf2c:	0800cfd5 	.word	0x0800cfd5
 800cf30:	0800d009 	.word	0x0800d009
 800cf34:	0800d03d 	.word	0x0800d03d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800cf38:	687b      	ldr	r3, [r7, #4]
 800cf3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf3e:	685b      	ldr	r3, [r3, #4]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d00b      	beq.n	800cf5c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf4a:	685b      	ldr	r3, [r3, #4]
 800cf4c:	687a      	ldr	r2, [r7, #4]
 800cf4e:	7c12      	ldrb	r2, [r2, #16]
 800cf50:	f107 0108 	add.w	r1, r7, #8
 800cf54:	4610      	mov	r0, r2
 800cf56:	4798      	blx	r3
 800cf58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf5a:	e091      	b.n	800d080 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf5c:	6839      	ldr	r1, [r7, #0]
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f000 facb 	bl	800d4fa <USBD_CtlError>
            err++;
 800cf64:	7afb      	ldrb	r3, [r7, #11]
 800cf66:	3301      	adds	r3, #1
 800cf68:	72fb      	strb	r3, [r7, #11]
          break;
 800cf6a:	e089      	b.n	800d080 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf72:	689b      	ldr	r3, [r3, #8]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d00b      	beq.n	800cf90 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cf7e:	689b      	ldr	r3, [r3, #8]
 800cf80:	687a      	ldr	r2, [r7, #4]
 800cf82:	7c12      	ldrb	r2, [r2, #16]
 800cf84:	f107 0108 	add.w	r1, r7, #8
 800cf88:	4610      	mov	r0, r2
 800cf8a:	4798      	blx	r3
 800cf8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cf8e:	e077      	b.n	800d080 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cf90:	6839      	ldr	r1, [r7, #0]
 800cf92:	6878      	ldr	r0, [r7, #4]
 800cf94:	f000 fab1 	bl	800d4fa <USBD_CtlError>
            err++;
 800cf98:	7afb      	ldrb	r3, [r7, #11]
 800cf9a:	3301      	adds	r3, #1
 800cf9c:	72fb      	strb	r3, [r7, #11]
          break;
 800cf9e:	e06f      	b.n	800d080 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfa6:	68db      	ldr	r3, [r3, #12]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d00b      	beq.n	800cfc4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfb2:	68db      	ldr	r3, [r3, #12]
 800cfb4:	687a      	ldr	r2, [r7, #4]
 800cfb6:	7c12      	ldrb	r2, [r2, #16]
 800cfb8:	f107 0108 	add.w	r1, r7, #8
 800cfbc:	4610      	mov	r0, r2
 800cfbe:	4798      	blx	r3
 800cfc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cfc2:	e05d      	b.n	800d080 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cfc4:	6839      	ldr	r1, [r7, #0]
 800cfc6:	6878      	ldr	r0, [r7, #4]
 800cfc8:	f000 fa97 	bl	800d4fa <USBD_CtlError>
            err++;
 800cfcc:	7afb      	ldrb	r3, [r7, #11]
 800cfce:	3301      	adds	r3, #1
 800cfd0:	72fb      	strb	r3, [r7, #11]
          break;
 800cfd2:	e055      	b.n	800d080 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfda:	691b      	ldr	r3, [r3, #16]
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d00b      	beq.n	800cff8 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800cfe6:	691b      	ldr	r3, [r3, #16]
 800cfe8:	687a      	ldr	r2, [r7, #4]
 800cfea:	7c12      	ldrb	r2, [r2, #16]
 800cfec:	f107 0108 	add.w	r1, r7, #8
 800cff0:	4610      	mov	r0, r2
 800cff2:	4798      	blx	r3
 800cff4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800cff6:	e043      	b.n	800d080 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800cff8:	6839      	ldr	r1, [r7, #0]
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 fa7d 	bl	800d4fa <USBD_CtlError>
            err++;
 800d000:	7afb      	ldrb	r3, [r7, #11]
 800d002:	3301      	adds	r3, #1
 800d004:	72fb      	strb	r3, [r7, #11]
          break;
 800d006:	e03b      	b.n	800d080 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d00e:	695b      	ldr	r3, [r3, #20]
 800d010:	2b00      	cmp	r3, #0
 800d012:	d00b      	beq.n	800d02c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d01a:	695b      	ldr	r3, [r3, #20]
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	7c12      	ldrb	r2, [r2, #16]
 800d020:	f107 0108 	add.w	r1, r7, #8
 800d024:	4610      	mov	r0, r2
 800d026:	4798      	blx	r3
 800d028:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d02a:	e029      	b.n	800d080 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d02c:	6839      	ldr	r1, [r7, #0]
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f000 fa63 	bl	800d4fa <USBD_CtlError>
            err++;
 800d034:	7afb      	ldrb	r3, [r7, #11]
 800d036:	3301      	adds	r3, #1
 800d038:	72fb      	strb	r3, [r7, #11]
          break;
 800d03a:	e021      	b.n	800d080 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d042:	699b      	ldr	r3, [r3, #24]
 800d044:	2b00      	cmp	r3, #0
 800d046:	d00b      	beq.n	800d060 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800d04e:	699b      	ldr	r3, [r3, #24]
 800d050:	687a      	ldr	r2, [r7, #4]
 800d052:	7c12      	ldrb	r2, [r2, #16]
 800d054:	f107 0108 	add.w	r1, r7, #8
 800d058:	4610      	mov	r0, r2
 800d05a:	4798      	blx	r3
 800d05c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800d05e:	e00f      	b.n	800d080 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800d060:	6839      	ldr	r1, [r7, #0]
 800d062:	6878      	ldr	r0, [r7, #4]
 800d064:	f000 fa49 	bl	800d4fa <USBD_CtlError>
            err++;
 800d068:	7afb      	ldrb	r3, [r7, #11]
 800d06a:	3301      	adds	r3, #1
 800d06c:	72fb      	strb	r3, [r7, #11]
          break;
 800d06e:	e007      	b.n	800d080 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800d070:	6839      	ldr	r1, [r7, #0]
 800d072:	6878      	ldr	r0, [r7, #4]
 800d074:	f000 fa41 	bl	800d4fa <USBD_CtlError>
          err++;
 800d078:	7afb      	ldrb	r3, [r7, #11]
 800d07a:	3301      	adds	r3, #1
 800d07c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800d07e:	bf00      	nop
      }
      break;
 800d080:	e037      	b.n	800d0f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	7c1b      	ldrb	r3, [r3, #16]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d109      	bne.n	800d09e <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800d08a:	687b      	ldr	r3, [r7, #4]
 800d08c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d090:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d092:	f107 0208 	add.w	r2, r7, #8
 800d096:	4610      	mov	r0, r2
 800d098:	4798      	blx	r3
 800d09a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d09c:	e029      	b.n	800d0f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d09e:	6839      	ldr	r1, [r7, #0]
 800d0a0:	6878      	ldr	r0, [r7, #4]
 800d0a2:	f000 fa2a 	bl	800d4fa <USBD_CtlError>
        err++;
 800d0a6:	7afb      	ldrb	r3, [r7, #11]
 800d0a8:	3301      	adds	r3, #1
 800d0aa:	72fb      	strb	r3, [r7, #11]
      break;
 800d0ac:	e021      	b.n	800d0f2 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	7c1b      	ldrb	r3, [r3, #16]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d10d      	bne.n	800d0d2 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d0bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0be:	f107 0208 	add.w	r2, r7, #8
 800d0c2:	4610      	mov	r0, r2
 800d0c4:	4798      	blx	r3
 800d0c6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	2207      	movs	r2, #7
 800d0ce:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800d0d0:	e00f      	b.n	800d0f2 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800d0d2:	6839      	ldr	r1, [r7, #0]
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f000 fa10 	bl	800d4fa <USBD_CtlError>
        err++;
 800d0da:	7afb      	ldrb	r3, [r7, #11]
 800d0dc:	3301      	adds	r3, #1
 800d0de:	72fb      	strb	r3, [r7, #11]
      break;
 800d0e0:	e007      	b.n	800d0f2 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800d0e2:	6839      	ldr	r1, [r7, #0]
 800d0e4:	6878      	ldr	r0, [r7, #4]
 800d0e6:	f000 fa08 	bl	800d4fa <USBD_CtlError>
      err++;
 800d0ea:	7afb      	ldrb	r3, [r7, #11]
 800d0ec:	3301      	adds	r3, #1
 800d0ee:	72fb      	strb	r3, [r7, #11]
      break;
 800d0f0:	bf00      	nop
  }

  if (err != 0U)
 800d0f2:	7afb      	ldrb	r3, [r7, #11]
 800d0f4:	2b00      	cmp	r3, #0
 800d0f6:	d11e      	bne.n	800d136 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800d0f8:	683b      	ldr	r3, [r7, #0]
 800d0fa:	88db      	ldrh	r3, [r3, #6]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d016      	beq.n	800d12e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800d100:	893b      	ldrh	r3, [r7, #8]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d00e      	beq.n	800d124 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800d106:	683b      	ldr	r3, [r7, #0]
 800d108:	88da      	ldrh	r2, [r3, #6]
 800d10a:	893b      	ldrh	r3, [r7, #8]
 800d10c:	4293      	cmp	r3, r2
 800d10e:	bf28      	it	cs
 800d110:	4613      	movcs	r3, r2
 800d112:	b29b      	uxth	r3, r3
 800d114:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800d116:	893b      	ldrh	r3, [r7, #8]
 800d118:	461a      	mov	r2, r3
 800d11a:	68f9      	ldr	r1, [r7, #12]
 800d11c:	6878      	ldr	r0, [r7, #4]
 800d11e:	f000 fa5d 	bl	800d5dc <USBD_CtlSendData>
 800d122:	e009      	b.n	800d138 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800d124:	6839      	ldr	r1, [r7, #0]
 800d126:	6878      	ldr	r0, [r7, #4]
 800d128:	f000 f9e7 	bl	800d4fa <USBD_CtlError>
 800d12c:	e004      	b.n	800d138 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800d12e:	6878      	ldr	r0, [r7, #4]
 800d130:	f000 faae 	bl	800d690 <USBD_CtlSendStatus>
 800d134:	e000      	b.n	800d138 <USBD_GetDescriptor+0x320>
    return;
 800d136:	bf00      	nop
  }
}
 800d138:	3710      	adds	r7, #16
 800d13a:	46bd      	mov	sp, r7
 800d13c:	bd80      	pop	{r7, pc}
 800d13e:	bf00      	nop

0800d140 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d140:	b580      	push	{r7, lr}
 800d142:	b084      	sub	sp, #16
 800d144:	af00      	add	r7, sp, #0
 800d146:	6078      	str	r0, [r7, #4]
 800d148:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	889b      	ldrh	r3, [r3, #4]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d131      	bne.n	800d1b6 <USBD_SetAddress+0x76>
 800d152:	683b      	ldr	r3, [r7, #0]
 800d154:	88db      	ldrh	r3, [r3, #6]
 800d156:	2b00      	cmp	r3, #0
 800d158:	d12d      	bne.n	800d1b6 <USBD_SetAddress+0x76>
 800d15a:	683b      	ldr	r3, [r7, #0]
 800d15c:	885b      	ldrh	r3, [r3, #2]
 800d15e:	2b7f      	cmp	r3, #127	; 0x7f
 800d160:	d829      	bhi.n	800d1b6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	885b      	ldrh	r3, [r3, #2]
 800d166:	b2db      	uxtb	r3, r3
 800d168:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d16c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d174:	b2db      	uxtb	r3, r3
 800d176:	2b03      	cmp	r3, #3
 800d178:	d104      	bne.n	800d184 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800d17a:	6839      	ldr	r1, [r7, #0]
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 f9bc 	bl	800d4fa <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d182:	e01d      	b.n	800d1c0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	7bfa      	ldrb	r2, [r7, #15]
 800d188:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800d18c:	7bfb      	ldrb	r3, [r7, #15]
 800d18e:	4619      	mov	r1, r3
 800d190:	6878      	ldr	r0, [r7, #4]
 800d192:	f004 fc63 	bl	8011a5c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800d196:	6878      	ldr	r0, [r7, #4]
 800d198:	f000 fa7a 	bl	800d690 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800d19c:	7bfb      	ldrb	r3, [r7, #15]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d004      	beq.n	800d1ac <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	2202      	movs	r2, #2
 800d1a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1aa:	e009      	b.n	800d1c0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	2201      	movs	r2, #1
 800d1b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1b4:	e004      	b.n	800d1c0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800d1b6:	6839      	ldr	r1, [r7, #0]
 800d1b8:	6878      	ldr	r0, [r7, #4]
 800d1ba:	f000 f99e 	bl	800d4fa <USBD_CtlError>
  }
}
 800d1be:	bf00      	nop
 800d1c0:	bf00      	nop
 800d1c2:	3710      	adds	r7, #16
 800d1c4:	46bd      	mov	sp, r7
 800d1c6:	bd80      	pop	{r7, pc}

0800d1c8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d1c8:	b580      	push	{r7, lr}
 800d1ca:	b084      	sub	sp, #16
 800d1cc:	af00      	add	r7, sp, #0
 800d1ce:	6078      	str	r0, [r7, #4]
 800d1d0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800d1d6:	683b      	ldr	r3, [r7, #0]
 800d1d8:	885b      	ldrh	r3, [r3, #2]
 800d1da:	b2da      	uxtb	r2, r3
 800d1dc:	4b4e      	ldr	r3, [pc, #312]	; (800d318 <USBD_SetConfig+0x150>)
 800d1de:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800d1e0:	4b4d      	ldr	r3, [pc, #308]	; (800d318 <USBD_SetConfig+0x150>)
 800d1e2:	781b      	ldrb	r3, [r3, #0]
 800d1e4:	2b01      	cmp	r3, #1
 800d1e6:	d905      	bls.n	800d1f4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800d1e8:	6839      	ldr	r1, [r7, #0]
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f000 f985 	bl	800d4fa <USBD_CtlError>
    return USBD_FAIL;
 800d1f0:	2303      	movs	r3, #3
 800d1f2:	e08c      	b.n	800d30e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1fa:	b2db      	uxtb	r3, r3
 800d1fc:	2b02      	cmp	r3, #2
 800d1fe:	d002      	beq.n	800d206 <USBD_SetConfig+0x3e>
 800d200:	2b03      	cmp	r3, #3
 800d202:	d029      	beq.n	800d258 <USBD_SetConfig+0x90>
 800d204:	e075      	b.n	800d2f2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800d206:	4b44      	ldr	r3, [pc, #272]	; (800d318 <USBD_SetConfig+0x150>)
 800d208:	781b      	ldrb	r3, [r3, #0]
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d020      	beq.n	800d250 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800d20e:	4b42      	ldr	r3, [pc, #264]	; (800d318 <USBD_SetConfig+0x150>)
 800d210:	781b      	ldrb	r3, [r3, #0]
 800d212:	461a      	mov	r2, r3
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d218:	4b3f      	ldr	r3, [pc, #252]	; (800d318 <USBD_SetConfig+0x150>)
 800d21a:	781b      	ldrb	r3, [r3, #0]
 800d21c:	4619      	mov	r1, r3
 800d21e:	6878      	ldr	r0, [r7, #4]
 800d220:	f7fe ffbd 	bl	800c19e <USBD_SetClassConfig>
 800d224:	4603      	mov	r3, r0
 800d226:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800d228:	7bfb      	ldrb	r3, [r7, #15]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d008      	beq.n	800d240 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800d22e:	6839      	ldr	r1, [r7, #0]
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	f000 f962 	bl	800d4fa <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	2202      	movs	r2, #2
 800d23a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d23e:	e065      	b.n	800d30c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f000 fa25 	bl	800d690 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	2203      	movs	r2, #3
 800d24a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d24e:	e05d      	b.n	800d30c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f000 fa1d 	bl	800d690 <USBD_CtlSendStatus>
      break;
 800d256:	e059      	b.n	800d30c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800d258:	4b2f      	ldr	r3, [pc, #188]	; (800d318 <USBD_SetConfig+0x150>)
 800d25a:	781b      	ldrb	r3, [r3, #0]
 800d25c:	2b00      	cmp	r3, #0
 800d25e:	d112      	bne.n	800d286 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	2202      	movs	r2, #2
 800d264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800d268:	4b2b      	ldr	r3, [pc, #172]	; (800d318 <USBD_SetConfig+0x150>)
 800d26a:	781b      	ldrb	r3, [r3, #0]
 800d26c:	461a      	mov	r2, r3
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d272:	4b29      	ldr	r3, [pc, #164]	; (800d318 <USBD_SetConfig+0x150>)
 800d274:	781b      	ldrb	r3, [r3, #0]
 800d276:	4619      	mov	r1, r3
 800d278:	6878      	ldr	r0, [r7, #4]
 800d27a:	f7fe ffac 	bl	800c1d6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800d27e:	6878      	ldr	r0, [r7, #4]
 800d280:	f000 fa06 	bl	800d690 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800d284:	e042      	b.n	800d30c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800d286:	4b24      	ldr	r3, [pc, #144]	; (800d318 <USBD_SetConfig+0x150>)
 800d288:	781b      	ldrb	r3, [r3, #0]
 800d28a:	461a      	mov	r2, r3
 800d28c:	687b      	ldr	r3, [r7, #4]
 800d28e:	685b      	ldr	r3, [r3, #4]
 800d290:	429a      	cmp	r2, r3
 800d292:	d02a      	beq.n	800d2ea <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	685b      	ldr	r3, [r3, #4]
 800d298:	b2db      	uxtb	r3, r3
 800d29a:	4619      	mov	r1, r3
 800d29c:	6878      	ldr	r0, [r7, #4]
 800d29e:	f7fe ff9a 	bl	800c1d6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800d2a2:	4b1d      	ldr	r3, [pc, #116]	; (800d318 <USBD_SetConfig+0x150>)
 800d2a4:	781b      	ldrb	r3, [r3, #0]
 800d2a6:	461a      	mov	r2, r3
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800d2ac:	4b1a      	ldr	r3, [pc, #104]	; (800d318 <USBD_SetConfig+0x150>)
 800d2ae:	781b      	ldrb	r3, [r3, #0]
 800d2b0:	4619      	mov	r1, r3
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f7fe ff73 	bl	800c19e <USBD_SetClassConfig>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800d2bc:	7bfb      	ldrb	r3, [r7, #15]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d00f      	beq.n	800d2e2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800d2c2:	6839      	ldr	r1, [r7, #0]
 800d2c4:	6878      	ldr	r0, [r7, #4]
 800d2c6:	f000 f918 	bl	800d4fa <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	685b      	ldr	r3, [r3, #4]
 800d2ce:	b2db      	uxtb	r3, r3
 800d2d0:	4619      	mov	r1, r3
 800d2d2:	6878      	ldr	r0, [r7, #4]
 800d2d4:	f7fe ff7f 	bl	800c1d6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	2202      	movs	r2, #2
 800d2dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800d2e0:	e014      	b.n	800d30c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f000 f9d4 	bl	800d690 <USBD_CtlSendStatus>
      break;
 800d2e8:	e010      	b.n	800d30c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800d2ea:	6878      	ldr	r0, [r7, #4]
 800d2ec:	f000 f9d0 	bl	800d690 <USBD_CtlSendStatus>
      break;
 800d2f0:	e00c      	b.n	800d30c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800d2f2:	6839      	ldr	r1, [r7, #0]
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f000 f900 	bl	800d4fa <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800d2fa:	4b07      	ldr	r3, [pc, #28]	; (800d318 <USBD_SetConfig+0x150>)
 800d2fc:	781b      	ldrb	r3, [r3, #0]
 800d2fe:	4619      	mov	r1, r3
 800d300:	6878      	ldr	r0, [r7, #4]
 800d302:	f7fe ff68 	bl	800c1d6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800d306:	2303      	movs	r3, #3
 800d308:	73fb      	strb	r3, [r7, #15]
      break;
 800d30a:	bf00      	nop
  }

  return ret;
 800d30c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d30e:	4618      	mov	r0, r3
 800d310:	3710      	adds	r7, #16
 800d312:	46bd      	mov	sp, r7
 800d314:	bd80      	pop	{r7, pc}
 800d316:	bf00      	nop
 800d318:	20000883 	.word	0x20000883

0800d31c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d31c:	b580      	push	{r7, lr}
 800d31e:	b082      	sub	sp, #8
 800d320:	af00      	add	r7, sp, #0
 800d322:	6078      	str	r0, [r7, #4]
 800d324:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800d326:	683b      	ldr	r3, [r7, #0]
 800d328:	88db      	ldrh	r3, [r3, #6]
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d004      	beq.n	800d338 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800d32e:	6839      	ldr	r1, [r7, #0]
 800d330:	6878      	ldr	r0, [r7, #4]
 800d332:	f000 f8e2 	bl	800d4fa <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800d336:	e023      	b.n	800d380 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d33e:	b2db      	uxtb	r3, r3
 800d340:	2b02      	cmp	r3, #2
 800d342:	dc02      	bgt.n	800d34a <USBD_GetConfig+0x2e>
 800d344:	2b00      	cmp	r3, #0
 800d346:	dc03      	bgt.n	800d350 <USBD_GetConfig+0x34>
 800d348:	e015      	b.n	800d376 <USBD_GetConfig+0x5a>
 800d34a:	2b03      	cmp	r3, #3
 800d34c:	d00b      	beq.n	800d366 <USBD_GetConfig+0x4a>
 800d34e:	e012      	b.n	800d376 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	2200      	movs	r2, #0
 800d354:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800d356:	687b      	ldr	r3, [r7, #4]
 800d358:	3308      	adds	r3, #8
 800d35a:	2201      	movs	r2, #1
 800d35c:	4619      	mov	r1, r3
 800d35e:	6878      	ldr	r0, [r7, #4]
 800d360:	f000 f93c 	bl	800d5dc <USBD_CtlSendData>
        break;
 800d364:	e00c      	b.n	800d380 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	3304      	adds	r3, #4
 800d36a:	2201      	movs	r2, #1
 800d36c:	4619      	mov	r1, r3
 800d36e:	6878      	ldr	r0, [r7, #4]
 800d370:	f000 f934 	bl	800d5dc <USBD_CtlSendData>
        break;
 800d374:	e004      	b.n	800d380 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800d376:	6839      	ldr	r1, [r7, #0]
 800d378:	6878      	ldr	r0, [r7, #4]
 800d37a:	f000 f8be 	bl	800d4fa <USBD_CtlError>
        break;
 800d37e:	bf00      	nop
}
 800d380:	bf00      	nop
 800d382:	3708      	adds	r7, #8
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}

0800d388 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d388:	b580      	push	{r7, lr}
 800d38a:	b082      	sub	sp, #8
 800d38c:	af00      	add	r7, sp, #0
 800d38e:	6078      	str	r0, [r7, #4]
 800d390:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d398:	b2db      	uxtb	r3, r3
 800d39a:	3b01      	subs	r3, #1
 800d39c:	2b02      	cmp	r3, #2
 800d39e:	d81e      	bhi.n	800d3de <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800d3a0:	683b      	ldr	r3, [r7, #0]
 800d3a2:	88db      	ldrh	r3, [r3, #6]
 800d3a4:	2b02      	cmp	r3, #2
 800d3a6:	d004      	beq.n	800d3b2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800d3a8:	6839      	ldr	r1, [r7, #0]
 800d3aa:	6878      	ldr	r0, [r7, #4]
 800d3ac:	f000 f8a5 	bl	800d4fa <USBD_CtlError>
        break;
 800d3b0:	e01a      	b.n	800d3e8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	2201      	movs	r2, #1
 800d3b6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d005      	beq.n	800d3ce <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	68db      	ldr	r3, [r3, #12]
 800d3c6:	f043 0202 	orr.w	r2, r3, #2
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	330c      	adds	r3, #12
 800d3d2:	2202      	movs	r2, #2
 800d3d4:	4619      	mov	r1, r3
 800d3d6:	6878      	ldr	r0, [r7, #4]
 800d3d8:	f000 f900 	bl	800d5dc <USBD_CtlSendData>
      break;
 800d3dc:	e004      	b.n	800d3e8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800d3de:	6839      	ldr	r1, [r7, #0]
 800d3e0:	6878      	ldr	r0, [r7, #4]
 800d3e2:	f000 f88a 	bl	800d4fa <USBD_CtlError>
      break;
 800d3e6:	bf00      	nop
  }
}
 800d3e8:	bf00      	nop
 800d3ea:	3708      	adds	r7, #8
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b082      	sub	sp, #8
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	885b      	ldrh	r3, [r3, #2]
 800d3fe:	2b01      	cmp	r3, #1
 800d400:	d107      	bne.n	800d412 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	2201      	movs	r2, #1
 800d406:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800d40a:	6878      	ldr	r0, [r7, #4]
 800d40c:	f000 f940 	bl	800d690 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800d410:	e013      	b.n	800d43a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	885b      	ldrh	r3, [r3, #2]
 800d416:	2b02      	cmp	r3, #2
 800d418:	d10b      	bne.n	800d432 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	889b      	ldrh	r3, [r3, #4]
 800d41e:	0a1b      	lsrs	r3, r3, #8
 800d420:	b29b      	uxth	r3, r3
 800d422:	b2da      	uxtb	r2, r3
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800d42a:	6878      	ldr	r0, [r7, #4]
 800d42c:	f000 f930 	bl	800d690 <USBD_CtlSendStatus>
}
 800d430:	e003      	b.n	800d43a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800d432:	6839      	ldr	r1, [r7, #0]
 800d434:	6878      	ldr	r0, [r7, #4]
 800d436:	f000 f860 	bl	800d4fa <USBD_CtlError>
}
 800d43a:	bf00      	nop
 800d43c:	3708      	adds	r7, #8
 800d43e:	46bd      	mov	sp, r7
 800d440:	bd80      	pop	{r7, pc}

0800d442 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d442:	b580      	push	{r7, lr}
 800d444:	b082      	sub	sp, #8
 800d446:	af00      	add	r7, sp, #0
 800d448:	6078      	str	r0, [r7, #4]
 800d44a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d452:	b2db      	uxtb	r3, r3
 800d454:	3b01      	subs	r3, #1
 800d456:	2b02      	cmp	r3, #2
 800d458:	d80b      	bhi.n	800d472 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	885b      	ldrh	r3, [r3, #2]
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d10c      	bne.n	800d47c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2200      	movs	r2, #0
 800d466:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f000 f910 	bl	800d690 <USBD_CtlSendStatus>
      }
      break;
 800d470:	e004      	b.n	800d47c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800d472:	6839      	ldr	r1, [r7, #0]
 800d474:	6878      	ldr	r0, [r7, #4]
 800d476:	f000 f840 	bl	800d4fa <USBD_CtlError>
      break;
 800d47a:	e000      	b.n	800d47e <USBD_ClrFeature+0x3c>
      break;
 800d47c:	bf00      	nop
  }
}
 800d47e:	bf00      	nop
 800d480:	3708      	adds	r7, #8
 800d482:	46bd      	mov	sp, r7
 800d484:	bd80      	pop	{r7, pc}

0800d486 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800d486:	b580      	push	{r7, lr}
 800d488:	b084      	sub	sp, #16
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
 800d48e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800d490:	683b      	ldr	r3, [r7, #0]
 800d492:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	781a      	ldrb	r2, [r3, #0]
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800d49c:	68fb      	ldr	r3, [r7, #12]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	781a      	ldrb	r2, [r3, #0]
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	3301      	adds	r3, #1
 800d4ae:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800d4b0:	68f8      	ldr	r0, [r7, #12]
 800d4b2:	f7ff fa17 	bl	800c8e4 <SWAPBYTE>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	461a      	mov	r2, r3
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800d4be:	68fb      	ldr	r3, [r7, #12]
 800d4c0:	3301      	adds	r3, #1
 800d4c2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	3301      	adds	r3, #1
 800d4c8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800d4ca:	68f8      	ldr	r0, [r7, #12]
 800d4cc:	f7ff fa0a 	bl	800c8e4 <SWAPBYTE>
 800d4d0:	4603      	mov	r3, r0
 800d4d2:	461a      	mov	r2, r3
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	3301      	adds	r3, #1
 800d4dc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800d4de:	68fb      	ldr	r3, [r7, #12]
 800d4e0:	3301      	adds	r3, #1
 800d4e2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800d4e4:	68f8      	ldr	r0, [r7, #12]
 800d4e6:	f7ff f9fd 	bl	800c8e4 <SWAPBYTE>
 800d4ea:	4603      	mov	r3, r0
 800d4ec:	461a      	mov	r2, r3
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	80da      	strh	r2, [r3, #6]
}
 800d4f2:	bf00      	nop
 800d4f4:	3710      	adds	r7, #16
 800d4f6:	46bd      	mov	sp, r7
 800d4f8:	bd80      	pop	{r7, pc}

0800d4fa <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d4fa:	b580      	push	{r7, lr}
 800d4fc:	b082      	sub	sp, #8
 800d4fe:	af00      	add	r7, sp, #0
 800d500:	6078      	str	r0, [r7, #4]
 800d502:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800d504:	2180      	movs	r1, #128	; 0x80
 800d506:	6878      	ldr	r0, [r7, #4]
 800d508:	f004 fa3e 	bl	8011988 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800d50c:	2100      	movs	r1, #0
 800d50e:	6878      	ldr	r0, [r7, #4]
 800d510:	f004 fa3a 	bl	8011988 <USBD_LL_StallEP>
}
 800d514:	bf00      	nop
 800d516:	3708      	adds	r7, #8
 800d518:	46bd      	mov	sp, r7
 800d51a:	bd80      	pop	{r7, pc}

0800d51c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b086      	sub	sp, #24
 800d520:	af00      	add	r7, sp, #0
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	60b9      	str	r1, [r7, #8]
 800d526:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800d528:	2300      	movs	r3, #0
 800d52a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	d036      	beq.n	800d5a0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800d536:	6938      	ldr	r0, [r7, #16]
 800d538:	f000 f836 	bl	800d5a8 <USBD_GetLen>
 800d53c:	4603      	mov	r3, r0
 800d53e:	3301      	adds	r3, #1
 800d540:	b29b      	uxth	r3, r3
 800d542:	005b      	lsls	r3, r3, #1
 800d544:	b29a      	uxth	r2, r3
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800d54a:	7dfb      	ldrb	r3, [r7, #23]
 800d54c:	68ba      	ldr	r2, [r7, #8]
 800d54e:	4413      	add	r3, r2
 800d550:	687a      	ldr	r2, [r7, #4]
 800d552:	7812      	ldrb	r2, [r2, #0]
 800d554:	701a      	strb	r2, [r3, #0]
  idx++;
 800d556:	7dfb      	ldrb	r3, [r7, #23]
 800d558:	3301      	adds	r3, #1
 800d55a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800d55c:	7dfb      	ldrb	r3, [r7, #23]
 800d55e:	68ba      	ldr	r2, [r7, #8]
 800d560:	4413      	add	r3, r2
 800d562:	2203      	movs	r2, #3
 800d564:	701a      	strb	r2, [r3, #0]
  idx++;
 800d566:	7dfb      	ldrb	r3, [r7, #23]
 800d568:	3301      	adds	r3, #1
 800d56a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800d56c:	e013      	b.n	800d596 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800d56e:	7dfb      	ldrb	r3, [r7, #23]
 800d570:	68ba      	ldr	r2, [r7, #8]
 800d572:	4413      	add	r3, r2
 800d574:	693a      	ldr	r2, [r7, #16]
 800d576:	7812      	ldrb	r2, [r2, #0]
 800d578:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800d57a:	693b      	ldr	r3, [r7, #16]
 800d57c:	3301      	adds	r3, #1
 800d57e:	613b      	str	r3, [r7, #16]
    idx++;
 800d580:	7dfb      	ldrb	r3, [r7, #23]
 800d582:	3301      	adds	r3, #1
 800d584:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800d586:	7dfb      	ldrb	r3, [r7, #23]
 800d588:	68ba      	ldr	r2, [r7, #8]
 800d58a:	4413      	add	r3, r2
 800d58c:	2200      	movs	r2, #0
 800d58e:	701a      	strb	r2, [r3, #0]
    idx++;
 800d590:	7dfb      	ldrb	r3, [r7, #23]
 800d592:	3301      	adds	r3, #1
 800d594:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800d596:	693b      	ldr	r3, [r7, #16]
 800d598:	781b      	ldrb	r3, [r3, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d1e7      	bne.n	800d56e <USBD_GetString+0x52>
 800d59e:	e000      	b.n	800d5a2 <USBD_GetString+0x86>
    return;
 800d5a0:	bf00      	nop
  }
}
 800d5a2:	3718      	adds	r7, #24
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800d5a8:	b480      	push	{r7}
 800d5aa:	b085      	sub	sp, #20
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800d5b4:	687b      	ldr	r3, [r7, #4]
 800d5b6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800d5b8:	e005      	b.n	800d5c6 <USBD_GetLen+0x1e>
  {
    len++;
 800d5ba:	7bfb      	ldrb	r3, [r7, #15]
 800d5bc:	3301      	adds	r3, #1
 800d5be:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	3301      	adds	r3, #1
 800d5c4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800d5c6:	68bb      	ldr	r3, [r7, #8]
 800d5c8:	781b      	ldrb	r3, [r3, #0]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d1f5      	bne.n	800d5ba <USBD_GetLen+0x12>
  }

  return len;
 800d5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5d0:	4618      	mov	r0, r3
 800d5d2:	3714      	adds	r7, #20
 800d5d4:	46bd      	mov	sp, r7
 800d5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5da:	4770      	bx	lr

0800d5dc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800d5dc:	b580      	push	{r7, lr}
 800d5de:	b084      	sub	sp, #16
 800d5e0:	af00      	add	r7, sp, #0
 800d5e2:	60f8      	str	r0, [r7, #12]
 800d5e4:	60b9      	str	r1, [r7, #8]
 800d5e6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800d5e8:	68fb      	ldr	r3, [r7, #12]
 800d5ea:	2202      	movs	r2, #2
 800d5ec:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800d5f0:	68fb      	ldr	r3, [r7, #12]
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	687a      	ldr	r2, [r7, #4]
 800d5fa:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	68ba      	ldr	r2, [r7, #8]
 800d600:	2100      	movs	r1, #0
 800d602:	68f8      	ldr	r0, [r7, #12]
 800d604:	f004 fa49 	bl	8011a9a <USBD_LL_Transmit>

  return USBD_OK;
 800d608:	2300      	movs	r3, #0
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	3710      	adds	r7, #16
 800d60e:	46bd      	mov	sp, r7
 800d610:	bd80      	pop	{r7, pc}

0800d612 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800d612:	b580      	push	{r7, lr}
 800d614:	b084      	sub	sp, #16
 800d616:	af00      	add	r7, sp, #0
 800d618:	60f8      	str	r0, [r7, #12]
 800d61a:	60b9      	str	r1, [r7, #8]
 800d61c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	68ba      	ldr	r2, [r7, #8]
 800d622:	2100      	movs	r1, #0
 800d624:	68f8      	ldr	r0, [r7, #12]
 800d626:	f004 fa38 	bl	8011a9a <USBD_LL_Transmit>

  return USBD_OK;
 800d62a:	2300      	movs	r3, #0
}
 800d62c:	4618      	mov	r0, r3
 800d62e:	3710      	adds	r7, #16
 800d630:	46bd      	mov	sp, r7
 800d632:	bd80      	pop	{r7, pc}

0800d634 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800d634:	b580      	push	{r7, lr}
 800d636:	b084      	sub	sp, #16
 800d638:	af00      	add	r7, sp, #0
 800d63a:	60f8      	str	r0, [r7, #12]
 800d63c:	60b9      	str	r1, [r7, #8]
 800d63e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2203      	movs	r2, #3
 800d644:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	687a      	ldr	r2, [r7, #4]
 800d64c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800d650:	68fb      	ldr	r3, [r7, #12]
 800d652:	687a      	ldr	r2, [r7, #4]
 800d654:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	68ba      	ldr	r2, [r7, #8]
 800d65c:	2100      	movs	r1, #0
 800d65e:	68f8      	ldr	r0, [r7, #12]
 800d660:	f004 fa3c 	bl	8011adc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d664:	2300      	movs	r3, #0
}
 800d666:	4618      	mov	r0, r3
 800d668:	3710      	adds	r7, #16
 800d66a:	46bd      	mov	sp, r7
 800d66c:	bd80      	pop	{r7, pc}

0800d66e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800d66e:	b580      	push	{r7, lr}
 800d670:	b084      	sub	sp, #16
 800d672:	af00      	add	r7, sp, #0
 800d674:	60f8      	str	r0, [r7, #12]
 800d676:	60b9      	str	r1, [r7, #8]
 800d678:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	68ba      	ldr	r2, [r7, #8]
 800d67e:	2100      	movs	r1, #0
 800d680:	68f8      	ldr	r0, [r7, #12]
 800d682:	f004 fa2b 	bl	8011adc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d686:	2300      	movs	r3, #0
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3710      	adds	r7, #16
 800d68c:	46bd      	mov	sp, r7
 800d68e:	bd80      	pop	{r7, pc}

0800d690 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800d690:	b580      	push	{r7, lr}
 800d692:	b082      	sub	sp, #8
 800d694:	af00      	add	r7, sp, #0
 800d696:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2204      	movs	r2, #4
 800d69c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	2200      	movs	r2, #0
 800d6a4:	2100      	movs	r1, #0
 800d6a6:	6878      	ldr	r0, [r7, #4]
 800d6a8:	f004 f9f7 	bl	8011a9a <USBD_LL_Transmit>

  return USBD_OK;
 800d6ac:	2300      	movs	r3, #0
}
 800d6ae:	4618      	mov	r0, r3
 800d6b0:	3708      	adds	r7, #8
 800d6b2:	46bd      	mov	sp, r7
 800d6b4:	bd80      	pop	{r7, pc}

0800d6b6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800d6b6:	b580      	push	{r7, lr}
 800d6b8:	b082      	sub	sp, #8
 800d6ba:	af00      	add	r7, sp, #0
 800d6bc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	2205      	movs	r2, #5
 800d6c2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	2200      	movs	r2, #0
 800d6ca:	2100      	movs	r1, #0
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f004 fa05 	bl	8011adc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800d6d2:	2300      	movs	r3, #0
}
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	3708      	adds	r7, #8
 800d6d8:	46bd      	mov	sp, r7
 800d6da:	bd80      	pop	{r7, pc}

0800d6dc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800d6dc:	b480      	push	{r7}
 800d6de:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800d6e0:	bf00      	nop
 800d6e2:	46bd      	mov	sp, r7
 800d6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e8:	4770      	bx	lr
	...

0800d6ec <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800d6ec:	b480      	push	{r7}
 800d6ee:	b085      	sub	sp, #20
 800d6f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d6f2:	f3ef 8305 	mrs	r3, IPSR
 800d6f6:	60bb      	str	r3, [r7, #8]
  return(result);
 800d6f8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d10f      	bne.n	800d71e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6fe:	f3ef 8310 	mrs	r3, PRIMASK
 800d702:	607b      	str	r3, [r7, #4]
  return(result);
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d105      	bne.n	800d716 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d70a:	f3ef 8311 	mrs	r3, BASEPRI
 800d70e:	603b      	str	r3, [r7, #0]
  return(result);
 800d710:	683b      	ldr	r3, [r7, #0]
 800d712:	2b00      	cmp	r3, #0
 800d714:	d007      	beq.n	800d726 <osKernelInitialize+0x3a>
 800d716:	4b0e      	ldr	r3, [pc, #56]	; (800d750 <osKernelInitialize+0x64>)
 800d718:	681b      	ldr	r3, [r3, #0]
 800d71a:	2b02      	cmp	r3, #2
 800d71c:	d103      	bne.n	800d726 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800d71e:	f06f 0305 	mvn.w	r3, #5
 800d722:	60fb      	str	r3, [r7, #12]
 800d724:	e00c      	b.n	800d740 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800d726:	4b0a      	ldr	r3, [pc, #40]	; (800d750 <osKernelInitialize+0x64>)
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	2b00      	cmp	r3, #0
 800d72c:	d105      	bne.n	800d73a <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d72e:	4b08      	ldr	r3, [pc, #32]	; (800d750 <osKernelInitialize+0x64>)
 800d730:	2201      	movs	r2, #1
 800d732:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d734:	2300      	movs	r3, #0
 800d736:	60fb      	str	r3, [r7, #12]
 800d738:	e002      	b.n	800d740 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800d73a:	f04f 33ff 	mov.w	r3, #4294967295
 800d73e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d740:	68fb      	ldr	r3, [r7, #12]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3714      	adds	r7, #20
 800d746:	46bd      	mov	sp, r7
 800d748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74c:	4770      	bx	lr
 800d74e:	bf00      	nop
 800d750:	20000884 	.word	0x20000884

0800d754 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d754:	b580      	push	{r7, lr}
 800d756:	b084      	sub	sp, #16
 800d758:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d75a:	f3ef 8305 	mrs	r3, IPSR
 800d75e:	60bb      	str	r3, [r7, #8]
  return(result);
 800d760:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d762:	2b00      	cmp	r3, #0
 800d764:	d10f      	bne.n	800d786 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d766:	f3ef 8310 	mrs	r3, PRIMASK
 800d76a:	607b      	str	r3, [r7, #4]
  return(result);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d105      	bne.n	800d77e <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d772:	f3ef 8311 	mrs	r3, BASEPRI
 800d776:	603b      	str	r3, [r7, #0]
  return(result);
 800d778:	683b      	ldr	r3, [r7, #0]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d007      	beq.n	800d78e <osKernelStart+0x3a>
 800d77e:	4b0f      	ldr	r3, [pc, #60]	; (800d7bc <osKernelStart+0x68>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2b02      	cmp	r3, #2
 800d784:	d103      	bne.n	800d78e <osKernelStart+0x3a>
    stat = osErrorISR;
 800d786:	f06f 0305 	mvn.w	r3, #5
 800d78a:	60fb      	str	r3, [r7, #12]
 800d78c:	e010      	b.n	800d7b0 <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800d78e:	4b0b      	ldr	r3, [pc, #44]	; (800d7bc <osKernelStart+0x68>)
 800d790:	681b      	ldr	r3, [r3, #0]
 800d792:	2b01      	cmp	r3, #1
 800d794:	d109      	bne.n	800d7aa <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800d796:	f7ff ffa1 	bl	800d6dc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d79a:	4b08      	ldr	r3, [pc, #32]	; (800d7bc <osKernelStart+0x68>)
 800d79c:	2202      	movs	r2, #2
 800d79e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d7a0:	f001 fedc 	bl	800f55c <vTaskStartScheduler>
      stat = osOK;
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	60fb      	str	r3, [r7, #12]
 800d7a8:	e002      	b.n	800d7b0 <osKernelStart+0x5c>
    } else {
      stat = osError;
 800d7aa:	f04f 33ff 	mov.w	r3, #4294967295
 800d7ae:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
}
 800d7b2:	4618      	mov	r0, r3
 800d7b4:	3710      	adds	r7, #16
 800d7b6:	46bd      	mov	sp, r7
 800d7b8:	bd80      	pop	{r7, pc}
 800d7ba:	bf00      	nop
 800d7bc:	20000884 	.word	0x20000884

0800d7c0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d7c0:	b580      	push	{r7, lr}
 800d7c2:	b090      	sub	sp, #64	; 0x40
 800d7c4:	af04      	add	r7, sp, #16
 800d7c6:	60f8      	str	r0, [r7, #12]
 800d7c8:	60b9      	str	r1, [r7, #8]
 800d7ca:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d7d0:	f3ef 8305 	mrs	r3, IPSR
 800d7d4:	61fb      	str	r3, [r7, #28]
  return(result);
 800d7d6:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800d7d8:	2b00      	cmp	r3, #0
 800d7da:	f040 8090 	bne.w	800d8fe <osThreadNew+0x13e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d7de:	f3ef 8310 	mrs	r3, PRIMASK
 800d7e2:	61bb      	str	r3, [r7, #24]
  return(result);
 800d7e4:	69bb      	ldr	r3, [r7, #24]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d105      	bne.n	800d7f6 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d7ea:	f3ef 8311 	mrs	r3, BASEPRI
 800d7ee:	617b      	str	r3, [r7, #20]
  return(result);
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d003      	beq.n	800d7fe <osThreadNew+0x3e>
 800d7f6:	4b44      	ldr	r3, [pc, #272]	; (800d908 <osThreadNew+0x148>)
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	d07f      	beq.n	800d8fe <osThreadNew+0x13e>
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d07c      	beq.n	800d8fe <osThreadNew+0x13e>
    stack = configMINIMAL_STACK_SIZE;
 800d804:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d808:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800d80a:	2318      	movs	r3, #24
 800d80c:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800d80e:	2300      	movs	r3, #0
 800d810:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800d812:	f04f 33ff 	mov.w	r3, #4294967295
 800d816:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d045      	beq.n	800d8aa <osThreadNew+0xea>
      if (attr->name != NULL) {
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d002      	beq.n	800d82c <osThreadNew+0x6c>
        name = attr->name;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	699b      	ldr	r3, [r3, #24]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d002      	beq.n	800d83a <osThreadNew+0x7a>
        prio = (UBaseType_t)attr->priority;
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	699b      	ldr	r3, [r3, #24]
 800d838:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d83a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d008      	beq.n	800d852 <osThreadNew+0x92>
 800d840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d842:	2b38      	cmp	r3, #56	; 0x38
 800d844:	d805      	bhi.n	800d852 <osThreadNew+0x92>
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	685b      	ldr	r3, [r3, #4]
 800d84a:	f003 0301 	and.w	r3, r3, #1
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d001      	beq.n	800d856 <osThreadNew+0x96>
        return (NULL);
 800d852:	2300      	movs	r3, #0
 800d854:	e054      	b.n	800d900 <osThreadNew+0x140>
      }

      if (attr->stack_size > 0U) {
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	695b      	ldr	r3, [r3, #20]
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d003      	beq.n	800d866 <osThreadNew+0xa6>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	695b      	ldr	r3, [r3, #20]
 800d862:	089b      	lsrs	r3, r3, #2
 800d864:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	689b      	ldr	r3, [r3, #8]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d00e      	beq.n	800d88c <osThreadNew+0xcc>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	68db      	ldr	r3, [r3, #12]
 800d872:	2bbb      	cmp	r3, #187	; 0xbb
 800d874:	d90a      	bls.n	800d88c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	d006      	beq.n	800d88c <osThreadNew+0xcc>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	695b      	ldr	r3, [r3, #20]
 800d882:	2b00      	cmp	r3, #0
 800d884:	d002      	beq.n	800d88c <osThreadNew+0xcc>
        mem = 1;
 800d886:	2301      	movs	r3, #1
 800d888:	623b      	str	r3, [r7, #32]
 800d88a:	e010      	b.n	800d8ae <osThreadNew+0xee>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	689b      	ldr	r3, [r3, #8]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d10c      	bne.n	800d8ae <osThreadNew+0xee>
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	68db      	ldr	r3, [r3, #12]
 800d898:	2b00      	cmp	r3, #0
 800d89a:	d108      	bne.n	800d8ae <osThreadNew+0xee>
 800d89c:	687b      	ldr	r3, [r7, #4]
 800d89e:	691b      	ldr	r3, [r3, #16]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d104      	bne.n	800d8ae <osThreadNew+0xee>
          mem = 0;
 800d8a4:	2300      	movs	r3, #0
 800d8a6:	623b      	str	r3, [r7, #32]
 800d8a8:	e001      	b.n	800d8ae <osThreadNew+0xee>
        }
      }
    }
    else {
      mem = 0;
 800d8aa:	2300      	movs	r3, #0
 800d8ac:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800d8ae:	6a3b      	ldr	r3, [r7, #32]
 800d8b0:	2b01      	cmp	r3, #1
 800d8b2:	d110      	bne.n	800d8d6 <osThreadNew+0x116>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800d8b8:	687a      	ldr	r2, [r7, #4]
 800d8ba:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d8bc:	9202      	str	r2, [sp, #8]
 800d8be:	9301      	str	r3, [sp, #4]
 800d8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c2:	9300      	str	r3, [sp, #0]
 800d8c4:	68bb      	ldr	r3, [r7, #8]
 800d8c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d8c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8ca:	68f8      	ldr	r0, [r7, #12]
 800d8cc:	f001 fc50 	bl	800f170 <xTaskCreateStatic>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	613b      	str	r3, [r7, #16]
 800d8d4:	e013      	b.n	800d8fe <osThreadNew+0x13e>
    }
    else {
      if (mem == 0) {
 800d8d6:	6a3b      	ldr	r3, [r7, #32]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d110      	bne.n	800d8fe <osThreadNew+0x13e>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d8dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8de:	b29a      	uxth	r2, r3
 800d8e0:	f107 0310 	add.w	r3, r7, #16
 800d8e4:	9301      	str	r3, [sp, #4]
 800d8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8e8:	9300      	str	r3, [sp, #0]
 800d8ea:	68bb      	ldr	r3, [r7, #8]
 800d8ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d8ee:	68f8      	ldr	r0, [r7, #12]
 800d8f0:	f001 fca1 	bl	800f236 <xTaskCreate>
 800d8f4:	4603      	mov	r3, r0
 800d8f6:	2b01      	cmp	r3, #1
 800d8f8:	d001      	beq.n	800d8fe <osThreadNew+0x13e>
          hTask = NULL;
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d8fe:	693b      	ldr	r3, [r7, #16]
}
 800d900:	4618      	mov	r0, r3
 800d902:	3730      	adds	r7, #48	; 0x30
 800d904:	46bd      	mov	sp, r7
 800d906:	bd80      	pop	{r7, pc}
 800d908:	20000884 	.word	0x20000884

0800d90c <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d90c:	b580      	push	{r7, lr}
 800d90e:	b086      	sub	sp, #24
 800d910:	af00      	add	r7, sp, #0
 800d912:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d914:	f3ef 8305 	mrs	r3, IPSR
 800d918:	613b      	str	r3, [r7, #16]
  return(result);
 800d91a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d10f      	bne.n	800d940 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d920:	f3ef 8310 	mrs	r3, PRIMASK
 800d924:	60fb      	str	r3, [r7, #12]
  return(result);
 800d926:	68fb      	ldr	r3, [r7, #12]
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d105      	bne.n	800d938 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d92c:	f3ef 8311 	mrs	r3, BASEPRI
 800d930:	60bb      	str	r3, [r7, #8]
  return(result);
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	2b00      	cmp	r3, #0
 800d936:	d007      	beq.n	800d948 <osDelay+0x3c>
 800d938:	4b0a      	ldr	r3, [pc, #40]	; (800d964 <osDelay+0x58>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	2b02      	cmp	r3, #2
 800d93e:	d103      	bne.n	800d948 <osDelay+0x3c>
    stat = osErrorISR;
 800d940:	f06f 0305 	mvn.w	r3, #5
 800d944:	617b      	str	r3, [r7, #20]
 800d946:	e007      	b.n	800d958 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d948:	2300      	movs	r3, #0
 800d94a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d002      	beq.n	800d958 <osDelay+0x4c>
      vTaskDelay(ticks);
 800d952:	6878      	ldr	r0, [r7, #4]
 800d954:	f001 fdcc 	bl	800f4f0 <vTaskDelay>
    }
  }

  return (stat);
 800d958:	697b      	ldr	r3, [r7, #20]
}
 800d95a:	4618      	mov	r0, r3
 800d95c:	3718      	adds	r7, #24
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop
 800d964:	20000884 	.word	0x20000884

0800d968 <osSemaphoreNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d968:	b580      	push	{r7, lr}
 800d96a:	b08c      	sub	sp, #48	; 0x30
 800d96c:	af02      	add	r7, sp, #8
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800d974:	2300      	movs	r3, #0
 800d976:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d978:	f3ef 8305 	mrs	r3, IPSR
 800d97c:	61bb      	str	r3, [r7, #24]
  return(result);
 800d97e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d980:	2b00      	cmp	r3, #0
 800d982:	f040 8086 	bne.w	800da92 <osSemaphoreNew+0x12a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d986:	f3ef 8310 	mrs	r3, PRIMASK
 800d98a:	617b      	str	r3, [r7, #20]
  return(result);
 800d98c:	697b      	ldr	r3, [r7, #20]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d105      	bne.n	800d99e <osSemaphoreNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d992:	f3ef 8311 	mrs	r3, BASEPRI
 800d996:	613b      	str	r3, [r7, #16]
  return(result);
 800d998:	693b      	ldr	r3, [r7, #16]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d003      	beq.n	800d9a6 <osSemaphoreNew+0x3e>
 800d99e:	4b3f      	ldr	r3, [pc, #252]	; (800da9c <osSemaphoreNew+0x134>)
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	2b02      	cmp	r3, #2
 800d9a4:	d075      	beq.n	800da92 <osSemaphoreNew+0x12a>
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d072      	beq.n	800da92 <osSemaphoreNew+0x12a>
 800d9ac:	68ba      	ldr	r2, [r7, #8]
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	429a      	cmp	r2, r3
 800d9b2:	d86e      	bhi.n	800da92 <osSemaphoreNew+0x12a>
    mem = -1;
 800d9b4:	f04f 33ff 	mov.w	r3, #4294967295
 800d9b8:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800d9ba:	687b      	ldr	r3, [r7, #4]
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d015      	beq.n	800d9ec <osSemaphoreNew+0x84>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	689b      	ldr	r3, [r3, #8]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d006      	beq.n	800d9d6 <osSemaphoreNew+0x6e>
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	2b4f      	cmp	r3, #79	; 0x4f
 800d9ce:	d902      	bls.n	800d9d6 <osSemaphoreNew+0x6e>
        mem = 1;
 800d9d0:	2301      	movs	r3, #1
 800d9d2:	623b      	str	r3, [r7, #32]
 800d9d4:	e00c      	b.n	800d9f0 <osSemaphoreNew+0x88>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	689b      	ldr	r3, [r3, #8]
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	d108      	bne.n	800d9f0 <osSemaphoreNew+0x88>
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	68db      	ldr	r3, [r3, #12]
 800d9e2:	2b00      	cmp	r3, #0
 800d9e4:	d104      	bne.n	800d9f0 <osSemaphoreNew+0x88>
          mem = 0;
 800d9e6:	2300      	movs	r3, #0
 800d9e8:	623b      	str	r3, [r7, #32]
 800d9ea:	e001      	b.n	800d9f0 <osSemaphoreNew+0x88>
        }
      }
    }
    else {
      mem = 0;
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	623b      	str	r3, [r7, #32]
    }

    if (mem != -1) {
 800d9f0:	6a3b      	ldr	r3, [r7, #32]
 800d9f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9f6:	d04c      	beq.n	800da92 <osSemaphoreNew+0x12a>
      if (max_count == 1U) {
 800d9f8:	68fb      	ldr	r3, [r7, #12]
 800d9fa:	2b01      	cmp	r3, #1
 800d9fc:	d128      	bne.n	800da50 <osSemaphoreNew+0xe8>
        if (mem == 1) {
 800d9fe:	6a3b      	ldr	r3, [r7, #32]
 800da00:	2b01      	cmp	r3, #1
 800da02:	d10a      	bne.n	800da1a <osSemaphoreNew+0xb2>
          hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	689b      	ldr	r3, [r3, #8]
 800da08:	2203      	movs	r2, #3
 800da0a:	9200      	str	r2, [sp, #0]
 800da0c:	2200      	movs	r2, #0
 800da0e:	2100      	movs	r1, #0
 800da10:	2001      	movs	r0, #1
 800da12:	f000 fbc1 	bl	800e198 <xQueueGenericCreateStatic>
 800da16:	6278      	str	r0, [r7, #36]	; 0x24
 800da18:	e005      	b.n	800da26 <osSemaphoreNew+0xbe>
        }
        else {
          hSemaphore = xSemaphoreCreateBinary();
 800da1a:	2203      	movs	r2, #3
 800da1c:	2100      	movs	r1, #0
 800da1e:	2001      	movs	r0, #1
 800da20:	f000 fc3c 	bl	800e29c <xQueueGenericCreate>
 800da24:	6278      	str	r0, [r7, #36]	; 0x24
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800da26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d022      	beq.n	800da72 <osSemaphoreNew+0x10a>
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d01f      	beq.n	800da72 <osSemaphoreNew+0x10a>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800da32:	2300      	movs	r3, #0
 800da34:	2200      	movs	r2, #0
 800da36:	2100      	movs	r1, #0
 800da38:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da3a:	f000 fd07 	bl	800e44c <xQueueGenericSend>
 800da3e:	4603      	mov	r3, r0
 800da40:	2b01      	cmp	r3, #1
 800da42:	d016      	beq.n	800da72 <osSemaphoreNew+0x10a>
            vSemaphoreDelete (hSemaphore);
 800da44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da46:	f001 f9bd 	bl	800edc4 <vQueueDelete>
            hSemaphore = NULL;
 800da4a:	2300      	movs	r3, #0
 800da4c:	627b      	str	r3, [r7, #36]	; 0x24
 800da4e:	e010      	b.n	800da72 <osSemaphoreNew+0x10a>
          }
        }
      }
      else {
        if (mem == 1) {
 800da50:	6a3b      	ldr	r3, [r7, #32]
 800da52:	2b01      	cmp	r3, #1
 800da54:	d108      	bne.n	800da68 <osSemaphoreNew+0x100>
          hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	689b      	ldr	r3, [r3, #8]
 800da5a:	461a      	mov	r2, r3
 800da5c:	68b9      	ldr	r1, [r7, #8]
 800da5e:	68f8      	ldr	r0, [r7, #12]
 800da60:	f000 fc81 	bl	800e366 <xQueueCreateCountingSemaphoreStatic>
 800da64:	6278      	str	r0, [r7, #36]	; 0x24
 800da66:	e004      	b.n	800da72 <osSemaphoreNew+0x10a>
        }
        else {
          hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800da68:	68b9      	ldr	r1, [r7, #8]
 800da6a:	68f8      	ldr	r0, [r7, #12]
 800da6c:	f000 fcb6 	bl	800e3dc <xQueueCreateCountingSemaphore>
 800da70:	6278      	str	r0, [r7, #36]	; 0x24
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800da72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da74:	2b00      	cmp	r3, #0
 800da76:	d00c      	beq.n	800da92 <osSemaphoreNew+0x12a>
        if (attr != NULL) {
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	d003      	beq.n	800da86 <osSemaphoreNew+0x11e>
          name = attr->name;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	681b      	ldr	r3, [r3, #0]
 800da82:	61fb      	str	r3, [r7, #28]
 800da84:	e001      	b.n	800da8a <osSemaphoreNew+0x122>
        } else {
          name = NULL;
 800da86:	2300      	movs	r3, #0
 800da88:	61fb      	str	r3, [r7, #28]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800da8a:	69f9      	ldr	r1, [r7, #28]
 800da8c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800da8e:	f001 fae7 	bl	800f060 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800da92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800da94:	4618      	mov	r0, r3
 800da96:	3728      	adds	r7, #40	; 0x28
 800da98:	46bd      	mov	sp, r7
 800da9a:	bd80      	pop	{r7, pc}
 800da9c:	20000884 	.word	0x20000884

0800daa0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b088      	sub	sp, #32
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800daae:	2300      	movs	r3, #0
 800dab0:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800dab2:	69bb      	ldr	r3, [r7, #24]
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	d103      	bne.n	800dac0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800dab8:	f06f 0303 	mvn.w	r3, #3
 800dabc:	61fb      	str	r3, [r7, #28]
 800dabe:	e04b      	b.n	800db58 <osSemaphoreAcquire+0xb8>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dac0:	f3ef 8305 	mrs	r3, IPSR
 800dac4:	617b      	str	r3, [r7, #20]
  return(result);
 800dac6:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d10f      	bne.n	800daec <osSemaphoreAcquire+0x4c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dacc:	f3ef 8310 	mrs	r3, PRIMASK
 800dad0:	613b      	str	r3, [r7, #16]
  return(result);
 800dad2:	693b      	ldr	r3, [r7, #16]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d105      	bne.n	800dae4 <osSemaphoreAcquire+0x44>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dad8:	f3ef 8311 	mrs	r3, BASEPRI
 800dadc:	60fb      	str	r3, [r7, #12]
  return(result);
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d026      	beq.n	800db32 <osSemaphoreAcquire+0x92>
 800dae4:	4b1f      	ldr	r3, [pc, #124]	; (800db64 <osSemaphoreAcquire+0xc4>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	2b02      	cmp	r3, #2
 800daea:	d122      	bne.n	800db32 <osSemaphoreAcquire+0x92>
    if (timeout != 0U) {
 800daec:	683b      	ldr	r3, [r7, #0]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d003      	beq.n	800dafa <osSemaphoreAcquire+0x5a>
      stat = osErrorParameter;
 800daf2:	f06f 0303 	mvn.w	r3, #3
 800daf6:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800daf8:	e02d      	b.n	800db56 <osSemaphoreAcquire+0xb6>
    }
    else {
      yield = pdFALSE;
 800dafa:	2300      	movs	r3, #0
 800dafc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800dafe:	f107 0308 	add.w	r3, r7, #8
 800db02:	461a      	mov	r2, r3
 800db04:	2100      	movs	r1, #0
 800db06:	69b8      	ldr	r0, [r7, #24]
 800db08:	f001 f8d6 	bl	800ecb8 <xQueueReceiveFromISR>
 800db0c:	4603      	mov	r3, r0
 800db0e:	2b01      	cmp	r3, #1
 800db10:	d003      	beq.n	800db1a <osSemaphoreAcquire+0x7a>
        stat = osErrorResource;
 800db12:	f06f 0302 	mvn.w	r3, #2
 800db16:	61fb      	str	r3, [r7, #28]
    if (timeout != 0U) {
 800db18:	e01d      	b.n	800db56 <osSemaphoreAcquire+0xb6>
      } else {
        portYIELD_FROM_ISR (yield);
 800db1a:	68bb      	ldr	r3, [r7, #8]
 800db1c:	2b00      	cmp	r3, #0
 800db1e:	d01a      	beq.n	800db56 <osSemaphoreAcquire+0xb6>
 800db20:	4b11      	ldr	r3, [pc, #68]	; (800db68 <osSemaphoreAcquire+0xc8>)
 800db22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db26:	601a      	str	r2, [r3, #0]
 800db28:	f3bf 8f4f 	dsb	sy
 800db2c:	f3bf 8f6f 	isb	sy
    if (timeout != 0U) {
 800db30:	e011      	b.n	800db56 <osSemaphoreAcquire+0xb6>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800db32:	6839      	ldr	r1, [r7, #0]
 800db34:	69b8      	ldr	r0, [r7, #24]
 800db36:	f000 ffab 	bl	800ea90 <xQueueSemaphoreTake>
 800db3a:	4603      	mov	r3, r0
 800db3c:	2b01      	cmp	r3, #1
 800db3e:	d00b      	beq.n	800db58 <osSemaphoreAcquire+0xb8>
      if (timeout != 0U) {
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d003      	beq.n	800db4e <osSemaphoreAcquire+0xae>
        stat = osErrorTimeout;
 800db46:	f06f 0301 	mvn.w	r3, #1
 800db4a:	61fb      	str	r3, [r7, #28]
 800db4c:	e004      	b.n	800db58 <osSemaphoreAcquire+0xb8>
      } else {
        stat = osErrorResource;
 800db4e:	f06f 0302 	mvn.w	r3, #2
 800db52:	61fb      	str	r3, [r7, #28]
 800db54:	e000      	b.n	800db58 <osSemaphoreAcquire+0xb8>
    if (timeout != 0U) {
 800db56:	bf00      	nop
      }
    }
  }

  return (stat);
 800db58:	69fb      	ldr	r3, [r7, #28]
}
 800db5a:	4618      	mov	r0, r3
 800db5c:	3720      	adds	r7, #32
 800db5e:	46bd      	mov	sp, r7
 800db60:	bd80      	pop	{r7, pc}
 800db62:	bf00      	nop
 800db64:	20000884 	.word	0x20000884
 800db68:	e000ed04 	.word	0xe000ed04

0800db6c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800db6c:	b580      	push	{r7, lr}
 800db6e:	b088      	sub	sp, #32
 800db70:	af00      	add	r7, sp, #0
 800db72:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800db78:	2300      	movs	r3, #0
 800db7a:	61fb      	str	r3, [r7, #28]

  if (hSemaphore == NULL) {
 800db7c:	69bb      	ldr	r3, [r7, #24]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d103      	bne.n	800db8a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800db82:	f06f 0303 	mvn.w	r3, #3
 800db86:	61fb      	str	r3, [r7, #28]
 800db88:	e03e      	b.n	800dc08 <osSemaphoreRelease+0x9c>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800db8a:	f3ef 8305 	mrs	r3, IPSR
 800db8e:	617b      	str	r3, [r7, #20]
  return(result);
 800db90:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800db92:	2b00      	cmp	r3, #0
 800db94:	d10f      	bne.n	800dbb6 <osSemaphoreRelease+0x4a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db96:	f3ef 8310 	mrs	r3, PRIMASK
 800db9a:	613b      	str	r3, [r7, #16]
  return(result);
 800db9c:	693b      	ldr	r3, [r7, #16]
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d105      	bne.n	800dbae <osSemaphoreRelease+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dba2:	f3ef 8311 	mrs	r3, BASEPRI
 800dba6:	60fb      	str	r3, [r7, #12]
  return(result);
 800dba8:	68fb      	ldr	r3, [r7, #12]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d01e      	beq.n	800dbec <osSemaphoreRelease+0x80>
 800dbae:	4b19      	ldr	r3, [pc, #100]	; (800dc14 <osSemaphoreRelease+0xa8>)
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	2b02      	cmp	r3, #2
 800dbb4:	d11a      	bne.n	800dbec <osSemaphoreRelease+0x80>
    yield = pdFALSE;
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dbba:	f107 0308 	add.w	r3, r7, #8
 800dbbe:	4619      	mov	r1, r3
 800dbc0:	69b8      	ldr	r0, [r7, #24]
 800dbc2:	f000 fde9 	bl	800e798 <xQueueGiveFromISR>
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	2b01      	cmp	r3, #1
 800dbca:	d003      	beq.n	800dbd4 <osSemaphoreRelease+0x68>
      stat = osErrorResource;
 800dbcc:	f06f 0302 	mvn.w	r3, #2
 800dbd0:	61fb      	str	r3, [r7, #28]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dbd2:	e018      	b.n	800dc06 <osSemaphoreRelease+0x9a>
    } else {
      portYIELD_FROM_ISR (yield);
 800dbd4:	68bb      	ldr	r3, [r7, #8]
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d015      	beq.n	800dc06 <osSemaphoreRelease+0x9a>
 800dbda:	4b0f      	ldr	r3, [pc, #60]	; (800dc18 <osSemaphoreRelease+0xac>)
 800dbdc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbe0:	601a      	str	r2, [r3, #0]
 800dbe2:	f3bf 8f4f 	dsb	sy
 800dbe6:	f3bf 8f6f 	isb	sy
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dbea:	e00c      	b.n	800dc06 <osSemaphoreRelease+0x9a>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800dbec:	2300      	movs	r3, #0
 800dbee:	2200      	movs	r2, #0
 800dbf0:	2100      	movs	r1, #0
 800dbf2:	69b8      	ldr	r0, [r7, #24]
 800dbf4:	f000 fc2a 	bl	800e44c <xQueueGenericSend>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b01      	cmp	r3, #1
 800dbfc:	d004      	beq.n	800dc08 <osSemaphoreRelease+0x9c>
      stat = osErrorResource;
 800dbfe:	f06f 0302 	mvn.w	r3, #2
 800dc02:	61fb      	str	r3, [r7, #28]
 800dc04:	e000      	b.n	800dc08 <osSemaphoreRelease+0x9c>
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dc06:	bf00      	nop
    }
  }

  return (stat);
 800dc08:	69fb      	ldr	r3, [r7, #28]
}
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	3720      	adds	r7, #32
 800dc0e:	46bd      	mov	sp, r7
 800dc10:	bd80      	pop	{r7, pc}
 800dc12:	bf00      	nop
 800dc14:	20000884 	.word	0x20000884
 800dc18:	e000ed04 	.word	0xe000ed04

0800dc1c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b08c      	sub	sp, #48	; 0x30
 800dc20:	af02      	add	r7, sp, #8
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800dc28:	2300      	movs	r3, #0
 800dc2a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dc2c:	f3ef 8305 	mrs	r3, IPSR
 800dc30:	61bb      	str	r3, [r7, #24]
  return(result);
 800dc32:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d16f      	bne.n	800dd18 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc38:	f3ef 8310 	mrs	r3, PRIMASK
 800dc3c:	617b      	str	r3, [r7, #20]
  return(result);
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d105      	bne.n	800dc50 <osMessageQueueNew+0x34>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dc44:	f3ef 8311 	mrs	r3, BASEPRI
 800dc48:	613b      	str	r3, [r7, #16]
  return(result);
 800dc4a:	693b      	ldr	r3, [r7, #16]
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d003      	beq.n	800dc58 <osMessageQueueNew+0x3c>
 800dc50:	4b34      	ldr	r3, [pc, #208]	; (800dd24 <osMessageQueueNew+0x108>)
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	2b02      	cmp	r3, #2
 800dc56:	d05f      	beq.n	800dd18 <osMessageQueueNew+0xfc>
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d05c      	beq.n	800dd18 <osMessageQueueNew+0xfc>
 800dc5e:	68bb      	ldr	r3, [r7, #8]
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d059      	beq.n	800dd18 <osMessageQueueNew+0xfc>
    mem = -1;
 800dc64:	f04f 33ff 	mov.w	r3, #4294967295
 800dc68:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d029      	beq.n	800dcc4 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	689b      	ldr	r3, [r3, #8]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d012      	beq.n	800dc9e <osMessageQueueNew+0x82>
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	68db      	ldr	r3, [r3, #12]
 800dc7c:	2b4f      	cmp	r3, #79	; 0x4f
 800dc7e:	d90e      	bls.n	800dc9e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dc80:	687b      	ldr	r3, [r7, #4]
 800dc82:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800dc84:	2b00      	cmp	r3, #0
 800dc86:	d00a      	beq.n	800dc9e <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	695a      	ldr	r2, [r3, #20]
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	68b9      	ldr	r1, [r7, #8]
 800dc90:	fb01 f303 	mul.w	r3, r1, r3
 800dc94:	429a      	cmp	r2, r3
 800dc96:	d302      	bcc.n	800dc9e <osMessageQueueNew+0x82>
        mem = 1;
 800dc98:	2301      	movs	r3, #1
 800dc9a:	623b      	str	r3, [r7, #32]
 800dc9c:	e014      	b.n	800dcc8 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	689b      	ldr	r3, [r3, #8]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d110      	bne.n	800dcc8 <osMessageQueueNew+0xac>
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	68db      	ldr	r3, [r3, #12]
 800dcaa:	2b00      	cmp	r3, #0
 800dcac:	d10c      	bne.n	800dcc8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d108      	bne.n	800dcc8 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	695b      	ldr	r3, [r3, #20]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d104      	bne.n	800dcc8 <osMessageQueueNew+0xac>
          mem = 0;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	623b      	str	r3, [r7, #32]
 800dcc2:	e001      	b.n	800dcc8 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800dcc8:	6a3b      	ldr	r3, [r7, #32]
 800dcca:	2b01      	cmp	r3, #1
 800dccc:	d10b      	bne.n	800dce6 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	691a      	ldr	r2, [r3, #16]
 800dcd2:	687b      	ldr	r3, [r7, #4]
 800dcd4:	689b      	ldr	r3, [r3, #8]
 800dcd6:	2100      	movs	r1, #0
 800dcd8:	9100      	str	r1, [sp, #0]
 800dcda:	68b9      	ldr	r1, [r7, #8]
 800dcdc:	68f8      	ldr	r0, [r7, #12]
 800dcde:	f000 fa5b 	bl	800e198 <xQueueGenericCreateStatic>
 800dce2:	6278      	str	r0, [r7, #36]	; 0x24
 800dce4:	e008      	b.n	800dcf8 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 800dce6:	6a3b      	ldr	r3, [r7, #32]
 800dce8:	2b00      	cmp	r3, #0
 800dcea:	d105      	bne.n	800dcf8 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 800dcec:	2200      	movs	r2, #0
 800dcee:	68b9      	ldr	r1, [r7, #8]
 800dcf0:	68f8      	ldr	r0, [r7, #12]
 800dcf2:	f000 fad3 	bl	800e29c <xQueueGenericCreate>
 800dcf6:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800dcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dcfa:	2b00      	cmp	r3, #0
 800dcfc:	d00c      	beq.n	800dd18 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d003      	beq.n	800dd0c <osMessageQueueNew+0xf0>
        name = attr->name;
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	61fb      	str	r3, [r7, #28]
 800dd0a:	e001      	b.n	800dd10 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800dd10:	69f9      	ldr	r1, [r7, #28]
 800dd12:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dd14:	f001 f9a4 	bl	800f060 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800dd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3728      	adds	r7, #40	; 0x28
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	20000884 	.word	0x20000884

0800dd28 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dd28:	b580      	push	{r7, lr}
 800dd2a:	b08a      	sub	sp, #40	; 0x28
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	60f8      	str	r0, [r7, #12]
 800dd30:	60b9      	str	r1, [r7, #8]
 800dd32:	603b      	str	r3, [r7, #0]
 800dd34:	4613      	mov	r3, r2
 800dd36:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800dd3c:	2300      	movs	r3, #0
 800dd3e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800dd40:	f3ef 8305 	mrs	r3, IPSR
 800dd44:	61fb      	str	r3, [r7, #28]
  return(result);
 800dd46:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d10f      	bne.n	800dd6c <osMessageQueuePut+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dd4c:	f3ef 8310 	mrs	r3, PRIMASK
 800dd50:	61bb      	str	r3, [r7, #24]
  return(result);
 800dd52:	69bb      	ldr	r3, [r7, #24]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	d105      	bne.n	800dd64 <osMessageQueuePut+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800dd58:	f3ef 8311 	mrs	r3, BASEPRI
 800dd5c:	617b      	str	r3, [r7, #20]
  return(result);
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d02c      	beq.n	800ddbe <osMessageQueuePut+0x96>
 800dd64:	4b28      	ldr	r3, [pc, #160]	; (800de08 <osMessageQueuePut+0xe0>)
 800dd66:	681b      	ldr	r3, [r3, #0]
 800dd68:	2b02      	cmp	r3, #2
 800dd6a:	d128      	bne.n	800ddbe <osMessageQueuePut+0x96>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd6c:	6a3b      	ldr	r3, [r7, #32]
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	d005      	beq.n	800dd7e <osMessageQueuePut+0x56>
 800dd72:	68bb      	ldr	r3, [r7, #8]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d002      	beq.n	800dd7e <osMessageQueuePut+0x56>
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d003      	beq.n	800dd86 <osMessageQueuePut+0x5e>
      stat = osErrorParameter;
 800dd7e:	f06f 0303 	mvn.w	r3, #3
 800dd82:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dd84:	e039      	b.n	800ddfa <osMessageQueuePut+0xd2>
    }
    else {
      yield = pdFALSE;
 800dd86:	2300      	movs	r3, #0
 800dd88:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dd8a:	f107 0210 	add.w	r2, r7, #16
 800dd8e:	2300      	movs	r3, #0
 800dd90:	68b9      	ldr	r1, [r7, #8]
 800dd92:	6a38      	ldr	r0, [r7, #32]
 800dd94:	f000 fc60 	bl	800e658 <xQueueGenericSendFromISR>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d003      	beq.n	800dda6 <osMessageQueuePut+0x7e>
        stat = osErrorResource;
 800dd9e:	f06f 0302 	mvn.w	r3, #2
 800dda2:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dda4:	e029      	b.n	800ddfa <osMessageQueuePut+0xd2>
      } else {
        portYIELD_FROM_ISR (yield);
 800dda6:	693b      	ldr	r3, [r7, #16]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d026      	beq.n	800ddfa <osMessageQueuePut+0xd2>
 800ddac:	4b17      	ldr	r3, [pc, #92]	; (800de0c <osMessageQueuePut+0xe4>)
 800ddae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddb2:	601a      	str	r2, [r3, #0]
 800ddb4:	f3bf 8f4f 	dsb	sy
 800ddb8:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ddbc:	e01d      	b.n	800ddfa <osMessageQueuePut+0xd2>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800ddbe:	6a3b      	ldr	r3, [r7, #32]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d002      	beq.n	800ddca <osMessageQueuePut+0xa2>
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	2b00      	cmp	r3, #0
 800ddc8:	d103      	bne.n	800ddd2 <osMessageQueuePut+0xaa>
      stat = osErrorParameter;
 800ddca:	f06f 0303 	mvn.w	r3, #3
 800ddce:	627b      	str	r3, [r7, #36]	; 0x24
 800ddd0:	e014      	b.n	800ddfc <osMessageQueuePut+0xd4>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800ddd2:	2300      	movs	r3, #0
 800ddd4:	683a      	ldr	r2, [r7, #0]
 800ddd6:	68b9      	ldr	r1, [r7, #8]
 800ddd8:	6a38      	ldr	r0, [r7, #32]
 800ddda:	f000 fb37 	bl	800e44c <xQueueGenericSend>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b01      	cmp	r3, #1
 800dde2:	d00b      	beq.n	800ddfc <osMessageQueuePut+0xd4>
        if (timeout != 0U) {
 800dde4:	683b      	ldr	r3, [r7, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d003      	beq.n	800ddf2 <osMessageQueuePut+0xca>
          stat = osErrorTimeout;
 800ddea:	f06f 0301 	mvn.w	r3, #1
 800ddee:	627b      	str	r3, [r7, #36]	; 0x24
 800ddf0:	e004      	b.n	800ddfc <osMessageQueuePut+0xd4>
        } else {
          stat = osErrorResource;
 800ddf2:	f06f 0302 	mvn.w	r3, #2
 800ddf6:	627b      	str	r3, [r7, #36]	; 0x24
 800ddf8:	e000      	b.n	800ddfc <osMessageQueuePut+0xd4>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800ddfa:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800ddfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ddfe:	4618      	mov	r0, r3
 800de00:	3728      	adds	r7, #40	; 0x28
 800de02:	46bd      	mov	sp, r7
 800de04:	bd80      	pop	{r7, pc}
 800de06:	bf00      	nop
 800de08:	20000884 	.word	0x20000884
 800de0c:	e000ed04 	.word	0xe000ed04

0800de10 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800de10:	b580      	push	{r7, lr}
 800de12:	b08a      	sub	sp, #40	; 0x28
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	607a      	str	r2, [r7, #4]
 800de1c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	623b      	str	r3, [r7, #32]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800de22:	2300      	movs	r3, #0
 800de24:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800de26:	f3ef 8305 	mrs	r3, IPSR
 800de2a:	61fb      	str	r3, [r7, #28]
  return(result);
 800de2c:	69fb      	ldr	r3, [r7, #28]

  if (IS_IRQ()) {
 800de2e:	2b00      	cmp	r3, #0
 800de30:	d10f      	bne.n	800de52 <osMessageQueueGet+0x42>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de32:	f3ef 8310 	mrs	r3, PRIMASK
 800de36:	61bb      	str	r3, [r7, #24]
  return(result);
 800de38:	69bb      	ldr	r3, [r7, #24]
 800de3a:	2b00      	cmp	r3, #0
 800de3c:	d105      	bne.n	800de4a <osMessageQueueGet+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800de3e:	f3ef 8311 	mrs	r3, BASEPRI
 800de42:	617b      	str	r3, [r7, #20]
  return(result);
 800de44:	697b      	ldr	r3, [r7, #20]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d02c      	beq.n	800dea4 <osMessageQueueGet+0x94>
 800de4a:	4b28      	ldr	r3, [pc, #160]	; (800deec <osMessageQueueGet+0xdc>)
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	2b02      	cmp	r3, #2
 800de50:	d128      	bne.n	800dea4 <osMessageQueueGet+0x94>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800de52:	6a3b      	ldr	r3, [r7, #32]
 800de54:	2b00      	cmp	r3, #0
 800de56:	d005      	beq.n	800de64 <osMessageQueueGet+0x54>
 800de58:	68bb      	ldr	r3, [r7, #8]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d002      	beq.n	800de64 <osMessageQueueGet+0x54>
 800de5e:	683b      	ldr	r3, [r7, #0]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d003      	beq.n	800de6c <osMessageQueueGet+0x5c>
      stat = osErrorParameter;
 800de64:	f06f 0303 	mvn.w	r3, #3
 800de68:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800de6a:	e038      	b.n	800dede <osMessageQueueGet+0xce>
    }
    else {
      yield = pdFALSE;
 800de6c:	2300      	movs	r3, #0
 800de6e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800de70:	f107 0310 	add.w	r3, r7, #16
 800de74:	461a      	mov	r2, r3
 800de76:	68b9      	ldr	r1, [r7, #8]
 800de78:	6a38      	ldr	r0, [r7, #32]
 800de7a:	f000 ff1d 	bl	800ecb8 <xQueueReceiveFromISR>
 800de7e:	4603      	mov	r3, r0
 800de80:	2b01      	cmp	r3, #1
 800de82:	d003      	beq.n	800de8c <osMessageQueueGet+0x7c>
        stat = osErrorResource;
 800de84:	f06f 0302 	mvn.w	r3, #2
 800de88:	627b      	str	r3, [r7, #36]	; 0x24
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800de8a:	e028      	b.n	800dede <osMessageQueueGet+0xce>
      } else {
        portYIELD_FROM_ISR (yield);
 800de8c:	693b      	ldr	r3, [r7, #16]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d025      	beq.n	800dede <osMessageQueueGet+0xce>
 800de92:	4b17      	ldr	r3, [pc, #92]	; (800def0 <osMessageQueueGet+0xe0>)
 800de94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de98:	601a      	str	r2, [r3, #0]
 800de9a:	f3bf 8f4f 	dsb	sy
 800de9e:	f3bf 8f6f 	isb	sy
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dea2:	e01c      	b.n	800dede <osMessageQueueGet+0xce>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dea4:	6a3b      	ldr	r3, [r7, #32]
 800dea6:	2b00      	cmp	r3, #0
 800dea8:	d002      	beq.n	800deb0 <osMessageQueueGet+0xa0>
 800deaa:	68bb      	ldr	r3, [r7, #8]
 800deac:	2b00      	cmp	r3, #0
 800deae:	d103      	bne.n	800deb8 <osMessageQueueGet+0xa8>
      stat = osErrorParameter;
 800deb0:	f06f 0303 	mvn.w	r3, #3
 800deb4:	627b      	str	r3, [r7, #36]	; 0x24
 800deb6:	e013      	b.n	800dee0 <osMessageQueueGet+0xd0>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800deb8:	683a      	ldr	r2, [r7, #0]
 800deba:	68b9      	ldr	r1, [r7, #8]
 800debc:	6a38      	ldr	r0, [r7, #32]
 800debe:	f000 fd01 	bl	800e8c4 <xQueueReceive>
 800dec2:	4603      	mov	r3, r0
 800dec4:	2b01      	cmp	r3, #1
 800dec6:	d00b      	beq.n	800dee0 <osMessageQueueGet+0xd0>
        if (timeout != 0U) {
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d003      	beq.n	800ded6 <osMessageQueueGet+0xc6>
          stat = osErrorTimeout;
 800dece:	f06f 0301 	mvn.w	r3, #1
 800ded2:	627b      	str	r3, [r7, #36]	; 0x24
 800ded4:	e004      	b.n	800dee0 <osMessageQueueGet+0xd0>
        } else {
          stat = osErrorResource;
 800ded6:	f06f 0302 	mvn.w	r3, #2
 800deda:	627b      	str	r3, [r7, #36]	; 0x24
 800dedc:	e000      	b.n	800dee0 <osMessageQueueGet+0xd0>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dede:	bf00      	nop
        }
      }
    }
  }

  return (stat);
 800dee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dee2:	4618      	mov	r0, r3
 800dee4:	3728      	adds	r7, #40	; 0x28
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	20000884 	.word	0x20000884
 800def0:	e000ed04 	.word	0xe000ed04

0800def4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800def4:	b480      	push	{r7}
 800def6:	b085      	sub	sp, #20
 800def8:	af00      	add	r7, sp, #0
 800defa:	60f8      	str	r0, [r7, #12]
 800defc:	60b9      	str	r1, [r7, #8]
 800defe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800df00:	68fb      	ldr	r3, [r7, #12]
 800df02:	4a07      	ldr	r2, [pc, #28]	; (800df20 <vApplicationGetIdleTaskMemory+0x2c>)
 800df04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	4a06      	ldr	r2, [pc, #24]	; (800df24 <vApplicationGetIdleTaskMemory+0x30>)
 800df0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800df12:	601a      	str	r2, [r3, #0]
}
 800df14:	bf00      	nop
 800df16:	3714      	adds	r7, #20
 800df18:	46bd      	mov	sp, r7
 800df1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df1e:	4770      	bx	lr
 800df20:	20000888 	.word	0x20000888
 800df24:	20000944 	.word	0x20000944

0800df28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800df28:	b480      	push	{r7}
 800df2a:	b085      	sub	sp, #20
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	4a07      	ldr	r2, [pc, #28]	; (800df54 <vApplicationGetTimerTaskMemory+0x2c>)
 800df38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	4a06      	ldr	r2, [pc, #24]	; (800df58 <vApplicationGetTimerTaskMemory+0x30>)
 800df3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f44f 7200 	mov.w	r2, #512	; 0x200
 800df46:	601a      	str	r2, [r3, #0]
}
 800df48:	bf00      	nop
 800df4a:	3714      	adds	r7, #20
 800df4c:	46bd      	mov	sp, r7
 800df4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df52:	4770      	bx	lr
 800df54:	20000d44 	.word	0x20000d44
 800df58:	20000e00 	.word	0x20000e00

0800df5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800df5c:	b480      	push	{r7}
 800df5e:	b083      	sub	sp, #12
 800df60:	af00      	add	r7, sp, #0
 800df62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	f103 0208 	add.w	r2, r3, #8
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	f04f 32ff 	mov.w	r2, #4294967295
 800df74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	f103 0208 	add.w	r2, r3, #8
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	f103 0208 	add.w	r2, r3, #8
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2200      	movs	r2, #0
 800df8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800df90:	bf00      	nop
 800df92:	370c      	adds	r7, #12
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr

0800df9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800df9c:	b480      	push	{r7}
 800df9e:	b083      	sub	sp, #12
 800dfa0:	af00      	add	r7, sp, #0
 800dfa2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	2200      	movs	r2, #0
 800dfa8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800dfaa:	bf00      	nop
 800dfac:	370c      	adds	r7, #12
 800dfae:	46bd      	mov	sp, r7
 800dfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb4:	4770      	bx	lr

0800dfb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dfb6:	b480      	push	{r7}
 800dfb8:	b085      	sub	sp, #20
 800dfba:	af00      	add	r7, sp, #0
 800dfbc:	6078      	str	r0, [r7, #4]
 800dfbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	685b      	ldr	r3, [r3, #4]
 800dfc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	68fa      	ldr	r2, [r7, #12]
 800dfca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800dfcc:	68fb      	ldr	r3, [r7, #12]
 800dfce:	689a      	ldr	r2, [r3, #8]
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800dfd4:	68fb      	ldr	r3, [r7, #12]
 800dfd6:	689b      	ldr	r3, [r3, #8]
 800dfd8:	683a      	ldr	r2, [r7, #0]
 800dfda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	683a      	ldr	r2, [r7, #0]
 800dfe0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800dfe2:	683b      	ldr	r3, [r7, #0]
 800dfe4:	687a      	ldr	r2, [r7, #4]
 800dfe6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800dfe8:	687b      	ldr	r3, [r7, #4]
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	1c5a      	adds	r2, r3, #1
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	601a      	str	r2, [r3, #0]
}
 800dff2:	bf00      	nop
 800dff4:	3714      	adds	r7, #20
 800dff6:	46bd      	mov	sp, r7
 800dff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dffc:	4770      	bx	lr

0800dffe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dffe:	b480      	push	{r7}
 800e000:	b085      	sub	sp, #20
 800e002:	af00      	add	r7, sp, #0
 800e004:	6078      	str	r0, [r7, #4]
 800e006:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e008:	683b      	ldr	r3, [r7, #0]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e00e:	68bb      	ldr	r3, [r7, #8]
 800e010:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e014:	d103      	bne.n	800e01e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	691b      	ldr	r3, [r3, #16]
 800e01a:	60fb      	str	r3, [r7, #12]
 800e01c:	e00c      	b.n	800e038 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	3308      	adds	r3, #8
 800e022:	60fb      	str	r3, [r7, #12]
 800e024:	e002      	b.n	800e02c <vListInsert+0x2e>
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	685b      	ldr	r3, [r3, #4]
 800e02a:	60fb      	str	r3, [r7, #12]
 800e02c:	68fb      	ldr	r3, [r7, #12]
 800e02e:	685b      	ldr	r3, [r3, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	68ba      	ldr	r2, [r7, #8]
 800e034:	429a      	cmp	r2, r3
 800e036:	d2f6      	bcs.n	800e026 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e038:	68fb      	ldr	r3, [r7, #12]
 800e03a:	685a      	ldr	r2, [r3, #4]
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e040:	683b      	ldr	r3, [r7, #0]
 800e042:	685b      	ldr	r3, [r3, #4]
 800e044:	683a      	ldr	r2, [r7, #0]
 800e046:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	68fa      	ldr	r2, [r7, #12]
 800e04c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	683a      	ldr	r2, [r7, #0]
 800e052:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	687a      	ldr	r2, [r7, #4]
 800e058:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	681b      	ldr	r3, [r3, #0]
 800e05e:	1c5a      	adds	r2, r3, #1
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	601a      	str	r2, [r3, #0]
}
 800e064:	bf00      	nop
 800e066:	3714      	adds	r7, #20
 800e068:	46bd      	mov	sp, r7
 800e06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06e:	4770      	bx	lr

0800e070 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e070:	b480      	push	{r7}
 800e072:	b085      	sub	sp, #20
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	691b      	ldr	r3, [r3, #16]
 800e07c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e07e:	687b      	ldr	r3, [r7, #4]
 800e080:	685b      	ldr	r3, [r3, #4]
 800e082:	687a      	ldr	r2, [r7, #4]
 800e084:	6892      	ldr	r2, [r2, #8]
 800e086:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	689b      	ldr	r3, [r3, #8]
 800e08c:	687a      	ldr	r2, [r7, #4]
 800e08e:	6852      	ldr	r2, [r2, #4]
 800e090:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	685b      	ldr	r3, [r3, #4]
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d103      	bne.n	800e0a4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	689a      	ldr	r2, [r3, #8]
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e0a4:	687b      	ldr	r3, [r7, #4]
 800e0a6:	2200      	movs	r2, #0
 800e0a8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	1e5a      	subs	r2, r3, #1
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	681b      	ldr	r3, [r3, #0]
}
 800e0b8:	4618      	mov	r0, r3
 800e0ba:	3714      	adds	r7, #20
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0c2:	4770      	bx	lr

0800e0c4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
 800e0cc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d10c      	bne.n	800e0f2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0dc:	b672      	cpsid	i
 800e0de:	f383 8811 	msr	BASEPRI, r3
 800e0e2:	f3bf 8f6f 	isb	sy
 800e0e6:	f3bf 8f4f 	dsb	sy
 800e0ea:	b662      	cpsie	i
 800e0ec:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e0ee:	bf00      	nop
 800e0f0:	e7fe      	b.n	800e0f0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800e0f2:	f002 fcf3 	bl	8010adc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	681a      	ldr	r2, [r3, #0]
 800e0fa:	68fb      	ldr	r3, [r7, #12]
 800e0fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e0fe:	68f9      	ldr	r1, [r7, #12]
 800e100:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e102:	fb01 f303 	mul.w	r3, r1, r3
 800e106:	441a      	add	r2, r3
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e10c:	68fb      	ldr	r3, [r7, #12]
 800e10e:	2200      	movs	r2, #0
 800e110:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	681a      	ldr	r2, [r3, #0]
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	681a      	ldr	r2, [r3, #0]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e122:	3b01      	subs	r3, #1
 800e124:	68f9      	ldr	r1, [r7, #12]
 800e126:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e128:	fb01 f303 	mul.w	r3, r1, r3
 800e12c:	441a      	add	r2, r3
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	22ff      	movs	r2, #255	; 0xff
 800e136:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	22ff      	movs	r2, #255	; 0xff
 800e13e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	2b00      	cmp	r3, #0
 800e146:	d114      	bne.n	800e172 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	691b      	ldr	r3, [r3, #16]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d01a      	beq.n	800e186 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	3310      	adds	r3, #16
 800e154:	4618      	mov	r0, r3
 800e156:	f001 fca9 	bl	800faac <xTaskRemoveFromEventList>
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d012      	beq.n	800e186 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e160:	4b0c      	ldr	r3, [pc, #48]	; (800e194 <xQueueGenericReset+0xd0>)
 800e162:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e166:	601a      	str	r2, [r3, #0]
 800e168:	f3bf 8f4f 	dsb	sy
 800e16c:	f3bf 8f6f 	isb	sy
 800e170:	e009      	b.n	800e186 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	3310      	adds	r3, #16
 800e176:	4618      	mov	r0, r3
 800e178:	f7ff fef0 	bl	800df5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	3324      	adds	r3, #36	; 0x24
 800e180:	4618      	mov	r0, r3
 800e182:	f7ff feeb 	bl	800df5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e186:	f002 fcdd 	bl	8010b44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e18a:	2301      	movs	r3, #1
}
 800e18c:	4618      	mov	r0, r3
 800e18e:	3710      	adds	r7, #16
 800e190:	46bd      	mov	sp, r7
 800e192:	bd80      	pop	{r7, pc}
 800e194:	e000ed04 	.word	0xe000ed04

0800e198 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e198:	b580      	push	{r7, lr}
 800e19a:	b08e      	sub	sp, #56	; 0x38
 800e19c:	af02      	add	r7, sp, #8
 800e19e:	60f8      	str	r0, [r7, #12]
 800e1a0:	60b9      	str	r1, [r7, #8]
 800e1a2:	607a      	str	r2, [r7, #4]
 800e1a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d10c      	bne.n	800e1c6 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800e1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b0:	b672      	cpsid	i
 800e1b2:	f383 8811 	msr	BASEPRI, r3
 800e1b6:	f3bf 8f6f 	isb	sy
 800e1ba:	f3bf 8f4f 	dsb	sy
 800e1be:	b662      	cpsie	i
 800e1c0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e1c2:	bf00      	nop
 800e1c4:	e7fe      	b.n	800e1c4 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e1c6:	683b      	ldr	r3, [r7, #0]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d10c      	bne.n	800e1e6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800e1cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1d0:	b672      	cpsid	i
 800e1d2:	f383 8811 	msr	BASEPRI, r3
 800e1d6:	f3bf 8f6f 	isb	sy
 800e1da:	f3bf 8f4f 	dsb	sy
 800e1de:	b662      	cpsie	i
 800e1e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e1e2:	bf00      	nop
 800e1e4:	e7fe      	b.n	800e1e4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d002      	beq.n	800e1f2 <xQueueGenericCreateStatic+0x5a>
 800e1ec:	68bb      	ldr	r3, [r7, #8]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	d001      	beq.n	800e1f6 <xQueueGenericCreateStatic+0x5e>
 800e1f2:	2301      	movs	r3, #1
 800e1f4:	e000      	b.n	800e1f8 <xQueueGenericCreateStatic+0x60>
 800e1f6:	2300      	movs	r3, #0
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d10c      	bne.n	800e216 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800e1fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e200:	b672      	cpsid	i
 800e202:	f383 8811 	msr	BASEPRI, r3
 800e206:	f3bf 8f6f 	isb	sy
 800e20a:	f3bf 8f4f 	dsb	sy
 800e20e:	b662      	cpsie	i
 800e210:	623b      	str	r3, [r7, #32]
}
 800e212:	bf00      	nop
 800e214:	e7fe      	b.n	800e214 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e216:	687b      	ldr	r3, [r7, #4]
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d102      	bne.n	800e222 <xQueueGenericCreateStatic+0x8a>
 800e21c:	68bb      	ldr	r3, [r7, #8]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d101      	bne.n	800e226 <xQueueGenericCreateStatic+0x8e>
 800e222:	2301      	movs	r3, #1
 800e224:	e000      	b.n	800e228 <xQueueGenericCreateStatic+0x90>
 800e226:	2300      	movs	r3, #0
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d10c      	bne.n	800e246 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800e22c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e230:	b672      	cpsid	i
 800e232:	f383 8811 	msr	BASEPRI, r3
 800e236:	f3bf 8f6f 	isb	sy
 800e23a:	f3bf 8f4f 	dsb	sy
 800e23e:	b662      	cpsie	i
 800e240:	61fb      	str	r3, [r7, #28]
}
 800e242:	bf00      	nop
 800e244:	e7fe      	b.n	800e244 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e246:	2350      	movs	r3, #80	; 0x50
 800e248:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e24a:	697b      	ldr	r3, [r7, #20]
 800e24c:	2b50      	cmp	r3, #80	; 0x50
 800e24e:	d00c      	beq.n	800e26a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800e250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e254:	b672      	cpsid	i
 800e256:	f383 8811 	msr	BASEPRI, r3
 800e25a:	f3bf 8f6f 	isb	sy
 800e25e:	f3bf 8f4f 	dsb	sy
 800e262:	b662      	cpsie	i
 800e264:	61bb      	str	r3, [r7, #24]
}
 800e266:	bf00      	nop
 800e268:	e7fe      	b.n	800e268 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e26a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e26c:	683b      	ldr	r3, [r7, #0]
 800e26e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e272:	2b00      	cmp	r3, #0
 800e274:	d00d      	beq.n	800e292 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e278:	2201      	movs	r2, #1
 800e27a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e27e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e284:	9300      	str	r3, [sp, #0]
 800e286:	4613      	mov	r3, r2
 800e288:	687a      	ldr	r2, [r7, #4]
 800e28a:	68b9      	ldr	r1, [r7, #8]
 800e28c:	68f8      	ldr	r0, [r7, #12]
 800e28e:	f000 f847 	bl	800e320 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e294:	4618      	mov	r0, r3
 800e296:	3730      	adds	r7, #48	; 0x30
 800e298:	46bd      	mov	sp, r7
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b08a      	sub	sp, #40	; 0x28
 800e2a0:	af02      	add	r7, sp, #8
 800e2a2:	60f8      	str	r0, [r7, #12]
 800e2a4:	60b9      	str	r1, [r7, #8]
 800e2a6:	4613      	mov	r3, r2
 800e2a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2b00      	cmp	r3, #0
 800e2ae:	d10c      	bne.n	800e2ca <xQueueGenericCreate+0x2e>
	__asm volatile
 800e2b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e2b4:	b672      	cpsid	i
 800e2b6:	f383 8811 	msr	BASEPRI, r3
 800e2ba:	f3bf 8f6f 	isb	sy
 800e2be:	f3bf 8f4f 	dsb	sy
 800e2c2:	b662      	cpsie	i
 800e2c4:	613b      	str	r3, [r7, #16]
}
 800e2c6:	bf00      	nop
 800e2c8:	e7fe      	b.n	800e2c8 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d102      	bne.n	800e2d6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	61fb      	str	r3, [r7, #28]
 800e2d4:	e004      	b.n	800e2e0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	68ba      	ldr	r2, [r7, #8]
 800e2da:	fb02 f303 	mul.w	r3, r2, r3
 800e2de:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e2e0:	69fb      	ldr	r3, [r7, #28]
 800e2e2:	3350      	adds	r3, #80	; 0x50
 800e2e4:	4618      	mov	r0, r3
 800e2e6:	f002 fd25 	bl	8010d34 <pvPortMalloc>
 800e2ea:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e2ec:	69bb      	ldr	r3, [r7, #24]
 800e2ee:	2b00      	cmp	r3, #0
 800e2f0:	d011      	beq.n	800e316 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e2f2:	69bb      	ldr	r3, [r7, #24]
 800e2f4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e2f6:	697b      	ldr	r3, [r7, #20]
 800e2f8:	3350      	adds	r3, #80	; 0x50
 800e2fa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e2fc:	69bb      	ldr	r3, [r7, #24]
 800e2fe:	2200      	movs	r2, #0
 800e300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e304:	79fa      	ldrb	r2, [r7, #7]
 800e306:	69bb      	ldr	r3, [r7, #24]
 800e308:	9300      	str	r3, [sp, #0]
 800e30a:	4613      	mov	r3, r2
 800e30c:	697a      	ldr	r2, [r7, #20]
 800e30e:	68b9      	ldr	r1, [r7, #8]
 800e310:	68f8      	ldr	r0, [r7, #12]
 800e312:	f000 f805 	bl	800e320 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e316:	69bb      	ldr	r3, [r7, #24]
	}
 800e318:	4618      	mov	r0, r3
 800e31a:	3720      	adds	r7, #32
 800e31c:	46bd      	mov	sp, r7
 800e31e:	bd80      	pop	{r7, pc}

0800e320 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800e320:	b580      	push	{r7, lr}
 800e322:	b084      	sub	sp, #16
 800e324:	af00      	add	r7, sp, #0
 800e326:	60f8      	str	r0, [r7, #12]
 800e328:	60b9      	str	r1, [r7, #8]
 800e32a:	607a      	str	r2, [r7, #4]
 800e32c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d103      	bne.n	800e33c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e334:	69bb      	ldr	r3, [r7, #24]
 800e336:	69ba      	ldr	r2, [r7, #24]
 800e338:	601a      	str	r2, [r3, #0]
 800e33a:	e002      	b.n	800e342 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800e33c:	69bb      	ldr	r3, [r7, #24]
 800e33e:	687a      	ldr	r2, [r7, #4]
 800e340:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800e342:	69bb      	ldr	r3, [r7, #24]
 800e344:	68fa      	ldr	r2, [r7, #12]
 800e346:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800e348:	69bb      	ldr	r3, [r7, #24]
 800e34a:	68ba      	ldr	r2, [r7, #8]
 800e34c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e34e:	2101      	movs	r1, #1
 800e350:	69b8      	ldr	r0, [r7, #24]
 800e352:	f7ff feb7 	bl	800e0c4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800e356:	69bb      	ldr	r3, [r7, #24]
 800e358:	78fa      	ldrb	r2, [r7, #3]
 800e35a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800e35e:	bf00      	nop
 800e360:	3710      	adds	r7, #16
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}

0800e366 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800e366:	b580      	push	{r7, lr}
 800e368:	b08a      	sub	sp, #40	; 0x28
 800e36a:	af02      	add	r7, sp, #8
 800e36c:	60f8      	str	r0, [r7, #12]
 800e36e:	60b9      	str	r1, [r7, #8]
 800e370:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d10c      	bne.n	800e392 <xQueueCreateCountingSemaphoreStatic+0x2c>
	__asm volatile
 800e378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e37c:	b672      	cpsid	i
 800e37e:	f383 8811 	msr	BASEPRI, r3
 800e382:	f3bf 8f6f 	isb	sy
 800e386:	f3bf 8f4f 	dsb	sy
 800e38a:	b662      	cpsie	i
 800e38c:	61bb      	str	r3, [r7, #24]
}
 800e38e:	bf00      	nop
 800e390:	e7fe      	b.n	800e390 <xQueueCreateCountingSemaphoreStatic+0x2a>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e392:	68ba      	ldr	r2, [r7, #8]
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	429a      	cmp	r2, r3
 800e398:	d90c      	bls.n	800e3b4 <xQueueCreateCountingSemaphoreStatic+0x4e>
	__asm volatile
 800e39a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e39e:	b672      	cpsid	i
 800e3a0:	f383 8811 	msr	BASEPRI, r3
 800e3a4:	f3bf 8f6f 	isb	sy
 800e3a8:	f3bf 8f4f 	dsb	sy
 800e3ac:	b662      	cpsie	i
 800e3ae:	617b      	str	r3, [r7, #20]
}
 800e3b0:	bf00      	nop
 800e3b2:	e7fe      	b.n	800e3b2 <xQueueCreateCountingSemaphoreStatic+0x4c>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e3b4:	2302      	movs	r3, #2
 800e3b6:	9300      	str	r3, [sp, #0]
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	2200      	movs	r2, #0
 800e3bc:	2100      	movs	r1, #0
 800e3be:	68f8      	ldr	r0, [r7, #12]
 800e3c0:	f7ff feea 	bl	800e198 <xQueueGenericCreateStatic>
 800e3c4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800e3c6:	69fb      	ldr	r3, [r7, #28]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d002      	beq.n	800e3d2 <xQueueCreateCountingSemaphoreStatic+0x6c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e3cc:	69fb      	ldr	r3, [r7, #28]
 800e3ce:	68ba      	ldr	r2, [r7, #8]
 800e3d0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e3d2:	69fb      	ldr	r3, [r7, #28]
	}
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	3720      	adds	r7, #32
 800e3d8:	46bd      	mov	sp, r7
 800e3da:	bd80      	pop	{r7, pc}

0800e3dc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b086      	sub	sp, #24
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800e3e6:	687b      	ldr	r3, [r7, #4]
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	d10c      	bne.n	800e406 <xQueueCreateCountingSemaphore+0x2a>
	__asm volatile
 800e3ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3f0:	b672      	cpsid	i
 800e3f2:	f383 8811 	msr	BASEPRI, r3
 800e3f6:	f3bf 8f6f 	isb	sy
 800e3fa:	f3bf 8f4f 	dsb	sy
 800e3fe:	b662      	cpsie	i
 800e400:	613b      	str	r3, [r7, #16]
}
 800e402:	bf00      	nop
 800e404:	e7fe      	b.n	800e404 <xQueueCreateCountingSemaphore+0x28>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e406:	683a      	ldr	r2, [r7, #0]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	429a      	cmp	r2, r3
 800e40c:	d90c      	bls.n	800e428 <xQueueCreateCountingSemaphore+0x4c>
	__asm volatile
 800e40e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e412:	b672      	cpsid	i
 800e414:	f383 8811 	msr	BASEPRI, r3
 800e418:	f3bf 8f6f 	isb	sy
 800e41c:	f3bf 8f4f 	dsb	sy
 800e420:	b662      	cpsie	i
 800e422:	60fb      	str	r3, [r7, #12]
}
 800e424:	bf00      	nop
 800e426:	e7fe      	b.n	800e426 <xQueueCreateCountingSemaphore+0x4a>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e428:	2202      	movs	r2, #2
 800e42a:	2100      	movs	r1, #0
 800e42c:	6878      	ldr	r0, [r7, #4]
 800e42e:	f7ff ff35 	bl	800e29c <xQueueGenericCreate>
 800e432:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800e434:	697b      	ldr	r3, [r7, #20]
 800e436:	2b00      	cmp	r3, #0
 800e438:	d002      	beq.n	800e440 <xQueueCreateCountingSemaphore+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	683a      	ldr	r2, [r7, #0]
 800e43e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800e440:	697b      	ldr	r3, [r7, #20]
	}
 800e442:	4618      	mov	r0, r3
 800e444:	3718      	adds	r7, #24
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
	...

0800e44c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800e44c:	b580      	push	{r7, lr}
 800e44e:	b08e      	sub	sp, #56	; 0x38
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	607a      	str	r2, [r7, #4]
 800e458:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800e45a:	2300      	movs	r3, #0
 800e45c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e464:	2b00      	cmp	r3, #0
 800e466:	d10c      	bne.n	800e482 <xQueueGenericSend+0x36>
	__asm volatile
 800e468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e46c:	b672      	cpsid	i
 800e46e:	f383 8811 	msr	BASEPRI, r3
 800e472:	f3bf 8f6f 	isb	sy
 800e476:	f3bf 8f4f 	dsb	sy
 800e47a:	b662      	cpsie	i
 800e47c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e47e:	bf00      	nop
 800e480:	e7fe      	b.n	800e480 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e482:	68bb      	ldr	r3, [r7, #8]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d103      	bne.n	800e490 <xQueueGenericSend+0x44>
 800e488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e48a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d101      	bne.n	800e494 <xQueueGenericSend+0x48>
 800e490:	2301      	movs	r3, #1
 800e492:	e000      	b.n	800e496 <xQueueGenericSend+0x4a>
 800e494:	2300      	movs	r3, #0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d10c      	bne.n	800e4b4 <xQueueGenericSend+0x68>
	__asm volatile
 800e49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e49e:	b672      	cpsid	i
 800e4a0:	f383 8811 	msr	BASEPRI, r3
 800e4a4:	f3bf 8f6f 	isb	sy
 800e4a8:	f3bf 8f4f 	dsb	sy
 800e4ac:	b662      	cpsie	i
 800e4ae:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e4b0:	bf00      	nop
 800e4b2:	e7fe      	b.n	800e4b2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e4b4:	683b      	ldr	r3, [r7, #0]
 800e4b6:	2b02      	cmp	r3, #2
 800e4b8:	d103      	bne.n	800e4c2 <xQueueGenericSend+0x76>
 800e4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e4be:	2b01      	cmp	r3, #1
 800e4c0:	d101      	bne.n	800e4c6 <xQueueGenericSend+0x7a>
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	e000      	b.n	800e4c8 <xQueueGenericSend+0x7c>
 800e4c6:	2300      	movs	r3, #0
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d10c      	bne.n	800e4e6 <xQueueGenericSend+0x9a>
	__asm volatile
 800e4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4d0:	b672      	cpsid	i
 800e4d2:	f383 8811 	msr	BASEPRI, r3
 800e4d6:	f3bf 8f6f 	isb	sy
 800e4da:	f3bf 8f4f 	dsb	sy
 800e4de:	b662      	cpsie	i
 800e4e0:	623b      	str	r3, [r7, #32]
}
 800e4e2:	bf00      	nop
 800e4e4:	e7fe      	b.n	800e4e4 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e4e6:	f001 fcab 	bl	800fe40 <xTaskGetSchedulerState>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	2b00      	cmp	r3, #0
 800e4ee:	d102      	bne.n	800e4f6 <xQueueGenericSend+0xaa>
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d101      	bne.n	800e4fa <xQueueGenericSend+0xae>
 800e4f6:	2301      	movs	r3, #1
 800e4f8:	e000      	b.n	800e4fc <xQueueGenericSend+0xb0>
 800e4fa:	2300      	movs	r3, #0
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d10c      	bne.n	800e51a <xQueueGenericSend+0xce>
	__asm volatile
 800e500:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e504:	b672      	cpsid	i
 800e506:	f383 8811 	msr	BASEPRI, r3
 800e50a:	f3bf 8f6f 	isb	sy
 800e50e:	f3bf 8f4f 	dsb	sy
 800e512:	b662      	cpsie	i
 800e514:	61fb      	str	r3, [r7, #28]
}
 800e516:	bf00      	nop
 800e518:	e7fe      	b.n	800e518 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e51a:	f002 fadf 	bl	8010adc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e51e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e520:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e526:	429a      	cmp	r2, r3
 800e528:	d302      	bcc.n	800e530 <xQueueGenericSend+0xe4>
 800e52a:	683b      	ldr	r3, [r7, #0]
 800e52c:	2b02      	cmp	r3, #2
 800e52e:	d129      	bne.n	800e584 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e530:	683a      	ldr	r2, [r7, #0]
 800e532:	68b9      	ldr	r1, [r7, #8]
 800e534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e536:	f000 fc82 	bl	800ee3e <prvCopyDataToQueue>
 800e53a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e53c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e53e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e540:	2b00      	cmp	r3, #0
 800e542:	d010      	beq.n	800e566 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e546:	3324      	adds	r3, #36	; 0x24
 800e548:	4618      	mov	r0, r3
 800e54a:	f001 faaf 	bl	800faac <xTaskRemoveFromEventList>
 800e54e:	4603      	mov	r3, r0
 800e550:	2b00      	cmp	r3, #0
 800e552:	d013      	beq.n	800e57c <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800e554:	4b3f      	ldr	r3, [pc, #252]	; (800e654 <xQueueGenericSend+0x208>)
 800e556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e55a:	601a      	str	r2, [r3, #0]
 800e55c:	f3bf 8f4f 	dsb	sy
 800e560:	f3bf 8f6f 	isb	sy
 800e564:	e00a      	b.n	800e57c <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800e566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d007      	beq.n	800e57c <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800e56c:	4b39      	ldr	r3, [pc, #228]	; (800e654 <xQueueGenericSend+0x208>)
 800e56e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e572:	601a      	str	r2, [r3, #0]
 800e574:	f3bf 8f4f 	dsb	sy
 800e578:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800e57c:	f002 fae2 	bl	8010b44 <vPortExitCritical>
				return pdPASS;
 800e580:	2301      	movs	r3, #1
 800e582:	e063      	b.n	800e64c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	2b00      	cmp	r3, #0
 800e588:	d103      	bne.n	800e592 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e58a:	f002 fadb 	bl	8010b44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800e58e:	2300      	movs	r3, #0
 800e590:	e05c      	b.n	800e64c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e594:	2b00      	cmp	r3, #0
 800e596:	d106      	bne.n	800e5a6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e598:	f107 0314 	add.w	r3, r7, #20
 800e59c:	4618      	mov	r0, r3
 800e59e:	f001 faeb 	bl	800fb78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e5a6:	f002 facd 	bl	8010b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e5aa:	f001 f84b 	bl	800f644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e5ae:	f002 fa95 	bl	8010adc <vPortEnterCritical>
 800e5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e5b8:	b25b      	sxtb	r3, r3
 800e5ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5be:	d103      	bne.n	800e5c8 <xQueueGenericSend+0x17c>
 800e5c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5c2:	2200      	movs	r2, #0
 800e5c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e5c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e5ce:	b25b      	sxtb	r3, r3
 800e5d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e5d4:	d103      	bne.n	800e5de <xQueueGenericSend+0x192>
 800e5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e5d8:	2200      	movs	r2, #0
 800e5da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e5de:	f002 fab1 	bl	8010b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e5e2:	1d3a      	adds	r2, r7, #4
 800e5e4:	f107 0314 	add.w	r3, r7, #20
 800e5e8:	4611      	mov	r1, r2
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	f001 fada 	bl	800fba4 <xTaskCheckForTimeOut>
 800e5f0:	4603      	mov	r3, r0
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d124      	bne.n	800e640 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800e5f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e5f8:	f000 fd19 	bl	800f02e <prvIsQueueFull>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d018      	beq.n	800e634 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e604:	3310      	adds	r3, #16
 800e606:	687a      	ldr	r2, [r7, #4]
 800e608:	4611      	mov	r1, r2
 800e60a:	4618      	mov	r0, r3
 800e60c:	f001 f9fa 	bl	800fa04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800e610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e612:	f000 fca4 	bl	800ef5e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800e616:	f001 f823 	bl	800f660 <xTaskResumeAll>
 800e61a:	4603      	mov	r3, r0
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	f47f af7c 	bne.w	800e51a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800e622:	4b0c      	ldr	r3, [pc, #48]	; (800e654 <xQueueGenericSend+0x208>)
 800e624:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e628:	601a      	str	r2, [r3, #0]
 800e62a:	f3bf 8f4f 	dsb	sy
 800e62e:	f3bf 8f6f 	isb	sy
 800e632:	e772      	b.n	800e51a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800e634:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e636:	f000 fc92 	bl	800ef5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e63a:	f001 f811 	bl	800f660 <xTaskResumeAll>
 800e63e:	e76c      	b.n	800e51a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800e640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e642:	f000 fc8c 	bl	800ef5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e646:	f001 f80b 	bl	800f660 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800e64a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800e64c:	4618      	mov	r0, r3
 800e64e:	3738      	adds	r7, #56	; 0x38
 800e650:	46bd      	mov	sp, r7
 800e652:	bd80      	pop	{r7, pc}
 800e654:	e000ed04 	.word	0xe000ed04

0800e658 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b08e      	sub	sp, #56	; 0x38
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
 800e664:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800e66a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d10c      	bne.n	800e68a <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800e670:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e674:	b672      	cpsid	i
 800e676:	f383 8811 	msr	BASEPRI, r3
 800e67a:	f3bf 8f6f 	isb	sy
 800e67e:	f3bf 8f4f 	dsb	sy
 800e682:	b662      	cpsie	i
 800e684:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e686:	bf00      	nop
 800e688:	e7fe      	b.n	800e688 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e68a:	68bb      	ldr	r3, [r7, #8]
 800e68c:	2b00      	cmp	r3, #0
 800e68e:	d103      	bne.n	800e698 <xQueueGenericSendFromISR+0x40>
 800e690:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e694:	2b00      	cmp	r3, #0
 800e696:	d101      	bne.n	800e69c <xQueueGenericSendFromISR+0x44>
 800e698:	2301      	movs	r3, #1
 800e69a:	e000      	b.n	800e69e <xQueueGenericSendFromISR+0x46>
 800e69c:	2300      	movs	r3, #0
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d10c      	bne.n	800e6bc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800e6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6a6:	b672      	cpsid	i
 800e6a8:	f383 8811 	msr	BASEPRI, r3
 800e6ac:	f3bf 8f6f 	isb	sy
 800e6b0:	f3bf 8f4f 	dsb	sy
 800e6b4:	b662      	cpsie	i
 800e6b6:	623b      	str	r3, [r7, #32]
}
 800e6b8:	bf00      	nop
 800e6ba:	e7fe      	b.n	800e6ba <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e6bc:	683b      	ldr	r3, [r7, #0]
 800e6be:	2b02      	cmp	r3, #2
 800e6c0:	d103      	bne.n	800e6ca <xQueueGenericSendFromISR+0x72>
 800e6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e6c6:	2b01      	cmp	r3, #1
 800e6c8:	d101      	bne.n	800e6ce <xQueueGenericSendFromISR+0x76>
 800e6ca:	2301      	movs	r3, #1
 800e6cc:	e000      	b.n	800e6d0 <xQueueGenericSendFromISR+0x78>
 800e6ce:	2300      	movs	r3, #0
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d10c      	bne.n	800e6ee <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800e6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6d8:	b672      	cpsid	i
 800e6da:	f383 8811 	msr	BASEPRI, r3
 800e6de:	f3bf 8f6f 	isb	sy
 800e6e2:	f3bf 8f4f 	dsb	sy
 800e6e6:	b662      	cpsie	i
 800e6e8:	61fb      	str	r3, [r7, #28]
}
 800e6ea:	bf00      	nop
 800e6ec:	e7fe      	b.n	800e6ec <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e6ee:	f002 fadd 	bl	8010cac <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800e6f2:	f3ef 8211 	mrs	r2, BASEPRI
 800e6f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6fa:	b672      	cpsid	i
 800e6fc:	f383 8811 	msr	BASEPRI, r3
 800e700:	f3bf 8f6f 	isb	sy
 800e704:	f3bf 8f4f 	dsb	sy
 800e708:	b662      	cpsie	i
 800e70a:	61ba      	str	r2, [r7, #24]
 800e70c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800e70e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e710:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e718:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e71a:	429a      	cmp	r2, r3
 800e71c:	d302      	bcc.n	800e724 <xQueueGenericSendFromISR+0xcc>
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	2b02      	cmp	r3, #2
 800e722:	d12c      	bne.n	800e77e <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e72a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e72e:	683a      	ldr	r2, [r7, #0]
 800e730:	68b9      	ldr	r1, [r7, #8]
 800e732:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e734:	f000 fb83 	bl	800ee3e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e738:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800e73c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e740:	d112      	bne.n	800e768 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e746:	2b00      	cmp	r3, #0
 800e748:	d016      	beq.n	800e778 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e74c:	3324      	adds	r3, #36	; 0x24
 800e74e:	4618      	mov	r0, r3
 800e750:	f001 f9ac 	bl	800faac <xTaskRemoveFromEventList>
 800e754:	4603      	mov	r3, r0
 800e756:	2b00      	cmp	r3, #0
 800e758:	d00e      	beq.n	800e778 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	2b00      	cmp	r3, #0
 800e75e:	d00b      	beq.n	800e778 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	2201      	movs	r2, #1
 800e764:	601a      	str	r2, [r3, #0]
 800e766:	e007      	b.n	800e778 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e768:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800e76c:	3301      	adds	r3, #1
 800e76e:	b2db      	uxtb	r3, r3
 800e770:	b25a      	sxtb	r2, r3
 800e772:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e778:	2301      	movs	r3, #1
 800e77a:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800e77c:	e001      	b.n	800e782 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e77e:	2300      	movs	r3, #0
 800e780:	637b      	str	r3, [r7, #52]	; 0x34
 800e782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e784:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e78c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e78e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e790:	4618      	mov	r0, r3
 800e792:	3738      	adds	r7, #56	; 0x38
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}

0800e798 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b08e      	sub	sp, #56	; 0x38
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
 800e7a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800e7a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d10c      	bne.n	800e7c6 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800e7ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7b0:	b672      	cpsid	i
 800e7b2:	f383 8811 	msr	BASEPRI, r3
 800e7b6:	f3bf 8f6f 	isb	sy
 800e7ba:	f3bf 8f4f 	dsb	sy
 800e7be:	b662      	cpsie	i
 800e7c0:	623b      	str	r3, [r7, #32]
}
 800e7c2:	bf00      	nop
 800e7c4:	e7fe      	b.n	800e7c4 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800e7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d00c      	beq.n	800e7e8 <xQueueGiveFromISR+0x50>
	__asm volatile
 800e7ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d2:	b672      	cpsid	i
 800e7d4:	f383 8811 	msr	BASEPRI, r3
 800e7d8:	f3bf 8f6f 	isb	sy
 800e7dc:	f3bf 8f4f 	dsb	sy
 800e7e0:	b662      	cpsie	i
 800e7e2:	61fb      	str	r3, [r7, #28]
}
 800e7e4:	bf00      	nop
 800e7e6:	e7fe      	b.n	800e7e6 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7ea:	681b      	ldr	r3, [r3, #0]
 800e7ec:	2b00      	cmp	r3, #0
 800e7ee:	d103      	bne.n	800e7f8 <xQueueGiveFromISR+0x60>
 800e7f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e7f2:	689b      	ldr	r3, [r3, #8]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	d101      	bne.n	800e7fc <xQueueGiveFromISR+0x64>
 800e7f8:	2301      	movs	r3, #1
 800e7fa:	e000      	b.n	800e7fe <xQueueGiveFromISR+0x66>
 800e7fc:	2300      	movs	r3, #0
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d10c      	bne.n	800e81c <xQueueGiveFromISR+0x84>
	__asm volatile
 800e802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e806:	b672      	cpsid	i
 800e808:	f383 8811 	msr	BASEPRI, r3
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f3bf 8f4f 	dsb	sy
 800e814:	b662      	cpsie	i
 800e816:	61bb      	str	r3, [r7, #24]
}
 800e818:	bf00      	nop
 800e81a:	e7fe      	b.n	800e81a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e81c:	f002 fa46 	bl	8010cac <vPortValidateInterruptPriority>
	__asm volatile
 800e820:	f3ef 8211 	mrs	r2, BASEPRI
 800e824:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e828:	b672      	cpsid	i
 800e82a:	f383 8811 	msr	BASEPRI, r3
 800e82e:	f3bf 8f6f 	isb	sy
 800e832:	f3bf 8f4f 	dsb	sy
 800e836:	b662      	cpsie	i
 800e838:	617a      	str	r2, [r7, #20]
 800e83a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800e83c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800e83e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e844:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e848:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e84a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e84c:	429a      	cmp	r2, r3
 800e84e:	d22b      	bcs.n	800e8a8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800e850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e856:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e85a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e85c:	1c5a      	adds	r2, r3, #1
 800e85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e860:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800e862:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800e866:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e86a:	d112      	bne.n	800e892 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e86e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e870:	2b00      	cmp	r3, #0
 800e872:	d016      	beq.n	800e8a2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e876:	3324      	adds	r3, #36	; 0x24
 800e878:	4618      	mov	r0, r3
 800e87a:	f001 f917 	bl	800faac <xTaskRemoveFromEventList>
 800e87e:	4603      	mov	r3, r0
 800e880:	2b00      	cmp	r3, #0
 800e882:	d00e      	beq.n	800e8a2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800e884:	683b      	ldr	r3, [r7, #0]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d00b      	beq.n	800e8a2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e88a:	683b      	ldr	r3, [r7, #0]
 800e88c:	2201      	movs	r2, #1
 800e88e:	601a      	str	r2, [r3, #0]
 800e890:	e007      	b.n	800e8a2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e892:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e896:	3301      	adds	r3, #1
 800e898:	b2db      	uxtb	r3, r3
 800e89a:	b25a      	sxtb	r2, r3
 800e89c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e89e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800e8a2:	2301      	movs	r3, #1
 800e8a4:	637b      	str	r3, [r7, #52]	; 0x34
 800e8a6:	e001      	b.n	800e8ac <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800e8a8:	2300      	movs	r3, #0
 800e8aa:	637b      	str	r3, [r7, #52]	; 0x34
 800e8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ae:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800e8b0:	68fb      	ldr	r3, [r7, #12]
 800e8b2:	f383 8811 	msr	BASEPRI, r3
}
 800e8b6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800e8b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e8ba:	4618      	mov	r0, r3
 800e8bc:	3738      	adds	r7, #56	; 0x38
 800e8be:	46bd      	mov	sp, r7
 800e8c0:	bd80      	pop	{r7, pc}
	...

0800e8c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800e8c4:	b580      	push	{r7, lr}
 800e8c6:	b08c      	sub	sp, #48	; 0x30
 800e8c8:	af00      	add	r7, sp, #0
 800e8ca:	60f8      	str	r0, [r7, #12]
 800e8cc:	60b9      	str	r1, [r7, #8]
 800e8ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800e8d4:	68fb      	ldr	r3, [r7, #12]
 800e8d6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800e8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d10c      	bne.n	800e8f8 <xQueueReceive+0x34>
	__asm volatile
 800e8de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8e2:	b672      	cpsid	i
 800e8e4:	f383 8811 	msr	BASEPRI, r3
 800e8e8:	f3bf 8f6f 	isb	sy
 800e8ec:	f3bf 8f4f 	dsb	sy
 800e8f0:	b662      	cpsie	i
 800e8f2:	623b      	str	r3, [r7, #32]
}
 800e8f4:	bf00      	nop
 800e8f6:	e7fe      	b.n	800e8f6 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d103      	bne.n	800e906 <xQueueReceive+0x42>
 800e8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e902:	2b00      	cmp	r3, #0
 800e904:	d101      	bne.n	800e90a <xQueueReceive+0x46>
 800e906:	2301      	movs	r3, #1
 800e908:	e000      	b.n	800e90c <xQueueReceive+0x48>
 800e90a:	2300      	movs	r3, #0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d10c      	bne.n	800e92a <xQueueReceive+0x66>
	__asm volatile
 800e910:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e914:	b672      	cpsid	i
 800e916:	f383 8811 	msr	BASEPRI, r3
 800e91a:	f3bf 8f6f 	isb	sy
 800e91e:	f3bf 8f4f 	dsb	sy
 800e922:	b662      	cpsie	i
 800e924:	61fb      	str	r3, [r7, #28]
}
 800e926:	bf00      	nop
 800e928:	e7fe      	b.n	800e928 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e92a:	f001 fa89 	bl	800fe40 <xTaskGetSchedulerState>
 800e92e:	4603      	mov	r3, r0
 800e930:	2b00      	cmp	r3, #0
 800e932:	d102      	bne.n	800e93a <xQueueReceive+0x76>
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d101      	bne.n	800e93e <xQueueReceive+0x7a>
 800e93a:	2301      	movs	r3, #1
 800e93c:	e000      	b.n	800e940 <xQueueReceive+0x7c>
 800e93e:	2300      	movs	r3, #0
 800e940:	2b00      	cmp	r3, #0
 800e942:	d10c      	bne.n	800e95e <xQueueReceive+0x9a>
	__asm volatile
 800e944:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e948:	b672      	cpsid	i
 800e94a:	f383 8811 	msr	BASEPRI, r3
 800e94e:	f3bf 8f6f 	isb	sy
 800e952:	f3bf 8f4f 	dsb	sy
 800e956:	b662      	cpsie	i
 800e958:	61bb      	str	r3, [r7, #24]
}
 800e95a:	bf00      	nop
 800e95c:	e7fe      	b.n	800e95c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800e95e:	f002 f8bd 	bl	8010adc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e966:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e96a:	2b00      	cmp	r3, #0
 800e96c:	d01f      	beq.n	800e9ae <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e96e:	68b9      	ldr	r1, [r7, #8]
 800e970:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e972:	f000 face 	bl	800ef12 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e978:	1e5a      	subs	r2, r3, #1
 800e97a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e97c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e97e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e980:	691b      	ldr	r3, [r3, #16]
 800e982:	2b00      	cmp	r3, #0
 800e984:	d00f      	beq.n	800e9a6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e988:	3310      	adds	r3, #16
 800e98a:	4618      	mov	r0, r3
 800e98c:	f001 f88e 	bl	800faac <xTaskRemoveFromEventList>
 800e990:	4603      	mov	r3, r0
 800e992:	2b00      	cmp	r3, #0
 800e994:	d007      	beq.n	800e9a6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800e996:	4b3d      	ldr	r3, [pc, #244]	; (800ea8c <xQueueReceive+0x1c8>)
 800e998:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e99c:	601a      	str	r2, [r3, #0]
 800e99e:	f3bf 8f4f 	dsb	sy
 800e9a2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800e9a6:	f002 f8cd 	bl	8010b44 <vPortExitCritical>
				return pdPASS;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	e069      	b.n	800ea82 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d103      	bne.n	800e9bc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800e9b4:	f002 f8c6 	bl	8010b44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800e9b8:	2300      	movs	r3, #0
 800e9ba:	e062      	b.n	800ea82 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800e9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9be:	2b00      	cmp	r3, #0
 800e9c0:	d106      	bne.n	800e9d0 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e9c2:	f107 0310 	add.w	r3, r7, #16
 800e9c6:	4618      	mov	r0, r3
 800e9c8:	f001 f8d6 	bl	800fb78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800e9cc:	2301      	movs	r3, #1
 800e9ce:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800e9d0:	f002 f8b8 	bl	8010b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800e9d4:	f000 fe36 	bl	800f644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e9d8:	f002 f880 	bl	8010adc <vPortEnterCritical>
 800e9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800e9e2:	b25b      	sxtb	r3, r3
 800e9e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9e8:	d103      	bne.n	800e9f2 <xQueueReceive+0x12e>
 800e9ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ec:	2200      	movs	r2, #0
 800e9ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800e9f8:	b25b      	sxtb	r3, r3
 800e9fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e9fe:	d103      	bne.n	800ea08 <xQueueReceive+0x144>
 800ea00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea02:	2200      	movs	r2, #0
 800ea04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ea08:	f002 f89c 	bl	8010b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ea0c:	1d3a      	adds	r2, r7, #4
 800ea0e:	f107 0310 	add.w	r3, r7, #16
 800ea12:	4611      	mov	r1, r2
 800ea14:	4618      	mov	r0, r3
 800ea16:	f001 f8c5 	bl	800fba4 <xTaskCheckForTimeOut>
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	2b00      	cmp	r3, #0
 800ea1e:	d123      	bne.n	800ea68 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea22:	f000 faee 	bl	800f002 <prvIsQueueEmpty>
 800ea26:	4603      	mov	r3, r0
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d017      	beq.n	800ea5c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ea2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea2e:	3324      	adds	r3, #36	; 0x24
 800ea30:	687a      	ldr	r2, [r7, #4]
 800ea32:	4611      	mov	r1, r2
 800ea34:	4618      	mov	r0, r3
 800ea36:	f000 ffe5 	bl	800fa04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ea3a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea3c:	f000 fa8f 	bl	800ef5e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ea40:	f000 fe0e 	bl	800f660 <xTaskResumeAll>
 800ea44:	4603      	mov	r3, r0
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d189      	bne.n	800e95e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800ea4a:	4b10      	ldr	r3, [pc, #64]	; (800ea8c <xQueueReceive+0x1c8>)
 800ea4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ea50:	601a      	str	r2, [r3, #0]
 800ea52:	f3bf 8f4f 	dsb	sy
 800ea56:	f3bf 8f6f 	isb	sy
 800ea5a:	e780      	b.n	800e95e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ea5c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea5e:	f000 fa7e 	bl	800ef5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ea62:	f000 fdfd 	bl	800f660 <xTaskResumeAll>
 800ea66:	e77a      	b.n	800e95e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ea68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea6a:	f000 fa78 	bl	800ef5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ea6e:	f000 fdf7 	bl	800f660 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ea72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ea74:	f000 fac5 	bl	800f002 <prvIsQueueEmpty>
 800ea78:	4603      	mov	r3, r0
 800ea7a:	2b00      	cmp	r3, #0
 800ea7c:	f43f af6f 	beq.w	800e95e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ea80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ea82:	4618      	mov	r0, r3
 800ea84:	3730      	adds	r7, #48	; 0x30
 800ea86:	46bd      	mov	sp, r7
 800ea88:	bd80      	pop	{r7, pc}
 800ea8a:	bf00      	nop
 800ea8c:	e000ed04 	.word	0xe000ed04

0800ea90 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ea90:	b580      	push	{r7, lr}
 800ea92:	b08e      	sub	sp, #56	; 0x38
 800ea94:	af00      	add	r7, sp, #0
 800ea96:	6078      	str	r0, [r7, #4]
 800ea98:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ea9a:	2300      	movs	r3, #0
 800ea9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800eaa2:	2300      	movs	r3, #0
 800eaa4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eaa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d10c      	bne.n	800eac6 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800eaac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab0:	b672      	cpsid	i
 800eab2:	f383 8811 	msr	BASEPRI, r3
 800eab6:	f3bf 8f6f 	isb	sy
 800eaba:	f3bf 8f4f 	dsb	sy
 800eabe:	b662      	cpsie	i
 800eac0:	623b      	str	r3, [r7, #32]
}
 800eac2:	bf00      	nop
 800eac4:	e7fe      	b.n	800eac4 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800eac6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d00c      	beq.n	800eae8 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800eace:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ead2:	b672      	cpsid	i
 800ead4:	f383 8811 	msr	BASEPRI, r3
 800ead8:	f3bf 8f6f 	isb	sy
 800eadc:	f3bf 8f4f 	dsb	sy
 800eae0:	b662      	cpsie	i
 800eae2:	61fb      	str	r3, [r7, #28]
}
 800eae4:	bf00      	nop
 800eae6:	e7fe      	b.n	800eae6 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eae8:	f001 f9aa 	bl	800fe40 <xTaskGetSchedulerState>
 800eaec:	4603      	mov	r3, r0
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d102      	bne.n	800eaf8 <xQueueSemaphoreTake+0x68>
 800eaf2:	683b      	ldr	r3, [r7, #0]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d101      	bne.n	800eafc <xQueueSemaphoreTake+0x6c>
 800eaf8:	2301      	movs	r3, #1
 800eafa:	e000      	b.n	800eafe <xQueueSemaphoreTake+0x6e>
 800eafc:	2300      	movs	r3, #0
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d10c      	bne.n	800eb1c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800eb02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb06:	b672      	cpsid	i
 800eb08:	f383 8811 	msr	BASEPRI, r3
 800eb0c:	f3bf 8f6f 	isb	sy
 800eb10:	f3bf 8f4f 	dsb	sy
 800eb14:	b662      	cpsie	i
 800eb16:	61bb      	str	r3, [r7, #24]
}
 800eb18:	bf00      	nop
 800eb1a:	e7fe      	b.n	800eb1a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb1c:	f001 ffde 	bl	8010adc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800eb20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eb24:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800eb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d024      	beq.n	800eb76 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800eb2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eb2e:	1e5a      	subs	r2, r3, #1
 800eb30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb32:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eb34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d104      	bne.n	800eb46 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800eb3c:	f001 fafe 	bl	801013c <pvTaskIncrementMutexHeldCount>
 800eb40:	4602      	mov	r2, r0
 800eb42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb44:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800eb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb48:	691b      	ldr	r3, [r3, #16]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	d00f      	beq.n	800eb6e <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800eb4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb50:	3310      	adds	r3, #16
 800eb52:	4618      	mov	r0, r3
 800eb54:	f000 ffaa 	bl	800faac <xTaskRemoveFromEventList>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d007      	beq.n	800eb6e <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800eb5e:	4b55      	ldr	r3, [pc, #340]	; (800ecb4 <xQueueSemaphoreTake+0x224>)
 800eb60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb64:	601a      	str	r2, [r3, #0]
 800eb66:	f3bf 8f4f 	dsb	sy
 800eb6a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800eb6e:	f001 ffe9 	bl	8010b44 <vPortExitCritical>
				return pdPASS;
 800eb72:	2301      	movs	r3, #1
 800eb74:	e099      	b.n	800ecaa <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb76:	683b      	ldr	r3, [r7, #0]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d113      	bne.n	800eba4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800eb7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d00c      	beq.n	800eb9c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800eb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb86:	b672      	cpsid	i
 800eb88:	f383 8811 	msr	BASEPRI, r3
 800eb8c:	f3bf 8f6f 	isb	sy
 800eb90:	f3bf 8f4f 	dsb	sy
 800eb94:	b662      	cpsie	i
 800eb96:	617b      	str	r3, [r7, #20]
}
 800eb98:	bf00      	nop
 800eb9a:	e7fe      	b.n	800eb9a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800eb9c:	f001 ffd2 	bl	8010b44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800eba0:	2300      	movs	r3, #0
 800eba2:	e082      	b.n	800ecaa <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	d106      	bne.n	800ebb8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ebaa:	f107 030c 	add.w	r3, r7, #12
 800ebae:	4618      	mov	r0, r3
 800ebb0:	f000 ffe2 	bl	800fb78 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ebb4:	2301      	movs	r3, #1
 800ebb6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ebb8:	f001 ffc4 	bl	8010b44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ebbc:	f000 fd42 	bl	800f644 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ebc0:	f001 ff8c 	bl	8010adc <vPortEnterCritical>
 800ebc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebc6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebca:	b25b      	sxtb	r3, r3
 800ebcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebd0:	d103      	bne.n	800ebda <xQueueSemaphoreTake+0x14a>
 800ebd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebe0:	b25b      	sxtb	r3, r3
 800ebe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebe6:	d103      	bne.n	800ebf0 <xQueueSemaphoreTake+0x160>
 800ebe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ebea:	2200      	movs	r2, #0
 800ebec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebf0:	f001 ffa8 	bl	8010b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ebf4:	463a      	mov	r2, r7
 800ebf6:	f107 030c 	add.w	r3, r7, #12
 800ebfa:	4611      	mov	r1, r2
 800ebfc:	4618      	mov	r0, r3
 800ebfe:	f000 ffd1 	bl	800fba4 <xTaskCheckForTimeOut>
 800ec02:	4603      	mov	r3, r0
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d132      	bne.n	800ec6e <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec0a:	f000 f9fa 	bl	800f002 <prvIsQueueEmpty>
 800ec0e:	4603      	mov	r3, r0
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d026      	beq.n	800ec62 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ec14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec16:	681b      	ldr	r3, [r3, #0]
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d109      	bne.n	800ec30 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800ec1c:	f001 ff5e 	bl	8010adc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ec20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec22:	689b      	ldr	r3, [r3, #8]
 800ec24:	4618      	mov	r0, r3
 800ec26:	f001 f929 	bl	800fe7c <xTaskPriorityInherit>
 800ec2a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800ec2c:	f001 ff8a 	bl	8010b44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800ec30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec32:	3324      	adds	r3, #36	; 0x24
 800ec34:	683a      	ldr	r2, [r7, #0]
 800ec36:	4611      	mov	r1, r2
 800ec38:	4618      	mov	r0, r3
 800ec3a:	f000 fee3 	bl	800fa04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800ec3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec40:	f000 f98d 	bl	800ef5e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800ec44:	f000 fd0c 	bl	800f660 <xTaskResumeAll>
 800ec48:	4603      	mov	r3, r0
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	f47f af66 	bne.w	800eb1c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800ec50:	4b18      	ldr	r3, [pc, #96]	; (800ecb4 <xQueueSemaphoreTake+0x224>)
 800ec52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec56:	601a      	str	r2, [r3, #0]
 800ec58:	f3bf 8f4f 	dsb	sy
 800ec5c:	f3bf 8f6f 	isb	sy
 800ec60:	e75c      	b.n	800eb1c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800ec62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec64:	f000 f97b 	bl	800ef5e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec68:	f000 fcfa 	bl	800f660 <xTaskResumeAll>
 800ec6c:	e756      	b.n	800eb1c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800ec6e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec70:	f000 f975 	bl	800ef5e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec74:	f000 fcf4 	bl	800f660 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ec78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec7a:	f000 f9c2 	bl	800f002 <prvIsQueueEmpty>
 800ec7e:	4603      	mov	r3, r0
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	f43f af4b 	beq.w	800eb1c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800ec86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d00d      	beq.n	800eca8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800ec8c:	f001 ff26 	bl	8010adc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800ec90:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800ec92:	f000 f8bc 	bl	800ee0e <prvGetDisinheritPriorityAfterTimeout>
 800ec96:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800ec98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ec9a:	689b      	ldr	r3, [r3, #8]
 800ec9c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ec9e:	4618      	mov	r0, r3
 800eca0:	f001 f9c6 	bl	8010030 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800eca4:	f001 ff4e 	bl	8010b44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800eca8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ecaa:	4618      	mov	r0, r3
 800ecac:	3738      	adds	r7, #56	; 0x38
 800ecae:	46bd      	mov	sp, r7
 800ecb0:	bd80      	pop	{r7, pc}
 800ecb2:	bf00      	nop
 800ecb4:	e000ed04 	.word	0xe000ed04

0800ecb8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b08e      	sub	sp, #56	; 0x38
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	60b9      	str	r1, [r7, #8]
 800ecc2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ecc4:	68fb      	ldr	r3, [r7, #12]
 800ecc6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ecc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecca:	2b00      	cmp	r3, #0
 800eccc:	d10c      	bne.n	800ece8 <xQueueReceiveFromISR+0x30>
	__asm volatile
 800ecce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd2:	b672      	cpsid	i
 800ecd4:	f383 8811 	msr	BASEPRI, r3
 800ecd8:	f3bf 8f6f 	isb	sy
 800ecdc:	f3bf 8f4f 	dsb	sy
 800ece0:	b662      	cpsie	i
 800ece2:	623b      	str	r3, [r7, #32]
}
 800ece4:	bf00      	nop
 800ece6:	e7fe      	b.n	800ece6 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ece8:	68bb      	ldr	r3, [r7, #8]
 800ecea:	2b00      	cmp	r3, #0
 800ecec:	d103      	bne.n	800ecf6 <xQueueReceiveFromISR+0x3e>
 800ecee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ecf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d101      	bne.n	800ecfa <xQueueReceiveFromISR+0x42>
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	e000      	b.n	800ecfc <xQueueReceiveFromISR+0x44>
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	d10c      	bne.n	800ed1a <xQueueReceiveFromISR+0x62>
	__asm volatile
 800ed00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed04:	b672      	cpsid	i
 800ed06:	f383 8811 	msr	BASEPRI, r3
 800ed0a:	f3bf 8f6f 	isb	sy
 800ed0e:	f3bf 8f4f 	dsb	sy
 800ed12:	b662      	cpsie	i
 800ed14:	61fb      	str	r3, [r7, #28]
}
 800ed16:	bf00      	nop
 800ed18:	e7fe      	b.n	800ed18 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ed1a:	f001 ffc7 	bl	8010cac <vPortValidateInterruptPriority>
	__asm volatile
 800ed1e:	f3ef 8211 	mrs	r2, BASEPRI
 800ed22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed26:	b672      	cpsid	i
 800ed28:	f383 8811 	msr	BASEPRI, r3
 800ed2c:	f3bf 8f6f 	isb	sy
 800ed30:	f3bf 8f4f 	dsb	sy
 800ed34:	b662      	cpsie	i
 800ed36:	61ba      	str	r2, [r7, #24]
 800ed38:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800ed3a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed3c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed42:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ed44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d02f      	beq.n	800edaa <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800ed4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed4c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ed50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ed54:	68b9      	ldr	r1, [r7, #8]
 800ed56:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ed58:	f000 f8db 	bl	800ef12 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ed5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ed5e:	1e5a      	subs	r2, r3, #1
 800ed60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed62:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800ed64:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ed68:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed6c:	d112      	bne.n	800ed94 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ed6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed70:	691b      	ldr	r3, [r3, #16]
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d016      	beq.n	800eda4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ed76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ed78:	3310      	adds	r3, #16
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	f000 fe96 	bl	800faac <xTaskRemoveFromEventList>
 800ed80:	4603      	mov	r3, r0
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d00e      	beq.n	800eda4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d00b      	beq.n	800eda4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	2201      	movs	r2, #1
 800ed90:	601a      	str	r2, [r3, #0]
 800ed92:	e007      	b.n	800eda4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ed94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ed98:	3301      	adds	r3, #1
 800ed9a:	b2db      	uxtb	r3, r3
 800ed9c:	b25a      	sxtb	r2, r3
 800ed9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800eda4:	2301      	movs	r3, #1
 800eda6:	637b      	str	r3, [r7, #52]	; 0x34
 800eda8:	e001      	b.n	800edae <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800edaa:	2300      	movs	r3, #0
 800edac:	637b      	str	r3, [r7, #52]	; 0x34
 800edae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800edb0:	613b      	str	r3, [r7, #16]
	__asm volatile
 800edb2:	693b      	ldr	r3, [r7, #16]
 800edb4:	f383 8811 	msr	BASEPRI, r3
}
 800edb8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800edba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800edbc:	4618      	mov	r0, r3
 800edbe:	3738      	adds	r7, #56	; 0x38
 800edc0:	46bd      	mov	sp, r7
 800edc2:	bd80      	pop	{r7, pc}

0800edc4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800edc4:	b580      	push	{r7, lr}
 800edc6:	b084      	sub	sp, #16
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	2b00      	cmp	r3, #0
 800edd4:	d10c      	bne.n	800edf0 <vQueueDelete+0x2c>
	__asm volatile
 800edd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edda:	b672      	cpsid	i
 800eddc:	f383 8811 	msr	BASEPRI, r3
 800ede0:	f3bf 8f6f 	isb	sy
 800ede4:	f3bf 8f4f 	dsb	sy
 800ede8:	b662      	cpsie	i
 800edea:	60bb      	str	r3, [r7, #8]
}
 800edec:	bf00      	nop
 800edee:	e7fe      	b.n	800edee <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800edf0:	68f8      	ldr	r0, [r7, #12]
 800edf2:	f000 f95f 	bl	800f0b4 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800edf6:	68fb      	ldr	r3, [r7, #12]
 800edf8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800edfc:	2b00      	cmp	r3, #0
 800edfe:	d102      	bne.n	800ee06 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 800ee00:	68f8      	ldr	r0, [r7, #12]
 800ee02:	f002 f861 	bl	8010ec8 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800ee06:	bf00      	nop
 800ee08:	3710      	adds	r7, #16
 800ee0a:	46bd      	mov	sp, r7
 800ee0c:	bd80      	pop	{r7, pc}

0800ee0e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800ee0e:	b480      	push	{r7}
 800ee10:	b085      	sub	sp, #20
 800ee12:	af00      	add	r7, sp, #0
 800ee14:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee1a:	2b00      	cmp	r3, #0
 800ee1c:	d006      	beq.n	800ee2c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800ee28:	60fb      	str	r3, [r7, #12]
 800ee2a:	e001      	b.n	800ee30 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800ee30:	68fb      	ldr	r3, [r7, #12]
	}
 800ee32:	4618      	mov	r0, r3
 800ee34:	3714      	adds	r7, #20
 800ee36:	46bd      	mov	sp, r7
 800ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3c:	4770      	bx	lr

0800ee3e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800ee3e:	b580      	push	{r7, lr}
 800ee40:	b086      	sub	sp, #24
 800ee42:	af00      	add	r7, sp, #0
 800ee44:	60f8      	str	r0, [r7, #12]
 800ee46:	60b9      	str	r1, [r7, #8]
 800ee48:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee4e:	68fb      	ldr	r3, [r7, #12]
 800ee50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee52:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d10d      	bne.n	800ee78 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	2b00      	cmp	r3, #0
 800ee62:	d14d      	bne.n	800ef00 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800ee64:	68fb      	ldr	r3, [r7, #12]
 800ee66:	689b      	ldr	r3, [r3, #8]
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f001 f86f 	bl	800ff4c <xTaskPriorityDisinherit>
 800ee6e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	2200      	movs	r2, #0
 800ee74:	609a      	str	r2, [r3, #8]
 800ee76:	e043      	b.n	800ef00 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d119      	bne.n	800eeb2 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ee7e:	68fb      	ldr	r3, [r7, #12]
 800ee80:	6858      	ldr	r0, [r3, #4]
 800ee82:	68fb      	ldr	r3, [r7, #12]
 800ee84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee86:	461a      	mov	r2, r3
 800ee88:	68b9      	ldr	r1, [r7, #8]
 800ee8a:	f002 ff17 	bl	8011cbc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	685a      	ldr	r2, [r3, #4]
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ee96:	441a      	add	r2, r3
 800ee98:	68fb      	ldr	r3, [r7, #12]
 800ee9a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	685a      	ldr	r2, [r3, #4]
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	689b      	ldr	r3, [r3, #8]
 800eea4:	429a      	cmp	r2, r3
 800eea6:	d32b      	bcc.n	800ef00 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800eea8:	68fb      	ldr	r3, [r7, #12]
 800eeaa:	681a      	ldr	r2, [r3, #0]
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	605a      	str	r2, [r3, #4]
 800eeb0:	e026      	b.n	800ef00 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800eeb2:	68fb      	ldr	r3, [r7, #12]
 800eeb4:	68d8      	ldr	r0, [r3, #12]
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeba:	461a      	mov	r2, r3
 800eebc:	68b9      	ldr	r1, [r7, #8]
 800eebe:	f002 fefd 	bl	8011cbc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800eec2:	68fb      	ldr	r3, [r7, #12]
 800eec4:	68da      	ldr	r2, [r3, #12]
 800eec6:	68fb      	ldr	r3, [r7, #12]
 800eec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeca:	425b      	negs	r3, r3
 800eecc:	441a      	add	r2, r3
 800eece:	68fb      	ldr	r3, [r7, #12]
 800eed0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	68da      	ldr	r2, [r3, #12]
 800eed6:	68fb      	ldr	r3, [r7, #12]
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	429a      	cmp	r2, r3
 800eedc:	d207      	bcs.n	800eeee <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800eede:	68fb      	ldr	r3, [r7, #12]
 800eee0:	689a      	ldr	r2, [r3, #8]
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eee6:	425b      	negs	r3, r3
 800eee8:	441a      	add	r2, r3
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	2b02      	cmp	r3, #2
 800eef2:	d105      	bne.n	800ef00 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	2b00      	cmp	r3, #0
 800eef8:	d002      	beq.n	800ef00 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	3b01      	subs	r3, #1
 800eefe:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ef00:	693b      	ldr	r3, [r7, #16]
 800ef02:	1c5a      	adds	r2, r3, #1
 800ef04:	68fb      	ldr	r3, [r7, #12]
 800ef06:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800ef08:	697b      	ldr	r3, [r7, #20]
}
 800ef0a:	4618      	mov	r0, r3
 800ef0c:	3718      	adds	r7, #24
 800ef0e:	46bd      	mov	sp, r7
 800ef10:	bd80      	pop	{r7, pc}

0800ef12 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800ef12:	b580      	push	{r7, lr}
 800ef14:	b082      	sub	sp, #8
 800ef16:	af00      	add	r7, sp, #0
 800ef18:	6078      	str	r0, [r7, #4]
 800ef1a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d018      	beq.n	800ef56 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	68da      	ldr	r2, [r3, #12]
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef2c:	441a      	add	r2, r3
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	68da      	ldr	r2, [r3, #12]
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	689b      	ldr	r3, [r3, #8]
 800ef3a:	429a      	cmp	r2, r3
 800ef3c:	d303      	bcc.n	800ef46 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681a      	ldr	r2, [r3, #0]
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ef46:	687b      	ldr	r3, [r7, #4]
 800ef48:	68d9      	ldr	r1, [r3, #12]
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ef4e:	461a      	mov	r2, r3
 800ef50:	6838      	ldr	r0, [r7, #0]
 800ef52:	f002 feb3 	bl	8011cbc <memcpy>
	}
}
 800ef56:	bf00      	nop
 800ef58:	3708      	adds	r7, #8
 800ef5a:	46bd      	mov	sp, r7
 800ef5c:	bd80      	pop	{r7, pc}

0800ef5e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800ef5e:	b580      	push	{r7, lr}
 800ef60:	b084      	sub	sp, #16
 800ef62:	af00      	add	r7, sp, #0
 800ef64:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ef66:	f001 fdb9 	bl	8010adc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ef70:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef72:	e011      	b.n	800ef98 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ef78:	2b00      	cmp	r3, #0
 800ef7a:	d012      	beq.n	800efa2 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	3324      	adds	r3, #36	; 0x24
 800ef80:	4618      	mov	r0, r3
 800ef82:	f000 fd93 	bl	800faac <xTaskRemoveFromEventList>
 800ef86:	4603      	mov	r3, r0
 800ef88:	2b00      	cmp	r3, #0
 800ef8a:	d001      	beq.n	800ef90 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ef8c:	f000 fe70 	bl	800fc70 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ef90:	7bfb      	ldrb	r3, [r7, #15]
 800ef92:	3b01      	subs	r3, #1
 800ef94:	b2db      	uxtb	r3, r3
 800ef96:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ef98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ef9c:	2b00      	cmp	r3, #0
 800ef9e:	dce9      	bgt.n	800ef74 <prvUnlockQueue+0x16>
 800efa0:	e000      	b.n	800efa4 <prvUnlockQueue+0x46>
					break;
 800efa2:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800efa4:	687b      	ldr	r3, [r7, #4]
 800efa6:	22ff      	movs	r2, #255	; 0xff
 800efa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800efac:	f001 fdca 	bl	8010b44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800efb0:	f001 fd94 	bl	8010adc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800efba:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800efbc:	e011      	b.n	800efe2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	691b      	ldr	r3, [r3, #16]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d012      	beq.n	800efec <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	3310      	adds	r3, #16
 800efca:	4618      	mov	r0, r3
 800efcc:	f000 fd6e 	bl	800faac <xTaskRemoveFromEventList>
 800efd0:	4603      	mov	r3, r0
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d001      	beq.n	800efda <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800efd6:	f000 fe4b 	bl	800fc70 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800efda:	7bbb      	ldrb	r3, [r7, #14]
 800efdc:	3b01      	subs	r3, #1
 800efde:	b2db      	uxtb	r3, r3
 800efe0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800efe2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	dce9      	bgt.n	800efbe <prvUnlockQueue+0x60>
 800efea:	e000      	b.n	800efee <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800efec:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	22ff      	movs	r2, #255	; 0xff
 800eff2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800eff6:	f001 fda5 	bl	8010b44 <vPortExitCritical>
}
 800effa:	bf00      	nop
 800effc:	3710      	adds	r7, #16
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}

0800f002 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f002:	b580      	push	{r7, lr}
 800f004:	b084      	sub	sp, #16
 800f006:	af00      	add	r7, sp, #0
 800f008:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f00a:	f001 fd67 	bl	8010adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f00e:	687b      	ldr	r3, [r7, #4]
 800f010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f012:	2b00      	cmp	r3, #0
 800f014:	d102      	bne.n	800f01c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f016:	2301      	movs	r3, #1
 800f018:	60fb      	str	r3, [r7, #12]
 800f01a:	e001      	b.n	800f020 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f01c:	2300      	movs	r3, #0
 800f01e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f020:	f001 fd90 	bl	8010b44 <vPortExitCritical>

	return xReturn;
 800f024:	68fb      	ldr	r3, [r7, #12]
}
 800f026:	4618      	mov	r0, r3
 800f028:	3710      	adds	r7, #16
 800f02a:	46bd      	mov	sp, r7
 800f02c:	bd80      	pop	{r7, pc}

0800f02e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f02e:	b580      	push	{r7, lr}
 800f030:	b084      	sub	sp, #16
 800f032:	af00      	add	r7, sp, #0
 800f034:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f036:	f001 fd51 	bl	8010adc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f03a:	687b      	ldr	r3, [r7, #4]
 800f03c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f042:	429a      	cmp	r2, r3
 800f044:	d102      	bne.n	800f04c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f046:	2301      	movs	r3, #1
 800f048:	60fb      	str	r3, [r7, #12]
 800f04a:	e001      	b.n	800f050 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f04c:	2300      	movs	r3, #0
 800f04e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f050:	f001 fd78 	bl	8010b44 <vPortExitCritical>

	return xReturn;
 800f054:	68fb      	ldr	r3, [r7, #12]
}
 800f056:	4618      	mov	r0, r3
 800f058:	3710      	adds	r7, #16
 800f05a:	46bd      	mov	sp, r7
 800f05c:	bd80      	pop	{r7, pc}
	...

0800f060 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f060:	b480      	push	{r7}
 800f062:	b085      	sub	sp, #20
 800f064:	af00      	add	r7, sp, #0
 800f066:	6078      	str	r0, [r7, #4]
 800f068:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f06a:	2300      	movs	r3, #0
 800f06c:	60fb      	str	r3, [r7, #12]
 800f06e:	e014      	b.n	800f09a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f070:	4a0f      	ldr	r2, [pc, #60]	; (800f0b0 <vQueueAddToRegistry+0x50>)
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f078:	2b00      	cmp	r3, #0
 800f07a:	d10b      	bne.n	800f094 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f07c:	490c      	ldr	r1, [pc, #48]	; (800f0b0 <vQueueAddToRegistry+0x50>)
 800f07e:	68fb      	ldr	r3, [r7, #12]
 800f080:	683a      	ldr	r2, [r7, #0]
 800f082:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f086:	4a0a      	ldr	r2, [pc, #40]	; (800f0b0 <vQueueAddToRegistry+0x50>)
 800f088:	68fb      	ldr	r3, [r7, #12]
 800f08a:	00db      	lsls	r3, r3, #3
 800f08c:	4413      	add	r3, r2
 800f08e:	687a      	ldr	r2, [r7, #4]
 800f090:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f092:	e006      	b.n	800f0a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	3301      	adds	r3, #1
 800f098:	60fb      	str	r3, [r7, #12]
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	2b07      	cmp	r3, #7
 800f09e:	d9e7      	bls.n	800f070 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f0a0:	bf00      	nop
 800f0a2:	bf00      	nop
 800f0a4:	3714      	adds	r7, #20
 800f0a6:	46bd      	mov	sp, r7
 800f0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ac:	4770      	bx	lr
 800f0ae:	bf00      	nop
 800f0b0:	20001600 	.word	0x20001600

0800f0b4 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800f0b4:	b480      	push	{r7}
 800f0b6:	b085      	sub	sp, #20
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0bc:	2300      	movs	r3, #0
 800f0be:	60fb      	str	r3, [r7, #12]
 800f0c0:	e016      	b.n	800f0f0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800f0c2:	4a10      	ldr	r2, [pc, #64]	; (800f104 <vQueueUnregisterQueue+0x50>)
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	00db      	lsls	r3, r3, #3
 800f0c8:	4413      	add	r3, r2
 800f0ca:	685b      	ldr	r3, [r3, #4]
 800f0cc:	687a      	ldr	r2, [r7, #4]
 800f0ce:	429a      	cmp	r2, r3
 800f0d0:	d10b      	bne.n	800f0ea <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800f0d2:	4a0c      	ldr	r2, [pc, #48]	; (800f104 <vQueueUnregisterQueue+0x50>)
 800f0d4:	68fb      	ldr	r3, [r7, #12]
 800f0d6:	2100      	movs	r1, #0
 800f0d8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800f0dc:	4a09      	ldr	r2, [pc, #36]	; (800f104 <vQueueUnregisterQueue+0x50>)
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	00db      	lsls	r3, r3, #3
 800f0e2:	4413      	add	r3, r2
 800f0e4:	2200      	movs	r2, #0
 800f0e6:	605a      	str	r2, [r3, #4]
				break;
 800f0e8:	e006      	b.n	800f0f8 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	3301      	adds	r3, #1
 800f0ee:	60fb      	str	r3, [r7, #12]
 800f0f0:	68fb      	ldr	r3, [r7, #12]
 800f0f2:	2b07      	cmp	r3, #7
 800f0f4:	d9e5      	bls.n	800f0c2 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800f0f6:	bf00      	nop
 800f0f8:	bf00      	nop
 800f0fa:	3714      	adds	r7, #20
 800f0fc:	46bd      	mov	sp, r7
 800f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f102:	4770      	bx	lr
 800f104:	20001600 	.word	0x20001600

0800f108 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f108:	b580      	push	{r7, lr}
 800f10a:	b086      	sub	sp, #24
 800f10c:	af00      	add	r7, sp, #0
 800f10e:	60f8      	str	r0, [r7, #12]
 800f110:	60b9      	str	r1, [r7, #8]
 800f112:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f118:	f001 fce0 	bl	8010adc <vPortEnterCritical>
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f122:	b25b      	sxtb	r3, r3
 800f124:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f128:	d103      	bne.n	800f132 <vQueueWaitForMessageRestricted+0x2a>
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	2200      	movs	r2, #0
 800f12e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f132:	697b      	ldr	r3, [r7, #20]
 800f134:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f138:	b25b      	sxtb	r3, r3
 800f13a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f13e:	d103      	bne.n	800f148 <vQueueWaitForMessageRestricted+0x40>
 800f140:	697b      	ldr	r3, [r7, #20]
 800f142:	2200      	movs	r2, #0
 800f144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f148:	f001 fcfc 	bl	8010b44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f14c:	697b      	ldr	r3, [r7, #20]
 800f14e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f150:	2b00      	cmp	r3, #0
 800f152:	d106      	bne.n	800f162 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f154:	697b      	ldr	r3, [r7, #20]
 800f156:	3324      	adds	r3, #36	; 0x24
 800f158:	687a      	ldr	r2, [r7, #4]
 800f15a:	68b9      	ldr	r1, [r7, #8]
 800f15c:	4618      	mov	r0, r3
 800f15e:	f000 fc77 	bl	800fa50 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f162:	6978      	ldr	r0, [r7, #20]
 800f164:	f7ff fefb 	bl	800ef5e <prvUnlockQueue>
	}
 800f168:	bf00      	nop
 800f16a:	3718      	adds	r7, #24
 800f16c:	46bd      	mov	sp, r7
 800f16e:	bd80      	pop	{r7, pc}

0800f170 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f170:	b580      	push	{r7, lr}
 800f172:	b08e      	sub	sp, #56	; 0x38
 800f174:	af04      	add	r7, sp, #16
 800f176:	60f8      	str	r0, [r7, #12]
 800f178:	60b9      	str	r1, [r7, #8]
 800f17a:	607a      	str	r2, [r7, #4]
 800f17c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f17e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f180:	2b00      	cmp	r3, #0
 800f182:	d10c      	bne.n	800f19e <xTaskCreateStatic+0x2e>
	__asm volatile
 800f184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f188:	b672      	cpsid	i
 800f18a:	f383 8811 	msr	BASEPRI, r3
 800f18e:	f3bf 8f6f 	isb	sy
 800f192:	f3bf 8f4f 	dsb	sy
 800f196:	b662      	cpsie	i
 800f198:	623b      	str	r3, [r7, #32]
}
 800f19a:	bf00      	nop
 800f19c:	e7fe      	b.n	800f19c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800f19e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d10c      	bne.n	800f1be <xTaskCreateStatic+0x4e>
	__asm volatile
 800f1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a8:	b672      	cpsid	i
 800f1aa:	f383 8811 	msr	BASEPRI, r3
 800f1ae:	f3bf 8f6f 	isb	sy
 800f1b2:	f3bf 8f4f 	dsb	sy
 800f1b6:	b662      	cpsie	i
 800f1b8:	61fb      	str	r3, [r7, #28]
}
 800f1ba:	bf00      	nop
 800f1bc:	e7fe      	b.n	800f1bc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f1be:	23bc      	movs	r3, #188	; 0xbc
 800f1c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f1c2:	693b      	ldr	r3, [r7, #16]
 800f1c4:	2bbc      	cmp	r3, #188	; 0xbc
 800f1c6:	d00c      	beq.n	800f1e2 <xTaskCreateStatic+0x72>
	__asm volatile
 800f1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1cc:	b672      	cpsid	i
 800f1ce:	f383 8811 	msr	BASEPRI, r3
 800f1d2:	f3bf 8f6f 	isb	sy
 800f1d6:	f3bf 8f4f 	dsb	sy
 800f1da:	b662      	cpsie	i
 800f1dc:	61bb      	str	r3, [r7, #24]
}
 800f1de:	bf00      	nop
 800f1e0:	e7fe      	b.n	800f1e0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f1e2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f1e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	d01e      	beq.n	800f228 <xTaskCreateStatic+0xb8>
 800f1ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f1ec:	2b00      	cmp	r3, #0
 800f1ee:	d01b      	beq.n	800f228 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f1f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1f2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f1f8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f1fc:	2202      	movs	r2, #2
 800f1fe:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f202:	2300      	movs	r3, #0
 800f204:	9303      	str	r3, [sp, #12]
 800f206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f208:	9302      	str	r3, [sp, #8]
 800f20a:	f107 0314 	add.w	r3, r7, #20
 800f20e:	9301      	str	r3, [sp, #4]
 800f210:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f212:	9300      	str	r3, [sp, #0]
 800f214:	683b      	ldr	r3, [r7, #0]
 800f216:	687a      	ldr	r2, [r7, #4]
 800f218:	68b9      	ldr	r1, [r7, #8]
 800f21a:	68f8      	ldr	r0, [r7, #12]
 800f21c:	f000 f850 	bl	800f2c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f220:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f222:	f000 f8f5 	bl	800f410 <prvAddNewTaskToReadyList>
 800f226:	e001      	b.n	800f22c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800f228:	2300      	movs	r3, #0
 800f22a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f22c:	697b      	ldr	r3, [r7, #20]
	}
 800f22e:	4618      	mov	r0, r3
 800f230:	3728      	adds	r7, #40	; 0x28
 800f232:	46bd      	mov	sp, r7
 800f234:	bd80      	pop	{r7, pc}

0800f236 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f236:	b580      	push	{r7, lr}
 800f238:	b08c      	sub	sp, #48	; 0x30
 800f23a:	af04      	add	r7, sp, #16
 800f23c:	60f8      	str	r0, [r7, #12]
 800f23e:	60b9      	str	r1, [r7, #8]
 800f240:	603b      	str	r3, [r7, #0]
 800f242:	4613      	mov	r3, r2
 800f244:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f246:	88fb      	ldrh	r3, [r7, #6]
 800f248:	009b      	lsls	r3, r3, #2
 800f24a:	4618      	mov	r0, r3
 800f24c:	f001 fd72 	bl	8010d34 <pvPortMalloc>
 800f250:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f252:	697b      	ldr	r3, [r7, #20]
 800f254:	2b00      	cmp	r3, #0
 800f256:	d00e      	beq.n	800f276 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f258:	20bc      	movs	r0, #188	; 0xbc
 800f25a:	f001 fd6b 	bl	8010d34 <pvPortMalloc>
 800f25e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f260:	69fb      	ldr	r3, [r7, #28]
 800f262:	2b00      	cmp	r3, #0
 800f264:	d003      	beq.n	800f26e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f266:	69fb      	ldr	r3, [r7, #28]
 800f268:	697a      	ldr	r2, [r7, #20]
 800f26a:	631a      	str	r2, [r3, #48]	; 0x30
 800f26c:	e005      	b.n	800f27a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f26e:	6978      	ldr	r0, [r7, #20]
 800f270:	f001 fe2a 	bl	8010ec8 <vPortFree>
 800f274:	e001      	b.n	800f27a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f276:	2300      	movs	r3, #0
 800f278:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f27a:	69fb      	ldr	r3, [r7, #28]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d017      	beq.n	800f2b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f280:	69fb      	ldr	r3, [r7, #28]
 800f282:	2200      	movs	r2, #0
 800f284:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f288:	88fa      	ldrh	r2, [r7, #6]
 800f28a:	2300      	movs	r3, #0
 800f28c:	9303      	str	r3, [sp, #12]
 800f28e:	69fb      	ldr	r3, [r7, #28]
 800f290:	9302      	str	r3, [sp, #8]
 800f292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f294:	9301      	str	r3, [sp, #4]
 800f296:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f298:	9300      	str	r3, [sp, #0]
 800f29a:	683b      	ldr	r3, [r7, #0]
 800f29c:	68b9      	ldr	r1, [r7, #8]
 800f29e:	68f8      	ldr	r0, [r7, #12]
 800f2a0:	f000 f80e 	bl	800f2c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f2a4:	69f8      	ldr	r0, [r7, #28]
 800f2a6:	f000 f8b3 	bl	800f410 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f2aa:	2301      	movs	r3, #1
 800f2ac:	61bb      	str	r3, [r7, #24]
 800f2ae:	e002      	b.n	800f2b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f2b0:	f04f 33ff 	mov.w	r3, #4294967295
 800f2b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f2b6:	69bb      	ldr	r3, [r7, #24]
	}
 800f2b8:	4618      	mov	r0, r3
 800f2ba:	3720      	adds	r7, #32
 800f2bc:	46bd      	mov	sp, r7
 800f2be:	bd80      	pop	{r7, pc}

0800f2c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f2c0:	b580      	push	{r7, lr}
 800f2c2:	b088      	sub	sp, #32
 800f2c4:	af00      	add	r7, sp, #0
 800f2c6:	60f8      	str	r0, [r7, #12]
 800f2c8:	60b9      	str	r1, [r7, #8]
 800f2ca:	607a      	str	r2, [r7, #4]
 800f2cc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f2ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	009b      	lsls	r3, r3, #2
 800f2d6:	461a      	mov	r2, r3
 800f2d8:	21a5      	movs	r1, #165	; 0xa5
 800f2da:	f002 fcfd 	bl	8011cd8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f2e2:	6879      	ldr	r1, [r7, #4]
 800f2e4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800f2e8:	440b      	add	r3, r1
 800f2ea:	009b      	lsls	r3, r3, #2
 800f2ec:	4413      	add	r3, r2
 800f2ee:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f2f0:	69bb      	ldr	r3, [r7, #24]
 800f2f2:	f023 0307 	bic.w	r3, r3, #7
 800f2f6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f2f8:	69bb      	ldr	r3, [r7, #24]
 800f2fa:	f003 0307 	and.w	r3, r3, #7
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	d00c      	beq.n	800f31c <prvInitialiseNewTask+0x5c>
	__asm volatile
 800f302:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f306:	b672      	cpsid	i
 800f308:	f383 8811 	msr	BASEPRI, r3
 800f30c:	f3bf 8f6f 	isb	sy
 800f310:	f3bf 8f4f 	dsb	sy
 800f314:	b662      	cpsie	i
 800f316:	617b      	str	r3, [r7, #20]
}
 800f318:	bf00      	nop
 800f31a:	e7fe      	b.n	800f31a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f31c:	68bb      	ldr	r3, [r7, #8]
 800f31e:	2b00      	cmp	r3, #0
 800f320:	d01f      	beq.n	800f362 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f322:	2300      	movs	r3, #0
 800f324:	61fb      	str	r3, [r7, #28]
 800f326:	e012      	b.n	800f34e <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f328:	68ba      	ldr	r2, [r7, #8]
 800f32a:	69fb      	ldr	r3, [r7, #28]
 800f32c:	4413      	add	r3, r2
 800f32e:	7819      	ldrb	r1, [r3, #0]
 800f330:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f332:	69fb      	ldr	r3, [r7, #28]
 800f334:	4413      	add	r3, r2
 800f336:	3334      	adds	r3, #52	; 0x34
 800f338:	460a      	mov	r2, r1
 800f33a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f33c:	68ba      	ldr	r2, [r7, #8]
 800f33e:	69fb      	ldr	r3, [r7, #28]
 800f340:	4413      	add	r3, r2
 800f342:	781b      	ldrb	r3, [r3, #0]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d006      	beq.n	800f356 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f348:	69fb      	ldr	r3, [r7, #28]
 800f34a:	3301      	adds	r3, #1
 800f34c:	61fb      	str	r3, [r7, #28]
 800f34e:	69fb      	ldr	r3, [r7, #28]
 800f350:	2b0f      	cmp	r3, #15
 800f352:	d9e9      	bls.n	800f328 <prvInitialiseNewTask+0x68>
 800f354:	e000      	b.n	800f358 <prvInitialiseNewTask+0x98>
			{
				break;
 800f356:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f35a:	2200      	movs	r2, #0
 800f35c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f360:	e003      	b.n	800f36a <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f364:	2200      	movs	r2, #0
 800f366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36c:	2b37      	cmp	r3, #55	; 0x37
 800f36e:	d901      	bls.n	800f374 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f370:	2337      	movs	r3, #55	; 0x37
 800f372:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f376:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f378:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f37a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f37c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f37e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f380:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f382:	2200      	movs	r2, #0
 800f384:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f388:	3304      	adds	r3, #4
 800f38a:	4618      	mov	r0, r3
 800f38c:	f7fe fe06 	bl	800df9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f392:	3318      	adds	r3, #24
 800f394:	4618      	mov	r0, r3
 800f396:	f7fe fe01 	bl	800df9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f39c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f39e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f3a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f3aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f3b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3b2:	2200      	movs	r2, #0
 800f3b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f3b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ba:	2200      	movs	r2, #0
 800f3bc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800f3c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3c2:	3354      	adds	r3, #84	; 0x54
 800f3c4:	2260      	movs	r2, #96	; 0x60
 800f3c6:	2100      	movs	r1, #0
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f002 fc85 	bl	8011cd8 <memset>
 800f3ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d0:	4a0c      	ldr	r2, [pc, #48]	; (800f404 <prvInitialiseNewTask+0x144>)
 800f3d2:	659a      	str	r2, [r3, #88]	; 0x58
 800f3d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3d6:	4a0c      	ldr	r2, [pc, #48]	; (800f408 <prvInitialiseNewTask+0x148>)
 800f3d8:	65da      	str	r2, [r3, #92]	; 0x5c
 800f3da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3dc:	4a0b      	ldr	r2, [pc, #44]	; (800f40c <prvInitialiseNewTask+0x14c>)
 800f3de:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f3e0:	683a      	ldr	r2, [r7, #0]
 800f3e2:	68f9      	ldr	r1, [r7, #12]
 800f3e4:	69b8      	ldr	r0, [r7, #24]
 800f3e6:	f001 fa6d 	bl	80108c4 <pxPortInitialiseStack>
 800f3ea:	4602      	mov	r2, r0
 800f3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f2:	2b00      	cmp	r3, #0
 800f3f4:	d002      	beq.n	800f3fc <prvInitialiseNewTask+0x13c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f3f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f3fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f3fc:	bf00      	nop
 800f3fe:	3720      	adds	r7, #32
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}
 800f404:	0801211c 	.word	0x0801211c
 800f408:	0801213c 	.word	0x0801213c
 800f40c:	080120fc 	.word	0x080120fc

0800f410 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b082      	sub	sp, #8
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f418:	f001 fb60 	bl	8010adc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f41c:	4b2d      	ldr	r3, [pc, #180]	; (800f4d4 <prvAddNewTaskToReadyList+0xc4>)
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	3301      	adds	r3, #1
 800f422:	4a2c      	ldr	r2, [pc, #176]	; (800f4d4 <prvAddNewTaskToReadyList+0xc4>)
 800f424:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f426:	4b2c      	ldr	r3, [pc, #176]	; (800f4d8 <prvAddNewTaskToReadyList+0xc8>)
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	2b00      	cmp	r3, #0
 800f42c:	d109      	bne.n	800f442 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f42e:	4a2a      	ldr	r2, [pc, #168]	; (800f4d8 <prvAddNewTaskToReadyList+0xc8>)
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f434:	4b27      	ldr	r3, [pc, #156]	; (800f4d4 <prvAddNewTaskToReadyList+0xc4>)
 800f436:	681b      	ldr	r3, [r3, #0]
 800f438:	2b01      	cmp	r3, #1
 800f43a:	d110      	bne.n	800f45e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f43c:	f000 fc3c 	bl	800fcb8 <prvInitialiseTaskLists>
 800f440:	e00d      	b.n	800f45e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f442:	4b26      	ldr	r3, [pc, #152]	; (800f4dc <prvAddNewTaskToReadyList+0xcc>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d109      	bne.n	800f45e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f44a:	4b23      	ldr	r3, [pc, #140]	; (800f4d8 <prvAddNewTaskToReadyList+0xc8>)
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f454:	429a      	cmp	r2, r3
 800f456:	d802      	bhi.n	800f45e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f458:	4a1f      	ldr	r2, [pc, #124]	; (800f4d8 <prvAddNewTaskToReadyList+0xc8>)
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f45e:	4b20      	ldr	r3, [pc, #128]	; (800f4e0 <prvAddNewTaskToReadyList+0xd0>)
 800f460:	681b      	ldr	r3, [r3, #0]
 800f462:	3301      	adds	r3, #1
 800f464:	4a1e      	ldr	r2, [pc, #120]	; (800f4e0 <prvAddNewTaskToReadyList+0xd0>)
 800f466:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f468:	4b1d      	ldr	r3, [pc, #116]	; (800f4e0 <prvAddNewTaskToReadyList+0xd0>)
 800f46a:	681a      	ldr	r2, [r3, #0]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f474:	4b1b      	ldr	r3, [pc, #108]	; (800f4e4 <prvAddNewTaskToReadyList+0xd4>)
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	429a      	cmp	r2, r3
 800f47a:	d903      	bls.n	800f484 <prvAddNewTaskToReadyList+0x74>
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f480:	4a18      	ldr	r2, [pc, #96]	; (800f4e4 <prvAddNewTaskToReadyList+0xd4>)
 800f482:	6013      	str	r3, [r2, #0]
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f488:	4613      	mov	r3, r2
 800f48a:	009b      	lsls	r3, r3, #2
 800f48c:	4413      	add	r3, r2
 800f48e:	009b      	lsls	r3, r3, #2
 800f490:	4a15      	ldr	r2, [pc, #84]	; (800f4e8 <prvAddNewTaskToReadyList+0xd8>)
 800f492:	441a      	add	r2, r3
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	3304      	adds	r3, #4
 800f498:	4619      	mov	r1, r3
 800f49a:	4610      	mov	r0, r2
 800f49c:	f7fe fd8b 	bl	800dfb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f4a0:	f001 fb50 	bl	8010b44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f4a4:	4b0d      	ldr	r3, [pc, #52]	; (800f4dc <prvAddNewTaskToReadyList+0xcc>)
 800f4a6:	681b      	ldr	r3, [r3, #0]
 800f4a8:	2b00      	cmp	r3, #0
 800f4aa:	d00e      	beq.n	800f4ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f4ac:	4b0a      	ldr	r3, [pc, #40]	; (800f4d8 <prvAddNewTaskToReadyList+0xc8>)
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f4b6:	429a      	cmp	r2, r3
 800f4b8:	d207      	bcs.n	800f4ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f4ba:	4b0c      	ldr	r3, [pc, #48]	; (800f4ec <prvAddNewTaskToReadyList+0xdc>)
 800f4bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f4c0:	601a      	str	r2, [r3, #0]
 800f4c2:	f3bf 8f4f 	dsb	sy
 800f4c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f4ca:	bf00      	nop
 800f4cc:	3708      	adds	r7, #8
 800f4ce:	46bd      	mov	sp, r7
 800f4d0:	bd80      	pop	{r7, pc}
 800f4d2:	bf00      	nop
 800f4d4:	20001b14 	.word	0x20001b14
 800f4d8:	20001640 	.word	0x20001640
 800f4dc:	20001b20 	.word	0x20001b20
 800f4e0:	20001b30 	.word	0x20001b30
 800f4e4:	20001b1c 	.word	0x20001b1c
 800f4e8:	20001644 	.word	0x20001644
 800f4ec:	e000ed04 	.word	0xe000ed04

0800f4f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b084      	sub	sp, #16
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d019      	beq.n	800f536 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f502:	4b14      	ldr	r3, [pc, #80]	; (800f554 <vTaskDelay+0x64>)
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d00c      	beq.n	800f524 <vTaskDelay+0x34>
	__asm volatile
 800f50a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f50e:	b672      	cpsid	i
 800f510:	f383 8811 	msr	BASEPRI, r3
 800f514:	f3bf 8f6f 	isb	sy
 800f518:	f3bf 8f4f 	dsb	sy
 800f51c:	b662      	cpsie	i
 800f51e:	60bb      	str	r3, [r7, #8]
}
 800f520:	bf00      	nop
 800f522:	e7fe      	b.n	800f522 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800f524:	f000 f88e 	bl	800f644 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800f528:	2100      	movs	r1, #0
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f000 fe1a 	bl	8010164 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800f530:	f000 f896 	bl	800f660 <xTaskResumeAll>
 800f534:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800f536:	68fb      	ldr	r3, [r7, #12]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d107      	bne.n	800f54c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800f53c:	4b06      	ldr	r3, [pc, #24]	; (800f558 <vTaskDelay+0x68>)
 800f53e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f542:	601a      	str	r2, [r3, #0]
 800f544:	f3bf 8f4f 	dsb	sy
 800f548:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800f54c:	bf00      	nop
 800f54e:	3710      	adds	r7, #16
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}
 800f554:	20001b3c 	.word	0x20001b3c
 800f558:	e000ed04 	.word	0xe000ed04

0800f55c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b08a      	sub	sp, #40	; 0x28
 800f560:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f562:	2300      	movs	r3, #0
 800f564:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f566:	2300      	movs	r3, #0
 800f568:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f56a:	463a      	mov	r2, r7
 800f56c:	1d39      	adds	r1, r7, #4
 800f56e:	f107 0308 	add.w	r3, r7, #8
 800f572:	4618      	mov	r0, r3
 800f574:	f7fe fcbe 	bl	800def4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f578:	6839      	ldr	r1, [r7, #0]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	68ba      	ldr	r2, [r7, #8]
 800f57e:	9202      	str	r2, [sp, #8]
 800f580:	9301      	str	r3, [sp, #4]
 800f582:	2300      	movs	r3, #0
 800f584:	9300      	str	r3, [sp, #0]
 800f586:	2300      	movs	r3, #0
 800f588:	460a      	mov	r2, r1
 800f58a:	4926      	ldr	r1, [pc, #152]	; (800f624 <vTaskStartScheduler+0xc8>)
 800f58c:	4826      	ldr	r0, [pc, #152]	; (800f628 <vTaskStartScheduler+0xcc>)
 800f58e:	f7ff fdef 	bl	800f170 <xTaskCreateStatic>
 800f592:	4603      	mov	r3, r0
 800f594:	4a25      	ldr	r2, [pc, #148]	; (800f62c <vTaskStartScheduler+0xd0>)
 800f596:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800f598:	4b24      	ldr	r3, [pc, #144]	; (800f62c <vTaskStartScheduler+0xd0>)
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	2b00      	cmp	r3, #0
 800f59e:	d002      	beq.n	800f5a6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800f5a0:	2301      	movs	r3, #1
 800f5a2:	617b      	str	r3, [r7, #20]
 800f5a4:	e001      	b.n	800f5aa <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	2b01      	cmp	r3, #1
 800f5ae:	d102      	bne.n	800f5b6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800f5b0:	f000 fe2c 	bl	801020c <xTimerCreateTimerTask>
 800f5b4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800f5b6:	697b      	ldr	r3, [r7, #20]
 800f5b8:	2b01      	cmp	r3, #1
 800f5ba:	d11d      	bne.n	800f5f8 <vTaskStartScheduler+0x9c>
	__asm volatile
 800f5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5c0:	b672      	cpsid	i
 800f5c2:	f383 8811 	msr	BASEPRI, r3
 800f5c6:	f3bf 8f6f 	isb	sy
 800f5ca:	f3bf 8f4f 	dsb	sy
 800f5ce:	b662      	cpsie	i
 800f5d0:	613b      	str	r3, [r7, #16]
}
 800f5d2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f5d4:	4b16      	ldr	r3, [pc, #88]	; (800f630 <vTaskStartScheduler+0xd4>)
 800f5d6:	681b      	ldr	r3, [r3, #0]
 800f5d8:	3354      	adds	r3, #84	; 0x54
 800f5da:	4a16      	ldr	r2, [pc, #88]	; (800f634 <vTaskStartScheduler+0xd8>)
 800f5dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800f5de:	4b16      	ldr	r3, [pc, #88]	; (800f638 <vTaskStartScheduler+0xdc>)
 800f5e0:	f04f 32ff 	mov.w	r2, #4294967295
 800f5e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800f5e6:	4b15      	ldr	r3, [pc, #84]	; (800f63c <vTaskStartScheduler+0xe0>)
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f5ec:	4b14      	ldr	r3, [pc, #80]	; (800f640 <vTaskStartScheduler+0xe4>)
 800f5ee:	2200      	movs	r2, #0
 800f5f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800f5f2:	f001 f9f5 	bl	80109e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800f5f6:	e010      	b.n	800f61a <vTaskStartScheduler+0xbe>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f5f8:	697b      	ldr	r3, [r7, #20]
 800f5fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f5fe:	d10c      	bne.n	800f61a <vTaskStartScheduler+0xbe>
	__asm volatile
 800f600:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f604:	b672      	cpsid	i
 800f606:	f383 8811 	msr	BASEPRI, r3
 800f60a:	f3bf 8f6f 	isb	sy
 800f60e:	f3bf 8f4f 	dsb	sy
 800f612:	b662      	cpsie	i
 800f614:	60fb      	str	r3, [r7, #12]
}
 800f616:	bf00      	nop
 800f618:	e7fe      	b.n	800f618 <vTaskStartScheduler+0xbc>
}
 800f61a:	bf00      	nop
 800f61c:	3718      	adds	r7, #24
 800f61e:	46bd      	mov	sp, r7
 800f620:	bd80      	pop	{r7, pc}
 800f622:	bf00      	nop
 800f624:	08012004 	.word	0x08012004
 800f628:	0800fc89 	.word	0x0800fc89
 800f62c:	20001b38 	.word	0x20001b38
 800f630:	20001640 	.word	0x20001640
 800f634:	20000194 	.word	0x20000194
 800f638:	20001b34 	.word	0x20001b34
 800f63c:	20001b20 	.word	0x20001b20
 800f640:	20001b18 	.word	0x20001b18

0800f644 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800f644:	b480      	push	{r7}
 800f646:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800f648:	4b04      	ldr	r3, [pc, #16]	; (800f65c <vTaskSuspendAll+0x18>)
 800f64a:	681b      	ldr	r3, [r3, #0]
 800f64c:	3301      	adds	r3, #1
 800f64e:	4a03      	ldr	r2, [pc, #12]	; (800f65c <vTaskSuspendAll+0x18>)
 800f650:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800f652:	bf00      	nop
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr
 800f65c:	20001b3c 	.word	0x20001b3c

0800f660 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800f660:	b580      	push	{r7, lr}
 800f662:	b084      	sub	sp, #16
 800f664:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800f666:	2300      	movs	r3, #0
 800f668:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800f66a:	2300      	movs	r3, #0
 800f66c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800f66e:	4b43      	ldr	r3, [pc, #268]	; (800f77c <xTaskResumeAll+0x11c>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	2b00      	cmp	r3, #0
 800f674:	d10c      	bne.n	800f690 <xTaskResumeAll+0x30>
	__asm volatile
 800f676:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f67a:	b672      	cpsid	i
 800f67c:	f383 8811 	msr	BASEPRI, r3
 800f680:	f3bf 8f6f 	isb	sy
 800f684:	f3bf 8f4f 	dsb	sy
 800f688:	b662      	cpsie	i
 800f68a:	603b      	str	r3, [r7, #0]
}
 800f68c:	bf00      	nop
 800f68e:	e7fe      	b.n	800f68e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800f690:	f001 fa24 	bl	8010adc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800f694:	4b39      	ldr	r3, [pc, #228]	; (800f77c <xTaskResumeAll+0x11c>)
 800f696:	681b      	ldr	r3, [r3, #0]
 800f698:	3b01      	subs	r3, #1
 800f69a:	4a38      	ldr	r2, [pc, #224]	; (800f77c <xTaskResumeAll+0x11c>)
 800f69c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f69e:	4b37      	ldr	r3, [pc, #220]	; (800f77c <xTaskResumeAll+0x11c>)
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	d162      	bne.n	800f76c <xTaskResumeAll+0x10c>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f6a6:	4b36      	ldr	r3, [pc, #216]	; (800f780 <xTaskResumeAll+0x120>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	2b00      	cmp	r3, #0
 800f6ac:	d05e      	beq.n	800f76c <xTaskResumeAll+0x10c>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f6ae:	e02f      	b.n	800f710 <xTaskResumeAll+0xb0>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f6b0:	4b34      	ldr	r3, [pc, #208]	; (800f784 <xTaskResumeAll+0x124>)
 800f6b2:	68db      	ldr	r3, [r3, #12]
 800f6b4:	68db      	ldr	r3, [r3, #12]
 800f6b6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f6b8:	68fb      	ldr	r3, [r7, #12]
 800f6ba:	3318      	adds	r3, #24
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7fe fcd7 	bl	800e070 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f6c2:	68fb      	ldr	r3, [r7, #12]
 800f6c4:	3304      	adds	r3, #4
 800f6c6:	4618      	mov	r0, r3
 800f6c8:	f7fe fcd2 	bl	800e070 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6d0:	4b2d      	ldr	r3, [pc, #180]	; (800f788 <xTaskResumeAll+0x128>)
 800f6d2:	681b      	ldr	r3, [r3, #0]
 800f6d4:	429a      	cmp	r2, r3
 800f6d6:	d903      	bls.n	800f6e0 <xTaskResumeAll+0x80>
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f6dc:	4a2a      	ldr	r2, [pc, #168]	; (800f788 <xTaskResumeAll+0x128>)
 800f6de:	6013      	str	r3, [r2, #0]
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6e4:	4613      	mov	r3, r2
 800f6e6:	009b      	lsls	r3, r3, #2
 800f6e8:	4413      	add	r3, r2
 800f6ea:	009b      	lsls	r3, r3, #2
 800f6ec:	4a27      	ldr	r2, [pc, #156]	; (800f78c <xTaskResumeAll+0x12c>)
 800f6ee:	441a      	add	r2, r3
 800f6f0:	68fb      	ldr	r3, [r7, #12]
 800f6f2:	3304      	adds	r3, #4
 800f6f4:	4619      	mov	r1, r3
 800f6f6:	4610      	mov	r0, r2
 800f6f8:	f7fe fc5d 	bl	800dfb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f700:	4b23      	ldr	r3, [pc, #140]	; (800f790 <xTaskResumeAll+0x130>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f706:	429a      	cmp	r2, r3
 800f708:	d302      	bcc.n	800f710 <xTaskResumeAll+0xb0>
					{
						xYieldPending = pdTRUE;
 800f70a:	4b22      	ldr	r3, [pc, #136]	; (800f794 <xTaskResumeAll+0x134>)
 800f70c:	2201      	movs	r2, #1
 800f70e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f710:	4b1c      	ldr	r3, [pc, #112]	; (800f784 <xTaskResumeAll+0x124>)
 800f712:	681b      	ldr	r3, [r3, #0]
 800f714:	2b00      	cmp	r3, #0
 800f716:	d1cb      	bne.n	800f6b0 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	2b00      	cmp	r3, #0
 800f71c:	d001      	beq.n	800f722 <xTaskResumeAll+0xc2>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800f71e:	f000 fb6f 	bl	800fe00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800f722:	4b1d      	ldr	r3, [pc, #116]	; (800f798 <xTaskResumeAll+0x138>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d010      	beq.n	800f750 <xTaskResumeAll+0xf0>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800f72e:	f000 f847 	bl	800f7c0 <xTaskIncrementTick>
 800f732:	4603      	mov	r3, r0
 800f734:	2b00      	cmp	r3, #0
 800f736:	d002      	beq.n	800f73e <xTaskResumeAll+0xde>
							{
								xYieldPending = pdTRUE;
 800f738:	4b16      	ldr	r3, [pc, #88]	; (800f794 <xTaskResumeAll+0x134>)
 800f73a:	2201      	movs	r2, #1
 800f73c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	3b01      	subs	r3, #1
 800f742:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2b00      	cmp	r3, #0
 800f748:	d1f1      	bne.n	800f72e <xTaskResumeAll+0xce>

						uxPendedTicks = 0;
 800f74a:	4b13      	ldr	r3, [pc, #76]	; (800f798 <xTaskResumeAll+0x138>)
 800f74c:	2200      	movs	r2, #0
 800f74e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800f750:	4b10      	ldr	r3, [pc, #64]	; (800f794 <xTaskResumeAll+0x134>)
 800f752:	681b      	ldr	r3, [r3, #0]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d009      	beq.n	800f76c <xTaskResumeAll+0x10c>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800f758:	2301      	movs	r3, #1
 800f75a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800f75c:	4b0f      	ldr	r3, [pc, #60]	; (800f79c <xTaskResumeAll+0x13c>)
 800f75e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f762:	601a      	str	r2, [r3, #0]
 800f764:	f3bf 8f4f 	dsb	sy
 800f768:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f76c:	f001 f9ea 	bl	8010b44 <vPortExitCritical>

	return xAlreadyYielded;
 800f770:	68bb      	ldr	r3, [r7, #8]
}
 800f772:	4618      	mov	r0, r3
 800f774:	3710      	adds	r7, #16
 800f776:	46bd      	mov	sp, r7
 800f778:	bd80      	pop	{r7, pc}
 800f77a:	bf00      	nop
 800f77c:	20001b3c 	.word	0x20001b3c
 800f780:	20001b14 	.word	0x20001b14
 800f784:	20001ad4 	.word	0x20001ad4
 800f788:	20001b1c 	.word	0x20001b1c
 800f78c:	20001644 	.word	0x20001644
 800f790:	20001640 	.word	0x20001640
 800f794:	20001b28 	.word	0x20001b28
 800f798:	20001b24 	.word	0x20001b24
 800f79c:	e000ed04 	.word	0xe000ed04

0800f7a0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800f7a0:	b480      	push	{r7}
 800f7a2:	b083      	sub	sp, #12
 800f7a4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800f7a6:	4b05      	ldr	r3, [pc, #20]	; (800f7bc <xTaskGetTickCount+0x1c>)
 800f7a8:	681b      	ldr	r3, [r3, #0]
 800f7aa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800f7ac:	687b      	ldr	r3, [r7, #4]
}
 800f7ae:	4618      	mov	r0, r3
 800f7b0:	370c      	adds	r7, #12
 800f7b2:	46bd      	mov	sp, r7
 800f7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7b8:	4770      	bx	lr
 800f7ba:	bf00      	nop
 800f7bc:	20001b18 	.word	0x20001b18

0800f7c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800f7c0:	b580      	push	{r7, lr}
 800f7c2:	b086      	sub	sp, #24
 800f7c4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800f7c6:	2300      	movs	r3, #0
 800f7c8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f7ca:	4b50      	ldr	r3, [pc, #320]	; (800f90c <xTaskIncrementTick+0x14c>)
 800f7cc:	681b      	ldr	r3, [r3, #0]
 800f7ce:	2b00      	cmp	r3, #0
 800f7d0:	f040 808b 	bne.w	800f8ea <xTaskIncrementTick+0x12a>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f7d4:	4b4e      	ldr	r3, [pc, #312]	; (800f910 <xTaskIncrementTick+0x150>)
 800f7d6:	681b      	ldr	r3, [r3, #0]
 800f7d8:	3301      	adds	r3, #1
 800f7da:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800f7dc:	4a4c      	ldr	r2, [pc, #304]	; (800f910 <xTaskIncrementTick+0x150>)
 800f7de:	693b      	ldr	r3, [r7, #16]
 800f7e0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d122      	bne.n	800f82e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800f7e8:	4b4a      	ldr	r3, [pc, #296]	; (800f914 <xTaskIncrementTick+0x154>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2b00      	cmp	r3, #0
 800f7f0:	d00c      	beq.n	800f80c <xTaskIncrementTick+0x4c>
	__asm volatile
 800f7f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f7f6:	b672      	cpsid	i
 800f7f8:	f383 8811 	msr	BASEPRI, r3
 800f7fc:	f3bf 8f6f 	isb	sy
 800f800:	f3bf 8f4f 	dsb	sy
 800f804:	b662      	cpsie	i
 800f806:	603b      	str	r3, [r7, #0]
}
 800f808:	bf00      	nop
 800f80a:	e7fe      	b.n	800f80a <xTaskIncrementTick+0x4a>
 800f80c:	4b41      	ldr	r3, [pc, #260]	; (800f914 <xTaskIncrementTick+0x154>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	60fb      	str	r3, [r7, #12]
 800f812:	4b41      	ldr	r3, [pc, #260]	; (800f918 <xTaskIncrementTick+0x158>)
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	4a3f      	ldr	r2, [pc, #252]	; (800f914 <xTaskIncrementTick+0x154>)
 800f818:	6013      	str	r3, [r2, #0]
 800f81a:	4a3f      	ldr	r2, [pc, #252]	; (800f918 <xTaskIncrementTick+0x158>)
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	6013      	str	r3, [r2, #0]
 800f820:	4b3e      	ldr	r3, [pc, #248]	; (800f91c <xTaskIncrementTick+0x15c>)
 800f822:	681b      	ldr	r3, [r3, #0]
 800f824:	3301      	adds	r3, #1
 800f826:	4a3d      	ldr	r2, [pc, #244]	; (800f91c <xTaskIncrementTick+0x15c>)
 800f828:	6013      	str	r3, [r2, #0]
 800f82a:	f000 fae9 	bl	800fe00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f82e:	4b3c      	ldr	r3, [pc, #240]	; (800f920 <xTaskIncrementTick+0x160>)
 800f830:	681b      	ldr	r3, [r3, #0]
 800f832:	693a      	ldr	r2, [r7, #16]
 800f834:	429a      	cmp	r2, r3
 800f836:	d349      	bcc.n	800f8cc <xTaskIncrementTick+0x10c>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f838:	4b36      	ldr	r3, [pc, #216]	; (800f914 <xTaskIncrementTick+0x154>)
 800f83a:	681b      	ldr	r3, [r3, #0]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d104      	bne.n	800f84c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f842:	4b37      	ldr	r3, [pc, #220]	; (800f920 <xTaskIncrementTick+0x160>)
 800f844:	f04f 32ff 	mov.w	r2, #4294967295
 800f848:	601a      	str	r2, [r3, #0]
					break;
 800f84a:	e03f      	b.n	800f8cc <xTaskIncrementTick+0x10c>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f84c:	4b31      	ldr	r3, [pc, #196]	; (800f914 <xTaskIncrementTick+0x154>)
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	68db      	ldr	r3, [r3, #12]
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f856:	68bb      	ldr	r3, [r7, #8]
 800f858:	685b      	ldr	r3, [r3, #4]
 800f85a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800f85c:	693a      	ldr	r2, [r7, #16]
 800f85e:	687b      	ldr	r3, [r7, #4]
 800f860:	429a      	cmp	r2, r3
 800f862:	d203      	bcs.n	800f86c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800f864:	4a2e      	ldr	r2, [pc, #184]	; (800f920 <xTaskIncrementTick+0x160>)
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f86a:	e02f      	b.n	800f8cc <xTaskIncrementTick+0x10c>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	3304      	adds	r3, #4
 800f870:	4618      	mov	r0, r3
 800f872:	f7fe fbfd 	bl	800e070 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f876:	68bb      	ldr	r3, [r7, #8]
 800f878:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	d004      	beq.n	800f888 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f87e:	68bb      	ldr	r3, [r7, #8]
 800f880:	3318      	adds	r3, #24
 800f882:	4618      	mov	r0, r3
 800f884:	f7fe fbf4 	bl	800e070 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800f888:	68bb      	ldr	r3, [r7, #8]
 800f88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f88c:	4b25      	ldr	r3, [pc, #148]	; (800f924 <xTaskIncrementTick+0x164>)
 800f88e:	681b      	ldr	r3, [r3, #0]
 800f890:	429a      	cmp	r2, r3
 800f892:	d903      	bls.n	800f89c <xTaskIncrementTick+0xdc>
 800f894:	68bb      	ldr	r3, [r7, #8]
 800f896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f898:	4a22      	ldr	r2, [pc, #136]	; (800f924 <xTaskIncrementTick+0x164>)
 800f89a:	6013      	str	r3, [r2, #0]
 800f89c:	68bb      	ldr	r3, [r7, #8]
 800f89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8a0:	4613      	mov	r3, r2
 800f8a2:	009b      	lsls	r3, r3, #2
 800f8a4:	4413      	add	r3, r2
 800f8a6:	009b      	lsls	r3, r3, #2
 800f8a8:	4a1f      	ldr	r2, [pc, #124]	; (800f928 <xTaskIncrementTick+0x168>)
 800f8aa:	441a      	add	r2, r3
 800f8ac:	68bb      	ldr	r3, [r7, #8]
 800f8ae:	3304      	adds	r3, #4
 800f8b0:	4619      	mov	r1, r3
 800f8b2:	4610      	mov	r0, r2
 800f8b4:	f7fe fb7f 	bl	800dfb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f8b8:	68bb      	ldr	r3, [r7, #8]
 800f8ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8bc:	4b1b      	ldr	r3, [pc, #108]	; (800f92c <xTaskIncrementTick+0x16c>)
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f8c2:	429a      	cmp	r2, r3
 800f8c4:	d3b8      	bcc.n	800f838 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800f8c6:	2301      	movs	r3, #1
 800f8c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f8ca:	e7b5      	b.n	800f838 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f8cc:	4b17      	ldr	r3, [pc, #92]	; (800f92c <xTaskIncrementTick+0x16c>)
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f8d2:	4915      	ldr	r1, [pc, #84]	; (800f928 <xTaskIncrementTick+0x168>)
 800f8d4:	4613      	mov	r3, r2
 800f8d6:	009b      	lsls	r3, r3, #2
 800f8d8:	4413      	add	r3, r2
 800f8da:	009b      	lsls	r3, r3, #2
 800f8dc:	440b      	add	r3, r1
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	2b01      	cmp	r3, #1
 800f8e2:	d907      	bls.n	800f8f4 <xTaskIncrementTick+0x134>
			{
				xSwitchRequired = pdTRUE;
 800f8e4:	2301      	movs	r3, #1
 800f8e6:	617b      	str	r3, [r7, #20]
 800f8e8:	e004      	b.n	800f8f4 <xTaskIncrementTick+0x134>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800f8ea:	4b11      	ldr	r3, [pc, #68]	; (800f930 <xTaskIncrementTick+0x170>)
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	3301      	adds	r3, #1
 800f8f0:	4a0f      	ldr	r2, [pc, #60]	; (800f930 <xTaskIncrementTick+0x170>)
 800f8f2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800f8f4:	4b0f      	ldr	r3, [pc, #60]	; (800f934 <xTaskIncrementTick+0x174>)
 800f8f6:	681b      	ldr	r3, [r3, #0]
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	d001      	beq.n	800f900 <xTaskIncrementTick+0x140>
		{
			xSwitchRequired = pdTRUE;
 800f8fc:	2301      	movs	r3, #1
 800f8fe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800f900:	697b      	ldr	r3, [r7, #20]
}
 800f902:	4618      	mov	r0, r3
 800f904:	3718      	adds	r7, #24
 800f906:	46bd      	mov	sp, r7
 800f908:	bd80      	pop	{r7, pc}
 800f90a:	bf00      	nop
 800f90c:	20001b3c 	.word	0x20001b3c
 800f910:	20001b18 	.word	0x20001b18
 800f914:	20001acc 	.word	0x20001acc
 800f918:	20001ad0 	.word	0x20001ad0
 800f91c:	20001b2c 	.word	0x20001b2c
 800f920:	20001b34 	.word	0x20001b34
 800f924:	20001b1c 	.word	0x20001b1c
 800f928:	20001644 	.word	0x20001644
 800f92c:	20001640 	.word	0x20001640
 800f930:	20001b24 	.word	0x20001b24
 800f934:	20001b28 	.word	0x20001b28

0800f938 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800f938:	b480      	push	{r7}
 800f93a:	b085      	sub	sp, #20
 800f93c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f93e:	4b2b      	ldr	r3, [pc, #172]	; (800f9ec <vTaskSwitchContext+0xb4>)
 800f940:	681b      	ldr	r3, [r3, #0]
 800f942:	2b00      	cmp	r3, #0
 800f944:	d003      	beq.n	800f94e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800f946:	4b2a      	ldr	r3, [pc, #168]	; (800f9f0 <vTaskSwitchContext+0xb8>)
 800f948:	2201      	movs	r2, #1
 800f94a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800f94c:	e048      	b.n	800f9e0 <vTaskSwitchContext+0xa8>
		xYieldPending = pdFALSE;
 800f94e:	4b28      	ldr	r3, [pc, #160]	; (800f9f0 <vTaskSwitchContext+0xb8>)
 800f950:	2200      	movs	r2, #0
 800f952:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f954:	4b27      	ldr	r3, [pc, #156]	; (800f9f4 <vTaskSwitchContext+0xbc>)
 800f956:	681b      	ldr	r3, [r3, #0]
 800f958:	60fb      	str	r3, [r7, #12]
 800f95a:	e012      	b.n	800f982 <vTaskSwitchContext+0x4a>
 800f95c:	68fb      	ldr	r3, [r7, #12]
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d10c      	bne.n	800f97c <vTaskSwitchContext+0x44>
	__asm volatile
 800f962:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f966:	b672      	cpsid	i
 800f968:	f383 8811 	msr	BASEPRI, r3
 800f96c:	f3bf 8f6f 	isb	sy
 800f970:	f3bf 8f4f 	dsb	sy
 800f974:	b662      	cpsie	i
 800f976:	607b      	str	r3, [r7, #4]
}
 800f978:	bf00      	nop
 800f97a:	e7fe      	b.n	800f97a <vTaskSwitchContext+0x42>
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	3b01      	subs	r3, #1
 800f980:	60fb      	str	r3, [r7, #12]
 800f982:	491d      	ldr	r1, [pc, #116]	; (800f9f8 <vTaskSwitchContext+0xc0>)
 800f984:	68fa      	ldr	r2, [r7, #12]
 800f986:	4613      	mov	r3, r2
 800f988:	009b      	lsls	r3, r3, #2
 800f98a:	4413      	add	r3, r2
 800f98c:	009b      	lsls	r3, r3, #2
 800f98e:	440b      	add	r3, r1
 800f990:	681b      	ldr	r3, [r3, #0]
 800f992:	2b00      	cmp	r3, #0
 800f994:	d0e2      	beq.n	800f95c <vTaskSwitchContext+0x24>
 800f996:	68fa      	ldr	r2, [r7, #12]
 800f998:	4613      	mov	r3, r2
 800f99a:	009b      	lsls	r3, r3, #2
 800f99c:	4413      	add	r3, r2
 800f99e:	009b      	lsls	r3, r3, #2
 800f9a0:	4a15      	ldr	r2, [pc, #84]	; (800f9f8 <vTaskSwitchContext+0xc0>)
 800f9a2:	4413      	add	r3, r2
 800f9a4:	60bb      	str	r3, [r7, #8]
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	685b      	ldr	r3, [r3, #4]
 800f9aa:	685a      	ldr	r2, [r3, #4]
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	605a      	str	r2, [r3, #4]
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	685a      	ldr	r2, [r3, #4]
 800f9b4:	68bb      	ldr	r3, [r7, #8]
 800f9b6:	3308      	adds	r3, #8
 800f9b8:	429a      	cmp	r2, r3
 800f9ba:	d104      	bne.n	800f9c6 <vTaskSwitchContext+0x8e>
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	685a      	ldr	r2, [r3, #4]
 800f9c2:	68bb      	ldr	r3, [r7, #8]
 800f9c4:	605a      	str	r2, [r3, #4]
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	685b      	ldr	r3, [r3, #4]
 800f9ca:	68db      	ldr	r3, [r3, #12]
 800f9cc:	4a0b      	ldr	r2, [pc, #44]	; (800f9fc <vTaskSwitchContext+0xc4>)
 800f9ce:	6013      	str	r3, [r2, #0]
 800f9d0:	4a08      	ldr	r2, [pc, #32]	; (800f9f4 <vTaskSwitchContext+0xbc>)
 800f9d2:	68fb      	ldr	r3, [r7, #12]
 800f9d4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f9d6:	4b09      	ldr	r3, [pc, #36]	; (800f9fc <vTaskSwitchContext+0xc4>)
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	3354      	adds	r3, #84	; 0x54
 800f9dc:	4a08      	ldr	r2, [pc, #32]	; (800fa00 <vTaskSwitchContext+0xc8>)
 800f9de:	6013      	str	r3, [r2, #0]
}
 800f9e0:	bf00      	nop
 800f9e2:	3714      	adds	r7, #20
 800f9e4:	46bd      	mov	sp, r7
 800f9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ea:	4770      	bx	lr
 800f9ec:	20001b3c 	.word	0x20001b3c
 800f9f0:	20001b28 	.word	0x20001b28
 800f9f4:	20001b1c 	.word	0x20001b1c
 800f9f8:	20001644 	.word	0x20001644
 800f9fc:	20001640 	.word	0x20001640
 800fa00:	20000194 	.word	0x20000194

0800fa04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800fa04:	b580      	push	{r7, lr}
 800fa06:	b084      	sub	sp, #16
 800fa08:	af00      	add	r7, sp, #0
 800fa0a:	6078      	str	r0, [r7, #4]
 800fa0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	2b00      	cmp	r3, #0
 800fa12:	d10c      	bne.n	800fa2e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800fa14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa18:	b672      	cpsid	i
 800fa1a:	f383 8811 	msr	BASEPRI, r3
 800fa1e:	f3bf 8f6f 	isb	sy
 800fa22:	f3bf 8f4f 	dsb	sy
 800fa26:	b662      	cpsie	i
 800fa28:	60fb      	str	r3, [r7, #12]
}
 800fa2a:	bf00      	nop
 800fa2c:	e7fe      	b.n	800fa2c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fa2e:	4b07      	ldr	r3, [pc, #28]	; (800fa4c <vTaskPlaceOnEventList+0x48>)
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	3318      	adds	r3, #24
 800fa34:	4619      	mov	r1, r3
 800fa36:	6878      	ldr	r0, [r7, #4]
 800fa38:	f7fe fae1 	bl	800dffe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fa3c:	2101      	movs	r1, #1
 800fa3e:	6838      	ldr	r0, [r7, #0]
 800fa40:	f000 fb90 	bl	8010164 <prvAddCurrentTaskToDelayedList>
}
 800fa44:	bf00      	nop
 800fa46:	3710      	adds	r7, #16
 800fa48:	46bd      	mov	sp, r7
 800fa4a:	bd80      	pop	{r7, pc}
 800fa4c:	20001640 	.word	0x20001640

0800fa50 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fa50:	b580      	push	{r7, lr}
 800fa52:	b086      	sub	sp, #24
 800fa54:	af00      	add	r7, sp, #0
 800fa56:	60f8      	str	r0, [r7, #12]
 800fa58:	60b9      	str	r1, [r7, #8]
 800fa5a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800fa5c:	68fb      	ldr	r3, [r7, #12]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d10c      	bne.n	800fa7c <vTaskPlaceOnEventListRestricted+0x2c>
	__asm volatile
 800fa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa66:	b672      	cpsid	i
 800fa68:	f383 8811 	msr	BASEPRI, r3
 800fa6c:	f3bf 8f6f 	isb	sy
 800fa70:	f3bf 8f4f 	dsb	sy
 800fa74:	b662      	cpsie	i
 800fa76:	617b      	str	r3, [r7, #20]
}
 800fa78:	bf00      	nop
 800fa7a:	e7fe      	b.n	800fa7a <vTaskPlaceOnEventListRestricted+0x2a>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800fa7c:	4b0a      	ldr	r3, [pc, #40]	; (800faa8 <vTaskPlaceOnEventListRestricted+0x58>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	3318      	adds	r3, #24
 800fa82:	4619      	mov	r1, r3
 800fa84:	68f8      	ldr	r0, [r7, #12]
 800fa86:	f7fe fa96 	bl	800dfb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800fa8a:	687b      	ldr	r3, [r7, #4]
 800fa8c:	2b00      	cmp	r3, #0
 800fa8e:	d002      	beq.n	800fa96 <vTaskPlaceOnEventListRestricted+0x46>
		{
			xTicksToWait = portMAX_DELAY;
 800fa90:	f04f 33ff 	mov.w	r3, #4294967295
 800fa94:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800fa96:	6879      	ldr	r1, [r7, #4]
 800fa98:	68b8      	ldr	r0, [r7, #8]
 800fa9a:	f000 fb63 	bl	8010164 <prvAddCurrentTaskToDelayedList>
	}
 800fa9e:	bf00      	nop
 800faa0:	3718      	adds	r7, #24
 800faa2:	46bd      	mov	sp, r7
 800faa4:	bd80      	pop	{r7, pc}
 800faa6:	bf00      	nop
 800faa8:	20001640 	.word	0x20001640

0800faac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b086      	sub	sp, #24
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	68db      	ldr	r3, [r3, #12]
 800fab8:	68db      	ldr	r3, [r3, #12]
 800faba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800fabc:	693b      	ldr	r3, [r7, #16]
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d10c      	bne.n	800fadc <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800fac2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fac6:	b672      	cpsid	i
 800fac8:	f383 8811 	msr	BASEPRI, r3
 800facc:	f3bf 8f6f 	isb	sy
 800fad0:	f3bf 8f4f 	dsb	sy
 800fad4:	b662      	cpsie	i
 800fad6:	60fb      	str	r3, [r7, #12]
}
 800fad8:	bf00      	nop
 800fada:	e7fe      	b.n	800fada <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800fadc:	693b      	ldr	r3, [r7, #16]
 800fade:	3318      	adds	r3, #24
 800fae0:	4618      	mov	r0, r3
 800fae2:	f7fe fac5 	bl	800e070 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fae6:	4b1e      	ldr	r3, [pc, #120]	; (800fb60 <xTaskRemoveFromEventList+0xb4>)
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	2b00      	cmp	r3, #0
 800faec:	d11d      	bne.n	800fb2a <xTaskRemoveFromEventList+0x7e>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800faee:	693b      	ldr	r3, [r7, #16]
 800faf0:	3304      	adds	r3, #4
 800faf2:	4618      	mov	r0, r3
 800faf4:	f7fe fabc 	bl	800e070 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800faf8:	693b      	ldr	r3, [r7, #16]
 800fafa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fafc:	4b19      	ldr	r3, [pc, #100]	; (800fb64 <xTaskRemoveFromEventList+0xb8>)
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	429a      	cmp	r2, r3
 800fb02:	d903      	bls.n	800fb0c <xTaskRemoveFromEventList+0x60>
 800fb04:	693b      	ldr	r3, [r7, #16]
 800fb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb08:	4a16      	ldr	r2, [pc, #88]	; (800fb64 <xTaskRemoveFromEventList+0xb8>)
 800fb0a:	6013      	str	r3, [r2, #0]
 800fb0c:	693b      	ldr	r3, [r7, #16]
 800fb0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb10:	4613      	mov	r3, r2
 800fb12:	009b      	lsls	r3, r3, #2
 800fb14:	4413      	add	r3, r2
 800fb16:	009b      	lsls	r3, r3, #2
 800fb18:	4a13      	ldr	r2, [pc, #76]	; (800fb68 <xTaskRemoveFromEventList+0xbc>)
 800fb1a:	441a      	add	r2, r3
 800fb1c:	693b      	ldr	r3, [r7, #16]
 800fb1e:	3304      	adds	r3, #4
 800fb20:	4619      	mov	r1, r3
 800fb22:	4610      	mov	r0, r2
 800fb24:	f7fe fa47 	bl	800dfb6 <vListInsertEnd>
 800fb28:	e005      	b.n	800fb36 <xTaskRemoveFromEventList+0x8a>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800fb2a:	693b      	ldr	r3, [r7, #16]
 800fb2c:	3318      	adds	r3, #24
 800fb2e:	4619      	mov	r1, r3
 800fb30:	480e      	ldr	r0, [pc, #56]	; (800fb6c <xTaskRemoveFromEventList+0xc0>)
 800fb32:	f7fe fa40 	bl	800dfb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800fb36:	693b      	ldr	r3, [r7, #16]
 800fb38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb3a:	4b0d      	ldr	r3, [pc, #52]	; (800fb70 <xTaskRemoveFromEventList+0xc4>)
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fb40:	429a      	cmp	r2, r3
 800fb42:	d905      	bls.n	800fb50 <xTaskRemoveFromEventList+0xa4>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800fb44:	2301      	movs	r3, #1
 800fb46:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800fb48:	4b0a      	ldr	r3, [pc, #40]	; (800fb74 <xTaskRemoveFromEventList+0xc8>)
 800fb4a:	2201      	movs	r2, #1
 800fb4c:	601a      	str	r2, [r3, #0]
 800fb4e:	e001      	b.n	800fb54 <xTaskRemoveFromEventList+0xa8>
	}
	else
	{
		xReturn = pdFALSE;
 800fb50:	2300      	movs	r3, #0
 800fb52:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fb54:	697b      	ldr	r3, [r7, #20]
}
 800fb56:	4618      	mov	r0, r3
 800fb58:	3718      	adds	r7, #24
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	bd80      	pop	{r7, pc}
 800fb5e:	bf00      	nop
 800fb60:	20001b3c 	.word	0x20001b3c
 800fb64:	20001b1c 	.word	0x20001b1c
 800fb68:	20001644 	.word	0x20001644
 800fb6c:	20001ad4 	.word	0x20001ad4
 800fb70:	20001640 	.word	0x20001640
 800fb74:	20001b28 	.word	0x20001b28

0800fb78 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800fb78:	b480      	push	{r7}
 800fb7a:	b083      	sub	sp, #12
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800fb80:	4b06      	ldr	r3, [pc, #24]	; (800fb9c <vTaskInternalSetTimeOutState+0x24>)
 800fb82:	681a      	ldr	r2, [r3, #0]
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800fb88:	4b05      	ldr	r3, [pc, #20]	; (800fba0 <vTaskInternalSetTimeOutState+0x28>)
 800fb8a:	681a      	ldr	r2, [r3, #0]
 800fb8c:	687b      	ldr	r3, [r7, #4]
 800fb8e:	605a      	str	r2, [r3, #4]
}
 800fb90:	bf00      	nop
 800fb92:	370c      	adds	r7, #12
 800fb94:	46bd      	mov	sp, r7
 800fb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9a:	4770      	bx	lr
 800fb9c:	20001b2c 	.word	0x20001b2c
 800fba0:	20001b18 	.word	0x20001b18

0800fba4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800fba4:	b580      	push	{r7, lr}
 800fba6:	b088      	sub	sp, #32
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	2b00      	cmp	r3, #0
 800fbb2:	d10c      	bne.n	800fbce <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800fbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbb8:	b672      	cpsid	i
 800fbba:	f383 8811 	msr	BASEPRI, r3
 800fbbe:	f3bf 8f6f 	isb	sy
 800fbc2:	f3bf 8f4f 	dsb	sy
 800fbc6:	b662      	cpsie	i
 800fbc8:	613b      	str	r3, [r7, #16]
}
 800fbca:	bf00      	nop
 800fbcc:	e7fe      	b.n	800fbcc <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800fbce:	683b      	ldr	r3, [r7, #0]
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d10c      	bne.n	800fbee <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800fbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbd8:	b672      	cpsid	i
 800fbda:	f383 8811 	msr	BASEPRI, r3
 800fbde:	f3bf 8f6f 	isb	sy
 800fbe2:	f3bf 8f4f 	dsb	sy
 800fbe6:	b662      	cpsie	i
 800fbe8:	60fb      	str	r3, [r7, #12]
}
 800fbea:	bf00      	nop
 800fbec:	e7fe      	b.n	800fbec <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800fbee:	f000 ff75 	bl	8010adc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800fbf2:	4b1d      	ldr	r3, [pc, #116]	; (800fc68 <xTaskCheckForTimeOut+0xc4>)
 800fbf4:	681b      	ldr	r3, [r3, #0]
 800fbf6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	685b      	ldr	r3, [r3, #4]
 800fbfc:	69ba      	ldr	r2, [r7, #24]
 800fbfe:	1ad3      	subs	r3, r2, r3
 800fc00:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800fc02:	683b      	ldr	r3, [r7, #0]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc0a:	d102      	bne.n	800fc12 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	61fb      	str	r3, [r7, #28]
 800fc10:	e023      	b.n	800fc5a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681a      	ldr	r2, [r3, #0]
 800fc16:	4b15      	ldr	r3, [pc, #84]	; (800fc6c <xTaskCheckForTimeOut+0xc8>)
 800fc18:	681b      	ldr	r3, [r3, #0]
 800fc1a:	429a      	cmp	r2, r3
 800fc1c:	d007      	beq.n	800fc2e <xTaskCheckForTimeOut+0x8a>
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	685b      	ldr	r3, [r3, #4]
 800fc22:	69ba      	ldr	r2, [r7, #24]
 800fc24:	429a      	cmp	r2, r3
 800fc26:	d302      	bcc.n	800fc2e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800fc28:	2301      	movs	r3, #1
 800fc2a:	61fb      	str	r3, [r7, #28]
 800fc2c:	e015      	b.n	800fc5a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800fc2e:	683b      	ldr	r3, [r7, #0]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	697a      	ldr	r2, [r7, #20]
 800fc34:	429a      	cmp	r2, r3
 800fc36:	d20b      	bcs.n	800fc50 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800fc38:	683b      	ldr	r3, [r7, #0]
 800fc3a:	681a      	ldr	r2, [r3, #0]
 800fc3c:	697b      	ldr	r3, [r7, #20]
 800fc3e:	1ad2      	subs	r2, r2, r3
 800fc40:	683b      	ldr	r3, [r7, #0]
 800fc42:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800fc44:	6878      	ldr	r0, [r7, #4]
 800fc46:	f7ff ff97 	bl	800fb78 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800fc4a:	2300      	movs	r3, #0
 800fc4c:	61fb      	str	r3, [r7, #28]
 800fc4e:	e004      	b.n	800fc5a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800fc50:	683b      	ldr	r3, [r7, #0]
 800fc52:	2200      	movs	r2, #0
 800fc54:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800fc56:	2301      	movs	r3, #1
 800fc58:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800fc5a:	f000 ff73 	bl	8010b44 <vPortExitCritical>

	return xReturn;
 800fc5e:	69fb      	ldr	r3, [r7, #28]
}
 800fc60:	4618      	mov	r0, r3
 800fc62:	3720      	adds	r7, #32
 800fc64:	46bd      	mov	sp, r7
 800fc66:	bd80      	pop	{r7, pc}
 800fc68:	20001b18 	.word	0x20001b18
 800fc6c:	20001b2c 	.word	0x20001b2c

0800fc70 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800fc70:	b480      	push	{r7}
 800fc72:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800fc74:	4b03      	ldr	r3, [pc, #12]	; (800fc84 <vTaskMissedYield+0x14>)
 800fc76:	2201      	movs	r2, #1
 800fc78:	601a      	str	r2, [r3, #0]
}
 800fc7a:	bf00      	nop
 800fc7c:	46bd      	mov	sp, r7
 800fc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc82:	4770      	bx	lr
 800fc84:	20001b28 	.word	0x20001b28

0800fc88 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800fc88:	b580      	push	{r7, lr}
 800fc8a:	b082      	sub	sp, #8
 800fc8c:	af00      	add	r7, sp, #0
 800fc8e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800fc90:	f000 f852 	bl	800fd38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800fc94:	4b06      	ldr	r3, [pc, #24]	; (800fcb0 <prvIdleTask+0x28>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	2b01      	cmp	r3, #1
 800fc9a:	d9f9      	bls.n	800fc90 <prvIdleTask+0x8>
			{
				taskYIELD();
 800fc9c:	4b05      	ldr	r3, [pc, #20]	; (800fcb4 <prvIdleTask+0x2c>)
 800fc9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fca2:	601a      	str	r2, [r3, #0]
 800fca4:	f3bf 8f4f 	dsb	sy
 800fca8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800fcac:	e7f0      	b.n	800fc90 <prvIdleTask+0x8>
 800fcae:	bf00      	nop
 800fcb0:	20001644 	.word	0x20001644
 800fcb4:	e000ed04 	.word	0xe000ed04

0800fcb8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800fcb8:	b580      	push	{r7, lr}
 800fcba:	b082      	sub	sp, #8
 800fcbc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fcbe:	2300      	movs	r3, #0
 800fcc0:	607b      	str	r3, [r7, #4]
 800fcc2:	e00c      	b.n	800fcde <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800fcc4:	687a      	ldr	r2, [r7, #4]
 800fcc6:	4613      	mov	r3, r2
 800fcc8:	009b      	lsls	r3, r3, #2
 800fcca:	4413      	add	r3, r2
 800fccc:	009b      	lsls	r3, r3, #2
 800fcce:	4a12      	ldr	r2, [pc, #72]	; (800fd18 <prvInitialiseTaskLists+0x60>)
 800fcd0:	4413      	add	r3, r2
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	f7fe f942 	bl	800df5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	3301      	adds	r3, #1
 800fcdc:	607b      	str	r3, [r7, #4]
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	2b37      	cmp	r3, #55	; 0x37
 800fce2:	d9ef      	bls.n	800fcc4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800fce4:	480d      	ldr	r0, [pc, #52]	; (800fd1c <prvInitialiseTaskLists+0x64>)
 800fce6:	f7fe f939 	bl	800df5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800fcea:	480d      	ldr	r0, [pc, #52]	; (800fd20 <prvInitialiseTaskLists+0x68>)
 800fcec:	f7fe f936 	bl	800df5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800fcf0:	480c      	ldr	r0, [pc, #48]	; (800fd24 <prvInitialiseTaskLists+0x6c>)
 800fcf2:	f7fe f933 	bl	800df5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800fcf6:	480c      	ldr	r0, [pc, #48]	; (800fd28 <prvInitialiseTaskLists+0x70>)
 800fcf8:	f7fe f930 	bl	800df5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800fcfc:	480b      	ldr	r0, [pc, #44]	; (800fd2c <prvInitialiseTaskLists+0x74>)
 800fcfe:	f7fe f92d 	bl	800df5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800fd02:	4b0b      	ldr	r3, [pc, #44]	; (800fd30 <prvInitialiseTaskLists+0x78>)
 800fd04:	4a05      	ldr	r2, [pc, #20]	; (800fd1c <prvInitialiseTaskLists+0x64>)
 800fd06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800fd08:	4b0a      	ldr	r3, [pc, #40]	; (800fd34 <prvInitialiseTaskLists+0x7c>)
 800fd0a:	4a05      	ldr	r2, [pc, #20]	; (800fd20 <prvInitialiseTaskLists+0x68>)
 800fd0c:	601a      	str	r2, [r3, #0]
}
 800fd0e:	bf00      	nop
 800fd10:	3708      	adds	r7, #8
 800fd12:	46bd      	mov	sp, r7
 800fd14:	bd80      	pop	{r7, pc}
 800fd16:	bf00      	nop
 800fd18:	20001644 	.word	0x20001644
 800fd1c:	20001aa4 	.word	0x20001aa4
 800fd20:	20001ab8 	.word	0x20001ab8
 800fd24:	20001ad4 	.word	0x20001ad4
 800fd28:	20001ae8 	.word	0x20001ae8
 800fd2c:	20001b00 	.word	0x20001b00
 800fd30:	20001acc 	.word	0x20001acc
 800fd34:	20001ad0 	.word	0x20001ad0

0800fd38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800fd38:	b580      	push	{r7, lr}
 800fd3a:	b082      	sub	sp, #8
 800fd3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fd3e:	e019      	b.n	800fd74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800fd40:	f000 fecc 	bl	8010adc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd44:	4b10      	ldr	r3, [pc, #64]	; (800fd88 <prvCheckTasksWaitingTermination+0x50>)
 800fd46:	68db      	ldr	r3, [r3, #12]
 800fd48:	68db      	ldr	r3, [r3, #12]
 800fd4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	3304      	adds	r3, #4
 800fd50:	4618      	mov	r0, r3
 800fd52:	f7fe f98d 	bl	800e070 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800fd56:	4b0d      	ldr	r3, [pc, #52]	; (800fd8c <prvCheckTasksWaitingTermination+0x54>)
 800fd58:	681b      	ldr	r3, [r3, #0]
 800fd5a:	3b01      	subs	r3, #1
 800fd5c:	4a0b      	ldr	r2, [pc, #44]	; (800fd8c <prvCheckTasksWaitingTermination+0x54>)
 800fd5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800fd60:	4b0b      	ldr	r3, [pc, #44]	; (800fd90 <prvCheckTasksWaitingTermination+0x58>)
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	3b01      	subs	r3, #1
 800fd66:	4a0a      	ldr	r2, [pc, #40]	; (800fd90 <prvCheckTasksWaitingTermination+0x58>)
 800fd68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800fd6a:	f000 feeb 	bl	8010b44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800fd6e:	6878      	ldr	r0, [r7, #4]
 800fd70:	f000 f810 	bl	800fd94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800fd74:	4b06      	ldr	r3, [pc, #24]	; (800fd90 <prvCheckTasksWaitingTermination+0x58>)
 800fd76:	681b      	ldr	r3, [r3, #0]
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d1e1      	bne.n	800fd40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800fd7c:	bf00      	nop
 800fd7e:	bf00      	nop
 800fd80:	3708      	adds	r7, #8
 800fd82:	46bd      	mov	sp, r7
 800fd84:	bd80      	pop	{r7, pc}
 800fd86:	bf00      	nop
 800fd88:	20001ae8 	.word	0x20001ae8
 800fd8c:	20001b14 	.word	0x20001b14
 800fd90:	20001afc 	.word	0x20001afc

0800fd94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800fd94:	b580      	push	{r7, lr}
 800fd96:	b084      	sub	sp, #16
 800fd98:	af00      	add	r7, sp, #0
 800fd9a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	3354      	adds	r3, #84	; 0x54
 800fda0:	4618      	mov	r0, r3
 800fda2:	f002 f88f 	bl	8011ec4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d108      	bne.n	800fdc2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fdb4:	4618      	mov	r0, r3
 800fdb6:	f001 f887 	bl	8010ec8 <vPortFree>
				vPortFree( pxTCB );
 800fdba:	6878      	ldr	r0, [r7, #4]
 800fdbc:	f001 f884 	bl	8010ec8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800fdc0:	e01a      	b.n	800fdf8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d103      	bne.n	800fdd4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800fdcc:	6878      	ldr	r0, [r7, #4]
 800fdce:	f001 f87b 	bl	8010ec8 <vPortFree>
	}
 800fdd2:	e011      	b.n	800fdf8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800fdd4:	687b      	ldr	r3, [r7, #4]
 800fdd6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800fdda:	2b02      	cmp	r3, #2
 800fddc:	d00c      	beq.n	800fdf8 <prvDeleteTCB+0x64>
	__asm volatile
 800fdde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde2:	b672      	cpsid	i
 800fde4:	f383 8811 	msr	BASEPRI, r3
 800fde8:	f3bf 8f6f 	isb	sy
 800fdec:	f3bf 8f4f 	dsb	sy
 800fdf0:	b662      	cpsie	i
 800fdf2:	60fb      	str	r3, [r7, #12]
}
 800fdf4:	bf00      	nop
 800fdf6:	e7fe      	b.n	800fdf6 <prvDeleteTCB+0x62>
	}
 800fdf8:	bf00      	nop
 800fdfa:	3710      	adds	r7, #16
 800fdfc:	46bd      	mov	sp, r7
 800fdfe:	bd80      	pop	{r7, pc}

0800fe00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800fe00:	b480      	push	{r7}
 800fe02:	b083      	sub	sp, #12
 800fe04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fe06:	4b0c      	ldr	r3, [pc, #48]	; (800fe38 <prvResetNextTaskUnblockTime+0x38>)
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	681b      	ldr	r3, [r3, #0]
 800fe0c:	2b00      	cmp	r3, #0
 800fe0e:	d104      	bne.n	800fe1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800fe10:	4b0a      	ldr	r3, [pc, #40]	; (800fe3c <prvResetNextTaskUnblockTime+0x3c>)
 800fe12:	f04f 32ff 	mov.w	r2, #4294967295
 800fe16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800fe18:	e008      	b.n	800fe2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe1a:	4b07      	ldr	r3, [pc, #28]	; (800fe38 <prvResetNextTaskUnblockTime+0x38>)
 800fe1c:	681b      	ldr	r3, [r3, #0]
 800fe1e:	68db      	ldr	r3, [r3, #12]
 800fe20:	68db      	ldr	r3, [r3, #12]
 800fe22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	685b      	ldr	r3, [r3, #4]
 800fe28:	4a04      	ldr	r2, [pc, #16]	; (800fe3c <prvResetNextTaskUnblockTime+0x3c>)
 800fe2a:	6013      	str	r3, [r2, #0]
}
 800fe2c:	bf00      	nop
 800fe2e:	370c      	adds	r7, #12
 800fe30:	46bd      	mov	sp, r7
 800fe32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe36:	4770      	bx	lr
 800fe38:	20001acc 	.word	0x20001acc
 800fe3c:	20001b34 	.word	0x20001b34

0800fe40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800fe40:	b480      	push	{r7}
 800fe42:	b083      	sub	sp, #12
 800fe44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800fe46:	4b0b      	ldr	r3, [pc, #44]	; (800fe74 <xTaskGetSchedulerState+0x34>)
 800fe48:	681b      	ldr	r3, [r3, #0]
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d102      	bne.n	800fe54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800fe4e:	2301      	movs	r3, #1
 800fe50:	607b      	str	r3, [r7, #4]
 800fe52:	e008      	b.n	800fe66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fe54:	4b08      	ldr	r3, [pc, #32]	; (800fe78 <xTaskGetSchedulerState+0x38>)
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	2b00      	cmp	r3, #0
 800fe5a:	d102      	bne.n	800fe62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800fe5c:	2302      	movs	r3, #2
 800fe5e:	607b      	str	r3, [r7, #4]
 800fe60:	e001      	b.n	800fe66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800fe62:	2300      	movs	r3, #0
 800fe64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800fe66:	687b      	ldr	r3, [r7, #4]
	}
 800fe68:	4618      	mov	r0, r3
 800fe6a:	370c      	adds	r7, #12
 800fe6c:	46bd      	mov	sp, r7
 800fe6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe72:	4770      	bx	lr
 800fe74:	20001b20 	.word	0x20001b20
 800fe78:	20001b3c 	.word	0x20001b3c

0800fe7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800fe7c:	b580      	push	{r7, lr}
 800fe7e:	b084      	sub	sp, #16
 800fe80:	af00      	add	r7, sp, #0
 800fe82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800fe88:	2300      	movs	r3, #0
 800fe8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d051      	beq.n	800ff36 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800fe92:	68bb      	ldr	r3, [r7, #8]
 800fe94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fe96:	4b2a      	ldr	r3, [pc, #168]	; (800ff40 <xTaskPriorityInherit+0xc4>)
 800fe98:	681b      	ldr	r3, [r3, #0]
 800fe9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fe9c:	429a      	cmp	r2, r3
 800fe9e:	d241      	bcs.n	800ff24 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800fea0:	68bb      	ldr	r3, [r7, #8]
 800fea2:	699b      	ldr	r3, [r3, #24]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	db06      	blt.n	800feb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fea8:	4b25      	ldr	r3, [pc, #148]	; (800ff40 <xTaskPriorityInherit+0xc4>)
 800feaa:	681b      	ldr	r3, [r3, #0]
 800feac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800feae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800feb2:	68bb      	ldr	r3, [r7, #8]
 800feb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800feb6:	68bb      	ldr	r3, [r7, #8]
 800feb8:	6959      	ldr	r1, [r3, #20]
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800febe:	4613      	mov	r3, r2
 800fec0:	009b      	lsls	r3, r3, #2
 800fec2:	4413      	add	r3, r2
 800fec4:	009b      	lsls	r3, r3, #2
 800fec6:	4a1f      	ldr	r2, [pc, #124]	; (800ff44 <xTaskPriorityInherit+0xc8>)
 800fec8:	4413      	add	r3, r2
 800feca:	4299      	cmp	r1, r3
 800fecc:	d122      	bne.n	800ff14 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800fece:	68bb      	ldr	r3, [r7, #8]
 800fed0:	3304      	adds	r3, #4
 800fed2:	4618      	mov	r0, r3
 800fed4:	f7fe f8cc 	bl	800e070 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800fed8:	4b19      	ldr	r3, [pc, #100]	; (800ff40 <xTaskPriorityInherit+0xc4>)
 800feda:	681b      	ldr	r3, [r3, #0]
 800fedc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fede:	68bb      	ldr	r3, [r7, #8]
 800fee0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800fee2:	68bb      	ldr	r3, [r7, #8]
 800fee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fee6:	4b18      	ldr	r3, [pc, #96]	; (800ff48 <xTaskPriorityInherit+0xcc>)
 800fee8:	681b      	ldr	r3, [r3, #0]
 800feea:	429a      	cmp	r2, r3
 800feec:	d903      	bls.n	800fef6 <xTaskPriorityInherit+0x7a>
 800feee:	68bb      	ldr	r3, [r7, #8]
 800fef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fef2:	4a15      	ldr	r2, [pc, #84]	; (800ff48 <xTaskPriorityInherit+0xcc>)
 800fef4:	6013      	str	r3, [r2, #0]
 800fef6:	68bb      	ldr	r3, [r7, #8]
 800fef8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fefa:	4613      	mov	r3, r2
 800fefc:	009b      	lsls	r3, r3, #2
 800fefe:	4413      	add	r3, r2
 800ff00:	009b      	lsls	r3, r3, #2
 800ff02:	4a10      	ldr	r2, [pc, #64]	; (800ff44 <xTaskPriorityInherit+0xc8>)
 800ff04:	441a      	add	r2, r3
 800ff06:	68bb      	ldr	r3, [r7, #8]
 800ff08:	3304      	adds	r3, #4
 800ff0a:	4619      	mov	r1, r3
 800ff0c:	4610      	mov	r0, r2
 800ff0e:	f7fe f852 	bl	800dfb6 <vListInsertEnd>
 800ff12:	e004      	b.n	800ff1e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ff14:	4b0a      	ldr	r3, [pc, #40]	; (800ff40 <xTaskPriorityInherit+0xc4>)
 800ff16:	681b      	ldr	r3, [r3, #0]
 800ff18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff1a:	68bb      	ldr	r3, [r7, #8]
 800ff1c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800ff1e:	2301      	movs	r3, #1
 800ff20:	60fb      	str	r3, [r7, #12]
 800ff22:	e008      	b.n	800ff36 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ff24:	68bb      	ldr	r3, [r7, #8]
 800ff26:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ff28:	4b05      	ldr	r3, [pc, #20]	; (800ff40 <xTaskPriorityInherit+0xc4>)
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ff2e:	429a      	cmp	r2, r3
 800ff30:	d201      	bcs.n	800ff36 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ff32:	2301      	movs	r3, #1
 800ff34:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ff36:	68fb      	ldr	r3, [r7, #12]
	}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3710      	adds	r7, #16
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	20001640 	.word	0x20001640
 800ff44:	20001644 	.word	0x20001644
 800ff48:	20001b1c 	.word	0x20001b1c

0800ff4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ff4c:	b580      	push	{r7, lr}
 800ff4e:	b086      	sub	sp, #24
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ff54:	687b      	ldr	r3, [r7, #4]
 800ff56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ff58:	2300      	movs	r3, #0
 800ff5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	2b00      	cmp	r3, #0
 800ff60:	d05a      	beq.n	8010018 <xTaskPriorityDisinherit+0xcc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ff62:	4b30      	ldr	r3, [pc, #192]	; (8010024 <xTaskPriorityDisinherit+0xd8>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	693a      	ldr	r2, [r7, #16]
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d00c      	beq.n	800ff86 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800ff6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff70:	b672      	cpsid	i
 800ff72:	f383 8811 	msr	BASEPRI, r3
 800ff76:	f3bf 8f6f 	isb	sy
 800ff7a:	f3bf 8f4f 	dsb	sy
 800ff7e:	b662      	cpsie	i
 800ff80:	60fb      	str	r3, [r7, #12]
}
 800ff82:	bf00      	nop
 800ff84:	e7fe      	b.n	800ff84 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800ff86:	693b      	ldr	r3, [r7, #16]
 800ff88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ff8a:	2b00      	cmp	r3, #0
 800ff8c:	d10c      	bne.n	800ffa8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800ff8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff92:	b672      	cpsid	i
 800ff94:	f383 8811 	msr	BASEPRI, r3
 800ff98:	f3bf 8f6f 	isb	sy
 800ff9c:	f3bf 8f4f 	dsb	sy
 800ffa0:	b662      	cpsie	i
 800ffa2:	60bb      	str	r3, [r7, #8]
}
 800ffa4:	bf00      	nop
 800ffa6:	e7fe      	b.n	800ffa6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffac:	1e5a      	subs	r2, r3, #1
 800ffae:	693b      	ldr	r3, [r7, #16]
 800ffb0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ffb2:	693b      	ldr	r3, [r7, #16]
 800ffb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffb6:	693b      	ldr	r3, [r7, #16]
 800ffb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d02c      	beq.n	8010018 <xTaskPriorityDisinherit+0xcc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ffbe:	693b      	ldr	r3, [r7, #16]
 800ffc0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d128      	bne.n	8010018 <xTaskPriorityDisinherit+0xcc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ffc6:	693b      	ldr	r3, [r7, #16]
 800ffc8:	3304      	adds	r3, #4
 800ffca:	4618      	mov	r0, r3
 800ffcc:	f7fe f850 	bl	800e070 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ffd0:	693b      	ldr	r3, [r7, #16]
 800ffd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ffd4:	693b      	ldr	r3, [r7, #16]
 800ffd6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ffd8:	693b      	ldr	r3, [r7, #16]
 800ffda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffdc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ffe0:	693b      	ldr	r3, [r7, #16]
 800ffe2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ffe4:	693b      	ldr	r3, [r7, #16]
 800ffe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffe8:	4b0f      	ldr	r3, [pc, #60]	; (8010028 <xTaskPriorityDisinherit+0xdc>)
 800ffea:	681b      	ldr	r3, [r3, #0]
 800ffec:	429a      	cmp	r2, r3
 800ffee:	d903      	bls.n	800fff8 <xTaskPriorityDisinherit+0xac>
 800fff0:	693b      	ldr	r3, [r7, #16]
 800fff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fff4:	4a0c      	ldr	r2, [pc, #48]	; (8010028 <xTaskPriorityDisinherit+0xdc>)
 800fff6:	6013      	str	r3, [r2, #0]
 800fff8:	693b      	ldr	r3, [r7, #16]
 800fffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fffc:	4613      	mov	r3, r2
 800fffe:	009b      	lsls	r3, r3, #2
 8010000:	4413      	add	r3, r2
 8010002:	009b      	lsls	r3, r3, #2
 8010004:	4a09      	ldr	r2, [pc, #36]	; (801002c <xTaskPriorityDisinherit+0xe0>)
 8010006:	441a      	add	r2, r3
 8010008:	693b      	ldr	r3, [r7, #16]
 801000a:	3304      	adds	r3, #4
 801000c:	4619      	mov	r1, r3
 801000e:	4610      	mov	r0, r2
 8010010:	f7fd ffd1 	bl	800dfb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010014:	2301      	movs	r3, #1
 8010016:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010018:	697b      	ldr	r3, [r7, #20]
	}
 801001a:	4618      	mov	r0, r3
 801001c:	3718      	adds	r7, #24
 801001e:	46bd      	mov	sp, r7
 8010020:	bd80      	pop	{r7, pc}
 8010022:	bf00      	nop
 8010024:	20001640 	.word	0x20001640
 8010028:	20001b1c 	.word	0x20001b1c
 801002c:	20001644 	.word	0x20001644

08010030 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010030:	b580      	push	{r7, lr}
 8010032:	b088      	sub	sp, #32
 8010034:	af00      	add	r7, sp, #0
 8010036:	6078      	str	r0, [r7, #4]
 8010038:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801003e:	2301      	movs	r3, #1
 8010040:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d06e      	beq.n	8010126 <vTaskPriorityDisinheritAfterTimeout+0xf6>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010048:	69bb      	ldr	r3, [r7, #24]
 801004a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801004c:	2b00      	cmp	r3, #0
 801004e:	d10c      	bne.n	801006a <vTaskPriorityDisinheritAfterTimeout+0x3a>
	__asm volatile
 8010050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010054:	b672      	cpsid	i
 8010056:	f383 8811 	msr	BASEPRI, r3
 801005a:	f3bf 8f6f 	isb	sy
 801005e:	f3bf 8f4f 	dsb	sy
 8010062:	b662      	cpsie	i
 8010064:	60fb      	str	r3, [r7, #12]
}
 8010066:	bf00      	nop
 8010068:	e7fe      	b.n	8010068 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801006a:	69bb      	ldr	r3, [r7, #24]
 801006c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801006e:	683a      	ldr	r2, [r7, #0]
 8010070:	429a      	cmp	r2, r3
 8010072:	d902      	bls.n	801007a <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010074:	683b      	ldr	r3, [r7, #0]
 8010076:	61fb      	str	r3, [r7, #28]
 8010078:	e002      	b.n	8010080 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801007a:	69bb      	ldr	r3, [r7, #24]
 801007c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801007e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010080:	69bb      	ldr	r3, [r7, #24]
 8010082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010084:	69fa      	ldr	r2, [r7, #28]
 8010086:	429a      	cmp	r2, r3
 8010088:	d04d      	beq.n	8010126 <vTaskPriorityDisinheritAfterTimeout+0xf6>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801008a:	69bb      	ldr	r3, [r7, #24]
 801008c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801008e:	697a      	ldr	r2, [r7, #20]
 8010090:	429a      	cmp	r2, r3
 8010092:	d148      	bne.n	8010126 <vTaskPriorityDisinheritAfterTimeout+0xf6>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010094:	4b26      	ldr	r3, [pc, #152]	; (8010130 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010096:	681b      	ldr	r3, [r3, #0]
 8010098:	69ba      	ldr	r2, [r7, #24]
 801009a:	429a      	cmp	r2, r3
 801009c:	d10c      	bne.n	80100b8 <vTaskPriorityDisinheritAfterTimeout+0x88>
	__asm volatile
 801009e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100a2:	b672      	cpsid	i
 80100a4:	f383 8811 	msr	BASEPRI, r3
 80100a8:	f3bf 8f6f 	isb	sy
 80100ac:	f3bf 8f4f 	dsb	sy
 80100b0:	b662      	cpsie	i
 80100b2:	60bb      	str	r3, [r7, #8]
}
 80100b4:	bf00      	nop
 80100b6:	e7fe      	b.n	80100b6 <vTaskPriorityDisinheritAfterTimeout+0x86>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80100b8:	69bb      	ldr	r3, [r7, #24]
 80100ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80100bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80100be:	69bb      	ldr	r3, [r7, #24]
 80100c0:	69fa      	ldr	r2, [r7, #28]
 80100c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80100c4:	69bb      	ldr	r3, [r7, #24]
 80100c6:	699b      	ldr	r3, [r3, #24]
 80100c8:	2b00      	cmp	r3, #0
 80100ca:	db04      	blt.n	80100d6 <vTaskPriorityDisinheritAfterTimeout+0xa6>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80100cc:	69fb      	ldr	r3, [r7, #28]
 80100ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80100d2:	69bb      	ldr	r3, [r7, #24]
 80100d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80100d6:	69bb      	ldr	r3, [r7, #24]
 80100d8:	6959      	ldr	r1, [r3, #20]
 80100da:	693a      	ldr	r2, [r7, #16]
 80100dc:	4613      	mov	r3, r2
 80100de:	009b      	lsls	r3, r3, #2
 80100e0:	4413      	add	r3, r2
 80100e2:	009b      	lsls	r3, r3, #2
 80100e4:	4a13      	ldr	r2, [pc, #76]	; (8010134 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 80100e6:	4413      	add	r3, r2
 80100e8:	4299      	cmp	r1, r3
 80100ea:	d11c      	bne.n	8010126 <vTaskPriorityDisinheritAfterTimeout+0xf6>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80100ec:	69bb      	ldr	r3, [r7, #24]
 80100ee:	3304      	adds	r3, #4
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7fd ffbd 	bl	800e070 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80100f6:	69bb      	ldr	r3, [r7, #24]
 80100f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80100fa:	4b0f      	ldr	r3, [pc, #60]	; (8010138 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 80100fc:	681b      	ldr	r3, [r3, #0]
 80100fe:	429a      	cmp	r2, r3
 8010100:	d903      	bls.n	801010a <vTaskPriorityDisinheritAfterTimeout+0xda>
 8010102:	69bb      	ldr	r3, [r7, #24]
 8010104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010106:	4a0c      	ldr	r2, [pc, #48]	; (8010138 <vTaskPriorityDisinheritAfterTimeout+0x108>)
 8010108:	6013      	str	r3, [r2, #0]
 801010a:	69bb      	ldr	r3, [r7, #24]
 801010c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801010e:	4613      	mov	r3, r2
 8010110:	009b      	lsls	r3, r3, #2
 8010112:	4413      	add	r3, r2
 8010114:	009b      	lsls	r3, r3, #2
 8010116:	4a07      	ldr	r2, [pc, #28]	; (8010134 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8010118:	441a      	add	r2, r3
 801011a:	69bb      	ldr	r3, [r7, #24]
 801011c:	3304      	adds	r3, #4
 801011e:	4619      	mov	r1, r3
 8010120:	4610      	mov	r0, r2
 8010122:	f7fd ff48 	bl	800dfb6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010126:	bf00      	nop
 8010128:	3720      	adds	r7, #32
 801012a:	46bd      	mov	sp, r7
 801012c:	bd80      	pop	{r7, pc}
 801012e:	bf00      	nop
 8010130:	20001640 	.word	0x20001640
 8010134:	20001644 	.word	0x20001644
 8010138:	20001b1c 	.word	0x20001b1c

0801013c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801013c:	b480      	push	{r7}
 801013e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8010140:	4b07      	ldr	r3, [pc, #28]	; (8010160 <pvTaskIncrementMutexHeldCount+0x24>)
 8010142:	681b      	ldr	r3, [r3, #0]
 8010144:	2b00      	cmp	r3, #0
 8010146:	d004      	beq.n	8010152 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8010148:	4b05      	ldr	r3, [pc, #20]	; (8010160 <pvTaskIncrementMutexHeldCount+0x24>)
 801014a:	681b      	ldr	r3, [r3, #0]
 801014c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801014e:	3201      	adds	r2, #1
 8010150:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8010152:	4b03      	ldr	r3, [pc, #12]	; (8010160 <pvTaskIncrementMutexHeldCount+0x24>)
 8010154:	681b      	ldr	r3, [r3, #0]
	}
 8010156:	4618      	mov	r0, r3
 8010158:	46bd      	mov	sp, r7
 801015a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015e:	4770      	bx	lr
 8010160:	20001640 	.word	0x20001640

08010164 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8010164:	b580      	push	{r7, lr}
 8010166:	b084      	sub	sp, #16
 8010168:	af00      	add	r7, sp, #0
 801016a:	6078      	str	r0, [r7, #4]
 801016c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801016e:	4b21      	ldr	r3, [pc, #132]	; (80101f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8010170:	681b      	ldr	r3, [r3, #0]
 8010172:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010174:	4b20      	ldr	r3, [pc, #128]	; (80101f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010176:	681b      	ldr	r3, [r3, #0]
 8010178:	3304      	adds	r3, #4
 801017a:	4618      	mov	r0, r3
 801017c:	f7fd ff78 	bl	800e070 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010186:	d10a      	bne.n	801019e <prvAddCurrentTaskToDelayedList+0x3a>
 8010188:	683b      	ldr	r3, [r7, #0]
 801018a:	2b00      	cmp	r3, #0
 801018c:	d007      	beq.n	801019e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801018e:	4b1a      	ldr	r3, [pc, #104]	; (80101f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	3304      	adds	r3, #4
 8010194:	4619      	mov	r1, r3
 8010196:	4819      	ldr	r0, [pc, #100]	; (80101fc <prvAddCurrentTaskToDelayedList+0x98>)
 8010198:	f7fd ff0d 	bl	800dfb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801019c:	e026      	b.n	80101ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801019e:	68fa      	ldr	r2, [r7, #12]
 80101a0:	687b      	ldr	r3, [r7, #4]
 80101a2:	4413      	add	r3, r2
 80101a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80101a6:	4b14      	ldr	r3, [pc, #80]	; (80101f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	68ba      	ldr	r2, [r7, #8]
 80101ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80101ae:	68ba      	ldr	r2, [r7, #8]
 80101b0:	68fb      	ldr	r3, [r7, #12]
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d209      	bcs.n	80101ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80101b6:	4b12      	ldr	r3, [pc, #72]	; (8010200 <prvAddCurrentTaskToDelayedList+0x9c>)
 80101b8:	681a      	ldr	r2, [r3, #0]
 80101ba:	4b0f      	ldr	r3, [pc, #60]	; (80101f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80101bc:	681b      	ldr	r3, [r3, #0]
 80101be:	3304      	adds	r3, #4
 80101c0:	4619      	mov	r1, r3
 80101c2:	4610      	mov	r0, r2
 80101c4:	f7fd ff1b 	bl	800dffe <vListInsert>
}
 80101c8:	e010      	b.n	80101ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80101ca:	4b0e      	ldr	r3, [pc, #56]	; (8010204 <prvAddCurrentTaskToDelayedList+0xa0>)
 80101cc:	681a      	ldr	r2, [r3, #0]
 80101ce:	4b0a      	ldr	r3, [pc, #40]	; (80101f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80101d0:	681b      	ldr	r3, [r3, #0]
 80101d2:	3304      	adds	r3, #4
 80101d4:	4619      	mov	r1, r3
 80101d6:	4610      	mov	r0, r2
 80101d8:	f7fd ff11 	bl	800dffe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80101dc:	4b0a      	ldr	r3, [pc, #40]	; (8010208 <prvAddCurrentTaskToDelayedList+0xa4>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	68ba      	ldr	r2, [r7, #8]
 80101e2:	429a      	cmp	r2, r3
 80101e4:	d202      	bcs.n	80101ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80101e6:	4a08      	ldr	r2, [pc, #32]	; (8010208 <prvAddCurrentTaskToDelayedList+0xa4>)
 80101e8:	68bb      	ldr	r3, [r7, #8]
 80101ea:	6013      	str	r3, [r2, #0]
}
 80101ec:	bf00      	nop
 80101ee:	3710      	adds	r7, #16
 80101f0:	46bd      	mov	sp, r7
 80101f2:	bd80      	pop	{r7, pc}
 80101f4:	20001b18 	.word	0x20001b18
 80101f8:	20001640 	.word	0x20001640
 80101fc:	20001b00 	.word	0x20001b00
 8010200:	20001ad0 	.word	0x20001ad0
 8010204:	20001acc 	.word	0x20001acc
 8010208:	20001b34 	.word	0x20001b34

0801020c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801020c:	b580      	push	{r7, lr}
 801020e:	b08a      	sub	sp, #40	; 0x28
 8010210:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010212:	2300      	movs	r3, #0
 8010214:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010216:	f000 fb15 	bl	8010844 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801021a:	4b1d      	ldr	r3, [pc, #116]	; (8010290 <xTimerCreateTimerTask+0x84>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	2b00      	cmp	r3, #0
 8010220:	d021      	beq.n	8010266 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8010222:	2300      	movs	r3, #0
 8010224:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8010226:	2300      	movs	r3, #0
 8010228:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 801022a:	1d3a      	adds	r2, r7, #4
 801022c:	f107 0108 	add.w	r1, r7, #8
 8010230:	f107 030c 	add.w	r3, r7, #12
 8010234:	4618      	mov	r0, r3
 8010236:	f7fd fe77 	bl	800df28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 801023a:	6879      	ldr	r1, [r7, #4]
 801023c:	68bb      	ldr	r3, [r7, #8]
 801023e:	68fa      	ldr	r2, [r7, #12]
 8010240:	9202      	str	r2, [sp, #8]
 8010242:	9301      	str	r3, [sp, #4]
 8010244:	2302      	movs	r3, #2
 8010246:	9300      	str	r3, [sp, #0]
 8010248:	2300      	movs	r3, #0
 801024a:	460a      	mov	r2, r1
 801024c:	4911      	ldr	r1, [pc, #68]	; (8010294 <xTimerCreateTimerTask+0x88>)
 801024e:	4812      	ldr	r0, [pc, #72]	; (8010298 <xTimerCreateTimerTask+0x8c>)
 8010250:	f7fe ff8e 	bl	800f170 <xTaskCreateStatic>
 8010254:	4603      	mov	r3, r0
 8010256:	4a11      	ldr	r2, [pc, #68]	; (801029c <xTimerCreateTimerTask+0x90>)
 8010258:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 801025a:	4b10      	ldr	r3, [pc, #64]	; (801029c <xTimerCreateTimerTask+0x90>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	2b00      	cmp	r3, #0
 8010260:	d001      	beq.n	8010266 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8010262:	2301      	movs	r3, #1
 8010264:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8010266:	697b      	ldr	r3, [r7, #20]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d10c      	bne.n	8010286 <xTimerCreateTimerTask+0x7a>
	__asm volatile
 801026c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010270:	b672      	cpsid	i
 8010272:	f383 8811 	msr	BASEPRI, r3
 8010276:	f3bf 8f6f 	isb	sy
 801027a:	f3bf 8f4f 	dsb	sy
 801027e:	b662      	cpsie	i
 8010280:	613b      	str	r3, [r7, #16]
}
 8010282:	bf00      	nop
 8010284:	e7fe      	b.n	8010284 <xTimerCreateTimerTask+0x78>
	return xReturn;
 8010286:	697b      	ldr	r3, [r7, #20]
}
 8010288:	4618      	mov	r0, r3
 801028a:	3718      	adds	r7, #24
 801028c:	46bd      	mov	sp, r7
 801028e:	bd80      	pop	{r7, pc}
 8010290:	20001b70 	.word	0x20001b70
 8010294:	0801200c 	.word	0x0801200c
 8010298:	080103dd 	.word	0x080103dd
 801029c:	20001b74 	.word	0x20001b74

080102a0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80102a0:	b580      	push	{r7, lr}
 80102a2:	b08a      	sub	sp, #40	; 0x28
 80102a4:	af00      	add	r7, sp, #0
 80102a6:	60f8      	str	r0, [r7, #12]
 80102a8:	60b9      	str	r1, [r7, #8]
 80102aa:	607a      	str	r2, [r7, #4]
 80102ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80102ae:	2300      	movs	r3, #0
 80102b0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d10c      	bne.n	80102d2 <xTimerGenericCommand+0x32>
	__asm volatile
 80102b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102bc:	b672      	cpsid	i
 80102be:	f383 8811 	msr	BASEPRI, r3
 80102c2:	f3bf 8f6f 	isb	sy
 80102c6:	f3bf 8f4f 	dsb	sy
 80102ca:	b662      	cpsie	i
 80102cc:	623b      	str	r3, [r7, #32]
}
 80102ce:	bf00      	nop
 80102d0:	e7fe      	b.n	80102d0 <xTimerGenericCommand+0x30>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80102d2:	4b1a      	ldr	r3, [pc, #104]	; (801033c <xTimerGenericCommand+0x9c>)
 80102d4:	681b      	ldr	r3, [r3, #0]
 80102d6:	2b00      	cmp	r3, #0
 80102d8:	d02a      	beq.n	8010330 <xTimerGenericCommand+0x90>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80102da:	68bb      	ldr	r3, [r7, #8]
 80102dc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80102de:	687b      	ldr	r3, [r7, #4]
 80102e0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80102e2:	68fb      	ldr	r3, [r7, #12]
 80102e4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80102e6:	68bb      	ldr	r3, [r7, #8]
 80102e8:	2b05      	cmp	r3, #5
 80102ea:	dc18      	bgt.n	801031e <xTimerGenericCommand+0x7e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80102ec:	f7ff fda8 	bl	800fe40 <xTaskGetSchedulerState>
 80102f0:	4603      	mov	r3, r0
 80102f2:	2b02      	cmp	r3, #2
 80102f4:	d109      	bne.n	801030a <xTimerGenericCommand+0x6a>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80102f6:	4b11      	ldr	r3, [pc, #68]	; (801033c <xTimerGenericCommand+0x9c>)
 80102f8:	6818      	ldr	r0, [r3, #0]
 80102fa:	f107 0110 	add.w	r1, r7, #16
 80102fe:	2300      	movs	r3, #0
 8010300:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010302:	f7fe f8a3 	bl	800e44c <xQueueGenericSend>
 8010306:	6278      	str	r0, [r7, #36]	; 0x24
 8010308:	e012      	b.n	8010330 <xTimerGenericCommand+0x90>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 801030a:	4b0c      	ldr	r3, [pc, #48]	; (801033c <xTimerGenericCommand+0x9c>)
 801030c:	6818      	ldr	r0, [r3, #0]
 801030e:	f107 0110 	add.w	r1, r7, #16
 8010312:	2300      	movs	r3, #0
 8010314:	2200      	movs	r2, #0
 8010316:	f7fe f899 	bl	800e44c <xQueueGenericSend>
 801031a:	6278      	str	r0, [r7, #36]	; 0x24
 801031c:	e008      	b.n	8010330 <xTimerGenericCommand+0x90>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 801031e:	4b07      	ldr	r3, [pc, #28]	; (801033c <xTimerGenericCommand+0x9c>)
 8010320:	6818      	ldr	r0, [r3, #0]
 8010322:	f107 0110 	add.w	r1, r7, #16
 8010326:	2300      	movs	r3, #0
 8010328:	683a      	ldr	r2, [r7, #0]
 801032a:	f7fe f995 	bl	800e658 <xQueueGenericSendFromISR>
 801032e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8010330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010332:	4618      	mov	r0, r3
 8010334:	3728      	adds	r7, #40	; 0x28
 8010336:	46bd      	mov	sp, r7
 8010338:	bd80      	pop	{r7, pc}
 801033a:	bf00      	nop
 801033c:	20001b70 	.word	0x20001b70

08010340 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8010340:	b580      	push	{r7, lr}
 8010342:	b088      	sub	sp, #32
 8010344:	af02      	add	r7, sp, #8
 8010346:	6078      	str	r0, [r7, #4]
 8010348:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801034a:	4b23      	ldr	r3, [pc, #140]	; (80103d8 <prvProcessExpiredTimer+0x98>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	68db      	ldr	r3, [r3, #12]
 8010350:	68db      	ldr	r3, [r3, #12]
 8010352:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010354:	697b      	ldr	r3, [r7, #20]
 8010356:	3304      	adds	r3, #4
 8010358:	4618      	mov	r0, r3
 801035a:	f7fd fe89 	bl	800e070 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801035e:	697b      	ldr	r3, [r7, #20]
 8010360:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010364:	f003 0304 	and.w	r3, r3, #4
 8010368:	2b00      	cmp	r3, #0
 801036a:	d024      	beq.n	80103b6 <prvProcessExpiredTimer+0x76>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 801036c:	697b      	ldr	r3, [r7, #20]
 801036e:	699a      	ldr	r2, [r3, #24]
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	18d1      	adds	r1, r2, r3
 8010374:	687b      	ldr	r3, [r7, #4]
 8010376:	683a      	ldr	r2, [r7, #0]
 8010378:	6978      	ldr	r0, [r7, #20]
 801037a:	f000 f8d3 	bl	8010524 <prvInsertTimerInActiveList>
 801037e:	4603      	mov	r3, r0
 8010380:	2b00      	cmp	r3, #0
 8010382:	d021      	beq.n	80103c8 <prvProcessExpiredTimer+0x88>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010384:	2300      	movs	r3, #0
 8010386:	9300      	str	r3, [sp, #0]
 8010388:	2300      	movs	r3, #0
 801038a:	687a      	ldr	r2, [r7, #4]
 801038c:	2100      	movs	r1, #0
 801038e:	6978      	ldr	r0, [r7, #20]
 8010390:	f7ff ff86 	bl	80102a0 <xTimerGenericCommand>
 8010394:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8010396:	693b      	ldr	r3, [r7, #16]
 8010398:	2b00      	cmp	r3, #0
 801039a:	d115      	bne.n	80103c8 <prvProcessExpiredTimer+0x88>
	__asm volatile
 801039c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103a0:	b672      	cpsid	i
 80103a2:	f383 8811 	msr	BASEPRI, r3
 80103a6:	f3bf 8f6f 	isb	sy
 80103aa:	f3bf 8f4f 	dsb	sy
 80103ae:	b662      	cpsie	i
 80103b0:	60fb      	str	r3, [r7, #12]
}
 80103b2:	bf00      	nop
 80103b4:	e7fe      	b.n	80103b4 <prvProcessExpiredTimer+0x74>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80103b6:	697b      	ldr	r3, [r7, #20]
 80103b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80103bc:	f023 0301 	bic.w	r3, r3, #1
 80103c0:	b2da      	uxtb	r2, r3
 80103c2:	697b      	ldr	r3, [r7, #20]
 80103c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80103c8:	697b      	ldr	r3, [r7, #20]
 80103ca:	6a1b      	ldr	r3, [r3, #32]
 80103cc:	6978      	ldr	r0, [r7, #20]
 80103ce:	4798      	blx	r3
}
 80103d0:	bf00      	nop
 80103d2:	3718      	adds	r7, #24
 80103d4:	46bd      	mov	sp, r7
 80103d6:	bd80      	pop	{r7, pc}
 80103d8:	20001b68 	.word	0x20001b68

080103dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b084      	sub	sp, #16
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80103e4:	f107 0308 	add.w	r3, r7, #8
 80103e8:	4618      	mov	r0, r3
 80103ea:	f000 f857 	bl	801049c <prvGetNextExpireTime>
 80103ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80103f0:	68bb      	ldr	r3, [r7, #8]
 80103f2:	4619      	mov	r1, r3
 80103f4:	68f8      	ldr	r0, [r7, #12]
 80103f6:	f000 f803 	bl	8010400 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80103fa:	f000 f8d5 	bl	80105a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80103fe:	e7f1      	b.n	80103e4 <prvTimerTask+0x8>

08010400 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010400:	b580      	push	{r7, lr}
 8010402:	b084      	sub	sp, #16
 8010404:	af00      	add	r7, sp, #0
 8010406:	6078      	str	r0, [r7, #4]
 8010408:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801040a:	f7ff f91b 	bl	800f644 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801040e:	f107 0308 	add.w	r3, r7, #8
 8010412:	4618      	mov	r0, r3
 8010414:	f000 f866 	bl	80104e4 <prvSampleTimeNow>
 8010418:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801041a:	68bb      	ldr	r3, [r7, #8]
 801041c:	2b00      	cmp	r3, #0
 801041e:	d130      	bne.n	8010482 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010420:	683b      	ldr	r3, [r7, #0]
 8010422:	2b00      	cmp	r3, #0
 8010424:	d10a      	bne.n	801043c <prvProcessTimerOrBlockTask+0x3c>
 8010426:	687a      	ldr	r2, [r7, #4]
 8010428:	68fb      	ldr	r3, [r7, #12]
 801042a:	429a      	cmp	r2, r3
 801042c:	d806      	bhi.n	801043c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 801042e:	f7ff f917 	bl	800f660 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8010432:	68f9      	ldr	r1, [r7, #12]
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f7ff ff83 	bl	8010340 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 801043a:	e024      	b.n	8010486 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 801043c:	683b      	ldr	r3, [r7, #0]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d008      	beq.n	8010454 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8010442:	4b13      	ldr	r3, [pc, #76]	; (8010490 <prvProcessTimerOrBlockTask+0x90>)
 8010444:	681b      	ldr	r3, [r3, #0]
 8010446:	681b      	ldr	r3, [r3, #0]
 8010448:	2b00      	cmp	r3, #0
 801044a:	d101      	bne.n	8010450 <prvProcessTimerOrBlockTask+0x50>
 801044c:	2301      	movs	r3, #1
 801044e:	e000      	b.n	8010452 <prvProcessTimerOrBlockTask+0x52>
 8010450:	2300      	movs	r3, #0
 8010452:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8010454:	4b0f      	ldr	r3, [pc, #60]	; (8010494 <prvProcessTimerOrBlockTask+0x94>)
 8010456:	6818      	ldr	r0, [r3, #0]
 8010458:	687a      	ldr	r2, [r7, #4]
 801045a:	68fb      	ldr	r3, [r7, #12]
 801045c:	1ad3      	subs	r3, r2, r3
 801045e:	683a      	ldr	r2, [r7, #0]
 8010460:	4619      	mov	r1, r3
 8010462:	f7fe fe51 	bl	800f108 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8010466:	f7ff f8fb 	bl	800f660 <xTaskResumeAll>
 801046a:	4603      	mov	r3, r0
 801046c:	2b00      	cmp	r3, #0
 801046e:	d10a      	bne.n	8010486 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8010470:	4b09      	ldr	r3, [pc, #36]	; (8010498 <prvProcessTimerOrBlockTask+0x98>)
 8010472:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010476:	601a      	str	r2, [r3, #0]
 8010478:	f3bf 8f4f 	dsb	sy
 801047c:	f3bf 8f6f 	isb	sy
}
 8010480:	e001      	b.n	8010486 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8010482:	f7ff f8ed 	bl	800f660 <xTaskResumeAll>
}
 8010486:	bf00      	nop
 8010488:	3710      	adds	r7, #16
 801048a:	46bd      	mov	sp, r7
 801048c:	bd80      	pop	{r7, pc}
 801048e:	bf00      	nop
 8010490:	20001b6c 	.word	0x20001b6c
 8010494:	20001b70 	.word	0x20001b70
 8010498:	e000ed04 	.word	0xe000ed04

0801049c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 801049c:	b480      	push	{r7}
 801049e:	b085      	sub	sp, #20
 80104a0:	af00      	add	r7, sp, #0
 80104a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80104a4:	4b0e      	ldr	r3, [pc, #56]	; (80104e0 <prvGetNextExpireTime+0x44>)
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d101      	bne.n	80104b2 <prvGetNextExpireTime+0x16>
 80104ae:	2201      	movs	r2, #1
 80104b0:	e000      	b.n	80104b4 <prvGetNextExpireTime+0x18>
 80104b2:	2200      	movs	r2, #0
 80104b4:	687b      	ldr	r3, [r7, #4]
 80104b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	681b      	ldr	r3, [r3, #0]
 80104bc:	2b00      	cmp	r3, #0
 80104be:	d105      	bne.n	80104cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80104c0:	4b07      	ldr	r3, [pc, #28]	; (80104e0 <prvGetNextExpireTime+0x44>)
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	68db      	ldr	r3, [r3, #12]
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	60fb      	str	r3, [r7, #12]
 80104ca:	e001      	b.n	80104d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80104cc:	2300      	movs	r3, #0
 80104ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80104d0:	68fb      	ldr	r3, [r7, #12]
}
 80104d2:	4618      	mov	r0, r3
 80104d4:	3714      	adds	r7, #20
 80104d6:	46bd      	mov	sp, r7
 80104d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104dc:	4770      	bx	lr
 80104de:	bf00      	nop
 80104e0:	20001b68 	.word	0x20001b68

080104e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80104e4:	b580      	push	{r7, lr}
 80104e6:	b084      	sub	sp, #16
 80104e8:	af00      	add	r7, sp, #0
 80104ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80104ec:	f7ff f958 	bl	800f7a0 <xTaskGetTickCount>
 80104f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80104f2:	4b0b      	ldr	r3, [pc, #44]	; (8010520 <prvSampleTimeNow+0x3c>)
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	68fa      	ldr	r2, [r7, #12]
 80104f8:	429a      	cmp	r2, r3
 80104fa:	d205      	bcs.n	8010508 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80104fc:	f000 f93c 	bl	8010778 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	2201      	movs	r2, #1
 8010504:	601a      	str	r2, [r3, #0]
 8010506:	e002      	b.n	801050e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2200      	movs	r2, #0
 801050c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 801050e:	4a04      	ldr	r2, [pc, #16]	; (8010520 <prvSampleTimeNow+0x3c>)
 8010510:	68fb      	ldr	r3, [r7, #12]
 8010512:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010514:	68fb      	ldr	r3, [r7, #12]
}
 8010516:	4618      	mov	r0, r3
 8010518:	3710      	adds	r7, #16
 801051a:	46bd      	mov	sp, r7
 801051c:	bd80      	pop	{r7, pc}
 801051e:	bf00      	nop
 8010520:	20001b78 	.word	0x20001b78

08010524 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b086      	sub	sp, #24
 8010528:	af00      	add	r7, sp, #0
 801052a:	60f8      	str	r0, [r7, #12]
 801052c:	60b9      	str	r1, [r7, #8]
 801052e:	607a      	str	r2, [r7, #4]
 8010530:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8010532:	2300      	movs	r3, #0
 8010534:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8010536:	68fb      	ldr	r3, [r7, #12]
 8010538:	68ba      	ldr	r2, [r7, #8]
 801053a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 801053c:	68fb      	ldr	r3, [r7, #12]
 801053e:	68fa      	ldr	r2, [r7, #12]
 8010540:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8010542:	68ba      	ldr	r2, [r7, #8]
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	429a      	cmp	r2, r3
 8010548:	d812      	bhi.n	8010570 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801054a:	687a      	ldr	r2, [r7, #4]
 801054c:	683b      	ldr	r3, [r7, #0]
 801054e:	1ad2      	subs	r2, r2, r3
 8010550:	68fb      	ldr	r3, [r7, #12]
 8010552:	699b      	ldr	r3, [r3, #24]
 8010554:	429a      	cmp	r2, r3
 8010556:	d302      	bcc.n	801055e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8010558:	2301      	movs	r3, #1
 801055a:	617b      	str	r3, [r7, #20]
 801055c:	e01b      	b.n	8010596 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 801055e:	4b10      	ldr	r3, [pc, #64]	; (80105a0 <prvInsertTimerInActiveList+0x7c>)
 8010560:	681a      	ldr	r2, [r3, #0]
 8010562:	68fb      	ldr	r3, [r7, #12]
 8010564:	3304      	adds	r3, #4
 8010566:	4619      	mov	r1, r3
 8010568:	4610      	mov	r0, r2
 801056a:	f7fd fd48 	bl	800dffe <vListInsert>
 801056e:	e012      	b.n	8010596 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8010570:	687a      	ldr	r2, [r7, #4]
 8010572:	683b      	ldr	r3, [r7, #0]
 8010574:	429a      	cmp	r2, r3
 8010576:	d206      	bcs.n	8010586 <prvInsertTimerInActiveList+0x62>
 8010578:	68ba      	ldr	r2, [r7, #8]
 801057a:	683b      	ldr	r3, [r7, #0]
 801057c:	429a      	cmp	r2, r3
 801057e:	d302      	bcc.n	8010586 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8010580:	2301      	movs	r3, #1
 8010582:	617b      	str	r3, [r7, #20]
 8010584:	e007      	b.n	8010596 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010586:	4b07      	ldr	r3, [pc, #28]	; (80105a4 <prvInsertTimerInActiveList+0x80>)
 8010588:	681a      	ldr	r2, [r3, #0]
 801058a:	68fb      	ldr	r3, [r7, #12]
 801058c:	3304      	adds	r3, #4
 801058e:	4619      	mov	r1, r3
 8010590:	4610      	mov	r0, r2
 8010592:	f7fd fd34 	bl	800dffe <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010596:	697b      	ldr	r3, [r7, #20]
}
 8010598:	4618      	mov	r0, r3
 801059a:	3718      	adds	r7, #24
 801059c:	46bd      	mov	sp, r7
 801059e:	bd80      	pop	{r7, pc}
 80105a0:	20001b6c 	.word	0x20001b6c
 80105a4:	20001b68 	.word	0x20001b68

080105a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80105a8:	b580      	push	{r7, lr}
 80105aa:	b08e      	sub	sp, #56	; 0x38
 80105ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80105ae:	e0d0      	b.n	8010752 <prvProcessReceivedCommands+0x1aa>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	2b00      	cmp	r3, #0
 80105b4:	da1a      	bge.n	80105ec <prvProcessReceivedCommands+0x44>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80105b6:	1d3b      	adds	r3, r7, #4
 80105b8:	3304      	adds	r3, #4
 80105ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80105bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105be:	2b00      	cmp	r3, #0
 80105c0:	d10c      	bne.n	80105dc <prvProcessReceivedCommands+0x34>
	__asm volatile
 80105c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80105c6:	b672      	cpsid	i
 80105c8:	f383 8811 	msr	BASEPRI, r3
 80105cc:	f3bf 8f6f 	isb	sy
 80105d0:	f3bf 8f4f 	dsb	sy
 80105d4:	b662      	cpsie	i
 80105d6:	61fb      	str	r3, [r7, #28]
}
 80105d8:	bf00      	nop
 80105da:	e7fe      	b.n	80105da <prvProcessReceivedCommands+0x32>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80105dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105e2:	6850      	ldr	r0, [r2, #4]
 80105e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80105e6:	6892      	ldr	r2, [r2, #8]
 80105e8:	4611      	mov	r1, r2
 80105ea:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80105ec:	687b      	ldr	r3, [r7, #4]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	f2c0 80ae 	blt.w	8010750 <prvProcessReceivedCommands+0x1a8>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80105f4:	68fb      	ldr	r3, [r7, #12]
 80105f6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80105f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80105fa:	695b      	ldr	r3, [r3, #20]
 80105fc:	2b00      	cmp	r3, #0
 80105fe:	d004      	beq.n	801060a <prvProcessReceivedCommands+0x62>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010602:	3304      	adds	r3, #4
 8010604:	4618      	mov	r0, r3
 8010606:	f7fd fd33 	bl	800e070 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 801060a:	463b      	mov	r3, r7
 801060c:	4618      	mov	r0, r3
 801060e:	f7ff ff69 	bl	80104e4 <prvSampleTimeNow>
 8010612:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	2b09      	cmp	r3, #9
 8010618:	f200 809b 	bhi.w	8010752 <prvProcessReceivedCommands+0x1aa>
 801061c:	a201      	add	r2, pc, #4	; (adr r2, 8010624 <prvProcessReceivedCommands+0x7c>)
 801061e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010622:	bf00      	nop
 8010624:	0801064d 	.word	0x0801064d
 8010628:	0801064d 	.word	0x0801064d
 801062c:	0801064d 	.word	0x0801064d
 8010630:	080106c5 	.word	0x080106c5
 8010634:	080106d9 	.word	0x080106d9
 8010638:	08010727 	.word	0x08010727
 801063c:	0801064d 	.word	0x0801064d
 8010640:	0801064d 	.word	0x0801064d
 8010644:	080106c5 	.word	0x080106c5
 8010648:	080106d9 	.word	0x080106d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 801064c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801064e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010652:	f043 0301 	orr.w	r3, r3, #1
 8010656:	b2da      	uxtb	r2, r3
 8010658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801065a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 801065e:	68ba      	ldr	r2, [r7, #8]
 8010660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010662:	699b      	ldr	r3, [r3, #24]
 8010664:	18d1      	adds	r1, r2, r3
 8010666:	68bb      	ldr	r3, [r7, #8]
 8010668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801066a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801066c:	f7ff ff5a 	bl	8010524 <prvInsertTimerInActiveList>
 8010670:	4603      	mov	r3, r0
 8010672:	2b00      	cmp	r3, #0
 8010674:	d06d      	beq.n	8010752 <prvProcessReceivedCommands+0x1aa>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010678:	6a1b      	ldr	r3, [r3, #32]
 801067a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801067c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 801067e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010684:	f003 0304 	and.w	r3, r3, #4
 8010688:	2b00      	cmp	r3, #0
 801068a:	d062      	beq.n	8010752 <prvProcessReceivedCommands+0x1aa>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 801068c:	68ba      	ldr	r2, [r7, #8]
 801068e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010690:	699b      	ldr	r3, [r3, #24]
 8010692:	441a      	add	r2, r3
 8010694:	2300      	movs	r3, #0
 8010696:	9300      	str	r3, [sp, #0]
 8010698:	2300      	movs	r3, #0
 801069a:	2100      	movs	r1, #0
 801069c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801069e:	f7ff fdff 	bl	80102a0 <xTimerGenericCommand>
 80106a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80106a4:	6a3b      	ldr	r3, [r7, #32]
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	d153      	bne.n	8010752 <prvProcessReceivedCommands+0x1aa>
	__asm volatile
 80106aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106ae:	b672      	cpsid	i
 80106b0:	f383 8811 	msr	BASEPRI, r3
 80106b4:	f3bf 8f6f 	isb	sy
 80106b8:	f3bf 8f4f 	dsb	sy
 80106bc:	b662      	cpsie	i
 80106be:	61bb      	str	r3, [r7, #24]
}
 80106c0:	bf00      	nop
 80106c2:	e7fe      	b.n	80106c2 <prvProcessReceivedCommands+0x11a>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80106c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106ca:	f023 0301 	bic.w	r3, r3, #1
 80106ce:	b2da      	uxtb	r2, r3
 80106d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80106d6:	e03c      	b.n	8010752 <prvProcessReceivedCommands+0x1aa>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80106d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80106de:	f043 0301 	orr.w	r3, r3, #1
 80106e2:	b2da      	uxtb	r2, r3
 80106e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80106ea:	68ba      	ldr	r2, [r7, #8]
 80106ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80106f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80106f2:	699b      	ldr	r3, [r3, #24]
 80106f4:	2b00      	cmp	r3, #0
 80106f6:	d10c      	bne.n	8010712 <prvProcessReceivedCommands+0x16a>
	__asm volatile
 80106f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106fc:	b672      	cpsid	i
 80106fe:	f383 8811 	msr	BASEPRI, r3
 8010702:	f3bf 8f6f 	isb	sy
 8010706:	f3bf 8f4f 	dsb	sy
 801070a:	b662      	cpsie	i
 801070c:	617b      	str	r3, [r7, #20]
}
 801070e:	bf00      	nop
 8010710:	e7fe      	b.n	8010710 <prvProcessReceivedCommands+0x168>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010714:	699a      	ldr	r2, [r3, #24]
 8010716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010718:	18d1      	adds	r1, r2, r3
 801071a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801071c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801071e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010720:	f7ff ff00 	bl	8010524 <prvInsertTimerInActiveList>
					break;
 8010724:	e015      	b.n	8010752 <prvProcessReceivedCommands+0x1aa>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010728:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 801072c:	f003 0302 	and.w	r3, r3, #2
 8010730:	2b00      	cmp	r3, #0
 8010732:	d103      	bne.n	801073c <prvProcessReceivedCommands+0x194>
						{
							vPortFree( pxTimer );
 8010734:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010736:	f000 fbc7 	bl	8010ec8 <vPortFree>
 801073a:	e00a      	b.n	8010752 <prvProcessReceivedCommands+0x1aa>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801073c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801073e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010742:	f023 0301 	bic.w	r3, r3, #1
 8010746:	b2da      	uxtb	r2, r3
 8010748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801074a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 801074e:	e000      	b.n	8010752 <prvProcessReceivedCommands+0x1aa>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8010750:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010752:	4b08      	ldr	r3, [pc, #32]	; (8010774 <prvProcessReceivedCommands+0x1cc>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	1d39      	adds	r1, r7, #4
 8010758:	2200      	movs	r2, #0
 801075a:	4618      	mov	r0, r3
 801075c:	f7fe f8b2 	bl	800e8c4 <xQueueReceive>
 8010760:	4603      	mov	r3, r0
 8010762:	2b00      	cmp	r3, #0
 8010764:	f47f af24 	bne.w	80105b0 <prvProcessReceivedCommands+0x8>
	}
}
 8010768:	bf00      	nop
 801076a:	bf00      	nop
 801076c:	3730      	adds	r7, #48	; 0x30
 801076e:	46bd      	mov	sp, r7
 8010770:	bd80      	pop	{r7, pc}
 8010772:	bf00      	nop
 8010774:	20001b70 	.word	0x20001b70

08010778 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b088      	sub	sp, #32
 801077c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 801077e:	e04a      	b.n	8010816 <prvSwitchTimerLists+0x9e>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010780:	4b2e      	ldr	r3, [pc, #184]	; (801083c <prvSwitchTimerLists+0xc4>)
 8010782:	681b      	ldr	r3, [r3, #0]
 8010784:	68db      	ldr	r3, [r3, #12]
 8010786:	681b      	ldr	r3, [r3, #0]
 8010788:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801078a:	4b2c      	ldr	r3, [pc, #176]	; (801083c <prvSwitchTimerLists+0xc4>)
 801078c:	681b      	ldr	r3, [r3, #0]
 801078e:	68db      	ldr	r3, [r3, #12]
 8010790:	68db      	ldr	r3, [r3, #12]
 8010792:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010794:	68fb      	ldr	r3, [r7, #12]
 8010796:	3304      	adds	r3, #4
 8010798:	4618      	mov	r0, r3
 801079a:	f7fd fc69 	bl	800e070 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801079e:	68fb      	ldr	r3, [r7, #12]
 80107a0:	6a1b      	ldr	r3, [r3, #32]
 80107a2:	68f8      	ldr	r0, [r7, #12]
 80107a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107ac:	f003 0304 	and.w	r3, r3, #4
 80107b0:	2b00      	cmp	r3, #0
 80107b2:	d030      	beq.n	8010816 <prvSwitchTimerLists+0x9e>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80107b4:	68fb      	ldr	r3, [r7, #12]
 80107b6:	699b      	ldr	r3, [r3, #24]
 80107b8:	693a      	ldr	r2, [r7, #16]
 80107ba:	4413      	add	r3, r2
 80107bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80107be:	68ba      	ldr	r2, [r7, #8]
 80107c0:	693b      	ldr	r3, [r7, #16]
 80107c2:	429a      	cmp	r2, r3
 80107c4:	d90e      	bls.n	80107e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80107c6:	68fb      	ldr	r3, [r7, #12]
 80107c8:	68ba      	ldr	r2, [r7, #8]
 80107ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	68fa      	ldr	r2, [r7, #12]
 80107d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80107d2:	4b1a      	ldr	r3, [pc, #104]	; (801083c <prvSwitchTimerLists+0xc4>)
 80107d4:	681a      	ldr	r2, [r3, #0]
 80107d6:	68fb      	ldr	r3, [r7, #12]
 80107d8:	3304      	adds	r3, #4
 80107da:	4619      	mov	r1, r3
 80107dc:	4610      	mov	r0, r2
 80107de:	f7fd fc0e 	bl	800dffe <vListInsert>
 80107e2:	e018      	b.n	8010816 <prvSwitchTimerLists+0x9e>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80107e4:	2300      	movs	r3, #0
 80107e6:	9300      	str	r3, [sp, #0]
 80107e8:	2300      	movs	r3, #0
 80107ea:	693a      	ldr	r2, [r7, #16]
 80107ec:	2100      	movs	r1, #0
 80107ee:	68f8      	ldr	r0, [r7, #12]
 80107f0:	f7ff fd56 	bl	80102a0 <xTimerGenericCommand>
 80107f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d10c      	bne.n	8010816 <prvSwitchTimerLists+0x9e>
	__asm volatile
 80107fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010800:	b672      	cpsid	i
 8010802:	f383 8811 	msr	BASEPRI, r3
 8010806:	f3bf 8f6f 	isb	sy
 801080a:	f3bf 8f4f 	dsb	sy
 801080e:	b662      	cpsie	i
 8010810:	603b      	str	r3, [r7, #0]
}
 8010812:	bf00      	nop
 8010814:	e7fe      	b.n	8010814 <prvSwitchTimerLists+0x9c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010816:	4b09      	ldr	r3, [pc, #36]	; (801083c <prvSwitchTimerLists+0xc4>)
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	681b      	ldr	r3, [r3, #0]
 801081c:	2b00      	cmp	r3, #0
 801081e:	d1af      	bne.n	8010780 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010820:	4b06      	ldr	r3, [pc, #24]	; (801083c <prvSwitchTimerLists+0xc4>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010826:	4b06      	ldr	r3, [pc, #24]	; (8010840 <prvSwitchTimerLists+0xc8>)
 8010828:	681b      	ldr	r3, [r3, #0]
 801082a:	4a04      	ldr	r2, [pc, #16]	; (801083c <prvSwitchTimerLists+0xc4>)
 801082c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 801082e:	4a04      	ldr	r2, [pc, #16]	; (8010840 <prvSwitchTimerLists+0xc8>)
 8010830:	697b      	ldr	r3, [r7, #20]
 8010832:	6013      	str	r3, [r2, #0]
}
 8010834:	bf00      	nop
 8010836:	3718      	adds	r7, #24
 8010838:	46bd      	mov	sp, r7
 801083a:	bd80      	pop	{r7, pc}
 801083c:	20001b68 	.word	0x20001b68
 8010840:	20001b6c 	.word	0x20001b6c

08010844 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010844:	b580      	push	{r7, lr}
 8010846:	b082      	sub	sp, #8
 8010848:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 801084a:	f000 f947 	bl	8010adc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 801084e:	4b15      	ldr	r3, [pc, #84]	; (80108a4 <prvCheckForValidListAndQueue+0x60>)
 8010850:	681b      	ldr	r3, [r3, #0]
 8010852:	2b00      	cmp	r3, #0
 8010854:	d120      	bne.n	8010898 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010856:	4814      	ldr	r0, [pc, #80]	; (80108a8 <prvCheckForValidListAndQueue+0x64>)
 8010858:	f7fd fb80 	bl	800df5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 801085c:	4813      	ldr	r0, [pc, #76]	; (80108ac <prvCheckForValidListAndQueue+0x68>)
 801085e:	f7fd fb7d 	bl	800df5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010862:	4b13      	ldr	r3, [pc, #76]	; (80108b0 <prvCheckForValidListAndQueue+0x6c>)
 8010864:	4a10      	ldr	r2, [pc, #64]	; (80108a8 <prvCheckForValidListAndQueue+0x64>)
 8010866:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010868:	4b12      	ldr	r3, [pc, #72]	; (80108b4 <prvCheckForValidListAndQueue+0x70>)
 801086a:	4a10      	ldr	r2, [pc, #64]	; (80108ac <prvCheckForValidListAndQueue+0x68>)
 801086c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 801086e:	2300      	movs	r3, #0
 8010870:	9300      	str	r3, [sp, #0]
 8010872:	4b11      	ldr	r3, [pc, #68]	; (80108b8 <prvCheckForValidListAndQueue+0x74>)
 8010874:	4a11      	ldr	r2, [pc, #68]	; (80108bc <prvCheckForValidListAndQueue+0x78>)
 8010876:	2110      	movs	r1, #16
 8010878:	200a      	movs	r0, #10
 801087a:	f7fd fc8d 	bl	800e198 <xQueueGenericCreateStatic>
 801087e:	4603      	mov	r3, r0
 8010880:	4a08      	ldr	r2, [pc, #32]	; (80108a4 <prvCheckForValidListAndQueue+0x60>)
 8010882:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010884:	4b07      	ldr	r3, [pc, #28]	; (80108a4 <prvCheckForValidListAndQueue+0x60>)
 8010886:	681b      	ldr	r3, [r3, #0]
 8010888:	2b00      	cmp	r3, #0
 801088a:	d005      	beq.n	8010898 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 801088c:	4b05      	ldr	r3, [pc, #20]	; (80108a4 <prvCheckForValidListAndQueue+0x60>)
 801088e:	681b      	ldr	r3, [r3, #0]
 8010890:	490b      	ldr	r1, [pc, #44]	; (80108c0 <prvCheckForValidListAndQueue+0x7c>)
 8010892:	4618      	mov	r0, r3
 8010894:	f7fe fbe4 	bl	800f060 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010898:	f000 f954 	bl	8010b44 <vPortExitCritical>
}
 801089c:	bf00      	nop
 801089e:	46bd      	mov	sp, r7
 80108a0:	bd80      	pop	{r7, pc}
 80108a2:	bf00      	nop
 80108a4:	20001b70 	.word	0x20001b70
 80108a8:	20001b40 	.word	0x20001b40
 80108ac:	20001b54 	.word	0x20001b54
 80108b0:	20001b68 	.word	0x20001b68
 80108b4:	20001b6c 	.word	0x20001b6c
 80108b8:	20001c1c 	.word	0x20001c1c
 80108bc:	20001b7c 	.word	0x20001b7c
 80108c0:	08012014 	.word	0x08012014

080108c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80108c4:	b480      	push	{r7}
 80108c6:	b085      	sub	sp, #20
 80108c8:	af00      	add	r7, sp, #0
 80108ca:	60f8      	str	r0, [r7, #12]
 80108cc:	60b9      	str	r1, [r7, #8]
 80108ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80108d0:	68fb      	ldr	r3, [r7, #12]
 80108d2:	3b04      	subs	r3, #4
 80108d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80108d6:	68fb      	ldr	r3, [r7, #12]
 80108d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80108dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80108de:	68fb      	ldr	r3, [r7, #12]
 80108e0:	3b04      	subs	r3, #4
 80108e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80108e4:	68bb      	ldr	r3, [r7, #8]
 80108e6:	f023 0201 	bic.w	r2, r3, #1
 80108ea:	68fb      	ldr	r3, [r7, #12]
 80108ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	3b04      	subs	r3, #4
 80108f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80108f4:	4a0c      	ldr	r2, [pc, #48]	; (8010928 <pxPortInitialiseStack+0x64>)
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	3b14      	subs	r3, #20
 80108fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010900:	687a      	ldr	r2, [r7, #4]
 8010902:	68fb      	ldr	r3, [r7, #12]
 8010904:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010906:	68fb      	ldr	r3, [r7, #12]
 8010908:	3b04      	subs	r3, #4
 801090a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801090c:	68fb      	ldr	r3, [r7, #12]
 801090e:	f06f 0202 	mvn.w	r2, #2
 8010912:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010914:	68fb      	ldr	r3, [r7, #12]
 8010916:	3b20      	subs	r3, #32
 8010918:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801091a:	68fb      	ldr	r3, [r7, #12]
}
 801091c:	4618      	mov	r0, r3
 801091e:	3714      	adds	r7, #20
 8010920:	46bd      	mov	sp, r7
 8010922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010926:	4770      	bx	lr
 8010928:	0801092d 	.word	0x0801092d

0801092c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801092c:	b480      	push	{r7}
 801092e:	b085      	sub	sp, #20
 8010930:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010932:	2300      	movs	r3, #0
 8010934:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010936:	4b14      	ldr	r3, [pc, #80]	; (8010988 <prvTaskExitError+0x5c>)
 8010938:	681b      	ldr	r3, [r3, #0]
 801093a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801093e:	d00c      	beq.n	801095a <prvTaskExitError+0x2e>
	__asm volatile
 8010940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010944:	b672      	cpsid	i
 8010946:	f383 8811 	msr	BASEPRI, r3
 801094a:	f3bf 8f6f 	isb	sy
 801094e:	f3bf 8f4f 	dsb	sy
 8010952:	b662      	cpsie	i
 8010954:	60fb      	str	r3, [r7, #12]
}
 8010956:	bf00      	nop
 8010958:	e7fe      	b.n	8010958 <prvTaskExitError+0x2c>
	__asm volatile
 801095a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801095e:	b672      	cpsid	i
 8010960:	f383 8811 	msr	BASEPRI, r3
 8010964:	f3bf 8f6f 	isb	sy
 8010968:	f3bf 8f4f 	dsb	sy
 801096c:	b662      	cpsie	i
 801096e:	60bb      	str	r3, [r7, #8]
}
 8010970:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010972:	bf00      	nop
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2b00      	cmp	r3, #0
 8010978:	d0fc      	beq.n	8010974 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801097a:	bf00      	nop
 801097c:	bf00      	nop
 801097e:	3714      	adds	r7, #20
 8010980:	46bd      	mov	sp, r7
 8010982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010986:	4770      	bx	lr
 8010988:	2000011c 	.word	0x2000011c
 801098c:	00000000 	.word	0x00000000

08010990 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010990:	4b07      	ldr	r3, [pc, #28]	; (80109b0 <pxCurrentTCBConst2>)
 8010992:	6819      	ldr	r1, [r3, #0]
 8010994:	6808      	ldr	r0, [r1, #0]
 8010996:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801099a:	f380 8809 	msr	PSP, r0
 801099e:	f3bf 8f6f 	isb	sy
 80109a2:	f04f 0000 	mov.w	r0, #0
 80109a6:	f380 8811 	msr	BASEPRI, r0
 80109aa:	4770      	bx	lr
 80109ac:	f3af 8000 	nop.w

080109b0 <pxCurrentTCBConst2>:
 80109b0:	20001640 	.word	0x20001640
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80109b4:	bf00      	nop
 80109b6:	bf00      	nop

080109b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80109b8:	4808      	ldr	r0, [pc, #32]	; (80109dc <prvPortStartFirstTask+0x24>)
 80109ba:	6800      	ldr	r0, [r0, #0]
 80109bc:	6800      	ldr	r0, [r0, #0]
 80109be:	f380 8808 	msr	MSP, r0
 80109c2:	f04f 0000 	mov.w	r0, #0
 80109c6:	f380 8814 	msr	CONTROL, r0
 80109ca:	b662      	cpsie	i
 80109cc:	b661      	cpsie	f
 80109ce:	f3bf 8f4f 	dsb	sy
 80109d2:	f3bf 8f6f 	isb	sy
 80109d6:	df00      	svc	0
 80109d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80109da:	bf00      	nop
 80109dc:	e000ed08 	.word	0xe000ed08

080109e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80109e0:	b580      	push	{r7, lr}
 80109e2:	b084      	sub	sp, #16
 80109e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80109e6:	4b37      	ldr	r3, [pc, #220]	; (8010ac4 <xPortStartScheduler+0xe4>)
 80109e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80109ea:	68fb      	ldr	r3, [r7, #12]
 80109ec:	781b      	ldrb	r3, [r3, #0]
 80109ee:	b2db      	uxtb	r3, r3
 80109f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	22ff      	movs	r2, #255	; 0xff
 80109f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80109f8:	68fb      	ldr	r3, [r7, #12]
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	b2db      	uxtb	r3, r3
 80109fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010a00:	78fb      	ldrb	r3, [r7, #3]
 8010a02:	b2db      	uxtb	r3, r3
 8010a04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010a08:	b2da      	uxtb	r2, r3
 8010a0a:	4b2f      	ldr	r3, [pc, #188]	; (8010ac8 <xPortStartScheduler+0xe8>)
 8010a0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010a0e:	4b2f      	ldr	r3, [pc, #188]	; (8010acc <xPortStartScheduler+0xec>)
 8010a10:	2207      	movs	r2, #7
 8010a12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010a14:	e009      	b.n	8010a2a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8010a16:	4b2d      	ldr	r3, [pc, #180]	; (8010acc <xPortStartScheduler+0xec>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	3b01      	subs	r3, #1
 8010a1c:	4a2b      	ldr	r2, [pc, #172]	; (8010acc <xPortStartScheduler+0xec>)
 8010a1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010a20:	78fb      	ldrb	r3, [r7, #3]
 8010a22:	b2db      	uxtb	r3, r3
 8010a24:	005b      	lsls	r3, r3, #1
 8010a26:	b2db      	uxtb	r3, r3
 8010a28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010a2a:	78fb      	ldrb	r3, [r7, #3]
 8010a2c:	b2db      	uxtb	r3, r3
 8010a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010a32:	2b80      	cmp	r3, #128	; 0x80
 8010a34:	d0ef      	beq.n	8010a16 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010a36:	4b25      	ldr	r3, [pc, #148]	; (8010acc <xPortStartScheduler+0xec>)
 8010a38:	681b      	ldr	r3, [r3, #0]
 8010a3a:	f1c3 0307 	rsb	r3, r3, #7
 8010a3e:	2b04      	cmp	r3, #4
 8010a40:	d00c      	beq.n	8010a5c <xPortStartScheduler+0x7c>
	__asm volatile
 8010a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a46:	b672      	cpsid	i
 8010a48:	f383 8811 	msr	BASEPRI, r3
 8010a4c:	f3bf 8f6f 	isb	sy
 8010a50:	f3bf 8f4f 	dsb	sy
 8010a54:	b662      	cpsie	i
 8010a56:	60bb      	str	r3, [r7, #8]
}
 8010a58:	bf00      	nop
 8010a5a:	e7fe      	b.n	8010a5a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010a5c:	4b1b      	ldr	r3, [pc, #108]	; (8010acc <xPortStartScheduler+0xec>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	021b      	lsls	r3, r3, #8
 8010a62:	4a1a      	ldr	r2, [pc, #104]	; (8010acc <xPortStartScheduler+0xec>)
 8010a64:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010a66:	4b19      	ldr	r3, [pc, #100]	; (8010acc <xPortStartScheduler+0xec>)
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010a6e:	4a17      	ldr	r2, [pc, #92]	; (8010acc <xPortStartScheduler+0xec>)
 8010a70:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	b2da      	uxtb	r2, r3
 8010a76:	68fb      	ldr	r3, [r7, #12]
 8010a78:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010a7a:	4b15      	ldr	r3, [pc, #84]	; (8010ad0 <xPortStartScheduler+0xf0>)
 8010a7c:	681b      	ldr	r3, [r3, #0]
 8010a7e:	4a14      	ldr	r2, [pc, #80]	; (8010ad0 <xPortStartScheduler+0xf0>)
 8010a80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010a84:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010a86:	4b12      	ldr	r3, [pc, #72]	; (8010ad0 <xPortStartScheduler+0xf0>)
 8010a88:	681b      	ldr	r3, [r3, #0]
 8010a8a:	4a11      	ldr	r2, [pc, #68]	; (8010ad0 <xPortStartScheduler+0xf0>)
 8010a8c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010a90:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010a92:	f000 f8dd 	bl	8010c50 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010a96:	4b0f      	ldr	r3, [pc, #60]	; (8010ad4 <xPortStartScheduler+0xf4>)
 8010a98:	2200      	movs	r2, #0
 8010a9a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010a9c:	f000 f8fc 	bl	8010c98 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010aa0:	4b0d      	ldr	r3, [pc, #52]	; (8010ad8 <xPortStartScheduler+0xf8>)
 8010aa2:	681b      	ldr	r3, [r3, #0]
 8010aa4:	4a0c      	ldr	r2, [pc, #48]	; (8010ad8 <xPortStartScheduler+0xf8>)
 8010aa6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010aaa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010aac:	f7ff ff84 	bl	80109b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010ab0:	f7fe ff42 	bl	800f938 <vTaskSwitchContext>
	prvTaskExitError();
 8010ab4:	f7ff ff3a 	bl	801092c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010ab8:	2300      	movs	r3, #0
}
 8010aba:	4618      	mov	r0, r3
 8010abc:	3710      	adds	r7, #16
 8010abe:	46bd      	mov	sp, r7
 8010ac0:	bd80      	pop	{r7, pc}
 8010ac2:	bf00      	nop
 8010ac4:	e000e400 	.word	0xe000e400
 8010ac8:	20001c6c 	.word	0x20001c6c
 8010acc:	20001c70 	.word	0x20001c70
 8010ad0:	e000ed20 	.word	0xe000ed20
 8010ad4:	2000011c 	.word	0x2000011c
 8010ad8:	e000ef34 	.word	0xe000ef34

08010adc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010adc:	b480      	push	{r7}
 8010ade:	b083      	sub	sp, #12
 8010ae0:	af00      	add	r7, sp, #0
	__asm volatile
 8010ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ae6:	b672      	cpsid	i
 8010ae8:	f383 8811 	msr	BASEPRI, r3
 8010aec:	f3bf 8f6f 	isb	sy
 8010af0:	f3bf 8f4f 	dsb	sy
 8010af4:	b662      	cpsie	i
 8010af6:	607b      	str	r3, [r7, #4]
}
 8010af8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010afa:	4b10      	ldr	r3, [pc, #64]	; (8010b3c <vPortEnterCritical+0x60>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	3301      	adds	r3, #1
 8010b00:	4a0e      	ldr	r2, [pc, #56]	; (8010b3c <vPortEnterCritical+0x60>)
 8010b02:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010b04:	4b0d      	ldr	r3, [pc, #52]	; (8010b3c <vPortEnterCritical+0x60>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	2b01      	cmp	r3, #1
 8010b0a:	d111      	bne.n	8010b30 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010b0c:	4b0c      	ldr	r3, [pc, #48]	; (8010b40 <vPortEnterCritical+0x64>)
 8010b0e:	681b      	ldr	r3, [r3, #0]
 8010b10:	b2db      	uxtb	r3, r3
 8010b12:	2b00      	cmp	r3, #0
 8010b14:	d00c      	beq.n	8010b30 <vPortEnterCritical+0x54>
	__asm volatile
 8010b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b1a:	b672      	cpsid	i
 8010b1c:	f383 8811 	msr	BASEPRI, r3
 8010b20:	f3bf 8f6f 	isb	sy
 8010b24:	f3bf 8f4f 	dsb	sy
 8010b28:	b662      	cpsie	i
 8010b2a:	603b      	str	r3, [r7, #0]
}
 8010b2c:	bf00      	nop
 8010b2e:	e7fe      	b.n	8010b2e <vPortEnterCritical+0x52>
	}
}
 8010b30:	bf00      	nop
 8010b32:	370c      	adds	r7, #12
 8010b34:	46bd      	mov	sp, r7
 8010b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b3a:	4770      	bx	lr
 8010b3c:	2000011c 	.word	0x2000011c
 8010b40:	e000ed04 	.word	0xe000ed04

08010b44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010b44:	b480      	push	{r7}
 8010b46:	b083      	sub	sp, #12
 8010b48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010b4a:	4b13      	ldr	r3, [pc, #76]	; (8010b98 <vPortExitCritical+0x54>)
 8010b4c:	681b      	ldr	r3, [r3, #0]
 8010b4e:	2b00      	cmp	r3, #0
 8010b50:	d10c      	bne.n	8010b6c <vPortExitCritical+0x28>
	__asm volatile
 8010b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b56:	b672      	cpsid	i
 8010b58:	f383 8811 	msr	BASEPRI, r3
 8010b5c:	f3bf 8f6f 	isb	sy
 8010b60:	f3bf 8f4f 	dsb	sy
 8010b64:	b662      	cpsie	i
 8010b66:	607b      	str	r3, [r7, #4]
}
 8010b68:	bf00      	nop
 8010b6a:	e7fe      	b.n	8010b6a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8010b6c:	4b0a      	ldr	r3, [pc, #40]	; (8010b98 <vPortExitCritical+0x54>)
 8010b6e:	681b      	ldr	r3, [r3, #0]
 8010b70:	3b01      	subs	r3, #1
 8010b72:	4a09      	ldr	r2, [pc, #36]	; (8010b98 <vPortExitCritical+0x54>)
 8010b74:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8010b76:	4b08      	ldr	r3, [pc, #32]	; (8010b98 <vPortExitCritical+0x54>)
 8010b78:	681b      	ldr	r3, [r3, #0]
 8010b7a:	2b00      	cmp	r3, #0
 8010b7c:	d105      	bne.n	8010b8a <vPortExitCritical+0x46>
 8010b7e:	2300      	movs	r3, #0
 8010b80:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010b82:	683b      	ldr	r3, [r7, #0]
 8010b84:	f383 8811 	msr	BASEPRI, r3
}
 8010b88:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8010b8a:	bf00      	nop
 8010b8c:	370c      	adds	r7, #12
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b94:	4770      	bx	lr
 8010b96:	bf00      	nop
 8010b98:	2000011c 	.word	0x2000011c
 8010b9c:	00000000 	.word	0x00000000

08010ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8010ba0:	f3ef 8009 	mrs	r0, PSP
 8010ba4:	f3bf 8f6f 	isb	sy
 8010ba8:	4b15      	ldr	r3, [pc, #84]	; (8010c00 <pxCurrentTCBConst>)
 8010baa:	681a      	ldr	r2, [r3, #0]
 8010bac:	f01e 0f10 	tst.w	lr, #16
 8010bb0:	bf08      	it	eq
 8010bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8010bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bba:	6010      	str	r0, [r2, #0]
 8010bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8010bc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8010bc4:	b672      	cpsid	i
 8010bc6:	f380 8811 	msr	BASEPRI, r0
 8010bca:	f3bf 8f4f 	dsb	sy
 8010bce:	f3bf 8f6f 	isb	sy
 8010bd2:	b662      	cpsie	i
 8010bd4:	f7fe feb0 	bl	800f938 <vTaskSwitchContext>
 8010bd8:	f04f 0000 	mov.w	r0, #0
 8010bdc:	f380 8811 	msr	BASEPRI, r0
 8010be0:	bc09      	pop	{r0, r3}
 8010be2:	6819      	ldr	r1, [r3, #0]
 8010be4:	6808      	ldr	r0, [r1, #0]
 8010be6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bea:	f01e 0f10 	tst.w	lr, #16
 8010bee:	bf08      	it	eq
 8010bf0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8010bf4:	f380 8809 	msr	PSP, r0
 8010bf8:	f3bf 8f6f 	isb	sy
 8010bfc:	4770      	bx	lr
 8010bfe:	bf00      	nop

08010c00 <pxCurrentTCBConst>:
 8010c00:	20001640 	.word	0x20001640
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8010c04:	bf00      	nop
 8010c06:	bf00      	nop

08010c08 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8010c08:	b580      	push	{r7, lr}
 8010c0a:	b082      	sub	sp, #8
 8010c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8010c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c12:	b672      	cpsid	i
 8010c14:	f383 8811 	msr	BASEPRI, r3
 8010c18:	f3bf 8f6f 	isb	sy
 8010c1c:	f3bf 8f4f 	dsb	sy
 8010c20:	b662      	cpsie	i
 8010c22:	607b      	str	r3, [r7, #4]
}
 8010c24:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8010c26:	f7fe fdcb 	bl	800f7c0 <xTaskIncrementTick>
 8010c2a:	4603      	mov	r3, r0
 8010c2c:	2b00      	cmp	r3, #0
 8010c2e:	d003      	beq.n	8010c38 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8010c30:	4b06      	ldr	r3, [pc, #24]	; (8010c4c <SysTick_Handler+0x44>)
 8010c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c36:	601a      	str	r2, [r3, #0]
 8010c38:	2300      	movs	r3, #0
 8010c3a:	603b      	str	r3, [r7, #0]
	__asm volatile
 8010c3c:	683b      	ldr	r3, [r7, #0]
 8010c3e:	f383 8811 	msr	BASEPRI, r3
}
 8010c42:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8010c44:	bf00      	nop
 8010c46:	3708      	adds	r7, #8
 8010c48:	46bd      	mov	sp, r7
 8010c4a:	bd80      	pop	{r7, pc}
 8010c4c:	e000ed04 	.word	0xe000ed04

08010c50 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8010c50:	b480      	push	{r7}
 8010c52:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8010c54:	4b0b      	ldr	r3, [pc, #44]	; (8010c84 <vPortSetupTimerInterrupt+0x34>)
 8010c56:	2200      	movs	r2, #0
 8010c58:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8010c5a:	4b0b      	ldr	r3, [pc, #44]	; (8010c88 <vPortSetupTimerInterrupt+0x38>)
 8010c5c:	2200      	movs	r2, #0
 8010c5e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8010c60:	4b0a      	ldr	r3, [pc, #40]	; (8010c8c <vPortSetupTimerInterrupt+0x3c>)
 8010c62:	681b      	ldr	r3, [r3, #0]
 8010c64:	4a0a      	ldr	r2, [pc, #40]	; (8010c90 <vPortSetupTimerInterrupt+0x40>)
 8010c66:	fba2 2303 	umull	r2, r3, r2, r3
 8010c6a:	099b      	lsrs	r3, r3, #6
 8010c6c:	4a09      	ldr	r2, [pc, #36]	; (8010c94 <vPortSetupTimerInterrupt+0x44>)
 8010c6e:	3b01      	subs	r3, #1
 8010c70:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8010c72:	4b04      	ldr	r3, [pc, #16]	; (8010c84 <vPortSetupTimerInterrupt+0x34>)
 8010c74:	2207      	movs	r2, #7
 8010c76:	601a      	str	r2, [r3, #0]
}
 8010c78:	bf00      	nop
 8010c7a:	46bd      	mov	sp, r7
 8010c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c80:	4770      	bx	lr
 8010c82:	bf00      	nop
 8010c84:	e000e010 	.word	0xe000e010
 8010c88:	e000e018 	.word	0xe000e018
 8010c8c:	20000004 	.word	0x20000004
 8010c90:	10624dd3 	.word	0x10624dd3
 8010c94:	e000e014 	.word	0xe000e014

08010c98 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8010c98:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8010ca8 <vPortEnableVFP+0x10>
 8010c9c:	6801      	ldr	r1, [r0, #0]
 8010c9e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8010ca2:	6001      	str	r1, [r0, #0]
 8010ca4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8010ca6:	bf00      	nop
 8010ca8:	e000ed88 	.word	0xe000ed88

08010cac <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8010cac:	b480      	push	{r7}
 8010cae:	b085      	sub	sp, #20
 8010cb0:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8010cb2:	f3ef 8305 	mrs	r3, IPSR
 8010cb6:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8010cb8:	68fb      	ldr	r3, [r7, #12]
 8010cba:	2b0f      	cmp	r3, #15
 8010cbc:	d916      	bls.n	8010cec <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8010cbe:	4a19      	ldr	r2, [pc, #100]	; (8010d24 <vPortValidateInterruptPriority+0x78>)
 8010cc0:	68fb      	ldr	r3, [r7, #12]
 8010cc2:	4413      	add	r3, r2
 8010cc4:	781b      	ldrb	r3, [r3, #0]
 8010cc6:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8010cc8:	4b17      	ldr	r3, [pc, #92]	; (8010d28 <vPortValidateInterruptPriority+0x7c>)
 8010cca:	781b      	ldrb	r3, [r3, #0]
 8010ccc:	7afa      	ldrb	r2, [r7, #11]
 8010cce:	429a      	cmp	r2, r3
 8010cd0:	d20c      	bcs.n	8010cec <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8010cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010cd6:	b672      	cpsid	i
 8010cd8:	f383 8811 	msr	BASEPRI, r3
 8010cdc:	f3bf 8f6f 	isb	sy
 8010ce0:	f3bf 8f4f 	dsb	sy
 8010ce4:	b662      	cpsie	i
 8010ce6:	607b      	str	r3, [r7, #4]
}
 8010ce8:	bf00      	nop
 8010cea:	e7fe      	b.n	8010cea <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8010cec:	4b0f      	ldr	r3, [pc, #60]	; (8010d2c <vPortValidateInterruptPriority+0x80>)
 8010cee:	681b      	ldr	r3, [r3, #0]
 8010cf0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8010cf4:	4b0e      	ldr	r3, [pc, #56]	; (8010d30 <vPortValidateInterruptPriority+0x84>)
 8010cf6:	681b      	ldr	r3, [r3, #0]
 8010cf8:	429a      	cmp	r2, r3
 8010cfa:	d90c      	bls.n	8010d16 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8010cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d00:	b672      	cpsid	i
 8010d02:	f383 8811 	msr	BASEPRI, r3
 8010d06:	f3bf 8f6f 	isb	sy
 8010d0a:	f3bf 8f4f 	dsb	sy
 8010d0e:	b662      	cpsie	i
 8010d10:	603b      	str	r3, [r7, #0]
}
 8010d12:	bf00      	nop
 8010d14:	e7fe      	b.n	8010d14 <vPortValidateInterruptPriority+0x68>
	}
 8010d16:	bf00      	nop
 8010d18:	3714      	adds	r7, #20
 8010d1a:	46bd      	mov	sp, r7
 8010d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d20:	4770      	bx	lr
 8010d22:	bf00      	nop
 8010d24:	e000e3f0 	.word	0xe000e3f0
 8010d28:	20001c6c 	.word	0x20001c6c
 8010d2c:	e000ed0c 	.word	0xe000ed0c
 8010d30:	20001c70 	.word	0x20001c70

08010d34 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8010d34:	b580      	push	{r7, lr}
 8010d36:	b08a      	sub	sp, #40	; 0x28
 8010d38:	af00      	add	r7, sp, #0
 8010d3a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8010d40:	f7fe fc80 	bl	800f644 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8010d44:	4b5b      	ldr	r3, [pc, #364]	; (8010eb4 <pvPortMalloc+0x180>)
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	2b00      	cmp	r3, #0
 8010d4a:	d101      	bne.n	8010d50 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8010d4c:	f000 f91a 	bl	8010f84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8010d50:	4b59      	ldr	r3, [pc, #356]	; (8010eb8 <pvPortMalloc+0x184>)
 8010d52:	681a      	ldr	r2, [r3, #0]
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	4013      	ands	r3, r2
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	f040 8092 	bne.w	8010e82 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d01f      	beq.n	8010da4 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8010d64:	2208      	movs	r2, #8
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	4413      	add	r3, r2
 8010d6a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8010d6c:	687b      	ldr	r3, [r7, #4]
 8010d6e:	f003 0307 	and.w	r3, r3, #7
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d016      	beq.n	8010da4 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	f023 0307 	bic.w	r3, r3, #7
 8010d7c:	3308      	adds	r3, #8
 8010d7e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f003 0307 	and.w	r3, r3, #7
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d00c      	beq.n	8010da4 <pvPortMalloc+0x70>
	__asm volatile
 8010d8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d8e:	b672      	cpsid	i
 8010d90:	f383 8811 	msr	BASEPRI, r3
 8010d94:	f3bf 8f6f 	isb	sy
 8010d98:	f3bf 8f4f 	dsb	sy
 8010d9c:	b662      	cpsie	i
 8010d9e:	617b      	str	r3, [r7, #20]
}
 8010da0:	bf00      	nop
 8010da2:	e7fe      	b.n	8010da2 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d06b      	beq.n	8010e82 <pvPortMalloc+0x14e>
 8010daa:	4b44      	ldr	r3, [pc, #272]	; (8010ebc <pvPortMalloc+0x188>)
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	687a      	ldr	r2, [r7, #4]
 8010db0:	429a      	cmp	r2, r3
 8010db2:	d866      	bhi.n	8010e82 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8010db4:	4b42      	ldr	r3, [pc, #264]	; (8010ec0 <pvPortMalloc+0x18c>)
 8010db6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8010db8:	4b41      	ldr	r3, [pc, #260]	; (8010ec0 <pvPortMalloc+0x18c>)
 8010dba:	681b      	ldr	r3, [r3, #0]
 8010dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010dbe:	e004      	b.n	8010dca <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8010dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8010dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8010dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dcc:	685b      	ldr	r3, [r3, #4]
 8010dce:	687a      	ldr	r2, [r7, #4]
 8010dd0:	429a      	cmp	r2, r3
 8010dd2:	d903      	bls.n	8010ddc <pvPortMalloc+0xa8>
 8010dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d1f1      	bne.n	8010dc0 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8010ddc:	4b35      	ldr	r3, [pc, #212]	; (8010eb4 <pvPortMalloc+0x180>)
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010de2:	429a      	cmp	r2, r3
 8010de4:	d04d      	beq.n	8010e82 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8010de6:	6a3b      	ldr	r3, [r7, #32]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	2208      	movs	r2, #8
 8010dec:	4413      	add	r3, r2
 8010dee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8010df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010df2:	681a      	ldr	r2, [r3, #0]
 8010df4:	6a3b      	ldr	r3, [r7, #32]
 8010df6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8010df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dfa:	685a      	ldr	r2, [r3, #4]
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	1ad2      	subs	r2, r2, r3
 8010e00:	2308      	movs	r3, #8
 8010e02:	005b      	lsls	r3, r3, #1
 8010e04:	429a      	cmp	r2, r3
 8010e06:	d921      	bls.n	8010e4c <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8010e08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	4413      	add	r3, r2
 8010e0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e10:	69bb      	ldr	r3, [r7, #24]
 8010e12:	f003 0307 	and.w	r3, r3, #7
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d00c      	beq.n	8010e34 <pvPortMalloc+0x100>
	__asm volatile
 8010e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e1e:	b672      	cpsid	i
 8010e20:	f383 8811 	msr	BASEPRI, r3
 8010e24:	f3bf 8f6f 	isb	sy
 8010e28:	f3bf 8f4f 	dsb	sy
 8010e2c:	b662      	cpsie	i
 8010e2e:	613b      	str	r3, [r7, #16]
}
 8010e30:	bf00      	nop
 8010e32:	e7fe      	b.n	8010e32 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8010e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e36:	685a      	ldr	r2, [r3, #4]
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	1ad2      	subs	r2, r2, r3
 8010e3c:	69bb      	ldr	r3, [r7, #24]
 8010e3e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8010e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e42:	687a      	ldr	r2, [r7, #4]
 8010e44:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8010e46:	69b8      	ldr	r0, [r7, #24]
 8010e48:	f000 f8fe 	bl	8011048 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8010e4c:	4b1b      	ldr	r3, [pc, #108]	; (8010ebc <pvPortMalloc+0x188>)
 8010e4e:	681a      	ldr	r2, [r3, #0]
 8010e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e52:	685b      	ldr	r3, [r3, #4]
 8010e54:	1ad3      	subs	r3, r2, r3
 8010e56:	4a19      	ldr	r2, [pc, #100]	; (8010ebc <pvPortMalloc+0x188>)
 8010e58:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8010e5a:	4b18      	ldr	r3, [pc, #96]	; (8010ebc <pvPortMalloc+0x188>)
 8010e5c:	681a      	ldr	r2, [r3, #0]
 8010e5e:	4b19      	ldr	r3, [pc, #100]	; (8010ec4 <pvPortMalloc+0x190>)
 8010e60:	681b      	ldr	r3, [r3, #0]
 8010e62:	429a      	cmp	r2, r3
 8010e64:	d203      	bcs.n	8010e6e <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8010e66:	4b15      	ldr	r3, [pc, #84]	; (8010ebc <pvPortMalloc+0x188>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	4a16      	ldr	r2, [pc, #88]	; (8010ec4 <pvPortMalloc+0x190>)
 8010e6c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8010e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e70:	685a      	ldr	r2, [r3, #4]
 8010e72:	4b11      	ldr	r3, [pc, #68]	; (8010eb8 <pvPortMalloc+0x184>)
 8010e74:	681b      	ldr	r3, [r3, #0]
 8010e76:	431a      	orrs	r2, r3
 8010e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8010e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e7e:	2200      	movs	r2, #0
 8010e80:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8010e82:	f7fe fbed 	bl	800f660 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8010e86:	69fb      	ldr	r3, [r7, #28]
 8010e88:	f003 0307 	and.w	r3, r3, #7
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	d00c      	beq.n	8010eaa <pvPortMalloc+0x176>
	__asm volatile
 8010e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e94:	b672      	cpsid	i
 8010e96:	f383 8811 	msr	BASEPRI, r3
 8010e9a:	f3bf 8f6f 	isb	sy
 8010e9e:	f3bf 8f4f 	dsb	sy
 8010ea2:	b662      	cpsie	i
 8010ea4:	60fb      	str	r3, [r7, #12]
}
 8010ea6:	bf00      	nop
 8010ea8:	e7fe      	b.n	8010ea8 <pvPortMalloc+0x174>
	return pvReturn;
 8010eaa:	69fb      	ldr	r3, [r7, #28]
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3728      	adds	r7, #40	; 0x28
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}
 8010eb4:	2000587c 	.word	0x2000587c
 8010eb8:	20005888 	.word	0x20005888
 8010ebc:	20005880 	.word	0x20005880
 8010ec0:	20005874 	.word	0x20005874
 8010ec4:	20005884 	.word	0x20005884

08010ec8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8010ec8:	b580      	push	{r7, lr}
 8010eca:	b086      	sub	sp, #24
 8010ecc:	af00      	add	r7, sp, #0
 8010ece:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8010ed0:	687b      	ldr	r3, [r7, #4]
 8010ed2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	2b00      	cmp	r3, #0
 8010ed8:	d04c      	beq.n	8010f74 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8010eda:	2308      	movs	r3, #8
 8010edc:	425b      	negs	r3, r3
 8010ede:	697a      	ldr	r2, [r7, #20]
 8010ee0:	4413      	add	r3, r2
 8010ee2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8010ee4:	697b      	ldr	r3, [r7, #20]
 8010ee6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8010ee8:	693b      	ldr	r3, [r7, #16]
 8010eea:	685a      	ldr	r2, [r3, #4]
 8010eec:	4b23      	ldr	r3, [pc, #140]	; (8010f7c <vPortFree+0xb4>)
 8010eee:	681b      	ldr	r3, [r3, #0]
 8010ef0:	4013      	ands	r3, r2
 8010ef2:	2b00      	cmp	r3, #0
 8010ef4:	d10c      	bne.n	8010f10 <vPortFree+0x48>
	__asm volatile
 8010ef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010efa:	b672      	cpsid	i
 8010efc:	f383 8811 	msr	BASEPRI, r3
 8010f00:	f3bf 8f6f 	isb	sy
 8010f04:	f3bf 8f4f 	dsb	sy
 8010f08:	b662      	cpsie	i
 8010f0a:	60fb      	str	r3, [r7, #12]
}
 8010f0c:	bf00      	nop
 8010f0e:	e7fe      	b.n	8010f0e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8010f10:	693b      	ldr	r3, [r7, #16]
 8010f12:	681b      	ldr	r3, [r3, #0]
 8010f14:	2b00      	cmp	r3, #0
 8010f16:	d00c      	beq.n	8010f32 <vPortFree+0x6a>
	__asm volatile
 8010f18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f1c:	b672      	cpsid	i
 8010f1e:	f383 8811 	msr	BASEPRI, r3
 8010f22:	f3bf 8f6f 	isb	sy
 8010f26:	f3bf 8f4f 	dsb	sy
 8010f2a:	b662      	cpsie	i
 8010f2c:	60bb      	str	r3, [r7, #8]
}
 8010f2e:	bf00      	nop
 8010f30:	e7fe      	b.n	8010f30 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	685a      	ldr	r2, [r3, #4]
 8010f36:	4b11      	ldr	r3, [pc, #68]	; (8010f7c <vPortFree+0xb4>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	4013      	ands	r3, r2
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d019      	beq.n	8010f74 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8010f40:	693b      	ldr	r3, [r7, #16]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d115      	bne.n	8010f74 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8010f48:	693b      	ldr	r3, [r7, #16]
 8010f4a:	685a      	ldr	r2, [r3, #4]
 8010f4c:	4b0b      	ldr	r3, [pc, #44]	; (8010f7c <vPortFree+0xb4>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	43db      	mvns	r3, r3
 8010f52:	401a      	ands	r2, r3
 8010f54:	693b      	ldr	r3, [r7, #16]
 8010f56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8010f58:	f7fe fb74 	bl	800f644 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8010f5c:	693b      	ldr	r3, [r7, #16]
 8010f5e:	685a      	ldr	r2, [r3, #4]
 8010f60:	4b07      	ldr	r3, [pc, #28]	; (8010f80 <vPortFree+0xb8>)
 8010f62:	681b      	ldr	r3, [r3, #0]
 8010f64:	4413      	add	r3, r2
 8010f66:	4a06      	ldr	r2, [pc, #24]	; (8010f80 <vPortFree+0xb8>)
 8010f68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8010f6a:	6938      	ldr	r0, [r7, #16]
 8010f6c:	f000 f86c 	bl	8011048 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8010f70:	f7fe fb76 	bl	800f660 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8010f74:	bf00      	nop
 8010f76:	3718      	adds	r7, #24
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}
 8010f7c:	20005888 	.word	0x20005888
 8010f80:	20005880 	.word	0x20005880

08010f84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8010f84:	b480      	push	{r7}
 8010f86:	b085      	sub	sp, #20
 8010f88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8010f8a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8010f8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8010f90:	4b27      	ldr	r3, [pc, #156]	; (8011030 <prvHeapInit+0xac>)
 8010f92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	f003 0307 	and.w	r3, r3, #7
 8010f9a:	2b00      	cmp	r3, #0
 8010f9c:	d00c      	beq.n	8010fb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8010f9e:	68fb      	ldr	r3, [r7, #12]
 8010fa0:	3307      	adds	r3, #7
 8010fa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010fa4:	68fb      	ldr	r3, [r7, #12]
 8010fa6:	f023 0307 	bic.w	r3, r3, #7
 8010faa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8010fac:	68ba      	ldr	r2, [r7, #8]
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	1ad3      	subs	r3, r2, r3
 8010fb2:	4a1f      	ldr	r2, [pc, #124]	; (8011030 <prvHeapInit+0xac>)
 8010fb4:	4413      	add	r3, r2
 8010fb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8010fb8:	68fb      	ldr	r3, [r7, #12]
 8010fba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8010fbc:	4a1d      	ldr	r2, [pc, #116]	; (8011034 <prvHeapInit+0xb0>)
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8010fc2:	4b1c      	ldr	r3, [pc, #112]	; (8011034 <prvHeapInit+0xb0>)
 8010fc4:	2200      	movs	r2, #0
 8010fc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8010fc8:	687b      	ldr	r3, [r7, #4]
 8010fca:	68ba      	ldr	r2, [r7, #8]
 8010fcc:	4413      	add	r3, r2
 8010fce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8010fd0:	2208      	movs	r2, #8
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	1a9b      	subs	r3, r3, r2
 8010fd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8010fd8:	68fb      	ldr	r3, [r7, #12]
 8010fda:	f023 0307 	bic.w	r3, r3, #7
 8010fde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8010fe0:	68fb      	ldr	r3, [r7, #12]
 8010fe2:	4a15      	ldr	r2, [pc, #84]	; (8011038 <prvHeapInit+0xb4>)
 8010fe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8010fe6:	4b14      	ldr	r3, [pc, #80]	; (8011038 <prvHeapInit+0xb4>)
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	2200      	movs	r2, #0
 8010fec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8010fee:	4b12      	ldr	r3, [pc, #72]	; (8011038 <prvHeapInit+0xb4>)
 8010ff0:	681b      	ldr	r3, [r3, #0]
 8010ff2:	2200      	movs	r2, #0
 8010ff4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8010ff6:	687b      	ldr	r3, [r7, #4]
 8010ff8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8010ffa:	683b      	ldr	r3, [r7, #0]
 8010ffc:	68fa      	ldr	r2, [r7, #12]
 8010ffe:	1ad2      	subs	r2, r2, r3
 8011000:	683b      	ldr	r3, [r7, #0]
 8011002:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011004:	4b0c      	ldr	r3, [pc, #48]	; (8011038 <prvHeapInit+0xb4>)
 8011006:	681a      	ldr	r2, [r3, #0]
 8011008:	683b      	ldr	r3, [r7, #0]
 801100a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801100c:	683b      	ldr	r3, [r7, #0]
 801100e:	685b      	ldr	r3, [r3, #4]
 8011010:	4a0a      	ldr	r2, [pc, #40]	; (801103c <prvHeapInit+0xb8>)
 8011012:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011014:	683b      	ldr	r3, [r7, #0]
 8011016:	685b      	ldr	r3, [r3, #4]
 8011018:	4a09      	ldr	r2, [pc, #36]	; (8011040 <prvHeapInit+0xbc>)
 801101a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801101c:	4b09      	ldr	r3, [pc, #36]	; (8011044 <prvHeapInit+0xc0>)
 801101e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8011022:	601a      	str	r2, [r3, #0]
}
 8011024:	bf00      	nop
 8011026:	3714      	adds	r7, #20
 8011028:	46bd      	mov	sp, r7
 801102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801102e:	4770      	bx	lr
 8011030:	20001c74 	.word	0x20001c74
 8011034:	20005874 	.word	0x20005874
 8011038:	2000587c 	.word	0x2000587c
 801103c:	20005884 	.word	0x20005884
 8011040:	20005880 	.word	0x20005880
 8011044:	20005888 	.word	0x20005888

08011048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8011048:	b480      	push	{r7}
 801104a:	b085      	sub	sp, #20
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8011050:	4b28      	ldr	r3, [pc, #160]	; (80110f4 <prvInsertBlockIntoFreeList+0xac>)
 8011052:	60fb      	str	r3, [r7, #12]
 8011054:	e002      	b.n	801105c <prvInsertBlockIntoFreeList+0x14>
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	681b      	ldr	r3, [r3, #0]
 801105a:	60fb      	str	r3, [r7, #12]
 801105c:	68fb      	ldr	r3, [r7, #12]
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	687a      	ldr	r2, [r7, #4]
 8011062:	429a      	cmp	r2, r3
 8011064:	d8f7      	bhi.n	8011056 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011066:	68fb      	ldr	r3, [r7, #12]
 8011068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	685b      	ldr	r3, [r3, #4]
 801106e:	68ba      	ldr	r2, [r7, #8]
 8011070:	4413      	add	r3, r2
 8011072:	687a      	ldr	r2, [r7, #4]
 8011074:	429a      	cmp	r2, r3
 8011076:	d108      	bne.n	801108a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011078:	68fb      	ldr	r3, [r7, #12]
 801107a:	685a      	ldr	r2, [r3, #4]
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	685b      	ldr	r3, [r3, #4]
 8011080:	441a      	add	r2, r3
 8011082:	68fb      	ldr	r3, [r7, #12]
 8011084:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011086:	68fb      	ldr	r3, [r7, #12]
 8011088:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801108e:	687b      	ldr	r3, [r7, #4]
 8011090:	685b      	ldr	r3, [r3, #4]
 8011092:	68ba      	ldr	r2, [r7, #8]
 8011094:	441a      	add	r2, r3
 8011096:	68fb      	ldr	r3, [r7, #12]
 8011098:	681b      	ldr	r3, [r3, #0]
 801109a:	429a      	cmp	r2, r3
 801109c:	d118      	bne.n	80110d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801109e:	68fb      	ldr	r3, [r7, #12]
 80110a0:	681a      	ldr	r2, [r3, #0]
 80110a2:	4b15      	ldr	r3, [pc, #84]	; (80110f8 <prvInsertBlockIntoFreeList+0xb0>)
 80110a4:	681b      	ldr	r3, [r3, #0]
 80110a6:	429a      	cmp	r2, r3
 80110a8:	d00d      	beq.n	80110c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	685a      	ldr	r2, [r3, #4]
 80110ae:	68fb      	ldr	r3, [r7, #12]
 80110b0:	681b      	ldr	r3, [r3, #0]
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	441a      	add	r2, r3
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	681b      	ldr	r3, [r3, #0]
 80110be:	681a      	ldr	r2, [r3, #0]
 80110c0:	687b      	ldr	r3, [r7, #4]
 80110c2:	601a      	str	r2, [r3, #0]
 80110c4:	e008      	b.n	80110d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80110c6:	4b0c      	ldr	r3, [pc, #48]	; (80110f8 <prvInsertBlockIntoFreeList+0xb0>)
 80110c8:	681a      	ldr	r2, [r3, #0]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	601a      	str	r2, [r3, #0]
 80110ce:	e003      	b.n	80110d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80110d0:	68fb      	ldr	r3, [r7, #12]
 80110d2:	681a      	ldr	r2, [r3, #0]
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80110d8:	68fa      	ldr	r2, [r7, #12]
 80110da:	687b      	ldr	r3, [r7, #4]
 80110dc:	429a      	cmp	r2, r3
 80110de:	d002      	beq.n	80110e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80110e0:	68fb      	ldr	r3, [r7, #12]
 80110e2:	687a      	ldr	r2, [r7, #4]
 80110e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80110e6:	bf00      	nop
 80110e8:	3714      	adds	r7, #20
 80110ea:	46bd      	mov	sp, r7
 80110ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f0:	4770      	bx	lr
 80110f2:	bf00      	nop
 80110f4:	20005874 	.word	0x20005874
 80110f8:	2000587c 	.word	0x2000587c

080110fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011100:	2200      	movs	r2, #0
 8011102:	4912      	ldr	r1, [pc, #72]	; (801114c <MX_USB_DEVICE_Init+0x50>)
 8011104:	4812      	ldr	r0, [pc, #72]	; (8011150 <MX_USB_DEVICE_Init+0x54>)
 8011106:	f7fa ffcd 	bl	800c0a4 <USBD_Init>
 801110a:	4603      	mov	r3, r0
 801110c:	2b00      	cmp	r3, #0
 801110e:	d001      	beq.n	8011114 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011110:	f7ef ffb2 	bl	8001078 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011114:	490f      	ldr	r1, [pc, #60]	; (8011154 <MX_USB_DEVICE_Init+0x58>)
 8011116:	480e      	ldr	r0, [pc, #56]	; (8011150 <MX_USB_DEVICE_Init+0x54>)
 8011118:	f7fa fff4 	bl	800c104 <USBD_RegisterClass>
 801111c:	4603      	mov	r3, r0
 801111e:	2b00      	cmp	r3, #0
 8011120:	d001      	beq.n	8011126 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011122:	f7ef ffa9 	bl	8001078 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8011126:	490c      	ldr	r1, [pc, #48]	; (8011158 <MX_USB_DEVICE_Init+0x5c>)
 8011128:	4809      	ldr	r0, [pc, #36]	; (8011150 <MX_USB_DEVICE_Init+0x54>)
 801112a:	f7fa feeb 	bl	800bf04 <USBD_CDC_RegisterInterface>
 801112e:	4603      	mov	r3, r0
 8011130:	2b00      	cmp	r3, #0
 8011132:	d001      	beq.n	8011138 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011134:	f7ef ffa0 	bl	8001078 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8011138:	4805      	ldr	r0, [pc, #20]	; (8011150 <MX_USB_DEVICE_Init+0x54>)
 801113a:	f7fb f819 	bl	800c170 <USBD_Start>
 801113e:	4603      	mov	r3, r0
 8011140:	2b00      	cmp	r3, #0
 8011142:	d001      	beq.n	8011148 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011144:	f7ef ff98 	bl	8001078 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011148:	bf00      	nop
 801114a:	bd80      	pop	{r7, pc}
 801114c:	20000134 	.word	0x20000134
 8011150:	2000588c 	.word	0x2000588c
 8011154:	2000009c 	.word	0x2000009c
 8011158:	20000120 	.word	0x20000120

0801115c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801115c:	b580      	push	{r7, lr}
 801115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011160:	2200      	movs	r2, #0
 8011162:	4905      	ldr	r1, [pc, #20]	; (8011178 <CDC_Init_FS+0x1c>)
 8011164:	4805      	ldr	r0, [pc, #20]	; (801117c <CDC_Init_FS+0x20>)
 8011166:	f7fa fee7 	bl	800bf38 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801116a:	4905      	ldr	r1, [pc, #20]	; (8011180 <CDC_Init_FS+0x24>)
 801116c:	4803      	ldr	r0, [pc, #12]	; (801117c <CDC_Init_FS+0x20>)
 801116e:	f7fa ff05 	bl	800bf7c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011172:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011174:	4618      	mov	r0, r3
 8011176:	bd80      	pop	{r7, pc}
 8011178:	20006368 	.word	0x20006368
 801117c:	2000588c 	.word	0x2000588c
 8011180:	20005b68 	.word	0x20005b68

08011184 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011184:	b480      	push	{r7}
 8011186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8011188:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801118a:	4618      	mov	r0, r3
 801118c:	46bd      	mov	sp, r7
 801118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011192:	4770      	bx	lr

08011194 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011194:	b480      	push	{r7}
 8011196:	b083      	sub	sp, #12
 8011198:	af00      	add	r7, sp, #0
 801119a:	4603      	mov	r3, r0
 801119c:	6039      	str	r1, [r7, #0]
 801119e:	71fb      	strb	r3, [r7, #7]
 80111a0:	4613      	mov	r3, r2
 80111a2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80111a4:	79fb      	ldrb	r3, [r7, #7]
 80111a6:	2b23      	cmp	r3, #35	; 0x23
 80111a8:	d84a      	bhi.n	8011240 <CDC_Control_FS+0xac>
 80111aa:	a201      	add	r2, pc, #4	; (adr r2, 80111b0 <CDC_Control_FS+0x1c>)
 80111ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111b0:	08011241 	.word	0x08011241
 80111b4:	08011241 	.word	0x08011241
 80111b8:	08011241 	.word	0x08011241
 80111bc:	08011241 	.word	0x08011241
 80111c0:	08011241 	.word	0x08011241
 80111c4:	08011241 	.word	0x08011241
 80111c8:	08011241 	.word	0x08011241
 80111cc:	08011241 	.word	0x08011241
 80111d0:	08011241 	.word	0x08011241
 80111d4:	08011241 	.word	0x08011241
 80111d8:	08011241 	.word	0x08011241
 80111dc:	08011241 	.word	0x08011241
 80111e0:	08011241 	.word	0x08011241
 80111e4:	08011241 	.word	0x08011241
 80111e8:	08011241 	.word	0x08011241
 80111ec:	08011241 	.word	0x08011241
 80111f0:	08011241 	.word	0x08011241
 80111f4:	08011241 	.word	0x08011241
 80111f8:	08011241 	.word	0x08011241
 80111fc:	08011241 	.word	0x08011241
 8011200:	08011241 	.word	0x08011241
 8011204:	08011241 	.word	0x08011241
 8011208:	08011241 	.word	0x08011241
 801120c:	08011241 	.word	0x08011241
 8011210:	08011241 	.word	0x08011241
 8011214:	08011241 	.word	0x08011241
 8011218:	08011241 	.word	0x08011241
 801121c:	08011241 	.word	0x08011241
 8011220:	08011241 	.word	0x08011241
 8011224:	08011241 	.word	0x08011241
 8011228:	08011241 	.word	0x08011241
 801122c:	08011241 	.word	0x08011241
 8011230:	08011241 	.word	0x08011241
 8011234:	08011241 	.word	0x08011241
 8011238:	08011241 	.word	0x08011241
 801123c:	08011241 	.word	0x08011241
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011240:	bf00      	nop
  }

  return (USBD_OK);
 8011242:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011244:	4618      	mov	r0, r3
 8011246:	370c      	adds	r7, #12
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr

08011250 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011250:	b580      	push	{r7, lr}
 8011252:	b084      	sub	sp, #16
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	MSGQ_obj msg;										//Local message object

  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);			//Default two lines of receive code.
 801125a:	6879      	ldr	r1, [r7, #4]
 801125c:	4813      	ldr	r0, [pc, #76]	; (80112ac <CDC_Receive_FS+0x5c>)
 801125e:	f7fa fe8d 	bl	800bf7c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011262:	4812      	ldr	r0, [pc, #72]	; (80112ac <CDC_Receive_FS+0x5c>)
 8011264:	f7fa fee8 	bl	800c038 <USBD_CDC_ReceivePacket>

  uint8_t len = (uint8_t) *Len;
 8011268:	683b      	ldr	r3, [r7, #0]
 801126a:	681b      	ldr	r3, [r3, #0]
 801126c:	73fb      	strb	r3, [r7, #15]

  if( USB_MSGQ_Rx != NULL )
 801126e:	4b10      	ldr	r3, [pc, #64]	; (80112b0 <CDC_Receive_FS+0x60>)
 8011270:	681b      	ldr	r3, [r3, #0]
 8011272:	2b00      	cmp	r3, #0
 8011274:	d015      	beq.n	80112a2 <CDC_Receive_FS+0x52>
  	{
	  	memset (msg.Buf, '\0', HiL_MSGQ_Buf_arr_len);	//Clear msg-obj
 8011276:	f107 0308 	add.w	r3, r7, #8
 801127a:	2204      	movs	r2, #4
 801127c:	2100      	movs	r1, #0
 801127e:	4618      	mov	r0, r3
 8011280:	f000 fd2a 	bl	8011cd8 <memset>
  		memcpy (msg.Buf, Buf, len);						//Copy usb buffer to msg-obj
 8011284:	7bfa      	ldrb	r2, [r7, #15]
 8011286:	f107 0308 	add.w	r3, r7, #8
 801128a:	6879      	ldr	r1, [r7, #4]
 801128c:	4618      	mov	r0, r3
 801128e:	f000 fd15 	bl	8011cbc <memcpy>
  		osMessageQueuePut(USB_MSGQ_Rx, &msg, 0U, 0U);	//Put object in queue, no timeout.
 8011292:	4b07      	ldr	r3, [pc, #28]	; (80112b0 <CDC_Receive_FS+0x60>)
 8011294:	6818      	ldr	r0, [r3, #0]
 8011296:	f107 0108 	add.w	r1, r7, #8
 801129a:	2300      	movs	r3, #0
 801129c:	2200      	movs	r2, #0
 801129e:	f7fc fd43 	bl	800dd28 <osMessageQueuePut>
  	}

  return (USBD_OK);
 80112a2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80112a4:	4618      	mov	r0, r3
 80112a6:	3710      	adds	r7, #16
 80112a8:	46bd      	mov	sp, r7
 80112aa:	bd80      	pop	{r7, pc}
 80112ac:	2000588c 	.word	0x2000588c
 80112b0:	20000788 	.word	0x20000788

080112b4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80112b4:	b580      	push	{r7, lr}
 80112b6:	b084      	sub	sp, #16
 80112b8:	af00      	add	r7, sp, #0
 80112ba:	6078      	str	r0, [r7, #4]
 80112bc:	460b      	mov	r3, r1
 80112be:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80112c0:	2300      	movs	r3, #0
 80112c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80112c4:	4b0d      	ldr	r3, [pc, #52]	; (80112fc <CDC_Transmit_FS+0x48>)
 80112c6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80112ca:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80112cc:	68bb      	ldr	r3, [r7, #8]
 80112ce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80112d2:	2b00      	cmp	r3, #0
 80112d4:	d001      	beq.n	80112da <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80112d6:	2301      	movs	r3, #1
 80112d8:	e00b      	b.n	80112f2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80112da:	887b      	ldrh	r3, [r7, #2]
 80112dc:	461a      	mov	r2, r3
 80112de:	6879      	ldr	r1, [r7, #4]
 80112e0:	4806      	ldr	r0, [pc, #24]	; (80112fc <CDC_Transmit_FS+0x48>)
 80112e2:	f7fa fe29 	bl	800bf38 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80112e6:	4805      	ldr	r0, [pc, #20]	; (80112fc <CDC_Transmit_FS+0x48>)
 80112e8:	f7fa fe66 	bl	800bfb8 <USBD_CDC_TransmitPacket>
 80112ec:	4603      	mov	r3, r0
 80112ee:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80112f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80112f2:	4618      	mov	r0, r3
 80112f4:	3710      	adds	r7, #16
 80112f6:	46bd      	mov	sp, r7
 80112f8:	bd80      	pop	{r7, pc}
 80112fa:	bf00      	nop
 80112fc:	2000588c 	.word	0x2000588c

08011300 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8011300:	b480      	push	{r7}
 8011302:	b087      	sub	sp, #28
 8011304:	af00      	add	r7, sp, #0
 8011306:	60f8      	str	r0, [r7, #12]
 8011308:	60b9      	str	r1, [r7, #8]
 801130a:	4613      	mov	r3, r2
 801130c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801130e:	2300      	movs	r3, #0
 8011310:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8011312:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011316:	4618      	mov	r0, r3
 8011318:	371c      	adds	r7, #28
 801131a:	46bd      	mov	sp, r7
 801131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011320:	4770      	bx	lr
	...

08011324 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011324:	b480      	push	{r7}
 8011326:	b083      	sub	sp, #12
 8011328:	af00      	add	r7, sp, #0
 801132a:	4603      	mov	r3, r0
 801132c:	6039      	str	r1, [r7, #0]
 801132e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8011330:	683b      	ldr	r3, [r7, #0]
 8011332:	2212      	movs	r2, #18
 8011334:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011336:	4b03      	ldr	r3, [pc, #12]	; (8011344 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011338:	4618      	mov	r0, r3
 801133a:	370c      	adds	r7, #12
 801133c:	46bd      	mov	sp, r7
 801133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011342:	4770      	bx	lr
 8011344:	20000154 	.word	0x20000154

08011348 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011348:	b480      	push	{r7}
 801134a:	b083      	sub	sp, #12
 801134c:	af00      	add	r7, sp, #0
 801134e:	4603      	mov	r3, r0
 8011350:	6039      	str	r1, [r7, #0]
 8011352:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011354:	683b      	ldr	r3, [r7, #0]
 8011356:	2204      	movs	r2, #4
 8011358:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 801135a:	4b03      	ldr	r3, [pc, #12]	; (8011368 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801135c:	4618      	mov	r0, r3
 801135e:	370c      	adds	r7, #12
 8011360:	46bd      	mov	sp, r7
 8011362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011366:	4770      	bx	lr
 8011368:	20000174 	.word	0x20000174

0801136c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b082      	sub	sp, #8
 8011370:	af00      	add	r7, sp, #0
 8011372:	4603      	mov	r3, r0
 8011374:	6039      	str	r1, [r7, #0]
 8011376:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011378:	79fb      	ldrb	r3, [r7, #7]
 801137a:	2b00      	cmp	r3, #0
 801137c:	d105      	bne.n	801138a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801137e:	683a      	ldr	r2, [r7, #0]
 8011380:	4907      	ldr	r1, [pc, #28]	; (80113a0 <USBD_FS_ProductStrDescriptor+0x34>)
 8011382:	4808      	ldr	r0, [pc, #32]	; (80113a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8011384:	f7fc f8ca 	bl	800d51c <USBD_GetString>
 8011388:	e004      	b.n	8011394 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801138a:	683a      	ldr	r2, [r7, #0]
 801138c:	4904      	ldr	r1, [pc, #16]	; (80113a0 <USBD_FS_ProductStrDescriptor+0x34>)
 801138e:	4805      	ldr	r0, [pc, #20]	; (80113a4 <USBD_FS_ProductStrDescriptor+0x38>)
 8011390:	f7fc f8c4 	bl	800d51c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011394:	4b02      	ldr	r3, [pc, #8]	; (80113a0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011396:	4618      	mov	r0, r3
 8011398:	3708      	adds	r7, #8
 801139a:	46bd      	mov	sp, r7
 801139c:	bd80      	pop	{r7, pc}
 801139e:	bf00      	nop
 80113a0:	20006b68 	.word	0x20006b68
 80113a4:	0801201c 	.word	0x0801201c

080113a8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113a8:	b580      	push	{r7, lr}
 80113aa:	b082      	sub	sp, #8
 80113ac:	af00      	add	r7, sp, #0
 80113ae:	4603      	mov	r3, r0
 80113b0:	6039      	str	r1, [r7, #0]
 80113b2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80113b4:	683a      	ldr	r2, [r7, #0]
 80113b6:	4904      	ldr	r1, [pc, #16]	; (80113c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80113b8:	4804      	ldr	r0, [pc, #16]	; (80113cc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80113ba:	f7fc f8af 	bl	800d51c <USBD_GetString>
  return USBD_StrDesc;
 80113be:	4b02      	ldr	r3, [pc, #8]	; (80113c8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80113c0:	4618      	mov	r0, r3
 80113c2:	3708      	adds	r7, #8
 80113c4:	46bd      	mov	sp, r7
 80113c6:	bd80      	pop	{r7, pc}
 80113c8:	20006b68 	.word	0x20006b68
 80113cc:	08012030 	.word	0x08012030

080113d0 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
 80113d6:	4603      	mov	r3, r0
 80113d8:	6039      	str	r1, [r7, #0]
 80113da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80113dc:	683b      	ldr	r3, [r7, #0]
 80113de:	221a      	movs	r2, #26
 80113e0:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80113e2:	f000 f855 	bl	8011490 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80113e6:	4b02      	ldr	r3, [pc, #8]	; (80113f0 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80113e8:	4618      	mov	r0, r3
 80113ea:	3708      	adds	r7, #8
 80113ec:	46bd      	mov	sp, r7
 80113ee:	bd80      	pop	{r7, pc}
 80113f0:	20000178 	.word	0x20000178

080113f4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113f4:	b580      	push	{r7, lr}
 80113f6:	b082      	sub	sp, #8
 80113f8:	af00      	add	r7, sp, #0
 80113fa:	4603      	mov	r3, r0
 80113fc:	6039      	str	r1, [r7, #0]
 80113fe:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8011400:	79fb      	ldrb	r3, [r7, #7]
 8011402:	2b00      	cmp	r3, #0
 8011404:	d105      	bne.n	8011412 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011406:	683a      	ldr	r2, [r7, #0]
 8011408:	4907      	ldr	r1, [pc, #28]	; (8011428 <USBD_FS_ConfigStrDescriptor+0x34>)
 801140a:	4808      	ldr	r0, [pc, #32]	; (801142c <USBD_FS_ConfigStrDescriptor+0x38>)
 801140c:	f7fc f886 	bl	800d51c <USBD_GetString>
 8011410:	e004      	b.n	801141c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011412:	683a      	ldr	r2, [r7, #0]
 8011414:	4904      	ldr	r1, [pc, #16]	; (8011428 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011416:	4805      	ldr	r0, [pc, #20]	; (801142c <USBD_FS_ConfigStrDescriptor+0x38>)
 8011418:	f7fc f880 	bl	800d51c <USBD_GetString>
  }
  return USBD_StrDesc;
 801141c:	4b02      	ldr	r3, [pc, #8]	; (8011428 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801141e:	4618      	mov	r0, r3
 8011420:	3708      	adds	r7, #8
 8011422:	46bd      	mov	sp, r7
 8011424:	bd80      	pop	{r7, pc}
 8011426:	bf00      	nop
 8011428:	20006b68 	.word	0x20006b68
 801142c:	08012044 	.word	0x08012044

08011430 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011430:	b580      	push	{r7, lr}
 8011432:	b082      	sub	sp, #8
 8011434:	af00      	add	r7, sp, #0
 8011436:	4603      	mov	r3, r0
 8011438:	6039      	str	r1, [r7, #0]
 801143a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801143c:	79fb      	ldrb	r3, [r7, #7]
 801143e:	2b00      	cmp	r3, #0
 8011440:	d105      	bne.n	801144e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8011442:	683a      	ldr	r2, [r7, #0]
 8011444:	4907      	ldr	r1, [pc, #28]	; (8011464 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011446:	4808      	ldr	r0, [pc, #32]	; (8011468 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011448:	f7fc f868 	bl	800d51c <USBD_GetString>
 801144c:	e004      	b.n	8011458 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801144e:	683a      	ldr	r2, [r7, #0]
 8011450:	4904      	ldr	r1, [pc, #16]	; (8011464 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011452:	4805      	ldr	r0, [pc, #20]	; (8011468 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011454:	f7fc f862 	bl	800d51c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011458:	4b02      	ldr	r3, [pc, #8]	; (8011464 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 801145a:	4618      	mov	r0, r3
 801145c:	3708      	adds	r7, #8
 801145e:	46bd      	mov	sp, r7
 8011460:	bd80      	pop	{r7, pc}
 8011462:	bf00      	nop
 8011464:	20006b68 	.word	0x20006b68
 8011468:	08012050 	.word	0x08012050

0801146c <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801146c:	b480      	push	{r7}
 801146e:	b083      	sub	sp, #12
 8011470:	af00      	add	r7, sp, #0
 8011472:	4603      	mov	r3, r0
 8011474:	6039      	str	r1, [r7, #0]
 8011476:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8011478:	683b      	ldr	r3, [r7, #0]
 801147a:	220c      	movs	r2, #12
 801147c:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 801147e:	4b03      	ldr	r3, [pc, #12]	; (801148c <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8011480:	4618      	mov	r0, r3
 8011482:	370c      	adds	r7, #12
 8011484:	46bd      	mov	sp, r7
 8011486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801148a:	4770      	bx	lr
 801148c:	20000168 	.word	0x20000168

08011490 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011490:	b580      	push	{r7, lr}
 8011492:	b084      	sub	sp, #16
 8011494:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011496:	4b0f      	ldr	r3, [pc, #60]	; (80114d4 <Get_SerialNum+0x44>)
 8011498:	681b      	ldr	r3, [r3, #0]
 801149a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801149c:	4b0e      	ldr	r3, [pc, #56]	; (80114d8 <Get_SerialNum+0x48>)
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80114a2:	4b0e      	ldr	r3, [pc, #56]	; (80114dc <Get_SerialNum+0x4c>)
 80114a4:	681b      	ldr	r3, [r3, #0]
 80114a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80114a8:	68fa      	ldr	r2, [r7, #12]
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	4413      	add	r3, r2
 80114ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d009      	beq.n	80114ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80114b6:	2208      	movs	r2, #8
 80114b8:	4909      	ldr	r1, [pc, #36]	; (80114e0 <Get_SerialNum+0x50>)
 80114ba:	68f8      	ldr	r0, [r7, #12]
 80114bc:	f000 f814 	bl	80114e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80114c0:	2204      	movs	r2, #4
 80114c2:	4908      	ldr	r1, [pc, #32]	; (80114e4 <Get_SerialNum+0x54>)
 80114c4:	68b8      	ldr	r0, [r7, #8]
 80114c6:	f000 f80f 	bl	80114e8 <IntToUnicode>
  }
}
 80114ca:	bf00      	nop
 80114cc:	3710      	adds	r7, #16
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}
 80114d2:	bf00      	nop
 80114d4:	1ff0f420 	.word	0x1ff0f420
 80114d8:	1ff0f424 	.word	0x1ff0f424
 80114dc:	1ff0f428 	.word	0x1ff0f428
 80114e0:	2000017a 	.word	0x2000017a
 80114e4:	2000018a 	.word	0x2000018a

080114e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80114e8:	b480      	push	{r7}
 80114ea:	b087      	sub	sp, #28
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	60f8      	str	r0, [r7, #12]
 80114f0:	60b9      	str	r1, [r7, #8]
 80114f2:	4613      	mov	r3, r2
 80114f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80114f6:	2300      	movs	r3, #0
 80114f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80114fa:	2300      	movs	r3, #0
 80114fc:	75fb      	strb	r3, [r7, #23]
 80114fe:	e027      	b.n	8011550 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	0f1b      	lsrs	r3, r3, #28
 8011504:	2b09      	cmp	r3, #9
 8011506:	d80b      	bhi.n	8011520 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	0f1b      	lsrs	r3, r3, #28
 801150c:	b2da      	uxtb	r2, r3
 801150e:	7dfb      	ldrb	r3, [r7, #23]
 8011510:	005b      	lsls	r3, r3, #1
 8011512:	4619      	mov	r1, r3
 8011514:	68bb      	ldr	r3, [r7, #8]
 8011516:	440b      	add	r3, r1
 8011518:	3230      	adds	r2, #48	; 0x30
 801151a:	b2d2      	uxtb	r2, r2
 801151c:	701a      	strb	r2, [r3, #0]
 801151e:	e00a      	b.n	8011536 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011520:	68fb      	ldr	r3, [r7, #12]
 8011522:	0f1b      	lsrs	r3, r3, #28
 8011524:	b2da      	uxtb	r2, r3
 8011526:	7dfb      	ldrb	r3, [r7, #23]
 8011528:	005b      	lsls	r3, r3, #1
 801152a:	4619      	mov	r1, r3
 801152c:	68bb      	ldr	r3, [r7, #8]
 801152e:	440b      	add	r3, r1
 8011530:	3237      	adds	r2, #55	; 0x37
 8011532:	b2d2      	uxtb	r2, r2
 8011534:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	011b      	lsls	r3, r3, #4
 801153a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 801153c:	7dfb      	ldrb	r3, [r7, #23]
 801153e:	005b      	lsls	r3, r3, #1
 8011540:	3301      	adds	r3, #1
 8011542:	68ba      	ldr	r2, [r7, #8]
 8011544:	4413      	add	r3, r2
 8011546:	2200      	movs	r2, #0
 8011548:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 801154a:	7dfb      	ldrb	r3, [r7, #23]
 801154c:	3301      	adds	r3, #1
 801154e:	75fb      	strb	r3, [r7, #23]
 8011550:	7dfa      	ldrb	r2, [r7, #23]
 8011552:	79fb      	ldrb	r3, [r7, #7]
 8011554:	429a      	cmp	r2, r3
 8011556:	d3d3      	bcc.n	8011500 <IntToUnicode+0x18>
  }
}
 8011558:	bf00      	nop
 801155a:	bf00      	nop
 801155c:	371c      	adds	r7, #28
 801155e:	46bd      	mov	sp, r7
 8011560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011564:	4770      	bx	lr
	...

08011568 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011568:	b580      	push	{r7, lr}
 801156a:	b0ae      	sub	sp, #184	; 0xb8
 801156c:	af00      	add	r7, sp, #0
 801156e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011570:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8011574:	2200      	movs	r2, #0
 8011576:	601a      	str	r2, [r3, #0]
 8011578:	605a      	str	r2, [r3, #4]
 801157a:	609a      	str	r2, [r3, #8]
 801157c:	60da      	str	r2, [r3, #12]
 801157e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011580:	f107 0314 	add.w	r3, r7, #20
 8011584:	2290      	movs	r2, #144	; 0x90
 8011586:	2100      	movs	r1, #0
 8011588:	4618      	mov	r0, r3
 801158a:	f000 fba5 	bl	8011cd8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	681b      	ldr	r3, [r3, #0]
 8011592:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011596:	d151      	bne.n	801163c <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8011598:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 801159c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 801159e:	2300      	movs	r3, #0
 80115a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80115a4:	f107 0314 	add.w	r3, r7, #20
 80115a8:	4618      	mov	r0, r3
 80115aa:	f7f4 f839 	bl	8005620 <HAL_RCCEx_PeriphCLKConfig>
 80115ae:	4603      	mov	r3, r0
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d001      	beq.n	80115b8 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80115b4:	f7ef fd60 	bl	8001078 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80115b8:	4b22      	ldr	r3, [pc, #136]	; (8011644 <HAL_PCD_MspInit+0xdc>)
 80115ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115bc:	4a21      	ldr	r2, [pc, #132]	; (8011644 <HAL_PCD_MspInit+0xdc>)
 80115be:	f043 0301 	orr.w	r3, r3, #1
 80115c2:	6313      	str	r3, [r2, #48]	; 0x30
 80115c4:	4b1f      	ldr	r3, [pc, #124]	; (8011644 <HAL_PCD_MspInit+0xdc>)
 80115c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115c8:	f003 0301 	and.w	r3, r3, #1
 80115cc:	613b      	str	r3, [r7, #16]
 80115ce:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80115d0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80115d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80115d8:	2302      	movs	r3, #2
 80115da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80115de:	2300      	movs	r3, #0
 80115e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80115e4:	2303      	movs	r3, #3
 80115e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80115ea:	230a      	movs	r3, #10
 80115ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80115f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80115f4:	4619      	mov	r1, r3
 80115f6:	4814      	ldr	r0, [pc, #80]	; (8011648 <HAL_PCD_MspInit+0xe0>)
 80115f8:	f7f1 fce6 	bl	8002fc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80115fc:	4b11      	ldr	r3, [pc, #68]	; (8011644 <HAL_PCD_MspInit+0xdc>)
 80115fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011600:	4a10      	ldr	r2, [pc, #64]	; (8011644 <HAL_PCD_MspInit+0xdc>)
 8011602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011606:	6353      	str	r3, [r2, #52]	; 0x34
 8011608:	4b0e      	ldr	r3, [pc, #56]	; (8011644 <HAL_PCD_MspInit+0xdc>)
 801160a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801160c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011610:	60fb      	str	r3, [r7, #12]
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	4b0b      	ldr	r3, [pc, #44]	; (8011644 <HAL_PCD_MspInit+0xdc>)
 8011616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011618:	4a0a      	ldr	r2, [pc, #40]	; (8011644 <HAL_PCD_MspInit+0xdc>)
 801161a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801161e:	6453      	str	r3, [r2, #68]	; 0x44
 8011620:	4b08      	ldr	r3, [pc, #32]	; (8011644 <HAL_PCD_MspInit+0xdc>)
 8011622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011624:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011628:	60bb      	str	r3, [r7, #8]
 801162a:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 5, 0);
 801162c:	2200      	movs	r2, #0
 801162e:	2105      	movs	r1, #5
 8011630:	2043      	movs	r0, #67	; 0x43
 8011632:	f7f0 fc19 	bl	8001e68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011636:	2043      	movs	r0, #67	; 0x43
 8011638:	f7f0 fc32 	bl	8001ea0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 801163c:	bf00      	nop
 801163e:	37b8      	adds	r7, #184	; 0xb8
 8011640:	46bd      	mov	sp, r7
 8011642:	bd80      	pop	{r7, pc}
 8011644:	40023800 	.word	0x40023800
 8011648:	40020000 	.word	0x40020000

0801164c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b082      	sub	sp, #8
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011660:	4619      	mov	r1, r3
 8011662:	4610      	mov	r0, r2
 8011664:	f7fa fdd1 	bl	800c20a <USBD_LL_SetupStage>
}
 8011668:	bf00      	nop
 801166a:	3708      	adds	r7, #8
 801166c:	46bd      	mov	sp, r7
 801166e:	bd80      	pop	{r7, pc}

08011670 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b082      	sub	sp, #8
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
 8011678:	460b      	mov	r3, r1
 801167a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8011682:	78fa      	ldrb	r2, [r7, #3]
 8011684:	6879      	ldr	r1, [r7, #4]
 8011686:	4613      	mov	r3, r2
 8011688:	00db      	lsls	r3, r3, #3
 801168a:	4413      	add	r3, r2
 801168c:	009b      	lsls	r3, r3, #2
 801168e:	440b      	add	r3, r1
 8011690:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011694:	681a      	ldr	r2, [r3, #0]
 8011696:	78fb      	ldrb	r3, [r7, #3]
 8011698:	4619      	mov	r1, r3
 801169a:	f7fa fe0b 	bl	800c2b4 <USBD_LL_DataOutStage>
}
 801169e:	bf00      	nop
 80116a0:	3708      	adds	r7, #8
 80116a2:	46bd      	mov	sp, r7
 80116a4:	bd80      	pop	{r7, pc}

080116a6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116a6:	b580      	push	{r7, lr}
 80116a8:	b082      	sub	sp, #8
 80116aa:	af00      	add	r7, sp, #0
 80116ac:	6078      	str	r0, [r7, #4]
 80116ae:	460b      	mov	r3, r1
 80116b0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80116b8:	78fa      	ldrb	r2, [r7, #3]
 80116ba:	6879      	ldr	r1, [r7, #4]
 80116bc:	4613      	mov	r3, r2
 80116be:	00db      	lsls	r3, r3, #3
 80116c0:	4413      	add	r3, r2
 80116c2:	009b      	lsls	r3, r3, #2
 80116c4:	440b      	add	r3, r1
 80116c6:	334c      	adds	r3, #76	; 0x4c
 80116c8:	681a      	ldr	r2, [r3, #0]
 80116ca:	78fb      	ldrb	r3, [r7, #3]
 80116cc:	4619      	mov	r1, r3
 80116ce:	f7fa fea4 	bl	800c41a <USBD_LL_DataInStage>
}
 80116d2:	bf00      	nop
 80116d4:	3708      	adds	r7, #8
 80116d6:	46bd      	mov	sp, r7
 80116d8:	bd80      	pop	{r7, pc}

080116da <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116da:	b580      	push	{r7, lr}
 80116dc:	b082      	sub	sp, #8
 80116de:	af00      	add	r7, sp, #0
 80116e0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80116e2:	687b      	ldr	r3, [r7, #4]
 80116e4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80116e8:	4618      	mov	r0, r3
 80116ea:	f7fa ffd8 	bl	800c69e <USBD_LL_SOF>
}
 80116ee:	bf00      	nop
 80116f0:	3708      	adds	r7, #8
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}

080116f6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116f6:	b580      	push	{r7, lr}
 80116f8:	b084      	sub	sp, #16
 80116fa:	af00      	add	r7, sp, #0
 80116fc:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80116fe:	2301      	movs	r3, #1
 8011700:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	68db      	ldr	r3, [r3, #12]
 8011706:	2b00      	cmp	r3, #0
 8011708:	d102      	bne.n	8011710 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801170a:	2300      	movs	r3, #0
 801170c:	73fb      	strb	r3, [r7, #15]
 801170e:	e008      	b.n	8011722 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011710:	687b      	ldr	r3, [r7, #4]
 8011712:	68db      	ldr	r3, [r3, #12]
 8011714:	2b02      	cmp	r3, #2
 8011716:	d102      	bne.n	801171e <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011718:	2301      	movs	r3, #1
 801171a:	73fb      	strb	r3, [r7, #15]
 801171c:	e001      	b.n	8011722 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 801171e:	f7ef fcab 	bl	8001078 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011722:	687b      	ldr	r3, [r7, #4]
 8011724:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011728:	7bfa      	ldrb	r2, [r7, #15]
 801172a:	4611      	mov	r1, r2
 801172c:	4618      	mov	r0, r3
 801172e:	f7fa ff78 	bl	800c622 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011738:	4618      	mov	r0, r3
 801173a:	f7fa ff20 	bl	800c57e <USBD_LL_Reset>
}
 801173e:	bf00      	nop
 8011740:	3710      	adds	r7, #16
 8011742:	46bd      	mov	sp, r7
 8011744:	bd80      	pop	{r7, pc}
	...

08011748 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b082      	sub	sp, #8
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011756:	4618      	mov	r0, r3
 8011758:	f7fa ff73 	bl	800c642 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801175c:	687b      	ldr	r3, [r7, #4]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011764:	681b      	ldr	r3, [r3, #0]
 8011766:	687a      	ldr	r2, [r7, #4]
 8011768:	6812      	ldr	r2, [r2, #0]
 801176a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801176e:	f043 0301 	orr.w	r3, r3, #1
 8011772:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011774:	687b      	ldr	r3, [r7, #4]
 8011776:	6a1b      	ldr	r3, [r3, #32]
 8011778:	2b00      	cmp	r3, #0
 801177a:	d005      	beq.n	8011788 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801177c:	4b04      	ldr	r3, [pc, #16]	; (8011790 <HAL_PCD_SuspendCallback+0x48>)
 801177e:	691b      	ldr	r3, [r3, #16]
 8011780:	4a03      	ldr	r2, [pc, #12]	; (8011790 <HAL_PCD_SuspendCallback+0x48>)
 8011782:	f043 0306 	orr.w	r3, r3, #6
 8011786:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011788:	bf00      	nop
 801178a:	3708      	adds	r7, #8
 801178c:	46bd      	mov	sp, r7
 801178e:	bd80      	pop	{r7, pc}
 8011790:	e000ed00 	.word	0xe000ed00

08011794 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011794:	b580      	push	{r7, lr}
 8011796:	b082      	sub	sp, #8
 8011798:	af00      	add	r7, sp, #0
 801179a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80117a2:	4618      	mov	r0, r3
 80117a4:	f7fa ff63 	bl	800c66e <USBD_LL_Resume>
}
 80117a8:	bf00      	nop
 80117aa:	3708      	adds	r7, #8
 80117ac:	46bd      	mov	sp, r7
 80117ae:	bd80      	pop	{r7, pc}

080117b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117b0:	b580      	push	{r7, lr}
 80117b2:	b082      	sub	sp, #8
 80117b4:	af00      	add	r7, sp, #0
 80117b6:	6078      	str	r0, [r7, #4]
 80117b8:	460b      	mov	r3, r1
 80117ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80117c2:	78fa      	ldrb	r2, [r7, #3]
 80117c4:	4611      	mov	r1, r2
 80117c6:	4618      	mov	r0, r3
 80117c8:	f7fa ffbb 	bl	800c742 <USBD_LL_IsoOUTIncomplete>
}
 80117cc:	bf00      	nop
 80117ce:	3708      	adds	r7, #8
 80117d0:	46bd      	mov	sp, r7
 80117d2:	bd80      	pop	{r7, pc}

080117d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117d4:	b580      	push	{r7, lr}
 80117d6:	b082      	sub	sp, #8
 80117d8:	af00      	add	r7, sp, #0
 80117da:	6078      	str	r0, [r7, #4]
 80117dc:	460b      	mov	r3, r1
 80117de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80117e0:	687b      	ldr	r3, [r7, #4]
 80117e2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80117e6:	78fa      	ldrb	r2, [r7, #3]
 80117e8:	4611      	mov	r1, r2
 80117ea:	4618      	mov	r0, r3
 80117ec:	f7fa ff77 	bl	800c6de <USBD_LL_IsoINIncomplete>
}
 80117f0:	bf00      	nop
 80117f2:	3708      	adds	r7, #8
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}

080117f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b082      	sub	sp, #8
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011800:	687b      	ldr	r3, [r7, #4]
 8011802:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011806:	4618      	mov	r0, r3
 8011808:	f7fa ffcd 	bl	800c7a6 <USBD_LL_DevConnected>
}
 801180c:	bf00      	nop
 801180e:	3708      	adds	r7, #8
 8011810:	46bd      	mov	sp, r7
 8011812:	bd80      	pop	{r7, pc}

08011814 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011814:	b580      	push	{r7, lr}
 8011816:	b082      	sub	sp, #8
 8011818:	af00      	add	r7, sp, #0
 801181a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011822:	4618      	mov	r0, r3
 8011824:	f7fa ffca 	bl	800c7bc <USBD_LL_DevDisconnected>
}
 8011828:	bf00      	nop
 801182a:	3708      	adds	r7, #8
 801182c:	46bd      	mov	sp, r7
 801182e:	bd80      	pop	{r7, pc}

08011830 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011830:	b580      	push	{r7, lr}
 8011832:	b082      	sub	sp, #8
 8011834:	af00      	add	r7, sp, #0
 8011836:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8011838:	687b      	ldr	r3, [r7, #4]
 801183a:	781b      	ldrb	r3, [r3, #0]
 801183c:	2b00      	cmp	r3, #0
 801183e:	d13c      	bne.n	80118ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8011840:	4a20      	ldr	r2, [pc, #128]	; (80118c4 <USBD_LL_Init+0x94>)
 8011842:	687b      	ldr	r3, [r7, #4]
 8011844:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_FS;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	4a1e      	ldr	r2, [pc, #120]	; (80118c4 <USBD_LL_Init+0x94>)
 801184c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011850:	4b1c      	ldr	r3, [pc, #112]	; (80118c4 <USBD_LL_Init+0x94>)
 8011852:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011856:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8011858:	4b1a      	ldr	r3, [pc, #104]	; (80118c4 <USBD_LL_Init+0x94>)
 801185a:	2206      	movs	r2, #6
 801185c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 801185e:	4b19      	ldr	r3, [pc, #100]	; (80118c4 <USBD_LL_Init+0x94>)
 8011860:	2202      	movs	r2, #2
 8011862:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011864:	4b17      	ldr	r3, [pc, #92]	; (80118c4 <USBD_LL_Init+0x94>)
 8011866:	2200      	movs	r2, #0
 8011868:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801186a:	4b16      	ldr	r3, [pc, #88]	; (80118c4 <USBD_LL_Init+0x94>)
 801186c:	2202      	movs	r2, #2
 801186e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011870:	4b14      	ldr	r3, [pc, #80]	; (80118c4 <USBD_LL_Init+0x94>)
 8011872:	2200      	movs	r2, #0
 8011874:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8011876:	4b13      	ldr	r3, [pc, #76]	; (80118c4 <USBD_LL_Init+0x94>)
 8011878:	2200      	movs	r2, #0
 801187a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 801187c:	4b11      	ldr	r3, [pc, #68]	; (80118c4 <USBD_LL_Init+0x94>)
 801187e:	2200      	movs	r2, #0
 8011880:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8011882:	4b10      	ldr	r3, [pc, #64]	; (80118c4 <USBD_LL_Init+0x94>)
 8011884:	2200      	movs	r2, #0
 8011886:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8011888:	4b0e      	ldr	r3, [pc, #56]	; (80118c4 <USBD_LL_Init+0x94>)
 801188a:	2200      	movs	r2, #0
 801188c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 801188e:	480d      	ldr	r0, [pc, #52]	; (80118c4 <USBD_LL_Init+0x94>)
 8011890:	f7f1 feb7 	bl	8003602 <HAL_PCD_Init>
 8011894:	4603      	mov	r3, r0
 8011896:	2b00      	cmp	r3, #0
 8011898:	d001      	beq.n	801189e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 801189a:	f7ef fbed 	bl	8001078 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 801189e:	2180      	movs	r1, #128	; 0x80
 80118a0:	4808      	ldr	r0, [pc, #32]	; (80118c4 <USBD_LL_Init+0x94>)
 80118a2:	f7f3 f932 	bl	8004b0a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80118a6:	2240      	movs	r2, #64	; 0x40
 80118a8:	2100      	movs	r1, #0
 80118aa:	4806      	ldr	r0, [pc, #24]	; (80118c4 <USBD_LL_Init+0x94>)
 80118ac:	f7f3 f8e6 	bl	8004a7c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80118b0:	2280      	movs	r2, #128	; 0x80
 80118b2:	2101      	movs	r1, #1
 80118b4:	4803      	ldr	r0, [pc, #12]	; (80118c4 <USBD_LL_Init+0x94>)
 80118b6:	f7f3 f8e1 	bl	8004a7c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80118ba:	2300      	movs	r3, #0
}
 80118bc:	4618      	mov	r0, r3
 80118be:	3708      	adds	r7, #8
 80118c0:	46bd      	mov	sp, r7
 80118c2:	bd80      	pop	{r7, pc}
 80118c4:	20006d68 	.word	0x20006d68

080118c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80118c8:	b580      	push	{r7, lr}
 80118ca:	b084      	sub	sp, #16
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118d0:	2300      	movs	r3, #0
 80118d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118d4:	2300      	movs	r3, #0
 80118d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80118de:	4618      	mov	r0, r3
 80118e0:	f7f1 ffb3 	bl	800384a <HAL_PCD_Start>
 80118e4:	4603      	mov	r3, r0
 80118e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118e8:	7bfb      	ldrb	r3, [r7, #15]
 80118ea:	4618      	mov	r0, r3
 80118ec:	f000 f97e 	bl	8011bec <USBD_Get_USB_Status>
 80118f0:	4603      	mov	r3, r0
 80118f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80118f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80118f6:	4618      	mov	r0, r3
 80118f8:	3710      	adds	r7, #16
 80118fa:	46bd      	mov	sp, r7
 80118fc:	bd80      	pop	{r7, pc}

080118fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80118fe:	b580      	push	{r7, lr}
 8011900:	b084      	sub	sp, #16
 8011902:	af00      	add	r7, sp, #0
 8011904:	6078      	str	r0, [r7, #4]
 8011906:	4608      	mov	r0, r1
 8011908:	4611      	mov	r1, r2
 801190a:	461a      	mov	r2, r3
 801190c:	4603      	mov	r3, r0
 801190e:	70fb      	strb	r3, [r7, #3]
 8011910:	460b      	mov	r3, r1
 8011912:	70bb      	strb	r3, [r7, #2]
 8011914:	4613      	mov	r3, r2
 8011916:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011918:	2300      	movs	r3, #0
 801191a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801191c:	2300      	movs	r3, #0
 801191e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011926:	78bb      	ldrb	r3, [r7, #2]
 8011928:	883a      	ldrh	r2, [r7, #0]
 801192a:	78f9      	ldrb	r1, [r7, #3]
 801192c:	f7f2 fca0 	bl	8004270 <HAL_PCD_EP_Open>
 8011930:	4603      	mov	r3, r0
 8011932:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011934:	7bfb      	ldrb	r3, [r7, #15]
 8011936:	4618      	mov	r0, r3
 8011938:	f000 f958 	bl	8011bec <USBD_Get_USB_Status>
 801193c:	4603      	mov	r3, r0
 801193e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011940:	7bbb      	ldrb	r3, [r7, #14]
}
 8011942:	4618      	mov	r0, r3
 8011944:	3710      	adds	r7, #16
 8011946:	46bd      	mov	sp, r7
 8011948:	bd80      	pop	{r7, pc}

0801194a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801194a:	b580      	push	{r7, lr}
 801194c:	b084      	sub	sp, #16
 801194e:	af00      	add	r7, sp, #0
 8011950:	6078      	str	r0, [r7, #4]
 8011952:	460b      	mov	r3, r1
 8011954:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011956:	2300      	movs	r3, #0
 8011958:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801195a:	2300      	movs	r3, #0
 801195c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011964:	78fa      	ldrb	r2, [r7, #3]
 8011966:	4611      	mov	r1, r2
 8011968:	4618      	mov	r0, r3
 801196a:	f7f2 fce9 	bl	8004340 <HAL_PCD_EP_Close>
 801196e:	4603      	mov	r3, r0
 8011970:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011972:	7bfb      	ldrb	r3, [r7, #15]
 8011974:	4618      	mov	r0, r3
 8011976:	f000 f939 	bl	8011bec <USBD_Get_USB_Status>
 801197a:	4603      	mov	r3, r0
 801197c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801197e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011980:	4618      	mov	r0, r3
 8011982:	3710      	adds	r7, #16
 8011984:	46bd      	mov	sp, r7
 8011986:	bd80      	pop	{r7, pc}

08011988 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011988:	b580      	push	{r7, lr}
 801198a:	b084      	sub	sp, #16
 801198c:	af00      	add	r7, sp, #0
 801198e:	6078      	str	r0, [r7, #4]
 8011990:	460b      	mov	r3, r1
 8011992:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011994:	2300      	movs	r3, #0
 8011996:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011998:	2300      	movs	r3, #0
 801199a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80119a2:	78fa      	ldrb	r2, [r7, #3]
 80119a4:	4611      	mov	r1, r2
 80119a6:	4618      	mov	r0, r3
 80119a8:	f7f2 fdc1 	bl	800452e <HAL_PCD_EP_SetStall>
 80119ac:	4603      	mov	r3, r0
 80119ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119b0:	7bfb      	ldrb	r3, [r7, #15]
 80119b2:	4618      	mov	r0, r3
 80119b4:	f000 f91a 	bl	8011bec <USBD_Get_USB_Status>
 80119b8:	4603      	mov	r3, r0
 80119ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80119be:	4618      	mov	r0, r3
 80119c0:	3710      	adds	r7, #16
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}

080119c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80119c6:	b580      	push	{r7, lr}
 80119c8:	b084      	sub	sp, #16
 80119ca:	af00      	add	r7, sp, #0
 80119cc:	6078      	str	r0, [r7, #4]
 80119ce:	460b      	mov	r3, r1
 80119d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119d2:	2300      	movs	r3, #0
 80119d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119d6:	2300      	movs	r3, #0
 80119d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80119da:	687b      	ldr	r3, [r7, #4]
 80119dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80119e0:	78fa      	ldrb	r2, [r7, #3]
 80119e2:	4611      	mov	r1, r2
 80119e4:	4618      	mov	r0, r3
 80119e6:	f7f2 fe06 	bl	80045f6 <HAL_PCD_EP_ClrStall>
 80119ea:	4603      	mov	r3, r0
 80119ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119ee:	7bfb      	ldrb	r3, [r7, #15]
 80119f0:	4618      	mov	r0, r3
 80119f2:	f000 f8fb 	bl	8011bec <USBD_Get_USB_Status>
 80119f6:	4603      	mov	r3, r0
 80119f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80119fc:	4618      	mov	r0, r3
 80119fe:	3710      	adds	r7, #16
 8011a00:	46bd      	mov	sp, r7
 8011a02:	bd80      	pop	{r7, pc}

08011a04 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011a04:	b480      	push	{r7}
 8011a06:	b085      	sub	sp, #20
 8011a08:	af00      	add	r7, sp, #0
 8011a0a:	6078      	str	r0, [r7, #4]
 8011a0c:	460b      	mov	r3, r1
 8011a0e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011a10:	687b      	ldr	r3, [r7, #4]
 8011a12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011a16:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011a18:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	da0b      	bge.n	8011a38 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011a20:	78fb      	ldrb	r3, [r7, #3]
 8011a22:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a26:	68f9      	ldr	r1, [r7, #12]
 8011a28:	4613      	mov	r3, r2
 8011a2a:	00db      	lsls	r3, r3, #3
 8011a2c:	4413      	add	r3, r2
 8011a2e:	009b      	lsls	r3, r3, #2
 8011a30:	440b      	add	r3, r1
 8011a32:	333e      	adds	r3, #62	; 0x3e
 8011a34:	781b      	ldrb	r3, [r3, #0]
 8011a36:	e00b      	b.n	8011a50 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011a38:	78fb      	ldrb	r3, [r7, #3]
 8011a3a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a3e:	68f9      	ldr	r1, [r7, #12]
 8011a40:	4613      	mov	r3, r2
 8011a42:	00db      	lsls	r3, r3, #3
 8011a44:	4413      	add	r3, r2
 8011a46:	009b      	lsls	r3, r3, #2
 8011a48:	440b      	add	r3, r1
 8011a4a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011a4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011a50:	4618      	mov	r0, r3
 8011a52:	3714      	adds	r7, #20
 8011a54:	46bd      	mov	sp, r7
 8011a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a5a:	4770      	bx	lr

08011a5c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011a5c:	b580      	push	{r7, lr}
 8011a5e:	b084      	sub	sp, #16
 8011a60:	af00      	add	r7, sp, #0
 8011a62:	6078      	str	r0, [r7, #4]
 8011a64:	460b      	mov	r3, r1
 8011a66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a68:	2300      	movs	r3, #0
 8011a6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011a76:	78fa      	ldrb	r2, [r7, #3]
 8011a78:	4611      	mov	r1, r2
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	f7f2 fbd3 	bl	8004226 <HAL_PCD_SetAddress>
 8011a80:	4603      	mov	r3, r0
 8011a82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a84:	7bfb      	ldrb	r3, [r7, #15]
 8011a86:	4618      	mov	r0, r3
 8011a88:	f000 f8b0 	bl	8011bec <USBD_Get_USB_Status>
 8011a8c:	4603      	mov	r3, r0
 8011a8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a90:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3710      	adds	r7, #16
 8011a96:	46bd      	mov	sp, r7
 8011a98:	bd80      	pop	{r7, pc}

08011a9a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011a9a:	b580      	push	{r7, lr}
 8011a9c:	b086      	sub	sp, #24
 8011a9e:	af00      	add	r7, sp, #0
 8011aa0:	60f8      	str	r0, [r7, #12]
 8011aa2:	607a      	str	r2, [r7, #4]
 8011aa4:	603b      	str	r3, [r7, #0]
 8011aa6:	460b      	mov	r3, r1
 8011aa8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011ab2:	68fb      	ldr	r3, [r7, #12]
 8011ab4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011ab8:	7af9      	ldrb	r1, [r7, #11]
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	687a      	ldr	r2, [r7, #4]
 8011abe:	f7f2 fcec 	bl	800449a <HAL_PCD_EP_Transmit>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ac6:	7dfb      	ldrb	r3, [r7, #23]
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f000 f88f 	bl	8011bec <USBD_Get_USB_Status>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011ad2:	7dbb      	ldrb	r3, [r7, #22]
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	3718      	adds	r7, #24
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}

08011adc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011adc:	b580      	push	{r7, lr}
 8011ade:	b086      	sub	sp, #24
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	60f8      	str	r0, [r7, #12]
 8011ae4:	607a      	str	r2, [r7, #4]
 8011ae6:	603b      	str	r3, [r7, #0]
 8011ae8:	460b      	mov	r3, r1
 8011aea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011aec:	2300      	movs	r3, #0
 8011aee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011af0:	2300      	movs	r3, #0
 8011af2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011af4:	68fb      	ldr	r3, [r7, #12]
 8011af6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011afa:	7af9      	ldrb	r1, [r7, #11]
 8011afc:	683b      	ldr	r3, [r7, #0]
 8011afe:	687a      	ldr	r2, [r7, #4]
 8011b00:	f7f2 fc68 	bl	80043d4 <HAL_PCD_EP_Receive>
 8011b04:	4603      	mov	r3, r0
 8011b06:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b08:	7dfb      	ldrb	r3, [r7, #23]
 8011b0a:	4618      	mov	r0, r3
 8011b0c:	f000 f86e 	bl	8011bec <USBD_Get_USB_Status>
 8011b10:	4603      	mov	r3, r0
 8011b12:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011b14:	7dbb      	ldrb	r3, [r7, #22]
}
 8011b16:	4618      	mov	r0, r3
 8011b18:	3718      	adds	r7, #24
 8011b1a:	46bd      	mov	sp, r7
 8011b1c:	bd80      	pop	{r7, pc}

08011b1e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b1e:	b580      	push	{r7, lr}
 8011b20:	b082      	sub	sp, #8
 8011b22:	af00      	add	r7, sp, #0
 8011b24:	6078      	str	r0, [r7, #4]
 8011b26:	460b      	mov	r3, r1
 8011b28:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011b30:	78fa      	ldrb	r2, [r7, #3]
 8011b32:	4611      	mov	r1, r2
 8011b34:	4618      	mov	r0, r3
 8011b36:	f7f2 fc98 	bl	800446a <HAL_PCD_EP_GetRxCount>
 8011b3a:	4603      	mov	r3, r0
}
 8011b3c:	4618      	mov	r0, r3
 8011b3e:	3708      	adds	r7, #8
 8011b40:	46bd      	mov	sp, r7
 8011b42:	bd80      	pop	{r7, pc}

08011b44 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011b44:	b580      	push	{r7, lr}
 8011b46:	b082      	sub	sp, #8
 8011b48:	af00      	add	r7, sp, #0
 8011b4a:	6078      	str	r0, [r7, #4]
 8011b4c:	460b      	mov	r3, r1
 8011b4e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011b50:	78fb      	ldrb	r3, [r7, #3]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d002      	beq.n	8011b5c <HAL_PCDEx_LPM_Callback+0x18>
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	d01f      	beq.n	8011b9a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011b5a:	e03b      	b.n	8011bd4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011b5c:	687b      	ldr	r3, [r7, #4]
 8011b5e:	6a1b      	ldr	r3, [r3, #32]
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d007      	beq.n	8011b74 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011b64:	f000 f83c 	bl	8011be0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011b68:	4b1c      	ldr	r3, [pc, #112]	; (8011bdc <HAL_PCDEx_LPM_Callback+0x98>)
 8011b6a:	691b      	ldr	r3, [r3, #16]
 8011b6c:	4a1b      	ldr	r2, [pc, #108]	; (8011bdc <HAL_PCDEx_LPM_Callback+0x98>)
 8011b6e:	f023 0306 	bic.w	r3, r3, #6
 8011b72:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011b74:	687b      	ldr	r3, [r7, #4]
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011b7c:	681b      	ldr	r3, [r3, #0]
 8011b7e:	687a      	ldr	r2, [r7, #4]
 8011b80:	6812      	ldr	r2, [r2, #0]
 8011b82:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011b86:	f023 0301 	bic.w	r3, r3, #1
 8011b8a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011b92:	4618      	mov	r0, r3
 8011b94:	f7fa fd6b 	bl	800c66e <USBD_LL_Resume>
    break;
 8011b98:	e01c      	b.n	8011bd4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011b9a:	687b      	ldr	r3, [r7, #4]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011ba2:	681b      	ldr	r3, [r3, #0]
 8011ba4:	687a      	ldr	r2, [r7, #4]
 8011ba6:	6812      	ldr	r2, [r2, #0]
 8011ba8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011bac:	f043 0301 	orr.w	r3, r3, #1
 8011bb0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011bb8:	4618      	mov	r0, r3
 8011bba:	f7fa fd42 	bl	800c642 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6a1b      	ldr	r3, [r3, #32]
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d005      	beq.n	8011bd2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011bc6:	4b05      	ldr	r3, [pc, #20]	; (8011bdc <HAL_PCDEx_LPM_Callback+0x98>)
 8011bc8:	691b      	ldr	r3, [r3, #16]
 8011bca:	4a04      	ldr	r2, [pc, #16]	; (8011bdc <HAL_PCDEx_LPM_Callback+0x98>)
 8011bcc:	f043 0306 	orr.w	r3, r3, #6
 8011bd0:	6113      	str	r3, [r2, #16]
    break;
 8011bd2:	bf00      	nop
}
 8011bd4:	bf00      	nop
 8011bd6:	3708      	adds	r7, #8
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd80      	pop	{r7, pc}
 8011bdc:	e000ed00 	.word	0xe000ed00

08011be0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011be0:	b580      	push	{r7, lr}
 8011be2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011be4:	f7ee fd8a 	bl	80006fc <SystemClock_Config>
}
 8011be8:	bf00      	nop
 8011bea:	bd80      	pop	{r7, pc}

08011bec <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011bec:	b480      	push	{r7}
 8011bee:	b085      	sub	sp, #20
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	4603      	mov	r3, r0
 8011bf4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011bfa:	79fb      	ldrb	r3, [r7, #7]
 8011bfc:	2b03      	cmp	r3, #3
 8011bfe:	d817      	bhi.n	8011c30 <USBD_Get_USB_Status+0x44>
 8011c00:	a201      	add	r2, pc, #4	; (adr r2, 8011c08 <USBD_Get_USB_Status+0x1c>)
 8011c02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c06:	bf00      	nop
 8011c08:	08011c19 	.word	0x08011c19
 8011c0c:	08011c1f 	.word	0x08011c1f
 8011c10:	08011c25 	.word	0x08011c25
 8011c14:	08011c2b 	.word	0x08011c2b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011c18:	2300      	movs	r3, #0
 8011c1a:	73fb      	strb	r3, [r7, #15]
    break;
 8011c1c:	e00b      	b.n	8011c36 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011c1e:	2303      	movs	r3, #3
 8011c20:	73fb      	strb	r3, [r7, #15]
    break;
 8011c22:	e008      	b.n	8011c36 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011c24:	2301      	movs	r3, #1
 8011c26:	73fb      	strb	r3, [r7, #15]
    break;
 8011c28:	e005      	b.n	8011c36 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011c2a:	2303      	movs	r3, #3
 8011c2c:	73fb      	strb	r3, [r7, #15]
    break;
 8011c2e:	e002      	b.n	8011c36 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011c30:	2303      	movs	r3, #3
 8011c32:	73fb      	strb	r3, [r7, #15]
    break;
 8011c34:	bf00      	nop
  }
  return usb_status;
 8011c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c38:	4618      	mov	r0, r3
 8011c3a:	3714      	adds	r7, #20
 8011c3c:	46bd      	mov	sp, r7
 8011c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c42:	4770      	bx	lr

08011c44 <__errno>:
 8011c44:	4b01      	ldr	r3, [pc, #4]	; (8011c4c <__errno+0x8>)
 8011c46:	6818      	ldr	r0, [r3, #0]
 8011c48:	4770      	bx	lr
 8011c4a:	bf00      	nop
 8011c4c:	20000194 	.word	0x20000194

08011c50 <__libc_init_array>:
 8011c50:	b570      	push	{r4, r5, r6, lr}
 8011c52:	4d0d      	ldr	r5, [pc, #52]	; (8011c88 <__libc_init_array+0x38>)
 8011c54:	4c0d      	ldr	r4, [pc, #52]	; (8011c8c <__libc_init_array+0x3c>)
 8011c56:	1b64      	subs	r4, r4, r5
 8011c58:	10a4      	asrs	r4, r4, #2
 8011c5a:	2600      	movs	r6, #0
 8011c5c:	42a6      	cmp	r6, r4
 8011c5e:	d109      	bne.n	8011c74 <__libc_init_array+0x24>
 8011c60:	4d0b      	ldr	r5, [pc, #44]	; (8011c90 <__libc_init_array+0x40>)
 8011c62:	4c0c      	ldr	r4, [pc, #48]	; (8011c94 <__libc_init_array+0x44>)
 8011c64:	f000 f9a6 	bl	8011fb4 <_init>
 8011c68:	1b64      	subs	r4, r4, r5
 8011c6a:	10a4      	asrs	r4, r4, #2
 8011c6c:	2600      	movs	r6, #0
 8011c6e:	42a6      	cmp	r6, r4
 8011c70:	d105      	bne.n	8011c7e <__libc_init_array+0x2e>
 8011c72:	bd70      	pop	{r4, r5, r6, pc}
 8011c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c78:	4798      	blx	r3
 8011c7a:	3601      	adds	r6, #1
 8011c7c:	e7ee      	b.n	8011c5c <__libc_init_array+0xc>
 8011c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8011c82:	4798      	blx	r3
 8011c84:	3601      	adds	r6, #1
 8011c86:	e7f2      	b.n	8011c6e <__libc_init_array+0x1e>
 8011c88:	08012164 	.word	0x08012164
 8011c8c:	08012164 	.word	0x08012164
 8011c90:	08012164 	.word	0x08012164
 8011c94:	08012168 	.word	0x08012168

08011c98 <__retarget_lock_acquire_recursive>:
 8011c98:	4770      	bx	lr

08011c9a <__retarget_lock_release_recursive>:
 8011c9a:	4770      	bx	lr

08011c9c <malloc>:
 8011c9c:	4b02      	ldr	r3, [pc, #8]	; (8011ca8 <malloc+0xc>)
 8011c9e:	4601      	mov	r1, r0
 8011ca0:	6818      	ldr	r0, [r3, #0]
 8011ca2:	f000 b88d 	b.w	8011dc0 <_malloc_r>
 8011ca6:	bf00      	nop
 8011ca8:	20000194 	.word	0x20000194

08011cac <free>:
 8011cac:	4b02      	ldr	r3, [pc, #8]	; (8011cb8 <free+0xc>)
 8011cae:	4601      	mov	r1, r0
 8011cb0:	6818      	ldr	r0, [r3, #0]
 8011cb2:	f000 b819 	b.w	8011ce8 <_free_r>
 8011cb6:	bf00      	nop
 8011cb8:	20000194 	.word	0x20000194

08011cbc <memcpy>:
 8011cbc:	440a      	add	r2, r1
 8011cbe:	4291      	cmp	r1, r2
 8011cc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8011cc4:	d100      	bne.n	8011cc8 <memcpy+0xc>
 8011cc6:	4770      	bx	lr
 8011cc8:	b510      	push	{r4, lr}
 8011cca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011cce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011cd2:	4291      	cmp	r1, r2
 8011cd4:	d1f9      	bne.n	8011cca <memcpy+0xe>
 8011cd6:	bd10      	pop	{r4, pc}

08011cd8 <memset>:
 8011cd8:	4402      	add	r2, r0
 8011cda:	4603      	mov	r3, r0
 8011cdc:	4293      	cmp	r3, r2
 8011cde:	d100      	bne.n	8011ce2 <memset+0xa>
 8011ce0:	4770      	bx	lr
 8011ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8011ce6:	e7f9      	b.n	8011cdc <memset+0x4>

08011ce8 <_free_r>:
 8011ce8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011cea:	2900      	cmp	r1, #0
 8011cec:	d044      	beq.n	8011d78 <_free_r+0x90>
 8011cee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011cf2:	9001      	str	r0, [sp, #4]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	f1a1 0404 	sub.w	r4, r1, #4
 8011cfa:	bfb8      	it	lt
 8011cfc:	18e4      	addlt	r4, r4, r3
 8011cfe:	f000 f94d 	bl	8011f9c <__malloc_lock>
 8011d02:	4a1e      	ldr	r2, [pc, #120]	; (8011d7c <_free_r+0x94>)
 8011d04:	9801      	ldr	r0, [sp, #4]
 8011d06:	6813      	ldr	r3, [r2, #0]
 8011d08:	b933      	cbnz	r3, 8011d18 <_free_r+0x30>
 8011d0a:	6063      	str	r3, [r4, #4]
 8011d0c:	6014      	str	r4, [r2, #0]
 8011d0e:	b003      	add	sp, #12
 8011d10:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011d14:	f000 b948 	b.w	8011fa8 <__malloc_unlock>
 8011d18:	42a3      	cmp	r3, r4
 8011d1a:	d908      	bls.n	8011d2e <_free_r+0x46>
 8011d1c:	6825      	ldr	r5, [r4, #0]
 8011d1e:	1961      	adds	r1, r4, r5
 8011d20:	428b      	cmp	r3, r1
 8011d22:	bf01      	itttt	eq
 8011d24:	6819      	ldreq	r1, [r3, #0]
 8011d26:	685b      	ldreq	r3, [r3, #4]
 8011d28:	1949      	addeq	r1, r1, r5
 8011d2a:	6021      	streq	r1, [r4, #0]
 8011d2c:	e7ed      	b.n	8011d0a <_free_r+0x22>
 8011d2e:	461a      	mov	r2, r3
 8011d30:	685b      	ldr	r3, [r3, #4]
 8011d32:	b10b      	cbz	r3, 8011d38 <_free_r+0x50>
 8011d34:	42a3      	cmp	r3, r4
 8011d36:	d9fa      	bls.n	8011d2e <_free_r+0x46>
 8011d38:	6811      	ldr	r1, [r2, #0]
 8011d3a:	1855      	adds	r5, r2, r1
 8011d3c:	42a5      	cmp	r5, r4
 8011d3e:	d10b      	bne.n	8011d58 <_free_r+0x70>
 8011d40:	6824      	ldr	r4, [r4, #0]
 8011d42:	4421      	add	r1, r4
 8011d44:	1854      	adds	r4, r2, r1
 8011d46:	42a3      	cmp	r3, r4
 8011d48:	6011      	str	r1, [r2, #0]
 8011d4a:	d1e0      	bne.n	8011d0e <_free_r+0x26>
 8011d4c:	681c      	ldr	r4, [r3, #0]
 8011d4e:	685b      	ldr	r3, [r3, #4]
 8011d50:	6053      	str	r3, [r2, #4]
 8011d52:	4421      	add	r1, r4
 8011d54:	6011      	str	r1, [r2, #0]
 8011d56:	e7da      	b.n	8011d0e <_free_r+0x26>
 8011d58:	d902      	bls.n	8011d60 <_free_r+0x78>
 8011d5a:	230c      	movs	r3, #12
 8011d5c:	6003      	str	r3, [r0, #0]
 8011d5e:	e7d6      	b.n	8011d0e <_free_r+0x26>
 8011d60:	6825      	ldr	r5, [r4, #0]
 8011d62:	1961      	adds	r1, r4, r5
 8011d64:	428b      	cmp	r3, r1
 8011d66:	bf04      	itt	eq
 8011d68:	6819      	ldreq	r1, [r3, #0]
 8011d6a:	685b      	ldreq	r3, [r3, #4]
 8011d6c:	6063      	str	r3, [r4, #4]
 8011d6e:	bf04      	itt	eq
 8011d70:	1949      	addeq	r1, r1, r5
 8011d72:	6021      	streq	r1, [r4, #0]
 8011d74:	6054      	str	r4, [r2, #4]
 8011d76:	e7ca      	b.n	8011d0e <_free_r+0x26>
 8011d78:	b003      	add	sp, #12
 8011d7a:	bd30      	pop	{r4, r5, pc}
 8011d7c:	20007274 	.word	0x20007274

08011d80 <sbrk_aligned>:
 8011d80:	b570      	push	{r4, r5, r6, lr}
 8011d82:	4e0e      	ldr	r6, [pc, #56]	; (8011dbc <sbrk_aligned+0x3c>)
 8011d84:	460c      	mov	r4, r1
 8011d86:	6831      	ldr	r1, [r6, #0]
 8011d88:	4605      	mov	r5, r0
 8011d8a:	b911      	cbnz	r1, 8011d92 <sbrk_aligned+0x12>
 8011d8c:	f000 f8f6 	bl	8011f7c <_sbrk_r>
 8011d90:	6030      	str	r0, [r6, #0]
 8011d92:	4621      	mov	r1, r4
 8011d94:	4628      	mov	r0, r5
 8011d96:	f000 f8f1 	bl	8011f7c <_sbrk_r>
 8011d9a:	1c43      	adds	r3, r0, #1
 8011d9c:	d00a      	beq.n	8011db4 <sbrk_aligned+0x34>
 8011d9e:	1cc4      	adds	r4, r0, #3
 8011da0:	f024 0403 	bic.w	r4, r4, #3
 8011da4:	42a0      	cmp	r0, r4
 8011da6:	d007      	beq.n	8011db8 <sbrk_aligned+0x38>
 8011da8:	1a21      	subs	r1, r4, r0
 8011daa:	4628      	mov	r0, r5
 8011dac:	f000 f8e6 	bl	8011f7c <_sbrk_r>
 8011db0:	3001      	adds	r0, #1
 8011db2:	d101      	bne.n	8011db8 <sbrk_aligned+0x38>
 8011db4:	f04f 34ff 	mov.w	r4, #4294967295
 8011db8:	4620      	mov	r0, r4
 8011dba:	bd70      	pop	{r4, r5, r6, pc}
 8011dbc:	20007278 	.word	0x20007278

08011dc0 <_malloc_r>:
 8011dc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011dc4:	1ccd      	adds	r5, r1, #3
 8011dc6:	f025 0503 	bic.w	r5, r5, #3
 8011dca:	3508      	adds	r5, #8
 8011dcc:	2d0c      	cmp	r5, #12
 8011dce:	bf38      	it	cc
 8011dd0:	250c      	movcc	r5, #12
 8011dd2:	2d00      	cmp	r5, #0
 8011dd4:	4607      	mov	r7, r0
 8011dd6:	db01      	blt.n	8011ddc <_malloc_r+0x1c>
 8011dd8:	42a9      	cmp	r1, r5
 8011dda:	d905      	bls.n	8011de8 <_malloc_r+0x28>
 8011ddc:	230c      	movs	r3, #12
 8011dde:	603b      	str	r3, [r7, #0]
 8011de0:	2600      	movs	r6, #0
 8011de2:	4630      	mov	r0, r6
 8011de4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011de8:	4e2e      	ldr	r6, [pc, #184]	; (8011ea4 <_malloc_r+0xe4>)
 8011dea:	f000 f8d7 	bl	8011f9c <__malloc_lock>
 8011dee:	6833      	ldr	r3, [r6, #0]
 8011df0:	461c      	mov	r4, r3
 8011df2:	bb34      	cbnz	r4, 8011e42 <_malloc_r+0x82>
 8011df4:	4629      	mov	r1, r5
 8011df6:	4638      	mov	r0, r7
 8011df8:	f7ff ffc2 	bl	8011d80 <sbrk_aligned>
 8011dfc:	1c43      	adds	r3, r0, #1
 8011dfe:	4604      	mov	r4, r0
 8011e00:	d14d      	bne.n	8011e9e <_malloc_r+0xde>
 8011e02:	6834      	ldr	r4, [r6, #0]
 8011e04:	4626      	mov	r6, r4
 8011e06:	2e00      	cmp	r6, #0
 8011e08:	d140      	bne.n	8011e8c <_malloc_r+0xcc>
 8011e0a:	6823      	ldr	r3, [r4, #0]
 8011e0c:	4631      	mov	r1, r6
 8011e0e:	4638      	mov	r0, r7
 8011e10:	eb04 0803 	add.w	r8, r4, r3
 8011e14:	f000 f8b2 	bl	8011f7c <_sbrk_r>
 8011e18:	4580      	cmp	r8, r0
 8011e1a:	d13a      	bne.n	8011e92 <_malloc_r+0xd2>
 8011e1c:	6821      	ldr	r1, [r4, #0]
 8011e1e:	3503      	adds	r5, #3
 8011e20:	1a6d      	subs	r5, r5, r1
 8011e22:	f025 0503 	bic.w	r5, r5, #3
 8011e26:	3508      	adds	r5, #8
 8011e28:	2d0c      	cmp	r5, #12
 8011e2a:	bf38      	it	cc
 8011e2c:	250c      	movcc	r5, #12
 8011e2e:	4629      	mov	r1, r5
 8011e30:	4638      	mov	r0, r7
 8011e32:	f7ff ffa5 	bl	8011d80 <sbrk_aligned>
 8011e36:	3001      	adds	r0, #1
 8011e38:	d02b      	beq.n	8011e92 <_malloc_r+0xd2>
 8011e3a:	6823      	ldr	r3, [r4, #0]
 8011e3c:	442b      	add	r3, r5
 8011e3e:	6023      	str	r3, [r4, #0]
 8011e40:	e00e      	b.n	8011e60 <_malloc_r+0xa0>
 8011e42:	6822      	ldr	r2, [r4, #0]
 8011e44:	1b52      	subs	r2, r2, r5
 8011e46:	d41e      	bmi.n	8011e86 <_malloc_r+0xc6>
 8011e48:	2a0b      	cmp	r2, #11
 8011e4a:	d916      	bls.n	8011e7a <_malloc_r+0xba>
 8011e4c:	1961      	adds	r1, r4, r5
 8011e4e:	42a3      	cmp	r3, r4
 8011e50:	6025      	str	r5, [r4, #0]
 8011e52:	bf18      	it	ne
 8011e54:	6059      	strne	r1, [r3, #4]
 8011e56:	6863      	ldr	r3, [r4, #4]
 8011e58:	bf08      	it	eq
 8011e5a:	6031      	streq	r1, [r6, #0]
 8011e5c:	5162      	str	r2, [r4, r5]
 8011e5e:	604b      	str	r3, [r1, #4]
 8011e60:	4638      	mov	r0, r7
 8011e62:	f104 060b 	add.w	r6, r4, #11
 8011e66:	f000 f89f 	bl	8011fa8 <__malloc_unlock>
 8011e6a:	f026 0607 	bic.w	r6, r6, #7
 8011e6e:	1d23      	adds	r3, r4, #4
 8011e70:	1af2      	subs	r2, r6, r3
 8011e72:	d0b6      	beq.n	8011de2 <_malloc_r+0x22>
 8011e74:	1b9b      	subs	r3, r3, r6
 8011e76:	50a3      	str	r3, [r4, r2]
 8011e78:	e7b3      	b.n	8011de2 <_malloc_r+0x22>
 8011e7a:	6862      	ldr	r2, [r4, #4]
 8011e7c:	42a3      	cmp	r3, r4
 8011e7e:	bf0c      	ite	eq
 8011e80:	6032      	streq	r2, [r6, #0]
 8011e82:	605a      	strne	r2, [r3, #4]
 8011e84:	e7ec      	b.n	8011e60 <_malloc_r+0xa0>
 8011e86:	4623      	mov	r3, r4
 8011e88:	6864      	ldr	r4, [r4, #4]
 8011e8a:	e7b2      	b.n	8011df2 <_malloc_r+0x32>
 8011e8c:	4634      	mov	r4, r6
 8011e8e:	6876      	ldr	r6, [r6, #4]
 8011e90:	e7b9      	b.n	8011e06 <_malloc_r+0x46>
 8011e92:	230c      	movs	r3, #12
 8011e94:	603b      	str	r3, [r7, #0]
 8011e96:	4638      	mov	r0, r7
 8011e98:	f000 f886 	bl	8011fa8 <__malloc_unlock>
 8011e9c:	e7a1      	b.n	8011de2 <_malloc_r+0x22>
 8011e9e:	6025      	str	r5, [r4, #0]
 8011ea0:	e7de      	b.n	8011e60 <_malloc_r+0xa0>
 8011ea2:	bf00      	nop
 8011ea4:	20007274 	.word	0x20007274

08011ea8 <cleanup_glue>:
 8011ea8:	b538      	push	{r3, r4, r5, lr}
 8011eaa:	460c      	mov	r4, r1
 8011eac:	6809      	ldr	r1, [r1, #0]
 8011eae:	4605      	mov	r5, r0
 8011eb0:	b109      	cbz	r1, 8011eb6 <cleanup_glue+0xe>
 8011eb2:	f7ff fff9 	bl	8011ea8 <cleanup_glue>
 8011eb6:	4621      	mov	r1, r4
 8011eb8:	4628      	mov	r0, r5
 8011eba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011ebe:	f7ff bf13 	b.w	8011ce8 <_free_r>
	...

08011ec4 <_reclaim_reent>:
 8011ec4:	4b2c      	ldr	r3, [pc, #176]	; (8011f78 <_reclaim_reent+0xb4>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	4283      	cmp	r3, r0
 8011eca:	b570      	push	{r4, r5, r6, lr}
 8011ecc:	4604      	mov	r4, r0
 8011ece:	d051      	beq.n	8011f74 <_reclaim_reent+0xb0>
 8011ed0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8011ed2:	b143      	cbz	r3, 8011ee6 <_reclaim_reent+0x22>
 8011ed4:	68db      	ldr	r3, [r3, #12]
 8011ed6:	2b00      	cmp	r3, #0
 8011ed8:	d14a      	bne.n	8011f70 <_reclaim_reent+0xac>
 8011eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011edc:	6819      	ldr	r1, [r3, #0]
 8011ede:	b111      	cbz	r1, 8011ee6 <_reclaim_reent+0x22>
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	f7ff ff01 	bl	8011ce8 <_free_r>
 8011ee6:	6961      	ldr	r1, [r4, #20]
 8011ee8:	b111      	cbz	r1, 8011ef0 <_reclaim_reent+0x2c>
 8011eea:	4620      	mov	r0, r4
 8011eec:	f7ff fefc 	bl	8011ce8 <_free_r>
 8011ef0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8011ef2:	b111      	cbz	r1, 8011efa <_reclaim_reent+0x36>
 8011ef4:	4620      	mov	r0, r4
 8011ef6:	f7ff fef7 	bl	8011ce8 <_free_r>
 8011efa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8011efc:	b111      	cbz	r1, 8011f04 <_reclaim_reent+0x40>
 8011efe:	4620      	mov	r0, r4
 8011f00:	f7ff fef2 	bl	8011ce8 <_free_r>
 8011f04:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8011f06:	b111      	cbz	r1, 8011f0e <_reclaim_reent+0x4a>
 8011f08:	4620      	mov	r0, r4
 8011f0a:	f7ff feed 	bl	8011ce8 <_free_r>
 8011f0e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8011f10:	b111      	cbz	r1, 8011f18 <_reclaim_reent+0x54>
 8011f12:	4620      	mov	r0, r4
 8011f14:	f7ff fee8 	bl	8011ce8 <_free_r>
 8011f18:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8011f1a:	b111      	cbz	r1, 8011f22 <_reclaim_reent+0x5e>
 8011f1c:	4620      	mov	r0, r4
 8011f1e:	f7ff fee3 	bl	8011ce8 <_free_r>
 8011f22:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8011f24:	b111      	cbz	r1, 8011f2c <_reclaim_reent+0x68>
 8011f26:	4620      	mov	r0, r4
 8011f28:	f7ff fede 	bl	8011ce8 <_free_r>
 8011f2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011f2e:	b111      	cbz	r1, 8011f36 <_reclaim_reent+0x72>
 8011f30:	4620      	mov	r0, r4
 8011f32:	f7ff fed9 	bl	8011ce8 <_free_r>
 8011f36:	69a3      	ldr	r3, [r4, #24]
 8011f38:	b1e3      	cbz	r3, 8011f74 <_reclaim_reent+0xb0>
 8011f3a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8011f3c:	4620      	mov	r0, r4
 8011f3e:	4798      	blx	r3
 8011f40:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8011f42:	b1b9      	cbz	r1, 8011f74 <_reclaim_reent+0xb0>
 8011f44:	4620      	mov	r0, r4
 8011f46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011f4a:	f7ff bfad 	b.w	8011ea8 <cleanup_glue>
 8011f4e:	5949      	ldr	r1, [r1, r5]
 8011f50:	b941      	cbnz	r1, 8011f64 <_reclaim_reent+0xa0>
 8011f52:	3504      	adds	r5, #4
 8011f54:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8011f56:	2d80      	cmp	r5, #128	; 0x80
 8011f58:	68d9      	ldr	r1, [r3, #12]
 8011f5a:	d1f8      	bne.n	8011f4e <_reclaim_reent+0x8a>
 8011f5c:	4620      	mov	r0, r4
 8011f5e:	f7ff fec3 	bl	8011ce8 <_free_r>
 8011f62:	e7ba      	b.n	8011eda <_reclaim_reent+0x16>
 8011f64:	680e      	ldr	r6, [r1, #0]
 8011f66:	4620      	mov	r0, r4
 8011f68:	f7ff febe 	bl	8011ce8 <_free_r>
 8011f6c:	4631      	mov	r1, r6
 8011f6e:	e7ef      	b.n	8011f50 <_reclaim_reent+0x8c>
 8011f70:	2500      	movs	r5, #0
 8011f72:	e7ef      	b.n	8011f54 <_reclaim_reent+0x90>
 8011f74:	bd70      	pop	{r4, r5, r6, pc}
 8011f76:	bf00      	nop
 8011f78:	20000194 	.word	0x20000194

08011f7c <_sbrk_r>:
 8011f7c:	b538      	push	{r3, r4, r5, lr}
 8011f7e:	4d06      	ldr	r5, [pc, #24]	; (8011f98 <_sbrk_r+0x1c>)
 8011f80:	2300      	movs	r3, #0
 8011f82:	4604      	mov	r4, r0
 8011f84:	4608      	mov	r0, r1
 8011f86:	602b      	str	r3, [r5, #0]
 8011f88:	f7ef fcee 	bl	8001968 <_sbrk>
 8011f8c:	1c43      	adds	r3, r0, #1
 8011f8e:	d102      	bne.n	8011f96 <_sbrk_r+0x1a>
 8011f90:	682b      	ldr	r3, [r5, #0]
 8011f92:	b103      	cbz	r3, 8011f96 <_sbrk_r+0x1a>
 8011f94:	6023      	str	r3, [r4, #0]
 8011f96:	bd38      	pop	{r3, r4, r5, pc}
 8011f98:	2000727c 	.word	0x2000727c

08011f9c <__malloc_lock>:
 8011f9c:	4801      	ldr	r0, [pc, #4]	; (8011fa4 <__malloc_lock+0x8>)
 8011f9e:	f7ff be7b 	b.w	8011c98 <__retarget_lock_acquire_recursive>
 8011fa2:	bf00      	nop
 8011fa4:	20007270 	.word	0x20007270

08011fa8 <__malloc_unlock>:
 8011fa8:	4801      	ldr	r0, [pc, #4]	; (8011fb0 <__malloc_unlock+0x8>)
 8011faa:	f7ff be76 	b.w	8011c9a <__retarget_lock_release_recursive>
 8011fae:	bf00      	nop
 8011fb0:	20007270 	.word	0x20007270

08011fb4 <_init>:
 8011fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fb6:	bf00      	nop
 8011fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fba:	bc08      	pop	{r3}
 8011fbc:	469e      	mov	lr, r3
 8011fbe:	4770      	bx	lr

08011fc0 <_fini>:
 8011fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011fc2:	bf00      	nop
 8011fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011fc6:	bc08      	pop	{r3}
 8011fc8:	469e      	mov	lr, r3
 8011fca:	4770      	bx	lr
